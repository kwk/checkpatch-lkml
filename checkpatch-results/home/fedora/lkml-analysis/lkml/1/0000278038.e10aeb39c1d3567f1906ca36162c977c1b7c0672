WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
> > Actually I'd prefer to fix this for real.  This single open stuff aswell

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#41: 
> > Actually I'd prefer to fix this for real.  This single open stuff aswell
                                              ^

WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#41: 
> > Actually I'd prefer to fix this for real.  This single open stuff aswell
                                                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#42: 
> > as same set of ioctls are duplicated all over the watchdog drivers.  We'd
                                                                        ^

WARNING:TYPO_SPELLING: 'mutiple' may be misspelled - perhaps 'multiple'?
#64: 
a sysfs interface so that we can start handling mutiple devices.
                                                ^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#121: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#132: FILE: drivers/watchdog/core/Kconfig:7:
+config WATCHDOG_CORE
+	tristate "Uniform Watchdog Device Driver"
+	depends on EXPERIMENTAL
+	default m
+	---help---
+	  Say Y here if you want to use the new uniform watchdog device
+	  driver. This driver provides a framework for all watchdog
+	  device drivers and gives them the /dev/watchdog interface (and
+	  later also the sysfs interface).
+
+	  At this moment we have no watchdog device drivers using this new
+	  framework.
+
+	  To compile this driver as a module, choose M here: the module will
+	  be called watchdog_core.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#148: FILE: drivers/watchdog/core/Kconfig:23:
+config WATCHDOG_DEBUG_CORE
+	bool "Uniform Watchdog Device Driver debugging output"
+	depends on WATCHDOG_CORE
+	default n
+	---help---
+	  Say Y here if you want the Uniform Watchdog Device Driver to
+	  produce debugging information. Select this if you are having a
+	  problem with the uniform watchdog device driver and want to see
+	  more of what is really happening.
+

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#174: FILE: drivers/watchdog/core/watchdog_core.c:7:
new file mode 100644

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#179: FILE: drivers/watchdog/core/watchdog_core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#223: FILE: drivers/watchdog/core/watchdog_core.c:45:
+extern int watchdog_dev_register(struct watchdog_device *, struct device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#223: FILE: drivers/watchdog/core/watchdog_core.c:45:
+extern int watchdog_dev_register(struct watchdog_device *, struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#223: FILE: drivers/watchdog/core/watchdog_core.c:45:
+extern int watchdog_dev_register(struct watchdog_device *, struct device *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#224: FILE: drivers/watchdog/core/watchdog_core.c:46:
+extern int watchdog_dev_unregister(struct watchdog_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#224: FILE: drivers/watchdog/core/watchdog_core.c:46:
+extern int watchdog_dev_unregister(struct watchdog_device *);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#230: FILE: drivers/watchdog/core/watchdog_core.c:52:
+ *	Returns the new structure, or NULL if an error occured.
   	                                               ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#241: FILE: drivers/watchdog/core/watchdog_core.c:63:
+		printk(KERN_ERR PFX "Unable to allocate watchdog device\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#241: FILE: drivers/watchdog/core/watchdog_core.c:63:
+	if (!p) {
+		printk(KERN_ERR PFX "Unable to allocate watchdog device\n");

CHECK:SPACING: No space is necessary after a cast
#244: FILE: drivers/watchdog/core/watchdog_core.c:66:
+	dev = (struct watchdog_device *) p;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->watchdog_state == WATCHDOG_UNINITIALIZED'
#259: FILE: drivers/watchdog/core/watchdog_core.c:81:
+	if (!((dev->watchdog_state == WATCHDOG_UNINITIALIZED) ||
+	      (dev->watchdog_state == WATCHDOG_UNREGISTERED))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->watchdog_state == WATCHDOG_UNREGISTERED'
#259: FILE: drivers/watchdog/core/watchdog_core.c:81:
+	if (!((dev->watchdog_state == WATCHDOG_UNINITIALIZED) ||
+	      (dev->watchdog_state == WATCHDOG_UNREGISTERED))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#261: FILE: drivers/watchdog/core/watchdog_core.c:83:
+		printk(KERN_ERR PFX "Unable to destroy a watchdog device that is still in use\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#282: FILE: drivers/watchdog/core/watchdog_core.c:104:
+	if (dev == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->watchdog_ops"
#283: FILE: drivers/watchdog/core/watchdog_core.c:105:
+	    dev->watchdog_ops == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->watchdog_ops->start"
#286: FILE: drivers/watchdog/core/watchdog_core.c:108:
+	if (dev->watchdog_ops->start == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->watchdog_ops->stop"
#287: FILE: drivers/watchdog/core/watchdog_core.c:109:
+	    dev->watchdog_ops->stop == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->watchdog_ops->keepalive"
#288: FILE: drivers/watchdog/core/watchdog_core.c:110:
+	    dev->watchdog_ops->keepalive == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->watchdog_state == WATCHDOG_UNINITIALIZED'
#291: FILE: drivers/watchdog/core/watchdog_core.c:113:
+	if (!((dev->watchdog_state == WATCHDOG_UNINITIALIZED) ||
+	      (dev->watchdog_state == WATCHDOG_UNREGISTERED))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->watchdog_state == WATCHDOG_UNREGISTERED'
#291: FILE: drivers/watchdog/core/watchdog_core.c:113:
+	if (!((dev->watchdog_state == WATCHDOG_UNINITIALIZED) ||
+	      (dev->watchdog_state == WATCHDOG_UNREGISTERED))) {

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#293: FILE: drivers/watchdog/core/watchdog_core.c:115:
+		printk(KERN_ERR PFX "Unable to register a watchdog device that is allready in use\n");
 		                                                                  ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#293: FILE: drivers/watchdog/core/watchdog_core.c:115:
+		printk(KERN_ERR PFX "Unable to register a watchdog device that is allready in use\n");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#298: FILE: drivers/watchdog/core/watchdog_core.c:120:
+	if (dev->watchdog_ops->set_heartbeat) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#306: FILE: drivers/watchdog/core/watchdog_core.c:128:
+		printk(KERN_ERR PFX "error registering /dev/watchdog (err=%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: drivers/watchdog/core/watchdog_core.c:129:
+		printk(KERN_ERR PFX "error registering /dev/watchdog (err=%d)",
+			ret);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#326: FILE: drivers/watchdog/core/watchdog_core.c:148:
+	if (dev == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->watchdog_state == WATCHDOG_UNINITIALIZED'
#329: FILE: drivers/watchdog/core/watchdog_core.c:151:
+	if ((dev->watchdog_state == WATCHDOG_UNINITIALIZED) ||
+	    (dev->watchdog_state == WATCHDOG_UNREGISTERED)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->watchdog_state == WATCHDOG_UNREGISTERED'
#329: FILE: drivers/watchdog/core/watchdog_core.c:151:
+	if ((dev->watchdog_state == WATCHDOG_UNINITIALIZED) ||
+	    (dev->watchdog_state == WATCHDOG_UNREGISTERED)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#331: FILE: drivers/watchdog/core/watchdog_core.c:153:
+		printk(KERN_ERR PFX "Unable to unregister a watchdog device that has not been registered\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#337: FILE: drivers/watchdog/core/watchdog_core.c:159:
+		printk(KERN_ERR PFX "error unregistering /dev/watchdog (err=%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: drivers/watchdog/core/watchdog_core.c:160:
+		printk(KERN_ERR PFX "error unregistering /dev/watchdog (err=%d)",
+			ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#349: FILE: drivers/watchdog/core/watchdog_core.c:171:
+	printk(KERN_INFO "Uniform watchdog device driver v%s loaded\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: drivers/watchdog/core/watchdog_core.c:172:
+	printk(KERN_INFO "Uniform watchdog device driver v%s loaded\n",
+		DRV_VERSION);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#356: FILE: drivers/watchdog/core/watchdog_core.c:178:
+	printk(KERN_INFO "Uniform watchdog device driver unloaded\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#374: FILE: drivers/watchdog/core/watchdog_dev.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#416: FILE: drivers/watchdog/core/watchdog_dev.c:43:
+	printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#416: FILE: drivers/watchdog/core/watchdog_dev.c:43:
+	printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## args)
 	                                                  ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#416: FILE: drivers/watchdog/core/watchdog_dev.c:43:
+	printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#418: FILE: drivers/watchdog/core/watchdog_dev.c:45:
+	printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#418: FILE: drivers/watchdog/core/watchdog_dev.c:45:
+	printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ## arg)

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#436: FILE: drivers/watchdog/core/watchdog_dev.c:63:
+static unsigned long watchdog_dev_open;		/* wether or not /dev/watchdog has been opened */
                                        		   ^^^^^^

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#437: FILE: drivers/watchdog/core/watchdog_dev.c:64:
+static char received_magic_char;		/* wether or not we received the magic char */
                                 		   ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: drivers/watchdog/core/watchdog_dev.c:84:
+static ssize_t watchdog_write(struct file *file, const char __user *data,
+				size_t len, loff_t *ppos)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#472: FILE: drivers/watchdog/core/watchdog_dev.c:99:
+			 * five months ago... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#475: FILE: drivers/watchdog/core/watchdog_dev.c:102:
+			/* scan to see wether or not we got the magic character */
 			               ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#478: FILE: drivers/watchdog/core/watchdog_dev.c:105:
+				char c;
+				if (get_user(c, data + i))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#488: FILE: drivers/watchdog/core/watchdog_dev.c:115:
+		 * the watchdog is active */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: drivers/watchdog/core/watchdog_dev.c:134:
+static int watchdog_ioctl(struct inode *inode, struct file *file,
+				unsigned int cmd, unsigned long arg)

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#576: FILE: drivers/watchdog/core/watchdog_dev.c:203:
+			/* only try to stop the watchdog if it's allready running */
 			                                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#582: FILE: drivers/watchdog/core/watchdog_dev.c:209:
+					printk(KERN_CRIT PFX "WDIOS_DISABLECARD not successfull! (err=%d)",
 					                                            ^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#582: FILE: drivers/watchdog/core/watchdog_dev.c:209:
+					printk(KERN_CRIT PFX "WDIOS_DISABLECARD not successfull! (err=%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/watchdog/core/watchdog_dev.c:210:
+					printk(KERN_CRIT PFX "WDIOS_DISABLECARD not successfull! (err=%d)",
+						err);

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#590: FILE: drivers/watchdog/core/watchdog_dev.c:217:
+			/* if the watchdog is not allready running, try to start it */
 			                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#596: FILE: drivers/watchdog/core/watchdog_dev.c:223:
+					printk(KERN_CRIT PFX "WDIOS_ENABLECARD not successfull! (err=%d)",
 					                                           ^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#596: FILE: drivers/watchdog/core/watchdog_dev.c:223:
+					printk(KERN_CRIT PFX "WDIOS_ENABLECARD not successfull! (err=%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/watchdog/core/watchdog_dev.c:224:
+					printk(KERN_CRIT PFX "WDIOS_ENABLECARD not successfull! (err=%d)",
+						err);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#619: FILE: drivers/watchdog/core/watchdog_dev.c:246:
+		 * heartbeat) */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'watchdogdev->watchdog_state == WATCHDOG_STARTED'
#620: FILE: drivers/watchdog/core/watchdog_dev.c:247:
+		if (watchdogdev->watchdog_ops->keepalive &&
+		    (watchdogdev->watchdog_state == WATCHDOG_STARTED))

WARNING:TYPO_SPELLING: 'get's' may be misspelled - perhaps 'gets'?
#650: FILE: drivers/watchdog/core/watchdog_dev.c:277:
+ *	When the /dev/watchdog device get's opened, we start the watchdog
   	                              ^^^^^

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#672: FILE: drivers/watchdog/core/watchdog_dev.c:299:
+	/* if the watchdog is not allready running, try to start it */
 	                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'get's' may be misspelled - perhaps 'gets'?
#690: FILE: drivers/watchdog/core/watchdog_dev.c:317:
+ *	This is the code for when /dev/watchdog get's closed. We will only
   	                                        ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'watchdogdev->watchdog_state == WATCHDOG_STARTED'
#702: FILE: drivers/watchdog/core/watchdog_dev.c:329:
+	if (watchdogdev && (watchdogdev->watchdog_state == WATCHDOG_STARTED)) {

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#711: FILE: drivers/watchdog/core/watchdog_dev.c:338:
+					printk(KERN_CRIT PFX "Watchdog didn't stop successfull! (err=%d)",
 					                                           ^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#711: FILE: drivers/watchdog/core/watchdog_dev.c:338:
+					printk(KERN_CRIT PFX "Watchdog didn't stop successfull! (err=%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: drivers/watchdog/core/watchdog_dev.c:339:
+					printk(KERN_CRIT PFX "Watchdog didn't stop successfull! (err=%d)",
+						err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#715: FILE: drivers/watchdog/core/watchdog_dev.c:342:
+				printk(KERN_CRIT PFX "Unable to stop watchdog!");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#719: FILE: drivers/watchdog/core/watchdog_dev.c:346:
+			 * /dev/watchdog but the watchdog keeps running... */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#720: FILE: drivers/watchdog/core/watchdog_dev.c:347:
+			printk(KERN_CRIT PFX "Unexpected close, not stopping watchdog!");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#721: FILE: drivers/watchdog/core/watchdog_dev.c:348:
+			if (watchdogdev->watchdog_ops && watchdogdev->watchdog_ops->keepalive) {
+				watchdogdev->watchdog_ops->keepalive(watchdogdev);
+			}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#739: FILE: drivers/watchdog/core/watchdog_dev.c:366:
+static struct file_operations watchdog_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#774: FILE: drivers/watchdog/core/watchdog_dev.c:401:
+		printk(KERN_ERR PFX "another watchdog device is allready registered as /dev/watchdog\n");
 		                                                ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#774: FILE: drivers/watchdog/core/watchdog_dev.c:401:
+		printk(KERN_ERR PFX "another watchdog device is allready registered as /dev/watchdog\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#783: FILE: drivers/watchdog/core/watchdog_dev.c:410:
+		printk(KERN_ERR PFX "cannot register miscdev on minor=%d (err=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: drivers/watchdog/core/watchdog_dev.c:411:
+		printk(KERN_ERR PFX "cannot register miscdev on minor=%d (err=%d)\n",
+			watchdog_miscdev.minor, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#809: FILE: drivers/watchdog/core/watchdog_dev.c:436:
+		printk(KERN_ERR PFX "there is no watchdog registered\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#815: FILE: drivers/watchdog/core/watchdog_dev.c:442:
+		printk(KERN_ERR PFX "cannot unregister non-existing watchdog-driver\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#821: FILE: drivers/watchdog/core/watchdog_dev.c:448:
+		printk(KERN_ERR PFX "another watchdog device is running\n");

WARNING:CONST_STRUCT: struct watchdog_ops should normally be const
#855: FILE: include/linux/watchdog.h:64:
+struct watchdog_ops;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#861: FILE: include/linux/watchdog.h:70:
+		int	(*start)(struct watchdog_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#863: FILE: include/linux/watchdog.h:72:
+		int	(*stop)(struct watchdog_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#865: FILE: include/linux/watchdog.h:74:
+		int	(*keepalive)(struct watchdog_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#868: FILE: include/linux/watchdog.h:77:
+		int	(*set_heartbeat)(struct watchdog_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#868: FILE: include/linux/watchdog.h:77:
+		int	(*set_heartbeat)(struct watchdog_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#870: FILE: include/linux/watchdog.h:79:
+		int	(*get_status)(struct watchdog_device *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#870: FILE: include/linux/watchdog.h:79:
+		int	(*get_status)(struct watchdog_device *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#872: FILE: include/linux/watchdog.h:81:
+		int	(*get_timeleft)(struct watchdog_device *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#872: FILE: include/linux/watchdog.h:81:
+		int	(*get_timeleft)(struct watchdog_device *, int *);

WARNING:CONST_STRUCT: struct watchdog_ops should normally be const
#882: FILE: include/linux/watchdog.h:91:
+	struct watchdog_ops *watchdog_ops;	/* link to watchdog_ops */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#897: FILE: include/linux/watchdog.h:106:
+extern struct watchdog_device *alloc_watchdogdev(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#898: FILE: include/linux/watchdog.h:107:
+extern int register_watchdogdevice(struct watchdog_device *, struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#898: FILE: include/linux/watchdog.h:107:
+extern int register_watchdogdevice(struct watchdog_device *, struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#898: FILE: include/linux/watchdog.h:107:
+extern int register_watchdogdevice(struct watchdog_device *, struct device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#899: FILE: include/linux/watchdog.h:108:
+extern int unregister_watchdogdevice(struct watchdog_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#899: FILE: include/linux/watchdog.h:108:
+extern int unregister_watchdogdevice(struct watchdog_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#900: FILE: include/linux/watchdog.h:109:
+extern int free_watchdogdev(struct watchdog_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_device *' should also have an identifier name
#900: FILE: include/linux/watchdog.h:109:
+extern int free_watchdogdev(struct watchdog_device *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000278038.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 73 warnings, 30 checks, 771 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000278038.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
