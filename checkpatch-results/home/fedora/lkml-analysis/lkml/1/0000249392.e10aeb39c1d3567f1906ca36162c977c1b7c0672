CHECK:BRACES: braces {} should be used on all arms of this statement
#198: FILE: drivers/ata/libata-scsi.c:176:
+	if (likely(ata_scsi_park_count)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#202: FILE: drivers/ata/libata-scsi.c:180:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: drivers/ata/libata-scsi.c:299:
+^I^I^I^I   struct device_attribute *attr, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#271: FILE: drivers/ata/libata-scsi.c:312:
+	seconds = simple_strtoul((char *)buf, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#273: FILE: drivers/ata/libata-scsi.c:314:
+	if (p == buf || (*p != '\0' && (*p != '\n' || *(p + 1) != '\0'))
+	    || seconds > MAX_PARK_TIMEOUT)

CHECK:BRACES: braces {} should be used on all arms of this statement
#294: FILE: drivers/ata/libata-scsi.c:335:
+		if (rc) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: drivers/ata/libata-scsi.c:340:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#302: FILE: drivers/ata/libata-scsi.c:343:
+		if (del_timer(&dev->park_timer)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#306: FILE: drivers/ata/libata-scsi.c:347:
+		} else

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ata_scsi_park_show' to 'unload_heads_show' 'ata_scsi_park_store' to 'unload_heads_store'
#315: FILE: drivers/ata/libata-scsi.c:356:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#316: FILE: drivers/ata/libata-scsi.c:357:
+DEVICE_ATTR(unload_heads, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#352: FILE: drivers/ata/libata-scsi.c:1115:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#472: FILE: drivers/ata/libata-scsi.c:1960:
+		vl_cdb = (struct scsi_varlen_cdb_hdr *) cmd->cmnd;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#474: FILE: drivers/ata/libata-scsi.c:1962:
+		if (vl_cdb->opcode != VARIABLE_LENGTH_CMD
+		    || vl_cdb->service_action != UNPARK_HEADS)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'scmd->cmnd[0] != ATA_16'
#569: FILE: drivers/ata/libata-scsi.c:3208:
+		if (likely((scmd->cmnd[0] != ATA_16) || !atapi_passthru16)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#614: FILE: drivers/ata/libata.h:157:
+extern int ata_scsi_register_pm_notifier(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#615: FILE: drivers/ata/libata.h:158:
+extern int ata_scsi_unregister_pm_notifier(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249392.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 4 warnings, 12 checks, 544 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249392.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
