WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> /home/wcohen/research/profiling/oprofile/oprofile-0.9.2-perfmon2/daemon/opd_perfmon.c:384: 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: daemon/opd_perfmon_compat.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: daemon/opd_perfmon_compat.c:44:
+static int perfmonctl(int fd, int cmd, void * arg, int narg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: daemon/opd_perfmon_compat.c:56:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#213: FILE: daemon/opd_perfmon_compat.c:90:
+#define PMC_PRIV_MONITOR (1UL << 6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#214: FILE: daemon/opd_perfmon_compat.c:91:
+#define PMC_USER (1UL << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#215: FILE: daemon/opd_perfmon_compat.c:92:
+#define PMC_KERNEL (1UL << 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#218: FILE: daemon/opd_perfmon_compat.c:95:
+		struct opd_event * event = &opd_events[i];

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: daemon/opd_perfmon_compat.c:101:
+^I^I              : (pc[i].reg_value &= ~PMC_USER);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: daemon/opd_perfmon_compat.c:103:
+^I^I                : (pc[i].reg_value &= ~PMC_KERNEL);$

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#291: FILE: daemon/opd_perfmon.c:35:
+#if !defined( __ia64__) && ! defined(OPROF_PERFMON2)
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#291: FILE: daemon/opd_perfmon.c:35:
+#if !defined( __ia64__) && ! defined(OPROF_PERFMON2)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: daemon/opd_perfmon.c:43:
+static void fatal_error(char *fmt,...) __attribute__((noreturn));
                                  ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#299: FILE: daemon/opd_perfmon.c:43:
+static void fatal_error(char *fmt,...) __attribute__((noreturn));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#302: FILE: daemon/opd_perfmon.c:46:
+#define PFM_VERSION_22 (2<<16|2)
                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#302: FILE: daemon/opd_perfmon.c:46:
+#define PFM_VERSION_22 (2<<16|2)
                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: daemon/opd_perfmon.c:193:
+		fatal_error("oprofiled: install of SIGUSR1 handler failed: %s\n",
+			strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: daemon/opd_perfmon.c:201:
+		fatal_error("oprofiled: install of SIGUSR2 handler failed: %s\n",
+			strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: daemon/opd_perfmon.c:209:
+		fatal_error("oprofiled: install of SIGTERM handler failed: %s\n",
+			strerror(errno));

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: daemon/opd_perfmon.c:223:
+^I        ^Istrerror(errno));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#468: FILE: daemon/opd_perfmon.c:223:
+^I        ^Istrerror(errno));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: daemon/opd_perfmon.c:223:
+		fatal_error("create context failed: %s\n",
+	        	strerror(errno));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: daemon/opd_perfmon.c:232:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: daemon/opd_perfmon.c:240:
+^I        ^Istrerror(errno));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#494: FILE: daemon/opd_perfmon.c:240:
+^I        ^Istrerror(errno));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: daemon/opd_perfmon.c:240:
+		fatal_error("create write PMU: %s\n",
+	        	strerror(errno));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#541: FILE: daemon/opd_perfmon.c:244:
+static void load_context(struct child * self, size_t cpu)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: daemon/opd_perfmon.c:247:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: daemon/opd_perfmon.c:266:
+			fatal_error("Failed to write child pipe with %s\n",
+				strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: daemon/opd_perfmon.c:327:
+			fatal_error("Failed to read child pipe with %s\n",
 			        strerror(errno));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fp"
#626: FILE: daemon/opd_perfmon.c:345:
+	if (fp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#634: FILE: daemon/opd_perfmon.c:353:
+	if (p == NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#742: FILE: daemon/opd_perfmon.h:22:
+extern void do_perfmon_init_compat(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#743: FILE: daemon/opd_perfmon.h:23:
+extern int  do_start_child_compat(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#744: FILE: daemon/opd_perfmon.h:24:
+extern int  do_stop_child_compat(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#745: FILE: daemon/opd_perfmon.h:25:
+extern int  do_create_context_compat(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: daemon/opd_perfmon.h:26:
+extern int  do_write_pmu_compat(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#747: FILE: daemon/opd_perfmon.h:27:
+extern int  do_load_context_compat(int fd, pid_t pid, size_t cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#790: FILE: daemon/opd_perfmon.h:102:
+extern void do_perfmon_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#791: FILE: daemon/opd_perfmon.h:103:
+extern int do_start_child(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#792: FILE: daemon/opd_perfmon.h:104:
+extern int do_stop_child(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#793: FILE: daemon/opd_perfmon.h:105:
+extern int do_create_context(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#794: FILE: daemon/opd_perfmon.h:106:
+extern int do_write_pmu(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#795: FILE: daemon/opd_perfmon.h:107:
+extern int do_load_context(int fd, pid_t pid, size_t cpu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#809: FILE: daemon/opd_perfmon_22.c:1:
+/**

WARNING:NEW_TYPEDEFS: do not add new typedefs
#845: FILE: daemon/opd_perfmon_22.c:37:
+typedef struct {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#848: FILE: daemon/opd_perfmon_22.c:40:
+	uint64_t *avail_pmcs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#855: FILE: daemon/opd_perfmon_22.c:47:
+static int pmc_is_avail(uint64_t *avail, unsigned int i)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#857: FILE: daemon/opd_perfmon_22.c:49:
+	return avail[i>>6] & (1ULL << (i&63));
 	              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#857: FILE: daemon/opd_perfmon_22.c:49:
+	return avail[i>>6] & (1ULL << (i&63));
 	                                ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#860: FILE: daemon/opd_perfmon_22.c:52:
+#if 0

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#864: FILE: daemon/opd_perfmon_22.c:56:
+ * ^Ifor P6, Opteron, PII, Core Duo: identity$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#892: FILE: daemon/opd_perfmon_22.c:84:
+	for(i=0; i < 32; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#892: FILE: daemon/opd_perfmon_22.c:84:
+	for(i=0; i < 32; i++) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#893: FILE: daemon/opd_perfmon_22.c:85:
+		if (setf.set_avail_pmds[0] & (1ULL<<i)) {
 		                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#894: FILE: daemon/opd_perfmon_22.c:86:
+			*avail_mask |= 1 <<i;
 			                 ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#906: FILE: daemon/opd_perfmon_22.c:98:
+ * ^Ifor P6, Opteron, PII, Core Duo: identity$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#913: FILE: daemon/opd_perfmon_22.c:105:
+		struct opd_event * event = &opd_events[i];

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#931: FILE: daemon/opd_perfmon_22.c:123:
+		desc->pd[i].reg_value       = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#932: FILE: daemon/opd_perfmon_22.c:124:
+		desc->pd[i].reg_short_reset = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#933: FILE: daemon/opd_perfmon_22.c:125:
+		desc->pd[i].reg_long_reset  = - (uint64_t)event->count;
 		                              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#938: FILE: daemon/opd_perfmon_22.c:130:
+	desc->n_pmcs = desc->n_pmds = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#944: FILE: daemon/opd_perfmon_22.c:136:
+ * ^Ifor Core 2 Duo: generic counters starts at PMC4, need to setup global control$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#948: FILE: daemon/opd_perfmon_22.c:140:
+	uint64_t enable_mask = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#952: FILE: daemon/opd_perfmon_22.c:144:
+		struct opd_event * event = &opd_events[i];

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#973: FILE: daemon/opd_perfmon_22.c:165:
+		desc->pd[i].reg_value       = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#974: FILE: daemon/opd_perfmon_22.c:166:
+		desc->pd[i].reg_short_reset = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#975: FILE: daemon/opd_perfmon_22.c:167:
+		desc->pd[i].reg_long_reset  = - (uint64_t)event->count;
 		                              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#994: FILE: daemon/opd_perfmon_22.c:186:
+ * ^Ifor all IA-64 processors: identity$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1001: FILE: daemon/opd_perfmon_22.c:193:
+		struct opd_event * event = &opd_events[i];

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1018: FILE: daemon/opd_perfmon_22.c:210:
+		desc->pd[i].reg_value       = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1019: FILE: daemon/opd_perfmon_22.c:211:
+		desc->pd[i].reg_short_reset = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1020: FILE: daemon/opd_perfmon_22.c:212:
+		desc->pd[i].reg_long_reset  = - (uint64_t)event->count;
 		                              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1025: FILE: daemon/opd_perfmon_22.c:217:
+	desc->n_pmcs = desc->n_pmds = i;

CHECK:BIT_MACRO: Prefer using the BIT macro
#1035: FILE: daemon/opd_perfmon_22.c:227:
+#define CTR_BPU_0      (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1036: FILE: daemon/opd_perfmon_22.c:228:
+#define CTR_MS_0       (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1037: FILE: daemon/opd_perfmon_22.c:229:
+#define CTR_FLAME_0    (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1038: FILE: daemon/opd_perfmon_22.c:230:
+#define CTR_IQ_4       (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1039: FILE: daemon/opd_perfmon_22.c:231:
+#define CTR_BPU_2      (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1040: FILE: daemon/opd_perfmon_22.c:232:
+#define CTR_MS_2       (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1041: FILE: daemon/opd_perfmon_22.c:233:
+#define CTR_FLAME_2    (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1042: FILE: daemon/opd_perfmon_22.c:234:
+#define CTR_IQ_5       (1 << 7)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1126: FILE: daemon/opd_perfmon_22.c:318:
+static struct p4_counter_binding p4_counters [] = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1146: FILE: daemon/opd_perfmon_22.c:338:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1149: FILE: daemon/opd_perfmon_22.c:341:
+^I^I0x05, 0x06, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1154: FILE: daemon/opd_perfmon_22.c:346:
+^I^I0x04, 0x03, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1160: FILE: daemon/opd_perfmon_22.c:352:
+^I^I{ { CTR_MS_0, PFM_TC_ESCR0},  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1164: FILE: daemon/opd_perfmon_22.c:356:
+^I^I0x00, 0x03, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: daemon/opd_perfmon_22.c:376:
+^I^I0x02, 0x04, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1204: FILE: daemon/opd_perfmon_22.c:396:
+^I^I0x07, 0x0c, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1209: FILE: daemon/opd_perfmon_22.c:401:
+^I^I0x06, 0x03, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: daemon/opd_perfmon_22.c:406:
+^I^I0x06, 0x1a, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1219: FILE: daemon/opd_perfmon_22.c:411:
+^I^I0x06, 0x17, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1224: FILE: daemon/opd_perfmon_22.c:416:
+^I^I0x07, 0x05, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1230: FILE: daemon/opd_perfmon_22.c:422:
+^I^I{ { CTR_BPU_2, PFM_BSU_ESCR1 /* guess */},  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: daemon/opd_perfmon_22.c:426:
+^I^I0x05, 0x03, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: daemon/opd_perfmon_22.c:436:
+^I^I0x01, 0x08, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: daemon/opd_perfmon_22.c:441:
+^I^I0x01, 0x0c, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: daemon/opd_perfmon_22.c:446:
+^I^I0x01, 0x0a, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1264: FILE: daemon/opd_perfmon_22.c:456:
+^I^I0x01, 0x02, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: daemon/opd_perfmon_22.c:461:
+^I^I0x01, 0x1a, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1274: FILE: daemon/opd_perfmon_22.c:466:
+^I^I0x01, 0x04, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1279: FILE: daemon/opd_perfmon_22.c:471:
+^I^I0x01, 0x2e, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1284: FILE: daemon/opd_perfmon_22.c:476:
+^I^I0x05, 0x02, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1294: FILE: daemon/opd_perfmon_22.c:486:
+^I^I0x00, 0x05, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1319: FILE: daemon/opd_perfmon_22.c:511:
+^I^I0x04, 0x02, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1328: FILE: daemon/opd_perfmon_22.c:520:
+^I{ /* UOP_TYPE */    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1329: FILE: daemon/opd_perfmon_22.c:521:
+^I^I0x02, 0x02, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1334: FILE: daemon/opd_perfmon_22.c:526:
+^I^I0x02, 0x05, $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1349: FILE: daemon/opd_perfmon_22.c:541:
+	uint64_t value;

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1351: FILE: daemon/opd_perfmon_22.c:543:
+	for (j = 0, i = 0; j< op_nr_counters && opd_events[j].name; ++j, i++) {
 	                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1352: FILE: daemon/opd_perfmon_22.c:544:
+		struct opd_event * event = &opd_events[j];

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1354: FILE: daemon/opd_perfmon_22.c:546:
+		printf("counter=%ld um=0x%lx value=0x%lx\n", event->counter, event->um, event->value);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1356: FILE: daemon/opd_perfmon_22.c:548:
+		ctr  = p4_events[event->value -1].bindings[0].virt_counter;
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1357: FILE: daemon/opd_perfmon_22.c:549:
+		escr = p4_events[event->value -1].bindings[0].escr_address;
 		                              ^

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#1361: FILE: daemon/opd_perfmon_22.c:553:
+		printf("escr_sel=0x%x evnt_sel=0x%x\n", p4_events[event->value - 1].escr_select, p4_events[event->value - 1].event_select);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1364: FILE: daemon/opd_perfmon_22.c:556:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1365: FILE: daemon/opd_perfmon_22.c:557:
+		value  = p4_events[event->value -1].event_select << 25;
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1376: FILE: daemon/opd_perfmon_22.c:568:
+		value  = p4_events[event->value -1].escr_select << 13;
 		                                ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1385: FILE: daemon/opd_perfmon_22.c:577:
+		desc->pd[j].reg_value       = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1386: FILE: daemon/opd_perfmon_22.c:578:
+		desc->pd[j].reg_short_reset = - (uint64_t)event->count;
 		                              ^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1387: FILE: daemon/opd_perfmon_22.c:579:
+		desc->pd[j].reg_long_reset  = - (uint64_t)event->count;
 		                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1413: FILE: daemon/opd_perfmon_22.c:605:
+	pfarg_ctx_t ctx;
+	memset(&ctx, 0, sizeof(ctx));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1460: FILE: daemon/opd_perfmon_22.c:652:
+int do_load_context(int fd, pid_t pid  __attribute__((unused)), size_t cpu)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1473: FILE: daemon/opd_perfmon_22.c:665:
+	switch(cpu_type) {
+		case CPU_HAMMER:
+		case CPU_P6_MOBILE:
+		case CPU_CORE:
+		case CPU_PPRO ... CPU_ATHLON:
[...]
+		case CPU_CORE_2:
[...]
+		case CPU_P4:
+		case CPU_P4_HT2:
[...]
+		case CPU_IA64 ... CPU_IA64_2:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#1473: FILE: daemon/opd_perfmon_22.c:665:
+	switch(cpu_type) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000467559.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 59 errors, 16 warnings, 51 checks, 1398 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000467559.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
