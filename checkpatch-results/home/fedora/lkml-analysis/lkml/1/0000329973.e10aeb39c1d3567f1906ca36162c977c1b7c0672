WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#31: 
request once, to allocate upto 150% of nr_requests in next round. This
                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#41: 
nr_requests allocated, but only upto nr_requests chosen by the io
                                ^^^^

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#50: 
that can be dispatched. Or atleast dispatch until both read and write
                           ^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: block/as-iosched.c:1141:
+	if (elv_queue_space(ad->q,rw) == 0)
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: block/cfq-iosched.c:932:
+	int rw = rq_data_dir(rq);
+	rl->count[rw]++;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: block/cfq-iosched.c:1045:
+		if (elv_queue_space(cfqd->queue,rw) == 0)
 		                               ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#142: FILE: block/cfq-iosched.c:1149:
+		if ((this_dispatch = __cfq_dispatch_requests(cfqd, cfqq, max_dispatch))==0)
 		                                                                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#142: FILE: block/cfq-iosched.c:1149:
+		if ((this_dispatch = __cfq_dispatch_requests(cfqd, cfqq, max_dispatch))==0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#185: FILE: block/elevator.c:533:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: block/elevator.c:534:
+        struct request_list *rl = &q->rq;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: block/elevator.c:534:
+        struct request_list *rl = &q->rq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: block/elevator.c:536:
+        if (rl->count[rw]+1 >= q->nr_congestion_on) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: block/elevator.c:536:
+        if (rl->count[rw]+1 >= q->nr_congestion_on) {$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: block/elevator.c:536:
+        if (rl->count[rw]+1 >= q->nr_congestion_on) {
                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: block/elevator.c:537:
+                if (rl->count[rw]+1 >= q->nr_requests) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: block/elevator.c:537:
+                if (rl->count[rw]+1 >= q->nr_requests) {$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: block/elevator.c:537:
+                if (rl->count[rw]+1 >= q->nr_requests) {
                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: block/elevator.c:538:
+                        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: block/elevator.c:539:
+                         * The queue will fill after this allocation, so set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: block/elevator.c:540:
+                         * it as full$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: block/elevator.c:541:
+                         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: block/elevator.c:542:
+                        if (!blk_queue_full(q, rw)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: block/elevator.c:542:
+                        if (!blk_queue_full(q, rw)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: block/elevator.c:543:
+                                blk_set_queue_full(q, rw);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: block/elevator.c:543:
+                                blk_set_queue_full(q, rw);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: block/elevator.c:544:
+                        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: block/elevator.c:544:
+                        } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#196: FILE: block/elevator.c:544:
+                        } else {
[...]
+                                        return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: block/elevator.c:545:
+                                        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: block/elevator.c:546:
+                                         * The queue is full$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: block/elevator.c:547:
+                                         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: block/elevator.c:548:
+                                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: block/elevator.c:548:
+                                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: block/elevator.c:549:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: block/elevator.c:549:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: block/elevator.c:550:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: block/elevator.c:550:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: block/elevator.c:551:
+                blk_set_queue_congested(q, rw);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: block/elevator.c:551:
+                blk_set_queue_congested(q, rw);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: block/elevator.c:552:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: block/elevator.c:552:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: block/elevator.c:554:
+        return q->nr_requests - rl->count[rw];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: block/elevator.c:554:
+        return q->nr_requests - rl->count[rw];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: block/noop-iosched.c:31:
+			struct request_list *rl = &q->rq;
+			rl->count[rw]++;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: include/linux/elevator.h:109:
+extern int elv_queue_space(struct request_queue *q, int rw);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329973.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 18 warnings, 4 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329973.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
