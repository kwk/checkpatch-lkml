WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
>> > > --- zd1211rw.git.beno.orig/init/do_mounts.c      2008-01-06 18:44:23.000000000

WARNING:TYPO_SPELLING: 'droping' may be misspelled - perhaps 'dropping'?
#78: 
> always be available and can implement any behavior desired (like droping into
                                                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#91: 
Signed-Off-By: Bodo Eggert <7eggert@gmx.de>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: include/linux/kernel.h:112:
+NORET_TYPE void softpanic(const char * fmt, ...)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/linux/kernel.h:113:
+       __attribute__ ((NORET_AND format (printf, 1, 2))) __cold;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#104: FILE: include/linux/kernel.h:113:
+       __attribute__ ((NORET_AND format (printf, 1, 2))) __cold;

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#106: FILE: include/linux/kernel.h:115:
+# define softpanic(...) do { panic(__VA_ARGS__); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#118: FILE: init/Kconfig:444:
+config SOFTPANIC
+       bool "Enable softpanic for boot errors" if EMBEDDED
+       default y
+       help
+               Enabling this option changes a hard panic on boot errors to a
+               soft panic, which does not stop the system completely.
+               You can still scroll the screen and read the messages.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#135: FILE: init/do_mounts.c:330:
partitions:\n");

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: init/do_mounts.c:333:
+               softpanic("VFS: Unable to mount root fs on %s", b);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: init/do_mounts.c:333:
+               softpanic("VFS: Unable to mount root fs on %s", b);$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#139: FILE: init/do_mounts.c:333:
+               softpanic("VFS: Unable to mount root fs on %s", b);
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#139: FILE: init/do_mounts.c:333:
+               softpanic("VFS: Unable to mount root fs on %s", b);
                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Unable>
#139: FILE: init/do_mounts.c:333:
+               softpanic("VFS: Unable to mount root fs on %s", b);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: init/do_mounts.c:345:
+       softpanic("VFS: Unable to mount root fs on %s", b);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#158: FILE: init/main.c:592:
        if (panic_later)
+               softpanic(panic_later, panic_param);

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: init/main.c:593:
+               softpanic(panic_later, panic_param);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: init/main.c:593:
+               softpanic(panic_later, panic_param);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: init/main.c:810:
+       softpanic("No init found.  Try passing init= option to kernel.");$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: kernel/panic.c:143:
+NORET_TYPE void softpanic(const char * fmt, ...)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: kernel/panic.c:145:
+       long i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: kernel/panic.c:146:
+       static char buf[1024];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: kernel/panic.c:147:
+       va_list args;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: kernel/panic.c:149:
+        unsigned long caller = (unsigned long) __builtin_return_address(0);$

CHECK:SPACING: No space is necessary after a cast
#188: FILE: kernel/panic.c:149:
+        unsigned long caller = (unsigned long) __builtin_return_address(0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: kernel/panic.c:149:
+        unsigned long caller = (unsigned long) __builtin_return_address(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: kernel/panic.c:152:
+       va_start(args, fmt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: kernel/panic.c:153:
+       vsnprintf(buf, sizeof(buf), fmt, args);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: kernel/panic.c:154:
+       va_end(args);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: kernel/panic.c:155:
+       printk(KERN_EMERG "Kernel panic - not syncing: %s\n",buf);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#194: FILE: kernel/panic.c:155:
+       printk(KERN_EMERG "Kernel panic - not syncing: %s\n",buf);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: kernel/panic.c:155:
+       printk(KERN_EMERG "Kernel panic - not syncing: %s\n",buf);
                                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: kernel/panic.c:157:
+       atomic_notifier_call_chain(&panic_notifier_list, 0, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: kernel/panic.c:159:
+       if (!panic_blink)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#198: FILE: kernel/panic.c:159:
+       if (!panic_blink)
+               panic_blink = no_blink;

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: kernel/panic.c:160:
+               panic_blink = no_blink;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: kernel/panic.c:160:
+               panic_blink = no_blink;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: kernel/panic.c:162:
+       if (panic_timeout > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#201: FILE: kernel/panic.c:162:
+       if (panic_timeout > 0) {
[...]
+               printk(KERN_EMERG "Rebooting in %d seconds..",panic_timeout);

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: kernel/panic.c:163:
+               /*$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: kernel/panic.c:164:
+                * Delay timeout seconds before rebooting the machine. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: kernel/panic.c:164:
+                * Delay timeout seconds before rebooting the machine. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: kernel/panic.c:165:
+                * We can't use the "normal" timers since we just panicked..$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: kernel/panic.c:166:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: kernel/panic.c:167:
+               printk(KERN_EMERG "Rebooting in %d seconds..",panic_timeout);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: kernel/panic.c:167:
+               printk(KERN_EMERG "Rebooting in %d seconds..",panic_timeout);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#206: FILE: kernel/panic.c:167:
+               printk(KERN_EMERG "Rebooting in %d seconds..",panic_timeout);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: kernel/panic.c:167:
+               printk(KERN_EMERG "Rebooting in %d seconds..",panic_timeout);
                                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: kernel/panic.c:168:
+               for (i = 0; i < panic_timeout*1000; ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: kernel/panic.c:168:
+               for (i = 0; i < panic_timeout*1000; ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#207: FILE: kernel/panic.c:168:
+               for (i = 0; i < panic_timeout*1000; ) {
+                       touch_nmi_watchdog();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#207: FILE: kernel/panic.c:168:
+               for (i = 0; i < panic_timeout*1000; ) {
                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: kernel/panic.c:169:
+                       touch_nmi_watchdog();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: kernel/panic.c:169:
+                       touch_nmi_watchdog();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: kernel/panic.c:170:
+                       i += panic_blink(i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: kernel/panic.c:170:
+                       i += panic_blink(i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: kernel/panic.c:171:
+                       mdelay(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: kernel/panic.c:171:
+                       mdelay(1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: kernel/panic.c:172:
+                       i++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: kernel/panic.c:172:
+                       i++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: kernel/panic.c:173:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: kernel/panic.c:173:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: kernel/panic.c:174:
+               /*      This will not be a clean reboot, with everything$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: kernel/panic.c:175:
+                *      shutting down.  But if there is a chance of$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: kernel/panic.c:176:
+                *      rebooting the system it will be rebooted.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: kernel/panic.c:177:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: kernel/panic.c:178:
+               kernel_restart(NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: kernel/panic.c:178:
+               kernel_restart(NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: kernel/panic.c:179:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: kernel/panic.c:181:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: kernel/panic.c:182:
+               extern int stop_a_enabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: kernel/panic.c:182:
+               extern int stop_a_enabled;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#221: FILE: kernel/panic.c:182:
+               extern int stop_a_enabled;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: kernel/panic.c:183:
+               /* Make sure the user can actually press Stop-A (L1-A) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: kernel/panic.c:184:
+               stop_a_enabled = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: kernel/panic.c:184:
+               stop_a_enabled = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: kernel/panic.c:185:
+               printk(KERN_EMERG "Press Stop-A (L1-A) to return to the boot prom\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: kernel/panic.c:185:
+               printk(KERN_EMERG "Press Stop-A (L1-A) to return to the boot prom\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#224: FILE: kernel/panic.c:185:
+               printk(KERN_EMERG "Press Stop-A (L1-A) to return to the boot prom\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: kernel/panic.c:186:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: kernel/panic.c:189:
+        disabled_wait(caller);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: kernel/panic.c:189:
+        disabled_wait(caller);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: kernel/panic.c:191:
+       for (i = 0;;) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#230: FILE: kernel/panic.c:191:
+       for (i = 0;;) {
+               touch_softlockup_watchdog();

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: kernel/panic.c:192:
+               touch_softlockup_watchdog();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: kernel/panic.c:192:
+               touch_softlockup_watchdog();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: kernel/panic.c:193:
+               i += panic_blink(i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: kernel/panic.c:193:
+               i += panic_blink(i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: kernel/panic.c:194:
+               msleep(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: kernel/panic.c:194:
+               msleep(1);$

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#233: FILE: kernel/panic.c:194:
+               msleep(1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: kernel/panic.c:195:
+               i++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: kernel/panic.c:195:
+               i++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: kernel/panic.c:196:
+       }$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#240: FILE: kernel/panic.c:201:
+EXPORT_SYMBOL(softpanic);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339963.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 36 errors, 55 warnings, 4 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339963.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
