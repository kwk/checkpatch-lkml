CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: mm/memcontrol.c:2860:
+static inline void mem_cgroup_set_thresholds(struct res_counter *counter,
+		u64 above, u64 below)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: mm/memcontrol.c:2862:
+	BUG_ON(res_counter_set_thresholds(counter, above, below));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: mm/memcontrol.c:2866:
+static void mem_cgroup_threshold(struct mem_cgroup *memcg,
+		struct res_counter *counter, u64 usage, u64 threshold)

CHECK:BRACES: braces {} should be used on all arms of this statement
#121: FILE: mm/memcontrol.c:2872:
+	if (&memcg->res == counter) {
[...]
+	} else if (&memcg->memsw == counter) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#127: FILE: mm/memcontrol.c:2878:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: mm/memcontrol.c:2879:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#130: FILE: mm/memcontrol.c:2881:
+	above = below = *current_threshold;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: mm/memcontrol.c:2904:
+static void mem_cgroup_mem_threshold(struct res_counter *counter, u64 usage,
+		u64 threshold)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: mm/memcontrol.c:2913:
+static void mem_cgroup_memsw_threshold(struct res_counter *counter, u64 usage,
+		u64 threshold)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: mm/memcontrol.c:2922:
+static void mem_cgroup_invalidate_thresholds(struct res_counter *counter,
+		struct list_head *thresholds,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#178: FILE: mm/memcontrol.c:2929:
+			BUG_ON(!prev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: mm/memcontrol.c:2940:
+static int mem_cgroup_register_event(struct cgroup *cgrp, struct cftype *cft,
+		struct eventfd_ctx *eventfd, const char *args)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: mm/memcontrol.c:2978:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: mm/memcontrol.c:2988:
+	mem_cgroup_invalidate_thresholds(counter, thresholds,
+			current_threshold);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: mm/memcontrol.c:2994:
+static int mem_cgroup_unregister_event(struct cgroup *cgrp, struct cftype *cft,
+		struct eventfd_ctx *eventfd)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#264: FILE: mm/memcontrol.c:3015:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: mm/memcontrol.c:3025:
+	mem_cgroup_invalidate_thresholds(counter, thresholds,
+			current_threshold);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#302: FILE: mm/memcontrol.c:3274:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: mm/memcontrol.c:3276:
+static int mem_cgroup_thresholds_init(struct list_head *thresholds,
+		struct mem_cgroup_threshold **current_threshold)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: mm/memcontrol.c:3350:
+	mem_cgroup_thresholds_init(&mem->memsw_thresholds,
+			&mem->memsw_current_threshold);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 15 checks, 278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
