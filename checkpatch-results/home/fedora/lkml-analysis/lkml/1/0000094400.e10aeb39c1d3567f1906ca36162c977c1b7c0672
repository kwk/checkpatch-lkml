WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#39: 
vmalloc area looking for the top-most address which can accomodate all
                                                        ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'structres' may be misspelled - perhaps 'structures'?
#220: FILE: mm/vmalloc.c:1943:
+ * necessary data structres are inserted and the result is returned.
                   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#228: FILE: mm/vmalloc.c:1951:
+	struct vmap_area **vas, *prev, *next;
 	                   ^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: mm/vmalloc.c:1960:
+	BUG_ON(align & ~PAGE_MASK || !is_power_of_2(align));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: mm/vmalloc.c:1966:
+		BUG_ON(!IS_ALIGNED(offsets[area], align));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#244: FILE: mm/vmalloc.c:1967:
+		BUG_ON(!IS_ALIGNED(sizes[area], align));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#257: FILE: mm/vmalloc.c:1980:
+			BUG_ON(start2 >= start && start2 < end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: mm/vmalloc.c:1981:
+			BUG_ON(end2 <= end && end2 > start);

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#269: FILE: mm/vmalloc.c:1992:
+	vas = kzalloc(sizeof(vas[0]) * nr_vms, gfp_mask);
 	^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#269: FILE: mm/vmalloc.c:1992:
+	vas = kzalloc(sizeof(vas[0]) * nr_vms, gfp_mask);
 	                     ^^^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#269: FILE: mm/vmalloc.c:1992:
+	vas = kzalloc(sizeof(vas[0]) * nr_vms, gfp_mask);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#270: FILE: mm/vmalloc.c:1993:
+	if (!vas || !vms)
 	     ^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#274: FILE: mm/vmalloc.c:1997:
+		vas[area] = kzalloc(sizeof(struct vmap_area), gfp_mask);
 		^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vas[area])...) over kzalloc(sizeof(struct vmap_area)...)
#274: FILE: mm/vmalloc.c:1997:
+		vas[area] = kzalloc(sizeof(struct vmap_area), gfp_mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vms[area])...) over kzalloc(sizeof(struct vm_struct)...)
#275: FILE: mm/vmalloc.c:1998:
+		vms[area] = kzalloc(sizeof(struct vm_struct), gfp_mask);

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#276: FILE: mm/vmalloc.c:1999:
+		if (!vas[area] || !vms[area])
 		     ^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#283: FILE: mm/vmalloc.c:2006:
+	area = term_area = last_area;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#294: FILE: mm/vmalloc.c:2017:
+		BUG_ON(next && next->va_end <= base + end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: mm/vmalloc.c:2018:
+		BUG_ON(prev && prev->va_end > base + end);

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#348: FILE: mm/vmalloc.c:2071:
+		struct vmap_area *va = vas[area];
 		                       ^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#361: FILE: mm/vmalloc.c:2084:
+		insert_vmalloc_vm(vms[area], vas[area], 0,
 		                             ^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#364: FILE: mm/vmalloc.c:2087:
+	kfree(vas);
 	      ^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#369: FILE: mm/vmalloc.c:2092:
+		if (vas)
 		    ^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#370: FILE: mm/vmalloc.c:2093:
+			kfree(vas[area]);
 			      ^^^

WARNING:TYPO_SPELLING: 'vas' may be misspelled - perhaps 'was'?
#374: FILE: mm/vmalloc.c:2097:
+	kfree(vas);
 	      ^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094400.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 3 checks, 327 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094400.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
