WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#62: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#67: FILE: drivers/acpi/processor_core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#89: FILE: drivers/acpi/processor_core.c:23:
+	printk(KERN_NOTICE PREFIX "%s detected - "

WARNING:SPLIT_STRING: quoted string split across lines
#90: FILE: drivers/acpi/processor_core.c:24:
+	printk(KERN_NOTICE PREFIX "%s detected - "
+		"disabling mwait for CPU C-states\n", id->ident);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after processor_idle_dmi_table[]
#95: FILE: drivers/acpi/processor_core.c:29:
+static struct dmi_system_id __cpuinitdata processor_idle_dmi_table[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*obj_list)...) over kmalloc(sizeof(struct acpi_object_list)...)
#130: FILE: drivers/acpi/processor_core.c:64:
+	obj_list = kmalloc(sizeof(struct acpi_object_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#132: FILE: drivers/acpi/processor_core.c:66:
+		printk(KERN_ERR "Memory allocation error\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#132: FILE: drivers/acpi/processor_core.c:66:
+	if (!obj_list) {
+		printk(KERN_ERR "Memory allocation error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#138: FILE: drivers/acpi/processor_core.c:72:
+		printk(KERN_ERR "Memory allocation error\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#138: FILE: drivers/acpi/processor_core.c:72:
+	if (!obj) {
+		printk(KERN_ERR "Memory allocation error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#145: FILE: drivers/acpi/processor_core.c:79:
+		printk(KERN_ERR "Memory allocation error\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#145: FILE: drivers/acpi/processor_core.c:79:
+	if (!buf) {
+		printk(KERN_ERR "Memory allocation error\n");

CHECK:SPACING: No space is necessary after a cast
#155: FILE: drivers/acpi/processor_core.c:89:
+	obj->buffer.pointer = (u8 *) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#184: FILE: drivers/acpi/processor_core.c:118:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/acpi/processor_core.c:123:
+		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
+		    "Could not evaluate _PDC, using legacy perf. control.\n"));

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#230: FILE: drivers/acpi/processor_core.c:164:
+__setup("acpi_early_pdc_eval", param_early_pdc_optin);

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after early_pdc_optin_table[]
#232: FILE: drivers/acpi/processor_core.c:166:
+static struct dmi_system_id __cpuinitdata early_pdc_optin_table[] = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008842.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 5 checks, 225 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008842.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
