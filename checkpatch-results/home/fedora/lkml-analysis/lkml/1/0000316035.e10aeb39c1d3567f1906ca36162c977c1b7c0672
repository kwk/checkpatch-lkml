WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#82: 
 arch/x86/mm/mmio-mod.c      |  541 +++++++++++++++++++++++++++++++++++++++++++

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#186: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#191: FILE: arch/x86/mm/kmmio.c:1:
+/* Support for MMIO probes.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#212: FILE: arch/x86/mm/kmmio.c:22:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#213: FILE: arch/x86/mm/kmmio.c:23:
+#include <asm/cacheflush.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#216: FILE: arch/x86/mm/kmmio.c:26:
+#include <asm/pgtable.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#221: FILE: arch/x86/mm/kmmio.c:31:
+#define KMMIO_PAGE_TABLE_SIZE (1 << KMMIO_PAGE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: arch/x86/mm/kmmio.c:60:
+static int kmmio_die_notifier(struct notifier_block *nb, unsigned long val,
+								void *args);

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: arch/x86/mm/kmmio.c:97:
+		int i;
+		for (i = 0; i < KMMIO_PAGE_TABLE_SIZE; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#290: FILE: arch/x86/mm/kmmio.c:100:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#312: FILE: arch/x86/mm/kmmio.c:122:
+		BUG_ON(is_kmmio_active());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: arch/x86/mm/kmmio.c:126:
+	BUG_ON(kmmio_initialized < 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: arch/x86/mm/kmmio.c:147:
+	struct kmmio_probe *p;
+	list_for_each_entry_rcu(p, &kmmio_probes, list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: arch/x86/mm/kmmio.c:178:
+		pr_err("kmmio: Error in %s: no pte for page 0x%08lx\n",
+							__func__, page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: arch/x86/mm/kmmio.c:184:
+		pmd_t *pmd = (pmd_t *)pte;
+		set_pmd(pmd, __pmd(pmd_val(*pmd) & ~_PAGE_PRESENT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: arch/x86/mm/kmmio.c:205:
+		pr_err("kmmio: Error in %s: no pte for page 0x%08lx\n",
+							__func__, page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: arch/x86/mm/kmmio.c:211:
+		pmd_t *pmd = (pmd_t *)pte;
+		set_pmd(pmd, __pmd(pmd_val(*pmd) | _PAGE_PRESENT));

WARNING:SPLIT_STRING: quoted string split across lines
#466: FILE: arch/x86/mm/kmmio.c:276:
+		pr_emerg("kmmio: recursive probe hit on CPU %d, "
+					"for address 0x%08lx. Ignoring.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#474: FILE: arch/x86/mm/kmmio.c:284:
+	ctx->saved_flags = (regs->flags & (TF_MASK|IF_MASK));
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: arch/x86/mm/kmmio.c:348:
+	BUG_ON(ctx->active);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: arch/x86/mm/kmmio.c:394:
+static void release_kmmio_fault_page(unsigned long page,
+				struct kmmio_fault_page **release_list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#594: FILE: arch/x86/mm/kmmio.c:404:
+	BUG_ON(f->count < 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#632: FILE: arch/x86/mm/kmmio.c:442:
+	struct kmmio_delayed_release *dr = container_of(

WARNING:LINE_SPACING: Missing a blank line after declarations
#637: FILE: arch/x86/mm/kmmio.c:447:
+	struct kmmio_fault_page *p = dr->release_list;
+	while (p) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#639: FILE: arch/x86/mm/kmmio.c:449:
+		struct kmmio_fault_page *next = p->release_next;
+		BUG_ON(p->count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#639: FILE: arch/x86/mm/kmmio.c:449:
+		BUG_ON(p->count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#648: FILE: arch/x86/mm/kmmio.c:458:
+	struct kmmio_delayed_release *dr = container_of(

WARNING:LINE_SPACING: Missing a blank line after declarations
#655: FILE: arch/x86/mm/kmmio.c:465:
+	unsigned long flags;
+	spin_lock_irqsave(&kmmio_lock, flags);

WARNING:TYPO_SPELLING: 'Actally' may be misspelled - perhaps 'Actually'?
#679: FILE: arch/x86/mm/kmmio.c:489:
+ *    Actally free the kmmio_fault_page structs as with RCU.
       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#698: FILE: arch/x86/mm/kmmio.c:508:
+	if (!drelease) {
+		pr_crit("kmmio: leaking kmmio_fault_page objects.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: arch/x86/mm/kmmio.c:532:
+static int kmmio_die_notifier(struct notifier_block *nb, unsigned long val,
+								void *args)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#738: FILE: arch/x86/mm/mmio-mod.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#750: FILE: arch/x86/mm/mmio-mod.c:13:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#751: FILE: arch/x86/mm/mmio-mod.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#763: FILE: arch/x86/mm/mmio-mod.c:26:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#766: FILE: arch/x86/mm/mmio-mod.c:29:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#769: FILE: arch/x86/mm/mmio-mod.c:32:
+#include <asm/atomic.h>

WARNING:CONST_STRUCT: struct file_operations should normally be const
#795: FILE: arch/x86/mm/mmio-mod.c:58:
+static struct file_operations mmio_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#799: FILE: arch/x86/mm/mmio-mod.c:62:
+static const size_t subbuf_size = 256*1024;
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#805: FILE: arch/x86/mm/mmio-mod.c:68:
+static unsigned int      n_subbufs = 32*4;
                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#837: FILE: arch/x86/mm/mmio-mod.c:100:
+static int write_marker(struct file *file, const char __user *buffer,
+					unsigned long count, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: arch/x86/mm/mmio-mod.c:132:
+		pr_err(MODULE_NAME ": Error in %s: no pte for page 0x%08lx\n",
+							__func__, address);

WARNING:SPLIT_STRING: quoted string split across lines
#875: FILE: arch/x86/mm/mmio-mod.c:138:
+		pr_emerg(MODULE_NAME ": 4MB pages are not currently "
+						"supported: %lx\n", address);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#876: FILE: arch/x86/mm/mmio-mod.c:139:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: arch/x86/mm/mmio-mod.c:142:
+	pr_info(MODULE_NAME ": pte for 0x%lx: 0x%lx 0x%lx\n",
+					address, pte_val(*pte),

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: arch/x86/mm/mmio-mod.c:153:
+	const struct trap_reason *my_reason = &get_cpu_var(pf_reason);
+	pr_emerg(MODULE_NAME ": unexpected fault for address: %lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#891: FILE: arch/x86/mm/mmio-mod.c:154:
+	pr_emerg(MODULE_NAME ": unexpected fault for address: %lx, "
+					"last fault for address: %lx\n",

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#894: FILE: arch/x86/mm/mmio-mod.c:157:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: arch/x86/mm/mmio-mod.c:160:
+	print_symbol(KERN_EMERG "last faulting EIP was at %s\n",
+							my_reason->ip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: arch/x86/mm/mmio-mod.c:162:
+	pr_emerg("eax: %08lx   ebx: %08lx   ecx: %08lx   edx: %08lx\n",
+			regs->ax, regs->bx, regs->cx, regs->dx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: arch/x86/mm/mmio-mod.c:164:
+	pr_emerg("esi: %08lx   edi: %08lx   ebp: %08lx   esp: %08lx\n",
+			regs->si, regs->di, regs->bp, regs->sp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: arch/x86/mm/mmio-mod.c:168:
+	print_symbol(KERN_EMERG "last faulting RIP was at %s\n",
+							my_reason->ip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: arch/x86/mm/mmio-mod.c:170:
+	pr_emerg("rax: %016lx   rcx: %016lx   rdx: %016lx\n",
+					regs->ax, regs->cx, regs->dx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: arch/x86/mm/mmio-mod.c:172:
+	pr_emerg("rsi: %016lx   rdi: %016lx   rbp: %016lx   rsp: %016lx\n",
+				regs->si, regs->di, regs->bp, regs->sp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#912: FILE: arch/x86/mm/mmio-mod.c:175:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: arch/x86/mm/mmio-mod.c:179:
+static void pre(struct kmmio_probe *p, struct pt_regs *regs,
+						unsigned long addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#970: FILE: arch/x86/mm/mmio-mod.c:233:
+			unsigned char *ip = (unsigned char *)instptr;
+			my_trace->header.type |=

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: arch/x86/mm/mmio-mod.c:244:
+static void post(struct kmmio_probe *p, unsigned long condition,
+							struct pt_regs *regs)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'post', this function's name, in a string
#994: FILE: arch/x86/mm/mmio-mod.c:257:
+		pr_emerg(MODULE_NAME ": unexpected post handler");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#995: FILE: arch/x86/mm/mmio-mod.c:258:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1017: FILE: arch/x86/mm/mmio-mod.c:280:
+static int subbuf_start_handler(struct rchan_buf *buf, void *subbuf,
+					void *prev_subbuf, size_t prev_padding)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1022: FILE: arch/x86/mm/mmio-mod.c:285:
+	int count;
+	if (relay_buf_full(buf)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1030: FILE: arch/x86/mm/mmio-mod.c:293:
+		pr_err(MODULE_NAME ": cpu %d buffer no longer full, "
+						"missed %d events.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: arch/x86/mm/mmio-mod.c:303:
+static struct dentry *create_buf_file_handler(const char *filename,
+						struct dentry *parent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: arch/x86/mm/mmio-mod.c:318:
+	buf_file = debugfs_create_file(filename, mode, parent, buf,
+								&mmio_fops);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1077: FILE: arch/x86/mm/mmio-mod.c:340:
+static struct rchan *create_channel(unsigned size, unsigned n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1077: FILE: arch/x86/mm/mmio-mod.c:340:
+static struct rchan *create_channel(unsigned size, unsigned n)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1095: FILE: arch/x86/mm/mmio-mod.c:358:
+};
+static LIST_HEAD(trace_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1099: FILE: arch/x86/mm/mmio-mod.c:362:
+static void do_ioremap_trace_core(unsigned long offset, unsigned long size,
+							void __iomem *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1138: FILE: arch/x86/mm/mmio-mod.c:401:
+static void ioremap_trace_core(unsigned long offset, unsigned long size,
+							void __iomem *addr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset != filter_offset'
#1140: FILE: arch/x86/mm/mmio-mod.c:403:
+	if ((filter_offset) && (offset != filter_offset))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset < ISA_END_ADDRESS'
#1144: FILE: arch/x86/mm/mmio-mod.c:407:
+	if (!ISA_trace && (offset < ISA_END_ADDRESS) &&
+					(offset + size > ISA_START_ADDRESS)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: arch/x86/mm/mmio-mod.c:408:
+	if (!ISA_trace && (offset < ISA_END_ADDRESS) &&
+					(offset + size > ISA_START_ADDRESS)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1147: FILE: arch/x86/mm/mmio-mod.c:410:
+		pr_notice(MODULE_NAME ": Ignoring map of low PCI/ISA area "
+						"(0x%lx-0x%lx)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1157: FILE: arch/x86/mm/mmio-mod.c:420:
+	void __iomem *p = ioremap_cache(offset, size);
+	pr_debug(MODULE_NAME ": ioremap_cache(0x%lx, 0x%lx) = %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: arch/x86/mm/mmio-mod.c:421:
+	pr_debug(MODULE_NAME ": ioremap_cache(0x%lx, 0x%lx) = %p\n",
+							offset, size, p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1167: FILE: arch/x86/mm/mmio-mod.c:430:
+	void __iomem *p = ioremap_nocache(offset, size);
+	pr_debug(MODULE_NAME ": ioremap_nocache(0x%lx, 0x%lx) = %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: arch/x86/mm/mmio-mod.c:431:
+	pr_debug(MODULE_NAME ": ioremap_nocache(0x%lx, 0x%lx) = %p\n",
+							offset, size, p);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1174: FILE: arch/x86/mm/mmio-mod.c:437:
+void iounmap_trace(volatile void __iomem *addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1194: FILE: arch/x86/mm/mmio-mod.c:457:
+	struct remap_trace *tmp;
+	pr_debug(MODULE_NAME ": Unmapping %p.\n", addr);

WARNING:SPLIT_STRING: quoted string split across lines
#1221: FILE: arch/x86/mm/mmio-mod.c:484:
+		pr_warning(MODULE_NAME ": purging non-iounmapped "
+					"trace @0x%08lx, size 0x%lx.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1261: FILE: arch/x86/mm/mmio-mod.c:524:
+		pr_warning(MODULE_NAME ": Warning! low ISA range will be "
+								"traced.\n");

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1273: FILE: arch/x86/mm/mmio-mod.c:536:
+	if (dir)
+		debugfs_remove(dir);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1297: FILE: arch/x86/mm/pf_in.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1312: FILE: arch/x86/mm/pf_in.c:16:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1313: FILE: arch/x86/mm/pf_in.c:17:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,$

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1329: FILE: arch/x86/mm/pf_in.c:33:
+#ifdef __i386__

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1335: FILE: arch/x86/mm/pf_in.c:39:
+};
+/* IA32 Manual 3, 3-432*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1339: FILE: arch/x86/mm/pf_in.c:43:
+};
+static unsigned int reg_wop[] = { 0x88, 0x89 };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1346: FILE: arch/x86/mm/pf_in.c:50:
+};
+static unsigned int mw8[] = { 0x88, 0x8A, 0xC6, 0xB60F, 0xBE0F };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1358: FILE: arch/x86/mm/pf_in.c:62:
+};
+/* AMD64 Manual 3, Appendix A*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1362: FILE: arch/x86/mm/pf_in.c:66:
+};
+static unsigned int reg_wop[] = { 0x88, 0x89 };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1368: FILE: arch/x86/mm/pf_in.c:72:
+};
+/* 8 bit only */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1379: FILE: arch/x86/mm/pf_in.c:83:
+static int skip_prefix(unsigned char *addr, int *shorted, int *enlarged,
+								int *rexr)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'opcode' may be better as '(opcode)' to avoid precedence issues
#1422: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array' - possible side-effects?
#1422: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1422: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1449: FILE: arch/x86/mm/pf_in.c:153:
+}
+#undef CHECK_OP_TYPE

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1469: FILE: arch/x86/mm/pf_in.c:173:
+	printk(KERN_ERR "mmiotrace: Unknown opcode 0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1499: FILE: arch/x86/mm/pf_in.c:203:
+	printk(KERN_ERR "mmiotrace: Unknown opcode 0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1593: FILE: arch/x86/mm/pf_in.c:297:
+		printk(KERN_ERR "mmiotrace: Error reg no# %d\n", no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1655: FILE: arch/x86/mm/pf_in.c:359:
+		printk(KERN_ERR "mmiotrace: Error reg no# %d\n", no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1685: FILE: arch/x86/mm/pf_in.c:389:
+	printk(KERN_ERR "mmiotrace: Not a register instruction, opcode "

WARNING:SPLIT_STRING: quoted string split across lines
#1686: FILE: arch/x86/mm/pf_in.c:390:
+	printk(KERN_ERR "mmiotrace: Not a register instruction, opcode "
+							"0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1708: FILE: arch/x86/mm/pf_in.c:412:
+		printk(KERN_ERR "mmiotrace: Error width# %d\n", reg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1733: FILE: arch/x86/mm/pf_in.c:437:
+	printk(KERN_ERR "mmiotrace: Not an immediate instruction, opcode "

WARNING:SPLIT_STRING: quoted string split across lines
#1734: FILE: arch/x86/mm/pf_in.c:438:
+	printk(KERN_ERR "mmiotrace: Not an immediate instruction, opcode "
+							"0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1759: FILE: arch/x86/mm/pf_in.c:463:
+		printk(KERN_ERR "mmiotrace: not a memory access instruction "

WARNING:SPLIT_STRING: quoted string split across lines
#1760: FILE: arch/x86/mm/pf_in.c:464:
+		printk(KERN_ERR "mmiotrace: not a memory access instruction "
+						"at 0x%lx, rm_mod=0x%02x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1780: FILE: arch/x86/mm/pf_in.c:484:
+		printk(KERN_ERR "mmiotrace: Error: width.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1792: FILE: arch/x86/mm/pf_in.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1807: FILE: arch/x86/mm/pf_in.h:16:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1808: FILE: arch/x86/mm/pf_in.h:17:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1837: FILE: arch/x86/mm/testmmiotrace.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1841: FILE: arch/x86/mm/testmmiotrace.c:5:
+#include <asm/io.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1844: FILE: arch/x86/mm/testmmiotrace.c:8:
+extern void __iomem *ioremap_nocache_trace(unsigned long offset,
+						unsigned long size);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1845: FILE: arch/x86/mm/testmmiotrace.c:9:
+extern void iounmap_trace(volatile void __iomem *addr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1845: FILE: arch/x86/mm/testmmiotrace.c:9:
+extern void iounmap_trace(volatile void __iomem *addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1856: FILE: arch/x86/mm/testmmiotrace.c:20:
+	unsigned int i;
+	for (i = 0; i < 256; i++)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1867: FILE: arch/x86/mm/testmmiotrace.c:31:
+	volatile unsigned int v;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1868: FILE: arch/x86/mm/testmmiotrace.c:32:
+	volatile unsigned int v;
+	for (i = 0; i < 256; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1879: FILE: arch/x86/mm/testmmiotrace.c:43:
+	void __iomem *p = ioremap_nocache_trace(mmio_address, 0x4000);
+	if (!p) {

WARNING:SPLIT_STRING: quoted string split across lines
#1892: FILE: arch/x86/mm/testmmiotrace.c:56:
+		pr_err(MODULE_NAME ": you have to use the module argument "
+							"mmio_address.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1894: FILE: arch/x86/mm/testmmiotrace.c:58:
+		pr_err(MODULE_NAME ": DO NOT LOAD THIS MODULE UNLESS"
+				" YOU REALLY KNOW WHAT YOU ARE DOING!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1899: FILE: arch/x86/mm/testmmiotrace.c:63:
+	pr_warning(MODULE_NAME ": WARNING: mapping 16 kB @ 0x%08lx "
+					"in PCI address space, and writing "

WARNING:SPLIT_STRING: quoted string split across lines
#1900: FILE: arch/x86/mm/testmmiotrace.c:64:
+					"in PCI address space, and writing "
+					"rubbish in there.\n", mmio_address);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1919: FILE: include/linux/mmiotrace.h:1:
+#ifndef MMIOTRACE_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1951: FILE: include/linux/mmiotrace.h:33:
+extern void reference_kmmio(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1952: FILE: include/linux/mmiotrace.h:34:
+extern void unreference_kmmio(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1953: FILE: include/linux/mmiotrace.h:35:
+extern int register_kmmio_probe(struct kmmio_probe *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1954: FILE: include/linux/mmiotrace.h:36:
+extern void unregister_kmmio_probe(struct kmmio_probe *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1957: FILE: include/linux/mmiotrace.h:39:
+extern int kmmio_handler(struct pt_regs *regs, unsigned long addr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1961: FILE: include/linux/mmiotrace.h:43:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1973: FILE: include/linux/mmiotrace.h:55:
+#define MMIO_MAGIC (0x6f000000 | (MMIO_VERSION<<16))
                                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2006: FILE: include/linux/mmiotrace.h:88:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2015: FILE: include/linux/mmiotrace.h:97:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2020: FILE: include/linux/mmiotrace.h:102:
+} __attribute__((packed));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316035.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 70 warnings, 61 checks, 1875 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316035.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
