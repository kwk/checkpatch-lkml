WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#52: FILE: drivers/kvm/x86_emulate.c:1547:
+^I^I * ^I- if REPE/REPZ and ZF = 0 then done$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#53: FILE: drivers/kvm/x86_emulate.c:1548:
+^I^I * ^I- if REPNE/REPNZ and ZF = 1 then done$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xa6'
#55: FILE: drivers/kvm/x86_emulate.c:1550:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xa7'
#55: FILE: drivers/kvm/x86_emulate.c:1550:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xae'
#55: FILE: drivers/kvm/x86_emulate.c:1550:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xaf'
#55: FILE: drivers/kvm/x86_emulate.c:1550:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#56: FILE: drivers/kvm/x86_emulate.c:1551:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#57: FILE: drivers/kvm/x86_emulate.c:1552:
+			if ((c->rep_prefix == REPE_PREFIX) &&
[...]
+					ctxt->vcpu->rip = c->eip;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->rep_prefix == REPE_PREFIX'
#57: FILE: drivers/kvm/x86_emulate.c:1552:
+			if ((c->rep_prefix == REPE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#58: FILE: drivers/kvm/x86_emulate.c:1553:
+			if ((c->rep_prefix == REPE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->rep_prefix == REPNE_PREFIX'
#62: FILE: drivers/kvm/x86_emulate.c:1557:
+			if ((c->rep_prefix == REPNE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == EFLG_ZF)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: drivers/kvm/x86_emulate.c:1558:
+			if ((c->rep_prefix == REPNE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == EFLG_ZF)) {

CHECK:CAMELCASE: Avoid CamelCase: <ByteOp>
#78: FILE: drivers/kvm/x86_emulate.c:1589:
+		c->src.bytes = (c->d & ByteOp) ? 1 : c->op_bytes;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#79: FILE: drivers/kvm/x86_emulate.c:1590:
+		c->src.ptr = (unsigned long *)register_address(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#83: FILE: drivers/kvm/x86_emulate.c:1594:
+		if ((rc = ops->read_emulated((unsigned long)c->src.ptr,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: drivers/kvm/x86_emulate.c:1595:
+		if ((rc = ops->read_emulated((unsigned long)c->src.ptr,
+						&c->src.val,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#91: FILE: drivers/kvm/x86_emulate.c:1602:
+		c->dst.ptr = (unsigned long *)register_address(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#94: FILE: drivers/kvm/x86_emulate.c:1605:
+		if ((rc = ops->read_emulated((unsigned long)c->dst.ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: drivers/kvm/x86_emulate.c:1606:
+		if ((rc = ops->read_emulated((unsigned long)c->dst.ptr,
+						&c->dst.val,

CHECK:CAMELCASE: Avoid CamelCase: <emulate_2op_SrcV>
#102: FILE: drivers/kvm/x86_emulate.c:1613:
+		emulate_2op_SrcV("cmp", c->src, c->dst, ctxt->eflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: drivers/kvm/x86_emulate.c:1616:
+		register_address_increment(c->regs[VCPU_REGS_RSI],
+				       (ctxt->eflags & EFLG_DF) ? -c->src.bytes

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: drivers/kvm/x86_emulate.c:1619:
+		register_address_increment(c->regs[VCPU_REGS_RDI],
+				       (ctxt->eflags & EFLG_DF) ? -c->dst.bytes

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 3 warnings, 17 checks, 74 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
