CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#142: FILE: drivers/usb/serial/safe_serial.c:132:
+	.idVendor = (vend), \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#143: FILE: drivers/usb/serial/safe_serial.c:133:
+	.idProduct = (prod),\

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceClass>
#144: FILE: drivers/usb/serial/safe_serial.c:134:
+	.bDeviceClass = (dc),\

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#145: FILE: drivers/usb/serial/safe_serial.c:135:
+	.bInterfaceClass = (ic), \

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#146: FILE: drivers/usb/serial/safe_serial.c:136:
+	.bInterfaceSubClass = (isc),

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#160: FILE: drivers/usb/serial/safe_serial.c:139:
+	{MY_USB_DEVICE(0x49f, 0xffff, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},	/* Itsy */

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#161: FILE: drivers/usb/serial/safe_serial.c:140:
+	{MY_USB_DEVICE(0x3f0, 0x2101, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},	/* Calypso */

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#162: FILE: drivers/usb/serial/safe_serial.c:141:
+	{MY_USB_DEVICE(0x4dd, 0x8001, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},	/* Iris */

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#163: FILE: drivers/usb/serial/safe_serial.c:142:
+	{MY_USB_DEVICE(0x4dd, 0x8002, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},	/* Collie */

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#164: FILE: drivers/usb/serial/safe_serial.c:143:
+	{MY_USB_DEVICE(0x4dd, 0x8003, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},	/* Collie */

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#165: FILE: drivers/usb/serial/safe_serial.c:144:
+	{MY_USB_DEVICE(0x4dd, 0x8004, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},	/* Collie */

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#166: FILE: drivers/usb/serial/safe_serial.c:145:
+	{MY_USB_DEVICE(0x5f9, 0xffff, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},	/* Sharp tmp */

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#168: FILE: drivers/usb/serial/safe_serial.c:147:
+	{MY_USB_DEVICE(0, 0, CDC_DEVICE_CLASS, LINEO_INTERFACE_CLASS, LINEO_INTERFACE_SUBCLASS_SAFESERIAL)},

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fcs' - possible side-effects?
#236: FILE: drivers/usb/serial/safe_serial.c:198:
+#define CRC10_FCS(fcs, c) ((((fcs) << 8) & 0x3ff) ^ crc10_table[((fcs) >> 2) & 0xff] ^ (c))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#248: FILE: drivers/usb/serial/safe_serial.c:209:
+static __u16 __inline__ fcs_compute10(unsigned char *sp, int len, __u16 fcs)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:INLINE: plain inline is preferred over __inline__
#248: FILE: drivers/usb/serial/safe_serial.c:209:
+static __u16 __inline__ fcs_compute10(unsigned char *sp, int len, __u16 fcs)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#251: FILE: drivers/usb/serial/safe_serial.c:211:
+	for (; len-- > 0; fcs = CRC10_FCS(fcs, *sp++));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#265: FILE: drivers/usb/serial/safe_serial.c:223:
+	dbg("%s", __func__);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'safe_read_bulk_callback', this function's name, in a string
#274: FILE: drivers/usb/serial/safe_serial.c:231:
+	dbg("safe_read_bulk_callback length: %d",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/usb/serial/safe_serial.c:232:
+	dbg("safe_read_bulk_callback length: %d",
+					port->read_urb->actual_length);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: drivers/usb/serial/safe_serial.c:239:
+				printk("\nru[%02x] ", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#287: FILE: drivers/usb/serial/safe_serial.c:240:
+			printk("%02x ", *cp++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#290: FILE: drivers/usb/serial/safe_serial.c:242:
+		printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/usb/serial/safe_serial.c:252:
+				info("%s - actual: %d", __func__,
+							actual_length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: drivers/usb/serial/safe_serial.c:254:
+				tty_insert_flip_string(port->port.tty,
+							data, actual_length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: drivers/usb/serial/safe_serial.c:258:
+				err("%s - inconsistent lengths %d:%d",
+					__func__, actual_length, length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: drivers/usb/serial/safe_serial.c:270:
+	usb_fill_bulk_urb(urb, port->serial->dev,
+			usb_rcvbulkpipe(port->serial->dev,

CHECK:CAMELCASE: Avoid CamelCase: <bulk_in_endpointAddress>
#334: FILE: drivers/usb/serial/safe_serial.c:271:
+					port->bulk_in_endpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: drivers/usb/serial/safe_serial.c:278:
+		err("%s - failed resubmitting read urb, error %d",
+							__func__, result);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'safe_write', this function's name, in a string
#353: FILE: drivers/usb/serial/safe_serial.c:290:
+	dbg("safe_write port: %p %d urb: %p count: %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: drivers/usb/serial/safe_serial.c:291:
+	dbg("safe_write port: %p %d urb: %p count: %d",
+				port, port->number, port->write_urb, count);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'safe_write', this function's name, in a string
#363: FILE: drivers/usb/serial/safe_serial.c:298:
+	dbg("safe_write write_urb: %d transfer_buffer_length",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: drivers/usb/serial/safe_serial.c:299:
+	dbg("safe_write write_urb: %d transfer_buffer_length",
 	     port->write_urb->transfer_buffer_length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: drivers/usb/serial/safe_serial.c:352:
+	usb_serial_debug_data(debug, &port->dev, __func__, count,
+					port->write_urb->transfer_buffer);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: drivers/usb/serial/safe_serial.c:359:
+				printk("\nsu[%02x] ", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: drivers/usb/serial/safe_serial.c:360:
+			printk("%02x ", *cp++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#443: FILE: drivers/usb/serial/safe_serial.c:362:
+		printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: drivers/usb/serial/safe_serial.c:370:
+		err("%s - failed submitting write urb, error %d",
+							__func__, result);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#469: FILE: drivers/usb/serial/safe_serial.c:384:
+	dbg("%s", __func__);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'safe_write_room', this function's name, in a string
#481: FILE: drivers/usb/serial/safe_serial.c:392:
+		dbg("safe_write_room returns %d", room);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: drivers/usb/serial/safe_serial.c:431:
+	info("vendor: %x product: %x safe: %d padded: %d\n",
+					vendor, product, safe, padded);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 21 warnings, 18 checks, 475 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
