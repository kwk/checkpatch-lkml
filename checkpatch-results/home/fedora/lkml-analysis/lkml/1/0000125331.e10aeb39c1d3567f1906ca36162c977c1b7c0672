WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/asm-generic/uaccess.h:1:
+#ifndef __ASM_GENERIC_UACCESS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: include/asm-generic/uaccess.h:40:
+#define access_ok(type, addr, size) __access_ok((unsigned long)(addr),(size))
                                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#118: FILE: include/asm-generic/uaccess.h:67:
+struct exception_table_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/asm-generic/uaccess.h:72:
+extern unsigned long search_exception_table(unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#123: FILE: include/asm-generic/uaccess.h:72:
+extern unsigned long search_exception_table(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: include/asm-generic/uaccess.h:79:
+static inline __must_check long __copy_from_user(void *to,
+		const void __user * from, unsigned long n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: include/asm-generic/uaccess.h:79:
+		const void __user * from, unsigned long n)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#133: FILE: include/asm-generic/uaccess.h:82:
+		switch(n) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: include/asm-generic/uaccess.h:109:
+static inline __must_check long __copy_to_user(void __user *to,
+		const void *from, unsigned long n)

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: include/asm-generic/uaccess.h:112:
+		switch(n) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#194: FILE: include/asm-generic/uaccess.h:143:
+#define __put_user(x, ptr) \
+({								\
+	__typeof__(*(ptr)) __x = (x);				\
+	int __pu_err = -EFAULT;					\
+        __chk_user_ptr(ptr);                                    \
+	switch (sizeof (*(ptr))) {				\
+	case 1:							\
+	case 2:							\
+	case 4:							\
+	case 8:							\
+		__pu_err = __put_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		break;						\
+	default:						\
+		__put_user_bad();				\
+		break;						\
+	 }							\
+	__pu_err;						\
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: include/asm-generic/uaccess.h:147:
+        __chk_user_ptr(ptr);                                    \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: include/asm-generic/uaccess.h:147:
+        __chk_user_ptr(ptr);                                    \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#199: FILE: include/asm-generic/uaccess.h:148:
+	switch (sizeof (*(ptr))) {				\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: include/asm-generic/uaccess.h:153:
+		__pu_err = __put_user_fn(sizeof (*(ptr)),	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#214: FILE: include/asm-generic/uaccess.h:163:
+#define put_user(x, ptr)					\
+({								\
+	might_sleep();						\
+	__access_ok(ptr, sizeof (*ptr)) ?			\
+		__put_user(x, ptr) :				\
+		-EFAULT;					\
+})

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#217: FILE: include/asm-generic/uaccess.h:166:
+	__access_ok(ptr, sizeof (*ptr)) ?			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#228: FILE: include/asm-generic/uaccess.h:177:
+extern int __put_user_bad(void) __attribute__((noreturn));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/asm-generic/uaccess.h:177:
+extern int __put_user_bad(void) __attribute__((noreturn));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#230: FILE: include/asm-generic/uaccess.h:179:
+#define __get_user(x, ptr)					\
+({								\
+	int __gu_err = -EFAULT;					\
+	__chk_user_ptr(ptr);					\
+	switch (sizeof(*(ptr))) {				\
+	case 1: {						\
+		unsigned char __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	case 2: {						\
+		unsigned short __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	case 4: {						\
+		unsigned int __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	case 8: {						\
+		unsigned long long __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	default:						\
+		__get_user_bad();				\
+		break;						\
+	}							\
+	__gu_err;						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#230: FILE: include/asm-generic/uaccess.h:179:
+#define __get_user(x, ptr)					\
+({								\
+	int __gu_err = -EFAULT;					\
+	__chk_user_ptr(ptr);					\
+	switch (sizeof(*(ptr))) {				\
+	case 1: {						\
+		unsigned char __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	case 2: {						\
+		unsigned short __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	case 4: {						\
+		unsigned int __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	case 8: {						\
+		unsigned long long __x;				\
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\
+					 ptr, &__x);		\
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\
+		break;						\
+	};							\
+	default:						\
+		__get_user_bad();				\
+		break;						\
+	}							\
+	__gu_err;						\
+})

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#237: FILE: include/asm-generic/uaccess.h:186:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

CHECK:SPACING: No space is necessary after a cast
#239: FILE: include/asm-generic/uaccess.h:188:
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: include/asm-generic/uaccess.h:193:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

CHECK:SPACING: No space is necessary after a cast
#246: FILE: include/asm-generic/uaccess.h:195:
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#251: FILE: include/asm-generic/uaccess.h:200:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

CHECK:SPACING: No space is necessary after a cast
#253: FILE: include/asm-generic/uaccess.h:202:
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#258: FILE: include/asm-generic/uaccess.h:207:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

CHECK:SPACING: No space is necessary after a cast
#260: FILE: include/asm-generic/uaccess.h:209:
+		(x) = *(__force __typeof__(*(ptr)) *) &__x;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#270: FILE: include/asm-generic/uaccess.h:219:
+#define get_user(x, ptr)					\
+({								\
+	might_sleep();						\
+	__access_ok(ptr, sizeof (*ptr)) ?			\
+		__get_user(x, ptr) :				\
+		-EFAULT;					\
+})

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#273: FILE: include/asm-generic/uaccess.h:222:
+	__access_ok(ptr, sizeof (*ptr)) ?			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#284: FILE: include/asm-generic/uaccess.h:233:
+extern int __get_user_bad(void) __attribute__((noreturn));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/asm-generic/uaccess.h:233:
+extern int __get_user_bad(void) __attribute__((noreturn));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: include/asm-generic/uaccess.h:244:
+static inline long copy_from_user(void *to,
+		const void __user * from, unsigned long n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: include/asm-generic/uaccess.h:244:
+		const void __user * from, unsigned long n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: include/asm-generic/uaccess.h:254:
+static inline long copy_to_user(void __user *to,
+		const void *from, unsigned long n)

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: include/asm-generic/uaccess.h:271:
+	char *tmp;
+	strncpy(dst, (const char __force *)src, count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000125331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 15 warnings, 16 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000125331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
