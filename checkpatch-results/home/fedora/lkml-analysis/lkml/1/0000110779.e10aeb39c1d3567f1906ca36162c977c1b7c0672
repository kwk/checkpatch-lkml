WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/pramfs/pram_fs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: fs/pramfs/pram_fs.h:43:
+    printk(KERN_DEBUG PFX ": " format , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#89: FILE: fs/pramfs/pram_fs.h:43:
+    printk(KERN_DEBUG PFX ": " format , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#89: FILE: fs/pramfs/pram_fs.h:43:
+    printk(KERN_DEBUG PFX ": " format , ## arg)
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: fs/pramfs/pram_fs.h:48:
+    printk(KERN_ERR PFX ": " format , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#94: FILE: fs/pramfs/pram_fs.h:48:
+    printk(KERN_ERR PFX ": " format , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#94: FILE: fs/pramfs/pram_fs.h:48:
+    printk(KERN_ERR PFX ": " format , ## arg)
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: fs/pramfs/pram_fs.h:50:
+    printk(KERN_INFO PFX ": " format , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#96: FILE: fs/pramfs/pram_fs.h:50:
+    printk(KERN_INFO PFX ": " format , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#96: FILE: fs/pramfs/pram_fs.h:50:
+    printk(KERN_INFO PFX ": " format , ## arg)
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: fs/pramfs/pram_fs.h:52:
+    printk(KERN_WARNING PFX ": " format , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#98: FILE: fs/pramfs/pram_fs.h:52:
+    printk(KERN_WARNING PFX ": " format , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#98: FILE: fs/pramfs/pram_fs.h:52:
+    printk(KERN_WARNING PFX ": " format , ## arg)
                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: fs/pramfs/pram_fs.h:83:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/pramfs/pram_fs.h:121:
+    (PRAM_INODE_SIZE - offsetof(struct pram_inode, i_d.d_name) - 1)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#169: FILE: fs/pramfs/pram_fs.h:123:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: fs/pramfs/pram_fs.h:175:
+extern int pram_get_and_update_block(struct inode *inode, sector_t iblock,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: fs/pramfs/pram_fs.h:184:
+extern ssize_t __pram_direct_IO(int rw, struct kiocb *iocb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: fs/pramfs/pram_fs.h:185:
+extern ssize_t __pram_direct_IO(int rw, struct kiocb *iocb,
+			  const struct iovec *iov,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: fs/pramfs/pram_fs.h:188:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: fs/pramfs/pram_fs.h:192:
+extern void pram_init_bitmap(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: fs/pramfs/pram_fs.h:193:
+extern void pram_free_block(struct super_block *sb, int blocknr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: fs/pramfs/pram_fs.h:194:
+extern int pram_new_block(struct super_block *sb, int *blocknr, int zero);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: fs/pramfs/pram_fs.h:195:
+extern unsigned long pram_count_free_blocks(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: fs/pramfs/pram_fs.h:198:
+extern int pram_add_link(struct dentry *dentry, struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: fs/pramfs/pram_fs.h:199:
+extern int pram_remove_link(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: fs/pramfs/pram_fs.h:202:
+extern int pram_alloc_blocks(struct inode *inode, int file_blocknr, int num);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: fs/pramfs/pram_fs.h:203:
+extern off_t pram_find_data_block(struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/pramfs/pram_fs.h:204:
+extern off_t pram_find_data_block(struct inode *inode,
+					 int file_blocknr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: fs/pramfs/pram_fs.h:205:
+extern struct inode *pram_fill_new_inode(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: fs/pramfs/pram_fs.h:206:
+extern struct inode *pram_fill_new_inode(struct super_block *sb,
+					   struct pram_inode *raw_inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: fs/pramfs/pram_fs.h:207:
+extern void pram_put_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: fs/pramfs/pram_fs.h:208:
+extern void pram_delete_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: fs/pramfs/pram_fs.h:209:
+extern struct inode *pram_new_inode(const struct inode *dir, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: fs/pramfs/pram_fs.h:210:
+extern void pram_read_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: fs/pramfs/pram_fs.h:211:
+extern void pram_truncate(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: fs/pramfs/pram_fs.h:212:
+extern int pram_write_inode(struct inode *inode, int wait);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: fs/pramfs/pram_fs.h:213:
+extern void pram_dirty_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: fs/pramfs/pram_fs.h:214:
+extern int pram_notify_change(struct dentry *dentry, struct iattr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: fs/pramfs/pram_fs.h:218:
+extern struct pram_super_block *get_pram_super(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: fs/pramfs/pram_fs.h:220:
+extern struct super_block *pram_read_super(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: fs/pramfs/pram_fs.h:221:
+extern struct super_block *pram_read_super(struct super_block *sb,
+					      void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: fs/pramfs/pram_fs.h:223:
+extern int pram_statfs(struct dentry *d, struct kstatfs *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: fs/pramfs/pram_fs.h:224:
+extern int pram_remount(struct super_block *sb, int *flags, char *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#273: FILE: fs/pramfs/pram_fs.h:227:
+extern int pram_block_symlink(struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/pramfs/pram_fs.h:228:
+extern int pram_block_symlink(struct inode *inode,
+			       const char *symname, int len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#276: FILE: fs/pramfs/pram_fs.h:230:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: fs/pramfs/pram_fs.h:232:
+extern void pram_writeable(void *vaddr, unsigned long size, int rw);

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: fs/pramfs/pram_fs.h:251:
+	u32 sum = 0;
+	while (n--)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#303: FILE: fs/pramfs/pram_fs.h:257:
+/* If this is part of a read-modify-write of the super block,
+   pram_lock_super() before calling! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#303: FILE: fs/pramfs/pram_fs.h:257:
+   pram_lock_super() before calling! */

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: fs/pramfs/pram_fs.h:262:
+	struct pram_sb_info *sbi = (struct pram_sb_info *)sb->s_fs_info;
+	return (struct pram_super_block *)sbi->virt_addr;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#316: FILE: fs/pramfs/pram_fs.h:270:
+	ps->s_sum -= pram_calc_checksum((u32 *)ps, PRAM_SB_SIZE>>2);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#324: FILE: fs/pramfs/pram_fs.h:278:
+	pi->i_sum -= pram_calc_checksum((u32 *)pi, PRAM_INODE_SIZE>>2);
 	                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ps' - possible side-effects?
#345: FILE: fs/pramfs/pram_fs.h:299:
+#define pram_unlock_super(ps, flags) {\
+	pram_sync_super(ps);\
+	pram_unlock_range((ps), PRAM_SB_SIZE, flags);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#353: FILE: fs/pramfs/pram_fs.h:307:
+#define pram_unlock_inode(pi, flags) {\
+	pram_sync_inode(pi);\
+	pram_unlock_range((pi), PRAM_SB_SIZE, flags);\
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#368: FILE: fs/pramfs/pram_fs.h:322:
+	struct pram_super_block *ps = pram_get_super(sb);
+	return (void *)ps + ps->s_bitmap_start;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#372: FILE: fs/pramfs/pram_fs.h:326:
+/* If this is part of a read-modify-write of the inode metadata,
+   pram_lock_inode() before calling! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#372: FILE: fs/pramfs/pram_fs.h:326:
+   pram_lock_inode() before calling! */

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: fs/pramfs/pram_fs.h:331:
+	struct pram_super_block *ps = pram_get_super(sb);
+	return ino ? (struct pram_inode *)((void *)ps + ino) : NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: fs/pramfs/pram_fs.h:338:
+	struct pram_super_block *ps = pram_get_super(sb);
+	return (ino_t)((unsigned long)pi - (unsigned long)ps);

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: fs/pramfs/pram_fs.h:345:
+	struct pram_super_block *ps = pram_get_super(sb);
+	return (off_t)(ps->s_bitmap_start +

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: fs/pramfs/pram_fs.h:353:
+	struct pram_super_block *ps = pram_get_super(sb);
+	return (block - ps->s_bitmap_start) >> sb->s_blocksize_bits;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#403: FILE: fs/pramfs/pram_fs.h:357:
+/* If this is part of a read-modify-write of the block,
+   pram_lock_block() before calling! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#403: FILE: fs/pramfs/pram_fs.h:357:
+   pram_lock_block() before calling! */

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: fs/pramfs/pram_fs.h:362:
+	struct pram_super_block *ps = pram_get_super(sb);
+	return block ? ((void *)ps + block) : NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#411: FILE: fs/pramfs/pram_fs.h:365:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#417: FILE: fs/pramfs/pram_fs.h:371:
+extern struct file_operations pram_dir_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#420: FILE: fs/pramfs/pram_fs.h:374:
+extern struct inode_operations pram_file_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#421: FILE: fs/pramfs/pram_fs.h:375:
+extern struct file_operations pram_file_operations;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#424: FILE: fs/pramfs/pram_fs.h:378:
+extern struct address_space_operations pram_aops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#427: FILE: fs/pramfs/pram_fs.h:381:
+extern struct inode_operations pram_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#430: FILE: fs/pramfs/pram_fs.h:384:
+extern struct inode_operations pram_symlink_inode_operations;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#439: FILE: fs/pramfs/pram_fs_sb.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 31 warnings, 39 checks, 428 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
