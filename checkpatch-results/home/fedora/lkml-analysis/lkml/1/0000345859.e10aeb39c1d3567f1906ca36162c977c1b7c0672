WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
equal to processor.h. Only what's exactly the same is moved around, the rest

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#49: FILE: include/asm-x86/processor.h:32:
+extern void print_cpu_info(struct cpuinfo_x86 *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#50: FILE: include/asm-x86/processor.h:33:
+extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: include/asm-x86/processor.h:34:
+extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#79: FILE: include/asm-x86/processor.h:164:
+typedef struct microcode microcode_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#80: FILE: include/asm-x86/processor.h:165:
+typedef struct microcode_header microcode_header_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/asm-x86/processor.h:184:
+extern int kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/asm-x86/processor.h:187:
+extern void release_thread(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#102: FILE: include/asm-x86/processor.h:187:
+extern void release_thread(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/asm-x86/processor.h:190:
+extern void prepare_to_copy(struct task_struct *tsk);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#118: FILE: include/asm-x86/processor.h:253:
+	__asm__ __volatile__("rep;nop": : :"memory");
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#118: FILE: include/asm-x86/processor.h:253:
+	__asm__ __volatile__("rep;nop": : :"memory");
 	                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: include/asm-x86/processor.h:260:
+	int tmp;
+	asm volatile("cpuid" : "=a" (tmp) : "0" (1)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: include/asm-x86/processor.h:267:
+static inline void __monitor(const void *eax, unsigned long ecx,
+		unsigned long edx)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#135: FILE: include/asm-x86/processor.h:270:
+	asm volatile(

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#137: FILE: include/asm-x86/processor.h:272:
+		: :"a" (eax), "c" (ecx), "d"(edx));
 		  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#143: FILE: include/asm-x86/processor.h:278:
+	asm volatile(

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#145: FILE: include/asm-x86/processor.h:280:
+		: :"a" (eax), "c" (ecx));
 		  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#151: FILE: include/asm-x86/processor.h:286:
+	asm volatile(

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#153: FILE: include/asm-x86/processor.h:288:
+		: :"a" (eax), "c" (ecx));
 		  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/asm-x86/processor.h:291:
+extern void mwait_idle_with_hints(unsigned long eax, unsigned long ecx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/asm-x86/processor.h:295:
+extern void select_idle_routine(const struct cpuinfo_x86 *c);

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_PREFETCHW' is wrong - use Kconfig variables or standard guards instead
#169: FILE: include/asm-x86/processor.h:304:
+#define ARCH_HAS_PREFETCHW

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SPINLOCK_PREFETCH' is wrong - use Kconfig variables or standard guards instead
#170: FILE: include/asm-x86/processor.h:305:
+#define ARCH_HAS_SPINLOCK_PREFETCH

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345859.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 5 warnings, 12 checks, 468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345859.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
