WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/aufs/whout.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/whout.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#60: FILE: fs/aufs/whout.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#71: FILE: fs/aufs/whout.c:27:
+#define WH_MASK			S_IRUGO

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#93: FILE: fs/aufs/whout.c:49:
+	AuDebugOn(!name || !len || !wh);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#130: FILE: fs/aufs/whout.c:86:
+	LKTRTrace("%.*s/%.*s, ndx{%p, 0x%x}\n", AuDLNPair(h_parent),

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#130: FILE: fs/aufs/whout.c:86:
+	LKTRTrace("%.*s/%.*s, ndx{%p, 0x%x}\n", AuDLNPair(h_parent),

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#136: FILE: fs/aufs/whout.c:92:
+	if (ndx && ndx->nd) {
 	                ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#162: FILE: fs/aufs/whout.c:118:
+	AuIOErr("%.*s Invalid whiteout entry type 0%o.\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#168: FILE: fs/aufs/whout.c:124:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#237: FILE: fs/aufs/whout.c:193:
+	AuDbg("%.*s\n", len, name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: fs/aufs/whout.c:194:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#244: FILE: fs/aufs/whout.c:200:
+	AuTraceErrPtr(dentry);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#264: FILE: fs/aufs/whout.c:220:
+		.nd	= NULL,
 		 ^^

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#273: FILE: fs/aufs/whout.c:229:
+	IMustLock(h_dir);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#315: FILE: fs/aufs/whout.c:271:
+			(h_dir->i_mode & S_ISVTX)
+			&& wh_dentry->d_inode->i_uid != current->fsuid);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#327: FILE: fs/aufs/whout.c:283:
+	AuDebugOn((dentry && au_dbwh(dentry) < 0)
+		  || !wh_dentry->d_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#328: FILE: fs/aufs/whout.c:284:
+		  || !wh_dentry->d_inode
+		  || !S_ISREG(wh_dentry->d_inode->i_mode));

CHECK:CAMELCASE: Avoid CamelCase: <AuLNPair>
#345: FILE: fs/aufs/whout.c:301:
+	LKTRTrace("%.*s/%.*s\n", AuDLNPair(h_parent), AuLNPair(wh));

CHECK:BRACES: braces {} should be used on all arms of this statement
#350: FILE: fs/aufs/whout.c:306:
+	if (!IS_ERR(h_dentry)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#356: FILE: fs/aufs/whout.c:312:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#370: FILE: fs/aufs/whout.c:326:
+	AuTraceEnter();

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#376: FILE: fs/aufs/whout.c:332:
+			AuWarn("failed unlink %.*s (%d), ignored.\n",

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#401: FILE: fs/aufs/whout.c:357:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#409: FILE: fs/aufs/whout.c:365:
+	if (!plink->d_inode) {
[...]
+	} else if (S_ISDIR(plink->d_inode->i_mode))
[...]
+	else
[...]

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#410: FILE: fs/aufs/whout.c:366:
+		int mode = S_IRWXU;

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: fs/aufs/whout.c:367:
+		int mode = S_IRWXU;
+		if (unlikely(au_test_nfs(plink->d_sb)))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#412: FILE: fs/aufs/whout.c:368:
+			mode |= S_IXUGO;

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#417: FILE: fs/aufs/whout.c:373:
+		AuErr("unknown %.*s exists\n", AuDLNPair(plink));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#444: FILE: fs/aufs/whout.c:400:
+		.nd	= NULL,
 		 ^^

CHECK:CAMELCASE: Avoid CamelCase: <BrWhMustWriteLock>
#450: FILE: fs/aufs/whout.c:406:
+	BrWhMustWriteLock(br);

CHECK:CAMELCASE: Avoid CamelCase: <SiMustWriteLock>
#451: FILE: fs/aufs/whout.c:407:
+	SiMustWriteLock(sb);

CHECK:BRACES: braces {} should be used on all arms of this statement
#484: FILE: fs/aufs/whout.c:440:
+		if (do_plink) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#493: FILE: fs/aufs/whout.c:449:
+		} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#513: FILE: fs/aufs/whout.c:469:
+					  /*nd*/NULL, nfsmnt);
 					    ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#522: FILE: fs/aufs/whout.c:478:
+		if (do_plink) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#527: FILE: fs/aufs/whout.c:483:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: fs/aufs/whout.c:489:
+		BUG();

CHECK:CAMELCASE: Avoid CamelCase: <SiMustReadLock>
#651: FILE: fs/aufs/whout.c:607:
+	SiMustReadLock(sb);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#669: FILE: fs/aufs/whout.c:625:
+	err = au_h_create(h_dir, wh, WH_MASK, dlgt, /*nd*/NULL,
 	                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#692: FILE: fs/aufs/whout.c:648:
+		.nd	= NULL,
 		 ^^

CHECK:BRACES: Unbalanced braces around else statement
#764: FILE: fs/aufs/whout.c:720:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#828: FILE: fs/aufs/whout.c:784:
+		if (!err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#830: FILE: fs/aufs/whout.c:786:
+		else {

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_NHASH>
#870: FILE: fs/aufs/whout.c:826:
+	for (i = 0; !err && i < AuSize_NHASH; i++) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#932: FILE: fs/aufs/whout.c:888:
+		.nd	= NULL,
 		 ^^

CHECK:CAMELCASE: Avoid CamelCase: <IiMustAnyLock>
#939: FILE: fs/aufs/whout.c:895:
+	IiMustAnyLock(dir);

CHECK:BRACES: braces {} should be used on all arms of this statement
#957: FILE: fs/aufs/whout.c:913:
+	if (!au_test_h_perm_sio(h_inode, MAY_EXEC | MAY_WRITE, dlgt))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#959: FILE: fs/aufs/whout.c:915:
+	else {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1006: FILE: fs/aufs/whout.c:962:
+	iput(args->inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1008: FILE: fs/aufs/whout.c:964:
+	iput(args->dir);
 	^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1077: FILE: fs/aufs/whout.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1091: FILE: fs/aufs/whout.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1092: FILE: fs/aufs/whout.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <AuDiropq_CREATE>
#1130: FILE: fs/aufs/whout.h:54:
+#define AuDiropq_CREATE	1

CHECK:CAMELCASE: Avoid CamelCase: <AuDiropq_DLGT>
#1131: FILE: fs/aufs/whout.h:55:
+#define AuDiropq_DLGT	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1131: FILE: fs/aufs/whout.h:55:
+#define AuDiropq_DLGT	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuDiropq_##name>
#1132: FILE: fs/aufs/whout.h:56:
+#define au_ftest_diropq(flags, name)	((flags) & AuDiropq_##name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1174: FILE: fs/aufs/whout.h:98:
+	unsigned int flags = AuDiropq_CREATE;
+	if (unlikely(dlgt))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1183: FILE: fs/aufs/whout.h:107:
+	unsigned int flags = !AuDiropq_CREATE;
+	if (unlikely(dlgt))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1207: FILE: fs/aufs/whout.h:131:
+	if (unlikely(!au_opt_test(au_mntflags(sb), SHWH)
+		     && !strncmp(name->name, AUFS_WH_PFX, AUFS_WH_PFX_LEN)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 21 warnings, 37 checks, 1164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
