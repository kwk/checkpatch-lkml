WARNING:REPEATED_WORD: Possible repeated word: 'the'
#61: 
Then each task is moved back to the the "boosted" list after it has its

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/rcupdate.h:258:
+extern void init_rcu_boost_late(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/rcupdate.h:259:
+extern void rcu_boost_readers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/rcupdate.h:260:
+extern void rcu_unboost_readers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/rcupdate.h:261:
+extern void __rcu_preempt_boost(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/rcupdate.h:263:
+extern int rcu_trace_boost_create(struct dentry *rcudir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/rcupdate.h:264:
+extern void rcu_trace_boost_destroy(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/linux/rcupdate.h:271:
+extern void __rcu_preempt_unboost(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#170: FILE: include/linux/rcupdate.h:276:
+}
+static inline void rcu_preempt_boost(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#173: FILE: include/linux/rcupdate.h:279:
+}
+static inline void __rcu_preempt_unboost(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#176: FILE: include/linux/rcupdate.h:282:
+}
+static inline void rcu_boost_readers(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#179: FILE: include/linux/rcupdate.h:285:
+}
+static inline void rcu_unboost_readers(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#182: FILE: include/linux/rcupdate.h:288:
+}
+static inline void rcu_unboost_readers(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#185: FILE: include/linux/rcupdate.h:291:
+}
+#ifdef CONFIG_RCU_TRACE

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#189: FILE: include/linux/rcupdate.h:295:
+}
+static inline void rcu_trace_boost_destroy(void)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#237: FILE: include/linux/sched.h:737:
+#define set_rcu_prio(p, prio) /* cpp to avoid #include hell */ \
+	do { \
+		(p)->rcu_prio = (prio); \
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#241: FILE: include/linux/sched.h:741:
+#define get_rcu_prio(p) (p)->rcu_prio  /* cpp to avoid #include hell */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#246: FILE: include/linux/sched.h:746:
+}
+static inline int get_rcu_prio(struct task_struct *p)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#338: FILE: kernel/rcupreempt-boost.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#352: FILE: kernel/rcupreempt-boost.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#353: FILE: kernel/rcupreempt-boost.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#398: FILE: kernel/rcupreempt-boost.c:61:
+#define RCU_BOOST_ME &__get_cpu_var(rcu_boost_data)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#405: FILE: kernel/rcupreempt-boost.c:68:
+static ssize_t rcuboost_read(struct file *filp, char __user *buffer,
                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: kernel/rcupreempt-boost.c:69:
+static ssize_t rcuboost_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: kernel/rcupreempt-boost.c:161:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcupreempt_boost_trace_buf, strlen(rcupreempt_boost_trace_buf));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#504: FILE: kernel/rcupreempt-boost.c:167:
+static struct file_operations rcuboost_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#523: FILE: kernel/rcupreempt-boost.c:186:
+	if (rcuboostdir)
+		debugfs_remove(rcuboostdir);

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#567: FILE: kernel/rcupreempt-boost.c:230:
+	WARN_ON(!spin_is_locked(&task->pi_lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:TYPO_SPELLING: 'grabing' may be misspelled - perhaps 'grabbing'?
#603: FILE: kernel/rcupreempt-boost.c:266:
+	 * To keep us from preempting between grabing
 	                                      ^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#772: FILE: kernel/rcupreempt-boost.c:435:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#867: FILE: kernel/rcupreempt-boost.c:530:
+		printk("krcupreemptd failed\n");

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#953: FILE: kernel/rcupreempt_trace.c:306:
+	if (ctrsdir)
+		debugfs_remove(ctrsdir);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373813.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 18 checks, 792 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373813.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
