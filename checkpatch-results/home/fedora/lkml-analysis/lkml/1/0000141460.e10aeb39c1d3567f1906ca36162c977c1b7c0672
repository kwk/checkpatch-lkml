WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git xen-for-linus

ERROR:SPACING: space required before the open parenthesis '('
#229: FILE: arch/x86/include/asm/pgtable.h:84:
+#define arch_end_context_switch(prev)	do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#247: FILE: arch/x86/include/asm/required-features.h:56:
+#define NEED_PSE	(1<<(X86_FEATURE_PSE) & 31)
                 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#248: FILE: arch/x86/include/asm/required-features.h:57:
+#define NEED_PGE	(1<<(X86_FEATURE_PGE) & 31)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#273: FILE: arch/x86/include/asm/thread_info.h:120:
+#define _TIF_LAZY_MMU_UPDATES	(1 << TIF_LAZY_MMU_UPDATES)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: arch/x86/kernel/paravirt.c:249:
+	BUG_ON(percpu_read(paravirt_lazy_mode) != PARAVIRT_LAZY_NONE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: arch/x86/kernel/paravirt.c:256:
+	BUG_ON(percpu_read(paravirt_lazy_mode) != mode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#343: FILE: arch/x86/kernel/paravirt.c:273:
+	BUG_ON(preemptible());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: arch/x86/kernel/paravirt.c:284:
+	BUG_ON(preemptible());

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#644: FILE: arch/x86/xen/enlighten.c:178:
+	unsigned maskecx = ~0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#695: FILE: arch/x86/xen/enlighten.c:223:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#749: FILE: arch/x86/xen/enlighten.c:342:
+		BUG_ON(ptep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptep"
#749: FILE: arch/x86/xen/enlighten.c:342:
+		BUG_ON(ptep == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#766: FILE: arch/x86/xen/enlighten.c:355:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#874: FILE: arch/x86/xen/mmu.c:244:
+	unsigned topidx = p2m_top_index(pfn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#908: FILE: arch/x86/xen/mmu.c:267:
+	BUG_ON(p == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#908: FILE: arch/x86/xen/mmu.c:267:
+	BUG_ON(p == NULL);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#917: FILE: arch/x86/xen/mmu.c:276:
+	unsigned topidx, idx;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#944: FILE: arch/x86/xen/mmu.c:299:
+		BUG_ON(pfn != mfn && mfn != INVALID_P2M_ENTRY);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#952: FILE: arch/x86/xen/mmu.c:307:
+			BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1023: FILE: arch/x86/xen/mmu.c:1464:
+static void pin_pagetable_pfn(unsigned cmd, unsigned long pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1026: FILE: arch/x86/xen/mmu.c:1467:
+	struct mmuext_op op;
+	op.cmd = cmd;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1029: FILE: arch/x86/xen/mmu.c:1470:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1046: FILE: arch/x86/xen/mmu.c:1488:
+	BUG_ON(mem_map);	/* should only be used early */

WARNING:TYPO_SPELLING: 'triger' may be misspelled - perhaps 'trigger'?
#1188: FILE: drivers/xen/Kconfig:26:
+	  The evtchn driver allows a userspace process to triger event
 	                                                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1256: FILE: drivers/xen/cpu_hotplug.c:41:
+	printk(KERN_ERR "XENBUS: unknown state(%s) on CPU%d\n", state, cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1259: FILE: drivers/xen/cpu_hotplug.c:44:
+}
+static void vcpu_hotplug(unsigned int cpu)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1310: FILE: drivers/xen/events.c:154:
+unsigned irq_from_evtchn(unsigned int evtchn)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1320: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1325: FILE: drivers/xen/evtchn.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1385: FILE: drivers/xen/evtchn.c:61:
+#define EVTCHN_RING_MASK(_i) ((_i)&(EVTCHN_RING_SIZE-1))
                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1385: FILE: drivers/xen/evtchn.c:61:
+#define EVTCHN_RING_MASK(_i) ((_i)&(EVTCHN_RING_SIZE-1))
                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1436: FILE: drivers/xen/evtchn.c:112:
+	count &= ~(sizeof(evtchn_port_t)-1);
 	                                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bytes2 != 0'
#1487: FILE: drivers/xen/evtchn.c:163:
+	if (copy_to_user(buf, &u->ring[EVTCHN_RING_MASK(c)], bytes1) ||
+	    ((bytes2 != 0) &&
+	     copy_to_user(&buf[bytes1], &u->ring[0], bytes2)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kbuf"
#1507: FILE: drivers/xen/evtchn.c:183:
+	if (kbuf == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1511: FILE: drivers/xen/evtchn.c:187:
+	count &= ~(sizeof(evtchn_port_t)-1);
 	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1525: FILE: drivers/xen/evtchn.c:201:
+	for (i = 0; i < (count/sizeof(evtchn_port_t)); i++)
 	                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kbuf[i] < NR_EVENT_CHANNELS'
#1526: FILE: drivers/xen/evtchn.c:202:
+		if ((kbuf[i] < NR_EVENT_CHANNELS) && (port_user[kbuf[i]] == u))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1549: FILE: drivers/xen/evtchn.c:225:
+	BUG_ON(port_user[port] != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "port_user[port]"
#1549: FILE: drivers/xen/evtchn.c:225:
+	BUG_ON(port_user[port] != NULL);

CHECK:SPACING: No space is necessary after a cast
#1577: FILE: drivers/xen/evtchn.c:253:
+	void __user *uarg = (void __user *) arg;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1695: FILE: drivers/xen/evtchn.c:371:
+		u->ring_cons = u->ring_prod = u->ring_overflow = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1703: FILE: drivers/xen/evtchn.c:379:
+		rc = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1724: FILE: drivers/xen/evtchn.c:400:
+static int evtchn_fasync(int fd, struct file *filp, int on)
                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1727: FILE: drivers/xen/evtchn.c:403:
+	return fasync_helper(fd, filp, on, &u->evtchn_async_queue);
 	                         ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1727: FILE: drivers/xen/evtchn.c:403:
+	struct per_user_data *u = filp->private_data;
+	return fasync_helper(fd, filp, on, &u->evtchn_async_queue);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1730: FILE: drivers/xen/evtchn.c:406:
+static int evtchn_open(struct inode *inode, struct file *filp)
                                                          ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u"
#1735: FILE: drivers/xen/evtchn.c:411:
+	if (u == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u->name"
#1739: FILE: drivers/xen/evtchn.c:415:
+	if (u->name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u->ring"
#1747: FILE: drivers/xen/evtchn.c:423:
+	if (u->ring == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1761: FILE: drivers/xen/evtchn.c:437:
+static int evtchn_release(struct inode *inode, struct file *filp)
                                                             ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1801: FILE: drivers/xen/evtchn.c:477:
+};
+static int __init evtchn_init(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1814: FILE: drivers/xen/evtchn.c:490:
+		printk(KERN_ALERT "Could not register /dev/misc/evtchn\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1818: FILE: drivers/xen/evtchn.c:494:
+	printk(KERN_INFO "Event-channel device installed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1861: FILE: drivers/xen/manage.c:101:
+	printk(KERN_DEBUG "suspending xenstore...\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1884: FILE: drivers/xen/sys-hypervisor.c:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hyp_sysfs_attr *' should also have an identifier name
#1913: FILE: drivers/xen/sys-hypervisor.c:30:
+	ssize_t (*show)(struct hyp_sysfs_attr *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1913: FILE: drivers/xen/sys-hypervisor.c:30:
+	ssize_t (*show)(struct hyp_sysfs_attr *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hyp_sysfs_attr *' should also have an identifier name
#1914: FILE: drivers/xen/sys-hypervisor.c:31:
+	ssize_t (*store)(struct hyp_sysfs_attr *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1914: FILE: drivers/xen/sys-hypervisor.c:31:
+	ssize_t (*store)(struct hyp_sysfs_attr *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1914: FILE: drivers/xen/sys-hypervisor.c:31:
+	ssize_t (*store)(struct hyp_sysfs_attr *, const char *, size_t);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1939: FILE: drivers/xen/sys-hypervisor.c:56:
+	int version = HYPERVISOR_xen_version(XENVER_version, NULL);
+	if (version)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1949: FILE: drivers/xen/sys-hypervisor.c:66:
+	int version = HYPERVISOR_xen_version(XENVER_version, NULL);
+	if (version)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2002: FILE: drivers/xen/sys-hypervisor.c:119:
+	extern int xenstored_ready;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct xen_compile_info)...)
#2038: FILE: drivers/xen/sys-hypervisor.c:155:
+	info = kmalloc(sizeof(struct xen_compile_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct xen_compile_info)...)
#2056: FILE: drivers/xen/sys-hypervisor.c:173:
+	info = kmalloc(sizeof(struct xen_compile_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct xen_compile_info)...)
#2074: FILE: drivers/xen/sys-hypervisor.c:191:
+	info = kmalloc(sizeof(struct xen_compile_info), GFP_KERNEL);

WARNING:STORAGE_CLASS: storage class 'static' should be located before type 'int __init'
#2099: FILE: drivers/xen/sys-hypervisor.c:216:
+int __init static xen_compilation_init(void)

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2150: FILE: drivers/xen/sys-hypervisor.c:267:
+	struct xen_platform_parameters *parms;
 	                                ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2152: FILE: drivers/xen/sys-hypervisor.c:269:
+	parms = kmalloc(sizeof(struct xen_platform_parameters), GFP_KERNEL);
 	^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*parms)...) over kmalloc(sizeof(struct xen_platform_parameters)...)
#2152: FILE: drivers/xen/sys-hypervisor.c:269:
+	parms = kmalloc(sizeof(struct xen_platform_parameters), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2153: FILE: drivers/xen/sys-hypervisor.c:270:
+	if (parms) {
 	    ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2155: FILE: drivers/xen/sys-hypervisor.c:272:
+					     parms);
 					     ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2158: FILE: drivers/xen/sys-hypervisor.c:275:
+		kfree(parms);
 		      ^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2198: FILE: drivers/xen/sys-hypervisor.c:315:
+	for (i = XENFEAT_NR_SUBMAPS-1; i >= 0; i--) {
 	                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2200: FILE: drivers/xen/sys-hypervisor.c:317:
+		int ret = xen_feature_show(i, buffer + len);
+		if (ret < 0) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2284: FILE: drivers/xen/sys-hypervisor.c:401:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#2293: FILE: drivers/xen/sys-hypervisor.c:410:
+	struct hyp_sysfs_attr *hyp_attr;
+	hyp_attr = container_of(attr, struct hyp_sysfs_attr, attr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2305: FILE: drivers/xen/sys-hypervisor.c:422:
+	struct hyp_sysfs_attr *hyp_attr;
+	hyp_attr = container_of(attr, struct hyp_sysfs_attr, attr);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#2311: FILE: drivers/xen/sys-hypervisor.c:428:
+static struct sysfs_ops hyp_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2483: FILE: drivers/xen/xenfs/super.c:42:
+		{ "xenbus", &xenbus_file_ops, S_IRUSR|S_IWUSR },
 		                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#2483: FILE: drivers/xen/xenfs/super.c:42:
+		{ "xenbus", &xenbus_file_ops, S_IRUSR|S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2484: FILE: drivers/xen/xenfs/super.c:43:
+		{ "capabilities", &capabilities_file_ops, S_IRUGO },

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2561: FILE: include/xen/events.h:57:
+unsigned irq_from_evtchn(unsigned int evtchn);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2570: FILE: include/xen/evtchn.h:1:
+/******************************************************************************

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141460.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 55 warnings, 28 checks, 2282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141460.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
