ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Jeffrey Vernon Merkey (jmerkey@wolfmountaingroup.com)'
#28: 
Signed-off-by: Jeffrey Vernon Merkey (jmerkey@wolfmountaingroup.com)

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#36: FILE: kernel/kallsyms.c:163:
 }
+#if defined(CONFIG_MDB_MODULE)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#46: FILE: kernel/kallsyms.c:268:
 }
+#if defined(CONFIG_MDB_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#56: FILE: kernel/kallsyms.c:486:
+#if defined(CONFIG_MDB) || defined(CONFIG_MDB_MODULE)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: kernel/kallsyms.c:490:
+    register loff_t pos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: kernel/kallsyms.c:491:
+    register struct kallsym_iter *iter = &mdb_iter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: kernel/kallsyms.c:493:
+    if (!print)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 7)
#63: FILE: kernel/kallsyms.c:493:
+    if (!print)
+       return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: kernel/kallsyms.c:494:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: kernel/kallsyms.c:497:
+    reset_iter(iter, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: kernel/kallsyms.c:498:
+    while (1)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#68: FILE: kernel/kallsyms.c:498:
+    while (1)
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 7)
#68: FILE: kernel/kallsyms.c:498:
+    while (1)
[...]
+       // search the kallsyms list

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: kernel/kallsyms.c:499:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: kernel/kallsyms.c:501:
+       if (!update_iter(iter, pos++))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 10)
#71: FILE: kernel/kallsyms.c:501:
+       if (!update_iter(iter, pos++))
+          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: kernel/kallsyms.c:502:
+          break;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: kernel/kallsyms.c:502:
+          break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: kernel/kallsyms.c:504:
+       if (!iter->name[0])$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 10)
#74: FILE: kernel/kallsyms.c:504:
+       if (!iter->name[0])
+	  continue;

WARNING:TABSTOP: Statements should start on a tabstop
#75: FILE: kernel/kallsyms.c:505:
+	  continue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: kernel/kallsyms.c:508:
+       if (str && *str && !strstr(iter->name, str))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 10)
#78: FILE: kernel/kallsyms.c:508:
+       if (str && *str && !strstr(iter->name, str))
+          continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: kernel/kallsyms.c:509:
+          continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: kernel/kallsyms.c:509:
+          continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: kernel/kallsyms.c:511:
+       if (iter->module_name[0])$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#81: FILE: kernel/kallsyms.c:511:
+       if (iter->module_name[0])
+       {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 10)
#81: FILE: kernel/kallsyms.c:511:
+       if (iter->module_name[0])
+       {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: kernel/kallsyms.c:512:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: kernel/kallsyms.c:513:
+          if (print("%0*lx %c %s [%s]\n", (int)(2*sizeof(void*)),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: kernel/kallsyms.c:513:
+          if (print("%0*lx %c %s [%s]\n", (int)(2*sizeof(void*)),$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 13)
#83: FILE: kernel/kallsyms.c:513:
+          if (print("%0*lx %c %s [%s]\n", (int)(2*sizeof(void*)),
[...]
+             return 1;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#83: FILE: kernel/kallsyms.c:513:
+          if (print("%0*lx %c %s [%s]\n", (int)(2*sizeof(void*)),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#83: FILE: kernel/kallsyms.c:513:
+          if (print("%0*lx %c %s [%s]\n", (int)(2*sizeof(void*)),
                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: kernel/kallsyms.c:514:
+          if (print("%0*lx %c %s [%s]\n", (int)(2*sizeof(void*)),
+	      iter->value, iter->type, iter->name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: kernel/kallsyms.c:516:
+             return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: kernel/kallsyms.c:516:
+             return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: kernel/kallsyms.c:517:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: kernel/kallsyms.c:518:
+       else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#88: FILE: kernel/kallsyms.c:518:
+       else
+       {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 10)
#88: FILE: kernel/kallsyms.c:518:
+       else
+       {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#88: FILE: kernel/kallsyms.c:518:
+       }
+       else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: kernel/kallsyms.c:519:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: kernel/kallsyms.c:520:
+          if (print("%0*lx %c %s\n", (int)(2*sizeof(void*)),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: kernel/kallsyms.c:520:
+          if (print("%0*lx %c %s\n", (int)(2*sizeof(void*)),$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 13)
#90: FILE: kernel/kallsyms.c:520:
+          if (print("%0*lx %c %s\n", (int)(2*sizeof(void*)),
[...]
+             return 1;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#90: FILE: kernel/kallsyms.c:520:
+          if (print("%0*lx %c %s\n", (int)(2*sizeof(void*)),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#90: FILE: kernel/kallsyms.c:520:
+          if (print("%0*lx %c %s\n", (int)(2*sizeof(void*)),
                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: kernel/kallsyms.c:521:
+          if (print("%0*lx %c %s\n", (int)(2*sizeof(void*)),
+	      iter->value, iter->type, iter->name))

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: kernel/kallsyms.c:522:
+             return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: kernel/kallsyms.c:522:
+             return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: kernel/kallsyms.c:523:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: kernel/kallsyms.c:524:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: kernel/kallsyms.c:525:
+    return 0;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#97: FILE: kernel/kallsyms.c:527:
+}
+#if defined(CONFIG_MDB_MODULE)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000240389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 35 warnings, 7 checks, 69 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000240389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
