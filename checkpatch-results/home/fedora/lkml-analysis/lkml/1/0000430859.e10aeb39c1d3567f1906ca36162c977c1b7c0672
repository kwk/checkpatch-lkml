WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> >    The functions above default to KM_USER0 which is also always used when

WARNING:TYPO_SPELLING: 'Isnt' may be misspelled - perhaps 'Isn't'?
#43: 
the same KM_USER0 in every function call. Isnt it enough to know that 
                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Thats' may be misspelled - perhaps 'That's'?
#54: 
Thats easy to chanbe. Just a sec....
^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: include/linux/highmem.h:96:
+static inline void zero_user_segments(struct page *page,
+	unsigned start1, unsigned end1,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#134: FILE: include/linux/highmem.h:96:
+	unsigned start1, unsigned end1,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#134: FILE: include/linux/highmem.h:96:
+	unsigned start1, unsigned end1,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#135: FILE: include/linux/highmem.h:97:
+	unsigned start2, unsigned end2)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#135: FILE: include/linux/highmem.h:97:
+	unsigned start2, unsigned end2)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#139: FILE: include/linux/highmem.h:101:
+	BUG_ON(end1 > PAGE_SIZE ||

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: include/linux/highmem.h:102:
+	BUG_ON(end1 > PAGE_SIZE ||
+		end2 > PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/linux/highmem.h:115:
+static inline void zero_user_segment(struct page *page,
+	unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#153: FILE: include/linux/highmem.h:115:
+	unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#153: FILE: include/linux/highmem.h:115:
+	unsigned start, unsigned end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/linux/highmem.h:121:
+static inline void zero_user(struct page *page,
+	unsigned start, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: include/linux/highmem.h:121:
+	unsigned start, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: include/linux/highmem.h:121:
+	unsigned start, unsigned size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: fs/buffer.c:1792:
+					zero_user_segments(page,
+							to, block_end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: fs/buffer.c:2247:
+			zero_user_segments(page, block_start, from,
+						to, block_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: fs/libfs.c:345:
+			zero_user_segments(page,
+				0, from,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: fs/reiserfs/file.c:1189:
+					zero_user_segment(prepared_pages[0],
+						       block_start, from);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#367: FILE: fs/reiserfs/file.c:1221:
+					zero_user_segment(prepared_pages[num_pages-1],
 					                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: fs/reiserfs/file.c:1222:
+					zero_user_segment(prepared_pages[num_pages-1],
+							to, block_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: fs/ntfs/aops.c:98:
+			memset(kaddr + bh_offset(bh) + ofs, 0,
+					bh->b_size - ofs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: fs/direct-io.c:891:
+				zero_user(page, block_in_page << blkbits,
+						1 << blkbits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: fs/ntfs/file.c:610:
+					zero_user(page, bh_offset(bh),
+							blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: fs/ntfs/file.c:686:
+						zero_user(page, bh_offset(bh),
+								blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: fs/ntfs/file.c:705:
+					zero_user(page, bh_offset(bh),
+							blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: fs/ntfs/file.c:869:
+					zero_user(page, bh_offset(bh),
+						blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: fs/ntfs/file.c:1129:
+				zero_user_segment(page, bh_offset(bh) + ofs,
+						blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/ntfs/file.c:1270:
+					zero_user(page, bh_offset(bh),
+							blocksize);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430859.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 18 checks, 463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430859.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
