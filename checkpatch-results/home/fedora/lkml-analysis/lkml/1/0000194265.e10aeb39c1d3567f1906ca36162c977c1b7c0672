CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#66: FILE: include/linux/ftrace.h:261:
+};
+int ftrace_struct_pack(char *buf, unsigned int len, const char *storage_fmt,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: include/linux/ftrace.h:262:
+int ftrace_struct_pack(char *buf, unsigned int len, const char *storage_fmt,
+		va_list args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#69: FILE: include/linux/ftrace.h:264:
+int ftrace_struct_spintf(char *buf, size_t size,
+		const struct ftrace_struct *fmt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: include/linux/ftrace.h:267:
+struct ftrace_struct *ftrace_struct_permanent_alloc(const char *storage_fmt,
+		const char *show_fmt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: include/linux/ftrace.h:270:
+int trace_struct_vprintk(unsigned long ip, const struct ftrace_struct *fmt,
+		va_list args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: include/linux/ftrace.h:272:
+int __ftrace_struct_printk(unsigned long ip, const struct ftrace_struct *fmt,
+		...);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: include/linux/string.h:116:
+	int (*get_next_arg)(struct arg_iter *iter, unsigned long long *ptr,
+			unsigned int type_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: include/linux/string.h:120:
+int snprintf_iter_args(char *str, size_t size, const char *format,
+		struct arg_iter *args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: kernel/trace/trace.c:293:
+static int trace_seq_struct_print(struct trace_seq *s,
+		const struct ftrace_struct *fmt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: kernel/trace/trace.c:303:
+	ret = ftrace_struct_spintf(s->buffer + s->len, len, fmt,
+			binary, binary_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: kernel/trace/trace.c:1481:
+		trace_seq_struct_print(s, field->fmt, (char *)field->buf,
+				TRACE_BUF_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: kernel/trace/trace.c:1627:
+		trace_seq_struct_print(s, field->fmt, (char *)field->buf,
+				TRACE_BUF_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: kernel/trace/trace.c:1721:
+		trace_seq_struct_print(s, field->fmt, (char *)field->buf,
+				TRACE_BUF_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: kernel/trace/trace.c:3107:
+int trace_struct_vprintk(unsigned long ip, const struct ftrace_struct *fmt,
+		va_list args)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: kernel/trace/trace.c:3132:
+	len = ftrace_struct_pack(trace_buf, TRACE_BUF_SIZE, fmt->storage_fmt,
+			args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: kernel/trace/trace.c:3161:
+int __ftrace_struct_printk(unsigned long ip, const struct ftrace_struct *fmt,
+		...)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#324: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: kernel/trace/trace_struct.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#363: FILE: kernel/trace/trace_struct.c:35:
+#define CASE_PACK(fmt_byte, type)					\
+case fmt_byte:								\
+	if (sizeof(type) == 8) {					\
+		str = PTR_ALIGN(str, 4);				\
+		value = va_arg(args, unsigned long long);		\
+		if (str + sizeof(type) <= end) {			\
+			*(u32 *)str = *(u32 *)&value;			\
+			*(u32 *)(str + 4) = *((u32 *)&value + 1);	\
+		}							\
+	} else {							\
+		str = PTR_ALIGN(str, sizeof(type));			\
+		value = va_arg(args, int);				\
+		if (str + sizeof(type) <= end)				\
+			*(type *)str = (type)value;			\
+	}								\
+	str += sizeof(type);						\
+	break;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#363: FILE: kernel/trace/trace_struct.c:35:
+#define CASE_PACK(fmt_byte, type)					\
+case fmt_byte:								\
+	if (sizeof(type) == 8) {					\
+		str = PTR_ALIGN(str, 4);				\
+		value = va_arg(args, unsigned long long);		\
+		if (str + sizeof(type) <= end) {			\
+			*(u32 *)str = *(u32 *)&value;			\
+			*(u32 *)(str + 4) = *((u32 *)&value + 1);	\
+		}							\
+	} else {							\
+		str = PTR_ALIGN(str, sizeof(type));			\
+		value = va_arg(args, int);				\
+		if (str + sizeof(type) <= end)				\
+			*(type *)str = (type)value;			\
+	}								\
+	str += sizeof(type);						\
+	break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: kernel/trace/trace_struct.c:53:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: kernel/trace/trace_struct.c:55:
+int ftrace_struct_pack(char *buf, unsigned int len, const char *storage_fmt,
+		va_list args)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#410: FILE: kernel/trace/trace_struct.c:82:
+			str += strlcpy(str, va_arg(args, char *), end - str);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#421: FILE: kernel/trace/trace_struct.c:93:
+#define CASE_UNPACK(fmt_byte, type)					\
+case fmt_byte:								\
+	if (sizeof(type) == 8) {					\
+		str = PTR_ALIGN(str, 4);				\
+		if (str + sizeof(type) <= end) {			\
+			*(u32 *)&value = *(u32 *)str;			\
+			*((u32 *)&value + 1) = *(u32 *)(str + 4);	\
+		} else							\
+			ret = -1;					\
+	} else {							\
+		str = PTR_ALIGN(str, sizeof(type));			\
+		if (str + sizeof(type) <= end)				\
+			value = *(type *)str;				\
+		else							\
+			ret = -1;					\
+	}								\
+	str += sizeof(type);						\
+	break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#421: FILE: kernel/trace/trace_struct.c:93:
+#define CASE_UNPACK(fmt_byte, type)					\
+case fmt_byte:								\
+	if (sizeof(type) == 8) {					\
+		str = PTR_ALIGN(str, 4);				\
+		if (str + sizeof(type) <= end) {			\
+			*(u32 *)&value = *(u32 *)str;			\
+			*((u32 *)&value + 1) = *(u32 *)(str + 4);	\
+		} else							\
+			ret = -1;					\
+	} else {							\
+		str = PTR_ALIGN(str, sizeof(type));			\
+		if (str + sizeof(type) <= end)				\
+			value = *(type *)str;				\
+		else							\
+			ret = -1;					\
+	}								\
+	str += sizeof(type);						\
+	break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: kernel/trace/trace_struct.c:112:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: kernel/trace/trace_struct.c:115:
+int ftrace_struct_unpack_one(char storage_type, unsigned long long *ptr,
+		const char *binary, unsigned int len)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#481: FILE: kernel/trace/trace_struct.c:153:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: kernel/trace/trace_struct.c:167:
+int ftrace_struct_get_next_arg(struct arg_iter *head, unsigned long long *ptr,
+		unsigned int type_len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: kernel/trace/trace_struct.c:178:
+	ret = ftrace_struct_unpack_one(*iter->storage_fmt, ptr, iter->binary,
+			iter->binary_end - iter->binary);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: kernel/trace/trace_struct.c:187:
+int ftrace_struct_spintf(char *buf, size_t size,
+		const struct ftrace_struct *fmt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: kernel/trace/trace_struct.c:211:
+struct ftrace_struct *ftrace_struct_permanent_alloc(const char *storage_fmt,
+		const char *show_fmt)

WARNING:LINE_SPACING: Missing a blank line after declarations
#543: FILE: kernel/trace/trace_struct.c:215:
+	struct ftrace_struct fmt = {NULL, NULL};
+	mutex_lock(&lock);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#546: FILE: kernel/trace/trace_struct.c:218:
+		if (strcmp(pos->fmt.storage_fmt, storage_fmt) == 0
+				&& strcmp(pos->fmt.show_fmt, show_fmt) == 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#576: FILE: kernel/trace/trace_struct.c:248:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: lib/vsprintf.c:879:
+int snprintf_iter_args(char *buf, size_t size, const char *fmt,
+		struct arg_iter *args)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#615: FILE: lib/vsprintf.c:889:
+	int precision;		/* min. # of digits for integers; max
+				   number of chars for from string */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#615: FILE: lib/vsprintf.c:889:
+				   number of chars for from string */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#622: FILE: lib/vsprintf.c:896:
+	/* Reject out-of-range values early.  Large positive sizes are
+	   used for unknown buffer sizes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#622: FILE: lib/vsprintf.c:896:
+	   used for unknown buffer sizes. */

CHECK:SPACING: No space is necessary after a cast
#623: FILE: lib/vsprintf.c:897:
+	if (unlikely((int) size < 0)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#626: FILE: lib/vsprintf.c:900:
+		static char warn = 1;
+		WARN_ON(warn);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'args' - possible side-effects?
#631: FILE: lib/vsprintf.c:905:
+#define iter_arg(args, type) ({						\
+	unsigned long long __value;					\
+	if (args->get_next_arg(args, &__value, sizeof(type)) < 0)	\
+		goto error;						\
+	(type)__value;							\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'args' may be better as '(args)' to avoid precedence issues
#631: FILE: lib/vsprintf.c:905:
+#define iter_arg(args, type) ({						\
+	unsigned long long __value;					\
+	if (args->get_next_arg(args, &__value, sizeof(type)) < 0)	\
+		goto error;						\
+	(type)__value;							\
+})

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#631: FILE: lib/vsprintf.c:905:
+#define iter_arg(args, type) ({						\
+	unsigned long long __value;					\
+	if (args->get_next_arg(args, &__value, sizeof(type)) < 0)	\
+		goto error;						\
+	(type)__value;							\
+})

CHECK:BRACES: braces {} should be used on all arms of this statement
#679: FILE: lib/vsprintf.c:953:
+		if (isdigit(*fmt))
[...]
+		else if (*fmt == '*') {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#695: FILE: lib/vsprintf.c:969:
+			if (isdigit(*fmt))
[...]
+			else if (*fmt == '*') {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: lib/vsprintf.c:1017:
+			str = string(str, end, (char *)iter_arg(args, long),
+					field_width, precision, flags);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#747: FILE: lib/vsprintf.c:1021:
+			str = pointer(fmt+1, str, end,
 			                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: lib/vsprintf.c:1022:
+			str = pointer(fmt+1, str, end,
+					(void *)iter_arg(args, long),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#757: FILE: lib/vsprintf.c:1031:
+			* What does C99 say about the overflow case here? */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#757: FILE: lib/vsprintf.c:1031:
+			/* FIXME:
+			* What does C99 say about the overflow case here? */

CHECK:BRACES: braces {} should be used on all arms of this statement
#809: FILE: lib/vsprintf.c:1083:
+		if (qualifier == 'L')
[...]
+		else if (qualifier == 'l') {
[...]
+		} else if (qualifier == 'Z' || qualifier == 'z') {
[...]
+		} else if (qualifier == 't') {
[...]
+		} else if (qualifier == 'h') {
[...]
+		} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#814: FILE: lib/vsprintf.c:1088:
+				num = (signed long) num;

CHECK:SPACING: No space is necessary after a cast
#822: FILE: lib/vsprintf.c:1096:
+				num = (signed short) num;

CHECK:SPACING: No space is necessary after a cast
#826: FILE: lib/vsprintf.c:1100:
+				num = (signed int) num;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#829: FILE: lib/vsprintf.c:1103:
+		str = number(str, end, num, base,
+				field_width, precision, flags);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#838: FILE: lib/vsprintf.c:1112:
+	return str-buf;
 	          ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000194265.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 42 checks, 759 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000194265.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
