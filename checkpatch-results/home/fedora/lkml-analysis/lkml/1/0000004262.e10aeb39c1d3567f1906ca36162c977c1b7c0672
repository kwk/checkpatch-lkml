CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#73: FILE: arch/x86/kernel/cpu/perf_event.c:54:
+		memcpy(to, map+offset, size);
 		              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#236: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:418:
+		if (!kernel_ip(ip)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#244: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:426:
+		} else

CHECK:BIT_MACRO: Prefer using the BIT macro
#300: FILE: arch/x86/include/asm/perf_event.h:144:
+#define PERF_EFLAGS_EXACT	(1UL << 3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#302: FILE: arch/x86/include/asm/perf_event.h:146:
+#define perf_misc_flags(regs)				\
+({	int misc = 0;					\
+	if (user_mode(regs))				\
+		misc |= PERF_RECORD_MISC_USER;		\
+	else						\
+		misc |= PERF_RECORD_MISC_KERNEL;	\
+	if (regs->flags & PERF_EFLAGS_EXACT)		\
+		misc |= PERF_RECORD_MISC_EXACT;		\
+	misc; })

CHECK:BIT_MACRO: Prefer using the BIT macro
#325: FILE: include/linux/perf_event.h:297:
+#define PERF_RECORD_MISC_EXACT			(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#329: FILE: include/linux/perf_event.h:301:
+#define PERF_RECORD_MISC_EXT_RESERVED		(1 << 15)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 7 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
