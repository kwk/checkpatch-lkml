WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
cpuidle separates out the drivers that can provide support for multiple types

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: drivers/cpuidle/cpuidle.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#129: FILE: drivers/cpuidle/cpuidle.c:24:
+DEFINE_MUTEX(cpuidle_lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: drivers/cpuidle/cpuidle.c:28:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#157: FILE: drivers/cpuidle/cpuidle.c:52:
+	while(!need_resched()) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#201: FILE: drivers/cpuidle/cpuidle.c:96:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#255: FILE: drivers/cpuidle/cpuidle.c:150:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#263: FILE: drivers/cpuidle/cpuidle.c:158:
+	if (!(dev->status & CPUIDLE_STATUS_DETECTED)) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: drivers/cpuidle/cpuidle.c:180:
+	int ret;
+	mutex_lock(&cpuidle_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: drivers/cpuidle/cpuidle.c:197:
+static int cpuidle_cpu_callback(struct notifier_block *nfb,
+					unsigned long action, void *hcpu)

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after cpuidle_cpu_notifier
#327: FILE: drivers/cpuidle/cpuidle.c:222:
+static struct notifier_block __cpuinitdata cpuidle_cpu_notifier =

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#328: FILE: drivers/cpuidle/cpuidle.c:223:
+static struct notifier_block __cpuinitdata cpuidle_cpu_notifier =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: drivers/cpuidle/cpuidle.c:224:
+    .notifier_call = cpuidle_cpu_callback,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/cpuidle/cpuidle.c:241:
+static int cpuidle_latency_notify(struct notifier_block *b,
+		unsigned long l, void *v)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#356: FILE: drivers/cpuidle/cpuidle.c:251:
+#define latency_notifier_init(x) do { register_latency_notifier(x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#383: FILE: drivers/cpuidle/cpuidle.c:278:
+		printk(KERN_ERR "cpuidle: failed to initialize\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#398: FILE: drivers/cpuidle/cpuidle.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: drivers/cpuidle/cpuidle.h:18:
+extern void cpuidle_install_idle_handler(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#416: FILE: drivers/cpuidle/cpuidle.h:19:
+extern void cpuidle_uninstall_idle_handler(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: drivers/cpuidle/cpuidle.h:20:
+extern void cpuidle_rescan_device(struct cpuidle_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: drivers/cpuidle/cpuidle.h:23:
+extern int cpuidle_attach_driver(struct cpuidle_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: drivers/cpuidle/cpuidle.h:24:
+extern void cpuidle_detach_driver(struct cpuidle_device *dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: drivers/cpuidle/cpuidle.h:25:
+extern struct cpuidle_driver * __cpuidle_find_driver(const char *str);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: drivers/cpuidle/cpuidle.h:25:
+extern struct cpuidle_driver * __cpuidle_find_driver(const char *str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: drivers/cpuidle/cpuidle.h:26:
+extern int cpuidle_switch_driver(struct cpuidle_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: drivers/cpuidle/cpuidle.h:29:
+extern int cpuidle_attach_governor(struct cpuidle_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#427: FILE: drivers/cpuidle/cpuidle.h:30:
+extern void cpuidle_detach_governor(struct cpuidle_device *dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#428: FILE: drivers/cpuidle/cpuidle.h:31:
+extern struct cpuidle_governor * __cpuidle_find_governor(const char *str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: drivers/cpuidle/cpuidle.h:31:
+extern struct cpuidle_governor * __cpuidle_find_governor(const char *str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#429: FILE: drivers/cpuidle/cpuidle.h:32:
+extern int cpuidle_switch_governor(struct cpuidle_governor *gov);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#432: FILE: drivers/cpuidle/cpuidle.h:35:
+extern int cpuidle_add_class_sysfs(struct sysdev_class *cls);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: drivers/cpuidle/cpuidle.h:36:
+extern void cpuidle_remove_class_sysfs(struct sysdev_class *cls);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: drivers/cpuidle/cpuidle.h:37:
+extern int cpuidle_add_driver_sysfs(struct cpuidle_device *device);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#435: FILE: drivers/cpuidle/cpuidle.h:38:
+extern void cpuidle_remove_driver_sysfs(struct cpuidle_device *device);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: drivers/cpuidle/cpuidle.h:39:
+extern int cpuidle_add_sysfs(struct sys_device *sysdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: drivers/cpuidle/cpuidle.h:40:
+extern void cpuidle_remove_sysfs(struct sys_device *sysdev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#454: FILE: drivers/cpuidle/driver.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#474: FILE: drivers/cpuidle/driver.c:21:
+
+

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#479: FILE: drivers/cpuidle/driver.c:26:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#494: FILE: drivers/cpuidle/driver.c:41:
+		printk(KERN_ERR "cpuidle: driver %s failed to attach to cpu %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/cpuidle/driver.c:42:
+		printk(KERN_ERR "cpuidle: driver %s failed to attach to cpu %d\n",
+			current_driver->name, dev->cpu);

WARNING:MEMORY_BARRIER: memory barrier without comment
#499: FILE: drivers/cpuidle/driver.c:46:
+		smp_wmb();

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#511: FILE: drivers/cpuidle/driver.c:58:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#528: FILE: drivers/cpuidle/driver.c:75:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#530: FILE: drivers/cpuidle/driver.c:77:
+struct cpuidle_driver * __cpuidle_find_driver(const char *str)

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#546: FILE: drivers/cpuidle/driver.c:93:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#568: FILE: drivers/cpuidle/driver.c:115:
+		printk(KERN_INFO "cpuidle: using driver %s\n", drv->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!__cpuidle_find_driver"
#586: FILE: drivers/cpuidle/driver.c:133:
+	if (__cpuidle_find_driver(drv->name) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#597: FILE: drivers/cpuidle/driver.c:144:
+EXPORT_SYMBOL_GPL(cpuidle_register_driver);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#615: FILE: drivers/cpuidle/driver.c:162:
+EXPORT_SYMBOL_GPL(cpuidle_unregister_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#660: FILE: drivers/cpuidle/driver.c:207:
+EXPORT_SYMBOL_GPL(cpuidle_force_redetect);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#666: FILE: drivers/cpuidle/governor.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#685: FILE: drivers/cpuidle/governor.c:20:
+
+

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#690: FILE: drivers/cpuidle/governor.c:25:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#696: FILE: drivers/cpuidle/governor.c:31:
+	if(dev->status & CPUIDLE_STATUS_GOVERNOR_ATTACHED)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#706: FILE: drivers/cpuidle/governor.c:41:
+		printk(KERN_ERR "cpuidle: governor %s failed to attach to cpu %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: drivers/cpuidle/governor.c:42:
+		printk(KERN_ERR "cpuidle: governor %s failed to attach to cpu %d\n",
+			current_governor->name, dev->cpu);

WARNING:MEMORY_BARRIER: memory barrier without comment
#711: FILE: drivers/cpuidle/governor.c:46:
+		smp_wmb();

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#722: FILE: drivers/cpuidle/governor.c:57:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#738: FILE: drivers/cpuidle/governor.c:73:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: drivers/cpuidle/governor.c:75:
+struct cpuidle_governor * __cpuidle_find_governor(const char *str)

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#756: FILE: drivers/cpuidle/governor.c:91:
+ * Must be called with cpuidle_lock aquired.
                                     ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#778: FILE: drivers/cpuidle/governor.c:113:
+		printk(KERN_INFO "cpuidle: using governor %s\n", gov->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!__cpuidle_find_governor"
#796: FILE: drivers/cpuidle/governor.c:131:
+	if (__cpuidle_find_governor(gov->name) == NULL) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#807: FILE: drivers/cpuidle/governor.c:142:
+EXPORT_SYMBOL_GPL(cpuidle_register_governor);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#825: FILE: drivers/cpuidle/governor.c:160:
+EXPORT_SYMBOL_GPL(cpuidle_unregister_governor);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#831: FILE: drivers/cpuidle/governors/ladder.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#853: FILE: drivers/cpuidle/governors/ladder.c:23:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#854: FILE: drivers/cpuidle/governors/ladder.c:24:
+#include <asm/uaccess.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: drivers/cpuidle/governors/ladder.c:37:
+    (HZ >= 800 ? 0xFFFFFFFF : ((1U << (HZ / 25)) - 1));$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last_idx > 0'
#934: FILE: drivers/cpuidle/governors/ladder.c:104:
+		if ((last_idx > 0) &&
+		    (last_state->threshold.bm & ldev->bm_activity)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#942: FILE: drivers/cpuidle/governors/ladder.c:112:
+		last_residency = cpuidle_get_last_residency(dev) - dev->states[last_idx].exit_latency;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#1002: FILE: drivers/cpuidle/governors/ladder.c:172:
+		if (state->flags & CPUIDLE_FLAG_CHECK_BM) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1005: FILE: drivers/cpuidle/governors/ladder.c:175:
+		} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev->governor_data)...) over kmalloc(sizeof(struct ladder_device)...)
#1018: FILE: drivers/cpuidle/governors/ladder.c:188:
+	dev->governor_data = kmalloc(sizeof(struct ladder_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1118: FILE: drivers/cpuidle/sysfs.c:1:
+/*

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1140: FILE: drivers/cpuidle/sysfs.c:23:
+		if (i >= (ssize_t)((PAGE_SIZE/sizeof(char)) - CPUIDLE_NAME_LEN - 2))
 		                             ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#1145: FILE: drivers/cpuidle/sysfs.c:28:
+	i+= sprintf(&buf[i], "\n");
 	 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1157: FILE: drivers/cpuidle/sysfs.c:40:
+		if (i >= (ssize_t)((PAGE_SIZE/sizeof(char)) - CPUIDLE_NAME_LEN - 2))
 		                             ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#1162: FILE: drivers/cpuidle/sysfs.c:45:
+		i+= sprintf(&buf[i], "no governors");
 		 ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#1164: FILE: drivers/cpuidle/sysfs.c:47:
+	i+= sprintf(&buf[i], "\n");
 	 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: drivers/cpuidle/sysfs.c:63:
+static ssize_t store_current_driver(struct sys_device *dev,
+	const char *buf, size_t count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1221: FILE: drivers/cpuidle/sysfs.c:104:
+static ssize_t store_current_governor(struct sys_device *dev,
+	const char *buf, size_t count)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuidle_device *' should also have an identifier name
#1285: FILE: drivers/cpuidle/sysfs.c:168:
+	ssize_t (*show)(struct cpuidle_device *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1285: FILE: drivers/cpuidle/sysfs.c:168:
+	ssize_t (*show)(struct cpuidle_device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuidle_device *' should also have an identifier name
#1286: FILE: drivers/cpuidle/sysfs.c:169:
+	ssize_t (*store)(struct cpuidle_device *, const char *, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1286: FILE: drivers/cpuidle/sysfs.c:169:
+	ssize_t (*store)(struct cpuidle_device *, const char *, size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1296: FILE: drivers/cpuidle/sysfs.c:179:
+static ssize_t cpuidle_show(struct kobject * kobj, struct attribute * attr ,char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1296: FILE: drivers/cpuidle/sysfs.c:179:
+static ssize_t cpuidle_show(struct kobject * kobj, struct attribute * attr ,char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1296: FILE: drivers/cpuidle/sysfs.c:179:
+static ssize_t cpuidle_show(struct kobject * kobj, struct attribute * attr ,char * buf)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1296: FILE: drivers/cpuidle/sysfs.c:179:
+static ssize_t cpuidle_show(struct kobject * kobj, struct attribute * attr ,char * buf)
                                                                            ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1296: FILE: drivers/cpuidle/sysfs.c:179:
+static ssize_t cpuidle_show(struct kobject * kobj, struct attribute * attr ,char * buf)
                                                                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1300: FILE: drivers/cpuidle/sysfs.c:183:
+	struct cpuidle_attr * cattr = attr_to_cpuidleattr(attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1310: FILE: drivers/cpuidle/sysfs.c:193:
+static ssize_t cpuidle_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1310: FILE: drivers/cpuidle/sysfs.c:193:
+static ssize_t cpuidle_store(struct kobject * kobj, struct attribute * attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: drivers/cpuidle/sysfs.c:194:
+static ssize_t cpuidle_store(struct kobject * kobj, struct attribute * attr,
+		     const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1311: FILE: drivers/cpuidle/sysfs.c:194:
+		     const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1315: FILE: drivers/cpuidle/sysfs.c:198:
+	struct cpuidle_attr * cattr = attr_to_cpuidleattr(attr);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1325: FILE: drivers/cpuidle/sysfs.c:208:
+static struct sysfs_ops cpuidle_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuidle_state *' should also have an identifier name
#1336: FILE: drivers/cpuidle/sysfs.c:219:
+	ssize_t (*show)(struct cpuidle_state *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1336: FILE: drivers/cpuidle/sysfs.c:219:
+	ssize_t (*show)(struct cpuidle_state *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuidle_state *' should also have an identifier name
#1337: FILE: drivers/cpuidle/sysfs.c:220:
+	ssize_t (*store)(struct cpuidle_state *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1337: FILE: drivers/cpuidle/sysfs.c:220:
+	ssize_t (*store)(struct cpuidle_state *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1337: FILE: drivers/cpuidle/sysfs.c:220:
+	ssize_t (*store)(struct cpuidle_state *, const char *, size_t);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#1343: FILE: drivers/cpuidle/sysfs.c:226:
+#define define_show_state_function(_name) \
+static ssize_t show_state_##_name(struct cpuidle_state *state, char *buf) \
+{ \
+	return sprintf(buf, "%d\n", state->_name);\
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1368: FILE: drivers/cpuidle/sysfs.c:251:
+static ssize_t cpuidle_state_show(struct kobject * kobj,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1369: FILE: drivers/cpuidle/sysfs.c:252:
+static ssize_t cpuidle_state_show(struct kobject * kobj,
+	struct attribute * attr ,char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1369: FILE: drivers/cpuidle/sysfs.c:252:
+	struct attribute * attr ,char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1369: FILE: drivers/cpuidle/sysfs.c:252:
+	struct attribute * attr ,char * buf)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1369: FILE: drivers/cpuidle/sysfs.c:252:
+	struct attribute * attr ,char * buf)
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1369: FILE: drivers/cpuidle/sysfs.c:252:
+	struct attribute * attr ,char * buf)
 	                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1373: FILE: drivers/cpuidle/sysfs.c:256:
+	struct cpuidle_state_attr * cattr = attr_to_stateattr(attr);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1381: FILE: drivers/cpuidle/sysfs.c:264:
+static struct sysfs_ops cpuidle_state_sysfs_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1463: FILE: include/linux/cpuidle.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1487: FILE: include/linux/cpuidle.h:25:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#1504: FILE: include/linux/cpuidle.h:42:
+	int (*enter)	(struct cpuidle_device *dev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1523: FILE: include/linux/cpuidle.h:61:
+static inline void * cpuidle_get_statedata(struct cpuidle_state *state)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1548: FILE: include/linux/cpuidle.h:86:
+^Istruct list_head ^Idevice_list;$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1554: FILE: include/linux/cpuidle.h:92:
+#define to_cpuidle_device(n) container_of(n, struct cpuidle_device, kobj);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1577: FILE: include/linux/cpuidle.h:115:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1584: FILE: include/linux/cpuidle.h:122:
+^Istruct list_head ^Idriver_list;$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1586: FILE: include/linux/cpuidle.h:124:
+	int  (*init)		(struct cpuidle_device *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1587: FILE: include/linux/cpuidle.h:125:
+	void (*exit)		(struct cpuidle_device *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1588: FILE: include/linux/cpuidle.h:126:
+	int  (*redetect)	(struct cpuidle_device *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1590: FILE: include/linux/cpuidle.h:128:
+	int  (*bm_check)	(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1592: FILE: include/linux/cpuidle.h:130:
+^Istruct module ^I^I*owner;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1597: FILE: include/linux/cpuidle.h:135:
+extern int cpuidle_register_driver(struct cpuidle_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1598: FILE: include/linux/cpuidle.h:136:
+extern void cpuidle_unregister_driver(struct cpuidle_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1599: FILE: include/linux/cpuidle.h:137:
+extern int cpuidle_force_redetect(struct cpuidle_device *dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1601: FILE: include/linux/cpuidle.h:139:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1608: FILE: include/linux/cpuidle.h:146:
+^Istruct list_head ^Igovernor_list;$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1610: FILE: include/linux/cpuidle.h:148:
+	int  (*init)		(struct cpuidle_device *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1611: FILE: include/linux/cpuidle.h:149:
+	void (*exit)		(struct cpuidle_device *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1612: FILE: include/linux/cpuidle.h:150:
+	void (*scan)		(struct cpuidle_device *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1614: FILE: include/linux/cpuidle.h:152:
+	void (*prepare_idle)	(struct cpuidle_device *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1615: FILE: include/linux/cpuidle.h:153:
+	int  (*select_state)	(struct cpuidle_device *dev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1617: FILE: include/linux/cpuidle.h:155:
+^Istruct module ^I^I*owner;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1620: FILE: include/linux/cpuidle.h:158:
+extern int cpuidle_register_governor(struct cpuidle_governor *gov);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1621: FILE: include/linux/cpuidle.h:159:
+extern void cpuidle_unregister_governor(struct cpuidle_governor *gov);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1624: FILE: include/linux/cpuidle.h:162:
+ * cpuidle_get_bm_activity - determines if BM activity has occured
                                                            ^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468343.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 67 warnings, 46 checks, 1507 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468343.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
