WARNING:TYPO_SPELLING: 'doens't' may be misspelled - perhaps 'doesn't'?
#39: 
And as pointed out, current lumpy reclaim doens't seem to
                                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#73: FILE: mm/vmscan.c:863:
+	 * create free continous pages. This algorithm tries to start
 	               ^^^^^^^^^

WARNING:TYPO_SPELLING: 'calclation' may be misspelled - perhaps 'calculation'?
#75: FILE: mm/vmscan.c:865:
+	 * If you are unsure about buddy position calclation, please see
 	                                          ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#82: FILE: mm/vmscan.c:872:
+	/* Can we expect succesful reclaim ? */
 	                 ^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == MIGRATE_MOVABLE'
#84: FILE: mm/vmscan.c:874:
+	if ((type == MIGRATE_MOVABLE) || (type == MIGRATE_RECLAIMABLE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == MIGRATE_RECLAIMABLE'
#84: FILE: mm/vmscan.c:874:
+	if ((type == MIGRATE_MOVABLE) || (type == MIGRATE_RECLAIMABLE))

CHECK:BRACES: braces {} should be used on all arms of this statement
#109: FILE: mm/vmscan.c:899:
+			if (__isolate_lru_page(page, ISOLATE_BOTH, 0) == 0) {
[...]
+			} else if (do_aggressive && !PageUnevictable(page))
[...]
+			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#112: FILE: mm/vmscan.c:902:
+			} else if (do_aggressive && !PageUnevictable(page))
+					continue;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112852.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 3 checks, 143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112852.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
