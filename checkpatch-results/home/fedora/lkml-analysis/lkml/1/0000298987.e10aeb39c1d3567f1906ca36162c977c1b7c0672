CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: include/linux/mm.h:1053:
+extern void mm_lock(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/mm.h:1054:
+extern void mm_unlock(struct mm_struct *mm);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#74: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: include/linux/mmu_notifier.h:1:
+#ifndef _LINUX_MMU_NOTIFIER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/mmu_notifier.h:65:
+extern void mmu_notifier_register(struct mmu_notifier *mn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/mmu_notifier.h:67:
+extern void __mmu_notifier_release(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/mmu_notifier.h:68:
+extern int __mmu_notifier_clear_flush_young(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: include/linux/mmu_notifier.h:69:
+extern int __mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					  unsigned long address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/mmu_notifier.h:70:
+extern void __mmu_notifier_invalidate_page(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: include/linux/mmu_notifier.h:71:
+extern void __mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/mmu_notifier.h:72:
+extern void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/linux/mmu_notifier.h:73:
+extern void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/mmu_notifier.h:74:
+extern void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: include/linux/mmu_notifier.h:75:
+extern void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: include/linux/mmu_notifier.h:77:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: include/linux/mmu_notifier.h:85:
+static inline int mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: include/linux/mmu_notifier.h:93:
+static inline void mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: include/linux/mmu_notifier.h:100:
+static inline void mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: include/linux/mmu_notifier.h:107:
+static inline void mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: include/linux/mmu_notifier.h:146:
+static inline int mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: include/linux/mmu_notifier.h:152:
+static inline void mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: include/linux/mmu_notifier.h:157:
+static inline void mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: include/linux/mmu_notifier.h:162:
+static inline void mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#280: FILE: mm/Kconfig:197:
+config MMU_NOTIFIER
+	def_bool y
+	bool "MMU notifier, for paging KVM/RDMA"

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: mm/memory.c:631:
+		mmu_notifier_invalidate_range_end(src_mm,
+						vma->vm_start, end);

CHECK:SPACING: No space is necessary after a cast
#470: FILE: mm/mmap.c:2257:
+		spinlock_t *i_mmap_lock = (spinlock_t *) -1UL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#471: FILE: mm/mmap.c:2258:
+		spinlock_t *i_mmap_lock = (spinlock_t *) -1UL;
+		for (vma = mm->mmap; vma; vma = vma->vm_next)

CHECK:SPACING: No space is necessary after a cast
#473: FILE: mm/mmap.c:2260:
+			    (unsigned long) i_mmap_lock >

CHECK:SPACING: No space is necessary after a cast
#478: FILE: mm/mmap.c:2265:
+			    (unsigned long) i_mmap_lock_last)

CHECK:SPACING: No space is necessary after a cast
#481: FILE: mm/mmap.c:2268:
+		if (i_mmap_lock == (spinlock_t *) -1UL)

CHECK:SPACING: No space is necessary after a cast
#492: FILE: mm/mmap.c:2279:
+		spinlock_t *anon_vma_lock = (spinlock_t *) -1UL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#493: FILE: mm/mmap.c:2280:
+		spinlock_t *anon_vma_lock = (spinlock_t *) -1UL;
+		for (vma = mm->mmap; vma; vma = vma->vm_next)

CHECK:SPACING: No space is necessary after a cast
#495: FILE: mm/mmap.c:2282:
+			    (unsigned long) anon_vma_lock >

CHECK:SPACING: No space is necessary after a cast
#496: FILE: mm/mmap.c:2283:
+			    (unsigned long) &vma->anon_vma->lock &&

CHECK:SPACING: No space is necessary after a cast
#497: FILE: mm/mmap.c:2284:
+			    (unsigned long) &vma->anon_vma->lock >

CHECK:SPACING: No space is necessary after a cast
#498: FILE: mm/mmap.c:2285:
+			    (unsigned long) anon_vma_lock_last)

CHECK:SPACING: No space is necessary after a cast
#500: FILE: mm/mmap.c:2287:
+		if (anon_vma_lock == (spinlock_t *) -1UL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#517: FILE: mm/mmap.c:2304:
+void mm_lock(struct mm_struct * mm)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#533: FILE: mm/mmu_notifier.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#534: FILE: mm/mmu_notifier.c:2:
+ *  linux/mm/mmu_notifier.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: mm/mmu_notifier.c:40:
+int __mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: mm/mmu_notifier.c:55:
+void __mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: mm/mmu_notifier.c:67:
+void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: mm/mmu_notifier.c:79:
+void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 36 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
