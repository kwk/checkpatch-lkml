WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#45: 
    Signed-off-by: Satoshi UCHIDA <s-uchida@ap.jp.nec.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__VAR' - possible side-effects?
#77: FILE: block/cfq-cgroup.c:34:
+#define SHOW_FUNCTION(__FUNC, __VAR, __CONV)				\
+static int val_transrate_##__FUNC(struct cfq_data *cfqd)		\
+{									\
+	if (__CONV)							\
+		return jiffies_to_msecs(cfqd->__VAR);			\
+	else								\
+		return cfqd->__VAR;					\
+}									\
+static ssize_t __FUNC(elevator_t *e, char *page)			\
+{									\
+	struct cfq_data *cfqd = e->elevator_data;			\
+									\
+	return cfq_cgroup_var_show((page), (cfqd),			\
+				   val_transrate_##__FUNC);		\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#77: FILE: block/cfq-cgroup.c:34:
+#define SHOW_FUNCTION(__FUNC, __VAR, __CONV)				\
+static int val_transrate_##__FUNC(struct cfq_data *cfqd)		\
+{									\
+	if (__CONV)							\
+		return jiffies_to_msecs(cfqd->__VAR);			\
+	else								\
+		return cfqd->__VAR;					\
+}									\
+static ssize_t __FUNC(elevator_t *e, char *page)			\
+{									\
+	struct cfq_data *cfqd = e->elevator_data;			\
+									\
+	return cfq_cgroup_var_show((page), (cfqd),			\
+				   val_transrate_##__FUNC);		\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#92: FILE: block/cfq-cgroup.c:49:
+}
+SHOW_FUNCTION(cfq_cgroup_quantum_show, cfq_quantum, 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#110: FILE: block/cfq-cgroup.c:67:
+	err = strict_strtoul(page, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__VAR' - possible side-effects?
#119: FILE: block/cfq-cgroup.c:76:
+#define STORE_FUNCTION(__FUNC, __VAR, MIN, MAX, __CONV)			\
+static void val_transrate_##__FUNC(struct cfq_data *cfqd,		\
+				   unsigned int __data)			\
+{									\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		cfqd->__VAR = msecs_to_jiffies(__data);			\
+	else								\
+		cfqd->__VAR = __data;					\
+}									\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct cfq_data *cfqd = e->elevator_data;			\
+	int ret = cfq_cgroup_var_store((page), count, cfqd,		\
+				      val_transrate_##__FUNC);		\
+	return ret;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#119: FILE: block/cfq-cgroup.c:76:
+#define STORE_FUNCTION(__FUNC, __VAR, MIN, MAX, __CONV)			\
+static void val_transrate_##__FUNC(struct cfq_data *cfqd,		\
+				   unsigned int __data)			\
+{									\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		cfqd->__VAR = msecs_to_jiffies(__data);			\
+	else								\
+		cfqd->__VAR = __data;					\
+}									\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct cfq_data *cfqd = e->elevator_data;			\
+	int ret = cfq_cgroup_var_store((page), count, cfqd,		\
+				      val_transrate_##__FUNC);		\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MIN' - possible side-effects?
#119: FILE: block/cfq-cgroup.c:76:
+#define STORE_FUNCTION(__FUNC, __VAR, MIN, MAX, __CONV)			\
+static void val_transrate_##__FUNC(struct cfq_data *cfqd,		\
+				   unsigned int __data)			\
+{									\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		cfqd->__VAR = msecs_to_jiffies(__data);			\
+	else								\
+		cfqd->__VAR = __data;					\
+}									\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct cfq_data *cfqd = e->elevator_data;			\
+	int ret = cfq_cgroup_var_store((page), count, cfqd,		\
+				      val_transrate_##__FUNC);		\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MAX' - possible side-effects?
#119: FILE: block/cfq-cgroup.c:76:
+#define STORE_FUNCTION(__FUNC, __VAR, MIN, MAX, __CONV)			\
+static void val_transrate_##__FUNC(struct cfq_data *cfqd,		\
+				   unsigned int __data)			\
+{									\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		cfqd->__VAR = msecs_to_jiffies(__data);			\
+	else								\
+		cfqd->__VAR = __data;					\
+}									\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct cfq_data *cfqd = e->elevator_data;			\
+	int ret = cfq_cgroup_var_store((page), count, cfqd,		\
+				      val_transrate_##__FUNC);		\
+	return ret;							\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#139: FILE: block/cfq-cgroup.c:96:
+}
+STORE_FUNCTION(cfq_cgroup_quantum_store, cfq_quantum, 1, UINT_MAX, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: block/cfq-cgroup.c:98:
+STORE_FUNCTION(cfq_cgroup_fifo_expire_sync_store, cfq_fifo_expire[1], 1,
+		UINT_MAX, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: block/cfq-cgroup.c:100:
+STORE_FUNCTION(cfq_cgroup_fifo_expire_async_store, cfq_fifo_expire[0], 1,
+		UINT_MAX, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: block/cfq-cgroup.c:103:
+STORE_FUNCTION(cfq_cgroup_back_seek_penalty_store, cfq_back_penalty, 1,
+		UINT_MAX, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: block/cfq-cgroup.c:105:
+STORE_FUNCTION(cfq_cgroup_slice_idle_store, cfq_slice_idle,
+		0, UINT_MAX, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: block/cfq-cgroup.c:109:
+STORE_FUNCTION(cfq_cgroup_slice_async_rq_store, cfq_slice_async_rq, 1,
+		UINT_MAX, 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#156: FILE: block/cfq-cgroup.c:113:
+	__ATTR(name, S_IRUGO|S_IWUSR, cfq_cgroup_##name##_show,	\
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#156: FILE: block/cfq-cgroup.c:113:
+	__ATTR(name, S_IRUGO|S_IWUSR, cfq_cgroup_##name##_show,	\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205174.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 14 checks, 149 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205174.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
