CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#122: FILE: fs/9p/v9fs.c:72:
+		if (strncmp(t->name, name->from, name->to-name->from) == 0) {
 		                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug>
#140: FILE: fs/9p/v9fs.c:87:
+	Opt_debug, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_msize>
#140: FILE: fs/9p/v9fs.c:87:
+	Opt_debug, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#140: FILE: fs/9p/v9fs.c:87:
+	Opt_debug, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#140: FILE: fs/9p/v9fs.c:87:
+	Opt_debug, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_afid>
#140: FILE: fs/9p/v9fs.c:87:
+	Opt_debug, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uname>
#143: FILE: fs/9p/v9fs.c:89:
+	Opt_uname, Opt_remotename, Opt_trans,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_remotename>
#143: FILE: fs/9p/v9fs.c:89:
+	Opt_uname, Opt_remotename, Opt_trans,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trans>
#143: FILE: fs/9p/v9fs.c:89:
+	Opt_uname, Opt_remotename, Opt_trans,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_legacy>
#146: FILE: fs/9p/v9fs.c:91:
+	Opt_legacy, Opt_nodevmap,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodevmap>
#146: FILE: fs/9p/v9fs.c:91:
+	Opt_legacy, Opt_nodevmap,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v9ses->trans == NULL'
#293: FILE: fs/9p/v9fs.c:226:
+	if ((v9ses->trans == NULL) && !list_empty(&v9fs_trans_list))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v9ses->trans"
#293: FILE: fs/9p/v9fs.c:226:
+	if ((v9ses->trans == NULL) && !list_empty(&v9fs_trans_list))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: fs/9p/v9fs.c:228:
+		v9ses->trans = list_first_entry(&v9fs_trans_list,
+		 struct p9_trans_module, list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v9ses->trans"
#297: FILE: fs/9p/v9fs.c:230:
+	if (v9ses->trans == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: fs/9p/v9fs.c:233:
+		P9_DPRINTK(P9_DEBUG_ERROR,
+				"No transport defined or default transport\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: fs/9p/v9fs.c:243:
+	if ((v9ses->maxdata+P9_IOHDRSZ) > v9ses->trans->maxsize)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: fs/9p/v9fs.c:244:
+		v9ses->maxdata = v9ses->trans->maxsize-P9_IOHDRSZ;
 		                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#315: FILE: fs/9p/v9fs.c:246:
+	v9ses->clnt = p9_client_create(trans, v9ses->maxdata+P9_IOHDRSZ,
 	                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/9p/v9fs.c:247:
+	v9ses->clnt = p9_client_create(trans, v9ses->maxdata+P9_IOHDRSZ,
 		v9ses->extended);

WARNING:TYPO_SPELLING: 'trasnport' may be misspelled - perhaps 'transport'?
#332: FILE: fs/9p/v9fs.c:309:
+	/* TODO: Setup list of registered trasnport modules */
 	                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: include/net/9p/client.h:56:
+struct p9_client *p9_client_create(struct p9_trans *trans, int msize,
 								int dotu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: include/net/9p/conn.h:46:
+struct p9_conn *p9_conn_create(struct p9_trans *trans, int msize,
+							unsigned char *dotu);

WARNING:SPACING: Unnecessary space before function pointer arguments
#461: FILE: include/net/9p/transport.h:38:
+	int (*write) (struct p9_trans *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans *' should also have an identifier name
#461: FILE: include/net/9p/transport.h:38:
+	int (*write) (struct p9_trans *, void *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#461: FILE: include/net/9p/transport.h:38:
+	int (*write) (struct p9_trans *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#461: FILE: include/net/9p/transport.h:38:
+	int (*write) (struct p9_trans *, void *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#462: FILE: include/net/9p/transport.h:39:
+	int (*read) (struct p9_trans *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans *' should also have an identifier name
#462: FILE: include/net/9p/transport.h:39:
+	int (*read) (struct p9_trans *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#462: FILE: include/net/9p/transport.h:39:
+	int (*read) (struct p9_trans *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#462: FILE: include/net/9p/transport.h:39:
+	int (*read) (struct p9_trans *, void *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#463: FILE: include/net/9p/transport.h:40:
+	void (*close) (struct p9_trans *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans *' should also have an identifier name
#463: FILE: include/net/9p/transport.h:40:
+	void (*close) (struct p9_trans *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans *' should also have an identifier name
#464: FILE: include/net/9p/transport.h:41:
+	unsigned int (*poll)(struct p9_trans *, struct poll_table_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct poll_table_struct *' should also have an identifier name
#464: FILE: include/net/9p/transport.h:41:
+	unsigned int (*poll)(struct p9_trans *, struct poll_table_struct *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: net/9p/Kconfig:24:
+^I  so if you are going to use 9p, you'll likely want this.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: net/9p/client.c:42:
+struct p9_client *p9_client_create(struct p9_trans *trans, int msize,
 								   int dotu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: net/9p/mux.c:275:
+struct p9_conn *p9_conn_create(struct p9_trans *trans, int msize,
 				    unsigned char *extended)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#584: FILE: net/9p/trans_fd.c:44:
+#define MAX_SOCK_BUF (64*1024)
                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#586: FILE: net/9p/trans_fd.c:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#648: FILE: net/9p/trans_fd.c:59:
+/*
+  * Option Parsing (code inspired by NFS code)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#648: FILE: net/9p/trans_fd.c:59:
+/*
+  * Option Parsing (code inspired by NFS code)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Opt_port>
#655: FILE: net/9p/trans_fd.c:65:
+	Opt_port, Opt_rfdno, Opt_wfdno,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rfdno>
#655: FILE: net/9p/trans_fd.c:65:
+	Opt_port, Opt_rfdno, Opt_wfdno,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wfdno>
#655: FILE: net/9p/trans_fd.c:65:
+	Opt_port, Opt_rfdno, Opt_wfdno,

WARNING:LINE_SPACING: Missing a blank line after declarations
#724: FILE: net/9p/trans_fd.c:97:
+		int token;
+		if (!*p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#730: FILE: net/9p/trans_fd.c:103:
+			P9_DPRINTK(P9_DEBUG_ERROR,
+			 "integer field, but no integer?\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ts)...) over kmalloc(sizeof(struct p9_trans_fd)...)
#768: FILE: net/9p/trans_fd.c:124:
+	struct p9_trans_fd *ts = kmalloc(sizeof(struct p9_trans_fd),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <Connected>
#802: FILE: net/9p/trans_fd.c:141:
+	trans->status = Connected;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_trans)...)
#898: FILE: net/9p/trans_fd.c:305:
+	trans = kmalloc(sizeof(struct p9_trans), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: net/9p/trans_fd.c:330:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_tcp: problem connecting socket to %s\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_trans)...)
#950: FILE: net/9p/trans_fd.c:357:
+	trans = kmalloc(sizeof(struct p9_trans), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: net/9p/trans_fd.c:368:
+		P9_EPRINTK(KERN_ERR, "p9_trans_unix: address too long: %s\n",
+			addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: net/9p/trans_fd.c:380:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_unix: problem connecting socket: %s: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1001: FILE: net/9p/trans_fd.c:408:
+		printk(KERN_ERR "v9fs: Insufficient options for proto=fd\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_trans)...)
#1005: FILE: net/9p/trans_fd.c:412:
+	trans = kmalloc(sizeof(struct p9_trans), GFP_KERNEL);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1055: FILE: net/9p/trans_fd.c:462:
+static void __exit p9_trans_fd_exit(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1056: FILE: net/9p/trans_fd.c:463:
+	printk(KERN_ERR "Removal of 9p transports not implemented\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1057: FILE: net/9p/trans_fd.c:464:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385948.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 19 warnings, 38 checks, 935 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385948.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
