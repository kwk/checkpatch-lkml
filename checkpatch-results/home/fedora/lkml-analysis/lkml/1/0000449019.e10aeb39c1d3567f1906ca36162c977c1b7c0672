WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> >>>I do think such workloads might benefit from a vma_cache not shared by 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: include/linux/sched.h:323:
+	struct vm_area_struct * mmap_cache; /* last find_vma result */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: include/linux/mm.h:1179:
+extern struct vm_area_struct * find_vma(struct mm_struct * mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: include/linux/mm.h:1179:
+extern struct vm_area_struct * find_vma(struct mm_struct * mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/mm.h:1179:
+extern struct vm_area_struct * find_vma(struct mm_struct * mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: include/linux/mm.h:1187:
+static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: include/linux/mm.h:1187:
+static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: include/linux/mm.h:1187:
+static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: include/linux/mm.h:1188:
+static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, 
+	unsigned long start_addr, unsigned long end_addr, struct vm_area_cache *cache)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: include/linux/mm.h:1190:
+	struct vm_area_struct * vma = find_vma(mm,start_addr,cache);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/linux/mm.h:1190:
+	struct vm_area_struct * vma = find_vma(mm,start_addr,cache);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/linux/mm.h:1190:
+	struct vm_area_struct * vma = find_vma(mm,start_addr,cache);
 	                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#150: FILE: mm/mmap.c:270:
+	if (find_vma_intersection(mm, oldbrk, newbrk+PAGE_SIZE, &current->vmacache))
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#204: FILE: mm/mmap.c:1295:
+		vma = find_vma(mm, addr-len, &current->vmacache);
 		                       ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#221: FILE: mm/mmap.c:1400:
+struct vm_area_struct * check_vma_cache(struct mm_struct * mm, unsigned long addr, struct vm_area_cache *cache)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: mm/mmap.c:1400:
+struct vm_area_struct * check_vma_cache(struct mm_struct * mm, unsigned long addr, struct vm_area_cache *cache)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: mm/mmap.c:1400:
+struct vm_area_struct * check_vma_cache(struct mm_struct * mm, unsigned long addr, struct vm_area_cache *cache)

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: mm/mmap.c:1404:
+	unsigned int mmseq = mm->mm_sequence;
+	smp_rmb();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#225: FILE: mm/mmap.c:1404:
+	smp_rmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: mm/mmap.c:1406:
+	if (cache->sequence == mmseq &&
+		vma &&

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#235: FILE: mm/mmap.c:1413:
+struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr, struct vm_area_cache *cache)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: mm/mmap.c:1413:
+struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr, struct vm_area_cache *cache)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: mm/mmap.c:1413:
+struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr, struct vm_area_cache *cache)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: mm/mmap.c:1655:
+	vma = find_vma(mm,addr,&current->vmacache);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#267: FILE: mm/mmap.c:1655:
+	vma = find_vma(mm,addr,&current->vmacache);
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#267: FILE: mm/mmap.c:1655:
+	vma = find_vma(mm,addr,&current->vmacache);
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: mm/mempolicy.c:535:
+		vma = find_vma_intersection(mm, addr, addr+1, &current->mmcache);
 		                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#336: FILE: kernel/futex.c:349:
+	if (attempt > 2 || !(vma = find_vma(mm, address, &current->vmacache)) ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 5 warnings, 6 checks, 302 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
