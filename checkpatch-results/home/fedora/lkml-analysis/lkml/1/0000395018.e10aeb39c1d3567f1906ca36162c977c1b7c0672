WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#74: FILE: drivers/mmc/core/sdio_cis.c:150:
+	       sdio_func_id(func), (unsigned)func->max_blksz);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: drivers/mmc/core/sdio_io.c:222:
+	ret = mmc_io_rw_direct(func->card, 1, 0,
+			func->num * 0x100 + SDIO_FBR_BLKSIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: drivers/mmc/core/sdio_io.c:228:
+	ret = mmc_io_rw_direct(func->card, 1, 0,
+			func->num * 0x100 + SDIO_FBR_BLKSIZE + 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: drivers/mmc/core/sdio_io.c:243:
+static int sdio_io_rw_ext_helper(struct sdio_func *func, int write,
+	unsigned addr, int incr_addr, u8 *buf, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#124: FILE: drivers/mmc/core/sdio_io.c:243:
+	unsigned addr, int incr_addr, u8 *buf, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#124: FILE: drivers/mmc/core/sdio_io.c:243:
+	unsigned addr, int incr_addr, u8 *buf, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#126: FILE: drivers/mmc/core/sdio_io.c:245:
+	unsigned remainder = size;

CHECK:BRACES: braces {} should be used on all arms of this statement
#131: FILE: drivers/mmc/core/sdio_io.c:250:
+	if (func->forced_blksz)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#133: FILE: drivers/mmc/core/sdio_io.c:252:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#148: FILE: drivers/mmc/core/sdio_io.c:267:
+		unsigned blocks;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: drivers/mmc/core/sdio_io.c:283:
+		ret = mmc_io_rw_extended(func->card, write, func->num,
+				addr, incr_addr, buf, blocks, blksz);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: drivers/mmc/core/sdio_io.c:306:
+		ret = mmc_io_rw_extended(func->card, write, func->num,
+				addr, incr_addr, buf, 1, remainder);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#299: FILE: drivers/mmc/core/sdio_io.c:526:
+EXPORT_SYMBOL_GPL(sdio_force_block_size);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#310: FILE: drivers/mmc/core/sdio_ops.c:91:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#310: FILE: drivers/mmc/core/sdio_ops.c:91:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#310: FILE: drivers/mmc/core/sdio_ops.c:91:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#319: FILE: drivers/mmc/core/sdio_ops.c:100:
+	BUG_ON(blocks > 511);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'blocks > 1'
#335: FILE: drivers/mmc/core/sdio_ops.c:116:
+	if ((blocks > 1) || (blksz > 512)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'blksz > 512'
#335: FILE: drivers/mmc/core/sdio_ops.c:116:
+	if ((blocks > 1) || (blksz > 512)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#335: FILE: drivers/mmc/core/sdio_ops.c:116:
+	if ((blocks > 1) || (blksz > 512)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#338: FILE: drivers/mmc/core/sdio_ops.c:119:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#365: FILE: drivers/mmc/core/sdio_ops.h:19:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#365: FILE: drivers/mmc/core/sdio_ops.h:19:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#365: FILE: drivers/mmc/core/sdio_ops.h:19:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: include/linux/mmc/sdio_func.h:141:
+extern int sdio_force_block_size(struct sdio_func *func, unsigned short size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 12 checks, 305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
