WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#63: 
> To note the biggest ones (or do you want the whole file?)... and thats 
                                                                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#132: FILE: fs/inode.c:85:
+EXPORT_SYMBOL(inode_in_use);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#133: FILE: fs/inode.c:86:
+EXPORT_SYMBOL(inode_unused);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#134: FILE: fs/inode.c:87:
+EXPORT_SYMBOL(inode_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#166: FILE: fs/inode.c:263:
+EXPORT_SYMBOL(__iget);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#175: FILE: fs/inode.c:1371:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: fs/inode.c:1372:
+struct hlist_head * get_inode_hash_budget(unsigned long index)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: fs/inode.c:1374:
+       if (index >= (1 << i_hash_shift))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#178: FILE: fs/inode.c:1374:
+       if (index >= (1 << i_hash_shift))
+               return NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: fs/inode.c:1375:
+               return NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: fs/inode.c:1375:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: fs/inode.c:1377:
+       return inode_hashtable + index;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#194: FILE: fs/super.c:48:
+EXPORT_SYMBOL(super_blocks);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#195: FILE: fs/super.c:49:
+EXPORT_SYMBOL(sb_lock);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#276: FILE: Documentation/filesystems/proc.txt:502:
+    # flags R:referenced A:active U:uptodate D:dirty W:writeback M:mmap
                                     ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#322: FILE: fs/proc/filecache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#323: FILE: fs/proc/filecache.c:2:
+ * fs/proc/filecache.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#347: FILE: fs/proc/filecache.c:26:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#356: FILE: fs/proc/filecache.c:35:
+#define SBUF_SIZE	(128<<10)
                  	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#358: FILE: fs/proc/filecache.c:37:
+#define IWIN_SIZE	((PAGE_SIZE<<IWIN_PAGE_ORDER) / sizeof(struct inode *))
                  	           ^

WARNING:TYPO_SPELLING: 'assiocated' may be misspelled - perhaps 'associated'?
#363: FILE: fs/proc/filecache.c:42:
+ * Each opened /proc/filecache file is assiocated with a session object.
                                        ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#371: FILE: fs/proc/filecache.c:50:
+ * ^I- NULL: ii_*() called to show the inode index$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#372: FILE: fs/proc/filecache.c:51:
+ * 	- filp: pg_*() called to show the page groups of a filp
    	  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#372: FILE: fs/proc/filecache.c:51:
+ * 	- filp: pg_*() called to show the page groups of a filp
    	                                                   ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: fs/proc/filecache.c:51:
+ * ^I- filp: pg_*() called to show the page groups of a filp$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: fs/proc/filecache.c:54:
+ * ^I- cloned from global_session.query_file on open();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#376: FILE: fs/proc/filecache.c:55:
+ * ^I- updated on write("cat filename");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: fs/proc/filecache.c:56:
+ * ^I  note that the new file will also be saved in global_session.query_file if$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: fs/proc/filecache.c:57:
+ * ^I  session.private_session is false.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#424: FILE: fs/proc/filecache.c:103:
+	BUG_ON(proc_file->f_ra.start);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#445: FILE: fs/proc/filecache.c:124:
+ * ^Is->query_file = global_session.query_file = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#447: FILE: fs/proc/filecache.c:126:
+ * ^Is->query_file = global_session.query_file;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#449: FILE: fs/proc/filecache.c:128:
+ * ^Is->query_file = global_session.query_file = newfile;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#487: FILE: fs/proc/filecache.c:166:
+	s->query_file = filp_open(name, O_RDONLY|O_LARGEFILE, 0);
 	                                        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#488: FILE: fs/proc/filecache.c:167:
+	if (IS_ERR(s->query_file)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: fs/proc/filecache.c:170:
+	} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#517: FILE: fs/proc/filecache.c:196:
+		iput(s->ipos.pinned_inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: fs/proc/filecache.c:202:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#528: FILE: fs/proc/filecache.c:207:
+ * ^I^Iecho > /proc/filecache  # enter listing mode$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: fs/proc/filecache.c:208:
+ * ^I^Icat /proc/filecache     # get the file listing$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: fs/proc/filecache.c:223:
+^I{ LS_OPT_NOCLEAN,^I"noclean" ^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#545: FILE: fs/proc/filecache.c:224:
+^I{ LS_OPT_NODIRTY,^I"nodirty" ^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#546: FILE: fs/proc/filecache.c:225:
+^I{ LS_OPT_NOUNUSED,^I"nounused" ^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#548: FILE: fs/proc/filecache.c:227:
+^I{ LS_OPT_ALL,^I^I"all" ^I^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#550: FILE: fs/proc/filecache.c:229:
+^I{ LS_OPT_ERR,^I^INULL ^I^I}$

CHECK:BRACES: braces {} should be used on all arms of this statement
#589: FILE: fs/proc/filecache.c:268:
+			if (*p == '/') {
[...]
+			} else
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#591: FILE: fs/proc/filecache.c:270:
+				struct nameidata nd;
 				                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#592: FILE: fs/proc/filecache.c:271:
+				ret = path_lookup(p, LOOKUP_FOLLOW, &nd);
 				                                     ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: fs/proc/filecache.c:271:
+				struct nameidata nd;
+				ret = path_lookup(p, LOOKUP_FOLLOW, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#594: FILE: fs/proc/filecache.c:273:
+					ret = vfs_getattr(nd.path.mnt,
 					                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#595: FILE: fs/proc/filecache.c:274:
+							  nd.path.dentry, &stat);
 							  ^^

CHECK:BRACES: Unbalanced braces around else statement
#598: FILE: fs/proc/filecache.c:277:
+			} else

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#599: FILE: fs/proc/filecache.c:278:
+				s->ls_dev = simple_strtoul(p, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#605: FILE: fs/proc/filecache.c:284:
+			printk(KERN_WARNING "unknown parameter or missing value "

WARNING:SPLIT_STRING: quoted string split across lines
#606: FILE: fs/proc/filecache.c:285:
+			printk(KERN_WARNING "unknown parameter or missing value "
+			       "'%s' in ls command\n", p);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#626: FILE: fs/proc/filecache.c:305:
+	if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#626: FILE: fs/proc/filecache.c:305:
+	if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 	                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: fs/proc/filecache.c:373:
+	if (s->ipos.inode && pos >= s->ipos.pos &&
+			!(s->ipos.state & I_DIRTY) &&

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#747: FILE: fs/proc/filecache.c:426:
+	if ((iwin_full(s) && pos >= s->iwin.origin + s->iwin.size)
+			  || pos < s->iwin.origin)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#755: FILE: fs/proc/filecache.c:434:
+	BUG_ON(!s->ipos.inode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#772: FILE: fs/proc/filecache.c:451:
+	if (inode->i_mapping)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#774: FILE: fs/proc/filecache.c:453:
+	else {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#784: FILE: fs/proc/filecache.c:463:
+	if (inode->i_state & (I_DIRTY_DATASYNC|I_DIRTY_PAGES))
 	                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: fs/proc/filecache.c:477:
+	seq_printf(m, "%10lu %10llu %8lu %7d ",
+			inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: fs/proc/filecache.c:483:
+	seq_printf(m, "%6d %5s ",
+			refcnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: fs/proc/filecache.c:488:
+	seq_printf(m, "%8u %5u %-16s",
+			inode->i_access_count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: fs/proc/filecache.c:494:
+	seq_printf(m, "%02x:%02x(%s)\t",
+			MAJOR(inode->i_sb->s_dev),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: fs/proc/filecache.c:503:
+			seq_printf(m, "(%02x:%02x)\n",
+					imajor(inode), iminor(inode));

CHECK:SPACING: No space is necessary after a cast
#839: FILE: fs/proc/filecache.c:518:
+	unsigned long index = *(loff_t *) v;

ERROR:CODE_INDENT: code indent should use tabs where possible
#841: FILE: fs/proc/filecache.c:520:
+        struct inode *inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: fs/proc/filecache.c:520:
+        struct inode *inode;$

WARNING:SPLIT_STRING: quoted string split across lines
#846: FILE: fs/proc/filecache.c:525:
+		seq_puts(m, "#      ino       size   cached cached% "
+				"refcnt state "

ERROR:CODE_INDENT: code indent should use tabs where possible
#853: FILE: fs/proc/filecache.c:532:
+        inode = iwin_inode(s,index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: fs/proc/filecache.c:532:
+        inode = iwin_inode(s,index);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#853: FILE: fs/proc/filecache.c:532:
+        inode = iwin_inode(s,index);
                             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#865: FILE: fs/proc/filecache.c:544:
+				__get_free_pages( GFP_KERNEL, IWIN_PAGE_ORDER);

CHECK:SPACING: No space is necessary after a cast
#896: FILE: fs/proc/filecache.c:575:
+	free_pages((unsigned long) s->iwin.inodes, IWIN_PAGE_ORDER);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#898: FILE: fs/proc/filecache.c:577:
+		iput(s->ipos.pinned_inode);
 		^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#906: FILE: fs/proc/filecache.c:585:
+ * ^I^Iecho 'file name' > /proc/filecache$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#907: FILE: fs/proc/filecache.c:586:
+ * ^I^Icat /proc/filecache$

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#923: FILE: fs/proc/filecache.c:602:
+} page_flag [] = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#928: FILE: fs/proc/filecache.c:607:
+	{1 << PG_uptodate,	"U:uptodate",	0},
 	                  	   ^^^^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#941: FILE: fs/proc/filecache.c:620:
+static unsigned long page_flags(struct page* page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: fs/proc/filecache.c:635:
+		if (radix_tree_tag_get(&mapping->page_tree,
+					page_index(page),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: fs/proc/filecache.c:640:
+		if (radix_tree_tag_get(&mapping->page_tree,
+					page_index(page),

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#969: FILE: fs/proc/filecache.c:648:
+static int pages_similiar(struct page* page0, struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#969: FILE: fs/proc/filecache.c:648:
+static int pages_similiar(struct page* page0, struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#980: FILE: fs/proc/filecache.c:659:
+static void show_range(struct seq_file *m, struct page* page, unsigned long len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: fs/proc/filecache.c:679:
+static pgoff_t show_file_cache(struct seq_file *m,
+				struct address_space *mapping, pgoff_t start)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: fs/proc/filecache.c:691:
+		pvec.nr = radix_tree_gang_lookup(&mapping->page_tree,
+				(void **)pvec.pages, start + len, PAGEVEC_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: fs/proc/filecache.c:706:
+			if (page->index == start + len &&
+					pages_similiar(page0, page))

CHECK:BRACES: Unbalanced braces around else statement
#1029: FILE: fs/proc/filecache.c:708:
+			else {

CHECK:SPACING: No space is necessary after a cast
#1053: FILE: fs/proc/filecache.c:732:
+	offset = *(loff_t *) v;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1122: FILE: fs/proc/filecache.c:801:
+struct seq_operations seq_filecache_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1158: FILE: fs/proc/filecache.c:837:
+		hlist_for_each (node, head) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1162: FILE: fs/proc/filecache.c:841:
+			if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 			                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1162: FILE: fs/proc/filecache.c:841:
+			if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 			                                       ^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1179: FILE: fs/proc/filecache.c:858:
+			iput(inode);
 			^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1186: FILE: fs/proc/filecache.c:865:
+			printk(KERN_WARNING

CHECK:SPACING: No space is necessary after a cast
#1193: FILE: fs/proc/filecache.c:872:
+	free_pages((unsigned long) inodes, IWIN_PAGE_ORDER);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1214: FILE: fs/proc/filecache.c:893:
+	unsigned size;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1263: FILE: fs/proc/filecache.c:942:
+ssize_t filecache_write(struct file *proc_file, const char __user * buffer,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1273: FILE: fs/proc/filecache.c:952:
+	name = kmalloc(count+1, GFP_KERNEL);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1283: FILE: fs/proc/filecache.c:962:
+	if (count && name[count-1] == '\n')
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1284: FILE: fs/proc/filecache.c:963:
+		name[count-1] = '\0';
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1295: FILE: fs/proc/filecache.c:974:
+		err = session_update_file(s, name+4);
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1302: FILE: fs/proc/filecache.c:981:
+			err = ls_parse_options(name+2, s);
 			                           ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1329: FILE: fs/proc/filecache.c:1008:
+static struct file_operations proc_filecache_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1338: FILE: fs/proc/filecache.c:1017:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1400: FILE: include/linux/fs.h:1923:
 }
+struct hlist_head * get_inode_hash_budget(unsigned long index);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1400: FILE: include/linux/fs.h:1923:
+struct hlist_head * get_inode_hash_budget(unsigned long index);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1443: FILE: fs/Kconfig:776:
+config PROC_FILECACHE_EXTRAS
+	bool "track extra states"
+	default y
+	depends on PROC_FILECACHE
+	help
+	  Track extra states that costs a little more time/space.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159008.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 59 warnings, 40 checks, 1342 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159008.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
