WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Also, PAT WC is enabled only on recent Intel CPUs. Other CPUs can be added as

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: arch/x86/mm/pat.c:1:
+/* Handle caching attributes in page tables (PAT) */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#69: FILE: arch/x86/mm/pat.c:7:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#72: FILE: arch/x86/mm/pat.c:10:
+int pat_wc_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: arch/x86/mm/pat.c:13:
+^IPAT_UC = 0,   ^I/* uncached */$

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#80: FILE: arch/x86/mm/pat.c:18:
+	PAT_UC_MINUS = 7,	/* UC, but can be overriden by MTRR */
 	                 	                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: arch/x86/mm/pat.c:21:
+#define PAT(x,y) ((u64)PAT_ ## y << ((x)*8))
              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#83: FILE: arch/x86/mm/pat.c:21:
+#define PAT(x,y) ((u64)PAT_ ## y << ((x)*8))
                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: arch/x86/mm/pat.c:36:
+	u64 pat;
+	if (!smp_processor_id() && !pat_known_cpu())

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#106: FILE: arch/x86/mm/pat.c:44:
+	/* PTE encoding used in Linux:
+	      PAT

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#108: FILE: arch/x86/mm/pat.c:46:
+	      |PCD
+	      ||PWT

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#109: FILE: arch/x86/mm/pat.c:47:
+	      ||PWT
+	      |||

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#113: FILE: arch/x86/mm/pat.c:51:
+		PAT bit unused */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/x86/mm/pat.c:52:
+	pat = PAT(0,WB) | PAT(1,WT) | PAT(2,WC) | PAT(3,UC) |
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/x86/mm/pat.c:52:
+	pat = PAT(0,WB) | PAT(1,WT) | PAT(2,WC) | PAT(3,UC) |
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/x86/mm/pat.c:52:
+	pat = PAT(0,WB) | PAT(1,WT) | PAT(2,WC) | PAT(3,UC) |
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/x86/mm/pat.c:52:
+	pat = PAT(0,WB) | PAT(1,WT) | PAT(2,WC) | PAT(3,UC) |
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/x86/mm/pat.c:53:
+	      PAT(4,WB) | PAT(5,WT) | PAT(6,WC) | PAT(7,UC);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/x86/mm/pat.c:53:
+	      PAT(4,WB) | PAT(5,WT) | PAT(6,WC) | PAT(7,UC);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/x86/mm/pat.c:53:
+	      PAT(4,WB) | PAT(5,WT) | PAT(6,WC) | PAT(7,UC);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/x86/mm/pat.c:53:
+	      PAT(4,WB) | PAT(5,WT) | PAT(6,WC) | PAT(7,UC);
 	                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#123: FILE: arch/x86/mm/pat.c:61:
+	printk("cpu %d, old 0x%Lx, new 0x%Lx\n", smp_processor_id(),

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#123: FILE: arch/x86/mm/pat.c:61:
+	printk("cpu %d, old 0x%Lx, new 0x%Lx\n", smp_processor_id(),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: arch/x86/mm/pat.c:62:
+	printk("cpu %d, old 0x%Lx, new 0x%Lx\n", smp_processor_id(),
+			boot_pat_state, pat);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#166: FILE: arch/x86/pci/i386.c:326:
+		if (boot_cpu_data.x86 > 3) {
+			prot |= _PAGE_PCD;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: include/asm-x86/pgtable_64.h:161:
+#define _PAGE_PCD	((_AC(1, UL)<<_PAGE_BIT_PCD) | _PAGE_PWT)
                  	            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#220: FILE: include/asm-x86/pgtable_64.h:171:
+#define _PAGE_WC	(_AC(1, UL)<<_PAGE_BIT_PCD)
                 	           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#307: FILE: arch/x86/kernel/cpu/mtrr/generic.c:94:
+		mtrr_state.var_ranges = kmalloc(num_var_ranges * sizeof (struct mtrr_var_range),

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#307: FILE: arch/x86/kernel/cpu/mtrr/generic.c:94:
+		mtrr_state.var_ranges = kmalloc(num_var_ranges * sizeof (struct mtrr_var_range),
 						GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: include/asm-x86/processor.h:651:
+extern void pat_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/asm-x86/processor.h:652:
+extern void pat_shutdown(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 12 warnings, 9 checks, 346 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
