WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Reads dirents from all layers of the union into a cache, eliminates duplicates,

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#96: FILE: fs/union.c:49:
+DEFINE_MUTEX(union_rdmutex);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: fs/union.c:107:
+	readdir_cache = kmem_cache_create("readdir-cache",
+					sizeof(struct rdcache_entry), 0,

WARNING:RETURN_VOID: void function return statements are not generally useful
#161: FILE: fs/union.c:568:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: fs/union.c:571:
+static int rdcache_find_entry(struct list_head *uc_list,
+				  const char *name, int namelen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: fs/union.c:588:
+static int rdcache_add_entry(struct rdstate *r, struct list_head *list,
+		const char *name, int namelen, loff_t offset, u64 ino,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#189: FILE: fs/union.c:596:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rdcache_add_entry', this function's name, in a string
#189: FILE: fs/union.c:596:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#195: FILE: fs/union.c:602:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rdcache_add_entry', this function's name, in a string
#195: FILE: fs/union.c:602:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#195: FILE: fs/union.c:602:
+	if (!tmp_name) {
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: fs/union.c:625:
+static int filldir_union(void *buf, const char *name, int namlen,
+			   loff_t offset, u64 ino, unsigned int d_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: fs/union.c:643:
+		rdcache_add_entry(r, &r->dirent_cache,
+			name, namlen, offset, ino, d_type);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*r)...) over kzalloc(sizeof(struct rdstate)...)
#271: FILE: fs/union.c:678:
+	r = kzalloc(sizeof(struct rdstate), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#414: FILE: include/linux/fs.h:800:
+	struct path cur_path;	/* Current directory on which readdir is
+				   in progress */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#414: FILE: include/linux/fs.h:800:
+				   in progress */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#419: FILE: include/linux/fs.h:805:
+	loff_t nr_dirents;	/* Number of entries from current underlying
+				   directory in rdcache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#419: FILE: include/linux/fs.h:805:
+				   directory in rdcache */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/linux/fs.h:809:
+extern void put_rdstate(struct rdstate *rdstate);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#456: FILE: include/linux/union.h:57:
+extern int readdir_union(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#456: FILE: include/linux/union.h:57:
+extern int readdir_union(struct file *, void *, filldir_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#456: FILE: include/linux/union.h:57:
+extern int readdir_union(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'filldir_t' should also have an identifier name
#456: FILE: include/linux/union.h:57:
+extern int readdir_union(struct file *, void *, filldir_t);

CHECK:BRACES: Unbalanced braces around else statement
#484: FILE: include/linux/union.h:100:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 10 checks, 428 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
