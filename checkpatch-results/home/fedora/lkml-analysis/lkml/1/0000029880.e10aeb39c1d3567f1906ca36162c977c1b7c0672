WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#90: 
13.12.2009 First implementation of a type safe fifo implementation, called kqueue

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#include "kfifo.h"

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#118: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
#endif

WARNING:TYPO_SPELLING: 'initalized' may be misspelled - perhaps 'initialized'?
#125: 
		printk("fifo is initalized\n");
		                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#158: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#160: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#162: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#163: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#166: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#170: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#181: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#186: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#188: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#221: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#223: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#226: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#228: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#230: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#240: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#245: 
#endif

WARNING:TYPO_SPELLING: 'powerfull' may be misspelled - perhaps 'powerful'?
#287: 
to use. So linux will get now an powerfull fifo API which provides all what 
                                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'resuse' may be misspelled - perhaps 'reuse'?
#293: 
is to provide powerful API's and LIB's to resuse code.
                                          ^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#355: FILE: include/linux/kfifo.h:48:
+typedef	unsigned int	__KFIFO_STREAM[0];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#356: FILE: include/linux/kfifo.h:49:
+typedef	unsigned char	__KFIFO_REC_1;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#357: FILE: include/linux/kfifo.h:50:
+typedef	unsigned short	__KFIFO_REC_2;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptrtype' - possible side-effects?
#359: FILE: include/linux/kfifo.h:52:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype		*ptr; \
+		const ptrtype	*ptr_const; \
+	};

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptrtype' may be better as '(ptrtype)' to avoid precedence issues
#359: FILE: include/linux/kfifo.h:52:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype		*ptr; \
+		const ptrtype	*ptr_const; \
+	};

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#359: FILE: include/linux/kfifo.h:52:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype		*ptr; \
+		const ptrtype	*ptr_const; \
+	};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#370: FILE: include/linux/kfifo.h:63:
+#define __STRUCT_KFIFO(type, size, rectype, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	type		data[(!size || (size & (size - 1))) ? -1 : size]; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#370: FILE: include/linux/kfifo.h:63:
+#define __STRUCT_KFIFO(type, size, rectype, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	type		data[(!size || (size & (size - 1))) ? -1 : size]; \
+}

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#392: FILE: include/linux/kfifo.h:85:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_STREAM' should also have an identifier name
#392: FILE: include/linux/kfifo.h:85:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#392: FILE: include/linux/kfifo.h:85:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#404: FILE: include/linux/kfifo.h:96:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_REC_1' should also have an identifier name
#404: FILE: include/linux/kfifo.h:96:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#404: FILE: include/linux/kfifo.h:96:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#405: FILE: include/linux/kfifo.h:97:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_REC_2' should also have an identifier name
#405: FILE: include/linux/kfifo.h:97:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#405: FILE: include/linux/kfifo.h:97:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#413: FILE: include/linux/kfifo.h:105:
+#define DECLARE_KFIFO_PTR(fifo, type) \
+	STRUCT_KFIFO_PTR(type) fifo

CHECK:SPACING: No space is necessary after a cast
#414: FILE: include/linux/kfifo.h:106:
+	STRUCT_KFIFO_PTR(type) fifo

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#427: FILE: include/linux/kfifo.h:113:
+#define __kfifo_initializer(fifo) \
+	(typeof(fifo)) { \
+		{ \
+			{ \
+			.in	= 0, \
+			.out	= 0, \
+			} \
+		} \
 	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fifo' may be better as '(fifo)' to avoid precedence issues
#452: FILE: include/linux/kfifo.h:123:
+#define	__is_kfifo_ptr(fifo) \
+	(offsetof(typeof(*fifo), data) == offsetof(struct kfifo, data))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#500: FILE: include/linux/kfifo.h:130:
+#define INIT_KFIFO(fifo) \
+	fifo = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#500: FILE: include/linux/kfifo.h:130:
+#define INIT_KFIFO(fifo) \
+	fifo = __kfifo_initializer(fifo)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#513: FILE: include/linux/kfifo.h:139:
+#define DECLARE_KFIFO(fifo, type, size) \
+	STRUCT_KFIFO(type, size) fifo

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#524: FILE: include/linux/kfifo.h:150:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#524: FILE: include/linux/kfifo.h:150:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

WARNING:TYPO_SPELLING: 'alway' may be misspelled - perhaps 'always'?
#542: FILE: include/linux/kfifo.h:164:
+ * Note: for in place fifo's this macro returns alway true
                                                 ^^^^^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(__tmps->data)
#583: FILE: include/linux/kfifo.h:192:
+			sizeof(__tmps->data) / sizeof(__tmps->data[0]); \

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#596: FILE: include/linux/kfifo.h:199:
+#define kfifo_reset(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->in = __tmp->out = 0; \
+})

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#599: FILE: include/linux/kfifo.h:202:
+	__tmp->in = __tmp->out = 0; \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#612: FILE: include/linux/kfifo.h:209:
+#define kfifo_reset_out(fifo)	\
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->out = __tmp->in; \
+})

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#692: FILE: include/linux/kfifo.h:264:
+#define	kfifo_skip(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_skip_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, __recsize); \
+	else \
+		__tmp->out++; \
+})

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#766: FILE: include/linux/kfifo.h:301:
+ * The numer of elements will be rounded-up to a power of 2.
        ^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#855: FILE: include/linux/kfifo.h:353:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#866: FILE: include/linux/kfifo.h:364:
+				*(typeof(&__tmp->data[0]))__val; \
 				         ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#867: FILE: include/linux/kfifo.h:365:
+			smp_wmb(); \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#909: FILE: include/linux/kfifo.h:390:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#919: FILE: include/linux/kfifo.h:400:
+			*(typeof(&__tmp->data[0]))__val = \
 			         ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#921: FILE: include/linux/kfifo.h:402:
+			smp_wmb(); \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#953: FILE: include/linux/kfifo.h:427:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#963: FILE: include/linux/kfifo.h:437:
+			*(typeof(&__tmp->data[0]))__val = \
 			         ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#965: FILE: include/linux/kfifo.h:439:
+			smp_wmb(); \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1025: FILE: include/linux/kfifo.h:467:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1066: FILE: include/linux/kfifo.h:494:
+#define	kfifo_in_locked(fifo, buf, n, lock) \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_in(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+})

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1134: FILE: include/linux/kfifo.h:527:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1172: FILE: include/linux/kfifo.h:558:
+#define	kfifo_out_locked(fifo, buf, n, lock) \
+__kfifo_check( \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_out(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+}) \
+)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1393: FILE: include/linux/kfifo.h:694:
+#define kfifo_dma_in_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_dma_in_finish_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, kfifo_size(__tmp), __len, __recsize); \
+	else \
+		__tmp->in += __len / sizeof(__tmp->data[0]); \
+})

WARNING:TYPO_SPELLING: 'transferd' may be misspelled - perhaps 'transferred'?
#1452: FILE: include/linux/kfifo.h:748:
+ * @len: number of bytes transferd.
                          ^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1470: FILE: include/linux/kfifo.h:756:
+#define kfifo_dma_out_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_dma_out_finish_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, kfifo_size(__tmp), __len, __recsize); \
+	else \
+		__tmp->out += __len / sizeof(__tmp->data[0]); \
+})

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1508: FILE: include/linux/kfifo.h:791:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1533: FILE: include/linux/kfifo.h:812:
+extern int __kfifo_alloc(void *fifo, unsigned int size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1534: FILE: include/linux/kfifo.h:813:
+extern int __kfifo_alloc(void *fifo, unsigned int size,
+	size_t esize, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1546: FILE: include/linux/kfifo.h:816:
+extern void __kfifo_init(void *fifo, void *buffer, unsigned int size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1547: FILE: include/linux/kfifo.h:817:
+extern void __kfifo_init(void *fifo, void *buffer, unsigned int size,
+	size_t esize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1564: FILE: include/linux/kfifo.h:819:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1565: FILE: include/linux/kfifo.h:820:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,
+	unsigned int size, size_t esize, const void *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1577: FILE: include/linux/kfifo.h:823:
+extern unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1578: FILE: include/linux/kfifo.h:824:
+extern unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1580: FILE: include/linux/kfifo.h:826:
+extern unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1581: FILE: include/linux/kfifo.h:827:
+extern unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1584: FILE: include/linux/kfifo.h:830:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1585: FILE: include/linux/kfifo.h:831:
+extern unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1586: FILE: include/linux/kfifo.h:832:
+extern unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,
+	unsigned int size, size_t esize, void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1588: FILE: include/linux/kfifo.h:834:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1589: FILE: include/linux/kfifo.h:835:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data,
+	unsigned int size, void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1591: FILE: include/linux/kfifo.h:837:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1592: FILE: include/linux/kfifo.h:838:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, void *buf, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1594: FILE: include/linux/kfifo.h:840:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1595: FILE: include/linux/kfifo.h:841:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1596: FILE: include/linux/kfifo.h:842:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,
+	void *data, unsigned int size,  size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1599: FILE: include/linux/kfifo.h:845:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1600: FILE: include/linux/kfifo.h:846:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1603: FILE: include/linux/kfifo.h:849:
+extern unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1604: FILE: include/linux/kfifo.h:850:
+extern unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1607: FILE: include/linux/kfifo.h:853:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1608: FILE: include/linux/kfifo.h:854:
+extern unsigned long __kfifo_to_user(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1609: FILE: include/linux/kfifo.h:855:
+extern unsigned long __kfifo_to_user(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize, void __user *to,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1612: FILE: include/linux/kfifo.h:858:
+extern unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1613: FILE: include/linux/kfifo.h:859:
+extern unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1616: FILE: include/linux/kfifo.h:862:
+extern unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1617: FILE: include/linux/kfifo.h:863:
+extern unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1620: FILE: include/linux/kfifo.h:866:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1621: FILE: include/linux/kfifo.h:867:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1622: FILE: include/linux/kfifo.h:868:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1625: FILE: include/linux/kfifo.h:871:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1626: FILE: include/linux/kfifo.h:872:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1629: FILE: include/linux/kfifo.h:875:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1630: FILE: include/linux/kfifo.h:876:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1633: FILE: include/linux/kfifo.h:879:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1634: FILE: include/linux/kfifo.h:880:
+extern void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1635: FILE: include/linux/kfifo.h:881:
+extern void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1637: FILE: include/linux/kfifo.h:883:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1638: FILE: include/linux/kfifo.h:884:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1639: FILE: include/linux/kfifo.h:885:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1642: FILE: include/linux/kfifo.h:888:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1643: FILE: include/linux/kfifo.h:889:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1646: FILE: include/linux/kfifo.h:892:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1647: FILE: include/linux/kfifo.h:893:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1650: FILE: include/linux/kfifo.h:896:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1651: FILE: include/linux/kfifo.h:897:
+extern void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1652: FILE: include/linux/kfifo.h:898:
+extern void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1654: FILE: include/linux/kfifo.h:900:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1655: FILE: include/linux/kfifo.h:901:
+extern unsigned int __kfifo_peek_reclen(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1656: FILE: include/linux/kfifo.h:902:
+extern unsigned int __kfifo_peek_reclen(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1658: FILE: include/linux/kfifo.h:904:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1659: FILE: include/linux/kfifo.h:905:
+extern unsigned int __kfifo_out_peek(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1660: FILE: include/linux/kfifo.h:906:
+extern unsigned int __kfifo_out_peek(struct __kfifoc *fifoc, void *data,
+	unsigned int size, size_t esize, void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1662: FILE: include/linux/kfifo.h:908:
+extern unsigned int __kfifo_out_peek_1(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1663: FILE: include/linux/kfifo.h:909:
+extern unsigned int __kfifo_out_peek_1(struct __kfifoc *fifoc, void *data,
+	unsigned int size, void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1665: FILE: include/linux/kfifo.h:911:
+extern unsigned int __kfifo_out_peek_rec(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: include/linux/kfifo.h:912:
+extern unsigned int __kfifo_out_peek_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, void *buf, unsigned int len, size_t recsize);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#1699: FILE: kernel/kfifo.c:30:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#1699: FILE: kernel/kfifo.c:30:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: kernel/kfifo.c:33:
+int __kfifo_alloc(void *fifo, unsigned int size,
+		size_t esize, gfp_t gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1742: FILE: kernel/kfifo.c:45:
+	BUG_ON(size <= 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1744: FILE: kernel/kfifo.c:47:
+	proxy->in = proxy->out = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1779: FILE: kernel/kfifo.c:71:
+	proxy->in = proxy->out = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1792: FILE: kernel/kfifo.c:77:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,
+		unsigned int size, size_t esize, const void *buf,

WARNING:MEMORY_BARRIER: memory barrier without comment
#1816: FILE: kernel/kfifo.c:96:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1826: FILE: kernel/kfifo.c:103:
+unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,
+		unsigned int size, size_t esize, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1855: FILE: kernel/kfifo.c:121:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1864: FILE: kernel/kfifo.c:128:
+unsigned int __kfifo_out_peek(struct __kfifoc *fifoc, void *data,
+		unsigned int size, size_t esize, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1893: FILE: kernel/kfifo.c:146:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1901: FILE: kernel/kfifo.c:152:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,
+		void *data, unsigned int size,  size_t esize,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1925: FILE: kernel/kfifo.c:170:
+	if (unlikely(ret))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1927: FILE: kernel/kfifo.c:172:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1938: FILE: kernel/kfifo.c:179:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1945: FILE: kernel/kfifo.c:186:
+unsigned long __kfifo_to_user(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize, void __user *to,

CHECK:BRACES: Unbalanced braces around else statement
#1966: FILE: kernel/kfifo.c:206:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1975: FILE: kernel/kfifo.c:213:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1982: FILE: kernel/kfifo.c:220:
+static unsigned int setup_sgl(void *data, unsigned int size,
+	struct scatterlist *sgl, int nents, unsigned int len, unsigned int off)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1988: FILE: kernel/kfifo.c:226:
+		if (nents > 1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1994: FILE: kernel/kfifo.c:232:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2006: FILE: kernel/kfifo.c:242:
+unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2019: FILE: kernel/kfifo.c:249:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2041: FILE: kernel/kfifo.c:264:
+unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2048: FILE: kernel/kfifo.c:271:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2069: FILE: kernel/kfifo.c:288:
+unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,
+		unsigned int size, const void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2091: FILE: kernel/kfifo.c:306:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2114: FILE: kernel/kfifo.c:313:
+unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data,
+		unsigned int size, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2135: FILE: kernel/kfifo.c:331:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2145: FILE: kernel/kfifo.c:338:
+unsigned int __kfifo_out_peek_1(struct __kfifoc *fifoc, void *data,
+		unsigned int size, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2164: FILE: kernel/kfifo.c:356:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2173: FILE: kernel/kfifo.c:362:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, const void __user *from,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2200: FILE: kernel/kfifo.c:384:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2221: FILE: kernel/kfifo.c:391:
+unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, void __user *to,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2246: FILE: kernel/kfifo.c:412:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2257: FILE: kernel/kfifo.c:419:
+unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2265: FILE: kernel/kfifo.c:426:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2283: FILE: kernel/kfifo.c:441:
+unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2292: FILE: kernel/kfifo.c:448:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2325: FILE: kernel/kfifo.c:469:
+static unsigned int __kfifo_peek_n(struct __kfifoc *fifoc,
+	unsigned char *data, unsigned int size, size_t recsize)

WARNING:TYPO_SPELLING: 'storeing' may be misspelled - perhaps 'storing'?
#2343: FILE: kernel/kfifo.c:487:
+ * __kfifo_poke_n internal helper function for storeing the length of
                                                ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2349: FILE: kernel/kfifo.c:491:
+static void __kfifo_poke_n(struct __kfifoc *fifoc,
+	unsigned char *data, unsigned int size, unsigned int n, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2358: FILE: kernel/kfifo.c:500:
+unsigned int __kfifo_peek_reclen(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2365: FILE: kernel/kfifo.c:507:
+unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2386: FILE: kernel/kfifo.c:528:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2393: FILE: kernel/kfifo.c:535:
+unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, void *buf, unsigned int len, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2418: FILE: kernel/kfifo.c:557:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2428: FILE: kernel/kfifo.c:564:
+unsigned int __kfifo_out_peek_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, void *buf, unsigned int len, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2451: FILE: kernel/kfifo.c:586:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2461: FILE: kernel/kfifo.c:592:
+unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2494: FILE: kernel/kfifo.c:618:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2516: FILE: kernel/kfifo.c:625:
+unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2547: FILE: kernel/kfifo.c:653:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2555: FILE: kernel/kfifo.c:660:
+unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2562: FILE: kernel/kfifo.c:667:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2588: FILE: kernel/kfifo.c:690:
+void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2598: FILE: kernel/kfifo.c:697:
+unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2607: FILE: kernel/kfifo.c:704:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2634: FILE: kernel/kfifo.c:728:
+void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000029880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 78 warnings, 112 checks, 2323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000029880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
