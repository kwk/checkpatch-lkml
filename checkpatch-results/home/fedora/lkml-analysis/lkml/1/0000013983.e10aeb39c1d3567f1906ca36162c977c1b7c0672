WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
their own files instead of being buried (almost hidden) in readme/txt files.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: Documentation/laptops/dslm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#78: FILE: Documentation/laptops/dslm.c:24:
+int endit = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#82: FILE: Documentation/laptops/dslm.c:28:
+ * 1 = active, 0 = standby/sleep, -1 = unknown */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: Documentation/laptops/dslm.c:31:
+    unsigned char args[4] = {WIN_CHECKPOWERMODE1,0,0,0};$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: Documentation/laptops/dslm.c:31:
+    unsigned char args[4] = {WIN_CHECKPOWERMODE1,0,0,0};
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: Documentation/laptops/dslm.c:31:
+    unsigned char args[4] = {WIN_CHECKPOWERMODE1,0,0,0};
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: Documentation/laptops/dslm.c:31:
+    unsigned char args[4] = {WIN_CHECKPOWERMODE1,0,0,0};
                                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: Documentation/laptops/dslm.c:32:
+    int state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: Documentation/laptops/dslm.c:34:
+    if (ioctl(fd, HDIO_DRIVE_CMD, &args)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#88: FILE: Documentation/laptops/dslm.c:34:
+    if (ioctl(fd, HDIO_DRIVE_CMD, &args)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#89: FILE: Documentation/laptops/dslm.c:35:
+    if (ioctl(fd, HDIO_DRIVE_CMD, &args)
+	&& (args[0] = WIN_CHECKPOWERMODE2) /* try again with 0x98 */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#90: FILE: Documentation/laptops/dslm.c:36:
+	&& (args[0] = WIN_CHECKPOWERMODE2) /* try again with 0x98 */
+	&& ioctl(fd, HDIO_DRIVE_CMD, &args)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#91: FILE: Documentation/laptops/dslm.c:37:
+	if (errno != EIO || args[0] != 0 || args[1] != 0) {
+	    state = -1; /* "unknown"; */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#91: FILE: Documentation/laptops/dslm.c:37:
+	if (errno != EIO || args[0] != 0 || args[1] != 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#93: FILE: Documentation/laptops/dslm.c:39:
+	} else
+	    state = 0; /* "sleeping"; */

CHECK:BRACES: Unbalanced braces around else statement
#93: FILE: Documentation/laptops/dslm.c:39:
+	} else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: Documentation/laptops/dslm.c:41:
+    } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: Documentation/laptops/dslm.c:43:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: Documentation/laptops/dslm.c:44:
+    D(printf(" drive state is:  %d\n", state));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: Documentation/laptops/dslm.c:46:
+    return state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: Documentation/laptops/dslm.c:51:
+    if (i == -1) return "unknown";$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#105: FILE: Documentation/laptops/dslm.c:51:
+    if (i == -1) return "unknown";

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: Documentation/laptops/dslm.c:52:
+    if (i == 0) return "sleeping";$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#106: FILE: Documentation/laptops/dslm.c:52:
+    if (i == 0) return "sleeping";

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: Documentation/laptops/dslm.c:53:
+    if (i == 1) return "active";$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#107: FILE: Documentation/laptops/dslm.c:53:
+    if (i == 1) return "active";

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: Documentation/laptops/dslm.c:55:
+    return "internal error";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: Documentation/laptops/dslm.c:60:
+    char *ts = ctime(&time);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#115: FILE: Documentation/laptops/dslm.c:61:
+    char *ts = ctime(&time);
+    ts[strlen(ts) - 1] = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: Documentation/laptops/dslm.c:61:
+    ts[strlen(ts) - 1] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: Documentation/laptops/dslm.c:63:
+    return ts;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: Documentation/laptops/dslm.c:68:
+    time_t start_time;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: Documentation/laptops/dslm.c:69:
+    int last_state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: Documentation/laptops/dslm.c:70:
+    time_t last_time;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: Documentation/laptops/dslm.c:71:
+    int curr_state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: Documentation/laptops/dslm.c:72:
+    time_t curr_time = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: Documentation/laptops/dslm.c:73:
+    time_t time_diff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: Documentation/laptops/dslm.c:74:
+    time_t active_time = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: Documentation/laptops/dslm.c:75:
+    time_t sleep_time = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: Documentation/laptops/dslm.c:76:
+    time_t unknown_time = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: Documentation/laptops/dslm.c:77:
+    time_t total_time = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: Documentation/laptops/dslm.c:78:
+    int changes = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: Documentation/laptops/dslm.c:79:
+    float tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: Documentation/laptops/dslm.c:81:
+    printf("Starting measurements\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: Documentation/laptops/dslm.c:83:
+    last_state = check_powermode(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: Documentation/laptops/dslm.c:84:
+    start_time = last_time = time(0);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#138: FILE: Documentation/laptops/dslm.c:84:
+    start_time = last_time = time(0);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: Documentation/laptops/dslm.c:85:
+    printf("  System is in state %s\n\n", state_name(last_state));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: Documentation/laptops/dslm.c:87:
+    while(!endit) {$

ERROR:SPACING: space required before the open parenthesis '('
#141: FILE: Documentation/laptops/dslm.c:87:
+    while(!endit) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#145: FILE: Documentation/laptops/dslm.c:91:
+	if (curr_state != last_state || endit) {
+	    changes++;

WARNING:TABSTOP: Statements should start on a tabstop
#150: FILE: Documentation/laptops/dslm.c:96:
+	    if (last_state == 1) active_time += time_diff;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#150: FILE: Documentation/laptops/dslm.c:96:
+	    if (last_state == 1) active_time += time_diff;

WARNING:TABSTOP: Statements should start on a tabstop
#151: FILE: Documentation/laptops/dslm.c:97:
+	    else if (last_state == 0) sleep_time += time_diff;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#151: FILE: Documentation/laptops/dslm.c:97:
+	    else if (last_state == 0) sleep_time += time_diff;

WARNING:TABSTOP: Statements should start on a tabstop
#152: FILE: Documentation/laptops/dslm.c:98:
+	    else unknown_time += time_diff;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#152: FILE: Documentation/laptops/dslm.c:98:
+	    else unknown_time += time_diff;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: Documentation/laptops/dslm.c:106:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: Documentation/laptops/dslm.c:107:
+    changes--; /* Compensate for SIGINT */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: Documentation/laptops/dslm.c:109:
+    total_time = time(0) - start_time;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: Documentation/laptops/dslm.c:110:
+    printf("\nTotal running time:  %lus\n", curr_time - start_time);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: Documentation/laptops/dslm.c:111:
+    printf(" State changed %d times\n", changes);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: Documentation/laptops/dslm.c:113:
+    tmp = (float)sleep_time / (float)total_time * 100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: Documentation/laptops/dslm.c:114:
+    printf(" Time in sleep state:   %lus (%.2f%%)\n", sleep_time, tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: Documentation/laptops/dslm.c:115:
+    tmp = (float)active_time / (float)total_time * 100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: Documentation/laptops/dslm.c:116:
+    printf(" Time in active state:  %lus (%.2f%%)\n", active_time, tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: Documentation/laptops/dslm.c:117:
+    tmp = (float)unknown_time / (float)total_time * 100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: Documentation/laptops/dslm.c:118:
+    printf(" Time in unknown state: %lus (%.2f%%)\n", unknown_time, tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: Documentation/laptops/dslm.c:123:
+    endit = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: Documentation/laptops/dslm.c:128:
+    puts("usage: dslm [-w <time>] <disk>");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#182: FILE: Documentation/laptops/dslm.c:128:
+    puts("usage: dslm [-w <time>] <disk>");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: Documentation/laptops/dslm.c:129:
+    exit(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: Documentation/laptops/dslm.c:134:
+    int fd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: Documentation/laptops/dslm.c:135:
+    char *disk = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: Documentation/laptops/dslm.c:136:
+    int settle_time = 60;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: Documentation/laptops/dslm.c:139:
+    if (argc == 2)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#193: FILE: Documentation/laptops/dslm.c:139:
+    if (argc == 2)
[...]
+    else if (argc == 4) {
[...]
+    } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: Documentation/laptops/dslm.c:141:
+    else if (argc == 4) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: Documentation/laptops/dslm.c:144:
+    } else$

CHECK:BRACES: Unbalanced braces around else statement
#198: FILE: Documentation/laptops/dslm.c:144:
+    } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: Documentation/laptops/dslm.c:147:
+    if (!(fd = open(disk, O_RDONLY|O_NONBLOCK))) {$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#201: FILE: Documentation/laptops/dslm.c:147:
+    if (!(fd = open(disk, O_RDONLY|O_NONBLOCK))) {
                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#201: FILE: Documentation/laptops/dslm.c:147:
+    if (!(fd = open(disk, O_RDONLY|O_NONBLOCK))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: Documentation/laptops/dslm.c:150:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: Documentation/laptops/dslm.c:152:
+    if (settle_time) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#206: FILE: Documentation/laptops/dslm.c:152:
+    if (settle_time) {
[...]
+    } else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#208: FILE: Documentation/laptops/dslm.c:154:
+	printf("Waiting %d seconds for the system to settle down to "
+	       "'normal'\n", settle_time);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: Documentation/laptops/dslm.c:156:
+    } else$

CHECK:BRACES: Unbalanced braces around else statement
#210: FILE: Documentation/laptops/dslm.c:156:
+    } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: Documentation/laptops/dslm.c:159:
+    signal(SIGINT, ender);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: Documentation/laptops/dslm.c:161:
+    measure(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: Documentation/laptops/dslm.c:163:
+    close(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: Documentation/laptops/dslm.c:165:
+    return 0;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 72 warnings, 9 checks, 363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
