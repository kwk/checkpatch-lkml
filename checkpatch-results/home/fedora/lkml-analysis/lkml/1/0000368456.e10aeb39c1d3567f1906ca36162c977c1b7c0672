CHECK:SPACING: No space is necessary after a cast
#164: FILE: arch/sparc64/kernel/iommu_common.c:76:
+	sgaddr = (unsigned long) (page_address(sg_page(sg)) + sg->offset);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#173: FILE: arch/sparc64/kernel/iommu_common.c:126:
+		sgaddr = (unsigned long) (page_address(sg_page(sg)) + sg->offset);

CHECK:SPACING: No space is necessary after a cast
#191: FILE: arch/sparc64/kernel/iommu_common.c:210:
+	prev  = (unsigned long) (page_address(sg_page(sg)) + sg->offset);

CHECK:SPACING: No space is necessary after a cast
#194: FILE: arch/sparc64/kernel/iommu_common.c:212:
+	dent_addr = (u32) ((unsigned long)(page_address(sg_page(sg)) + sg->offset)

CHECK:SPACING: No space is necessary after a cast
#201: FILE: arch/sparc64/kernel/iommu_common.c:218:
+		addr = (unsigned long) (page_address(sg_page(sg)) + sg->offset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#239: FILE: arch/x86/kernel/pci-calgary_64.c:416:
+		BUG_ON(!p);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: arch/x86/kernel/pci-calgary_64.c:439:
+		BUG_ON(!p);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: arch/x86/kernel/pci-gart_64.c:305:
+^I^Iunsigned long addr = page_to_phys(sg_page(s)) + s->offset; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#290: FILE: arch/x86/kernel/pci-nommu_64.c:65:
+		BUG_ON(!sg_page(s));

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#291: FILE: arch/x86/kernel/pci-nommu_64.c:66:
+		s->dma_address = virt_to_bus(page_address(sg_page(s)) +s->offset);
 		                                                      ^

CHECK:SPACING: No space is necessary after a cast
#334: FILE: crypto/hmac.c:163:
+	sg_set_page(&sg[1], (void *) sg);

CHECK:SPACING: No space is necessary after a cast
#360: FILE: crypto/scatterwalk.h:25:
+	return (++sg)->length ? sg : (void *) sg_page(sg);

CHECK:SPACING: No space is necessary after a cast
#491: FILE: drivers/block/cciss.c:2624:
+		temp64.val = (__u64) pci_map_page(h->pdev, sg_page(&tmp_sg[i]),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#618: FILE: drivers/ide/ide-probe.c:1340:
+	hwif->sg_table = kmalloc(sizeof(struct scatterlist)*hwif->sg_max_nents,
 	                                                   ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hwif->sg_table)...) over kmalloc(sizeof(struct scatterlist)...)
#618: FILE: drivers/ide/ide-probe.c:1340:
+	hwif->sg_table = kmalloc(sizeof(struct scatterlist)*hwif->sg_max_nents,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#618: FILE: drivers/ide/ide-probe.c:1340:
+	hwif->sg_table = kmalloc(sizeof(struct scatterlist)*hwif->sg_max_nents,
 				 GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: No space is necessary after a cast
#718: FILE: drivers/infiniband/hw/ipath/ipath_dma.c:111:
+		addr = (u64) page_address(sg_page(sg));

CHECK:SPACING: No space is necessary after a cast
#727: FILE: drivers/infiniband/hw/ipath/ipath_dma.c:130:
+	u64 addr = (u64) page_address(sg_page(sg));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: drivers/md/dm-crypt.c:355:
+^I^I$

CHECK:CAMELCASE: Avoid CamelCase: <SGlist>
#936: FILE: drivers/media/video/ivtv/ivtv-udma.c:66:
+			sg_set_page(&dma->SGlist[map_offset], dma->bouncemap[map_offset]);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mq->sg)...) over kmalloc(sizeof(struct scatterlist)...)
#1005: FILE: drivers/mmc/card/queue.c:157:
+			mq->sg = kmalloc(sizeof(struct scatterlist),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: drivers/mmc/card/queue.c:158:
+			mq->sg = kmalloc(sizeof(struct scatterlist),
 				GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mq->bounce_sg)...) over kmalloc(sizeof(struct scatterlist)...)
#1014: FILE: drivers/mmc/card/queue.c:165:
+			mq->bounce_sg = kmalloc(sizeof(struct scatterlist) *

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#1285: FILE: drivers/scsi/NCR5380.c:301:
+		cmd->SCp.ptr = page_address(sg_page(cmd->SCp.buffer))+
 		                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <SCp>
#1285: FILE: drivers/scsi/NCR5380.c:301:
+		cmd->SCp.ptr = page_address(sg_page(cmd->SCp.buffer))+

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#1294: FILE: drivers/scsi/NCR5380.c:2146:
+					cmd->SCp.ptr = page_address(sg_page(cmd->SCp.buffer))+
 					                                                     ^

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1342: FILE: drivers/scsi/fdomain.c:1324:
+	       current_SC->SCp.ptr = page_address(sg_page(current_SC->SCp.buffer)) + current_SC->SCp.buffer->offset;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1351: FILE: drivers/scsi/fdomain.c:1357:
+	    current_SC->SCp.ptr = page_address(sg_page(current_SC->SCp.buffer)) + current_SC->SCp.buffer->offset;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1373: FILE: drivers/scsi/gdth.c:2377:
+            if (!sg_page(sl)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1373: FILE: drivers/scsi/gdth.c:2377:
+            if (!sg_page(sl)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1380: FILE: drivers/scsi/gdth.c:2383:
+            address = kmap_atomic(sg_page(sl), KM_BIO_SRC_IRQ) + sl->offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: drivers/scsi/gdth.c:2383:
+            address = kmap_atomic(sg_page(sl), KM_BIO_SRC_IRQ) + sl->offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1517: FILE: drivers/scsi/ips.c:1518:
+                buffer = kmap_atomic(sg_page(sg), KM_IRQ0) + sg->offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1517: FILE: drivers/scsi/ips.c:1518:
+                buffer = kmap_atomic(sg_page(sg), KM_IRQ0) + sg->offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1526: FILE: drivers/scsi/ips.c:3526:
+                buffer = kmap_atomic(sg_page(&sg[i]), KM_IRQ0) + sg[i].offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1526: FILE: drivers/scsi/ips.c:3526:
+                buffer = kmap_atomic(sg_page(&sg[i]), KM_IRQ0) + sg[i].offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1535: FILE: drivers/scsi/ips.c:3559:
+                buffer = kmap_atomic(sg_page(&sg[i]), KM_IRQ0) + sg[i].offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1535: FILE: drivers/scsi/ips.c:3559:
+                buffer = kmap_atomic(sg_page(&sg[i]), KM_IRQ0) + sg[i].offset;$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1610: FILE: drivers/scsi/megaraid.c:1545:
+			if( sg_page(sgl) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1610: FILE: drivers/scsi/megaraid.c:1545:
+			if( sg_page(sgl) ) {

ERROR:SPACING: space required before the open parenthesis '('
#1610: FILE: drivers/scsi/megaraid.c:1545:
+			if( sg_page(sgl) ) {

CHECK:CAMELCASE: Avoid CamelCase: <STp>
#1654: FILE: drivers/scsi/osst.c:545:
+				memset(page_address(sg_page(&STp->buffer->sg[i])),

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1663: FILE: drivers/scsi/osst.c:4440:
+		STp->buffer->aux = (os_aux_t *) (page_address(sg_page(&STp->buffer->sg[i])) + OS_DATA_SIZE - b_size);

CHECK:SPACING: No space is necessary after a cast
#1663: FILE: drivers/scsi/osst.c:4440:
+		STp->buffer->aux = (os_aux_t *) (page_address(sg_page(&STp->buffer->sg[i])) + OS_DATA_SIZE - b_size);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1676: FILE: drivers/scsi/osst.c:5258:
+		if (page != NULL) {
+		    sg_set_page(&STbuffer->sg[0], page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#1676: FILE: drivers/scsi/osst.c:5258:
+		if (page != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <STbuffer>
#1677: FILE: drivers/scsi/osst.c:5259:
+		    sg_set_page(&STbuffer->sg[0], page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sg_page"
#1685: FILE: drivers/scsi/osst.c:5265:
+	if (sg_page(&STbuffer->sg[0]) == NULL) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1694: FILE: drivers/scsi/osst.c:5272:
+		struct page *page = alloc_pages(priority, (OS_FRAME_SIZE - got <= PAGE_SIZE) ? 0 : order);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1697: FILE: drivers/scsi/osst.c:5274:
+		if (page == NULL) {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#2030: FILE: drivers/scsi/st.c:4455:
+			sg_set_page(&sgl[i], pages[i]);;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#2076: FILE: drivers/usb/core/message.c:446:
+				page_address(sg_page(&sg[i])) + sg [i].offset;

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:LINE_SPACING: Missing a blank line after declarations
#2112: FILE: drivers/usb/misc/usbtest.c:364:
+		struct page *page = sg_page(&sg[i]);
+		if (!page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#2115: FILE: drivers/usb/misc/usbtest.c:366:
+		kfree (page_address (page) + sg [i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2115: FILE: drivers/usb/misc/usbtest.c:366:
+		kfree (page_address (page) + sg [i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2115: FILE: drivers/usb/misc/usbtest.c:366:
+		kfree (page_address (page) + sg [i].offset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2243: FILE: include/asm-x86/dma-mapping_32.h:48:
+		BUG_ON(!sg_page(sg));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2260: FILE: include/asm-x86/scatterlist_32.h:8:
+    unsigned long^Isg_magic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2262: FILE: include/asm-x86/scatterlist_32.h:10:
+    unsigned long^Ipage_link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2276: FILE: include/asm-x86/scatterlist_64.h:8:
+    unsigned long^Isg_magic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2278: FILE: include/asm-x86/scatterlist_64.h:10:
+    unsigned long^Ipage_link;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2297: FILE: include/linux/scatterlist.h:15:
+	BUG_ON(sg->sg_magic != SG_MAGIC);

CHECK:SPACING: No space is necessary after a cast
#2299: FILE: include/linux/scatterlist.h:17:
+	sg->page_link = page_link | (unsigned long) page;

CHECK:SPACING: No space is necessary after a cast
#2302: FILE: include/linux/scatterlist.h:20:
+#define sg_page(sg)	((struct page *) ((sg)->page_link & ~0x3))

CHECK:SPACING: No space is necessary after a cast
#2330: FILE: include/linux/scatterlist.h:38:
+	((struct scatterlist *) ((sg)->page_link & ~0x03))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2342: FILE: include/linux/scatterlist.h:55:
+	BUG_ON(sg->sg_magic != SG_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2358: FILE: include/linux/scatterlist.h:100:
+	BUG_ON(sgl[0].sg_magic != SG_MAGIC);

CHECK:SPACING: No space is necessary after a cast
#2368: FILE: include/linux/scatterlist.h:120:
+	prv[prv_nents - 1].page_link = (unsigned long) sgl | 0x01;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2402: FILE: include/linux/scatterlist.h:154:
+		int i;
+		for (i = 0; i < nents; i++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2408: FILE: include/linux/scatterlist.h:160:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#2440: FILE: lib/swiotlb.c:38:
+#define SG_ENT_VIRT_ADDRESS(sg)	(page_address(sg_page((sg)) + (sg)->offset))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000368456.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 27 warnings, 32 checks, 2006 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000368456.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
