WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Gitweb:     http://git.kernel.org/tip/827f3b4974c5db2968d4979fe6a0ae00ab37bdd8

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: tools/perf/bench/bench.h:6:
+extern int bench_mem_memcpy(int argc, const char **argv, const char *prefix __used);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#94: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#99: FILE: tools/perf/bench/mem-memcpy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#125: FILE: tools/perf/bench/mem-memcpy.c:27:
+static int use_clock = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: tools/perf/bench/mem-memcpy.c:31:
+	OPT_STRING('l', "length", &length_str, "1MB",
+		    "Specify length of memory to copy. "

WARNING:SPLIT_STRING: quoted string split across lines
#130: FILE: tools/perf/bench/mem-memcpy.c:32:
+		    "Specify length of memory to copy. "
+		    "available unit: B, MB, GB (upper and lower)"),

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: tools/perf/bench/mem-memcpy.c:34:
+	OPT_STRING('r', "routine", &routine, "default",
+		    "Specify routine to copy"),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#168: FILE: tools/perf/bench/mem-memcpy.c:70:
+	BUG_ON(clock_fd < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: tools/perf/bench/mem-memcpy.c:79:
+	BUG_ON(ret != sizeof(u64));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#198: FILE: tools/perf/bench/mem-memcpy.c:100:
+	clock_start = clock_end = clock_diff = 0ULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNNECESSARY_INT: Prefer 'long long' over 'long long int' as the int is unnecessary
#205: FILE: tools/perf/bench/mem-memcpy.c:107:
+	if ((long long int)length <= 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#234: FILE: tools/perf/bench/mem-memcpy.c:136:
+	if (use_clock) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#237: FILE: tools/perf/bench/mem-memcpy.c:139:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: tools/perf/bench/mem-memcpy.c:140:
+		BUG_ON(gettimeofday(&tv_start, NULL));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#246: FILE: tools/perf/bench/mem-memcpy.c:148:
+		BUG_ON(gettimeofday(&tv_end, NULL));

CHECK:BRACES: braces {} should be used on all arms of this statement
#257: FILE: tools/perf/bench/mem-memcpy.c:159:
+			if (bps < K)
[...]
+			else if (bps < K * K)
[...]
+			else if (bps < K * K * K)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: tools/perf/bench/mem-memcpy.c:165:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#270: FILE: tools/perf/bench/mem-memcpy.c:172:
+		if (use_clock) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#273: FILE: tools/perf/bench/mem-memcpy.c:175:
+		} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000046040.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 9 warnings, 10 checks, 235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000046040.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
