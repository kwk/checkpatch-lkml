CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: arch/s390/include/asm/checkpoint_hdr.h:103:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: arch/x86/include/asm/checkpoint_hdr.h:69:
+
+

CHECK:SPACING: No space is necessary after a cast
#195: FILE: checkpoint/objhash.c:274:
+	tty_kref_get((struct tty_struct *) ptr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#201: FILE: checkpoint/objhash.c:280:
+	tty_kref_put((struct tty_struct *) ptr);

CHECK:SPACING: No space is necessary after a cast
#206: FILE: checkpoint/objhash.c:285:
+	return atomic_read(&((struct tty_struct *) ptr)->kref.refcount);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#352: FILE: drivers/char/tty_io.c:2640:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#398: FILE: drivers/char/tty_io.c:2686:
+		return -ENOSYS;

CHECK:BIT_MACRO: Prefer using the BIT macro
#417: FILE: drivers/char/tty_io.c:2705:
+#define CKPT_LDISC_BAD   (1 << TTY_LDISC_CHANGING)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#428: FILE: drivers/char/tty_io.c:2716:
+	BUG_ON(tty->ldisc->ops->num != N_TTY);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#519: FILE: drivers/char/tty_io.c:2807:
+	BUG_ON(master ^ !link_objref);

CHECK:SPACING: No space is necessary after a cast
#565: FILE: drivers/char/tty_io.c:2853:
+	return do_checkpoint_tty(ctx, (struct tty_struct *) ptr);

CHECK:SPACING: No space is necessary after a cast
#570: FILE: drivers/char/tty_io.c:2858:
+	struct ckpt_hdr_file_tty *h = (struct ckpt_hdr_file_tty *) ptr;

CHECK:SPACING: No space is necessary after a cast
#589: FILE: drivers/char/tty_io.c:2877:
+		return (struct file *) tty;

CHECK:SPACING: No space is necessary after a cast
#700: FILE: drivers/char/tty_io.c:2988:
+		return (struct tty_struct *) h;

CHECK:SPACING: No space is necessary after a cast
#719: FILE: drivers/char/tty_io.c:3007:
+	if (test_bit(TTY_HUPPED, (unsigned long *) &h->flags) && master)

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#731: FILE: drivers/char/tty_io.c:3019:
+			ckpt_write_err(ctx, "TE", "open ptmx", PTR_ERR(file));
 			                     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#742: FILE: drivers/char/tty_io.c:3030:
+		fput(file);  /* even on succes (referenced in objash) */
 		                        ^^^^^^

CHECK:SPACING: No space is necessary after a cast
#757: FILE: drivers/char/tty_io.c:3045:
+		   tty, test_bit(TTY_HUPPED, (unsigned long *) &h->flags));

CHECK:SPACING: No space is necessary after a cast
#774: FILE: drivers/char/tty_io.c:3062:
+	if (test_bit(TTY_HUPPED, (unsigned long *) &h->flags))

CHECK:BRACES: braces {} should be used on all arms of this statement
#774: FILE: drivers/char/tty_io.c:3062:
+	if (test_bit(TTY_HUPPED, (unsigned long *) &h->flags))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#776: FILE: drivers/char/tty_io.c:3064:
+	else {

CHECK:SPACING: No space is necessary after a cast
#793: FILE: drivers/char/tty_io.c:3081:
+	return (void *) do_restore_tty(ctx);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#795: FILE: drivers/char/tty_io.c:3083:
+	return ERR_PTR(-ENOSYS);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#812: FILE: include/linux/checkpoint.h:270:
+extern int checkpoint_tty(struct ckpt_ctx *ctx, void *ptr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: include/linux/checkpoint.h:271:
+extern void *restore_tty(struct ckpt_ctx *ctx);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#889: FILE: include/linux/checkpoint_hdr.h:698:
+	} __attribute__((aligned(8))) termios;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#897: FILE: include/linux/checkpoint_hdr.h:706:
+	} __attribute__((aligned(8))) winsize;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#898: FILE: include/linux/checkpoint_hdr.h:707:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#936: FILE: include/linux/checkpoint_hdr.h:745:
+} __attribute__((aligned(8)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#938: FILE: include/linux/checkpoint_hdr.h:747:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#953: FILE: include/linux/tty.h:477:
+extern struct file *tty_file_restore(struct ckpt_ctx *ctx,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068222.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 20 checks, 800 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068222.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
