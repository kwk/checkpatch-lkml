WARNING:TYPO_SPELLING: 'Synopsys' may be misspelled - perhaps 'Synopsis'?
#21: 
Subject: [RFC v3 6/7] dmaengine: Driver for the Synopsys DesignWare DMA controller
                                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Synopsys' may be misspelled - perhaps 'Synopsis'?
#35: 
This adds a driver for the Synopsys DesignWare DMA controller (aka
                           ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#90: FILE: arch/avr32/mach-at32ap/at32ap700x.c:462:
+};
+DEFINE_DEV_DATA(dw_dmac, 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#140: FILE: drivers/dma/Kconfig:40:
+config DW_DMAC
+	tristate "Synopsys DesignWare AHB DMA support"
+	depends on AVR32
+	select DMA_ENGINE
+	default y if CPU_AT32AP7000
+	help
+	  Support the Synopsys DesignWare AHB DMA controller.  This
+	  can be integrated in chips such as the Atmel AT32ap7000.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'Synopsys' may be misspelled - perhaps 'Synopsis'?
#141: FILE: drivers/dma/Kconfig:41:
+	tristate "Synopsys DesignWare AHB DMA support"
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'Synopsys' may be misspelled - perhaps 'Synopsis'?
#146: FILE: drivers/dma/Kconfig:46:
+	  Support the Synopsys DesignWare AHB DMA controller.  This
 	              ^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#165: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#170: FILE: drivers/dma/dw_dmac.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Synopsys' may be misspelled - perhaps 'Synopsis'?
#171: FILE: drivers/dma/dw_dmac.c:2:
+ * Driver for the Synopsys DesignWare DMA Controller (aka DMACA on
                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#181: FILE: drivers/dma/dw_dmac.c:12:
+/* #define DEBUG
+#define VERBOSE_DEBUG */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: drivers/dma/dw_dmac.c:12:
+#define VERBOSE_DEBUG */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: drivers/dma/dw_dmac.c:24:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: drivers/dma/dw_dmac.c:102:
+	lli->phys = dma_map_single(dwc->chan.dev.parent, lli,
+			sizeof *lli, DMA_TO_DEVICE);

WARNING:SIZEOF_PARENTHESIS: sizeof *lli should be sizeof(*lli)
#271: FILE: drivers/dma/dw_dmac.c:102:
+			sizeof *lli, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: drivers/dma/dw_dmac.c:115:
+	dma_unmap_single(dwc->chan.dev.parent, lli->phys,
+			sizeof *lli, DMA_TO_DEVICE);

WARNING:SIZEOF_PARENTHESIS: sizeof *lli should be sizeof(*lli)
#284: FILE: drivers/dma/dw_dmac.c:115:
+			sizeof *lli, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: drivers/dma/dw_dmac.c:125:
+	dma_sync_single_for_device(dwc->chan.dev.parent, lli->phys,
+			sizeof(struct dw_lli), DMA_TO_DEVICE);

CHECK:BRACES: Unbalanced braces around else statement
#309: FILE: drivers/dma/dw_dmac.c:140:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#321: FILE: drivers/dma/dw_dmac.c:152:
+		lli->ctllo = lli->ctlhi = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#325: FILE: drivers/dma/dw_dmac.c:156:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: drivers/dma/dw_dmac.c:230:
+	channel_writel(dwc, CTL_LO,
+			DWC_CTLL_LLP_D_EN | DWC_CTLL_LLP_S_EN);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#418: FILE: drivers/dma/dw_dmac.c:249:
+	dwc->first_queued = dwc->last_queued = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: drivers/dma/dw_dmac.c:258:
+	dev_vdbg(&dwc->chan.dev, "descriptor %u complete\n",
+			desc->slave.txd.cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: drivers/dma/dw_dmac.c:336:
+			dev_vdbg(&dwc->chan.dev, "  lli 0x%x done?\n",
+					lli->phys);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: drivers/dma/dw_dmac.c:381:
+	bad_desc = list_entry(dwc->active_list.next,
+			struct dw_desc, desc_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: drivers/dma/dw_dmac.c:390:
+		next_desc = list_entry(dwc->active_list.next,
+				struct dw_desc, desc_node);

WARNING:PREFER_DEV_LEVEL: Prefer dev_crit(... to dev_printk(KERN_CRIT, ...
#570: FILE: drivers/dma/dw_dmac.c:401:
+	dev_printk(KERN_CRIT, &dwc->chan.dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/dma/dw_dmac.c:402:
+	dev_printk(KERN_CRIT, &dwc->chan.dev,
+			"Bad descriptor submitted for DMA!\n");

WARNING:PREFER_DEV_LEVEL: Prefer dev_crit(... to dev_printk(KERN_CRIT, ...
#572: FILE: drivers/dma/dw_dmac.c:403:
+	dev_printk(KERN_CRIT, &dwc->chan.dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: drivers/dma/dw_dmac.c:404:
+	dev_printk(KERN_CRIT, &dwc->chan.dev,
+			"  cookie: %d\n", bad_desc->slave.txd.cookie);

WARNING:PREFER_DEV_LEVEL: Prefer dev_crit(... to dev_printk(KERN_CRIT, ...
#575: FILE: drivers/dma/dw_dmac.c:406:
+		dev_printk(KERN_CRIT, &dwc->chan.dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/dma/dw_dmac.c:407:
+		dev_printk(KERN_CRIT, &dwc->chan.dev,
+			"  LLI: s/0x%x d/0x%x l/0x%x c/0x%x:%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: drivers/dma/dw_dmac.c:429:
+	dev_dbg(dw->dma.dev, "tasklet: status_block=%x status_err=%x\n",
+			status_block, status_err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/dma/dw_dmac.c:457:
+	dev_vdbg(dw->dma.dev, "interrupt: status=0x%x\n",
+			dma_readl(dw, STATUS_INT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: drivers/dma/dw_dmac.c:498:
+		dev_vdbg(&dwc->chan.dev,
+				"tx_submit: %x: s/%x d/%x p/%x h/%x l/%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/dma/dw_dmac.c:514:
+		dev_vdbg(&tx->chan->dev, "tx_submit: queued %u\n",
+				desc->slave.txd.cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: drivers/dma/dw_dmac.c:522:
+		dev_vdbg(&tx->chan->dev, "tx_submit: started %u\n",
+				desc->slave.txd.cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: drivers/dma/dw_dmac.c:535:
+static struct dw_desc *dwc_prep_descriptor(struct dw_dma_chan *dwc,
+		u32 ctllo, dma_addr_t dest, dma_addr_t src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: drivers/dma/dw_dmac.c:585:
+		dev_vdbg(&chan->dev,
+			"  lli %p: src 0x%x dst 0x%x len %zu phys 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: drivers/dma/dw_dmac.c:609:
+dwc_prep_dma_memcpy(struct dma_chan *chan, dma_addr_t dest, dma_addr_t src,
+		size_t len, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/dma/dw_dmac.c:634:
+	desc = dwc_prep_descriptor(dwc, ctllo, dest, src,
+			len >> src_width, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: drivers/dma/dw_dmac.c:640:
+static struct dma_slave_descriptor *dwc_prep_slave(struct dma_chan *chan,
+		dma_addr_t mem_addr,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#826: FILE: drivers/dma/dw_dmac.c:657:
+	BUG_ON(!dws);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: drivers/dma/dw_dmac.c:658:
+	BUG_ON(len & ((1 << reg_width) - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: drivers/dma/dw_dmac.c:742:
+dwc_is_tx_complete(struct dma_chan *chan,
+		dma_cookie_t cookie,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: drivers/dma/dw_dmac.c:782:
+static int dwc_alloc_chan_resources(struct dma_chan *chan,
+		struct dma_client *client)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#976: FILE: drivers/dma/dw_dmac.c:807:
+	dwc->completed = chan->cookie = 1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#987: FILE: drivers/dma/dw_dmac.c:818:
+		BUG_ON(!slave->dma_dev || slave->dma_dev != dw->dma.dev);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*desc)...) over kzalloc(sizeof(struct dw_desc)...)
#1012: FILE: drivers/dma/dw_dmac.c:843:
+		desc = kzalloc(sizeof(struct dw_desc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1014: FILE: drivers/dma/dw_dmac.c:845:
+		if (!desc) {
+			dev_info(&chan->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/dma/dw_dmac.c:846:
+			dev_info(&chan->dev,
+				"only allocated %d descriptors\n", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: drivers/dma/dw_dmac.c:870:
+	dev_vdbg(&chan->dev,
+		"alloc_chan_resources allocated %d descriptors\n", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: drivers/dma/dw_dmac.c:883:
+	dev_vdbg(&chan->dev, "free_chan_resources (descs allocated=%u)\n",
+			dwc->descs_allocated);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1055: FILE: drivers/dma/dw_dmac.c:886:
+	BUG_ON(!list_empty(&dwc->active_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1056: FILE: drivers/dma/dw_dmac.c:887:
+	BUG_ON(!list_empty(&dwc->queue));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1057: FILE: drivers/dma/dw_dmac.c:888:
+	BUG_ON(dma_readl(to_dw_dma(chan->device), CH_EN) & dwc->mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1129: FILE: drivers/dma/dw_dmac.c:960:
+	if (request_mem_region(io->start, DW_REGLEN,
+			pdev->dev.driver->name) == 0) {

WARNING:SIZEOF_PARENTHESIS: sizeof *dw should be sizeof(*dw)
#1134: FILE: drivers/dma/dw_dmac.c:965:
+	memset(dw, 0, sizeof *dw);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: drivers/dma/dw_dmac.c:989:
+	lli_pool = dma_pool_create(pdev->dev.bus_id, &pdev->dev,
+			sizeof(struct dw_lli), 4, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: drivers/dma/dw_dmac.c:992:
+	lli_pool = kmem_cache_create(pdev->dev.bus_id,
+			sizeof(struct dw_lli), 4, 0, NULL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1180: FILE: drivers/dma/dw_dmac.c:1011:
+		dwc->chan.cookie = dwc->completed = 1;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1226: FILE: drivers/dma/dw_dmac.c:1057:
+	printk(KERN_INFO "%s: DesignWare DMA Controller, %d channels\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1227: FILE: drivers/dma/dw_dmac.c:1058:
+	printk(KERN_INFO "%s: DesignWare DMA Controller, %d channels\n",
+			pdev->dev.bus_id, dw->dma.chancnt);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dw_remove', this function's name, in a string
#1254: FILE: drivers/dma/dw_dmac.c:1085:
+	dev_dbg(&pdev->dev, "dw_remove\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: drivers/dma/dw_dmac.c:1094:
+	list_for_each_entry_safe(dwc, _dwc, &dw->dma.channels,
+			chan.device_node) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dw_remove', this function's name, in a string
#1285: FILE: drivers/dma/dw_dmac.c:1116:
+	dev_dbg(&pdev->dev, "dw_remove done\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1315: FILE: drivers/dma/dw_dmac.c:1146:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1346: FILE: drivers/dma/dw_dmac_regs.h:1:
+/*

WARNING:TYPO_SPELLING: 'Synopsys' may be misspelled - perhaps 'Synopsis'?
#1347: FILE: drivers/dma/dw_dmac_regs.h:2:
+ * Driver for the Synopsys DesignWare AHB DMA Controller
                   ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1373: FILE: drivers/dma/dw_dmac_regs.h:28:
+	u32	CTL_HI;		/* Control Register High */
+	DW_REG(SSTAT);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1379: FILE: drivers/dma/dw_dmac_regs.h:34:
+	u32	CFG_HI;		/* Configuration Register High */
+	DW_REG(SGR);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1421: FILE: drivers/dma/dw_dmac_regs.h:76:
+#define DWC_CTLL_INT_EN		(1 << 0)	/* irqs enabled? */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1422: FILE: drivers/dma/dw_dmac_regs.h:77:
+#define DWC_CTLL_DST_WIDTH(n)	((n)<<1)	/* bytes per element */
                              	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1423: FILE: drivers/dma/dw_dmac_regs.h:78:
+#define DWC_CTLL_SRC_WIDTH(n)	((n)<<4)
                              	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1424: FILE: drivers/dma/dw_dmac_regs.h:79:
+#define DWC_CTLL_DST_INC	(0<<7)		/* DAR update/not */
                         	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1425: FILE: drivers/dma/dw_dmac_regs.h:80:
+#define DWC_CTLL_DST_DEC	(1<<7)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1425: FILE: drivers/dma/dw_dmac_regs.h:80:
+#define DWC_CTLL_DST_DEC	(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1426: FILE: drivers/dma/dw_dmac_regs.h:81:
+#define DWC_CTLL_DST_FIX	(2<<7)
                         	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1427: FILE: drivers/dma/dw_dmac_regs.h:82:
+#define DWC_CTLL_SRC_INC	(0<<7)		/* SAR update/not */
                         	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1428: FILE: drivers/dma/dw_dmac_regs.h:83:
+#define DWC_CTLL_SRC_DEC	(1<<9)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1428: FILE: drivers/dma/dw_dmac_regs.h:83:
+#define DWC_CTLL_SRC_DEC	(1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1429: FILE: drivers/dma/dw_dmac_regs.h:84:
+#define DWC_CTLL_SRC_FIX	(2<<9)
                         	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1430: FILE: drivers/dma/dw_dmac_regs.h:85:
+#define DWC_CTLL_DST_MSIZE(n)	((n)<<11)	/* burst, #elements */
                              	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1431: FILE: drivers/dma/dw_dmac_regs.h:86:
+#define DWC_CTLL_SRC_MSIZE(n)	((n)<<14)
                              	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1432: FILE: drivers/dma/dw_dmac_regs.h:87:
+#define DWC_CTLL_S_GATH_EN	(1 << 17)	/* src gather, !FIX */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1433: FILE: drivers/dma/dw_dmac_regs.h:88:
+#define DWC_CTLL_D_SCAT_EN	(1 << 18)	/* dst scatter, !FIX */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1435: FILE: drivers/dma/dw_dmac_regs.h:90:
+#define DWC_CTLL_FC_M2P		(1 << 20)	/* mem-to-periph */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1439: FILE: drivers/dma/dw_dmac_regs.h:94:
+#define DWC_CTLL_DMS(n)		((n)<<23)	/* dst master select */
                        		    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1440: FILE: drivers/dma/dw_dmac_regs.h:95:
+#define DWC_CTLL_SMS(n)		((n)<<25)	/* src master select */
                        		    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1441: FILE: drivers/dma/dw_dmac_regs.h:96:
+#define DWC_CTLL_LLP_D_EN	(1 << 27)	/* dest block chain */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1442: FILE: drivers/dma/dw_dmac_regs.h:97:
+#define DWC_CTLL_LLP_S_EN	(1 << 28)	/* src block chain */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1449: FILE: drivers/dma/dw_dmac_regs.h:104:
+#define DWC_CFGL_CH_SUSP	(1 << 8)	/* pause xfer */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1450: FILE: drivers/dma/dw_dmac_regs.h:105:
+#define DWC_CFGL_FIFO_EMPTY	(1 << 9)	/* pause xfer */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1451: FILE: drivers/dma/dw_dmac_regs.h:106:
+#define DWC_CFGL_HS_DST		(1 << 10)	/* handshake w/dst */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1452: FILE: drivers/dma/dw_dmac_regs.h:107:
+#define DWC_CFGL_HS_SRC		(1 << 11)	/* handshake w/src */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1454: FILE: drivers/dma/dw_dmac_regs.h:109:
+#define DWC_CFGL_RELOAD_SAR	(1 << 30)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1455: FILE: drivers/dma/dw_dmac_regs.h:110:
+#define DWC_CFGL_RELOAD_DAR	(1 << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1458: FILE: drivers/dma/dw_dmac_regs.h:113:
+#define DWC_CFGH_DS_UPD_EN	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1459: FILE: drivers/dma/dw_dmac_regs.h:114:
+#define DWC_CFGH_SS_UPD_EN	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1470: FILE: drivers/dma/dw_dmac_regs.h:125:
+#define DW_CFG_DMA_EN		(1 << 0)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1484: FILE: drivers/dma/dw_dmac_regs.h:139:
+	spinlock_t		lock;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1507: FILE: drivers/dma/dw_dmac_regs.h:162:
+#define channel_readl(dwc, name) \
+	__raw_readl(&(__dwc_regs(dwc)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1509: FILE: drivers/dma/dw_dmac_regs.h:164:
+#define channel_writel(dwc, name, val) \
+	__raw_writel((val), &(__dwc_regs(dwc)->name))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1517: FILE: drivers/dma/dw_dmac_regs.h:172:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1539: FILE: drivers/dma/dw_dmac_regs.h:194:
+#define dma_readl(dw, name) \
+	__raw_readl(&(__dw_regs(dw)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1541: FILE: drivers/dma/dw_dmac_regs.h:196:
+#define dma_writel(dw, name, val) \
+	__raw_writel((val), &(__dw_regs(dw)->name))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#1544: FILE: drivers/dma/dw_dmac_regs.h:199:
+#define channel_set_bit(dw, reg, mask) \
+	dma_writel(dw, reg, ((mask) << 8) | (mask))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1554: FILE: drivers/dma/dw_dmac_regs.h:209:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1603: FILE: include/asm-avr32/arch-at32ap/at32ap700x.h:33:
 
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1626: FILE: include/linux/dw_dmac.h:1:
+/*

WARNING:TYPO_SPELLING: 'Synopsys' may be misspelled - perhaps 'Synopsis'?
#1627: FILE: include/linux/dw_dmac.h:2:
+ * Driver for the Synopsys DesignWare DMA Controller (aka DMACA on
                   ^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1663: FILE: include/linux/dw_dmac.h:38:
+#define DWC_CFGH_FCMODE		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1664: FILE: include/linux/dw_dmac.h:39:
+#define DWC_CFGH_FIFO_MODE	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1672: FILE: include/linux/dw_dmac.h:47:
+#define DWC_CFGL_LOCK_CH_BLOCK	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1675: FILE: include/linux/dw_dmac.h:50:
+#define DWC_CFGL_LOCK_BUS_BLOCK	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1677: FILE: include/linux/dw_dmac.h:52:
+#define DWC_CFGL_LOCK_CH	(1 << 15)	/* channel lockout */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1678: FILE: include/linux/dw_dmac.h:53:
+#define DWC_CFGL_LOCK_BUS	(1 << 16)	/* busmaster lockout */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1679: FILE: include/linux/dw_dmac.h:54:
+#define DWC_CFGL_HS_DST_POL	(1 << 18)	/* dst handshake active low */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1680: FILE: include/linux/dw_dmac.h:55:
+#define DWC_CFGL_HS_SRC_POL	(1 << 19)	/* src handshake active low */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322778.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 87 checks, 1573 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322778.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
