WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#54: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: arch/score/include/asm/mman.h:1:
+#ifndef _ASM_SCORE_MMAN_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: arch/score/include/asm/mmu.h:1:
+#ifndef _ASM_SCORE_MMU_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#74: FILE: arch/score/include/asm/mmu.h:4:
+typedef unsigned long mm_context_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: arch/score/include/asm/mmu_context.h:1:
+#ifndef _ASM_SCORE_MMU_CONTEXT_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#92: FILE: arch/score/include/asm/mmu_context.h:9:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: arch/score/include/asm/mmu_context.h:21:
+#define TLBMISS_HANDLER_SETUP_PGD(pgd) (pgd_current = (unsigned $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#105: FILE: arch/score/include/asm/mmu_context.h:21:
long)(pgd))

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#107: FILE: arch/score/include/asm/mmu_context.h:23:
+#define TLBMISS_HANDLER_SETUP()                                \
+do {                                                   \
+       write_c0_context(0);                            \
+       TLBMISS_HANDLER_SETUP_PGD(swapper_pg_dir)       \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 7)
#108: FILE: arch/score/include/asm/mmu_context.h:24:
+do {                                                   \
+       write_c0_context(0);                            \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: arch/score/include/asm/mmu_context.h:25:
+       write_c0_context(0);                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: arch/score/include/asm/mmu_context.h:26:
+       TLBMISS_HANDLER_SETUP_PGD(swapper_pg_dir)       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: arch/score/include/asm/mmu_context.h:43:
+                               struct task_struct *tsk)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: arch/score/include/asm/mmu_context.h:43:
+static inline void enter_lazy_tlb(struct mm_struct *mm,
+                               struct task_struct *tsk)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: arch/score/include/asm/mmu_context.h:43:
+                               struct task_struct *tsk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/score/include/asm/mmu_context.h:49:
+       unsigned long asid = asid_cache + ASID_INC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/score/include/asm/mmu_context.h:51:
+       if (!(asid & ASID_MASK)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#135: FILE: arch/score/include/asm/mmu_context.h:51:
+       if (!(asid & ASID_MASK)) {
+               local_flush_tlb_all();          /* start new asid cycle */

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: arch/score/include/asm/mmu_context.h:52:
+               local_flush_tlb_all();          /* start new asid cycle */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/score/include/asm/mmu_context.h:52:
+               local_flush_tlb_all();          /* start new asid cycle */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: arch/score/include/asm/mmu_context.h:53:
+               if (!asid)                      /* fix version if needed $

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: arch/score/include/asm/mmu_context.h:53:
+               if (!asid)                      /* fix version if needed $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: arch/score/include/asm/mmu_context.h:53:
+               if (!asid)                      /* fix version if needed $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 0)
#137: FILE: arch/score/include/asm/mmu_context.h:53:
+               if (!asid)                      /* fix version if needed 
*/

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: arch/score/include/asm/mmu_context.h:54:
+                       asid = ASID_FIRST_VERSION;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#139: FILE: arch/score/include/asm/mmu_context.h:54:
+               if (!asid)                      /* fix version if needed 
+                       asid = ASID_FIRST_VERSION;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/score/include/asm/mmu_context.h:68:
+       mm->context = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/score/include/asm/mmu_context.h:69:
+       return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: arch/score/include/asm/mmu_context.h:72:
+static inline void switch_mm(struct mm_struct *prev, struct mm_struct $

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: arch/score/include/asm/mmu_context.h:73:
+                       struct task_struct *tsk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/score/include/asm/mmu_context.h:73:
+                       struct task_struct *tsk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: arch/score/include/asm/mmu_context.h:75:
+       unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/score/include/asm/mmu_context.h:77:
+       local_irq_save(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/score/include/asm/mmu_context.h:78:
+       if ((next->context ^ asid_cache) & ASID_VERSION_MASK)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#164: FILE: arch/score/include/asm/mmu_context.h:78:
+       if ((next->context ^ asid_cache) & ASID_VERSION_MASK)
+               get_new_mmu_context(next);

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: arch/score/include/asm/mmu_context.h:79:
+               get_new_mmu_context(next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/score/include/asm/mmu_context.h:79:
+               get_new_mmu_context(next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/score/include/asm/mmu_context.h:81:
+       pevn_set(next->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/score/include/asm/mmu_context.h:82:
+       TLBMISS_HANDLER_SETUP_PGD(next->pgd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/score/include/asm/mmu_context.h:83:
+       local_irq_restore(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: arch/score/include/asm/mmu_context.h:104:
+       unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: arch/score/include/asm/mmu_context.h:106:
+       local_irq_save(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/score/include/asm/mmu_context.h:107:
+       get_new_mmu_context(next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: arch/score/include/asm/mmu_context.h:108:
+       pevn_set(next->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: arch/score/include/asm/mmu_context.h:109:
+       TLBMISS_HANDLER_SETUP_PGD(next->pgd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: arch/score/include/asm/mmu_context.h:110:
+       local_irq_restore(flags);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#207: FILE: arch/score/include/asm/module.h:1:
+#ifndef _ASM_SCORE_MODULE_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#211: FILE: arch/score/include/asm/module.h:5:
+#include <asm/uaccess.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: arch/score/include/asm/module.h:9:
+       struct list_head dbe_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: arch/score/include/asm/module.h:10:
+       const struct exception_table_entry *dbe_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: arch/score/include/asm/module.h:11:
+       const struct exception_table_entry *dbe_end;$

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Byte>
#220: FILE: arch/score/include/asm/module.h:14:
+typedef uint8_t Elf64_Byte;            /* Type for a 8-bit quantity. */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#220: FILE: arch/score/include/asm/module.h:14:
+typedef uint8_t Elf64_Byte;            /* Type for a 8-bit quantity. */

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#222: FILE: arch/score/include/asm/module.h:16:
+#define Elf_Shdr       Elf32_Shdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#222: FILE: arch/score/include/asm/module.h:16:
+#define Elf_Shdr       Elf32_Shdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#223: FILE: arch/score/include/asm/module.h:17:
+#define Elf_Sym                Elf32_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#223: FILE: arch/score/include/asm/module.h:17:
+#define Elf_Sym                Elf32_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#224: FILE: arch/score/include/asm/module.h:18:
+#define Elf_Ehdr       Elf32_Ehdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#224: FILE: arch/score/include/asm/module.h:18:
+#define Elf_Ehdr       Elf32_Ehdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Addr>
#225: FILE: arch/score/include/asm/module.h:19:
+#define Elf_Addr       Elf32_Addr

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Addr>
#225: FILE: arch/score/include/asm/module.h:19:
+#define Elf_Addr       Elf32_Addr

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: arch/score/include/asm/module.h:23:
+const struct exception_table_entry *search_module_dbetables(unsigned long $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: arch/score/include/asm/module.h:28:
+       return NULL;$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#243: FILE: arch/score/include/asm/module.h:36:
+#define MODULE_ARCH_VERMAGIC \
+       MODULE_PROC_FAMILY MODULE_KERNEL_TYPE MODULE_KERNEL_SMTC

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: arch/score/include/asm/module.h:37:
+       MODULE_PROC_FAMILY MODULE_KERNEL_TYPE MODULE_KERNEL_SMTC$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#254: FILE: arch/score/include/asm/msgbuf.h:1:
+#ifndef _ASM_SCORE_MSGBUF_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#267: FILE: arch/score/include/asm/mutex.h:1:
+#ifndef _ASM_SCORE_MUTEX_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113525.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 42 warnings, 13 checks, 180 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113525.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
