WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: fs/nilfs2/mdt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: fs/nilfs2/mdt.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: fs/nilfs2/mdt.c:18:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: fs/nilfs2/mdt.c:34:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#155: FILE: fs/nilfs2/mdt.c:105:
+#if 0

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#156: FILE: fs/nilfs2/mdt.c:106:
+	/* The uptodate flag is not protected by the page lock, but
 	       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#157: FILE: fs/nilfs2/mdt.c:107:
+	/* The uptodate flag is not protected by the page lock, but
+	   the mapped flag is.  Thus, we don't have to wait the buffer. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#157: FILE: fs/nilfs2/mdt.c:107:
+	   the mapped flag is.  Thus, we don't have to wait the buffer. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: fs/nilfs2/mdt.c:155:
+		BUG_ON(mode != READ);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#478: FILE: fs/nilfs2/mdt.c:428:
+
+

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#479: FILE: fs/nilfs2/mdt.c:429:
+static struct address_space_operations def_mdt_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#483: FILE: fs/nilfs2/mdt.c:433:
+static struct inode_operations def_mdt_iops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#484: FILE: fs/nilfs2/mdt.c:434:
+static struct file_operations def_mdt_fops;

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: fs/nilfs2/mdt.c:452:
+	if (!inode)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#504: FILE: fs/nilfs2/mdt.c:454:
+		return NULL;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#504: FILE: fs/nilfs2/mdt.c:454:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#577: FILE: fs/nilfs2/mdt.c:527:
+void nilfs_mdt_set_entry_size(struct inode *inode, unsigned entry_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#578: FILE: fs/nilfs2/mdt.c:528:
+			      unsigned header_size)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#619: FILE: fs/nilfs2/mdt.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#635: FILE: fs/nilfs2/mdt.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#636: FILE: fs/nilfs2/mdt.h:18:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#664: FILE: fs/nilfs2/mdt.h:46:
+	unsigned		mi_entry_size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#665: FILE: fs/nilfs2/mdt.h:47:
+	unsigned		mi_first_entry_offset;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#686: FILE: fs/nilfs2/mdt.h:68:
+int nilfs_mdt_get_block(struct inode *, unsigned long, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#686: FILE: fs/nilfs2/mdt.h:68:
+int nilfs_mdt_get_block(struct inode *, unsigned long, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#686: FILE: fs/nilfs2/mdt.h:68:
+int nilfs_mdt_get_block(struct inode *, unsigned long, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head **' should also have an identifier name
#686: FILE: fs/nilfs2/mdt.h:68:
+int nilfs_mdt_get_block(struct inode *, unsigned long, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#690: FILE: fs/nilfs2/mdt.h:72:
+int nilfs_mdt_delete_block(struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#690: FILE: fs/nilfs2/mdt.h:72:
+int nilfs_mdt_delete_block(struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#691: FILE: fs/nilfs2/mdt.h:73:
+int nilfs_mdt_forget_block(struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#691: FILE: fs/nilfs2/mdt.h:73:
+int nilfs_mdt_forget_block(struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#692: FILE: fs/nilfs2/mdt.h:74:
+int nilfs_mdt_mark_block_dirty(struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#692: FILE: fs/nilfs2/mdt.h:74:
+int nilfs_mdt_mark_block_dirty(struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#693: FILE: fs/nilfs2/mdt.h:75:
+int nilfs_mdt_fetch_dirty(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct the_nilfs *' should also have an identifier name
#695: FILE: fs/nilfs2/mdt.h:77:
+struct inode *nilfs_mdt_new(struct the_nilfs *, struct super_block *, ino_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#695: FILE: fs/nilfs2/mdt.h:77:
+struct inode *nilfs_mdt_new(struct the_nilfs *, struct super_block *, ino_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ino_t' should also have an identifier name
#695: FILE: fs/nilfs2/mdt.h:77:
+struct inode *nilfs_mdt_new(struct the_nilfs *, struct super_block *, ino_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#695: FILE: fs/nilfs2/mdt.h:77:
+struct inode *nilfs_mdt_new(struct the_nilfs *, struct super_block *, ino_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct the_nilfs *' should also have an identifier name
#697: FILE: fs/nilfs2/mdt.h:79:
+struct inode *nilfs_mdt_new_common(struct the_nilfs *, struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#697: FILE: fs/nilfs2/mdt.h:79:
+struct inode *nilfs_mdt_new_common(struct the_nilfs *, struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ino_t' should also have an identifier name
#697: FILE: fs/nilfs2/mdt.h:79:
+struct inode *nilfs_mdt_new_common(struct the_nilfs *, struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#697: FILE: fs/nilfs2/mdt.h:79:
+struct inode *nilfs_mdt_new_common(struct the_nilfs *, struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#699: FILE: fs/nilfs2/mdt.h:81:
+void nilfs_mdt_destroy(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#700: FILE: fs/nilfs2/mdt.h:82:
+void nilfs_mdt_clear(struct inode *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#701: FILE: fs/nilfs2/mdt.h:83:
+void nilfs_mdt_set_entry_size(struct inode *, unsigned, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#701: FILE: fs/nilfs2/mdt.h:83:
+void nilfs_mdt_set_entry_size(struct inode *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#701: FILE: fs/nilfs2/mdt.h:83:
+void nilfs_mdt_set_entry_size(struct inode *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#701: FILE: fs/nilfs2/mdt.h:83:
+void nilfs_mdt_set_entry_size(struct inode *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#701: FILE: fs/nilfs2/mdt.h:83:
+void nilfs_mdt_set_entry_size(struct inode *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#702: FILE: fs/nilfs2/mdt.h:84:
+void nilfs_mdt_set_shadow(struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#702: FILE: fs/nilfs2/mdt.h:84:
+void nilfs_mdt_set_shadow(struct inode *, struct inode *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#704: FILE: fs/nilfs2/mdt.h:86:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#724: FILE: fs/nilfs2/mdt.h:106:
+	(&NILFS_MDT(inode)->mi_bgl->locks[(bg) & (NR_BG_LOCKS-1)].lock)
 	                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#726: FILE: fs/nilfs2/mdt.h:108:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#729: FILE: fs/nilfs2/mdt.h:111:
+			    unsigned n)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#731: FILE: fs/nilfs2/mdt.h:113:
+	return nilfs_read_inode_common(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#737: FILE: fs/nilfs2/mdt.h:119:
+			     unsigned n)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#739: FILE: fs/nilfs2/mdt.h:121:
+	nilfs_write_inode_common(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 46 warnings, 9 checks, 687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
