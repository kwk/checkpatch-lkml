ERROR:SPACING: space required before the open parenthesis '('
#81: FILE: include/asm-generic/tlb.h:39:
+#define tlb_arch_init(tlb)		do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#82: FILE: include/asm-generic/tlb.h:40:
+#define tlb_arch_finish(tlb)		do { } while(0)

ERROR:POINTER_LOCATION: "foo **		bar" should be "foo **bar"
#95: FILE: include/asm-generic/tlb.h:51:
+	struct page **		pages;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: mm/memory.c:266:
+void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *vma,
 		unsigned long floor, unsigned long ceiling)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: mm/memory.c:817:
+unsigned long unmap_vmas(struct mmu_gather *tlb,
 		struct vm_area_struct *vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: mm/memory.c:846:
+				start = unmap_page_range(tlb, vma,
 						start, end, &zap_work, details);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: arch/powerpc/mm/hugetlbpage.c:305:
+		BUG_ON(get_slice_psize(tlb->mm, addr) != mmu_huge_psize);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zap_details *' should also have an identifier name
#542: FILE: include/linux/mm.h:772:
+unsigned long unmap_vmas(struct mmu_gather *tlb,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: include/linux/mm.h:773:
+unsigned long unmap_vmas(struct mmu_gather *tlb,
 		struct vm_area_struct *start_vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: include/linux/mm.h:777:
+void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
 		unsigned long end, unsigned long floor, unsigned long ceiling);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: include/linux/mm.h:779:
+void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
 		unsigned long floor, unsigned long ceiling);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#755: FILE: include/asm-ia64/tlb.h:55:
 };
+#define mmu_gather_arch mmu_gather_arch

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#826: FILE: include/asm-ia64/tlb.h:104:
+	tlba->start_addr = tlba->start_pgtable = ~0UL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#856: FILE: include/asm-ia64/tlb.h:109:
+	tlba->start_addr = tlba->start_pgtable = ~0UL;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tlb' - possible side-effects?
#887: FILE: include/asm-ia64/tlb.h:112:
+#define tlb_flush(tlb)		__tlb_flush(&tlb->archdata, tlb->mm)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#887: FILE: include/asm-ia64/tlb.h:112:
+#define tlb_flush(tlb)		__tlb_flush(&tlb->archdata, tlb->mm)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#888: FILE: include/asm-ia64/tlb.h:113:
+#define tlb_arch_init(tlb)	__tlb_arch_init(&tlb->archdata)

ERROR:SPACING: space required before the open parenthesis '('
#889: FILE: include/asm-ia64/tlb.h:114:
+#define tlb_arch_finish(tlb)	do { } while(0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#911: FILE: include/asm-ia64/tlb.h:124:
+static inline void __tlb_remove_tlb_entry (struct mmu_gather *tlb, pte_t *ptep,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tlb' - possible side-effects?
#931: FILE: include/asm-ia64/tlb.h:133:
+#define __pte_free_tlb(tlb, ptep, addr)					\
+do {									\
+	if (tlb->archdata.start_pgtable > addr)				\
+		tlb->archdata.start_pgtable = addr;			\
+	tlb->archdata.end_pgtable = (addr + PMD_SIZE) & PMD_MASK;	\
+	pte_free((tlb)->mm, ptep);					\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#931: FILE: include/asm-ia64/tlb.h:133:
+#define __pte_free_tlb(tlb, ptep, addr)					\
+do {									\
+	if (tlb->archdata.start_pgtable > addr)				\
+		tlb->archdata.start_pgtable = addr;			\
+	tlb->archdata.end_pgtable = (addr + PMD_SIZE) & PMD_MASK;	\
+	pte_free((tlb)->mm, ptep);					\
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#931: FILE: include/asm-ia64/tlb.h:133:
+#define __pte_free_tlb(tlb, ptep, addr)					\
+do {									\
+	if (tlb->archdata.start_pgtable > addr)				\
+		tlb->archdata.start_pgtable = addr;			\
+	tlb->archdata.end_pgtable = (addr + PMD_SIZE) & PMD_MASK;	\
+	pte_free((tlb)->mm, ptep);					\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#931: FILE: include/asm-ia64/tlb.h:133:
+#define __pte_free_tlb(tlb, ptep, addr)					\
+do {									\
+	if (tlb->archdata.start_pgtable > addr)				\
+		tlb->archdata.start_pgtable = addr;			\
+	tlb->archdata.end_pgtable = (addr + PMD_SIZE) & PMD_MASK;	\
+	pte_free((tlb)->mm, ptep);					\
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tlb' - possible side-effects?
#976: FILE: include/asm-parisc/tlb.h:4:
+#define tlb_flush(tlb)						\
+do {	if (test_bit(MMF_DEAD, &(tlb)->mm->flags))		\
+		flush_tlb_mm((tlb)->mm);			\
 } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1003: FILE: arch/ia64/mm/hugetlbpage.c:118:
+void hugetlb_free_pgd_range(struct mmu_gather *tlb,
 			unsigned long addr, unsigned long end,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 3 warnings, 18 checks, 797 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
