WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
sure drbd_tag_magic.h. I realize that macros are generally frowned upon, but

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: include/linux/drbd.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#62: FILE: include/linux/drbd.h:2:
+/*
+  drbd.h

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#83: FILE: include/linux/drbd.h:23:
+  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'Altough' may be misspelled - perhaps 'Although'?
#100: FILE: include/linux/drbd.h:40:
+/* Altough the Linux source code makes a difference between
    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#101: FILE: include/linux/drbd.h:41:
+/* Altough the Linux source code makes a difference between
+   generic endianness and the bitfields' endianness, there is no

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#103: FILE: include/linux/drbd.h:43:
+   does not match the generic endianness. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: include/linux/drbd.h:55:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#191: FILE: include/linux/drbd.h:131:
+	ERR_CSUMS_RESYNC_RUNNING= 148, /* DRBD 8.2 only */
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'beween' may be misspelled - perhaps 'between'?
#224: FILE: include/linux/drbd.h:164:
+	 * I do not allow to change beween them. */
 	                            ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#224: FILE: include/linux/drbd.h:164:
+	 * I do not allow to change beween them. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#241: FILE: include/linux/drbd.h:181:
+	 * xx >= C_SYNC_SOURCE && xx <= C_PAUSED_SYNC_T */

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#272: FILE: include/linux/drbd.h:212:
+ * on different endianess.
                 ^^^^^^^^^

WARNING:SPACING: space prohibited before semicolon
#283: FILE: include/linux/drbd.h:223:
+		unsigned peer_isp:1 ;

WARNING:SPACING: space prohibited before semicolon
#284: FILE: include/linux/drbd.h:224:
+		unsigned user_isp:1 ;

WARNING:SPACING: space prohibited before semicolon
#288: FILE: include/linux/drbd.h:228:
+		unsigned user_isp:1 ;

WARNING:SPACING: space prohibited before semicolon
#289: FILE: include/linux/drbd.h:229:
+		unsigned peer_isp:1 ;

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#298: FILE: include/linux/drbd.h:238:
+# error "this endianess is not supported"
               ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/drbd.h:272:
+extern const char *conns_to_name(enum drbd_conns);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/linux/drbd.h:273:
+extern const char *roles_to_name(enum drbd_role);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: include/linux/drbd.h:274:
+extern const char *disks_to_name(enum drbd_disk_state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/drbd.h:275:
+extern const char *set_st_err_name(enum drbd_state_ret_codes);

CHECK:BIT_MACRO: Prefer using the BIT macro
#339: FILE: include/linux/drbd.h:279:
+#define MDF_CONSISTENT		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#340: FILE: include/linux/drbd.h:280:
+#define MDF_PRIMARY_IND		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#341: FILE: include/linux/drbd.h:281:
+#define MDF_CONNECTED_IND	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#342: FILE: include/linux/drbd.h:282:
+#define MDF_FULL_SYNC		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#343: FILE: include/linux/drbd.h:283:
+#define MDF_WAS_UP_TO_DATE	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#344: FILE: include/linux/drbd.h:284:
+#define MDF_PEER_OUT_DATED	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#345: FILE: include/linux/drbd.h:285:
+#define MDF_CRASHED_PRIMARY     (1 << 6)

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#366: FILE: include/linux/drbd.h:306:
+#define BE_DRBD_MAGIC __constant_cpu_to_be32(DRBD_MAGIC)

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#379: FILE: include/linux/drbd.h:319:
+ * when the time comes */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#410: FILE: include/linux/drbd_config.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#411: FILE: include/linux/drbd_config.h:2:
+/*
+  drbd_config.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#426: FILE: include/linux/drbd_config.h:17:
+  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#432: FILE: include/linux/drbd_config.h:23:
+extern const char *drbd_buildtag(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#453: FILE: include/linux/drbd_limits.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#454: FILE: include/linux/drbd_limits.h:2:
+/*
+  drbd_limits.h

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#497: FILE: include/linux/drbd_limits.h:45:
+   * more than one minute timeout is not usefull */
                                          ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#497: FILE: include/linux/drbd_limits.h:45:
+   * more than one minute timeout is not usefull */

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#522: FILE: include/linux/drbd_limits.h:70:
+  /* I don't think that a tcp send buffer of more than 10M is usefull */
                                                               ^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#524: FILE: include/linux/drbd_limits.h:72:
+#define DRBD_SNDBUF_SIZE_MAX  (10<<20)
                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#525: FILE: include/linux/drbd_limits.h:73:
+#define DRBD_SNDBUF_SIZE_DEF  (2*65535)
                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#535: FILE: include/linux/drbd_limits.h:83:
+#define DRBD_UNPLUG_WATERMARK_DEF (DRBD_MAX_BUFFERS_DEF/16)
                                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#538: FILE: include/linux/drbd_limits.h:86:
+   * 200 should be more than enough even for very short timeouts */

WARNING:TYPO_SPELLING: 'unneccessarily' may be misspelled - perhaps 'unnecessarily'?
#551: FILE: include/linux/drbd_limits.h:99:
+  /* less than 7 would hit performance unneccessarily.
                                        ^^^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#553: FILE: include/linux/drbd_limits.h:101:
+   * into 64 sectors of activity log */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#567: FILE: include/linux/drbd_limits.h:115:
+ * is 16 TB, currently. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#592: FILE: include/linux/drbd_nl.h:1:
+/*

WARNING:TYPO_SPELLING: 'PAKET' may be misspelled - perhaps 'PACKET'?
#593: FILE: include/linux/drbd_nl.h:2:
+   PAKET( name,
    ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#593: FILE: include/linux/drbd_nl.h:2:
+/*
+   PAKET( name,

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#601: FILE: include/linux/drbd_nl.h:10:
+#if !defined(NL_PACKET) || !defined(NL_STRING) || !defined(NL_INTEGER) || !defined(NL_BIT) || !defined(NL_INT64)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: include/linux/drbd_nl.h:15:
+NL_PACKET(primary, 1,
+       NL_BIT(		1,	T_MAY_IGNORE,	overwrite_peer)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: include/linux/drbd_nl.h:15:
+       NL_BIT(^I^I1,^IT_MAY_IGNORE,^Ioverwrite_peer)$

ERROR:SPACING: space prohibited after that open parenthesis '('
#606: FILE: include/linux/drbd_nl.h:15:
+       NL_BIT(		1,	T_MAY_IGNORE,	overwrite_peer)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#609: FILE: include/linux/drbd_nl.h:18:
+NL_PACKET(secondary, 2, )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: include/linux/drbd_nl.h:21:
+NL_PACKET(disk_conf, 3,
+	NL_INT64(	2,	T_MAY_IGNORE,	disk_size)

ERROR:SPACING: space prohibited after that open parenthesis '('
#612: FILE: include/linux/drbd_nl.h:21:
+	NL_INT64(	2,	T_MAY_IGNORE,	disk_size)

ERROR:SPACING: space prohibited after that open parenthesis '('
#613: FILE: include/linux/drbd_nl.h:22:
+	NL_STRING(	3,	T_MANDATORY,	backing_dev,	128)

ERROR:SPACING: space prohibited after that open parenthesis '('
#614: FILE: include/linux/drbd_nl.h:23:
+	NL_STRING(	4,	T_MANDATORY,	meta_dev,	128)

ERROR:SPACING: space prohibited after that open parenthesis '('
#615: FILE: include/linux/drbd_nl.h:24:
+	NL_INTEGER(	5,	T_MANDATORY,	meta_dev_idx)

ERROR:SPACING: space prohibited after that open parenthesis '('
#616: FILE: include/linux/drbd_nl.h:25:
+	NL_INTEGER(	6,	T_MAY_IGNORE,	on_io_error)

ERROR:SPACING: space prohibited after that open parenthesis '('
#617: FILE: include/linux/drbd_nl.h:26:
+	NL_INTEGER(	7,	T_MAY_IGNORE,	fencing)

ERROR:SPACING: space prohibited after that open parenthesis '('
#618: FILE: include/linux/drbd_nl.h:27:
+	NL_BIT(		37,	T_MAY_IGNORE,	use_bmbv)

ERROR:SPACING: space prohibited after that open parenthesis '('
#619: FILE: include/linux/drbd_nl.h:28:
+	NL_BIT(		53,	T_MAY_IGNORE,	no_disk_flush)

ERROR:SPACING: space prohibited after that open parenthesis '('
#620: FILE: include/linux/drbd_nl.h:29:
+	NL_BIT(		54,	T_MAY_IGNORE,	no_md_flush)

ERROR:SPACING: space prohibited after that open parenthesis '('
#622: FILE: include/linux/drbd_nl.h:31:
+	NL_INTEGER(	56,	T_MAY_IGNORE,	max_bio_bvecs)

ERROR:SPACING: space prohibited after that open parenthesis '('
#623: FILE: include/linux/drbd_nl.h:32:
+	NL_BIT(		57,	T_MAY_IGNORE,	no_disk_barrier)

ERROR:SPACING: space prohibited after that open parenthesis '('
#624: FILE: include/linux/drbd_nl.h:33:
+	NL_BIT(		58,	T_MAY_IGNORE,	no_disk_drain)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#627: FILE: include/linux/drbd_nl.h:36:
+NL_PACKET(detach, 4, )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: include/linux/drbd_nl.h:39:
+NL_PACKET(net_conf, 5,
+	NL_STRING(	8,	T_MANDATORY,	my_addr,	128)

ERROR:SPACING: space prohibited after that open parenthesis '('
#630: FILE: include/linux/drbd_nl.h:39:
+	NL_STRING(	8,	T_MANDATORY,	my_addr,	128)

ERROR:SPACING: space prohibited after that open parenthesis '('
#631: FILE: include/linux/drbd_nl.h:40:
+	NL_STRING(	9,	T_MANDATORY,	peer_addr,	128)

ERROR:SPACING: space prohibited after that open parenthesis '('
#632: FILE: include/linux/drbd_nl.h:41:
+	NL_STRING(	10,	T_MAY_IGNORE,	shared_secret,	SHARED_SECRET_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#633: FILE: include/linux/drbd_nl.h:42:
+	NL_STRING(	11,	T_MAY_IGNORE,	cram_hmac_alg,	SHARED_SECRET_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#634: FILE: include/linux/drbd_nl.h:43:
+	NL_STRING(	44,	T_MAY_IGNORE,	integrity_alg,	SHARED_SECRET_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#635: FILE: include/linux/drbd_nl.h:44:
+	NL_INTEGER(	14,	T_MAY_IGNORE,	timeout)

ERROR:SPACING: space prohibited after that open parenthesis '('
#636: FILE: include/linux/drbd_nl.h:45:
+	NL_INTEGER(	15,	T_MANDATORY,	wire_protocol)

ERROR:SPACING: space prohibited after that open parenthesis '('
#637: FILE: include/linux/drbd_nl.h:46:
+	NL_INTEGER(	16,	T_MAY_IGNORE,	try_connect_int)

ERROR:SPACING: space prohibited after that open parenthesis '('
#638: FILE: include/linux/drbd_nl.h:47:
+	NL_INTEGER(	17,	T_MAY_IGNORE,	ping_int)

ERROR:SPACING: space prohibited after that open parenthesis '('
#639: FILE: include/linux/drbd_nl.h:48:
+	NL_INTEGER(	18,	T_MAY_IGNORE,	max_epoch_size)

ERROR:SPACING: space prohibited after that open parenthesis '('
#640: FILE: include/linux/drbd_nl.h:49:
+	NL_INTEGER(	19,	T_MAY_IGNORE,	max_buffers)

ERROR:SPACING: space prohibited after that open parenthesis '('
#641: FILE: include/linux/drbd_nl.h:50:
+	NL_INTEGER(	20,	T_MAY_IGNORE,	unplug_watermark)

ERROR:SPACING: space prohibited after that open parenthesis '('
#642: FILE: include/linux/drbd_nl.h:51:
+	NL_INTEGER(	21,	T_MAY_IGNORE,	sndbuf_size)

ERROR:SPACING: space prohibited after that open parenthesis '('
#643: FILE: include/linux/drbd_nl.h:52:
+	NL_INTEGER(	22,	T_MAY_IGNORE,	ko_count)

ERROR:SPACING: space prohibited after that open parenthesis '('
#644: FILE: include/linux/drbd_nl.h:53:
+	NL_INTEGER(	24,	T_MAY_IGNORE,	after_sb_0p)

ERROR:SPACING: space prohibited after that open parenthesis '('
#645: FILE: include/linux/drbd_nl.h:54:
+	NL_INTEGER(	25,	T_MAY_IGNORE,	after_sb_1p)

ERROR:SPACING: space prohibited after that open parenthesis '('
#646: FILE: include/linux/drbd_nl.h:55:
+	NL_INTEGER(	26,	T_MAY_IGNORE,	after_sb_2p)

ERROR:SPACING: space prohibited after that open parenthesis '('
#647: FILE: include/linux/drbd_nl.h:56:
+	NL_INTEGER(	39,	T_MAY_IGNORE,	rr_conflict)

ERROR:SPACING: space prohibited after that open parenthesis '('
#648: FILE: include/linux/drbd_nl.h:57:
+	NL_INTEGER(	40,	T_MAY_IGNORE,	ping_timeo)

ERROR:SPACING: space prohibited after that open parenthesis '('
#650: FILE: include/linux/drbd_nl.h:59:
+	NL_BIT(		60,	T_MANDATORY,	mind_af)

ERROR:SPACING: space prohibited after that open parenthesis '('
#651: FILE: include/linux/drbd_nl.h:60:
+	NL_BIT(		27,	T_MAY_IGNORE,	want_lose)

ERROR:SPACING: space prohibited after that open parenthesis '('
#652: FILE: include/linux/drbd_nl.h:61:
+	NL_BIT(		28,	T_MAY_IGNORE,	two_primaries)

ERROR:SPACING: space prohibited after that open parenthesis '('
#653: FILE: include/linux/drbd_nl.h:62:
+	NL_BIT(		41,	T_MAY_IGNORE,	always_asbp)

ERROR:SPACING: space prohibited after that open parenthesis '('
#654: FILE: include/linux/drbd_nl.h:63:
+	NL_BIT(		61,	T_MAY_IGNORE,	no_cork)

ERROR:SPACING: space prohibited after that open parenthesis '('
#655: FILE: include/linux/drbd_nl.h:64:
+	NL_BIT(		62,	T_MANDATORY,	auto_sndbuf_size)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#658: FILE: include/linux/drbd_nl.h:67:
+NL_PACKET(disconnect, 6, )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: include/linux/drbd_nl.h:70:
+NL_PACKET(resize, 7,
+	NL_INT64(		29,	T_MAY_IGNORE,	resize_size)

ERROR:SPACING: space prohibited after that open parenthesis '('
#661: FILE: include/linux/drbd_nl.h:70:
+	NL_INT64(		29,	T_MAY_IGNORE,	resize_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: include/linux/drbd_nl.h:74:
+NL_PACKET(syncer_conf, 8,
+	NL_INTEGER(	30,	T_MAY_IGNORE,	rate)

ERROR:SPACING: space prohibited after that open parenthesis '('
#665: FILE: include/linux/drbd_nl.h:74:
+	NL_INTEGER(	30,	T_MAY_IGNORE,	rate)

ERROR:SPACING: space prohibited after that open parenthesis '('
#666: FILE: include/linux/drbd_nl.h:75:
+	NL_INTEGER(	31,	T_MAY_IGNORE,	after)

ERROR:SPACING: space prohibited after that open parenthesis '('
#667: FILE: include/linux/drbd_nl.h:76:
+	NL_INTEGER(	32,	T_MAY_IGNORE,	al_extents)

ERROR:SPACING: space prohibited after that open parenthesis '('
#668: FILE: include/linux/drbd_nl.h:77:
+	NL_STRING(      52,     T_MAY_IGNORE,   verify_alg,     SHARED_SECRET_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#669: FILE: include/linux/drbd_nl.h:78:
+	NL_STRING(      51,     T_MAY_IGNORE,   cpu_mask,       32)

ERROR:SPACING: space prohibited after that open parenthesis '('
#670: FILE: include/linux/drbd_nl.h:79:
+	NL_STRING(	64,	T_MAY_IGNORE,	csums_alg,	SHARED_SECRET_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#671: FILE: include/linux/drbd_nl.h:80:
+	NL_BIT(         65,     T_MAY_IGNORE,   use_rle_encoding)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#674: FILE: include/linux/drbd_nl.h:83:
+NL_PACKET(invalidate, 9, )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#675: FILE: include/linux/drbd_nl.h:84:
+NL_PACKET(invalidate_peer, 10, )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#676: FILE: include/linux/drbd_nl.h:85:
+NL_PACKET(pause_sync, 11, )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#677: FILE: include/linux/drbd_nl.h:86:
+NL_PACKET(resume_sync, 12, )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#678: FILE: include/linux/drbd_nl.h:87:
+NL_PACKET(suspend_io, 13, )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#679: FILE: include/linux/drbd_nl.h:88:
+NL_PACKET(resume_io, 14, )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#680: FILE: include/linux/drbd_nl.h:89:
+NL_PACKET(outdate, 15, )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#681: FILE: include/linux/drbd_nl.h:90:
+NL_PACKET(get_config, 16, )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: include/linux/drbd_nl.h:92:
+NL_PACKET(get_state, 17,
+	NL_INTEGER(	33,	T_MAY_IGNORE,	state_i)

ERROR:SPACING: space prohibited after that open parenthesis '('
#683: FILE: include/linux/drbd_nl.h:92:
+	NL_INTEGER(	33,	T_MAY_IGNORE,	state_i)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: include/linux/drbd_nl.h:96:
+NL_PACKET(get_uuids, 18,
+	NL_STRING(	34,	T_MAY_IGNORE,	uuids,	(UI_SIZE*sizeof(__u64)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#687: FILE: include/linux/drbd_nl.h:96:
+	NL_STRING(	34,	T_MAY_IGNORE,	uuids,	(UI_SIZE*sizeof(__u64)))
 	          	   	             	      	        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#687: FILE: include/linux/drbd_nl.h:96:
+	NL_STRING(	34,	T_MAY_IGNORE,	uuids,	(UI_SIZE*sizeof(__u64)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#688: FILE: include/linux/drbd_nl.h:97:
+	NL_INTEGER(	35,	T_MAY_IGNORE,	uuids_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: include/linux/drbd_nl.h:101:
+NL_PACKET(get_timeout_flag, 19,
+	NL_BIT(		36,	T_MAY_IGNORE,	use_degraded)

ERROR:SPACING: space prohibited after that open parenthesis '('
#692: FILE: include/linux/drbd_nl.h:101:
+	NL_BIT(		36,	T_MAY_IGNORE,	use_degraded)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: include/linux/drbd_nl.h:105:
+NL_PACKET(call_helper, 20,
+	NL_STRING(	38,	T_MAY_IGNORE,	helper,		32)

ERROR:SPACING: space prohibited after that open parenthesis '('
#696: FILE: include/linux/drbd_nl.h:105:
+	NL_STRING(	38,	T_MAY_IGNORE,	helper,		32)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: include/linux/drbd_nl.h:111:
+NL_PACKET(sync_progress, 23,
+	NL_INTEGER(	43,	T_MAY_IGNORE,	sync_progress)

ERROR:SPACING: space prohibited after that open parenthesis '('
#702: FILE: include/linux/drbd_nl.h:111:
+	NL_INTEGER(	43,	T_MAY_IGNORE,	sync_progress)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: include/linux/drbd_nl.h:115:
+NL_PACKET(dump_ee, 24,
+	NL_STRING(	45,	T_MAY_IGNORE,	dump_ee_reason, 32)

ERROR:SPACING: space prohibited after that open parenthesis '('
#706: FILE: include/linux/drbd_nl.h:115:
+	NL_STRING(	45,	T_MAY_IGNORE,	dump_ee_reason, 32)

ERROR:SPACING: space prohibited after that open parenthesis '('
#707: FILE: include/linux/drbd_nl.h:116:
+	NL_STRING(	46,	T_MAY_IGNORE,	seen_digest, SHARED_SECRET_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#708: FILE: include/linux/drbd_nl.h:117:
+	NL_STRING(	47,	T_MAY_IGNORE,	calc_digest, SHARED_SECRET_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#709: FILE: include/linux/drbd_nl.h:118:
+	NL_INT64(	48,	T_MAY_IGNORE,	ee_sector)

ERROR:SPACING: space prohibited after that open parenthesis '('
#710: FILE: include/linux/drbd_nl.h:119:
+	NL_INT64(	49,	T_MAY_IGNORE,	ee_block_id)

ERROR:SPACING: space prohibited after that open parenthesis '('
#711: FILE: include/linux/drbd_nl.h:120:
+	NL_STRING(	50,	T_MAY_IGNORE,	ee_data,	32 << 10)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: include/linux/drbd_nl.h:124:
+NL_PACKET(start_ov, 25,
+)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: include/linux/drbd_nl.h:127:
+NL_PACKET(new_c_uuid, 26,
+       NL_BIT(		63,	T_MANDATORY,	clear_bm)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: include/linux/drbd_nl.h:127:
+       NL_BIT(^I^I63,^IT_MANDATORY,^Iclear_bm)$

ERROR:SPACING: space prohibited after that open parenthesis '('
#718: FILE: include/linux/drbd_nl.h:127:
+       NL_BIT(		63,	T_MANDATORY,	clear_bm)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#733: FILE: include/linux/drbd_tag_magic.h:1:
+#ifndef DRBD_TAG_MAGIC_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#741: FILE: include/linux/drbd_tag_magic.h:9:
+#define NL_PACKET(name, number, fields) P_ ## name = number,

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#751: FILE: include/linux/drbd_tag_magic.h:19:
+#define NL_PACKET(name, number, fields)	\
+	struct name ## _tag_len_struct { fields };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#753: FILE: include/linux/drbd_tag_magic.h:21:
+#define NL_INTEGER(pn, pr, member)		\
+	int member; int tag_and_len ## member;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#755: FILE: include/linux/drbd_tag_magic.h:23:
+#define NL_INT64(pn, pr, member)		\
+	__u64 member; int tag_and_len ## member;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#757: FILE: include/linux/drbd_tag_magic.h:25:
+#define NL_BIT(pn, pr, member)		\
+	unsigned char member:1; int tag_and_len ## member;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#759: FILE: include/linux/drbd_tag_magic.h:27:
+#define NL_STRING(pn, pr, member, len)	\
+	unsigned char member[len]; int member ## _len; \
+	int tag_and_len ## member;

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#766: FILE: include/linux/drbd_tag_magic.h:34:
+#define NL_PACKET(name, number, fields) 2 fields ,
                                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#766: FILE: include/linux/drbd_tag_magic.h:34:
+#define NL_PACKET(name, number, fields) 2 fields ,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#767: FILE: include/linux/drbd_tag_magic.h:35:
+#define NL_INTEGER(pn, pr, member)      + 4 + 4

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#768: FILE: include/linux/drbd_tag_magic.h:36:
+#define NL_INT64(pn, pr, member)        + 4 + 8

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#769: FILE: include/linux/drbd_tag_magic.h:37:
+#define NL_BIT(pn, pr, member)          + 4 + 1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#770: FILE: include/linux/drbd_tag_magic.h:38:
+#define NL_STRING(pn, pr, member, len)  + 4 + (len)

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#792: FILE: include/linux/drbd_tag_magic.h:60:
+#define NL_INTEGER(pn, pr, member)     T_ ## member = pn | TT_INTEGER | pr ,
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#792: FILE: include/linux/drbd_tag_magic.h:60:
+#define NL_INTEGER(pn, pr, member)     T_ ## member = pn | TT_INTEGER | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#792: FILE: include/linux/drbd_tag_magic.h:60:
+#define NL_INTEGER(pn, pr, member)     T_ ## member = pn | TT_INTEGER | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#792: FILE: include/linux/drbd_tag_magic.h:60:
+#define NL_INTEGER(pn, pr, member)     T_ ## member = pn | TT_INTEGER | pr ,

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#793: FILE: include/linux/drbd_tag_magic.h:61:
+#define NL_INT64(pn, pr, member)       T_ ## member = pn | TT_INT64   | pr ,
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#793: FILE: include/linux/drbd_tag_magic.h:61:
+#define NL_INT64(pn, pr, member)       T_ ## member = pn | TT_INT64   | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#793: FILE: include/linux/drbd_tag_magic.h:61:
+#define NL_INT64(pn, pr, member)       T_ ## member = pn | TT_INT64   | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#793: FILE: include/linux/drbd_tag_magic.h:61:
+#define NL_INT64(pn, pr, member)       T_ ## member = pn | TT_INT64   | pr ,

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#794: FILE: include/linux/drbd_tag_magic.h:62:
+#define NL_BIT(pn, pr, member)         T_ ## member = pn | TT_BIT     | pr ,
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#794: FILE: include/linux/drbd_tag_magic.h:62:
+#define NL_BIT(pn, pr, member)         T_ ## member = pn | TT_BIT     | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#794: FILE: include/linux/drbd_tag_magic.h:62:
+#define NL_BIT(pn, pr, member)         T_ ## member = pn | TT_BIT     | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#794: FILE: include/linux/drbd_tag_magic.h:62:
+#define NL_BIT(pn, pr, member)         T_ ## member = pn | TT_BIT     | pr ,

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#795: FILE: include/linux/drbd_tag_magic.h:63:
+#define NL_STRING(pn, pr, member, len) T_ ## member = pn | TT_STRING  | pr ,
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#795: FILE: include/linux/drbd_tag_magic.h:63:
+#define NL_STRING(pn, pr, member, len) T_ ## member = pn | TT_STRING  | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#795: FILE: include/linux/drbd_tag_magic.h:63:
+#define NL_STRING(pn, pr, member, len) T_ ## member = pn | TT_STRING  | pr ,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#795: FILE: include/linux/drbd_tag_magic.h:63:
+#define NL_STRING(pn, pr, member, len) T_ ## member = pn | TT_STRING  | pr ,

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#808: FILE: include/linux/drbd_tag_magic.h:76:
+#define NL_INTEGER(pn, pr, member)     [ pn ] = { #member, TT_INTEGER | pr, sizeof(int)   },

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space prohibited after that open square bracket '['
#808: FILE: include/linux/drbd_tag_magic.h:76:
+#define NL_INTEGER(pn, pr, member)     [ pn ] = { #member, TT_INTEGER | pr, sizeof(int)   },

ERROR:SPACING: space prohibited before that close square bracket ']'
#808: FILE: include/linux/drbd_tag_magic.h:76:
+#define NL_INTEGER(pn, pr, member)     [ pn ] = { #member, TT_INTEGER | pr, sizeof(int)   },

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#808: FILE: include/linux/drbd_tag_magic.h:76:
+#define NL_INTEGER(pn, pr, member)     [ pn ] = { #member, TT_INTEGER | pr, sizeof(int)   },

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#809: FILE: include/linux/drbd_tag_magic.h:77:
+#define NL_INT64(pn, pr, member)       [ pn ] = { #member, TT_INT64   | pr, sizeof(__u64) },

ERROR:SPACING: space prohibited after that open square bracket '['
#809: FILE: include/linux/drbd_tag_magic.h:77:
+#define NL_INT64(pn, pr, member)       [ pn ] = { #member, TT_INT64   | pr, sizeof(__u64) },

ERROR:SPACING: space prohibited before that close square bracket ']'
#809: FILE: include/linux/drbd_tag_magic.h:77:
+#define NL_INT64(pn, pr, member)       [ pn ] = { #member, TT_INT64   | pr, sizeof(__u64) },

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#809: FILE: include/linux/drbd_tag_magic.h:77:
+#define NL_INT64(pn, pr, member)       [ pn ] = { #member, TT_INT64   | pr, sizeof(__u64) },

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#810: FILE: include/linux/drbd_tag_magic.h:78:
+#define NL_BIT(pn, pr, member)         [ pn ] = { #member, TT_BIT     | pr, sizeof(int)   },

ERROR:SPACING: space prohibited after that open square bracket '['
#810: FILE: include/linux/drbd_tag_magic.h:78:
+#define NL_BIT(pn, pr, member)         [ pn ] = { #member, TT_BIT     | pr, sizeof(int)   },

ERROR:SPACING: space prohibited before that close square bracket ']'
#810: FILE: include/linux/drbd_tag_magic.h:78:
+#define NL_BIT(pn, pr, member)         [ pn ] = { #member, TT_BIT     | pr, sizeof(int)   },

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#810: FILE: include/linux/drbd_tag_magic.h:78:
+#define NL_BIT(pn, pr, member)         [ pn ] = { #member, TT_BIT     | pr, sizeof(int)   },

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#811: FILE: include/linux/drbd_tag_magic.h:79:
+#define NL_STRING(pn, pr, member, len) [ pn ] = { #member, TT_STRING  | pr, (len)         },

ERROR:SPACING: space prohibited after that open square bracket '['
#811: FILE: include/linux/drbd_tag_magic.h:79:
+#define NL_STRING(pn, pr, member, len) [ pn ] = { #member, TT_STRING  | pr, (len)         },

ERROR:SPACING: space prohibited before that close square bracket ']'
#811: FILE: include/linux/drbd_tag_magic.h:79:
+#define NL_STRING(pn, pr, member, len) [ pn ] = { #member, TT_STRING  | pr, (len)         },

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#811: FILE: include/linux/drbd_tag_magic.h:79:
+#define NL_STRING(pn, pr, member, len) [ pn ] = { #member, TT_STRING  | pr, (len)         },

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#822: FILE: drivers/block/drbd/drbd_nl.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#823: FILE: drivers/block/drbd/drbd_nl.c:2:
+/*
+   drbd_nl.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#843: FILE: drivers/block/drbd/drbd_nl.c:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#868: FILE: drivers/block/drbd/drbd_nl.c:47:
+#define NL_PACKET(name, number, fields) \
+STATIC int name ## _from_tags(struct drbd_conf *mdev, \
+	unsigned short *tags, struct name *arg) \
+{ \
+	int tag; \
+	int dlen; \
+	\
+	while ((tag = *tags++) != TT_END) { \
+		dlen = *tags++; \
+		switch (tag_number(tag)) { \
+		fields \
+		default: \
+			if (tag & T_MANDATORY) { \
+				dev_err(DEV, "Unknown tag: %d\n", tag_number(tag)); \
+				return 0; \
+			} \
+		} \
+		tags = (unsigned short *)((char *)tags + dlen); \
+	} \
+	return 1; \
+}

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#879: FILE: drivers/block/drbd/drbd_nl.c:58:
+		default: \
 		       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#889: FILE: drivers/block/drbd/drbd_nl.c:68:
+}
+#define NL_INTEGER(pn, pr, member) \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#889: FILE: drivers/block/drbd/drbd_nl.c:68:
+#define NL_INTEGER(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_INTEGER ); */ \
+		 arg->member = *(int *)(tags); \
+		 break;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#889: FILE: drivers/block/drbd/drbd_nl.c:68:
+#define NL_INTEGER(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_INTEGER ); */ \
+		 arg->member = *(int *)(tags); \
+		 break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#889: FILE: drivers/block/drbd/drbd_nl.c:68:
+#define NL_INTEGER(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_INTEGER ); */ \
+		 arg->member = *(int *)(tags); \
+		 break;

WARNING:TABSTOP: Statements should start on a tabstop
#892: FILE: drivers/block/drbd/drbd_nl.c:71:
+		 break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#893: FILE: drivers/block/drbd/drbd_nl.c:72:
+#define NL_INT64(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_INT64 ); */ \
+		 arg->member = *(u64 *)(tags); \
+		 break;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#893: FILE: drivers/block/drbd/drbd_nl.c:72:
+#define NL_INT64(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_INT64 ); */ \
+		 arg->member = *(u64 *)(tags); \
+		 break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#893: FILE: drivers/block/drbd/drbd_nl.c:72:
+#define NL_INT64(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_INT64 ); */ \
+		 arg->member = *(u64 *)(tags); \
+		 break;

WARNING:TABSTOP: Statements should start on a tabstop
#896: FILE: drivers/block/drbd/drbd_nl.c:75:
+		 break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#897: FILE: drivers/block/drbd/drbd_nl.c:76:
+#define NL_BIT(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_BIT ); */ \
+		 arg->member = *(char *)(tags) ? 1 : 0; \
+		 break;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#897: FILE: drivers/block/drbd/drbd_nl.c:76:
+#define NL_BIT(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_BIT ); */ \
+		 arg->member = *(char *)(tags) ? 1 : 0; \
+		 break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#897: FILE: drivers/block/drbd/drbd_nl.c:76:
+#define NL_BIT(pn, pr, member) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_BIT ); */ \
+		 arg->member = *(char *)(tags) ? 1 : 0; \
+		 break;

WARNING:TABSTOP: Statements should start on a tabstop
#900: FILE: drivers/block/drbd/drbd_nl.c:79:
+		 break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#901: FILE: drivers/block/drbd/drbd_nl.c:80:
+#define NL_STRING(pn, pr, member, len) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_STRING ); */ \
+		if (dlen > len) { \
+			dev_err(DEV, "arg too long: %s (%u wanted, max len: %u bytes)\n", \
+				#member, dlen, (unsigned int)len); \
+			return 0; \
+		} \
+		 arg->member ## _len = dlen; \
+		 memcpy(arg->member, tags, min_t(size_t, dlen, len)); \
+		 break;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#901: FILE: drivers/block/drbd/drbd_nl.c:80:
+#define NL_STRING(pn, pr, member, len) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_STRING ); */ \
+		if (dlen > len) { \
+			dev_err(DEV, "arg too long: %s (%u wanted, max len: %u bytes)\n", \
+				#member, dlen, (unsigned int)len); \
+			return 0; \
+		} \
+		 arg->member ## _len = dlen; \
+		 memcpy(arg->member, tags, min_t(size_t, dlen, len)); \
+		 break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#901: FILE: drivers/block/drbd/drbd_nl.c:80:
+#define NL_STRING(pn, pr, member, len) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_STRING ); */ \
+		if (dlen > len) { \
+			dev_err(DEV, "arg too long: %s (%u wanted, max len: %u bytes)\n", \
+				#member, dlen, (unsigned int)len); \
+			return 0; \
+		} \
+		 arg->member ## _len = dlen; \
+		 memcpy(arg->member, tags, min_t(size_t, dlen, len)); \
+		 break;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#901: FILE: drivers/block/drbd/drbd_nl.c:80:
+#define NL_STRING(pn, pr, member, len) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_STRING ); */ \
+		if (dlen > len) { \
+			dev_err(DEV, "arg too long: %s (%u wanted, max len: %u bytes)\n", \
+				#member, dlen, (unsigned int)len); \
+			return 0; \
+		} \
+		 arg->member ## _len = dlen; \
+		 memcpy(arg->member, tags, min_t(size_t, dlen, len)); \
+		 break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#901: FILE: drivers/block/drbd/drbd_nl.c:80:
+#define NL_STRING(pn, pr, member, len) \
+	case pn: /* D_ASSERT( tag_type(tag) == TT_STRING ); */ \
+		if (dlen > len) { \
+			dev_err(DEV, "arg too long: %s (%u wanted, max len: %u bytes)\n", \
+				#member, dlen, (unsigned int)len); \
+			return 0; \
+		} \
+		 arg->member ## _len = dlen; \
+		 memcpy(arg->member, tags, min_t(size_t, dlen, len)); \
+		 break;

WARNING:TABSTOP: Statements should start on a tabstop
#910: FILE: drivers/block/drbd/drbd_nl.c:89:
+		 break;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#914: FILE: drivers/block/drbd/drbd_nl.c:93:
+#define NL_PACKET(name, number, fields) \
+STATIC unsigned short* \
+name ## _to_tags(struct drbd_conf *mdev, \
+	struct name *arg, unsigned short *tags) \
+{ \
+	fields \
+	return tags; \
+}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxE)
#915: FILE: drivers/block/drbd/drbd_nl.c:94:
+STATIC unsigned short* \
                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#923: FILE: drivers/block/drbd/drbd_nl.c:102:
+#define NL_INTEGER(pn, pr, member) \
+	*tags++ = pn | pr | TT_INTEGER; \
+	*tags++ = sizeof(int); \
+	*(int *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(int));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#923: FILE: drivers/block/drbd/drbd_nl.c:102:
+#define NL_INTEGER(pn, pr, member) \
+	*tags++ = pn | pr | TT_INTEGER; \
+	*tags++ = sizeof(int); \
+	*(int *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(int));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#923: FILE: drivers/block/drbd/drbd_nl.c:102:
+#define NL_INTEGER(pn, pr, member) \
+	*tags++ = pn | pr | TT_INTEGER; \
+	*tags++ = sizeof(int); \
+	*(int *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(int));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#923: FILE: drivers/block/drbd/drbd_nl.c:102:
+#define NL_INTEGER(pn, pr, member) \
+	*tags++ = pn | pr | TT_INTEGER; \
+	*tags++ = sizeof(int); \
+	*(int *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(int));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#923: FILE: drivers/block/drbd/drbd_nl.c:102:
+#define NL_INTEGER(pn, pr, member) \
+	*tags++ = pn | pr | TT_INTEGER; \
+	*tags++ = sizeof(int); \
+	*(int *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(int));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#927: FILE: drivers/block/drbd/drbd_nl.c:106:
+	tags = (unsigned short *)((char *)tags+sizeof(int));
 	                                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#928: FILE: drivers/block/drbd/drbd_nl.c:107:
+#define NL_INT64(pn, pr, member) \
+	*tags++ = pn | pr | TT_INT64; \
+	*tags++ = sizeof(u64); \
+	*(u64 *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(u64));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#928: FILE: drivers/block/drbd/drbd_nl.c:107:
+#define NL_INT64(pn, pr, member) \
+	*tags++ = pn | pr | TT_INT64; \
+	*tags++ = sizeof(u64); \
+	*(u64 *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(u64));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#928: FILE: drivers/block/drbd/drbd_nl.c:107:
+#define NL_INT64(pn, pr, member) \
+	*tags++ = pn | pr | TT_INT64; \
+	*tags++ = sizeof(u64); \
+	*(u64 *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(u64));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#928: FILE: drivers/block/drbd/drbd_nl.c:107:
+#define NL_INT64(pn, pr, member) \
+	*tags++ = pn | pr | TT_INT64; \
+	*tags++ = sizeof(u64); \
+	*(u64 *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(u64));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#928: FILE: drivers/block/drbd/drbd_nl.c:107:
+#define NL_INT64(pn, pr, member) \
+	*tags++ = pn | pr | TT_INT64; \
+	*tags++ = sizeof(u64); \
+	*(u64 *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(u64));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#932: FILE: drivers/block/drbd/drbd_nl.c:111:
+	tags = (unsigned short *)((char *)tags+sizeof(u64));
 	                                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#933: FILE: drivers/block/drbd/drbd_nl.c:112:
+#define NL_BIT(pn, pr, member) \
+	*tags++ = pn | pr | TT_BIT; \
+	*tags++ = sizeof(char); \
+	*(char *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(char));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#933: FILE: drivers/block/drbd/drbd_nl.c:112:
+#define NL_BIT(pn, pr, member) \
+	*tags++ = pn | pr | TT_BIT; \
+	*tags++ = sizeof(char); \
+	*(char *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(char));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#933: FILE: drivers/block/drbd/drbd_nl.c:112:
+#define NL_BIT(pn, pr, member) \
+	*tags++ = pn | pr | TT_BIT; \
+	*tags++ = sizeof(char); \
+	*(char *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(char));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#933: FILE: drivers/block/drbd/drbd_nl.c:112:
+#define NL_BIT(pn, pr, member) \
+	*tags++ = pn | pr | TT_BIT; \
+	*tags++ = sizeof(char); \
+	*(char *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(char));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#933: FILE: drivers/block/drbd/drbd_nl.c:112:
+#define NL_BIT(pn, pr, member) \
+	*tags++ = pn | pr | TT_BIT; \
+	*tags++ = sizeof(char); \
+	*(char *)tags = arg->member; \
+	tags = (unsigned short *)((char *)tags+sizeof(char));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#937: FILE: drivers/block/drbd/drbd_nl.c:116:
+	tags = (unsigned short *)((char *)tags+sizeof(char));
 	                                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#938: FILE: drivers/block/drbd/drbd_nl.c:117:
+#define NL_STRING(pn, pr, member, len) \
+	*tags++ = pn | pr | TT_STRING; \
+	*tags++ = arg->member ## _len; \
+	memcpy(tags, arg->member, arg->member ## _len); \
+	tags = (unsigned short *)((char *)tags + arg->member ## _len);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#938: FILE: drivers/block/drbd/drbd_nl.c:117:
+#define NL_STRING(pn, pr, member, len) \
+	*tags++ = pn | pr | TT_STRING; \
+	*tags++ = arg->member ## _len; \
+	memcpy(tags, arg->member, arg->member ## _len); \
+	tags = (unsigned short *)((char *)tags + arg->member ## _len);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr' may be better as '(pr)' to avoid precedence issues
#938: FILE: drivers/block/drbd/drbd_nl.c:117:
+#define NL_STRING(pn, pr, member, len) \
+	*tags++ = pn | pr | TT_STRING; \
+	*tags++ = arg->member ## _len; \
+	memcpy(tags, arg->member, arg->member ## _len); \
+	tags = (unsigned short *)((char *)tags + arg->member ## _len);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#938: FILE: drivers/block/drbd/drbd_nl.c:117:
+#define NL_STRING(pn, pr, member, len) \
+	*tags++ = pn | pr | TT_STRING; \
+	*tags++ = arg->member ## _len; \
+	memcpy(tags, arg->member, arg->member ## _len); \
+	tags = (unsigned short *)((char *)tags + arg->member ## _len);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#938: FILE: drivers/block/drbd/drbd_nl.c:117:
+#define NL_STRING(pn, pr, member, len) \
+	*tags++ = pn | pr | TT_STRING; \
+	*tags++ = arg->member ## _len; \
+	memcpy(tags, arg->member, arg->member ## _len); \
+	tags = (unsigned short *)((char *)tags + arg->member ## _len);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#946: FILE: drivers/block/drbd/drbd_nl.c:125:
+void drbd_nl_send_reply(struct cn_msg *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cn_msg *' should also have an identifier name
#946: FILE: drivers/block/drbd/drbd_nl.c:125:
+void drbd_nl_send_reply(struct cn_msg *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#946: FILE: drivers/block/drbd/drbd_nl.c:125:
+void drbd_nl_send_reply(struct cn_msg *, int);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#951: FILE: drivers/block/drbd/drbd_nl.c:130:
+	char *argv[] = {usermode_helper, cmd, mb, NULL };

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#953: FILE: drivers/block/drbd/drbd_nl.c:132:
+	static char *envp[] = { "HOME=/",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: drivers/block/drbd/drbd_nl.c:145:
+		dev_warn(DEV, "helper command: %s %s %s exit code %u (0x%x)\n",
+				usermode_helper, cmd, mb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/block/drbd/drbd_nl.c:149:
+		dev_info(DEV, "helper command: %s %s %s exit code %u (0x%x)\n",
+				usermode_helper, cmd, mb,

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1001: FILE: drivers/block/drbd/drbd_nl.c:180:
+	switch ((r>>8) & 0xff) {
 	          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1017: FILE: drivers/block/drbd/drbd_nl.c:196:
+		 * become R_PRIMARY, but findes the other peer being active. */

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1032: FILE: drivers/block/drbd/drbd_nl.c:211:
+		dev_err(DEV, "fence-peer helper broken, returned %d\n", (r>>8)&0xff);
 		                                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1032: FILE: drivers/block/drbd/drbd_nl.c:211:
+		dev_err(DEV, "fence-peer helper broken, returned %d\n", (r>>8)&0xff);
 		                                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1037: FILE: drivers/block/drbd/drbd_nl.c:216:
+	dev_info(DEV, "fence-peer helper returned %d (%s)\n",
+			(r>>8) & 0xff, ex_to_string);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1037: FILE: drivers/block/drbd/drbd_nl.c:216:
+			(r>>8) & 0xff, ex_to_string);
 			  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1041: FILE: drivers/block/drbd/drbd_nl.c:220:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1063: FILE: drivers/block/drbd/drbd_nl.c:242:
+		 * but now suddenly could establish a connection */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1112: FILE: drivers/block/drbd/drbd_nl.c:291:
+			/* Maybe the peer is detected as dead very soon...
+			   retry at most once more in this case. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1112: FILE: drivers/block/drbd/drbd_nl.c:291:
+			   retry at most once more in this case. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1114: FILE: drivers/block/drbd/drbd_nl.c:293:
+			schedule_timeout((mdev->net_conf->ping_timeo+1)*HZ/10);
 			                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1114: FILE: drivers/block/drbd/drbd_nl.c:293:
+			schedule_timeout((mdev->net_conf->ping_timeo+1)*HZ/10);
 			                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1114: FILE: drivers/block/drbd/drbd_nl.c:293:
+			schedule_timeout((mdev->net_conf->ping_timeo+1)*HZ/10);
 			                                                  ^

WARNING:TYPO_SPELLING: 'UpToDate' may be misspelled - perhaps 'Up-to-date'?
#1129: FILE: drivers/block/drbd/drbd_nl.c:308:
+		dev_warn(DEV, "Forced to consider local data as UpToDate!\n");
 		                                                ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: drivers/block/drbd/drbd_nl.c:327:
+			if (((mdev->state.conn < C_CONNECTED ||
+			       mdev->state.pdsk <= D_FAILED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1149: FILE: drivers/block/drbd/drbd_nl.c:328:
+			       mdev->state.pdsk <= D_FAILED)
+			      && mdev->bc->md.uuid[UI_BITMAP] == 0) || forced)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_role == R_SECONDARY'
#1157: FILE: drivers/block/drbd/drbd_nl.c:336:
+	if ((new_role == R_SECONDARY) && inc_local(mdev)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1177: FILE: drivers/block/drbd/drbd_nl.c:356:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1204: FILE: drivers/block/drbd/drbd_nl.c:383:
+ * the on disk meta data */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1209: FILE: drivers/block/drbd/drbd_nl.c:388:
+	sector_t md_size_sect = 0;
+	switch (bdev->dc.meta_dev_idx) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1236: FILE: drivers/block/drbd/drbd_nl.c:415:
+		 * and the activity log; */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1251: FILE: drivers/block/drbd/drbd_nl.c:430:
+	int base = 0;
+	while (size >= 10000) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1253: FILE: drivers/block/drbd/drbd_nl.c:432:
+		size = (size >> 10) + !!(size & (1<<9));
 		                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1329: FILE: drivers/block/drbd/drbd_nl.c:508:
+		int err;
+		err = drbd_bm_resize(mdev, size);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1332: FILE: drivers/block/drbd/drbd_nl.c:511:
+			size = drbd_bm_capacity(mdev)>>1;
 			                             ^

WARNING:SPLIT_STRING: quoted string split across lines
#1335: FILE: drivers/block/drbd/drbd_nl.c:514:
+				dev_err(DEV, "OUT OF MEMORY! "
+				    "Could not allocate bitmap!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1338: FILE: drivers/block/drbd/drbd_nl.c:517:
+				dev_err(DEV, "BM resizing failed. "
+				    "Leaving size unchanged at size = %lu KB\n",

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1346: FILE: drivers/block/drbd/drbd_nl.c:525:
+		dev_info(DEV, "size = %s (%llu KB)\n", ppsize(ppb, size>>1),
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: drivers/block/drbd/drbd_nl.c:526:
+		dev_info(DEV, "size = %s (%llu KB)\n", ppsize(ppb, size>>1),
+		     (unsigned long long)size>>1);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1347: FILE: drivers/block/drbd/drbd_nl.c:526:
+		     (unsigned long long)size>>1);
 		                             ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1355: FILE: drivers/block/drbd/drbd_nl.c:534:
+	md_moved = prev_first_sect != drbd_md_first_sector(mdev->bc)
+		|| prev_size	   != mdev->bc->md.md_size_sect;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1415: FILE: drivers/block/drbd/drbd_nl.c:594:
+			dev_err(DEV, "Requested disk size is too big (%lu > %lu)\n",
+			    (unsigned long)u_size>>1, (unsigned long)size>>1);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1415: FILE: drivers/block/drbd/drbd_nl.c:594:
+			    (unsigned long)u_size>>1, (unsigned long)size>>1);
 			                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1415: FILE: drivers/block/drbd/drbd_nl.c:594:
+			    (unsigned long)u_size>>1, (unsigned long)size>>1);
 			                                                 ^

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1425: FILE: drivers/block/drbd/drbd_nl.c:604:
+ * checks that the al lru is of requested size, and if neccessary tries to
                                                        ^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!n"
#1449: FILE: drivers/block/drbd/drbd_nl.c:628:
+	if (n == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1459: FILE: drivers/block/drbd/drbd_nl.c:638:
+				dev_err(DEV, "refcnt(%d)==%d\n",
+				    e->lc_number, e->refcnt);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1470: FILE: drivers/block/drbd/drbd_nl.c:649:
+		return -EBUSY;
+	} else {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1500: FILE: drivers/block/drbd/drbd_nl.c:679:
+	q->seg_boundary_mask = PAGE_SIZE-1;
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: drivers/block/drbd/drbd_nl.c:684:
+		dev_warn(DEV, "Backing device's merge_bvec_fn() = %p\n",
+		     b->merge_bvec_fn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1510: FILE: drivers/block/drbd/drbd_nl.c:689:
+		dev_info(DEV, "Adjusting my ra_pages to backing device's (%lu -> %lu)\n",
+		     q->backing_dev_info.ra_pages,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1531: FILE: drivers/block/drbd/drbd_nl.c:710:
+ * wakes potential waiters */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1535: FILE: drivers/block/drbd/drbd_nl.c:714:
+	if (mdev->state.disk == D_DISKLESS &&
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1540: FILE: drivers/block/drbd/drbd_nl.c:719:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1547: FILE: drivers/block/drbd/drbd_nl.c:726:
+ * interesting return code is in reply->ret_code */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*nbc)...) over kmalloc(sizeof(struct drbd_backing_dev)...)
#1571: FILE: drivers/block/drbd/drbd_nl.c:750:
+	nbc = kmalloc(sizeof(struct drbd_backing_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1600: FILE: drivers/block/drbd/drbd_nl.c:779:
+		dev_err(DEV, "open(\"%s\") failed with %ld\n", nbc->dc.backing_dev,
+		    PTR_ERR(nbc->lo_file));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1616: FILE: drivers/block/drbd/drbd_nl.c:795:
+		dev_err(DEV, "open(\"%s\") failed with %ld\n", nbc->dc.meta_dev,
+		    PTR_ERR(nbc->md_file));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1631: FILE: drivers/block/drbd/drbd_nl.c:810:
+		printk(KERN_ERR "drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n",

CHECK:SPACING: No space is necessary after a cast
#1650: FILE: drivers/block/drbd/drbd_nl.c:829:
+		     (void *)mdev : (void *) drbd_m_holder)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nbc->backing_bdev == nbc->md_bdev'
#1655: FILE: drivers/block/drbd/drbd_nl.c:834:
+	if ((nbc->backing_bdev == nbc->md_bdev) !=
+	    (nbc->dc.meta_dev_idx == DRBD_MD_INDEX_INTERNAL ||
+	     nbc->dc.meta_dev_idx == DRBD_MD_INDEX_FLEX_INT)) {

CHECK:SPACING: No space is necessary after a cast
#1667: FILE: drivers/block/drbd/drbd_nl.c:846:
+			(unsigned long long) drbd_get_max_capacity(nbc),

CHECK:SPACING: No space is necessary after a cast
#1668: FILE: drivers/block/drbd/drbd_nl.c:847:
+			(unsigned long long) nbc->dc.disk_size);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1676: FILE: drivers/block/drbd/drbd_nl.c:855:
+		min_md_device_sectors = (2<<10);
 		                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#1684: FILE: drivers/block/drbd/drbd_nl.c:863:
+		dev_warn(DEV, "truncating very big lower level device "
+		     "to currently maximum possible %llu sectors\n",

CHECK:SPACING: No space is necessary after a cast
#1685: FILE: drivers/block/drbd/drbd_nl.c:864:
+		     (unsigned long long) max_possible_sectors);

WARNING:SPLIT_STRING: quoted string split across lines
#1690: FILE: drivers/block/drbd/drbd_nl.c:869:
+		dev_warn(DEV, "refusing attach: md-device too small, "
+		     "at least %llu sectors needed for this meta-disk type\n",

CHECK:SPACING: No space is necessary after a cast
#1691: FILE: drivers/block/drbd/drbd_nl.c:870:
+		     (unsigned long long) min_md_device_sectors);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1696: FILE: drivers/block/drbd/drbd_nl.c:875:
+	 * (we may currently be R_PRIMARY with no local disk...) */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1734: FILE: drivers/block/drbd/drbd_nl.c:913:
+		dev_err(DEV, "Can only attach to data with current UUID=%016llX\n",
+		    (unsigned long long)mdev->ed_uuid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1747: FILE: drivers/block/drbd/drbd_nl.c:926:
+	if (drbd_md_test_flag(nbc, MDF_CONSISTENT) &&
+	   drbd_new_dev_size(mdev, nbc) < nbc->md.la_size_sect) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1766: FILE: drivers/block/drbd/drbd_nl.c:945:
+			struct page *page = alloc_page(GFP_NOIO);
+			if (!page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1770: FILE: drivers/block/drbd/drbd_nl.c:949:
+			dev_warn(DEV, "Meta data's bdev hardsect = %d != %d\n",
+			     hardsect, MD_HARDSECT);

WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#1771: FILE: drivers/block/drbd/drbd_nl.c:950:
+			dev_warn(DEV, "Workaround engaged (has performace impact).\n");
 			                                       ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1778: FILE: drivers/block/drbd/drbd_nl.c:957:
+	 * be written, to ensure we determine if barriers are supported. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1787: FILE: drivers/block/drbd/drbd_nl.c:966:
+	 * clean it up somewhere.  */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mdev->bc"
#1788: FILE: drivers/block/drbd/drbd_nl.c:967:
+	D_ASSERT(mdev->bc == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1830: FILE: drivers/block/drbd/drbd_nl.c:1009:
+	if (mdev->state.role != R_PRIMARY &&
+	     drbd_md_test_flag(mdev->bc, MDF_PRIMARY_IND) &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#1835: FILE: drivers/block/drbd/drbd_nl.c:1014:
+	if (dd == dev_size_error) {
[...]
+	} else if (dd == grew)
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#1843: FILE: drivers/block/drbd/drbd_nl.c:1022:
+		dev_info(DEV, "Assuming that all blocks are out of sync "
+		     "(aka FullSync)\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1864: FILE: drivers/block/drbd/drbd_nl.c:1043:
+	/* If MDF_CONSISTENT is not set go into inconsistent state,
+	   otherwise investige MDF_WasUpToDate...

ERROR:SPACING: space prohibited after that open parenthesis '('
#1880: FILE: drivers/block/drbd/drbd_nl.c:1059:
+	if ( ns.disk == D_CONSISTENT &&

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1885: FILE: drivers/block/drbd/drbd_nl.c:1064:
+	/* All tests on MDF_PRIMARY_IND, MDF_CONNECTED_IND,
+	   MDF_CONSISTENT and MDF_WAS_UP_TO_DATE must happen before

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1887: FILE: drivers/block/drbd/drbd_nl.c:1066:
+	   flags. */

WARNING:TYPO_SPELLING: 'desicion' may be misspelled - perhaps 'decision'?
#1889: FILE: drivers/block/drbd/drbd_nl.c:1068:
+	/* In case we are C_CONNECTED postpone any desicion on the new disk
 	                                           ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1890: FILE: drivers/block/drbd/drbd_nl.c:1069:
+	/* In case we are C_CONNECTED postpone any desicion on the new disk
+	   state after the negotiation phase. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1890: FILE: drivers/block/drbd/drbd_nl.c:1069:
+	   state after the negotiation phase. */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_conf)...) over kmalloc(sizeof(struct net_conf)...)
#1977: FILE: drivers/block/drbd/drbd_nl.c:1156:
+	new_conf = kmalloc(sizeof(struct net_conf), GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_conf->wire_protocol != DRBD_PROT_C'
#2006: FILE: drivers/block/drbd/drbd_nl.c:1185:
+	if (new_conf->two_primaries
+	&& (new_conf->wire_protocol != DRBD_PROT_C)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2007: FILE: drivers/block/drbd/drbd_nl.c:1186:
+	if (new_conf->two_primaries
+	&& (new_conf->wire_protocol != DRBD_PROT_C)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2044: FILE: drivers/block/drbd/drbd_nl.c:1223:
+		snprintf(hmac_name, CRYPTO_MAX_ALG_NAME, "hmac(%s)",
+			new_conf->cram_hmac_alg);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2063: FILE: drivers/block/drbd/drbd_nl.c:1242:
+			retcode=ERR_INTEGRITY_ALG;
 			       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2068: FILE: drivers/block/drbd/drbd_nl.c:1247:
+			retcode=ERR_INTEGRITY_ALG_ND;
 			       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2075: FILE: drivers/block/drbd/drbd_nl.c:1254:
+			retcode=ERR_INTEGRITY_ALG;
 			       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2080: FILE: drivers/block/drbd/drbd_nl.c:1259:
+	ns = new_conf->max_epoch_size/8;
 	                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2082: FILE: drivers/block/drbd/drbd_nl.c:1261:
+		new_tl_hash = kzalloc(ns*sizeof(void *), GFP_KERNEL);
 		                        ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2082: FILE: drivers/block/drbd/drbd_nl.c:1261:
+		new_tl_hash = kzalloc(ns*sizeof(void *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2089: FILE: drivers/block/drbd/drbd_nl.c:1268:
+	ns = new_conf->max_buffers/8;
 	                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mdev->ee_hash_s != ns'
#2090: FILE: drivers/block/drbd/drbd_nl.c:1269:
+	if (new_conf->two_primaries && (mdev->ee_hash_s != ns)) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2091: FILE: drivers/block/drbd/drbd_nl.c:1270:
+		new_ee_hash = kzalloc(ns*sizeof(void *), GFP_KERNEL);
 		                        ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2091: FILE: drivers/block/drbd/drbd_nl.c:1270:
+		new_ee_hash = kzalloc(ns*sizeof(void *), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2098: FILE: drivers/block/drbd/drbd_nl.c:1277:
+	((char *)new_conf->shared_secret)[SHARED_SECRET_MAX-1] = 0;
 	                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#2120: FILE: drivers/block/drbd/drbd_nl.c:1299:
+		if(drbd_bm_init(mdev)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mdev->net_conf"
#2127: FILE: drivers/block/drbd/drbd_nl.c:1306:
+	if (mdev->net_conf != NULL) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2139: FILE: drivers/block/drbd/drbd_nl.c:1318:
+		mdev->tl_hash_s = mdev->net_conf->max_epoch_size/8;
 		                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2145: FILE: drivers/block/drbd/drbd_nl.c:1324:
+		mdev->ee_hash_s = mdev->net_conf->max_buffers/8;
 		                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2161: FILE: drivers/block/drbd/drbd_nl.c:1340:
+	mdev->int_dig_out=int_dig_out;
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2162: FILE: drivers/block/drbd/drbd_nl.c:1341:
+	mdev->int_dig_in=int_dig_in;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2163: FILE: drivers/block/drbd/drbd_nl.c:1342:
+	mdev->int_dig_vv=int_dig_vv;
 	                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2196: FILE: drivers/block/drbd/drbd_nl.c:1375:
+	if (retcode == SS_NOTHING_TO_DO)
[...]
+	else if (retcode == SS_ALREADY_STANDALONE)
[...]
+	else if (retcode == SS_PRIMARY_NOP) {
[...]
+	} else if (retcode == SS_CW_FAILED_BY_PEER) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2203: FILE: drivers/block/drbd/drbd_nl.c:1382:
+		retcode = drbd_request_state(mdev, NS2(conn, C_DISCONNECTING,
+						      pdsk, D_OUTDATED));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2221: FILE: drivers/block/drbd/drbd_nl.c:1400:
+		/* Do not test for mdev->state.conn == C_STANDALONE, since
+		   someone else might connect us in the mean time! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2221: FILE: drivers/block/drbd/drbd_nl.c:1400:
+		   someone else might connect us in the mean time! */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!minor_to_mdev"
#2334: FILE: drivers/block/drbd/drbd_nl.c:1513:
+		if (sc.after < -1 || minor_to_mdev(sc.after) == NULL) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#2351: FILE: drivers/block/drbd/drbd_nl.c:1530:
+	rsr = (	mdev->state.conn == C_SYNC_SOURCE ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2354: FILE: drivers/block/drbd/drbd_nl.c:1533:
+		mdev->state.conn == C_PAUSED_SYNC_T );

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2400: FILE: drivers/block/drbd/drbd_nl.c:1579:
+		err = __bitmap_parse(sc.cpu_mask, 32, 0, (unsigned long *)&n_cpu_mask, NR_CPUS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2408: FILE: drivers/block/drbd/drbd_nl.c:1587:
+	ERR_IF (sc.rate < 1) sc.rate = 1;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2409: FILE: drivers/block/drbd/drbd_nl.c:1588:
+	ERR_IF (sc.al_extents < 7) sc.al_extents = 127; /* arbitrary minimum */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2410: FILE: drivers/block/drbd/drbd_nl.c:1589:
+#define AL_MAX ((MD_AL_MAX_SIZE-1) * AL_EXTENTS_PT)
                                ^

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#2459: FILE: drivers/block/drbd/drbd_nl.c:1638:
+		mdev->asender.reset_cpu_mask = 1;
 		      ^^^^^^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2484: FILE: drivers/block/drbd/drbd_nl.c:1663:
+			retcode = _drbd_set_state(_NS(mdev, disk, D_INCONSISTENT), CS_VERBOSE, NULL);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2500: FILE: drivers/block/drbd/drbd_nl.c:1679:
+{
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2611: FILE: drivers/block/drbd/drbd_nl.c:1790:
+		*tl++ = UI_SIZE*sizeof(u64);
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2612: FILE: drivers/block/drbd/drbd_nl.c:1791:
+		memcpy(tl, mdev->bc->md.uuid, UI_SIZE*sizeof(u64));
 		                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2613: FILE: drivers/block/drbd/drbd_nl.c:1792:
+		tl = (unsigned short *)((char *)tl + UI_SIZE*sizeof(u64));
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2653: FILE: drivers/block/drbd/drbd_nl.c:1832:
+	reply->ret_code = drbd_request_state(mdev,NS(conn,C_VERIFY_S));
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2653: FILE: drivers/block/drbd/drbd_nl.c:1832:
+	reply->ret_code = drbd_request_state(mdev,NS(conn,C_VERIFY_S));
 	                                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2658: FILE: drivers/block/drbd/drbd_nl.c:1837:
+
+

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#2695: FILE: drivers/block/drbd/drbd_nl.c:1874:
+		err = drbd_bitmap_io(mdev, &drbd_bmio_clear_n_write, "clear_n_write from new_c_uuid");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2697: FILE: drivers/block/drbd/drbd_nl.c:1876:
+			dev_err(DEV, "Writing bitmap failed with %d\n",err);
 			                                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2731: FILE: drivers/block/drbd/drbd_nl.c:1910:
+		struct gendisk *disk = NULL;
+		mdev = drbd_new_device(nlp->drbd_minor);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!minor_table[nlp->drbd_minor]"
#2734: FILE: drivers/block/drbd/drbd_nl.c:1913:
+		if (minor_table[nlp->drbd_minor] == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2743: FILE: drivers/block/drbd/drbd_nl.c:1922:
+			 * don't forget the del_gendisk! */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#2755: FILE: drivers/block/drbd/drbd_nl.c:1934:
+	int (*function)(struct drbd_conf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_nl_cfg_req *' should also have an identifier name
#2755: FILE: drivers/block/drbd/drbd_nl.c:1934:
+	int (*function)(struct drbd_conf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_nl_cfg_reply *' should also have an identifier name
#2755: FILE: drivers/block/drbd/drbd_nl.c:1934:
+	int (*function)(struct drbd_conf *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2756: FILE: drivers/block/drbd/drbd_nl.c:1935:
+	int (*function)(struct drbd_conf *,
+			 struct drbd_nl_cfg_req *,

ERROR:SPACING: space prohibited after that open square bracket '['
#2762: FILE: drivers/block/drbd/drbd_nl.c:1941:
+	[ P_primary ]		= { &drbd_nl_primary,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2762: FILE: drivers/block/drbd/drbd_nl.c:1941:
+	[ P_primary ]		= { &drbd_nl_primary,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2763: FILE: drivers/block/drbd/drbd_nl.c:1942:
+	[ P_secondary ]		= { &drbd_nl_secondary,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2763: FILE: drivers/block/drbd/drbd_nl.c:1942:
+	[ P_secondary ]		= { &drbd_nl_secondary,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2764: FILE: drivers/block/drbd/drbd_nl.c:1943:
+	[ P_disk_conf ]		= { &drbd_nl_disk_conf,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2764: FILE: drivers/block/drbd/drbd_nl.c:1943:
+	[ P_disk_conf ]		= { &drbd_nl_disk_conf,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2765: FILE: drivers/block/drbd/drbd_nl.c:1944:
+	[ P_detach ]		= { &drbd_nl_detach,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2765: FILE: drivers/block/drbd/drbd_nl.c:1944:
+	[ P_detach ]		= { &drbd_nl_detach,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2766: FILE: drivers/block/drbd/drbd_nl.c:1945:
+	[ P_net_conf ]		= { &drbd_nl_net_conf,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2766: FILE: drivers/block/drbd/drbd_nl.c:1945:
+	[ P_net_conf ]		= { &drbd_nl_net_conf,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2767: FILE: drivers/block/drbd/drbd_nl.c:1946:
+	[ P_disconnect ]	= { &drbd_nl_disconnect,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2767: FILE: drivers/block/drbd/drbd_nl.c:1946:
+	[ P_disconnect ]	= { &drbd_nl_disconnect,	0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2768: FILE: drivers/block/drbd/drbd_nl.c:1947:
+	[ P_resize ]		= { &drbd_nl_resize,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2768: FILE: drivers/block/drbd/drbd_nl.c:1947:
+	[ P_resize ]		= { &drbd_nl_resize,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2769: FILE: drivers/block/drbd/drbd_nl.c:1948:
+	[ P_syncer_conf ]	= { &drbd_nl_syncer_conf,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2769: FILE: drivers/block/drbd/drbd_nl.c:1948:
+	[ P_syncer_conf ]	= { &drbd_nl_syncer_conf,	0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2770: FILE: drivers/block/drbd/drbd_nl.c:1949:
+	[ P_invalidate ]	= { &drbd_nl_invalidate,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2770: FILE: drivers/block/drbd/drbd_nl.c:1949:
+	[ P_invalidate ]	= { &drbd_nl_invalidate,	0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2771: FILE: drivers/block/drbd/drbd_nl.c:1950:
+	[ P_invalidate_peer ]	= { &drbd_nl_invalidate_peer,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2771: FILE: drivers/block/drbd/drbd_nl.c:1950:
+	[ P_invalidate_peer ]	= { &drbd_nl_invalidate_peer,	0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2772: FILE: drivers/block/drbd/drbd_nl.c:1951:
+	[ P_pause_sync ]	= { &drbd_nl_pause_sync,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2772: FILE: drivers/block/drbd/drbd_nl.c:1951:
+	[ P_pause_sync ]	= { &drbd_nl_pause_sync,	0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2773: FILE: drivers/block/drbd/drbd_nl.c:1952:
+	[ P_resume_sync ]	= { &drbd_nl_resume_sync,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2773: FILE: drivers/block/drbd/drbd_nl.c:1952:
+	[ P_resume_sync ]	= { &drbd_nl_resume_sync,	0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2774: FILE: drivers/block/drbd/drbd_nl.c:1953:
+	[ P_suspend_io ]	= { &drbd_nl_suspend_io,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2774: FILE: drivers/block/drbd/drbd_nl.c:1953:
+	[ P_suspend_io ]	= { &drbd_nl_suspend_io,	0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2775: FILE: drivers/block/drbd/drbd_nl.c:1954:
+	[ P_resume_io ]		= { &drbd_nl_resume_io,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2775: FILE: drivers/block/drbd/drbd_nl.c:1954:
+	[ P_resume_io ]		= { &drbd_nl_resume_io,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2776: FILE: drivers/block/drbd/drbd_nl.c:1955:
+	[ P_outdate ]		= { &drbd_nl_outdate,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2776: FILE: drivers/block/drbd/drbd_nl.c:1955:
+	[ P_outdate ]		= { &drbd_nl_outdate,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2777: FILE: drivers/block/drbd/drbd_nl.c:1956:
+	[ P_get_config ]	= { &drbd_nl_get_config,

ERROR:SPACING: space prohibited before that close square bracket ']'
#2777: FILE: drivers/block/drbd/drbd_nl.c:1956:
+	[ P_get_config ]	= { &drbd_nl_get_config,

ERROR:SPACING: space prohibited after that open square bracket '['
#2781: FILE: drivers/block/drbd/drbd_nl.c:1960:
+	[ P_get_state ]		= { &drbd_nl_get_state,

ERROR:SPACING: space prohibited before that close square bracket ']'
#2781: FILE: drivers/block/drbd/drbd_nl.c:1960:
+	[ P_get_state ]		= { &drbd_nl_get_state,

ERROR:SPACING: space prohibited after that open square bracket '['
#2784: FILE: drivers/block/drbd/drbd_nl.c:1963:
+	[ P_get_uuids ]		= { &drbd_nl_get_uuids,

ERROR:SPACING: space prohibited before that close square bracket ']'
#2784: FILE: drivers/block/drbd/drbd_nl.c:1963:
+	[ P_get_uuids ]		= { &drbd_nl_get_uuids,

ERROR:SPACING: space prohibited after that open square bracket '['
#2786: FILE: drivers/block/drbd/drbd_nl.c:1965:
+	[ P_get_timeout_flag ]	= { &drbd_nl_get_timeout_flag,

ERROR:SPACING: space prohibited before that close square bracket ']'
#2786: FILE: drivers/block/drbd/drbd_nl.c:1965:
+	[ P_get_timeout_flag ]	= { &drbd_nl_get_timeout_flag,

ERROR:SPACING: space prohibited after that open square bracket '['
#2788: FILE: drivers/block/drbd/drbd_nl.c:1967:
+	[ P_start_ov ]		= { &drbd_nl_start_ov,		0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2788: FILE: drivers/block/drbd/drbd_nl.c:1967:
+	[ P_start_ov ]		= { &drbd_nl_start_ov,		0 },

ERROR:SPACING: space prohibited after that open square bracket '['
#2789: FILE: drivers/block/drbd/drbd_nl.c:1968:
+	[ P_new_c_uuid ]	= { &drbd_nl_new_c_uuid,	0 },

ERROR:SPACING: space prohibited before that close square bracket ']'
#2789: FILE: drivers/block/drbd/drbd_nl.c:1968:
+	[ P_new_c_uuid ]	= { &drbd_nl_new_c_uuid,	0 },

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2806: FILE: drivers/block/drbd/drbd_nl.c:1985:
+		printk(KERN_ERR "drbd: try_module_get() failed!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cm->function"
#2826: FILE: drivers/block/drbd/drbd_nl.c:2005:
+	if (cm->function == NULL) {

CHECK:SPACING: No space is necessary after a cast
#2838: FILE: drivers/block/drbd/drbd_nl.c:2017:
+	reply = (struct drbd_nl_cfg_reply *) cn_reply->data;

WARNING:TYPO_SPELLING: 'fucntion' may be misspelled - perhaps 'function'?
#2844: FILE: drivers/block/drbd/drbd_nl.c:2023:
+	/* reply->tag_list; might be modified by cm->fucntion. */
 	                                             ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2857: FILE: drivers/block/drbd/drbd_nl.c:2036:
+		printk(KERN_INFO "drbd: cn_netlink_send()=%d\n", rr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2871: FILE: drivers/block/drbd/drbd_nl.c:2050:
+__tl_add_blob(unsigned short *tl, enum drbd_tags tag, const void *data,
+	int len, int nul_terminated)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2874: FILE: drivers/block/drbd/drbd_nl.c:2053:
+	int l = tag_descriptions[tag_number(tag)].max_len;
+	l = (len < l) ? len :  l;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2882: FILE: drivers/block/drbd/drbd_nl.c:2061:
+	 * because now the next "unsigned short" may be misaligned. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2883: FILE: drivers/block/drbd/drbd_nl.c:2062:
+	tl = (unsigned short*)((char*)tl + len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2883: FILE: drivers/block/drbd/drbd_nl.c:2062:
+	tl = (unsigned short*)((char*)tl + len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2885: FILE: drivers/block/drbd/drbd_nl.c:2064:
+		*((char*)tl - 1) = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2898: FILE: drivers/block/drbd/drbd_nl.c:2077:
+	return __tl_add_blob(tl, tag, str, strlen(str)+1, 0);
 	                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#2904: FILE: drivers/block/drbd/drbd_nl.c:2083:
+	switch(tag_type(tag)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2908: FILE: drivers/block/drbd/drbd_nl.c:2087:
+		*(int*)tl = *(int*)val;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2908: FILE: drivers/block/drbd/drbd_nl.c:2087:
+		*(int*)tl = *(int*)val;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2909: FILE: drivers/block/drbd/drbd_nl.c:2088:
+		tl = (unsigned short*)((char*)tl+sizeof(int));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2909: FILE: drivers/block/drbd/drbd_nl.c:2088:
+		tl = (unsigned short*)((char*)tl+sizeof(int));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2909: FILE: drivers/block/drbd/drbd_nl.c:2088:
+		tl = (unsigned short*)((char*)tl+sizeof(int));
 		                                ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2914: FILE: drivers/block/drbd/drbd_nl.c:2093:
+		*(u64*)tl = *(u64*)val;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2914: FILE: drivers/block/drbd/drbd_nl.c:2093:
+		*(u64*)tl = *(u64*)val;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2915: FILE: drivers/block/drbd/drbd_nl.c:2094:
+		tl = (unsigned short*)((char*)tl+sizeof(u64));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2915: FILE: drivers/block/drbd/drbd_nl.c:2094:
+		tl = (unsigned short*)((char*)tl+sizeof(u64));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2915: FILE: drivers/block/drbd/drbd_nl.c:2094:
+		tl = (unsigned short*)((char*)tl+sizeof(u64));
 		                                ^

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#2917: FILE: drivers/block/drbd/drbd_nl.c:2096:
+	default:
+		/* someone did something stupid. */
+		;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2926: FILE: drivers/block/drbd/drbd_nl.c:2105:
+	char buffer[sizeof(struct cn_msg)+
 	                                 ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2927: FILE: drivers/block/drbd/drbd_nl.c:2106:
+		    sizeof(struct drbd_nl_cfg_reply)+
 		                                    ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2928: FILE: drivers/block/drbd/drbd_nl.c:2107:
+		    sizeof(struct get_state_tag_len_struct)+
 		                                           ^

CHECK:SPACING: No space is necessary after a cast
#2930: FILE: drivers/block/drbd/drbd_nl.c:2109:
+	struct cn_msg *cn_reply = (struct cn_msg *) buffer;

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2959: FILE: drivers/block/drbd/drbd_nl.c:2138:
+	char buffer[sizeof(struct cn_msg)+
 	                                 ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2960: FILE: drivers/block/drbd/drbd_nl.c:2139:
+		    sizeof(struct drbd_nl_cfg_reply)+
 		                                    ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2961: FILE: drivers/block/drbd/drbd_nl.c:2140:
+		    sizeof(struct call_helper_tag_len_struct)+
 		                                             ^

CHECK:SPACING: No space is necessary after a cast
#2963: FILE: drivers/block/drbd/drbd_nl.c:2142:
+	struct cn_msg *cn_reply = (struct cn_msg *) buffer;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2971: FILE: drivers/block/drbd/drbd_nl.c:2150:
+	str_len = strlen(helper_name)+1;
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2996: FILE: drivers/block/drbd/drbd_nl.c:2175:
+void drbd_bcast_ee(struct drbd_conf *mdev,
+		const char *reason, const int dgs,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2997: FILE: drivers/block/drbd/drbd_nl.c:2176:
+		const char* seen_hash, const char* calc_hash,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2997: FILE: drivers/block/drbd/drbd_nl.c:2176:
+		const char* seen_hash, const char* calc_hash,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2998: FILE: drivers/block/drbd/drbd_nl.c:2177:
+		const struct drbd_epoch_entry* e)

WARNING:TYPO_SPELLING: 'aparently' may be misspelled - perhaps 'apparently'?
#3011: FILE: drivers/block/drbd/drbd_nl.c:2190:
+	/* aparently we have to memcpy twice, first to prepare the data for the
 	   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3013: FILE: drivers/block/drbd/drbd_nl.c:2192:
+	 * netlink skb. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3014: FILE: drivers/block/drbd/drbd_nl.c:2193:
+	cn_reply = kmalloc(

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3015: FILE: drivers/block/drbd/drbd_nl.c:2194:
+		sizeof(struct cn_msg)+
 		                     ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3016: FILE: drivers/block/drbd/drbd_nl.c:2195:
+		sizeof(struct drbd_nl_cfg_reply)+
 		                                ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3017: FILE: drivers/block/drbd/drbd_nl.c:2196:
+		sizeof(struct dump_ee_tag_len_struct)+
 		                                     ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'drbd_bcast_ee', this function's name, in a string
#3022: FILE: drivers/block/drbd/drbd_nl.c:2201:
+		dev_err(DEV, "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3023: FILE: drivers/block/drbd/drbd_nl.c:2202:
+		dev_err(DEV, "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
+				(unsigned long long)e->sector, e->size);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3027: FILE: drivers/block/drbd/drbd_nl.c:2206:
+	reply = (struct drbd_nl_cfg_reply*)cn_reply->data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3041: FILE: drivers/block/drbd/drbd_nl.c:2220:
+		void *d = kmap(bvec->bv_page);
+		memcpy(tl, d + bvec->bv_offset, bvec->bv_len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3043: FILE: drivers/block/drbd/drbd_nl.c:2222:
+		tl=(unsigned short*)((char*)tl + bvec->bv_len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3043: FILE: drivers/block/drbd/drbd_nl.c:2222:
+		tl=(unsigned short*)((char*)tl + bvec->bv_len);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3043: FILE: drivers/block/drbd/drbd_nl.c:2222:
+		tl=(unsigned short*)((char*)tl + bvec->bv_len);
 		  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#3050: FILE: drivers/block/drbd/drbd_nl.c:2229:
+	cn_reply->seq = atomic_add_return(1,&drbd_nl_seq);
 	                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#3050: FILE: drivers/block/drbd/drbd_nl.c:2229:
+	cn_reply->seq = atomic_add_return(1,&drbd_nl_seq);
 	                                    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3053: FILE: drivers/block/drbd/drbd_nl.c:2232:
+		(int)((char*)tl - (char*)reply->tag_list);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3053: FILE: drivers/block/drbd/drbd_nl.c:2232:
+		(int)((char*)tl - (char*)reply->tag_list);

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3067: FILE: drivers/block/drbd/drbd_nl.c:2246:
+	char buffer[sizeof(struct cn_msg)+
 	                                 ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3068: FILE: drivers/block/drbd/drbd_nl.c:2247:
+		    sizeof(struct drbd_nl_cfg_reply)+
 		                                    ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3069: FILE: drivers/block/drbd/drbd_nl.c:2248:
+		    sizeof(struct sync_progress_tag_len_struct)+
 		                                               ^

CHECK:SPACING: No space is necessary after a cast
#3071: FILE: drivers/block/drbd/drbd_nl.c:2250:
+	struct cn_msg *cn_reply = (struct cn_msg *) buffer;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3110: FILE: drivers/block/drbd/drbd_nl.c:2289:
+	int err, try=10;
 	            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3122: FILE: drivers/block/drbd/drbd_nl.c:2301:
+		printk(KERN_ERR "drbd: cn_drbd failed to register\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3141: FILE: drivers/block/drbd/drbd_nl.c:2320:
+	char buffer[sizeof(struct cn_msg)+sizeof(struct drbd_nl_cfg_reply)];
 	                                 ^

CHECK:SPACING: No space is necessary after a cast
#3142: FILE: drivers/block/drbd/drbd_nl.c:2321:
+	struct cn_msg *cn_reply = (struct cn_msg *) buffer;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3160: FILE: drivers/block/drbd/drbd_nl.c:2339:
+		printk(KERN_INFO "drbd: cn_netlink_send()=%d\n", rr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131907.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 189 errors, 118 warnings, 165 checks, 3072 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131907.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
