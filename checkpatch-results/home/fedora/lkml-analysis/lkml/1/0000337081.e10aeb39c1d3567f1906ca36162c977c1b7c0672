WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#109: FILE: fs/ext3/balloc.c:39:
+ * ^IStart of^I^I^I^I^I^IEnd of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: fs/ext3/balloc.c:40:
+ * ^Iblock group^I^I^I^I^I^Iblock group$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#111: FILE: fs/ext3/balloc.c:41:
+ * ^I ________________________________________________________________$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: fs/ext3/balloc.c:42:
+ * ^I|^INON-MC REGION^I^I^I|^IMC REGION^I |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: fs/ext3/balloc.c:43:
+ * ^I|^I^I^I^I^I|Overflow^I^I |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#114: FILE: fs/ext3/balloc.c:44:
+ * ^I|Data blocks and^I^I^I|data^I^IIndirect |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#115: FILE: fs/ext3/balloc.c:45:
+ * ^I|overflow indirect blocks^I^I|blocks^I^Iblocks^I |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: fs/ext3/balloc.c:46:
+ * ^I|----------> ^I^I^I^I|------->^I<--------|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#117: FILE: fs/ext3/balloc.c:47:
+ * ^I|________________________________________________________________|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: fs/ext3/balloc.c:49:
+ * ^IEvery block group has at its end a semi-reserved region called the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#120: FILE: fs/ext3/balloc.c:50:
+ * ^Imetacluster mostly used for allocating indirect blocks. Under normal$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: fs/ext3/balloc.c:51:
+ * ^Icircumstances, the metacluster is used only for allocating indirect$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: fs/ext3/balloc.c:52:
+ * ^Iblocks which are allocated in decreasing order of block numbers.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: fs/ext3/balloc.c:53:
+ * ^IThe non-Metacluster region is used for data block allocation which are$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: fs/ext3/balloc.c:54:
+ * ^Iallocated in increasing order of block numbers. However, when the MC$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: fs/ext3/balloc.c:55:
+ * ^Iruns out of space, indirect blocks can be allocated in the non-MC$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: fs/ext3/balloc.c:56:
+ * ^Iregion along with the data blocks in the forward direction. Similarly,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: fs/ext3/balloc.c:57:
+ * ^Iwhen non-MC runs out of space, new data blocks are allocated in MC but$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: fs/ext3/balloc.c:58:
+ * ^Iin the forward direction.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: fs/ext3/balloc.c:135:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#150: FILE: fs/ext3/balloc.c:148:
+	BUG_ON(!test_opt(sb, METACLUSTER));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#157: FILE: fs/ext3/balloc.c:155:
+		ext3_count_free(bitmap_bh, sbi->s_nonmc_blocks_per_group/8);
 		                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#161: FILE: fs/ext3/balloc.c:159:
+	BUG_ON(bgi->bgi_free_nonmc_blocks_count >

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: fs/ext3/balloc.c:175:
+ext3_update_nonmc_block_count(struct ext3_sb_info *sbi, unsigned long group_no,
+				ext3_grpblk_t start, unsigned long count,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: fs/ext3/balloc.c:181:
+	BUG_ON(bginfo->bgi_free_nonmc_blocks_count < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#184: FILE: fs/ext3/balloc.c:182:
+	BUG_ON(start >= sbi->s_nonmc_blocks_per_group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: fs/ext3/balloc.c:185:
+	change = min_t(ext3_grpblk_t, start + count,
+			sbi->s_nonmc_blocks_per_group) - start;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: fs/ext3/balloc.c:188:
+	BUG_ON(bginfo->bgi_free_nonmc_blocks_count >

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: fs/ext3/balloc.c:190:
+	BUG_ON(allocation && bginfo->bgi_free_nonmc_blocks_count < change);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#196: FILE: fs/ext3/balloc.c:194:
+	BUG_ON(bginfo->bgi_free_nonmc_blocks_count >

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: fs/ext3/balloc.c:201:
+ * ^ICheck if we can use metacluster region of a block group for general$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: fs/ext3/balloc.c:202:
+ * ^Iallocation if needed. Ideally, we should allow this only if$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: fs/ext3/balloc.c:203:
+ * ^Ibgi_free_nonmc_blocks_count == 0, but sometimes there is a small number$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: fs/ext3/balloc.c:204:
+ * ^Iof blocks which don't get allocated in the first pass, no point$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: fs/ext3/balloc.c:205:
+ * ^Ibreaking our file at the metacluster boundary because of that, so we$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: fs/ext3/balloc.c:206:
+ * ^Irelax the limit to 8.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: fs/ext3/balloc.c:209:
+static inline int allow_mc_alloc(struct ext3_sb_info *sbi,
+					struct ext3_bg_info *bgi,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#264: FILE: fs/ext3/balloc.c:813:
+		if (map[k/8] != '\255' &&
[...]
+				return blk;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#264: FILE: fs/ext3/balloc.c:813:
+		if (map[k/8] != '\255' &&
 		         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#264: FILE: fs/ext3/balloc.c:813:
+		if (map[k/8] != '\255' &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: fs/ext3/balloc.c:814:
+		if (map[k/8] != '\255' &&
+			(blk = ext3_find_next_zero_bit(map, k + 8, k))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: fs/ext3/balloc.c:825:
+bitmap_search_prev_usable_block(ext3_grpblk_t start, struct buffer_head *bh,
+					ext3_grpblk_t lowest)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: fs/ext3/balloc.c:844:
+			start = bitmap_find_prev_zero_bit(jh->b_committed_data,
+								next, lowest);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#355: FILE: fs/ext3/balloc.c:1040:
 		&& ext3_test_allocatable(grp_goal, bitmap_bh)
+		&& (!metaclustering || allow_mc_alloc(sbi, bgi, grp_goal))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#356: FILE: fs/ext3/balloc.c:1041:
+		&& (!metaclustering || allow_mc_alloc(sbi, bgi, grp_goal))
+		&& claim_block(sb_bgl_lock(sbi, group), grp_goal, bitmap_bh)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: fs/ext3/balloc.c:1307:
+	if (first_free_block < 0 ||
+		(test_opt(sb, METACLUSTER)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#378: FILE: fs/ext3/balloc.c:1308:
+		(test_opt(sb, METACLUSTER)
+		 && !allow_mc_alloc(EXT3_SB(sb), &EXT3_SB(sb)->s_bginfo[group],

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#450: FILE: fs/ext3/balloc.c:1552:
+ * ^IHelper function for ext3_new_blocks. Allocates indirect blocks from the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: fs/ext3/balloc.c:1553:
+ * ^Imetacluster region only and stores their numbers in new_blocks[].$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: fs/ext3/balloc.c:1556:
+int ext3_alloc_indirect_blocks(struct super_block *sb,
+			struct buffer_head *bitmap_bh,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: fs/ext3/balloc.c:1567:
+	BUG_ON(!test_opt(sb, METACLUSTER));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: fs/ext3/balloc.c:1578:
+			blk = bitmap_search_prev_usable_block(blk, bitmap_bh,
+								mc_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: fs/ext3/balloc.c:1593:
+			blk = bitmap_search_prev_usable_block(blk, bitmap_bh,
+								mc_start);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#498: FILE: fs/ext3/balloc.c:1600:
+ * ^IHelper function for ext3_new_blocks. Checks newly allocated block$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#499: FILE: fs/ext3/balloc.c:1601:
+ * ^Inumbers.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: fs/ext3/balloc.c:1604:
+int check_allocated_blocks(ext3_fsblk_t blk, unsigned long num,
+				struct super_block *sb, int group_no,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: fs/ext3/balloc.c:1613:
+	if (in_range(le32_to_cpu(gdp->bg_block_bitmap), blk, num) ||
+		in_range(le32_to_cpu(gdp->bg_inode_bitmap), blk, num) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: fs/ext3/balloc.c:1615:
+		in_range(blk, le32_to_cpu(gdp->bg_inode_table),
+				EXT3_SB(sb)->s_itb_per_group) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: fs/ext3/balloc.c:1617:
+		in_range(blk + num - 1, le32_to_cpu(gdp->bg_inode_table),
+				EXT3_SB(sb)->s_itb_per_group))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: fs/ext3/balloc.c:1619:
+		ext3_error(sb, "ext3_new_blocks",
+				"Allocating block in system zone - "

WARNING:SPLIT_STRING: quoted string split across lines
#518: FILE: fs/ext3/balloc.c:1620:
+				"Allocating block in system zone - "
+				"blocks from "E3FSBLK", length %lu",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#518: FILE: fs/ext3/balloc.c:1620:
+				"blocks from "E3FSBLK", length %lu",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#539: FILE: fs/ext3/balloc.c:1641:
+			if (ext3_test_bit(grp_blk+i,
 			                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: fs/ext3/balloc.c:1642:
+			if (ext3_test_bit(grp_blk+i,
+					bh2jh(bitmap_bh)->b_committed_data))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#541: FILE: fs/ext3/balloc.c:1643:
+				printk(KERN_ERR "%s: block was unexpectedly set"

WARNING:SPLIT_STRING: quoted string split across lines
#542: FILE: fs/ext3/balloc.c:1644:
+				printk(KERN_ERR "%s: block was unexpectedly set"
+					" in b_committed_data\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#542: FILE: fs/ext3/balloc.c:1644:
+					" in b_committed_data\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: fs/ext3/balloc.c:1654:
+		ext3_error(sb, "ext3_new_blocks",
+				"block("E3FSBLK") >= blocks count(%d) - "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#552: FILE: fs/ext3/balloc.c:1654:
+				"block("E3FSBLK") >= blocks count(%d) - "

WARNING:SPLIT_STRING: quoted string split across lines
#553: FILE: fs/ext3/balloc.c:1655:
+				"block("E3FSBLK") >= blocks count(%d) - "
+				"block_group = %d, es == %p ", blk,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#581: FILE: fs/ext3/balloc.c:1668:
+ * ^I@indirect_blks^Inumber of indirect blocks to allocate$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#582: FILE: fs/ext3/balloc.c:1669:
+ * ^I@blks^I^Inumber of direct blocks to allocate$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#583: FILE: fs/ext3/balloc.c:1670:
+ * ^I@new_blocks^Ithis will store the block numbers of indirect blocks$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#584: FILE: fs/ext3/balloc.c:1671:
+ * ^I^I^Iand direct blocks upon return.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#586: FILE: fs/ext3/balloc.c:1673:
+ * ^Ireturns the number of direct blocks allocated. Fewer than requested$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#587: FILE: fs/ext3/balloc.c:1674:
+ * ^Inumber of direct blocks may be allocated but all requested indirect$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#588: FILE: fs/ext3/balloc.c:1675:
+ * ^Iblocks must be allocated in order to return success.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: fs/ext3/balloc.c:1690:
+int ext3_new_blocks(handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, int indirect_blks, int blks,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#641: FILE: fs/ext3/balloc.c:1726:
+		printk(KERN_INFO "ext3_new_blocks: nonexistent device");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_new_blocks', this function's name, in a string
#641: FILE: fs/ext3/balloc.c:1726:
+		printk(KERN_INFO "ext3_new_blocks: nonexistent device");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#729: FILE: fs/ext3/balloc.c:1800:
+		if (group_no == goal_group) {
[...]
+		} else if (free_blocks <= windowsz/2)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'free_blocks < windowsz'
#730: FILE: fs/ext3/balloc.c:1801:
+			if (my_rsv && (free_blocks < windowsz)
+				&& (rsv_is_empty(&my_rsv->rsv_window)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#731: FILE: fs/ext3/balloc.c:1802:
+			if (my_rsv && (free_blocks < windowsz)
+				&& (rsv_is_empty(&my_rsv->rsv_window)))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#735: FILE: fs/ext3/balloc.c:1806:
+		} else if (free_blocks <= windowsz/2)
 		                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: fs/ext3/balloc.c:1829:
+		if (test_opt(sb, METACLUSTER) &&
+			indirect_blks_done < indirect_blks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: fs/ext3/balloc.c:1831:
+			grp_mc_alloc = ext3_alloc_indirect_blocks(sb,
+					bitmap_bh, gdp, group_no,

WARNING:SPLIT_STRING: quoted string split across lines
#790: FILE: fs/ext3/balloc.c:1857:
+		BUFFER_TRACE(bitmap_bh, "journal_dirty_metadata for "
+					"bitmap block");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: fs/ext3/balloc.c:1863:
+		ext3_debug("using block group %d(%d)\n",
+				group_no, gdp->bg_free_blocks_count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#805: FILE: fs/ext3/balloc.c:1872:
+			if (check_allocated_blocks(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#814: FILE: fs/ext3/balloc.c:1881:
+			if (check_allocated_blocks(ret_block, grp_alloc, sb,
+						group_no, gdp, bitmap_bh))

WARNING:SPLIT_STRING: quoted string split across lines
#824: FILE: fs/ext3/balloc.c:1891:
+			ext3_debug("allocating block %lu. "
+					"Goal hits %d of %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: fs/ext3/balloc.c:1900:
+		percpu_counter_mod(&sbi->s_freeblocks_counter,
+				 -(grp_mc_alloc + grp_alloc));

WARNING:SPLIT_STRING: quoted string split across lines
#836: FILE: fs/ext3/balloc.c:1903:
+		BUFFER_TRACE(gdp_bh, "journal_dirty_metadata for "
+				"group descriptor");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: fs/ext3/balloc.c:1920:
+		if (test_opt(sb, METACLUSTER) &&
+			grp_alloc_blk < sbi->s_nonmc_blocks_per_group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#856: FILE: fs/ext3/balloc.c:1922:
+			ext3_update_nonmc_block_count(sbi, group_no,
+				grp_alloc_blk, grp_alloc, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#900: FILE: fs/ext3/balloc.c:1976:
+	DQUOT_FREE_BLOCK(inode,
+			indirect_blks + blks - indirect_blks_done - blks_done);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1055: FILE: fs/ext3/inode.c:43:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#1059: FILE: fs/ext3/inode.c:47:
+} Indirect;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1072: FILE: fs/ext3/inode.c:60:
+# define EXT3_IND_READ_MAX     ^I(32)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1243: FILE: fs/ext3/inode.c:574:
+	num = ext3_new_blocks(handle, inode, goal, indirect_blks,
 				*blks, new_blocks, &err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1286: FILE: fs/ext3/inode.c:842:
+		partial = ext3_get_branch(inode, depth, offsets, chain, 0,
+					&err);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1307: FILE: fs/ext3/inode.c:3277:
+ * ^Ibio callback for read IO issued from ext3_read_indblocks.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1308: FILE: fs/ext3/inode.c:3278:
+ * ^IMay be called multiple times until the whole I/O completes at$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1309: FILE: fs/ext3/inode.c:3279:
+ * ^Iwhich point bio->bi_size = 0 and it frees read_info and bio.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1310: FILE: fs/ext3/inode.c:3280:
+ * ^IThe first time it is called, first_bh is unlocked so that any sync$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1311: FILE: fs/ext3/inode.c:3281:
+ * ^Iwaier can unblock.$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1317: FILE: fs/ext3/inode.c:3287:
+	int uptodate = !err && test_bit(BIO_UPTODATE, &bio->bi_flags);
 	    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1332: FILE: fs/ext3/inode.c:3302:
+		if (uptodate) {
 		    ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1333: FILE: fs/ext3/inode.c:3303:
+			BUG_ON(buffer_uptodate(bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1334: FILE: fs/ext3/inode.c:3304:
+			BUG_ON(ext3_buffer_prefetch(bh));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1350: FILE: fs/ext3/inode.c:3320:
+ * ^I@inode: inode of file.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1351: FILE: fs/ext3/inode.c:3321:
+ * ^I@block: block number in file (starting from zero).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1352: FILE: fs/ext3/inode.c:3322:
+ * ^I@offset_in_dind_block: offset of the indirect block inside it's$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1353: FILE: fs/ext3/inode.c:3323:
+ * ^Iparent doubly-indirect block.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: fs/ext3/inode.c:3332:
+static inline unsigned long ext3_get_max_read(const struct inode *inode,
+						  int block,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1378: FILE: fs/ext3/inode.c:3348:
+	BUG_ON(block >= blocks_in_file);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1383: FILE: fs/ext3/inode.c:3353:
+	BUG_ON(max_read < 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: fs/ext3/inode.c:3359:
+static void ext3_read_indblocks_submit(struct bio **pbio,
+					struct ext3_ind_read_info **pread_info,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1395: FILE: fs/ext3/inode.c:3365:
+	BUG_ON(*read_cnt < 1);

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#1444: FILE: fs/ext3/inode.c:3414:
+ *      Issue a single bio request to read upto count buffers identified in
                                            ^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1446: FILE: fs/ext3/inode.c:3416:
+ *      - If a buffer is found to be uptodate and it's prefetch bit is set, we
                                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1453: FILE: fs/ext3/inode.c:3423:
+ *      it's already uptodate.
                      ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1469: FILE: fs/ext3/inode.c:3439:
+	BUG_ON(count < 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1472: FILE: fs/ext3/inode.c:3442:
+	 * be imposed at the last moment. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1510: FILE: fs/ext3/inode.c:3480:
+		if (io_start_blk > 0 &&
+			(max(io_start_blk, curr) - min(io_start_blk, curr) >=

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1544: FILE: fs/ext3/inode.c:3514:
+	sort(ind_info, ind_info_count, sizeof(*ind_info),
+		ind_info_cmp, ind_info_swap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1553: FILE: fs/ext3/inode.c:3523:
+			ext3_read_indblocks_submit(&bio, &read_info,
+						&read_cnt, seq_prefetch);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1662: FILE: fs/ext3/inode.c:3632:
+	BUG_ON(count < 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1663: FILE: fs/ext3/inode.c:3633:
+	BUG_ON(!first_bh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1681: FILE: fs/ext3/inode.c:3651:
+	BUG_ON(ext3_buffer_prefetch(first_bh));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1689: FILE: fs/ext3/inode.c:3659:
+ * ^I@inode: inode of file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1690: FILE: fs/ext3/inode.c:3660:
+ * ^I@iblock: block number inside file (starting from 0).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1691: FILE: fs/ext3/inode.c:3661:
+ * ^I@depth: depth of path from inode to data block.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1692: FILE: fs/ext3/inode.c:3662:
+ * ^I@offsets: array of offsets within blocks identified in 'chain'.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1693: FILE: fs/ext3/inode.c:3663:
+ * ^I@chain: array of Indirect with info about all levels of blocks until$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1694: FILE: fs/ext3/inode.c:3664:
+ * ^Ithe data block.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1695: FILE: fs/ext3/inode.c:3665:
+ * ^I@err: error pointer.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1697: FILE: fs/ext3/inode.c:3667:
+ * ^IThis function is called after reading all metablocks leading to 'iblock'$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1698: FILE: fs/ext3/inode.c:3668:
+ * ^Iexcept the (singly) indirect block. It reads the indirect block if not$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1699: FILE: fs/ext3/inode.c:3669:
+ * ^Ialready in the cache and may also prefetch next few indirect blocks.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1700: FILE: fs/ext3/inode.c:3670:
+ * ^IIt uses a combination of synchronous and asynchronous requests to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1701: FILE: fs/ext3/inode.c:3671:
+ * ^Iaccomplish this. We do prefetching even for random reads by reading$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1702: FILE: fs/ext3/inode.c:3672:
+ * ^Iahead one indirect block since reads of size >=512KB have at least 12%$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1703: FILE: fs/ext3/inode.c:3673:
+ * ^Ichance of spanning two indirect blocks.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1716: FILE: fs/ext3/inode.c:3686:
+	BUG_ON(depth <= 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1717: FILE: fs/ext3/inode.c:3687:
+	BUG_ON(!chain[depth-2].key);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1717: FILE: fs/ext3/inode.c:3687:
+	BUG_ON(!chain[depth-2].key);
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1722: FILE: fs/ext3/inode.c:3692:
+	ind_blocks = chain[depth-2].p;
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1725: FILE: fs/ext3/inode.c:3695:
+		printk(KERN_ERR "Failed to get block %u for sb %p\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1730: FILE: fs/ext3/inode.c:3700:
+	BUG_ON(first_bh->b_size != sb->s_blocksize);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1750: FILE: fs/ext3/inode.c:3720:
+					     offsets[depth-2]);
 					                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1776: FILE: fs/ext3/inode.c:3746:
+					     offsets[depth-2]);
 					                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1778: FILE: fs/ext3/inode.c:3748:
+		if ((ind_blocks - (__le32 *)chain[depth-2].bh->b_data) >= 1) {
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1789: FILE: fs/ext3/inode.c:3759:
+				*err = ext3_read_indblocks_sync(sb, ind_blocks,
+							 max_read, first_bh, 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1810: FILE: fs/ext3/inode.c:3780:
+					ext3_read_indblocks_async(sb,
+							&ind_blocks[1],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1844: FILE: fs/ext3/inode.c:3814:
+	BUG_ON(!buffer_uptodate(first_bh));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1853: FILE: fs/ext3/inode.c:3823:
+	if (*err) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1856: FILE: fs/ext3/inode.c:3826:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#1878: FILE: fs/ext3/super.c:764:
+	Opt_grpquota, Opt_metacluster

CHECK:CAMELCASE: Avoid CamelCase: <Opt_metacluster>
#1878: FILE: fs/ext3/super.c:764:
+	Opt_grpquota, Opt_metacluster

CHECK:BRACES: braces {} should be used on all arms of this statement
#1904: FILE: fs/ext3/super.c:1684:
+	if (test_opt(sb, METACLUSTER)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1908: FILE: fs/ext3/super.c:1688:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1918: FILE: fs/ext3/super.c:1800:
+	if (test_opt(sb, METACLUSTER)) {
[...]
+	} else
[...]

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1919: FILE: fs/ext3/super.c:1801:
+		sbi->s_bginfo = kmalloc(sbi->s_groups_count *
+					sizeof(*sbi->s_bginfo), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1922: FILE: fs/ext3/super.c:1804:
+			printk(KERN_ERR "EXT3-fs: not enough memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1922: FILE: fs/ext3/super.c:1804:
+		if (!sbi->s_bginfo) {
+			printk(KERN_ERR "EXT3-fs: not enough memory\n");

CHECK:BRACES: Unbalanced braces around else statement
#1927: FILE: fs/ext3/super.c:1809:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2053: FILE: include/linux/ext3_fs.h:800:
+extern int ext3_new_blocks(handle_t *handle, struct inode *inode,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2054: FILE: include/linux/ext3_fs.h:801:
+extern int ext3_new_blocks(handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, int indirect_blks, int blks,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000337081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 103 warnings, 65 checks, 1930 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000337081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
