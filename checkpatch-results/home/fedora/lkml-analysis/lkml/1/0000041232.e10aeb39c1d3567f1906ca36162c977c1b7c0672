WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
echo -n "add system_u:object_r:telnetd_port_t:s0 6 22 22" > /selinux/portcon

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: security/selinux/selinuxfs.c:258:
+static ssize_t sel_write_ocon_port(struct file *file, const char __user *buf,
+				 size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: security/selinux/selinuxfs.c:293:
+	length = sscanf(page, "%3s %255s %u %u %u", command, scontext,
+			 &protocol, &low, &high);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: security/selinux/selinuxfs.c:306:
+		length = security_ocon_port_add(protocol, low, high, sid,
+						 scontext);

CHECK:BRACES: Unbalanced braces around else statement
#174: FILE: security/selinux/selinuxfs.c:311:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#184: FILE: security/selinux/selinuxfs.c:321:
+	free_page((unsigned long) page);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#190: FILE: security/selinux/selinuxfs.c:327:
+	free_page((unsigned long) page);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#195: FILE: security/selinux/selinuxfs.c:332:
+static ssize_t sel_read_ocon_port(struct file *filp, char __user *buf,
                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: security/selinux/selinuxfs.c:333:
+static ssize_t sel_read_ocon_port(struct file *filp, char __user *buf,
+				   size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#221: FILE: security/selinux/selinuxfs.c:1694:
+		[SEL_OCON_PORT] = {"portcon", &sel_ocon_port_ops, S_IRUSR|S_IWUSR},
 		                                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#221: FILE: security/selinux/selinuxfs.c:1694:
+		[SEL_OCON_PORT] = {"portcon", &sel_ocon_port_ops, S_IRUSR|S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: security/selinux/ss/services.c:1831:
+int security_ocon_port_add(u16 protocol, u16 low, u16 high, u32 sid,
+							 char *scontext)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*add)...) over kzalloc(sizeof(struct ocontext)...)
#239: FILE: security/selinux/ss/services.c:1836:
+	struct ocontext *add = kzalloc(sizeof(struct ocontext), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: security/selinux/ss/services.c:1838:
+	if (!add)
[...]
+	else if (low > high) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: security/selinux/ss/services.c:1847:
+	rc = string_to_context_struct(&policydb, &sidtab, scontext,
+					 strlen(scontext), &ctx, sid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#265: FILE: security/selinux/ss/services.c:1862:
+			printk(KERN_DEBUG "Duplicate netport %d - %d.. "

WARNING:SPLIT_STRING: quoted string split across lines
#266: FILE: security/selinux/ss/services.c:1863:
+			printk(KERN_DEBUG "Duplicate netport %d - %d.. "
+					  "changing permissions\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: security/selinux/ss/services.c:1888:
+int security_ocon_port_del(u16 protocol, u16 low, u16 high, u32 sid,
+							char *scontext)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: security/selinux/ss/services.c:1899:
+	rc = string_to_context_struct(&policydb, &sidtab, scontext,
+					 strlen(scontext), &ctx, sid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!before_c"
#315: FILE: security/selinux/ss/services.c:1912:
+			if (before_c == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#325: FILE: security/selinux/ss/services.c:1922:
+	if (c == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#326: FILE: security/selinux/ss/services.c:1923:
+		printk(KERN_DEBUG "Netport not found %d - %d\n", low, high);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!policydb.ocontexts[OCON_PORT]"
#348: FILE: security/selinux/ss/services.c:1945:
+	if (policydb.ocontexts[OCON_PORT] == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around c->context[0]
#352: FILE: security/selinux/ss/services.c:1949:
+		rc = context_struct_to_string(&(c->context[0]), &scontext,

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: security/selinux/ss/services.c:1963:
+		snprintf(addline, line_size, "%u %u-%u %s\n",
+			c->u.port.protocol, c->u.port.low_port,

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#370: FILE: security/selinux/ss/services.c:1967:
+		buf_tmp = krealloc(buf_tmp, buf_size, GFP_KERNEL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041232.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 19 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041232.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
