CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: fs/ext4/extents.c:1028:
+ext4_ext_search_left(struct inode *inode, struct ext4_ext_path *path,
+			ext4_lblk_t *logical, ext4_fsblk_t *phys)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: fs/ext4/extents.c:1034:
+	BUG_ON(path == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#108: FILE: fs/ext4/extents.c:1034:
+	BUG_ON(path == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path->p_ext"
#112: FILE: fs/ext4/extents.c:1038:
+	if (depth == 0 && path->p_ext == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#117: FILE: fs/ext4/extents.c:1043:
+	 * first one in the file */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: fs/ext4/extents.c:1047:
+		BUG_ON(EXT_FIRST_EXTENT(path[depth].p_hdr) != ex);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: fs/ext4/extents.c:1050:
+			BUG_ON(ix != EXT_FIRST_INDEX(path[depth].p_hdr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: fs/ext4/extents.c:1055:
+	BUG_ON(*logical < le32_to_cpu(ex->ee_block) + le16_to_cpu(ex->ee_len));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: fs/ext4/extents.c:1071:
+ext4_ext_search_right(struct inode *inode, struct ext4_ext_path *path,
+			ext4_lblk_t *logical, ext4_fsblk_t *phys)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: fs/ext4/extents.c:1080:
+	BUG_ON(path == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#154: FILE: fs/ext4/extents.c:1080:
+	BUG_ON(path == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path->p_ext"
#158: FILE: fs/ext4/extents.c:1084:
+	if (depth == 0 && path->p_ext == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#163: FILE: fs/ext4/extents.c:1089:
+	 * first one in the file */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: fs/ext4/extents.c:1093:
+		BUG_ON(EXT_FIRST_EXTENT(path[depth].p_hdr) != ex);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#170: FILE: fs/ext4/extents.c:1096:
+			BUG_ON(ix != EXT_FIRST_INDEX(path[depth].p_hdr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: fs/ext4/extents.c:1103:
+	BUG_ON(*logical < le32_to_cpu(ex->ee_block) + le16_to_cpu(ex->ee_len));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: fs/ext4/extents.c:1122:
+		 * found no index to the right */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#202: FILE: fs/ext4/extents.c:1128:
+	 * block to the right */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#207: FILE: fs/ext4/extents.c:1133:
+		if (bh == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#220: FILE: fs/ext4/extents.c:1146:
+	if (bh == NULL)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#233: FILE: fs/ext4/extents.c:1159:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/linux/ext4_fs_extents.h:224:
+extern int ext4_ext_search_left(struct inode *, struct ext4_ext_path *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#247: FILE: include/linux/ext4_fs_extents.h:224:
+extern int ext4_ext_search_left(struct inode *, struct ext4_ext_path *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_ext_path *' should also have an identifier name
#247: FILE: include/linux/ext4_fs_extents.h:224:
+extern int ext4_ext_search_left(struct inode *, struct ext4_ext_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_lblk_t *' should also have an identifier name
#247: FILE: include/linux/ext4_fs_extents.h:224:
+extern int ext4_ext_search_left(struct inode *, struct ext4_ext_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_fsblk_t *' should also have an identifier name
#247: FILE: include/linux/ext4_fs_extents.h:224:
+extern int ext4_ext_search_left(struct inode *, struct ext4_ext_path *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: include/linux/ext4_fs_extents.h:225:
+extern int ext4_ext_search_left(struct inode *, struct ext4_ext_path *,
+						ext4_lblk_t *, ext4_fsblk_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: include/linux/ext4_fs_extents.h:226:
+extern int ext4_ext_search_right(struct inode *, struct ext4_ext_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#249: FILE: include/linux/ext4_fs_extents.h:226:
+extern int ext4_ext_search_right(struct inode *, struct ext4_ext_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_ext_path *' should also have an identifier name
#249: FILE: include/linux/ext4_fs_extents.h:226:
+extern int ext4_ext_search_right(struct inode *, struct ext4_ext_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_lblk_t *' should also have an identifier name
#249: FILE: include/linux/ext4_fs_extents.h:226:
+extern int ext4_ext_search_right(struct inode *, struct ext4_ext_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_fsblk_t *' should also have an identifier name
#249: FILE: include/linux/ext4_fs_extents.h:226:
+extern int ext4_ext_search_right(struct inode *, struct ext4_ext_path *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: include/linux/ext4_fs_extents.h:227:
+extern int ext4_ext_search_right(struct inode *, struct ext4_ext_path *,
+						ext4_lblk_t *, ext4_fsblk_t *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333603.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 13 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333603.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
