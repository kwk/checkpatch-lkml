WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#79: 
> > It adds a tunable oom.victim to the oom cgroup. The oom killer will kill

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#288: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: Documentation/cgroups/oom.txt:9:
+/proc/<pid>/oom_adj. Giving it a high score will increase the likelihood of $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: Documentation/cgroups/oom.txt:10:
+this process being killed by the oom-killer.  Valid values are in the range $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: Documentation/cgroups/oom.txt:22:
+is calculated as the highest oom.priority along its path. The oom killer $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#315: FILE: Documentation/cgroups/oom.txt:22:
would

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: Documentation/cgroups/oom.txt:23:
+kill all the processes in a cgroup with a higher oom.effective_priority $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: Documentation/cgroups/oom.txt:26:
+heuristics would be applied. The /proc/<pid>/oom_adj still helps adjusting $

WARNING:TYPO_SPELLING: 'unnecesarily' may be misspelled - perhaps 'unnecessarily'?
#326: FILE: Documentation/cgroups/oom.txt:31:
+get killed unnecesarily.
            ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#351: FILE: include/linux/oomcontrol.h:1:
+#ifndef _LINUX_OOMCONTROL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: include/linux/oomcontrol.h:6:
+struct oom_cgroup { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: include/linux/oomcontrol.h:11:
+^I */  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: include/linux/oomcontrol.h:16:
+^I */  $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#394: FILE: init/Kconfig:357:
+config CGROUP_OOM
+	bool "Oom cgroup subsystem"
+	depends on CGROUPS
+	help
+	  This provides a cgroup subsystem which aids controlling
+	  the order in which tasks whould be killed during
+	  out of memory situations.
+	
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'whould' may be misspelled - perhaps 'would'?
#399: FILE: init/Kconfig:362:
+	  the order in which tasks whould be killed during
 	                           ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: init/Kconfig:364:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: mm/Makefile:36:
+obj-$(CONFIG_CGROUP_OOM) += oomcontrol.o $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'taskpriority == chosenpriority'
#463: FILE: mm/oom_kill.c:277:
+		if (taskpriority > chosenpriority ||
+
+			(((taskpriority == chosenpriority) ||
+			  (cpuset_constrained &&
+				atomic_read(&honour_cpuset_constraint)))
+			 && points > *ppoints) ||
+
+			(taskpriority && !chosen)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: mm/oom_kill.c:278:
+		if (taskpriority > chosenpriority ||
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#468: FILE: mm/oom_kill.c:282:
+				atomic_read(&honour_cpuset_constraint)))
+			 && points > *ppoints) ||

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#471: FILE: mm/oom_kill.c:285:
+			(taskpriority && !chosen)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: mm/oom_kill.c:291:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: mm/oom_kill.c:544:
+static void __out_of_memory(gfp_t gfp_mask, int order, int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: mm/oom_kill.c:601:
+^I__out_of_memory(0, 0, 0); $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#537: FILE: mm/oomcontrol.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#545: FILE: mm/oomcontrol.c:9:
+#include <asm/atomic.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: mm/oomcontrol.c:18:
+        return container_of(cgroup_subsys_state(cgrp,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: mm/oomcontrol.c:18:
+        return container_of(cgroup_subsys_state(cgrp,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: mm/oomcontrol.c:19:
+                                oom_subsys_id), struct oom_cgroup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: mm/oomcontrol.c:19:
+                                oom_subsys_id), struct oom_cgroup,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: mm/oomcontrol.c:20:
+                                css);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: mm/oomcontrol.c:20:
+                                css);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#562: FILE: mm/oomcontrol.c:26:
+	return atomic_read(&(container_of(task_subsys_state(p,oom_subsys_id),
 	                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: mm/oomcontrol.c:32:
+static struct cgroup_subsys_state *oom_create(struct cgroup_subsys *ss,
+						   struct cgroup *cont)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont->parent"
#581: FILE: mm/oomcontrol.c:45:
+	if (cont->parent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: mm/oomcontrol.c:52:
+^I^Iparent_effective_priority = $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: mm/oomcontrol.c:56:
+		atomic_set(&oom_css->effective_priority,
+					parent_effective_priority);

ERROR:SPACING: space prohibited after that open parenthesis '('
#608: FILE: mm/oomcontrol.c:72:
+	atomic_set( &(oom_css_from_cgroup(cgrp))->effective_priority, val);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#632: FILE: mm/oomcontrol.c:96:
+		if (curr == 0 || cgrp == curr) goto out;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: mm/oomcontrol.c:100:
+			curr = list_entry(curr->sibling.next,
+						struct cgroup, sibling);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#646: FILE: mm/oomcontrol.c:110:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#653: FILE: mm/oomcontrol.c:117:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: mm/oomcontrol.c:121:
+	atomic_set(&oom_css_from_cgroup(cgrp)->effective_priority,
+							effective_priority);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: mm/oomcontrol.c:141:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#677: FILE: mm/oomcontrol.c:141:
+	} else 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#679: FILE: mm/oomcontrol.c:143:
+				effective_priority,effective_priority);
 				                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: mm/oomcontrol.c:147:
+		curr = list_first_entry(&curr->children,
+						struct cgroup, sibling);

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: mm/oomcontrol.c:155:
+       ^I        ^Ieffective_priority =$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#691: FILE: mm/oomcontrol.c:155:
+       ^I        ^Ieffective_priority =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: mm/oomcontrol.c:155:
+       ^I        ^Ieffective_priority =$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#692: FILE: mm/oomcontrol.c:156:
+			  atomic_read(&oom_css_from_cgroup(

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: mm/oomcontrol.c:159:
+        ^I^Ieffective_priority = val;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#695: FILE: mm/oomcontrol.c:159:
+        ^I^Ieffective_priority = val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: mm/oomcontrol.c:159:
+        ^I^Ieffective_priority = val;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: mm/oomcontrol.c:163:
+			curr = list_entry(curr->sibling.next,
+						struct cgroup, sibling);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: mm/oomcontrol.c:171:
+^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#710: FILE: mm/oomcontrol.c:174:
+
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: mm/oomcontrol.c:177:
+                                       u64 val)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: mm/oomcontrol.c:177:
+static int oom_priority_write(struct cgroup *cgrp, struct cftype *cft,
+                                       u64 val)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: mm/oomcontrol.c:177:
+                                       u64 val)$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#722: FILE: mm/oomcontrol.c:186:
+	effective_priority = atomic_read(

CHECK:BRACES: braces {} should be used on all arms of this statement
#728: FILE: mm/oomcontrol.c:192:
+	if (val > effective_priority)
[...]
+	else if (effective_priority == old_priority &&
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: mm/oomcontrol.c:195:
+	else if (effective_priority == old_priority &&
+						val < effective_priority) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#733: FILE: mm/oomcontrol.c:197:
+		struct oom_cgroup *oom_css = NULL;
+		if (cgrp->parent)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: mm/oomcontrol.c:205:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: mm/oomcontrol.c:206:
+^I^Iif (cgrp->parent == NULL || $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#742: FILE: mm/oomcontrol.c:206:
+		if (cgrp->parent == NULL || 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: mm/oomcontrol.c:207:
+		if (cgrp->parent == NULL || 
+				parent_effective_priority < effective_priority) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#748: FILE: mm/oomcontrol.c:212:
+			if (cgrp->parent == NULL || effective_priority < val

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: mm/oomcontrol.c:213:
+^I^I^I^I ^I|| parent_effective_priority < val)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#749: FILE: mm/oomcontrol.c:213:
+^I^I^I^I ^I|| parent_effective_priority < val)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#749: FILE: mm/oomcontrol.c:213:
+			if (cgrp->parent == NULL || effective_priority < val
+				 	|| parent_effective_priority < val)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: mm/oomcontrol.c:220:
+^I^I} $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#756: FILE: mm/oomcontrol.c:220:
+
+		} 

ERROR:CODE_INDENT: code indent should use tabs where possible
#758: FILE: mm/oomcontrol.c:222:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: mm/oomcontrol.c:222:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: mm/oomcontrol.c:225:
+static u64 oom_effective_priority_read(struct cgroup *cgrp, struct cftype $

ERROR:CODE_INDENT: code indent should use tabs where possible
#764: FILE: mm/oomcontrol.c:227:
+        u64 priority = atomic_read(&(oom_css_from_cgroup(cgrp))-$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: mm/oomcontrol.c:227:
+        u64 priority = atomic_read(&(oom_css_from_cgroup(cgrp))-$

CHECK:SPACING: space preferred before that '-' (ctx:VxE)
#764: FILE: mm/oomcontrol.c:227:
+        u64 priority = atomic_read(&(oom_css_from_cgroup(cgrp))-
                                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#767: FILE: mm/oomcontrol.c:229:
+        return priority;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: mm/oomcontrol.c:229:
+        return priority;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#772: FILE: mm/oomcontrol.c:234:
+        u64 priority = atomic_read(&(oom_css_from_cgroup(cgrp))->priority);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: mm/oomcontrol.c:234:
+        u64 priority = atomic_read(&(oom_css_from_cgroup(cgrp))->priority);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: mm/oomcontrol.c:236:
+        return priority;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: mm/oomcontrol.c:236:
+        return priority;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: mm/oomcontrol.c:240:
+static int oom_cpuset_write(struct cgroup *cgrp, struct cftype *cft,
+					u64 val)

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: mm/oomcontrol.c:250:
+        return atomic_read(&honour_cpuset_constraint);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: mm/oomcontrol.c:250:
+        return atomic_read(&honour_cpuset_constraint);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#812: FILE: mm/oomcontrol.c:274:
+                                struct cgroup *cont)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: mm/oomcontrol.c:274:
+static int oom_populate(struct cgroup_subsys *ss,
+                                struct cgroup *cont)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: mm/oomcontrol.c:274:
+                                struct cgroup *cont)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: mm/oomcontrol.c:279:
+	ret = cgroup_add_files(cont, ss, oom_cgroup_files,
+				ARRAY_SIZE(oom_cgroup_files));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont->parent"
#818: FILE: mm/oomcontrol.c:280:
+	if (!ret && cont->parent == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: mm/oomcontrol.c:282:
+		ret = cgroup_add_files(cont, ss, oom_cgroup_root_only_files,
+				ARRAY_SIZE(oom_cgroup_root_only_files));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 39 errors, 25 warnings, 31 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
