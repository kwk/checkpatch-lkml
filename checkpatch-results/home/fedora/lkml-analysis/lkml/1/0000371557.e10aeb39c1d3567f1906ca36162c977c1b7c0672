WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: security/tomoyo/realpath.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#41: FILE: security/tomoyo/realpath.c:2:
+ * security/tomoyo/realpath.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#55: FILE: security/tomoyo/realpath.c:16:
+#include <asm/atomic.h>

CHECK:SPACING: No space is necessary after a cast
#74: FILE: security/tomoyo/realpath.c:35:
+		c = *(unsigned char *) cp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#84: FILE: security/tomoyo/realpath.c:45:
+			*--end = (char) c;

WARNING:SPACING: space prohibited before semicolon
#101: FILE: security/tomoyo/realpath.c:62:
+out: ;

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#118: FILE: security/tomoyo/realpath.c:79:
+ * Unlike d_path(), this function traverses upto the root directory of
                                             ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#173: FILE: security/tomoyo/realpath.c:134:
+		    parent->d_sb->s_magic == PROC_SUPER_MAGIC) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#175: FILE: security/tomoyo/realpath.c:136:
+			const pid_t pid = (pid_t) simple_strtoul(sp, &ep, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#175: FILE: security/tomoyo/realpath.c:136:
+			const pid_t pid = (pid_t) simple_strtoul(sp, &ep, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#182: FILE: security/tomoyo/realpath.c:143:
+
+		}

WARNING:SPACING: space prohibited before semicolon
#207: FILE: security/tomoyo/realpath.c:168:
+out: ;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#283: FILE: security/tomoyo/realpath.c:244:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#285: FILE: security/tomoyo/realpath.c:246:
+	if (pathname && path_lookup(pathname, LOOKUP_FOLLOW, &nd) == 0) {
 	                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#286: FILE: security/tomoyo/realpath.c:247:
+		char *buf = tmy_realpath_dentry(nd.dentry, nd.mnt);
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#286: FILE: security/tomoyo/realpath.c:247:
+		char *buf = tmy_realpath_dentry(nd.dentry, nd.mnt);
 		                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#288: FILE: security/tomoyo/realpath.c:249:
+		path_release(&nd);
 		              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#310: FILE: security/tomoyo/realpath.c:271:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#312: FILE: security/tomoyo/realpath.c:273:
+	if (pathname && path_lookup(pathname, 0, &nd) == 0) {
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#313: FILE: security/tomoyo/realpath.c:274:
+		char *buf = tmy_realpath_dentry(nd.dentry, nd.mnt);
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#313: FILE: security/tomoyo/realpath.c:274:
+		char *buf = tmy_realpath_dentry(nd.dentry, nd.mnt);
 		                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#315: FILE: security/tomoyo/realpath.c:276:
+		path_release(&nd);
 		              ^^

WARNING:SPACING: space prohibited before semicolon
#361: FILE: security/tomoyo/realpath.c:322:
+out: ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#441: FILE: security/tomoyo/realpath.c:402:
+			printk(KERN_INFO "ERROR: "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#441: FILE: security/tomoyo/realpath.c:402:
+		if (!ptr) {
+			printk(KERN_INFO "ERROR: "

WARNING:SPLIT_STRING: quoted string split across lines
#442: FILE: security/tomoyo/realpath.c:403:
+			printk(KERN_INFO "ERROR: "
+			       "Out of memory for tmy_alloc_element().\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tmy_alloc_element', this function's name, in a string
#442: FILE: security/tomoyo/realpath.c:403:
+			       "Out of memory for tmy_alloc_element().\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#460: FILE: security/tomoyo/realpath.c:421:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#462: FILE: security/tomoyo/realpath.c:423:
+				       "WARNING: Reserved memory was tainted! "
+				       "The system might go wrong.\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#467: FILE: security/tomoyo/realpath.c:428:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#529: FILE: security/tomoyo/realpath.c:490:
+		printk(KERN_INFO "ERROR: Name too long for tmy_save_name().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tmy_save_name', this function's name, in a string
#529: FILE: security/tomoyo/realpath.c:490:
+		printk(KERN_INFO "ERROR: Name too long for tmy_save_name().\n");

CHECK:SPACING: No space is necessary after a cast
#533: FILE: security/tomoyo/realpath.c:494:
+	hash = full_name_hash((const unsigned char *) name, len - 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#576: FILE: security/tomoyo/realpath.c:537:
+		char *cp;
+		cp = kzalloc(PAGE_SIZE, GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#583: FILE: security/tomoyo/realpath.c:544:
+out2: ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#584: FILE: security/tomoyo/realpath.c:545:
+			printk(KERN_INFO

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tmy_save_name', this function's name, in a string
#585: FILE: security/tomoyo/realpath.c:546:
+			       "ERROR: Out of memory for tmy_save_name().\n");

WARNING:SPACING: space prohibited before semicolon
#612: FILE: security/tomoyo/realpath.c:573:
+out: ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#642: FILE: security/tomoyo/realpath.c:603:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#673: FILE: security/tomoyo/realpath.c:634:
+		printk(KERN_INFO "ERROR: "

WARNING:SPLIT_STRING: quoted string split across lines
#674: FILE: security/tomoyo/realpath.c:635:
+		printk(KERN_INFO "ERROR: "
+		       "kmalloc(): Out of memory for tmy_alloc().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tmy_alloc', this function's name, in a string
#674: FILE: security/tomoyo/realpath.c:635:
+		       "kmalloc(): Out of memory for tmy_alloc().\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#681: FILE: security/tomoyo/realpath.c:642:
+		printk(KERN_INFO "ERROR: "

WARNING:SPLIT_STRING: quoted string split across lines
#682: FILE: security/tomoyo/realpath.c:643:
+		printk(KERN_INFO "ERROR: "
+		       "kmem_cache_alloc(): Out of memory for tmy_alloc().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tmy_alloc', this function's name, in a string
#682: FILE: security/tomoyo/realpath.c:643:
+		       "kmem_cache_alloc(): Out of memory for tmy_alloc().\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#686: FILE: security/tomoyo/realpath.c:647:
+	} else {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#707: FILE: security/tomoyo/realpath.c:668:
+	struct cache_entry *entry;
+	entry = container_of(head, struct cache_entry, rcu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#726: FILE: security/tomoyo/realpath.c:687:
+	u8 found = 0;
+	if (!p)

CHECK:BRACES: braces {} should be used on all arms of this statement
#747: FILE: security/tomoyo/realpath.c:708:
+	if (found) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#750: FILE: security/tomoyo/realpath.c:711:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#751: FILE: security/tomoyo/realpath.c:712:
+		printk(KERN_INFO "BUG: tmy_free() with invalid pointer.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tmy_free', this function's name, in a string
#751: FILE: security/tomoyo/realpath.c:712:
+		printk(KERN_INFO "BUG: tmy_free() with invalid pointer.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371557.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 41 warnings, 11 checks, 713 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371557.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
