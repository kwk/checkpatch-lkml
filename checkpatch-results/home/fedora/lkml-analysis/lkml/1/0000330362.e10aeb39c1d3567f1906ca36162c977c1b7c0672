WARNING:LEADING_SPACE: please, no spaces at the start of a line
#46: FILE: arch/x86/math-emu/errors.c:45:
+  math_abort(FPU_info, SIGILL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/x86/math-emu/errors.c:61:
+  if (FPU_CS == __USER_CS)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#63: FILE: arch/x86/math-emu/errors.c:61:
+  if (FPU_CS == __USER_CS)
[...]
 #define MAX_PRINTED_BYTES 20

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: arch/x86/math-emu/errors.c:64:
+      for (i = 0; i < MAX_PRINTED_BYTES; i++)$

WARNING:TABSTOP: Statements should start on a tabstop
#71: FILE: arch/x86/math-emu/errors.c:67:
+	  if ((byte1 & 0xf8) == 0xd8)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#71: FILE: arch/x86/math-emu/errors.c:67:
+	  if ((byte1 & 0xf8) == 0xd8)
 	    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: arch/x86/math-emu/errors.c:75:
+      if (i == MAX_PRINTED_BYTES)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#95: FILE: arch/x86/math-emu/errors.c:96:
+if (partial_status & SW_Backward)
 printk("SW: backward compatibility\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#98: FILE: arch/x86/math-emu/errors.c:98:
+if (partial_status & SW_C3)
 printk("SW: condition bit 3\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#101: FILE: arch/x86/math-emu/errors.c:100:
+if (partial_status & SW_C2)
 printk("SW: condition bit 2\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#104: FILE: arch/x86/math-emu/errors.c:102:
+if (partial_status & SW_C1)
 printk("SW: condition bit 1\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#107: FILE: arch/x86/math-emu/errors.c:104:
+if (partial_status & SW_C0)
 printk("SW: condition bit 0\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#110: FILE: arch/x86/math-emu/errors.c:106:
+if (partial_status & SW_Summary)
 printk("SW: exception summary\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#113: FILE: arch/x86/math-emu/errors.c:108:
+if (partial_status & SW_Stack_Fault)
 printk("SW: stack fault\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#116: FILE: arch/x86/math-emu/errors.c:110:
+if (partial_status & SW_Precision)
 printk("SW: loss of precision\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#119: FILE: arch/x86/math-emu/errors.c:112:
+if (partial_status & SW_Underflow)
 printk("SW: underflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#122: FILE: arch/x86/math-emu/errors.c:114:
+if (partial_status & SW_Overflow)
 printk("SW: overflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#125: FILE: arch/x86/math-emu/errors.c:116:
+if (partial_status & SW_Zero_Div)
 printk("SW: divide by zero\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#128: FILE: arch/x86/math-emu/errors.c:118:
+if (partial_status & SW_Denorm_Op)
 printk("SW: denormalized operand\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#131: FILE: arch/x86/math-emu/errors.c:120:
+if (partial_status & SW_Invalid)
 printk("SW: invalid operation\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: arch/x86/math-emu/errors.c:144:
+  for (i = 0; i < 8; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#149: FILE: arch/x86/math-emu/errors.c:144:
+  for (i = 0; i < 8; i++)
     {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/x86/math-emu/errors.c:277:
+  if (n & EX_INTERNAL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#158: FILE: arch/x86/math-emu/errors.c:277:
+  if (n & EX_INTERNAL)
     {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/x86/math-emu/errors.c:291:
+      if (partial_status & ~control_word & CW_Exceptions)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: arch/x86/math-emu/errors.c:293:
+      if (n & (SW_Stack_Fault | EX_Precision))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#170: FILE: arch/x86/math-emu/errors.c:293:
+      if (n & (SW_Stack_Fault | EX_Precision))
 	{

WARNING:TABSTOP: Statements should start on a tabstop
#173: FILE: arch/x86/math-emu/errors.c:295:
+	  if (!(n & SW_C1))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#173: FILE: arch/x86/math-emu/errors.c:295:
+	  if (!(n & SW_C1))
[...]
 	    partial_status &= ~SW_C1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/x86/math-emu/errors.c:303:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#182: FILE: arch/x86/math-emu/errors.c:303:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL))
[...]
       /* My message from the sponsor */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n == EX_INTERNAL'
#182: FILE: arch/x86/math-emu/errors.c:303:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/x86/math-emu/errors.c:311:
+      for (i = 0; exception_names[i].type; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#194: FILE: arch/x86/math-emu/errors.c:312:
+	if ((exception_names[i].type & n) == exception_names[i].type)
 	  break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: arch/x86/math-emu/errors.c:324:
+      if (n == EX_INTERNAL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#208: FILE: arch/x86/math-emu/errors.c:324:
+      if (n == EX_INTERNAL)
 	{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: arch/x86/math-emu/errors.c:343:
+  math_abort(FPU_info, SIGFPE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/x86/math-emu/errors.c:361:
+  if (!signalling)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#226: FILE: arch/x86/math-emu/errors.c:361:
+  if (!signalling)
     {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/x86/math-emu/errors.c:363:
+      if (!isNaN)  /* pseudo-NaN, or other unsupported? */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#229: FILE: arch/x86/math-emu/errors.c:363:
+      if (!isNaN)  /* pseudo-NaN, or other unsupported? */
 	{

CHECK:CAMELCASE: Avoid CamelCase: <isNaN>
#229: FILE: arch/x86/math-emu/errors.c:363:
+      if (!isNaN)  /* pseudo-NaN, or other unsupported? */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TABSTOP: Statements should start on a tabstop
#232: FILE: arch/x86/math-emu/errors.c:365:
+	  if (control_word & CW_Invalid)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#232: FILE: arch/x86/math-emu/errors.c:365:
+	  if (control_word & CW_Invalid)
[...]
 	      /* Masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/x86/math-emu/errors.c:376:
+  if (control_word & CW_Invalid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#241: FILE: arch/x86/math-emu/errors.c:376:
+  if (control_word & CW_Invalid)
[...]
       /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: arch/x86/math-emu/errors.c:379:
+      if (!(a->sigh & 0x80000000))  /* pseudo-NaN ? */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#245: FILE: arch/x86/math-emu/errors.c:379:
+      if (!(a->sigh & 0x80000000))  /* pseudo-NaN ? */
 	{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: arch/x86/math-emu/errors.c:405:
+  if (taga == TAG_Special)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#254: FILE: arch/x86/math-emu/errors.c:405:
+  if (taga == TAG_Special)
     taga = FPU_Special(a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: arch/x86/math-emu/errors.c:407:
+  if (tagb == TAG_Special)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#257: FILE: arch/x86/math-emu/errors.c:407:
+  if (tagb == TAG_Special)
     tagb = FPU_Special(b);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: arch/x86/math-emu/errors.c:415:
+  if (unsupported)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#266: FILE: arch/x86/math-emu/errors.c:415:
+  if (unsupported)
     {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: arch/x86/math-emu/errors.c:417:
+      if (control_word & CW_Invalid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#269: FILE: arch/x86/math-emu/errors.c:417:
+      if (control_word & CW_Invalid)
[...]
 	  /* Masked response */

WARNING:TABSTOP: Statements should start on a tabstop
#278: FILE: arch/x86/math-emu/errors.c:432:
+	  if (significand(b) > significand(a))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#278: FILE: arch/x86/math-emu/errors.c:432:
+	  if (significand(b) > significand(a))
 	    x = b;

WARNING:TABSTOP: Statements should start on a tabstop
#281: FILE: arch/x86/math-emu/errors.c:434:
+	  else if (significand(b) == significand(a))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: arch/x86/math-emu/errors.c:464:
+  if ((!signalling) || (control_word & CW_Invalid))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#290: FILE: arch/x86/math-emu/errors.c:464:
+  if ((!signalling) || (control_word & CW_Invalid))
     {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!signalling'
#290: FILE: arch/x86/math-emu/errors.c:464:
+  if ((!signalling) || (control_word & CW_Invalid))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: arch/x86/math-emu/errors.c:466:
+      if (!x)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: arch/x86/math-emu/errors.c:469:
+      if (!(x->sigh & 0x80000000))  /* pseudo-NaN ? */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: arch/x86/math-emu/errors.c:474:
+      if (!signalling)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: arch/x86/math-emu/errors.c:494:
+  if (control_word & CW_Invalid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#314: FILE: arch/x86/math-emu/errors.c:494:
+  if (control_word & CW_Invalid)
[...]
       /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: arch/x86/math-emu/errors.c:511:
+  if (control_word & CW_ZeroDiv)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#329: FILE: arch/x86/math-emu/errors.c:511:
+  if (control_word & CW_ZeroDiv)
[...]
       /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: arch/x86/math-emu/errors.c:529:
+  if (control_word & CW_Precision)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#346: FILE: arch/x86/math-emu/errors.c:529:
+  if (control_word & CW_Precision)
     {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: arch/x86/math-emu/errors.c:546:
+  if (control_word & CW_Precision)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#355: FILE: arch/x86/math-emu/errors.c:546:
+  if (control_word & CW_Precision)
     partial_status |= (SW_Precision | SW_C1);   /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: arch/x86/math-emu/errors.c:556:
+  if (control_word & CW_Precision)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#364: FILE: arch/x86/math-emu/errors.c:556:
+  if (control_word & CW_Precision)
     {   /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: arch/x86/math-emu/errors.c:568:
+  if (control_word & CW_Denormal)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#373: FILE: arch/x86/math-emu/errors.c:568:
+  if (control_word & CW_Denormal)
     {   /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: arch/x86/math-emu/errors.c:585:
+  if (control_word & CW_Overflow)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: arch/x86/math-emu/errors.c:599:
+  if (control_word & CW_Overflow)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: arch/x86/math-emu/errors.c:618:
+  if (control_word & CW_Underflow)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#400: FILE: arch/x86/math-emu/errors.c:618:
+  if (control_word & CW_Underflow)
[...]
       /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: arch/x86/math-emu/errors.c:621:
+      if (exponent16(dest) <= EXP_UNDER - 63)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#404: FILE: arch/x86/math-emu/errors.c:621:
+      if (exponent16(dest) <= EXP_UNDER - 63)
 	{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: arch/x86/math-emu/errors.c:639:
+  if (control_word & CW_Underflow)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#413: FILE: arch/x86/math-emu/errors.c:639:
+  if (control_word & CW_Underflow)
[...]
       /* The underflow exception is masked. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: arch/x86/math-emu/errors.c:654:
+ if (control_word & CW_Invalid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#422: FILE: arch/x86/math-emu/errors.c:654:
+ if (control_word & CW_Invalid)
[...]
       /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: arch/x86/math-emu/errors.c:671:
+ if (control_word & CW_Invalid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#431: FILE: arch/x86/math-emu/errors.c:671:
+ if (control_word & CW_Invalid)
[...]
       /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: arch/x86/math-emu/errors.c:687:
+ if (control_word & CW_Invalid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#440: FILE: arch/x86/math-emu/errors.c:687:
+ if (control_word & CW_Invalid)
[...]
       /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: arch/x86/math-emu/errors.c:703:
+ if (control_word & CW_Invalid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#449: FILE: arch/x86/math-emu/errors.c:703:
+ if (control_word & CW_Invalid)
[...]
       /* The masked response */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 90 warnings, 3 checks, 381 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
