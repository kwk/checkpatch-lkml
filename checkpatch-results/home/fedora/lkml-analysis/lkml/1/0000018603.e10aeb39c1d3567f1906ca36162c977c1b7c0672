WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: arch/x86/include/asm/xen.h:1:
+#ifndef ASM_X86__XEN_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: arch/x86/include/asm/xen.h:4:
+extern int xen_platform(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: arch/x86/include/asm/xen.h:5:
+extern void xen_set_feature_bits(struct cpuinfo_x86 *c);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: arch/x86/include/asm/xen/cpuid.h:1:
+/******************************************************************************

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#134: FILE: arch/x86/include/asm/xen/cpuid.h:66:
+#define XEN_CPUID_FEAT1_MMU_PT_UPDATE_PRESERVE_AD  (1u<<0)
                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: arch/x86/include/asm/xen/cpuid.h:66:
+#define XEN_CPUID_FEAT1_MMU_PT_UPDATE_PRESERVE_AD  (1u<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: arch/x86/kernel/cpu/xen.c:1:
+#define __XEN_INTERFACE_VERSION__ 0x00030207

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#204: FILE: arch/x86/kernel/cpu/xen.c:19:
+	volatile struct arch_spinlock *lock;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#227: FILE: arch/x86/kernel/cpu/xen.c:42:
+	spin_count = simple_strtoul(s, &s, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#230: FILE: arch/x86/kernel/cpu/xen.c:45:
+}
+early_param("spin_count", setup_spin_count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#240: FILE: arch/x86/kernel/cpu/xen.c:55:
+static void xen_spin_lock(volatile struct arch_spinlock *lock,

WARNING:MEMORY_BARRIER: memory barrier without comment
#255: FILE: arch/x86/kernel/cpu/xen.c:70:
+	smp_wmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#262: FILE: arch/x86/kernel/cpu/xen.c:77:
+		if (likely(cpu_online(raw_smp_processor_id()))
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#263: FILE: arch/x86/kernel/cpu/xen.c:78:
+		if (likely(cpu_online(raw_smp_processor_id()))
+		    && (per_cpu(runstate.state, lock->owner) != RUNSTATE_running

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#264: FILE: arch/x86/kernel/cpu/xen.c:79:
+		    && (per_cpu(runstate.state, lock->owner) != RUNSTATE_running
+			|| unlikely(!--count))) {

CHECK:BRACES: Unbalanced braces around else statement
#273: FILE: arch/x86/kernel/cpu/xen.c:88:
+		} else

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#292: FILE: arch/x86/kernel/cpu/xen.c:107:
+static void xen_spin_unlock(volatile struct arch_spinlock *lock,

WARNING:MEMORY_BARRIER: memory barrier without comment
#311: FILE: arch/x86/kernel/cpu/xen.c:126:
+		smp_rmb();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#313: FILE: arch/x86/kernel/cpu/xen.c:128:
+		if (spinning
+		    && (spinning->lock != lock || spinning->ticket != token))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#340: FILE: arch/x86/kernel/cpu/xen.c:155:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#353: FILE: arch/x86/kernel/cpu/xen.c:168:
+#if 0 /* So far, Xen sets this only for PV guests. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#363: FILE: arch/x86/kernel/cpu/xen.c:178:
+		if (ebx == XEN_CPUID_SIGNATURE_EBX
+		    && ecx == XEN_CPUID_SIGNATURE_ECX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#364: FILE: arch/x86/kernel/cpu/xen.c:179:
+		    && ecx == XEN_CPUID_SIGNATURE_ECX
+		    && edx == XEN_CPUID_SIGNATURE_EDX) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#367: FILE: arch/x86/kernel/cpu/xen.c:182:
+				printk(KERN_INFO "Running on Xen %u.%u\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#387: FILE: arch/x86/kernel/cpu/xen.c:202:
+	if (num_possible_cpus() <= 1
+	    || !spin_count

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#388: FILE: arch/x86/kernel/cpu/xen.c:203:
+	    || !spin_count
+	    || (c != &boot_cpu_data

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#389: FILE: arch/x86/kernel/cpu/xen.c:204:
+	    || (c != &boot_cpu_data
+		&& !boot_cpu_has(X86_FEATURE_SPINLOCK_YIELD)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#395: FILE: arch/x86/kernel/cpu/xen.c:210:
+		if (ebx == XEN_CPUID_SIGNATURE_EBX
+		    && ecx == XEN_CPUID_SIGNATURE_ECX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#396: FILE: arch/x86/kernel/cpu/xen.c:211:
+		    && ecx == XEN_CPUID_SIGNATURE_ECX
+		    && edx == XEN_CPUID_SIGNATURE_EDX)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#400: FILE: arch/x86/kernel/cpu/xen.c:215:
+	BUG_ON(first >= XEN_CPUID_LEAF(0x10000));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#403: FILE: arch/x86/kernel/cpu/xen.c:218:
+	BUG_ON(!eax);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#414: FILE: arch/x86/kernel/cpu/xen.c:229:
+		printk(KERN_WARNING

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#417: FILE: arch/x86/kernel/cpu/xen.c:232:
+		BUG_ON(boot_cpu_has(X86_FEATURE_SPINLOCK_YIELD));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#428: FILE: arch/x86/kernel/cpu/xen.c:243:
+			printk(KERN_WARNING

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#431: FILE: arch/x86/kernel/cpu/xen.c:246:
+			BUG_ON(boot_cpu_has(X86_FEATURE_SPINLOCK_YIELD));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#436: FILE: arch/x86/kernel/cpu/xen.c:251:
+		printk(KERN_INFO "CPU%u spinlock poll event channel: %u\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000018603.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 17 checks, 379 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000018603.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
