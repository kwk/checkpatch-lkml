WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#40: FILE: include/asm-x86_64/local.h:5:
+#include <asm/atomic.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#54: FILE: include/asm-x86_64/local.h:15:
+#define local_set(l,i)	atomic_long_set(&(l)->a, (i))
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#63: FILE: include/asm-x86_64/local.h:21:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#64: FILE: include/asm-x86_64/local.h:22:
+		:"m" (l->a.counter));
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#74: FILE: include/asm-x86_64/local.h:29:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#75: FILE: include/asm-x86_64/local.h:30:
+		:"m" (l->a.counter));
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#85: FILE: include/asm-x86_64/local.h:37:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#86: FILE: include/asm-x86_64/local.h:38:
+		:"ir" (i), "m" (l->a.counter));
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#96: FILE: include/asm-x86_64/local.h:45:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#97: FILE: include/asm-x86_64/local.h:46:
+		:"ir" (i), "m" (l->a.counter));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#109: FILE: include/asm-x86_64/local.h:58:
+static __inline__ int local_sub_and_test(long i, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#113: FILE: include/asm-x86_64/local.h:62:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#115: FILE: include/asm-x86_64/local.h:64:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#116: FILE: include/asm-x86_64/local.h:65:
+		:"ir" (i), "m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#128: FILE: include/asm-x86_64/local.h:77:
+static __inline__ int local_dec_and_test(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#132: FILE: include/asm-x86_64/local.h:81:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#134: FILE: include/asm-x86_64/local.h:83:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#135: FILE: include/asm-x86_64/local.h:84:
+		:"m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#147: FILE: include/asm-x86_64/local.h:96:
+static __inline__ int local_inc_and_test(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#151: FILE: include/asm-x86_64/local.h:100:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#153: FILE: include/asm-x86_64/local.h:102:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#154: FILE: include/asm-x86_64/local.h:103:
+		:"m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#167: FILE: include/asm-x86_64/local.h:116:
+static __inline__ int local_add_negative(long i, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#171: FILE: include/asm-x86_64/local.h:120:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#173: FILE: include/asm-x86_64/local.h:122:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#174: FILE: include/asm-x86_64/local.h:123:
+		:"ir" (i), "m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#185: FILE: include/asm-x86_64/local.h:134:
+static __inline__ long local_add_return(long i, local_t *l)

WARNING:LINE_SPACING: Missing a blank line after declarations
#188: FILE: include/asm-x86_64/local.h:137:
+	long __i = i;
+	__asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#188: FILE: include/asm-x86_64/local.h:137:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#190: FILE: include/asm-x86_64/local.h:139:
+		:"+r" (i), "+m" (l->a.counter)
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#195: FILE: include/asm-x86_64/local.h:144:
+static __inline__ long local_sub_return(long i, local_t *l)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#197: FILE: include/asm-x86_64/local.h:146:
+	return local_add_return(-i,l);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: include/asm-x86_64/local.h:149:
+#define local_inc_return(l)  (local_add_return(1,l))
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/asm-x86_64/local.h:150:
+#define local_dec_return(l)  (local_sub_return(1,l))
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#217: FILE: include/asm-x86_64/local.h:166:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#217: FILE: include/asm-x86_64/local.h:166:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#241: FILE: include/asm-x86_64/local.h:199:
+#define cpu_local_wrap_v(l)^I ^I\$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#285: FILE: include/asm-x86_64/system.h:212:
+static inline unsigned long __cmpxchg_local(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: include/asm-x86_64/system.h:213:
+static inline unsigned long __cmpxchg_local(volatile void *ptr,
+			unsigned long old, unsigned long new, int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: include/asm-x86_64/system.h:216:
+	unsigned long prev;
+	switch (size) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: include/asm-x86_64/system.h:248:
+#define cmpxchg_local(ptr,o,n)\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: include/asm-x86_64/system.h:248:
+#define cmpxchg_local(ptr,o,n)\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#321: FILE: include/asm-x86_64/system.h:248:
+#define cmpxchg_local(ptr,o,n)\
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
+					(unsigned long)(n),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/asm-x86_64/system.h:249:
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: include/asm-x86_64/system.h:250:
+					(unsigned long)(n),sizeof(*(ptr))))
 					                  ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 11 warnings, 9 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
