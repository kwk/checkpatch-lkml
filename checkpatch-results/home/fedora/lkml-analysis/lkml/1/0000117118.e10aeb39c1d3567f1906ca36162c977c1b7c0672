WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
(possibly marked-as-deleted) list elements and releases a lock when the process

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#378: FILE: security/tomoyo/common.c:1354:
+	struct tomoyo_domain_info *domain
+		= container_of(head->write_var1, struct tomoyo_domain_info,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#422: FILE: security/tomoyo/common.c:1388:
+	else if (sscanf(data, TOMOYO_KEYWORD_USE_PROFILE "%u", &profile) == 1
+		 && profile < TOMOYO_MAX_PROFILES) {

CHECK:BRACES: Unbalanced braces around else statement
#435: FILE: security/tomoyo/common.c:1393:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#531: FILE: security/tomoyo/common.c:1623:
+			if (!(acl->type & TOMOYO_ACL_DELETED)
+			    || atomic_read(&acl->entry.users))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: security/tomoyo/common.c:1641:
+			acl1 = container_of(acl,
+				    struct tomoyo_single_path_acl_record,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: security/tomoyo/common.c:1647:
+			acl2 = container_of(acl,
+				    struct tomoyo_double_path_acl_record,

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#579: FILE: security/tomoyo/common.c:1685:
+	if (strict_strtoul(data, 10, &profile) ||

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#586: FILE: security/tomoyo/common.c:1692:
+		domain->profile = (u8) profile;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "head->write_buf"
#659: FILE: security/tomoyo/common.c:2225:
+	const bool is_write = head->write_buf != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1270: FILE: security/tomoyo/domain.c:813:
+		printk(KERN_WARNING "TOMOYO-ERROR: Domain '%s' not defined.\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1279: FILE: security/tomoyo/domain.c:822:
+	BUG_ON(bprm->cred->security);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'otherwis' may be misspelled - perhaps 'otherwise'?
#1470: FILE: security/tomoyo/file.c:374:
+ * Returns pointer to "struct tomoyo_pattern_entry" if matched, NULL otherwis \
                                                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1730: FILE: security/tomoyo/file.c:1120:
+		struct tomoyo_pattern_entry *p
+			= tomoyo_get_file_pattern(filename);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1746: FILE: security/tomoyo/file.c:1371:
+		struct tomoyo_pattern_entry *p1
+			= tomoyo_get_file_pattern(buf1);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1748: FILE: security/tomoyo/file.c:1373:
+		struct tomoyo_pattern_entry *p2
+			= tomoyo_get_file_pattern(buf2);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1919: FILE: security/tomoyo/tomoyo.c:34:
+	struct tomoyo_domain_info *domain = cred->security;
+	if (domain)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117118.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 11 checks, 1778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117118.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
