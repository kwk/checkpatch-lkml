ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#59: FILE: drivers/base/core.c:747:
+void put_device_wait(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#65: FILE: drivers/base/core.c:753:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: drivers/base/core.c:859:
+void device_unregister_wait(struct device * dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#87: FILE: drivers/base/core.c:866:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: include/linux/device.h:493:
+extern void device_unregister_wait(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/device.h:493:
+extern void device_unregister_wait(struct device * dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: include/linux/device.h:539:
+extern void put_device_wait(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/device.h:539:
+extern void put_device_wait(struct device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/kobject.h:88:
+extern void kobject_unregister_wait(struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#130: FILE: include/linux/kobject.h:88:
+extern void kobject_unregister_wait(struct kobject *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/kobject.h:92:
+extern void kobject_put_wait(struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#134: FILE: include/linux/kobject.h:92:
+extern void kobject_put_wait(struct kobject *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: lib/kobject.c:443:
+void kobject_unregister_wait(struct kobject * kobj)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: lib/kobject.c:447:
+	pr_debug("kobject %s: unregistering\n",kobject_name(kobj));
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#230: FILE: lib/kobject.c:532:
+void kobject_put_wait(struct kobject * kobj)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: lib/kobject.c:540:
+	BUG_ON(!list_empty(&kobj->entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#250: FILE: lib/kobject.c:552:
+		printk(KERN_WARNING "kobject_put_wait: kobject %p is still "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kobject_put_wait', this function's name, in a string
#250: FILE: lib/kobject.c:552:
+		printk(KERN_WARNING "kobject_put_wait: kobject %p is still "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: lib/kobject.c:553:
+		printk(KERN_WARNING "kobject_put_wait: kobject %p is still "
+		       "alive after 30s, possible reference count bug\n", kobj);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444275.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 6 warnings, 6 checks, 194 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444275.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
