WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#112: FILE: drivers/ata/Kconfig:320:
+config PATA_HPT3X3_DMA
+	bool "HPT 343/363 DMA support (Experimental)"
+	depends on PATA_HPT3X3
+	help
+	  This option enables DMA support for the HPT343/363
+	  controllers. Enable with care as there are still some
+	  problems with DMA on this chipset.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:POINTER_LOCATION: "foo * const * bar" should be "foo * const *bar"
#496: FILE: drivers/ata/libata-sff.c:695:
+			     const struct ata_port_info * const * ppi,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#881: FILE: drivers/ata/pata_hpt3x3.c:146:
+	.check_atapi_dma= hpt3x3_atapi_dma,
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#900: FILE: drivers/ata/pata_hpt3x3.c:187:
+ *	ports via BAR4. This is neccessary to work around errata.
   	                        ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#933: FILE: drivers/ata/pata_hpt3x3.c:215:
+		dev_printk(KERN_DEBUG, &pdev->dev, "version " DRV_VERSION "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#999: FILE: drivers/ata/pata_mpc52xx.c:484:
+		printk(KERN_ERR DRV_NAME ": Error during HW init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1019: FILE: drivers/ata/pata_scc.c:243:
+		printk(KERN_INFO "%s: limit ATAPI UDMA to UDMA4\n", DRV_NAME);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1049: FILE: drivers/ata/pata_scc.c:737:
+	static int retry = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1066: FILE: drivers/ata/pata_scc.c:754:
+			if (!(int_status & INTSTS_ACTEINT)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1067: FILE: drivers/ata/pata_scc.c:755:
+				printk(KERN_WARNING "ata%u: data lost occurred. (ACTEINT==0, retry:%d)\n",

CHECK:BRACES: Unbalanced braces around else statement
#1072: FILE: drivers/ata/pata_scc.c:760:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1098: FILE: drivers/ata/pata_sis.c:153:
+	/* Clear the FIFO settings. We can't enable the FIFO until
+	   we know we are poking at a disk */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1098: FILE: drivers/ata/pata_sis.c:153:
+	   we know we are poking at a disk */

WARNING:TYPO_SPELLING: 'transprt' may be misspelled - perhaps 'transport'?
#1162: FILE: drivers/ata/sata_mv.c:239:
+	EDMA_ERR_TRANS_IRQ_7	= (1 << 8),	/* Gen IIE transprt layer irq */
 	                    	           	           ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1597: FILE: drivers/ata/sata_mv.c:1163:
+ ^Iif (qc->tf.protocol != ATA_PROT_DMA)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1597: FILE: drivers/ata/sata_mv.c:1163:
+ ^Iif (qc->tf.protocol != ATA_PROT_DMA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1597: FILE: drivers/ata/sata_mv.c:1163:
+ ^Iif (qc->tf.protocol != ATA_PROT_DMA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1620: FILE: drivers/ata/sata_mv.c:1255:
+ ^Iif (qc->tf.protocol != ATA_PROT_DMA)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1620: FILE: drivers/ata/sata_mv.c:1255:
+ ^Iif (qc->tf.protocol != ATA_PROT_DMA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1620: FILE: drivers/ata/sata_mv.c:1255:
+ ^Iif (qc->tf.protocol != ATA_PROT_DMA)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1629: FILE: drivers/ata/sata_mv.c:1266:
+	flags |= qc->tag << CRQB_IOID_SHIFT;	/* "I/O Id" is -really-
+						   what we use as our tag */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1629: FILE: drivers/ata/sata_mv.c:1266:
+						   what we use as our tag */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1796: FILE: drivers/ata/sata_mv.c:1413:
+			struct mv_port_priv *pp	= ap->private_data;
+			pp->pp_flags &= ~MV_PP_FLAG_EDMA_EN;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1804: FILE: drivers/ata/sata_mv.c:1421:
+			struct mv_port_priv *pp	= ap->private_data;
+			pp->pp_flags &= ~MV_PP_FLAG_EDMA_EN;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1886: FILE: drivers/ata/sata_mv.c:1498:
+^I^I $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1886: FILE: drivers/ata/sata_mv.c:1498:
+
+		 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1888: FILE: drivers/ata/sata_mv.c:1500:
+^I^Iif (IS_GEN_I(hpriv)) $

CHECK:BRACES: Unbalanced braces around else statement
#1895: FILE: drivers/ata/sata_mv.c:1507:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1926: FILE: drivers/ata/sata_mv.c:1538:
+^I^I/* advance software response queue pointer, to $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ap'
#1973: FILE: drivers/ata/sata_mv.c:1595:
+		if ((!ap) || (ap->flags & ATA_FLAG_DISABLED))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1977: FILE: drivers/ata/sata_mv.c:1599:
+		if (port >= MV_PORTS_PER_HC) {
+			shift++;	/* skip bit 8 in the HC Main IRQ reg */
+		}

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#2048: FILE: drivers/ata/sata_mv.c:1638:
+	dev_printk(KERN_ERR, host->dev, "PCI ERROR; PCI IRQ cause=0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2064: FILE: drivers/ata/sata_mv.c:1653:
+				ata_ehi_push_desc(ehi,
+					"PCI err cause 0x%08x", err_cause);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#2214: FILE: drivers/ata/sata_mv.c:2151:
+	msleep(1);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#2228: FILE: drivers/ata/sata_mv.c:2161:
+		msleep(1);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sstatus != 0x0'
#2233: FILE: drivers/ata/sata_mv.c:2165:
+	if (IS_GEN_II(hpriv) &&
 	    (sstatus != 0x0) && (sstatus != 0x113) && (sstatus != 0x123) &&
 	    (retry-- > 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sstatus != 0x113'
#2233: FILE: drivers/ata/sata_mv.c:2165:
+	if (IS_GEN_II(hpriv) &&
 	    (sstatus != 0x0) && (sstatus != 0x113) && (sstatus != 0x123) &&
 	    (retry-- > 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sstatus != 0x123'
#2233: FILE: drivers/ata/sata_mv.c:2165:
+	if (IS_GEN_II(hpriv) &&
 	    (sstatus != 0x0) && (sstatus != 0x113) && (sstatus != 0x123) &&
 	    (retry-- > 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2296: FILE: drivers/ata/sata_mv.c:2215:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2591: FILE: drivers/ata/sata_promise.c:772:
+			struct ata_eh_info *ehi = &ap->eh_info;
+			ata_ehi_clear_desc(ehi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2747: FILE: include/linux/libata.h:872:
+extern int ata_pci_init_sff_host(struct ata_host *host);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2752: FILE: include/linux/libata.h:874:
+extern int ata_pci_prepare_sff_host(struct pci_dev *pdev,

ERROR:POINTER_LOCATION: "foo * const * bar" should be "foo * const *bar"
#2753: FILE: include/linux/libata.h:875:
+				    const struct ata_port_info * const * ppi,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407023.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 23 warnings, 11 checks, 2493 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407023.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
