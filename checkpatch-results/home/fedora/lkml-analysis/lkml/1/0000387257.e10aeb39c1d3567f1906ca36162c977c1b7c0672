WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: security/tomoyo/condition.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#46: FILE: security/tomoyo/condition.c:2:
+ * security/tomoyo/condition.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LINE_SPACING: Missing a blank line after declarations
#67: FILE: security/tomoyo/condition.c:23:
+	char *cp = strstr(data, " if ");
+	if (cp) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#69: FILE: security/tomoyo/condition.c:25:
+		char *cp2;
+		while ((cp2 = strstr(cp + 3, " if ")) != NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#85: FILE: security/tomoyo/condition.c:41:
+	int base = 10;
+	if (*cp == '0') {

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#86: FILE: security/tomoyo/condition.c:42:
+		char c = * (cp + 1);
 		         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: security/tomoyo/condition.c:43:
+		char c = * (cp + 1);
+		if (c == 'x' || c == 'X') {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#93: FILE: security/tomoyo/condition.c:49:
+	*result = simple_strtoul(cp, &ep, base);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#94: FILE: security/tomoyo/condition.c:50:
+	if (cp == ep) return 0; /* 00 */

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: security/tomoyo/condition.c:57:
+static void tmy_print_ulong(char *buffer, const int buffer_len,
+			const unsigned long value, const int type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: security/tomoyo/condition.c:141:
+	unsigned long right_max = 0;
+	if (strncmp(condition, "if ", 3))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#207: FILE: security/tomoyo/condition.c:163:
+			if (!tmy_parse_ulong(&left_max, &condition)
+			    || left_min > left_max)

WARNING:SPACING: space prohibited before semicolon
#210: FILE: security/tomoyo/condition.c:166:
+not_range1: ;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#234: FILE: security/tomoyo/condition.c:190:
+			if (!tmy_parse_ulong(&right_max, &condition)
+			    || right_min > right_max)

WARNING:SPACING: space prohibited before semicolon
#237: FILE: security/tomoyo/condition.c:193:
+not_range2: ;

CHECK:SPACING: No space is necessary after a cast
#245: FILE: security/tomoyo/condition.c:201:
+	ptr2 = (unsigned long *) (((u8 *) new_ptr) + sizeof(*new_ptr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#249: FILE: security/tomoyo/condition.c:205:
+		unsigned int match = 0;
+		if (*condition == ' ')

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: security/tomoyo/condition.c:209:
+			if (strncmp(condition, cc_keyword[left].keyword,
+			    cc_keyword[left].keyword_len))

WARNING:SPACING: space prohibited before semicolon
#267: FILE: security/tomoyo/condition.c:223:
+not_range3: ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#269: FILE: security/tomoyo/condition.c:225:
+		if (strncmp(condition, "!=", 2) == 0)
[...]
+		else if (*condition == '=') {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#273: FILE: security/tomoyo/condition.c:229:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: security/tomoyo/condition.c:234:
+			if (strncmp(condition, cc_keyword[right].keyword,
+			    cc_keyword[right].keyword_len))

WARNING:SPACING: space prohibited before semicolon
#292: FILE: security/tomoyo/condition.c:248:
+not_range4: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: security/tomoyo/condition.c:265:
+		struct condition_list *prev = NULL;
+		down(&lock);

CHECK:SPACING: No space is necessary after a cast
#318: FILE: security/tomoyo/condition.c:274:
+			if (memcmp(((u8 *) ptr) + sizeof(ptr->next),

CHECK:SPACING: No space is necessary after a cast
#319: FILE: security/tomoyo/condition.c:275:
+				   ((u8 *) new_ptr) + sizeof(new_ptr->next),

WARNING:SPACING: space prohibited before semicolon
#335: FILE: security/tomoyo/condition.c:291:
+ok: ;

WARNING:SPACING: space prohibited before semicolon
#339: FILE: security/tomoyo/condition.c:295:
+out2: ;

WARNING:SPACING: space prohibited before semicolon
#341: FILE: security/tomoyo/condition.c:297:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: security/tomoyo/condition.c:372:
+	const unsigned long *ptr2;
+	if (!ptr)

CHECK:SPACING: No space is necessary after a cast
#418: FILE: security/tomoyo/condition.c:374:
+	ptr2 = (unsigned long *) (((u8 *) ptr) + sizeof(*ptr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#423: FILE: security/tomoyo/condition.c:379:
+		const u8 right = *ptr2;
+		ptr2++;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#425: FILE: security/tomoyo/condition.c:381:
+		if ((left >= PATH1_UID && left < MAX_KEYWORD)
+		    || (right >= PATH1_UID && right < MAX_KEYWORD)) {

WARNING:SPACING: space prohibited before semicolon
#652: FILE: security/tomoyo/condition.c:608:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#671: FILE: security/tomoyo/condition.c:627:
+	char buffer[32];
+	if (!ptr)

CHECK:SPACING: No space is necessary after a cast
#673: FILE: security/tomoyo/condition.c:629:
+	ptr2 = (unsigned long *) (((u8 *) ptr) + sizeof(*ptr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#679: FILE: security/tomoyo/condition.c:635:
+		const u8 right = *ptr2;
+		ptr2++;

WARNING:SPACING: space prohibited before semicolon
#722: FILE: security/tomoyo/condition.c:678:
+last: ;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 23 warnings, 13 checks, 680 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
