WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# tracer: nop

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#           TASK-PID    CPU#    TIMESTAMP  FUNCTION

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#              | |       |          |         |

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
           <...>-23195 [000] 1884167.739031: xfs_alloc_extent: dev 253:21 first agno 0 agbno 5448 minlen 1 maxlen 1 mod 0 prod 1 minleft 2 total 0 alignment 1 len 1 type NEAR_BNO otype START_BNO wasdel 0 wasfromfl 0 isfl 0 userdata 1 by trace_xfs_alloc_extent

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#68: 
information more usefull for general tracing instead of pointers for
                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#592: FILE: fs/xfs/linux-2.6/xfs_buf.h:98:
+#define XFS_BUF_FLAGS \
+	{ XBF_READ,		"READ" }, \
+	{ XBF_WRITE,		"WRITE" }, \
+	{ XBF_MAPPED,		"MAPPED" }, \
+	{ XBF_ASYNC,		"ASYNC" }, \
+	{ XBF_DONE,		"DONE" }, \
+	{ XBF_DELWRI,		"DELWRI" }, \
+	{ XBF_STALE,		"STALE" }, \
+	{ XBF_FS_MANAGED,	"FS_MANAGED" }, \
+ 	{ XBF_ORDERED,		"ORDERED" }, \
+	{ XBF_READ_AHEAD,	"READ_AHEAD" }, \
+	{ XBF_LOCK,		"LOCK" },  	/* should never be set */\
+	{ XBF_TRYLOCK,		"TRYLOCK" }, 	/* ditto */\
+	{ XBF_DONT_BLOCK,	"DONT_BLOCK" },	/* ditto */\
+	{ _XBF_PAGE_CACHE,	"PAGE_CACHE" }, \
+	{ _XBF_PAGES,		"PAGES" }, \
+	{ _XBF_RUN_QUEUES,	"RUN_QUEUES" }, \
+	{ _XBF_DELWRI_Q,	"DELWRI_Q" }, \
+	{ _XBF_PAGE_LOCKED,	"PAGE_LOCKED" }, \
+	{ _XFS_BARRIER_FAILED,	"BARRIER_FAILED" }

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: fs/xfs/linux-2.6/xfs_buf.h:107:
+ ^I{ XBF_ORDERED,^I^I"ORDERED" }, \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#601: FILE: fs/xfs/linux-2.6/xfs_buf.h:107:
+ ^I{ XBF_ORDERED,^I^I"ORDERED" }, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: fs/xfs/linux-2.6/xfs_buf.h:107:
+ ^I{ XBF_ORDERED,^I^I"ORDERED" }, \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#603: FILE: fs/xfs/linux-2.6/xfs_buf.h:109:
+^I{ XBF_LOCK,^I^I"LOCK" },  ^I/* should never be set */\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#604: FILE: fs/xfs/linux-2.6/xfs_buf.h:110:
+^I{ XBF_TRYLOCK,^I^I"TRYLOCK" }, ^I/* ditto */\$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: fs/xfs/linux-2.6/xfs_buf.h:119:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: fs/xfs/linux-2.6/xfs_lrw.c:670:
+ ^I^Itrace_xfs_rw(xip, count, *offset, ioflags, "write");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#769: FILE: fs/xfs/linux-2.6/xfs_lrw.c:670:
+ ^I^Itrace_xfs_rw(xip, count, *offset, ioflags, "write");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: fs/xfs/linux-2.6/xfs_lrw.c:670:
+ ^I^Itrace_xfs_rw(xip, count, *offset, ioflags, "write");$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#807: FILE: fs/xfs/linux-2.6/xfs_super.c:16:
  * Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#831: FILE: fs/xfs/linux-2.6/xfs_super.c:72:
 
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1537: FILE: fs/xfs/xfs_alloc.h:40:
+#define XFS_ALLOC_TYPES \
+	{ XFS_ALLOCTYPE_ANY_AG,		"ANY_AG" }, \
+	{ XFS_ALLOCTYPE_FIRST_AG,	"FIRST_AG" }, \
+	{ XFS_ALLOCTYPE_START_AG,	"START_AG" }, \
+	{ XFS_ALLOCTYPE_THIS_AG,	"THIS_AG" }, \
+	{ XFS_ALLOCTYPE_START_BNO,	"START_BNO" }, \
+	{ XFS_ALLOCTYPE_NEAR_BNO,	"NEAR_BNO" }, \
+	{ XFS_ALLOCTYPE_THIS_BNO,	"THIS_BNO" }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1624: FILE: fs/xfs/xfs_attr.c:2282:
+	trace_xfs_attr_list(XFS_ATTR_KTRACE_L_CN, where, context,
+		be16_to_cpu(node->hdr.count),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1626: FILE: fs/xfs/xfs_attr.c:2284:
+		be32_to_cpu(node->btree[

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1627: FILE: fs/xfs/xfs_attr.c:2285:
+			    be16_to_cpu(node->hdr.count)-1].hashval));
 			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: fs/xfs/xfs_attr.c:2296:
+	trace_xfs_attr_list(XFS_ATTR_KTRACE_L_CB, where, context,
+		be32_to_cpu(btree->hashval),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1683: FILE: fs/xfs/xfs_attr.c:2309:
+	trace_xfs_attr_list(XFS_ATTR_KTRACE_L_CL, where, context,
+		be16_to_cpu(leaf->hdr.count),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1685: FILE: fs/xfs/xfs_attr.c:2311:
+		be32_to_cpu(leaf->entries[

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1686: FILE: fs/xfs/xfs_attr.c:2312:
+			    be16_to_cpu(leaf->hdr.count)-1].hashval));
 			                                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1845: FILE: fs/xfs/xfs_bmap.c:325:
 
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1847: FILE: fs/xfs/xfs_bmap.c:327:
+xfs_bmap_trace_insert(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1855: FILE: fs/xfs/xfs_bmap.c:335:
+	xfs_bmbt_irec_t	*r2,		/* inserted record 2 or null */
+	int		whichfork)	/* data or attr fork */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1862: FILE: fs/xfs/xfs_bmap.c:342:
+xfs_bmap_trace(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1869: FILE: fs/xfs/xfs_bmap.c:349:
+	xfs_extnum_t	cnt,		/* count of entries deleted, 1 or 2 */
+	int		whichfork)	/* data or attr fork */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1883: FILE: fs/xfs/xfs_bmap.c:363:
+#define	XFS_BMAP_TRACE_INSERT(d,ip,i,c,r1,r2,w)	\
        	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1883: FILE: fs/xfs/xfs_bmap.c:363:
+#define	XFS_BMAP_TRACE_INSERT(d,ip,i,c,r1,r2,w)	\
        	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1883: FILE: fs/xfs/xfs_bmap.c:363:
+#define	XFS_BMAP_TRACE_INSERT(d,ip,i,c,r1,r2,w)	\
        	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1883: FILE: fs/xfs/xfs_bmap.c:363:
+#define	XFS_BMAP_TRACE_INSERT(d,ip,i,c,r1,r2,w)	\
        	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1883: FILE: fs/xfs/xfs_bmap.c:363:
+#define	XFS_BMAP_TRACE_INSERT(d,ip,i,c,r1,r2,w)	\
        	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1883: FILE: fs/xfs/xfs_bmap.c:363:
+#define	XFS_BMAP_TRACE_INSERT(d,ip,i,c,r1,r2,w)	\
        	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: fs/xfs/xfs_bmap.c:364:
+	xfs_bmap_trace_insert(__func__,d,ip,i,c,r1,r2,w)
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: fs/xfs/xfs_bmap.c:364:
+	xfs_bmap_trace_insert(__func__,d,ip,i,c,r1,r2,w)
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: fs/xfs/xfs_bmap.c:364:
+	xfs_bmap_trace_insert(__func__,d,ip,i,c,r1,r2,w)
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: fs/xfs/xfs_bmap.c:364:
+	xfs_bmap_trace_insert(__func__,d,ip,i,c,r1,r2,w)
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: fs/xfs/xfs_bmap.c:364:
+	xfs_bmap_trace_insert(__func__,d,ip,i,c,r1,r2,w)
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: fs/xfs/xfs_bmap.c:364:
+	xfs_bmap_trace_insert(__func__,d,ip,i,c,r1,r2,w)
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: fs/xfs/xfs_bmap.c:364:
+	xfs_bmap_trace_insert(__func__,d,ip,i,c,r1,r2,w)
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1885: FILE: fs/xfs/xfs_bmap.c:365:
+#define	XFS_BMAP_TRACE_DELETE(d,ip,i,c,w)	\
        	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1885: FILE: fs/xfs/xfs_bmap.c:365:
+#define	XFS_BMAP_TRACE_DELETE(d,ip,i,c,w)	\
        	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1885: FILE: fs/xfs/xfs_bmap.c:365:
+#define	XFS_BMAP_TRACE_DELETE(d,ip,i,c,w)	\
        	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1885: FILE: fs/xfs/xfs_bmap.c:365:
+#define	XFS_BMAP_TRACE_DELETE(d,ip,i,c,w)	\
        	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1886: FILE: fs/xfs/xfs_bmap.c:366:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_DELETE, __func__,d,ip,i,c,w)
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1886: FILE: fs/xfs/xfs_bmap.c:366:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_DELETE, __func__,d,ip,i,c,w)
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1886: FILE: fs/xfs/xfs_bmap.c:366:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_DELETE, __func__,d,ip,i,c,w)
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1886: FILE: fs/xfs/xfs_bmap.c:366:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_DELETE, __func__,d,ip,i,c,w)
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1886: FILE: fs/xfs/xfs_bmap.c:366:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_DELETE, __func__,d,ip,i,c,w)
 	                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1887: FILE: fs/xfs/xfs_bmap.c:367:
+#define	XFS_BMAP_TRACE_POST_UPDATE(d,ip,i,w)	\
        	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1887: FILE: fs/xfs/xfs_bmap.c:367:
+#define	XFS_BMAP_TRACE_POST_UPDATE(d,ip,i,w)	\
        	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1887: FILE: fs/xfs/xfs_bmap.c:367:
+#define	XFS_BMAP_TRACE_POST_UPDATE(d,ip,i,w)	\
        	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1888: FILE: fs/xfs/xfs_bmap.c:368:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_POST_UP, __func__,d,ip,i,1,w)
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1888: FILE: fs/xfs/xfs_bmap.c:368:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_POST_UP, __func__,d,ip,i,1,w)
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1888: FILE: fs/xfs/xfs_bmap.c:368:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_POST_UP, __func__,d,ip,i,1,w)
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1888: FILE: fs/xfs/xfs_bmap.c:368:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_POST_UP, __func__,d,ip,i,1,w)
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1888: FILE: fs/xfs/xfs_bmap.c:368:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_POST_UP, __func__,d,ip,i,1,w)
 	                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1889: FILE: fs/xfs/xfs_bmap.c:369:
+#define	XFS_BMAP_TRACE_PRE_UPDATE(d,ip,i,w)	\
        	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1889: FILE: fs/xfs/xfs_bmap.c:369:
+#define	XFS_BMAP_TRACE_PRE_UPDATE(d,ip,i,w)	\
        	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1889: FILE: fs/xfs/xfs_bmap.c:369:
+#define	XFS_BMAP_TRACE_PRE_UPDATE(d,ip,i,w)	\
        	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1890: FILE: fs/xfs/xfs_bmap.c:370:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_PRE_UP, __func__,d,ip,i,1,w)
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1890: FILE: fs/xfs/xfs_bmap.c:370:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_PRE_UP, __func__,d,ip,i,1,w)
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1890: FILE: fs/xfs/xfs_bmap.c:370:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_PRE_UP, __func__,d,ip,i,1,w)
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1890: FILE: fs/xfs/xfs_bmap.c:370:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_PRE_UP, __func__,d,ip,i,1,w)
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1890: FILE: fs/xfs/xfs_bmap.c:370:
+	xfs_bmap_trace(XFS_BMAP_KTRACE_PRE_UP, __func__,d,ip,i,1,w)
 	                                                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1892: FILE: fs/xfs/xfs_bmap.c:372:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2130: FILE: fs/xfs/xfs_bmap.h:98:
+#define XFS_BMAPI_FLAGS \
+	{ XFS_BMAPI_WRITE,	"WRITE" }, \
+	{ XFS_BMAPI_DELAY,	"DELAY" }, \
+	{ XFS_BMAPI_ENTIRE,	"ENTIRE" }, \
+	{ XFS_BMAPI_METADATA,	"METADATA" }, \
+	{ XFS_BMAPI_EXACT,	"EXACT" }, \
+	{ XFS_BMAPI_ATTRFORK,	"ATTRFORK" }, \
+	{ XFS_BMAPI_ASYNC,	"ASYNC" }, \
+	{ XFS_BMAPI_RSVBLOCKS,	"RSVBLOCKS" }, \
+	{ XFS_BMAPI_PREALLOC,	"PREALLOC" }, \
+	{ XFS_BMAPI_IGSTATE,	"IGSTATE" }, \
+	{ XFS_BMAPI_CONTIG,	"CONTIG" }, \
+	{ XFS_BMAPI_CONVERT,	"CONVERT" }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2144: FILE: fs/xfs/xfs_bmap.h:112:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2163: FILE: fs/xfs/xfs_bmap.h:161:
+#define XFS_BMAP_KTRACE_TYPES \
+	{ XFS_BMAP_KTRACE_DELETE,	"delete" }, \
+	{ XFS_BMAP_KTRACE_INSERT,	"insert" }, \
+	{ XFS_BMAP_KTRACE_PRE_UP,	"pre" }, \
+	{ XFS_BMAP_KTRACE_POST_UP,	"post"}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2373: FILE: fs/xfs/xfs_buf_item.h:73:
+#define XFS_BLI_FLAGS \
+	{ XFS_BLI_HOLD,		"HOLD" }, \
+	{ XFS_BLI_DIRTY,	"DIRTY" }, \
+	{ XFS_BLI_STALE,	"STALE" }, \
+	{ XFS_BLI_LOGGED,	"LOGGED" }, \
+	{ XFS_BLI_INODE_ALLOC_BUF, "INODE_ALLOC" }, \
+	{ XFS_BLI_STALE_INODE,	"STALE_INODE" }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3093: FILE: fs/xfs/xfs_inode.h:399:
+#define XFS_LOCK_FLAGS \
+	{ XFS_IOLOCK_EXCL,	"IOLOCK_EXCL" }, \
+	{ XFS_IOLOCK_SHARED,	"IOLOCK_SHARED" }, \
+	{ XFS_ILOCK_EXCL,	"ILOCK_EXCL" }, \
+	{ XFS_ILOCK_SHARED,	"ILOCK_SHARED" }, \
+	{ XFS_IUNLOCK_NONOTIFY,	"IUNLOCK_NONOTIFY" }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3100: FILE: fs/xfs/xfs_inode.h:406:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3108: FILE: fs/xfs/xfs_inode.h:456:
+#define XFS_ITRUNC_FLAGS \
+	{ XFS_ITRUNC_DEFINITE,	"DEFINITE" }, \
+	{ XFS_ITRUNC_MAYBE,	"MAYBE" }

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3141: FILE: fs/xfs/xfs_inode.h:525:
+#define xfs_itrace_tag(ip, tag)	\
+	trace_xfs_inode((ip), (tag), _THIS_IP_);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3547: FILE: fs/xfs/linux-2.6/xfs_trace.h:1:
+#undef TRACE_SYSTEM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3592: FILE: fs/xfs/linux-2.6/xfs_trace.h:46:
+void xfs_count_page_state(struct page *page, int *delalloc,
+		int *unmapped, int *unwritten);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3594: FILE: fs/xfs/linux-2.6/xfs_trace.h:48:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3601: FILE: fs/xfs/linux-2.6/xfs_trace.h:55:
+TRACE_EVENT(xfs_attr_list,
+	TP_PROTO(int type, char *where, struct xfs_attr_list_context *ctx,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3605: FILE: fs/xfs/linux-2.6/xfs_trace.h:59:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3624: FILE: fs/xfs/linux-2.6/xfs_trace.h:78:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#3643: FILE: fs/xfs/linux-2.6/xfs_trace.h:97:
+	TP_printk("dev %d:%d ino %llx %s cursor h/b/o 0x%x/0x%x/%u dupcnt %u "
+		  "alist 0x%p size %u count %u firstu %u flags %d %s",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#3656: FILE: fs/xfs/linux-2.6/xfs_trace.h:110:
+^I ^I   __print_flags(__entry->flags, "|", XFS_ATTR_FLAGS)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3656: FILE: fs/xfs/linux-2.6/xfs_trace.h:110:
+^I ^I   __print_flags(__entry->flags, "|", XFS_ATTR_FLAGS)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3667: FILE: fs/xfs/linux-2.6/xfs_trace.h:121:
+TRACE_EVENT(xfs_bmap,
+	TP_PROTO(int opcode, const char *fname, const char *desc,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3673: FILE: fs/xfs/linux-2.6/xfs_trace.h:127:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3691: FILE: fs/xfs/linux-2.6/xfs_trace.h:145:
+	TP_fast_assign(

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#3709: FILE: fs/xfs/linux-2.6/xfs_trace.h:163:
+	TP_printk("dev %d:%d ino 0x%lld %s %s:%s %cf idx %ld "

Prefixing 0x with decimal output is defective and should be corrected.

WARNING:SPLIT_STRING: quoted string split across lines
#3710: FILE: fs/xfs/linux-2.6/xfs_trace.h:164:
+	TP_printk("dev %d:%d ino 0x%lld %s %s:%s %cf idx %ld "
+		  "offset1 %lld block1 %s count1 %lld flag1 %d "

WARNING:SPLIT_STRING: quoted string split across lines
#3711: FILE: fs/xfs/linux-2.6/xfs_trace.h:165:
+		  "offset1 %lld block1 %s count1 %lld flag1 %d "
+		  "offset2 %lld block2 %s count2 %lld flag2 %d",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3732: FILE: fs/xfs/linux-2.6/xfs_trace.h:186:
+TRACE_EVENT(xfs_buf,
+	TP_PROTO(struct xfs_buf *bp, char *id, unsigned long val,
+		 unsigned long caller_ip),
+	TP_ARGS(bp, id, val, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(char *, id)
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3733: FILE: fs/xfs/linux-2.6/xfs_trace.h:187:
+TRACE_EVENT(xfs_buf,
+	TP_PROTO(struct xfs_buf *bp, char *id, unsigned long val,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3733: FILE: fs/xfs/linux-2.6/xfs_trace.h:187:
+	TP_PROTO(struct xfs_buf *bp, char *id, unsigned long val,
+		 unsigned long caller_ip),
+	TP_ARGS(bp, id, val, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(char *, id)
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3734: FILE: fs/xfs/linux-2.6/xfs_trace.h:188:
+		 unsigned long caller_ip),
+	TP_ARGS(bp, id, val, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(char *, id)
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3735: FILE: fs/xfs/linux-2.6/xfs_trace.h:189:
+	TP_ARGS(bp, id, val, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(char *, id)
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3737: FILE: fs/xfs/linux-2.6/xfs_trace.h:191:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3737: FILE: fs/xfs/linux-2.6/xfs_trace.h:191:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(char *, id)
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3738: FILE: fs/xfs/linux-2.6/xfs_trace.h:192:
+		__field(dev_t, dev)
+		__field(char *, id)
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3739: FILE: fs/xfs/linux-2.6/xfs_trace.h:193:
+		__field(char *, id)
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3740: FILE: fs/xfs/linux-2.6/xfs_trace.h:194:
+		__field(unsigned, flags)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3740: FILE: fs/xfs/linux-2.6/xfs_trace.h:194:
+		__field(unsigned, flags)
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3741: FILE: fs/xfs/linux-2.6/xfs_trace.h:195:
+		__field(int, hold)
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3742: FILE: fs/xfs/linux-2.6/xfs_trace.h:196:
+		__field(unsigned, lockval)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3742: FILE: fs/xfs/linux-2.6/xfs_trace.h:196:
+		__field(unsigned, lockval)
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3743: FILE: fs/xfs/linux-2.6/xfs_trace.h:197:
+		__field(unsigned long, val)
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3744: FILE: fs/xfs/linux-2.6/xfs_trace.h:198:
+		__field(xfs_off_t, file_offset)
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3745: FILE: fs/xfs/linux-2.6/xfs_trace.h:199:
+		__field(size_t, buffer_length)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3746: FILE: fs/xfs/linux-2.6/xfs_trace.h:200:
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3747: FILE: fs/xfs/linux-2.6/xfs_trace.h:201:
+	),
+
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3749: FILE: fs/xfs/linux-2.6/xfs_trace.h:203:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3749: FILE: fs/xfs/linux-2.6/xfs_trace.h:203:
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->id = id;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->val = val;
+		__entry->file_offset = bp->b_file_offset;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3759: FILE: fs/xfs/linux-2.6/xfs_trace.h:213:
+	),
+
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->id,
+		  __entry->hold,
+		  __entry->lockval,
+		  __entry->val,
+                  (unsigned long long)__entry->file_offset,
+		  __entry->buffer_length,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:SPLIT_STRING: quoted string split across lines
#3762: FILE: fs/xfs/linux-2.6/xfs_trace.h:216:
+	TP_printk("dev %d:%d %s hold %d lock %d val 0x%lx "
+		  "offset 0x%llx size 0x%zx flags %s by %pf",

ERROR:CODE_INDENT: code indent should use tabs where possible
#3768: FILE: fs/xfs/linux-2.6/xfs_trace.h:222:
+                  (unsigned long long)__entry->file_offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3768: FILE: fs/xfs/linux-2.6/xfs_trace.h:222:
+                  (unsigned long long)__entry->file_offset,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3779: FILE: fs/xfs/linux-2.6/xfs_trace.h:233:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3781: FILE: fs/xfs/linux-2.6/xfs_trace.h:235:
+TRACE_EVENT(xfs_buf_item,
+	TP_PROTO(char *id, struct xfs_buf_log_item *bip),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3784: FILE: fs/xfs/linux-2.6/xfs_trace.h:238:
+	TP_STRUCT__entry(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3789: FILE: fs/xfs/linux-2.6/xfs_trace.h:243:
+		__field(unsigned, flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3790: FILE: fs/xfs/linux-2.6/xfs_trace.h:244:
+		__field(unsigned, recur)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3794: FILE: fs/xfs/linux-2.6/xfs_trace.h:248:
+		__field(unsigned, buf_flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3798: FILE: fs/xfs/linux-2.6/xfs_trace.h:252:
+		__field(unsigned, li_flags)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3801: FILE: fs/xfs/linux-2.6/xfs_trace.h:255:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#3819: FILE: fs/xfs/linux-2.6/xfs_trace.h:273:
+	TP_printk("dev %d:%d %s bip 0x%p bp 0x%p flags %s recur %d refcount %d "
+		  "blkno 0x%llx blen %zd bpflags %s pincount %d "

WARNING:SPLIT_STRING: quoted string split across lines
#3820: FILE: fs/xfs/linux-2.6/xfs_trace.h:274:
+		  "blkno 0x%llx blen %zd bpflags %s pincount %d "
+		  "lockval %d lidesc 0x%p liflags %s",

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3837: FILE: fs/xfs/linux-2.6/xfs_trace.h:291:
+#define xfs_buf_item_trace(id, bip) \
+	trace_xfs_buf_item((id), (bip));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3848: FILE: fs/xfs/linux-2.6/xfs_trace.h:302:
+TRACE_EVENT(xfs_dquot,
+	TP_PROTO(struct xfs_dquot *dqp, char *func, struct xfs_inode *ip),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3851: FILE: fs/xfs/linux-2.6/xfs_trace.h:305:
+	TP_STRUCT__entry(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3856: FILE: fs/xfs/linux-2.6/xfs_trace.h:310:
+		__field(unsigned, flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3857: FILE: fs/xfs/linux-2.6/xfs_trace.h:311:
+		__field(unsigned, nrefs)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3867: FILE: fs/xfs/linux-2.6/xfs_trace.h:321:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#3884: FILE: fs/xfs/linux-2.6/xfs_trace.h:338:
+	TP_printk("dev %d:%d ino 0x%llx id 0x%x %s flags %s nrefs %u res_bc 0x%llx "
+		  "bcnt 0x%llx [hard 0x%llx | soft 0x%llx] "

WARNING:SPLIT_STRING: quoted string split across lines
#3885: FILE: fs/xfs/linux-2.6/xfs_trace.h:339:
+		  "bcnt 0x%llx [hard 0x%llx | soft 0x%llx] "
+		  "icnt 0x%llx [hard 0x%llx | soft 0x%llx]",

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3902: FILE: fs/xfs/linux-2.6/xfs_trace.h:356:
+#define xfs_dqtrace_entry_ino(dqp, func, ip) \
+	trace_xfs_dquot((dqp), (func), (ip));

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3905: FILE: fs/xfs/linux-2.6/xfs_trace.h:359:
+	trace_xfs_dquot((dqp), (func), NULL)
+
+/*
+ * ilock/iolock tracer
+ *
+ * Reports the inode, operation, flags and caller for each operation
+ * on the inode locks.
+ */
+TRACE_EVENT(xfs_ilock,
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned lockflags,
+		 unsigned long caller_ip),
+	TP_ARGS(ip, op, lockflags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3913: FILE: fs/xfs/linux-2.6/xfs_trace.h:367:
+TRACE_EVENT(xfs_ilock,
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned lockflags,
+		 unsigned long caller_ip),
+	TP_ARGS(ip, op, lockflags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3914: FILE: fs/xfs/linux-2.6/xfs_trace.h:368:
+TRACE_EVENT(xfs_ilock,
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned lockflags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3914: FILE: fs/xfs/linux-2.6/xfs_trace.h:368:
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned lockflags,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3914: FILE: fs/xfs/linux-2.6/xfs_trace.h:368:
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned lockflags,
+		 unsigned long caller_ip),
+	TP_ARGS(ip, op, lockflags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3915: FILE: fs/xfs/linux-2.6/xfs_trace.h:369:
+		 unsigned long caller_ip),
+	TP_ARGS(ip, op, lockflags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3916: FILE: fs/xfs/linux-2.6/xfs_trace.h:370:
+	TP_ARGS(ip, op, lockflags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3918: FILE: fs/xfs/linux-2.6/xfs_trace.h:372:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3918: FILE: fs/xfs/linux-2.6/xfs_trace.h:372:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3919: FILE: fs/xfs/linux-2.6/xfs_trace.h:373:
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3920: FILE: fs/xfs/linux-2.6/xfs_trace.h:374:
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3921: FILE: fs/xfs/linux-2.6/xfs_trace.h:375:
+		__field(const char *, op)
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3922: FILE: fs/xfs/linux-2.6/xfs_trace.h:376:
+		__field(int, lockflags)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3923: FILE: fs/xfs/linux-2.6/xfs_trace.h:377:
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3924: FILE: fs/xfs/linux-2.6/xfs_trace.h:378:
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3926: FILE: fs/xfs/linux-2.6/xfs_trace.h:380:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3926: FILE: fs/xfs/linux-2.6/xfs_trace.h:380:
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->lockflags = lockflags;
+		__entry->caller_ip = caller_ip;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3932: FILE: fs/xfs/linux-2.6/xfs_trace.h:386:
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __print_flags(__entry->lockflags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
+);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#3934: FILE: fs/xfs/linux-2.6/xfs_trace.h:388:
+	TP_printk("dev %d:%d ino 0x%lld %s %s by %pf",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3947: FILE: fs/xfs/linux-2.6/xfs_trace.h:401:
+TRACE_EVENT(xfs_inode,
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned long caller_ip),
+	TP_ARGS(ip, op, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3948: FILE: fs/xfs/linux-2.6/xfs_trace.h:402:
+TRACE_EVENT(xfs_inode,
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned long caller_ip),

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3948: FILE: fs/xfs/linux-2.6/xfs_trace.h:402:
+	TP_PROTO(struct xfs_inode *ip, const char *op, unsigned long caller_ip),
+	TP_ARGS(ip, op, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3949: FILE: fs/xfs/linux-2.6/xfs_trace.h:403:
+	TP_ARGS(ip, op, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3951: FILE: fs/xfs/linux-2.6/xfs_trace.h:405:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3951: FILE: fs/xfs/linux-2.6/xfs_trace.h:405:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3952: FILE: fs/xfs/linux-2.6/xfs_trace.h:406:
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3953: FILE: fs/xfs/linux-2.6/xfs_trace.h:407:
+		__field(xfs_ino_t, ino)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3954: FILE: fs/xfs/linux-2.6/xfs_trace.h:408:
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3955: FILE: fs/xfs/linux-2.6/xfs_trace.h:409:
+		__field(unsigned long, caller_ip)
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3956: FILE: fs/xfs/linux-2.6/xfs_trace.h:410:
+		__field(int, icount)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3957: FILE: fs/xfs/linux-2.6/xfs_trace.h:411:
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3959: FILE: fs/xfs/linux-2.6/xfs_trace.h:413:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3959: FILE: fs/xfs/linux-2.6/xfs_trace.h:413:
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->op = op;
+		__entry->caller_ip = caller_ip;
+		__entry->icount = atomic_read(&VFS_I(ip)->i_count);
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3965: FILE: fs/xfs/linux-2.6/xfs_trace.h:419:
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx %s count %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->op,
+		  __entry->icount,
+		  (char *)__entry->caller_ip)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3981: FILE: fs/xfs/linux-2.6/xfs_trace.h:435:
+TRACE_EVENT(xfs_loggrant,
+	TP_PROTO(struct log *log, struct xlog_ticket *tic, char *string),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3984: FILE: fs/xfs/linux-2.6/xfs_trace.h:438:
+	TP_STRUCT__entry(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3987: FILE: fs/xfs/linux-2.6/xfs_trace.h:441:
+		__field(unsigned, trans_type)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4003: FILE: fs/xfs/linux-2.6/xfs_trace.h:457:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#4023: FILE: fs/xfs/linux-2.6/xfs_trace.h:477:
+	TP_printk("dev %d:%d %s %s t_ocnt %u t_cnt %u t_curr_res %u t_unit_res %u "
+		  "reserve_headq 0x%p write_headq 0x%p grant_reserve_cycle %d "

WARNING:SPLIT_STRING: quoted string split across lines
#4024: FILE: fs/xfs/linux-2.6/xfs_trace.h:478:
+		  "reserve_headq 0x%p write_headq 0x%p grant_reserve_cycle %d "
+		  "grant_reserve_bytes %d grant_write_cycle %d "

WARNING:SPLIT_STRING: quoted string split across lines
#4025: FILE: fs/xfs/linux-2.6/xfs_trace.h:479:
+		  "grant_reserve_bytes %d grant_write_cycle %d "
+		  "grant_write_bytes %d curr_cycle %d curr_block %d "

WARNING:SPLIT_STRING: quoted string split across lines
#4026: FILE: fs/xfs/linux-2.6/xfs_trace.h:480:
+		  "grant_write_bytes %d curr_cycle %d curr_block %d "
+		  "tail_cycle %d tail_block %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4054: FILE: fs/xfs/linux-2.6/xfs_trace.h:508:
+TRACE_EVENT(xfs_rw,
+	TP_PROTO(struct xfs_inode *ip, size_t count, loff_t offset,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4058: FILE: fs/xfs/linux-2.6/xfs_trace.h:512:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4069: FILE: fs/xfs/linux-2.6/xfs_trace.h:523:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#4081: FILE: fs/xfs/linux-2.6/xfs_trace.h:535:
+	TP_printk("dev %d:%d ino 0x%llx %s size 0x%llx new_size 0x%llx "
+		  "offset 0x%llx count 0x%zx ioflags %s",

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#4093: FILE: fs/xfs/linux-2.6/xfs_trace.h:547:
+ * Trace addres space operations
          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4096: FILE: fs/xfs/linux-2.6/xfs_trace.h:550:
+TRACE_EVENT(xfs_page,
+	TP_PROTO(struct inode *inode, struct page *page, unsigned long offset,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4100: FILE: fs/xfs/linux-2.6/xfs_trace.h:554:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4112: FILE: fs/xfs/linux-2.6/xfs_trace.h:566:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#4131: FILE: fs/xfs/linux-2.6/xfs_trace.h:585:
+	TP_printk("dev %d:%d ino 0x%llx %s pgoff 0x%lx size 0x%llx offset %lx "
+		  "delalloc %d unmapped %d unwritten %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4144: FILE: fs/xfs/linux-2.6/xfs_trace.h:598:
+TRACE_EVENT(xfs_iomap,
+	TP_PROTO(struct xfs_inode *ip, xfs_off_t offset, ssize_t count,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4148: FILE: fs/xfs/linux-2.6/xfs_trace.h:602:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4162: FILE: fs/xfs/linux-2.6/xfs_trace.h:616:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#4178: FILE: fs/xfs/linux-2.6/xfs_trace.h:632:
+	TP_printk("dev %d:%d ino 0x%llx %s size 0x%llx new_size 0x%llx "
+		  "offset 0x%llx count %zd flags %s "

WARNING:SPLIT_STRING: quoted string split across lines
#4179: FILE: fs/xfs/linux-2.6/xfs_trace.h:633:
+		  "offset 0x%llx count %zd flags %s "
+		  "startoff 0x%llx startblock 0x%llx blockcount 0x%llx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4194: FILE: fs/xfs/linux-2.6/xfs_trace.h:648:
+TRACE_EVENT(xfs_itrunc,
+	TP_PROTO(struct xfs_inode *ip, xfs_fsize_t new_size, int flag,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4198: FILE: fs/xfs/linux-2.6/xfs_trace.h:652:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4209: FILE: fs/xfs/linux-2.6/xfs_trace.h:663:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#4221: FILE: fs/xfs/linux-2.6/xfs_trace.h:675:
+	TP_printk("dev %d:%d ino 0x%llx %s %s size 0x%llx new_size 0x%llx "
+		  "toss start 0x%llx toss finish 0x%llx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4233: FILE: fs/xfs/linux-2.6/xfs_trace.h:687:
+TRACE_EVENT(xfs_pagecache_inval,
+	TP_PROTO(struct xfs_inode *ip, xfs_off_t start, xfs_off_t finish),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4236: FILE: fs/xfs/linux-2.6/xfs_trace.h:690:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4244: FILE: fs/xfs/linux-2.6/xfs_trace.h:698:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4260: FILE: fs/xfs/linux-2.6/xfs_trace.h:714:
+TRACE_EVENT(xfs_bunmap,
+	TP_PROTO(struct xfs_inode *ip, xfs_fileoff_t bno, xfs_filblks_t len,
+		 int flags, unsigned long caller_ip),
+	TP_ARGS(ip, bno, len, flags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4261: FILE: fs/xfs/linux-2.6/xfs_trace.h:715:
+TRACE_EVENT(xfs_bunmap,
+	TP_PROTO(struct xfs_inode *ip, xfs_fileoff_t bno, xfs_filblks_t len,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4261: FILE: fs/xfs/linux-2.6/xfs_trace.h:715:
+	TP_PROTO(struct xfs_inode *ip, xfs_fileoff_t bno, xfs_filblks_t len,
+		 int flags, unsigned long caller_ip),
+	TP_ARGS(ip, bno, len, flags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4262: FILE: fs/xfs/linux-2.6/xfs_trace.h:716:
+		 int flags, unsigned long caller_ip),
+	TP_ARGS(ip, bno, len, flags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4263: FILE: fs/xfs/linux-2.6/xfs_trace.h:717:
+	TP_ARGS(ip, bno, len, flags, caller_ip),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4265: FILE: fs/xfs/linux-2.6/xfs_trace.h:719:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4265: FILE: fs/xfs/linux-2.6/xfs_trace.h:719:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4266: FILE: fs/xfs/linux-2.6/xfs_trace.h:720:
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4267: FILE: fs/xfs/linux-2.6/xfs_trace.h:721:
+		__field(xfs_ino_t, ino)
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4268: FILE: fs/xfs/linux-2.6/xfs_trace.h:722:
+		__field(xfs_fsize_t, size)
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4269: FILE: fs/xfs/linux-2.6/xfs_trace.h:723:
+		__field(xfs_fileoff_t, bno)
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4270: FILE: fs/xfs/linux-2.6/xfs_trace.h:724:
+		__field(xfs_filblks_t, len)
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4271: FILE: fs/xfs/linux-2.6/xfs_trace.h:725:
+		__field(unsigned long, caller_ip)
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4272: FILE: fs/xfs/linux-2.6/xfs_trace.h:726:
+		__field(int, flags)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4273: FILE: fs/xfs/linux-2.6/xfs_trace.h:727:
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4275: FILE: fs/xfs/linux-2.6/xfs_trace.h:729:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4275: FILE: fs/xfs/linux-2.6/xfs_trace.h:729:
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->size = ip->i_d.di_size;
+		__entry->bno = bno;
+		__entry->len = len;
+		__entry->caller_ip = caller_ip;
+		__entry->flags = flags;
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4283: FILE: fs/xfs/linux-2.6/xfs_trace.h:737:
+	),
+
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->size,
+		  __entry->bno,
+		  __entry->len,
+		  __print_flags(__entry->flags, "|", XFS_BMAPI_FLAGS),
+		  (void *)__entry->caller_ip)
+
+);

WARNING:SPLIT_STRING: quoted string split across lines
#4286: FILE: fs/xfs/linux-2.6/xfs_trace.h:740:
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",

WARNING:MISSING_SPACE: break quoted strings at a space character
#4286: FILE: fs/xfs/linux-2.6/xfs_trace.h:740:
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx bno 0x%llx len 0x%llx"
+		  "flags %s by %pf",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4301: FILE: fs/xfs/linux-2.6/xfs_trace.h:755:
+TRACE_EVENT(xfs_alloc_busy,
+	TP_PROTO(struct xfs_mount *mp, xfs_agnumber_t agno, xfs_agblock_t agbno,
+		 xfs_extlen_t len, int slot, const char *op),
+	TP_ARGS(mp, agno, agbno, len, slot, op),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(const char *, op)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4302: FILE: fs/xfs/linux-2.6/xfs_trace.h:756:
+TRACE_EVENT(xfs_alloc_busy,
+	TP_PROTO(struct xfs_mount *mp, xfs_agnumber_t agno, xfs_agblock_t agbno,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4302: FILE: fs/xfs/linux-2.6/xfs_trace.h:756:
+	TP_PROTO(struct xfs_mount *mp, xfs_agnumber_t agno, xfs_agblock_t agbno,
+		 xfs_extlen_t len, int slot, const char *op),
+	TP_ARGS(mp, agno, agbno, len, slot, op),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(const char *, op)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4303: FILE: fs/xfs/linux-2.6/xfs_trace.h:757:
+		 xfs_extlen_t len, int slot, const char *op),
+	TP_ARGS(mp, agno, agbno, len, slot, op),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(const char *, op)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4304: FILE: fs/xfs/linux-2.6/xfs_trace.h:758:
+	TP_ARGS(mp, agno, agbno, len, slot, op),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(const char *, op)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4306: FILE: fs/xfs/linux-2.6/xfs_trace.h:760:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4306: FILE: fs/xfs/linux-2.6/xfs_trace.h:760:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(const char *, op)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4307: FILE: fs/xfs/linux-2.6/xfs_trace.h:761:
+		__field(dev_t, dev)
+		__field(const char *, op)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4308: FILE: fs/xfs/linux-2.6/xfs_trace.h:762:
+		__field(const char *, op)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4309: FILE: fs/xfs/linux-2.6/xfs_trace.h:763:
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4310: FILE: fs/xfs/linux-2.6/xfs_trace.h:764:
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4311: FILE: fs/xfs/linux-2.6/xfs_trace.h:765:
+		__field(xfs_extlen_t, len)
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4312: FILE: fs/xfs/linux-2.6/xfs_trace.h:766:
+		__field(int, slot)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4313: FILE: fs/xfs/linux-2.6/xfs_trace.h:767:
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4314: FILE: fs/xfs/linux-2.6/xfs_trace.h:768:
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4316: FILE: fs/xfs/linux-2.6/xfs_trace.h:770:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4316: FILE: fs/xfs/linux-2.6/xfs_trace.h:770:
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->op = op;
+		__entry->agno = agno;
+		__entry->agbno = agbno;
+		__entry->len = len;
+		__entry->slot = slot;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4324: FILE: fs/xfs/linux-2.6/xfs_trace.h:778:
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u len %u slot %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->len,
+		  __entry->slot,
+		  (void *)__entry->caller_ip)
+
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4348: FILE: fs/xfs/linux-2.6/xfs_trace.h:802:
+TRACE_EVENT(xfs_agf,
+	TP_PROTO(struct xfs_mount *mp, struct xfs_agf *agf, int flags),
+	TP_ARGS(mp, agf, flags),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(int, flags)
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4349: FILE: fs/xfs/linux-2.6/xfs_trace.h:803:
+TRACE_EVENT(xfs_agf,
+	TP_PROTO(struct xfs_mount *mp, struct xfs_agf *agf, int flags),

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4349: FILE: fs/xfs/linux-2.6/xfs_trace.h:803:
+	TP_PROTO(struct xfs_mount *mp, struct xfs_agf *agf, int flags),
+	TP_ARGS(mp, agf, flags),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(int, flags)
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4350: FILE: fs/xfs/linux-2.6/xfs_trace.h:804:
+	TP_ARGS(mp, agf, flags),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(int, flags)
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4352: FILE: fs/xfs/linux-2.6/xfs_trace.h:806:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4352: FILE: fs/xfs/linux-2.6/xfs_trace.h:806:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(int, flags)
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4353: FILE: fs/xfs/linux-2.6/xfs_trace.h:807:
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(int, flags)
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4354: FILE: fs/xfs/linux-2.6/xfs_trace.h:808:
+		__field(xfs_agnumber_t, agno)
+		__field(int, flags)
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4355: FILE: fs/xfs/linux-2.6/xfs_trace.h:809:
+		__field(int, flags)
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4356: FILE: fs/xfs/linux-2.6/xfs_trace.h:810:
+		__field(__u32, length)
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4357: FILE: fs/xfs/linux-2.6/xfs_trace.h:811:
+		__field(__u32, bno_root)
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4358: FILE: fs/xfs/linux-2.6/xfs_trace.h:812:
+		__field(__u32, cnt_root)
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4359: FILE: fs/xfs/linux-2.6/xfs_trace.h:813:
+		__field(__u32, bno_level)
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4360: FILE: fs/xfs/linux-2.6/xfs_trace.h:814:
+		__field(__u32, cnt_level)
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4361: FILE: fs/xfs/linux-2.6/xfs_trace.h:815:
+		__field(__u32, flfirst)
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4362: FILE: fs/xfs/linux-2.6/xfs_trace.h:816:
+		__field(__u32, fllast)
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4363: FILE: fs/xfs/linux-2.6/xfs_trace.h:817:
+		__field(__u32, flcount)
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4364: FILE: fs/xfs/linux-2.6/xfs_trace.h:818:
+		__field(__u32, freeblks)
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4365: FILE: fs/xfs/linux-2.6/xfs_trace.h:819:
+		__field(__u32, longest)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4366: FILE: fs/xfs/linux-2.6/xfs_trace.h:820:
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4367: FILE: fs/xfs/linux-2.6/xfs_trace.h:821:
+	),
+
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4369: FILE: fs/xfs/linux-2.6/xfs_trace.h:823:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4369: FILE: fs/xfs/linux-2.6/xfs_trace.h:823:
+	TP_fast_assign(
+		__entry->dev = mp->m_super->s_dev;
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;
+		__entry->length = be32_to_cpu(agf->agf_length),
+		__entry->bno_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_BNO]),
+		__entry->cnt_root = be32_to_cpu(agf->agf_roots[XFS_BTNUM_CNT]),
+		__entry->bno_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_BNO]),
+		__entry->cnt_level = be32_to_cpu(agf->agf_levels[XFS_BTNUM_CNT]),
+		__entry->flfirst = be32_to_cpu(agf->agf_flfirst),
+		__entry->fllast = be32_to_cpu(agf->agf_fllast),
+		__entry->flcount = be32_to_cpu(agf->agf_flcount),
+		__entry->freeblks = be32_to_cpu(agf->agf_freeblks),
+		__entry->longest = be32_to_cpu(agf->agf_longest);
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#4371: FILE: fs/xfs/linux-2.6/xfs_trace.h:825:
+		__entry->agno = be32_to_cpu(agf->agf_seqno),
+		__entry->flags = flags;

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4384: FILE: fs/xfs/linux-2.6/xfs_trace.h:838:
+	),
+
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->agno,
+		  __print_flags(__entry->flags, "|", XFS_AGF_FLAGS),
+		  __entry->length,
+		  __entry->bno_root,
+		  __entry->cnt_root,
+		  __entry->bno_level,
+		  __entry->cnt_level,
+		  __entry->flfirst,
+		  __entry->fllast,
+		  __entry->flcount,
+		  __entry->freeblks,
+		  __entry->longest,
+		  (void *)__entry->caller_ip)
+);

WARNING:SPLIT_STRING: quoted string split across lines
#4387: FILE: fs/xfs/linux-2.6/xfs_trace.h:841:
+	TP_printk("dev %d:%d agno %u flags %s length %u roots b %u c %u "
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "

WARNING:SPLIT_STRING: quoted string split across lines
#4388: FILE: fs/xfs/linux-2.6/xfs_trace.h:842:
+		  "levels b %u c %u flfirst %u fllast %u flcount %u "
+		  "freeblks %u longest %u by %pf",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4409: FILE: fs/xfs/linux-2.6/xfs_trace.h:863:
+TRACE_EVENT(xfs_free_extent,
+	TP_PROTO(struct xfs_mount *mp, xfs_agnumber_t agno, xfs_agblock_t agbno,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4413: FILE: fs/xfs/linux-2.6/xfs_trace.h:867:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4423: FILE: fs/xfs/linux-2.6/xfs_trace.h:877:
+	TP_fast_assign(

ERROR:CODE_INDENT: code indent should use tabs where possible
#4440: FILE: fs/xfs/linux-2.6/xfs_trace.h:894:
+^I^I  ^I(__entry->haveright ? "both" : "left") :$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4440: FILE: fs/xfs/linux-2.6/xfs_trace.h:894:
+^I^I  ^I(__entry->haveright ? "both" : "left") :$

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4445: FILE: fs/xfs/linux-2.6/xfs_trace.h:899:
+TRACE_EVENT(xfs_alloc_extent,
+	TP_PROTO(struct xfs_alloc_arg *args, char *op),
+	TP_ARGS(args, op),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4446: FILE: fs/xfs/linux-2.6/xfs_trace.h:900:
+TRACE_EVENT(xfs_alloc_extent,
+	TP_PROTO(struct xfs_alloc_arg *args, char *op),

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4446: FILE: fs/xfs/linux-2.6/xfs_trace.h:900:
+	TP_PROTO(struct xfs_alloc_arg *args, char *op),
+	TP_ARGS(args, op),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4447: FILE: fs/xfs/linux-2.6/xfs_trace.h:901:
+	TP_ARGS(args, op),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4449: FILE: fs/xfs/linux-2.6/xfs_trace.h:903:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4449: FILE: fs/xfs/linux-2.6/xfs_trace.h:903:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4450: FILE: fs/xfs/linux-2.6/xfs_trace.h:904:
+		__field(dev_t, dev)
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4451: FILE: fs/xfs/linux-2.6/xfs_trace.h:905:
+		__field(xfs_agnumber_t, agno)
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4452: FILE: fs/xfs/linux-2.6/xfs_trace.h:906:
+		__field(xfs_agblock_t, agbno)
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4453: FILE: fs/xfs/linux-2.6/xfs_trace.h:907:
+		__field(xfs_extlen_t, minlen)
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4454: FILE: fs/xfs/linux-2.6/xfs_trace.h:908:
+		__field(xfs_extlen_t, maxlen)
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4455: FILE: fs/xfs/linux-2.6/xfs_trace.h:909:
+		__field(xfs_extlen_t, mod)
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4456: FILE: fs/xfs/linux-2.6/xfs_trace.h:910:
+		__field(xfs_extlen_t, prod)
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4457: FILE: fs/xfs/linux-2.6/xfs_trace.h:911:
+		__field(xfs_extlen_t, minleft)
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4458: FILE: fs/xfs/linux-2.6/xfs_trace.h:912:
+		__field(xfs_extlen_t, total)
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4459: FILE: fs/xfs/linux-2.6/xfs_trace.h:913:
+		__field(xfs_extlen_t, alignment)
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4460: FILE: fs/xfs/linux-2.6/xfs_trace.h:914:
+		__field(xfs_extlen_t, len)
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4461: FILE: fs/xfs/linux-2.6/xfs_trace.h:915:
+		__field(short, type)
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4462: FILE: fs/xfs/linux-2.6/xfs_trace.h:916:
+		__field(short, otype)
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4463: FILE: fs/xfs/linux-2.6/xfs_trace.h:917:
+		__field(char, wasdel)
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4464: FILE: fs/xfs/linux-2.6/xfs_trace.h:918:
+		__field(char, wasfromfl)
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4465: FILE: fs/xfs/linux-2.6/xfs_trace.h:919:
+		__field(char, isfl)
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4466: FILE: fs/xfs/linux-2.6/xfs_trace.h:920:
+		__field(char, userdata)
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4467: FILE: fs/xfs/linux-2.6/xfs_trace.h:921:
+		__field(const char *, op)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4468: FILE: fs/xfs/linux-2.6/xfs_trace.h:922:
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4469: FILE: fs/xfs/linux-2.6/xfs_trace.h:923:
+	),
+
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4471: FILE: fs/xfs/linux-2.6/xfs_trace.h:925:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4471: FILE: fs/xfs/linux-2.6/xfs_trace.h:925:
+	TP_fast_assign(
+		__entry->dev = args->mp->m_super->s_dev;
+		__entry->agno = args->agno;
+		__entry->agbno = args->agbno;
+		__entry->minlen = args->minlen;
+		__entry->maxlen = args->maxlen;
+		__entry->mod = args->mod;
+		__entry->prod = args->prod;
+		__entry->minleft = args->minleft;
+		__entry->total = args->total;
+		__entry->alignment = args->alignment;
+		// minalignslop?
+		__entry->len = args->len;
+		__entry->type = args->type;
+		__entry->otype = args->otype;
+		__entry->wasdel = args->wasdel;
+		__entry->wasfromfl = args->wasfromfl;
+		__entry->isfl = args->isfl;
+		__entry->userdata = args->userdata;
+		// firstblock?
+		__entry->op = op;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4493: FILE: fs/xfs/linux-2.6/xfs_trace.h:947:
+	),
+
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->op,
+		  __entry->agno,
+		  __entry->agbno,
+		  __entry->minlen,
+		  __entry->maxlen,
+		  __entry->mod,
+		  __entry->prod,
+		  __entry->minleft,
+		  __entry->total,
+		  __entry->alignment,
+		  __entry->len,
+		  __print_symbolic(__entry->type, XFS_ALLOC_TYPES),
+		  __print_symbolic(__entry->otype, XFS_ALLOC_TYPES),
+		  __entry->wasdel,
+		  __entry->wasfromfl,
+		  __entry->isfl,
+		  __entry->userdata,
+		  (char *)__entry->caller_ip)
+);

WARNING:SPLIT_STRING: quoted string split across lines
#4496: FILE: fs/xfs/linux-2.6/xfs_trace.h:950:
+	TP_printk("dev %d:%d %s agno %u agbno %u minlen %u maxlen %u mod %u prod %u "
+		  "minleft %u total %u alignment %u len %u type %s otype %s "

WARNING:SPLIT_STRING: quoted string split across lines
#4497: FILE: fs/xfs/linux-2.6/xfs_trace.h:951:
+		  "minleft %u total %u alignment %u len %u type %s otype %s "
+		  "wasdel %d wasfromfl %d isfl %d userdata %d by %pf",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4522: FILE: fs/xfs/linux-2.6/xfs_trace.h:976:
+TRACE_EVENT(xfs_dir2,
+	TP_PROTO(struct xfs_da_args *args, int i, int j, int count),
+	TP_ARGS(args, i, j, count),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__dynamic_array(char, name, args->namelen)
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4523: FILE: fs/xfs/linux-2.6/xfs_trace.h:977:
+TRACE_EVENT(xfs_dir2,
+	TP_PROTO(struct xfs_da_args *args, int i, int j, int count),

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4523: FILE: fs/xfs/linux-2.6/xfs_trace.h:977:
+	TP_PROTO(struct xfs_da_args *args, int i, int j, int count),
+	TP_ARGS(args, i, j, count),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__dynamic_array(char, name, args->namelen)
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4524: FILE: fs/xfs/linux-2.6/xfs_trace.h:978:
+	TP_ARGS(args, i, j, count),
+
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__dynamic_array(char, name, args->namelen)
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4526: FILE: fs/xfs/linux-2.6/xfs_trace.h:980:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4526: FILE: fs/xfs/linux-2.6/xfs_trace.h:980:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__dynamic_array(char, name, args->namelen)
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4527: FILE: fs/xfs/linux-2.6/xfs_trace.h:981:
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__dynamic_array(char, name, args->namelen)
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4528: FILE: fs/xfs/linux-2.6/xfs_trace.h:982:
+		__field(xfs_ino_t, ino)
+		__dynamic_array(char, name, args->namelen)
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4529: FILE: fs/xfs/linux-2.6/xfs_trace.h:983:
+		__dynamic_array(char, name, args->namelen)
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4530: FILE: fs/xfs/linux-2.6/xfs_trace.h:984:
+		__field(int, namelen)
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4531: FILE: fs/xfs/linux-2.6/xfs_trace.h:985:
+		__field(xfs_dahash_t, hashval)
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4532: FILE: fs/xfs/linux-2.6/xfs_trace.h:986:
+		__field(xfs_ino_t, inumber)
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4533: FILE: fs/xfs/linux-2.6/xfs_trace.h:987:
+		__field(int, op_flags)
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4534: FILE: fs/xfs/linux-2.6/xfs_trace.h:988:
+		__field(int, i)
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4535: FILE: fs/xfs/linux-2.6/xfs_trace.h:989:
+		__field(int, j)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4536: FILE: fs/xfs/linux-2.6/xfs_trace.h:990:
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4537: FILE: fs/xfs/linux-2.6/xfs_trace.h:991:
+		__field(unsigned long, caller_ip)
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4538: FILE: fs/xfs/linux-2.6/xfs_trace.h:992:
+	),
+
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4540: FILE: fs/xfs/linux-2.6/xfs_trace.h:994:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4540: FILE: fs/xfs/linux-2.6/xfs_trace.h:994:
+	TP_fast_assign(
+		__entry->dev = VFS_I(args->dp)->i_sb->s_dev;
+		__entry->ino = args->dp->i_ino;
+		if (args->namelen)
+			memcpy(__get_str(name), args->name, args->namelen);
+		__entry->namelen = args->namelen;
+		__entry->hashval = args->hashval;
+		__entry->inumber = args->inumber;
+		__entry->op_flags = args->op_flags;
+		__entry->i = i;
+		__entry->j = j;
+		__entry->count = count;
+		__entry->caller_ip = _RET_IP_;
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#4553: FILE: fs/xfs/linux-2.6/xfs_trace.h:1007:
+	),
+
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  (void *)__entry->caller_ip,
+		  __entry->namelen,
+		  __entry->namelen ? __get_str(name) : NULL,
+		  __entry->namelen,
+		  __entry->hashval,
+		  __entry->inumber,
+		  __print_flags(__entry->op_flags, "|", XFS_DA_OP_FLAGS),
+		  __entry->i,
+		  __entry->j,
+		  __entry->count)
+);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#4555: FILE: fs/xfs/linux-2.6/xfs_trace.h:1009:
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "

WARNING:SPLIT_STRING: quoted string split across lines
#4556: FILE: fs/xfs/linux-2.6/xfs_trace.h:1010:
+	TP_printk("dev %d:%d ino 0x%lld %pf name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s i %d j %d count %d",

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5137: FILE: fs/xfs/linux-2.6/xfs_vnode.h:43:
+#define XFS_IO_FLAGS \
+	{ IO_ISAIO,	"AIO" }, \
+	{ IO_ISDIRECT,	"DIRECT" }, \
+	{ IO_INVIS,	"INVIS"}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5153: FILE: fs/xfs/xfs_attr.h:51:
+#define XFS_ATTR_FLAGS \
+	{ ATTR_DONTFOLLOW, 	"DONTFOLLOW" }, \
+	{ ATTR_ROOT,		"ROOT" }, \
+	{ ATTR_TRUST,		"TRUST" }, \
+	{ ATTR_SECURE,		"SECURE" }, \
+	{ ATTR_CREATE,		"CREATE" }, \
+	{ ATTR_REPLACE,		"REPLACE" }, \
+	{ ATTR_KERNOTIME,	"KERNOTIME" }, \
+	{ ATTR_KERNOVAL,	"KERNOVAL" }

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5154: FILE: fs/xfs/xfs_attr.h:52:
+^I{ ATTR_DONTFOLLOW, ^I"DONTFOLLOW" }, \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5174: FILE: fs/xfs/xfs_iomap.h:46:
+#define BMAPI_FLAGS \
+	{ BMAPI_READ,		"READ" }, \
+	{ BMAPI_WRITE,		"WRITE" }, \
+	{ BMAPI_ALLOCATE,	"ALLOCATE" }, \
+	{ BMAPI_IGNSTATE,	"IGNSTATE" }, \
+	{ BMAPI_DIRECT,		"DIRECT" }, \
+	{ BMAPI_MMAP,		"MMAP" }, \
+	{ BMAPI_TRYLOCK,	"TRYLOCK" }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5193: FILE: fs/xfs/xfs_quota.h:95:
+#define XFS_DQ_FLAGS \
+	{ XFS_DQ_USER,		"USER" }, \
+	{ XFS_DQ_PROJ,		"PROJ" }, \
+	{ XFS_DQ_GROUP,		"GROUP" }, \
+	{ XFS_DQ_DIRTY,		"DIRTY" }, \
+	{ XFS_DQ_WANT,		"WANT" }, \
+	{ XFS_DQ_INACTIVE,	"INACTIVE" }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5212: FILE: fs/xfs/xfs_trans.h:103:
+#define XFS_TRANS_TYPES \
+	{ XFS_TRANS_SETATTR_NOT_SIZE,	"SETATTR_NOT_SIZE" }, \
+	{ XFS_TRANS_SETATTR_SIZE,	"SETATTR_SIZE" }, \
+	{ XFS_TRANS_INACTIVE,		"INACTIVE" }, \
+	{ XFS_TRANS_CREATE,		"CREATE" }, \
+	{ XFS_TRANS_CREATE_TRUNC,	"CREATE_TRUNC" }, \
+	{ XFS_TRANS_TRUNCATE_FILE,	"TRUNCATE_FILE" }, \
+	{ XFS_TRANS_REMOVE,		"REMOVE" }, \
+	{ XFS_TRANS_LINK,		"LINK" }, \
+	{ XFS_TRANS_RENAME,		"RENAME" }, \
+	{ XFS_TRANS_MKDIR,		"MKDIR" }, \
+	{ XFS_TRANS_RMDIR,		"RMDIR" }, \
+	{ XFS_TRANS_SYMLINK,		"SYMLINK" }, \
+	{ XFS_TRANS_SET_DMATTRS,	"SET_DMATTRS" }, \
+	{ XFS_TRANS_GROWFS,		"GROWFS" }, \
+	{ XFS_TRANS_STRAT_WRITE,	"STRAT_WRITE" }, \
+	{ XFS_TRANS_DIOSTRAT,		"DIOSTRAT" }, \
+	{ XFS_TRANS_WRITE_SYNC,		"WRITE_SYNC" }, \
+	{ XFS_TRANS_WRITEID,		"WRITEID" }, \
+	{ XFS_TRANS_ADDAFORK,		"ADDAFORK" }, \
+	{ XFS_TRANS_ATTRINVAL,		"ATTRINVAL" }, \
+	{ XFS_TRANS_ATRUNCATE,		"ATRUNCATE" }, \
+	{ XFS_TRANS_ATTR_SET,		"ATTR_SET" }, \
+	{ XFS_TRANS_ATTR_RM,		"ATTR_RM" }, \
+	{ XFS_TRANS_ATTR_FLAG,		"ATTR_FLAG" }, \
+	{ XFS_TRANS_CLEAR_AGI_BUCKET,	"CLEAR_AGI_BUCKET" }, \
+	{ XFS_TRANS_QM_SBCHANGE,	"QM_SBCHANGE" }, \
+	{ XFS_TRANS_QM_QUOTAOFF,	"QM_QUOTAOFF" }, \
+	{ XFS_TRANS_QM_DQALLOC,		"QM_DQALLOC" }, \
+	{ XFS_TRANS_QM_SETQLIM,		"QM_SETQLIM" }, \
+	{ XFS_TRANS_QM_DQCLUSTER,	"QM_DQCLUSTER" }, \
+	{ XFS_TRANS_QM_QINOCREATE,	"QM_QINOCREATE" }, \
+	{ XFS_TRANS_QM_QUOTAOFF_END,	"QM_QOFF_END" }, \
+	{ XFS_TRANS_SB_UNIT,		"SB_UNIT" }, \
+	{ XFS_TRANS_FSYNC_TS,		"FSYNC_TS" }, \
+	{ XFS_TRANS_GROWFSRT_ALLOC,	"GROWFSRT_ALLOC" }, \
+	{ XFS_TRANS_GROWFSRT_ZERO,	"GROWFSRT_ZERO" }, \
+	{ XFS_TRANS_GROWFSRT_FREE,	"GROWFSRT_FREE" }, \
+  	{ XFS_TRANS_SWAPEXT,		"SWAPEXT" }, \
+	{ XFS_TRANS_SB_COUNT,		"SB_COUNT" }, \
+ 	{ XFS_TRANS_DUMMY1,		"DUMMY1" }, \
+ 	{ XFS_TRANS_DUMMY2,		"DUMMY2" }, \
+ 	{ XLOG_UNMOUNT_REC_TYPE,	"UNMOUNT" }

ERROR:CODE_INDENT: code indent should use tabs where possible
#5250: FILE: fs/xfs/xfs_trans.h:141:
+  ^I{ XFS_TRANS_SWAPEXT,^I^I"SWAPEXT" }, \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5250: FILE: fs/xfs/xfs_trans.h:141:
+  ^I{ XFS_TRANS_SWAPEXT,^I^I"SWAPEXT" }, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5250: FILE: fs/xfs/xfs_trans.h:141:
+  ^I{ XFS_TRANS_SWAPEXT,^I^I"SWAPEXT" }, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5252: FILE: fs/xfs/xfs_trans.h:143:
+ ^I{ XFS_TRANS_DUMMY1,^I^I"DUMMY1" }, \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5252: FILE: fs/xfs/xfs_trans.h:143:
+ ^I{ XFS_TRANS_DUMMY1,^I^I"DUMMY1" }, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5252: FILE: fs/xfs/xfs_trans.h:143:
+ ^I{ XFS_TRANS_DUMMY1,^I^I"DUMMY1" }, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5253: FILE: fs/xfs/xfs_trans.h:144:
+ ^I{ XFS_TRANS_DUMMY2,^I^I"DUMMY2" }, \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5253: FILE: fs/xfs/xfs_trans.h:144:
+ ^I{ XFS_TRANS_DUMMY2,^I^I"DUMMY2" }, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5253: FILE: fs/xfs/xfs_trans.h:144:
+ ^I{ XFS_TRANS_DUMMY2,^I^I"DUMMY2" }, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5254: FILE: fs/xfs/xfs_trans.h:145:
+ ^I{ XLOG_UNMOUNT_REC_TYPE,^I"UNMOUNT" }$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5254: FILE: fs/xfs/xfs_trans.h:145:
+ ^I{ XLOG_UNMOUNT_REC_TYPE,^I"UNMOUNT" }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5254: FILE: fs/xfs/xfs_trans.h:145:
+ ^I{ XLOG_UNMOUNT_REC_TYPE,^I"UNMOUNT" }$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5263: FILE: fs/xfs/xfs_trans.h:829:
+#define XFS_LI_FLAGS \
+	{ XFS_LI_IN_AIL,	"IN_AIL" }, \
+	{ XFS_LI_ABORTED,	"ABORTED" }

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#5289: FILE: fs/xfs/xfs_error.c:231:
+		sprintf(rval, "NULLSTARTBLOCK(%Ld)", startblockval(bno));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#5291: FILE: fs/xfs/xfs_error.c:233:
+		sprintf(rval, "%Ld", (xfs_dfsbno_t)bno);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5323: FILE: fs/xfs/xfs_ag.h:89:
+#define XFS_AGF_FLAGS \
+	{ XFS_AGF_MAGICNUM,	"MAGICNUM" }, \
+	{ XFS_AGF_VERSIONNUM,	"VERSIONNUM" }, \
+	{ XFS_AGF_SEQNO,	"SEQNO" }, \
+	{ XFS_AGF_LENGTH,	"LENGTH" }, \
+	{ XFS_AGF_ROOTS,	"ROOTS" }, \
+	{ XFS_AGF_LEVELS,	"LEVELS" }, \
+	{ XFS_AGF_FLFIRST,	"FLFIRST" }, \
+	{ XFS_AGF_FLLAST,	"FLLAST" }, \
+	{ XFS_AGF_FLCOUNT,	"FLCOUNT" }, \
+	{ XFS_AGF_FREEBLKS,	"FREEBLKS" }, \
+	{ XFS_AGF_LONGEST,	"LONGEST" }, \
+	{ XFS_AGF_BTREEBLKS,	"BTREEBLKS" }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5882: FILE: fs/xfs/xfs_da_btree.h:128:
+#define XFS_DA_OP_FLAGS \
+	{ XFS_DA_OP_JUSTCHECK,	"JUSTCHECK" }, \
+	{ XFS_DA_OP_RENAME,	"RENAME" }, \
+	{ XFS_DA_OP_ADDNAME,	"ADDNAME" }, \
+	{ XFS_DA_OP_OKNOENT,	"OKNOENT" }, \
+	{ XFS_DA_OP_CILOOKUP,	"CILOOKUP" }

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000095354.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 66 errors, 206 warnings, 75 checks, 4862 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000095354.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
