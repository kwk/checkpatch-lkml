CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: fs/ext4/inode.c:3127:
+int ext4_expand_extra_isize(struct inode *inode, unsigned int new_extra_isize,
+			struct ext4_iloc iloc, handle_t *handle)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#78: FILE: fs/ext4/inode.c:3133:
+	if (EXT4_I(inode)->i_extra_isize >= new_extra_isize) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: fs/ext4/inode.c:3144:
+	if (!(EXT4_I(inode)->i_state & EXT4_STATE_XATTR) ||
+		header->h_magic != cpu_to_le32(EXT4_XATTR_MAGIC)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: fs/ext4/inode.c:3146:
+		memset((void *)raw_inode + EXT4_GOOD_OLD_INODE_SIZE, 0,
+			new_extra_isize);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#119: FILE: fs/ext4/inode.c:3189:
+		 * with this same handle */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: fs/ext4/inode.c:3191:
+		if ((jbd2_journal_extend(handle,
+			     EXT4_DATA_TRANS_BLOCKS(inode->i_sb))) == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: fs/ext4/inode.c:3193:
+			ret = ext4_expand_extra_isize(inode,
+				EXT4_SB(inode->i_sb)->s_want_extra_isize,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#128: FILE: fs/ext4/inode.c:3198:
+					ext4_warning(inode->i_sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: fs/ext4/inode.c:3199:
+					ext4_warning(inode->i_sb, __FUNCTION__,
+					"Unable to expand inode %lu. Delete"

WARNING:SPLIT_STRING: quoted string split across lines
#130: FILE: fs/ext4/inode.c:3200:
+					"Unable to expand inode %lu. Delete"
+					" some EAs or run e2fsck.",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: fs/ext4/xattr.c:505:
+static inline size_t ext4_xattr_free_space(struct ext4_xattr_entry *last,
+				    size_t *min_offs, void *base, int *total)

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: fs/ext4/xattr.c:511:
+			size_t offs = le16_to_cpu(last->e_value_offs);
+			if (offs < *min_offs)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#224: FILE: fs/ext4/xattr.c:1091:
+			BUG_ON(new_offs + le32_to_cpu(last->e_value_size)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: fs/ext4/xattr.c:1106:
+int ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize,
+			    struct ext4_inode *raw_inode, handle_t *handle)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#268: FILE: fs/ext4/xattr.c:1135:
+	base = start = entry;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#297: FILE: fs/ext4/xattr.c:1164:
+			ext4_error(inode->i_sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: fs/ext4/xattr.c:1165:
+			ext4_error(inode->i_sb, __FUNCTION__,
+				"inode %lu: bad block %llu", inode->i_ino,

CHECK:SPACING: No space is necessary after a cast
#331: FILE: fs/ext4/xattr.c:1198:
+		is = (struct ext4_xattr_ibody_find *) kmalloc(sizeof(struct

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#331: FILE: fs/ext4/xattr.c:1198:
+		is = (struct ext4_xattr_ibody_find *) kmalloc(sizeof(struct

CHECK:SPACING: No space is necessary after a cast
#333: FILE: fs/ext4/xattr.c:1200:
+		bs = (struct ext4_xattr_block_find *) kmalloc(sizeof(struct

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#333: FILE: fs/ext4/xattr.c:1200:
+		bs = (struct ext4_xattr_block_find *) kmalloc(sizeof(struct

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#338: FILE: fs/ext4/xattr.c:1205:
+		is->s.not_found = bs->s.not_found = -ENODATA;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#359: FILE: fs/ext4/xattr.c:1226:
+		if (entry == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#376: FILE: fs/ext4/xattr.c:1243:
+		i.name_index = entry->e_name_index,
+		buffer = kmalloc(EXT4_XATTR_SIZE(size), GFP_KERNEL);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#429: FILE: fs/ext4/xattr.c:1296:
+	if (b_entry_name)
+		kfree(b_entry_name);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#431: FILE: fs/ext4/xattr.c:1298:
+	if (buffer)
+		kfree(buffer);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#437: FILE: fs/ext4/xattr.c:1304:
+	if (bs)
+		kfree(bs);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#443: FILE: fs/ext4/xattr.c:1310:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'raw_inode' may be better as '(raw_inode)' to avoid precedence issues
#456: FILE: fs/ext4/xattr.h:59:
+#define IHDR(inode, raw_inode) \
+	((struct ext4_xattr_ibody_header *) \
+		((void *)raw_inode + \
+		EXT4_GOOD_OLD_INODE_SIZE + \
+		EXT4_I(inode)->i_extra_isize))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#461: FILE: fs/ext4/xattr.h:64:
+#define IFIRST(hdr) ((struct ext4_xattr_entry *)((hdr)+1))
                                                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: fs/ext4/xattr.h:84:
+extern int ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: fs/ext4/xattr.h:85:
+extern int ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize,
+			    struct ext4_inode *raw_inode, handle_t *handle);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: fs/ext4/xattr.h:144:
+ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize,
+			    struct ext4_inode *raw_inode, handle_t *handle)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 20 checks, 403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
