WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
    entries to /proc/sys is likely is to be performed by means of other API.

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: fs/proc/generic.c:309:
+                ++next;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: fs/proc/generic.c:309:
+                ++next;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#94: FILE: fs/proc/generic.c:311:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: fs/proc/generic.c:312:
+                len = next - cp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: fs/proc/generic.c:312:
+                len = next - cp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: fs/proc/generic.c:314:
+                if(de->subdir == NULL){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: fs/proc/generic.c:314:
+                if(de->subdir == NULL){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#97: FILE: fs/proc/generic.c:314:
+                if(de->subdir == NULL){
[...]
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);

ERROR:SPACING: space required before the open brace '{'
#97: FILE: fs/proc/generic.c:314:
+                if(de->subdir == NULL){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#97: FILE: fs/proc/generic.c:314:
+                if(de->subdir == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de->subdir"
#97: FILE: fs/proc/generic.c:314:
+                if(de->subdir == NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: fs/proc/generic.c:315:
+                  /* directory "de" is empty, add myself to it now */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: fs/proc/generic.c:316:
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: fs/proc/generic.c:316:
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#99: FILE: fs/proc/generic.c:316:
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#99: FILE: fs/proc/generic.c:316:
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: fs/proc/generic.c:317:
+                  memcpy(my_name, cp, len - 1);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#100: FILE: fs/proc/generic.c:317:
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);
+                  memcpy(my_name, cp, len - 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: fs/proc/generic.c:317:
+                  memcpy(my_name, cp, len - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: fs/proc/generic.c:318:
+                  proc_mkdir(my_name,de);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: fs/proc/generic.c:318:
+                  proc_mkdir(my_name,de);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#101: FILE: fs/proc/generic.c:318:
+                  proc_mkdir(my_name,de);
                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: fs/proc/generic.c:319:
+                  kfree(my_name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: fs/proc/generic.c:319:
+                  kfree(my_name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: fs/proc/generic.c:320:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: fs/proc/generic.c:320:
+                }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: fs/proc/generic.c:322:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: fs/proc/generic.c:323:
+                struct proc_dir_entry   *parent_de = de;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: fs/proc/generic.c:323:
+                struct proc_dir_entry   *parent_de = de;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: fs/proc/generic.c:324:
+                for (de = parent_de->subdir; de ; de = de->next) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#107: FILE: fs/proc/generic.c:324:
+                struct proc_dir_entry   *parent_de = de;
+                for (de = parent_de->subdir; de ; de = de->next) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: fs/proc/generic.c:324:
+                for (de = parent_de->subdir; de ; de = de->next) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#107: FILE: fs/proc/generic.c:324:
+                for (de = parent_de->subdir; de ; de = de->next) {
+                  if (proc_match(len - 1, cp, de))

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: fs/proc/generic.c:325:
+                  if (proc_match(len - 1, cp, de))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: fs/proc/generic.c:325:
+                  if (proc_match(len - 1, cp, de))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 32)
#108: FILE: fs/proc/generic.c:325:
+                  if (proc_match(len - 1, cp, de))
+                                break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: fs/proc/generic.c:326:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: fs/proc/generic.c:326:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: fs/proc/generic.c:328:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: fs/proc/generic.c:328:
+                }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#111: FILE: fs/proc/generic.c:328:
+
+                }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: fs/proc/generic.c:330:
+                if(de == NULL){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: fs/proc/generic.c:330:
+                if(de == NULL){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 0)
#113: FILE: fs/proc/generic.c:330:
+                if(de == NULL){
[...]
it now */

ERROR:SPACING: space required before the open brace '{'
#113: FILE: fs/proc/generic.c:330:
+                if(de == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#113: FILE: fs/proc/generic.c:330:
+                if(de == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#113: FILE: fs/proc/generic.c:330:
+                if(de == NULL){

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: fs/proc/generic.c:331:
+                  /* we found no appropriate subdirectory, well create$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#115: FILE: fs/proc/generic.c:331:
it now */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: fs/proc/generic.c:332:
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#116: FILE: fs/proc/generic.c:332:
+                  /* we found no appropriate subdirectory, well create
+                  char* my_name = kzalloc( (len - 1)  + 1, GFP_KERNEL);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: fs/proc/generic.c:333:
+                  memcpy(my_name, cp, len - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: fs/proc/generic.c:334:
+                  de = proc_mkdir(my_name,parent_de);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: fs/proc/generic.c:335:
+                  kfree(my_name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: fs/proc/generic.c:336:
+                }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: fs/proc/generic.c:338:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: fs/proc/generic.c:340:
+                if (!de){$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: fs/proc/generic.c:341:
+                        rtn = -ENOENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: fs/proc/generic.c:342:
+                        goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: fs/proc/generic.c:343:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: fs/proc/generic.c:344:
+                cp += len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/proc/generic.c:345:
+        }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373374.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 35 errors, 22 warnings, 6 checks, 71 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373374.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
