WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: arch/x86/es7000/es7000.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: arch/x86/es7000/es7000.h:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VALUE' may be better as '(VALUE)' to avoid precedence issues
#120: FILE: arch/x86/es7000/es7000.h:42:
+#define	MIP_PORT(VALUE)	((VALUE >> 32) & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VALUE' may be better as '(VALUE)' to avoid precedence issues
#122: FILE: arch/x86/es7000/es7000.h:44:
+#define	MIP_RD_LO(VALUE)	(VALUE & 0xffffffff)

CHECK:CAMELCASE: Avoid CamelCase: <Header>
#167: FILE: arch/x86/es7000/es7000.h:89:
+	struct acpi_table_header Header;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <OEMTableAddr>
#168: FILE: arch/x86/es7000/es7000.h:90:
+	u32 OEMTableAddr;

CHECK:CAMELCASE: Avoid CamelCase: <OEMTableSize>
#169: FILE: arch/x86/es7000/es7000.h:91:
+	u32 OEMTableSize;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: arch/x86/es7000/es7000.h:94:
+extern int find_unisys_acpi_oem_table(unsigned long *oem_addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VALUE' may be better as '(VALUE)' to avoid precedence issues
#187: FILE: arch/x86/es7000/es7000.h:109:
+#define	MIP_FUNC(VALUE)		(VALUE & 0xff)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#189: FILE: arch/x86/es7000/es7000.h:111:
+extern int parse_unisys_oem (char *oemptr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: arch/x86/es7000/es7000.h:111:
+extern int parse_unisys_oem (char *oemptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: arch/x86/es7000/es7000.h:112:
+extern void setup_unisys(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: arch/x86/es7000/es7000.h:113:
+extern int es7000_start_cpu(int cpu, unsigned long eip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: arch/x86/es7000/es7000.h:114:
+extern void es7000_sw_apic(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#198: FILE: arch/x86/es7000/es7000plat.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#235: FILE: arch/x86/es7000/es7000plat.c:38:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#236: FILE: arch/x86/es7000/es7000plat.c:39:
+#include <asm/nmi.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#237: FILE: arch/x86/es7000/es7000plat.c:40:
+#include <asm/smp.h>

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#246: FILE: arch/x86/es7000/es7000plat.c:49:
+static volatile unsigned long	*psai = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#246: FILE: arch/x86/es7000/es7000plat.c:49:
+static volatile unsigned long	*psai = NULL;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: arch/x86/es7000/es7000plat.c:52:
+static int ^I^I^Imip_port;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: arch/x86/es7000/es7000plat.c:71:
+		int i;
+		for (i = 0; i < nr_ioapics; i++)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gsi < 16'
#272: FILE: arch/x86/es7000/es7000plat.c:75:
+	if (!ioapic && (gsi < 16))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#299: FILE: arch/x86/es7000/es7000plat.c:102:
+parse_unisys_oem (char *oemptr)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#302: FILE: arch/x86/es7000/es7000plat.c:105:
+^Iint ^I^I^Isuccess = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: arch/x86/es7000/es7000plat.c:110:
+^Istruct mip_reg_info ^I*mi;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: arch/x86/es7000/es7000plat.c:117:
+	for (i=0; i <= 6; i++) {
 	      ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#330: FILE: arch/x86/es7000/es7000plat.c:133:
+			pr_debug("es7000_mipcfg: host_reg = 0x%lx \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#332: FILE: arch/x86/es7000/es7000plat.c:135:
+			pr_debug("es7000_mipcfg: mip_reg = 0x%lx \n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tp"
#338: FILE: arch/x86/es7000/es7000plat.c:141:
+			if (tp != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#352: FILE: arch/x86/es7000/es7000plat.c:155:
+	if (success < 2) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#354: FILE: arch/x86/es7000/es7000plat.c:157:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: arch/x86/es7000/es7000plat.c:168:
+	int i = 0;
+	while (ACPI_SUCCESS(acpi_get_table("OEM1", i++, &header))) {

CHECK:SPACING: No space is necessary after a cast
#366: FILE: arch/x86/es7000/es7000plat.c:169:
+		if (!memcmp((char *) &header->oem_id, "UNISYS", 6)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#393: FILE: arch/x86/es7000/es7000plat.c:196:
+	while (((unsigned long long)host_reg->off_38 &
[...]
+			if (--spin <= 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#396: FILE: arch/x86/es7000/es7000plat.c:199:
+				printk("es7000_mip_write: Timeout waiting for Host Valid Flag");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'es7000_mip_write', this function's name, in a string
#396: FILE: arch/x86/es7000/es7000plat.c:199:
+				printk("es7000_mip_write: Timeout waiting for Host Valid Flag");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#410: FILE: arch/x86/es7000/es7000plat.c:213:
+			printk("es7000_mip_write: Timeout waiting for MIP Valid Flag");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'es7000_mip_write', this function's name, in a string
#410: FILE: arch/x86/es7000/es7000plat.c:213:
+			printk("es7000_mip_write: Timeout waiting for MIP Valid Flag");

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long long)0xffff0000000000ULL' could be '0xffff0000000000ULLULL'
#417: FILE: arch/x86/es7000/es7000plat.c:220:
+		(unsigned long long)0xffff0000000000ULL) >> 48;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!psai"
#428: FILE: arch/x86/es7000/es7000plat.c:231:
+	if (psai == NULL)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#431: FILE: arch/x86/es7000/es7000plat.c:234:
+	vect = ((unsigned long)__pa(eip)/0x1000) << 16;
 	                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: arch/x86/es7000/es7000plat.c:238:
+                ;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: arch/x86/es7000/es7000plat.c:238:
+                ;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#441: FILE: arch/x86/es7000/es7000plat.c:244:
+
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#450: FILE: arch/x86/es7000/es7000plat.c:253:
+		printk("ES7000: Enabling APIC mode.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: arch/x86/es7000/es7000plat.c:254:
+        ^Imemset(&es7000_mip_reg, 0, sizeof(struct mip_reg));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: arch/x86/es7000/es7000plat.c:254:
+        ^Imemset(&es7000_mip_reg, 0, sizeof(struct mip_reg));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: arch/x86/es7000/es7000plat.c:254:
+        ^Imemset(&es7000_mip_reg, 0, sizeof(struct mip_reg));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: arch/x86/es7000/es7000plat.c:255:
+        ^Ies7000_mip_reg.off_0 = MIP_SW_APIC;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#452: FILE: arch/x86/es7000/es7000plat.c:255:
+        ^Ies7000_mip_reg.off_0 = MIP_SW_APIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: arch/x86/es7000/es7000plat.c:255:
+        ^Ies7000_mip_reg.off_0 = MIP_SW_APIC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: arch/x86/es7000/es7000plat.c:256:
+        ^Ies7000_mip_reg.off_38 = (MIP_VALID);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: arch/x86/es7000/es7000plat.c:256:
+        ^Ies7000_mip_reg.off_38 = (MIP_VALID);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: arch/x86/es7000/es7000plat.c:256:
+        ^Ies7000_mip_reg.off_38 = (MIP_VALID);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: arch/x86/es7000/es7000plat.c:257:
+        ^Iwhile ((mip_status = es7000_mip_write(&es7000_mip_reg)) != 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#454: FILE: arch/x86/es7000/es7000plat.c:257:
+        ^Iwhile ((mip_status = es7000_mip_write(&es7000_mip_reg)) != 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: arch/x86/es7000/es7000plat.c:257:
+        ^Iwhile ((mip_status = es7000_mip_write(&es7000_mip_reg)) != 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: arch/x86/es7000/es7000plat.c:258:
+              ^I^Iprintk("es7000_sw_apic: command failed, status = %x\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#455: FILE: arch/x86/es7000/es7000plat.c:258:
+              ^I^Iprintk("es7000_sw_apic: command failed, status = %x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: arch/x86/es7000/es7000plat.c:258:
+              ^I^Iprintk("es7000_sw_apic: command failed, status = %x\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#455: FILE: arch/x86/es7000/es7000plat.c:258:
+              		printk("es7000_sw_apic: command failed, status = %x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'es7000_sw_apic', this function's name, in a string
#455: FILE: arch/x86/es7000/es7000plat.c:258:
+              		printk("es7000_sw_apic: command failed, status = %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: arch/x86/es7000/es7000plat.c:259:
+              		printk("es7000_sw_apic: command failed, status = %x\n",
+				mip_status);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#871: FILE: include/asm-x86/es7000/apic.h:1:
+#ifndef __ASM_ES7000_APIC_H

ERROR:CODE_INDENT: code indent should use tabs where possible
#879: FILE: include/asm-x86/es7000/apic.h:9:
+^I        return (1);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#879: FILE: include/asm-x86/es7000/apic.h:9:
+	        return (1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#890: FILE: include/asm-x86/es7000/apic.h:20:
+}
+#define TARGET_CPUS	(target_cpus())

CHECK:CAMELCASE: Avoid CamelCase: <dest_LowestPrio>
#894: FILE: include/asm-x86/es7000/apic.h:24:
+#define INT_DELIVERY_MODE	(dest_LowestPrio)

CHECK:CAMELCASE: Avoid CamelCase: <dest_Fixed>
#901: FILE: include/asm-x86/es7000/apic.h:31:
+#define INT_DELIVERY_MODE	(dest_Fixed)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#913: FILE: include/asm-x86/es7000/apic.h:43:
+}
+static inline unsigned long check_apicid_present(int bit)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'apicid' may be better as '(apicid)' to avoid precedence issues
#918: FILE: include/asm-x86/es7000/apic.h:48:
+#define apicid_cluster(apicid) (apicid & 0xF0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#923: FILE: include/asm-x86/es7000/apic.h:53:
+	unsigned long id;
+	id = xapic_phys_to_log_apicid(cpu);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#924: FILE: include/asm-x86/es7000/apic.h:54:
+	return (SET_APIC_LOGICAL_ID(id));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#945: FILE: include/asm-x86/es7000/apic.h:75:
+extern void enable_apic_mode(void);

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#948: FILE: include/asm-x86/es7000/apic.h:78:
+extern int apic_version [MAX_APICS];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:LINE_SPACING: Missing a blank line after declarations
#952: FILE: include/asm-x86/es7000/apic.h:82:
+	int apic = per_cpu(x86_bios_cpu_apicid, smp_processor_id());
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs, target cpus %lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#952: FILE: include/asm-x86/es7000/apic.h:82:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs, target cpus %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: include/asm-x86/es7000/apic.h:83:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs, target cpus %lx\n",
+		(apic_version[apic] == 0x14) ?

CHECK:LINE_SPACING: Please don't use multiple blank lines
#967: FILE: include/asm-x86/es7000/apic.h:97:
+
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#972: FILE: include/asm-x86/es7000/apic.h:102:
+	else if (mps_cpu < NR_CPUS)

CHECK:SPACING: No space is necessary after a cast
#973: FILE: include/asm-x86/es7000/apic.h:103:
+		return (int) per_cpu(x86_bios_cpu_apicid, mps_cpu);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#980: FILE: include/asm-x86/es7000/apic.h:110:
+	static int id = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#982: FILE: include/asm-x86/es7000/apic.h:112:
+	physid_mask_t mask;
+	mask = physid_mask_of_physid(id);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: include/asm-x86/es7000/apic.h:122:
+       if (cpu >= NR_CPUS)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#992: FILE: include/asm-x86/es7000/apic.h:122:
+       if (cpu >= NR_CPUS)
+	       return BAD_APICID;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#992: FILE: include/asm-x86/es7000/apic.h:122:
+       if (cpu >= NR_CPUS)

WARNING:TABSTOP: Statements should start on a tabstop
#993: FILE: include/asm-x86/es7000/apic.h:123:
+	       return BAD_APICID;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: include/asm-x86/es7000/apic.h:124:
+       return (int)cpu_2_logical_apicid[cpu];$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1006: FILE: include/asm-x86/es7000/apic.h:136:
+
+

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1015: FILE: include/asm-x86/es7000/apic.h:145:
+	return (1);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1027: FILE: include/asm-x86/es7000/apic.h:157:
+	if (num_bits_set == NR_CPUS)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1042: FILE: include/asm-x86/es7000/apic.h:172:
+			int new_apicid = cpu_to_logical_apicid(cpu);
+			if (apicid_cluster(apicid) !=

ERROR:SPACING: space required before the open brace '{'
#1043: FILE: include/asm-x86/es7000/apic.h:173:
+					apicid_cluster(new_apicid)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1044: FILE: include/asm-x86/es7000/apic.h:174:
+				printk ("%s: Not a valid mask!\n",__FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1044: FILE: include/asm-x86/es7000/apic.h:174:
+				printk ("%s: Not a valid mask!\n",__FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1044: FILE: include/asm-x86/es7000/apic.h:174:
+				printk ("%s: Not a valid mask!\n",__FUNCTION__);
 				                                 ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1044: FILE: include/asm-x86/es7000/apic.h:174:
+				printk ("%s: Not a valid mask!\n",__FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1070: FILE: include/asm-x86/es7000/apicdef.h:1:
+#ifndef __ASM_ES7000_APICDEF_H

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1073: FILE: include/asm-x86/es7000/apicdef.h:4:
+#define		APIC_ID_MASK		(0xFF<<24)
        		            		     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1075: FILE: include/asm-x86/es7000/apicdef.h:6:
+static inline unsigned get_apic_id(unsigned long x)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1077: FILE: include/asm-x86/es7000/apicdef.h:8:
+	return (((x)>>24)&0xFF);
 	            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1077: FILE: include/asm-x86/es7000/apicdef.h:8:
+	return (((x)>>24)&0xFF);
 	                 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1088: FILE: include/asm-x86/es7000/ipi.h:1:
+#ifndef __ASM_ES7000_IPI_H

WARNING:LINE_SPACING: Missing a blank line after declarations
#1101: FILE: include/asm-x86/es7000/ipi.h:14:
+	cpumask_t mask = cpu_online_map;
+	cpu_clear(smp_processor_id(), mask);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1117: FILE: include/asm-x86/es7000/mpparse.h:1:
+#ifndef __ASM_ES7000_MPPARSE_H

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1122: FILE: include/asm-x86/es7000/mpparse.h:6:
+extern int parse_unisys_oem (char *oemptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1122: FILE: include/asm-x86/es7000/mpparse.h:6:
+extern int parse_unisys_oem (char *oemptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1123: FILE: include/asm-x86/es7000/mpparse.h:7:
+extern int find_unisys_acpi_oem_table(unsigned long *oem_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1124: FILE: include/asm-x86/es7000/mpparse.h:8:
+extern void setup_unisys(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1127: FILE: include/asm-x86/es7000/mpparse.h:11:
+extern int acpi_madt_oem_check(char *oem_id, char *oem_table_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1128: FILE: include/asm-x86/es7000/mpparse.h:12:
+extern int mps_oem_check(struct mp_config_table *mpc, char *oem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1129: FILE: include/asm-x86/es7000/mpparse.h:13:
+extern int mps_oem_check(struct mp_config_table *mpc, char *oem,
+				char *productid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1151: FILE: include/asm-x86/es7000/wakecpu.h:1:
+#ifndef __ASM_ES7000_WAKECPU_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1166: FILE: include/asm-x86/es7000/wakecpu.h:16:
+extern int es7000_start_cpu(int cpu, unsigned long eip);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1171: FILE: include/asm-x86/es7000/wakecpu.h:21:
+	int boot_error = 0;
+	boot_error = es7000_start_cpu(phys_apicid, start_eip);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1188: FILE: include/asm-x86/es7000/wakecpu.h:38:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 59 warnings, 43 checks, 722 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
