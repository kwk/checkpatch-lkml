WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#37: FILE: Makefile:4:
+EXTRAVERSION = .4
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: arch/cris/kernel/sys_cris.c:42:
+	err = sys_mmap_pgoff(buffer[0], buffer[1], buffer[2], buffer[3],
                        buffer[4], buffer[5] >> PAGE_SHIFT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: arch/cris/kernel/sys_cris.c:52:
+        return sys_mmap_pgoff(addr, len, prot, flags, fd, pgoff);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: arch/cris/kernel/sys_cris.c:52:
+        return sys_mmap_pgoff(addr, len, prot, flags, fd, pgoff);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#933: FILE: arch/m68knommu/kernel/sys_m68k.c:59:
+	error = sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,
+				a.offset >> PAGE_SHIFT);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1048: FILE: arch/mips/kernel/linux32.c:76:
+			       pgoff >> (PAGE_SHIFT-12));
 			                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1112: FILE: arch/mips/kernel/syscall.c:156:
+	return sys_mmap_pgoff(addr, len, prot, flags, fd, pgoff >> (PAGE_SHIFT-12));
 	                                                                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1510: FILE: arch/sh/kernel/sys_sh.c:37:
+	return sys_mmap_pgoff(addr, len, prot, flags, fd, off>>PAGE_SHIFT);
 	                                                     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1654: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1654: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1654: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1654: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1654: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2031: FILE: arch/x86/kernel/sys_i386_32.c:56:
+	err = sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags,
 			a.fd, a.offset >> PAGE_SHIFT);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2101: FILE: arch/xtensa/include/asm/unistd.h:192:
+__SYSCALL( 80, sys_mmap_pgoff, 6)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2158: FILE: drivers/char/agp/intel-agp.c:1157:
+		for (i = intel_private.gtt_entries; i < intel_private.gtt_total_size; i++) {
 			writel(agp_bridge->scratch_page, intel_private.gtt+i);
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2236: FILE: drivers/gpu/drm/ati_pcigart.c:115:
+			DRM_ERROR("fail to set dma mask to 0x%Lx\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2277: FILE: drivers/gpu/drm/drm_pci.c:50:
+drm_dma_handle_t *drm_pci_alloc(struct drm_device * dev, size_t size, size_t align)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#2381: FILE: drivers/gpu/drm/i915/i915_reg.h:972:
+#define   LVDS_ENABLE_DITHER		(1 << 25)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2390: FILE: drivers/gpu/drm/i915/i915_reg.h:1743:
+#define PIPE_ENABLE_DITHER	(1 << 4)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2464: FILE: drivers/gpu/drm/i915/intel_display.c:2905:
+		if (is_lvds) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2471: FILE: drivers/gpu/drm/i915/intel_display.c:2912:
+		} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2743: FILE: drivers/hwmon/coretemp.c:181:
+		if (host_bridge && host_bridge->vendor == PCI_VENDOR_ID_INTEL
+		    && (host_bridge->device == 0xa000	/* NM10 based nettop */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2744: FILE: drivers/hwmon/coretemp.c:182:
+		    && (host_bridge->device == 0xa000	/* NM10 based nettop */
+		    || host_bridge->device == 0xa010))	/* NM10 based netbook */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2856: FILE: drivers/net/wireless/ath/ath5k/eeprom.c:127:
+		/*
+		 * Fail safe check to prevent stupid loops due

WARNING:SPLIT_STRING: quoted string split across lines
#2862: FILE: drivers/net/wireless/ath/ath5k/eeprom.c:133:
+			ATH5K_ERR(ah->ah_sc, "Invalid max custom EEPROM size: "
+				  "%d (0x%04x) max expected: %d (0x%04x)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#2877: FILE: drivers/net/wireless/ath/ath5k/eeprom.c:147:
+		ATH5K_ERR(ah->ah_sc, "Invalid EEPROM "
+			  "checksum: 0x%04x eep_max: 0x%04x (%s)\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv->mesh_connect_status == LBS_CONNECTED'
#2963: FILE: drivers/net/wireless/libertas/scan.c:470:
+	if (priv->mesh_dev && (priv->mesh_connect_status == LBS_CONNECTED) &&
+	    !priv->tx_pending_len)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3011: FILE: drivers/xen/manage.c:105:
+	printk(KERN_DEBUG "suspending xenstore...\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3050: FILE: fs/exofs/inode.c:735:
+static int exofs_write_end(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3050: FILE: fs/exofs/inode.c:735:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3050: FILE: fs/exofs/inode.c:735:
+			loff_t pos, unsigned len, unsigned copied,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3058: FILE: fs/exofs/inode.c:743:
+	ret = simple_write_end(file, mapping,pos, len, copied, page, fsdata);
 	                                    ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3091: FILE: fs/fcntl.c:626:
+ * match the state "is the filp on a fasync list".
                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3097: FILE: fs/fcntl.c:631:
+static int fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3110: FILE: fs/fcntl.c:639:
+		if (fa->fa_file != filp)
 		                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3128: FILE: fs/fcntl.c:657:
+ * match the state "is the filp on a fasync list".
                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3130: FILE: fs/fcntl.c:659:
+static int fasync_add_entry(int fd, struct file *filp, struct fasync_struct **fapp)
                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3157: FILE: fs/fcntl.c:671:
+		if (fa->fa_file != filp)
 		                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3173: FILE: fs/fcntl.c:679:
+	new->fa_file = filp;
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3196: FILE: fs/fcntl.c:698:
+int fasync_helper(int fd, struct file * filp, int on, struct fasync_struct **fapp)
                                         ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3196: FILE: fs/fcntl.c:698:
+int fasync_helper(int fd, struct file * filp, int on, struct fasync_struct **fapp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3199: FILE: fs/fcntl.c:701:
+		return fasync_remove_entry(filp, fapp);
 		                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3200: FILE: fs/fcntl.c:702:
+	return fasync_add_entry(fd, filp, fapp);
 	                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3261: FILE: include/linux/syscalls.h:884:
+asmlinkage long sys_mmap_pgoff(unsigned long addr, unsigned long len,
+			unsigned long prot, unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3316: FILE: ipc/shm.c:893:
+	file = alloc_file(path.mnt, path.dentry, f_mode,
+			is_file_hugepages(shp->shm_file) ?

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!crc_owner"
#3399: FILE: kernel/module.c:1038:
+	if (crc_owner == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3455: FILE: kernel/module.c:1152:
+		if (!check_version(sechdrs, versindex, name, mod, crc, owner)
+		    || !use_module(mod, owner))

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#3464: FILE: kernel/module.c:1164:
+static inline bool sect_empty(const Elf_Shdr *sect)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sechdrs[i].sh_type == SHT_NOTE'
#3498: FILE: kernel/module.c:1312:
+		if (!sect_empty(&sechdrs[i]) &&
 		    (sechdrs[i].sh_type == SHT_NOTE))

WARNING:LINE_SPACING: Missing a blank line after declarations
#3638: FILE: mm/mmap.c:1441:
+	unsigned long error = arch_mmap_check(addr, len, flags);
+	if (error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3680: FILE: mm/mremap.c:265:
+static struct vm_area_struct *vma_to_resize(unsigned long addr,
+	unsigned long old_len, unsigned long new_len, unsigned long *p)

CHECK:CAMELCASE: Avoid CamelCase: <Efault>
#3686: FILE: mm/mremap.c:271:
+		goto Efault;

CHECK:CAMELCASE: Avoid CamelCase: <Einval>
#3689: FILE: mm/mremap.c:274:
+		goto Einval;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3702: FILE: mm/mremap.c:287:
+		unsigned long locked, lock_limit;
+		locked = mm->locked_vm << PAGE_SHIFT;

CHECK:CAMELCASE: Avoid CamelCase: <Eagain>
#3706: FILE: mm/mremap.c:291:
+			goto Eagain;

CHECK:CAMELCASE: Avoid CamelCase: <Enomem>
#3710: FILE: mm/mremap.c:295:
+		goto Enomem;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3714: FILE: mm/mremap.c:299:
+		unsigned long charged = (new_len - old_len) >> PAGE_SHIFT;
+		if (security_vm_enough_memory(charged))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3732: FILE: mm/mremap.c:317:
+static unsigned long mremap_to(unsigned long addr,
+	unsigned long old_len, unsigned long new_addr,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3750: FILE: mm/mremap.c:335:
+	if ((new_addr <= addr) && (new_addr+new_len) > addr)
 	                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_addr <= addr'
#3750: FILE: mm/mremap.c:335:
+	if ((new_addr <= addr) && (new_addr+new_len) > addr)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3753: FILE: mm/mremap.c:338:
+	if ((addr <= new_addr) && (addr+old_len) > new_addr)
 	                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= new_addr'
#3753: FILE: mm/mremap.c:338:
+	if ((addr <= new_addr) && (addr+old_len) > new_addr)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3765: FILE: mm/mremap.c:350:
+		ret = do_munmap(mm, addr+new_len, old_len - new_len);
 		                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3800: FILE: mm/mremap.c:385:
+	unsigned long end = vma->vm_end + delta;
+	if (end < vma->vm_end) /* overflow */

WARNING:LINE_SPACING: Missing a blank line after declarations
#3937: FILE: mm/mremap.c:485:
+		unsigned long map_flags = 0;
+		if (vma->vm_flags & VM_MAYSHARE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3941: FILE: mm/mremap.c:489:
+		new_addr = get_unmapped_area(vma->vm_file, 0, new_len,
+					vma->vm_pgoff +

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3984: FILE: mm/util.c:279:
+	struct file * file = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4003: FILE: mm/util.c:298:
+		file = hugetlb_file_setup(HUGETLB_ANON_FILE, len, VM_NORESERVE,
+						&user, HUGETLB_ANONHUGE_INODE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4185: FILE: net/mac80211/rx.c:1552:
+			skb_set_queue_mapping(skb,
+				ieee80211_select_queue(rx->sdata, fwd_skb));

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#4311: FILE: net/mac80211/wme.c:75:
+		/*
+		 * XXX: This is clearly broken ... but already was before,

ERROR:CODE_INDENT: code indent should use tabs where possible
#4409: FILE: net/mac80211/wme.h:27:
+                              struct sk_buff *skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4409: FILE: net/mac80211/wme.h:27:
+                              struct sk_buff *skb);$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#4468: FILE: net/sunrpc/auth_gss/auth_gss.c:655:
+		case -ENOSYS:

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#4472: FILE: net/sunrpc/auth_gss/auth_gss.c:659:
+			printk(KERN_CRIT "%s: bad return from "

WARNING:SPLIT_STRING: quoted string split across lines
#4473: FILE: net/sunrpc/auth_gss/auth_gss.c:660:
+			printk(KERN_CRIT "%s: bad return from "
+				"gss_fill_context: %ld\n", __func__, err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4474: FILE: net/sunrpc/auth_gss/auth_gss.c:661:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4488: FILE: net/sunrpc/auth_gss/gss_krb5_mech.c:134:
+	if (!(ctx = kzalloc(sizeof(*ctx), GFP_NOFS))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#4554: FILE: sound/pci/atiixp.c:299:
 static struct snd_pci_quirk atiixp_quirks[] __devinitdata = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000022734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 38 warnings, 34 checks, 3958 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000022734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
