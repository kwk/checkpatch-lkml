WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#13: 
Subject: [RFC][PATCH 5/8] make open_namei() return a filp
                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#30: 
Forcing open_namei() to return a filp fixes this.  Any caller
                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#31: 
getting a 'struct file' back must consider that filp instantiated
                                                ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#53: FILE: fs/namei.c:1754:
+			int mode, struct nameidata *nd)
 			                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#80: FILE: fs/namei.c:1823:
+		return nameidata_to_filp(nd, sys_open_flag);
 		                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#89: FILE: fs/namei.c:1867:
+	return nameidata_to_filp(nd, sys_open_flag);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#126: FILE: fs/open.c:848:
+	return open_namei(dfd, filename, flags, mode, &nd);
 	                                               ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/fs.h:1724:
+extern struct file *open_namei(int dfd, const char *, int, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#138: FILE: include/linux/fs.h:1724:
+extern struct file *open_namei(int dfd, const char *, int, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#138: FILE: include/linux/fs.h:1724:
+extern struct file *open_namei(int dfd, const char *, int, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#138: FILE: include/linux/fs.h:1724:
+extern struct file *open_namei(int dfd, const char *, int, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#138: FILE: include/linux/fs.h:1724:
+extern struct file *open_namei(int dfd, const char *, int, int, struct nameidata *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375348.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 1 checks, 81 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375348.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
