WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Gitweb:     http://git.kernel.org/tip/7e4b21b84c43bb8a80b916e40718ca4ed1fc52e6

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#124: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#145: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#146: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:CAMELCASE: Avoid CamelCase: <PyMODINIT_FUNC>
#154: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:26:
+PyMODINIT_FUNC initperf_trace_context(void);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PyObject>
#156: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:28:
+static PyObject *perf_trace_context_common_pc(PyObject *self, PyObject *args)

CHECK:CAMELCASE: Avoid CamelCase: <PyArg_ParseTuple>
#162: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:34:
+	if (!PyArg_ParseTuple(args, "O", &context))

CHECK:CAMELCASE: Avoid CamelCase: <PyCObject_AsVoidPtr>
#165: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:37:
+	scripting_context = PyCObject_AsVoidPtr(context);

CHECK:CAMELCASE: Avoid CamelCase: <Py_BuildValue>
#168: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:40:
+	return Py_BuildValue("i", retval);

CHECK:CAMELCASE: Avoid CamelCase: <PyMethodDef>
#203: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:75:
+static PyMethodDef ContextMethods[] = {

CHECK:CAMELCASE: Avoid CamelCase: <ContextMethods>
#203: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:75:
+static PyMethodDef ContextMethods[] = {

CHECK:SPACING: No space is necessary after a cast
#215: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:87:
+	(void) Py_InitModule("perf_trace_context", ContextMethods);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Py_InitModule>
#215: FILE: tools/perf/scripts/python/Perf-Trace-Util/Context.c:87:
+	(void) Py_InitModule("perf_trace_context", ContextMethods);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#223: FILE: tools/perf/scripts/python/Perf-Trace-Util/lib/Perf/Trace/Core.py:1:
+# Core.py - Python extension for perf trace, core functions

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#320: FILE: tools/perf/scripts/python/Perf-Trace-Util/lib/Perf/Trace/Util.py:1:
+# Util.py - Python extension for perf trace, miscellaneous utility code

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#351: FILE: tools/perf/util/scripting-engines/trace-event-python.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#367: FILE: tools/perf/util/scripting-engines/trace-event-python.c:17:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#368: FILE: tools/perf/util/scripting-engines/trace-event-python.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#394: FILE: tools/perf/util/scripting-engines/trace-event-python.c:44:
+extern struct scripting_context *scripting_context;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <PyErr_Print>
#403: FILE: tools/perf/util/scripting-engines/trace-event-python.c:53:
+	PyErr_Print();

CHECK:CAMELCASE: Avoid CamelCase: <Py_FatalError>
#404: FILE: tools/perf/util/scripting-engines/trace-event-python.c:54:
+	Py_FatalError("problem in Python trace event handler");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#416: FILE: tools/perf/util/scripting-engines/trace-event-python.c:66:
+	unsigned n = 0;

CHECK:CAMELCASE: Avoid CamelCase: <PyTuple_New>
#421: FILE: tools/perf/util/scripting-engines/trace-event-python.c:71:
+	t = PyTuple_New(MAX_FIELDS);

CHECK:CAMELCASE: Avoid CamelCase: <PyTuple_SetItem>
#427: FILE: tools/perf/util/scripting-engines/trace-event-python.c:77:
+	PyTuple_SetItem(t, n++, PyString_FromString(ev_name));

CHECK:CAMELCASE: Avoid CamelCase: <PyString_FromString>
#427: FILE: tools/perf/util/scripting-engines/trace-event-python.c:77:
+	PyTuple_SetItem(t, n++, PyString_FromString(ev_name));

CHECK:CAMELCASE: Avoid CamelCase: <PyInt_FromLong>
#429: FILE: tools/perf/util/scripting-engines/trace-event-python.c:79:
+	PyTuple_SetItem(t, n++, PyInt_FromLong(value));

CHECK:CAMELCASE: Avoid CamelCase: <_PyTuple_Resize>
#432: FILE: tools/perf/util/scripting-engines/trace-event-python.c:82:
+	if (_PyTuple_Resize(&t, n) == -1)

CHECK:CAMELCASE: Avoid CamelCase: <PyDict_GetItemString>
#435: FILE: tools/perf/util/scripting-engines/trace-event-python.c:85:
+	handler = PyDict_GetItemString(main_dict, handler_name);

CHECK:CAMELCASE: Avoid CamelCase: <PyCallable_Check>
#436: FILE: tools/perf/util/scripting-engines/trace-event-python.c:86:
+	if (handler && PyCallable_Check(handler)) {

CHECK:CAMELCASE: Avoid CamelCase: <PyObject_CallObject>
#437: FILE: tools/perf/util/scripting-engines/trace-event-python.c:87:
+		retval = PyObject_CallObject(handler, t);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!retval"
#438: FILE: tools/perf/util/scripting-engines/trace-event-python.c:88:
+		if (retval == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <Py_DECREF>
#442: FILE: tools/perf/util/scripting-engines/trace-event-python.c:92:
+	Py_DECREF(t);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#464: FILE: tools/perf/util/scripting-engines/trace-event-python.c:114:
+	unsigned n = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!retval"
#484: FILE: tools/perf/util/scripting-engines/trace-event-python.c:134:
+		if (retval == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#549: FILE: tools/perf/util/scripting-engines/trace-event-python.c:199:
+	events[type] = event = trace_find_event(type);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#570: FILE: tools/perf/util/scripting-engines/trace-event-python.c:220:
+	unsigned n = 0;

CHECK:CAMELCASE: Avoid CamelCase: <PyCObject_FromVoidPtr>
#593: FILE: tools/perf/util/scripting-engines/trace-event-python.c:243:
+	context = PyCObject_FromVoidPtr(scripting_context, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: tools/perf/util/scripting-engines/trace-event-python.c:257:
+			int offset;
+			if (field->flags & FIELD_IS_DYNAMIC) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#607: FILE: tools/perf/util/scripting-engines/trace-event-python.c:257:
+			if (field->flags & FIELD_IS_DYNAMIC) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#610: FILE: tools/perf/util/scripting-engines/trace-event-python.c:260:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: tools/perf/util/scripting-engines/trace-event-python.c:263:
+			PyTuple_SetItem(t, n++,
+				PyString_FromString((char *)data + offset));

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#616: FILE: tools/perf/util/scripting-engines/trace-event-python.c:266:
+			if (field->flags & FIELD_IS_SIGNED) {
[...]
+			} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!retval"
#630: FILE: tools/perf/util/scripting-engines/trace-event-python.c:280:
+		if (retval == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!retval"
#639: FILE: tools/perf/util/scripting-engines/trace-event-python.c:289:
+			if (retval == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <PyImport_AddModule>
#652: FILE: tools/perf/util/scripting-engines/trace-event-python.c:302:
+	main_module = PyImport_AddModule("__main__");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!main_module"
#653: FILE: tools/perf/util/scripting-engines/trace-event-python.c:303:
+	if (main_module == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <Py_INCREF>
#655: FILE: tools/perf/util/scripting-engines/trace-event-python.c:305:
+	Py_INCREF(main_module);

CHECK:CAMELCASE: Avoid CamelCase: <PyModule_GetDict>
#657: FILE: tools/perf/util/scripting-engines/trace-event-python.c:307:
+	main_dict = PyModule_GetDict(main_module);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!main_dict"
#658: FILE: tools/perf/util/scripting-engines/trace-event-python.c:308:
+	if (main_dict == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handler"
#665: FILE: tools/perf/util/scripting-engines/trace-event-python.c:315:
+	if (handler == NULL || !PyCallable_Check(handler))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!retval"
#669: FILE: tools/perf/util/scripting-engines/trace-event-python.c:319:
+	if (retval == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <Py_XDECREF>
#675: FILE: tools/perf/util/scripting-engines/trace-event-python.c:325:
+	Py_XDECREF(main_dict);

CHECK:CAMELCASE: Avoid CamelCase: <Py_Initialize>
#696: FILE: tools/perf/util/scripting-engines/trace-event-python.c:346:
+	Py_Initialize();

CHECK:CAMELCASE: Avoid CamelCase: <PySys_SetArgv>
#700: FILE: tools/perf/util/scripting-engines/trace-event-python.c:350:
+	PySys_SetArgv(argc + 1, (char **)command_line);

CHECK:CAMELCASE: Avoid CamelCase: <PyRun_SimpleFile>
#710: FILE: tools/perf/util/scripting-engines/trace-event-python.c:360:
+	err = PyRun_SimpleFile(fp, script);

CHECK:CAMELCASE: Avoid CamelCase: <Py_Finalize>
#728: FILE: tools/perf/util/scripting-engines/trace-event-python.c:378:
+	Py_Finalize();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handler"
#743: FILE: tools/perf/util/scripting-engines/trace-event-python.c:393:
+	if (handler == NULL || !PyCallable_Check(handler))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!retval"
#747: FILE: tools/perf/util/scripting-engines/trace-event-python.c:397:
+	if (retval == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ofp"
#771: FILE: tools/perf/util/scripting-engines/trace-event-python.c:421:
+	if (ofp == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#776: FILE: tools/perf/util/scripting-engines/trace-event-python.c:426:
+	fprintf(ofp, "# perf trace event handlers, "
+		"generated by perf trace -g python\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#779: FILE: tools/perf/util/scripting-engines/trace-event-python.c:429:
+	fprintf(ofp, "# Licensed under the terms of the GNU GPL"
+		" License version 2\n\n");

WARNING:SPLIT_STRING: quoted string split across lines
#782: FILE: tools/perf/util/scripting-engines/trace-event-python.c:432:
+	fprintf(ofp, "# The common_* event handler fields are the most useful "
+		"fields common to\n");

WARNING:SPLIT_STRING: quoted string split across lines
#785: FILE: tools/perf/util/scripting-engines/trace-event-python.c:435:
+	fprintf(ofp, "# all events.  They don't necessarily correspond to "
+		"the 'common_*' fields\n");

WARNING:SPLIT_STRING: quoted string split across lines
#788: FILE: tools/perf/util/scripting-engines/trace-event-python.c:438:
+	fprintf(ofp, "# in the format files.  Those fields not available as "
+		"handler params can\n");

WARNING:SPLIT_STRING: quoted string split across lines
#791: FILE: tools/perf/util/scripting-engines/trace-event-python.c:441:
+	fprintf(ofp, "# be retrieved using Python functions of the form "
+		"common_*(context).\n");

WARNING:SPLIT_STRING: quoted string split across lines
#794: FILE: tools/perf/util/scripting-engines/trace-event-python.c:444:
+	fprintf(ofp, "# See the perf-trace-python Documentation for the list "
+		"of available functions.\n\n");

WARNING:SPLIT_STRING: quoted string split across lines
#834: FILE: tools/perf/util/scripting-engines/trace-event-python.c:484:
+		fprintf(ofp, "\t\tprint_header(event_name, common_cpu, "
+			"common_secs, common_nsecs,\n\t\t\t"

WARNING:BRACES: braces {} are not necessary for single statement blocks
#845: FILE: tools/perf/util/scripting-engines/trace-event-python.c:495:
+			if (count && count % 3 == 0) {
+				fprintf(ofp, "\" \\\n\t\t\"");
+			}

CHECK:BRACES: braces {} should be used on all arms of this statement
#873: FILE: tools/perf/util/scripting-engines/trace-event-python.c:523:
+			if (f->flags & FIELD_IS_FLAG) {
[...]
+			} else if (f->flags & FIELD_IS_SYMBOLIC) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#893: FILE: tools/perf/util/scripting-engines/trace-event-python.c:543:
+			} else

WARNING:SPLIT_STRING: quoted string split across lines
#901: FILE: tools/perf/util/scripting-engines/trace-event-python.c:551:
+	fprintf(ofp, "def trace_unhandled(event_name, context, "
+		"common_cpu, common_secs, common_nsecs,\n\t\t"

WARNING:SPLIT_STRING: quoted string split across lines
#905: FILE: tools/perf/util/scripting-engines/trace-event-python.c:555:
+	fprintf(ofp, "\t\tprint_header(event_name, common_cpu, "
+		"common_secs, common_nsecs,\n\t\tcommon_pid, "

WARNING:SPLIT_STRING: quoted string split across lines
#906: FILE: tools/perf/util/scripting-engines/trace-event-python.c:556:
+		"common_secs, common_nsecs,\n\t\tcommon_pid, "
+		"common_comm)\n\n");

WARNING:SPLIT_STRING: quoted string split across lines
#909: FILE: tools/perf/util/scripting-engines/trace-event-python.c:559:
+	fprintf(ofp, "def print_header("
+		"event_name, cpu, secs, nsecs, pid, comm):\n"

WARNING:SPLIT_STRING: quoted string split across lines
#938: FILE: tools/perf/util/trace-event-scripting.c:50:
+	fprintf(stderr, "Python scripting not supported."
+		"  Install libpython and rebuild perf to enable it.\n"

WARNING:SPLIT_STRING: quoted string split across lines
#940: FILE: tools/perf/util/trace-event-scripting.c:52:
+		"For example:\n  # apt-get install python-dev (ubuntu)"
+		"\n  # yum install python-devel (Fedora)"

WARNING:SPLIT_STRING: quoted string split across lines
#941: FILE: tools/perf/util/trace-event-scripting.c:53:
+		"\n  # yum install python-devel (Fedora)"
+		"\n  etc.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#971: FILE: tools/perf/util/trace-event-scripting.c:83:
+	int err;
+	err = script_spec_register("Python", scripting_ops);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 29 warnings, 46 checks, 900 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
