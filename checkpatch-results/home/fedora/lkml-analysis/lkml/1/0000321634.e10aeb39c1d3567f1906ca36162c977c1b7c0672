WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#323: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1012: FILE: include/asm-sparc64/lmb.h:1:
+#ifndef _SPARC64_LMB_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1028: FILE: include/linux/lmb.h:1:
+#ifndef _LINUX_LMB_H

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1056: FILE: include/linux/lmb.h:29:
+	struct lmb_property region[MAX_LMB_REGIONS+1];
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1068: FILE: include/linux/lmb.h:41:
+extern void __init lmb_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1069: FILE: include/linux/lmb.h:42:
+extern void __init lmb_analyze(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1070: FILE: include/linux/lmb.h:43:
+extern long __init lmb_add(unsigned long base, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1071: FILE: include/linux/lmb.h:44:
+extern long __init lmb_reserve(unsigned long base, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1072: FILE: include/linux/lmb.h:45:
+extern unsigned long __init lmb_alloc(unsigned long size, unsigned long align);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1073: FILE: include/linux/lmb.h:46:
+extern unsigned long __init lmb_alloc_base(unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: include/linux/lmb.h:47:
+extern unsigned long __init lmb_alloc_base(unsigned long size,
+		unsigned long align, unsigned long max_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1075: FILE: include/linux/lmb.h:48:
+extern unsigned long __init __lmb_alloc_base(unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: include/linux/lmb.h:49:
+extern unsigned long __init __lmb_alloc_base(unsigned long size,
+		unsigned long align, unsigned long max_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1077: FILE: include/linux/lmb.h:50:
+extern unsigned long __init lmb_phys_mem_size(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1078: FILE: include/linux/lmb.h:51:
+extern unsigned long __init lmb_end_of_DRAM(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1079: FILE: include/linux/lmb.h:52:
+extern void __init lmb_enforce_memory_limit(unsigned long memory_limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1080: FILE: include/linux/lmb.h:53:
+extern int __init lmb_is_reserved(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1082: FILE: include/linux/lmb.h:55:
+extern void lmb_dump_all(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1089: FILE: include/linux/lmb.h:62:
+}
+static inline unsigned long

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1094: FILE: include/linux/lmb.h:67:
+}
+static inline unsigned long

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1099: FILE: include/linux/lmb.h:72:
+}
+static inline unsigned long

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1142: FILE: lib/lmb.c:1:
+/*

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lmb_dump_all', this function's name, in a string
#1176: FILE: lib/lmb.c:35:
+	DBG("lmb_dump_all:\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1179: FILE: lib/lmb.c:38:
+	for (i=0; i < lmb.memory.cnt ;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#1179: FILE: lib/lmb.c:38:
+	for (i=0; i < lmb.memory.cnt ;i++) {
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: lib/lmb.c:40:
+		DBG("    memory.region[0x%x].base       = 0x%lx\n",
+			    i, lmb.memory.region[i].base);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: lib/lmb.c:42:
+		DBG("		      .size     = 0x%lx\n",
+			    lmb.memory.region[i].size);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1188: FILE: lib/lmb.c:47:
+	for (i=0; i < lmb.reserved.cnt ;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#1188: FILE: lib/lmb.c:47:
+	for (i=0; i < lmb.reserved.cnt ;i++) {
 	                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1190: FILE: lib/lmb.c:49:
+		DBG("    reserved.region[0x%x].base       = 0x%lx\n",
+			    i, lmb.reserved.region[i].base);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: lib/lmb.c:51:
+		DBG("		      .size     = 0x%lx\n",
+			    lmb.reserved.region[i].size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1198: FILE: lib/lmb.c:57:
+static unsigned long __init lmb_addrs_overlap(unsigned long base1,
+		unsigned long size1, unsigned long base2, unsigned long size2)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1200: FILE: lib/lmb.c:59:
+	return ((base1 < (base2+size2)) && (base2 < (base1+size1)));
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1200: FILE: lib/lmb.c:59:
+	return ((base1 < (base2+size2)) && (base2 < (base1+size1)));
 	                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: lib/lmb.c:63:
+static long __init lmb_addrs_adjacent(unsigned long base1, unsigned long size1,
+		unsigned long base2, unsigned long size2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: lib/lmb.c:74:
+static long __init lmb_regions_adjacent(struct lmb_region *rgn,
+		unsigned long r1, unsigned long r2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: lib/lmb.c:97:
+static void __init lmb_coalesce_regions(struct lmb_region *rgn,
+		unsigned long r1, unsigned long r2)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1279: FILE: lib/lmb.c:138:
+	for (i=0; i < rgn->cnt; i++) {
 	      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgnbase == base'
#1283: FILE: lib/lmb.c:142:
+		if ((rgnbase == base) && (rgnsize == size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgnsize == size'
#1283: FILE: lib/lmb.c:142:
+		if ((rgnbase == base) && (rgnsize == size))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1287: FILE: lib/lmb.c:146:
+		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1287: FILE: lib/lmb.c:146:
+		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1287: FILE: lib/lmb.c:146:
+		adjacent = lmb_addrs_adjacent(base,size,rgnbase,rgnsize);
 		                                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1288: FILE: lib/lmb.c:147:
+		if ( adjacent > 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1288: FILE: lib/lmb.c:147:
+		if ( adjacent > 0 ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#1294: FILE: lib/lmb.c:153:
+		else if ( adjacent < 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1294: FILE: lib/lmb.c:153:
+		else if ( adjacent < 0 ) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1294: FILE: lib/lmb.c:153:
+		}
+		else if ( adjacent < 0 ) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1301: FILE: lib/lmb.c:160:
+	if ((i < rgn->cnt-1) && lmb_regions_adjacent(rgn, i, i+1) ) {
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1301: FILE: lib/lmb.c:160:
+	if ((i < rgn->cnt-1) && lmb_regions_adjacent(rgn, i, i+1) ) {
 	                                                      ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1301: FILE: lib/lmb.c:160:
+	if ((i < rgn->cnt-1) && lmb_regions_adjacent(rgn, i, i+1) ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1302: FILE: lib/lmb.c:161:
+		lmb_coalesce_regions(rgn, i, i+1);
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1312: FILE: lib/lmb.c:171:
+	for (i = rgn->cnt-1; i >= 0; i--) {
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1314: FILE: lib/lmb.c:173:
+			rgn->region[i+1].base = rgn->region[i].base;
 			             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1315: FILE: lib/lmb.c:174:
+			rgn->region[i+1].size = rgn->region[i].size;
 			             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1317: FILE: lib/lmb.c:176:
+			rgn->region[i+1].base = base;
 			             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1318: FILE: lib/lmb.c:177:
+			rgn->region[i+1].size = size;
 			             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lmb.memory
#1330: FILE: lib/lmb.c:189:
+	struct lmb_region *_rgn = &(lmb.memory);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1338: FILE: lib/lmb.c:197:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lmb.reserved
#1342: FILE: lib/lmb.c:201:
+	struct lmb_region *_rgn = &(lmb.reserved);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1344: FILE: lib/lmb.c:203:
+	BUG_ON(0 == size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1344: FILE: lib/lmb.c:203:
+	BUG_ON(0 == size);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1354: FILE: lib/lmb.c:213:
+	for (i=0; i < rgn->cnt; i++) {
 	      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1357: FILE: lib/lmb.c:216:
+		unsigned long rgnsize = rgn->region[i].size;
+		if ( lmb_addrs_overlap(base,size,rgnbase,rgnsize) ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: lib/lmb.c:216:
+		if ( lmb_addrs_overlap(base,size,rgnbase,rgnsize) ) {
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: lib/lmb.c:216:
+		if ( lmb_addrs_overlap(base,size,rgnbase,rgnsize) ) {
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: lib/lmb.c:216:
+		if ( lmb_addrs_overlap(base,size,rgnbase,rgnsize) ) {
 		                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1357: FILE: lib/lmb.c:216:
+		if ( lmb_addrs_overlap(base,size,rgnbase,rgnsize) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1357: FILE: lib/lmb.c:216:
+		if ( lmb_addrs_overlap(base,size,rgnbase,rgnsize) ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1357: FILE: lib/lmb.c:216:
+		if ( lmb_addrs_overlap(base,size,rgnbase,rgnsize) ) {
+			break;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1379: FILE: lib/lmb.c:238:
+		panic("ERROR: Failed to allocate 0x%lx bytes below 0x%lx.\n",
+				size, max_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1390: FILE: lib/lmb.c:249:
+unsigned long __init __lmb_alloc_base(unsigned long size, unsigned long align,
+				    unsigned long max_addr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1395: FILE: lib/lmb.c:254:
+	BUG_ON(0 == size);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1395: FILE: lib/lmb.c:254:
+	BUG_ON(0 == size);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1401: FILE: lib/lmb.c:260:
+	for (i = lmb.memory.cnt-1; i >= 0; i--) {
 	                       ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1405: FILE: lib/lmb.c:264:
+		if (max_addr == LMB_ALLOC_ANYWHERE)
[...]
+		else if (lmbbase < max_addr) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1410: FILE: lib/lmb.c:269:
+		} else

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1414: FILE: lib/lmb.c:273:
+		       ((j = lmb_overlaps_region(&lmb.reserved, base, size)) >= 0) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base != 0'
#1418: FILE: lib/lmb.c:277:
+		if ((base != 0) && (lmbbase <= base))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lmbbase <= base'
#1418: FILE: lib/lmb.c:277:
+		if ((base != 0) && (lmbbase <= base))

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1449: FILE: lib/lmb.c:308:
+	if (! memory_limit)
 	    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= lmb.reserved.region[i].base'
#1491: FILE: lib/lmb.c:350:
+		if ((addr >= lmb.reserved.region[i].base) && (addr <= upper))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= upper'
#1491: FILE: lib/lmb.c:350:
+		if ((addr >= lmb.reserved.region[i].base) && (addr <= upper))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000321634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 11 warnings, 50 checks, 882 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000321634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
