WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#31: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: drivers/block/dst/export.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: drivers/block/dst/export.c:81:
+		if (memcmp(s->addr.sa_data + 2, sa->sa_data + 2,
+					sa->sa_data_len - 2))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: drivers/block/dst/export.c:144:
+			printk("%s: revents: %x, socket: %p, err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: drivers/block/dst/export.c:145:
+			printk("%s: revents: %x, socket: %p, err: %d.\n",
+					__func__, revents, st->socket, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: drivers/block/dst/export.c:170:
+	err = kernel_getpeername(sock, (struct sockaddr *)&new->ctl.addr,
+			(int *)&new->ctl.addr.sa_data_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: drivers/block/dst/export.c:178:
+		dst_dump_addr(sock, (struct sockaddr *)&new->ctl.addr,
+				"Client is not allowed to connect");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: drivers/block/dst/export.c:187:
+	dst_dump_addr(sock, (struct sockaddr *)&new->ctl.addr,
+			"Connected client");

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#240: FILE: drivers/block/dst/export.c:205:
+ * request), or sends back reply that writing succesfully completed.
                                               ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: drivers/block/dst/export.c:218:
+			p = list_first_entry(&st->request_list,
+				struct dst_export_priv, request_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/block/dst/export.c:255:
+		dprintk("%s: st: %p, refcnt: %d, list_empty: %d.\n",
+				__func__, st, atomic_read(&st->refcnt),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/block/dst/export.c:258:
+		wait_event_timeout(st->thread_wait,
+				(atomic_read(&st->refcnt) == 1) ||

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#295: FILE: drivers/block/dst/export.c:260:
+				HZ/2);
 				  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: drivers/block/dst/export.c:267:
+				p = list_first_entry(&st->request_list,
+					struct dst_export_priv, request_entry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: drivers/block/dst/export.c:274:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: drivers/block/dst/export.c:280:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: drivers/block/dst/export.c:306:
+				err = wait_event_interruptible_timeout(st->thread_wait,
+						!list_empty(&st->request_list) ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: drivers/block/dst/export.c:330:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: drivers/block/dst/export.c:344:
+		printk(KERN_ERR "You are trying to export node '%s' without security attributes.\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: drivers/block/dst/export.c:374:
+	err = kernel_bind(st->socket, (struct sockaddr *)&ctl->addr,
+			ctl->addr.sa_data_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/block/dst/export.c:390:
+	err = thread_pool_schedule(n->pool, dst_thread_setup,
+			dst_accept, st, MAX_SCHEDULE_TIMEOUT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: drivers/block/dst/export.c:470:
+		dprintk("%s: bio: %llu/%u, size: %u, err: %d.\n",
+				__func__, (u64)bio->bi_sector, bio->bi_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: drivers/block/dst/export.c:491:
+static int dst_export_write_request(struct dst_state *st,
+		struct bio *bio, unsigned int total_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/block/dst/export.c:552:
+	bio = bio_alloc_bioset(GFP_KERNEL,
+			PAGE_ALIGN(cmd->size) >> PAGE_SHIFT,

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#607: FILE: drivers/block/dst/export.c:572:
+	 * uptodate (set by itself actually) and rw block
 	   ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/block/dst/export.c:603:
+	dprintk("%s: bio: %llu/%u, rw: %lu, dir: %lu, flags: %lx, phys: %d.\n",
+			__func__, (u64)bio->bi_sector, bio->bi_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: drivers/block/dst/export.c:628:
+	dprintk("%s: id: %llu, bio: %llu/%u, csize: %u, flags: %lu, rw: %lu.\n",
+			__func__, cmd->id, (u64)bio->bi_sector, bio->bi_size,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#676: FILE: drivers/block/dst/export.c:641:
+		cmd->size = cmd->csize = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/block/dst/export.c:643:
+		err = dst_data_send_header(st->socket, cmd,
+				sizeof(struct dst_cmd), 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#704: FILE: drivers/block/dst/state.c:1:
+/*

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#737: FILE: drivers/block/dst/state.c:34:
+struct dst_poll_helper
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#738: FILE: drivers/block/dst/state.c:35:
+^Ipoll_table ^I^Ipt;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: drivers/block/dst/state.c:39:
+static int dst_queue_wake(wait_queue_t *wait, unsigned mode, int sync, void *key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: drivers/block/dst/state.c:48:
+static void dst_queue_func(struct file *file, wait_queue_head_t *whead,
+				 poll_table *pt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: drivers/block/dst/state.c:80:
+static int dst_data_recv_header(struct socket *sock,
+		void *data, unsigned int size, int block)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#798: FILE: drivers/block/dst/state.c:95:
+	msg.msg_flags = (block)?MSG_WAITALL:MSG_DONTWAIT;
 	                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#798: FILE: drivers/block/dst/state.c:95:
+	msg.msg_flags = (block)?MSG_WAITALL:MSG_DONTWAIT;
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: drivers/block/dst/state.c:98:
+	err = kernel_recvmsg(sock, &msg, &iov, 1, iov.iov_len,
+			msg.msg_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: drivers/block/dst/state.c:109:
+int dst_data_send_header(struct socket *sock,
+		void *data, unsigned int size, int more)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#827: FILE: drivers/block/dst/state.c:124:
+	msg.msg_flags = MSG_WAITALL | (more)?MSG_MORE:0;
 	                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#827: FILE: drivers/block/dst/state.c:124:
+	msg.msg_flags = MSG_WAITALL | (more)?MSG_MORE:0;
 	                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: drivers/block/dst/state.c:129:
+		dprintk("%s: size: %u, more: %d, err: %d.\n",
+				__func__, size, more, err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#865: FILE: drivers/block/dst/state.c:162:
+		printk("%s: checking result: cmd: %d, size reported: %llu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/block/dst/state.c:163:
+		printk("%s: checking result: cmd: %d, size reported: %llu.\n",
+			__func__, cmd->cmd, cmd->sector);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: drivers/block/dst/state.c:176:
+	dprintk("%s: n: %p, err: %d, size: %llu, permission: %x.\n",
+			__func__, n, err, n->size, st->permissions);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#899: FILE: drivers/block/dst/state.c:196:
+	sock->sk->sk_sndtimeo = sock->sk->sk_rcvtimeo =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#903: FILE: drivers/block/dst/state.c:200:
+	st->socket = st->read_socket = sock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: drivers/block/dst/state.c:207:
+	dprintk("%s: st: %p, socket: %p, n: %p.\n",
+			__func__, st, st->socket, st->node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#922: FILE: drivers/block/dst/state.c:219:
+		struct sockaddr_in *sin = (struct sockaddr_in *)sa;
+		printk(KERN_INFO "%s %u.%u.%u.%u:%d.\n",

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#922: FILE: drivers/block/dst/state.c:219:
+		printk(KERN_INFO "%s %u.%u.%u.%u:%d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: drivers/block/dst/state.c:220:
+		printk(KERN_INFO "%s %u.%u.%u.%u:%d.\n",
+			str, NIPQUAD(sin->sin_addr.s_addr), ntohs(sin->sin_port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#926: FILE: drivers/block/dst/state.c:223:
+		struct sockaddr_in6 *sin = (struct sockaddr_in6 *)sa;
+		printk(KERN_INFO "%s %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#926: FILE: drivers/block/dst/state.c:223:
+		printk(KERN_INFO "%s %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#927: FILE: drivers/block/dst/state.c:224:
+		printk(KERN_INFO "%s %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",
+			str, NIP6(sin->sin6_addr), ntohs(sin->sin6_port));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: drivers/block/dst/state.c:235:
+		dst_dump_addr(st->socket, (struct sockaddr *)&st->ctl.addr,
+				"Disconnected peer");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: drivers/block/dst/state.c:250:
+	err = kernel_connect(st->socket, (struct sockaddr *)&st->ctl.addr,
+			st->ctl.addr.sa_data_len, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: drivers/block/dst/state.c:259:
+	dst_dump_addr(st->socket, (struct sockaddr *)&ctl->addr,
+			"Connected to peer");

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#976: FILE: drivers/block/dst/state.c:273:
+static void inline dst_state_reset_nolock(struct dst_state *st)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#982: FILE: drivers/block/dst/state.c:279:
+static void inline dst_state_reset(struct dst_state *st)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#999: FILE: drivers/block/dst/state.c:296:
+	BUG_ON(!size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: drivers/block/dst/state.c:310:
+	err = kernel_recvmsg(st->socket, &msg, &iov, 1, iov.iov_len,
+			msg.msg_flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1015: FILE: drivers/block/dst/state.c:312:
+		printk("%s: failed to recv data: size: %llu, err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: drivers/block/dst/state.c:313:
+		printk("%s: failed to recv data: size: %llu, err: %d.\n",
+				__func__, size, err);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1095: FILE: drivers/block/dst/state.c:392:
+		if (		st->socket &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->read_socket == st->socket'
#1095: FILE: drivers/block/dst/state.c:392:
+		if (		st->socket &&
+				(st->read_socket == st->socket) &&
+				(revents & POLLIN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: drivers/block/dst/state.c:393:
+		if (		st->socket &&
+				(st->read_socket == st->socket) &&

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1107: FILE: drivers/block/dst/state.c:404:
+			printk("%s: revents: %x, socket: %p, size: %u, err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1108: FILE: drivers/block/dst/state.c:405:
+			printk("%s: revents: %x, socket: %p, size: %u, err: %d.\n",
+					__func__, revents, st->socket, size, err);

WARNING:SPLIT_STRING: quoted string split across lines
#1243: FILE: drivers/block/dst/state.c:540:
+		dprintk("%s: cmd: cmd: %u, sector: %llu, size: %u, "
+				"csize: %u != digest size %u.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1289: FILE: drivers/block/dst/state.c:586:
+	dprintk("%s: cmd: %u, size: %u, csize: %u, id: %llu, "
+			"sector: %llu, flags: %llx, rw: %llx.\n",

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1303: FILE: drivers/block/dst/state.c:600:
+	switch (cmd->cmd) {
+		case DST_IO_RESPONSE:
[...]
+		case DST_IO:
[...]
+		case DST_CFG:
[...]
+		case DST_PING:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: drivers/block/dst/state.c:632:
+	dprintk("%s: start st: %p, n: %p, scan: %lu, need_exit: %d.\n",
+			__func__, st, n, n->trans_scan_timeout, st->need_exit);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct dst_state)...)
#1385: FILE: drivers/block/dst/state.c:682:
+	st = kzalloc(sizeof(struct dst_state), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1467: FILE: drivers/block/dst/state.c:764:
+	dprintk("%s: st: %p, refcnt: %d.\n",
+			__func__, st, atomic_read(&st->refcnt));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1483: FILE: drivers/block/dst/state.c:780:
+	err = dst_data_send_header(st->socket, cmd,
+		sizeof(struct dst_cmd) + c->crypto_attached_size, bio->bi_vcnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: drivers/block/dst/state.c:789:
+		err = kernel_sendpage(st->socket, bv->bv_page, bv->bv_offset,
+				bv->bv_len, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1501: FILE: drivers/block/dst/state.c:798:
+	dprintk("%s: %d/%d, flags: %x, err: %d.\n",
+			__func__, i, bio->bi_vcnt, flags, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1527: FILE: drivers/block/dst/state.c:824:
+		err = dst_data_send_header(st->socket, &t->cmd,
+				sizeof(struct dst_cmd), 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1548: FILE: drivers/block/dst/thread_pool.c:1:
+/*

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1581: FILE: drivers/block/dst/thread_pool.c:34:
+struct thread_pool_worker
+{

WARNING:SPACING: Unnecessary space before function pointer name
#1598: FILE: drivers/block/dst/thread_pool.c:51:
+	int			(* action)(void *private, void *schedule_data);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1598: FILE: drivers/block/dst/thread_pool.c:51:
+	int			(* action)(void *private, void *schedule_data);
 	   			 ^

WARNING:SPACING: Unnecessary space before function pointer name
#1599: FILE: drivers/block/dst/thread_pool.c:52:
+	void			(* cleanup)(void *private);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1599: FILE: drivers/block/dst/thread_pool.c:52:
+	void			(* cleanup)(void *private);
 	    			 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1643: FILE: drivers/block/dst/thread_pool.c:96:
+		wait_event_interruptible(w->wait,
+			kthread_should_stop() || w->has_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1669: FILE: drivers/block/dst/thread_pool.c:122:
+		dprintk("%s: locking list_empty: %d, thread_num: %d.\n",
+				__func__, list_empty(&p->ready_list), p->thread_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1674: FILE: drivers/block/dst/thread_pool.c:127:
+			w = list_first_entry(&p->ready_list,
+					struct thread_pool_worker,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1678: FILE: drivers/block/dst/thread_pool.c:131:
+			dprintk("%s: deleting w: %p, thread_num: %d, list: %p [%p.%p].\n",
+					__func__, w, p->thread_num, &p->ready_list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1690: FILE: drivers/block/dst/thread_pool.c:143:
+	dprintk("%s: deleted w: %p, thread_num: %d.\n",
+			__func__, w, p->thread_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1730: FILE: drivers/block/dst/thread_pool.c:183:
+int thread_pool_add_worker(struct thread_pool *p,
+		char *name,

WARNING:SPACING: Unnecessary space before function pointer name
#1732: FILE: drivers/block/dst/thread_pool.c:185:
+		void *(* init)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1732: FILE: drivers/block/dst/thread_pool.c:185:
+		void *(* init)(void *private),
 		       ^

WARNING:SPACING: Unnecessary space before function pointer name
#1733: FILE: drivers/block/dst/thread_pool.c:186:
+		void (* cleanup)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1733: FILE: drivers/block/dst/thread_pool.c:186:
+		void (* cleanup)(void *private),
 		      ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*w)...) over kzalloc(sizeof(struct thread_pool_worker)...)
#1739: FILE: drivers/block/dst/thread_pool.c:192:
+	w = kzalloc(sizeof(struct thread_pool_worker), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1793: FILE: drivers/block/dst/thread_pool.c:246:
+struct thread_pool *thread_pool_create(int num, char *name,
+		void *(* init)(void *private),

WARNING:SPACING: Unnecessary space before function pointer name
#1793: FILE: drivers/block/dst/thread_pool.c:246:
+		void *(* init)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1793: FILE: drivers/block/dst/thread_pool.c:246:
+		void *(* init)(void *private),
 		       ^

WARNING:SPACING: Unnecessary space before function pointer name
#1794: FILE: drivers/block/dst/thread_pool.c:247:
+		void (* cleanup)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1794: FILE: drivers/block/dst/thread_pool.c:247:
+		void (* cleanup)(void *private),
 		      ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct thread_pool)...)
#1802: FILE: drivers/block/dst/thread_pool.c:255:
+	p = kzalloc(sizeof(struct thread_pool), GFP_KERNEL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1812: FILE: drivers/block/dst/thread_pool.c:265:
+	for (i=0; i<num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1812: FILE: drivers/block/dst/thread_pool.c:265:
+	for (i=0; i<num; ++i) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1814: FILE: drivers/block/dst/thread_pool.c:267:
+		err = thread_pool_add_worker(p, name, i, init,
+				cleanup, private);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1837: FILE: drivers/block/dst/thread_pool.c:290:
+int thread_pool_schedule_private(struct thread_pool *p,
+		int (* setup)(void *private, void *data),

WARNING:SPACING: Unnecessary space before function pointer name
#1837: FILE: drivers/block/dst/thread_pool.c:290:
+		int (* setup)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1837: FILE: drivers/block/dst/thread_pool.c:290:
+		int (* setup)(void *private, void *data),
 		     ^

WARNING:SPACING: Unnecessary space before function pointer name
#1838: FILE: drivers/block/dst/thread_pool.c:291:
+		int (* action)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1838: FILE: drivers/block/dst/thread_pool.c:291:
+		int (* action)(void *private, void *data),
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1846: FILE: drivers/block/dst/thread_pool.c:299:
+		timeout = wait_event_interruptible_timeout(p->wait,
+				!list_empty(&p->ready_list),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1886: FILE: drivers/block/dst/thread_pool.c:339:
+int thread_pool_schedule(struct thread_pool *p,
+		int (* setup)(void *private, void *data),

WARNING:SPACING: Unnecessary space before function pointer name
#1886: FILE: drivers/block/dst/thread_pool.c:339:
+		int (* setup)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1886: FILE: drivers/block/dst/thread_pool.c:339:
+		int (* setup)(void *private, void *data),
 		     ^

WARNING:SPACING: Unnecessary space before function pointer name
#1887: FILE: drivers/block/dst/thread_pool.c:340:
+		int (* action)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1887: FILE: drivers/block/dst/thread_pool.c:340:
+		int (* action)(void *private, void *data),
 		     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1899: FILE: drivers/block/dst/trans.c:1:
+/*

CHECK:BRACES: braces {} should be used on all arms of this statement
#1948: FILE: drivers/block/dst/trans.c:50:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1952: FILE: drivers/block/dst/trans.c:54:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1959: FILE: drivers/block/dst/trans.c:61:
+	dprintk("%s: %s transaction: id: %llu.\n", __func__,
+			(ret)?"found":"not found", gen);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1959: FILE: drivers/block/dst/trans.c:61:
+			(ret)?"found":"not found", gen);
 			     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1959: FILE: drivers/block/dst/trans.c:61:
+			(ret)?"found":"not found", gen);
 			             ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1977: FILE: drivers/block/dst/trans.c:79:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1981: FILE: drivers/block/dst/trans.c:83:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1989: FILE: drivers/block/dst/trans.c:91:
+		printk("%s: exist: old: gen: %llu, bio: %llu/%u, send_time: %lu, "

WARNING:SPLIT_STRING: quoted string split across lines
#1990: FILE: drivers/block/dst/trans.c:92:
+		printk("%s: exist: old: gen: %llu, bio: %llu/%u, send_time: %lu, "
+				"new: gen: %llu, bio: %llu/%u, send_time: %lu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2042: FILE: drivers/block/dst/trans.c:144:
+		dprintk("%s: completed t: %p, gen: %llu, bio: %p.\n",
+				__func__, t, t->gen, bio);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2082: FILE: drivers/block/dst/trans.c:184:
+	dprintk("%s: gen: %llu, bio: %llu/%u, dir/enc: %d, need_crypto: %d.\n",
+			__func__, t->gen, (u64)bio->bi_sector,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2119: FILE: drivers/block/dst/trans.c:221:
+		if (timeout && time_after(t->send_time + timeout, jiffies)
+				&& t->retries == 0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2121: FILE: drivers/block/dst/trans.c:223:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2209: FILE: drivers/block/dst/trans.c:311:
+	n->trans_cache = kmem_cache_create(n->cache_name,
+			size + n->crypto.crypto_attached_size,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2256: FILE: include/linux/dst.h:1:
+/*

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2297: FILE: include/linux/dst.h:42:
+struct dst_ctl
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2316: FILE: include/linux/dst.h:61:
+struct dst_ctl_ack
+{

WARNING:TYPO_SPELLING: 'Unfortunaltely' may be misspelled - perhaps 'Unfortunately'?
#2323: FILE: include/linux/dst.h:68:
+ * Unfortunaltely socket address structure is not exported to userspace
    ^^^^^^^^^^^^^^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2339: FILE: include/linux/dst.h:84:
+struct dst_network_ctl
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2349: FILE: include/linux/dst.h:94:
+struct dst_crypto_ctl
+{

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2363: FILE: include/linux/dst.h:108:
+#define DST_PERM_READ		(1<<0)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2363: FILE: include/linux/dst.h:108:
+#define DST_PERM_READ		(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2364: FILE: include/linux/dst.h:109:
+#define DST_PERM_WRITE		(1<<1)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2364: FILE: include/linux/dst.h:109:
+#define DST_PERM_WRITE		(1<<1)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2373: FILE: include/linux/dst.h:118:
+struct dst_secure_user
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2383: FILE: include/linux/dst.h:128:
+struct dst_export_ctl
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2389: FILE: include/linux/dst.h:134:
+^IDST_CFG^I= 1, ^I^I/* Request remote configuration */$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2397: FILE: include/linux/dst.h:142:
+struct dst_cmd
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2451: FILE: include/linux/dst.h:196:
+#define dprintk(f, a...) printk(KERN_NOTICE f, ##a)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#2453: FILE: include/linux/dst.h:198:
+static inline void __attribute__ ((format (printf, 1, 2)))

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2460: FILE: include/linux/dst.h:205:
+struct dst_trans
+{

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2481: FILE: include/linux/dst.h:226:
+	 * Well, computers does not speak, they have unique id instead */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2492: FILE: include/linux/dst.h:237:
+struct dst_crypto_engine
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2520: FILE: include/linux/dst.h:265:
+struct dst_state
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2525: FILE: include/linux/dst.h:270:
+^Iwait_queue_t ^I^Iwait;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2526: FILE: include/linux/dst.h:271:
+^Iwait_queue_head_t ^I*whead;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2528: FILE: include/linux/dst.h:273:
+^Iwait_queue_head_t ^Ithread_wait;$

WARNING:SPACING: Unnecessary space before function pointer name
#2540: FILE: include/linux/dst.h:285:
+	void			(* cleanup)(struct dst_state *st);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2540: FILE: include/linux/dst.h:285:
+	void			(* cleanup)(struct dst_state *st);
 	    			 ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2544: FILE: include/linux/dst.h:289:
+	spinlock_t		request_lock;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2568: FILE: include/linux/dst.h:313:
+struct dst_node
+{

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2577: FILE: include/linux/dst.h:322:
+	 * Only valid for exporting nodes */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2578: FILE: include/linux/dst.h:323:
+^Istruct block_device ^I*bdev;$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#2602: FILE: include/linux/dst.h:347:
+	struct mutex		security_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2612: FILE: include/linux/dst.h:357:
+^Iint ^I^I^I(*start)(struct dst_node *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dst_node *' should also have an identifier name
#2612: FILE: include/linux/dst.h:357:
+	int 			(*start)(struct dst_node *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#2634: FILE: include/linux/dst.h:379:
+	struct mutex		trans_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2645: FILE: include/linux/dst.h:390:
+^Istruct delayed_work ^Itrans_work;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2652: FILE: include/linux/dst.h:397:
+struct dst_secure
+{

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2664: FILE: include/linux/dst.h:409:
+	BUG_ON(atomic_read(&st->refcnt) == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2722: FILE: include/linux/dst.h:467:
+int dst_data_send_header(struct socket *sock,
+		void *data, unsigned int size, int more);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2736: FILE: include/linux/dst.h:481:
+struct dst_export_priv
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2757: FILE: include/linux/dst.h:502:
+static inline void dst_bio_to_cmd(struct bio *bio, struct dst_cmd *cmd,
+		u32 command, u64 id)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2794: FILE: include/linux/dst.h:539:
+struct thread_pool
+{

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#2796: FILE: include/linux/dst.h:541:
+	struct mutex		thread_lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2805: FILE: include/linux/dst.h:550:
+int thread_pool_add_worker(struct thread_pool *p,
+		char *name,

WARNING:SPACING: Unnecessary space before function pointer name
#2807: FILE: include/linux/dst.h:552:
+		void *(* init)(void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2807: FILE: include/linux/dst.h:552:
+		void *(* init)(void *data),
 		       ^

WARNING:SPACING: Unnecessary space before function pointer name
#2808: FILE: include/linux/dst.h:553:
+		void (* cleanup)(void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2808: FILE: include/linux/dst.h:553:
+		void (* cleanup)(void *data),
 		      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2813: FILE: include/linux/dst.h:558:
+struct thread_pool *thread_pool_create(int num, char *name,
+		void *(* init)(void *data),

WARNING:SPACING: Unnecessary space before function pointer name
#2813: FILE: include/linux/dst.h:558:
+		void *(* init)(void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2813: FILE: include/linux/dst.h:558:
+		void *(* init)(void *data),
 		       ^

WARNING:SPACING: Unnecessary space before function pointer name
#2814: FILE: include/linux/dst.h:559:
+		void (* cleanup)(void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2814: FILE: include/linux/dst.h:559:
+		void (* cleanup)(void *data),
 		      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2818: FILE: include/linux/dst.h:563:
+int thread_pool_schedule(struct thread_pool *p,
+		int (* setup)(void *stored_private, void *setup_data),

WARNING:SPACING: Unnecessary space before function pointer name
#2818: FILE: include/linux/dst.h:563:
+		int (* setup)(void *stored_private, void *setup_data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2818: FILE: include/linux/dst.h:563:
+		int (* setup)(void *stored_private, void *setup_data),
 		     ^

WARNING:SPACING: Unnecessary space before function pointer name
#2819: FILE: include/linux/dst.h:564:
+		int (* action)(void *stored_private, void *setup_data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2819: FILE: include/linux/dst.h:564:
+		int (* action)(void *stored_private, void *setup_data),
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2822: FILE: include/linux/dst.h:567:
+int thread_pool_schedule_private(struct thread_pool *p,
+		int (* setup)(void *private, void *data),

WARNING:SPACING: Unnecessary space before function pointer name
#2822: FILE: include/linux/dst.h:567:
+		int (* setup)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2822: FILE: include/linux/dst.h:567:
+		int (* setup)(void *private, void *data),
 		     ^

WARNING:SPACING: Unnecessary space before function pointer name
#2823: FILE: include/linux/dst.h:568:
+		int (* action)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2823: FILE: include/linux/dst.h:568:
+		int (* action)(void *private, void *data),
 		     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 44 errors, 59 warnings, 89 checks, 2763 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
