WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
>> Aug  5 21:11:13 io kernel: cm109: cm109_urb_ctl_callback: buzzer_pending=0, ctl_urb_pending=1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#74: FILE: drivers/input/misc/Kconfig:183:
+config INPUT_CM109
+	tristate "C-Media CM109 USB I/O Controller"
+	depends on INPUT && EXPERIMENTAL
+	select USB
+	---help---
+	  Say Y here if you want to enable keyboard and buzzer functions of the
+	  C-Media CM109 usb phones. The audio part is enabled by the generic
+	  usb sound driver, so you might want to enable that as well.
+
+	  To compile this driver as a module, choose M here: the module will be
+	  called cm109.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: drivers/input/misc/cm109.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#153: FILE: drivers/input/misc/cm109.c:47:
+module_param(phone, charp, S_IRUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#175: FILE: drivers/input/misc/cm109.c:69:
+	/* bits 7-6
+	   0: HID_OR1-2 are used for GPO; HID_OR0, 3 are used for buzzer

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#192: FILE: drivers/input/misc/cm109.c:86:
+} __attribute__ ((packed));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#293: FILE: drivers/input/misc/cm109.c:187:
+/*
+  Contributed by Shaun Jackman <sjackman@gmail.com>

WARNING:IF_1: Consider removing the #if 1 and its #endif
#354: FILE: drivers/input/misc/cm109.c:248:
+#if 1

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: drivers/input/misc/cm109.c:352:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: drivers/input/misc/cm109.c:398:
+		const int code = (dev->irq_data->byte[HID_IR0] & 0x0f);
+		report_key(dev, special_keymap(code));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#509: FILE: drivers/input/misc/cm109.c:403:
+	if (dev->keybit == 0xf) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#531: FILE: drivers/input/misc/cm109.c:425:
+	if (likely(!dev->shutdown)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: drivers/input/misc/cm109.c:440:
+			err("%s: usb_submit_urb (urb_ctl) failed %d",
+				__func__, error);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#574: FILE: drivers/input/misc/cm109.c:468:
+	if (likely(!dev->shutdown)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: drivers/input/misc/cm109.c:479:
+				err("%s: usb_submit_urb (urb_irq) failed %d",
+					__func__, error);

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#620: FILE: drivers/input/misc/cm109.c:514:
+				dev->ctl_req->bRequest,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#621: FILE: drivers/input/misc/cm109.c:515:
+				dev->ctl_req->bRequestType,

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#622: FILE: drivers/input/misc/cm109.c:516:
+				le16_to_cpu(dev->ctl_req->wValue),

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#623: FILE: drivers/input/misc/cm109.c:517:
+				le16_to_cpu(dev->ctl_req->wIndex),

WARNING:MEMORY_BARRIER: memory barrier without comment
#644: FILE: drivers/input/misc/cm109.c:538:
+	smp_wmb();

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#687: FILE: drivers/input/misc/cm109.c:581:
+	if (error) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#689: FILE: drivers/input/misc/cm109.c:583:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#744: FILE: drivers/input/misc/cm109.c:638:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#767: FILE: drivers/input/misc/cm109.c:661:
+		.idVendor = VENDOR_ID,

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#768: FILE: drivers/input/misc/cm109.c:662:
+		.idProduct = PRODUCT_ID_CM109,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#769: FILE: drivers/input/misc/cm109.c:663:
+		.bInterfaceClass = USB_CLASS_HID,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#770: FILE: drivers/input/misc/cm109.c:664:
+		.bInterfaceSubClass = 0,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceProtocol>
#771: FILE: drivers/input/misc/cm109.c:665:
+		.bInterfaceProtocol = 0,

CHECK:SPACING: No space is necessary after a cast
#772: FILE: drivers/input/misc/cm109.c:666:
+		.driver_info = (kernel_ulong_t) &info_cm109

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->ctl_req
#781: FILE: drivers/input/misc/cm109.c:675:
+		usb_buffer_free(dev->udev, sizeof(*(dev->ctl_req)),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONST_STRUCT: struct driver_info should normally be const
#808: FILE: drivers/input/misc/cm109.c:702:
+	struct driver_info *nfo = (struct driver_info *)id->driver_info;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#832: FILE: drivers/input/misc/cm109.c:726:
+	dev->idev = input_dev = input_allocate_device();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->ctl_req
#847: FILE: drivers/input/misc/cm109.c:741:
+	dev->ctl_req = usb_buffer_alloc(udev, sizeof(*(dev->ctl_req)),

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#862: FILE: drivers/input/misc/cm109.c:756:
+	pipe = usb_rcvintpipe(udev, endpoint->bEndpointAddress);

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#870: FILE: drivers/input/misc/cm109.c:764:
+			 cm109_urb_irq_callback, dev, endpoint->bInterval);

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#880: FILE: drivers/input/misc/cm109.c:774:
+	dev->ctl_req->wIndex = cpu_to_le16(interface->desc.bInterfaceNumber);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#881: FILE: drivers/input/misc/cm109.c:775:
+	dev->ctl_req->wLength = cpu_to_le16(USB_PKT_LEN);

WARNING:LINE_SPACING: Missing a blank line after declarations
#917: FILE: drivers/input/misc/cm109.c:811:
+		unsigned short k = keymap(i);
+		dev->keymap[i] = k;

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: drivers/input/misc/cm109.c:818:
+		unsigned short k = special_keymap(i);
+		__set_bit(k, input_dev->keybit);

WARNING:MEMORY_BARRIER: memory barrier without comment
#979: FILE: drivers/input/misc/cm109.c:873:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#991: FILE: drivers/input/misc/cm109.c:885:
+	smp_wmb();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 25 checks, 984 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
