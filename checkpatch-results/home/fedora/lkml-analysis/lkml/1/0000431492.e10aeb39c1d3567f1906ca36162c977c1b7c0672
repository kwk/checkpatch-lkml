WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#25: 
Subject: Re: [PATCH 2/2] file capabilities: accomodate >32 bit capabilities
                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
> > > more cumbersome (i.e. finding the right capability for what you wanted

WARNING:TYPO_SPELLING: 'priviledged' may be misspelled - perhaps 'privileged'?
#56: 
> > > > priviledged access (e.g. e2fsck, mount) to stop running because the
        ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#103: 
	3. To accomodate 64-bit caps, specify that capabilities are
	      ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: include/linux/capability.h:43:
   
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#218: FILE: include/linux/capability.h:46:
+#define XATTR_NAME_CAPS XATTR_SECURITY_PREFIX XATTR_CAPS_SUFFIX

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#221: FILE: include/linux/capability.h:49:
+#define XATTR_CAPS_SZ (4*sizeof(__le32))
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: include/linux/security.h:56:
+extern int cap_task_kill(struct task_struct *p, struct siginfo *info, int sig, u32 secid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#276: FILE: include/linux/security.h:57:
+extern int cap_task_setscheduler (struct task_struct *p, int policy, struct sched_param *lp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#276: FILE: include/linux/security.h:57:
+extern int cap_task_setscheduler (struct task_struct *p, int policy, struct sched_param *lp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: include/linux/security.h:58:
+extern int cap_task_setioprio (struct task_struct *p, int ioprio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/security.h:58:
+extern int cap_task_setioprio (struct task_struct *p, int ioprio);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: include/linux/security.h:59:
+extern int cap_task_setnice (struct task_struct *p, int nice);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/linux/security.h:59:
+extern int cap_task_setnice (struct task_struct *p, int nice);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: security/commoncap.c:115:
+static inline int cap_from_disk(struct vfs_cap_data_disk *dcap,
+					struct linux_binprm *bprm, int size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#379: FILE: security/commoncap.c:124:
+	if ((size-1)%3) {
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#379: FILE: security/commoncap.c:124:
+	if ((size-1)%3) {
 	            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#380: FILE: security/commoncap.c:125:
+		printk(KERN_WARNING "%s: size is an invalid size %d for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: security/commoncap.c:126:
+		printk(KERN_WARNING "%s: size is an invalid size %d for %s\n",
+						__FUNCTION__, size, bprm->filename);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#381: FILE: security/commoncap.c:126:
+						__FUNCTION__, size, bprm->filename);

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: security/commoncap.c:164:
+		int size;
+		size = inode->i_op->getxattr(dentry, XATTR_NAME_CAPS, NULL, 0);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: security/commoncap.c:405:
+ *   ^Ithen those actions should be allowed$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#525: FILE: security/commoncap.c:418:
+int cap_task_setscheduler (struct task_struct *p, int policy,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#531: FILE: security/commoncap.c:424:
+int cap_task_setioprio (struct task_struct *p, int ioprio)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#536: FILE: security/commoncap.c:429:
+int cap_task_setnice (struct task_struct *p, int nice)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: security/commoncap.c:435:
+int cap_task_kill(struct task_struct *p, struct siginfo *info,
+				int sig, u32 secid)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#563: FILE: security/commoncap.c:456:
+int cap_task_setscheduler (struct task_struct *p, int policy,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#568: FILE: security/commoncap.c:461:
+}
+int cap_task_setioprio (struct task_struct *p, int ioprio)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#568: FILE: security/commoncap.c:461:
+int cap_task_setioprio (struct task_struct *p, int ioprio)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#572: FILE: security/commoncap.c:465:
+}
+int cap_task_setnice (struct task_struct *p, int nice)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#572: FILE: security/commoncap.c:465:
+int cap_task_setnice (struct task_struct *p, int nice)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#576: FILE: security/commoncap.c:469:
+}
+int cap_task_kill(struct task_struct *p, struct siginfo *info,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: security/commoncap.c:470:
+int cap_task_kill(struct task_struct *p, struct siginfo *info,
+				int sig, u32 secid)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#591: FILE: security/commoncap.c:514:
+EXPORT_SYMBOL(cap_task_setscheduler);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#592: FILE: security/commoncap.c:515:
+EXPORT_SYMBOL(cap_task_setioprio);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#593: FILE: security/commoncap.c:516:
+EXPORT_SYMBOL(cap_task_setnice);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 20 warnings, 15 checks, 380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
