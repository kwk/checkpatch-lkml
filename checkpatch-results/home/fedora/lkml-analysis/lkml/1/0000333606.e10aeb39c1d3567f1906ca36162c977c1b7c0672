WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#75: FILE: arch/ia64/hp/common/hwsw_iommu.c:23:
+extern ia64_mv_dma_map_single_attrs	swiotlb_map_single_attrs;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: arch/ia64/hp/common/hwsw_iommu.c:24:
+extern ia64_mv_dma_unmap_single_attrs	swiotlb_unmap_single_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#77: FILE: arch/ia64/hp/common/hwsw_iommu.c:25:
+extern ia64_mv_dma_map_sg_attrs		swiotlb_map_sg_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#78: FILE: arch/ia64/hp/common/hwsw_iommu.c:26:
+extern ia64_mv_dma_unmap_sg_attrs	swiotlb_unmap_sg_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#90: FILE: arch/ia64/hp/common/hwsw_iommu.c:34:
+extern ia64_mv_dma_map_single_attrs	sba_map_single_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#91: FILE: arch/ia64/hp/common/hwsw_iommu.c:35:
+extern ia64_mv_dma_unmap_single_attrs	sba_unmap_single_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#92: FILE: arch/ia64/hp/common/hwsw_iommu.c:36:
+extern ia64_mv_dma_map_sg_attrs		sba_map_sg_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#93: FILE: arch/ia64/hp/common/hwsw_iommu.c:37:
+extern ia64_mv_dma_unmap_sg_attrs	sba_unmap_sg_attrs;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: arch/ia64/hp/common/hwsw_iommu.c:101:
+hwsw_map_single_attrs (struct device *dev, void *addr, size_t size, int dir, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#115: FILE: arch/ia64/hp/common/hwsw_iommu.c:101:
+hwsw_map_single_attrs (struct device *dev, void *addr, size_t size, int dir, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/ia64/hp/common/hwsw_iommu.c:111:
+hwsw_unmap_single_attrs (struct device *dev, dma_addr_t iova, size_t size, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#128: FILE: arch/ia64/hp/common/hwsw_iommu.c:111:
+hwsw_unmap_single_attrs (struct device *dev, dma_addr_t iova, size_t size, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: arch/ia64/hp/common/hwsw_iommu.c:122:
+hwsw_map_sg_attrs (struct device *dev, struct scatterlist *sglist, int nents, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#142: FILE: arch/ia64/hp/common/hwsw_iommu.c:122:
+hwsw_map_sg_attrs (struct device *dev, struct scatterlist *sglist, int nents, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: arch/ia64/hp/common/hwsw_iommu.c:132:
+hwsw_unmap_sg_attrs (struct device *dev, struct scatterlist *sglist, int nents, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#155: FILE: arch/ia64/hp/common/hwsw_iommu.c:132:
+hwsw_unmap_sg_attrs (struct device *dev, struct scatterlist *sglist, int nents, 

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#176: FILE: arch/ia64/hp/common/hwsw_iommu.c:193:
+EXPORT_SYMBOL(hwsw_unmap_single_attrs);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#177: FILE: arch/ia64/hp/common/hwsw_iommu.c:194:
+EXPORT_SYMBOL(hwsw_map_sg_attrs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#178: FILE: arch/ia64/hp/common/hwsw_iommu.c:195:
+EXPORT_SYMBOL(hwsw_unmap_sg_attrs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: arch/ia64/hp/common/sba_iommu.c:890:
+sba_map_single_attrs(struct device *dev, void *addr, size_t size, int dir, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#221: FILE: arch/ia64/hp/common/sba_iommu.c:936:
+	if (sba_check_pdir(ioc,"Check before sba_map_single_attrs()"))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: arch/ia64/hp/common/sba_iommu.c:966:
+	sba_check_pdir(ioc,"Check after sba_map_single_attrs()");
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/ia64/hp/common/sba_iommu.c:1006:
+void sba_unmap_single_attrs(struct device *dev, dma_addr_t iova, size_t size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: arch/ia64/hp/common/sba_iommu.c:1024:
+^I^IDBG_BYPASS("sba_unmap_single_atttrs() bypass addr: 0x%lx\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: arch/ia64/hp/common/sba_iommu.c:1131:
+^I*dma_handle = sba_map_single_attrs(&ioc->sac_only_dev->dev, addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: arch/ia64/hp/common/sba_iommu.c:1398:
+int sba_map_sg_attrs(struct device *dev, struct scatterlist *sglist, int nents, $

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#310: FILE: arch/ia64/hp/common/sba_iommu.c:1427:
+		sglist->dma_address = sba_map_single_attrs(dev, sba_sg_address(sglist), sglist->length, dir, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: arch/ia64/hp/common/sba_iommu.c:1433:
+	if (sba_check_pdir(ioc,"Check before sba_map_sg_attrs()"))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: arch/ia64/hp/common/sba_iommu.c:1465:
+	if (sba_check_pdir(ioc,"Check after sba_map_sg_attrs()"))
 	                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: arch/ia64/hp/common/sba_iommu.c:1490:
+void sba_unmap_sg_attrs (struct device *dev, struct scatterlist *sglist, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: arch/ia64/hp/common/sba_iommu.c:1490:
+void sba_unmap_sg_attrs (struct device *dev, struct scatterlist *sglist, 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: arch/ia64/hp/common/sba_iommu.c:1506:
+	sba_check_pdir(ioc,"Check before sba_unmap_sg_attrs()");
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: arch/ia64/hp/common/sba_iommu.c:1512:
+^I^Isba_unmap_single_attrs(dev, sglist->dma_address, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#380: FILE: arch/ia64/hp/common/sba_iommu.c:1522:
+	sba_check_pdir(ioc,"Check after sba_unmap_sg_attrs()");
 	                  ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#393: FILE: arch/ia64/hp/common/sba_iommu.c:2156:
+EXPORT_SYMBOL(sba_unmap_single_attrs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#394: FILE: arch/ia64/hp/common/sba_iommu.c:2157:
+EXPORT_SYMBOL(sba_map_sg_attrs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#395: FILE: arch/ia64/hp/common/sba_iommu.c:2158:
+EXPORT_SYMBOL(sba_unmap_sg_attrs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: arch/ia64/sn/pci/pci_dma.c:171:
+dma_addr_t sn_dma_map_single_attrs(struct device *dev, void *cpu_addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: arch/ia64/sn/pci/pci_dma.c:172:
+^I^I^I^I  size_t size, int direction, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: arch/ia64/sn/pci/pci_dma.c:172:
+dma_addr_t sn_dma_map_single_attrs(struct device *dev, void *cpu_addr, 
+				  size_t size, int direction, 

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#433: FILE: arch/ia64/sn/pci/pci_dma.c:173:
+				  struct dma_attrs* attrs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: arch/ia64/sn/pci/pci_dma.c:186:
+^I^Idma_addr = provider->dma_map_consistent(pdev, phys_addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: arch/ia64/sn/pci/pci_dma.c:188:
+^Ielse $

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#454: FILE: arch/ia64/sn/pci/pci_dma.c:189:
+		dma_addr = provider->dma_map(pdev, phys_addr, size, 							     SN_DMA_ADDR_PHYS);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#454: FILE: arch/ia64/sn/pci/pci_dma.c:189:
+^I^Idma_addr = provider->dma_map(pdev, phys_addr, size, ^I^I^I^I^I^I^I     SN_DMA_ADDR_PHYS);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: arch/ia64/sn/pci/pci_dma.c:206:
+void sn_dma_unmap_single_attrs(struct device *dev, dma_addr_t dma_addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: arch/ia64/sn/pci/pci_dma.c:207:
+^I^I^I       size_t size, int direction, $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#477: FILE: arch/ia64/sn/pci/pci_dma.c:208:
+			       struct dma_attrs* attrs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: arch/ia64/sn/pci/pci_dma.c:230:
+^I^I^I   int nhwentries, int direction, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: arch/ia64/sn/pci/pci_dma.c:258:
+int sn_dma_map_sg_attrs(struct device *dev, struct scatterlist *sgl, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: arch/ia64/sn/pci/pci_dma.c:277:
+^I^I^Idma_addr = provider->dma_map_consistent(pdev, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: arch/ia64/sn/pci/pci_dma.c:278:
+^I^I^I^I^I^I^I^Iphys_addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: arch/ia64/sn/pci/pci_dma.c:282:
+^I^I^Idma_addr = provider->dma_map(pdev, phys_addr, $

ERROR:SPACING: space required before the open parenthesis '('
#559: FILE: arch/ia64/sn/pci/pci_dma.c:286:
+		if(!(sg->dma_address = dma_addr)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#559: FILE: arch/ia64/sn/pci/pci_dma.c:286:
+		if(!(sg->dma_address = dma_addr)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: arch/ia64/sn/pci/pci_dma.c:293:
+^I^I^I^Isn_dma_unmap_sg_attrs(dev, saved_sg, i, $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#593: FILE: include/asm-ia64/dma-mapping.h:26:
 }
+#define dma_map_single_attrs	platform_dma_map_single_attrs

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: include/asm-ia64/dma-mapping.h:27:
+static inline dma_addr_t dma_map_single(struct device * dev, void * cpu_addr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: include/asm-ia64/dma-mapping.h:27:
+static inline dma_addr_t dma_map_single(struct device * dev, void * cpu_addr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: include/asm-ia64/dma-mapping.h:27:
+static inline dma_addr_t dma_map_single(struct device * dev, void * cpu_addr, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: include/asm-ia64/dma-mapping.h:28:
+static inline dma_addr_t dma_map_single(struct device * dev, void * cpu_addr, 
+					 size_t size, int dir)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#599: FILE: include/asm-ia64/dma-mapping.h:32:
+}
+#define dma_map_sg_attrs	platform_dma_map_sg_attrs

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#605: FILE: include/asm-ia64/dma-mapping.h:38:
+}
+#define dma_unmap_single_attrs	platform_dma_unmap_single_attrs

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: include/asm-ia64/dma-mapping.h:39:
+static inline void dma_unmap_single(struct device * dev, dma_addr_t cpu_addr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#606: FILE: include/asm-ia64/dma-mapping.h:39:
+static inline void dma_unmap_single(struct device * dev, dma_addr_t cpu_addr, 

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#611: FILE: include/asm-ia64/dma-mapping.h:44:
+}
+#define dma_unmap_sg_attrs	platform_dma_unmap_sg_attrs

ERROR:TRAILING_WHITESPACE: trailing whitespace
#612: FILE: include/asm-ia64/dma-mapping.h:45:
+static inline void dma_unmap_sg(struct device *dev, struct scatterlist *sgl, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#636: FILE: include/asm-ia64/machvec.h:60:
 
+

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#638: FILE: include/asm-ia64/machvec.h:62:
+typedef dma_addr_t ia64_mv_dma_map_single_attrs (struct device *, void *, size_t, int, struct dma_attrs *);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#639: FILE: include/asm-ia64/machvec.h:63:
+typedef void ia64_mv_dma_unmap_single_attrs (struct device *, dma_addr_t, size_t, int, struct dma_attrs *);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#640: FILE: include/asm-ia64/machvec.h:64:
+typedef int ia64_mv_dma_map_sg_attrs (struct device *, struct scatterlist *, int, int, struct dma_attrs *);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#641: FILE: include/asm-ia64/machvec.h:65:
+typedef void ia64_mv_dma_unmap_sg_attrs (struct device *, struct scatterlist *, int, int, struct dma_attrs *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#838: FILE: include/linux/dma-attrs.h:1:
+#ifndef _DMA_ATTR_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#852: FILE: include/linux/dma-attrs.h:15:
+	unsigned flags;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#855: FILE: include/linux/dma-attrs.h:18:
+static inline int dma_set_attr(struct dma_attrs *attrs, unsigned attr) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#855: FILE: include/linux/dma-attrs.h:18:
+static inline int dma_set_attr(struct dma_attrs *attrs, unsigned attr) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#856: FILE: include/linux/dma-attrs.h:19:
+	BUG_ON(attrs == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attrs"
#856: FILE: include/linux/dma-attrs.h:19:
+	BUG_ON(attrs == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#864: FILE: include/linux/dma-attrs.h:27:
+static inline int dma_get_attr(struct dma_attrs *attrs, unsigned attr) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#864: FILE: include/linux/dma-attrs.h:27:
+static inline int dma_get_attr(struct dma_attrs *attrs, unsigned attr) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#865: FILE: include/linux/dma-attrs.h:28:
+^Iif (attrs) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#865: FILE: include/linux/dma-attrs.h:28:
+	if (attrs) 
+		 return attrs->flags & (1 << attr);

WARNING:TABSTOP: Statements should start on a tabstop
#866: FILE: include/linux/dma-attrs.h:29:
+		 return attrs->flags & (1 << attr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: include/linux/dma-mapping.h:122:
+static inline dma_addr_t dma_map_single_attrs(struct device *dev, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: include/linux/dma-mapping.h:123:
+^I^I^I^I^I      void *cpu_addr, size_t size, $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#884: FILE: include/linux/dma-mapping.h:124:
+					      int dir, struct dma_attrs* attrs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: include/linux/dma-mapping.h:129:
+static inline void dma_unmap_single_attrs(struct device *dev, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#891: FILE: include/linux/dma-mapping.h:131:
+^I^I^I^I^I  size_t size, int dir, $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#892: FILE: include/linux/dma-mapping.h:132:
+					  struct dma_attrs* attrs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: include/linux/dma-mapping.h:143:
+static inline void dma_unmap_sg_attrs(struct device *dev, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: include/linux/dma-mapping.h:145:
+^I^I^I^I      int nents, int dir, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: lib/swiotlb.c:538:
+swiotlb_map_single_attrs(struct device *hwdev, void *ptr, size_t size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: lib/swiotlb.c:588:
+swiotlb_unmap_single_attrs(struct device *hwdev, dma_addr_t dev_addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: lib/swiotlb.c:601:
+swiotlb_unmap_single(struct device *hwdev, dma_addr_t dev_addr, size_t size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#989: FILE: lib/swiotlb.c:714:
+^I^I^I^Iswiotlb_unmap_sg_attrs(hwdev, sgl, i, dir, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1012: FILE: lib/swiotlb.c:739:
+swiotlb_unmap_sg_attrs(struct device *hwdev, struct scatterlist *sgl, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: lib/swiotlb.c:757:
+swiotlb_unmap_sg(struct device *hwdev, struct scatterlist *sgl, int nelems, $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1036: FILE: lib/swiotlb.c:825:
+EXPORT_SYMBOL(swiotlb_unmap_single_attrs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1037: FILE: lib/swiotlb.c:826:
+EXPORT_SYMBOL(swiotlb_map_sg_attrs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1038: FILE: lib/swiotlb.c:827:
+EXPORT_SYMBOL(swiotlb_unmap_sg_attrs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 56 errors, 36 warnings, 8 checks, 882 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
