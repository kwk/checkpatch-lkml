WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#92: 
Content-Disposition: attachment; filename=jens_bdi_fluser_v7_2.6.30-rc6.patch

CHECK:SPACING: No space is necessary after a cast
#273: FILE: fs/fs-writeback.c:61:
+	return (struct super_block *) (work->sb_data & ~1UL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#286: FILE: fs/fs-writeback.c:74:
+	work->sb_data = (unsigned long) sb;

CHECK:BRACES: braces {} should be used on all arms of this statement
#343: FILE: fs/fs-writeback.c:125:
+	if (!bdi_work_on_stack(work)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#348: FILE: fs/fs-writeback.c:130:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#400: FILE: fs/fs-writeback.c:182:
+	if (!bdi_wblist_needs_lock(bdi))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#402: FILE: fs/fs-writeback.c:184:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#434: FILE: fs/fs-writeback.c:216:
+	if (unlikely(list_empty_careful(&bdi->wb_list))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#438: FILE: fs/fs-writeback.c:220:
+	} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#700: FILE: fs/fs-writeback.c:479:
+	while (!kthread_should_stop()) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#703: FILE: fs/fs-writeback.c:482:
+		if (pages_written)
[...]
+		else if (wait_jiffies != -1UL) {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#752: FILE: fs/fs-writeback.c:531:
+		if (!work) {
[...]
+		} else if (must_wait)
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#819: FILE: fs/fs-writeback.c:685:
+				printk("bdi-%s not registered\n", bdi->name);

CHECK:BRACES: Unbalanced braces around else statement
#1070: FILE: fs/fs-writeback.c:1047:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1103: FILE: fs/fs-writeback.c:1080:
+void generic_sync_sb_inodes(struct super_block *sb,
+				struct writeback_control *wbc)

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1333: FILE: fs/ubifs/super.c:1926:
+	c->bdi.name = "ubifs",
 	c->bdi.capabilities = BDI_CAP_MAP_COPY;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1421: FILE: include/linux/backing-dev.h:111:
+void bdi_writeback_all(struct super_block *sb, long nr_pages,
+			enum writeback_sync_modes sync_mode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1512: FILE: include/linux/fs.h:1560:
+	struct bdi_writeback *(*inode_get_wb) (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1512: FILE: include/linux/fs.h:1560:
+	struct bdi_writeback *(*inode_get_wb) (struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1520: FILE: include/linux/fs.h:2069:
+extern void generic_sync_bdi_inodes(struct super_block *sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#1520: FILE: include/linux/fs.h:2069:
+extern void generic_sync_bdi_inodes(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1521: FILE: include/linux/fs.h:2070:
+extern void generic_sync_bdi_inodes(struct super_block *sb,
+				struct writeback_control *);

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#1619: FILE: mm/backing-dev.c:29:
+DEFINE_MUTEX(bdi_lock);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1640: FILE: mm/backing-dev.c:58:
+	nr_wb = nr_dirty = nr_io = nr_more_io = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1741: FILE: mm/backing-dev.c:288:
+	if (!test_and_set_bit(BDI_wb_alloc, &bdi->state))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1743: FILE: mm/backing-dev.c:290:
+	else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wb)...) over kmalloc(sizeof(struct bdi_writeback)...)
#1744: FILE: mm/backing-dev.c:291:
+		wb = kmalloc(sizeof(struct bdi_writeback), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#1831: FILE: mm/backing-dev.c:378:
+	if (!bdi_wblist_needs_lock(bdi))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1833: FILE: mm/backing-dev.c:380:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1925: FILE: mm/backing-dev.c:472:
+		wb->task = kthread_run(bdi_start_fn, wb, "bdi-%s",
+					dev_name(bdi->dev));

WARNING:SPACING: missing space after return type
#1957: FILE: mm/backing-dev.c:504:
+				     int(*func)(struct backing_dev_info *))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1963: FILE: mm/backing-dev.c:510:
+		printk("bdi %p/%s is not registered!\n", bdi, bdi->name);

WARNING:TYPO_SPELLING: 'simultanous' may be misspelled - perhaps 'simultaneous'?
#1969: FILE: mm/backing-dev.c:516:
+	 * abort if we two or more simultanous calls to
 	                           ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1970: FILE: mm/backing-dev.c:517:
+	 * bdi_add_default_flusher_task() occured, further additions will block
 	                                  ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1988: FILE: mm/backing-dev.c:535:
+	wait_on_bit_lock(&bdi->state, BDI_pending, bdi_sched_wait,
+				TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2052: FILE: mm/backing-dev.c:609:
+		wb->task = kthread_run(bdi_forker_task, wb, "bdi-%s",
+						dev_name(dev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2087: FILE: mm/backing-dev.c:648:
+	wait_on_bit(&bdi->state, BDI_pending, bdi_sched_wait,
+			TASK_UNINTERRUPTIBLE);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119874.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 27 checks, 2211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119874.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
