WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#120: FILE: drivers/block/Kconfig:216:
+config BLK_DEV_ABUSE
+	tristate "ABUSE user space block device driver"
+	---help---
+	  This driver allows block devices to be implemented in userspace.
+	  It is completely useless and is a massive abuse of the layering
+	  of the kernel.  Unless of course you write a userspace driver
+	  for it, in which case you can create arbitrary block devices.
+
+	  Just don't try to swap over it.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called abuse.
+
+	  Most users will answer N here.
+
 config BLK_DEV_LOOP
 	tristate "Loopback device support"
 	---help---

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#151: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: drivers/block/abuse.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#157: FILE: drivers/block/abuse.c:2:
+ *  linux/drivers/block/abuse.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#194: FILE: drivers/block/abuse.c:39:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: drivers/block/abuse.c:53:
+^Ilist_for_each_entry(ab, &abuse_devices, ab_list) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#220: FILE: drivers/block/abuse.c:65:
+	printk("abuse_add_bio %p\n", bio);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'abuse_add_bio', this function's name, in a string
#220: FILE: drivers/block/abuse.c:65:
+	printk("abuse_add_bio %p\n", bio);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#221: FILE: drivers/block/abuse.c:66:
+	if (ab->ab_biotail) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#224: FILE: drivers/block/abuse.c:69:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#225: FILE: drivers/block/abuse.c:70:
+		ab->ab_bio = ab->ab_biotail = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: drivers/block/abuse.c:75:
+static inline void abuse_add_bio_unlocked(struct abuse_device *ab,
+	struct bio *bio)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: drivers/block/abuse.c:83:
+static inline struct bio *abuse_find_bio(struct abuse_device *ab,
+	struct bio *match)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: drivers/block/abuse.c:94:
+^I^I^I   (struct bio *) $

CHECK:SPACING: No space is necessary after a cast
#249: FILE: drivers/block/abuse.c:94:
+			   (struct bio *) 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: drivers/block/abuse.c:102:
+	printk("abuse_find_bio %p %p\n", bio, match);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#269: FILE: drivers/block/abuse.c:114:
+	BUG_ON(!ab || (rw != READ && rw != WRITE));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#294: FILE: drivers/block/abuse.c:139:
+	ab->ab_biotail = ab->ab_bio = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/block/abuse.c:193:
+abuse_set_status_int(struct abuse_device *ab, struct block_device *bdev,
+	const struct abuse_info *info)

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#361: FILE: drivers/block/abuse.c:206:
+	if (unlikely(info->ab_max_queue) > 512)

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: drivers/block/abuse.c:223:
+^I^I    ^Ireturn -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: drivers/block/abuse.c:223:
+^I^I    ^Ireturn -EINVAL;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: drivers/block/abuse.c:277:
+abuse_set_status(struct abuse_device *ab, struct block_device *bdev,
+	const struct abuse_info __user *arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#436: FILE: drivers/block/abuse.c:281:
+	if (copy_from_user(&info, arg, sizeof (struct abuse_info)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: drivers/block/abuse.c:288:
+abuse_get_status(struct abuse_device *ab, struct block_device *bdev,
+	struct abuse_info __user *arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#469: FILE: drivers/block/abuse.c:314:
+	if (copy_from_user(&xfr, arg, sizeof (struct abuse_xfr_hdr)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#477: FILE: drivers/block/abuse.c:322:
+		int i;
+		xfr.ab_sector = bio->bi_sector;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: drivers/block/abuse.c:341:
+	if (xfr.ab_transfer_address &&
+		copy_to_user((void *)xfr.ab_transfer_address, ab->ab_xfer,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: drivers/block/abuse.c:344:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#516: FILE: drivers/block/abuse.c:361:
+	if (copy_from_user(&xfr, arg, sizeof (struct abuse_xfr_hdr)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: drivers/block/abuse.c:381:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: drivers/block/abuse.c:392:
+^I    ^Iabuse_add_bio_unlocked(ab, bio);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#547: FILE: drivers/block/abuse.c:392:
+^I    ^Iabuse_add_bio_unlocked(ab, bio);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: drivers/block/abuse.c:396:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/block/abuse.c:413:
+	if (copy_from_user(ab->ab_xfer, (void *)xfr.ab_transfer_address,
+			     bio->bi_vcnt * sizeof(ab->ab_xfer[0]))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: drivers/block/abuse.c:414:
+^I    ^Iabuse_add_bio_unlocked(ab, bio);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#569: FILE: drivers/block/abuse.c:414:
+^I    ^Iabuse_add_bio_unlocked(ab, bio);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: drivers/block/abuse.c:417:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#576: FILE: drivers/block/abuse.c:421:
+	bio_for_each_segment(bvec, bio, i)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: drivers/block/abuse.c:427:
+^I^I^Iret = copy_from_user(kaddr + bvec->bv_offset, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/block/abuse.c:428:
+			ret = copy_from_user(kaddr + bvec->bv_offset, 
+				(void *)ab->ab_xfer[i].ab_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/block/abuse.c:432:
+			ret = copy_to_user((void *)ab->ab_xfer[i].ab_address,
+				kaddr + bvec->bv_offset, bvec->bv_len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: drivers/block/abuse.c:435:
+^I^Iif (ret != 0) { $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#603: FILE: drivers/block/abuse.c:448:
+static int abctl_ioctl(struct inode *inode, struct file *filp, unsigned int cmd,
                                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: drivers/block/abuse.c:449:
+static int abctl_ioctl(struct inode *inode, struct file *filp, unsigned int cmd,
+	unsigned long arg)

CHECK:SPACING: No space is necessary after a cast
#616: FILE: drivers/block/abuse.c:461:
+				       (struct abuse_info __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#620: FILE: drivers/block/abuse.c:465:
+				       (struct abuse_info __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#626: FILE: drivers/block/abuse.c:471:
+		err = abuse_get_bio(ab, (struct abuse_xfr_hdr __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#629: FILE: drivers/block/abuse.c:474:
+		err = abuse_put_bio(ab, (struct abuse_xfr_hdr __user *) arg);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#638: FILE: drivers/block/abuse.c:483:
+static unsigned int abctl_poll(struct file *filp, poll_table *wait)
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#643: FILE: drivers/block/abuse.c:488:
+	poll_wait(filp, &ab->ab_event, wait);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#654: FILE: drivers/block/abuse.c:499:
+static int abctl_open(struct inode *inode, struct file *filp)
                                                         ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: drivers/block/abuse.c:502:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#666: FILE: drivers/block/abuse.c:511:
+static int abctl_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#669: FILE: drivers/block/abuse.c:514:
+	struct abuse_device *ab = filp->private_data;
+	if (!ab)

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#685: FILE: drivers/block/abuse.c:530:
+static struct block_device_operations ab_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#691: FILE: drivers/block/abuse.c:536:
+static struct file_operations abctl_fops = {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#725: FILE: drivers/block/abuse.c:570:
+	disk = ab->ab_disk = alloc_disk(num_minors);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#728: FILE: drivers/block/abuse.c:573:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#736: FILE: drivers/block/abuse.c:581:
+	cdev = ab->ab_cdev = cdev_alloc();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: drivers/block/abuse.c:590:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: drivers/block/abuse.c:592:
+	device = device_create(abuse_class, NULL, MKDEV(ABUSECTL_MAJOR, i), ab,
+				"abctl%d", i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#749: FILE: drivers/block/abuse.c:594:
+		printk(KERN_ERR "abuse_alloc: device_create failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'abuse_alloc', this function's name, in a string
#749: FILE: drivers/block/abuse.c:594:
+		printk(KERN_ERR "abuse_alloc: device_create failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: drivers/block/abuse.c:597:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: drivers/block/abuse.c:631:
+^Ilist_for_each_entry(ab, &abuse_devices, ab_list) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#854: FILE: drivers/block/abuse.c:699:
+		printk("abuse: register_blkdev failed!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: drivers/block/abuse.c:702:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#860: FILE: drivers/block/abuse.c:705:
+		printk("abuse: register_chrdev_region failed!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#874: FILE: drivers/block/abuse.c:719:
+			printk(KERN_INFO "abuse: out of memory\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: drivers/block/abuse.c:731:
+	blk_register_region(MKDEV(ABUSE_MAJOR, 0), range,
+				  THIS_MODULE, abuse_probe, NULL, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#888: FILE: drivers/block/abuse.c:733:
+	printk(KERN_INFO "abuse: module loaded\n");

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#922: FILE: drivers/block/abuse.c:767:
+	max_abuse = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#926: FILE: drivers/block/abuse.c:771:
+__setup("max_abuse=", max_abuse_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#934: FILE: include/linux/abuse.h:1:
+#ifndef _LINUX_ABUSE_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#938: FILE: include/linux/abuse.h:5:
+ * include/linux/abuse.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: include/linux/abuse.h:34:
+ * IOCTL commands $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: include/linux/abuse.h:61:
+ * ab_commnd codes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1003: FILE: include/linux/abuse.h:70:
+ * ab_result codes $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1027: FILE: include/linux/abuse.h:94:
+	unsigned	ab_blocksize;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1031: FILE: include/linux/abuse.h:98:
+	spinlock_t		ab_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1032: FILE: include/linux/abuse.h:99:
+^Istruct bio ^I^I*ab_bio;$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1034: FILE: include/linux/abuse.h:101:
+	struct mutex		ab_ctl_mutex;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092239.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 36 warnings, 26 checks, 931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092239.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
