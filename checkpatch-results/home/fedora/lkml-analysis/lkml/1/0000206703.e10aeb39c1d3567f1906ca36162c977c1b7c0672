WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#143: FILE: Makefile:4:
+EXTRAVERSION = .5
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: arch/powerpc/mm/numa.c:103:
+static int __init get_active_region_work_fn(unsigned long start_pfn,
+					unsigned long end_pfn, void *datax)

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: arch/powerpc/mm/numa.c:106:
+	struct node_active_region *data;
+	data = (struct node_active_region *)datax;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#226: FILE: arch/powerpc/mm/numa.c:115:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: arch/powerpc/mm/numa.c:124:
+static void __init get_node_active_region(unsigned long start_pfn,
+		       struct node_active_region *node_ar)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: arch/powerpc/mm/numa.c:894:
+		while (start_pfn < end_pfn &&
+			node_ar.start_pfn < node_ar.end_pfn) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: arch/powerpc/mm/numa.c:904:
+			dbg("reserve_bootmem %lx %lx nid=%d\n", physbase,
+				reserve_size, node_ar.nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: arch/powerpc/mm/numa.c:906:
+			reserve_bootmem_node(NODE_DATA(node_ar.nid), physbase,
+						reserve_size, BOOTMEM_DEFAULT);

WARNING:MISPLACED_INIT: __initdata should be placed after of_bus_ids[]
#346: FILE: arch/powerpc/platforms/embedded6xx/linkstation.c:58:
+static __initdata struct of_device_id of_bus_ids[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#346: FILE: arch/powerpc/platforms/embedded6xx/linkstation.c:58:
+static __initdata struct of_device_id of_bus_ids[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#461: FILE: arch/sparc64/kernel/trampoline.S:378:
+	ba,pt		%xcc, 3f
 	^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#491: FILE: arch/x86/kernel/process_64.c:732:
+	if (p->thread.sp < stack || p->thread.sp >= stack+THREAD_SIZE)
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#497: FILE: arch/x86/kernel/process_64.c:737:
+		    fp >= (unsigned long)stack+THREAD_SIZE)
 		                              ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#513: FILE: arch/x86/kernel/rtc.c:227:
+	static const char *ids[] __initconst =
+	    { "PNP0b00", "PNP0b01", "PNP0b02", };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#624: FILE: drivers/acpi/ec.c:74:
+#define ACPI_EC_STORM_THRESHOLD 20	/* number of false interrupts
+					   per one transaction */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#624: FILE: drivers/acpi/ec.c:74:
+					   per one transaction */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#631: FILE: drivers/acpi/ec.c:79:
+					 * for status change */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#636: FILE: drivers/acpi/ec.c:83:
+					 * OpReg are installed */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#664: FILE: drivers/acpi/ec.c:118:
+	spinlock_t curr_lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#697: FILE: drivers/acpi/ec.c:180:
+	int ret = 0;
+	spin_lock_irqsave(&ec->curr_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#711: FILE: drivers/acpi/ec.c:190:
+	unsigned long flags;
+	spin_lock_irqsave(&ec->curr_lock, flags);

CHECK:BRACES: Unbalanced braces around else statement
#718: FILE: drivers/acpi/ec.c:197:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#726: FILE: drivers/acpi/ec.c:205:
+		} else

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#741: FILE: drivers/acpi/ec.c:219:
+	if (printk_ratelimit())

WARNING:SPLIT_STRING: quoted string split across lines
#743: FILE: drivers/acpi/ec.c:221:
+		pr_info(PREFIX "missing confirmations, "
+				"switch off interrupt mode.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#792: FILE: drivers/acpi/ec.c:242:
+	unsigned long delay = jiffies + msecs_to_jiffies(ACPI_EC_DELAY);
+	msleep(1);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#792: FILE: drivers/acpi/ec.c:242:
+	msleep(1);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#795: FILE: drivers/acpi/ec.c:245:
+		msleep(1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#889: FILE: drivers/acpi/ec.c:298:
+	u8 status = acpi_ec_read_status(ec);
+	return (status & ACPI_EC_FLAG_IBF) == 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!t'
#914: FILE: drivers/acpi/ec.c:318:
+	if (!ec || (!t) || (t->wlen && !t->wdata) || (t->rlen && !t->rdata))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1230: FILE: drivers/acpi/reboot.c:35:
+^I * ^Ia. reset_register is not zero$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1231: FILE: drivers/acpi/reboot.c:36:
+^I * ^Ib. the access width is eight$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1232: FILE: drivers/acpi/reboot.c:37:
+^I * ^Ic. the bit_offset is zero$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1777: FILE: drivers/media/dvb/frontends/s5h1411.c:607:
+	/* Issue a reset to the demod so it knows to resync against the
+	   newly tuned frequency */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1777: FILE: drivers/media/dvb/frontends/s5h1411.c:607:
+	   newly tuned frequency */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1822: FILE: drivers/media/video/pvrusb2/pvrusb2-encoder.c:406:
+	/* prevent the PTSs from slowly drifting away in the generated
+	   MPEG stream */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1822: FILE: drivers/media/video/pvrusb2/pvrusb2-encoder.c:406:
+	   MPEG stream */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1884: FILE: drivers/net/bonding/bond_alb.c:175:
+			u32 next_index = tx_hash_table[index].next;
+			tlb_init_table_entry(&tx_hash_table[index], save_load);

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#1991: FILE: drivers/scsi/sd.c:1063:
+		scsi_print_sense("sd", SCpnt);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2067: FILE: drivers/usb/core/hcd.h:235:
+extern void usb_hcd_synchronize_unlinks(struct usb_device *udev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2140: FILE: drivers/usb/storage/unusual_devs.h:1750:
+ * residue that causes subsequent I/O requests to fail.  */

ERROR:SPACING: space prohibited after that open parenthesis '('
#2141: FILE: drivers/usb/storage/unusual_devs.h:1751:
+UNUSUAL_DEV(  0x152d, 0x2329, 0x0100, 0x0100,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2142: FILE: drivers/usb/storage/unusual_devs.h:1752:
+^I        "JMicron",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2142: FILE: drivers/usb/storage/unusual_devs.h:1752:
+UNUSUAL_DEV(  0x152d, 0x2329, 0x0100, 0x0100,
+	        "JMicron",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2143: FILE: drivers/usb/storage/unusual_devs.h:1753:
+^I        "USB to ATA/ATAPI Bridge",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2144: FILE: drivers/usb/storage/unusual_devs.h:1754:
+^I        US_SC_DEVICE, US_PR_DEVICE, NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2145: FILE: drivers/usb/storage/unusual_devs.h:1755:
+^I        US_FL_IGNORE_RESIDUE ),$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2145: FILE: drivers/usb/storage/unusual_devs.h:1755:
+	        US_FL_IGNORE_RESIDUE ),

CHECK:CAMELCASE: Avoid CamelCase: <nodeName>
#2195: FILE: fs/hfsplus/catalog.c:171:
+	if (be16_to_cpu(tmp.thread.nodeName.length) > 255) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2196: FILE: fs/hfsplus/catalog.c:172:
+		printk(KERN_ERR "hfs: catalog name length corrupted\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2239: FILE: include/math-emu/op-common.h:151:
+		if (_FP_FRAC_HIGH_##fs(X)			\
+		   & (_FP_OVERFLOW_##fs >> 1))			\
+		  {						\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#2239: FILE: include/math-emu/op-common.h:151:
+		if (_FP_FRAC_HIGH_##fs(X)			\
[...]
+		  {						\

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2246: FILE: include/math-emu/op-common.h:158:
+		else						\
+		  {						\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#2246: FILE: include/math-emu/op-common.h:158:
+		else						\
+		  {						\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2335: FILE: net/core/scm.c:122:
+				for (i=fpl->count-1; i>=0; i--)
 				      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2335: FILE: net/core/scm.c:122:
+				for (i=fpl->count-1; i>=0; i--)
 				                 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#2335: FILE: net/core/scm.c:122:
+				for (i=fpl->count-1; i>=0; i--)
 				                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2408: FILE: net/ipv4/tcp_output.c:2283:
+	else
[...]
 	TCP_SKB_CB(skb)->when = tcp_time_stamp;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2548: FILE: sound/pci/hda/hda_intel.c:1902:
+	struct azx *chip = container_of(nb, struct azx, reboot_notifier);
+	azx_stop_chip(chip);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 32 warnings, 17 checks, 2175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
