WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: security/apparmor/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#62: FILE: security/apparmor/main.c:25:
+static const char *capability_names[] = {

WARNING:TYPO_SPELLING: 'non-existant' may be misspelled - perhaps 'non-existent'?
#68: FILE: security/apparmor/main.c:31:
+ * Used when in complain mode, to emit Permitting messages for non-existant
                                                                ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iterface' may be misspelled - perhaps 'interface'?
#83: FILE: security/apparmor/main.c:46:
+ * to the current pid. This file is the usermode iterface for
                                                  ^^^^^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#93: FILE: security/apparmor/main.c:56:
+	pid = simple_strtoul(name + 6, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:TYPO_SPELLING: 'currenly' may be misspelled - perhaps 'currently'?
#164: FILE: security/apparmor/main.c:127:
+	 * FIXME: There currenly is no way to report which permissions
 	                ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: security/apparmor/main.c:157:
+		char *buf = kmalloc(size, GFP_KERNEL);
+		if (!buf)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: security/apparmor/main.c:408:
+		audit_log(current->audit_context, gfp_mask, AUDIT_APPARMOR,
+			"Internal error auditing event type %d (error %d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: security/apparmor/main.c:411:
+		AA_ERROR("Internal error auditing event type %d (error %d)\n",
+			sa->type, sa->error_code);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#468: FILE: security/apparmor/main.c:431:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: security/apparmor/main.c:446:
+		AA_ERROR("Unable to log event (%d) to audit subsys\n",
+			sa->type);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#518: FILE: security/apparmor/main.c:481:
+		struct iattr *iattr = (struct iattr*)sa->pval;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: security/apparmor/main.c:484:
+		audit_log_format(ab,
+			"attribute (%s%s%s%s%s%s%s) change to %s ",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#536: FILE: security/apparmor/main.c:499:
+		/* FIXME: check if this can be handled on the stack
+			  with an inline varargs function. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#536: FILE: security/apparmor/main.c:499:
+			  with an inline varargs function. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: security/apparmor/main.c:504:
+		audit_log_format(ab,
+			"link access from %s to %s ",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#543: FILE: security/apparmor/main.c:506:
+			(char*)sa->pval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: security/apparmor/main.c:510:
+		audit_log_format(ab,
+			"access to capability '%s' ",

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#717: FILE: security/apparmor/main.c:680:
+	/* test if cap has alread been logged */
 	                   ^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#722: FILE: security/apparmor/main.c:685:
+		return error;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#722: FILE: security/apparmor/main.c:685:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'occurance' may be misspelled - perhaps 'occurrence'?
#724: FILE: security/apparmor/main.c:687:
+		 * caps_logged is a cache to reduce the occurance of
 		                                        ^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#822: FILE: security/apparmor/main.c:785:
+	if (profile) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#846: FILE: security/apparmor/main.c:809:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#862: FILE: security/apparmor/main.c:825:
+			 __FUNCTION__, new_profile->name);

WARNING:SPLIT_STRING: quoted string split across lines
#871: FILE: security/apparmor/main.c:834:
+				      "exec(2) of image '%s'. "
+				      "Profile mandatory and not found.",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#880: FILE: security/apparmor/main.c:843:
+			 __FUNCTION__,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#896: FILE: security/apparmor/main.c:859:
+	struct file *filp = bprm->file;
 	             ^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#900: FILE: security/apparmor/main.c:863:
+	AA_DEBUG("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#904: FILE: security/apparmor/main.c:867:
+		AA_ERROR("%s: Failed to get filename", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#922: FILE: security/apparmor/main.c:885:
+					 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#929: FILE: security/apparmor/main.c:892:
+					 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#938: FILE: security/apparmor/main.c:901:
+					 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#947: FILE: security/apparmor/main.c:910:
+				AA_ERROR("Rejecting exec(2) of image '%s'. "
+					 "Unknown exec qualifier %x "

WARNING:SPLIT_STRING: quoted string split across lines
#948: FILE: security/apparmor/main.c:911:
+					 "Unknown exec qualifier %x "
+					 "(%s (pid %d) profile %s active %s)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#968: FILE: security/apparmor/main.c:931:
+				      "exec(2) of image '%s'. "
+				      "Unable to determine exec qualifier.",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_profile"
#975: FILE: security/apparmor/main.c:938:
+		if (new_profile == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#990: FILE: security/apparmor/main.c:953:
+			AA_REJECT_MSG(profile, GFP_KERNEL,
+				"exec(2) of image '%s'. "

WARNING:SPLIT_STRING: quoted string split across lines
#991: FILE: security/apparmor/main.c:954:
+				"exec(2) of image '%s'. "
+				"Unable to change profile, ptraced by %d.",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1012: FILE: security/apparmor/main.c:975:
+		bprm->security = (void*)

WARNING:SPLIT_STRING: quoted string split across lines
#1109: FILE: security/apparmor/main.c:1072:
+			AA_DEBUG("%s: Unknown hatname '%s'. "
+				"Changing to NULL profile "

WARNING:SPLIT_STRING: quoted string split across lines
#1110: FILE: security/apparmor/main.c:1073:
+				"Changing to NULL profile "
+				"(%s(%d) profile %s active %s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1111: FILE: security/apparmor/main.c:1074:
+				 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1180: FILE: security/apparmor/main.c:1143:
+				 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1209: FILE: security/apparmor/main.c:1172:
+			AA_ERROR("KILLING process %s(%d) "
+				 "Invalid change_hat() magic# 0x%llx "

WARNING:SPLIT_STRING: quoted string split across lines
#1210: FILE: security/apparmor/main.c:1173:
+				 "Invalid change_hat() magic# 0x%llx "
+				 "(hatname %s profile %s active %s)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1221: FILE: security/apparmor/main.c:1184:
+			AA_ERROR("KILLING process %s(%d) "
+				 "Task was confined to current subprofile "

WARNING:SPLIT_STRING: quoted string split across lines
#1222: FILE: security/apparmor/main.c:1185:
+				 "Task was confined to current subprofile "
+				 "(profile %s active %s)\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1231: FILE: security/apparmor/main.c:1194:
+
+	}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1278: FILE: security/apparmor/main.c:1241:
+	if (cxt) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1281: FILE: security/apparmor/main.c:1244:
+	} else

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#1295: FILE: security/apparmor/main.c:1258:
+ * profile are consistent once all locks are aquired.
                                              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1351: FILE: security/apparmor/main.c:1314:
+		 * chance to emit its own set of cap messages */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000445956.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 35 warnings, 15 checks, 1322 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000445956.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
