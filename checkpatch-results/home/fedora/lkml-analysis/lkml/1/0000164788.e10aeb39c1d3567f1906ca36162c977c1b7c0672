WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: drivers/net/can/Kconfig:15:
+config CAN_DEV
+	tristate "Platform CAN drivers with SYSFS support"
+	depends on CAN && SYSFS
+	default Y
+	---help---
+	  Enables the common framework for platform CAN drivers with SYSFS
+	  support. This is the standard library for CAN drivers.
+	  If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#76: FILE: drivers/net/can/Kconfig:24:
+config CAN_CALC_BITTIMING
+	bool "CAN bit-timing calculation"
+	depends on CAN_DEV
+	default Y
+	---help---
+	  If enabled, CAN bit-timing parameters will be calculated for the
+	  bit-rate specified via SYSFS file "bitrate" when the device gets
+	  started. This works fine for the most common CAN controllers
+	  with standard bit-rates but may fail for exotic bit-rates or CAN

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#107: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: drivers/net/can/dev.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#127: FILE: drivers/net/can/dev.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#128: FILE: drivers/net/can/dev.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#150: FILE: drivers/net/can/dev.c:39:
+/*
+ * Bit-timing calculation derived from:

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#186: FILE: drivers/net/can/dev.c:75:
+		return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brp < btc->brp_min'
#208: FILE: drivers/net/can/dev.c:97:
+		if ((brp < btc->brp_min) || (brp > btc->brp_max))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brp > btc->brp_max'
#208: FILE: drivers/net/can/dev.c:97:
+		if ((brp < btc->brp_min) || (brp > btc->brp_max))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#242: FILE: drivers/net/can/dev.c:131:
+			return -EDOM;
+		} else {

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#285: FILE: drivers/net/can/dev.c:174:
+		return -ENOTSUPP;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#313: FILE: drivers/net/can/dev.c:202:
+/*
+ * Set CAN bit-timing for the device

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#331: FILE: drivers/net/can/dev.c:220:
+	if (priv->bittiming_const) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#372: FILE: drivers/net/can/dev.c:261:
+/*
+ * Allocate and setup space for the CAN network device

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#396: FILE: drivers/net/can/dev.c:285:
+/*
+ * Allocate space of the CAN network device

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#405: FILE: drivers/net/can/dev.c:294:
+/*
+ * Register the CAN network device

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#422: FILE: drivers/net/can/dev.c:311:
+/*
+ * Unregister the CAN network device

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#432: FILE: drivers/net/can/dev.c:321:
+/*
+ * Local echo of CAN messages

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#459: FILE: drivers/net/can/dev.c:348:
+/*
+ * Put the skb on the stack to be looped backed locally lateron

CHECK:BRACES: braces {} should be used on all arms of this statement
#477: FILE: drivers/net/can/dev.c:366:
+		if (atomic_read(&skb->users) != 1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#484: FILE: drivers/net/can/dev.c:373:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#499: FILE: drivers/net/can/dev.c:388:
+		printk(KERN_ERR "%s: %s: BUG! echo_skb is occupied!\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#507: FILE: drivers/net/can/dev.c:396:
+/*
+ * Get the skb from the stack and loop it back locally

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#524: FILE: drivers/net/can/dev.c:413:
+/*
+ * CAN device restart for bus-off recovery

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#556: FILE: drivers/net/can/dev.c:445:
+	if (skb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#584: FILE: drivers/net/can/dev.c:473:
+/*
+ * CAN bus-off

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#599: FILE: drivers/net/can/dev.c:488:
+	if (priv->restart_ms > 0 && !priv->timer.expires) {
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#610: FILE: drivers/net/can/dev.c:499:
+/*
+ * Cleanup function before the device gets closed.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#630: FILE: drivers/net/can/dev.c:519:
+	printk(KERN_INFO MOD_DESC "\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#646: FILE: drivers/net/can/sysfs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#659: FILE: drivers/net/can/sysfs.c:14:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#660: FILE: drivers/net/can/sysfs.c:15:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#678: FILE: drivers/net/can/sysfs.c:33:
+/*
+ * SYSFS access functions and attributes. Use same locking as

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#703: FILE: drivers/net/can/sysfs.c:58:
+#define CAN_DEV_SHOW(field, fmt_string)					\
+static ssize_t fmt_can_##field(struct net_device *dev, char *buf)	\
+{									\
+	struct can_priv *priv = netdev_priv(dev);			\
+	return sprintf(buf, fmt_string, priv->field);			\
+}									\
+static ssize_t show_can_##field(struct device *d,			\
+				struct device_attribute *attr,		\
+				char *buf)				\
+{									\
+	return can_dev_show(d, attr, buf, fmt_can_##field);		\
+}

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#728: FILE: drivers/net/can/sysfs.c:83:
+	ret = strict_strtoul(buf, 0, &new);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#743: FILE: drivers/net/can/sysfs.c:98:
+#define CAN_CREATE_FILE(_dev, _name)					\
+	if (device_create_file(&_dev->dev, &dev_attr_##_name))		\
+		dev_err(ND2D(_dev),					\
+			"Couldn't create device file for ##_name\n")

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_dev' - possible side-effects?
#743: FILE: drivers/net/can/sysfs.c:98:
+#define CAN_CREATE_FILE(_dev, _name)					\
+	if (device_create_file(&_dev->dev, &dev_attr_##_name))		\
+		dev_err(ND2D(_dev),					\
+			"Couldn't create device file for ##_name\n")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_dev' may be better as '(_dev)' to avoid precedence issues
#743: FILE: drivers/net/can/sysfs.c:98:
+#define CAN_CREATE_FILE(_dev, _name)					\
+	if (device_create_file(&_dev->dev, &dev_attr_##_name))		\
+		dev_err(ND2D(_dev),					\
+			"Couldn't create device file for ##_name\n")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_dev' may be better as '(_dev)' to avoid precedence issues
#748: FILE: drivers/net/can/sysfs.c:103:
+#define CAN_REMOVE_FILE(_dev, _name)					\
+	device_remove_file(&_dev->dev, &dev_attr_##_name)		\
+

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_can_ctrlmode' to 'can_ctrlmode_show' 'store_can_ctrlmode' to 'can_ctrlmode_store'
#775: FILE: drivers/net/can/sysfs.c:130:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#777: FILE: drivers/net/can/sysfs.c:132:
+static DEVICE_ATTR(can_ctrlmode, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#780: FILE: drivers/net/can/sysfs.c:135:
+static const char *can_state_names[] = {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#781: FILE: drivers/net/can/sysfs.c:136:
+	"active", "bus-warn", "bus-pass" , "bus-off",
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'unkown' may be misspelled - perhaps 'unknown'?
#782: FILE: drivers/net/can/sysfs.c:137:
+	"stopped", "sleeping", "unkown"
 	                        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#791: FILE: drivers/net/can/sysfs.c:146:
+	if (priv->do_get_state) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#796: FILE: drivers/net/can/sysfs.c:151:
+	} else

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_can_state' to 'can_state_show'
#810: FILE: drivers/net/can/sysfs.c:165:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#812: FILE: drivers/net/can/sysfs.c:167:
+static DEVICE_ATTR(can_state, S_IRUGO, show_can_state, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_can_restart_ms' to 'can_restart_ms_show' 'store_can_restart_ms' to 'can_restart_ms_store'
#831: FILE: drivers/net/can/sysfs.c:186:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#833: FILE: drivers/net/can/sysfs.c:188:
+static DEVICE_ATTR(can_restart_ms, S_IRUGO | S_IWUSR,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: drivers/net/can/sysfs.c:197:
+static ssize_t show_can_echo(struct device *d,
+			  struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_can_echo' to 'can_echo_show' 'store_can_echo' to 'can_echo_store'
#861: FILE: drivers/net/can/sysfs.c:216:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#863: FILE: drivers/net/can/sysfs.c:218:
+static DEVICE_ATTR(can_echo, S_IRUGO | S_IWUSR, show_can_echo, store_can_echo);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'store_can_restart' to 'can_restart_store'
#875: FILE: drivers/net/can/sysfs.c:230:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#877: FILE: drivers/net/can/sysfs.c:232:
+static DEVICE_ATTR(can_restart, S_IWUSR, NULL, store_can_restart);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#904: FILE: drivers/net/can/sysfs.c:259:
+^I^I^I   struct device_attribute *attr, char *buf) ^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#909: FILE: drivers/net/can/sysfs.c:264:
+static DEVICE_ATTR(hw_##name, S_IRUGO, show_##name, NULL)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#965: FILE: drivers/net/can/sysfs.c:320:
+	ret = strict_strtoul(buf, 0, &new);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr == &bt->bitrate'
#974: FILE: drivers/net/can/sysfs.c:329:
+		if ((ptr == &bt->bitrate) || (ptr == &bt->sample_point)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr == &bt->sample_point'
#974: FILE: drivers/net/can/sysfs.c:329:
+		if ((ptr == &bt->bitrate) || (ptr == &bt->sample_point)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#994: FILE: drivers/net/can/sysfs.c:349:
+^I^I^I   struct device_attribute *attr, char *buf) ^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#999: FILE: drivers/net/can/sysfs.c:354:
+static DEVICE_ATTR(hw_##name, S_IRUGO, show_##name, NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1003: FILE: drivers/net/can/sysfs.c:358:
+#define CAN_BT_ENTRY(name)						\
+static ssize_t show_##name(struct device *d,				\
+			   struct device_attribute *attr, char *buf) 	\
+{									\
+	return can_bt_show(d, attr, buf,				\
+			   offsetof(struct can_bittiming, name));	\
+}									\
+static ssize_t store_##name(struct device *d,				\
+			    struct device_attribute *attr,		\
+			    const char *buf, size_t count)		\
+{									\
+	return can_bt_store(d, attr, buf, count,			\
+			    offsetof(struct can_bittiming, name));	\
+}									\
+static DEVICE_ATTR(name, S_IRUGO | S_IWUSR, show_##name, store_##name)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1005: FILE: drivers/net/can/sysfs.c:360:
+^I^I^I   struct device_attribute *attr, char *buf) ^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1017: FILE: drivers/net/can/sysfs.c:372:
+static DEVICE_ATTR(name, S_IRUGO | S_IWUSR, show_##name, store_##name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1075: FILE: drivers/net/can/sysfs.c:430:
+#define CAN_STAT_ENTRY(name)						\
+static ssize_t show_##name(struct device *d,				\
+			   struct device_attribute *attr, char *buf) 	\
+{									\
+	return can_stat_show(d, attr, buf,				\
+			     offsetof(struct can_device_stats, name));	\
+}									\
+static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1077: FILE: drivers/net/can/sysfs.c:432:
+^I^I^I   struct device_attribute *attr, char *buf) ^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1082: FILE: drivers/net/can/sysfs.c:437:
+static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->dev.kobj
#1119: FILE: drivers/net/can/sysfs.c:474:
+	err = sysfs_create_group(&(dev->dev.kobj),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1122: FILE: drivers/net/can/sysfs.c:477:
+		printk(KERN_EMERG

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->dev.kobj
#1127: FILE: drivers/net/can/sysfs.c:482:
+		err = sysfs_create_group(&(dev->dev.kobj),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1130: FILE: drivers/net/can/sysfs.c:485:
+			printk(KERN_EMERG "couldn't create sysfs "

WARNING:SPLIT_STRING: quoted string split across lines
#1131: FILE: drivers/net/can/sysfs.c:486:
+			printk(KERN_EMERG "couldn't create sysfs "
+			       "group for CAN bittiming\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->dev.kobj
#1146: FILE: drivers/net/can/sysfs.c:501:
+	sysfs_remove_group(&(dev->dev.kobj), &can_statistics_group);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->dev.kobj
#1148: FILE: drivers/net/can/sysfs.c:503:
+		sysfs_remove_group(&(dev->dev.kobj), &can_bittiming_group);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1153: FILE: drivers/net/can/sysfs.c:508:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1161: FILE: drivers/net/can/sysfs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1174: FILE: drivers/net/can/sysfs.h:14:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1175: FILE: drivers/net/can/sysfs.h:15:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1191: FILE: include/linux/can/dev.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1288: FILE: include/linux/can/dev.h:98:
+	spinlock_t irq_lock;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_ndev' may be better as '(_ndev)' to avoid precedence issues
#1305: FILE: include/linux/can/dev.h:115:
+#define ND2D(_ndev)	(_ndev->dev.parent)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1307: FILE: include/linux/can/dev.h:117:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164788.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 50 warnings, 26 checks, 1234 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164788.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
