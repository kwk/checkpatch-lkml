ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#102: FILE: drivers/usb/serial/Config.in:41:
reader (EXPERIMENTAL)' CONFIG_USB_SERIAL_CYBERJACK $CONFIG_USB_SERIAL

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#127: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: drivers/usb/serial/sierra.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#133: FILE: drivers/usb/serial/sierra.c:2:
+/*
+  USB Driver for Sierra Wireless

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#174: FILE: drivers/usb/serial/sierra.c:42:
+#include <asm/uaccess.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#195: FILE: drivers/usb/serial/sierra.c:63:
+/* MAX_TRANSFER is chosen so that the VM is not stressed by
+   allocations > PAGE_SIZE and the number of packets in a page

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: drivers/usb/serial/sierra.c:64:
+   is an integer 512 is the largest possible packet on EHCI */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#203: FILE: drivers/usb/serial/sierra.c:71:
+#define usb_serial_port_softint(port) \
+	if (!port_paranoia_check(port, __func__) && port->tqueue.routine) \
+		port->tqueue.routine(port);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#203: FILE: drivers/usb/serial/sierra.c:71:
+#define usb_serial_port_softint(port) \
+	if (!port_paranoia_check(port, __func__) && port->tqueue.routine) \
+		port->tqueue.routine(port);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#203: FILE: drivers/usb/serial/sierra.c:71:
+#define usb_serial_port_softint(port) \
+	if (!port_paranoia_check(port, __func__) && port->tqueue.routine) \
+		port->tqueue.routine(port);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#216: FILE: drivers/usb/serial/sierra.c:84:
+	spinlock_t susp_lock;

CHECK:CAMELCASE: Avoid CamelCase: <swiState>
#221: FILE: drivers/usb/serial/sierra.c:89:
+static int sierra_set_power_state(struct usb_device *udev, __u16 swiState)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: drivers/usb/serial/sierra.c:92:
+	int result;
+	dbg("%s", __func__);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#224: FILE: drivers/usb/serial/sierra.c:92:
+	dbg("%s", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: drivers/usb/serial/sierra.c:94:
+	result = usb_control_msg(udev, usb_sndctrlpipe(udev, 0),
+			SWIMS_USB_REQUEST_SetPower,	/* __u8 request      */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: drivers/usb/serial/sierra.c:99:
+^I^I^I0,^I^I^I^I/* __u16 size ^I     */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: drivers/usb/serial/sierra.c:100:
+^I^I^IUSB_CTRL_SET_TIMEOUT);^I^I/* int timeout ^I     */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: drivers/usb/serial/sierra.c:107:
+	int result;
+	dbg("%s\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#239: FILE: drivers/usb/serial/sierra.c:107:
+	dbg("%s\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: drivers/usb/serial/sierra.c:109:
+	result = usb_control_msg(udev, usb_sndctrlpipe(udev, 0),
+			SWIMS_USB_REQUEST_SetNmea,	/* __u8 request      */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: drivers/usb/serial/sierra.c:114:
+^I^I^I0,^I^I^I^I/* __u16 size ^I     */$

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#256: FILE: drivers/usb/serial/sierra.c:124:
+	dbg("%s", __func__);

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#258: FILE: drivers/usb/serial/sierra.c:126:
+	ifnum = serial->interface->altsetting[serial->interface->act_altsetting].bInterfaceNumber;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#268: FILE: drivers/usb/serial/sierra.c:135:
+		num_ports = (numendpoints-1)/2;
 		                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#268: FILE: drivers/usb/serial/sierra.c:135:
+		num_ports = (numendpoints-1)/2;
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: drivers/usb/serial/sierra.c:140:
+static int is_blacklisted(const u8 ifnum,
+				const struct sierra_iface_info *blacklist)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/usb/serial/sierra.c:157:
+static int is_himemory(const u8 ifnum,
+				const struct sierra_iface_info *himemorylist)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#298: FILE: drivers/usb/serial/sierra.c:165:
+		for (i=0; i < himemorylist->infolen; i++) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: drivers/usb/serial/sierra.c:178:
+	struct usb_interface_descriptor *p_interface_desc;
+	dbg("%s", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#311: FILE: drivers/usb/serial/sierra.c:178:
+	dbg("%s", __func__);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#321: FILE: drivers/usb/serial/sierra.c:188:
+	 * to find out the interface number we are on
+	*/

CHECK:CAMELCASE: Avoid CamelCase: <iInterface>
#322: FILE: drivers/usb/serial/sierra.c:189:
+	interface = p_interface_desc->iInterface;

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#336: FILE: drivers/usb/serial/sierra.c:203:
+	dbg("%s", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: drivers/usb/serial/sierra.c:212:
+		dbg("Selecting alt setting for interface %d",
+			ifnum);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#354: FILE: drivers/usb/serial/sierra.c:221:
+	if (id == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: drivers/usb/serial/sierra.c:227:
+	if (is_blacklisted(ifnum,
+				(struct sierra_iface_info *)id->driver_info)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#365: FILE: drivers/usb/serial/sierra.c:232:
+	data = serial->private = kmalloc(sizeof(struct sierra_intf_private),

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*serial->private)...) over kmalloc(sizeof(struct sierra_intf_private)...)
#365: FILE: drivers/usb/serial/sierra.c:232:
+	data = serial->private = kmalloc(sizeof(struct sierra_intf_private),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <hi_memory_typeA_ifaces>
#376: FILE: drivers/usb/serial/sierra.c:242:
+static const u8 hi_memory_typeA_ifaces[] = { 0, 2 };

CHECK:CAMELCASE: Avoid CamelCase: <hi_memory_typeB_ifaces>
#382: FILE: drivers/usb/serial/sierra.c:248:
+static const u8 hi_memory_typeB_ifaces[] = { 3, 4, 5, 6 };

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: drivers/usb/serial/sierra.c:278:
+        .match_flags = USB_DEVICE_ID_MATCH_INT_INFO \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/usb/serial/sierra.c:278:
+        .match_flags = USB_DEVICE_ID_MATCH_INT_INFO \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: drivers/usb/serial/sierra.c:279:
+                | USB_DEVICE_ID_MATCH_DEVICE, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/usb/serial/sierra.c:279:
+                | USB_DEVICE_ID_MATCH_DEVICE, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: drivers/usb/serial/sierra.c:280:
+        .idVendor = (vend), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: drivers/usb/serial/sierra.c:280:
+        .idVendor = (vend), \$

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#415: FILE: drivers/usb/serial/sierra.c:280:
+        .idVendor = (vend), \

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: drivers/usb/serial/sierra.c:281:
+        .idProduct = (prod), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: drivers/usb/serial/sierra.c:281:
+        .idProduct = (prod), \$

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#416: FILE: drivers/usb/serial/sierra.c:281:
+        .idProduct = (prod), \

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: drivers/usb/serial/sierra.c:282:
+        .bInterfaceClass = (cl), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: drivers/usb/serial/sierra.c:282:
+        .bInterfaceClass = (cl), \$

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#417: FILE: drivers/usb/serial/sierra.c:282:
+        .bInterfaceClass = (cl), \

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: drivers/usb/serial/sierra.c:283:
+        .bInterfaceSubClass = (sc), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/usb/serial/sierra.c:283:
+        .bInterfaceSubClass = (sc), \$

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#418: FILE: drivers/usb/serial/sierra.c:283:
+        .bInterfaceSubClass = (sc), \

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: drivers/usb/serial/sierra.c:284:
+        .bInterfaceProtocol = (pr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: drivers/usb/serial/sierra.c:284:
+        .bInterfaceProtocol = (pr)$

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceProtocol>
#419: FILE: drivers/usb/serial/sierra.c:284:
+        .bInterfaceProtocol = (pr)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#422: FILE: drivers/usb/serial/sierra.c:287:
+static struct usb_device_id id_table [] = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:SPACING: No space is necessary after a cast
#492: FILE: drivers/usb/serial/sierra.c:357:
+	  driver_info: (unsigned long) &direct_ip_interface_blacklist

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#492: FILE: drivers/usb/serial/sierra.c:357:
+	  driver_info: (unsigned long) &direct_ip_interface_blacklist
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#492: FILE: drivers/usb/serial/sierra.c:357:
+	  driver_info: (unsigned long) &direct_ip_interface_blacklist

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#527: FILE: drivers/usb/serial/sierra.c:392:
+	dbg("%s", __func__);

CHECK:BRACES: Unbalanced braces around else statement
#549: FILE: drivers/usb/serial/sierra.c:414:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <bulk_out_endpointAddress>
#550: FILE: drivers/usb/serial/sierra.c:415:
+		if (port->bulk_out_endpointAddress == 2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: drivers/usb/serial/sierra.c:428:
+	retval = usb_control_msg(serial->dev, usb_rcvctrlpipe(serial->dev, 0),
+		0x22, 0x21, val, interface, NULL, 0, USB_CTRL_SET_TIMEOUT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: drivers/usb/serial/sierra.c:434:
+static void sierra_set_termios(struct usb_serial_port *port,
+				struct termios *old)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#580: FILE: drivers/usb/serial/sierra.c:445:
+	dbg("%s", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#599: FILE: drivers/usb/serial/sierra.c:463:
+	dbg("%s", __func__);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#605: FILE: drivers/usb/serial/sierra.c:469:
+	switch (cmd) {
+		case TIOCMBIS:
[...]
+		case TIOCMBIC:
[...]
+		case TIOCMSET:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#633: FILE: drivers/usb/serial/sierra.c:496:
+	unsigned int value;
+	dbg("%s (%d) cmd = 0x%04x", __func__, port->number, cmd);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#635: FILE: drivers/usb/serial/sierra.c:498:
+	switch (cmd) {
+		case TIOCMGET:
[...]
+		case TIOCMBIS:
+		case TIOCMBIC:
+		case TIOCMSET:
[...]
+		default:

CHECK:SPACING: No space is necessary after a cast
#639: FILE: drivers/usb/serial/sierra.c:502:
+			if (copy_to_user((unsigned int *) arg, &value, sizeof(unsigned int)))

CHECK:SPACING: No space is necessary after a cast
#647: FILE: drivers/usb/serial/sierra.c:510:
+			if (copy_from_user(&value, (unsigned int *) arg, sizeof(unsigned int)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#662: FILE: drivers/usb/serial/sierra.c:525:
+	struct usb_serial_port *port;
+	if (urb) {

WARNING:SPLIT_STRING: quoted string split across lines
#688: FILE: drivers/usb/serial/sierra.c:551:
+		dbg("%s - nonzero write bulk status "
+		    "received: %d", __func__, status);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/usb/serial/sierra.c:565:
+static int sierra_write(struct usb_serial_port *port, int from_user,
+					const unsigned char *buf, int count)

WARNING:MINMAX: min() should probably be min_t(size_t, count, MAX_TRANSFER)
#710: FILE: drivers/usb/serial/sierra.c:573:
+	size_t writesize = min((size_t)count, (size_t)MAX_TRANSFER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: drivers/usb/serial/sierra.c:586:
+	dbg("%s - outstanding_urbs: %d", __func__,
+		portdata->outstanding_urbs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: drivers/usb/serial/sierra.c:594:
+	dbg("%s - 1, outstanding_urbs: %d", __func__,
+		portdata->outstanding_urbs);

WARNING:SPLIT_STRING: quoted string split across lines
#772: FILE: drivers/usb/serial/sierra.c:635:
+		err("%s - usb_submit_urb(write bulk) failed "
+			"with status = %d", __func__, retval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: drivers/usb/serial/sierra.c:651:
+	dbg("%s - 2. outstanding_urbs: %d", __func__,
+		portdata->outstanding_urbs);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#804: FILE: drivers/usb/serial/sierra.c:667:
+	if (port_paranoia_check(port,__FUNCTION__)) {
 	                            ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#804: FILE: drivers/usb/serial/sierra.c:667:
+	if (port_paranoia_check(port,__FUNCTION__)) {

WARNING:SPLIT_STRING: quoted string split across lines
#815: FILE: drivers/usb/serial/sierra.c:678:
+		dbg("%s: nonzero status: %d on"
+			" endpoint %02x", __func__, status, endpoint);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#820: FILE: drivers/usb/serial/sierra.c:683:
+		return;
+	} else {

ERROR:SPACING: space required before the open parenthesis '('
#825: FILE: drivers/usb/serial/sierra.c:688:
+				if(tty->flip.count >= TTY_FLIPBUF_SIZE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#825: FILE: drivers/usb/serial/sierra.c:688:
+				if(tty->flip.count >= TTY_FLIPBUF_SIZE) {
+					tty_flip_buffer_push(tty);
+				}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: drivers/usb/serial/sierra.c:696:
+			usb_serial_debug_data(__FILE__, __func__,
+				urb->actual_length, data);

WARNING:SPLIT_STRING: quoted string split across lines
#836: FILE: drivers/usb/serial/sierra.c:699:
+			dbg("%s: empty read urb"
+				" received\n", __func__);

WARNING:SPLIT_STRING: quoted string split across lines
#846: FILE: drivers/usb/serial/sierra.c:709:
+			err("resubmit read urb failed."
+				"(%d)\n", err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: drivers/usb/serial/sierra.c:728:
+	dbg("%s: urb %p port %p has data %p", __func__,
+		urb, port, portdata);

CHECK:BRACES: braces {} should be used on all arms of this statement
#867: FILE: drivers/usb/serial/sierra.c:730:
+	if (status == 0) {
[...]
+	} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#871: FILE: drivers/usb/serial/sierra.c:734:
+		usb_serial_debug_data (__FILE__, __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#871: FILE: drivers/usb/serial/sierra.c:734:
+		usb_serial_debug_data (__FILE__, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: drivers/usb/serial/sierra.c:740:
+			dbg("%s: NULL req_pkt",
+				__func__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req_pkt->bRequestType == 0xA1'
#880: FILE: drivers/usb/serial/sierra.c:743:
+		if ((req_pkt->bRequestType == 0xA1) &&
+				(req_pkt->bRequest == 0x20)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req_pkt->bRequest == 0x20'
#880: FILE: drivers/usb/serial/sierra.c:743:
+		if ((req_pkt->bRequestType == 0xA1) &&
+				(req_pkt->bRequest == 0x20)) {

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#880: FILE: drivers/usb/serial/sierra.c:743:
+		if ((req_pkt->bRequestType == 0xA1) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: drivers/usb/serial/sierra.c:744:
+		if ((req_pkt->bRequestType == 0xA1) &&
+				(req_pkt->bRequest == 0x20)) {

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#881: FILE: drivers/usb/serial/sierra.c:744:
+				(req_pkt->bRequest == 0x20)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#889: FILE: drivers/usb/serial/sierra.c:752:
+			dbg("%s: signal x%x", __func__,
+				signals);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: drivers/usb/serial/sierra.c:762:
+			if (tty && !C_CLOCAL(tty) &&
+					old_dcd_state && !portdata->dcd_state)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: drivers/usb/serial/sierra.c:766:
+			dbg("%s: type %x req %x",
+				__func__, req_pkt->bRequestType,

CHECK:BRACES: Unbalanced braces around else statement
#906: FILE: drivers/usb/serial/sierra.c:769:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#920: FILE: drivers/usb/serial/sierra.c:783:
+	 * this point in time */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: drivers/usb/serial/sierra.c:822:
+			err("%s: submit urb failed on port %d: %d",
+				__func__, port->number, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/usb/serial/sierra.c:833:
+			err("%s: submit intr urb failed on port %d: %d",
+				__func__, port->number, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: drivers/usb/serial/sierra.c:844:
+static struct urb *sierra_setup_urb(struct usb_serial *serial, int endpoint,
+					int dir, void *ctx, int len,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!urb"
#992: FILE: drivers/usb/serial/sierra.c:855:
+	if (urb == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: drivers/usb/serial/sierra.c:857:
+		dbg("%s: alloc for endpoint %d failed",
+			__func__, endpoint);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: drivers/usb/serial/sierra.c:865:
+		usb_fill_bulk_urb(urb, serial->dev,
+			usb_sndbulkpipe(serial->dev, endpoint) | dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: drivers/usb/serial/sierra.c:870:
+		dbg("%s %c u: %p d:%p", __func__,
+				dir == USB_DIR_IN ? 'i' : 'o', urb, buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1010: FILE: drivers/usb/serial/sierra.c:873:
+		dbg("%s %c u:%p d:%p", __func__,
+				dir == USB_DIR_IN ? 'i' : 'o', urb, buf);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1019: FILE: drivers/usb/serial/sierra.c:882:
+static void sierra_close(struct usb_serial_port *port, struct file *filp)
                                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1026: FILE: drivers/usb/serial/sierra.c:889:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1027: FILE: drivers/usb/serial/sierra.c:890:
+	dbg("%s", __func__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1046: FILE: drivers/usb/serial/sierra.c:909:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1057: FILE: drivers/usb/serial/sierra.c:920:
+static int sierra_open(struct usb_serial_port *port, struct file *filp)
                                                                   ^^^^

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1069: FILE: drivers/usb/serial/sierra.c:932:
+	dbg("%s", __func__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1078: FILE: drivers/usb/serial/sierra.c:941:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <bulk_in_endpointAddress>
#1079: FILE: drivers/usb/serial/sierra.c:942:
+	endpoint = port->bulk_in_endpointAddress;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: drivers/usb/serial/sierra.c:945:
+		urb = sierra_setup_urb(serial, endpoint, USB_DIR_IN, port,
+					IN_BUFLEN, GFP_KERNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1093: FILE: drivers/usb/serial/sierra.c:956:
+	usb_clear_halt(serial->dev,
+			usb_sndbulkpipe(serial->dev, endpoint) | USB_DIR_IN);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1111: FILE: drivers/usb/serial/sierra.c:974:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1121: FILE: drivers/usb/serial/sierra.c:984:
+	dbg("%s", __func__);

WARNING:SPLIT_STRING: quoted string split across lines
#1142: FILE: drivers/usb/serial/sierra.c:1005:
+			dbg("%s: kmalloc for "
+				"sierra_port_private (%d) failed!",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1164: FILE: drivers/usb/serial/sierra.c:1027:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1164: FILE: drivers/usb/serial/sierra.c:1027:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1173: FILE: drivers/usb/serial/sierra.c:1036:
+		dbg("Memory usage (urbs) interface #%d, in=%d, out=%d",
+			ifnum,portdata->num_in_urbs, portdata->num_out_urbs );

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1173: FILE: drivers/usb/serial/sierra.c:1036:
+			ifnum,portdata->num_in_urbs, portdata->num_out_urbs );
 			     ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1173: FILE: drivers/usb/serial/sierra.c:1036:
+			ifnum,portdata->num_in_urbs, portdata->num_out_urbs );

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1187: FILE: drivers/usb/serial/sierra.c:1050:
+	dbg("%s", __func__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1223: FILE: drivers/usb/serial/sierra.c:1086:
+	int retval;
+	retval = usb_serial_register(&sierra_device);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1227: FILE: drivers/usb/serial/sierra.c:1090:
+	printk(KERN_INFO "sierra: " DRIVER_VERSION ":"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000022295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 19 errors, 53 warnings, 64 checks, 1155 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000022295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
