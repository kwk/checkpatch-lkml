WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#250: FILE: arch/x86/kernel/cpu/cpu_debug.c:554:
+^I^Ifor (reg = cpu_amd_pci##func[i].min; ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: arch/x86/kernel/cpu/cpu_debug.c:557:
+^I^I^I^Iseq_printf(seq, " %03x\t: %08x\n", ^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#275: FILE: arch/x86/kernel/cpu/cpu_debug.c:579:
+		if (dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'regsiters' may be misspelled - perhaps 'registers'?
#304: FILE: arch/x86/kernel/cpu/cpu_debug.c:608:
+	seq_printf(seq, " PCI configuration regsiters :\n");
 	                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#304: FILE: arch/x86/kernel/cpu/cpu_debug.c:608:
+	seq_printf(seq, " PCI configuration regsiters :\n");

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#345: FILE: arch/x86/kernel/cpu/cpu_debug.c:890:
+#define INIT_AMD_PCI(func) \
+static void init_amd_pci##func(unsigned cpu, struct dentry *dentry, 	\
+				struct pci_dev *dev)			\
+{									\
+	struct dentry *cdentry;						\
+	unsigned int reg, i, id;					\
+	char reg_dir[10];						\
+	u32 data;							\
+									\
+	for (i = 0; i < ARRAY_SIZE(cpu_amd_pci##func); i++) {		\
+		for (reg = cpu_amd_pci##func[i].min;			\
+		     reg <= cpu_amd_pci##func[i].max; reg++) {		\
+			if (!pci_read_config_dword(dev, reg, &data)) {	\
+				sprintf(reg_dir, "PCI%d_%03x",		\
+					func, reg);			\
+				id = cpu_amd_pci##func[i].flag;		\
+				cdentry = debugfs_create_dir(reg_dir,	\
+					per_cpu(cpu_arr[id].dentry, cpu)); \
+				cpu_create_file(cpu, 			\
+						cpu_amd_pci##func[i].flag, \
+						(func << 16) | reg,	\
+						CPU_VALUE, CPU_REG_PCI, \
+						cdentry);		\
+			}						\
+		}							\
+	}								\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: arch/x86/kernel/cpu/cpu_debug.c:891:
+static void init_amd_pci##func(unsigned cpu, struct dentry *dentry, ^I\$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#346: FILE: arch/x86/kernel/cpu/cpu_debug.c:891:
+static void init_amd_pci##func(unsigned cpu, struct dentry *dentry, 	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: arch/x86/kernel/cpu/cpu_debug.c:908:
+^I^I^I^Icpu_create_file(cpu, ^I^I^I\$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#380: FILE: arch/x86/kernel/cpu/cpu_debug.c:925:
+static void init_amd_pci(unsigned cpu, struct dentry *dentry)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->device >= 0x1100'
#387: FILE: arch/x86/kernel/cpu/cpu_debug.c:932:
+		if ((dev->device >= 0x1100) && (dev->device < 0x2000)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->device < 0x2000'
#387: FILE: arch/x86/kernel/cpu/cpu_debug.c:932:
+		if ((dev->device >= 0x1100) && (dev->device < 0x2000)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#414: FILE: arch/x86/kernel/cpu/cpu_debug.c:959:
+static void cpu_init_pci(unsigned cpu, struct dentry *dentry)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 4 checks, 371 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
