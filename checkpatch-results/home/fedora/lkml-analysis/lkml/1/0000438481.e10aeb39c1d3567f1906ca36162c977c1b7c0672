WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#123: FILE: arch/i386/kernel/cpu/common.c:634:
 struct pt_regs * __devinit idle_regs(struct pt_regs *regs)

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: arch/i386/kernel/smpboot.c:826:
+ ^Iper_cpu(current_task, cpu) = idle;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: arch/i386/kernel/smpboot.c:826:
+ ^Iper_cpu(current_task, cpu) = idle;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: arch/i386/kernel/smpboot.c:826:
+ ^Iper_cpu(current_task, cpu) = idle;$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#418: FILE: arch/i386/kernel/vmi.c:507:
 static void __devinit

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#458: FILE: include/asm-i386/current.h:5:
+#include <asm/percpu.h>

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#486: FILE: include/asm-i386/irq_regs.h:10:
+#include <asm/percpu.h>

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#637: FILE: include/asm-i386/percpu.h:19:
+#define PER_CPU(var, reg)			\
+	movl %fs:per_cpu__this_cpu_off, reg;		\
+	addl $per_cpu__##var, reg

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#637: FILE: include/asm-i386/percpu.h:19:
+#define PER_CPU(var, reg)			\
+	movl %fs:per_cpu__this_cpu_off, reg;		\
+	addl $per_cpu__##var, reg

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#638: FILE: include/asm-i386/percpu.h:20:
+	movl %fs:per_cpu__this_cpu_off, reg;		\
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#638: FILE: include/asm-i386/percpu.h:20:
+	movl %fs:per_cpu__this_cpu_off, reg;		\
 	        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#641: FILE: include/asm-i386/percpu.h:23:
+#define PER_CPU(var, reg) \
+	movl $per_cpu__##var, reg;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#641: FILE: include/asm-i386/percpu.h:23:
+#define PER_CPU(var, reg) \
+	movl $per_cpu__##var, reg;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#666: FILE: include/asm-i386/percpu.h:49:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) per_cpu__##name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#667: FILE: include/asm-i386/percpu.h:50:
+#define DEFINE_PER_CPU(type, name) \
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: include/asm-i386/percpu.h:51:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#668: FILE: include/asm-i386/percpu.h:51:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#675: FILE: include/asm-i386/percpu.h:58:
+	extern int simple_indentifier_##var(void);	\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#679: FILE: include/asm-i386/percpu.h:62:
+	extern int simple_indentifier_##var(void);			\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#690: FILE: include/asm-i386/percpu.h:73:
+		memcpy((pcpudst)+__per_cpu_offset[__i],		\
 		                ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#694: FILE: include/asm-i386/percpu.h:77:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#695: FILE: include/asm-i386/percpu.h:78:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#705: FILE: include/asm-i386/percpu.h:88:
+ * don't give an lvalue though). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#706: FILE: include/asm-i386/percpu.h:89:
+extern void __bad_percpu_size(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#708: FILE: include/asm-i386/percpu.h:91:
+#define percpu_to_op(op,var,val)				\
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#708: FILE: include/asm-i386/percpu.h:91:
+#define percpu_to_op(op,var,val)				\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#708: FILE: include/asm-i386/percpu.h:91:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#708: FILE: include/asm-i386/percpu.h:91:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#708: FILE: include/asm-i386/percpu.h:91:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#710: FILE: include/asm-i386/percpu.h:93:
+		typedef typeof(var) T__;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#711: FILE: include/asm-i386/percpu.h:94:
+		if (0) { T__ tmp__; tmp__ = (val); }		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#714: FILE: include/asm-i386/percpu.h:97:
+			asm(op "b %1,"__percpu_seg"%0"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#716: FILE: include/asm-i386/percpu.h:99:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#719: FILE: include/asm-i386/percpu.h:102:
+			asm(op "w %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#721: FILE: include/asm-i386/percpu.h:104:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#724: FILE: include/asm-i386/percpu.h:107:
+			asm(op "l %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#726: FILE: include/asm-i386/percpu.h:109:
+			    :"ri" ((T__)val));			\
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#728: FILE: include/asm-i386/percpu.h:111:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#732: FILE: include/asm-i386/percpu.h:115:
+#define percpu_from_op(op,var)					\
                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#732: FILE: include/asm-i386/percpu.h:115:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#732: FILE: include/asm-i386/percpu.h:115:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#737: FILE: include/asm-i386/percpu.h:120:
+			asm(op "b "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#742: FILE: include/asm-i386/percpu.h:125:
+			asm(op "w "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#747: FILE: include/asm-i386/percpu.h:130:
+			asm(op "l "__percpu_seg"%1,%0"		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#751: FILE: include/asm-i386/percpu.h:134:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#756: FILE: include/asm-i386/percpu.h:139:
+#define x86_write_percpu(var,val) percpu_to_op("mov", per_cpu__##var, val)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#757: FILE: include/asm-i386/percpu.h:140:
+#define x86_add_percpu(var,val) percpu_to_op("add", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#758: FILE: include/asm-i386/percpu.h:141:
+#define x86_sub_percpu(var,val) percpu_to_op("sub", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#759: FILE: include/asm-i386/percpu.h:142:
+#define x86_or_percpu(var,val) percpu_to_op("or", per_cpu__##var, val)
                          ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 13 warnings, 18 checks, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
