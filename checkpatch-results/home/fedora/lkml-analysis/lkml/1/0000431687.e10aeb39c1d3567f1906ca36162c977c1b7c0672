WARNING:TYPO_SPELLING: 'Attemp' may be misspelled - perhaps 'Attempt'?
#56: FILE: fs/inode.c:1430:
+	printk("Attemp to open a whiteout!\n");
 	        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#56: FILE: fs/inode.c:1430:
+	printk("Attemp to open a whiteout!\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#61: FILE: fs/inode.c:1435:
+static struct file_operations def_wht_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#136: FILE: fs/namei.c:1654:
+	if (d_mountpoint(dentry))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#138: FILE: fs/namei.c:1656:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: fs/namei.c:1685:
+	BUG_ON(dir != parent->d_inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: fs/namei.c:1701:
+	BUG_ON(IS_ERR(*dp));	/* Hmm, very hard response here */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#216: FILE: fs/namei.c:1929:
+			path.dentry = __lookup_hash_single(&nd->last, dir, nd);
 			                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#230: FILE: fs/namei.c:2051:
+		error = union_relookup_topmost(nd, nd->flags & ~LOOKUP_PARENT);
 		                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#250: FILE: fs/namei.c:2083:
+			dentry = __lookup_hash_single(&nd->last,nd->dentry,nd);
 			                                                   ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: fs/namei.c:2083:
+			dentry = __lookup_hash_single(&nd->last,nd->dentry,nd);
 			                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: fs/namei.c:2083:
+			dentry = __lookup_hash_single(&nd->last,nd->dentry,nd);
 			                                                  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#282: FILE: fs/namei.c:2205:
+	if (dentry->d_inode && S_ISWHT(dentry->d_inode->i_mode)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: fs/namei.c:2210:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#314: FILE: fs/namei.c:2270:
+	if (isdir) {
[...]
+	} else if (S_ISDIR(victim->d_inode->i_mode))
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: fs/namei.c:2292:
+	BUG_ON(dentry->d_parent->d_inode != dir);

WARNING:TYPO_SPELLING: 'an union' may be misspelled - perhaps 'a union'?
#364: FILE: fs/namei.c:2320:
+ * This is called by the VFS when removing or renaming files on an union mount.
                                                                 ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: fs/namei.c:2391:
+static int unlink_whiteouts_filldir(void *buf, const char *name, int namlen,
+			   loff_t offset, u64 ino, unsigned int d_type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#500: FILE: fs/namei.c:2456:
+		printk(KERN_ERR "%s: dentry_open failed (%ld)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#501: FILE: fs/namei.c:2457:
+		       __FUNCTION__, PTR_ERR(file));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#520: FILE: fs/namei.c:2476:
+		printk(KERN_ERR "%s: readdir failed (%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#521: FILE: fs/namei.c:2477:
+		       __FUNCTION__, res);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#525: FILE: fs/namei.c:2481:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#566: FILE: fs/namei.c:2582:
+	if (!union_is_member(nd.dentry, nd.mnt)) {
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#566: FILE: fs/namei.c:2582:
+	if (!union_is_member(nd.dentry, nd.mnt)) {
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#568: FILE: fs/namei.c:2584:
+		error = vfs_rmdir(nd.dentry->d_inode, dentry);
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#573: FILE: fs/namei.c:2589:
+	if (dentry->d_parent == nd.dentry) {
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#580: FILE: fs/namei.c:2596:
+		if (present_in_lower(dentry, &nd))
 		                              ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#580: FILE: fs/namei.c:2596:
+		if (present_in_lower(dentry, &nd))
[...]
+		else {
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#581: FILE: fs/namei.c:2597:
+			error = do_whiteout(nd.dentry, dentry, 1);
 			                    ^^

CHECK:BRACES: Unbalanced braces around else statement
#582: FILE: fs/namei.c:2598:
+		else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#583: FILE: fs/namei.c:2599:
+			error = vfs_rmdir(nd.dentry->d_inode, dentry);
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#593: FILE: fs/namei.c:2609:
+		dentry = __lookup_hash_single(&nd.last, nd.dentry, &nd);
 		                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#593: FILE: fs/namei.c:2609:
+		dentry = __lookup_hash_single(&nd.last, nd.dentry, &nd);
 		                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#593: FILE: fs/namei.c:2609:
+		dentry = __lookup_hash_single(&nd.last, nd.dentry, &nd);
 		                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#597: FILE: fs/namei.c:2613:
+		error = vfs_whiteout(nd.dentry->d_inode, dentry);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#611: FILE: fs/namei.c:2695:
+		if (!union_is_member(nd.dentry, nd.mnt)) {
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#611: FILE: fs/namei.c:2695:
+		if (!union_is_member(nd.dentry, nd.mnt)) {
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#613: FILE: fs/namei.c:2697:
+			error = vfs_unlink(nd.dentry->d_inode, dentry);
 			                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#619: FILE: fs/namei.c:2703:
+		if (dentry->d_parent == nd.dentry) {
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#626: FILE: fs/namei.c:2710:
+			if (present_in_lower(dentry, &nd))
 			                              ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#626: FILE: fs/namei.c:2710:
+			if (present_in_lower(dentry, &nd))
[...]
+			else {
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#627: FILE: fs/namei.c:2711:
+				error = do_whiteout(nd.dentry, dentry, 0);
 				                    ^^

CHECK:BRACES: Unbalanced braces around else statement
#628: FILE: fs/namei.c:2712:
+			else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#629: FILE: fs/namei.c:2713:
+				error = vfs_unlink(nd.dentry->d_inode, dentry);
 				                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#639: FILE: fs/namei.c:2723:
+			dentry = __lookup_hash_single(&nd.last, nd.dentry, &nd);
 			                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#639: FILE: fs/namei.c:2723:
+			dentry = __lookup_hash_single(&nd.last, nd.dentry, &nd);
 			                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#639: FILE: fs/namei.c:2723:
+			dentry = __lookup_hash_single(&nd.last, nd.dentry, &nd);
 			                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#643: FILE: fs/namei.c:2727:
+			error = vfs_whiteout(nd.dentry->d_inode, dentry);
 			                     ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#824: FILE: fs/union.c:1835:
+	BUG_ON(!S_ISDIR(dentry->d_inode->i_mode));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#840: FILE: fs/union.c:1851:
+int present_in_lower(struct dentry *dentry, struct nameidata *nd)
                                                               ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#855: FILE: fs/union.c:1866:
+^I        mutex_lock(&parent->d_inode->i_mutex);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/linux/fs.h:1055:
+extern int vfs_whiteout(struct inode *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#905: FILE: include/linux/fs.h:1055:
+extern int vfs_whiteout(struct inode *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#905: FILE: include/linux/fs.h:1055:
+extern int vfs_whiteout(struct inode *, struct dentry *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#913: FILE: include/linux/fs.h:1181:
+	int (*whiteout) (struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#913: FILE: include/linux/fs.h:1181:
+	int (*whiteout) (struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#913: FILE: include/linux/fs.h:1181:
+	int (*whiteout) (struct inode *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#924: FILE: include/linux/union.h:47:
+extern int union_dir_is_empty(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#924: FILE: include/linux/union.h:47:
+extern int union_dir_is_empty(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#925: FILE: include/linux/union.h:48:
+extern int present_in_lower(struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#925: FILE: include/linux/union.h:48:
+extern int present_in_lower(struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#925: FILE: include/linux/union.h:48:
+extern int present_in_lower(struct dentry *, struct nameidata *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431687.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 46 warnings, 14 checks, 846 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431687.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
