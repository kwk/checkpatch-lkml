WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: drivers/staging/dream/Kconfig:5:
+config TOUCHSCREEN_SYNAPTICS_I2C_RMI
+	tristate "Synaptics i2c touchscreen"
+	depends on I2C
+	help
+	  This enables support for Synaptics RMI over I2C based touchscreens.
+
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#69: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:1:
+/* drivers/input/keyboard/synaptics_i2c_rmi.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#99: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:26:
+#define swap(x, y) do { typeof(x) z = x; x = y; y = z; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#99: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:26:
+#define swap(x, y) do { typeof(x) z = x; x = y; y = z; } while (0)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#104: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:31:
+	uint16_t addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#110: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:37:
+	uint16_t max[2];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#118: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:45:
+	uint32_t flags;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#136: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:63:
+		printk(KERN_ERR "i2c_smbus_write_byte_data failed for page select\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#141: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:68:
+		printk(KERN_ERR "i2c_smbus_write_byte_data failed for No Clip Z\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#146: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:73:
+		printk(KERN_ERR "i2c_smbus_write_byte_data failed for page select\n");

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#147: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:74:
+	ret = i2c_smbus_write_byte_data(ts->client, 0xf0, 0x81); /* normal operation, 80 reports per second */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#149: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:76:
+		printk(KERN_ERR "synaptics_ts_resume: i2c_smbus_write_byte_data failed\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#159: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:86:
+	uint8_t start_reg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#160: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:87:
+	uint8_t buf[15];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#177: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:104:
+			printk(KERN_ERR "synaptics_ts_work_func: i2c_transfer failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_work_func', this function's name, in a string
#177: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:104:
+			printk(KERN_ERR "synaptics_ts_work_func: i2c_transfer failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#187: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:114:
+				printk(KERN_WARNING "synaptics_ts_work_func:"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_work_func', this function's name, in a string
#187: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:114:
+				printk(KERN_WARNING "synaptics_ts_work_func:"

WARNING:SPLIT_STRING: quoted string split across lines
#188: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:115:
+				printk(KERN_WARNING "synaptics_ts_work_func:"
+				       " bad read %x %x %x %x %x %x %x %x %x"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#189: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:116:
+				       " bad read %x %x %x %x %x %x %x %x %x"
+				       " %x %x %x %x %x %x, ret %d\n",

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#203: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:130:
+				break;
+			} else {

WARNING:LONG_LINE_COMMENT: line length of 137 exceeds 100 columns
#223: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:150:
+				/* printk("x %4d, y %4d, z %3d, w %2d, F %d, 2nd: x %4d, y %4d, z %3d, w %2d, F %d, dx %4d, dy %4d\n", */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#230: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:157:
+					uint32_t flip_flag = SYNAPTICS_FLIP_X;

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:158:
+					uint32_t flip_flag = SYNAPTICS_FLIP_X;
+					for (a = 0; a < 2; a++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:160:
+						int p = buf[base + 1];
+						p |= (uint16_t)(buf[base] & 0x1f) << 8;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#234: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:161:
+						if (ts->flags & flip_flag)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#236: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:163:
+						if (ts->flags & SYNAPTICS_SNAP_TO_INACTIVE_EDGE) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#237: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:164:
+							if (ts->snap_state[f][a]) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#238: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:165:
+								if (p <= ts->snap_down_off[a])

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#240: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:167:
+								else if (p >= ts->snap_up_off[a])

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#242: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:169:
+								else

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#244: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:171:
+							} else {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#245: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:172:
+								if (p <= ts->snap_down_on[a]) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#248: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:175:
+								} else if (p >= ts->snap_up_on[a]) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#304: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:231:
+static int synaptics_ts_probe(

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#308: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:235:
+	uint8_t buf0[4];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#309: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:236:
+	uint8_t buf1[8];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#312: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:239:
+	uint16_t max_x, max_y;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#327: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:254:
+	uint32_t panel_version;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:257:
+		printk(KERN_ERR "synaptics_ts_probe: need I2C_FUNC_I2C\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#330: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:257:
+		printk(KERN_ERR "synaptics_ts_probe: need I2C_FUNC_I2C\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ts"
#336: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:263:
+	if (ts == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#349: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:276:
+			printk(KERN_ERR "synaptics_ts_probe power on failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#349: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:276:
+			printk(KERN_ERR "synaptics_ts_probe power on failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#356: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:283:
+		printk(KERN_ERR "i2c_smbus_write_byte_data failed\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#361: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:288:
+		int retry = 10;
+		while (retry-- > 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#369: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:296:
+		printk(KERN_ERR "i2c_smbus_read_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#372: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:299:
+	printk(KERN_INFO "synaptics_ts_probe: Product Major Version %x\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#372: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:299:
+	printk(KERN_INFO "synaptics_ts_probe: Product Major Version %x\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#376: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:303:
+		printk(KERN_ERR "i2c_smbus_read_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#379: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:306:
+	printk(KERN_INFO "synaptics_ts_probe: Product Minor Version %x\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#379: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:306:
+	printk(KERN_INFO "synaptics_ts_probe: Product Minor Version %x\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#384: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:311:
+		printk(KERN_ERR "i2c_smbus_read_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#387: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:314:
+	printk(KERN_INFO "synaptics_ts_probe: product property %x\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#387: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:314:
+	printk(KERN_INFO "synaptics_ts_probe: product property %x\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#430: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:357:
+		printk(KERN_ERR "i2c_smbus_read_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#433: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:360:
+	printk(KERN_INFO "synaptics_ts_probe: device control %x\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#433: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:360:
+	printk(KERN_INFO "synaptics_ts_probe: device control %x\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#437: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:364:
+		printk(KERN_ERR "i2c_smbus_read_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#440: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:367:
+	printk(KERN_INFO "synaptics_ts_probe: interrupt enable %x\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#440: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:367:
+	printk(KERN_INFO "synaptics_ts_probe: interrupt enable %x\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#444: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:371:
+		printk(KERN_ERR "i2c_smbus_write_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#459: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:386:
+		printk(KERN_ERR "i2c_transfer failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#462: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:389:
+	printk(KERN_INFO "synaptics_ts_probe: 0xe0: %x %x %x %x %x %x %x %x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#462: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:389:
+	printk(KERN_INFO "synaptics_ts_probe: 0xe0: %x %x %x %x %x %x %x %x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#468: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:395:
+		printk(KERN_ERR "i2c_smbus_write_byte_data failed for page select\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#473: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:400:
+		printk(KERN_ERR "i2c_smbus_read_word_data failed\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#476: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:403:
+	ts->max[0] = max_x = (ret >> 8 & 0xff) | ((ret & 0x1f) << 8);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#479: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:406:
+		printk(KERN_ERR "i2c_smbus_read_word_data failed\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#482: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:409:
+	ts->max[1] = max_y = (ret >> 8 & 0xff) | ((ret & 0x1f) << 8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#488: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:415:
+		printk(KERN_ERR "synaptics_init_panel failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ts->input_dev"
#493: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:420:
+	if (ts->input_dev == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#495: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:422:
+		printk(KERN_ERR "synaptics_ts_probe: Failed to allocate input device\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#495: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:422:
+		printk(KERN_ERR "synaptics_ts_probe: Failed to allocate input device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#530: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:457:
+	printk(KERN_INFO "synaptics_ts_probe: max_x %d, max_y %d\n", max_x, max_y);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#530: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:457:
+	printk(KERN_INFO "synaptics_ts_probe: max_x %d, max_y %d\n", max_x, max_y);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#531: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:458:
+	printk(KERN_INFO "synaptics_ts_probe: inactive_x %d %d, inactive_y %d %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#531: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:458:
+	printk(KERN_INFO "synaptics_ts_probe: inactive_x %d %d, inactive_y %d %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#534: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:461:
+	printk(KERN_INFO "synaptics_ts_probe: snap_x %d-%d %d-%d, snap_y %d-%d %d-%d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#534: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:461:
+	printk(KERN_INFO "synaptics_ts_probe: snap_x %d-%d %d-%d, snap_y %d-%d %d-%d\n",

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#537: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:464:
+	input_set_abs_params(ts->input_dev, ABS_X, -inactive_area_left, max_x + inactive_area_right, fuzz_x, 0);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#538: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:465:
+	input_set_abs_params(ts->input_dev, ABS_Y, -inactive_area_top, max_y + inactive_area_bottom, fuzz_y, 0);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#541: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:468:
+	input_set_abs_params(ts->input_dev, ABS_HAT0X, -inactive_area_left, max_x + inactive_area_right, fuzz_x, 0);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#542: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:469:
+	input_set_abs_params(ts->input_dev, ABS_HAT0Y, -inactive_area_top, max_y + inactive_area_bottom, fuzz_y, 0);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#546: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:473:
+		printk(KERN_ERR "synaptics_ts_probe: Unable to register %s input device\n", ts->input_dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#546: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:473:
+		printk(KERN_ERR "synaptics_ts_probe: Unable to register %s input device\n", ts->input_dev->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#546: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:473:
+		printk(KERN_ERR "synaptics_ts_probe: Unable to register %s input device\n", ts->input_dev->name);

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#552: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:479:
+			ret = i2c_smbus_write_byte_data(ts->client, 0xf1, 0x01); /* enable abs int */

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#573: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:500:
+	printk(KERN_INFO "synaptics_ts_probe: Start touchscreen %s in %s mode\n", ts->input_dev->name, ts->use_irq ? "interrupt" : "polling");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#573: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:500:
+	printk(KERN_INFO "synaptics_ts_probe: Start touchscreen %s in %s mode\n", ts->input_dev->name, ts->use_irq ? "interrupt" : "polling");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_probe', this function's name, in a string
#573: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:500:
+	printk(KERN_INFO "synaptics_ts_probe: Start touchscreen %s in %s mode\n", ts->input_dev->name, ts->use_irq ? "interrupt" : "polling");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#618: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:545:
+		printk(KERN_ERR "synaptics_ts_suspend: i2c_smbus_write_byte_data failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_suspend', this function's name, in a string
#618: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:545:
+		printk(KERN_ERR "synaptics_ts_suspend: i2c_smbus_write_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#622: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:549:
+		printk(KERN_ERR "synaptics_ts_suspend: i2c_smbus_write_byte_data failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_suspend', this function's name, in a string
#622: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:549:
+		printk(KERN_ERR "synaptics_ts_suspend: i2c_smbus_write_byte_data failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#626: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:553:
+			printk(KERN_ERR "synaptics_ts_resume power off failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#639: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:566:
+			printk(KERN_ERR "synaptics_ts_resume power on failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_ts_resume', this function's name, in a string
#639: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:566:
+			printk(KERN_ERR "synaptics_ts_resume power on failed\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:586:
+	struct synaptics_ts_data *ts;
+	ts = container_of(h, struct synaptics_ts_data, early_suspend);

WARNING:LINE_SPACING: Missing a blank line after declarations
#666: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:593:
+	struct synaptics_ts_data *ts;
+	ts = container_of(h, struct synaptics_ts_data, early_suspend);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#689: FILE: drivers/staging/dream/synaptics_i2c_rmi.c:616:
+static int __devinit synaptics_ts_init(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#715: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#744: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:30:
+	uint32_t version;	/* Use this entry for panels with */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#748: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:34:
+	uint32_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#749: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:35:
+	uint32_t inactive_left; /* 0x10000 = screen width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#750: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:36:
+	uint32_t inactive_right; /* 0x10000 = screen width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#751: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:37:
+	uint32_t inactive_top; /* 0x10000 = screen height */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#752: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:38:
+	uint32_t inactive_bottom; /* 0x10000 = screen height */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#753: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:39:
+	uint32_t snap_left_on; /* 0x10000 = screen width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#754: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:40:
+	uint32_t snap_left_off; /* 0x10000 = screen width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#755: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:41:
+	uint32_t snap_right_on; /* 0x10000 = screen width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#756: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:42:
+	uint32_t snap_right_off; /* 0x10000 = screen width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#757: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:43:
+	uint32_t snap_top_on; /* 0x10000 = screen height */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#758: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:44:
+	uint32_t snap_top_off; /* 0x10000 = screen height */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#759: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:45:
+	uint32_t snap_bottom_on; /* 0x10000 = screen height */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#760: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:46:
+	uint32_t snap_bottom_off; /* 0x10000 = screen height */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#761: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:47:
+	uint32_t fuzz_x; /* 0x10000 = screen width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#762: FILE: drivers/staging/dream/synaptics_i2c_rmi.h:48:
+	uint32_t fuzz_y; /* 0x10000 = screen height */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094875.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 86 warnings, 33 checks, 703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094875.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
