CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#76: FILE: include/linux/rcupdate.h:279:
+#define rcu_assign_pointer(p, v)	\
+	({ \
+		typeof(*p) *_________p1 = (v); \
+		\
+		if (!__builtin_constant_p(v) || (_________p1 != NULL)) \
+			smp_wmb(); \
+		(p) = _________p1; \
+	})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#76: FILE: include/linux/rcupdate.h:279:
+#define rcu_assign_pointer(p, v)	\
+	({ \
+		typeof(*p) *_________p1 = (v); \
+		\
+		if (!__builtin_constant_p(v) || (_________p1 != NULL)) \
+			smp_wmb(); \
+		(p) = _________p1; \
+	})

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '_________p1 != NULL'
#80: FILE: include/linux/rcupdate.h:283:
+		if (!__builtin_constant_p(v) || (_________p1 != NULL)) \

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_________p1"
#80: FILE: include/linux/rcupdate.h:283:
+		if (!__builtin_constant_p(v) || (_________p1 != NULL)) \

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:MEMORY_BARRIER: memory barrier without comment
#81: FILE: include/linux/rcupdate.h:284:
+			smp_wmb(); \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000321773.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 4 checks, 24 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000321773.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
