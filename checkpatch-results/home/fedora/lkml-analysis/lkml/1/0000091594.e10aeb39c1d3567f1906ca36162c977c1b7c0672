CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#87: FILE: include/net/ip_vs.h:102:
+#define IP_VS_DBG_BUF(level, msg...)				\
+	do {							\
+		char ip_vs_dbg_buf[160];			\
+		int ip_vs_dbg_idx = 0;				\
+		if (level <= ip_vs_get_debug_level())		\
+			pr_debug(msg);				\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#133: FILE: include/net/ip_vs.h:122:
+#define IP_VS_DBG(level, msg...)				\
+	do {							\
+		if (level <= ip_vs_get_debug_level())		\
+			pr_debug(msg);				\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#143: FILE: include/net/ip_vs.h:132:
+#define IP_VS_DBG_PKT(level, pp, skb, ofs, msg)			\
+	do {							\
+		if (level <= ip_vs_get_debug_level())		\
+			pp->debug_packet(pp, skb, ofs, msg);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pp' - possible side-effects?
#143: FILE: include/net/ip_vs.h:132:
+#define IP_VS_DBG_PKT(level, pp, skb, ofs, msg)			\
+	do {							\
+		if (level <= ip_vs_get_debug_level())		\
+			pp->debug_packet(pp, skb, ofs, msg);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pp' may be better as '(pp)' to avoid precedence issues
#143: FILE: include/net/ip_vs.h:132:
+#define IP_VS_DBG_PKT(level, pp, skb, ofs, msg)			\
+	do {							\
+		if (level <= ip_vs_get_debug_level())		\
+			pp->debug_packet(pp, skb, ofs, msg);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#148: FILE: include/net/ip_vs.h:137:
+#define IP_VS_DBG_RL_PKT(level, pp, skb, ofs, msg)		\
+	do {							\
+		if (level <= ip_vs_get_debug_level() &&		\
+		    net_ratelimit())				\
+			pp->debug_packet(pp, skb, ofs, msg);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pp' - possible side-effects?
#148: FILE: include/net/ip_vs.h:137:
+#define IP_VS_DBG_RL_PKT(level, pp, skb, ofs, msg)		\
+	do {							\
+		if (level <= ip_vs_get_debug_level() &&		\
+		    net_ratelimit())				\
+			pp->debug_packet(pp, skb, ofs, msg);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pp' may be better as '(pp)' to avoid precedence issues
#148: FILE: include/net/ip_vs.h:137:
+#define IP_VS_DBG_RL_PKT(level, pp, skb, ofs, msg)		\
+	do {							\
+		if (level <= ip_vs_get_debug_level() &&		\
+		    net_ratelimit())				\
+			pp->debug_packet(pp, skb, ofs, msg);	\
+	} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <EnterFunction>
#192: FILE: include/net/ip_vs.h:163:
+#define EnterFunction(level)					\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#192: FILE: include/net/ip_vs.h:163:
+#define EnterFunction(level)					\
+	do {							\
+		if (level <= ip_vs_get_debug_level())		\
+			pr_debug("Enter: %s, %s line %i\n",	\
+				 __func__, __FILE__, __LINE__);	\
+	} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <LeaveFunction>
#198: FILE: include/net/ip_vs.h:169:
+#define LeaveFunction(level)					\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#198: FILE: include/net/ip_vs.h:169:
+#define LeaveFunction(level)					\
+	do {							\
+		if (level <= ip_vs_get_debug_level())		\
+			pr_debug("Leave: %s, %s line %i\n",	\
+				 __func__, __FILE__, __LINE__);	\
+	} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000091594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 12 checks, 375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000091594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
