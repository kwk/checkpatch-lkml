WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
I sent this patch some days ago, but no response, so this time I add more Cc's

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#646: FILE: fs/proc/base.c:106:
+#include <asm/pgtable.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#647: FILE: fs/proc/base.c:107:
+#include <asm/processor.h>

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#653: FILE: fs/proc/base.c:2487:
seq_file *m, struct pid_namespace *ns,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#666: FILE: fs/proc/base.c:2500:
+	seq_printf(m, "Name:\t");

WARNING:LINE_SPACING: Missing a blank line after declarations
#673: FILE: fs/proc/base.c:2507:
+		unsigned char c = *name;
+		name++;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#693: FILE: fs/proc/base.c:2527:
+	seq_printf(m, "\n");

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#702: FILE: fs/proc/base.c:2536:
+static const char *task_state_array[] = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: fs/proc/base.c:2559:
+static inline void task_state(struct seq_file *m, struct pid_namespace *ns,
+				struct pid *pid, struct task_struct *p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: fs/proc/base.c:2573:
+		struct task_struct *tracer = tracehook_tracer_task(p);
+		if (tracer)

CHECK:SPACING: No space is necessary after a cast
#742: FILE: fs/proc/base.c:2576:
+	cred = get_cred((struct cred *) __task_cred(p));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: fs/proc/base.c:2578:
+	seq_printf(m,
+		"State:\t%s\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: fs/proc/base.c:2596:
+	seq_printf(m,
+		"FDSize:\t%d\n"

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#774: FILE: fs/proc/base.c:2608:
+	seq_printf(m, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: fs/proc/base.c:2612:
+static void render_sigset_t(struct seq_file *m, const char *header,
+				sigset_t *set)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#789: FILE: fs/proc/base.c:2623:
+		if (sigismember(set, i+1)) x |= 1;
 		                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#789: FILE: fs/proc/base.c:2623:
+		if (sigismember(set, i+1)) x |= 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#790: FILE: fs/proc/base.c:2624:
+		if (sigismember(set, i+2)) x |= 2;
 		                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#790: FILE: fs/proc/base.c:2624:
+		if (sigismember(set, i+2)) x |= 2;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#791: FILE: fs/proc/base.c:2625:
+		if (sigismember(set, i+3)) x |= 4;
 		                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#791: FILE: fs/proc/base.c:2625:
+		if (sigismember(set, i+3)) x |= 4;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#792: FILE: fs/proc/base.c:2626:
+		if (sigismember(set, i+4)) x |= 8;
 		                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#792: FILE: fs/proc/base.c:2626:
+		if (sigismember(set, i+4)) x |= 8;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#796: FILE: fs/proc/base.c:2630:
+	seq_printf(m, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: fs/proc/base.c:2685:
+static void render_cap_t(struct seq_file *m, const char *header,
+			kernel_cap_t *a)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#853: FILE: fs/proc/base.c:2687:
+	unsigned __capi;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#858: FILE: fs/proc/base.c:2692:
+			   a->cap[(_KERNEL_CAPABILITY_U32S-1) - __capi]);
 			                                  ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#860: FILE: fs/proc/base.c:2694:
+	seq_printf(m, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: fs/proc/base.c:2717:
+static inline void task_context_switch_counts(struct seq_file *m,
+						struct task_struct *p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: fs/proc/base.c:2726:
+static int proc_pid_status(struct seq_file *m, struct pid_namespace *ns,
+			struct pid *pid, struct task_struct *task)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#935: FILE: fs/proc/base.c:2769:
+	vsize = eip = esp = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#950: FILE: fs/proc/base.c:2784:
+	cutime = cstime = utime = stime = cputime_zero;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#951: FILE: fs/proc/base.c:2785:
+	cgtime = gtime = cputime_zero;

WARNING:LINE_SPACING: Missing a blank line after declarations
#958: FILE: fs/proc/base.c:2792:
+			struct pid *pgrp = tty_get_pgrp(sig->tty);
+			tty_pgrp = pid_nr_ns(pgrp, ns);

WARNING:LINE_SPACING: Missing a blank line after declarations
#977: FILE: fs/proc/base.c:2811:
+			struct task_struct *t = task;
+			do {

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1022: FILE: fs/proc/base.c:2856:
+	seq_printf(m, "%d (%s) %c %d %d %d %d %d %u %lu \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: fs/proc/base.c:2912:
+static int proc_tid_stat(struct seq_file *m, struct pid_namespace *ns,
+			struct pid *pid, struct task_struct *task)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1084: FILE: fs/proc/base.c:2918:
+static int proc_tgid_stat(struct seq_file *m, struct pid_namespace *ns,
+			struct pid *pid, struct task_struct *task)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1090: FILE: fs/proc/base.c:2924:
+static int proc_pid_statm(struct seq_file *m, struct pid_namespace *ns,
+			struct pid *pid, struct task_struct *task)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: fs/proc/base.c:2934:
+	seq_printf(m, "%d %d %d %d %d %d %d\n",
+			size, resident, shared, text, lib, data, 0);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120502.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 16 warnings, 20 checks, 520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120502.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
