WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
I've addressed your comments, details follow. I've also retested this change and implemented a minor optimization after which sequential read with metaclustering is slightly better than normal.

WARNING:TYPO_SPELLING: 'commnetary' may be misspelled - perhaps 'commentary'?
#116: 
> Perhaps some commnetary is needed here.
               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#234: 
> > +     int uptodate = !err && test_bit(BIO_UPTODATE, &bio->bi_flags);
              ^^^^^^^^

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#304: 
> > + *      Issue a single bio request to read upto count buffers identified in
                                                ^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#306: 
> > + *      - If a buffer is found to be uptodate and it's prefetch bit is set, we
                                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#313: 
> > + *      it's already uptodate.
                          ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#407: FILE: fs/ext3/balloc.c:39:
+ * ^IStart of^I^I^I^I^I^IEnd of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#408: FILE: fs/ext3/balloc.c:40:
+ * ^Iblock group^I^I^I^I^I^Iblock group$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: fs/ext3/balloc.c:41:
+ * ^I ________________________________________________________________$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: fs/ext3/balloc.c:42:
+ * ^I|^INON-MC REGION^I^I^I|^IMC REGION^I |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#411: FILE: fs/ext3/balloc.c:43:
+ * ^I|^I^I^I^I^I|Overflow^I^I |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: fs/ext3/balloc.c:44:
+ * ^I|Data blocks and^I^I^I|data^I^IIndirect |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: fs/ext3/balloc.c:45:
+ * ^I|overflow indirect blocks^I^I|blocks^I^Iblocks^I |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#414: FILE: fs/ext3/balloc.c:46:
+ * ^I|----------> ^I^I^I^I|------->^I<--------|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#415: FILE: fs/ext3/balloc.c:47:
+ * ^I|________________________________________________________________|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#417: FILE: fs/ext3/balloc.c:49:
+ * ^IEvery block group has at its end a semi-reserved region called the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: fs/ext3/balloc.c:50:
+ * ^Imetacluster mostly used for allocating indirect blocks. Under normal$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: fs/ext3/balloc.c:51:
+ * ^Icircumstances, the metacluster is used only for allocating indirect$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: fs/ext3/balloc.c:52:
+ * ^Iblocks which are allocated in decreasing order of block numbers.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#421: FILE: fs/ext3/balloc.c:53:
+ * ^IThe non-Metacluster region is used for data block allocation which are$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: fs/ext3/balloc.c:54:
+ * ^Iallocated in increasing order of block numbers. However, when the MC$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: fs/ext3/balloc.c:55:
+ * ^Iruns out of space, indirect blocks can be allocated in the non-MC$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: fs/ext3/balloc.c:56:
+ * ^Iregion along with the data blocks in the forward direction. Similarly,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: fs/ext3/balloc.c:57:
+ * ^Iwhen non-MC runs out of space, new data blocks are allocated in MC but$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#426: FILE: fs/ext3/balloc.c:58:
+ * ^Iin the forward direction.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: fs/ext3/balloc.c:147:
+	BUG_ON(!test_opt(sb, METACLUSTER));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#454: FILE: fs/ext3/balloc.c:154:
+		ext3_count_free(bitmap_bh, sbi->s_nonmc_blocks_per_group/8);
 		                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: fs/ext3/balloc.c:160:
+		ext3_error(sb, "ext3_init_grp_free_nonmc_blocks",
+			"Number of free nonmc blocks (%d) exceeds max (%lu)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: fs/ext3/balloc.c:174:
+ext3_update_nonmc_block_count(struct super_block *sb, unsigned long block_group,
+				ext3_grpblk_t start, unsigned long count,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: fs/ext3/balloc.c:181:
+	BUG_ON(bgi->bgi_free_nonmc_blocks_count < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: fs/ext3/balloc.c:182:
+	BUG_ON(start >= sbi->s_nonmc_blocks_per_group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: fs/ext3/balloc.c:185:
+	change = min_t(ext3_grpblk_t, start + count,
+			sbi->s_nonmc_blocks_per_group) - start;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: fs/ext3/balloc.c:190:
+		ext3_error(sb, "ext3_update_nonmc_block_count",
+			"Allocated more nonmc blocks (%d) than are free (%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: fs/ext3/balloc.c:197:
+		ext3_error(sb, "ext3_update_nonmc_block_count",
+			"Number of free nonmc blocks (%d) exceeds max (%lu)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: fs/ext3/balloc.c:212:
+static inline int fail_datablk_alloc_from_mc(struct ext3_sb_info *sbi,
+					struct ext3_bg_info *bgi,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: fs/ext3/balloc.c:219:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: fs/ext3/balloc.c:910:
+bitmap_search_prev_usable_block(ext3_grpblk_t start, struct buffer_head *bh,
+					ext3_grpblk_t lowest)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: fs/ext3/balloc.c:929:
+			start = bitmap_find_prev_zero_bit(jh->b_committed_data,
+								next, lowest);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#680: FILE: fs/ext3/balloc.c:1067:
 		&& ext3_test_allocatable(grp_goal, bitmap_bh)
+		&& (!metaclustering ||

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#682: FILE: fs/ext3/balloc.c:1069:
+		    !fail_datablk_alloc_from_mc(sbi, bgi, grp_goal))
+		&& claim_block(sb_bgl_lock(sbi, group), grp_goal, bitmap_bh)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: fs/ext3/balloc.c:1335:
+	if (first_free_block < 0 ||
+		(test_opt(sb, METACLUSTER)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#704: FILE: fs/ext3/balloc.c:1336:
+		(test_opt(sb, METACLUSTER)
+		 && fail_datablk_alloc_from_mc(EXT3_SB(sb),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: fs/ext3/balloc.c:1584:
+int ext3_alloc_indirect_blocks(struct super_block *sb,
+			struct buffer_head *bitmap_bh,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#791: FILE: fs/ext3/balloc.c:1595:
+	BUG_ON(!test_opt(sb, METACLUSTER));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: fs/ext3/balloc.c:1606:
+			blk = bitmap_search_prev_usable_block(blk, bitmap_bh,
+								mc_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: fs/ext3/balloc.c:1614:
+			blk = bitmap_search_prev_usable_block(blk, bitmap_bh,
+								mc_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: fs/ext3/balloc.c:1623:
+int check_allocated_blocks(ext3_fsblk_t blk, unsigned long num,
+				struct super_block *sb, int group_no,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: fs/ext3/balloc.c:1632:
+	if (in_range(le32_to_cpu(gdp->bg_block_bitmap), blk, num) ||
+		in_range(le32_to_cpu(gdp->bg_inode_bitmap), blk, num) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: fs/ext3/balloc.c:1634:
+		in_range(blk, le32_to_cpu(gdp->bg_inode_table),
+				EXT3_SB(sb)->s_itb_per_group) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: fs/ext3/balloc.c:1636:
+		in_range(blk + num - 1, le32_to_cpu(gdp->bg_inode_table),
+				EXT3_SB(sb)->s_itb_per_group))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: fs/ext3/balloc.c:1638:
+		ext3_error(sb, "ext3_new_blocks",
+				"Allocating block in system zone - "

WARNING:SPLIT_STRING: quoted string split across lines
#835: FILE: fs/ext3/balloc.c:1639:
+				"Allocating block in system zone - "
+				"blocks from "E3FSBLK", length %lu",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#835: FILE: fs/ext3/balloc.c:1639:
+				"blocks from "E3FSBLK", length %lu",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#856: FILE: fs/ext3/balloc.c:1660:
+			if (ext3_test_bit(grp_blk+i,
 			                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: fs/ext3/balloc.c:1661:
+			if (ext3_test_bit(grp_blk+i,
+					bh2jh(bitmap_bh)->b_committed_data))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#858: FILE: fs/ext3/balloc.c:1662:
+				printk(KERN_ERR "%s: block was unexpectedly set"

WARNING:SPLIT_STRING: quoted string split across lines
#859: FILE: fs/ext3/balloc.c:1663:
+				printk(KERN_ERR "%s: block was unexpectedly set"
+					" in b_committed_data\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#859: FILE: fs/ext3/balloc.c:1663:
+					" in b_committed_data\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: fs/ext3/balloc.c:1673:
+		ext3_error(sb, "ext3_new_blocks",
+				"block("E3FSBLK") >= blocks count(%d) - "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#869: FILE: fs/ext3/balloc.c:1673:
+				"block("E3FSBLK") >= blocks count(%d) - "

WARNING:SPLIT_STRING: quoted string split across lines
#870: FILE: fs/ext3/balloc.c:1674:
+				"block("E3FSBLK") >= blocks count(%d) - "
+				"block_group = %d, es == %p ", blk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: fs/ext3/balloc.c:1709:
+int ext3_new_blocks(handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, int indirect_blks, int blks,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#952: FILE: fs/ext3/balloc.c:1744:
+		printk(KERN_INFO "ext3_new_blocks: nonexistent device");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_new_blocks', this function's name, in a string
#952: FILE: fs/ext3/balloc.c:1744:
+		printk(KERN_INFO "ext3_new_blocks: nonexistent device");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1040: FILE: fs/ext3/balloc.c:1818:
+		if (group_no == goal_group) {
[...]
+		} else if (free_blocks <= windowsz/2)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'free_blocks < windowsz'
#1041: FILE: fs/ext3/balloc.c:1819:
+			if (my_rsv && (free_blocks < windowsz)
+				&& (rsv_is_empty(&my_rsv->rsv_window)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1042: FILE: fs/ext3/balloc.c:1820:
+			if (my_rsv && (free_blocks < windowsz)
+				&& (rsv_is_empty(&my_rsv->rsv_window)))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1046: FILE: fs/ext3/balloc.c:1824:
+		} else if (free_blocks <= windowsz/2)
 		                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1071: FILE: fs/ext3/balloc.c:1847:
+		if (test_opt(sb, METACLUSTER) &&
+			indirect_blks_done < indirect_blks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: fs/ext3/balloc.c:1849:
+			grp_mc_alloc = ext3_alloc_indirect_blocks(sb,
+					bitmap_bh, gdp, group_no,

WARNING:SPLIT_STRING: quoted string split across lines
#1101: FILE: fs/ext3/balloc.c:1875:
+		BUFFER_TRACE(bitmap_bh, "journal_dirty_metadata for "
+					"bitmap block");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1108: FILE: fs/ext3/balloc.c:1881:
+		ext3_debug("using block group %d(%d)\n",
+				group_no, gdp->bg_free_blocks_count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1117: FILE: fs/ext3/balloc.c:1890:
+			if (check_allocated_blocks(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1126: FILE: fs/ext3/balloc.c:1899:
+			if (check_allocated_blocks(ret_block, grp_alloc, sb,
+						group_no, gdp, bitmap_bh))

WARNING:SPLIT_STRING: quoted string split across lines
#1136: FILE: fs/ext3/balloc.c:1909:
+			ext3_debug("allocating block %lu. "
+					"Goal hits %d of %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: fs/ext3/balloc.c:1918:
+		percpu_counter_sub(&sbi->s_freeblocks_counter,
+				(grp_mc_alloc + grp_alloc));

WARNING:SPLIT_STRING: quoted string split across lines
#1148: FILE: fs/ext3/balloc.c:1921:
+		BUFFER_TRACE(gdp_bh, "journal_dirty_metadata for "
+				"group descriptor");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1165: FILE: fs/ext3/balloc.c:1938:
+		if (test_opt(sb, METACLUSTER) &&
+			grp_alloc_blk < sbi->s_nonmc_blocks_per_group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1167: FILE: fs/ext3/balloc.c:1940:
+			ext3_update_nonmc_block_count(sb, group_no,
+				grp_alloc_blk, grp_alloc, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: fs/ext3/balloc.c:1994:
+	DQUOT_FREE_BLOCK(inode,
+			indirect_blks + blks - indirect_blks_done - blks_done);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1374: FILE: fs/ext3/inode.c:42:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#1378: FILE: fs/ext3/inode.c:46:
+} Indirect;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1391: FILE: fs/ext3/inode.c:59:
+# define EXT3_IND_READ_MAX     ^I(32)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1562: FILE: fs/ext3/inode.c:573:
+	num = ext3_new_blocks(handle, inode, goal, indirect_blks,
 				*blks, new_blocks, &err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1605: FILE: fs/ext3/inode.c:841:
+		partial = ext3_get_branch(inode, depth, offsets, chain, 0,
+					&err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1650: FILE: fs/ext3/inode.c:3291:
+static unsigned long ext3_get_max_read(const struct inode *inode,
+					int block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1668: FILE: fs/ext3/inode.c:3309:
+		ext3_error(sb, "ext3_get_max_read",
+			"block(%d) should be < blocks_in_file(%lu)", block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1672: FILE: fs/ext3/inode.c:3313:
+	max_read = min(remaining_ind_blks_in_dind,
+			remaining_ind_blks_before_eof);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1676: FILE: fs/ext3/inode.c:3317:
+		ext3_error(sb, "ext3_get_max_read",
+			"max_read %lu should be >= 1", max_read);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1684: FILE: fs/ext3/inode.c:3325:
+static void ext3_end_ind_buffer_read(struct buffer_head *bh, int uptodate)
                                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1686: FILE: fs/ext3/inode.c:3327:
+	if (uptodate) {
 	    ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1687: FILE: fs/ext3/inode.c:3328:
+		BUG_ON(buffer_uptodate(bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1688: FILE: fs/ext3/inode.c:3329:
+		BUG_ON(ext3_buffer_prefetch(bh));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1703: FILE: fs/ext3/inode.c:3344:
+ *^I^I ^Iprefetch bit must be set.$

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#1706: FILE: fs/ext3/inode.c:3347:
+ * Issue submit_bh() requests to read upto count buffers identified in
                                       ^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1708: FILE: fs/ext3/inode.c:3349:
+ * - If a buffer is found to be uptodate and it's prefetch bit is set, we
                                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1715: FILE: fs/ext3/inode.c:3356:
+ * it's already uptodate.
                 ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1729: FILE: fs/ext3/inode.c:3370:
+	BUG_ON(count < 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1732: FILE: fs/ext3/inode.c:3373:
+	 * be imposed at the last moment. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1748: FILE: fs/ext3/inode.c:3389:
+		if (io_start_blk > 0 &&
+			(max(io_start_blk, curr) - min(io_start_blk, curr) >=

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1824: FILE: fs/ext3/inode.c:3465:
+	BUG_ON(count < 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1825: FILE: fs/ext3/inode.c:3466:
+	BUG_ON(!first_bh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1843: FILE: fs/ext3/inode.c:3484:
+	BUG_ON(ext3_buffer_prefetch(first_bh));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1855: FILE: fs/ext3/inode.c:3496:
+ * ^I^Ithe data block.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1877: FILE: fs/ext3/inode.c:3518:
+	BUG_ON(depth <= 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1878: FILE: fs/ext3/inode.c:3519:
+	BUG_ON(!chain[depth-2].key);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1878: FILE: fs/ext3/inode.c:3519:
+	BUG_ON(!chain[depth-2].key);
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1883: FILE: fs/ext3/inode.c:3524:
+	ind_blocks = chain[depth-2].p;
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1886: FILE: fs/ext3/inode.c:3527:
+		printk(KERN_ERR "Failed to get block %u for sb %p\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1891: FILE: fs/ext3/inode.c:3532:
+	BUG_ON(first_bh->b_size != sb->s_blocksize);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1911: FILE: fs/ext3/inode.c:3552:
+					     offsets[depth-2]);
 					                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1937: FILE: fs/ext3/inode.c:3578:
+					     offsets[depth-2]);
 					                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1939: FILE: fs/ext3/inode.c:3580:
+		if ((ind_blocks - (__le32 *)chain[depth-2].bh->b_data) >= 1) {
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1950: FILE: fs/ext3/inode.c:3591:
+				*err = ext3_read_indblocks_sync(sb, ind_blocks,
+							 max_read, first_bh, 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1971: FILE: fs/ext3/inode.c:3612:
+					ext3_read_indblocks_async(sb,
+							&ind_blocks[1],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2005: FILE: fs/ext3/inode.c:3646:
+	BUG_ON(!buffer_uptodate(first_bh));

CHECK:BRACES: braces {} should be used on all arms of this statement
#2014: FILE: fs/ext3/inode.c:3655:
+	if (*err) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2017: FILE: fs/ext3/inode.c:3658:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#2038: FILE: fs/ext3/super.c:764:
+	Opt_grpquota, Opt_metacluster

CHECK:CAMELCASE: Avoid CamelCase: <Opt_metacluster>
#2038: FILE: fs/ext3/super.c:764:
+	Opt_grpquota, Opt_metacluster

CHECK:BRACES: braces {} should be used on all arms of this statement
#2071: FILE: fs/ext3/super.c:1691:
+	if (test_opt(sb, METACLUSTER)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2075: FILE: fs/ext3/super.c:1695:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2085: FILE: fs/ext3/super.c:1807:
+	if (test_opt(sb, METACLUSTER)) {
[...]
+	} else
[...]

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2086: FILE: fs/ext3/super.c:1808:
+		sbi->s_bginfo = kmalloc(sbi->s_groups_count *
+					sizeof(*sbi->s_bginfo), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2089: FILE: fs/ext3/super.c:1811:
+			printk(KERN_ERR "EXT3-fs: not enough memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2089: FILE: fs/ext3/super.c:1811:
+		if (!sbi->s_bginfo) {
+			printk(KERN_ERR "EXT3-fs: not enough memory\n");

CHECK:BRACES: Unbalanced braces around else statement
#2094: FILE: fs/ext3/super.c:1816:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2219: FILE: include/linux/ext3_fs.h:800:
+extern int ext3_new_blocks(handle_t *handle, struct inode *inode,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2220: FILE: include/linux/ext3_fs.h:801:
+extern int ext3_new_blocks(handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, int indirect_blks, int blks,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333042.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 63 warnings, 66 checks, 1810 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333042.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
