WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#90: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: arch/blackfin/mach-bf561/atomic.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#96: FILE: arch/blackfin/mach-bf561/atomic.S:2:
+ * File:         arch/blackfin/mach-bf561/atomic.S

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#114: FILE: arch/blackfin/mach-bf561/atomic.S:20:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1057: FILE: arch/blackfin/mach-bf561/include/mach/blackfin.h:69:
+#define bfin_read_SICB_IMASK(x)		bfin_read32(SICB_IMASK0 + (x << 2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1058: FILE: arch/blackfin/mach-bf561/include/mach/blackfin.h:70:
+#define bfin_write_SICB_IMASK(x, val)	bfin_write32((SICB_IMASK0 + (x << 2)), val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1061: FILE: arch/blackfin/mach-bf561/include/mach/blackfin.h:73:
+#define bfin_read_SICB_ISR(x)		bfin_read32(SICB_ISR0 + (x << 2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1062: FILE: arch/blackfin/mach-bf561/include/mach/blackfin.h:74:
+#define bfin_write_SICB_ISR(x, val)	bfin_write32((SICB_ISR0 + (x << 2)), val)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preg' - possible side-effects?
#1144: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:144:
+#define GET_PDA_SAFE(preg)		\
+	preg.l = lo(DSPID);		\
+	preg.h = hi(DSPID);		\
+	preg = [preg];			\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	preg = preg << 2;		\
+	if cc jump 2f;			\
+	cc = preg == 0x0;		\
+	preg.l = _cpu_pda;		\
+	preg.h = _cpu_pda;		\
+	if !cc jump 3f;			\
+1:					\
+	/* preg = 0x0; */		\
+	cc = !cc; /* restore cc to 0 */	\
+	jump 4f;			\
+2:					\
+	cc = preg == 0x0;		\
+	preg.l = _cpu_pda;		\
+	preg.h = _cpu_pda;		\
+	if cc jump 4f;			\
+	/* preg = 0x1000000; */		\
+	cc = !cc; /* restore cc to 1 */	\
+3:					\
+	preg = [preg];			\
+4:

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1147: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:147:
+	preg = [preg];			\

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1165: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:165:
+1:					\
  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1169: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:169:
+2:					\
  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1176: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:176:
+3:					\
  ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1177: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:177:
+	preg = [preg];			\

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1178: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:178:
+4:
  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preg' - possible side-effects?
#1180: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:180:
+#define GET_PDA(preg, dreg)		\
+	preg.l = lo(DSPID);		\
+	preg.h = hi(DSPID);		\
+	dreg = [preg];			\
+	preg.l = _cpu_pda;		\
+	preg.h = _cpu_pda;		\
+	cc = bittst(dreg, 0);		\
+	if !cc jump 1f;			\
+	preg = [preg];			\
+1:					\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dreg' - possible side-effects?
#1180: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:180:
+#define GET_PDA(preg, dreg)		\
+	preg.l = lo(DSPID);		\
+	preg.h = hi(DSPID);		\
+	dreg = [preg];			\
+	preg.l = _cpu_pda;		\
+	preg.h = _cpu_pda;		\
+	cc = bittst(dreg, 0);		\
+	if !cc jump 1f;			\
+	preg = [preg];			\
+1:					\
+

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1183: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:183:
+	dreg = [preg];			\

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1188: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:188:
+	preg = [preg];			\

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1189: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:189:
+1:					\
  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preg' - possible side-effects?
#1191: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:191:
+#define GET_CPUID(preg, dreg)		\
+	preg.l = lo(DSPID);		\
+	preg.h = hi(DSPID);		\
+	dreg = [preg];			\
+	dreg = ROT dreg BY -1;		\
+	dreg = CC;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dreg' - possible side-effects?
#1191: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:191:
+#define GET_CPUID(preg, dreg)		\
+	preg.l = lo(DSPID);		\
+	preg.h = hi(DSPID);		\
+	dreg = [preg];			\
+	dreg = ROT dreg BY -1;		\
+	dreg = CC;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1191: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:191:
+#define GET_CPUID(preg, dreg)		\
+	preg.l = lo(DSPID);		\
+	preg.h = hi(DSPID);		\
+	dreg = [preg];			\
+	dreg = ROT dreg BY -1;		\
+	dreg = CC;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1194: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:194:
+	dreg = [preg];			\

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1195: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:195:
+	dreg = ROT dreg BY -1;		\
 	                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preg' - possible side-effects?
#1199: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:199:
+#define GET_PDA_SAFE(preg)		\
+	preg.l = _cpu_pda;		\
+	preg.h = _cpu_pda;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1199: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:199:
+#define GET_PDA_SAFE(preg)		\
+	preg.l = _cpu_pda;		\
+	preg.h = _cpu_pda;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1215: FILE: arch/blackfin/mach-bf561/include/mach/smp.h:1:
+#ifndef _MACH_BF561_SMP

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1243: FILE: arch/blackfin/mach-bf561/secondary.S:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1244: FILE: arch/blackfin/mach-bf561/secondary.S:2:
+ * File:         arch/blackfin/mach-bf561/secondary.S

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1265: FILE: arch/blackfin/mach-bf561/secondary.S:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1464: FILE: arch/blackfin/mach-bf561/smp.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1465: FILE: arch/blackfin/mach-bf561/smp.c:2:
+ * File:         arch/blackfin/mach-bf561/smp.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1483: FILE: arch/blackfin/mach-bf561/smp.c:20:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#1490: FILE: arch/blackfin/mach-bf561/smp.c:27:
+#include <asm/smp.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1496: FILE: arch/blackfin/mach-bf561/smp.c:33:
+extern char coreb_trampoline_start, coreb_trampoline_end;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1523: FILE: arch/blackfin/mach-bf561/smp.c:60:
+		printk(KERN_ERR "Bootstrap code size (%d) > CoreB SRAM (%d).\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1534: FILE: arch/blackfin/mach-bf561/smp.c:71:
+	printk(KERN_INFO "CoreB bootstrap code to SRAM %p via DMA.\n", (void *)COREB_SRAM_BASE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1583: FILE: arch/blackfin/mach-bf561/smp.c:120:
+	printk(KERN_INFO "Booting Core B.\n");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1596: FILE: arch/blackfin/mach-bf561/smp.c:133:
+		udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1602: FILE: arch/blackfin/mach-bf561/smp.c:139:
+	return cpu_isset(cpu, cpu_callin_map) ? 0 : -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1630: FILE: arch/blackfin/mach-bf561/smp.c:167:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202639.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 15 warnings, 14 checks, 1541 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202639.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
