WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#44: FILE: drivers/dma/Kconfig:144:
+config STE_DMA40
+	bool "ST-Ericsson DMA40 support"
+	depends on ARCH_U8500
+	select DMA_ENGINE
+	help
+	  Support for ST-Ericsson DMA40 controller
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#64: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: drivers/dma/ste_dma40.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#94: FILE: drivers/dma/ste_dma40.c:26:
+#define D40_CHAN_POS(chan)  (2 * (chan / 2))

CHECK:BIT_MACRO: Prefer using the BIT macro
#100: FILE: drivers/dma/ste_dma40.c:32:
+#define D40_ALLOC_FREE		(1 << 31)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#101: FILE: drivers/dma/ste_dma40.c:33:
+#define D40_ALLOC_PHY		(1 << 30)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#105: FILE: drivers/dma/ste_dma40.c:37:
+ * to kfree() them */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#195: FILE: drivers/dma/ste_dma40.c:127:
+	spinlock_t	 lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#215: FILE: drivers/dma/ste_dma40.c:147:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#253: FILE: drivers/dma/ste_dma40.c:185:
+	spinlock_t			 lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#312: FILE: drivers/dma/ste_dma40.c:244:
+	spinlock_t			 interrupt_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#313: FILE: drivers/dma/ste_dma40.c:245:
+	spinlock_t			 execmd_lock;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d40d->lli_pool.base"
#386: FILE: drivers/dma/ste_dma40.c:318:
+		if (d40d->lli_pool.base == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#391: FILE: drivers/dma/ste_dma40.c:323:
+		d40d->lli_log.src = PTR_ALIGN((struct d40_log_lli *) base,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*desc)...) over kzalloc(sizeof(struct d40_desc)...)
#463: FILE: drivers/dma/ste_dma40.c:395:
+		desc = kzalloc(sizeof(struct d40_desc), GFP_NOWAIT);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#464: FILE: drivers/dma/ste_dma40.c:396:
+		if (desc == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#481: FILE: drivers/dma/ste_dma40.c:413:
+	if (d40c->free_len < D40_DESC_CACHE_SIZE) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#484: FILE: drivers/dma/ste_dma40.c:416:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#570: FILE: drivers/dma/ste_dma40.c:502:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#620: FILE: drivers/dma/ste_dma40.c:552:
+	if (command == D40_DMA_SUSPEND_REQ) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#647: FILE: drivers/dma/ste_dma40.c:579:
+
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'd40c->dma_cfg.dir ==  STEDMA40_PERIPH_TO_MEM'
#706: FILE: drivers/dma/ste_dma40.c:638:
+	if ((d40c->dma_cfg.dir ==  STEDMA40_PERIPH_TO_MEM) ||
+	    (d40c->dma_cfg.dir == STEDMA40_PERIPH_TO_PERIPH)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'd40c->dma_cfg.dir == STEDMA40_PERIPH_TO_PERIPH'
#706: FILE: drivers/dma/ste_dma40.c:638:
+	if ((d40c->dma_cfg.dir ==  STEDMA40_PERIPH_TO_MEM) ||
+	    (d40c->dma_cfg.dir == STEDMA40_PERIPH_TO_PERIPH)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'd40c->dma_cfg.dir ==  STEDMA40_PERIPH_TO_MEM'
#734: FILE: drivers/dma/ste_dma40.c:666:
+	if ((d40c->dma_cfg.dir ==  STEDMA40_PERIPH_TO_MEM) ||
+	    (d40c->dma_cfg.dir == STEDMA40_PERIPH_TO_PERIPH))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'd40c->dma_cfg.dir == STEDMA40_PERIPH_TO_PERIPH'
#734: FILE: drivers/dma/ste_dma40.c:666:
+	if ((d40c->dma_cfg.dir ==  STEDMA40_PERIPH_TO_MEM) ||
+	    (d40c->dma_cfg.dir == STEDMA40_PERIPH_TO_PERIPH))

CHECK:SPACING: No space is necessary after a cast
#744: FILE: drivers/dma/ste_dma40.c:676:
+	return (bool) val;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#802: FILE: drivers/dma/ste_dma40.c:734:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "d40d"
#872: FILE: drivers/dma/ste_dma40.c:804:
+	if (d40d != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d40d"
#905: FILE: drivers/dma/ste_dma40.c:837:
+	if (d40d == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#909: FILE: drivers/dma/ste_dma40.c:841:
+	if (d40d->lli_tcount < d40d->lli_len) {
+

CHECK:SPACING: No space is necessary after a cast
#912: FILE: drivers/dma/ste_dma40.c:844:
+		(void) d40_start(d40c);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d40_queue_start"
#916: FILE: drivers/dma/ste_dma40.c:848:
+	if (d40_queue_start(d40c) == NULL)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#922: FILE: drivers/dma/ste_dma40.c:854:
+
+}

CHECK:SPACING: No space is necessary after a cast
#926: FILE: drivers/dma/ste_dma40.c:858:
+	struct d40_chan *d40c = (struct d40_chan *) data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d40d_fin"
#937: FILE: drivers/dma/ste_dma40.c:869:
+	if (d40d_fin == NULL)

WARNING:TYPO_SPELLING: 'manouver' may be misspelled - perhaps 'maneuver'?
#982: FILE: drivers/dma/ste_dma40.c:914:
+	/* Rescue manouver if receiving double interrupts */
 	          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1020: FILE: drivers/dma/ste_dma40.c:952:
+	for (;;) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1056: FILE: drivers/dma/ste_dma40.c:988:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src_event_group != dst_event_group'
#1087: FILE: drivers/dma/ste_dma40.c:1019:
+	if (conf->dir == STEDMA40_PERIPH_TO_PERIPH &&
+	    (src_event_group != dst_event_group)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1112: FILE: drivers/dma/ste_dma40.c:1044:
+	unsigned long flags;
+	spin_lock_irqsave(&phy->lock, flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1115: FILE: drivers/dma/ste_dma40.c:1047:
+		if (phy->allocated_src == D40_ALLOC_FREE &&
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1120: FILE: drivers/dma/ste_dma40.c:1052:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1132: FILE: drivers/dma/ste_dma40.c:1064:
+		if (!(phy->allocated_src & (1 << log_event_line))) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1135: FILE: drivers/dma/ste_dma40.c:1067:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1144: FILE: drivers/dma/ste_dma40.c:1076:
+		if (!(phy->allocated_dst & (1 << log_event_line))) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1147: FILE: drivers/dma/ste_dma40.c:1079:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1160: FILE: drivers/dma/ste_dma40.c:1092:
+static bool d40_alloc_mask_free(struct d40_phy_res *phy, bool is_src,
+			       int log_event_line)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1207: FILE: drivers/dma/ste_dma40.c:1139:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1210: FILE: drivers/dma/ste_dma40.c:1142:
+	if (d40c->dma_cfg.dir == STEDMA40_PERIPH_TO_MEM) {
[...]
+	} else if (d40c->dma_cfg.dir == STEDMA40_MEM_TO_PERIPH ||
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1220: FILE: drivers/dma/ste_dma40.c:1152:
+	} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1230: FILE: drivers/dma/ste_dma40.c:1162:
+			for (i = 0; i < d40c->base->num_phy_chans; i++) {
+

CHECK:BRACES: Unbalanced braces around else statement
#1234: FILE: drivers/dma/ste_dma40.c:1166:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1237: FILE: drivers/dma/ste_dma40.c:1169:
+				int phy_num = j  + event_group * 2;
+				for (i = phy_num; i < phy_num + 2; i++) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1288: FILE: drivers/dma/ste_dma40.c:1220:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1293: FILE: drivers/dma/ste_dma40.c:1225:
+{
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'd40c->base->plat_data->memcpy[d40c->chan.chan_id]'
#1322: FILE: drivers/dma/ste_dma40.c:1254:
+		d40c->dma_cfg.dst_dev_type = d40c->base->plat_data->
+			memcpy[d40c->chan.chan_id];

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1336: FILE: drivers/dma/ste_dma40.c:1268:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1339: FILE: drivers/dma/ste_dma40.c:1271:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!phy"
#1348: FILE: drivers/dma/ste_dma40.c:1280:
+	if (phy == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1361: FILE: drivers/dma/ste_dma40.c:1293:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1384: FILE: drivers/dma/ste_dma40.c:1316:
+	if (d40c->log_num != D40_PHY_CHAN) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1414: FILE: drivers/dma/ste_dma40.c:1346:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1431: FILE: drivers/dma/ste_dma40.c:1363:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1432: FILE: drivers/dma/ste_dma40.c:1364:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1500: FILE: drivers/dma/ste_dma40.c:1432:
+	if (d40c->log_num != D40_PHY_CHAN) {
[...]
+	} else if (d40_residue(d40c) || d40_tx_is_linked(d40c))
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1552: FILE: drivers/dma/ste_dma40.c:1484:
+	if (src_psize == STEDMA40_PSIZE_PHY_1)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1554: FILE: drivers/dma/ste_dma40.c:1486:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1561: FILE: drivers/dma/ste_dma40.c:1493:
+	if (dst_psize == STEDMA40_PSIZE_PHY_1)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1563: FILE: drivers/dma/ste_dma40.c:1495:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1588: FILE: drivers/dma/ste_dma40.c:1520:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d40d"
#1592: FILE: drivers/dma/ste_dma40.c:1524:
+	if (d40d == NULL)

CHECK:SPACING: No space is necessary after a cast
#1617: FILE: drivers/dma/ste_dma40.c:1549:
+		(void) d40_log_sg_to_lli(d40c->lcla.src_id,

CHECK:SPACING: No space is necessary after a cast
#1626: FILE: drivers/dma/ste_dma40.c:1558:
+		(void) d40_log_sg_to_lli(d40c->lcla.dst_id,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1635: FILE: drivers/dma/ste_dma40.c:1567:
+
+

CHECK:SPACING: No space is necessary after a cast
#1669: FILE: drivers/dma/ste_dma40.c:1601:
+		(void) dma_map_single(d40c->base->dev, d40d->lli_phy.src,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1693: FILE: drivers/dma/ste_dma40.c:1625:
+	if (data) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1697: FILE: drivers/dma/ste_dma40.c:1629:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1714: FILE: drivers/dma/ste_dma40.c:1646:
+	d40c->completed = chan->cookie = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#1745: FILE: drivers/dma/ste_dma40.c:1677:
+	(void) d40_free_dma(d40c);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d40d"
#1785: FILE: drivers/dma/ste_dma40.c:1717:
+	if (d40d == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1800: FILE: drivers/dma/ste_dma40.c:1732:
+	if (d40c->log_num != D40_PHY_CHAN) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1825: FILE: drivers/dma/ste_dma40.c:1757:
+	} else {
+

CHECK:SPACING: No space is necessary after a cast
#1857: FILE: drivers/dma/ste_dma40.c:1789:
+		(void) dma_map_single(d40c->base->dev, d40d->lli_phy.src,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1902: FILE: drivers/dma/ste_dma40.c:1834:
+	if (direction == DMA_FROM_DEVICE) {
[...]
+	} else if (direction == DMA_TO_DEVICE) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1926: FILE: drivers/dma/ste_dma40.c:1858:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1954: FILE: drivers/dma/ste_dma40.c:1886:
+	if (direction == DMA_FROM_DEVICE) {
[...]
+	} else if (direction == DMA_TO_DEVICE) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1960: FILE: drivers/dma/ste_dma40.c:1892:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1987: FILE: drivers/dma/ste_dma40.c:1919:
+	(void) dma_map_single(d40c->base->dev, d40d->lli_phy.src,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d40d"
#2013: FILE: drivers/dma/ste_dma40.c:1945:
+	if (d40d == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2056: FILE: drivers/dma/ste_dma40.c:1988:
+
+

CHECK:SPACING: No space is necessary after a cast
#2074: FILE: drivers/dma/ste_dma40.c:2006:
+		(void) d40_queue_start(d40c);

CHECK:SPACING: No space is necessary after a cast
#2123: FILE: drivers/dma/ste_dma40.c:2055:
+			     (unsigned long) d40c);

WARNING:SPACING: space prohibited before semicolon
#2133: FILE: drivers/dma/ste_dma40.c:2065:
+	int err ;

WARNING:TYPO_SPELLING: 'regsiter' may be misspelled - perhaps 'register'?
#2183: FILE: drivers/dma/ste_dma40.c:2115:
+			"[%s] Failed to regsiter memcpy only channels\n",
 			                ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2254: FILE: drivers/dma/ste_dma40.c:2186:
+	for (i = 0; i < base->num_phy_chans; i++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#2363: FILE: drivers/dma/ste_dma40.c:2295:
+	if (base == NULL) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2379: FILE: drivers/dma/ste_dma40.c:2311:
+	base->phy_res = kzalloc(num_phy_chans * sizeof(struct d40_phy_res),
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2384: FILE: drivers/dma/ste_dma40.c:2316:
+	base->lookup_phy_chans = kzalloc(num_phy_chans *
+					 sizeof(struct d40_chan *),
+					 GFP_KERNEL);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2434: FILE: drivers/dma/ste_dma40.c:2366:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2465: FILE: drivers/dma/ste_dma40.c:2397:
+	for (i = 0; i < base->num_phy_chans; i++) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2484: FILE: drivers/dma/ste_dma40.c:2416:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2497: FILE: drivers/dma/ste_dma40.c:2429:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#2543: FILE: drivers/dma/ste_dma40.c:2475:
+	if (res->start != val && val != 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2547: FILE: drivers/dma/ste_dma40.c:2479:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2580: FILE: drivers/dma/ste_dma40.c:2512:
+	if (res->start != val && val != 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2584: FILE: drivers/dma/ste_dma40.c:2516:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2663: FILE: drivers/dma/ste_dma40_ll.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2718: FILE: drivers/dma/ste_dma40_ll.c:56:
+
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->dir ==  STEDMA40_PERIPH_TO_MEM'
#2729: FILE: drivers/dma/ste_dma40_ll.c:67:
+		if ((cfg->dir ==  STEDMA40_PERIPH_TO_MEM) ||
+		    (cfg->dir == STEDMA40_PERIPH_TO_PERIPH)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->dir == STEDMA40_PERIPH_TO_PERIPH'
#2729: FILE: drivers/dma/ste_dma40_ll.c:67:
+		if ((cfg->dir ==  STEDMA40_PERIPH_TO_MEM) ||
+		    (cfg->dir == STEDMA40_PERIPH_TO_PERIPH)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->dir ==  STEDMA40_MEM_TO_PERIPH'
#2740: FILE: drivers/dma/ste_dma40_ll.c:78:
+		if ((cfg->dir ==  STEDMA40_MEM_TO_PERIPH) ||
+		    (cfg->dir == STEDMA40_PERIPH_TO_PERIPH)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->dir == STEDMA40_PERIPH_TO_PERIPH'
#2740: FILE: drivers/dma/ste_dma40_ll.c:78:
+		if ((cfg->dir ==  STEDMA40_MEM_TO_PERIPH) ||
+		    (cfg->dir == STEDMA40_PERIPH_TO_PERIPH)) {

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#2783: FILE: drivers/dma/ste_dma40_ll.c:121:
+	src |= cfg->src_info.endianess << D40_SREG_CFG_LBE_POS;
 	                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#2784: FILE: drivers/dma/ste_dma40_ll.c:122:
+	dst |= cfg->dst_info.endianess << D40_SREG_CFG_LBE_POS;
 	                     ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2873: FILE: drivers/dma/ste_dma40_ll.c:211:
+	for_each_sg(sg, current_sg, sg_len, i) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2907: FILE: drivers/dma/ste_dma40_ll.c:245:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2913: FILE: drivers/dma/ste_dma40_ll.c:251:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2932: FILE: drivers/dma/ste_dma40_ll.c:270:
+
+}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2993: FILE: drivers/dma/ste_dma40_ll.c:331:
+		if (sg_len - 1 == i || ((i+1) % max_len == 0)) {
 		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3067: FILE: drivers/dma/ste_dma40_ll.c:405:
+		if (sg_len - 1 == i || ((i+1) % max_len == 0))
 		                          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3067: FILE: drivers/dma/ste_dma40_ll.c:405:
+		if (sg_len - 1 == i || ((i+1) % max_len == 0))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3069: FILE: drivers/dma/ste_dma40_ll.c:407:
+		else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3108: FILE: drivers/dma/ste_dma40_ll.c:446:
+		writel(lli_src[i+1].lcsp02, &lcla_src[i].lcsp02);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3109: FILE: drivers/dma/ste_dma40_ll.c:447:
+		writel(lli_src[i+1].lcsp13, &lcla_src[i].lcsp13);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3110: FILE: drivers/dma/ste_dma40_ll.c:448:
+		writel(lli_dst[i+1].lcsp02, &lcla_dst[i].lcsp02);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3111: FILE: drivers/dma/ste_dma40_ll.c:449:
+		writel(lli_dst[i+1].lcsp13, &lcla_dst[i].lcsp13);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3113: FILE: drivers/dma/ste_dma40_ll.c:451:
+		slos = lli_src[i+1].lcsp13 & D40_MEM_LCSP1_SLOS_MASK;
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3114: FILE: drivers/dma/ste_dma40_ll.c:452:
+		dlos = lli_dst[i+1].lcsp13 & D40_MEM_LCSP3_DLOS_MASK;
 		                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3123: FILE: drivers/dma/ste_dma40_ll.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3156: FILE: drivers/dma/ste_dma40_ll.h:34:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#3186: FILE: drivers/dma/ste_dma40_ll.h:64:
+#define D40_EVENTLINE_POS(i)		(2 * i)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3234: FILE: drivers/dma/ste_dma40_ll.h:112:
+
+

WARNING:TYPO_SPELLING: 'configration' may be misspelled - perhaps 'configuration'?
#3294: FILE: drivers/dma/ste_dma40_ll.h:172:
+ * struct d40_phy_lli - The basic configration register for each physical
                                   ^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3334: FILE: drivers/dma/ste_dma40_ll.h:212:
+
+

WARNING:TYPO_SPELLING: 'directy' may be misspelled - perhaps 'directly'?
#3341: FILE: drivers/dma/ste_dma40_ll.h:219:
+ * This struct must be 8 bytes aligned since it will be accessed directy by
                                                                  ^^^^^^^

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#3398: FILE: drivers/dma/ste_dma40_ll.h:276:
+ * @src: LCPA formated src parameters
               ^^^^^^^^

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#3399: FILE: drivers/dma/ste_dma40_ll.h:277:
+ * @dst: LCPA formated dst parameters
               ^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 117 checks, 3413 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
