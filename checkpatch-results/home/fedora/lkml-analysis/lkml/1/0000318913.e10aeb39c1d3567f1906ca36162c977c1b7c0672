ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#98: FILE: crypto/async_tx/async_tx.c:23:
  * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#616: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#621: FILE: include/linux/rculist.h:1:
+#ifndef _LINUX_RCULIST_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: include/linux/rculist.h:18:
+static inline void __list_add_rcu(struct list_head *new,
+		struct list_head *prev, struct list_head *next)

WARNING:MEMORY_BARRIER: memory barrier without comment
#642: FILE: include/linux/rculist.h:22:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: include/linux/rculist.h:65:
+static inline void list_add_tail_rcu(struct list_head *new,
+					struct list_head *head)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: include/linux/rculist.h:109:
+static inline void list_replace_rcu(struct list_head *old,
+				struct list_head *new)

WARNING:MEMORY_BARRIER: memory barrier without comment
#733: FILE: include/linux/rculist.h:113:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#789: FILE: include/linux/rculist.h:169:
+	smp_wmb();

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#804: FILE: include/linux/rculist.h:184:
+#define list_for_each_rcu(pos, head) \
+	for (pos = (head)->next; \
+		prefetch(rcu_dereference(pos)->next), pos != (head); \
+		pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#804: FILE: include/linux/rculist.h:184:
+#define list_for_each_rcu(pos, head) \
+	for (pos = (head)->next; \
+		prefetch(rcu_dereference(pos)->next), pos != (head); \
+		pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#809: FILE: include/linux/rculist.h:189:
+#define __list_for_each_rcu(pos, head) \
+	for (pos = (head)->next; \
+		rcu_dereference(pos) != (head); \
+		pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#809: FILE: include/linux/rculist.h:189:
+#define __list_for_each_rcu(pos, head) \
+	for (pos = (head)->next; \
+		rcu_dereference(pos) != (head); \
+		pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#826: FILE: include/linux/rculist.h:206:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next; \
+		n = rcu_dereference(pos)->next, pos != (head); \
+		pos = n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#826: FILE: include/linux/rculist.h:206:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next; \
+		n = rcu_dereference(pos)->next, pos != (head); \
+		pos = n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#826: FILE: include/linux/rculist.h:206:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next; \
+		n = rcu_dereference(pos)->next, pos != (head); \
+		pos = n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#841: FILE: include/linux/rculist.h:221:
+#define list_for_each_entry_rcu(pos, head, member) \
+	for (pos = list_entry((head)->next, typeof(*pos), member); \
+		prefetch(rcu_dereference(pos)->member.next), \
+			&pos->member != (head); \
+		pos = list_entry(pos->member.next, typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#841: FILE: include/linux/rculist.h:221:
+#define list_for_each_entry_rcu(pos, head, member) \
+	for (pos = list_entry((head)->next, typeof(*pos), member); \
+		prefetch(rcu_dereference(pos)->member.next), \
+			&pos->member != (head); \
+		pos = list_entry(pos->member.next, typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#841: FILE: include/linux/rculist.h:221:
+#define list_for_each_entry_rcu(pos, head, member) \
+	for (pos = list_entry((head)->next, typeof(*pos), member); \
+		prefetch(rcu_dereference(pos)->member.next), \
+			&pos->member != (head); \
+		pos = list_entry(pos->member.next, typeof(*pos), member))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#847: FILE: include/linux/rculist.h:227:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#859: FILE: include/linux/rculist.h:239:
+#define list_for_each_continue_rcu(pos, head) \
+	for ((pos) = (pos)->next; \
+		prefetch(rcu_dereference((pos))->next), (pos) != (head); \
+		(pos) = (pos)->next)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: include/linux/rculist.h:277:
+static inline void hlist_replace_rcu(struct hlist_node *old,
+					struct hlist_node *new)

WARNING:MEMORY_BARRIER: memory barrier without comment
#903: FILE: include/linux/rculist.h:283:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: include/linux/rculist.h:310:
+static inline void hlist_add_head_rcu(struct hlist_node *n,
+					struct hlist_head *h)

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: include/linux/rculist.h:313:
+	struct hlist_node *first = h->first;
+	n->next = first;

WARNING:MEMORY_BARRIER: memory barrier without comment
#935: FILE: include/linux/rculist.h:315:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#964: FILE: include/linux/rculist.h:344:
+	smp_wmb();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->pprev
#966: FILE: include/linux/rculist.h:346:
+	*(n->pprev) = n;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:MEMORY_BARRIER: memory barrier without comment
#992: FILE: include/linux/rculist.h:372:
+	smp_wmb();

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tpos' - possible side-effects?
#1009: FILE: include/linux/rculist.h:389:
+#define hlist_for_each_entry_rcu(tpos, pos, head, member)		 \
+	for (pos = (head)->first;					 \
+	     rcu_dereference(pos) && ({ prefetch(pos->next); 1; }) &&	 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); \
+	     pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1009: FILE: include/linux/rculist.h:389:
+#define hlist_for_each_entry_rcu(tpos, pos, head, member)		 \
+	for (pos = (head)->first;					 \
+	     rcu_dereference(pos) && ({ prefetch(pos->next); 1; }) &&	 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); \
+	     pos = pos->next)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000318913.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 20 checks, 937 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000318913.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
