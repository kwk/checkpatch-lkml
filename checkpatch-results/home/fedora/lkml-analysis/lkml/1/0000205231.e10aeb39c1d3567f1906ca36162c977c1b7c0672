WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
    And Swap is shared resource but it cannot be reclaimed (goes back to memory)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: mm/memcontrol.c:203:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: mm/memcontrol.c:591:
+		if (!do_swap_account &&
+			res_counter_check_under_limit(&mem->res))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: mm/memcontrol.c:594:
+		if (do_swap_account &&
+			res_counter_check_under_limit(&mem->memsw))

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: mm/memcontrol.c:957:
+		struct mem_cgroup *memcg;
+		memcg = swap_cgroup_record(ent, NULL);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#349: FILE: mm/memcontrol.c:964:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctype != MEM_CGROUP_CHARGE_TYPE_SWAPOUT'
#404: FILE: mm/memcontrol.c:1028:
+	if (do_swap_account && (ctype != MEM_CGROUP_CHARGE_TYPE_SWAPOUT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: mm/memcontrol.c:1074:
+	memcg = __mem_cgroup_uncharge_common(page,
+					MEM_CGROUP_CHARGE_TYPE_SWAPOUT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: mm/memcontrol.c:1249:
+int mem_cgroup_resize_memsw_limit(struct mem_cgroup *memcg,
+				unsigned long long val)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: mm/memcontrol.c:1446:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: mm/memcontrol.c:1897:
+	ret = cgroup_add_files(cont, ss, mem_cgroup_files,
+				ARRAY_SIZE(mem_cgroup_files));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: mm/swapfile.c:542:
+	if (mem_cgroup_try_charge_swapin(vma->vm_mm, page,
+					GFP_HIGHUSER_MOVABLE, &ptr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#895: FILE: include/linux/swap.h:341:
+extern void mem_cgroup_uncharge_swapcache(struct page *page, swp_entry_t ent);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#904: FILE: include/linux/swap.h:349:
 }
+static inline void

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#910: FILE: include/linux/swap.h:355:
+extern void mem_cgroup_uncharge_swap(swp_entry_t ent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#924: FILE: include/linux/memcontrol.h:35:
+extern int mem_cgroup_try_charge_swapin(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: include/linux/memcontrol.h:36:
+extern int mem_cgroup_try_charge_swapin(struct mm_struct *mm,
+		struct page *page, gfp_t mask, struct mem_cgroup **ptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#948: FILE: include/linux/memcontrol.h:107:
+static inline int mem_cgroup_try_charge_swapin(struct mm_struct *mm,
+		struct page *page, gfp_t gfp_mask, struct mem_cgroup **ptr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: mm/memory.c:2328:
+	if (mem_cgroup_try_charge_swapin(mm, page,
+				GFP_HIGHUSER_MOVABLE, &ptr) == -ENOMEM) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205231.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 16 checks, 826 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205231.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
