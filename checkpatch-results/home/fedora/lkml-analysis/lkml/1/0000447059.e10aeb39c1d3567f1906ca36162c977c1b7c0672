WARNING:REPEATED_WORD: Possible repeated word: 'for'
#30: 
This patch adds a generic mailbox interface for for DSP and IVA

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: arch/arm/mach-omap1/mailbox.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#65: FILE: arch/arm/mach-omap1/mailbox.c:18:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:CAMELCASE: Avoid CamelCase: <MAILBOX_ARM2DSP1_Flag>
#73: FILE: arch/arm/mach-omap1/mailbox.c:26:
+#define MAILBOX_ARM2DSP1_Flag		0x18

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <MAILBOX_DSP2ARM1_Flag>
#74: FILE: arch/arm/mach-omap1/mailbox.c:27:
+#define MAILBOX_DSP2ARM1_Flag		0x1c

CHECK:CAMELCASE: Avoid CamelCase: <MAILBOX_DSP2ARM2_Flag>
#75: FILE: arch/arm/mach-omap1/mailbox.c:28:
+#define MAILBOX_DSP2ARM2_Flag		0x20

CHECK:SPACING: No space is necessary after a cast
#108: FILE: arch/arm/mach-omap1/mailbox.c:61:
+	msg |= ((mbox_msg_t) mbox_read_reg(fifo->cmd)) << 16;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#133: FILE: arch/arm/mach-omap1/mailbox.c:86:
+	return (mbox_read_reg(fifo->flag));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#257: FILE: arch/arm/mach-omap2/mailbox.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#275: FILE: arch/arm/mach-omap2/mailbox.c:19:
+#include <asm/io.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#346: FILE: arch/arm/mach-omap2/mailbox.c:90:
+		printk("Could not get mailboxes_ick\n");

CHECK:SPACING: No space is necessary after a cast
#369: FILE: arch/arm/mach-omap2/mailbox.c:113:
+	return (mbox_msg_t) mbox_read_reg(fifo->msg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#369: FILE: arch/arm/mach-omap2/mailbox.c:113:
+	struct omap_mbox2_fifo *fifo = &((struct omap_mbox2_priv *)mbox->priv)->rx_fifo;
+	return (mbox_msg_t) mbox_read_reg(fifo->msg);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: arch/arm/mach-omap2/mailbox.c:119:
+	struct omap_mbox2_fifo *fifo = &((struct omap_mbox2_priv *)mbox->priv)->tx_fifo;
+	mbox_write_reg(msg, fifo->msg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#381: FILE: arch/arm/mach-omap2/mailbox.c:125:
+	struct omap_mbox2_fifo *fifo = &((struct omap_mbox2_priv *)mbox->priv)->rx_fifo;
+	return (mbox_read_reg(fifo->msg_stat) == 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#387: FILE: arch/arm/mach-omap2/mailbox.c:131:
+	struct omap_mbox2_fifo *fifo = &((struct omap_mbox2_priv *)mbox->priv)->tx_fifo;
+	return (mbox_read_reg(fifo->fifo_stat));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#387: FILE: arch/arm/mach-omap2/mailbox.c:131:
+	return (mbox_read_reg(fifo->fifo_stat));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#570: FILE: arch/arm/plat-omap/mailbox.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#588: FILE: arch/arm/plat-omap/mailbox.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#589: FILE: arch/arm/plat-omap/mailbox.c:20:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#601: FILE: arch/arm/plat-omap/mailbox.c:32:
+#include <asm/io.h>

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#642: FILE: arch/arm/plat-omap/mailbox.c:73:
+int omap_mbox_msg_send(struct omap_mbox *mbox, mbox_msg_t msg, void* arg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#649: FILE: arch/arm/plat-omap/mailbox.c:80:
+		if (mbox->ops->type == OMAP_MBOX_TYPE2) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#653: FILE: arch/arm/plat-omap/mailbox.c:84:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#660: FILE: arch/arm/plat-omap/mailbox.c:91:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#695: FILE: arch/arm/plat-omap/mailbox.c:126:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#697: FILE: arch/arm/plat-omap/mailbox.c:128:
+			       "mbox: illegal seq bit! ignoring this command. "
+			       "(%08x)\n", msg);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'seeem' may be misspelled - perhaps 'seem'?
#717: FILE: arch/arm/plat-omap/mailbox.c:148:
+		 * NOTE: this doesn't seeem to work as explained in the manual.
 		                      ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: arch/arm/plat-omap/mailbox.c:181:
+static ssize_t mbox_attr_write(struct class_device *dev, const char *buf,
+			      size_t count)

CHECK:SPACING: No space is necessary after a cast
#756: FILE: arch/arm/plat-omap/mailbox.c:187:
+	msg = (mbox_msg_t) simple_strtoul(buf, NULL, 16);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#756: FILE: arch/arm/plat-omap/mailbox.c:187:
+	msg = (mbox_msg_t) simple_strtoul(buf, NULL, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#772: FILE: arch/arm/plat-omap/mailbox.c:203:
+static CLASS_DEVICE_ATTR(mbox, S_IALLUGO, mbox_attr_read, mbox_attr_write);

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#779: FILE: arch/arm/plat-omap/mailbox.c:210:
+static CLASS_ATTR(mbox, S_IRUGO, mbox_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#796: FILE: arch/arm/plat-omap/mailbox.c:227:
+	strlcpy(mbox->class_dev.class_id, mbox->name, KOBJ_NAME_LEN);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#805: FILE: arch/arm/plat-omap/mailbox.c:236:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#821: FILE: arch/arm/plat-omap/mailbox.c:252:
+		printk(KERN_ERR

WARNING:LINE_SPACING: Missing a blank line after declarations
#906: FILE: arch/arm/plat-omap/mailbox.c:337:
+	int ret = class_register(&omap_mbox_class);
+	if (!ret)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#925: FILE: arch/arm/plat-omap/mailbox.h:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m)...) over kmalloc(sizeof(struct omap_mbq)...)
#953: FILE: arch/arm/plat-omap/mailbox.h:29:
+	struct omap_mbq *m = kmalloc(sizeof(struct omap_mbq), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#954: FILE: arch/arm/plat-omap/mailbox.h:30:
+	struct omap_mbq *m = kmalloc(sizeof(struct omap_mbq), GFP_KERNEL);
+	if (!m)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#960: FILE: arch/arm/plat-omap/mailbox.h:36:
+	m->rp = m->wp = &m->msg[0];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1044: FILE: arch/arm/plat-omap/mailbox.h:120:
+ * message.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1051: FILE: arch/arm/plat-omap/mailbox.h:127:
+static inline void mbox_seq_toggle(struct omap_mbox *mbox, mbox_msg_t * msg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1062: FILE: arch/arm/plat-omap/mailbox.h:138:
+	mbox_msg_t seq = msg & (1 << 31);
+	if (seq == mbox->seq_rcv)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1071: FILE: arch/arm/plat-omap/mailbox.h:147:
+}
+static inline void mbox_seq_toggle(struct omap_mbox *mbox, mbox_msg_t * msg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1071: FILE: arch/arm/plat-omap/mailbox.h:147:
+static inline void mbox_seq_toggle(struct omap_mbox *mbox, mbox_msg_t * msg)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1074: FILE: arch/arm/plat-omap/mailbox.h:150:
+}
+static inline int mbox_seq_test(struct omap_mbox *mbox, mbox_msg_t msg)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1085: FILE: arch/arm/plat-omap/mailbox.h:161:
+}
+static inline void mbox_fifo_write(struct omap_mbox *mbox, mbox_msg_t msg)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1089: FILE: arch/arm/plat-omap/mailbox.h:165:
+}
+static inline int mbox_fifo_empty(struct omap_mbox *mbox)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1093: FILE: arch/arm/plat-omap/mailbox.h:169:
+}
+static inline int mbox_fifo_full(struct omap_mbox *mbox)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1103: FILE: arch/arm/plat-omap/mailbox.h:179:
+}
+static inline void disable_mbox_irq(struct omap_mbox *mbox, omap_mbox_irq_t irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1107: FILE: arch/arm/plat-omap/mailbox.h:183:
+}
+static inline void ack_mbox_irq(struct omap_mbox *mbox, omap_mbox_irq_t irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1112: FILE: arch/arm/plat-omap/mailbox.h:188:
+}
+static inline int is_mbox_irq(struct omap_mbox *mbox, omap_mbox_irq_t irq)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1121: FILE: include/asm-arm/arch-omap/mailbox.h:1:
+/* mailbox.h */

CHECK:SPACING: No space is necessary after a cast
#1135: FILE: include/asm-arm/arch-omap/mailbox.h:15:
+#define IRQ_TX ((__force omap_mbox_irq_t) 1)

CHECK:SPACING: No space is necessary after a cast
#1136: FILE: include/asm-arm/arch-omap/mailbox.h:16:
+#define IRQ_RX ((__force omap_mbox_irq_t) 2)

CHECK:SPACING: No space is necessary after a cast
#1139: FILE: include/asm-arm/arch-omap/mailbox.h:19:
+#define OMAP_MBOX_TYPE1 ((__force omap_mbox_type_t) 1)

CHECK:SPACING: No space is necessary after a cast
#1140: FILE: include/asm-arm/arch-omap/mailbox.h:20:
+#define OMAP_MBOX_TYPE2 ((__force omap_mbox_type_t) 2)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1160: FILE: include/asm-arm/arch-omap/mailbox.h:40:
+	spinlock_t lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mbox_msg_t' should also have an identifier name
#1167: FILE: include/asm-arm/arch-omap/mailbox.h:47:
+	void (*msg_receive_cb)(mbox_msg_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1170: FILE: include/asm-arm/arch-omap/mailbox.h:50:
+	int (*msg_sender_cb)(void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1170: FILE: include/asm-arm/arch-omap/mailbox.h:50:
+	int (*msg_sender_cb)(void*);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1181: FILE: include/asm-arm/arch-omap/mailbox.h:61:
+int omap_mbox_msg_send(struct omap_mbox *mbox_h, mbox_msg_t msg, void* arg);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 26 warnings, 28 checks, 1129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
