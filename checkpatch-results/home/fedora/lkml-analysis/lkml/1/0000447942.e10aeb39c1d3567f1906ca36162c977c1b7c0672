WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#36: FILE: Makefile:4:
+EXTRAVERSION = .5
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#64: FILE: arch/um/os-Linux/elf_aux.c:44:
+				if (__kernel_vsyscall < (unsigned long) envp)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#87: FILE: arch/um/os-Linux/skas/mem.c:69:
+	if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#87: FILE: arch/um/os-Linux/skas/mem.c:69:
+	if(n < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#88: FILE: arch/um/os-Linux/skas/mem.c:70:
+		printk("Registers - \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#88: FILE: arch/um/os-Linux/skas/mem.c:70:
+		printk("Registers - \n");

ERROR:SPACING: space required before the open parenthesis '('
#89: FILE: arch/um/os-Linux/skas/mem.c:71:
+		for(i = 0; i < MAX_REG_NR; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#90: FILE: arch/um/os-Linux/skas/mem.c:72:
+			printk("\t%d\t0x%lx\n", i, regs[i]);

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: arch/um/os-Linux/skas/process.c:79:
+			for(i = 0; i < ARRAY_SIZE(regs); i++)

ERROR:SPACING: space required before the open parenthesis '('
#372: FILE: drivers/ata/sata_nv.c:1172:
+	if(curr_ncq != pp->last_issue_ncq) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: drivers/ata/sata_nv.c:1173:
+^I   ^I/* Seems to need some delay before switching between NCQ and non-NCQ$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#373: FILE: drivers/ata/sata_nv.c:1173:
+^I   ^I/* Seems to need some delay before switching between NCQ and non-NCQ$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#374: FILE: drivers/ata/sata_nv.c:1174:
+	   	/* Seems to need some delay before switching between NCQ and non-NCQ
+		   commands, else we get command timeouts and such. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#374: FILE: drivers/ata/sata_nv.c:1174:
+		   commands, else we get command timeouts and such. */

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#375: FILE: drivers/ata/sata_nv.c:1175:
+		udelay(20);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#479: FILE: drivers/ide/ide-iops.c:601:
+	printk(KERN_INFO "%s: hw_config=%04x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: drivers/ide/ide-iops.c:602:
+	printk(KERN_INFO "%s: hw_config=%04x\n",
+			 drive->name, drive->id->hw_config);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#493: FILE: drivers/ide/ide-iops.c:617:
+#if 0

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#526: FILE: drivers/ide/pci/jmicron.c:249:
+#if defined(CONFIG_ATA) || defined(CONFIG_ATA_MODULE)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#527: FILE: drivers/ide/pci/jmicron.c:250:
+#define JMB_CLASS	PCI_CLASS_STORAGE_IDE << 8

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: drivers/ide/pci/piix.c:421:
+        switch (dev->device) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: drivers/ide/pci/piix.c:421:
+        switch (dev->device) {$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#606: FILE: drivers/ide/pci/piix.c:454:
+static unsigned int __devinit init_chipset_piix (struct pci_dev *dev, const char *name)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#606: FILE: drivers/ide/pci/piix.c:454:
+static unsigned int __devinit init_chipset_piix (struct pci_dev *dev, const char *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#610: FILE: drivers/ide/pci/piix.c:458:
+		unsigned int extra = 0;
+		pci_read_config_dword(dev, 0x54, &extra);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#611: FILE: drivers/ide/pci/piix.c:459:
+		pci_write_config_dword(dev, 0x54, extra|0x400);
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: drivers/ieee1394/dv1394.c:2295:
+		class_device_destroy(hpsb_protocol_class, MKDEV(IEEE1394_MAJOR,
+				IEEE1394_MINOR_BLOCK_DV1394 * 16 + (id << 2)));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#857: FILE: drivers/media/dvb/frontends/nxt200x.c:565:
+				state->config->set_pll_input(buf+1, 1);
 				                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#866: FILE: drivers/media/dvb/frontends/nxt200x.c:574:
+				state->config->set_pll_input(buf+1, 0);
 				                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1121: FILE: drivers/video/ffb.c:1030:
+	printk("%s: %s at %016lx, type %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1122: FILE: drivers/video/ffb.c:1031:
+	printk("%s: %s at %016lx, type %d, "
+	       "DAC pnum[%x] rev[%d] manuf_rev[%d]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1139: FILE: fs/cifs/inode.c:491:
+			else if ((inode->i_mode & S_IWUGO) == 0)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1143: FILE: fs/cifs/inode.c:495:
+				inode->i_mode |= (S_IWUGO &

CHECK:CAMELCASE: Avoid CamelCase: <cifsInode>
#1161: FILE: fs/cifs/inode.c:1279:
+			if ((cifsInode->cifsAttrs & ATTR_READONLY) == 0) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cifsAttrs>
#1161: FILE: fs/cifs/inode.c:1279:
+			if ((cifsInode->cifsAttrs & ATTR_READONLY) == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#1175: FILE: fs/cifs/inode.c:1292:
+				if(time_buf.Attributes == 0)

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#1175: FILE: fs/cifs/inode.c:1292:
+				if(time_buf.Attributes == 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1199: FILE: fs/cifs/readdir.c:218:
+		else if ((tmp_inode->i_mode & S_IWUGO) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1201: FILE: fs/cifs/readdir.c:220:
+^I^I   ^I/* server -- set any w bits allowed by mnt_file_mode */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1201: FILE: fs/cifs/readdir.c:220:
+^I^I   ^I/* server -- set any w bits allowed by mnt_file_mode */$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1202: FILE: fs/cifs/readdir.c:221:
+			tmp_inode->i_mode |= (S_IWUGO & cifs_sb->mnt_file_mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1258: FILE: include/asm-um/delay.h:7:
+extern void __bad_udelay(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1260: FILE: include/asm-um/delay.h:9:
+extern void __udelay(unsigned long usecs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1261: FILE: include/asm-um/delay.h:10:
+extern void __delay(unsigned long loops);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1263: FILE: include/asm-um/delay.h:12:
+#define udelay(n) ((__builtin_constant_p(n) && (n) > 20000) ? \
+	__bad_udelay() : __udelay(n))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1267: FILE: include/asm-um/delay.h:16:
+ * implemented. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1268: FILE: include/asm-um/delay.h:17:
+extern void __unimplemented_ndelay(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1288: FILE: include/linux/eventpoll.h:42:
+#define EPOLL_PACKED __attribute__((packed))

WARNING:SPLIT_STRING: quoted string split across lines
#1368: FILE: net/appletalk/ddp.c:1424:
+		pr_debug("AppleTalk: dropping corrupted frame (deh_len=%u, "
+			 "skb->len=%u)\n", len_hops & 1023, skb->len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tb[FRA_SRC]"
#1405: FILE: net/core/fib_rules.c:161:
+		if (tb[FRA_SRC] == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tb[FRA_DST]"
#1411: FILE: net/core/fib_rules.c:167:
+		if (tb[FRA_DST] == NULL ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'r->src != nla_get_le16(tb[FRA_SRC])'
#1514: FILE: net/decnet/dn_rules.c:177:
+	if (frh->src_len && (r->src != nla_get_le16(tb[FRA_SRC])))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'r->dst != nla_get_le16(tb[FRA_DST])'
#1518: FILE: net/decnet/dn_rules.c:180:
+	if (frh->dst_len && (r->dst != nla_get_le16(tb[FRA_DST])))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rule4->src != nla_get_be32(tb[FRA_SRC])'
#1583: FILE: net/ipv4/fib_rules.c:242:
+	if (frh->src_len && (rule4->src != nla_get_be32(tb[FRA_SRC])))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rule4->dst != nla_get_be32(tb[FRA_DST])'
#1587: FILE: net/ipv4/fib_rules.c:245:
+	if (frh->dst_len && (rule4->dst != nla_get_be32(tb[FRA_DST])))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1754: FILE: net/ipv6/route.c:405:
+		  __FUNCTION__, fn->leaf, oif);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1761: FILE: net/ipv6/route.c:409:
+		fn->rr_ptr = rt0 = fn->leaf;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1797: FILE: net/ipv6/route.c:426:
+		  __FUNCTION__, match);

WARNING:TYPO_SPELLING: 'iif' may be misspelled - perhaps 'if'?
#1806: FILE: net/ipv6/route.c:672:
+	rt = rt6_select(fn, fl->iif, strict | reachable);
 	                        ^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#1830: FILE: net/sched/cls_basic.c:88:
+	if (head == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447942.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 28 warnings, 23 checks, 1490 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447942.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
