WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Add a facility to retain public keys and to verify signatures made with those

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#55: FILE: crypto/Kconfig:456:
+config CRYPTO_SIGNATURE
+	bool "In-kernel signature checker (EXPERIMENTAL)"
+	depends on CRYPTO
+	help
+	  Signature checker (used for module sig checking).
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: crypto/Kconfig:462:
+config CRYPTO_SIGNATURE_DSA
+	bool "Handle DSA signatures (EXPERIMENTAL)"
+	depends on CRYPTO_SIGNATURE
+	select CRYPTO_MPILIB
+	help
+	  DSA Signature checker.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: crypto/signature/dsa.c:1:
+/* dsa.c  -  DSA signature algorithm

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#118: FILE: crypto/signature/dsa.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#119: FILE: crypto/signature/dsa.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: crypto/signature/dsa.c:50:
+		printk("DSA_verify assertion failed [0 < r < q]\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'DSA_verify', this function's name, in a string
#151: FILE: crypto/signature/dsa.c:50:
+		printk("DSA_verify assertion failed [0 < r < q]\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#156: FILE: crypto/signature/dsa.c:55:
+		printk("DSA_verify assertion failed [0 < s < q]\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'DSA_verify', this function's name, in a string
#156: FILE: crypto/signature/dsa.c:55:
+		printk("DSA_verify assertion failed [0 < s < q]\n");

ERROR:SPACING: space prohibited before that close parenthesis ')'
#161: FILE: crypto/signature/dsa.c:60:
+	w  = mpi_alloc(mpi_get_nlimbs(q)); if (!w ) goto cleanup;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#161: FILE: crypto/signature/dsa.c:60:
+	w  = mpi_alloc(mpi_get_nlimbs(q)); if (!w ) goto cleanup;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#162: FILE: crypto/signature/dsa.c:61:
+	u1 = mpi_alloc(mpi_get_nlimbs(q)); if (!u1) goto cleanup;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#163: FILE: crypto/signature/dsa.c:62:
+	u2 = mpi_alloc(mpi_get_nlimbs(q)); if (!u2) goto cleanup;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#164: FILE: crypto/signature/dsa.c:63:
+	v  = mpi_alloc(mpi_get_nlimbs(p)); if (!v ) goto cleanup;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#164: FILE: crypto/signature/dsa.c:63:
+	v  = mpi_alloc(mpi_get_nlimbs(p)); if (!v ) goto cleanup;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#204: FILE: crypto/signature/key.h:1:
+const int ksign_def_public_key_size = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#204: FILE: crypto/signature/key.h:1:
+const int ksign_def_public_key_size = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#207: FILE: crypto/signature/key.h:4:
+static unsigned char ksign_def_public_key[] __initdata =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#217: FILE: crypto/signature/ksign-keyring.c:1:
+/* ksign-keyring.c: public key cache

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#235: FILE: crypto/signature/ksign-keyring.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#236: FILE: crypto/signature/ksign-keyring.c:20:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: crypto/signature/ksign-keyring.c:34:
+	printk("- Added public key %X%X\n", pk->keyid[0], pk->keyid[1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#253: FILE: crypto/signature/ksign-keyring.c:37:
+		printk("  - public key has expired\n");

ERROR:SPACING: space prohibited before that close parenthesis ')'
#255: FILE: crypto/signature/ksign-keyring.c:39:
+	if (pk->timestamp > xtime.tv_sec )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: crypto/signature/ksign-keyring.c:40:
+		printk("  - key was been created %lu seconds in future\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: crypto/signature/ksign-keyring.c:57:
+	printk("- User ID: %s\n", uid->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: crypto/signature/ksign-keyring.c:66:
+    printk("Loading keyring\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: crypto/signature/ksign-keyring.c:66:
+    printk("Loading keyring\n");

CHECK:SPACING: No space is necessary after a cast
#284: FILE: crypto/signature/ksign-keyring.c:68:
+    return ksign_parse_packets((const uint8_t *) buffer,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: crypto/signature/ksign-keyring.c:68:
+    return ksign_parse_packets((const uint8_t *) buffer,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#339: FILE: crypto/signature/ksign-parse.c:1:
+/* parse packet data

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#355: FILE: crypto/signature/ksign-parse.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#356: FILE: crypto/signature/ksign-parse.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#366: FILE: crypto/signature/ksign-parse.c:28:
+	uint32_t a;

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: crypto/signature/ksign-parse.c:29:
+	uint32_t a;
+	a =  *buffer << 24;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#376: FILE: crypto/signature/ksign-parse.c:38:
+	uint16_t a;

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: crypto/signature/ksign-parse.c:39:
+	uint16_t a;
+	a = *(*datap)++ << 8;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#384: FILE: crypto/signature/ksign-parse.c:46:
+	uint32_t a;

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: crypto/signature/ksign-parse.c:47:
+	uint32_t a;
+	a =  *(*datap)++ << 24;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: crypto/signature/ksign-parse.c:89:
+	unsigned n;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#428: FILE: crypto/signature/ksign-parse.c:90:
+	unsigned nb[DSA_NPKEY];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#429: FILE: crypto/signature/ksign-parse.c:91:
+	unsigned nn[DSA_NPKEY];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#430: FILE: crypto/signature/ksign-parse.c:92:
+	uint8_t *pp[DSA_NPKEY];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#431: FILE: crypto/signature/ksign-parse.c:93:
+	uint32_t a32;

ERROR:SPACING: space prohibited after that open parenthesis '('
#440: FILE: crypto/signature/ksign-parse.c:102:
+		pp[i] = mpi_get_buffer( pk->pkey[i], nn + i, NULL);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#454: FILE: crypto/signature/ksign-parse.c:116:
+	SHA1_putc(sha1, a32 >> 24 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#455: FILE: crypto/signature/ksign-parse.c:117:
+	SHA1_putc(sha1, a32 >> 16 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#456: FILE: crypto/signature/ksign-parse.c:118:
+	SHA1_putc(sha1, a32 >>  8 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#457: FILE: crypto/signature/ksign-parse.c:119:
+	SHA1_putc(sha1, a32 >>  0 );

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#460: FILE: crypto/signature/ksign-parse.c:122:
+		uint16_t a16;

ERROR:SPACING: space prohibited after that open parenthesis '('
#462: FILE: crypto/signature/ksign-parse.c:124:
+		if( pk->expiredate )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#462: FILE: crypto/signature/ksign-parse.c:124:
+		if( pk->expiredate )

ERROR:SPACING: space required before the open parenthesis '('
#462: FILE: crypto/signature/ksign-parse.c:124:
+		if( pk->expiredate )

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#484: FILE: crypto/signature/ksign-parse.c:146:
+static int ksign_parse_user_id(const uint8_t *datap, const uint8_t *endp,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#516: FILE: crypto/signature/ksign-parse.c:178:
+static int ksign_parse_key(const uint8_t *datap, const uint8_t *endp,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#517: FILE: crypto/signature/ksign-parse.c:179:
+			   uint8_t *hdr, int hdrlen,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#523: FILE: crypto/signature/ksign-parse.c:185:
+	uint8_t hash[SHA1_DIGEST_SIZE];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#529: FILE: crypto/signature/ksign-parse.c:191:
+		printk("ksign: public key packet too short\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: crypto/signature/ksign-parse.c:203:
+		printk("ksign: public key packet with unknown version %d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: crypto/signature/ksign-parse.c:213:
+		unsigned short ndays;
+		ndays = read_16(&datap);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#559: FILE: crypto/signature/ksign-parse.c:221:
+		printk("ksign: public key packet with unknown version %d\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pk)...) over kzalloc(sizeof(struct ksign_public_key)...)
#565: FILE: crypto/signature/ksign-parse.c:227:
+	pk = kzalloc(sizeof(struct ksign_public_key), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#577: FILE: crypto/signature/ksign-parse.c:239:
+		unsigned int remaining = endp - datap;
+		pk->pkey[i] = mpi_read_from_buffer(datap, &remaining);

ERROR:SPACING: space required before the open parenthesis '('
#626: FILE: crypto/signature/ksign-parse.c:288:
+			if(buflen < 2)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#659: FILE: crypto/signature/ksign-parse.c:321:
+static int ksign_parse_signature(const uint8_t *datap, const uint8_t *endp,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#669: FILE: crypto/signature/ksign-parse.c:331:
+		printk("ksign: signature packet too short\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#681: FILE: crypto/signature/ksign-parse.c:343:
+		printk("ksign: signature packet with unknown version %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#705: FILE: crypto/signature/ksign-parse.c:367:
+		printk("ksign: ignoring non-DSA signature\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#709: FILE: crypto/signature/ksign-parse.c:371:
+		printk("ksign: ignoring non-SHA1 signature\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#718: FILE: crypto/signature/ksign-parse.c:380:
+			printk("ksign: signature packet:"

WARNING:SPLIT_STRING: quoted string split across lines
#719: FILE: crypto/signature/ksign-parse.c:381:
+			printk("ksign: signature packet:"
+			       " hashed data too long\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#724: FILE: crypto/signature/ksign-parse.c:386:
+				printk("ksign: signature packet:"

WARNING:SPLIT_STRING: quoted string split across lines
#725: FILE: crypto/signature/ksign-parse.c:387:
+				printk("ksign: signature packet:"
+				       " available data too short\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#741: FILE: crypto/signature/ksign-parse.c:403:
+			printk("ksign: signature packet:"

WARNING:SPLIT_STRING: quoted string split across lines
#742: FILE: crypto/signature/ksign-parse.c:404:
+			printk("ksign: signature packet:"
+			       " unhashed data too long\n");

CHECK:SPACING: No space is necessary after a cast
#746: FILE: crypto/signature/ksign-parse.c:408:
+			if ((size_t) (endp - datap) < n) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#747: FILE: crypto/signature/ksign-parse.c:409:
+				printk("ksign: signature packet:"

WARNING:SPLIT_STRING: quoted string split across lines
#748: FILE: crypto/signature/ksign-parse.c:410:
+				printk("ksign: signature packet:"
+				       " available data too short\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#764: FILE: crypto/signature/ksign-parse.c:426:
+		printk("ksign: signature packet too short\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#772: FILE: crypto/signature/ksign-parse.c:434:
+		const uint8_t *p;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#778: FILE: crypto/signature/ksign-parse.c:440:
+			printk("ksign: signature packet without issuer\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#786: FILE: crypto/signature/ksign-parse.c:448:
+		unsigned remaining = endp - datap;

WARNING:LINE_SPACING: Missing a blank line after declarations
#787: FILE: crypto/signature/ksign-parse.c:449:
+		unsigned remaining = endp - datap;
+		sig->data[i] = mpi_read_from_buffer(datap, &remaining);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#813: FILE: crypto/signature/ksign-parse.c:475:
+static int ksign_parse_one_packet(const uint8_t **datap,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#814: FILE: crypto/signature/ksign-parse.c:476:
+				  const uint8_t *endp,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#822: FILE: crypto/signature/ksign-parse.c:484:
+	uint8_t hdr[8];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#836: FILE: crypto/signature/ksign-parse.c:498:
+		printk("ksign: invalid packet (ctb=%02x)\n", ctb);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#844: FILE: crypto/signature/ksign-parse.c:506:
+			printk("ksign: 1st length byte missing\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#855: FILE: crypto/signature/ksign-parse.c:517:
+				printk("ksign: 2nd length uint8_t missing\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#863: FILE: crypto/signature/ksign-parse.c:525:
+				printk("ksign: 4 uint8_t length invalid\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#876: FILE: crypto/signature/ksign-parse.c:538:
+		if( !lenuint8_ts ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#876: FILE: crypto/signature/ksign-parse.c:538:
+		if( !lenuint8_ts ) {

ERROR:SPACING: space required before the open parenthesis '('
#876: FILE: crypto/signature/ksign-parse.c:538:
+		if( !lenuint8_ts ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#880: FILE: crypto/signature/ksign-parse.c:542:
+				printk("ksign: length uint8_ts missing\n");

ERROR:SPACING: space prohibited before that close parenthesis ')'
#883: FILE: crypto/signature/ksign-parse.c:545:
+			for( ; lenuint8_ts; lenuint8_ts-- ) {

ERROR:SPACING: space required before the open parenthesis '('
#883: FILE: crypto/signature/ksign-parse.c:545:
+			for( ; lenuint8_ts; lenuint8_ts-- ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#891: FILE: crypto/signature/ksign-parse.c:553:
+		printk("ksign: packet length longer than available data\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#923: FILE: crypto/signature/ksign-parse.c:585:
+int ksign_parse_packets(const uint8_t *buf,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#930: FILE: crypto/signature/ksign-parse.c:592:
+	const uint8_t *datap, *endp;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#948: FILE: crypto/signature/ksign-publickey.c:1:
+#include "local.h"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#955: FILE: crypto/signature/ksign-publickey.c:8:
+	printk("ksign: Installing public key data\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#960: FILE: crypto/signature/ksign-publickey.c:13:
+		printk("Unable to load default keyring: error=%d\n", -rc);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#972: FILE: crypto/signature/ksign.c:1:
+/* ksign.c: signature checker

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#987: FILE: crypto/signature/ksign.c:16:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#988: FILE: crypto/signature/ksign.c:17:
+#define _debug(FMT, ...) printk(KERN_DEBUG FMT, ##__VA_ARGS__)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#990: FILE: crypto/signature/ksign.c:19:
+#define _debug(FMT, ...) do { ; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1001: FILE: crypto/signature/ksign.c:30:
+	uint8_t sha1[SHA1_DIGEST_SIZE];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1007: FILE: crypto/signature/ksign.c:36:
+		printk("ksign: module signed with unknown public key\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1008: FILE: crypto/signature/ksign.c:37:
+		printk("- signature keyid: %08x%08x ver=%u\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1014: FILE: crypto/signature/ksign.c:43:
+		printk("ksign:"

WARNING:SPLIT_STRING: quoted string split across lines
#1015: FILE: crypto/signature/ksign.c:44:
+		printk("ksign:"
+		       " public key is %lu seconds newer than the signature\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1028: FILE: crypto/signature/ksign.c:57:
+		u32 a = sig->timestamp;
+		SHA1_putc(&sha1_d, (a >> 24) & 0xff);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1033: FILE: crypto/signature/ksign.c:62:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1033: FILE: crypto/signature/ksign.c:62:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1034: FILE: crypto/signature/ksign.c:63:
+		uint8_t buf[6];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1036: FILE: crypto/signature/ksign.c:65:
+		size_t n;
+		SHA1_putc(&sha1_d, PUBKEY_ALGO_DSA);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1043: FILE: crypto/signature/ksign.c:72:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1043: FILE: crypto/signature/ksign.c:72:
+		else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1108: FILE: crypto/signature/ksign.c:137:
+int ksign_verify_signature(const char *sigdata, unsigned sig_size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1122: FILE: crypto/signature/ksign.c:151:
+		printk(KERN_NOTICE

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1158: FILE: crypto/signature/local.h:1:
+/* local.h: kernel signature checker internal defs

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1176: FILE: crypto/signature/local.h:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1177: FILE: crypto/signature/local.h:20:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1184: FILE: crypto/signature/local.h:27:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1197: FILE: crypto/signature/local.h:40:
+typedef enum {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1204: FILE: crypto/signature/local.h:47:
+typedef enum {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1237: FILE: crypto/signature/local.h:80:
+	uint32_t	keyid[2];		/* 64 bit keyid */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1239: FILE: crypto/signature/local.h:82:
+	uint8_t		version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1240: FILE: crypto/signature/local.h:83:
+	uint8_t		sig_class;		/* sig classification, append for MD calculation*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1241: FILE: crypto/signature/local.h:84:
+	uint8_t		*hashed_data;		/* all subpackets with hashed  data (v4 only) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1242: FILE: crypto/signature/local.h:85:
+	uint8_t		*unhashed_data;		/* ditto for unhashed data */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1243: FILE: crypto/signature/local.h:86:
+	uint8_t		digest_start[2];	/* first 2 uint8_ts of the digest */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1247: FILE: crypto/signature/local.h:90:
+extern void ksign_free_signature(struct ksign_signature *sig);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1257: FILE: crypto/signature/local.h:100:
+	uint8_t		hdrbytes;		/* number of header bytes */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1258: FILE: crypto/signature/local.h:101:
+	uint8_t		version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1261: FILE: crypto/signature/local.h:104:
+	uint32_t	main_keyid[2];		/* keyid of the primary key */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1262: FILE: crypto/signature/local.h:105:
+	uint32_t	keyid[2];		/* calculated by keyid_from_pk() */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1266: FILE: crypto/signature/local.h:109:
+extern void ksign_free_public_key(struct ksign_public_key *pk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1274: FILE: crypto/signature/local.h:117:
+extern int ksign_load_keyring_from_buffer(const void *buffer, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1276: FILE: crypto/signature/local.h:119:
+extern struct ksign_public_key *ksign_get_public_key(const uint32_t *keyid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1286: FILE: crypto/signature/local.h:129:
+extern void ksign_free_user_id(struct ksign_user_id *uid);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1295: FILE: crypto/signature/local.h:138:
+extern int ksign_parse_packets(const uint8_t *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1295: FILE: crypto/signature/local.h:138:
+extern int ksign_parse_packets(const uint8_t *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1302: FILE: crypto/signature/local.h:145:
+extern int DSA_verify(const MPI datahash, const MPI sig[], const MPI pkey[]);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1324: FILE: include/linux/crypto/ksign.h:1:
+/* ksign.h: in-kernel signature checker

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1341: FILE: include/linux/crypto/ksign.h:18:
+extern int ksign_verify_signature(const char *sig, unsigned sig_size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1341: FILE: include/linux/crypto/ksign.h:18:
+extern int ksign_verify_signature(const char *sig, unsigned sig_size,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000467572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 74 warnings, 43 checks, 1235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000467572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
