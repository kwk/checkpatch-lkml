WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
  - For what direction someone fixes mmap_sem, this result seems to be a good

WARNING:TYPO_SPELLING: 'imcomplete' may be misspelled - perhaps 'incomplete'?
#60: 
    In that sense, this patch is imcomplete and not very good.
                                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'vaule' may be misspelled - perhaps 'value'?
#123: FILE: Documentation/filesystems/proc.txt:194:
+asynchronous manner and the vaule may not be very precise. To see a precise
                             ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= address'
#424: FILE: arch/x86/mm/fault.c:1047:
+		if (vma && mm_version_check(mm) &&
+		   (vma->vm_start <= address) && (address < vma->vm_end)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < vma->vm_end'
#424: FILE: arch/x86/mm/fault.c:1047:
+		if (vma && mm_version_check(mm) &&
+		   (vma->vm_start <= address) && (address < vma->vm_end)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: arch/x86/mm/fault.c:1048:
+		if (vma && mm_version_check(mm) &&
+		   (vma->vm_start <= address) && (address < vma->vm_end)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#466: FILE: arch/x86/mm/fault.c:1138:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1596: FILE: include/linux/mm.h:767:
+struct vm_area_struct *lookup_vma_cache(struct mm_struct *mm,
+		unsigned long address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1598: FILE: include/linux/mm.h:769:
+void invalidate_vma_cache(struct mm_struct *mm,
+		struct vm_area_struct *vma);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1610: FILE: include/linux/mm.h:781:
+		if (waitqueue_active(&vma->cache_wait))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2140: FILE: mm/memory.c:131:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2165: FILE: mm/memory.c:156:
+}
+#define inc_mm_counter_fast(mm, member) add_mm_counter_fast(mm, member,1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2165: FILE: mm/memory.c:156:
+#define inc_mm_counter_fast(mm, member) add_mm_counter_fast(mm, member,1)
                                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2166: FILE: mm/memory.c:157:
+#define dec_mm_counter_fast(mm, member) add_mm_counter_fast(mm, member,-1)
                                                                       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#2166: FILE: mm/memory.c:157:
+#define dec_mm_counter_fast(mm, member) add_mm_counter_fast(mm, member,-1)
                                                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2184: FILE: mm/memory.c:175:
+ ^I * The caller must guarantee task->mm is not invalid.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2184: FILE: mm/memory.c:175:
+ ^I * The caller must guarantee task->mm is not invalid.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2185: FILE: mm/memory.c:176:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2185: FILE: mm/memory.c:176:
+ ^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2864: FILE: mm/mmap.c:224:
+void invalidate_vma_cache_range(struct mm_struct *mm,
+	unsigned long start, unsigned long end)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2871: FILE: mm/mmap.c:231:
+	spinlock_t *lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2891: FILE: mm/mmap.c:251:
+ ^I^I^I * this spinlock guarantee no race with speculative$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2891: FILE: mm/mmap.c:251:
+ ^I^I^I * this spinlock guarantee no race with speculative$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2908: FILE: mm/mmap.c:268:
+		wait_event_interruptible(vma->cache_wait,
+				atomic_read(&vma->cache_access) == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3012: FILE: mm/mmap.c:2144:
 
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3020: FILE: mm/mmap.c:2164:
+	invalidate_vma_cache_range(mm, addr,addr+len);
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3020: FILE: mm/mmap.c:2164:
+	invalidate_vma_cache_range(mm, addr,addr+len);
 	                                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3055: FILE: mm/mmap.c:2536:
+	BUG_ON(mm_read_trylock(mm));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3064: FILE: mm/mmap.c:2607:
+	BUG_ON(mm_read_trylock(mm));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3347: FILE: include/linux/mm_accessor.h:1:
+#ifndef __LINUX_MM_ACCESSOR_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3441: FILE: include/linux/mm_types.h:212:
+};
+/* per-thread cached information, */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4103: FILE: mm/mm_accessor.c:1:
+#include <linux/sched.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#4117: FILE: mm/mm_accessor.c:15:
+	int ret = down_read_trylock(&mm->mmap_sem);
+	if (ret && current->mm == mm && current->mm_version != mm->version)

WARNING:TYPO_SPELLING: 'chekcing' may be misspelled - perhaps 'checking'?
#4197: FILE: mm/mm_accessor.c:95:
+ * Called when mm is accessed without read-lock or for chekcing
                                                        ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->mm == mm'
#4202: FILE: mm/mm_accessor.c:100:
+	if ((current->mm == mm) && (current->mm_version != mm->version))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->mm_version != mm->version'
#4202: FILE: mm/mm_accessor.c:100:
+	if ((current->mm == mm) && (current->mm_version != mm->version))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000032472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 13 warnings, 16 checks, 3492 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000032472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
