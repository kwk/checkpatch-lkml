WARNING:TYPO_SPELLING: 'an union' may be misspelled - perhaps 'a union'?
#26: 
Add an union to the cyclades_card structure, which contains
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#48: FILE: drivers/char/cyclades.c:669:
+	((readl(&(card).ctl_addr.p9060->init_ctrl) & (1<<17)) != 0)
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#53: FILE: drivers/char/cyclades.c:671:
+#define ISZLOADED(card)	(((ZO_V1 == readl(&(card).ctl_addr.p9060->mail_box_0)) \

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'card' - possible side-effects?
#53: FILE: drivers/char/cyclades.c:671:
+#define ISZLOADED(card)	(((ZO_V1 == readl(&(card).ctl_addr.p9060->mail_box_0)) \
+			|| Z_FPGA_CHECK(card)) && \
 			(ZFIRM_ID == readl(&((struct FIRM_ID __iomem *) \
 			((card).base_addr+ID_ADDRESS))->signature)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#54: FILE: drivers/char/cyclades.c:672:
+#define ISZLOADED(card)	(((ZO_V1 == readl(&(card).ctl_addr.p9060->mail_box_0)) \
+			|| Z_FPGA_CHECK(card)) && \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ZE_V1 == readl(&cinfo->ctl_addr.p9060->
 							mail_box_0)'
#101: FILE: drivers/char/cyclades.c:2391:
+			if (((ZE_V1 == readl(&cinfo->ctl_addr.p9060->
+							mail_box_0)) &&
 					Z_FPGA_CHECK(*cinfo)) &&
 					(ZFIRM_HLT == readl(
 						&firm_id->signature))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ZFIRM_HLT == readl(
 						&firm_id->signature)'
#101: FILE: drivers/char/cyclades.c:2391:
+			if (((ZE_V1 == readl(&cinfo->ctl_addr.p9060->
+							mail_box_0)) &&
 					Z_FPGA_CHECK(*cinfo)) &&
 					(ZFIRM_HLT == readl(
 						&firm_id->signature))) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#101: FILE: drivers/char/cyclades.c:2391:
+			if (((ZE_V1 == readl(&cinfo->ctl_addr.p9060->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cinfo->ctl_addr.p9060->mail_box_0'
#102: FILE: drivers/char/cyclades.c:2392:
+			if (((ZE_V1 == readl(&cinfo->ctl_addr.p9060->
+							mail_box_0)) &&

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cinfo->ctl_addr.p9060->intr_ctrl_stat'
#121: FILE: drivers/char/cyclades.c:2424:
+				intr = readw(&cinfo->ctl_addr.p9060->
+						intr_ctrl_stat) | 0x0900;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cinfo->ctl_addr.p9060->intr_ctrl_stat'
#123: FILE: drivers/char/cyclades.c:2426:
+				cy_writew(&cinfo->ctl_addr.p9060->
+						intr_ctrl_stat, intr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: drivers/char/cyclades.c:5013:
+		cy_writew(&ctl_addr->intr_ctrl_stat,
+				readw(&ctl_addr->intr_ctrl_stat) & ~0x0900);

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: drivers/char/cyclades.c:5133:
+			struct RUNTIME_9060 __iomem *ctl_addr = addr0;
+			plx_init(pdev, irq, ctl_addr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: drivers/char/cyclades.c:5135:
+			cy_writew(&ctl_addr->intr_ctrl_stat,
+				readw(&ctl_addr->intr_ctrl_stat) | 0x0900);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#197: FILE: drivers/char/cyclades.c:5174:
 		if (!IS_CYC_Z(*cinfo))
[...]
+		cy_writew(&cinfo->ctl_addr.p9060->intr_ctrl_stat,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: drivers/char/cyclades.c:5177:
+		cy_writew(&cinfo->ctl_addr.p9060->intr_ctrl_stat,
+			readw(&cinfo->ctl_addr.p9060->intr_ctrl_stat) &

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000136036.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 8 checks, 197 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000136036.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
