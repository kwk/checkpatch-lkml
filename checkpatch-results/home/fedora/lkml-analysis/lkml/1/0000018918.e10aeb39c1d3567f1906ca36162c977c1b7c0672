WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#80: FILE: tools/perf/util/parse-events.c:260:
+	if (1 !=  sscanf(line + 2, "%llx", &symbol->config))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#95: FILE: tools/perf/util/parse-events.c:275:
+	if (2 != sscanf(ptr, "%lld-%lld\t%n", &discard, &discard, &eaten)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#100: FILE: tools/perf/util/parse-events.c:280:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#104: FILE: tools/perf/util/parse-events.c:284:
+	if (name && description) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#108: FILE: tools/perf/util/parse-events.c:288:
+	} else

WARNING:TABSTOP: Statements should start on a tabstop
#127: FILE: tools/perf/util/parse-events.c:307:
+			 if (ferror(file))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#132: FILE: tools/perf/util/parse-events.c:312:
+	} while (0 < result);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: tools/perf/util/parse-events.c:330:
+	if (debugfs_make_path(platevent_entry, platevent_file_path,
+		ARRAY_SIZE(platevent_file_path)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'result < 0'
#189: FILE: tools/perf/util/parse-events.c:369:
+	if ((result < 0) || (0 == count)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#189: FILE: tools/perf/util/parse-events.c:369:
+	if ((result < 0) || (0 == count)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: tools/perf/util/parse-events.c:377:
+			platform_event_symbols = realloc(symbols,
+				sizeof(struct event_symbol) * count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: tools/perf/util/parse-events.c:388:
+	unsigned int i;
+	for (i = 0; i < platform_event_count; ++i)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: tools/perf/util/parse-events.c:1110:
+    if (!platform_events_initialized)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#324: FILE: tools/perf/util/parse-events.c:1110:
+    if (!platform_events_initialized)
+		platform_events_initialized =

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: tools/perf/util/parse-events.c:1114:
+    if (0 < platform_events_initialized) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#328: FILE: tools/perf/util/parse-events.c:1114:
+    if (0 < platform_events_initialized) {
+		for (i = 0; i < platform_event_count; ++i)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#328: FILE: tools/perf/util/parse-events.c:1114:
+    if (0 < platform_events_initialized) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: tools/perf/util/parse-events.c:1117:
+			printf("  %-42s [%s]\n",
+				platform_event_symbols[i].symbol,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#335: FILE: tools/perf/util/parse-events.c:1121:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000018918.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 8 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000018918.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
