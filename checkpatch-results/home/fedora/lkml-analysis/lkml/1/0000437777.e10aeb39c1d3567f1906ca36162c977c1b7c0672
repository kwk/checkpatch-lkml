WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
This patch consolidates the TCP & SCTP protocols for the DLM into a single file

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#45: 
Signed-off-By: Patrick Caulfield <pcaulfie@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: fs/dlm/Makefile:17:
+^I^I^I^Iutil.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#202: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2435: FILE: fs/dlm/lowcomms.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2436: FILE: fs/dlm/lowcomms.c:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'shouldbe' may be misspelled - perhaps 'should'?
#2475: FILE: fs/dlm/lowcomms.c:41:
+ * to 0 (default) for TCP or 1 for SCTP. It shouldbe configured using a
                                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2495: FILE: fs/dlm/lowcomms.c:61:
+#define NEEDED_RMEM (4*1024*1024)
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2495: FILE: fs/dlm/lowcomms.c:61:
+#define NEEDED_RMEM (4*1024*1024)
                            ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2515: FILE: fs/dlm/lowcomms.c:81:
+	cb->base = cb->len = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2516: FILE: fs/dlm/lowcomms.c:82:
+	cb->mask = size-1;
 	               ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2533: FILE: fs/dlm/lowcomms.c:99:
+	uint32_t nodeid;	/* So we know who we are in the list */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2543: FILE: fs/dlm/lowcomms.c:109:
+	int (*rx_action) (struct connection *);	/* What to do when active */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct connection *' should also have an identifier name
#2543: FILE: fs/dlm/lowcomms.c:109:
+	int (*rx_action) (struct connection *);	/* What to do when active */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#2544: FILE: fs/dlm/lowcomms.c:110:
+	void (*connect_action) (struct connection *);	/* What to do to connect */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct connection *' should also have an identifier name
#2544: FILE: fs/dlm/lowcomms.c:110:
+	void (*connect_action) (struct connection *);	/* What to do to connect */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2554: FILE: fs/dlm/lowcomms.c:120:
+};
+#define sock2con(x) ((struct connection *)(x)->sk_user_data)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2656: FILE: fs/dlm/lowcomms.c:222:
+	for (i=0; i<max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2656: FILE: fs/dlm/lowcomms.c:222:
+	for (i=0; i<max_nodeid; i++) {
 	           ^

CHECK:SPACING: No space is necessary after a cast
#2680: FILE: fs/dlm/lowcomms.c:246:
+		struct sockaddr_in *in4  = (struct sockaddr_in *) &addr;

CHECK:SPACING: No space is necessary after a cast
#2681: FILE: fs/dlm/lowcomms.c:247:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2682: FILE: fs/dlm/lowcomms.c:248:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;
+		ret4->sin_addr.s_addr = in4->sin_addr.s_addr;

CHECK:SPACING: No space is necessary after a cast
#2684: FILE: fs/dlm/lowcomms.c:250:
+		struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) &addr;

CHECK:SPACING: No space is necessary after a cast
#2685: FILE: fs/dlm/lowcomms.c:251:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2686: FILE: fs/dlm/lowcomms.c:252:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;
+		memcpy(&ret6->sin6_addr, &in6->sin6_addr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2697: FILE: fs/dlm/lowcomms.c:263:
+	struct connection *con = sock2con(sk);
+	if (!test_and_set_bit(CF_READ_PENDING, &con->flags))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2735: FILE: fs/dlm/lowcomms.c:301:
+/* Add the port number to an IPv6 or 4 sockaddr and return the address
+   length */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2735: FILE: fs/dlm/lowcomms.c:301:
+   length */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2742: FILE: fs/dlm/lowcomms.c:308:
+		struct sockaddr_in *in4_addr = (struct sockaddr_in *)saddr;
+		in4_addr->sin_port = cpu_to_be16(port);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2747: FILE: fs/dlm/lowcomms.c:313:
+		struct sockaddr_in6 *in6_addr = (struct sockaddr_in6 *)saddr;
+		in6_addr->sin6_port = cpu_to_be16(port);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2783: FILE: fs/dlm/lowcomms.c:349:
+	con = nodeid2con(0,0);
 	                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2784: FILE: fs/dlm/lowcomms.c:350:
+	BUG_ON(con == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con"
#2784: FILE: fs/dlm/lowcomms.c:350:
+	BUG_ON(con == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2810: FILE: fs/dlm/lowcomms.c:376:
+/* INIT failed but we don't know which node...
+   restart INIT on all pending nodes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2810: FILE: fs/dlm/lowcomms.c:376:
+   restart INIT on all pending nodes */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2817: FILE: fs/dlm/lowcomms.c:383:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#2817: FILE: fs/dlm/lowcomms.c:383:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2823: FILE: fs/dlm/lowcomms.c:389:
+			if (!test_and_set_bit(CF_WRITE_PENDING, &con->flags)) {
+				queue_work(send_workqueue, &con->swork);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2838: FILE: fs/dlm/lowcomms.c:404:
+		switch (sn->sn_assoc_change.sac_state) {
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2870: FILE: fs/dlm/lowcomms.c:436:
+						(char*)&prim,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#2874: FILE: fs/dlm/lowcomms.c:440:
+				log_print("getsockopt/sctp_primary_addr on "
+					  "new assoc %d failed : %d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2887: FILE: fs/dlm/lowcomms.c:453:
+				unsigned char *b=(unsigned char *)&prim.ssp_addr;
 				                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2888: FILE: fs/dlm/lowcomms.c:454:
+				unsigned char *b=(unsigned char *)&prim.ssp_addr;
+				log_print("reject connect from unknown addr");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2889: FILE: fs/dlm/lowcomms.c:455:
+				for (i=0; i<sizeof(struct sockaddr_storage);i++)
 				      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2889: FILE: fs/dlm/lowcomms.c:455:
+				for (i=0; i<sizeof(struct sockaddr_storage);i++)
 				           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2889: FILE: fs/dlm/lowcomms.c:455:
+				for (i=0; i<sizeof(struct sockaddr_storage);i++)
 				                                           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2890: FILE: fs/dlm/lowcomms.c:456:
+					printk("%02x ", b[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2891: FILE: fs/dlm/lowcomms.c:457:
+				printk("\n");

WARNING:LONG_LINE_STRING: line length of 107 exceeds 100 columns
#2905: FILE: fs/dlm/lowcomms.c:471:
+				log_print("Can't peel off a socket for connection %d to node %d: err=%d\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2922: FILE: fs/dlm/lowcomms.c:488:
+			if (!test_and_set_bit(CF_WRITE_PENDING, &new_con->flags)) {
+				queue_work(send_workqueue, &new_con->swork);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2934: FILE: fs/dlm/lowcomms.c:500:
+			if (con) {
+				con->sctp_assoc = 0;
+			}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2942: FILE: fs/dlm/lowcomms.c:508:
+		 * again */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2965: FILE: fs/dlm/lowcomms.c:531:
+	unsigned len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->sock"
#2973: FILE: fs/dlm/lowcomms.c:539:
+	if (con->sock == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->rx_page"
#2978: FILE: fs/dlm/lowcomms.c:544:
+	if (con->rx_page == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->rx_page"
#2984: FILE: fs/dlm/lowcomms.c:550:
+		if (con->rx_page == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3015: FILE: fs/dlm/lowcomms.c:581:
+	r = ret = kernel_recvmsg(con->sock, &msg, iov, nvec, len,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3022: FILE: fs/dlm/lowcomms.c:588:
+		BUG_ON(con->nodeid != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3031: FILE: fs/dlm/lowcomms.c:597:
+	BUG_ON(con->nodeid == 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3041: FILE: fs/dlm/lowcomms.c:607:
+		printk(KERN_INFO "dlm: lowcomms: addr=%p, base=%u, len=%u, "

WARNING:SPLIT_STRING: quoted string split across lines
#3042: FILE: fs/dlm/lowcomms.c:608:
+		printk(KERN_INFO "dlm: lowcomms: addr=%p, base=%u, len=%u, "
+		       "iov_len=%u, iov_base[0]=%p, read=%d\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->sock"
#3099: FILE: fs/dlm/lowcomms.c:665:
+	if (con->sock == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3120: FILE: fs/dlm/lowcomms.c:686:
+		printk("dlm: connect from non cluster node\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3145: FILE: fs/dlm/lowcomms.c:711:
+				printk("dlm: failed to allocate incoming socket\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3163: FILE: fs/dlm/lowcomms.c:729:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3163: FILE: fs/dlm/lowcomms.c:729:
+	else {

WARNING:TYPO_SPELLING: 'beween' may be misspelled - perhaps 'between'?
#3174: FILE: fs/dlm/lowcomms.c:740:
+	 * beween processing the accept adding the socket
 	   ^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3188: FILE: fs/dlm/lowcomms.c:754:
+		printk("dlm: error accepting connection from node: %d\n", result);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3199: FILE: fs/dlm/lowcomms.c:765:
+/* Initiate an SCTP association.
+   This is a special case of send_to_sock() in that we don't yet have a

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3230: FILE: fs/dlm/lowcomms.c:796:
+	BUG_ON(base_con == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base_con"
#3230: FILE: fs/dlm/lowcomms.c:796:
+	BUG_ON(base_con == NULL);

CHECK:SPACING: No space is necessary after a cast
#3244: FILE: fs/dlm/lowcomms.c:810:
+	BUG_ON((struct list_head *) e == &con->writequeue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3244: FILE: fs/dlm/lowcomms.c:810:
+	BUG_ON((struct list_head *) e == &con->writequeue);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3252: FILE: fs/dlm/lowcomms.c:818:
+	iov[0].iov_base = page_address(e->page)+offset;
 	                                       ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3272: FILE: fs/dlm/lowcomms.c:838:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#3272: FILE: fs/dlm/lowcomms.c:838:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3346: FILE: fs/dlm/lowcomms.c:912:
+	    result != -ENETDOWN && result != EINVAL
+	    && result != -EPROTONOSUPPORT) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#3353: FILE: fs/dlm/lowcomms.c:919:
+	return;
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3371: FILE: fs/dlm/lowcomms.c:937:
+		printk("dlm: Can't create listening comms socket\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3379: FILE: fs/dlm/lowcomms.c:945:
+		printk("dlm: Failed to set SO_REUSEADDR on socket: result=%d\n",

CHECK:SPACING: No space is necessary after a cast
#3389: FILE: fs/dlm/lowcomms.c:955:
+	result = sock->ops->bind(sock, (struct sockaddr *) saddr, addr_len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3391: FILE: fs/dlm/lowcomms.c:957:
+		printk("dlm: Can't bind to port %d\n", dlm_config.ci_tcp_port);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3398: FILE: fs/dlm/lowcomms.c:964:
+	result = kernel_setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE,
+				 (char *)&one, sizeof(one));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3399: FILE: fs/dlm/lowcomms.c:965:
+	if (result < 0) {
+		printk("dlm: Set keepalive failed: %d\n", result);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3400: FILE: fs/dlm/lowcomms.c:966:
+		printk("dlm: Set keepalive failed: %d\n", result);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3405: FILE: fs/dlm/lowcomms.c:971:
+		printk("dlm: Can't listen on port %d\n", dlm_config.ci_tcp_port);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#3434: FILE: fs/dlm/lowcomms.c:1000:
+static int add_sctp_bind_addr(struct connection *sctp_con, struct sockaddr_storage *addr, int addr_len, int num)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#3440: FILE: fs/dlm/lowcomms.c:1006:
+				     (struct sockaddr *) addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3485: FILE: fs/dlm/lowcomms.c:1051:
+	result = kernel_setsockopt(sock, SOL_SOCKET, SO_RCVBUF,
+				 (char *)&bufsize, sizeof(bufsize));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3490: FILE: fs/dlm/lowcomms.c:1056:
+	result = kernel_setsockopt(sock, SOL_SCTP, SCTP_EVENTS,
+				       (char *)&subscribe, sizeof(subscribe));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dlm_local_addr[1]"
#3540: FILE: fs/dlm/lowcomms.c:1106:
+	if (dlm_local_addr[1] != NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3554: FILE: fs/dlm/lowcomms.c:1120:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#3554: FILE: fs/dlm/lowcomms.c:1120:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3561: FILE: fs/dlm/lowcomms.c:1127:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct writequeue_entry)...)
#3568: FILE: fs/dlm/lowcomms.c:1134:
+	entry = kmalloc(sizeof(struct writequeue_entry), allocation);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&e->list == &con->writequeue'
#3601: FILE: fs/dlm/lowcomms.c:1167:
+	if ((&e->list == &con->writequeue) ||
+	    (PAGE_CACHE_SIZE - e->end < len)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INDENTED_LABEL: labels should not be indented
#3612: FILE: fs/dlm/lowcomms.c:1178:
+	got_one:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3646: FILE: fs/dlm/lowcomms.c:1212:
+	if (!test_and_set_bit(CF_WRITE_PENDING, &con->flags)) {
+		queue_work(send_workqueue, &con->swork);
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#3654: FILE: fs/dlm/lowcomms.c:1220:
+	return;
+}

WARNING:SPACING: missing space after return type
#3660: FILE: fs/dlm/lowcomms.c:1226:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3660: FILE: fs/dlm/lowcomms.c:1226:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#3660: FILE: fs/dlm/lowcomms.c:1226:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#3660: FILE: fs/dlm/lowcomms.c:1226:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3660: FILE: fs/dlm/lowcomms.c:1226:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3660: FILE: fs/dlm/lowcomms.c:1226:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3660: FILE: fs/dlm/lowcomms.c:1226:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->sock"
#3666: FILE: fs/dlm/lowcomms.c:1232:
+	if (con->sock == NULL)

CHECK:SPACING: No space is necessary after a cast
#3675: FILE: fs/dlm/lowcomms.c:1241:
+		if ((struct list_head *) e == &con->writequeue)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3680: FILE: fs/dlm/lowcomms.c:1246:
+		BUG_ON(len == 0 && e->users == 0);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3693: FILE: fs/dlm/lowcomms.c:1259:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#3693: FILE: fs/dlm/lowcomms.c:1259:
+		else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#3725: FILE: fs/dlm/lowcomms.c:1291:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3743: FILE: fs/dlm/lowcomms.c:1309:
+/* Called from recovery when it knows that a node has
+   left the cluster */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3743: FILE: fs/dlm/lowcomms.c:1309:
+   left the cluster */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3774: FILE: fs/dlm/lowcomms.c:1340:
+	if (test_and_clear_bit(CF_CONNECT_PENDING, &con->flags)) {
+		con->connect_action(con);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3781: FILE: fs/dlm/lowcomms.c:1347:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#3804: FILE: fs/dlm/lowcomms.c:1370:
+	int error;
+	recv_workqueue = create_workqueue("dlm_recv");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3828: FILE: fs/dlm/lowcomms.c:1394:
+	/* Set all the flags to prevent any
+	   socket activity.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3893: FILE: fs/dlm/lowcomms.c:1459:
+	con = nodeid2con(0,0);
 	                  ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 66 warnings, 37 checks, 1590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
