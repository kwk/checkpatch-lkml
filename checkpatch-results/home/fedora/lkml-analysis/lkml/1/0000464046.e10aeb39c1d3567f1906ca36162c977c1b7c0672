WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
If number of logical CPUs is less than number of HPET channels, HPET provides

WARNING:LINE_SPACING: Missing a blank line after declarations
#59: FILE: arch/x86_64/kernel/apic.c:799:
+		unsigned long v;
+		v = apic_read(APIC_LVTT);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#64: FILE: arch/x86_64/kernel/apic.c:804:
+		if ( smp_processor_id() == boot_cpu_id &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#65: FILE: arch/x86_64/kernel/apic.c:805:
+		if ( smp_processor_id() == boot_cpu_id &&
+				apic_runs_main_timer == 1 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: arch/x86_64/kernel/apic.c:812:
+		__setup_APIC_LVTT(calibration_result,
+				mode != CLOCK_EVT_MODE_PERIODIC);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: arch/x86_64/kernel/hpet.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: arch/x86_64/kernel/hpet.c:563:
+static unsigned int cpu_hpet_irq[NR_CPUS] = {[0 ... NR_CPUS-1] = -1};
                                                            ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#179: FILE: arch/x86_64/kernel/hpet.c:564:
+static unsigned int assigned_irqs_map = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#193: FILE: arch/x86_64/kernel/hpet.c:578:
+	if (cpu > NR_CPUS)

WARNING:TYPO_SPELLING: 'sharable' may be misspelled - perhaps 'shareable'?
#204: FILE: arch/x86_64/kernel/hpet.c:589:
+		 * TBD: Only use IOAPIC sharable interrupts
 		                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: arch/x86_64/kernel/hpet.c:600:
+		irq = find_first_bit((void *)&avail_irqs_map,
+				sizeof(unsigned int));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: arch/x86_64/kernel/hpet.c:645:
+	if (request_irq(dev->irq, hpet_normal_interrupt,
+		       IRQF_SHARED|IRQF_NOBALANCING, dev->name, dev)) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#260: FILE: arch/x86_64/kernel/hpet.c:645:
+		       IRQF_SHARED|IRQF_NOBALANCING, dev->name, dev)) {
 		                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: arch/x86_64/kernel/hpet.c:656:
+static void hpet_timer_setup(enum clock_event_mode mode,
+			struct clock_event_device *evt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: arch/x86_64/kernel/hpet.c:659:
+static int hpet_next_event(unsigned long delta,
+			struct clock_event_device *evt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: arch/x86_64/kernel/hpet.c:674:
+static void hpet_timer_setup(enum clock_event_mode mode,
+			struct clock_event_device *evt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: arch/x86_64/kernel/hpet.c:711:
+static int hpet_next_event(unsigned long delta,
+			struct clock_event_device *evt)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#349: FILE: arch/x86_64/kernel/hpet.c:734:
+	if (!(status & (0x1 << dev->num))) {
+		return IRQ_NONE;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#370: FILE: arch/x86_64/kernel/hpet.c:755:
+		printk("Spurious HPET timer interrupt on HPET timer %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: arch/x86_64/kernel/hpet.c:756:
+		printk("Spurious HPET timer interrupt on HPET timer %d\n",
+			       dev->num);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#385: FILE: arch/x86_64/kernel/hpet.c:770:
+static void __devinit setup_cpu_hpet_timer(void *param)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: arch/x86_64/kernel/hpet.c:794:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpu_hpet_dev"
#422: FILE: arch/x86_64/kernel/hpet.c:807:
+	if (cpu_hpet_dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#425: FILE: arch/x86_64/kernel/hpet.c:810:
+	printk("Dump percpu_timer %d, num_timers_used %d, num_timers %d\n", percpu_timer, num_timers_used, num_timers);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#425: FILE: arch/x86_64/kernel/hpet.c:810:
+	printk("Dump percpu_timer %d, num_timers_used %d, num_timers %d\n", percpu_timer, num_timers_used, num_timers);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#427: FILE: arch/x86_64/kernel/hpet.c:812:
+	hdev = kzalloc(sizeof(struct hpet_dev *) * num_timers_used, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hdev[i]->irq < 0'
#440: FILE: arch/x86_64/kernel/hpet.c:825:
+		if (hpet_assign_irq(hdev[i]) || (hdev[i]->irq < 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#441: FILE: arch/x86_64/kernel/hpet.c:826:
+			printk(KERN_DEBUG "HPET IRQ allocation failed\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#448: FILE: arch/x86_64/kernel/hpet.c:833:
+			num_timers_used = i-1;
 			                   ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#460: FILE: arch/x86_64/kernel/hpet.c:845:
+	for (i = 0; i < num_timers_used; i++) {
+		hdev[i]->flags &= (~HPET_DEV_FLAG_TEST);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#485: FILE: arch/x86_64/kernel/hpet.c:870:
+	printk(KERN_DEBUG "hpet max_delta_ns: %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: arch/x86_64/kernel/hpet.c:871:
+	printk(KERN_DEBUG "hpet max_delta_ns: %ld\n",
+			clockevent_hpet.max_delta_ns);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#487: FILE: arch/x86_64/kernel/hpet.c:872:
+	printk(KERN_DEBUG "hpet min_delta_ns: %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: arch/x86_64/kernel/hpet.c:873:
+	printk(KERN_DEBUG "hpet min_delta_ns: %ld\n",
+			clockevent_hpet.min_delta_ns);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#489: FILE: arch/x86_64/kernel/hpet.c:874:
+	printk(KERN_DEBUG "hpet mult: %ld\n", clockevent_hpet.mult);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: arch/x86_64/kernel/hpet.c:878:
+		on_each_cpu(setup_cpu_hpet_timer, (void *)HPET_PERCPU_EVENT,
+			       0, 1);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#540: FILE: arch/x86_64/kernel/hpet.c:925:
+		cfg &= ~(HPET_CFG_ENABLE|HPET_CFG_LEGACY);
 		                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: arch/x86_64/kernel/hpet.c:943:
+		int i;
+		for (i = 0; i < num_timers_used; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#560: FILE: arch/x86_64/kernel/hpet.c:945:
+			struct hpet_dev *hdev;
+			hdev = per_cpu_ptr(cpu_hpet_dev, i);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#592: FILE: arch/x86_64/kernel/hpet.c:976:
+	if (!hpet_address) {
[...]
+	} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#606: FILE: arch/x86_64/kernel/hpet.c:998:
+		printk(KERN_DEBUG "Successfully registered HPET eventsource\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#608: FILE: arch/x86_64/kernel/hpet.c:1000:
+		printk(KERN_DEBUG "HPET eventsource init failed\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: include/asm-x86_64/hpet.h:60:
+extern int hpet_timer_stop(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: include/asm-x86_64/hpet.h:61:
+extern int hpet_timer_reenable(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464046.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 21 warnings, 21 checks, 583 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464046.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
