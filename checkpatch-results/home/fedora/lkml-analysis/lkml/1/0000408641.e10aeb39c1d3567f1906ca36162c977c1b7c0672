WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: arch/i386/boot/boot.h:1:
+/* -*- linux-c -*- ------------------------------------------------------- *

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#66: FILE: arch/i386/boot/boot.h:9:
+ * ----------------------------------------------------------------------- */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#69: FILE: arch/i386/boot/boot.h:12:
+ * arch/i386/boot/boot.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxO)
#86: FILE: arch/i386/boot/boot.h:29:
+#define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'outb', this function's name, in a string
#94: FILE: arch/i386/boot/boot.h:37:
+	asm volatile("outb %0,%1" : : "a" (v), "dN" (port));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#96: FILE: arch/i386/boot/boot.h:39:
+}
+static inline u8 inb(u16 port)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#99: FILE: arch/i386/boot/boot.h:42:
+	u8 v;
+	asm volatile("inb %1,%0" : "=a" (v) : "dN" (port));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inb', this function's name, in a string
#99: FILE: arch/i386/boot/boot.h:42:
+	asm volatile("inb %1,%0" : "=a" (v) : "dN" (port));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'outw', this function's name, in a string
#105: FILE: arch/i386/boot/boot.h:48:
+	asm volatile("outw %0,%1" : : "a" (v), "dN" (port));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#107: FILE: arch/i386/boot/boot.h:50:
+}
+static inline u16 inw(u16 port)

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: arch/i386/boot/boot.h:53:
+	u16 v;
+	asm volatile("inw %1,%0" : "=a" (v) : "dN" (port));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inw', this function's name, in a string
#110: FILE: arch/i386/boot/boot.h:53:
+	asm volatile("inw %1,%0" : "=a" (v) : "dN" (port));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'outl', this function's name, in a string
#116: FILE: arch/i386/boot/boot.h:59:
+	asm volatile("outl %0,%1" : : "a" (v), "dn" (port));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#118: FILE: arch/i386/boot/boot.h:61:
+}
+static inline u32 inl(u32 port)

WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: arch/i386/boot/boot.h:64:
+	u32 v;
+	asm volatile("inl %1,%0" : "=a" (v) : "dN" (port));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inl', this function's name, in a string
#121: FILE: arch/i386/boot/boot.h:64:
+	asm volatile("inl %1,%0" : "=a" (v) : "dN" (port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#128: FILE: arch/i386/boot/boot.h:71:
+	const u16 DELAY_PORT = 0x80;
+	asm volatile("outb %%al,%0" : : "dN" (DELAY_PORT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: arch/i386/boot/boot.h:79:
+	u16 seg;
+	asm("movw %%ds,%0" : "=rm" (seg));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ds', this function's name, in a string
#136: FILE: arch/i386/boot/boot.h:79:
+	asm("movw %%ds,%0" : "=rm" (seg));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#144: FILE: arch/i386/boot/boot.h:87:
+}
+static inline u16 fs(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: arch/i386/boot/boot.h:90:
+	u16 seg;
+	asm("movw %%fs,%0" : "=rm" (seg));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fs', this function's name, in a string
#147: FILE: arch/i386/boot/boot.h:90:
+	asm("movw %%fs,%0" : "=rm" (seg));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#155: FILE: arch/i386/boot/boot.h:98:
+}
+static inline u16 gs(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: arch/i386/boot/boot.h:101:
+	u16 seg;
+	asm("movw %%gs,%0" : "=rm" (seg));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gs', this function's name, in a string
#158: FILE: arch/i386/boot/boot.h:101:
+	asm("movw %%gs,%0" : "=rm" (seg));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#162: FILE: arch/i386/boot/boot.h:105:
+typedef unsigned int addr_t;

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: arch/i386/boot/boot.h:110:
+	u8 v;
+	asm("movb %%fs:%1,%0" : "=r" (v) : "m" (*(u8 *)addr));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#170: FILE: arch/i386/boot/boot.h:113:
+}
+static inline u16 rdfs16(addr_t addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: arch/i386/boot/boot.h:116:
+	u16 v;
+	asm("movw %%fs:%1,%0" : "=r" (v) : "m" (*(u16 *)addr));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#176: FILE: arch/i386/boot/boot.h:119:
+}
+static inline u32 rdfs32(addr_t addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#179: FILE: arch/i386/boot/boot.h:122:
+	u32 v;
+	asm("movl %%fs:%1,%0" : "=r" (v) : "m" (*(u32 *)addr));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#187: FILE: arch/i386/boot/boot.h:130:
+}
+static inline void wrfs16(u16 v, addr_t addr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#191: FILE: arch/i386/boot/boot.h:134:
+}
+static inline void wrfs32(u32 v, addr_t addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#199: FILE: arch/i386/boot/boot.h:142:
+	u8 v;
+	asm("movb %%gs:%1,%0" : "=r" (v) : "m" (*(u8 *)addr));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#202: FILE: arch/i386/boot/boot.h:145:
+}
+static inline u16 rdgs16(addr_t addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: arch/i386/boot/boot.h:148:
+	u16 v;
+	asm("movw %%gs:%1,%0" : "=r" (v) : "m" (*(u16 *)addr));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#208: FILE: arch/i386/boot/boot.h:151:
+}
+static inline u32 rdgs32(addr_t addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: arch/i386/boot/boot.h:154:
+	u32 v;
+	asm("movl %%gs:%1,%0" : "=r" (v) : "m" (*(u32 *)addr));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#219: FILE: arch/i386/boot/boot.h:162:
+}
+static inline void wrgs16(u16 v, addr_t addr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#223: FILE: arch/i386/boot/boot.h:166:
+}
+static inline void wrgs32(u32 v, addr_t addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#232: FILE: arch/i386/boot/boot.h:175:
+	u8 diff;
+	asm("repe; cmpsb; setnz %0"

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: arch/i386/boot/boot.h:183:
+	u8 diff;
+	asm("fs; repe; cmpsb; setnz %0"

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#244: FILE: arch/i386/boot/boot.h:187:
+}
+static inline int memcmp_gs(const void *s1, addr_t s2, size_t len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#247: FILE: arch/i386/boot/boot.h:190:
+	u8 diff;
+	asm("gs; repe; cmpsb; setnz %0"

ERROR:SPACING: space prohibited after that open parenthesis '('
#258: FILE: arch/i386/boot/boot.h:201:
+#define RESET_HEAP() ((void *)( HEAP = _end ))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#258: FILE: arch/i386/boot/boot.h:201:
+#define RESET_HEAP() ((void *)( HEAP = _end ))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: arch/i386/boot/boot.h:206:
+	HEAP = (char *)(((size_t)HEAP+(a-1)) & ~(a-1));
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#263: FILE: arch/i386/boot/boot.h:206:
+	HEAP = (char *)(((size_t)HEAP+(a-1)) & ~(a-1));
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#263: FILE: arch/i386/boot/boot.h:206:
+	HEAP = (char *)(((size_t)HEAP+(a-1)) & ~(a-1));
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#265: FILE: arch/i386/boot/boot.h:208:
+	HEAP += s*n;
 	         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#268: FILE: arch/i386/boot/boot.h:211:
+}
+#define GET_HEAP(type, n) \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: arch/i386/boot/boot.h:212:
+	((type *)__get_heap(sizeof(type),__alignof__(type),(n)))
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: arch/i386/boot/boot.h:212:
+	((type *)__get_heap(sizeof(type),__alignof__(type),(n)))
 	                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#273: FILE: arch/i386/boot/boot.h:216:
+	return heap_end-HEAP;
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: arch/i386/boot/boot.h:228:
+#define memcpy(d,s,l) __builtin_memcpy(d,s,l)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: arch/i386/boot/boot.h:228:
+#define memcpy(d,s,l) __builtin_memcpy(d,s,l)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: arch/i386/boot/boot.h:228:
+#define memcpy(d,s,l) __builtin_memcpy(d,s,l)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: arch/i386/boot/boot.h:228:
+#define memcpy(d,s,l) __builtin_memcpy(d,s,l)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: arch/i386/boot/boot.h:229:
+#define memset(d,c,l) __builtin_memset(d,c,l)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: arch/i386/boot/boot.h:229:
+#define memset(d,c,l) __builtin_memset(d,c,l)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: arch/i386/boot/boot.h:229:
+#define memset(d,c,l) __builtin_memset(d,c,l)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: arch/i386/boot/boot.h:229:
+#define memset(d,c,l) __builtin_memset(d,c,l)
                                           ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#305: FILE: arch/i386/boot/boot.h:248:
+void __attribute__((noreturn)) die(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#305: FILE: arch/i386/boot/boot.h:248:
+void __attribute__((noreturn)) die(void);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#314: FILE: arch/i386/boot/boot.h:257:
+void __attribute__((noreturn)) go_to_protected_mode(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#314: FILE: arch/i386/boot/boot.h:257:
+void __attribute__((noreturn)) go_to_protected_mode(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#317: FILE: arch/i386/boot/boot.h:260:
+void __attribute__((noreturn))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#330: FILE: arch/i386/boot/boot.h:273:
+void puts(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#331: FILE: arch/i386/boot/boot.h:274:
+void putchar(int);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408641.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 37 warnings, 21 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408641.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
