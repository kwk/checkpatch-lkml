CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#104: FILE: fs/udf/balloc.c:158:
+	    (bloc.logicalBlockNum + count) > UDF_SB_PARTLEN(sb, bloc.partitionReferenceNum)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <partitionReferenceNum>
#104: FILE: fs/udf/balloc.c:158:
+	    (bloc.logicalBlockNum + count) > UDF_SB_PARTLEN(sb, bloc.partitionReferenceNum)) {

CHECK:CAMELCASE: Avoid CamelCase: <spaceBitmapDesc>
#114: FILE: fs/udf/balloc.c:165:
+	block = bloc.logicalBlockNum + offset + (sizeof(struct spaceBitmapDesc) << 3);

CHECK:CAMELCASE: Avoid CamelCase: <freeSpaceTable>
#138: FILE: fs/udf/balloc.c:192:
+				UDF_SB_LVID(sb)->freeSpaceTable[UDF_SB_PARTITION(sb)] =

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#139: FILE: fs/udf/balloc.c:193:
+					cpu_to_le32(le32_to_cpu(UDF_SB_LVID(sb)->freeSpaceTable[UDF_SB_PARTITION(sb)]) + 1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#187: FILE: fs/udf/balloc.c:266:
+			cpu_to_le32(le32_to_cpu(UDF_SB_LVID(sb)->freeSpaceTable[partition]) - alloc_count);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#226: FILE: fs/udf/balloc.c:315:
+		ptr = memscan((char *)bh->b_data + (bit >> 3), 0xFF, sb->s_blocksize - ((bit + 7) >> 3));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#282: FILE: fs/udf/balloc.c:368:
+	for (i = 0; i < 7 && bit > (group_start << 3) && udf_test_bit(bit - 1, bh->b_data); i++, bit--)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#345: FILE: fs/udf/balloc.c:437:
+			cpu_to_le32(le32_to_cpu(UDF_SB_LVID(sb)->freeSpaceTable[UDF_SB_PARTITION(sb)]) + count);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#401: FILE: fs/udf/balloc.c:466:
+				eloc.logicalBlockNum -= ((0x3FFFFFFF - elen) >> sb->s_blocksize_bits);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#473: FILE: fs/udf/balloc.c:534:
+			if (!(epos.bh = udf_tread(sb, udf_get_lb_pblock(sb, epos.block, 0)))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <previousAllocExtLocation>
#480: FILE: fs/udf/balloc.c:539:
+			aed->previousAllocExtLocation = cpu_to_le32(oepos.block.logicalBlockNum);

CHECK:CAMELCASE: Avoid CamelCase: <allocExtDesc>
#492: FILE: fs/udf/balloc.c:546:
+				dptr = epos.bh->b_data + sizeof(struct allocExtDesc);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#513: FILE: fs/udf/balloc.c:558:
+						cpu_to_le32(le32_to_cpu(aed->lengthAllocDescs) + adsize);

CHECK:CAMELCASE: Avoid CamelCase: <lengthAllocDescs>
#513: FILE: fs/udf/balloc.c:558:
+						cpu_to_le32(le32_to_cpu(aed->lengthAllocDescs) + adsize);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#532: FILE: fs/udf/balloc.c:571:
 			switch (UDF_I_ALLOCTYPE(table)) {
+				case ICBTAG_FLAG_AD_SHORT:
[...]
+				case ICBTAG_FLAG_AD_LONG:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#545: FILE: fs/udf/balloc.c:574:
+					sad->extLength = cpu_to_le32(

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#545: FILE: fs/udf/balloc.c:574:
+					sad->extLength = cpu_to_le32(

CHECK:CAMELCASE: Avoid CamelCase: <extPosition>
#548: FILE: fs/udf/balloc.c:577:
+					sad->extPosition = cpu_to_le32(epos.block.logicalBlockNum);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#562: FILE: fs/udf/balloc.c:581:
+					lad->extLength = cpu_to_le32(

CHECK:CAMELCASE: Avoid CamelCase: <extLocation>
#565: FILE: fs/udf/balloc.c:584:
+					lad->extLocation = cpu_to_lelb(epos.block);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#631: FILE: fs/udf/balloc.c:659:
+		if (inode && DQUOT_PREALLOC_BLOCK(inode, alloc_count > block_count ? block_count : alloc_count)) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#659: FILE: fs/udf/balloc.c:677:
+			cpu_to_le32(le32_to_cpu(UDF_SB_LVID(sb)->freeSpaceTable[partition]) - alloc_count);

ERROR:CODE_INDENT: code indent should use tabs where possible
#868: FILE: fs/udf/dir.c:95:
+ ^Ireturn result;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#868: FILE: fs/udf/dir.c:95:
+ ^Ireturn result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: fs/udf/dir.c:95:
+ ^Ireturn result;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#879: FILE: fs/udf/dir.c:127:
+	fibh.soffset = fibh.eoffset = (nf_pos & ((dir->i_sb->s_blocksize - 1) >> 2)) << 2;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <fileIdentDesc>
#941: FILE: fs/udf/dir.c:191:
+			poffset = fibh.soffset + sizeof(struct fileIdentDesc) + liu + lfi;

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: fs/udf/dir.c:233:
+^I ^I^I^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#966: FILE: fs/udf/dir.c:233:
+^I ^I^I^Ireturn 0;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fibh->eoffset
#1016: FILE: fs/udf/directory.c:89:
+				       dir->i_sb->s_blocksize, &(fibh->eoffset));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '-' (ctx:VxO)
#1041: FILE: fs/udf/directory.c:125:
+				i = (*elen >> dir->i_sb->s_blocksize_bits)-*offset;
 				                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <lengthFileIdent>
#1078: FILE: fs/udf/directory.c:185:
+			fi_len = (sizeof(struct fileIdentDesc) + cfi->lengthFileIdent +

CHECK:CAMELCASE: Avoid CamelCase: <lengthOfImpUse>
#1079: FILE: fs/udf/directory.c:186:
+				  le16_to_cpu(cfi->lengthOfImpUse) + 3) & ~3;

CHECK:CAMELCASE: Avoid CamelCase: <extendedAttr>
#1111: FILE: fs/udf/directory.c:261:
+	ptr = (uint8_t *)(fe->extendedAttr) + le32_to_cpu(fe->lengthExtendedAttr);

CHECK:CAMELCASE: Avoid CamelCase: <lengthExtendedAttr>
#1111: FILE: fs/udf/directory.c:261:
+	ptr = (uint8_t *)(fe->extendedAttr) + le32_to_cpu(fe->lengthExtendedAttr);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1126: FILE: fs/udf/directory.c:274:
+short_ad *udf_get_fileshortad(uint8_t *ptr, int maxoffset, int *offset,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1135: FILE: fs/udf/directory.c:286:
+	else if ((sa = (short_ad *)ptr)->extLength == 0)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1144: FILE: fs/udf/directory.c:294:
+long_ad *udf_get_filelongad(uint8_t *ptr, int maxoffset, int *offset, int inc)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1153: FILE: fs/udf/directory.c:305:
+	else if ((la = (long_ad *)ptr)->extLength == 0)

CHECK:CAMELCASE: Avoid CamelCase: <charSetType>
#1167: FILE: fs/udf/ecma_167.h:42:
+	uint8_t		charSetType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1167: FILE: fs/udf/ecma_167.h:42:
+	uint8_t		charSetType;

CHECK:CAMELCASE: Avoid CamelCase: <charSetInfo>
#1168: FILE: fs/udf/ecma_167.h:43:
+	uint8_t		charSetInfo[63];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1168: FILE: fs/udf/ecma_167.h:43:
+	uint8_t		charSetInfo[63];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1177: FILE: fs/udf/ecma_167.h:57:
+typedef uint8_t		dstring;

CHECK:CAMELCASE: Avoid CamelCase: <typeAndTimezone>
#1191: FILE: fs/udf/ecma_167.h:61:
+	__le16		typeAndTimezone;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1193: FILE: fs/udf/ecma_167.h:63:
+	uint8_t		month;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1194: FILE: fs/udf/ecma_167.h:64:
+	uint8_t		day;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1195: FILE: fs/udf/ecma_167.h:65:
+	uint8_t		hour;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1196: FILE: fs/udf/ecma_167.h:66:
+	uint8_t		minute;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1197: FILE: fs/udf/ecma_167.h:67:
+	uint8_t		second;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1198: FILE: fs/udf/ecma_167.h:68:
+	uint8_t		centiseconds;

CHECK:CAMELCASE: Avoid CamelCase: <hundredsOfMicroseconds>
#1199: FILE: fs/udf/ecma_167.h:69:
+	uint8_t		hundredsOfMicroseconds;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1199: FILE: fs/udf/ecma_167.h:69:
+	uint8_t		hundredsOfMicroseconds;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1200: FILE: fs/udf/ecma_167.h:70:
+	uint8_t		microseconds;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1214: FILE: fs/udf/ecma_167.h:74:
+	uint16_t	typeAndTimezone;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#1215: FILE: fs/udf/ecma_167.h:75:
+	int16_t		year;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1216: FILE: fs/udf/ecma_167.h:76:
+	uint8_t		month;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1217: FILE: fs/udf/ecma_167.h:77:
+	uint8_t		day;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1218: FILE: fs/udf/ecma_167.h:78:
+	uint8_t		hour;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1219: FILE: fs/udf/ecma_167.h:79:
+	uint8_t		minute;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1220: FILE: fs/udf/ecma_167.h:80:
+	uint8_t		second;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1221: FILE: fs/udf/ecma_167.h:81:
+	uint8_t		centiseconds;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1222: FILE: fs/udf/ecma_167.h:82:
+	uint8_t		hundredsOfMicroseconds;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1223: FILE: fs/udf/ecma_167.h:83:
+	uint8_t		microseconds;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1234: FILE: fs/udf/ecma_167.h:95:
+	uint8_t		flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1235: FILE: fs/udf/ecma_167.h:96:
+	uint8_t		ident[23];

CHECK:CAMELCASE: Avoid CamelCase: <identSuffix>
#1236: FILE: fs/udf/ecma_167.h:97:
+	uint8_t		identSuffix[8];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1236: FILE: fs/udf/ecma_167.h:97:
+	uint8_t		identSuffix[8];

CHECK:CAMELCASE: Avoid CamelCase: <structType>
#1248: FILE: fs/udf/ecma_167.h:107:
+	uint8_t		structType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1248: FILE: fs/udf/ecma_167.h:107:
+	uint8_t		structType;

CHECK:CAMELCASE: Avoid CamelCase: <stdIdent>
#1249: FILE: fs/udf/ecma_167.h:108:
+	uint8_t		stdIdent[VSD_STD_ID_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1249: FILE: fs/udf/ecma_167.h:108:
+	uint8_t		stdIdent[VSD_STD_ID_LEN];

CHECK:CAMELCASE: Avoid CamelCase: <structVersion>
#1250: FILE: fs/udf/ecma_167.h:109:
+	uint8_t		structVersion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1250: FILE: fs/udf/ecma_167.h:109:
+	uint8_t		structVersion;

CHECK:CAMELCASE: Avoid CamelCase: <structData>
#1251: FILE: fs/udf/ecma_167.h:110:
+	uint8_t		structData[2041];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1251: FILE: fs/udf/ecma_167.h:110:
+	uint8_t		structData[2041];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1263: FILE: fs/udf/ecma_167.h:126:
+	uint8_t		structType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1264: FILE: fs/udf/ecma_167.h:127:
+	uint8_t		stdIdent[VSD_STD_ID_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1265: FILE: fs/udf/ecma_167.h:128:
+	uint8_t		structVersion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1266: FILE: fs/udf/ecma_167.h:129:
+	uint8_t		structData[2041];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1275: FILE: fs/udf/ecma_167.h:134:
+	uint8_t		structType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1276: FILE: fs/udf/ecma_167.h:135:
+	uint8_t		stdIdent[VSD_STD_ID_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1277: FILE: fs/udf/ecma_167.h:136:
+	uint8_t		structVersion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1278: FILE: fs/udf/ecma_167.h:137:
+	uint8_t		structData[2041];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1297: FILE: fs/udf/ecma_167.h:142:
+	uint8_t		structType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1298: FILE: fs/udf/ecma_167.h:143:
+	uint8_t		stdIdent[VSD_STD_ID_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1299: FILE: fs/udf/ecma_167.h:144:
+	uint8_t		structVersion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1300: FILE: fs/udf/ecma_167.h:145:
+	uint8_t		reserved1;

WARNING:TYPO_SPELLING: 'archType' may be misspelled - perhaps 'archetype'?
#1301: FILE: fs/udf/ecma_167.h:146:
+	regid		archType;
 	     		^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <archType>
#1301: FILE: fs/udf/ecma_167.h:146:
+	regid		archType;

CHECK:CAMELCASE: Avoid CamelCase: <bootIdent>
#1302: FILE: fs/udf/ecma_167.h:147:
+	regid		bootIdent;

CHECK:CAMELCASE: Avoid CamelCase: <bootExtLocation>
#1303: FILE: fs/udf/ecma_167.h:148:
+	__le32		bootExtLocation;

CHECK:CAMELCASE: Avoid CamelCase: <bootExtLength>
#1304: FILE: fs/udf/ecma_167.h:149:
+	__le32		bootExtLength;

CHECK:CAMELCASE: Avoid CamelCase: <loadAddress>
#1305: FILE: fs/udf/ecma_167.h:150:
+	__le64		loadAddress;

CHECK:CAMELCASE: Avoid CamelCase: <startAddress>
#1306: FILE: fs/udf/ecma_167.h:151:
+	__le64		startAddress;

CHECK:CAMELCASE: Avoid CamelCase: <descCreationDateAndTime>
#1307: FILE: fs/udf/ecma_167.h:152:
+	timestamp	descCreationDateAndTime;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1309: FILE: fs/udf/ecma_167.h:154:
+	uint8_t		reserved2[32];

CHECK:CAMELCASE: Avoid CamelCase: <bootUse>
#1310: FILE: fs/udf/ecma_167.h:155:
+	uint8_t		bootUse[1906];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1310: FILE: fs/udf/ecma_167.h:155:
+	uint8_t		bootUse[1906];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1327: FILE: fs/udf/ecma_167.h:168:
+	uint32_t	extLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1328: FILE: fs/udf/ecma_167.h:169:
+	uint32_t	extLocation;

CHECK:CAMELCASE: Avoid CamelCase: <tagIdent>
#1341: FILE: fs/udf/ecma_167.h:174:
+	__le16		tagIdent;

CHECK:CAMELCASE: Avoid CamelCase: <descVersion>
#1342: FILE: fs/udf/ecma_167.h:175:
+	__le16		descVersion;

CHECK:CAMELCASE: Avoid CamelCase: <tagChecksum>
#1343: FILE: fs/udf/ecma_167.h:176:
+	uint8_t		tagChecksum;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1343: FILE: fs/udf/ecma_167.h:176:
+	uint8_t		tagChecksum;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1344: FILE: fs/udf/ecma_167.h:177:
+	uint8_t		reserved;

CHECK:CAMELCASE: Avoid CamelCase: <tagSerialNum>
#1345: FILE: fs/udf/ecma_167.h:178:
+	__le16		tagSerialNum;

CHECK:CAMELCASE: Avoid CamelCase: <descCRC>
#1346: FILE: fs/udf/ecma_167.h:179:
+	__le16		descCRC;

CHECK:CAMELCASE: Avoid CamelCase: <descCRCLength>
#1347: FILE: fs/udf/ecma_167.h:180:
+	__le16		descCRCLength;

CHECK:CAMELCASE: Avoid CamelCase: <tagLocation>
#1348: FILE: fs/udf/ecma_167.h:181:
+	__le32		tagLocation;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1361: FILE: fs/udf/ecma_167.h:197:
+	uint8_t		structType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1362: FILE: fs/udf/ecma_167.h:198:
+	uint8_t		stdIdent[VSD_STD_ID_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1363: FILE: fs/udf/ecma_167.h:199:
+	uint8_t		structVersion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1364: FILE: fs/udf/ecma_167.h:200:
+	uint8_t		reserved;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1365: FILE: fs/udf/ecma_167.h:201:
+	uint8_t		structData[2040];

CHECK:CAMELCASE: Avoid CamelCase: <descTag>
#1392: FILE: fs/udf/ecma_167.h:206:
+	tag		descTag;

CHECK:CAMELCASE: Avoid CamelCase: <volDescSeqNum>
#1393: FILE: fs/udf/ecma_167.h:207:
+	__le32		volDescSeqNum;

CHECK:CAMELCASE: Avoid CamelCase: <primaryVolDescNum>
#1394: FILE: fs/udf/ecma_167.h:208:
+	__le32		primaryVolDescNum;

CHECK:CAMELCASE: Avoid CamelCase: <volIdent>
#1395: FILE: fs/udf/ecma_167.h:209:
+	dstring		volIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <volSeqNum>
#1396: FILE: fs/udf/ecma_167.h:210:
+	__le16		volSeqNum;

CHECK:CAMELCASE: Avoid CamelCase: <maxVolSeqNum>
#1397: FILE: fs/udf/ecma_167.h:211:
+	__le16		maxVolSeqNum;

CHECK:CAMELCASE: Avoid CamelCase: <interchangeLvl>
#1398: FILE: fs/udf/ecma_167.h:212:
+	__le16		interchangeLvl;

CHECK:CAMELCASE: Avoid CamelCase: <maxInterchangeLvl>
#1399: FILE: fs/udf/ecma_167.h:213:
+	__le16		maxInterchangeLvl;

CHECK:CAMELCASE: Avoid CamelCase: <charSetList>
#1400: FILE: fs/udf/ecma_167.h:214:
+	__le32		charSetList;

CHECK:CAMELCASE: Avoid CamelCase: <maxCharSetList>
#1401: FILE: fs/udf/ecma_167.h:215:
+	__le32		maxCharSetList;

CHECK:CAMELCASE: Avoid CamelCase: <volSetIdent>
#1402: FILE: fs/udf/ecma_167.h:216:
+	dstring		volSetIdent[128];

CHECK:CAMELCASE: Avoid CamelCase: <descCharSet>
#1403: FILE: fs/udf/ecma_167.h:217:
+	charspec	descCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <explanatoryCharSet>
#1404: FILE: fs/udf/ecma_167.h:218:
+	charspec	explanatoryCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <volAbstract>
#1405: FILE: fs/udf/ecma_167.h:219:
+	extent_ad	volAbstract;

CHECK:CAMELCASE: Avoid CamelCase: <volCopyright>
#1406: FILE: fs/udf/ecma_167.h:220:
+	extent_ad	volCopyright;

CHECK:CAMELCASE: Avoid CamelCase: <appIdent>
#1407: FILE: fs/udf/ecma_167.h:221:
+	regid		appIdent;

CHECK:CAMELCASE: Avoid CamelCase: <recordingDateAndTime>
#1408: FILE: fs/udf/ecma_167.h:222:
+	timestamp	recordingDateAndTime;

CHECK:CAMELCASE: Avoid CamelCase: <impIdent>
#1409: FILE: fs/udf/ecma_167.h:223:
+	regid		impIdent;

CHECK:CAMELCASE: Avoid CamelCase: <impUse>
#1410: FILE: fs/udf/ecma_167.h:224:
+	uint8_t		impUse[64];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1410: FILE: fs/udf/ecma_167.h:224:
+	uint8_t		impUse[64];

CHECK:CAMELCASE: Avoid CamelCase: <predecessorVolDescSeqLocation>
#1411: FILE: fs/udf/ecma_167.h:225:
+	__le32		predecessorVolDescSeqLocation;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1413: FILE: fs/udf/ecma_167.h:227:
+	uint8_t		reserved[22];

CHECK:CAMELCASE: Avoid CamelCase: <mainVolDescSeqExt>
#1426: FILE: fs/udf/ecma_167.h:236:
+	extent_ad	mainVolDescSeqExt;

CHECK:CAMELCASE: Avoid CamelCase: <reserveVolDescSeqExt>
#1427: FILE: fs/udf/ecma_167.h:237:
+	extent_ad	reserveVolDescSeqExt;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1428: FILE: fs/udf/ecma_167.h:238:
+^Iuint8_t^I ^Ireserved[480];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1428: FILE: fs/udf/ecma_167.h:238:
+	uint8_t	 	reserved[480];

CHECK:CAMELCASE: Avoid CamelCase: <nextVolDescSeqExt>
#1439: FILE: fs/udf/ecma_167.h:245:
+	extent_ad	nextVolDescSeqExt;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1440: FILE: fs/udf/ecma_167.h:246:
+	uint8_t		reserved[484];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1452: FILE: fs/udf/ecma_167.h:254:
+	uint8_t		impUse[460];

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIdent>
#1476: FILE: fs/udf/ecma_167.h:297:
+	dstring		logicalVolIdent[128];

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockSize>
#1477: FILE: fs/udf/ecma_167.h:298:
+	__le32		logicalBlockSize;

CHECK:CAMELCASE: Avoid CamelCase: <domainIdent>
#1478: FILE: fs/udf/ecma_167.h:299:
+	regid		domainIdent;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolContentsUse>
#1479: FILE: fs/udf/ecma_167.h:300:
+	uint8_t		logicalVolContentsUse[16];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1479: FILE: fs/udf/ecma_167.h:300:
+	uint8_t		logicalVolContentsUse[16];

CHECK:CAMELCASE: Avoid CamelCase: <mapTableLength>
#1480: FILE: fs/udf/ecma_167.h:301:
+	__le32		mapTableLength;

CHECK:CAMELCASE: Avoid CamelCase: <numPartitionMaps>
#1481: FILE: fs/udf/ecma_167.h:302:
+	__le32		numPartitionMaps;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1483: FILE: fs/udf/ecma_167.h:304:
+	uint8_t		impUse[128];

CHECK:CAMELCASE: Avoid CamelCase: <integritySeqExt>
#1484: FILE: fs/udf/ecma_167.h:305:
+	extent_ad	integritySeqExt;

CHECK:CAMELCASE: Avoid CamelCase: <partitionMaps>
#1485: FILE: fs/udf/ecma_167.h:306:
+	uint8_t		partitionMaps[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1485: FILE: fs/udf/ecma_167.h:306:
+	uint8_t		partitionMaps[0];

CHECK:CAMELCASE: Avoid CamelCase: <partitionMapType>
#1493: FILE: fs/udf/ecma_167.h:311:
+	uint8_t		partitionMapType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1493: FILE: fs/udf/ecma_167.h:311:
+	uint8_t		partitionMapType;

CHECK:CAMELCASE: Avoid CamelCase: <partitionMapLength>
#1494: FILE: fs/udf/ecma_167.h:312:
+	uint8_t		partitionMapLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1494: FILE: fs/udf/ecma_167.h:312:
+	uint8_t		partitionMapLength;

CHECK:CAMELCASE: Avoid CamelCase: <partitionMapping>
#1495: FILE: fs/udf/ecma_167.h:313:
+	uint8_t		partitionMapping[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1495: FILE: fs/udf/ecma_167.h:313:
+	uint8_t		partitionMapping[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1507: FILE: fs/udf/ecma_167.h:323:
+	uint8_t		partitionMapType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1508: FILE: fs/udf/ecma_167.h:324:
+	uint8_t		partitionMapLength;

CHECK:CAMELCASE: Avoid CamelCase: <partitionNum>
#1510: FILE: fs/udf/ecma_167.h:326:
+	__le16		partitionNum;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1518: FILE: fs/udf/ecma_167.h:331:
+	uint8_t		partitionMapType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1519: FILE: fs/udf/ecma_167.h:332:
+	uint8_t		partitionMapLength;

CHECK:CAMELCASE: Avoid CamelCase: <partitionIdent>
#1520: FILE: fs/udf/ecma_167.h:333:
+	uint8_t		partitionIdent[62];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1520: FILE: fs/udf/ecma_167.h:333:
+	uint8_t		partitionIdent[62];

CHECK:CAMELCASE: Avoid CamelCase: <numAllocDescs>
#1531: FILE: fs/udf/ecma_167.h:340:
+	__le32		numAllocDescs;

CHECK:CAMELCASE: Avoid CamelCase: <allocDescs>
#1532: FILE: fs/udf/ecma_167.h:341:
+	extent_ad	allocDescs[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1540: FILE: fs/udf/ecma_167.h:347:
+	uint8_t		reserved[496];

CHECK:CAMELCASE: Avoid CamelCase: <integrityType>
#1557: FILE: fs/udf/ecma_167.h:354:
+	__le32		integrityType;

CHECK:CAMELCASE: Avoid CamelCase: <nextIntegrityExt>
#1558: FILE: fs/udf/ecma_167.h:355:
+	extent_ad	nextIntegrityExt;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1559: FILE: fs/udf/ecma_167.h:356:
+	uint8_t		logicalVolContentsUse[32];

CHECK:CAMELCASE: Avoid CamelCase: <numOfPartitions>
#1560: FILE: fs/udf/ecma_167.h:357:
+	__le32		numOfPartitions;

CHECK:CAMELCASE: Avoid CamelCase: <sizeTable>
#1563: FILE: fs/udf/ecma_167.h:360:
+	__le32		sizeTable[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1564: FILE: fs/udf/ecma_167.h:361:
+	uint8_t		impUse[0];

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1575: FILE: fs/udf/ecma_167.h:371:
+^I__le16^I ^IpartitionReferenceNum;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1582: FILE: fs/udf/ecma_167.h:376:
+	uint32_t		logicalBlockNum;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1583: FILE: fs/udf/ecma_167.h:377:
+^Iuint16_t^I ^IpartitionReferenceNum;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1583: FILE: fs/udf/ecma_167.h:377:
+	uint16_t	 	partitionReferenceNum;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1590: FILE: fs/udf/ecma_167.h:382:
+        __le32^I^IextLength;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1590: FILE: fs/udf/ecma_167.h:382:
+        __le32^I^IextLength;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1591: FILE: fs/udf/ecma_167.h:383:
+        __le32^I^IextPosition;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1591: FILE: fs/udf/ecma_167.h:383:
+        __le32^I^IextPosition;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1601: FILE: fs/udf/ecma_167.h:390:
+	uint8_t		impUse[6];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1608: FILE: fs/udf/ecma_167.h:394:
+	uint32_t	extLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1610: FILE: fs/udf/ecma_167.h:396:
+	uint8_t		impUse[6];

CHECK:CAMELCASE: Avoid CamelCase: <recordedLength>
#1620: FILE: fs/udf/ecma_167.h:402:
+	__le32		recordedLength;

CHECK:CAMELCASE: Avoid CamelCase: <informationLength>
#1621: FILE: fs/udf/ecma_167.h:403:
+	__le32		informationLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1630: FILE: fs/udf/ecma_167.h:408:
+	uint32_t	extLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1631: FILE: fs/udf/ecma_167.h:409:
+	uint32_t	recordedLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1632: FILE: fs/udf/ecma_167.h:410:
+	uint32_t	informationLength;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetNum>
#1666: FILE: fs/udf/ecma_167.h:437:
+	__le32		fileSetNum;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetDescNum>
#1667: FILE: fs/udf/ecma_167.h:438:
+	__le32		fileSetDescNum;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIdentCharSet>
#1668: FILE: fs/udf/ecma_167.h:439:
+	charspec	logicalVolIdentCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetCharSet>
#1670: FILE: fs/udf/ecma_167.h:441:
+	charspec	fileSetCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetIdent>
#1671: FILE: fs/udf/ecma_167.h:442:
+	dstring		fileSetIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <copyrightFileIdent>
#1672: FILE: fs/udf/ecma_167.h:443:
+	dstring		copyrightFileIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <abstractFileIdent>
#1673: FILE: fs/udf/ecma_167.h:444:
+	dstring		abstractFileIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <rootDirectoryICB>
#1674: FILE: fs/udf/ecma_167.h:445:
+	long_ad		rootDirectoryICB;

CHECK:CAMELCASE: Avoid CamelCase: <nextExt>
#1676: FILE: fs/udf/ecma_167.h:447:
+	long_ad		nextExt;

CHECK:CAMELCASE: Avoid CamelCase: <streamDirectoryICB>
#1677: FILE: fs/udf/ecma_167.h:448:
+	long_ad		streamDirectoryICB;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1678: FILE: fs/udf/ecma_167.h:449:
+	uint8_t		reserved[32];

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceTable>
#1689: FILE: fs/udf/ecma_167.h:454:
+	short_ad	unallocSpaceTable;

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceBitmap>
#1690: FILE: fs/udf/ecma_167.h:455:
+	short_ad	unallocSpaceBitmap;

CHECK:CAMELCASE: Avoid CamelCase: <partitionIntegrityTable>
#1691: FILE: fs/udf/ecma_167.h:456:
+	short_ad	partitionIntegrityTable;

CHECK:CAMELCASE: Avoid CamelCase: <freedSpaceTable>
#1692: FILE: fs/udf/ecma_167.h:457:
+	short_ad	freedSpaceTable;

CHECK:CAMELCASE: Avoid CamelCase: <freedSpaceBitmap>
#1693: FILE: fs/udf/ecma_167.h:458:
+	short_ad	freedSpaceBitmap;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1694: FILE: fs/udf/ecma_167.h:459:
+	uint8_t		reserved[88];

CHECK:CAMELCASE: Avoid CamelCase: <fileVersionNum>
#1709: FILE: fs/udf/ecma_167.h:465:
+	__le16		fileVersionNum;

CHECK:CAMELCASE: Avoid CamelCase: <fileCharacteristics>
#1710: FILE: fs/udf/ecma_167.h:466:
+	uint8_t		fileCharacteristics;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1710: FILE: fs/udf/ecma_167.h:466:
+	uint8_t		fileCharacteristics;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1711: FILE: fs/udf/ecma_167.h:467:
+	uint8_t		lengthFileIdent;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1714: FILE: fs/udf/ecma_167.h:470:
+	uint8_t		impUse[0];

CHECK:CAMELCASE: Avoid CamelCase: <fileIdent>
#1715: FILE: fs/udf/ecma_167.h:471:
+	uint8_t		fileIdent[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1715: FILE: fs/udf/ecma_167.h:471:
+	uint8_t		fileIdent[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1716: FILE: fs/udf/ecma_167.h:472:
+	uint8_t		padding[0];

CHECK:CAMELCASE: Avoid CamelCase: <priorRecordedNumDirectEntries>
#1742: FILE: fs/udf/ecma_167.h:491:
+	__le32		priorRecordedNumDirectEntries;

CHECK:CAMELCASE: Avoid CamelCase: <strategyType>
#1743: FILE: fs/udf/ecma_167.h:492:
+	__le16		strategyType;

CHECK:CAMELCASE: Avoid CamelCase: <strategyParameter>
#1744: FILE: fs/udf/ecma_167.h:493:
+	__le16		strategyParameter;

CHECK:CAMELCASE: Avoid CamelCase: <numEntries>
#1745: FILE: fs/udf/ecma_167.h:494:
+	__le16		numEntries;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1746: FILE: fs/udf/ecma_167.h:495:
+	uint8_t		reserved;

CHECK:CAMELCASE: Avoid CamelCase: <fileType>
#1747: FILE: fs/udf/ecma_167.h:496:
+	uint8_t		fileType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1747: FILE: fs/udf/ecma_167.h:496:
+	uint8_t		fileType;

CHECK:CAMELCASE: Avoid CamelCase: <parentICBLocation>
#1748: FILE: fs/udf/ecma_167.h:497:
+	lb_addr		parentICBLocation;

CHECK:CAMELCASE: Avoid CamelCase: <icbTag>
#1761: FILE: fs/udf/ecma_167.h:545:
+	icbtag		icbTag;

CHECK:CAMELCASE: Avoid CamelCase: <indirectICB>
#1762: FILE: fs/udf/ecma_167.h:546:
+	long_ad		indirectICB;

CHECK:CAMELCASE: Avoid CamelCase: <fileLinkCount>
#1802: FILE: fs/udf/ecma_167.h:562:
+	__le16		fileLinkCount;

CHECK:CAMELCASE: Avoid CamelCase: <recordFormat>
#1803: FILE: fs/udf/ecma_167.h:563:
+	uint8_t		recordFormat;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1803: FILE: fs/udf/ecma_167.h:563:
+	uint8_t		recordFormat;

CHECK:CAMELCASE: Avoid CamelCase: <recordDisplayAttr>
#1804: FILE: fs/udf/ecma_167.h:564:
+	uint8_t		recordDisplayAttr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1804: FILE: fs/udf/ecma_167.h:564:
+	uint8_t		recordDisplayAttr;

CHECK:CAMELCASE: Avoid CamelCase: <recordLength>
#1805: FILE: fs/udf/ecma_167.h:565:
+	__le32		recordLength;

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlocksRecorded>
#1807: FILE: fs/udf/ecma_167.h:567:
+	__le64		logicalBlocksRecorded;

CHECK:CAMELCASE: Avoid CamelCase: <accessTime>
#1808: FILE: fs/udf/ecma_167.h:568:
+	timestamp	accessTime;

CHECK:CAMELCASE: Avoid CamelCase: <modificationTime>
#1809: FILE: fs/udf/ecma_167.h:569:
+	timestamp	modificationTime;

CHECK:CAMELCASE: Avoid CamelCase: <attrTime>
#1810: FILE: fs/udf/ecma_167.h:570:
+	timestamp	attrTime;

CHECK:CAMELCASE: Avoid CamelCase: <extendedAttrICB>
#1812: FILE: fs/udf/ecma_167.h:572:
+	long_ad		extendedAttrICB;

CHECK:CAMELCASE: Avoid CamelCase: <uniqueID>
#1814: FILE: fs/udf/ecma_167.h:574:
+	__le64		uniqueID;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1817: FILE: fs/udf/ecma_167.h:577:
+	uint8_t		extendedAttr[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1818: FILE: fs/udf/ecma_167.h:578:
+	uint8_t		allocDescs[0];

CHECK:CAMELCASE: Avoid CamelCase: <impAttrLocation>
#1830: FILE: fs/udf/ecma_167.h:621:
+	__le32		impAttrLocation;

CHECK:CAMELCASE: Avoid CamelCase: <appAttrLocation>
#1831: FILE: fs/udf/ecma_167.h:622:
+	__le32		appAttrLocation;

CHECK:CAMELCASE: Avoid CamelCase: <attrType>
#1841: FILE: fs/udf/ecma_167.h:627:
+	__le32		attrType;

CHECK:CAMELCASE: Avoid CamelCase: <attrSubtype>
#1842: FILE: fs/udf/ecma_167.h:628:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1842: FILE: fs/udf/ecma_167.h:628:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1843: FILE: fs/udf/ecma_167.h:629:
+	uint8_t		reserved[3];

CHECK:CAMELCASE: Avoid CamelCase: <attrLength>
#1844: FILE: fs/udf/ecma_167.h:630:
+	__le32		attrLength;

CHECK:CAMELCASE: Avoid CamelCase: <attrData>
#1845: FILE: fs/udf/ecma_167.h:631:
+	uint8_t		attrData[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1845: FILE: fs/udf/ecma_167.h:631:
+	uint8_t		attrData[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1858: FILE: fs/udf/ecma_167.h:637:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1859: FILE: fs/udf/ecma_167.h:638:
+	uint8_t		reserved[3];

CHECK:CAMELCASE: Avoid CamelCase: <escapeSeqLength>
#1861: FILE: fs/udf/ecma_167.h:640:
+	__le32		escapeSeqLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1862: FILE: fs/udf/ecma_167.h:641:
+	uint8_t		charSetType;

CHECK:CAMELCASE: Avoid CamelCase: <escapeSeq>
#1863: FILE: fs/udf/ecma_167.h:642:
+	uint8_t		escapeSeq[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1863: FILE: fs/udf/ecma_167.h:642:
+	uint8_t		escapeSeq[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1876: FILE: fs/udf/ecma_167.h:648:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1877: FILE: fs/udf/ecma_167.h:649:
+	uint8_t		reserved[3];

CHECK:CAMELCASE: Avoid CamelCase: <ownerIdent>
#1879: FILE: fs/udf/ecma_167.h:651:
+	__le16		ownerIdent;

CHECK:CAMELCASE: Avoid CamelCase: <groupIdent>
#1880: FILE: fs/udf/ecma_167.h:652:
+	__le16		groupIdent;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1894: FILE: fs/udf/ecma_167.h:659:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1895: FILE: fs/udf/ecma_167.h:660:
+	uint8_t		reserved[3];

CHECK:CAMELCASE: Avoid CamelCase: <dataLength>
#1897: FILE: fs/udf/ecma_167.h:662:
+	__le32		dataLength;

CHECK:CAMELCASE: Avoid CamelCase: <fileTimeExistence>
#1898: FILE: fs/udf/ecma_167.h:663:
+	__le32		fileTimeExistence;

CHECK:CAMELCASE: Avoid CamelCase: <fileTimes>
#1899: FILE: fs/udf/ecma_167.h:664:
+	uint8_t		fileTimes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1899: FILE: fs/udf/ecma_167.h:664:
+	uint8_t		fileTimes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1915: FILE: fs/udf/ecma_167.h:676:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1916: FILE: fs/udf/ecma_167.h:677:
+	uint8_t		reserved[3];

CHECK:CAMELCASE: Avoid CamelCase: <infoTimeExistence>
#1919: FILE: fs/udf/ecma_167.h:680:
+	__le32		infoTimeExistence;

CHECK:CAMELCASE: Avoid CamelCase: <infoTimes>
#1920: FILE: fs/udf/ecma_167.h:681:
+	uint8_t		infoTimes[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1920: FILE: fs/udf/ecma_167.h:681:
+	uint8_t		infoTimes[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1934: FILE: fs/udf/ecma_167.h:687:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1935: FILE: fs/udf/ecma_167.h:688:
+	uint8_t		reserved[3];

CHECK:CAMELCASE: Avoid CamelCase: <impUseLength>
#1937: FILE: fs/udf/ecma_167.h:690:
+	__le32		impUseLength;

CHECK:CAMELCASE: Avoid CamelCase: <majorDeviceIdent>
#1938: FILE: fs/udf/ecma_167.h:691:
+	__le32		majorDeviceIdent;

CHECK:CAMELCASE: Avoid CamelCase: <minorDeviceIdent>
#1939: FILE: fs/udf/ecma_167.h:692:
+	__le32		minorDeviceIdent;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1940: FILE: fs/udf/ecma_167.h:693:
+	uint8_t		impUse[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1953: FILE: fs/udf/ecma_167.h:699:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1954: FILE: fs/udf/ecma_167.h:700:
+	uint8_t		reserved[3];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1958: FILE: fs/udf/ecma_167.h:704:
+	uint8_t		impUse[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1971: FILE: fs/udf/ecma_167.h:710:
+	uint8_t		attrSubtype;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1972: FILE: fs/udf/ecma_167.h:711:
+	uint8_t		reserved[3];

CHECK:CAMELCASE: Avoid CamelCase: <appUseLength>
#1974: FILE: fs/udf/ecma_167.h:713:
+	__le32		appUseLength;

CHECK:CAMELCASE: Avoid CamelCase: <appUse>
#1976: FILE: fs/udf/ecma_167.h:715:
+	uint8_t		appUse[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1976: FILE: fs/udf/ecma_167.h:715:
+	uint8_t		appUse[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1991: FILE: fs/udf/ecma_167.h:731:
+	uint8_t		allocDescs[0];

CHECK:CAMELCASE: Avoid CamelCase: <numOfBits>
#2001: FILE: fs/udf/ecma_167.h:737:
+	__le32		numOfBits;

CHECK:CAMELCASE: Avoid CamelCase: <numOfBytes>
#2002: FILE: fs/udf/ecma_167.h:738:
+	__le32		numOfBytes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2003: FILE: fs/udf/ecma_167.h:739:
+	uint8_t		bitmap[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2018: FILE: fs/udf/ecma_167.h:747:
+	uint8_t		integrityType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2019: FILE: fs/udf/ecma_167.h:748:
+	uint8_t		reserved[175];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2021: FILE: fs/udf/ecma_167.h:750:
+	uint8_t		impUse[256];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2032: FILE: fs/udf/ecma_167.h:768:
+	uint8_t		reserved[24];

CHECK:CAMELCASE: Avoid CamelCase: <componentType>
#2041: FILE: fs/udf/ecma_167.h:773:
+	uint8_t		componentType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2041: FILE: fs/udf/ecma_167.h:773:
+	uint8_t		componentType;

CHECK:CAMELCASE: Avoid CamelCase: <lengthComponentIdent>
#2042: FILE: fs/udf/ecma_167.h:774:
+	uint8_t		lengthComponentIdent;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2042: FILE: fs/udf/ecma_167.h:774:
+	uint8_t		lengthComponentIdent;

CHECK:CAMELCASE: Avoid CamelCase: <componentFileVersionNum>
#2043: FILE: fs/udf/ecma_167.h:775:
+	__le16		componentFileVersionNum;

CHECK:CAMELCASE: Avoid CamelCase: <componentIdent>
#2044: FILE: fs/udf/ecma_167.h:776:
+	dstring		componentIdent[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2084: FILE: fs/udf/ecma_167.h:787:
+	uint8_t		recordFormat;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2085: FILE: fs/udf/ecma_167.h:788:
+	uint8_t		recordDisplayAttr;

CHECK:CAMELCASE: Avoid CamelCase: <objectSize>
#2088: FILE: fs/udf/ecma_167.h:791:
+	__le64		objectSize;

CHECK:CAMELCASE: Avoid CamelCase: <createTime>
#2092: FILE: fs/udf/ecma_167.h:795:
+	timestamp	createTime;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2102: FILE: fs/udf/ecma_167.h:805:
+	uint8_t		extendedAttr[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2103: FILE: fs/udf/ecma_167.h:806:
+	uint8_t		allocDescs[0];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2104: FILE: fs/udf/ecma_167.h:807:
+} __attribute__ ((packed));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2229: FILE: fs/udf/file.c:210:
+		if ((result = udf_relocate_blocks(inode->i_sb,

CHECK:CAMELCASE: Avoid CamelCase: <numDirs>
#2304: FILE: fs/udf/ialloc.c:49:
+				cpu_to_le32(le32_to_cpu(UDF_SB_LVIDIU(sb)->numDirs) - 1);

CHECK:CAMELCASE: Avoid CamelCase: <numFiles>
#2309: FILE: fs/udf/ialloc.c:52:
+				cpu_to_le32(le32_to_cpu(UDF_SB_LVIDIU(sb)->numFiles) - 1);

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolHeaderDesc>
#2333: FILE: fs/udf/ialloc.c:94:
+		lvhd = (struct logicalVolHeaderDesc *)(UDF_SB_LVID(sb)->logicalVolContentsUse);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#2370: FILE: fs/udf/ialloc.c:127:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <extendedFileEntry>
#2370: FILE: fs/udf/ialloc.c:127:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry), GFP_KERNEL);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2376: FILE: fs/udf/ialloc.c:130:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct fileEntry), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <fileEntry>
#2376: FILE: fs/udf/ialloc.c:130:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct fileEntry), GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2442: FILE: fs/udf/inode.c:246:
+	sfibh.soffset = sfibh.eoffset = (f_pos & ((inode->i_sb->s_blocksize - 1) >> 2)) << 2;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2560: FILE: fs/udf/inode.c:396:
+       ^I^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2560: FILE: fs/udf/inode.c:396:
+       ^I^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2560: FILE: fs/udf/inode.c:396:
+       ^I^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#2572: FILE: fs/udf/inode.c:402:
+						      UDF_EXTENT_LENGTH_MASK)) >> sb->s_blocksize_bits;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2597: FILE: fs/udf/inode.c:423:
+       ^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2597: FILE: fs/udf/inode.c:423:
+       ^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2597: FILE: fs/udf/inode.c:423:
+       ^Ilast_ext->extLocation.partitionReferenceNum = 0;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2598: FILE: fs/udf/inode.c:424:
+	add = (1 << (30-sb->s_blocksize_bits)) - 1;
 	               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2655: FILE: fs/udf/inode.c:512:
+		if ((etype = udf_next_aext(inode, &next_epos, &eloc, &elen, 1)) == -1)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2717: FILE: fs/udf/inode.c:611:
+		if ((etype = udf_next_aext(inode, &next_epos, &eloc, &elen, 0)) != -1) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2727: FILE: fs/udf/inode.c:623:
+	 * block in the extent corresponding to the requested block */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2759: FILE: fs/udf/inode.c:647:
+	 * block, requested block, and blocks after requested block */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2770: FILE: fs/udf/inode.c:660:
+	 * the new number of extents is less than the old number */

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2824: FILE: fs/udf/inode.c:708:
+				udf_free_blocks(inode->i_sb, inode, laarr[curr].extLocation, 0, offset);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2878: FILE: fs/udf/inode.c:755:
+			length = currlength = (((laarr[c + 1].extLength & UDF_EXTENT_LENGTH_MASK) +

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2879: FILE: fs/udf/inode.c:756:
+						inode->i_sb->s_blocksize - 1) >> inode->i_sb->s_blocksize_bits);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2924: FILE: fs/udf/inode.c:780:
+						   next, (UDF_DEFAULT_PREALLOC_BLOCKS > length ? length :

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2924: FILE: fs/udf/inode.c:780:
+						   next, (UDF_DEFAULT_PREALLOC_BLOCKS > length ? length :

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2925: FILE: fs/udf/inode.c:781:
+							  UDF_DEFAULT_PREALLOC_BLOCKS) - currlength);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2926: FILE: fs/udf/inode.c:782:
+^I^Iif (numalloc) ^I{$

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2956: FILE: fs/udf/inode.c:800:
+					    inode->i_sb->s_blocksize - 1) >> inode->i_sb->s_blocksize_bits;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2995: FILE: fs/udf/inode.c:828:
+			if (((laarr[i].extLength >> 30) == (EXT_NOT_RECORDED_NOT_ALLOCATED >> 30)) ||

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2996: FILE: fs/udf/inode.c:829:
+			    ((laarr[i + 1].extLocation.logicalBlockNum - laarr[i].extLocation.logicalBlockNum) ==

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#3033: FILE: fs/udf/inode.c:836:
+								  (laarr[i].extLength & UDF_EXTENT_LENGTH_MASK) +

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#3034: FILE: fs/udf/inode.c:837:
+								  UDF_EXTENT_LENGTH_MASK) & ~(inode->i_sb->s_blocksize - 1);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#3035: FILE: fs/udf/inode.c:838:
+					laarr[i].extLength = (laarr[i].extLength & UDF_EXTENT_FLAG_MASK) +

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#3036: FILE: fs/udf/inode.c:839:
+						(UDF_EXTENT_LENGTH_MASK + 1) - inode->i_sb->s_blocksize;

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#3052: FILE: fs/udf/inode.c:847:
+						  inode->i_sb->s_blocksize - 1) & ~(inode->i_sb->s_blocksize - 1));

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#3076: FILE: fs/udf/inode.c:856:
+			   ((laarr[i + 1].extLength >> 30) == (EXT_NOT_RECORDED_NOT_ALLOCATED >> 30))) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#3079: FILE: fs/udf/inode.c:859:
+					 inode->i_sb->s_blocksize - 1) >> inode->i_sb->s_blocksize_bits);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#3101: FILE: fs/udf/inode.c:867:
+							  (laarr[i].extLength & UDF_EXTENT_LENGTH_MASK) +

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#3102: FILE: fs/udf/inode.c:868:
+							  UDF_EXTENT_LENGTH_MASK) & ~(inode->i_sb->s_blocksize - 1);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#3112: FILE: fs/udf/inode.c:874:
+					  inode->i_sb->s_blocksize - 1) & ~(inode->i_sb->s_blocksize - 1));

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#3132: FILE: fs/udf/inode.c:884:
+					 inode->i_sb->s_blocksize - 1) >> inode->i_sb->s_blocksize_bits);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#3182: FILE: fs/udf/inode.c:972:
+			       inode->i_sb->s_blocksize - offset - udf_file_entry_alloc_offset(inode));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3206: FILE: fs/udf/inode.c:1016:
+		printk(KERN_ERR "udf: udf_read_inode(ino %ld) failed ident=%d\n",

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#3277: FILE: fs/udf/inode.c:1097:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry))) {

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#3285: FILE: fs/udf/inode.c:1101:
+		memcpy(UDF_I_DATA(inode), bh->b_data + sizeof(struct extendedFileEntry), inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry));

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceEntry>
#3306: FILE: fs/udf/inode.c:1115:
+		    le32_to_cpu(((struct unallocSpaceEntry *)bh->b_data)->lengthAllocDescs);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#3307: FILE: fs/udf/inode.c:1116:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct unallocSpaceEntry))) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#3410: FILE: fs/udf/inode.c:1252:
+		inode->i_mode = S_IFLNK | S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3420: FILE: fs/udf/inode.c:1255:
+		printk(KERN_ERR "udf: udf_fill_inode(ino %ld) failed unknown file type=%d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'udf_fill_inode', this function's name, in a string
#3420: FILE: fs/udf/inode.c:1255:
+		printk(KERN_ERR "udf: udf_fill_inode(ino %ld) failed unknown file type=%d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <deviceSpec>
#3429: FILE: fs/udf/inode.c:1261:
+		struct deviceSpec *dsea = (struct deviceSpec *)udf_get_extendedattr(inode, 12, 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3447: FILE: fs/udf/inode.c:1278:
+		printk(KERN_ERR "udf:udf_alloc_i_data (ino %ld) no free memory\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'udf_alloc_i_data', this function's name, in a string
#3447: FILE: fs/udf/inode.c:1278:
+		printk(KERN_ERR "udf:udf_alloc_i_data (ino %ld) no free memory\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#3461: FILE: fs/udf/inode.c:1295:
+	mode =	(( permissions      ) & S_IRWXO) |

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3461: FILE: fs/udf/inode.c:1295:
+	mode =	(( permissions      ) & S_IRWXO) |

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#3461: FILE: fs/udf/inode.c:1295:
+	mode =	(( permissions      ) & S_IRWXO) |

ERROR:SPACING: space prohibited after that open parenthesis '('
#3462: FILE: fs/udf/inode.c:1296:
+		(( permissions >> 2 ) & S_IRWXG) |

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3462: FILE: fs/udf/inode.c:1296:
+		(( permissions >> 2 ) & S_IRWXG) |

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#3462: FILE: fs/udf/inode.c:1296:
+		(( permissions >> 2 ) & S_IRWXG) |

ERROR:SPACING: space prohibited after that open parenthesis '('
#3463: FILE: fs/udf/inode.c:1297:
+		(( permissions >> 4 ) & S_IRWXU) |

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3463: FILE: fs/udf/inode.c:1297:
+		(( permissions >> 4 ) & S_IRWXU) |

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#3463: FILE: fs/udf/inode.c:1297:
+		(( permissions >> 4 ) & S_IRWXU) |

ERROR:SPACING: space prohibited after that open parenthesis '('
#3464: FILE: fs/udf/inode.c:1298:
+		(( flags & ICBTAG_FLAG_SETUID) ? S_ISUID : 0) |

ERROR:SPACING: space prohibited after that open parenthesis '('
#3465: FILE: fs/udf/inode.c:1299:
+		(( flags & ICBTAG_FLAG_SETGID) ? S_ISGID : 0) |

ERROR:SPACING: space prohibited after that open parenthesis '('
#3466: FILE: fs/udf/inode.c:1300:
+		(( flags & ICBTAG_FLAG_STICKY) ? S_ISVTX : 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around use->descTag
#3526: FILE: fs/udf/inode.c:1374:
+				use->descTag.tagChecksum += ((uint8_t *)&(use->descTag))[i];

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3537: FILE: fs/udf/inode.c:1392:
+	udfperms =	((inode->i_mode & S_IRWXO)     ) |

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#3537: FILE: fs/udf/inode.c:1392:
+	udfperms =	((inode->i_mode & S_IRWXO)     ) |

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#3538: FILE: fs/udf/inode.c:1393:
+			((inode->i_mode & S_IRWXG) << 2) |

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#3539: FILE: fs/udf/inode.c:1394:
+			((inode->i_mode & S_IRWXU) << 4);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3591: FILE: fs/udf/inode.c:1436:
+		fe->logicalBlocksRecorded = cpu_to_le64(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3616: FILE: fs/udf/inode.c:1459:
+		efe->logicalBlocksRecorded = cpu_to_le64(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fe->descTag
#3662: FILE: fs/udf/inode.c:1544:
+			fe->descTag.tagChecksum += ((uint8_t *)&(fe->descTag))[i];

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#3701: FILE: fs/udf/inode.c:1604:
+		ptr = UDF_I_DATA(inode) + epos->offset - udf_file_entry_alloc_offset(inode) + UDF_I_LENEATTR(inode);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3714: FILE: fs/udf/inode.c:1621:
+		if (!(epos->block.logicalBlockNum = udf_new_block(inode->i_sb, NULL,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3724: FILE: fs/udf/inode.c:1626:
+		if (!(nbh = udf_tgetblk(inode->i_sb, udf_get_lb_pblock(inode->i_sb,

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#3814: FILE: fs/udf/inode.c:1705:
+		if (!UDF_QUERY_FLAG(inode->i_sb, UDF_FLAG_STRICT) || UDF_SB_UDFREV(inode->i_sb) >= 0x0201)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#3834: FILE: fs/udf/inode.c:1724:
+		ptr = UDF_I_DATA(inode) + epos->offset - udf_file_entry_alloc_offset(inode) + UDF_I_LENEATTR(inode);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#3882: FILE: fs/udf/inode.c:1751:
+				       le32_to_cpu(aed->lengthAllocDescs) + sizeof(struct allocExtDesc));

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#3905: FILE: fs/udf/inode.c:1774:
+		if (!(epos->bh = udf_tread(inode->i_sb, udf_get_lb_pblock(inode->i_sb, epos->block, 0)))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3905: FILE: fs/udf/inode.c:1774:
+		if (!(epos->bh = udf_tread(inode->i_sb, udf_get_lb_pblock(inode->i_sb, epos->block, 0)))) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#3929: FILE: fs/udf/inode.c:1797:
+		ptr = UDF_I_DATA(inode) + epos->offset - udf_file_entry_alloc_offset(inode) + UDF_I_LENEATTR(inode);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#3939: FILE: fs/udf/inode.c:1803:
+		alen = sizeof(struct allocExtDesc) + le32_to_cpu(((struct allocExtDesc *)epos->bh->b_data)->lengthAllocDescs);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3962: FILE: fs/udf/inode.c:1808:
+		if (!(sad = udf_get_fileshortad(ptr, alen, &epos->offset, inc)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3989: FILE: fs/udf/inode.c:1816:
+		if (!(lad = udf_get_filelongad(ptr, alen, &epos->offset, inc)))

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#4048: FILE: fs/udf/inode.c:1916:
+			if (!UDF_QUERY_FLAG(inode->i_sb, UDF_FLAG_STRICT) || UDF_SB_UDFREV(inode->i_sb) >= 0x0201)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#4086: FILE: fs/udf/inode.c:1972:
+	if (inode_bmap(inode, block, &epos, &eloc, &elen, &offset) == (EXT_RECORDED_ALLOCATED >> 30))

CHECK:SPACING: No space is necessary after a cast
#4108: FILE: fs/udf/lowlevel.c:60:
+	if (ioctl_by_bdev(bdev, CDROM_LAST_WRITTEN, (unsigned long) &lblock))

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#4144: FILE: fs/udf/misc.c:80:
+			    le32_to_cpu(eahd->descTag.tagLocation) != UDF_I_LOCATION(inode).logicalBlockNum) {

CHECK:CAMELCASE: Avoid CamelCase: <extendedAttrHeaderDesc>
#4151: FILE: fs/udf/misc.c:85:
+			UDF_I_LENEATTR(inode) += sizeof(struct extendedAttrHeaderDesc);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4162: FILE: fs/udf/misc.c:92:
+			eahd->descTag.tagLocation = cpu_to_le32(UDF_I_LOCATION(inode).logicalBlockNum);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4176: FILE: fs/udf/misc.c:100:
+				uint32_t aal = le32_to_cpu(eahd->appAttrLocation);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4177: FILE: fs/udf/misc.c:101:
+				uint32_t aal = le32_to_cpu(eahd->appAttrLocation);
+				memmove(&ea[offset - aal + size],

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4189: FILE: fs/udf/misc.c:107:
+				uint32_t ial = le32_to_cpu(eahd->impAttrLocation);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4190: FILE: fs/udf/misc.c:108:
+				uint32_t ial = le32_to_cpu(eahd->impAttrLocation);
+				memmove(&ea[offset - ial + size],

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4203: FILE: fs/udf/misc.c:115:
+				uint32_t aal = le32_to_cpu(eahd->appAttrLocation);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4204: FILE: fs/udf/misc.c:116:
+				uint32_t aal = le32_to_cpu(eahd->appAttrLocation);
+				memmove(&ea[offset - aal + size],

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around eahd->descTag
#4222: FILE: fs/udf/misc.c:130:
+				eahd->descTag.tagChecksum += ((uint8_t *)&(eahd->descTag))[i];

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#4238: FILE: fs/udf/misc.c:155:
+		    le32_to_cpu(eahd->descTag.tagLocation) != UDF_I_LOCATION(inode).logicalBlockNum) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4489: FILE: fs/udf/namei.c:162:
+	fibh->soffset = fibh->eoffset = (f_pos & ((dir->i_sb->s_blocksize - 1) >> 2)) << 2;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#4575: FILE: fs/udf/namei.c:294:
+			.partitionReferenceNum = simple_strtoul(dentry->d_name.name + 3,

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#4586: FILE: fs/udf/namei.c:303:
+	else
[...]
 	if (udf_find_entry(dir, dentry, &fibh, &cfi)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#4586: FILE: fs/udf/namei.c:303:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4617: FILE: fs/udf/namei.c:352:
+		if (!(namelen = udf_put_filename(sb, dentry->d_name.name, name,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4634: FILE: fs/udf/namei.c:365:
+	fibh->soffset = fibh->eoffset = (f_pos & ((dir->i_sb->s_blocksize - 1) >> 2)) << 2;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4733: FILE: fs/udf/namei.c:471:
+		if (!(fibh->sbh = fibh->ebh = udf_expand_dir_adinicb(dir, &block, err)))

CHECK:CAMELCASE: Avoid CamelCase: <allocDescImpUse>
#4832: FILE: fs/udf/namei.c:607:
+	*(__le32 *)((struct allocDescImpUse *)cfi.icb.impUse)->impUse =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4912: FILE: fs/udf/namei.c:746:
+	fibh.soffset = fibh.eoffset = (f_pos & ((dir->i_sb->s_blocksize - 1) >> 2)) << 2;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4973: FILE: fs/udf/namei.c:831:
+	inode->i_ctime = dir->i_ctime = dir->i_mtime = current_fs_time(dir->i_sb);

CHECK:CAMELCASE: Avoid CamelCase: <pathComponent>
#5075: FILE: fs/udf/namei.c:990:
+			if (elen + sizeof(struct pathComponent) + namelen > eoffset)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#5086: FILE: fs/udf/namei.c:1020:
+		lvhd = (struct logicalVolHeaderDesc *)(UDF_SB_LVID(inode->i_sb)->logicalVolContentsUse);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#5116: FILE: fs/udf/namei.c:1072:
+		lvhd = (struct logicalVolHeaderDesc *)(UDF_SB_LVID(inode->i_sb)->logicalVolContentsUse);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#5170: FILE: fs/udf/namei.c:1152:
+			dir_fi = udf_get_fileident(dir_bh->b_data, old_inode->i_sb->s_blocksize, &offset);

CHECK:CAMELCASE: Avoid CamelCase: <UDFRevision>
#5260: FILE: fs/udf/osta_udf.h:69:
+	__le16		UDFRevision;

CHECK:CAMELCASE: Avoid CamelCase: <OSClass>
#5261: FILE: fs/udf/osta_udf.h:70:
+	uint8_t		OSClass;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5261: FILE: fs/udf/osta_udf.h:70:
+	uint8_t		OSClass;

CHECK:CAMELCASE: Avoid CamelCase: <OSIdentifier>
#5262: FILE: fs/udf/osta_udf.h:71:
+	uint8_t		OSIdentifier;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5262: FILE: fs/udf/osta_udf.h:71:
+	uint8_t		OSIdentifier;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5263: FILE: fs/udf/osta_udf.h:72:
+	uint8_t		reserved[4];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5270: FILE: fs/udf/osta_udf.h:76:
+	uint8_t		OSClass;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5271: FILE: fs/udf/osta_udf.h:77:
+	uint8_t		OSIdentifier;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5272: FILE: fs/udf/osta_udf.h:78:
+	uint8_t		reserved[6];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5277: FILE: fs/udf/osta_udf.h:82:
+	uint8_t		impUse[8];

CHECK:CAMELCASE: Avoid CamelCase: <minUDFReadRev>
#5293: FILE: fs/udf/osta_udf.h:91:
+	__le16		minUDFReadRev;

CHECK:CAMELCASE: Avoid CamelCase: <minUDFWriteRev>
#5294: FILE: fs/udf/osta_udf.h:92:
+	__le16		minUDFWriteRev;

CHECK:CAMELCASE: Avoid CamelCase: <maxUDFWriteRev>
#5295: FILE: fs/udf/osta_udf.h:93:
+	__le16		maxUDFWriteRev;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5296: FILE: fs/udf/osta_udf.h:94:
+	uint8_t		impUse[0];

CHECK:CAMELCASE: Avoid CamelCase: <LVICharset>
#5309: FILE: fs/udf/osta_udf.h:100:
+	charspec	LVICharset;

CHECK:CAMELCASE: Avoid CamelCase: <LVInfo1>
#5311: FILE: fs/udf/osta_udf.h:102:
+	dstring		LVInfo1[36];

CHECK:CAMELCASE: Avoid CamelCase: <LVInfo2>
#5312: FILE: fs/udf/osta_udf.h:103:
+	dstring		LVInfo2[36];

CHECK:CAMELCASE: Avoid CamelCase: <LVInfo3>
#5313: FILE: fs/udf/osta_udf.h:104:
+	dstring		LVInfo3[36];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5315: FILE: fs/udf/osta_udf.h:106:
+	uint8_t		impUse[128];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5325: FILE: fs/udf/osta_udf.h:110:
+	uint8_t		partitionMapType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5326: FILE: fs/udf/osta_udf.h:111:
+	uint8_t		partitionMapLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5327: FILE: fs/udf/osta_udf.h:112:
+	uint8_t		reserved1[2];

CHECK:CAMELCASE: Avoid CamelCase: <partIdent>
#5328: FILE: fs/udf/osta_udf.h:113:
+	regid		partIdent;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5342: FILE: fs/udf/osta_udf.h:120:
+	uint8_t		partitionMapType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5343: FILE: fs/udf/osta_udf.h:121:
+	uint8_t		partitionMapLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5344: FILE: fs/udf/osta_udf.h:122:
+	uint8_t		reserved1[2];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5348: FILE: fs/udf/osta_udf.h:126:
+	uint8_t		reserved2[24];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5369: FILE: fs/udf/osta_udf.h:146:
+	uint8_t		partitionMapType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5370: FILE: fs/udf/osta_udf.h:147:
+	uint8_t		partitionMapLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5371: FILE: fs/udf/osta_udf.h:148:
+	uint8_t		reserved1[2];

CHECK:CAMELCASE: Avoid CamelCase: <metadataFileLoc>
#5375: FILE: fs/udf/osta_udf.h:152:
+	__le32		metadataFileLoc;

CHECK:CAMELCASE: Avoid CamelCase: <metadataMirrorFileLoc>
#5376: FILE: fs/udf/osta_udf.h:153:
+	__le32		metadataMirrorFileLoc;

CHECK:CAMELCASE: Avoid CamelCase: <metadataBitmapFileLoc>
#5377: FILE: fs/udf/osta_udf.h:154:
+	__le32		metadataBitmapFileLoc;

CHECK:CAMELCASE: Avoid CamelCase: <allocUnitSize>
#5378: FILE: fs/udf/osta_udf.h:155:
+	__le32		allocUnitSize;

CHECK:CAMELCASE: Avoid CamelCase: <alignUnitSize>
#5379: FILE: fs/udf/osta_udf.h:156:
+	__le16		alignUnitSize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5380: FILE: fs/udf/osta_udf.h:157:
+	uint8_t		flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5381: FILE: fs/udf/osta_udf.h:158:
+	uint8_t		reserved2[5];

CHECK:CAMELCASE: Avoid CamelCase: <VirtualSector>
#5389: FILE: fs/udf/osta_udf.h:163:
+	__le32		VirtualSector[0];

CHECK:CAMELCASE: Avoid CamelCase: <vatIdent>
#5390: FILE: fs/udf/osta_udf.h:164:
+	regid		vatIdent;

CHECK:CAMELCASE: Avoid CamelCase: <previousVATICBLoc>
#5391: FILE: fs/udf/osta_udf.h:165:
+	__le32		previousVATICBLoc;

CHECK:CAMELCASE: Avoid CamelCase: <lengthHeader>
#5410: FILE: fs/udf/osta_udf.h:172:
+	__le16		lengthHeader;

CHECK:CAMELCASE: Avoid CamelCase: <lengthImpUse>
#5411: FILE: fs/udf/osta_udf.h:173:
+	__le16		lengthImpUse;

CHECK:CAMELCASE: Avoid CamelCase: <minReadRevision>
#5416: FILE: fs/udf/osta_udf.h:178:
+	__le16		minReadRevision;

CHECK:CAMELCASE: Avoid CamelCase: <minWriteRevision>
#5417: FILE: fs/udf/osta_udf.h:179:
+	__le16		minWriteRevision;

CHECK:CAMELCASE: Avoid CamelCase: <maxWriteRevision>
#5418: FILE: fs/udf/osta_udf.h:180:
+	__le16		maxWriteRevision;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5420: FILE: fs/udf/osta_udf.h:182:
+	uint8_t		impUse[0];

CHECK:CAMELCASE: Avoid CamelCase: <vatEntry>
#5421: FILE: fs/udf/osta_udf.h:183:
+	__le32		vatEntry[0];

CHECK:CAMELCASE: Avoid CamelCase: <origLocation>
#5430: FILE: fs/udf/osta_udf.h:190:
+	__le32		origLocation;

CHECK:CAMELCASE: Avoid CamelCase: <mappedLocation>
#5431: FILE: fs/udf/osta_udf.h:191:
+	__le32		mappedLocation;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5440: FILE: fs/udf/osta_udf.h:195:
+^Itag ^I^IdescTag;$

CHECK:CAMELCASE: Avoid CamelCase: <sparingIdent>
#5441: FILE: fs/udf/osta_udf.h:196:
+	regid		sparingIdent;

CHECK:CAMELCASE: Avoid CamelCase: <reallocationTableLen>
#5442: FILE: fs/udf/osta_udf.h:197:
+	__le16		reallocationTableLen;

CHECK:CAMELCASE: Avoid CamelCase: <sequenceNum>
#5444: FILE: fs/udf/osta_udf.h:199:
+	__le32		sequenceNum;

CHECK:CAMELCASE: Avoid CamelCase: <mapEntry>
#5447: FILE: fs/udf/osta_udf.h:201:
+			mapEntry[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5458: FILE: fs/udf/osta_udf.h:212:
+	uint8_t		impUse[4];

CHECK:CAMELCASE: Avoid CamelCase: <headerChecksum>
#5468: FILE: fs/udf/osta_udf.h:223:
+	__le16		headerChecksum;

CHECK:CAMELCASE: Avoid CamelCase: <freeEASpace>
#5469: FILE: fs/udf/osta_udf.h:224:
+	uint8_t		freeEASpace[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5469: FILE: fs/udf/osta_udf.h:224:
+	uint8_t		freeEASpace[0];

CHECK:CAMELCASE: Avoid CamelCase: <CGMSInfo>
#5479: FILE: fs/udf/osta_udf.h:230:
+	uint8_t		CGMSInfo;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5479: FILE: fs/udf/osta_udf.h:230:
+	uint8_t		CGMSInfo;

CHECK:CAMELCASE: Avoid CamelCase: <dataType>
#5480: FILE: fs/udf/osta_udf.h:231:
+	uint8_t		dataType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5480: FILE: fs/udf/osta_udf.h:231:
+	uint8_t		dataType;

CHECK:CAMELCASE: Avoid CamelCase: <protectionSystemInfo>
#5481: FILE: fs/udf/osta_udf.h:232:
+	uint8_t		protectionSystemInfo[4];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5481: FILE: fs/udf/osta_udf.h:232:
+	uint8_t		protectionSystemInfo[4];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5490: FILE: fs/udf/osta_udf.h:239:
+	uint8_t		freeEASpace[0];

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5544: FILE: fs/udf/partition.c:53:
+	index = (sb->s_blocksize - UDF_SB_TYPEVIRT(sb,partition).s_start_offset) / sizeof(uint32_t);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5550: FILE: fs/udf/partition.c:55:
+	if (block > UDF_SB_TYPEVIRT(sb,partition).s_num_entries) {
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5552: FILE: fs/udf/partition.c:57:
+			  block, UDF_SB_TYPEVIRT(sb,partition).s_num_entries);
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5564: FILE: fs/udf/partition.c:67:
+		index = UDF_SB_TYPEVIRT(sb,partition).s_start_offset / sizeof(uint32_t) + block;
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5595: FILE: fs/udf/partition.c:103:
+	uint32_t packet = (block + offset) & ~(UDF_SB_TYPESPAR(sb,partition).s_packet_len - 1);
 	                                                         ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5595: FILE: fs/udf/partition.c:103:
+	uint32_t packet = (block + offset) & ~(UDF_SB_TYPESPAR(sb,partition).s_packet_len - 1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5602: FILE: fs/udf/partition.c:106:
+		if (UDF_SB_TYPESPAR(sb,partition).s_spar_map[i] != NULL) {
 		                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_spar_map[i]"
#5602: FILE: fs/udf/partition.c:106:
+		if (UDF_SB_TYPESPAR(sb,partition).s_spar_map[i] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#5603: FILE: fs/udf/partition.c:107:
+			st = (struct sparingTable *)UDF_SB_TYPESPAR(sb,partition).s_spar_map[i]->b_data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5603: FILE: fs/udf/partition.c:107:
+			st = (struct sparingTable *)UDF_SB_TYPESPAR(sb,partition).s_spar_map[i]->b_data;
 			                                              ^

CHECK:CAMELCASE: Avoid CamelCase: <sparingTable>
#5603: FILE: fs/udf/partition.c:107:
+			st = (struct sparingTable *)UDF_SB_TYPESPAR(sb,partition).s_spar_map[i]->b_data;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#5628: FILE: fs/udf/partition.c:118:
+					((block + offset) & (UDF_SB_TYPESPAR(sb,partition).s_packet_len - 1));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5628: FILE: fs/udf/partition.c:118:
+					((block + offset) & (UDF_SB_TYPESPAR(sb,partition).s_packet_len - 1));
 					                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5636: FILE: fs/udf/partition.c:125:
+	return UDF_SB_PARTROOT(sb,partition) + block + offset;
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5652: FILE: fs/udf/partition.c:137:
+		if (old_block > UDF_SB_PARTROOT(sb,i) &&
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5653: FILE: fs/udf/partition.c:138:
+		    old_block < UDF_SB_PARTROOT(sb,i) + UDF_SB_PARTLEN(sb,i)) {
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5653: FILE: fs/udf/partition.c:138:
+		    old_block < UDF_SB_PARTROOT(sb,i) + UDF_SB_PARTLEN(sb,i)) {
 		                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5654: FILE: fs/udf/partition.c:139:
+			sdata = &UDF_SB_TYPESPAR(sb,i);
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5655: FILE: fs/udf/partition.c:140:
+			packet = (old_block - UDF_SB_PARTROOT(sb,i)) & ~(sdata->s_packet_len - 1);
 			                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5662: FILE: fs/udf/partition.c:143:
+				if (UDF_SB_TYPESPAR(sb,i).s_spar_map[j] != NULL) {
 				                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_spar_map[j]"
#5662: FILE: fs/udf/partition.c:143:
+				if (UDF_SB_TYPESPAR(sb,i).s_spar_map[j] != NULL) {

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#5703: FILE: fs/udf/partition.c:156:
+							st = (struct sparingTable *)sdata->s_spar_map[j]->b_data;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#5704: FILE: fs/udf/partition.c:157:
+							st->mapEntry[k].origLocation = cpu_to_le32(packet);

WARNING:LONG_LINE: line length of 182 exceeds 100 columns
#5705: FILE: fs/udf/partition.c:158:
+							udf_update_tag((char *)st, sizeof(struct sparingTable) + le16_to_cpu(st->reallocationTableLen) * sizeof(struct sparingEntry));

CHECK:CAMELCASE: Avoid CamelCase: <sparingEntry>
#5705: FILE: fs/udf/partition.c:158:
+							udf_update_tag((char *)st, sizeof(struct sparingTable) + le16_to_cpu(st->reallocationTableLen) * sizeof(struct sparingEntry));

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#5718: FILE: fs/udf/partition.c:163:
+						((old_block - UDF_SB_PARTROOT(sb,i)) & (sdata->s_packet_len - 1));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5718: FILE: fs/udf/partition.c:163:
+						((old_block - UDF_SB_PARTROOT(sb,i)) & (sdata->s_packet_len - 1));
 						                                ^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#5734: FILE: fs/udf/partition.c:167:
+						((old_block - UDF_SB_PARTROOT(sb,i)) & (sdata->s_packet_len - 1));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5734: FILE: fs/udf/partition.c:167:
+						((old_block - UDF_SB_PARTROOT(sb,i)) & (sdata->s_packet_len - 1));
 						                                ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#5787: FILE: fs/udf/partition.c:178:
+							st = (struct sparingTable *)sdata->s_spar_map[j]->b_data;

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#5790: FILE: fs/udf/partition.c:181:
+							memmove(&st->mapEntry[k + 1], &st->mapEntry[k], (l - k) * sizeof(struct sparingEntry));

WARNING:LONG_LINE: line length of 182 exceeds 100 columns
#5792: FILE: fs/udf/partition.c:183:
+							udf_update_tag((char *)st, sizeof(struct sparingTable) + le16_to_cpu(st->reallocationTableLen) * sizeof(struct sparingEntry));

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#5805: FILE: fs/udf/partition.c:188:
+						((old_block - UDF_SB_PARTROOT(sb,i)) & (sdata->s_packet_len - 1));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5805: FILE: fs/udf/partition.c:188:
+						((old_block - UDF_SB_PARTROOT(sb,i)) & (sdata->s_packet_len - 1));
 						                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Opt_novrs>
#5970: FILE: fs/udf/super.c:286:
+	{Opt_novrs,	"novrs"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nostrict>
#5971: FILE: fs/udf/super.c:287:
+	{Opt_nostrict,	"nostrict"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_bs>
#5972: FILE: fs/udf/super.c:288:
+	{Opt_bs,	"bs=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_unhide>
#5973: FILE: fs/udf/super.c:289:
+	{Opt_unhide,	"unhide"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_undelete>
#5974: FILE: fs/udf/super.c:290:
+	{Opt_undelete,	"undelete"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noadinicb>
#5975: FILE: fs/udf/super.c:291:
+	{Opt_noadinicb,	"noadinicb"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_adinicb>
#5976: FILE: fs/udf/super.c:292:
+	{Opt_adinicb,	"adinicb"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_shortad>
#5977: FILE: fs/udf/super.c:293:
+	{Opt_shortad,	"shortad"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_longad>
#5978: FILE: fs/udf/super.c:294:
+	{Opt_longad,	"longad"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uforget>
#5979: FILE: fs/udf/super.c:295:
+	{Opt_uforget,	"uid=forget"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uignore>
#5980: FILE: fs/udf/super.c:296:
+	{Opt_uignore,	"uid=ignore"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gforget>
#5981: FILE: fs/udf/super.c:297:
+	{Opt_gforget,	"gid=forget"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gignore>
#5982: FILE: fs/udf/super.c:298:
+	{Opt_gignore,	"gid=ignore"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#5983: FILE: fs/udf/super.c:299:
+	{Opt_gid,	"gid=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#5984: FILE: fs/udf/super.c:300:
+	{Opt_uid,	"uid=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_umask>
#5985: FILE: fs/udf/super.c:301:
+	{Opt_umask,	"umask=%o"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_session>
#5986: FILE: fs/udf/super.c:302:
+	{Opt_session,	"session=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_lastblock>
#5987: FILE: fs/udf/super.c:303:
+	{Opt_lastblock,	"lastblock=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_anchor>
#5988: FILE: fs/udf/super.c:304:
+	{Opt_anchor,	"anchor=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_volume>
#5989: FILE: fs/udf/super.c:305:
+	{Opt_volume,	"volume=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_partition>
#5990: FILE: fs/udf/super.c:306:
+	{Opt_partition,	"partition=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fileset>
#5991: FILE: fs/udf/super.c:307:
+	{Opt_fileset,	"fileset=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rootdir>
#5992: FILE: fs/udf/super.c:308:
+	{Opt_rootdir,	"rootdir=%u"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_utf8>
#5993: FILE: fs/udf/super.c:309:
+	{Opt_utf8,	"utf8"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_iocharset>
#5994: FILE: fs/udf/super.c:310:
+	{Opt_iocharset,	"iocharset=%s"},

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#5995: FILE: fs/udf/super.c:311:
+	{Opt_err,	NULL}

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#6123: FILE: fs/udf/super.c:670:
+					lastblock = UDF_SB_ANCHOR(sb)[0] = last[i] - UDF_SB_SESSION(sb);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#6125: FILE: fs/udf/super.c:672:
+				} else if (location == udf_variable_to_fixed(last[i]) - UDF_SB_SESSION(sb)) {

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#6139: FILE: fs/udf/super.c:674:
+					lastblock = UDF_SB_ANCHOR(sb)[0] = udf_variable_to_fixed(last[i]) - UDF_SB_SESSION(sb);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6151: FILE: fs/udf/super.c:684:
+				if (last[i] < 256 || !(bh = sb_bread(sb, last[i] - 256))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6178: FILE: fs/udf/super.c:697:
+					if (last[i] < 312 + UDF_SB_SESSION(sb) ||

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#6179: FILE: fs/udf/super.c:698:
+					    !(bh = sb_bread(sb, last[i] - 312 - UDF_SB_SESSION(sb)))) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6191: FILE: fs/udf/super.c:702:
+						location = le32_to_cpu(((tag *)bh->b_data)->tagLocation);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6233: FILE: fs/udf/super.c:731:
+			if (!(bh = udf_read_tagged(sb, UDF_SB_ANCHOR(sb)[i],

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ident != TAG_IDENT_AVDP'
#6244: FILE: fs/udf/super.c:736:
+				if ((ident != TAG_IDENT_AVDP) &&
+				    (i || (ident != TAG_IDENT_FE && ident != TAG_IDENT_EFE))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#6321: FILE: fs/udf/super.c:791:
+					struct spaceBitmapDesc *sp;
+					sp = (struct spaceBitmapDesc *)bh->b_data;

CHECK:CAMELCASE: Avoid CamelCase: <partitionNumber>
#6418: FILE: fs/udf/super.c:888:
+			  UDF_SB_PARTMAPS(sb)[i].s_partition_num, le16_to_cpu(p->partitionNumber));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6420: FILE: fs/udf/super.c:890:
+			UDF_SB_PARTLEN(sb,i) = le32_to_cpu(p->partitionLength); /* blocks */
 			                 ^

CHECK:CAMELCASE: Avoid CamelCase: <partitionLength>
#6420: FILE: fs/udf/super.c:890:
+			UDF_SB_PARTLEN(sb,i) = le32_to_cpu(p->partitionLength); /* blocks */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6421: FILE: fs/udf/super.c:891:
+			UDF_SB_PARTROOT(sb,i) = le32_to_cpu(p->partitionStartingLocation);
 			                  ^

CHECK:CAMELCASE: Avoid CamelCase: <partitionStartingLocation>
#6421: FILE: fs/udf/super.c:891:
+			UDF_SB_PARTROOT(sb,i) = le32_to_cpu(p->partitionStartingLocation);

CHECK:CAMELCASE: Avoid CamelCase: <accessType>
#6422: FILE: fs/udf/super.c:892:
+			if (le32_to_cpu(p->accessType) == PD_ACCESS_TYPE_READ_ONLY)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6423: FILE: fs/udf/super.c:893:
+				UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_READ_ONLY;
 				                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6425: FILE: fs/udf/super.c:895:
+				UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_WRITE_ONCE;
 				                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6427: FILE: fs/udf/super.c:897:
+				UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_REWRITABLE;
 				                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6429: FILE: fs/udf/super.c:899:
+				UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_OVERWRITABLE;
 				                   ^

CHECK:CAMELCASE: Avoid CamelCase: <partitionContents>
#6431: FILE: fs/udf/super.c:901:
+			if (!strcmp(p->partitionContents.ident, PD_PARTITION_CONTENTS_NSR02) ||

CHECK:CAMELCASE: Avoid CamelCase: <partitionHeaderDesc>
#6438: FILE: fs/udf/super.c:905:
+				phd = (struct partitionHeaderDesc *)(p->partitionContentsUse);

CHECK:CAMELCASE: Avoid CamelCase: <partitionContentsUse>
#6438: FILE: fs/udf/super.c:905:
+				phd = (struct partitionHeaderDesc *)(p->partitionContentsUse);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#6455: FILE: fs/udf/super.c:908:
+						.logicalBlockNum = le32_to_cpu(phd->unallocSpaceTable.extPosition),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6461: FILE: fs/udf/super.c:914:
+					UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_UNALLOC_TABLE;
 					                   ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#6463: FILE: fs/udf/super.c:916:
+						  i, UDF_SB_PARTMAPS(sb)[i].s_uspace.s_table->i_ino);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_uspace.s_bitmap"
#6487: FILE: fs/udf/super.c:920:
+					if (UDF_SB_PARTMAPS(sb)[i].s_uspace.s_bitmap != NULL) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#6488: FILE: fs/udf/super.c:921:
+						UDF_SB_PARTMAPS(sb)[i].s_uspace.s_bitmap->s_extLength =

CHECK:CAMELCASE: Avoid CamelCase: <s_extLength>
#6488: FILE: fs/udf/super.c:921:
+						UDF_SB_PARTMAPS(sb)[i].s_uspace.s_bitmap->s_extLength =

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#6489: FILE: fs/udf/super.c:922:
+							le32_to_cpu(phd->unallocSpaceBitmap.extLength);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6490: FILE: fs/udf/super.c:923:
+						UDF_SB_PARTMAPS(sb)[i].s_uspace.s_bitmap->s_extPosition =

CHECK:CAMELCASE: Avoid CamelCase: <s_extPosition>
#6490: FILE: fs/udf/super.c:923:
+						UDF_SB_PARTMAPS(sb)[i].s_uspace.s_bitmap->s_extPosition =

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6491: FILE: fs/udf/super.c:924:
+							le32_to_cpu(phd->unallocSpaceBitmap.extPosition);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#6492: FILE: fs/udf/super.c:925:
+						UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_UNALLOC_BITMAP;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6492: FILE: fs/udf/super.c:925:
+						UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_UNALLOC_BITMAP;
 						                   ^

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#6494: FILE: fs/udf/super.c:927:
+							  i, UDF_SB_PARTMAPS(sb)[i].s_uspace.s_bitmap->s_extPosition);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#6517: FILE: fs/udf/super.c:934:
+						.logicalBlockNum = le32_to_cpu(phd->freedSpaceTable.extPosition),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6523: FILE: fs/udf/super.c:940:
+					UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_FREED_TABLE;
 					                   ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#6525: FILE: fs/udf/super.c:942:
+						  i, UDF_SB_PARTMAPS(sb)[i].s_fspace.s_table->i_ino);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_fspace.s_bitmap"
#6549: FILE: fs/udf/super.c:946:
+					if (UDF_SB_PARTMAPS(sb)[i].s_fspace.s_bitmap != NULL) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#6550: FILE: fs/udf/super.c:947:
+						UDF_SB_PARTMAPS(sb)[i].s_fspace.s_bitmap->s_extLength =

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#6551: FILE: fs/udf/super.c:948:
+							le32_to_cpu(phd->freedSpaceBitmap.extLength);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6552: FILE: fs/udf/super.c:949:
+						UDF_SB_PARTMAPS(sb)[i].s_fspace.s_bitmap->s_extPosition =

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#6553: FILE: fs/udf/super.c:950:
+							le32_to_cpu(phd->freedSpaceBitmap.extPosition);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#6554: FILE: fs/udf/super.c:951:
+						UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_FREED_BITMAP;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6554: FILE: fs/udf/super.c:951:
+						UDF_SB_PARTFLAGS(sb,i) |= UDF_PART_FLAG_FREED_BITMAP;
 						                   ^

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#6556: FILE: fs/udf/super.c:953:
+							  i, UDF_SB_PARTMAPS(sb)[i].s_fspace.s_bitmap->s_extPosition);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6569: FILE: fs/udf/super.c:965:
+			  le16_to_cpu(p->partitionNumber), i, UDF_SB_PARTTYPE(sb,i),
 			                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6570: FILE: fs/udf/super.c:966:
+			  UDF_SB_PARTROOT(sb,i), UDF_SB_PARTLEN(sb,i));
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6570: FILE: fs/udf/super.c:966:
+			  UDF_SB_PARTROOT(sb,i), UDF_SB_PARTLEN(sb,i));
 			                                          ^

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#6595: FILE: fs/udf/super.c:983:
+	     i++, offset += ((struct genericPartitionMap *)&(lvd->partitionMaps[offset]))->partitionMapLength) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvd->partitionMaps[offset]
#6595: FILE: fs/udf/super.c:983:
+	     i++, offset += ((struct genericPartitionMap *)&(lvd->partitionMaps[offset]))->partitionMapLength) {

CHECK:CAMELCASE: Avoid CamelCase: <genericPartitionMap>
#6595: FILE: fs/udf/super.c:983:
+	     i++, offset += ((struct genericPartitionMap *)&(lvd->partitionMaps[offset]))->partitionMapLength) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#6596: FILE: fs/udf/super.c:984:
+		type = ((struct genericPartitionMap *)&(lvd->partitionMaps[offset]))->partitionMapType;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvd->partitionMaps[offset]
#6596: FILE: fs/udf/super.c:984:
+		type = ((struct genericPartitionMap *)&(lvd->partitionMaps[offset]))->partitionMapType;

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#6606: FILE: fs/udf/super.c:986:
+			struct genericPartitionMap1 *gpm1 = (struct genericPartitionMap1 *)&(lvd->partitionMaps[offset]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvd->partitionMaps[offset]
#6606: FILE: fs/udf/super.c:986:
+			struct genericPartitionMap1 *gpm1 = (struct genericPartitionMap1 *)&(lvd->partitionMaps[offset]);

CHECK:CAMELCASE: Avoid CamelCase: <genericPartitionMap1>
#6606: FILE: fs/udf/super.c:986:
+			struct genericPartitionMap1 *gpm1 = (struct genericPartitionMap1 *)&(lvd->partitionMaps[offset]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6607: FILE: fs/udf/super.c:987:
+			struct genericPartitionMap1 *gpm1 = (struct genericPartitionMap1 *)&(lvd->partitionMaps[offset]);
+			UDF_SB_PARTTYPE(sb,i) = UDF_TYPE1_MAP15;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6607: FILE: fs/udf/super.c:987:
+			UDF_SB_PARTTYPE(sb,i) = UDF_TYPE1_MAP15;
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6608: FILE: fs/udf/super.c:988:
+			UDF_SB_PARTVSN(sb,i) = le16_to_cpu(gpm1->volSeqNum);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6609: FILE: fs/udf/super.c:989:
+			UDF_SB_PARTNUM(sb,i) = le16_to_cpu(gpm1->partitionNum);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6610: FILE: fs/udf/super.c:990:
+			UDF_SB_PARTFUNC(sb,i) = NULL;
 			                  ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#6633: FILE: fs/udf/super.c:992:
+			struct udfPartitionMap2 *upm2 = (struct udfPartitionMap2 *)&(lvd->partitionMaps[offset]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvd->partitionMaps[offset]
#6633: FILE: fs/udf/super.c:992:
+			struct udfPartitionMap2 *upm2 = (struct udfPartitionMap2 *)&(lvd->partitionMaps[offset]);

CHECK:CAMELCASE: Avoid CamelCase: <udfPartitionMap2>
#6633: FILE: fs/udf/super.c:992:
+			struct udfPartitionMap2 *upm2 = (struct udfPartitionMap2 *)&(lvd->partitionMaps[offset]);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#6634: FILE: fs/udf/super.c:993:
+			if (!strncmp(upm2->partIdent.ident, UDF_ID_VIRTUAL, strlen(UDF_ID_VIRTUAL))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#6634: FILE: fs/udf/super.c:993:
+			struct udfPartitionMap2 *upm2 = (struct udfPartitionMap2 *)&(lvd->partitionMaps[offset]);
+			if (!strncmp(upm2->partIdent.ident, UDF_ID_VIRTUAL, strlen(UDF_ID_VIRTUAL))) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#6635: FILE: fs/udf/super.c:994:
+				if (le16_to_cpu(((__le16 *)upm2->partIdent.identSuffix)[0]) == 0x0150) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6636: FILE: fs/udf/super.c:995:
+					UDF_SB_PARTTYPE(sb,i) = UDF_VIRTUAL_MAP15;
 					                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6637: FILE: fs/udf/super.c:996:
+					UDF_SB_PARTFUNC(sb,i) = udf_get_pblock_virt15;
 					                  ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#6638: FILE: fs/udf/super.c:997:
+				} else if (le16_to_cpu(((__le16 *)upm2->partIdent.identSuffix)[0]) == 0x0200) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6639: FILE: fs/udf/super.c:998:
+					UDF_SB_PARTTYPE(sb,i) = UDF_VIRTUAL_MAP20;
 					                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6640: FILE: fs/udf/super.c:999:
+					UDF_SB_PARTFUNC(sb,i) = udf_get_pblock_virt20;
 					                  ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#6646: FILE: fs/udf/super.c:1001:
+			} else if (!strncmp(upm2->partIdent.ident, UDF_ID_SPARABLE, strlen(UDF_ID_SPARABLE))) {

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#6658: FILE: fs/udf/super.c:1005:
+				struct sparablePartitionMap *spm = (struct sparablePartitionMap *)&(lvd->partitionMaps[offset]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvd->partitionMaps[offset]
#6658: FILE: fs/udf/super.c:1005:
+				struct sparablePartitionMap *spm = (struct sparablePartitionMap *)&(lvd->partitionMaps[offset]);

CHECK:CAMELCASE: Avoid CamelCase: <sparablePartitionMap>
#6658: FILE: fs/udf/super.c:1005:
+				struct sparablePartitionMap *spm = (struct sparablePartitionMap *)&(lvd->partitionMaps[offset]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6660: FILE: fs/udf/super.c:1007:
+				UDF_SB_PARTTYPE(sb,i) = UDF_SPARABLE_MAP15;
 				                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6661: FILE: fs/udf/super.c:1008:
+				UDF_SB_TYPESPAR(sb,i).s_packet_len = le16_to_cpu(spm->packetLength);
 				                  ^

CHECK:CAMELCASE: Avoid CamelCase: <packetLength>
#6661: FILE: fs/udf/super.c:1008:
+				UDF_SB_TYPESPAR(sb,i).s_packet_len = le16_to_cpu(spm->packetLength);

CHECK:CAMELCASE: Avoid CamelCase: <locSparingTable>
#6690: FILE: fs/udf/super.c:1010:
+					loc = le32_to_cpu(spm->locSparingTable[j]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6691: FILE: fs/udf/super.c:1011:
+					UDF_SB_TYPESPAR(sb,i).s_spar_map[j] =
 					                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6693: FILE: fs/udf/super.c:1013:
+					if (UDF_SB_TYPESPAR(sb,i).s_spar_map[j] != NULL) {
 					                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_spar_map[j]"
#6693: FILE: fs/udf/super.c:1013:
+					if (UDF_SB_TYPESPAR(sb,i).s_spar_map[j] != NULL) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#6694: FILE: fs/udf/super.c:1014:
+						st = (struct sparingTable *)UDF_SB_TYPESPAR(sb,i).s_spar_map[j]->b_data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6694: FILE: fs/udf/super.c:1014:
+						st = (struct sparingTable *)UDF_SB_TYPESPAR(sb,i).s_spar_map[j]->b_data;
 						                                              ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#6695: FILE: fs/udf/super.c:1015:
+						if (ident != 0 ||

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#6696: FILE: fs/udf/super.c:1016:
+						    strncmp(st->sparingIdent.ident, UDF_ID_SPARING, strlen(UDF_ID_SPARING))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6697: FILE: fs/udf/super.c:1017:
+							brelse(UDF_SB_TYPESPAR(sb,i).s_spar_map[j]);
 							                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6698: FILE: fs/udf/super.c:1018:
+							UDF_SB_TYPESPAR(sb,i).s_spar_map[j] = NULL;
 							                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6703: FILE: fs/udf/super.c:1022:
+				UDF_SB_PARTFUNC(sb,i) = udf_get_pblock_spar15;
 				                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6712: FILE: fs/udf/super.c:1027:
+			UDF_SB_PARTVSN(sb,i) = le16_to_cpu(upm2->volSeqNum);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6713: FILE: fs/udf/super.c:1028:
+			UDF_SB_PARTNUM(sb,i) = le16_to_cpu(upm2->partitionNum);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6718: FILE: fs/udf/super.c:1031:
+			  i, UDF_SB_PARTNUM(sb,i), type, UDF_SB_PARTVSN(sb,i));
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6718: FILE: fs/udf/super.c:1031:
+			  i, UDF_SB_PARTNUM(sb,i), type, UDF_SB_PARTVSN(sb,i));
 			                                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvd->logicalVolContentsUse[0]
#6723: FILE: fs/udf/super.c:1035:
+		long_ad *la = (long_ad *)&(lvd->logicalVolContentsUse[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6758: FILE: fs/udf/super.c:1091:
+static int udf_process_sequence(struct super_block *sb, long block, long lastblock,
+				 kernel_lb_addr *fileset)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#6862: FILE: fs/udf/super.c:1180:
+				for (j = vds[i].block + 1; j <  vds[VDS_POS_TERMINATING_DESC].block; j++) {

WARNING:SPLIT_STRING: quoted string split across lines
#6873: FILE: fs/udf/super.c:1210:
+		udf_debug("Failed to read byte 32768. Assuming open disc. "
+			  "Skipping validity check\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6898: FILE: fs/udf/super.c:1231:
+		if (UDF_SB_ANCHOR(sb)[i] &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#6909: FILE: fs/udf/super.c:1238:
+			main_e = le32_to_cpu(anchor->mainVolDescSeqExt.extLength );

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#6949: FILE: fs/udf/super.c:1267:
+		switch UDF_SB_PARTTYPE(sb, i) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7029: FILE: fs/udf/super.c:1285:
+				    UDF_SB_PARTVSN(sb,i) == UDF_SB_PARTVSN(sb,j) &&
 				                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7029: FILE: fs/udf/super.c:1285:
+				    UDF_SB_PARTVSN(sb,i) == UDF_SB_PARTVSN(sb,j) &&
 				                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7030: FILE: fs/udf/super.c:1286:
+				    UDF_SB_PARTNUM(sb,i) == UDF_SB_PARTNUM(sb,j)) {
 				                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7030: FILE: fs/udf/super.c:1286:
+				    UDF_SB_PARTNUM(sb,i) == UDF_SB_PARTNUM(sb,j)) {
 				                                             ^

CHECK:SPACING: No space is necessary after a cast
#7032: FILE: fs/udf/super.c:1288:
+					ino.logicalBlockNum = UDF_SB_LASTBLOCK(sb) -

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7033: FILE: fs/udf/super.c:1289:
+						UDF_SB_PARTROOT(sb,j);
 						                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7045: FILE: fs/udf/super.c:1296:
+			if (!(UDF_SB_VAT(sb) = udf_iget(sb, ino)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7048: FILE: fs/udf/super.c:1299:
+			if (UDF_SB_PARTTYPE(sb,i) == UDF_VIRTUAL_MAP15) {
 			                      ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#7049: FILE: fs/udf/super.c:1300:
+				UDF_SB_TYPEVIRT(sb,i).s_start_offset = udf_ext0_offset(UDF_SB_VAT(sb));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7049: FILE: fs/udf/super.c:1300:
+				UDF_SB_TYPEVIRT(sb,i).s_start_offset = udf_ext0_offset(UDF_SB_VAT(sb));
 				                  ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#7050: FILE: fs/udf/super.c:1301:
+				UDF_SB_TYPEVIRT(sb,i).s_num_entries = (UDF_SB_VAT(sb)->i_size - 36) >> 2;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7050: FILE: fs/udf/super.c:1301:
+				UDF_SB_TYPEVIRT(sb,i).s_num_entries = (UDF_SB_VAT(sb)->i_size - 36) >> 2;
 				                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7051: FILE: fs/udf/super.c:1302:
+			} else if (UDF_SB_PARTTYPE(sb,i) == UDF_VIRTUAL_MAP20) {
 			                             ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7053: FILE: fs/udf/super.c:1304:
+				uint32_t pos;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7059: FILE: fs/udf/super.c:1310:
+				UDF_SB_TYPEVIRT(sb,i).s_start_offset =
 				                  ^

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#7060: FILE: fs/udf/super.c:1311:
+					le16_to_cpu(((struct virtualAllocationTable20 *)bh->b_data + udf_ext0_offset(UDF_SB_VAT(sb)))->lengthHeader) +

CHECK:CAMELCASE: Avoid CamelCase: <virtualAllocationTable20>
#7060: FILE: fs/udf/super.c:1311:
+					le16_to_cpu(((struct virtualAllocationTable20 *)bh->b_data + udf_ext0_offset(UDF_SB_VAT(sb)))->lengthHeader) +

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7062: FILE: fs/udf/super.c:1313:
+				UDF_SB_TYPEVIRT(sb,i).s_num_entries = (UDF_SB_VAT(sb)->i_size -
 				                  ^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#7063: FILE: fs/udf/super.c:1314:
+								       UDF_SB_TYPEVIRT(sb,i).s_start_offset) >> 2;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7063: FILE: fs/udf/super.c:1314:
+								       UDF_SB_TYPEVIRT(sb,i).s_start_offset) >> 2;
 								                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7066: FILE: fs/udf/super.c:1317:
+			UDF_SB_PARTROOT(sb,i) = udf_get_pblock(sb, 0, i, 0);
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7067: FILE: fs/udf/super.c:1318:
+			UDF_SB_PARTLEN(sb,i) = UDF_SB_PARTLEN(sb,ino.partitionReferenceNum);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7067: FILE: fs/udf/super.c:1318:
+			UDF_SB_PARTLEN(sb,i) = UDF_SB_PARTLEN(sb,ino.partitionReferenceNum);
 			                                        ^

CHECK:SPACING: No space is necessary after a cast
#7096: FILE: fs/udf/super.c:1339:
+			cpu_to_le16(udf_crc((char *)UDF_SB_LVID(sb) + sizeof(tag),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7097: FILE: fs/udf/super.c:1340:
+			cpu_to_le16(udf_crc((char *)UDF_SB_LVID(sb) + sizeof(tag),
+			le16_to_cpu(UDF_SB_LVID(sb)->descTag.descCRCLength), 0));

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#7141: FILE: fs/udf/super.c:1363:
+		if (UDF_MAX_WRITE_VERSION > le16_to_cpu(UDF_SB_LVIDIU(sb)->maxUDFWriteRev))

CHECK:SPACING: No space is necessary after a cast
#7143: FILE: fs/udf/super.c:1365:
+		if (UDF_SB_UDFREV(sb) > le16_to_cpu(UDF_SB_LVIDIU(sb)->minUDFReadRev))

CHECK:SPACING: No space is necessary after a cast
#7145: FILE: fs/udf/super.c:1367:
+		if (UDF_SB_UDFREV(sb) > le16_to_cpu(UDF_SB_LVIDIU(sb)->minUDFWriteRev))

CHECK:SPACING: No space is necessary after a cast
#7153: FILE: fs/udf/super.c:1372:
+			cpu_to_le16(udf_crc((char *)UDF_SB_LVID(sb) + sizeof(tag),

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#7154: FILE: fs/udf/super.c:1373:
+					    le16_to_cpu(UDF_SB_LVID(sb)->descTag.descCRCLength), 0));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#7191: FILE: fs/udf/super.c:1491:
+		uint16_t minUDFReadRev = le16_to_cpu(UDF_SB_LVIDIU(sb)->minUDFReadRev);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#7192: FILE: fs/udf/super.c:1492:
+		uint16_t minUDFWriteRev = le16_to_cpu(UDF_SB_LVIDIU(sb)->minUDFWriteRev);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#7205: FILE: fs/udf/super.c:1518:
+		printk("UDF-fs: Partition marked readonly; forcing readonly mount\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7218: FILE: fs/udf/super.c:1531:
+		udf_info("UDF %s (%s) Mounting volume '%s', "
+			 "timestamp %04u/%02u/%02u %02u:%02u (%x)\n",

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#7251: FILE: fs/udf/super.c:1564:
+			iput(UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_uspace.s_table);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#7253: FILE: fs/udf/super.c:1566:
+			iput(UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_fspace.s_table);
 			^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7255: FILE: fs/udf/super.c:1568:
+			UDF_SB_FREE_BITMAP(sb,UDF_SB_PARTITION(sb), s_uspace);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7257: FILE: fs/udf/super.c:1570:
+			UDF_SB_FREE_BITMAP(sb,UDF_SB_PARTITION(sb), s_fspace);
 			                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#7281: FILE: fs/udf/super.c:1602:
+	printk (KERN_CRIT "UDF-fs error (device %s): %s: %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7281: FILE: fs/udf/super.c:1602:
+	printk (KERN_CRIT "UDF-fs error (device %s): %s: %s\n",

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#7307: FILE: fs/udf/super.c:1639:
+			iput(UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_uspace.s_table);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#7309: FILE: fs/udf/super.c:1641:
+			iput(UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_fspace.s_table);
 			^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7311: FILE: fs/udf/super.c:1643:
+			UDF_SB_FREE_BITMAP(sb,UDF_SB_PARTITION(sb), s_uspace);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7313: FILE: fs/udf/super.c:1645:
+			UDF_SB_FREE_BITMAP(sb,UDF_SB_PARTITION(sb), s_fspace);
 			                     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7382: FILE: fs/udf/super.c:1774:
+	while ((etype = udf_next_aext(table, &epos, &eloc, &elen, 1)) != -1) {
 		accum += (elen >> table->i_sb->s_blocksize_bits);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7414: FILE: fs/udf/super.c:1799:
+	if (UDF_SB_PARTFLAGS(sb,UDF_SB_PARTITION(sb)) & UDF_PART_FLAG_UNALLOC_BITMAP) {
 	                       ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#7416: FILE: fs/udf/super.c:1801:
+					       UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_uspace.s_bitmap);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7425: FILE: fs/udf/super.c:1803:
+	if (UDF_SB_PARTFLAGS(sb,UDF_SB_PARTITION(sb)) & UDF_PART_FLAG_FREED_BITMAP) {
 	                       ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#7427: FILE: fs/udf/super.c:1805:
+					       UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_fspace.s_bitmap);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7439: FILE: fs/udf/super.c:1810:
+	if (UDF_SB_PARTFLAGS(sb,UDF_SB_PARTITION(sb)) & UDF_PART_FLAG_UNALLOC_TABLE) {
 	                       ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#7441: FILE: fs/udf/super.c:1812:
+					      UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_uspace.s_table);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7450: FILE: fs/udf/super.c:1814:
+	if (UDF_SB_PARTFLAGS(sb,UDF_SB_PARTITION(sb)) & UDF_PART_FLAG_FREED_TABLE) {
 	                       ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#7452: FILE: fs/udf/super.c:1816:
+					      UDF_SB_PARTMAPS(sb)[UDF_SB_PARTITION(sb)].s_fspace.s_table);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#7537: FILE: fs/udf/truncate.c:100:
+				printk(KERN_WARNING "udf_truncate_tail_extent():"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'udf_truncate_tail_extent', this function's name, in a string
#7537: FILE: fs/udf/truncate.c:100:
+				printk(KERN_WARNING "udf_truncate_tail_extent():"

WARNING:SPLIT_STRING: quoted string split across lines
#7538: FILE: fs/udf/truncate.c:101:
+				printk(KERN_WARNING "udf_truncate_tail_extent():"
+				       " Too long extent after EOF in inode "

WARNING:SPLIT_STRING: quoted string split across lines
#7539: FILE: fs/udf/truncate.c:102:
+				       " Too long extent after EOF in inode "
+				       "%u: i_size: %Ld lbcount: %Ld extent %u+%u\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#7539: FILE: fs/udf/truncate.c:102:
+				       "%u: i_size: %Ld lbcount: %Ld extent %u+%u\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7540: FILE: fs/udf/truncate.c:103:
+				       (unsigned)inode->i_ino, (long long)inode->i_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7541: FILE: fs/udf/truncate.c:104:
+				       (long long)lbcount, (unsigned)eloc.logicalBlockNum,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7542: FILE: fs/udf/truncate.c:105:
+				       (unsigned)elen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7550: FILE: fs/udf/truncate.c:111:
+				printk(KERN_ERR "udf_truncate_tail_extent():"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'udf_truncate_tail_extent', this function's name, in a string
#7550: FILE: fs/udf/truncate.c:111:
+				printk(KERN_ERR "udf_truncate_tail_extent():"

WARNING:SPLIT_STRING: quoted string split across lines
#7551: FILE: fs/udf/truncate.c:112:
+				printk(KERN_ERR "udf_truncate_tail_extent():"
+				       " Extent after EOF in inode %u.\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7552: FILE: fs/udf/truncate.c:113:
+				       (unsigned)inode->i_ino);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "UDF_SB_PARTMAPS"
#7618: FILE: fs/udf/udf_sb.h:53:
+	if (UDF_SB_PARTMAPS(X) != NULL) {\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "Z.s_bitmap"
#7634: FILE: fs/udf/udf_sb.h:71:
+	if (UDF_SB_PARTMAPS(X)[(Y)].Z.s_bitmap != NULL) {\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)
              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)
                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)
                   		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)
                   		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)
                   		                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#7831: FILE: fs/udf/udftime.c:58:
+#define SPY(y,l,s)		(SPD * (365*y+l)+s)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#7833: FILE: fs/udf/udftime.c:60:
+static time_t year_seconds[MAX_YEAR_SECONDS]= {
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7834: FILE: fs/udf/udftime.c:61:
+/*1970*/ SPY( 0, 0,0), SPY( 1, 0,0), SPY( 2, 0,0), SPY( 3, 1,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7834: FILE: fs/udf/udftime.c:61:
+/*1970*/ SPY( 0, 0,0), SPY( 1, 0,0), SPY( 2, 0,0), SPY( 3, 1,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7834: FILE: fs/udf/udftime.c:61:
+/*1970*/ SPY( 0, 0,0), SPY( 1, 0,0), SPY( 2, 0,0), SPY( 3, 1,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7834: FILE: fs/udf/udftime.c:61:
+/*1970*/ SPY( 0, 0,0), SPY( 1, 0,0), SPY( 2, 0,0), SPY( 3, 1,0),
                                                             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#7834: FILE: fs/udf/udftime.c:61:
+/*1970*/ SPY( 0, 0,0), SPY( 1, 0,0), SPY( 2, 0,0), SPY( 3, 1,0),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7835: FILE: fs/udf/udftime.c:62:
+/*1974*/ SPY( 4, 1,0), SPY( 5, 1,0), SPY( 6, 1,0), SPY( 7, 2,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7835: FILE: fs/udf/udftime.c:62:
+/*1974*/ SPY( 4, 1,0), SPY( 5, 1,0), SPY( 6, 1,0), SPY( 7, 2,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7835: FILE: fs/udf/udftime.c:62:
+/*1974*/ SPY( 4, 1,0), SPY( 5, 1,0), SPY( 6, 1,0), SPY( 7, 2,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7835: FILE: fs/udf/udftime.c:62:
+/*1974*/ SPY( 4, 1,0), SPY( 5, 1,0), SPY( 6, 1,0), SPY( 7, 2,0),
                                                             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#7835: FILE: fs/udf/udftime.c:62:
+/*1974*/ SPY( 4, 1,0), SPY( 5, 1,0), SPY( 6, 1,0), SPY( 7, 2,0),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7836: FILE: fs/udf/udftime.c:63:
+/*1978*/ SPY( 8, 2,0), SPY( 9, 2,0), SPY(10, 2,0), SPY(11, 3,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7836: FILE: fs/udf/udftime.c:63:
+/*1978*/ SPY( 8, 2,0), SPY( 9, 2,0), SPY(10, 2,0), SPY(11, 3,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7836: FILE: fs/udf/udftime.c:63:
+/*1978*/ SPY( 8, 2,0), SPY( 9, 2,0), SPY(10, 2,0), SPY(11, 3,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7836: FILE: fs/udf/udftime.c:63:
+/*1978*/ SPY( 8, 2,0), SPY( 9, 2,0), SPY(10, 2,0), SPY(11, 3,0),
                                                             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#7836: FILE: fs/udf/udftime.c:63:
+/*1978*/ SPY( 8, 2,0), SPY( 9, 2,0), SPY(10, 2,0), SPY(11, 3,0),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7837: FILE: fs/udf/udftime.c:64:
+/*1982*/ SPY(12, 3,0), SPY(13, 3,0), SPY(14, 3,0), SPY(15, 4,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7837: FILE: fs/udf/udftime.c:64:
+/*1982*/ SPY(12, 3,0), SPY(13, 3,0), SPY(14, 3,0), SPY(15, 4,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7837: FILE: fs/udf/udftime.c:64:
+/*1982*/ SPY(12, 3,0), SPY(13, 3,0), SPY(14, 3,0), SPY(15, 4,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7837: FILE: fs/udf/udftime.c:64:
+/*1982*/ SPY(12, 3,0), SPY(13, 3,0), SPY(14, 3,0), SPY(15, 4,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7838: FILE: fs/udf/udftime.c:65:
+/*1986*/ SPY(16, 4,0), SPY(17, 4,0), SPY(18, 4,0), SPY(19, 5,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7838: FILE: fs/udf/udftime.c:65:
+/*1986*/ SPY(16, 4,0), SPY(17, 4,0), SPY(18, 4,0), SPY(19, 5,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7838: FILE: fs/udf/udftime.c:65:
+/*1986*/ SPY(16, 4,0), SPY(17, 4,0), SPY(18, 4,0), SPY(19, 5,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7838: FILE: fs/udf/udftime.c:65:
+/*1986*/ SPY(16, 4,0), SPY(17, 4,0), SPY(18, 4,0), SPY(19, 5,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7839: FILE: fs/udf/udftime.c:66:
+/*1990*/ SPY(20, 5,0), SPY(21, 5,0), SPY(22, 5,0), SPY(23, 6,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7839: FILE: fs/udf/udftime.c:66:
+/*1990*/ SPY(20, 5,0), SPY(21, 5,0), SPY(22, 5,0), SPY(23, 6,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7839: FILE: fs/udf/udftime.c:66:
+/*1990*/ SPY(20, 5,0), SPY(21, 5,0), SPY(22, 5,0), SPY(23, 6,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7839: FILE: fs/udf/udftime.c:66:
+/*1990*/ SPY(20, 5,0), SPY(21, 5,0), SPY(22, 5,0), SPY(23, 6,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7840: FILE: fs/udf/udftime.c:67:
+/*1994*/ SPY(24, 6,0), SPY(25, 6,0), SPY(26, 6,0), SPY(27, 7,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7840: FILE: fs/udf/udftime.c:67:
+/*1994*/ SPY(24, 6,0), SPY(25, 6,0), SPY(26, 6,0), SPY(27, 7,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7840: FILE: fs/udf/udftime.c:67:
+/*1994*/ SPY(24, 6,0), SPY(25, 6,0), SPY(26, 6,0), SPY(27, 7,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7840: FILE: fs/udf/udftime.c:67:
+/*1994*/ SPY(24, 6,0), SPY(25, 6,0), SPY(26, 6,0), SPY(27, 7,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7841: FILE: fs/udf/udftime.c:68:
+/*1998*/ SPY(28, 7,0), SPY(29, 7,0), SPY(30, 7,0), SPY(31, 8,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7841: FILE: fs/udf/udftime.c:68:
+/*1998*/ SPY(28, 7,0), SPY(29, 7,0), SPY(30, 7,0), SPY(31, 8,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7841: FILE: fs/udf/udftime.c:68:
+/*1998*/ SPY(28, 7,0), SPY(29, 7,0), SPY(30, 7,0), SPY(31, 8,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7841: FILE: fs/udf/udftime.c:68:
+/*1998*/ SPY(28, 7,0), SPY(29, 7,0), SPY(30, 7,0), SPY(31, 8,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7842: FILE: fs/udf/udftime.c:69:
+/*2002*/ SPY(32, 8,0), SPY(33, 8,0), SPY(34, 8,0), SPY(35, 9,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7842: FILE: fs/udf/udftime.c:69:
+/*2002*/ SPY(32, 8,0), SPY(33, 8,0), SPY(34, 8,0), SPY(35, 9,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7842: FILE: fs/udf/udftime.c:69:
+/*2002*/ SPY(32, 8,0), SPY(33, 8,0), SPY(34, 8,0), SPY(35, 9,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7842: FILE: fs/udf/udftime.c:69:
+/*2002*/ SPY(32, 8,0), SPY(33, 8,0), SPY(34, 8,0), SPY(35, 9,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7843: FILE: fs/udf/udftime.c:70:
+/*2006*/ SPY(36, 9,0), SPY(37, 9,0), SPY(38, 9,0), SPY(39,10,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7843: FILE: fs/udf/udftime.c:70:
+/*2006*/ SPY(36, 9,0), SPY(37, 9,0), SPY(38, 9,0), SPY(39,10,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7843: FILE: fs/udf/udftime.c:70:
+/*2006*/ SPY(36, 9,0), SPY(37, 9,0), SPY(38, 9,0), SPY(39,10,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7843: FILE: fs/udf/udftime.c:70:
+/*2006*/ SPY(36, 9,0), SPY(37, 9,0), SPY(38, 9,0), SPY(39,10,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7843: FILE: fs/udf/udftime.c:70:
+/*2006*/ SPY(36, 9,0), SPY(37, 9,0), SPY(38, 9,0), SPY(39,10,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7844: FILE: fs/udf/udftime.c:71:
+/*2010*/ SPY(40,10,0), SPY(41,10,0), SPY(42,10,0), SPY(43,11,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7845: FILE: fs/udf/udftime.c:72:
+/*2014*/ SPY(44,11,0), SPY(45,11,0), SPY(46,11,0), SPY(47,12,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7846: FILE: fs/udf/udftime.c:73:
+/*2018*/ SPY(48,12,0), SPY(49,12,0), SPY(50,12,0), SPY(51,13,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7847: FILE: fs/udf/udftime.c:74:
+/*2022*/ SPY(52,13,0), SPY(53,13,0), SPY(54,13,0), SPY(55,14,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7848: FILE: fs/udf/udftime.c:75:
+/*2026*/ SPY(56,14,0), SPY(57,14,0), SPY(58,14,0), SPY(59,15,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7849: FILE: fs/udf/udftime.c:76:
+/*2030*/ SPY(60,15,0), SPY(61,15,0), SPY(62,15,0), SPY(63,16,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7850: FILE: fs/udf/udftime.c:77:
+/*2034*/ SPY(64,16,0), SPY(65,16,0), SPY(66,16,0), SPY(67,17,0),
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7851: FILE: fs/udf/udftime.c:78:
+/*2038*/ SPY(68,17,0)
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7851: FILE: fs/udf/udftime.c:78:
+/*2038*/ SPY(68,17,0)
                   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7883: FILE: fs/udf/udftime.c:111:
+	yday = ((__mon_yday[__isleap (src.year)]

ERROR:SPACING: space prohibited after that open parenthesis '('
#7889: FILE: fs/udf/udftime.c:113:
+	*dest += ( ( (yday * 24) + src.hour ) * 60 + src.minute ) * 60 + src.second;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#7889: FILE: fs/udf/udftime.c:113:
+	*dest += ( ( (yday * 24) + src.hour ) * 60 + src.minute ) * 60 + src.second;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7901: FILE: fs/udf/udftime.c:148:
+			 + LEAPS_THRU_END_OF (yg - 1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7902: FILE: fs/udf/udftime.c:149:
+			 - LEAPS_THRU_END_OF (y - 1));

CHECK:CAMELCASE: Avoid CamelCase: <udf_UTF8toCS0>
#8009: FILE: fs/udf/unicode.c:175:
+static int udf_UTF8toCS0(dstring *ocu, struct ustr *utf, int length)

CHECK:CAMELCASE: Avoid CamelCase: <udf_NLStoCS0>
#8082: FILE: fs/udf/unicode.c:293:
+static int udf_NLStoCS0(struct nls_table *nls, dstring *ocu, struct ustr *uni,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'udf_get_filename', this function's name, in a string
#8128: FILE: fs/udf/unicode.c:339:
+			udf_debug("Failed in udf_get_filename: sname = %s\n", sname);

CHECK:CAMELCASE: Avoid CamelCase: <udf_CS0toNLS>
#8136: FILE: fs/udf/unicode.c:343:
+		if (!udf_CS0toNLS(UDF_SB(sb)->s_nls_map, &filename, &unifilename)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'udf_get_filename', this function's name, in a string
#8137: FILE: fs/udf/unicode.c:344:
+			udf_debug("Failed in udf_get_filename: sname = %s\n", sname);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#8150: FILE: fs/udf/unicode.c:353:
+	if (len) {
 		return len;
 	}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#8160: FILE: fs/udf/unicode.c:361:
+		     uint8_t *dname, int flen)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#8172: FILE: fs/udf/unicode.c:372:
+		if (!namelen) {
 			return 0;
 		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#8181: FILE: fs/udf/unicode.c:377:
+		if (!namelen) {
 			return 0;
 		}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#8198: FILE: fs/udf/unicode.c:390:
+#define EXT_SIZE ^I^I5$

CHECK:CAMELCASE: Avoid CamelCase: <newName>
#8202: FILE: fs/udf/unicode.c:392:
+static int udf_translate_to_linux(uint8_t *newName, uint8_t *udfName, int udfLen,

CHECK:CAMELCASE: Avoid CamelCase: <udfName>
#8202: FILE: fs/udf/unicode.c:392:
+static int udf_translate_to_linux(uint8_t *newName, uint8_t *udfName, int udfLen,

CHECK:CAMELCASE: Avoid CamelCase: <udfLen>
#8202: FILE: fs/udf/unicode.c:392:
+static int udf_translate_to_linux(uint8_t *newName, uint8_t *udfName, int udfLen,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#8202: FILE: fs/udf/unicode.c:392:
+static int udf_translate_to_linux(uint8_t *newName, uint8_t *udfName, int udfLen,

CHECK:CAMELCASE: Avoid CamelCase: <fidName>
#8203: FILE: fs/udf/unicode.c:393:
+				  uint8_t *fidName, int fidNameLen)

CHECK:CAMELCASE: Avoid CamelCase: <fidNameLen>
#8203: FILE: fs/udf/unicode.c:393:
+				  uint8_t *fidName, int fidNameLen)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#8203: FILE: fs/udf/unicode.c:393:
+				  uint8_t *fidName, int fidNameLen)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line (or did you mean 'else if'?)
#8232: FILE: fs/udf/unicode.c:415:
+			} if (curr == EXT_MARK && (udfLen - index - 1) <= EXT_SIZE) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#8247: FILE: fs/udf/unicode.c:436:
+			for(index = 0; index < EXT_SIZE && extIndex + index + 1 < udfLen; index++) {

CHECK:CAMELCASE: Avoid CamelCase: <extIndex>
#8247: FILE: fs/udf/unicode.c:436:
+			for(index = 0; index < EXT_SIZE && extIndex + index + 1 < udfLen; index++) {

ERROR:SPACING: space required before the open parenthesis '('
#8262: FILE: fs/udf/unicode.c:442:
+					while(extIndex + index + 2 < udfLen &&

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8264: FILE: fs/udf/unicode.c:444:
+					      (index + 1 < EXT_SIZE
+					       && (udfName[extIndex + index + 2] == '/' ||

CHECK:CAMELCASE: Avoid CamelCase: <newIndex>
#8274: FILE: fs/udf/unicode.c:455:
+		} else if (newIndex > 250) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 222 errors, 175 warnings, 460 checks, 7815 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
