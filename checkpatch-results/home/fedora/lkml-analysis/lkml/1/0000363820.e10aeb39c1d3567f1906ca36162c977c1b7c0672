WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Was previously built late in the kernel build, but is now built at the same time

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#57: FILE: instrumentation/Kconfig:62:
+config SAMPLE_MARKERS
+	tristate "Build markers examples -- loadable modules only"
+	depends on MARKERS && m
+	help
+	  This build markers example modules.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#312: FILE: instrumentation/samples/marker-example.c:1:
+/* marker-example.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct file_operations should normally be const
#339: FILE: instrumentation/samples/marker-example.c:28:
+static struct file_operations mark_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#345: FILE: instrumentation/samples/marker-example.c:34:
+	printk(KERN_ALERT "example init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#356: FILE: instrumentation/samples/marker-example.c:45:
+	printk(KERN_ALERT "example exit\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#371: FILE: instrumentation/samples/probe-example.c:1:
+/* probe-example.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#385: FILE: instrumentation/samples/probe-example.c:15:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: instrumentation/samples/probe-example.c:24:
+void probe_subsystem_event(const struct marker *mdata, void *private,
+	const char *format, ...)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#407: FILE: instrumentation/samples/probe-example.c:37:
+	printk(KERN_DEBUG "Value %u, string %s\n", value, mystr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: instrumentation/samples/probe-example.c:47:
+void probe_subsystem_eventb(const struct marker *mdata, void *private,
+	const char *format, ...)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#424: FILE: instrumentation/samples/probe-example.c:54:
+static struct probe_data probe_array[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: instrumentation/samples/probe-example.c:70:
+		result = marker_probe_register(probe_array[i].name,
+				probe_array[i].format,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#443: FILE: instrumentation/samples/probe-example.c:73:
+			printk(KERN_INFO "Unable to register probe %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: instrumentation/samples/probe-example.c:74:
+			printk(KERN_INFO "Unable to register probe %s\n",
+				probe_array[i].name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#447: FILE: instrumentation/samples/probe-example.c:77:
+			printk(KERN_INFO "Unable to arm probe %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: instrumentation/samples/probe-example.c:78:
+			printk(KERN_INFO "Unable to arm probe %s\n",
+				probe_array[i].name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#459: FILE: instrumentation/samples/probe-example.c:89:
+	printk(KERN_INFO "Number of event b : %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: instrumentation/samples/probe-example.c:90:
+	printk(KERN_INFO "Number of event b : %u\n",
+			atomic_read(&eventb_count));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 6 checks, 183 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
