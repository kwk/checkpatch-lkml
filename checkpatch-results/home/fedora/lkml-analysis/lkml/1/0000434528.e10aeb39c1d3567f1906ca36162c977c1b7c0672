WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
 * lower zone will be exhansted before higher zone. This may cause OOM_KILL.

WARNING:TYPO_SPELLING: 'bacause' may be misspelled - perhaps 'because'?
#73: 
 * OOM_KILL(bacause of lower zone) occurs only if the whole zones are exhausted.
            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#104: 
Signed-Off-By: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: mm/page_alloc.c:2046:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#167: FILE: mm/page_alloc.c:2063:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: mm/page_alloc.c:2073:
+ *^I= "[nN]ode ^I- order by node locality, then by zone within node$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#190: FILE: mm/page_alloc.c:2086:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#192: FILE: mm/page_alloc.c:2088:
+			"Ignoring invalid numa_zonelist_order value:  "
+			"%s\n", s);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#204: FILE: mm/page_alloc.c:2100:
+}
+early_param("numa_zonelist_order", setup_numa_zonelist_order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: mm/page_alloc.c:2106:
+int numa_zonelist_order_handler(ctl_table *table, int write,
+		struct file *file, void __user *buffer, size_t *length,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#217: FILE: mm/page_alloc.c:2113:
+		strncpy(saved_string, (char*)table->data,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: mm/page_alloc.c:2120:
+		int oldval = zonelist_order;
+		if (__parse_numa_zonelist_order((char*)table->data)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#224: FILE: mm/page_alloc.c:2120:
+		if (__parse_numa_zonelist_order((char*)table->data)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#224: FILE: mm/page_alloc.c:2120:
+		if (__parse_numa_zonelist_order((char*)table->data)) {
[...]
+		} else if (oldval != zonelist_order)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#228: FILE: mm/page_alloc.c:2124:
+			strncpy((char*)table->data, saved_string,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: mm/page_alloc.c:2133:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#259: FILE: mm/page_alloc.c:2197:
 
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#275: FILE: mm/page_alloc.c:2211:
+		for (j = 0; zonelist->zones[j] != NULL; j++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zonelist->zones[j]"
#275: FILE: mm/page_alloc.c:2211:
+		for (j = 0; zonelist->zones[j] != NULL; j++);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: mm/page_alloc.c:2213:
+ ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, i);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: mm/page_alloc.c:2213:
+ ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: mm/page_alloc.c:2213:
+ ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, i);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: mm/page_alloc.c:2255:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#375: FILE: mm/page_alloc.c:2330:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#413: FILE: mm/page_alloc.c:2402:
+	int order;
+	if (zonelist_order == ZONELIST_ORDER_DEFAULT)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#427: FILE: mm/page_alloc.c:2414:
+		stop_machine_run(__build_all_zonelists, &order, NR_CPUS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#436: FILE: mm/page_alloc.c:2431:
+	printk("Built %i zonelists in %s order, mobility grouping %s."

WARNING:SPLIT_STRING: quoted string split across lines
#437: FILE: mm/page_alloc.c:2432:
+	printk("Built %i zonelists in %s order, mobility grouping %s."
+	       "Total pages: %ld\n",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/mmzone.h:613:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#451: FILE: include/linux/mmzone.h:613:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#451: FILE: include/linux/mmzone.h:613:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#451: FILE: include/linux/mmzone.h:613:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#451: FILE: include/linux/mmzone.h:613:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#451: FILE: include/linux/mmzone.h:613:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#451: FILE: include/linux/mmzone.h:613:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: include/linux/mmzone.h:614:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,
+			struct file *, void __user *, size_t *, loff_t *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 19 warnings, 12 checks, 324 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
