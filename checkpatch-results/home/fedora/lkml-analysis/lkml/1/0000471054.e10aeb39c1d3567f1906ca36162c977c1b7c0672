WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#37: FILE: Makefile:4:
+EXTRAVERSION = .3
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#64: FILE: arch/sparc64/kernel/sun4v_tlb_miss.S:146:
+	ba,pt	%xcc, sparc64_realfault_common
 	^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: arch/um/sys-x86_64/signal.c:196:
+        frame = (struct rt_sigframe __user *) ((unsigned long) frame - 128 - 8);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#153: FILE: arch/um/sys-x86_64/signal.c:196:
+        frame = (struct rt_sigframe __user *) ((unsigned long) frame - 128 - 8);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/um/sys-x86_64/signal.c:196:
+        frame = (struct rt_sigframe __user *) ((unsigned long) frame - 128 - 8);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: drivers/infiniband/ulp/iser/iser_initiator.c:311:
+		iser_dbg("%ld can't xmit task %p\n",jiffies,task);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: drivers/infiniband/ulp/iser/iser_initiator.c:311:
+		iser_dbg("%ld can't xmit task %p\n",jiffies,task);
 		                                           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#555: FILE: drivers/md/md.c:2635:
+	if (e==buf || (*e && *e != '\n') )
 	     ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#555: FILE: drivers/md/md.c:2635:
+	if (e==buf || (*e && *e != '\n') )

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#580: FILE: drivers/md/md.c:3984:
+		mddev->persistent = ! info->not_persistent;
 		                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#589: FILE: drivers/md/md.c:4309:
+	 * RUN_ARRAY, and GET_ and SET_BITMAP_FILE are allowed */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#592: FILE: drivers/md/md.c:4311:
 	if (!mddev->raid_disks && cmd != ADD_NEW_DISK && cmd != STOP_ARRAY
+			&& cmd != RUN_ARRAY && cmd != SET_BITMAP_FILE

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: drivers/md/md.c:4312:
+^I    ^I^I&& cmd != GET_BITMAP_FILE) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#593: FILE: drivers/md/md.c:4312:
+^I    ^I^I&& cmd != GET_BITMAP_FILE) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#593: FILE: drivers/md/md.c:4312:
+			&& cmd != RUN_ARRAY && cmd != SET_BITMAP_FILE
+	    		&& cmd != GET_BITMAP_FILE) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#615: FILE: drivers/md/md.c:5048:
+	if (mddev->in_sync) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#623: FILE: drivers/md/md.c:5056:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: drivers/net/bonding/bonding.h:246:
+extern inline unsigned long slave_last_rx(struct bonding *bond,
+					struct slave *slave)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: drivers/rtc/rtc-sysfs.c:82:
+static int rtc_sysfs_add_device(struct class_device *class_dev,
 					struct class_interface *class_intf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: fs/cifs/file.c:1373:
+^Iset_page_writeback(page);^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#1005: FILE: fs/nfsd/export.c:1008:
+	} else

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1009: FILE: fs/nfsd/export.c:1012:
+	if (new.ex_path)
+		kfree(new.ex_path);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1220: FILE: include/linux/nfsd/xdr.h:168:
+int nfssvc_encode_entry(void *, const char *name,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1220: FILE: include/linux/nfsd/xdr.h:168:
+int nfssvc_encode_entry(void *, const char *name,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1235: FILE: include/linux/nfsd/xdr3.h:334:
+int nfs3svc_encode_entry(void *, const char *name,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1235: FILE: include/linux/nfsd/xdr3.h:334:
+int nfs3svc_encode_entry(void *, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1236: FILE: include/linux/nfsd/xdr3.h:335:
+int nfs3svc_encode_entry(void *, const char *name,
+				int namlen, loff_t offset, u64 ino,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1240: FILE: include/linux/nfsd/xdr3.h:337:
+int nfs3svc_encode_entry_plus(void *, const char *name,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1240: FILE: include/linux/nfsd/xdr3.h:337:
+int nfs3svc_encode_entry_plus(void *, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: include/linux/nfsd/xdr3.h:338:
+int nfs3svc_encode_entry_plus(void *, const char *name,
+				int namlen, loff_t offset, u64 ino,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1254: FILE: include/linux/raid/md.h:97:
+extern void md_allow_write(mddev_t *mddev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#1266: FILE: include/linux/sunrpc/clnt.h:56:
+	struct rpc_program *	cl_program;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1282: FILE: include/linux/sunrpc/svc.h:150:
+#define RPCSVC_MAXPAGES		((RPCSVC_MAXPAYLOAD+PAGE_SIZE-1)/PAGE_SIZE \
                        		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1282: FILE: include/linux/sunrpc/svc.h:150:
+#define RPCSVC_MAXPAGES		((RPCSVC_MAXPAYLOAD+PAGE_SIZE-1)/PAGE_SIZE \
                        		                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1282: FILE: include/linux/sunrpc/svc.h:150:
+#define RPCSVC_MAXPAGES		((RPCSVC_MAXPAYLOAD+PAGE_SIZE-1)/PAGE_SIZE \
                        		                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1296: FILE: init/main.c:529:
+		printk(KERN_WARNING "start_kernel(): bug: interrupts were "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_kernel', this function's name, in a string
#1296: FILE: init/main.c:529:
+		printk(KERN_WARNING "start_kernel(): bug: interrupts were "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1297: FILE: init/main.c:530:
+		printk(KERN_WARNING "start_kernel(): bug: interrupts were "
+				"enabled *very* early, fixing it\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1365: FILE: kernel/sched.c:1944:
+	BUG_ON(!irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1376: FILE: kernel/sched.c:1987:
+		BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1403: FILE: kernel/sched.c:4547:
+	if (need_resched() && !(preempt_count() & PREEMPT_ACTIVE) &&
+					system_state == SYSTEM_RUNNING) {

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1431: FILE: kernel/sched.c:5052:
+ * Figure out where task on dead CPU should go, use force if neccessary.
                                                              ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1563: FILE: net/ipv4/fib_trie.c:2046:
+			iter->tnode = (struct tnode *) n;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1637: FILE: net/ipv4/netfilter/ip_conntrack_netlink.c:949:
+	if (cda[CTA_STATUS-1]) {
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1666: FILE: net/ipv4/tcp_input.c:1017:
+					sp[j] = sp[j+1];
 					            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1667: FILE: net/ipv4/tcp_input.c:1018:
+					sp[j+1] = tmp;
 					    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1771: FILE: net/netfilter/nf_conntrack_netlink.c:966:
+	if (cda[CTA_STATUS-1]) {
 	                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'u_int64_t'
#1793: FILE: net/netfilter/xt_connbytes.c:55:
+	u_int64_t bytes = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'u_int64_t'
#1794: FILE: net/netfilter/xt_connbytes.c:56:
+	u_int64_t pkts = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "filter"
#1885: FILE: net/packet/af_packet.c:437:
+	if (filter != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2008: FILE: net/sunrpc/clnt.c:283:
+	dprintk("RPC: %s returned error %d\n", __FUNCTION__, err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2043: FILE: net/sunrpc/svc.c:913:
+	printk("svc: unknown version (%d for prog %d, %s)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2057: FILE: net/sunrpc/svcsock.c:1252:
+	BUG_ON(pages >= RPCSVC_MAXPAGES);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "low"
#2120: FILE: security/selinux/ss/mls.c:644:
+		if (low != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "high"
#2124: FILE: security/selinux/ss/mls.c:648:
+		if (high != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <usX2Y>
#2156: FILE: sound/usb/usx2y/usbusx2yaudio.c:325:
+	if (likely((urb->start_frame & 0xFFFF) == (usX2Y->wait_iso_frame & 0xFFFF)))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 22 warnings, 26 checks, 1702 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
