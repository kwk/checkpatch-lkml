CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/rcupdate.h:225:
+extern long rcu_batches_completed(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/rcupdate.h:226:
+extern long rcu_batches_completed_bh(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/rcupdate.h:231:
+extern int rcu_needs_cpu(int cpu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: include/linux/rcupreempt.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#139: FILE: include/linux/rcupreempt.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#140: FILE: include/linux/rcupreempt.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: include/linux/rcupreempt.h:29:
+ * ^I^IDocumentation/RCU$

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#171: FILE: include/linux/rcupreempt.h:47:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/linux/rcupreempt.h:49:
+extern void __rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/linux/rcupreempt.h:50:
+extern void __rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/rcupreempt.h:51:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/rcupreempt.h:52:
+extern int rcu_needs_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/rcupreempt.h:59:
+extern void __synchronize_sched(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/rcupreempt.h:61:
+extern void __rcu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: include/linux/rcupreempt.h:62:
+extern void rcu_check_callbacks(int cpu, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/linux/rcupreempt.h:63:
+extern void rcu_restart_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/rcupreempt.h:67:
+extern int *rcupreempt_flipctr(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/rcupreempt.h:68:
+extern long rcupreempt_data_completed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/rcupreempt.h:69:
+extern int rcupreempt_flip_flag(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/rcupreempt.h:70:
+extern int rcupreempt_mb_flag(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/rcupreempt.h:71:
+extern char *rcupreempt_try_flip_state_name(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/rcupreempt.h:72:
+extern struct rcupreempt_trace *rcupreempt_trace_cpu(int cpu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#207: FILE: include/linux/rcupreempt_trace.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#221: FILE: include/linux/rcupreempt_trace.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#222: FILE: include/linux/rcupreempt_trace.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#235: FILE: include/linux/rcupreempt_trace.h:29:
+ * ^I^Ihttp://lse.sourceforge.net/locking/rcupdate.html$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#246: FILE: include/linux/rcupreempt_trace.h:40:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#279: FILE: include/linux/rcupreempt_trace.h:73:
+#define RCU_TRACE(fn, arg) ^Ifn(arg);$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#279: FILE: include/linux/rcupreempt_trace.h:73:
+#define RCU_TRACE(fn, arg) 	fn(arg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/rcupreempt_trace.h:78:
+extern void rcupreempt_trace_move2done(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: include/linux/rcupreempt_trace.h:79:
+extern void rcupreempt_trace_move2wait(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/rcupreempt_trace.h:80:
+extern void rcupreempt_trace_try_flip_1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/linux/rcupreempt_trace.h:81:
+extern void rcupreempt_trace_try_flip_e1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: include/linux/rcupreempt_trace.h:82:
+extern void rcupreempt_trace_try_flip_i1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/linux/rcupreempt_trace.h:83:
+extern void rcupreempt_trace_try_flip_ie1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/linux/rcupreempt_trace.h:84:
+extern void rcupreempt_trace_try_flip_g1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: include/linux/rcupreempt_trace.h:85:
+extern void rcupreempt_trace_try_flip_a1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/rcupreempt_trace.h:86:
+extern void rcupreempt_trace_try_flip_ae1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/rcupreempt_trace.h:87:
+extern void rcupreempt_trace_try_flip_a2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: include/linux/rcupreempt_trace.h:88:
+extern void rcupreempt_trace_try_flip_z1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: include/linux/rcupreempt_trace.h:89:
+extern void rcupreempt_trace_try_flip_ze1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/rcupreempt_trace.h:90:
+extern void rcupreempt_trace_try_flip_z2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: include/linux/rcupreempt_trace.h:91:
+extern void rcupreempt_trace_try_flip_m1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/rcupreempt_trace.h:92:
+extern void rcupreempt_trace_try_flip_me1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: include/linux/rcupreempt_trace.h:93:
+extern void rcupreempt_trace_try_flip_m2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: include/linux/rcupreempt_trace.h:94:
+extern void rcupreempt_trace_check_callbacks(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/rcupreempt_trace.h:95:
+extern void rcupreempt_trace_done_remove(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: include/linux/rcupreempt_trace.h:96:
+extern void rcupreempt_trace_invoke(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: include/linux/rcupreempt_trace.h:97:
+extern void rcupreempt_trace_next_add(struct rcupreempt_trace *trace);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#343: FILE: kernel/Kconfig.preempt:66:
+choice
+	prompt "RCU implementation type:"
+	default CLASSIC_RCU
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#409: FILE: kernel/rcupreempt.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#423: FILE: kernel/rcupreempt.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#424: FILE: kernel/rcupreempt.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#437: FILE: kernel/rcupreempt.c:29:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#448: FILE: kernel/rcupreempt.c:40:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#483: FILE: kernel/rcupreempt.c:75:
+};
+struct rcu_ctrlblk {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#487: FILE: kernel/rcupreempt.c:79:
+};
+static DEFINE_PER_CPU(struct rcu_data, rcu_data);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#492: FILE: kernel/rcupreempt.c:84:
+};
+static DEFINE_PER_CPU(int [2], rcu_flipctr) = { 0, 0 };

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#500: FILE: kernel/rcupreempt.c:92:
+^Ircu_try_flip_waitack_state, ^I/* "A" */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#504: FILE: kernel/rcupreempt.c:96:
+};
+static enum rcu_try_flip_states rcu_try_flip_state = rcu_try_flip_idle_state;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#507: FILE: kernel/rcupreempt.c:99:
+static char *rcu_try_flip_state_names[] =
+	{ "idle", "waitack", "waitzero", "waitmb" };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#521: FILE: kernel/rcupreempt.c:113:
+};
+static DEFINE_PER_CPU(enum rcu_flip_flag_values, rcu_flip_flag) = rcu_flip_seen;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#535: FILE: kernel/rcupreempt.c:127:
+};
+static DEFINE_PER_CPU(enum rcu_mb_flag_values, rcu_mb_flag) = rcu_mb_done;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#543: FILE: kernel/rcupreempt.c:135:
+#define ORDERED_WRT_IRQ(x) (*(volatile typeof(x) *)&(x))

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#556: FILE: kernel/rcupreempt.c:148:
+#define RCU_TRACE_CPU(f, cpu) RCU_TRACE(f, &(RCU_DATA_CPU(cpu)->trace));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#562: FILE: kernel/rcupreempt.c:154:
+#define RCU_TRACE_ME(f) RCU_TRACE(f, &(RCU_DATA_ME()->trace));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#568: FILE: kernel/rcupreempt.c:160:
+#define RCU_TRACE_RDP(f, rdp) RCU_TRACE(f, &((rdp)->trace));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#598: FILE: kernel/rcupreempt.c:190:
+	if (nesting != 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#656: FILE: kernel/rcupreempt.c:248:
+	if (nesting > 1) {
+

WARNING:TYPO_SPELLING: 'coutner' may be misspelled - perhaps 'counter'?
#709: FILE: kernel/rcupreempt.c:301:
+		 * will thus start incrementing the per-CPU coutner on
 		                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitlist[GP_STAGES - 1]"
#732: FILE: kernel/rcupreempt.c:324:
+		if (rdp->waitlist[GP_STAGES - 1] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitlist[i]"
#738: FILE: kernel/rcupreempt.c:330:
+			if (rdp->waitlist[i] != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#748: FILE: kernel/rcupreempt.c:340:
+		if (rdp->nextlist != NULL) {

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#774: FILE: kernel/rcupreempt.c:366:
+			   /*  seen -after- acknowledgement. */
 			                    ^^^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#814: FILE: kernel/rcupreempt.c:406:
+	/* Now ask each CPU for acknowledgement of the flip. */
 	                        ^^^^^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rdp->donelist"
#972: FILE: kernel/rcupreempt.c:564:
+	if (rdp->donelist == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#1008: FILE: kernel/rcupreempt.c:600:
+	if (list == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1025: FILE: kernel/rcupreempt.c:617:
+void fastcall call_rcu(struct rcu_head *head,
+				void (*func)(struct rcu_head *rcu))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->donelist"
#1078: FILE: kernel/rcupreempt.c:670:
+	return (rdp->donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#1080: FILE: kernel/rcupreempt.c:672:
+		rdp->nextlist != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->donelist"
#1089: FILE: kernel/rcupreempt.c:681:
+	if (rdp->donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#1091: FILE: kernel/rcupreempt.c:683:
+	    rdp->nextlist != NULL)

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#1094: FILE: kernel/rcupreempt.c:686:
+	/* The RCU core needs an acknowledgement from this CPU. */
 	                         ^^^^^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1116: FILE: kernel/rcupreempt.c:708:
+/*&&&&*/printk(KERN_NOTICE "WARNING: experimental RCU implementation.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1180: FILE: kernel/rcupreempt_trace.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1194: FILE: kernel/rcupreempt_trace.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1195: FILE: kernel/rcupreempt_trace.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1202: FILE: kernel/rcupreempt_trace.c:23:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1213: FILE: kernel/rcupreempt_trace.c:34:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1236: FILE: kernel/rcupreempt_trace.c:57:
+}
+void rcupreempt_trace_move2wait(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1242: FILE: kernel/rcupreempt_trace.c:63:
+}
+void rcupreempt_trace_try_flip_1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1246: FILE: kernel/rcupreempt_trace.c:67:
+}
+void rcupreempt_trace_try_flip_e1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1250: FILE: kernel/rcupreempt_trace.c:71:
+}
+void rcupreempt_trace_try_flip_i1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1254: FILE: kernel/rcupreempt_trace.c:75:
+}
+void rcupreempt_trace_try_flip_ie1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1258: FILE: kernel/rcupreempt_trace.c:79:
+}
+void rcupreempt_trace_try_flip_g1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1262: FILE: kernel/rcupreempt_trace.c:83:
+}
+void rcupreempt_trace_try_flip_a1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1266: FILE: kernel/rcupreempt_trace.c:87:
+}
+void rcupreempt_trace_try_flip_ae1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1270: FILE: kernel/rcupreempt_trace.c:91:
+}
+void rcupreempt_trace_try_flip_a2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1274: FILE: kernel/rcupreempt_trace.c:95:
+}
+void rcupreempt_trace_try_flip_z1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1278: FILE: kernel/rcupreempt_trace.c:99:
+}
+void rcupreempt_trace_try_flip_ze1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1282: FILE: kernel/rcupreempt_trace.c:103:
+}
+void rcupreempt_trace_try_flip_z2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1286: FILE: kernel/rcupreempt_trace.c:107:
+}
+void rcupreempt_trace_try_flip_m1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1290: FILE: kernel/rcupreempt_trace.c:111:
+}
+void rcupreempt_trace_try_flip_me1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1294: FILE: kernel/rcupreempt_trace.c:115:
+}
+void rcupreempt_trace_try_flip_m2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1298: FILE: kernel/rcupreempt_trace.c:119:
+}
+void rcupreempt_trace_check_callbacks(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1302: FILE: kernel/rcupreempt_trace.c:123:
+}
+void rcupreempt_trace_done_remove(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1307: FILE: kernel/rcupreempt_trace.c:128:
+}
+void rcupreempt_trace_invoke(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1311: FILE: kernel/rcupreempt_trace.c:132:
+}
+void rcupreempt_trace_next_add(struct rcupreempt_trace *trace)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1353: FILE: kernel/rcupreempt_trace.c:174:
+static ssize_t rcustats_read(struct file *filp, char __user *buffer,
                                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: kernel/rcupreempt_trace.c:175:
+static ssize_t rcustats_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1386: FILE: kernel/rcupreempt_trace.c:207:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcupreempt_trace_buf, strlen(rcupreempt_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1391: FILE: kernel/rcupreempt_trace.c:212:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1392: FILE: kernel/rcupreempt_trace.c:213:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1400: FILE: kernel/rcupreempt_trace.c:221:
+	snprintf(rcupreempt_trace_buf, RCUPREEMPT_TRACE_BUF_SIZE,
+		"oldggp=%ld  newggp=%ld\n", oldgp, rcu_batches_completed());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: kernel/rcupreempt_trace.c:223:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcupreempt_trace_buf, strlen(rcupreempt_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1407: FILE: kernel/rcupreempt_trace.c:228:
+static ssize_t rcuctrs_read(struct file *filp, char __user *buffer,
                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: kernel/rcupreempt_trace.c:229:
+static ssize_t rcuctrs_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1421: FILE: kernel/rcupreempt_trace.c:242:
+		int *flipctr = rcupreempt_flipctr(cpu);
+		cnt += snprintf(&rcupreempt_trace_buf[cnt],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1439: FILE: kernel/rcupreempt_trace.c:260:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcupreempt_trace_buf, strlen(rcupreempt_trace_buf));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1444: FILE: kernel/rcupreempt_trace.c:265:
+static struct file_operations rcustats_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1449: FILE: kernel/rcupreempt_trace.c:270:
+static struct file_operations rcugp_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1454: FILE: kernel/rcupreempt_trace.c:275:
+static struct file_operations rcuctrs_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1466: FILE: kernel/rcupreempt_trace.c:287:
+	statdir = debugfs_create_file("rcustats", 0444, rcudir,
+						NULL, &rcustats_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1475: FILE: kernel/rcupreempt_trace.c:296:
+	ctrsdir = debugfs_create_file("rcuctrs", 0444, rcudir,
+						NULL, &rcuctrs_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1481: FILE: kernel/rcupreempt_trace.c:302:
+	if (statdir)
+		debugfs_remove(statdir);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1483: FILE: kernel/rcupreempt_trace.c:304:
+	if (gpdir)
+		debugfs_remove(gpdir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1507: FILE: kernel/rcupreempt_trace.c:328:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 34 warnings, 84 checks, 1395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
