WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#129: FILE: fs/unionfs/commonfops.c:132:
+				printk(KERN_ERR "unionfs: no supberlock for "

WARNING:SPLIT_STRING: quoted string split across lines
#130: FILE: fs/unionfs/commonfops.c:133:
+				printk(KERN_ERR "unionfs: no supberlock for "
+				       "file %p\n", file);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#205: FILE: fs/unionfs/commonfops.c:359:
 		printk(KERN_DEBUG "Doing delayed copyup of a read-write "
+		       "file on a read-only branch.\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#247: FILE: fs/unionfs/commonfops.c:438:
+				err = copyup_file(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: fs/unionfs/commonfops.c:637:
+		printk("unionfs: incgen ioctl deprecated; "

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#434: FILE: fs/unionfs/copyup.c:427:
+	if ((err = copyup_permissions(sb, old_hidden_dentry,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#445: FILE: fs/unionfs/copyup.c:526:
+/* This function replicates the directory structure upto given dentry in the
                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#550: FILE: fs/unionfs/dentry.c:30:
+				      struct nameidata *nd)
 				                        ^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#573: FILE: fs/unionfs/dentry.c:112:
+						unionfs_lower_inode_idx(

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#655: FILE: fs/unionfs/dentry.c:271:
+		for (i=0; i<chain_len; i++)
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#655: FILE: fs/unionfs/dentry.c:271:
+		for (i=0; i<chain_len; i++)
 		           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#856: FILE: fs/unionfs/fanout.h:108:
+static inline struct super_block *unionfs_lower_super(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#863: FILE: fs/unionfs/fanout.h:114:
+static inline struct super_block *unionfs_lower_super_idx(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#896: FILE: fs/unionfs/fanout.h:197:
+static inline struct dentry *unionfs_lower_dentry_idx(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#913: FILE: fs/unionfs/fanout.h:215:
+static inline struct vfsmount *unionfs_lower_mnt_idx(

WARNING:SPLIT_STRING: quoted string split across lines
#1006: FILE: fs/unionfs/inode.c:110:
 			printk(KERN_WARNING "unionfs: %s:%d: notify_change "
+			       "failed: %d, ignoring..\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'new_hidden_dentry->d_parent->d_inode'
#1017: FILE: fs/unionfs/inode.c:128:
+						new_hidden_dentry->d_parent->
+						d_inode);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'new_hidden_dentry->d_parent->d_inode'
#1021: FILE: fs/unionfs/inode.c:131:
+						new_hidden_dentry->d_parent->
+						d_inode);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'hidden_parent_dentry->d_inode'
#1041: FILE: fs/unionfs/inode.c:204:
+							hidden_parent_dentry->
+							d_inode);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'hidden_parent_dentry->d_inode'
#1046: FILE: fs/unionfs/inode.c:207:
+							hidden_parent_dentry->
+							d_inode);

WARNING:SPLIT_STRING: quoted string split across lines
#1176: FILE: fs/unionfs/inode.c:467:
 				printk(KERN_DEBUG "hidden dentry NULL (or error)"
+				       "for bindex = %d\n", bindex);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'hidden_dir_dentry->d_inode'
#1205: FILE: fs/unionfs/inode.c:494:
+							hidden_dir_dentry->
+							d_inode);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'hidden_dir_dentry->d_inode'
#1210: FILE: fs/unionfs/inode.c:497:
+							hidden_dir_dentry->
+							d_inode);

WARNING:SPLIT_STRING: quoted string split across lines
#1244: FILE: fs/unionfs/inode.c:589:
 				printk(KERN_DEBUG "hidden dentry NULL for "
+				       "bindex = %d\n", bindex);

WARNING:SPLIT_STRING: quoted string split across lines
#1275: FILE: fs/unionfs/inode.c:632:
 			printk(KERN_ERR "mkdir: error creating "
+			       ".wh.__dir_opaque: %d\n", err);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1342: FILE: fs/unionfs/inode.c:840:
+			    struct nameidata *nd, int bindex)
 			                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1429: FILE: fs/unionfs/lookup.c:74:
+				      struct nameidata *nd, int lookupmode)
 				                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1448: FILE: fs/unionfs/lookup.c:213:
+						  namelen, nd);
 						           ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1483: FILE: fs/unionfs/lookup.c:266:
+			BUG_ON(!S_ISDIR(unionfs_lower_dentry(dentry)->

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1496: FILE: fs/unionfs/lookup.c:308:
+					  namelen, nd);
 					           ^^

WARNING:SPLIT_STRING: quoted string split across lines
#1620: FILE: fs/unionfs/main.c:308:
 			printk(KERN_WARNING "unionfs: error accessing "
+			       "hidden directory '%s' (error %d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1630: FILE: fs/unionfs/main.c:351:
 				printk(KERN_WARNING "unionfs: branches %d and "
+				       "%d overlap\n", i, j);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1649: FILE: fs/unionfs/main.c:385:
+static struct unionfs_dentry_info *unionfs_parse_options(

WARNING:SPLIT_STRING: quoted string split across lines
#1695: FILE: fs/unionfs/main.c:700:
 MODULE_AUTHOR("Erez Zadok, Filesystems and Storage Lab, Stony Brook University"
+	      " (http://www.fsl.cs.sunysb.edu)");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1744: FILE: fs/unionfs/rdstate.c:87:
+	BUG_ON(sizeof(loff_t) !=

WARNING:SPLIT_STRING: quoted string split across lines
#1782: FILE: fs/unionfs/rdstate.c:217:
 				printk(KERN_DEBUG "Possible I/O error "
+				       "unionfs_filldir: a file is duplicated "

WARNING:SPLIT_STRING: quoted string split across lines
#1783: FILE: fs/unionfs/rdstate.c:218:
+				       "unionfs_filldir: a file is duplicated "
+				       "in the same branch %d: %s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1817: FILE: fs/unionfs/rename.c:43:
 			printk(KERN_DEBUG "error creating directory tree for"
+			       " rename, bindex = %d, err = %ld\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1844: FILE: fs/unionfs/rename.c:69:
 			printk(KERN_WARNING "Both a whiteout and a dentry"
+			       " exist when doing a rename!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1927: FILE: fs/unionfs/rename.c:258:
 			printk(KERN_ERR "We can't create a whiteout for the "
+			       "source in rename!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1936: FILE: fs/unionfs/rename.c:272:
 		printk(KERN_WARNING "Revert failed in rename: the new refresh "
+		       "failed.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1944: FILE: fs/unionfs/rename.c:279:
 		printk(KERN_WARNING "Revert failed in rename: the old refresh "
+		       "failed.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1953: FILE: fs/unionfs/rename.c:287:
 		printk(KERN_WARNING "Revert failed in rename: the object "
+		       "disappeared from under us!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1962: FILE: fs/unionfs/rename.c:295:
 		printk(KERN_WARNING "Revert failed in rename: the object was "
+		       "created underneath us!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#2046: FILE: fs/unionfs/subr.c:59:
 				printk(KERN_DEBUG "create_parents failed for "
+				       "bindex = %d\n", bindex);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2064: FILE: fs/unionfs/subr.c:80:
+		if (!(err = is_robranch_super(dentry->d_sb, bindex)))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#2071: FILE: fs/unionfs/subr.c:83:
+					 ~current->fs->umask & S_IRWXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPLIT_STRING: quoted string split across lines
#2117: FILE: fs/unionfs/super.c:34:
 		printk(KERN_ERR "No kernel memory when allocating inode "
+		       "private data!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#2126: FILE: fs/unionfs/super.c:52:
 		printk(KERN_ERR "No kernel memory when allocating lower-"
+		       "pointer array!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2181: FILE: fs/unionfs/super.c:577:
+				printk("unionfs: command exceeds "

WARNING:SPLIT_STRING: quoted string split across lines
#2182: FILE: fs/unionfs/super.c:578:
+				printk("unionfs: command exceeds "
+				       "%d branches\n", UNIONFS_MAX_BRANCHES);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2279: FILE: fs/unionfs/union.h:267:
+extern int remove_whiteouts(struct dentry *dentry,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2294: FILE: fs/unionfs/union.h:315:
+extern int unionfs_interpose(struct dentry *this_dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2321: FILE: fs/unionfs/union.h:345:
+				      struct nameidata *nd, int lookupmode);
 				                        ^^

CHECK:SPACING: No space is necessary after a cast
#2421: FILE: fs/unionfs/xattr.c:85:
+	err = vfs_setxattr(hidden_dentry, (char*) name, (void*) value,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2421: FILE: fs/unionfs/xattr.c:85:
+	err = vfs_setxattr(hidden_dentry, (char*) name, (void*) value,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2421: FILE: fs/unionfs/xattr.c:85:
+	err = vfs_setxattr(hidden_dentry, (char*) name, (void*) value,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2443: FILE: include/linux/fs_stack.h:14:
+extern void fsstack_copy_inode_size(struct inode *dst,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427384.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 41 warnings, 11 checks, 2084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427384.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
