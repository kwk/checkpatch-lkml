WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: arch/um/drivers/cow_user.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#104: FILE: arch/um/drivers/cow_user.c:77:
+ * Until Dec2005, __attribute__((packed)) was left out from the below

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!getcwd"
#122: FILE: arch/um/drivers/cow_user.c:151:
+	if (getcwd(save_cwd, sizeof(save_cwd)) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slash"
#130: FILE: arch/um/drivers/cow_user.c:157:
+	if (slash != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!getcwd"
#142: FILE: arch/um/drivers/cow_user.c:166:
+		if (getcwd(to, size) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!header"
#190: FILE: arch/um/drivers/cow_user.c:208:
+	if (header == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_cow_header', this function's name, in a string
#191: FILE: arch/um/drivers/cow_user.c:209:
+		cow_printf("write_cow_header - failed to allocate COW V3 "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#192: FILE: arch/um/drivers/cow_user.c:210:
+		cow_printf("write_cow_header - failed to allocate COW V3 "
+			   "header\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: arch/um/drivers/cow_user.c:226:
+	if (absolutize(header->backing_file, sizeof(header->backing_file),
 		      backing_file))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!header"
#259: FILE: arch/um/drivers/cow_user.c:286:
+	if (header == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#299: FILE: arch/um/drivers/cow_user.c:320:
 	}
+	else if (version == 2) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#310: FILE: arch/um/drivers/cow_user.c:334:
+	else if (version == 3 && (*((int*)header->v3.backing_file) != 0)) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#320: FILE: arch/um/drivers/cow_user.c:351:
 	}
+	else if (version == 3) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!backing_file_out"
#342: FILE: arch/um/drivers/cow_user.c:388:
+	if (*backing_file_out == NULL) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#410: FILE: arch/um/drivers/fd.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#438: FILE: arch/um/drivers/fd.c:44:
+	if (data == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#507: FILE: arch/um/drivers/mmapper_kern.c:54:
+static int mmapper_mmap(struct file *file, struct vm_area_struct * vma)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#591: FILE: arch/um/drivers/null.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#611: FILE: arch/um/drivers/pty.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#641: FILE: arch/um/drivers/pty.c:36:
+^I*data = ((struct pty_chan) { .announce  ^I= opts->announce,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#669: FILE: arch/um/drivers/xterm.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#709: FILE: arch/um/drivers/chan_user.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#762: FILE: arch/um/drivers/hostaudio_kern.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#812: FILE: arch/um/drivers/hostaudio_kern.c:79:
+	printk(KERN_DEBUG "hostaudio: read called, count = %d\n", count);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kbuf"
#818: FILE: arch/um/drivers/hostaudio_kern.c:83:
+	if (kbuf == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#842: FILE: arch/um/drivers/hostaudio_kern.c:106:
+	printk(KERN_DEBUG "hostaudio: write called, count = %d\n", count);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kbuf"
#848: FILE: arch/um/drivers/hostaudio_kern.c:110:
+	if (kbuf == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#876: FILE: arch/um/drivers/hostaudio_kern.c:133:
+	printk(KERN_DEBUG "hostaudio: poll called (unimplemented)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#893: FILE: arch/um/drivers/hostaudio_kern.c:147:
+	printk(KERN_DEBUG "hostaudio: ioctl called, cmd = %u\n", cmd);

CHECK:SPACING: No space is necessary after a cast
#903: FILE: arch/um/drivers/hostaudio_kern.c:156:
+		if (get_user(data, (int __user *) arg))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EFAULT)
#904: FILE: arch/um/drivers/hostaudio_kern.c:157:
+			return EFAULT;

CHECK:SPACING: No space is necessary after a cast
#914: FILE: arch/um/drivers/hostaudio_kern.c:172:
+		if (put_user(data, (int __user *) arg))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#931: FILE: arch/um/drivers/hostaudio_kern.c:189:
+	printk(KERN_DEBUG "hostaudio: open called (host: %s)\n", dsp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state"
#937: FILE: arch/um/drivers/hostaudio_kern.c:193:
+	if (state == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#966: FILE: arch/um/drivers/hostaudio_kern.c:216:
+	printk(KERN_DEBUG "hostaudio: release called\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#985: FILE: arch/um/drivers/hostaudio_kern.c:232:
+	printk(KERN_DEBUG "hostmixer: ioctl called\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#998: FILE: arch/um/drivers/hostaudio_kern.c:245:
+	printk(KERN_DEBUG "hostmixer: open called (host: %s)\n", mixer);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state"
#1003: FILE: arch/um/drivers/hostaudio_kern.c:249:
+	if (state == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1020: FILE: arch/um/drivers/hostaudio_kern.c:260:
+		printk(KERN_ERR "hostaudio_open_mixdev failed to open '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#1021: FILE: arch/um/drivers/hostaudio_kern.c:261:
+		printk(KERN_ERR "hostaudio_open_mixdev failed to open '%s', "
+		       "err = %d\n", dsp, -ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1038: FILE: arch/um/drivers/hostaudio_kern.c:275:
+	printk(KERN_DEBUG "hostmixer: release called\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around req->origin
#1132: FILE: arch/um/drivers/mconsole_user.c:50:
+	msg.msg_name = &(req->origin);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1155: FILE: arch/um/drivers/mconsole_user.c:69:
+		if (!strncmp(req->request.data, cmd->command,
+			    strlen(cmd->command))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req->cmd"
#1197: FILE: arch/um/drivers/mconsole_user.c:121:
+	if (req->cmd == NULL) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1221: FILE: arch/um/drivers/mconsole_user.c:148:
+		if (len == total) reply.more = more;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1251: FILE: arch/um/drivers/mconsole_user.c:193:
+			printk(UM_KERN_ERR "mconsole_notify - socket failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mconsole_notify', this function's name, in a string
#1251: FILE: arch/um/drivers/mconsole_user.c:193:
+			printk(UM_KERN_ERR "mconsole_notify - socket failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#1252: FILE: arch/um/drivers/mconsole_user.c:194:
+			printk(UM_KERN_ERR "mconsole_notify - socket failed, "
+			       "errno = %d\n", errno);

CHECK:SPACING: No space is necessary after a cast
#1270: FILE: arch/um/drivers/mconsole_user.c:214:
+	n = sendto(notify_sock, &packet, len, 0, (struct sockaddr *) &target,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1276: FILE: arch/um/drivers/mconsole_user.c:218:
+		printk(UM_KERN_ERR "mconsole_notify - sendto failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mconsole_notify', this function's name, in a string
#1276: FILE: arch/um/drivers/mconsole_user.c:218:
+		printk(UM_KERN_ERR "mconsole_notify - sendto failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#1277: FILE: arch/um/drivers/mconsole_user.c:219:
+		printk(UM_KERN_ERR "mconsole_notify - sendto failed, "
+		       "errno = %d\n", errno);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000374446.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 29 warnings, 18 checks, 1124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000374446.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
