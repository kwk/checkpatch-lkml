WARNING:TYPO_SPELLING: 'addessed' may be misspelled - perhaps 'addressed'?
#48: 
not something we addessed in the recent rt-balancing re-work.
                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'accomodating' may be misspelled - perhaps 'accommodating'?
#50: 
This patch tries to enhance the balancing algorithm by accomodating this
                                                       ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'likelyhood' may be misspelled - perhaps 'likelihood'?
#65: 
   will attempt to preempt it *if* there is a likelyhood that the
                                              ^^^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#144: FILE: kernel/sched_rt.c:374:
+	if (list_empty(array->squeue + rt_se_prio(rt_se))
+	    && list_empty(array->xqueue + rt_se_prio(rt_se)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->prio == rq->curr->prio'
#200: FILE: kernel/sched_rt.c:598:
+	if((p->prio == rq->curr->prio)
+	   && p->rt.nr_cpus_allowed == 1
+	   && rq->curr->rt.nr_cpus_allowed != 1
+	   && pick_next_rt_entity(rq, &rq->rt) != &rq->curr->rt) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: kernel/sched_rt.c:598:
+	if((p->prio == rq->curr->prio)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#201: FILE: kernel/sched_rt.c:599:
+	if((p->prio == rq->curr->prio)
+	   && p->rt.nr_cpus_allowed == 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#202: FILE: kernel/sched_rt.c:600:
+	   && p->rt.nr_cpus_allowed == 1
+	   && rq->curr->rt.nr_cpus_allowed != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#203: FILE: kernel/sched_rt.c:601:
+	   && rq->curr->rt.nr_cpus_allowed != 1
+	   && pick_next_rt_entity(rq, &rq->rt) != &rq->curr->rt) {

CHECK:BRACES: Unbalanced braces around else statement
#227: FILE: kernel/sched_rt.c:629:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000274806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 6 checks, 147 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000274806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
