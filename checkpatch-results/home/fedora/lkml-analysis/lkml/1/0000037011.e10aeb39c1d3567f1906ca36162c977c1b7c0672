CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cl)...) over kzalloc(sizeof(struct dlm_cluster)...)
#78: FILE: fs/dlm/config.c:413:
+	cl = kzalloc(sizeof(struct dlm_cluster), GFP_NOFS);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sps)...) over kzalloc(sizeof(struct dlm_spaces)...)
#80: FILE: fs/dlm/config.c:415:
+	sps = kzalloc(sizeof(struct dlm_spaces), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cms)...) over kzalloc(sizeof(struct dlm_comms)...)
#81: FILE: fs/dlm/config.c:416:
+	cms = kzalloc(sizeof(struct dlm_comms), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sp)...) over kzalloc(sizeof(struct dlm_space)...)
#92: FILE: fs/dlm/config.c:485:
+	sp = kzalloc(sizeof(struct dlm_space), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nds)...) over kzalloc(sizeof(struct dlm_nodes)...)
#94: FILE: fs/dlm/config.c:487:
+	nds = kzalloc(sizeof(struct dlm_nodes), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cm)...) over kzalloc(sizeof(struct dlm_comm)...)
#103: FILE: fs/dlm/config.c:539:
+	cm = kzalloc(sizeof(struct dlm_comm), GFP_NOFS);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#112: FILE: fs/dlm/config.c:572:
+	nd = kzalloc(sizeof(struct dlm_node), GFP_NOFS);
 	^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nd)...) over kzalloc(sizeof(struct dlm_node)...)
#112: FILE: fs/dlm/config.c:572:
+	nd = kzalloc(sizeof(struct dlm_node), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ri)...) over kzalloc(sizeof(struct rsbtbl_iter)...)
#152: FILE: fs/dlm/debug_fs.c:407:
+	ri = kzalloc(sizeof(struct rsbtbl_iter), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*de)...) over kzalloc(sizeof(struct dlm_direntry)...)
#166: FILE: fs/dlm/dir.c:52:
+		de = kzalloc(sizeof(struct dlm_direntry) + len, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*de)...) over kzalloc(sizeof(struct dlm_direntry)...)
#184: FILE: fs/dlm/dir.c:325:
+	de = kzalloc(sizeof(struct dlm_direntry) + namelen, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ls)...) over kzalloc(sizeof(struct dlm_ls)...)
#240: FILE: fs/dlm/lockspace.c:433:
+	ls = kzalloc(sizeof(struct dlm_ls) + namelen, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ls->ls_rsbtbl)...) over kmalloc(sizeof(struct dlm_rsbtable)...)
#261: FILE: fs/dlm/lockspace.c:454:
+	ls->ls_rsbtbl = kmalloc(sizeof(struct dlm_rsbtable) * size, GFP_NOFS);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#261: FILE: fs/dlm/lockspace.c:454:
+	ls->ls_rsbtbl = kmalloc(sizeof(struct dlm_rsbtable) * size, GFP_NOFS);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ls->ls_lkbtbl)...) over kmalloc(sizeof(struct dlm_lkbtable)...)
#270: FILE: fs/dlm/lockspace.c:466:
+	ls->ls_lkbtbl = kmalloc(sizeof(struct dlm_lkbtable) * size, GFP_NOFS);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#270: FILE: fs/dlm/lockspace.c:466:
+	ls->ls_lkbtbl = kmalloc(sizeof(struct dlm_lkbtable) * size, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ls->ls_dirtbl)...) over kmalloc(sizeof(struct dlm_dirtable)...)
#279: FILE: fs/dlm/lockspace.c:478:
+	ls->ls_dirtbl = kmalloc(sizeof(struct dlm_dirtable) * size, GFP_NOFS);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#279: FILE: fs/dlm/lockspace.c:478:
+	ls->ls_dirtbl = kmalloc(sizeof(struct dlm_dirtable) * size, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*memb)...) over kzalloc(sizeof(struct dlm_member)...)
#332: FILE: fs/dlm/member.c:51:
+	memb = kzalloc(sizeof(struct dlm_member), GFP_NOFS);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#341: FILE: fs/dlm/member.c:146:
+	array = kmalloc(sizeof(int) * total, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*memb)...) over kzalloc(sizeof(struct dlm_member)...)
#350: FILE: fs/dlm/member.c:229:
+		memb = kzalloc(sizeof(struct dlm_member), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rv)...) over kzalloc(sizeof(struct dlm_recover)...)
#359: FILE: fs/dlm/member.c:344:
+	rv = kzalloc(sizeof(struct dlm_recover), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct rq_entry)...)
#460: FILE: fs/dlm/requestqueue.c:38:
+	e = kmalloc(sizeof(struct rq_entry) + length, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ua)...) over kzalloc(sizeof(struct dlm_user_args)...)
#473: FILE: fs/dlm/user.c:270:
+	ua = kzalloc(sizeof(struct dlm_user_args), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ua)...) over kzalloc(sizeof(struct dlm_user_args)...)
#482: FILE: fs/dlm/user.c:310:
+	ua = kzalloc(sizeof(struct dlm_user_args), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*proc)...) over kzalloc(sizeof(struct dlm_user_proc)...)
#518: FILE: fs/dlm/user.c:651:
+	proc = kzalloc(sizeof(struct dlm_user_proc), GFP_NOFS);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037011.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 21 checks, 357 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037011.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
