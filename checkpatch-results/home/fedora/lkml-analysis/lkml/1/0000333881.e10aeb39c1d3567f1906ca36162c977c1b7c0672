WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
> For everything but timer, you'll get a warning if the data isn't assignable

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#70: FILE: include/linux/compiler-gcc.h:60:
+	(__builtin_types_compatible_p(typeof(arg), char)		\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned char)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#71: FILE: include/linux/compiler-gcc.h:61:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned char)	\
+	 || __builtin_types_compatible_p(typeof(arg), signed char)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#72: FILE: include/linux/compiler-gcc.h:62:
+	 || __builtin_types_compatible_p(typeof(arg), signed char)	\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned short)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#73: FILE: include/linux/compiler-gcc.h:63:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned short)	\
+	 || __builtin_types_compatible_p(typeof(arg), short)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#74: FILE: include/linux/compiler-gcc.h:64:
+	 || __builtin_types_compatible_p(typeof(arg), short)		\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned int)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#75: FILE: include/linux/compiler-gcc.h:65:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned int)	\
+	 || __builtin_types_compatible_p(typeof(arg), int)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#76: FILE: include/linux/compiler-gcc.h:66:
+	 || __builtin_types_compatible_p(typeof(arg), int)		\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned long)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#77: FILE: include/linux/compiler-gcc.h:67:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned long)	\
+	 || __builtin_types_compatible_p(typeof(arg), long))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fn' - possible side-effects?
#110: FILE: include/linux/compiler-gcc.h:100:
+#define typesafe_function(fn, ulongtype, safetype, fntype, arg)		\
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+							  safetype)),	\
+		      ((fntype)(fn)),					\
+		      (fn))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#110: FILE: include/linux/compiler-gcc.h:100:
+#define typesafe_function(fn, ulongtype, safetype, fntype, arg)		\
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+							  safetype)),	\
+		      ((fntype)(fn)),					\
+		      (fn))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#112: FILE: include/linux/compiler-gcc.h:102:
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#112: FILE: include/linux/compiler-gcc.h:102:
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 		                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#112: FILE: include/linux/compiler-gcc.h:102:
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 		                                                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#114: FILE: include/linux/compiler-gcc.h:104:
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#115: FILE: include/linux/compiler-gcc.h:105:
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#115: FILE: include/linux/compiler-gcc.h:105:
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 			                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#115: FILE: include/linux/compiler-gcc.h:105:
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 			                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#134: FILE: include/linux/compiler-gcc.h:124:
+#define typesafe_arg(fn, ulongtype, arg)				\
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						   ulongtype),		\
+		      ((void *)(long)(arg)), (arg))

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#135: FILE: include/linux/compiler-gcc.h:125:
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
                                                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#135: FILE: include/linux/compiler-gcc.h:125:
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
                                                                 ^

WARNING:BAD_SIGN_OFF: Duplicate signature
#152: 
Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fn' - possible side-effects?
#193: FILE: include/linux/stop_machine.h:24:
+#define stop_machine_run(fn, data, cpu)					\
+stop_machine_run_notype(typesafe_function((fn), int(*)(unsigned long),	\
+					  int(*)(typeof(data)),		\
+					  int(*)(void *), (data)),	\
+			typesafe_arg((fn), int(*)(unsigned long), (data)), \
+			(cpu))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'data' - possible side-effects?
#193: FILE: include/linux/stop_machine.h:24:
+#define stop_machine_run(fn, data, cpu)					\
+stop_machine_run_notype(typesafe_function((fn), int(*)(unsigned long),	\
+					  int(*)(typeof(data)),		\
+					  int(*)(void *), (data)),	\
+			typesafe_arg((fn), int(*)(unsigned long), (data)), \
+			(cpu))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#272: FILE: kernel/stop_machine.c:218:
+#if 0 /* Compile test */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#274: FILE: kernel/stop_machine.c:220:
+int testfn_charp(char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#274: FILE: kernel/stop_machine.c:220:
+int testfn_charp(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#275: FILE: kernel/stop_machine.c:221:
+int testfn_char(char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char' should also have an identifier name
#275: FILE: kernel/stop_machine.c:221:
+int testfn_char(char);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#276: FILE: kernel/stop_machine.c:222:
+int testfn_ulong(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#276: FILE: kernel/stop_machine.c:222:
+int testfn_ulong(unsigned long);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333881.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 22 checks, 256 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333881.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
