WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#78: FILE: init/Kconfig:329:
+config FAIR_GROUP_SCHED
+	bool "Fair group scheduler"
+	depends on EXPERIMENTAL && CONTAINERS
+	help
+	  This option enables you to group tasks and control CPU resource
+	  allocation to such groups.
+
+	  Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: kernel/sched.c:207:
+ * ^IEvery task in system belong to this group at bootup.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: kernel/sched.c:6611:
+^I ^I{$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: kernel/sched.c:6611:
+^I ^I{$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: kernel/sched.c:6612:
+ ^I^I^Istruct cfs_rq *cfs_rq = &per_cpu(init_cfs_rq, i);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: kernel/sched.c:6612:
+ ^I^I^Istruct cfs_rq *cfs_rq = &per_cpu(init_cfs_rq, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: kernel/sched.c:6612:
+ ^I^I^Istruct cfs_rq *cfs_rq = &per_cpu(init_cfs_rq, i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: kernel/sched.c:6613:
+ ^I^I^Istruct sched_entity *se =$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: kernel/sched.c:6613:
+ ^I^I^Istruct sched_entity *se =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: kernel/sched.c:6613:
+ ^I^I^Istruct sched_entity *se =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: kernel/sched.c:6614:
+ ^I^I^I^I^I &per_cpu(init_sched_entity, i);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: kernel/sched.c:6614:
+ ^I^I^I^I^I &per_cpu(init_sched_entity, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: kernel/sched.c:6614:
+ ^I^I^I^I^I &per_cpu(init_sched_entity, i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: kernel/sched.c:6616:
+ ^I^I^Iinit_cfs_rq_p[i] = cfs_rq;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: kernel/sched.c:6616:
+ ^I^I^Iinit_cfs_rq_p[i] = cfs_rq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: kernel/sched.c:6616:
+ ^I^I^Iinit_cfs_rq_p[i] = cfs_rq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: kernel/sched.c:6617:
+ ^I^I^Iinit_cfs_rq(cfs_rq, rq);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: kernel/sched.c:6617:
+ ^I^I^Iinit_cfs_rq(cfs_rq, rq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: kernel/sched.c:6617:
+ ^I^I^Iinit_cfs_rq(cfs_rq, rq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: kernel/sched.c:6618:
+ ^I^I^Icfs_rq->tg = &init_task_grp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: kernel/sched.c:6618:
+ ^I^I^Icfs_rq->tg = &init_task_grp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: kernel/sched.c:6618:
+ ^I^I^Icfs_rq->tg = &init_task_grp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: kernel/sched.c:6619:
+ ^I^I^Ilist_add(&cfs_rq->leaf_cfs_rq_list,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: kernel/sched.c:6619:
+ ^I^I^Ilist_add(&cfs_rq->leaf_cfs_rq_list,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: kernel/sched.c:6619:
+ ^I^I^Ilist_add(&cfs_rq->leaf_cfs_rq_list,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: kernel/sched.c:6620:
+ 			list_add(&cfs_rq->leaf_cfs_rq_list,
+							 &rq->leaf_cfs_rq_list);

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: kernel/sched.c:6622:
+ ^I^I^Iinit_sched_entity_p[i] = se;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: kernel/sched.c:6622:
+ ^I^I^Iinit_sched_entity_p[i] = se;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: kernel/sched.c:6622:
+ ^I^I^Iinit_sched_entity_p[i] = se;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: kernel/sched.c:6623:
+ ^I^I^Ise->cfs_rq = &rq->cfs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: kernel/sched.c:6623:
+ ^I^I^Ise->cfs_rq = &rq->cfs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: kernel/sched.c:6623:
+ ^I^I^Ise->cfs_rq = &rq->cfs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: kernel/sched.c:6624:
+ ^I^I^Ise->my_q = cfs_rq;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: kernel/sched.c:6624:
+ ^I^I^Ise->my_q = cfs_rq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: kernel/sched.c:6624:
+ ^I^I^Ise->my_q = cfs_rq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: kernel/sched.c:6625:
+ ^I^I^Ise->load.weight = NICE_0_LOAD;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: kernel/sched.c:6625:
+ ^I^I^Ise->load.weight = NICE_0_LOAD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: kernel/sched.c:6625:
+ ^I^I^Ise->load.weight = NICE_0_LOAD;$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#200: FILE: kernel/sched.c:6626:
+			se->load.inv_weight = div64_64(1ULL<<32, NICE_0_LOAD);
 			                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: kernel/sched.c:6627:
+ ^I^I^Ise->parent = NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: kernel/sched.c:6627:
+ ^I^I^Ise->parent = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: kernel/sched.c:6627:
+ ^I^I^Ise->parent = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: kernel/sched.c:6628:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: kernel/sched.c:6628:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: kernel/sched.c:6628:
+ ^I^I}$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#244: FILE: kernel/sched.c:6859:
+	tg->cfs_rq = kzalloc(sizeof(cfs_rq) * num_possible_cpus(), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#247: FILE: kernel/sched.c:6862:
+	tg->se = kzalloc(sizeof(se) * num_possible_cpus(), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*cfs_rq)...) over kmalloc_node(sizeof(struct cfs_rq)...)
#254: FILE: kernel/sched.c:6869:
+		cfs_rq = kmalloc_node(sizeof(struct cfs_rq), GFP_KERNEL,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: kernel/sched.c:6870:
+		cfs_rq = kmalloc_node(sizeof(struct cfs_rq), GFP_KERNEL,
+							 cpu_to_node(i));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*se)...) over kmalloc_node(sizeof(struct sched_entity)...)
#259: FILE: kernel/sched.c:6874:
+		se = kmalloc_node(sizeof(struct sched_entity), GFP_KERNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: kernel/sched.c:6875:
+		se = kmalloc_node(sizeof(struct sched_entity), GFP_KERNEL,
+							cpu_to_node(i));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#276: FILE: kernel/sched.c:6891:
+		se->load.inv_weight = div64_64(1ULL<<32, NICE_0_LOAD);
 		                                   ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#295: FILE: kernel/sched.c:6910:
+	if (tg->cfs_rq)
+		kfree(tg->cfs_rq);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#297: FILE: kernel/sched.c:6912:
+	if (tg->se)
+		kfree(tg->se);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#299: FILE: kernel/sched.c:6914:
+	if (tg)
+		kfree(tg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: kernel/sched.c:6919:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: kernel/sched.c:6922:
+static void sched_destroy_group(struct container_subsys *ss,
+					struct container *cont)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#320: FILE: kernel/sched.c:6935:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: kernel/sched.c:6951:
+static void sched_move_task(struct container_subsys *ss, struct container *cont,
+			struct container *old_cont, struct task_struct *tsk)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#354: FILE: kernel/sched.c:6969:
+	if (on_rq)
+		 enqueue_task(rq, tsk, 0);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#376: FILE: kernel/sched.c:6991:
+	se->load.inv_weight = div64_64((1ULL<<32), shares);
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#391: FILE: kernel/sched.c:7006:
+	char buffer[2*sizeof(unsigned long) + 1];
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#393: FILE: kernel/sched.c:7008:
+	if (nbytes > 2*sizeof(unsigned long))	/* safety check */
 	              ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#400: FILE: kernel/sched.c:7015:
+	shareval = simple_strtoul(buffer, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#413: FILE: kernel/sched.c:7028:
+	return (u64) tg->shares;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382437.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 37 warnings, 14 checks, 372 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382437.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
