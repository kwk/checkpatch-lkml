WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
We only reserve pages for the parent but a copy must be made to avoid leaking

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#37: 
reservation, and it is common to fork only to exec() immediatly after. A
                                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#70: 
   A warning is printed to the console that this situation occured.
                                                           ^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#113: FILE: include/linux/hugetlb.h:26:
+void unmap_hugepage_range(struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#113: FILE: include/linux/hugetlb.h:26:
+void unmap_hugepage_range(struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#113: FILE: include/linux/hugetlb.h:26:
+void unmap_hugepage_range(struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#113: FILE: include/linux/hugetlb.h:26:
+void unmap_hugepage_range(struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: include/linux/hugetlb.h:27:
+void unmap_hugepage_range(struct vm_area_struct *,
+			unsigned long, unsigned long, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#115: FILE: include/linux/hugetlb.h:28:
+void __unmap_hugepage_range(struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#115: FILE: include/linux/hugetlb.h:28:
+void __unmap_hugepage_range(struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#115: FILE: include/linux/hugetlb.h:28:
+void __unmap_hugepage_range(struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#115: FILE: include/linux/hugetlb.h:28:
+void __unmap_hugepage_range(struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: include/linux/hugetlb.h:29:
+void __unmap_hugepage_range(struct vm_area_struct *,
+			unsigned long, unsigned long, struct page *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: mm/hugetlb.c:78:
+	unsigned long reserveflags = (unsigned long)vma->vm_private_data;
+	VM_BUG_ON(!is_vm_hugetlb_page(vma));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: mm/hugetlb.c:578:
+	if (!(vma->vm_flags & VM_SHARED) &&
+			!is_vma_resv_set(vma, HPAGE_RESV_OWNER)) {

WARNING:TYPO_SPELLING: 'mappping' may be misspelled - perhaps 'mapping'?
#305: FILE: mm/hugetlb.c:1027:
+ * mappping it owns the reserve page for. The intention is to unmap the page
    ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: mm/hugetlb.c:1032:
+int unmap_ref_private(struct mm_struct *mm,
+					struct vm_area_struct *vma,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: mm/hugetlb.c:1044:
+		BUG_ON(vma->vm_start != iter_vma->vm_start);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: mm/hugetlb.c:1059:
+			unmap_hugepage_range(iter_vma,
+				address, address + HPAGE_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: mm/hugetlb.c:1095:
+	if (!(vma->vm_flags & VM_SHARED) &&
+			is_vma_resv_set(vma, HPAGE_RESV_OWNER) &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: mm/hugetlb.c:1113:
+			BUG_ON(huge_pte_none(pte));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: mm/hugetlb.c:1115:
+				BUG_ON(page_count(old_page) != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: mm/hugetlb.c:1116:
+				BUG_ON(huge_pte_none(pte));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: mm/hugetlb.c:1146:
+static struct page *hugetlbfs_pagecache_page(struct vm_area_struct *vma,
+			unsigned long address)

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#432: FILE: mm/hugetlb.c:1171:
+	 * COW. Warn that such a situation has occured as it may not be obvious
 	                                       ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#435: FILE: mm/hugetlb.c:1174:
+		printk(KERN_WARNING

WARNING:LINE_SPACING: Missing a blank line after declarations
#470: FILE: mm/hugetlb.c:1283:
+			struct page *page;
+			page = hugetlbfs_pagecache_page(vma, address);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000274936.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 7 checks, 374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000274936.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
