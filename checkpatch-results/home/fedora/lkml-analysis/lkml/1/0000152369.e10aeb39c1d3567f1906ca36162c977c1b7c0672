WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
before activating the probe, and if it returns !0, kprobes will be activated.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#87: FILE: include/linux/kprobes.h:360:
 }
+static inline int register_module_kprobe(struct kprobe *kp,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#91: FILE: include/linux/kprobes.h:364:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#93: FILE: include/linux/kprobes.h:366:
+}
+static inline int register_module_kretprobe(struct kretprobe *rp,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#97: FILE: include/linux/kprobes.h:370:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#99: FILE: include/linux/kprobes.h:372:
+}
+static inline int register_module_jprobe(struct jprobe *jp,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#103: FILE: include/linux/kprobes.h:376:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#105: FILE: include/linux/kprobes.h:378:
+}
+void unregister_module_kprobe(struct kprobe *kp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#108: FILE: include/linux/kprobes.h:381:
+}
+void unregister_module_kretprobe(struct kretprobe *rp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#111: FILE: include/linux/kprobes.h:384:
+}
+void unregister_module_jprobe(struct jprobe *jp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: kernel/kprobes.c:1446:
+	int ret = 0;
+	if (pc->active)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kp->symbol_name'
#195: FILE: kernel/kprobes.c:1490:
+	if ((kp->symbol_name) && strchr(kp->symbol_name, ':'))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: kernel/kprobes.c:1498:
+	char buf[MODULE_NAME_LEN + 8];
+	snprintf(buf, MODULE_NAME_LEN + 8, "%s:__stext", module);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pc)...) over kzalloc(sizeof(struct module_probe_client)...)
#216: FILE: kernel/kprobes.c:1511:
+	pc = kzalloc(sizeof(struct module_probe_client), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: kernel/kprobes.c:1560:
+	const char *module;
+	module = probed_module_name(kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: kernel/kprobes.c:1573:
+	const char *module;
+	module = probed_module_name(&rp->kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: kernel/kprobes.c:1586:
+	const char *module;
+	module = probed_module_name(&jp->kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: kernel/kprobes.c:1597:
+	const char *module;
+	module = probed_module_name(kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: kernel/kprobes.c:1608:
+	const char *module;
+	module = probed_module_name(&rp->kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#324: FILE: kernel/kprobes.c:1619:
+	const char *module;
+	module = probed_module_name(&jp->kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: kernel/kprobes.c:1630:
+	int len = strlen(mod);
+	return strncmp(mod, sym, len) == 0 && sym[len] == ':';

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: kernel/kprobes.c:1638:
+	struct module *mod = module;
+	if (state == MODULE_STATE_LIVE)

CHECK:BRACES: braces {} should be used on all arms of this statement
#350: FILE: kernel/kprobes.c:1645:
+		if (state == MODULE_STATE_COMING &&
[...]
+		} else if (state == MODULE_STATE_GOING)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: kernel/kprobes.c:1662:
+	int ret;
+	ret = register_module_notifier(&module_probe_nb);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152369.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 9 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152369.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
