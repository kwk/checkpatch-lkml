WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Common case (one probe) is still fast and does not require dynamic allocation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/linux/marker.h:116:
+extern void marker_probe_cb(const struct marker *mdata,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: include/linux/marker.h:117:
+extern void marker_probe_cb(const struct marker *mdata,
+	void *call_private, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/marker.h:118:
+extern void marker_probe_cb_noarg(const struct marker *mdata,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: include/linux/marker.h:119:
+extern void marker_probe_cb_noarg(const struct marker *mdata,
+	void *call_private, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/linux/marker.h:131:
+extern int marker_probe_unregister(const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: include/linux/marker.h:132:
+extern int marker_probe_unregister(const char *name,
+	marker_probe_func *probe, void *probe_private);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/marker.h:136:
+extern int marker_probe_unregister_private_data(marker_probe_func *probe,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: include/linux/marker.h:137:
+extern int marker_probe_unregister_private_data(marker_probe_func *probe,
+	void *probe_private);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/linux/marker.h:139:
+extern void *marker_get_private_data(const char *name, marker_probe_func *probe,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: include/linux/marker.h:140:
+extern void *marker_get_private_data(const char *name, marker_probe_func *probe,
+	int num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: kernel/marker.c:83:
+void __mark_empty_function(void *probe_private, void *call_private,
+	const char *fmt, va_list *args)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: kernel/marker.c:100:
+void marker_probe_cb(const struct marker *mdata, void *call_private,
+	const char *fmt, ...)

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#308: FILE: kernel/marker.c:109:
+		/* Must read the ptype before ptr. They are not data dependant,
 		                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#309: FILE: kernel/marker.c:110:
+		 * so we put an explicit smp_rmb() here. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#313: FILE: kernel/marker.c:114:
+		 * dependant, so we put an explicit smp_rmb() here. */
 		   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#313: FILE: kernel/marker.c:114:
+		 * dependant, so we put an explicit smp_rmb() here. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: kernel/marker.c:152:
+void marker_probe_cb_noarg(const struct marker *mdata,
+	void *call_private, const char *fmt, ...)

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#360: FILE: kernel/marker.c:161:
+		/* Must read the ptype before ptr. They are not data dependant,
 		                                                     ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#361: FILE: kernel/marker.c:162:
+		 * so we put an explicit smp_rmb() here. */

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#365: FILE: kernel/marker.c:166:
+		 * dependant, so we put an explicit smp_rmb() here. */
 		   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#365: FILE: kernel/marker.c:166:
+		 * dependant, so we put an explicit smp_rmb() here. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#406: FILE: kernel/marker.c:207:
+		printk(KERN_DEBUG "Single probe : %p %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: kernel/marker.c:208:
+		printk(KERN_DEBUG "Single probe : %p %p\n",
+			entry->single.func,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#411: FILE: kernel/marker.c:212:
+			printk(KERN_DEBUG "Multi probe %d : %p %p\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: kernel/marker.c:213:
+			printk(KERN_DEBUG "Multi probe %d : %p %p\n", i,
+				entry->multi[i].func,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: kernel/marker.c:220:
+marker_entry_add_probe(struct marker_entry *entry,
+		marker_probe_func *probe, void *probe_private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: kernel/marker.c:231:
+		if (entry->single.func == probe &&
+				entry->single.probe_private == probe_private)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#440: FILE: kernel/marker.c:241:
+			return NULL;
+		} else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#449: FILE: kernel/marker.c:250:
+			if (old[nr_probes].func == probe
+					&& old[nr_probes].probe_private

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: kernel/marker.c:256:
+	new = kzalloc((nr_probes + 2) * sizeof(struct marker_probe_closure),
+			GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#456: FILE: kernel/marker.c:257:
+	if (new == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: kernel/marker.c:263:
+		memcpy(new, old,
+			nr_probes * sizeof(struct marker_probe_closure));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: kernel/marker.c:275:
+marker_entry_remove_probe(struct marker_entry *entry,
+		marker_probe_func *probe, void *probe_private)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#493: FILE: kernel/marker.c:294:
+		return NULL;
+	} else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#497: FILE: kernel/marker.c:298:
+			if ((!probe || old[nr_probes].func == probe)
+					&& old[nr_probes].probe_private

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: kernel/marker.c:313:
+			if ((probe && old[i].func != probe) ||
+					old[i].probe_private != probe_private)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#522: FILE: kernel/marker.c:323:
+		if (new == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: kernel/marker.c:327:
+			if ((probe && old[i].func != probe) ||
+					old[i].probe_private != probe_private)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#639: FILE: kernel/marker.c:453:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: kernel/marker.c:486:
+static int set_marker(struct marker_entry **entry, struct marker *elem,
+		int active)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#697: FILE: kernel/marker.c:520:
+	WARN_ON(elem->single.func != __mark_empty_function
+		&& elem->single.probe_private

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: kernel/marker.c:585:
+			set_marker(&mark_entry, iter,
+					!!mark_entry->refcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: kernel/marker.c:691:
+int marker_probe_unregister(const char *name,
+	marker_probe_func *probe, void *probe_private)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#959: FILE: kernel/marker.c:735:
+				if (entry->single.func == probe
+						&& entry->single.probe_private

WARNING:LINE_SPACING: Missing a blank line after declarations
#964: FILE: kernel/marker.c:740:
+				struct marker_probe_closure *closure;
+				closure = entry->multi;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: kernel/marker.c:743:
+					if (closure[i].func == probe &&
+							closure[i].probe_private

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: kernel/marker.c:767:
+int marker_probe_unregister_private_data(marker_probe_func *probe,
+		void *probe_private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: kernel/marker.c:813:
+void *marker_get_private_data(const char *name, marker_probe_func *probe,
+		int num)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1122: FILE: kernel/marker.c:828:
+					return e->single.probe_private;
+				else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1127: FILE: kernel/marker.c:833:
+				int match = 0;
+				closure = e->multi;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1179: FILE: include/linux/module.h:465:
+extern void module_update_markers(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: samples/markers/probe-example.c:24:
+void probe_subsystem_event(void *probe_data, void *call_data,
+	const char *format, va_list *args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1210: FILE: samples/markers/probe-example.c:35:
+	printk(KERN_INFO "Value %u, string %s\n", value, mystr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: samples/markers/probe-example.c:43:
+void probe_subsystem_eventb(void *probe_data, void *call_data,
+	const char *format, va_list *args)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1243: FILE: samples/markers/probe-example.c:81:
+		marker_probe_unregister(probe_array[i].name,
+			probe_array[i].probe_func, &probe_array[i]);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000354792.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 39 checks, 1124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000354792.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
