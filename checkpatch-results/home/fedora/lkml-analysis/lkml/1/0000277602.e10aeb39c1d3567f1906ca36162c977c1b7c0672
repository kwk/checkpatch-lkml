WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#44: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: fs/aufs/br_fuse.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#63: FILE: fs/aufs/br_fuse.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: fs/aufs/br_fuse.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#79: FILE: fs/aufs/br_fuse.c:31:
+	LKTRTrace("%.*s\n", AuDLNPair(h_dentry));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#79: FILE: fs/aufs/br_fuse.c:31:
+	LKTRTrace("%.*s\n", AuDLNPair(h_dentry));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#84: FILE: fs/aufs/br_fuse.c:36:
+		     /* && atomic_read(&h_dentry->d_inode->i_count) */
+		     && au_test_fuse(h_dentry->d_sb))) {

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#87: FILE: fs/aufs/br_fuse.c:39:
+			AuDbg("err %d\n", err);

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgDentry>
#89: FILE: fs/aufs/br_fuse.c:41:
+			AuDbgDentry(h_dentry);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#107: FILE: fs/aufs/br_fuse.c:59:
+	aufs_read_lock(dentry, AuLock_IR);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#126: FILE: fs/aufs/br_fuse.c:78:
+#if 0 /* temp */

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#139: FILE: fs/aufs/br_fuse.c:91:
+	struct inode_operations *op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#143: FILE: fs/aufs/br_fuse.c:95:
+	AuDebugOn(!inode);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#152: FILE: fs/aufs/br_fuse.c:104:
+	AuTraceErr(err);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#162: FILE: fs/aufs/br_nfs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#176: FILE: fs/aufs/br_nfs.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#177: FILE: fs/aufs/br_nfs.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <AuIntent_BRANCH>
#197: FILE: fs/aufs/br_nfs.c:36:
+		hf = hdi->hdi_file[AuIntent_BRANCH];

CHECK:CAMELCASE: Avoid CamelCase: <AuIntent_AUFS>
#198: FILE: fs/aufs/br_nfs.c:37:
+		if (hdi->hdi_file[AuIntent_AUFS] == file

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#199: FILE: fs/aufs/br_nfs.c:38:
+		if (hdi->hdi_file[AuIntent_AUFS] == file
+		    && hf->f_dentry == hd->hd_dentry) {

CHECK:CAMELCASE: Avoid CamelCase: <DiMustAnyLock>
#219: FILE: fs/aufs/br_nfs.c:58:
+	DiMustAnyLock(dentry);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#221: FILE: fs/aufs/br_nfs.c:60:
+	AuDebugOn(bindex < au_di(dentry)->di_bstart
+		  || bindex > au_di(dentry)->di_bend);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#244: FILE: fs/aufs/br_nfs.c:83:
+	AuDebugOn(bindex < au_di(dentry)->di_bstart
+		  || bindex > au_di(dentry)->di_bend

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#245: FILE: fs/aufs/br_nfs.c:84:
+		  || bindex > au_di(dentry)->di_bend
+		  || !file

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#246: FILE: fs/aufs/br_nfs.c:85:
+		  || !file
+		  || !h_file

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#256: FILE: fs/aufs/br_nfs.c:95:
+			AuWarn("freed hfile %.*s b%d left\n",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#263: FILE: fs/aufs/br_nfs.c:102:
+			hd->hd_intent_list
+				= kmalloc(sizeof(*hd->hd_intent_list),

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#292: FILE: fs/aufs/br_nfs.c:131:
+		       aufs_bindex_t bindex, struct nameidata *nd)
 		                                               ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#296: FILE: fs/aufs/br_nfs.c:135:
+	AuTraceEnter();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#302: FILE: fs/aufs/br_nfs.c:141:
+	AuDebugOn(!nd);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#340: FILE: fs/aufs/br_nfs.c:179:
+int au_fake_intent(/* struct au_ndsub *save,  */struct nameidata *nd,
                                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#368: FILE: fs/aufs/br_nfs.c:207:
+int au_hin_after_reval(struct nameidata *nd, struct dentry *dentry,
                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#373: FILE: fs/aufs/br_nfs.c:212:
+	LKTRTrace("nd %p, %.*s, b%d, f %d\n",
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#374: FILE: fs/aufs/br_nfs.c:213:
+		  nd, AuDLNPair(dentry), bindex, !!file);
 		  ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#378: FILE: fs/aufs/br_nfs.c:217:
+	if ((nd->flags & LOOKUP_OPEN)
+	    && nd->intent.open.file

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#379: FILE: fs/aufs/br_nfs.c:218:
+	    && nd->intent.open.file
+	    && !IS_ERR(nd->intent.open.file)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#398: FILE: fs/aufs/br_nfs.c:237:
+	struct nameidata *nd;
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#404: FILE: fs/aufs/br_nfs.c:243:
+	*a->errp = vfsub__lookup_hash(a->name, a->base, a->nd);
 	                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#409: FILE: fs/aufs/br_nfs.c:248:
+		  struct nameidata *nd, unsigned int flags)
 		                    ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#415: FILE: fs/aufs/br_nfs.c:254:
+	if (!dirperm1 && !au_ftest_ndx(flags, DLGT))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#416: FILE: fs/aufs/br_nfs.c:255:
+		dentry = vfsub__lookup_hash(this, parent, nd);
 		                                          ^^

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: fs/aufs/br_nfs.c:256:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#423: FILE: fs/aufs/br_nfs.c:262:
+			.nd	= nd
 			 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#423: FILE: fs/aufs/br_nfs.c:262:
+			.nd	= nd
 			   	  ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#431: FILE: fs/aufs/br_nfs.c:270:
+	AuTraceErrPtr(dentry);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#437: FILE: fs/aufs/br_nfs.c:276:
+		  struct nameidata *nd, unsigned int flags)
 		                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#439: FILE: fs/aufs/br_nfs.c:278:
+	return vfsub__lookup_hash(this, parent, nd);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#473: FILE: fs/aufs/br_nfs.c:312:
+	ndo = ndx->nd;
 	           ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#474: FILE: fs/aufs/br_nfs.c:313:
+	if (ndo) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#480: FILE: fs/aufs/br_nfs.c:319:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#494: FILE: fs/aufs/br_nfs.c:333:
+		if (tmp_nd.intent.open.file
+		    && tmp_nd.intent.open.file->f_dentry) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#515: FILE: fs/aufs/br_xfs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#529: FILE: fs/aufs/br_xfs.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#530: FILE: fs/aufs/br_xfs.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:BRACES: braces {} should be used on all arms of this statement
#556: FILE: fs/aufs/br_xfs.c:42:
+	if (!h_dentry) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#567: FILE: fs/aufs/br_xfs.c:53:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#578: FILE: fs/aufs/br_xfs.c:64:
+	AuIOErr("failed rdev for XFS inode, hi%lu, %d\n", h_inode->i_ino, err);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277602.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 21 warnings, 30 checks, 521 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277602.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
