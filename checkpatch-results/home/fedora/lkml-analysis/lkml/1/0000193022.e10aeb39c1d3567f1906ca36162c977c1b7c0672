WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#53: FILE: fs/fcntl.c:333:
+			err = filp->f_op->dir_notify(filp, arg);
 			                             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#86: FILE: fs/notify/dnotify/dnotify.c:33:
+static void clear_mark_dir_notify(struct fsnotify_mark_entry *entry, struct inode *inode, unsigned int flags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#87: FILE: fs/notify/dnotify/dnotify.c:34:
+static int should_send_event_dir_notify(struct fsnotify_group *group, struct inode *inode, __u64 mask);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dn"
#127: FILE: fs/notify/dnotify/dnotify.c:71:
+	for (; dn != NULL; dn = dn->dn_next)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'alreay' may be misspelled - perhaps 'already'?
#150: FILE: fs/notify/dnotify/dnotify.c:94:
+	/* unlikely since we alreay passed should_send_event_dir_notify() */
 	                     ^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#163: FILE: fs/notify/dnotify/dnotify.c:107:
+		if (dn->dn_mask & FS_DN_MULTISHOT)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#165: FILE: fs/notify/dnotify/dnotify.c:109:
+		else {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#180: FILE: fs/notify/dnotify/dnotify.c:124:
+static void clear_mark_dir_notify(struct fsnotify_mark_entry *entry, struct inode *inode, unsigned int flags)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#184: FILE: fs/notify/dnotify/dnotify.c:128:
+	 * have already been flushed in dnotify_flush() */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#185: FILE: fs/notify/dnotify/dnotify.c:129:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#188: FILE: fs/notify/dnotify/dnotify.c:132:
+static int should_send_event_dir_notify(struct fsnotify_group *group, struct inode *inode, __u64 mask)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#194: FILE: fs/notify/dnotify/dnotify.c:138:
+	/* !dir_notify_enable should never get here, don't waste time checking
+	if (!dir_notify_enable)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#195: FILE: fs/notify/dnotify/dnotify.c:139:
+		return 0; */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: fs/notify/dnotify/dnotify.c:190:
+^Iif (entry->private == NULL) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->private"
#250: FILE: fs/notify/dnotify/dnotify.c:190:
+	if (entry->private == NULL) 

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#333: FILE: fs/notify/dnotify/dnotify.c:269:
+	dnotify_group = fsnotify_obtain_group(UINT_MAX, UINT_MAX, ALL_DNOTIFY_EVENTS, &dnotify_fsnotify_ops);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#348: FILE: fs/notify/dnotify/dnotify.c:284:
+	 * take a group reference for it.  */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->private"
#349: FILE: fs/notify/dnotify/dnotify.c:285:
+	if (entry->private == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#375: FILE: fs/notify/dnotify/dnotify.c:307:
+	 * inode mark, aka the dnotify_flush when the fd was closed */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000193022.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 5 checks, 613 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000193022.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
