WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
   Make this statically initialized please.  That almost guarantees there'll

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'a099a9b18ab434594bb01ed920e8c58574203fa9', maybe rebased or not pulled?
#59: 
>     commit a099a9b18ab434594bb01ed920e8c58574203fa9

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#130: FILE: kernel/cpu.c:435:
+#define Z64 0, 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#139: FILE: kernel/cpu.c:444:
+#define CMI8(n, ...)						\
+	CMI((n), __VA_ARGS__), CMI((n)+1, __VA_ARGS__),		\
+	CMI((n)+2, __VA_ARGS__), CMI((n)+3, __VA_ARGS__),	\
+	CMI((n)+4, __VA_ARGS__), CMI((n)+5, __VA_ARGS__),	\
+	CMI((n)+6, __VA_ARGS__), CMI((n)+7, __VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#139: FILE: kernel/cpu.c:444:
+#define CMI8(n, ...)						\
+	CMI((n), __VA_ARGS__), CMI((n)+1, __VA_ARGS__),		\
+	CMI((n)+2, __VA_ARGS__), CMI((n)+3, __VA_ARGS__),	\
+	CMI((n)+4, __VA_ARGS__), CMI((n)+5, __VA_ARGS__),	\
+	CMI((n)+6, __VA_ARGS__), CMI((n)+7, __VA_ARGS__)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#140: FILE: kernel/cpu.c:445:
+	CMI((n), __VA_ARGS__), CMI((n)+1, __VA_ARGS__),		\
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#141: FILE: kernel/cpu.c:446:
+	CMI((n)+2, __VA_ARGS__), CMI((n)+3, __VA_ARGS__),	\
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#141: FILE: kernel/cpu.c:446:
+	CMI((n)+2, __VA_ARGS__), CMI((n)+3, __VA_ARGS__),	\
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: kernel/cpu.c:447:
+	CMI((n)+4, __VA_ARGS__), CMI((n)+5, __VA_ARGS__),	\
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: kernel/cpu.c:447:
+	CMI((n)+4, __VA_ARGS__), CMI((n)+5, __VA_ARGS__),	\
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#143: FILE: kernel/cpu.c:448:
+	CMI((n)+6, __VA_ARGS__), CMI((n)+7, __VA_ARGS__)
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#143: FILE: kernel/cpu.c:448:
+	CMI((n)+6, __VA_ARGS__), CMI((n)+7, __VA_ARGS__)
 	                                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#146: FILE: kernel/cpu.c:451:
+#define CMI64(n, ...)							\
+	CMI8((n), __VA_ARGS__), CMI8((n)+8, __VA_ARGS__),		\
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
+	CMI8((n)+32, 0, __VA_ARGS__), CMI8((n)+40, 0, __VA_ARGS__),	\
+	CMI8((n)+48, 0, __VA_ARGS__), CMI8((n)+56, 0, __VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#146: FILE: kernel/cpu.c:451:
+#define CMI64(n, ...)							\
+	CMI8((n), __VA_ARGS__), CMI8((n)+8, __VA_ARGS__),		\
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
+	CMI8((n)+32, 0, __VA_ARGS__), CMI8((n)+40, 0, __VA_ARGS__),	\
+	CMI8((n)+48, 0, __VA_ARGS__), CMI8((n)+56, 0, __VA_ARGS__)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#147: FILE: kernel/cpu.c:452:
+	CMI8((n), __VA_ARGS__), CMI8((n)+8, __VA_ARGS__),		\
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: kernel/cpu.c:453:
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: kernel/cpu.c:453:
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#149: FILE: kernel/cpu.c:454:
+	CMI8((n)+32, 0, __VA_ARGS__), CMI8((n)+40, 0, __VA_ARGS__),	\
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#149: FILE: kernel/cpu.c:454:
+	CMI8((n)+32, 0, __VA_ARGS__), CMI8((n)+40, 0, __VA_ARGS__),	\
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#150: FILE: kernel/cpu.c:455:
+	CMI8((n)+48, 0, __VA_ARGS__), CMI8((n)+56, 0, __VA_ARGS__)
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#150: FILE: kernel/cpu.c:455:
+	CMI8((n)+48, 0, __VA_ARGS__), CMI8((n)+56, 0, __VA_ARGS__)
 	                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#152: FILE: kernel/cpu.c:457:
+#define CMI64(n, ...)							\
+	CMI8((n), __VA_ARGS__), CMI8((n)+8, __VA_ARGS__),		\
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
+	CMI8((n)+32, __VA_ARGS__), CMI8((n)+40, __VA_ARGS__),	\
+	CMI8((n)+48, __VA_ARGS__), CMI8((n)+56, __VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#152: FILE: kernel/cpu.c:457:
+#define CMI64(n, ...)							\
+	CMI8((n), __VA_ARGS__), CMI8((n)+8, __VA_ARGS__),		\
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
+	CMI8((n)+32, __VA_ARGS__), CMI8((n)+40, __VA_ARGS__),	\
+	CMI8((n)+48, __VA_ARGS__), CMI8((n)+56, __VA_ARGS__)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#153: FILE: kernel/cpu.c:458:
+	CMI8((n), __VA_ARGS__), CMI8((n)+8, __VA_ARGS__),		\
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#154: FILE: kernel/cpu.c:459:
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#154: FILE: kernel/cpu.c:459:
+	CMI8((n)+16, __VA_ARGS__), CMI8((n)+24, __VA_ARGS__),		\
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: kernel/cpu.c:460:
+	CMI8((n)+32, __VA_ARGS__), CMI8((n)+40, __VA_ARGS__),	\
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: kernel/cpu.c:460:
+	CMI8((n)+32, __VA_ARGS__), CMI8((n)+40, __VA_ARGS__),	\
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#156: FILE: kernel/cpu.c:461:
+	CMI8((n)+48, __VA_ARGS__), CMI8((n)+56, __VA_ARGS__)
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#156: FILE: kernel/cpu.c:461:
+	CMI8((n)+48, __VA_ARGS__), CMI8((n)+56, __VA_ARGS__)
 	                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#159: FILE: kernel/cpu.c:464:
+#define CMI256(n, ...)							\
+	CMI64((n), __VA_ARGS__), CMI64((n)+64, Z64, __VA_ARGS__),	\
+	CMI64((n)+128, Z64, Z64, __VA_ARGS__),				\
+	CMI64((n)+192, Z64, Z64, Z64, __VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#159: FILE: kernel/cpu.c:464:
+#define CMI256(n, ...)							\
+	CMI64((n), __VA_ARGS__), CMI64((n)+64, Z64, __VA_ARGS__),	\
+	CMI64((n)+128, Z64, Z64, __VA_ARGS__),				\
+	CMI64((n)+192, Z64, Z64, Z64, __VA_ARGS__)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#160: FILE: kernel/cpu.c:465:
+	CMI64((n), __VA_ARGS__), CMI64((n)+64, Z64, __VA_ARGS__),	\
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: kernel/cpu.c:466:
+	CMI64((n)+128, Z64, Z64, __VA_ARGS__),				\
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#162: FILE: kernel/cpu.c:467:
+	CMI64((n)+192, Z64, Z64, Z64, __VA_ARGS__)
 	         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#163: FILE: kernel/cpu.c:468:
+#define Z256 Z64, Z64, Z64, Z64

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#165: FILE: kernel/cpu.c:470:
+#define CMI1024(n, ...)					\
+	CMI256((n), __VA_ARGS__),			\
+	CMI256((n)+256, Z256, __VA_ARGS__),		\
+	CMI256((n)+512, Z256, Z256, __VA_ARGS__),	\
+	CMI256((n)+768, Z256, Z256, Z256, __VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#165: FILE: kernel/cpu.c:470:
+#define CMI1024(n, ...)					\
+	CMI256((n), __VA_ARGS__),			\
+	CMI256((n)+256, Z256, __VA_ARGS__),		\
+	CMI256((n)+512, Z256, Z256, __VA_ARGS__),	\
+	CMI256((n)+768, Z256, Z256, Z256, __VA_ARGS__)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#167: FILE: kernel/cpu.c:472:
+	CMI256((n)+256, Z256, __VA_ARGS__),		\
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#168: FILE: kernel/cpu.c:473:
+	CMI256((n)+512, Z256, Z256, __VA_ARGS__),	\
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#169: FILE: kernel/cpu.c:474:
+	CMI256((n)+768, Z256, Z256, Z256, __VA_ARGS__)
 	          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#170: FILE: kernel/cpu.c:475:
+#define Z1024 Z256, Z256, Z256, Z256

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#173: FILE: kernel/cpu.c:478:
+ * to waste too much space, either. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: kernel/cpu.c:482:
+^ICMI0(4), CMI0(5), CMI0(6), CMI0(7), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: kernel/cpu.c:485:
+^ICMI0(8), CMI0(9), CMI0(10), CMI0(11), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: kernel/cpu.c:486:
+^ICMI0(12), CMI0(13), CMI0(14), CMI0(15), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: kernel/cpu.c:489:
+^ICMI0(16), CMI0(17), CMI0(18), CMI0(19), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: kernel/cpu.c:496:
+^ICMI(32, 0), CMI(33, 0), CMI(34, 0), CMI(35, 0), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: kernel/cpu.c:500:
+^ICMI(48, 0), CMI(49, 0), CMI(50, 0), CMI(51, 0), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: kernel/cpu.c:505:
+^ICMI0(32), CMI0(33), CMI0(34), CMI0(35), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: kernel/cpu.c:509:
+^ICMI0(48), CMI0(49), CMI0(50), CMI0(51), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: kernel/cpu.c:531:
+^ICMI1024(2048, Z1024, Z1024), CMI1024(3072, Z1024, Z1024, Z1024), $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250328.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 3 warnings, 32 checks, 136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250328.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
