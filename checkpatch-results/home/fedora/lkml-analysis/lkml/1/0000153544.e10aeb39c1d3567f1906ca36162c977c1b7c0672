WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Creates RAM based block device (ramzswap0) which can be used as swap device.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#77: FILE: drivers/block/Kconfig:368:
+config BLK_DEV_COMPCACHE_STATS
+	bool "Collect statistics"
+	depends on BLK_DEV_COMPCACHE
+	default y
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#98: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: drivers/block/compcache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#154: FILE: drivers/block/compcache.c:52:
+static struct block_device_operations compcache_devops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'dereferencable' may be misspelled - perhaps 'dereferenceable'?
#204: FILE: drivers/block/compcache.c:102:
+ * Given <pagenum, offset> pair, provide a dereferencable pointer.
                                            ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: drivers/block/compcache.c:121:
+static int proc_compcache_read(char *page, char **start, off_t off,
+				int count, int *eof, void *data)

CHECK:CAMELCASE: Avoid CamelCase: <xvGetTotalSizeBytes>
#229: FILE: drivers/block/compcache.c:127:
+	mem_used = xvGetTotalSizeBytes(compcache.mem_pool)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: drivers/block/compcache.c:138:
+	len = sprintf(page,
+		"DiskSize:	%8zu kB\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#298: FILE: drivers/block/compcache.c:196:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!backing_dev"
#316: FILE: drivers/block/compcache.c:214:
+	if (backing_dev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#354: FILE: drivers/block/compcache.c:252:
+	BUG_ON(!compcache.disksize);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#375: FILE: drivers/block/compcache.c:273:
+	if (unlikely(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_vcnt != 1'
#375: FILE: drivers/block/compcache.c:273:
+	if (unlikely(
+		(bio->bi_sector >= (compcache.disksize >> SECTOR_SHIFT)) ||
+		(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+		(bio->bi_vcnt != 1) ||
+		(bio->bi_size != PAGE_SIZE) ||
+		(bio->bi_io_vec[0].bv_offset != 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_size != PAGE_SIZE'
#375: FILE: drivers/block/compcache.c:273:
+	if (unlikely(
+		(bio->bi_sector >= (compcache.disksize >> SECTOR_SHIFT)) ||
+		(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+		(bio->bi_vcnt != 1) ||
+		(bio->bi_size != PAGE_SIZE) ||
+		(bio->bi_io_vec[0].bv_offset != 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_io_vec[0].bv_offset != 0'
#375: FILE: drivers/block/compcache.c:273:
+	if (unlikely(
+		(bio->bi_sector >= (compcache.disksize >> SECTOR_SHIFT)) ||
+		(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+		(bio->bi_vcnt != 1) ||
+		(bio->bi_size != PAGE_SIZE) ||
+		(bio->bi_io_vec[0].bv_offset != 0))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#381: FILE: drivers/block/compcache.c:279:
+		(bio->bi_io_vec[0].bv_offset != 0))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#391: FILE: drivers/block/compcache.c:289:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#395: FILE: drivers/block/compcache.c:293:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#398: FILE: drivers/block/compcache.c:296:
+		__free_page(pfn_to_page(

CHECK:CAMELCASE: Avoid CamelCase: <pageNum>
#399: FILE: drivers/block/compcache.c:297:
+			compcache.table[index].pageNum));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: drivers/block/compcache.c:302:
+		obj = get_ptr_atomic(compcache.table[index].pageNum,
+			compcache.table[index].offset, KM_USER0);

CHECK:CAMELCASE: Avoid CamelCase: <xvGetObjectSize>
#405: FILE: drivers/block/compcache.c:303:
+		clen = xvGetObjectSize(obj) - sizeof(struct zobj_header);

CHECK:CAMELCASE: Avoid CamelCase: <xvFree>
#407: FILE: drivers/block/compcache.c:305:
+		xvFree(compcache.mem_pool,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: drivers/block/compcache.c:306:
+		xvFree(compcache.mem_pool,
+			compcache.table[index].pageNum,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#410: FILE: drivers/block/compcache.c:308:
+		stat_dec_if_less(stats.good_compress, clen, PAGE_SIZE/2 + 1);
 		                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: drivers/block/compcache.c:319:
+static int compcache_prepare_discard(struct request_queue *q,
+					struct request *req)

WARNING:RETURN_VOID: void function return statements are not generally useful
#450: FILE: drivers/block/compcache.c:348:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: drivers/block/compcache.c:381:
+			user_mem = get_ptr_atomic(page_to_pfn(page), 0,
+						KM_USER0);

WARNING:SPLIT_STRING: quoted string split across lines
#514: FILE: drivers/block/compcache.c:412:
+			pr_debug(C "Read before write on swap device: "
+				"sector=%lu, size=%u, offset=%u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: drivers/block/compcache.c:428:
+		cmem = get_ptr_atomic(compcache.table[index].pageNum,
+				compcache.table[index].offset, KM_USER1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#542: FILE: drivers/block/compcache.c:440:
+		ret = lzo1x_decompress_safe(

WARNING:SPLIT_STRING: quoted string split across lines
#553: FILE: drivers/block/compcache.c:451:
+			pr_err(C "Decompression failed! "
+				"err=%d, page=%zu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: drivers/block/compcache.c:496:
+		if (compcache.backing_dev &&
+			(stats.compr_size > compcache.memlimit - PAGE_SIZE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/block/compcache.c:504:
+		ret = lzo1x_1_compress(user_mem, PAGE_SIZE,
+			src, &clen, compcache.compress_workmem);

CHECK:CAMELCASE: Avoid CamelCase: <xvMalloc>
#638: FILE: drivers/block/compcache.c:536:
+			if (xvMalloc(compcache.mem_pool,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: drivers/block/compcache.c:537:
+			if (xvMalloc(compcache.mem_pool,
+				clen + sizeof(*zheader),

WARNING:SPLIT_STRING: quoted string split across lines
#644: FILE: drivers/block/compcache.c:542:
+				pr_debug(C "Error allocating memory for "
+					"compressed page: %zu, size=%zu \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#644: FILE: drivers/block/compcache.c:542:
+					"compressed page: %zu, size=%zu \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: drivers/block/compcache.c:552:
+		cmem = get_ptr_atomic(compcache.table[index].pageNum,
+				compcache.table[index].offset, KM_USER1);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#672: FILE: drivers/block/compcache.c:570:
+		stat_inc_if_less(stats.good_compress, clen, PAGE_SIZE/2 + 1);
 		                                                     ^

WARNING:TYPO_SPELLING: 'indentify' may be misspelled - perhaps 'identify'?
#694: FILE: drivers/block/compcache.c:592:
+ * to indentify it as a swap partition. Prepare such a header
       ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.backing_dev"
#710: FILE: drivers/block/compcache.c:608:
+	if (compcache.backing_dev == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#759: FILE: drivers/block/compcache.c:657:
+		"disk size not provided. You can use disksize_kb module "
+		"param to specify size.\nUsing default: (%u%% of RAM).\n",

WARNING:SPLIT_STRING: quoted string split across lines
#769: FILE: drivers/block/compcache.c:667:
+		"There is little point creating a compcache of greater than "
+		"twice the size of memory since we expect a 2:1 compression "

WARNING:SPLIT_STRING: quoted string split across lines
#770: FILE: drivers/block/compcache.c:668:
+		"twice the size of memory since we expect a 2:1 compression "
+		"ratio. Note that compcache uses about 0.1%% of the size of "

WARNING:SPLIT_STRING: quoted string split across lines
#771: FILE: drivers/block/compcache.c:669:
+		"ratio. Note that compcache uses about 0.1%% of the size of "
+		"the swap device when not in use so a huge compcache is "

WARNING:SPLIT_STRING: quoted string split across lines
#772: FILE: drivers/block/compcache.c:670:
+		"the swap device when not in use so a huge compcache is "
+		"wasteful.\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#791: FILE: drivers/block/compcache.c:689:
+	int memlimit_valid = 1;
+	compcache.memlimit = memlimit_kb << 10;

WARNING:SPLIT_STRING: quoted string split across lines
#795: FILE: drivers/block/compcache.c:693:
+		pr_info(C "memory limit not set. You can use "
+			"memlimit_kb module param to specify limit.");

WARNING:SPLIT_STRING: quoted string split across lines
#801: FILE: drivers/block/compcache.c:699:
+		pr_info(C "memory limit cannot be greater than "
+			"disksize: limit=%zu, disksize=%zu",

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: drivers/block/compcache.c:707:
+		size_t mempart, disksize;
+		pr_info(C "\nUsing default: MIN[(%u%% of RAM), "

WARNING:SPLIT_STRING: quoted string split across lines
#810: FILE: drivers/block/compcache.c:708:
+		pr_info(C "\nUsing default: MIN[(%u%% of RAM), "
+			"(backing disk size)].\n",

WARNING:SPLIT_STRING: quoted string split across lines
#820: FILE: drivers/block/compcache.c:718:
+		"Its not advisable setting limit more than half of "
+		"size of memory since we expect a 2:1 compression ratio. "

WARNING:SPLIT_STRING: quoted string split across lines
#821: FILE: drivers/block/compcache.c:719:
+		"size of memory since we expect a 2:1 compression ratio. "
+		"Limit represents amount of *compressed* data we can keep "

WARNING:SPLIT_STRING: quoted string split across lines
#822: FILE: drivers/block/compcache.c:720:
+		"Limit represents amount of *compressed* data we can keep "
+		"in memory!\n"

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#831: FILE: drivers/block/compcache.c:729:
+	BUG_ON(!compcache.memlimit);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#835: FILE: drivers/block/compcache.c:733:
+
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.compress_workmem"
#861: FILE: drivers/block/compcache.c:759:
+	if (compcache.compress_workmem == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#862: FILE: drivers/block/compcache.c:760:
+	if (compcache.compress_workmem == NULL) {
+		pr_err(C "Error allocating compressor working memory\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.compress_buffer"
#868: FILE: drivers/block/compcache.c:766:
+	if (compcache.compress_buffer == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#869: FILE: drivers/block/compcache.c:767:
+	if (compcache.compress_buffer == NULL) {
+		pr_err(C "Error allocating compressor buffer space\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.table"
#876: FILE: drivers/block/compcache.c:774:
+	if (compcache.table == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#884: FILE: drivers/block/compcache.c:782:
+	if (page == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.disk"
#901: FILE: drivers/block/compcache.c:799:
+	if (compcache.disk == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.disk->queue"
#924: FILE: drivers/block/compcache.c:822:
+	if (compcache.disk->queue == NULL) {

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#938: FILE: drivers/block/compcache.c:836:
+	 * We have ident mapping of sectors for compcache and
+	 * and the backing swap device. So, this queue flag

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: drivers/block/compcache.c:844:
+	blk_queue_set_discard(compcache.disk->queue,
+				compcache_prepare_discard);

CHECK:CAMELCASE: Avoid CamelCase: <xvCreateMemPool>
#950: FILE: drivers/block/compcache.c:848:
+	compcache.mem_pool = xvCreateMemPool();

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#958: FILE: drivers/block/compcache.c:856:
+	proc = create_proc_entry("compcache", S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: braces {} should be used on all arms of this statement
#959: FILE: drivers/block/compcache.c:857:
+	if (proc)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#961: FILE: drivers/block/compcache.c:859:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "compcache.disk"
#983: FILE: drivers/block/compcache.c:881:
+	if (compcache.disk != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#986: FILE: drivers/block/compcache.c:884:
+			unregister_blkdev(compcache.disk->major,
+					compcache.disk->disk_name);

CHECK:CAMELCASE: Avoid CamelCase: <xvDestroyMemPool>
#995: FILE: drivers/block/compcache.c:893:
+	xvDestroyMemPool(compcache.mem_pool);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1007: FILE: drivers/block/compcache.c:905:
+	size_t index, num_pages;
+	num_pages = compcache.disksize >> PAGE_SHIFT;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1029: FILE: drivers/block/compcache.c:927:
+			__free_page(pfn_to_page(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: drivers/block/compcache.c:931:
+			xvFree(compcache.mem_pool,
+				compcache.table[index].pageNum,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1104: FILE: drivers/block/compcache.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#1166: FILE: drivers/block/compcache.h:63:
+#define SECTOR_SIZE		(1 << SECTOR_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1168: FILE: drivers/block/compcache.h:65:
+#define SECTORS_PER_PAGE	(1 << SECTORS_PER_PAGE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <Pool>
#1216: FILE: drivers/block/compcache.h:113:
+	struct Pool *mem_pool;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1220: FILE: drivers/block/compcache.h:117:
+	struct mutex lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1234: FILE: drivers/block/compcache.h:131:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1244: FILE: drivers/block/compcache.h:141:
+				 * needed to enforce memlimit */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1261: FILE: drivers/block/compcache.h:158:
+};
+/*-- */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000153544.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 34 warnings, 52 checks, 1190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000153544.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
