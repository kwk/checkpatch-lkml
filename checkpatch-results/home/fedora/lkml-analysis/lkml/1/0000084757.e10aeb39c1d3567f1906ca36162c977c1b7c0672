WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#99: FILE: include/linux/ftrace_event.h:115:
+	int			(*regfunc)(struct ftrace_event_call *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#100: FILE: include/linux/ftrace_event.h:116:
+	void			(*unregfunc)(struct ftrace_event_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#106: FILE: include/linux/ftrace_event.h:118:
+	int			(*raw_init)(struct ftrace_event_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#107: FILE: include/linux/ftrace_event.h:119:
+	int			(*show_format)(struct ftrace_event_call *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_seq *' should also have an identifier name
#107: FILE: include/linux/ftrace_event.h:119:
+	int			(*show_format)(struct ftrace_event_call *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#109: FILE: include/linux/ftrace_event.h:121:
+	int			(*define_fields)(struct ftrace_event_call *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/ftrace_event.h:145:
+extern int trace_add_event_call(struct ftrace_event_call *call);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/ftrace_event.h:146:
+extern void trace_remove_event_call(struct ftrace_event_call *call);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/trace/syscall.h:54:
+extern int reg_event_syscall_enter(struct ftrace_event_call *call);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/trace/syscall.h:55:
+extern void unreg_event_syscall_enter(struct ftrace_event_call *call);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/trace/syscall.h:56:
+extern int reg_event_syscall_exit(struct ftrace_event_call *call);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/trace/syscall.h:57:
+extern void unreg_event_syscall_exit(struct ftrace_event_call *call);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#322: FILE: kernel/trace/trace_events.c:971:
+			if (ret != -ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPLIT_STRING: quoted string split across lines
#324: FILE: kernel/trace/trace_events.c:973:
+				pr_warning("Could not initialize trace "
+				"events/%s\n", call->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: kernel/trace/trace_events.c:992:
+	int ret;
+	mutex_lock(&event_mutex);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#387: FILE: kernel/trace/trace_events.c:1044:
+#define for_each_event(event, start, end)			\
+	for (event = start;					\
+	     (unsigned long)event < (unsigned long)end;		\
+	     event++)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#403: FILE: kernel/trace/trace_events.c:1060:
+	struct file_operations		id;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#404: FILE: kernel/trace/trace_events.c:1061:
+	struct file_operations		enable;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#405: FILE: kernel/trace/trace_events.c:1062:
+	struct file_operations		format;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#406: FILE: kernel/trace/trace_events.c:1063:
+	struct file_operations		filter;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#465: FILE: kernel/trace/trace_export.c:129:
+int ftrace_define_fields_##call(struct ftrace_event_call *c);		\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 7 checks, 418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
