WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Gitweb:     http://git.kernel.org/tip/683c91f85d7a3e1092d7fa3ec5687af8cd379f02

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: arch/x86/include/asm/uv/uv_irq.h:34:
+extern struct cpumask *uv_get_restricted_mask(const struct cpumask *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cpumask *' should also have an identifier name
#131: FILE: arch/x86/include/asm/uv/uv_irq.h:34:
+extern struct cpumask *uv_get_restricted_mask(const struct cpumask *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#131: FILE: arch/x86/include/asm/uv/uv_irq.h:34:
+extern struct cpumask *uv_get_restricted_mask(const struct cpumask *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern void uv_free_restricted_mask(struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpumask *' should also have an identifier name
#132: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern void uv_free_restricted_mask(struct cpumask *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: arch/x86/include/asm/uv/uv_irq.h:36:
+extern void arch_init_uv_cfg_cpus_allowed(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/x86/include/asm/uv/uv_mmrs.h:840:
+    unsigned long^Iv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: arch/x86/include/asm/uv/uv_mmrs.h:841:
+    struct uvh_lb_socket_destination_table_s {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: arch/x86/include/asm/uv/uv_mmrs.h:847:
+    } s;$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#594: FILE: arch/x86/kernel/uv_irq.c:276:
+	uv_irq_cpus_allowed = kzalloc(uv_num_possible_blades() *
+			sizeof(cpumask_var_t *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uv_irq_cpus_allowed"
#597: FILE: arch/x86/kernel/uv_irq.c:279:
+	if (uv_irq_cpus_allowed == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#598: FILE: arch/x86/kernel/uv_irq.c:280:
+		printk(KERN_EMERG "Out of memory");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: arch/x86/kernel/uv_irq.c:289:
+		if (!zalloc_cpumask_var_node(&uv_irq_cpus_allowed[bid],
+				GFP_KERNEL, uv_blade_to_memory_nid(bid))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#608: FILE: arch/x86/kernel/uv_irq.c:290:
+			printk(KERN_EMERG "Out of memory on blade %d", bid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: arch/x86/kernel/uv_irq.c:295:
+		pa = uv_global_mmr64_address(uv_blade_to_pnode(bid),
+			UVH_LB_SOCKET_DESTINATION_TABLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: arch/x86/kernel/uv_irq.c:298:
+		for (i = 0; i < UVH_LB_SOCKET_DESTINATION_TABLE_DEPTH; pa++,
+				i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: arch/x86/kernel/uv_irq.c:306:
+					cpumask_set_cpu(cpu,
+						uv_irq_cpus_allowed[bid]);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050692.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 8 checks, 456 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050692.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
