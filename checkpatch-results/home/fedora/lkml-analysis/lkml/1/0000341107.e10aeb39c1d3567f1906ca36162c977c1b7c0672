WARNING:LINE_SPACING: Missing a blank line after declarations
#53: FILE: arch/x86/mm/init_64.c:270:
+	unsigned long entry;
+	entry = __PAGE_KERNEL_LARGE|_PAGE_GLOBAL|paddr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#53: FILE: arch/x86/mm/init_64.c:270:
+	entry = __PAGE_KERNEL_LARGE|_PAGE_GLOBAL|paddr;
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#53: FILE: arch/x86/mm/init_64.c:270:
+	entry = __PAGE_KERNEL_LARGE|_PAGE_GLOBAL|paddr;
 	                                        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#115: FILE: arch/x86/mm/init_64.c:389:
+		if (direct_gbpages >= 0 && cpu_has_gbpages) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#116: FILE: arch/x86/mm/init_64.c:390:
+			printk(KERN_INFO "Using GB pages for direct mapping\n");

CHECK:BRACES: Unbalanced braces around else statement
#118: FILE: arch/x86/mm/init_64.c:392:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: arch/x86/mm/init_64.c:447:
+	struct page *p = alloc_page(GFP_KERNEL);
+	if (!p)

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#138: FILE: arch/x86/mm/init_64.c:450:
+	Dprintk("split_gb_page %lx\n", paddr);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'split_gb_page', this function's name, in a string
#138: FILE: arch/x86/mm/init_64.c:450:
+	Dprintk("split_gb_page %lx\n", paddr);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#159: FILE: arch/x86/mm/init_64.c:475:
+	Dprintk("clear_kernel_mapping %lx-%lx\n", address, address+size);
 	                                                          ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 6 checks, 118 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
