WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
> > > I just hit a NULL pointer dereference in cifs_close while accessing a file on a

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#53: 
> > at /home/kronos/src/linux-2.6.git/lib/list_debug.c:46

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#57: 
> >     at /home/kronos/src/linux-2.6.git/lib/list_debug.c:46

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#59: 
> >     at /home/kronos/src/linux-2.6.git/fs/cifs/file.c:670

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#61: 
> >     at /home/kronos/src/linux-2.6.git/fs/file_table.c:281

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#63: 
> >     at /home/kronos/src/linux-2.6.git/fs/file_table.c:227

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#64: 
> > #4  0xffffffff8029ad30 in filp_close (filp=0xffff8800ad8f6d00, id=0xffff880037a3e080)
                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#65: 
> >     at /home/kronos/src/linux-2.6.git/fs/open.c:1108

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#67: 
> >     at /home/kronos/src/linux-2.6.git/fs/open.c:1137

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#74: 
> >     at /home/kronos/src/linux-2.6.git/fs/cifs/file.c:670

WARNING:TYPO_SPELLING: 'initilized' may be misspelled - perhaps 'initialized'?
#83: 
> > So both flist and tlist were not initilized in cifs_open.
                                     ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#256: FILE: fs/cifs/dir.c:244:
+	struct cifsInodeInfo *pCifsInode;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#256: FILE: fs/cifs/dir.c:244:
+	struct cifsInodeInfo *pCifsInode;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == 0'
#271: FILE: fs/cifs/dir.c:278:
+		if ((rc == 0) && (newinode == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newinode == NULL'
#271: FILE: fs/cifs/dir.c:278:
+		if ((rc == 0) && (newinode == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newinode"
#271: FILE: fs/cifs/dir.c:278:
+		if ((rc == 0) && (newinode == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#287: FILE: fs/cifs/dir.c:415:
+		struct cifsFileInfo *pCifsFile =

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#287: FILE: fs/cifs/dir.c:415:
+		struct cifsFileInfo *pCifsFile =

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pCifsFile"
#290: FILE: fs/cifs/dir.c:418:
+		if (pCifsFile == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <fileHandle>
#292: FILE: fs/cifs/dir.c:420:
+		pCifsFile->netfid = fileHandle;

CHECK:CAMELCASE: Avoid CamelCase: <pInode>
#294: FILE: fs/cifs/dir.c:422:
+		pCifsFile->pInode = newinode;

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#295: FILE: fs/cifs/dir.c:423:
+		pCifsFile->invalidHandle = false;

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#296: FILE: fs/cifs/dir.c:424:
+		pCifsFile->closePend     = false;

CHECK:CAMELCASE: Avoid CamelCase: <wrtPending>
#300: FILE: fs/cifs/dir.c:428:
+		atomic_set(&pCifsFile->wrtPending, 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#303: FILE: fs/cifs/dir.c:431:
+		/* set the following in open now
+				pCifsFile->pfile = file; */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#303: FILE: fs/cifs/dir.c:431:
+				pCifsFile->pfile = file; */

CHECK:CAMELCASE: Avoid CamelCase: <GlobalSMBSeslock>
#304: FILE: fs/cifs/dir.c:432:
+		write_lock(&GlobalSMBSeslock);

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#305: FILE: fs/cifs/dir.c:433:
+		list_add(&pCifsFile->tlist, &tcon->openFileList);

CHECK:BRACES: braces {} should be used on all arms of this statement
#316: FILE: fs/cifs/dir.c:444:
+			if ((oplock & 0xF) == OPLOCK_EXCLUSIVE) {
[...]
+			} else if ((oplock & 0xF) == OPLOCK_READ)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#317: FILE: fs/cifs/dir.c:445:
+				pCifsInode->clientCanCacheAll = true;

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#318: FILE: fs/cifs/dir.c:446:
+				pCifsInode->clientCanCacheRead = true;

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#319: FILE: fs/cifs/dir.c:447:
+				cFYI(1, ("Exclusive Oplock inode %p",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: fs/cifs/dir.c:448:
+				cFYI(1, ("Exclusive Oplock inode %p",
+					newinode));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#332: FILE: fs/cifs/dir.c:585:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#384: FILE: fs/cifs/dir.c:637:
+	if (pTcon->unix_ext)

CHECK:CAMELCASE: Avoid CamelCase: <newInode>
#385: FILE: fs/cifs/dir.c:638:
+		rc = cifs_get_inode_info_unix(&newInode, full_path,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#438: FILE: fs/cifs/file.c:149:
+	/* want handles we can use to read with first
+	   in the list so we do not have to walk the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#439: FILE: fs/cifs/file.c:150:
+	   list to search for one in write_begin */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pCifsFile->pfile == NULL'
#477: FILE: fs/cifs/file.c:294:
+			if ((pCifsFile->pfile == NULL) &&
+			    (pCifsFile->pid == current->tgid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pCifsFile->pid == current->tgid'
#477: FILE: fs/cifs/file.c:294:
+			if ((pCifsFile->pfile == NULL) &&
+			    (pCifsFile->pid == current->tgid)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pCifsFile->pfile"
#477: FILE: fs/cifs/file.c:294:
+			if ((pCifsFile->pfile == NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#489: FILE: fs/cifs/file.c:306:
+		if (file->private_data != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <FreeXid>
#491: FILE: fs/cifs/file.c:308:
+			FreeXid(xid);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#493: FILE: fs/cifs/file.c:310:
+			return rc;
+		} else {

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#495: FILE: fs/cifs/file.c:312:
+				cERROR(1, ("could not find file instance for "

WARNING:SPLIT_STRING: quoted string split across lines
#496: FILE: fs/cifs/file.c:313:
+				cERROR(1, ("could not find file instance for "
+					   "new file %p", file));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124052.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 29 checks, 373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124052.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
