WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/tomoyo_cond.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: fs/tomoyo_cond.c:2:
+ * fs/tomoyo_cond.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: fs/tomoyo_cond.c:50:
+	struct path_info arg;
+	arg.name = arg_ptr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: fs/tomoyo_cond.c:53:
+		bool result;
+		if (index != argv->index)

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: fs/tomoyo_cond.c:84:
+	struct path_info value;
+	name.name = env_name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: fs/tomoyo_cond.c:90:
+		bool result;
+		if (!ccs_path_matches_pattern(&name, envp->name))

WARNING:TYPO_SPELLING: 'Poiner' may be misspelled - perhaps 'Pointer'?
#157: FILE: fs/tomoyo_cond.c:115:
+ * @envp: Poiner to "struct envp_entry".
           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#168: FILE: fs/tomoyo_cond.c:126:
+	/*
+	  if exec.argc=3

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: fs/tomoyo_cond.c:155:
+	u8 *checked;
+	if (argc + envc <= sizeof(local_checked)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#211: FILE: fs/tomoyo_cond.c:169:
+			printk(KERN_DEBUG "get_user_pages() failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#225: FILE: fs/tomoyo_cond.c:183:
+			printk(KERN_DEBUG "kmap() failed\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: fs/tomoyo_cond.c:191:
+			const unsigned char c = kaddr[offset++];
+			arg.name = arg_ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: fs/tomoyo_cond.c:221:
+				char *cp = strchr(arg_ptr, '=');
+				if (cp) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: fs/tomoyo_cond.c:301:
+	int base = 10;
+	if (*cp == '0') {

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: fs/tomoyo_cond.c:303:
+		char c = *(cp + 1);
+		if (c == 'x' || c == 'X') {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#353: FILE: fs/tomoyo_cond.c:311:
+	*result = simple_strtoul(cp, &ep, base);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: fs/tomoyo_cond.c:325:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: fs/tomoyo_cond.c:374:
+	char *cp;
+	start += 10;

WARNING:LINE_SPACING: Missing a blank line after declarations
#461: FILE: fs/tomoyo_cond.c:419:
+	char *cp;
+	start += 11;

WARNING:LINE_SPACING: Missing a blank line after declarations
#581: FILE: fs/tomoyo_cond.c:539:
+	char *start = strstr(condition, "; set ");
+	if (!start)

WARNING:LINE_SPACING: Missing a blank line after declarations
#588: FILE: fs/tomoyo_cond.c:546:
+		unsigned long value;
+		while (*start == ' ')

CHECK:SPACING: No space is necessary after a cast
#606: FILE: fs/tomoyo_cond.c:564:
+		post_state[i] = (u8) value;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: fs/tomoyo_cond.c:585:
+	struct condition_list *ptr;
+	mutex_lock(&lock);

CHECK:SPACING: No space is necessary after a cast
#638: FILE: fs/tomoyo_cond.c:596:
+		if (memcmp(((u8 *) ptr) + sizeof(ptr->list),

CHECK:SPACING: No space is necessary after a cast
#639: FILE: fs/tomoyo_cond.c:597:
+			   ((u8 *) new_ptr) + sizeof(new_ptr->list),

WARNING:LINE_SPACING: Missing a blank line after declarations
#686: FILE: fs/tomoyo_cond.c:644:
+	u8 post_state[4] = { 0, 0, 0, 0 };
+	if (!parse_post_condition(start, post_state))

CHECK:SPACING: No space is necessary after a cast
#774: FILE: fs/tomoyo_cond.c:732:
+	ptr = (unsigned long *) (new_ptr + 1);

CHECK:SPACING: No space is necessary after a cast
#775: FILE: fs/tomoyo_cond.c:733:
+	argv = (struct argv_entry *) (ptr + condc);

CHECK:SPACING: No space is necessary after a cast
#776: FILE: fs/tomoyo_cond.c:734:
+	envp = (struct envp_entry *) (argv + argc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: fs/tomoyo_cond.c:746:
+		u8 right_2_type = 0;
+		while (*start == ' ')

WARNING:LINE_SPACING: Missing a blank line after declarations
#794: FILE: fs/tomoyo_cond.c:752:
+			char *cp = strchr(start + 10, ' ');
+			if (cp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#808: FILE: fs/tomoyo_cond.c:766:
+			char *cp = strchr(start + 11, ' ');
+			if (cp)

CHECK:SPACING: No space is necessary after a cast
#872: FILE: fs/tomoyo_cond.c:830:
+		*ptr = (((u32) match) << 16) |

CHECK:SPACING: No space is necessary after a cast
#873: FILE: fs/tomoyo_cond.c:831:
+			(((u32) left_1_type) << 18) |

CHECK:SPACING: No space is necessary after a cast
#874: FILE: fs/tomoyo_cond.c:832:
+			(((u32) left_2_type) << 20) |

CHECK:SPACING: No space is necessary after a cast
#875: FILE: fs/tomoyo_cond.c:833:
+			(((u32) right_1_type) << 22) |

CHECK:SPACING: No space is necessary after a cast
#876: FILE: fs/tomoyo_cond.c:834:
+			(((u32) right_2_type) << 24) |

CHECK:SPACING: No space is necessary after a cast
#877: FILE: fs/tomoyo_cond.c:835:
+			(((u32) left) << 8) |

CHECK:SPACING: No space is necessary after a cast
#878: FILE: fs/tomoyo_cond.c:836:
+			((u32) right);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#898: FILE: fs/tomoyo_cond.c:856:
+	/*
+	  printk(KERN_DEBUG "argc=%u envc=%u condc=%u\n", argc, envc, condc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#900: FILE: fs/tomoyo_cond.c:858:
+	BUG_ON(argc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: fs/tomoyo_cond.c:859:
+	BUG_ON(envc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#902: FILE: fs/tomoyo_cond.c:860:
+	BUG_ON(condc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#993: FILE: fs/tomoyo_cond.c:951:
+	const struct linux_binprm *bprm;
+	if (!cond)

CHECK:SPACING: No space is necessary after a cast
#1001: FILE: fs/tomoyo_cond.c:959:
+	ptr = (unsigned long *) (cond + 1);

CHECK:SPACING: No space is necessary after a cast
#1002: FILE: fs/tomoyo_cond.c:960:
+	argv = (const struct argv_entry *) (ptr + condc);

CHECK:SPACING: No space is necessary after a cast
#1003: FILE: fs/tomoyo_cond.c:961:
+	envp = (const struct envp_entry *) (argv + argc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1009: FILE: fs/tomoyo_cond.c:967:
+		const u8 right = header;
+		ptr++;

CHECK:SPACING: No space is necessary after a cast
#1108: FILE: fs/tomoyo_cond.c:1066:
+			left_max = (u8) (task->tomoyo_flags >> 24);

CHECK:SPACING: No space is necessary after a cast
#1111: FILE: fs/tomoyo_cond.c:1069:
+			left_max = (u8) (task->tomoyo_flags >> 16);

CHECK:SPACING: No space is necessary after a cast
#1114: FILE: fs/tomoyo_cond.c:1072:
+			left_max = (u8) (task->tomoyo_flags >> 8);

CHECK:SPACING: No space is necessary after a cast
#1220: FILE: fs/tomoyo_cond.c:1178:
+			right_max = (u8) (task->tomoyo_flags >> 24);

CHECK:SPACING: No space is necessary after a cast
#1223: FILE: fs/tomoyo_cond.c:1181:
+			right_max = (u8) (task->tomoyo_flags >> 16);

CHECK:SPACING: No space is necessary after a cast
#1226: FILE: fs/tomoyo_cond.c:1184:
+			right_max = (u8) (task->tomoyo_flags >> 8);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1276: FILE: fs/tomoyo_cond.c:1234:
+	const u8 flags = ptr ? ptr->post_state[3] : 0;
+	if (!flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1315: FILE: fs/tomoyo_cond.c:1273:
+	char buffer[32];
+	if (!cond)

CHECK:SPACING: No space is necessary after a cast
#1320: FILE: fs/tomoyo_cond.c:1278:
+	ptr = (const unsigned long *) (cond + 1);

CHECK:SPACING: No space is necessary after a cast
#1321: FILE: fs/tomoyo_cond.c:1279:
+	argv = (const struct argv_entry *) (ptr + condc);

CHECK:SPACING: No space is necessary after a cast
#1322: FILE: fs/tomoyo_cond.c:1280:
+	envp = (const struct envp_entry *) (argv + argc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1333: FILE: fs/tomoyo_cond.c:1291:
+		const u8 right = header;
+		ptr++;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1338: FILE: fs/tomoyo_cond.c:1296:
+			const char *keyword
+				= condition_control_keyword[left].keyword;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1360: FILE: fs/tomoyo_cond.c:1318:
+			const char *keyword
+				= condition_control_keyword[right].keyword;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1385: FILE: fs/tomoyo_cond.c:1343:
+		const char *op = argv->is_not ? "!=" : "=";
+		if (!ccs_io_printf(head, " exec.argv[%u]%s\"%s\"", argv->index,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1393: FILE: fs/tomoyo_cond.c:1351:
+		const char *value = envp->value ? envp->value->name : NULL;
+		if (!ccs_io_printf(head, " exec.envp[\"%s\"]%s",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299129.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 36 warnings, 28 checks, 1380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299129.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
