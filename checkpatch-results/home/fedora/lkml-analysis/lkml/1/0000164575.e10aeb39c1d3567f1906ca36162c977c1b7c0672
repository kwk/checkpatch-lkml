CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/percpu.h:85:
+extern size_t __init pcpu_setup_static(pcpu_populate_pte_fn_t populate_pte_fn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#97: FILE: include/linux/percpu.h:100:
+#define __percpu_disguise(pdata) (struct percpu_data *)~(unsigned long)(pdata)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#135: FILE: kernel/module.c:379:
+		printk(KERN_WARNING "%s: per-cpu alignment %li > %li\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#142: FILE: kernel/module.c:386:
+		printk(KERN_WARNING

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#182: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#187: FILE: mm/percpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#188: FILE: mm/percpu.c:2:
+ * linux/mm/percpu.c - percpu memory allocator

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'eqaul' may be misspelled - perhaps 'equal'?
#218: FILE: mm/percpu.c:32:
+ * guaranteed to be eqaul to or larger than the maximum contiguous
                     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'followings' may be misspelled - perhaps 'following'?
#230: FILE: mm/percpu.c:44:
+ * To use this allocator, arch code should do the followings.
                                                   ^^^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#253: FILE: mm/percpu.c:67:
+#include <asm/cacheflush.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: mm/percpu.c:123:
+	int highbit = fls(size);
+	return max(highbit - PCPU_SLOT_BASE_SHIFT + 2, 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pcpu_chunk_pagep"
#341: FILE: mm/percpu.c:155:
+	return *pcpu_chunk_pagep(chunk, 0, page_idx) != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'searchs' may be misspelled - perhaps 'searches'?
#430: FILE: mm/percpu.c:244:
+ * searchs for the chunk with the highest start address which isn't
    ^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: mm/percpu.c:259:
+		BUG_ON(!n);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#452: FILE: mm/percpu.c:266:
+		BUG_ON(!n);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: mm/percpu.c:284:
+	BUG_ON(*p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: mm/percpu.c:371:
+		chunk->map = pcpu_realloc(NULL, 0,
+				PCPU_DFL_MAP_ALLOC * sizeof(chunk->map[0]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#573: FILE: mm/percpu.c:387:
+		BUG_ON(i == 0 && head != 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#589: FILE: mm/percpu.c:403:
+			if (chunk->map[i - 1] > 0)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#591: FILE: mm/percpu.c:405:
+			else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#662: FILE: mm/percpu.c:476:
+	BUG_ON(off != freeme);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#663: FILE: mm/percpu.c:477:
+	BUG_ON(chunk->map[i] > 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#715: FILE: mm/percpu.c:529:
+		unmap_kernel_range_noflush(

WARNING:LINE_SPACING: Missing a blank line after declarations
#742: FILE: mm/percpu.c:556:
+	int unmap_start = -1;
+	int uninitialized_var(unmap_end);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#742: FILE: mm/percpu.c:556:
+	int uninitialized_var(unmap_end);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unmap_end' should also have an identifier name
#742: FILE: mm/percpu.c:556:
+	int uninitialized_var(unmap_end);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#787: FILE: mm/percpu.c:601:
+		err = map_kernel_range_noflush(

WARNING:SPLIT_STRING: quoted string split across lines
#914: FILE: mm/percpu.c:728:
+		WARN(true, "illegal size (%zu) or align (%zu) for "
+		     "percpu allocation\n", size, align);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164575.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 20 warnings, 7 checks, 990 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164575.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
