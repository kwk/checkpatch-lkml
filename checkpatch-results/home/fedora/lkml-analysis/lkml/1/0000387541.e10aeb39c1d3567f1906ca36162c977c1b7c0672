CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: arch/um/include/sysdep-i386/ptrace.h:171:
+extern void arch_init_registers(int pid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#115: FILE: arch/um/os-Linux/sys-i386/registers.c:27:
+	if(ptrace(PTRACE_GETFPXREGS, pid, 0, fp_regs) < 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#122: FILE: arch/um/os-Linux/sys-i386/registers.c:34:
+	if(ptrace(PTRACE_SETFPXREGS, pid, 0, fp_regs) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: arch/um/os-Linux/sys-i386/registers.c:59:
+	if(!err)

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: arch/um/os-Linux/sys-i386/registers.c:62:
+	if(errno != EIO)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#260: FILE: arch/um/sys-i386/signal.c:45:
+	tmp = (tmp | (tmp>>1)) & 0x5555; /* 0V0V0V0V0V0V0V0V */
 	                 ^

CHECK:SPACING: No space is necessary after a cast
#271: FILE: arch/um/sys-i386/signal.c:56:
+	unsigned long twd = (unsigned long) fxsave->twd;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#276: FILE: arch/um/sys-i386/signal.c:61:
+#define FPREG_ADDR(f, n)	((char *)&(f)->st_space + (n) * 16);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#280: FILE: arch/um/sys-i386/signal.c:65:
+			st = (struct _fpxreg *) FPREG_ADDR(fxsave, i);

ERROR:SPACING: space prohibited after that open parenthesis '('
#287: FILE: arch/um/sys-i386/signal.c:72:
+				if ( !st->significand[0] &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: arch/um/sys-i386/signal.c:73:
+				if ( !st->significand[0] &&
+				     !st->significand[1] &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#290: FILE: arch/um/sys-i386/signal.c:75:
+				     !st->significand[3] ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#297: FILE: arch/um/sys-i386/signal.c:82:
+				if (st->significand[3] & 0x8000) {
[...]
+				} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#333: FILE: arch/um/sys-i386/signal.c:118:
+	from = (struct _fpxreg *) &fxsave->st_space[0];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: arch/um/sys-i386/signal.c:124:
+		if (__put_user(*f, t) ||
+				__put_user(*(f + 1), t + 1) ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#354: FILE: arch/um/sys-i386/signal.c:139:
+	if (copy_from_user( env, buf, 7 * sizeof(long)))

CHECK:SPACING: No space is necessary after a cast
#366: FILE: arch/um/sys-i386/signal.c:151:
+	to = (struct _fpxreg *) &fxsave->st_space[0];

CHECK:SPACING: No space is necessary after a cast
#414: FILE: arch/um/sys-i386/signal.c:191:
+					    (unsigned long *) &fpx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#416: FILE: arch/um/sys-i386/signal.c:193:
+			printk(KERN_ERR "copy_sc_from_user - "

WARNING:SPLIT_STRING: quoted string split across lines
#417: FILE: arch/um/sys-i386/signal.c:194:
+			printk(KERN_ERR "copy_sc_from_user - "
+			       "restore_fpx_registers failed, errno = %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#422: FILE: arch/um/sys-i386/signal.c:199:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#422: FILE: arch/um/sys-i386/signal.c:199:
+	else {

CHECK:SPACING: No space is necessary after a cast
#431: FILE: arch/um/sys-i386/signal.c:208:
+					   (unsigned long *) &fp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#433: FILE: arch/um/sys-i386/signal.c:210:
+			printk(KERN_ERR "copy_sc_from_user - "

WARNING:SPLIT_STRING: quoted string split across lines
#434: FILE: arch/um/sys-i386/signal.c:211:
+			printk(KERN_ERR "copy_sc_from_user - "
+			       "restore_fp_registers failed, errno = %d\n",

CHECK:SPACING: No space is necessary after a cast
#468: FILE: arch/um/sys-i386/signal.c:256:
+					 (unsigned long *) &fpx);

ERROR:SPACING: space required before the open brace '{'
#469: FILE: arch/um/sys-i386/signal.c:257:
+		if (err < 0){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#470: FILE: arch/um/sys-i386/signal.c:258:
+			printk(KERN_ERR "copy_sc_to_user - save_fpx_registers "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_sc_to_user', this function's name, in a string
#470: FILE: arch/um/sys-i386/signal.c:258:
+			printk(KERN_ERR "copy_sc_to_user - save_fpx_registers "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#471: FILE: arch/um/sys-i386/signal.c:259:
+			printk(KERN_ERR "copy_sc_to_user - save_fpx_registers "
+			       "failed, errno = %d\n", err);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#488: FILE: arch/um/sys-i386/signal.c:276:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#488: FILE: arch/um/sys-i386/signal.c:276:
+	else {

CHECK:SPACING: No space is necessary after a cast
#492: FILE: arch/um/sys-i386/signal.c:280:
+					(unsigned long *) &fp);

CHECK:SPACING: No space is necessary after a cast
#534: FILE: arch/um/sys-x86_64/signal.c:84:
+				   (unsigned long *) &fp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#536: FILE: arch/um/sys-x86_64/signal.c:86:
+		printk(KERN_ERR "copy_sc_from_user - "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_sc_from_user', this function's name, in a string
#536: FILE: arch/um/sys-x86_64/signal.c:86:
+		printk(KERN_ERR "copy_sc_from_user - "

WARNING:SPLIT_STRING: quoted string split across lines
#537: FILE: arch/um/sys-x86_64/signal.c:87:
+		printk(KERN_ERR "copy_sc_from_user - "
+		       "restore_fp_registers failed, errno = %d\n",

CHECK:SPACING: No space is necessary after a cast
#562: FILE: arch/um/sys-x86_64/signal.c:145:
+				(unsigned long *) &fp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#564: FILE: arch/um/sys-x86_64/signal.c:147:
+		printk(KERN_ERR "copy_sc_from_user - restore_fp_registers "

WARNING:SPLIT_STRING: quoted string split across lines
#565: FILE: arch/um/sys-x86_64/signal.c:148:
+		printk(KERN_ERR "copy_sc_from_user - restore_fp_registers "
+		       "failed, errno = %d\n", -err);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#635: FILE: arch/um/include/registers.h:15:
+extern int save_fpx_registers(int pid, unsigned long *fp_regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#636: FILE: arch/um/include/registers.h:16:
+extern int restore_fpx_registers(int pid, unsigned long *fp_regs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387541.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 14 warnings, 18 checks, 530 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387541.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
