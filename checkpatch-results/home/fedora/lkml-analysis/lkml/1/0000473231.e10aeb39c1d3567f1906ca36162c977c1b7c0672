WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#55: FILE: include/linux/akt.h:175:
+#define DECLARE_TUNABLE(s)	struct auto_tune s;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ns' may be better as '(ns)' to avoid precedence issues
#64: FILE: include/linux/akt.h:188:
+#define init_tunable_ipcns(ns, s, thr, min, max, tun, chk, type)	\
+	do {								\
+		DEFINE_TUNABLE(s, thr, min, max, tun, chk, type);	\
+		s.flags |= TUNABLE_IPC_NS;				\
+		ns->s = s;						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#64: FILE: include/linux/akt.h:188:
+#define init_tunable_ipcns(ns, s, thr, min, max, tun, chk, type)	\
+	do {								\
+		DEFINE_TUNABLE(s, thr, min, max, tun, chk, type);	\
+		s.flags |= TUNABLE_IPC_NS;				\
+		ns->s = s;						\
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#102: FILE: kernel/autotune/akt.c:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#208: FILE: kernel/autotune/akt.c:291:
+	if (new_value >= which->min.abs_value &&
[...]
 	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: kernel/autotune/akt.c:292:
+	if (new_value >= which->min.abs_value &&
+					new_value < which->max.value) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#264: FILE: kernel/autotune/akt.c:369:
+	if (new_value <= which->max.abs_value &&
[...]
 	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: kernel/autotune/akt.c:370:
+	if (new_value <= which->max.abs_value &&
+					new_value > which->min.value) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: kernel/autotune/akt.c:381:
+
+

CHECK:SPACING: No space is necessary after a cast
#290: FILE: kernel/autotune/akt.c:394:
+		char *shift = (char *) p;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#293: FILE: kernel/autotune/akt.c:397:
+		shift = (shift - (char *) &init_ipc_ns) + (char *) ns;

CHECK:SPACING: No space is necessary after a cast
#295: FILE: kernel/autotune/akt.c:399:
+		return (struct auto_tune *) shift;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473231.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 11 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473231.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
