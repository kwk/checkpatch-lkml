CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#118: FILE: include/linux/module.h:187:
 	__attribute__((section("__kcrctab" sec), unused))	\
+	= (ksym_crc_t) (unsigned long) &__crc_##sym;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#118: FILE: include/linux/module.h:187:
+	= (ksym_crc_t) (unsigned long) &__crc_##sym;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#121: FILE: include/linux/module.h:189:
+#define __CRC_SYMBOL(sym, sec)					\
+	extern const char __Kstrtab_##sym[]			\
+	__asm__("__kstrtab_" #sym "\n\t"			\
+		".section __kcrctab" sec ",\"a\"\n\t"		\
+		".weak __crc_" #sym "\n\t"			\
+		__stringify(ARCH_ASM_KSYM_CRC) " __crc_" #sym "\n\t" \
+		".previous");					\
+	static const char __kstrtab_##sym[]			\
+	__used __attribute__((__unused__));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <__Kstrtab_##sym>
#122: FILE: include/linux/module.h:190:
+	extern const char __Kstrtab_##sym[]			\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#129: FILE: include/linux/module.h:197:
+	__used __attribute__((__unused__));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#140: FILE: include/linux/module.h:212:
 	__attribute__((section("__ksymtab" sec), unused))	\
+	= { (unsigned long)&sym, __KSTRTAB(sym) }

WARNING:INCLUDE_LINUX: Use #include <linux/module.h> instead of <asm/module.h>
#205: FILE: include/linux/moduleparam.h:8:
+#include <asm/module.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#215: FILE: include/linux/moduleparam.h:19:
+typedef unsigned int ksym_crc_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#217: FILE: include/linux/moduleparam.h:21:
+typedef unsigned long ksym_crc_t;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#235: FILE: kernel/module.c:177:
+extern const ksym_crc_t __start___kcrctab[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#236: FILE: kernel/module.c:178:
+extern const ksym_crc_t __start___kcrctab_gpl[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#237: FILE: kernel/module.c:179:
+extern const ksym_crc_t __start___kcrctab_gpl_future[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#245: FILE: kernel/module.c:185:
+extern const ksym_crc_t __start___kcrctab_unused[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#246: FILE: kernel/module.c:186:
+extern const ksym_crc_t __start___kcrctab_unused_gpl[];

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000102609.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 4 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000102609.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
