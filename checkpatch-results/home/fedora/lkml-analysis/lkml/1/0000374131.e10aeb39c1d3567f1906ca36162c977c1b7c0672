WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
      fs_enet: Be an of_platform device when CONFIG_PPC_CPM_NEW_BINDING is set.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#139: FILE: drivers/net/ehea/ehea_main.c:102:
 static int __devinit ehea_probe_adapter(struct ibmebus_dev *dev,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#298: FILE: drivers/net/ehea/ehea_main.c:2424:
+	struct hcp_modify_qp_cb0* cb0;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: drivers/net/ehea/ehea_main.c:2489:
+void ehea_update_rqs(struct ehea_qp *orig_qp, struct ehea_port_res * pr)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#373: FILE: drivers/net/ehea/ehea_main.c:2499:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#403: FILE: drivers/net/ehea/ehea_main.c:2529:
+	struct hcp_modify_qp_cb0* cb0;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#496: FILE: drivers/net/ehea/ehea_main.c:2645:
+						if (ret) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#533: FILE: drivers/net/ehea/ehea_main.c:2694:
+						if (!ret)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: drivers/net/ehea/ehea_main.c:2701:
+       up(&dlpar_mem_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: drivers/net/ehea/ehea_main.c:2702:
+       ehea_info("re-initializing driver complete");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: drivers/net/ehea/ehea_phyp.h:129:
+#define H_QP_CR_RES_STATE ^I    0x0000007F00000000ULL /* Resultant state */$

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#688: FILE: drivers/net/fs_enet/fs_enet-main.c:54:
 static char version[] __devinitdata =

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#930: FILE: drivers/net/fs_enet/fs_enet-main.c:993:
+	if (fs_get_scc_index(fpi->fs_no) >=0)
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#964: FILE: drivers/net/fs_enet/fs_enet-main.c:1144:
+void __iomem *fs_enet_immap = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1005: FILE: drivers/net/fs_enet/fs_enet-main.c:1168:
+static int __devinit find_phy(struct device_node *np,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1006: FILE: drivers/net/fs_enet/fs_enet-main.c:1169:
+                              struct fs_platform_info *fpi)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: drivers/net/fs_enet/fs_enet-main.c:1169:
+                              struct fs_platform_info *fpi)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1013: FILE: drivers/net/fs_enet/fs_enet-main.c:1176:
+	const u32 *data = of_get_property(np, "phy-handle", &len);
+	if (!data || len != 4)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1047: FILE: drivers/net/fs_enet/fs_enet-main.c:1210:
+static int __devinit fs_enet_probe(struct of_device *ofdev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1048: FILE: drivers/net/fs_enet/fs_enet-main.c:1211:
+                                   const struct of_device_id *match)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: drivers/net/fs_enet/fs_enet-main.c:1211:
+                                   const struct of_device_id *match)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1080: FILE: drivers/net/fs_enet/fs_enet-main.c:1243:
+^I           sizeof(struct sk_buff **) *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1081: FILE: drivers/net/fs_enet/fs_enet-main.c:1244:
+^I           (fpi->rx_ring + fpi->tx_ring);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1143: FILE: drivers/net/fs_enet/fs_enet-main.c:1306:
+	printk(KERN_INFO "%s: fs_enet: %02x:%02x:%02x:%02x:%02x:%02x\n",

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#1177: FILE: drivers/net/fs_enet/fs_enet-main.c:1340:
+static struct of_device_id fs_enet_match[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,pq1-fec-enet" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#1192: FILE: drivers/net/fs_enet/fs_enet-main.c:1355:
+		.compatible = "fsl,pq1-fec-enet",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1209: FILE: drivers/net/fs_enet/fs_enet-main.c:1372:
+	int r = setup_immap();
+	if (r != 0)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1229: FILE: drivers/net/fs_enet/fs_enet-main.c:1392:
 static int __devinit fs_enet_probe(struct device *dev)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_m' may be better as '(_m)' to avoid precedence issues
#1444: FILE: drivers/net/fs_enet/mac-fcc.c:56:
+#define W32(_p, _m, _v)	out_be32(&(_p)->_m, (_v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_m' may be better as '(_m)' to avoid precedence issues
#1445: FILE: drivers/net/fs_enet/mac-fcc.c:57:
+#define R32(_p, _m)	in_be32(&(_p)->_m)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_m' may be better as '(_m)' to avoid precedence issues
#1451: FILE: drivers/net/fs_enet/mac-fcc.c:61:
+#define W16(_p, _m, _v)	out_be16(&(_p)->_m, (_v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_m' may be better as '(_m)' to avoid precedence issues
#1452: FILE: drivers/net/fs_enet/mac-fcc.c:62:
+#define R16(_p, _m)	in_be16(&(_p)->_m)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_m' may be better as '(_m)' to avoid precedence issues
#1458: FILE: drivers/net/fs_enet/mac-fcc.c:66:
+#define W8(_p, _m, _v)	out_8(&(_p)->_m, (_v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_m' may be better as '(_m)' to avoid precedence issues
#1459: FILE: drivers/net/fs_enet/mac-fcc.c:67:
+#define R8(_p, _m)	in_8(&(_p)->_m)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1494: FILE: drivers/net/fs_enet/mac-fcc.c:91:
+	printk(KERN_ERR "%s(): Not able to issue CPM command\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1495: FILE: drivers/net/fs_enet/mac-fcc.c:92:
+	       __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1567: FILE: drivers/net/fs_enet/mac-fcc.c:162:
+		fep->fcc.fcccp = ioremap(r->start,
 				r->end - r->start + 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1592: FILE: drivers/net/fs_enet/mac-fcc.c:188:
+^I                  (fpi->cp_block << 21) |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1593: FILE: drivers/net/fs_enet/mac-fcc.c:189:
+^I                  (12 << 6);$

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1607: FILE: drivers/net/fs_enet/mac-fcc.c:212:
+	fep->ring_base = (void __iomem __force *)dma_alloc_coherent(fep->dev,

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1901: FILE: drivers/net/fs_enet/mac-fec.c:162:
+	fep->ring_base = (void __force __iomem *)dma_alloc_coherent(fep->dev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2077: FILE: drivers/net/fs_enet/mac-scc.c:104:
+	printk(KERN_ERR "%s(): Not able to issue CPM command\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2078: FILE: drivers/net/fs_enet/mac-scc.c:105:
+	printk(KERN_ERR "%s(): Not able to issue CPM command\n",
+		__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2078: FILE: drivers/net/fs_enet/mac-scc.c:105:
+		__FUNCTION__);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2146: FILE: drivers/net/fs_enet/mac-scc.c:194:
+	fep->ring_base = (void __iomem __force*)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2404: FILE: drivers/net/fs_enet/mii-bitbang.c:76:
+	struct bb_info *bitbang = container_of(ctrl, struct bb_info, ctrl);
+	return bb_read(bitbang->dat, bitbang->mdio_msk);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2449: FILE: drivers/net/fs_enet/mii-bitbang.c:114:
+static int __devinit fs_mii_bitbang_init(struct mii_bus *bus,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2450: FILE: drivers/net/fs_enet/mii-bitbang.c:115:
+                                         struct device_node *np)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2450: FILE: drivers/net/fs_enet/mii-bitbang.c:115:
+                                         struct device_node *np)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2459: FILE: drivers/net/fs_enet/mii-bitbang.c:123:
+	int ret = of_address_to_resource(np, 0, &res);
+	if (ret)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2494: FILE: drivers/net/fs_enet/mii-bitbang.c:156:
+static void __devinit add_phy(struct mii_bus *bus, struct device_node *np)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2569: FILE: drivers/net/fs_enet/mii-bitbang.c:173:
+static int __devinit fs_enet_mdio_probe(struct of_device *ofdev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2570: FILE: drivers/net/fs_enet/mii-bitbang.c:174:
+                                        const struct of_device_id *match)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2570: FILE: drivers/net/fs_enet/mii-bitbang.c:174:
+                                        const struct of_device_id *match)$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bitbang)...) over kzalloc(sizeof(struct bb_info)...)
#2603: FILE: drivers/net/fs_enet/mii-bitbang.c:182:
+	bitbang = kzalloc(sizeof(struct bb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#2627: FILE: drivers/net/fs_enet/mii-bitbang.c:192:
+	new_bus->name = "CPM2 Bitbanged MII",
+
+	ret = fs_mii_bitbang_init(new_bus, ofdev->node);

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#2737: FILE: drivers/net/fs_enet/mii-bitbang.c:248:
+static struct of_device_id fs_enet_mdio_bb_match[] = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2780: FILE: drivers/net/fs_enet/mii-bitbang.c:275:
+static int __devinit fs_mii_bitbang_init(struct bb_info *bitbang,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2781: FILE: drivers/net/fs_enet/mii-bitbang.c:276:
+                                         struct fs_mii_bb_platform_info *fmpi)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2781: FILE: drivers/net/fs_enet/mii-bitbang.c:276:
+                                         struct fs_mii_bb_platform_info *fmpi)$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2792: FILE: drivers/net/fs_enet/mii-bitbang.c:286:
 static int __devinit fs_enet_mdio_probe(struct device *dev)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bitbang)...) over kzalloc(sizeof(struct bb_info)...)
#2800: FILE: drivers/net/fs_enet/mii-bitbang.c:297:
+	bitbang = kzalloc(sizeof(struct bb_info), GFP_KERNEL);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2803: FILE: drivers/net/fs_enet/mii-bitbang.c:299:
+	if (NULL == bitbang)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2812: FILE: drivers/net/fs_enet/mii-bitbang.c:306:
+	if (NULL == new_bus)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2891: FILE: drivers/net/fs_enet/mii-fec.c:88:
+	fec->fecp = fecp = ioremap(r->start,sizeof(fec_t));
 	                                   ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2891: FILE: drivers/net/fs_enet/mii-fec.c:88:
+	fec->fecp = fecp = ioremap(r->start,sizeof(fec_t));

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2929: FILE: drivers/net/fs_enet/mii-fec.c:155:
+static void __devinit add_phy(struct mii_bus *bus, struct device_node *np)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2946: FILE: drivers/net/fs_enet/mii-fec.c:172:
+static int __devinit fs_enet_mdio_probe(struct of_device *ofdev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2947: FILE: drivers/net/fs_enet/mii-fec.c:173:
+                                        const struct of_device_id *match)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2947: FILE: drivers/net/fs_enet/mii-fec.c:173:
+                                        const struct of_device_id *match)$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_bus)...) over kzalloc(sizeof(struct mii_bus)...)
#2955: FILE: drivers/net/fs_enet/mii-fec.c:181:
+	new_bus = kzalloc(sizeof(struct mii_bus), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fec)...) over kzalloc(sizeof(struct fec_info)...)
#2959: FILE: drivers/net/fs_enet/mii-fec.c:185:
+	fec = kzalloc(sizeof(struct fec_info), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2983: FILE: drivers/net/fs_enet/mii-fec.c:209:
+^I                                  FEC_ECNTRL_ETHER_EN);$

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#3036: FILE: drivers/net/fs_enet/mii-fec.c:262:
+static struct of_device_id fs_enet_mdio_fec_match[] = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#3063: FILE: drivers/net/fs_enet/mii-fec.c:289:
 static int __devinit fs_enet_fec_mdio_probe(struct device *dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3102: FILE: drivers/net/pcmcia/axnet_cs.c:775:
+^IPCMCIA_DEVICE_MANF_CARD(0xffff, 0x1090), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#3146: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3151: FILE: drivers/net/phy/mdio-bitbang.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#3251: FILE: drivers/net/phy/mdio-bitbang.c:101:
+	/*
+	 * Send a 32 bit preamble ('1's) with an extra '1' bit for good

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3272: FILE: drivers/net/phy/mdio-bitbang.c:122:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bus)...) over kzalloc(sizeof(struct mii_bus)...)
#3318: FILE: drivers/net/phy/mdio-bitbang.c:168:
+	bus = kzalloc(sizeof(struct mii_bus), GFP_KERNEL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3418: FILE: include/linux/mdio-bitbang.h:1:
+#ifndef __LINUX_MDIO_BITBANG_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000374131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 19 errors, 47 warnings, 16 checks, 3121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000374131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
