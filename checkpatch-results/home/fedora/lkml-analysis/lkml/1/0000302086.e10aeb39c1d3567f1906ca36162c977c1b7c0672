WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
using task_struct::act_as to point to it when performing operations on behalf

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'Casey Schaufler <casey@schaufler-ca.com> [Smack changes]', should be: 'Casey Schaufler <casey@schaufler-ca.com> (Smack changes)'
#55: 
Signed-off-by: Casey Schaufler <casey@schaufler-ca.com> [Smack changes]

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#89: FILE: include/linux/capability.h:371:
+# define CAP_NFSD_SET     ((kernel_cap_t){{ CAP_FS_MASK_B0|CAP_TO_MASK(CAP_SYS_RESOURCE), \
                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#95: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: include/linux/cred.h:1:
+/* Credential management

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/cred.h:18:
+extern struct task_security *get_kernel_security(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#117: FILE: include/linux/cred.h:18:
+extern struct task_security *get_kernel_security(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/cred.h:19:
+extern int set_security_override(struct task_security *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_security *' should also have an identifier name
#118: FILE: include/linux/cred.h:19:
+extern int set_security_override(struct task_security *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#118: FILE: include/linux/cred.h:19:
+extern int set_security_override(struct task_security *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/cred.h:20:
+extern int set_security_override_from_ctx(struct task_security *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_security *' should also have an identifier name
#119: FILE: include/linux/cred.h:20:
+extern int set_security_override_from_ctx(struct task_security *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#119: FILE: include/linux/cred.h:20:
+extern int set_security_override_from_ctx(struct task_security *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/cred.h:21:
+extern int change_create_files_as(struct task_security *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_security *' should also have an identifier name
#120: FILE: include/linux/cred.h:21:
+extern int change_create_files_as(struct task_security *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#120: FILE: include/linux/cred.h:21:
+extern int change_create_files_as(struct task_security *, struct inode *);

WARNING:SIZEOF_PARENTHESIS: sizeof *sec should be sizeof(*sec)
#255: FILE: kernel/cred.c:162:
+	sec = kzalloc(sizeof *sec, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: security/selinux/hooks.c:3123:
+ ^Iret = avc_has_perm(ptsec->sid, secid,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: security/selinux/hooks.c:3123:
+ ^Iret = avc_has_perm(ptsec->sid, secid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: security/selinux/hooks.c:3123:
+ ^Iret = avc_has_perm(ptsec->sid, secid,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: security/selinux/hooks.c:3149:
+ ^Iret = avc_has_perm(ptsec->sid, isec->sid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#466: FILE: security/selinux/hooks.c:3149:
+ ^Iret = avc_has_perm(ptsec->sid, isec->sid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: security/selinux/hooks.c:3149:
+ ^Iret = avc_has_perm(ptsec->sid, isec->sid,$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!smack"
#517: FILE: security/smack/smack_lsm.c:1000:
+	if (smack == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302086.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 6 checks, 439 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302086.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
