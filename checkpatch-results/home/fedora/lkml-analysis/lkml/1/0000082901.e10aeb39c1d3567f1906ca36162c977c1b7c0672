WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#16: 
Subject: [PATCH 2/4] [Target_Core_Mod/ConfigFS]: Add implict ALUA
                                                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
This patch updates target_core_mod/ConfigFS to support to move the ALUA target port

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#50: 
*) alua_access_state: Changing the implict ALUA primary access state.
                                   ^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#96: FILE: drivers/target/target_core_configfs.c:2177:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_alua_access_state(

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#106: FILE: drivers/target/target_core_configfs.c:2187:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"
 		                              ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#106: FILE: drivers/target/target_core_configfs.c:2187:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#106: FILE: drivers/target/target_core_configfs.c:2187:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"
+			" tg_pt_gp ID: %hu\n", tg_pt_gp->tg_pt_gp_valid_id);

WARNING:SPLIT_STRING: quoted string split across lines
#107: FILE: drivers/target/target_core_configfs.c:2188:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"
+			" tg_pt_gp ID: %hu\n", tg_pt_gp->tg_pt_gp_valid_id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: drivers/target/target_core_configfs.c:2191:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#111: FILE: drivers/target/target_core_configfs.c:2192:
+	ret = strict_strtoul(page, 0, &tmp);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: drivers/target/target_core_configfs.c:2194:
+		printk("Unable to extract new ALUA access state from"

WARNING:SPLIT_STRING: quoted string split across lines
#114: FILE: drivers/target/target_core_configfs.c:2195:
+		printk("Unable to extract new ALUA access state from"
+				" %s\n", page);

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#120: FILE: drivers/target/target_core_configfs.c:2201:
+		printk(KERN_ERR "Unable to process implict configfs ALUA"
 		                                   ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#120: FILE: drivers/target/target_core_configfs.c:2201:
+		printk(KERN_ERR "Unable to process implict configfs ALUA"

WARNING:TYPO_SPELLING: 'diabled' may be misspelled - perhaps 'disabled'?
#121: FILE: drivers/target/target_core_configfs.c:2202:
+			" transition while TPGS_IMPLICT_ALUA is diabled\n");
 			                                        ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#121: FILE: drivers/target/target_core_configfs.c:2202:
+		printk(KERN_ERR "Unable to process implict configfs ALUA"
+			" transition while TPGS_IMPLICT_ALUA is diabled\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: drivers/target/target_core_configfs.c:2207:
+	ret = core_alua_do_port_transition(tg_pt_gp, su_dev->se_dev_ptr,
+					NULL, NULL, new_state, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: drivers/target/target_core_configfs.c:2208:
+^Ireturn (!ret) ? count : -EINVAL;^I$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#130: FILE: drivers/target/target_core_configfs.c:2211:
+SE_DEV_ALUA_TG_PT_ATTR(alua_access_state, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#135: FILE: drivers/target/target_core_configfs.c:2216:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_access_status(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#148: FILE: drivers/target/target_core_configfs.c:2229:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_access_type(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#155: FILE: drivers/target/target_core_configfs.c:2236:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_alua_access_type(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#163: FILE: drivers/target/target_core_configfs.c:2244:
+SE_DEV_ALUA_TG_PT_ATTR(alua_access_type, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#168: FILE: drivers/target/target_core_configfs.c:2249:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_nonop_delay_msecs(

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#174: FILE: drivers/target/target_core_configfs.c:2255:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#176: FILE: drivers/target/target_core_configfs.c:2257:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_nonop_delay_msecs(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#184: FILE: drivers/target/target_core_configfs.c:2265:
+SE_DEV_ALUA_TG_PT_ATTR(nonop_delay_msecs, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#190: FILE: drivers/target/target_core_configfs.c:2271:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_preferred(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#197: FILE: drivers/target/target_core_configfs.c:2278:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_preferred(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#205: FILE: drivers/target/target_core_configfs.c:2286:
+SE_DEV_ALUA_TG_PT_ATTR(preferred, S_IRUGO | S_IWUSR);

WARNING:SPLIT_STRING: quoted string split across lines
#241: FILE: drivers/target/target_core_configfs.c:2432:
 	printk(KERN_INFO "Target_Core_ConfigFS: Allocated ALUA Target Port"
+		" Group: alua/tg_pt_gps/%s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#250: FILE: drivers/target/target_core_configfs.c:2446:
 	printk(KERN_INFO "Target_Core_ConfigFS: Releasing ALUA Target Port"
+		" Group: alua/tg_pt_gps/%s, ID: %hu\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#284: FILE: drivers/target/target_core_configfs.c:2541:
+	dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 6,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/target/target_core_configfs.c:2542:
+	dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 6,
 			GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/target/target_core_configfs.c:2577:
+	config_group_init_type_name(&se_dev->t10_alua.alua_tg_pt_gps_group,
+			"alua", &target_core_alua_tg_pt_gps_cit);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tg_pt_gp_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#309: FILE: drivers/target/target_core_configfs.c:2592:
+	tg_pt_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: drivers/target/target_core_configfs.c:2593:
+	tg_pt_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+				GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#312: FILE: drivers/target/target_core_configfs.c:2595:
+		printk(KERN_ERR "Unable to allocate tg_pt_gp_cg->"

WARNING:SPLIT_STRING: quoted string split across lines
#313: FILE: drivers/target/target_core_configfs.c:2596:
+		printk(KERN_ERR "Unable to allocate tg_pt_gp_cg->"
+				"default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: drivers/target/target_core_configfs.c:2601:
+	config_group_init_type_name(&tg_pt_gp->tg_pt_gp_group,
+			"default_tg_pt_gp", &target_core_alua_tg_pt_gp_cit);

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: drivers/target/target_core_configfs.c:2615:
+        }$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: drivers/target/target_core_configfs.c:2615:
+        }$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*alua_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#389: FILE: drivers/target/target_core_configfs.c:2898:
+	alua_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: drivers/target/target_core_configfs.c:2899:
+	alua_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
 			GFP_KERNEL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082901.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 23 warnings, 18 checks, 390 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082901.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
