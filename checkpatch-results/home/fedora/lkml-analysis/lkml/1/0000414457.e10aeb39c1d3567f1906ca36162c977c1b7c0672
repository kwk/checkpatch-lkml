WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Modified task_struct to hold a 'signed flag' which is set on exec(), inherited

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#75: FILE: fs/exec.c:942:
 	if(!(bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID)) {
[...]
+               if (mode & S_ISUID && current->sns_valid_sig) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: fs/exec.c:945:
+               if (mode & S_ISUID && current->sns_valid_sig) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: fs/exec.c:945:
+               if (mode & S_ISUID && current->sns_valid_sig) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: fs/exec.c:947:
+               if (mode & S_ISUID) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: fs/exec.c:947:
+               if (mode & S_ISUID) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 24)
#81: FILE: fs/exec.c:947:
+               if (mode & S_ISUID) {
[...]
 			current->personality &= ~PER_CLEAR_ON_SETID;

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: fs/exec.c:960:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP) && current->sns_valid_sig) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: fs/exec.c:960:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP) && current->sns_valid_sig) {$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#92: FILE: fs/exec.c:960:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP) && current->sns_valid_sig) {

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#92: FILE: fs/exec.c:960:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP) && current->sns_valid_sig) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: fs/exec.c:962:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: fs/exec.c:962:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 24)
#94: FILE: fs/exec.c:962:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {
[...]
 			current->personality &= ~PER_CLEAR_ON_SETID;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#94: FILE: fs/exec.c:962:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#94: FILE: fs/exec.c:962:
+               if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#133: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#138: FILE: include/linux/sns.h:1:
+#ifdef CONFIG_SNS_SIGNED

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: security/sns.c:1:
+#include <linux/crypto.h>

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#233: FILE: security/sns.c:15:
+	char algname[CRYPTO_MAX_ALG_NAME+1];
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: security/sns.c:19:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#238: FILE: security/sns.c:20:
+static int sns_sig_reader(read_descriptor_t *desc, struct page *page, unsigned long offset, unsigned long nr)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#241: FILE: security/sns.c:23:
+	struct hash_desc *hash_desc = (struct hash_desc *) desc->arg.data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#274: FILE: security/sns.c:56:
+		printk(KERN_DEBUG "sns_signature_valid: xattr_resolve_name failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#274: FILE: security/sns.c:56:
+		printk(KERN_DEBUG "sns_signature_valid: xattr_resolve_name failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#280: FILE: security/sns.c:62:
+		printk(KERN_DEBUG "sns_signature_valid: invalid xattr found\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#280: FILE: security/sns.c:62:
+		printk(KERN_DEBUG "sns_signature_valid: invalid xattr found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#286: FILE: security/sns.c:68:
+		printk(KERN_DEBUG "sns_signature_valid: inode of file has invalid size\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#286: FILE: security/sns.c:68:
+		printk(KERN_DEBUG "sns_signature_valid: inode of file has invalid size\n");

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#290: FILE: security/sns.c:72:
+	if (unlikely(IS_ERR(tfm))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#291: FILE: security/sns.c:73:
+		printk("sns_signature_valid: %s unavailable\n", attrdata.algname);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#291: FILE: security/sns.c:73:
+		printk("sns_signature_valid: %s unavailable\n", attrdata.algname);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#301: FILE: security/sns.c:83:
+		printk("sns_signature_valid: hash function did not accept setkey\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#301: FILE: security/sns.c:83:
+		printk("sns_signature_valid: hash function did not accept setkey\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: security/sns.c:89:
+	BUG_ON(read_desc.written != i_size_read(inode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#309: FILE: security/sns.c:91:
+	printk("sns_signature_valid: attrdata.algname = %s\n", attrdata.algname);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#309: FILE: security/sns.c:91:
+	printk("sns_signature_valid: attrdata.algname = %s\n", attrdata.algname);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: security/sns.c:92:
+	printk("sns_signature_valid: attrib: ");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#310: FILE: security/sns.c:92:
+	printk("sns_signature_valid: attrib: ");

CHECK:SPACING: No space is necessary after a cast
#312: FILE: security/sns.c:94:
+		printk("%02x ", (unsigned char) attrdata.hash_value[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: security/sns.c:94:
+		printk("%02x ", (unsigned char) attrdata.hash_value[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#313: FILE: security/sns.c:95:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: security/sns.c:96:
+	printk("sns_signature_valid: result: ");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sns_signature_valid', this function's name, in a string
#314: FILE: security/sns.c:96:
+	printk("sns_signature_valid: result: ");

CHECK:SPACING: No space is necessary after a cast
#316: FILE: security/sns.c:98:
+		printk("%02x ", (unsigned char) hash_result[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#316: FILE: security/sns.c:98:
+		printk("%02x ", (unsigned char) hash_result[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: security/sns.c:99:
+	printk("\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 38 warnings, 5 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
