WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
Subject: [PATCH 1/2] [Target_Core_Mod]: Add support for UNIT_ATTENTION conditions

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#62: 
to explictly release a target_core_mod established UNIT ATTENTION condition.
   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#108: FILE: drivers/lio-core/target_core_base.h:543:
+typedef struct se_ua_s {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#124: FILE: drivers/lio-core/target_core_base.h:613:
+	spinlock_t		ua_lock;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#145: FILE: drivers/lio-core/target_core_configfs.c:482:
+SE_DEV_ATTR(emulate_ua_intlck_ctrl, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 0'
#198: FILE: drivers/lio-core/target_core_device.c:977:
+	if ((flag != 0) && (flag != 1) && (flag != 2)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 1'
#198: FILE: drivers/lio-core/target_core_device.c:977:
+	if ((flag != 0) && (flag != 1) && (flag != 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 2'
#198: FILE: drivers/lio-core/target_core_device.c:977:
+	if ((flag != 0) && (flag != 1) && (flag != 2)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#199: FILE: drivers/lio-core/target_core_device.c:978:
+		printk(KERN_ERR "Illegal value %d\n", flag);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#204: FILE: drivers/lio-core/target_core_device.c:983:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device"

WARNING:SPLIT_STRING: quoted string split across lines
#205: FILE: drivers/lio-core/target_core_device.c:984:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device"
+			" UA_INTRLCK_CTRL while dev_export_obj: %d count"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#206: FILE: drivers/lio-core/target_core_device.c:985:
+			" UA_INTRLCK_CTRL while dev_export_obj: %d count"
+			" exists\n", dev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#211: FILE: drivers/lio-core/target_core_device.c:990:
+	printk(KERN_INFO "dev[%p]: SE Device UA_INTRLCK_CTRL flag: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: drivers/lio-core/target_core_device.c:991:
+	printk(KERN_INFO "dev[%p]: SE Device UA_INTRLCK_CTRL flag: %d\n",
+		dev, DEV_ATTRIB(dev)->emulate_ua_intlck_ctrl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: drivers/lio-core/target_core_device.h:65:
+extern int se_dev_set_emulate_ua_intlck_ctrl(se_device_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#234: FILE: drivers/lio-core/target_core_device.h:65:
+extern int se_dev_set_emulate_ua_intlck_ctrl(se_device_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#234: FILE: drivers/lio-core/target_core_device.h:65:
+extern int se_dev_set_emulate_ua_intlck_ctrl(se_device_t *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/lio-core/target_core_transport.c:294:
+	se_ua_cache = kmem_cache_create("se_ua_cache",
+			sizeof(se_ua_t), __alignof__(se_ua_t), 0, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#293: FILE: drivers/lio-core/target_core_transport.c:296:
+		printk(KERN_ERR "kmem_cache_create() for se_ua_t failed\n");

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#304: FILE: drivers/lio-core/target_core_transport.c:386:
+	if (se_ua_cache)
+		kmem_cache_destroy(se_ua_cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: drivers/lio-core/target_core_transport.c:2802:
+			core_scsi3_ua_allocate(SE_SESS(cmd)->se_node_acl,
+				cmd->orig_fe_lun, 0x2C,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#481: FILE: drivers/lio-core/target_core_transport.c:7311:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = UNIT_ATTENTION;
 		             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#483: FILE: drivers/lio-core/target_core_transport.c:7313:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = asc;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#484: FILE: drivers/lio-core/target_core_transport.c:7314:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = ascq;
 		             ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#503: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#508: FILE: drivers/lio-core/target_core_ua.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#529: FILE: drivers/lio-core/target_core_ua.c:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#530: FILE: drivers/lio-core/target_core_ua.c:23:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#555: FILE: drivers/lio-core/target_core_ua.c:48:
+int core_scsi3_ua_check(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#600: FILE: drivers/lio-core/target_core_ua.c:93:
+int core_scsi3_ua_allocate(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#616: FILE: drivers/lio-core/target_core_ua.c:109:
+		printk(KERN_ERR "Unable to allocate se_ua_t\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ua_p->ua_asc == asc'
#634: FILE: drivers/lio-core/target_core_ua.c:127:
+		if ((ua_p->ua_asc == asc) && (ua_p->ua_ascq == ascq)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ua_p->ua_ascq == ascq'
#634: FILE: drivers/lio-core/target_core_ua.c:127:
+		if ((ua_p->ua_asc == asc) && (ua_p->ua_ascq == ascq)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'asc == 0x29'
#659: FILE: drivers/lio-core/target_core_ua.c:152:
+			if ((asc == 0x29) && (ascq > ua_p->ua_ascq))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ascq > ua_p->ua_ascq'
#659: FILE: drivers/lio-core/target_core_ua.c:152:
+			if ((asc == 0x29) && (ascq > ua_p->ua_ascq))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: drivers/lio-core/target_core_ua.c:154:
+				list_add(&ua->ua_nacl_list,
+						&deve->ua_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: drivers/lio-core/target_core_ua.c:157:
+				list_add_tail(&ua->ua_nacl_list,
+						&deve->ua_list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'asc == 0x29'
#670: FILE: drivers/lio-core/target_core_ua.c:163:
+			if ((asc == 0x29) || (ascq > ua_p->ua_asc))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ascq > ua_p->ua_asc'
#670: FILE: drivers/lio-core/target_core_ua.c:163:
+			if ((asc == 0x29) || (ascq > ua_p->ua_asc))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: drivers/lio-core/target_core_ua.c:165:
+				list_add(&ua->ua_nacl_list,
+					&deve->ua_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: drivers/lio-core/target_core_ua.c:168:
+				list_add_tail(&ua->ua_nacl_list,
+						&deve->ua_list);

CHECK:BRACES: Unbalanced braces around else statement
#676: FILE: drivers/lio-core/target_core_ua.c:169:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/lio-core/target_core_ua.c:171:
+			list_add_tail(&ua->ua_nacl_list,
+				&deve->ua_list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#689: FILE: drivers/lio-core/target_core_ua.c:182:
+	printk(KERN_INFO "[%s]: Allocated UNIT ATTENTION, mapped LUN: %u, ASC:"

WARNING:SPLIT_STRING: quoted string split across lines
#690: FILE: drivers/lio-core/target_core_ua.c:183:
+	printk(KERN_INFO "[%s]: Allocated UNIT ATTENTION, mapped LUN: %u, ASC:"
+		" 0x%02x, ASCQ: 0x%02x\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#699: FILE: drivers/lio-core/target_core_ua.c:192:
+void core_scsi3_ua_release_all(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#715: FILE: drivers/lio-core/target_core_ua.c:208:
+void core_scsi3_ua_for_check_condition(

WARNING:TYPO_SPELLING: 'higest' may be misspelled - perhaps 'highest'?
#759: FILE: drivers/lio-core/target_core_ua.c:252:
+		 * condition.  Return the ASC/ASCQ of the higest priority UA
 		                                          ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#776: FILE: drivers/lio-core/target_core_ua.c:269:
+	printk(KERN_INFO "[%s]: %s UNIT ATTENTION condition with"

WARNING:SPLIT_STRING: quoted string split across lines
#777: FILE: drivers/lio-core/target_core_ua.c:270:
+	printk(KERN_INFO "[%s]: %s UNIT ATTENTION condition with"
+		" INTLCK_CTRL: %d, mapped LUN: %u, reported ASC: 0x%02x, ASCQ:"

WARNING:SPLIT_STRING: quoted string split across lines
#778: FILE: drivers/lio-core/target_core_ua.c:271:
+		" INTLCK_CTRL: %d, mapped LUN: %u, reported ASC: 0x%02x, ASCQ:"
+		" 0x%02x\n", TPG_TFO(nacl->se_tpg)->get_fabric_name(),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#784: FILE: drivers/lio-core/target_core_ua.c:277:
+int core_scsi3_ua_clear_for_request_sense(

WARNING:TYPO_SPELLING: 'assoicated' may be misspelled - perhaps 'associated'?
#815: FILE: drivers/lio-core/target_core_ua.c:308:
+	 * release all of the Unit Attention conditions for the assoicated
 	                                                        ^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#834: FILE: drivers/lio-core/target_core_ua.c:327:
+	printk(KERN_INFO "[%s]: Released UNIT ATTENTION condition, mapped"

WARNING:SPLIT_STRING: quoted string split across lines
#835: FILE: drivers/lio-core/target_core_ua.c:328:
+	printk(KERN_INFO "[%s]: Released UNIT ATTENTION condition, mapped"
+		" LUN: %u, reported ASC: 0x%02x, ASCQ: 0x%02x\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#847: FILE: drivers/lio-core/target_core_ua.h:1:
+#ifndef TARGET_CORE_UA_H

WARNING:TYPO_SPELLING: 'Assignement' may be misspelled - perhaps 'Assignment'?
#850: FILE: drivers/lio-core/target_core_ua.h:4:
+ * From spc4r17, Table D.1: ASC and ASCQ Assignement
                                          ^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#875: FILE: drivers/lio-core/target_core_ua.h:29:
+extern int core_scsi3_ua_check(struct se_cmd_s *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#875: FILE: drivers/lio-core/target_core_ua.h:29:
+extern int core_scsi3_ua_check(struct se_cmd_s *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#875: FILE: drivers/lio-core/target_core_ua.h:29:
+extern int core_scsi3_ua_check(struct se_cmd_s *, unsigned char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#876: FILE: drivers/lio-core/target_core_ua.h:30:
+extern int core_scsi3_ua_allocate(struct se_node_acl_s *, u32, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#876: FILE: drivers/lio-core/target_core_ua.h:30:
+extern int core_scsi3_ua_allocate(struct se_node_acl_s *, u32, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#876: FILE: drivers/lio-core/target_core_ua.h:30:
+extern int core_scsi3_ua_allocate(struct se_node_acl_s *, u32, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#876: FILE: drivers/lio-core/target_core_ua.h:30:
+extern int core_scsi3_ua_allocate(struct se_node_acl_s *, u32, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#876: FILE: drivers/lio-core/target_core_ua.h:30:
+extern int core_scsi3_ua_allocate(struct se_node_acl_s *, u32, u8, u8);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#877: FILE: drivers/lio-core/target_core_ua.h:31:
+extern void core_scsi3_ua_release_all(struct se_dev_entry_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_dev_entry_s *' should also have an identifier name
#877: FILE: drivers/lio-core/target_core_ua.h:31:
+extern void core_scsi3_ua_release_all(struct se_dev_entry_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#878: FILE: drivers/lio-core/target_core_ua.h:32:
+extern void core_scsi3_ua_for_check_condition(struct se_cmd_s *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#878: FILE: drivers/lio-core/target_core_ua.h:32:
+extern void core_scsi3_ua_for_check_condition(struct se_cmd_s *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#878: FILE: drivers/lio-core/target_core_ua.h:32:
+extern void core_scsi3_ua_for_check_condition(struct se_cmd_s *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#878: FILE: drivers/lio-core/target_core_ua.h:32:
+extern void core_scsi3_ua_for_check_condition(struct se_cmd_s *, u8 *, u8 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#879: FILE: drivers/lio-core/target_core_ua.h:33:
+extern int core_scsi3_ua_clear_for_request_sense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#879: FILE: drivers/lio-core/target_core_ua.h:33:
+extern int core_scsi3_ua_clear_for_request_sense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#879: FILE: drivers/lio-core/target_core_ua.h:33:
+extern int core_scsi3_ua_clear_for_request_sense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#879: FILE: drivers/lio-core/target_core_ua.h:33:
+extern int core_scsi3_ua_clear_for_request_sense(struct se_cmd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#880: FILE: drivers/lio-core/target_core_ua.h:34:
+extern int core_scsi3_ua_clear_for_request_sense(struct se_cmd_s *,
+						u8 *, u8 *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149833.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 40 warnings, 34 checks, 733 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149833.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
