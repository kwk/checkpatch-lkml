WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: drivers/char/mmu_notifier_skel.c:1:
+#include <linux/types.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#72: FILE: drivers/char/mmu_notifier_skel.c:33:
+	BUG_ON(!ret);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: drivers/char/mmu_notifier_skel.c:52:
+        if (!vma || (vma->vm_start > address))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: drivers/char/mmu_notifier_skel.c:52:
+        if (!vma || (vma->vm_start > address))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start > address'
#91: FILE: drivers/char/mmu_notifier_skel.c:52:
+        if (!vma || (vma->vm_start > address))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: drivers/char/mmu_notifier_skel.c:53:
+                return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: drivers/char/mmu_notifier_skel.c:53:
+                return NULL;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#97: FILE: drivers/char/mmu_notifier_skel.c:58:
+	return follow_page(vma, address, FOLL_GET|(write ? FOLL_WRITE : 0));
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#111: FILE: drivers/char/mmu_notifier_skel.c:72:
+	printk("mmn_vm_fault %s@vaddr=%lx sourcing from %lx\n", write ? "write" : "read", dest_vaddr, source_vaddr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#111: FILE: drivers/char/mmu_notifier_skel.c:72:
+	printk("mmn_vm_fault %s@vaddr=%lx sourcing from %lx\n", write ? "write" : "read", dest_vaddr, source_vaddr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mmn_vm_fault', this function's name, in a string
#111: FILE: drivers/char/mmu_notifier_skel.c:72:
+	printk("mmn_vm_fault %s@vaddr=%lx sourcing from %lx\n", write ? "write" : "read", dest_vaddr, source_vaddr);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: drivers/char/mmu_notifier_skel.c:74:
+	BUG_ON(mm != current->mm); /* disallow get_user_pages */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: drivers/char/mmu_notifier_skel.c:84:
+		ret = get_user_pages(current, mm, source_vaddr,
+					1, write, 0, &page, NULL);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#137: FILE: drivers/char/mmu_notifier_skel.c:98:
+		vma->vm_page_prot = vm_get_page_prot(vma->vm_flags & ~(VM_WRITE|VM_MAYWRITE));
 		                                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: drivers/char/mmu_notifier_skel.c:110:
+        return VM_FAULT_NOPAGE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/char/mmu_notifier_skel.c:110:
+        return VM_FAULT_NOPAGE;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: drivers/char/mmu_notifier_skel.c:127:
+		BUG();

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#170: FILE: drivers/char/mmu_notifier_skel.c:131:
+struct vm_operations_struct mmn_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: drivers/char/mmu_notifier_skel.c:132:
+        .fault = mmn_vm_fault,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/char/mmu_notifier_skel.c:132:
+        .fault = mmn_vm_fault,$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#180: FILE: drivers/char/mmu_notifier_skel.c:141:
+	unsigned seq;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: drivers/char/mmu_notifier_skel.c:156:
+	printk("mmn_clear_young@vaddr=%lx sourced from %lx\n", vaddr, address);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mmn_clear_young', this function's name, in a string
#195: FILE: drivers/char/mmu_notifier_skel.c:156:
+	printk("mmn_clear_young@vaddr=%lx sourced from %lx\n", vaddr, address);

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: drivers/char/mmu_notifier_skel.c:159:
+        pgd = pgd_offset(mm, vaddr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/char/mmu_notifier_skel.c:159:
+        pgd = pgd_offset(mm, vaddr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: drivers/char/mmu_notifier_skel.c:160:
+        pud = pud_offset(pgd, vaddr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: drivers/char/mmu_notifier_skel.c:160:
+        pud = pud_offset(pgd, vaddr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: drivers/char/mmu_notifier_skel.c:179:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: drivers/char/mmu_notifier_skel.c:179:
+        return 1;$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#262: FILE: drivers/char/mmu_notifier_skel.c:223:
+static const struct file_operations mmn_fops =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#269: FILE: drivers/char/mmu_notifier_skel.c:230:
+static struct miscdevice mmn_miscdev =
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#278: FILE: drivers/char/mmu_notifier_skel.c:239:
+		printk(KERN_ERR "mmn: unable to register device\n");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#303: FILE: drivers/char/Kconfig:7:
+config MMU_NOTIFIER_SKEL
+	tristate "MMU Notifier skeleton driver"
+	default n
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319006.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 20 warnings, 4 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319006.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
