WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#57: FILE: drivers/spi/Kconfig:159:
+config SPI_BFIN
+	tristate "SPI controller driver for ADI Blackfin5xx"
+	depends on SPI_MASTER && BFIN
+	help
+	  This is the SPI controller master driver for Blackfin 5xx processor.
 
 # (slave support would go here)
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: drivers/spi/spi_bfin5xx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#91: FILE: drivers/spi/spi_bfin5xx.c:10:
+ * Rev:          $Id: spi_bfin5xx.c 2508 2006-12-06 07:35:43Z sonicz $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#111: FILE: drivers/spi/spi_bfin5xx.c:30:
+ * If not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#112: FILE: drivers/spi/spi_bfin5xx.c:31:
+ * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#128: FILE: drivers/spi/spi_bfin5xx.c:47:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#130: FILE: drivers/spi/spi_bfin5xx.c:49:
+#include <asm/delay.h>

WARNING:TYPO_SPELLING: 'Contoller' may be misspelled - perhaps 'Controller'?
#136: FILE: drivers/spi/spi_bfin5xx.c:55:
+MODULE_DESCRIPTION("Blackfin 5xx SPI Contoller");
                                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#140: FILE: drivers/spi/spi_bfin5xx.c:59:
+#define ASSERT(expr) \
+	if (!(expr)) { \
+		printk(KERN_DEBUG "assertion failed! %s[%d]: %s\n", \
+		       __FUNCTION__, __LINE__, #expr); \
+		panic(KERN_DEBUG "%s", __FUNCTION__); \
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#142: FILE: drivers/spi/spi_bfin5xx.c:61:
+		printk(KERN_DEBUG "assertion failed! %s[%d]: %s\n", \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#143: FILE: drivers/spi/spi_bfin5xx.c:62:
+		       __FUNCTION__, __LINE__, #expr); \

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#144: FILE: drivers/spi/spi_bfin5xx.c:63:
+		panic(KERN_DEBUG "%s", __FUNCTION__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#144: FILE: drivers/spi/spi_bfin5xx.c:63:
+		panic(KERN_DEBUG "%s", __FUNCTION__); \

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#150: FILE: drivers/spi/spi_bfin5xx.c:69:
+#define IS_DMA_ALIGNED(x) (((u32)(x)&0x07)==0)
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#150: FILE: drivers/spi/spi_bfin5xx.c:69:
+#define IS_DMA_ALIGNED(x) (((u32)(x)&0x07)==0)
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'off' - possible side-effects?
#152: FILE: drivers/spi/spi_bfin5xx.c:71:
+#define DEFINE_SPI_REG(reg, off) \
+static inline u16 read_##reg(void) \
+            { return *(volatile unsigned short*)(SPI0_REGBASE + off); } \
+static inline void write_##reg(u16 v) \
+            {*(volatile unsigned short*)(SPI0_REGBASE + off) = v;\
+             SSYNC();}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'off' may be better as '(off)' to avoid precedence issues
#152: FILE: drivers/spi/spi_bfin5xx.c:71:
+#define DEFINE_SPI_REG(reg, off) \
+static inline u16 read_##reg(void) \
+            { return *(volatile unsigned short*)(SPI0_REGBASE + off); } \
+static inline void write_##reg(u16 v) \
+            {*(volatile unsigned short*)(SPI0_REGBASE + off) = v;\
+             SSYNC();}

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: drivers/spi/spi_bfin5xx.c:73:
+            { return *(volatile unsigned short*)(SPI0_REGBASE + off); } \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/spi/spi_bfin5xx.c:73:
+            { return *(volatile unsigned short*)(SPI0_REGBASE + off); } \$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#154: FILE: drivers/spi/spi_bfin5xx.c:73:
+            { return *(volatile unsigned short*)(SPI0_REGBASE + off); } \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#154: FILE: drivers/spi/spi_bfin5xx.c:73:
+            { return *(volatile unsigned short*)(SPI0_REGBASE + off); } \

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: drivers/spi/spi_bfin5xx.c:75:
+            {*(volatile unsigned short*)(SPI0_REGBASE + off) = v;\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/spi/spi_bfin5xx.c:75:
+            {*(volatile unsigned short*)(SPI0_REGBASE + off) = v;\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#156: FILE: drivers/spi/spi_bfin5xx.c:75:
+            {*(volatile unsigned short*)(SPI0_REGBASE + off) = v;\

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#156: FILE: drivers/spi/spi_bfin5xx.c:75:
+            {*(volatile unsigned short*)(SPI0_REGBASE + off) = v;\

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: drivers/spi/spi_bfin5xx.c:76:
+             SSYNC();}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: drivers/spi/spi_bfin5xx.c:76:
+             SSYNC();}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#157: FILE: drivers/spi/spi_bfin5xx.c:76:
+             SSYNC();}
                     ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#167: FILE: drivers/spi/spi_bfin5xx.c:86:
+#define START_STATE ((void*)0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#168: FILE: drivers/spi/spi_bfin5xx.c:87:
+#define RUNNING_STATE ((void*)1)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#169: FILE: drivers/spi/spi_bfin5xx.c:88:
+#define DONE_STATE ((void*)2)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#170: FILE: drivers/spi/spi_bfin5xx.c:89:
+#define ERROR_STATE ((void*)-1)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#191: FILE: drivers/spi/spi_bfin5xx.c:110:
+	spinlock_t lock;

WARNING:SPACING: Unnecessary space before function pointer arguments
#215: FILE: drivers/spi/spi_bfin5xx.c:134:
+	void (*write) (struct driver_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_data *' should also have an identifier name
#215: FILE: drivers/spi/spi_bfin5xx.c:134:
+	void (*write) (struct driver_data *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#216: FILE: drivers/spi/spi_bfin5xx.c:135:
+	void (*read) (struct driver_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_data *' should also have an identifier name
#216: FILE: drivers/spi/spi_bfin5xx.c:135:
+	void (*read) (struct driver_data *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#217: FILE: drivers/spi/spi_bfin5xx.c:136:
+	void (*duplex) (struct driver_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_data *' should also have an identifier name
#217: FILE: drivers/spi/spi_bfin5xx.c:136:
+	void (*duplex) (struct driver_data *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#232: FILE: drivers/spi/spi_bfin5xx.c:151:
+	void (*write) (struct driver_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_data *' should also have an identifier name
#232: FILE: drivers/spi/spi_bfin5xx.c:151:
+	void (*write) (struct driver_data *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#233: FILE: drivers/spi/spi_bfin5xx.c:152:
+	void (*read) (struct driver_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_data *' should also have an identifier name
#233: FILE: drivers/spi/spi_bfin5xx.c:152:
+	void (*read) (struct driver_data *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#234: FILE: drivers/spi/spi_bfin5xx.c:153:
+	void (*duplex) (struct driver_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_data *' should also have an identifier name
#234: FILE: drivers/spi/spi_bfin5xx.c:153:
+	void (*duplex) (struct driver_data *);

WARNING:TYPO_SPELLING: 'Caculate' may be misspelled - perhaps 'Calculate'?
#255: FILE: drivers/spi/spi_bfin5xx.c:174:
+/* Caculate the SPI_BAUD register value based on input HZ */
    ^^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#259: FILE: drivers/spi/spi_bfin5xx.c:178:
+	u16 spi_baud = (sclk / (2*speed_hz));
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#261: FILE: drivers/spi/spi_bfin5xx.c:180:
+	if ((sclk % (2*speed_hz)) > 0)
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: drivers/spi/spi_bfin5xx.c:184:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '||' (ctx:VxV)
#290: FILE: drivers/spi/spi_bfin5xx.c:209:
+#if defined(CONFIG_BF534)||defined(CONFIG_BF536)||defined(CONFIG_BF537)
                          ^

ERROR:SPACING: spaces required around that '||' (ctx:VxV)
#290: FILE: drivers/spi/spi_bfin5xx.c:209:
+#if defined(CONFIG_BF534)||defined(CONFIG_BF536)||defined(CONFIG_BF537)
                                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: drivers/spi/spi_bfin5xx.c:258:
+	unsigned short tmp;
+	tmp = read_RDBR();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: drivers/spi/spi_bfin5xx.c:276:
+	u8 n_bytes = drv_data->n_bytes;
+	dummy_read();

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#390: FILE: drivers/spi/spi_bfin5xx.c:309:
+		write_FLAG(0xFF00|chip->flag);
 		                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#431: FILE: drivers/spi/spi_bfin5xx.c:350:
+		write_FLAG(0xFF00|chip->flag);
 		                 ^

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#449: FILE: drivers/spi/spi_bfin5xx.c:368:
+		//if (*(u8 *)(drv_data->rx)) pr_debug(KERN_NOTICE "u8_duplex: %c\n", *(u8 *)(drv_data->rx));

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#467: FILE: drivers/spi/spi_bfin5xx.c:386:
+		write_FLAG(0xFF00|chip->flag);
 		                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#502: FILE: drivers/spi/spi_bfin5xx.c:421:
+		write_FLAG(0xFF00|chip->flag);
 		                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#539: FILE: drivers/spi/spi_bfin5xx.c:458:
+		write_FLAG(0xFF00|chip->flag);
 		                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#574: FILE: drivers/spi/spi_bfin5xx.c:493:
+		write_FLAG(0xFF00|chip->flag);
 		                 ^

WARNING:TYPO_SPELLING: 'ther' may be misspelled - perhaps 'there'?
#585: FILE: drivers/spi/spi_bfin5xx.c:504:
+/* test if ther is more transfer to be done */
            ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#592: FILE: drivers/spi/spi_bfin5xx.c:511:
+	if (trans->transfer_list.next != &msg->transfers) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: drivers/spi/spi_bfin5xx.c:514:
+			list_entry(trans->transfer_list.next,
+					struct spi_transfer,

CHECK:BRACES: Unbalanced braces around else statement
#598: FILE: drivers/spi/spi_bfin5xx.c:517:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: drivers/spi/spi_bfin5xx.c:539:
+	last_transfer = list_entry(msg->transfers.prev,
+					struct spi_transfer,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_irq_handler', this function's name, in a string
#639: FILE: drivers/spi/spi_bfin5xx.c:558:
+	pr_debug("in dma_irq_handler\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv_data->tx"
#645: FILE: drivers/spi/spi_bfin5xx.c:564:
+	if (drv_data->tx != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: drivers/spi/spi_bfin5xx.c:624:
+		previous = list_entry(transfer->transfer_list.prev,
+					struct spi_transfer,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pump_transfers', this function's name, in a string
#713: FILE: drivers/spi/spi_bfin5xx.c:632:
+		dev_err(&drv_data->pdev->dev, "pump_transfers: flush failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "transfer->tx_buf"
#719: FILE: drivers/spi/spi_bfin5xx.c:638:
+	if (transfer->tx_buf != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "transfer->rx_buf"
#727: FILE: drivers/spi/spi_bfin5xx.c:646:
+	if (transfer->rx_buf != NULL) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#740: FILE: drivers/spi/spi_bfin5xx.c:659:
+	if (width == CFG_SPI_WORDSIZE16) {
[...]
+	} else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: drivers/spi/spi_bfin5xx.c:668:
+	pr_debug("transfer: drv_data->write is %p, chip->write is %p, null_wr is %p\n",
+	       drv_data->write, chip->write, null_writer);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#757: FILE: drivers/spi/spi_bfin5xx.c:676:
+	if (transfer->speed_hz) {
[...]
+	} else {
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#764: FILE: drivers/spi/spi_bfin5xx.c:683:
+	pr_debug("now pumping a transfer: width is %d, len is %d\n",width,transfer->len);
 	                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#764: FILE: drivers/spi/spi_bfin5xx.c:683:
+	pr_debug("now pumping a transfer: width is %d, len is %d\n",width,transfer->len);
 	                                                                 ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#768: FILE: drivers/spi/spi_bfin5xx.c:687:
+	if (drv_data->cur_chip->enable_dma && drv_data->len > 6) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv_data->rx"
#807: FILE: drivers/spi/spi_bfin5xx.c:726:
+		if (drv_data->rx != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv_data->tx"
#829: FILE: drivers/spi/spi_bfin5xx.c:748:
+		} else if (drv_data->tx != NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#840: FILE: drivers/spi/spi_bfin5xx.c:759:
+
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv_data->tx"
#847: FILE: drivers/spi/spi_bfin5xx.c:766:
+		if (drv_data->tx != NULL && drv_data->rx != NULL) { /* full duplex mode */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv_data->rx"
#847: FILE: drivers/spi/spi_bfin5xx.c:766:
+		if (drv_data->tx != NULL && drv_data->rx != NULL) { /* full duplex mode */

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#848: FILE: drivers/spi/spi_bfin5xx.c:767:
+			ASSERT((drv_data->tx_end - drv_data->tx) == (drv_data->rx_end - drv_data->rx));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv_data->tx"
#860: FILE: drivers/spi/spi_bfin5xx.c:779:
+		} else if (drv_data->tx != NULL) {        /* write only half duplex */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv_data->rx"
#872: FILE: drivers/spi/spi_bfin5xx.c:791:
+		} else if (drv_data->rx != NULL) {        /* read only half duplex */

WARNING:TYPO_SPELLING: 'cleare' may be misspelled - perhaps 'cleared'?
#874: FILE: drivers/spi/spi_bfin5xx.c:793:
+			cr = (read_CTRL() & (~BIT_CTL_TIMOD));	/* cleare the TIMOD bits */
 			                                      	   ^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#890: FILE: drivers/spi/spi_bfin5xx.c:809:
+			/* Update total byte transfered */
 			                     ^^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#900: FILE: drivers/spi/spi_bfin5xx.c:819:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: drivers/spi/spi_bfin5xx.c:845:
+	drv_data->cur_msg = list_entry(drv_data->queue.next,
+					struct spi_message, queue);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#932: FILE: drivers/spi/spi_bfin5xx.c:851:
+	drv_data->cur_transfer = list_entry(drv_data->cur_msg->transfers.next,
+						struct spi_transfer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/spi/spi_bfin5xx.c:858:
+	pr_debug("got a message to pump, state is set to: baud %d, flag 0x%x, ctl 0x%x\n",
+	       drv_data->cur_chip->baud, drv_data->cur_chip->flag, drv_data->cur_chip->ctl_reg);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'transfer', this function's name, in a string
#966: FILE: drivers/spi/spi_bfin5xx.c:885:
+	pr_debug("adding an msg in transfer() \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#966: FILE: drivers/spi/spi_bfin5xx.c:885:
+	pr_debug("adding an msg in transfer() \n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'spi->chip_select'
#985: FILE: drivers/spi/spi_bfin5xx.c:904:
+	if (chip_select_flag & (1 << (spi->chip_select))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#986: FILE: drivers/spi/spi_bfin5xx.c:905:
+		printk(KERN_ERR "spi_bfin: error: %s is using the same chip selection as another device.\n", spi->modalias);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#986: FILE: drivers/spi/spi_bfin5xx.c:905:
+		printk(KERN_ERR "spi_bfin: error: %s is using the same chip selection as another device.\n", spi->modalias);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#999: FILE: drivers/spi/spi_bfin5xx.c:918:
+	if (chip == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*chip)...) over kzalloc(sizeof(struct chip_data)...)
#1000: FILE: drivers/spi/spi_bfin5xx.c:919:
+		chip = kzalloc(sizeof(struct chip_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1011: FILE: drivers/spi/spi_bfin5xx.c:930:
+		chip->enable_dma = chip_info->enable_dma != 0
+					&& drv_data->master_info->enable_dma;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1024: FILE: drivers/spi/spi_bfin5xx.c:943:
+	/* if any one SPI chip is registered and wants DMA, request the
+	   DMA channel for it */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1024: FILE: drivers/spi/spi_bfin5xx.c:943:
+	   DMA channel for it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1040: FILE: drivers/spi/spi_bfin5xx.c:959:
+	/* Notice: for blackfin, the speed_hz is the value of register
+	   SPI_BAUD, not the real baudrate */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1040: FILE: drivers/spi/spi_bfin5xx.c:959:
+	   SPI_BAUD, not the real baudrate */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1043: FILE: drivers/spi/spi_bfin5xx.c:962:
+	chip->flag = ((u16)spi_flg << 8 ) | (1 << (spi->chip_select));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1049: FILE: drivers/spi/spi_bfin5xx.c:968:
+		chip->read = chip->cs_change_per_word? u8_cs_chg_reader: u8_reader;
 		                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1049: FILE: drivers/spi/spi_bfin5xx.c:968:
+		chip->read = chip->cs_change_per_word? u8_cs_chg_reader: u8_reader;
 		                                                       ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1050: FILE: drivers/spi/spi_bfin5xx.c:969:
+		chip->write = chip->cs_change_per_word? u8_cs_chg_writer: u8_writer;
 		                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1050: FILE: drivers/spi/spi_bfin5xx.c:969:
+		chip->write = chip->cs_change_per_word? u8_cs_chg_writer: u8_writer;
 		                                                        ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1051: FILE: drivers/spi/spi_bfin5xx.c:970:
+		chip->duplex = chip->cs_change_per_word? u8_cs_chg_duplex: u8_duplex;
 		                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1051: FILE: drivers/spi/spi_bfin5xx.c:970:
+		chip->duplex = chip->cs_change_per_word? u8_cs_chg_duplex: u8_duplex;
 		                                                         ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1056: FILE: drivers/spi/spi_bfin5xx.c:975:
+		chip->read = chip->cs_change_per_word? u16_cs_chg_reader: u16_reader;
 		                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1056: FILE: drivers/spi/spi_bfin5xx.c:975:
+		chip->read = chip->cs_change_per_word? u16_cs_chg_reader: u16_reader;
 		                                                        ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1057: FILE: drivers/spi/spi_bfin5xx.c:976:
+		chip->write = chip->cs_change_per_word? u16_cs_chg_writer: u16_writer;
 		                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1057: FILE: drivers/spi/spi_bfin5xx.c:976:
+		chip->write = chip->cs_change_per_word? u16_cs_chg_writer: u16_writer;
 		                                                         ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1058: FILE: drivers/spi/spi_bfin5xx.c:977:
+		chip->duplex = chip->cs_change_per_word? u16_cs_chg_duplex: u16_duplex;
 		                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1058: FILE: drivers/spi/spi_bfin5xx.c:977:
+		chip->duplex = chip->cs_change_per_word? u16_cs_chg_duplex: u16_duplex;
 		                                                          ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'setup', this function's name, in a string
#1065: FILE: drivers/spi/spi_bfin5xx.c:984:
+	pr_debug("setup spi chip %s, width is %d, dma is %d, ctl_reg is 0x%x, flag_reg is 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1066: FILE: drivers/spi/spi_bfin5xx.c:985:
+	pr_debug("setup spi chip %s, width is %d, dma is %d, ctl_reg is 0x%x, flag_reg is 0x%x\n",
+	       spi->modalias, chip->width, chip->enable_dma, chip->ctl_reg, chip->flag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1090: FILE: drivers/spi/spi_bfin5xx.c:1009:
+	tasklet_init(&drv_data->pump_transfers,
+			pump_transfers,	(unsigned long)drv_data);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1094: FILE: drivers/spi/spi_bfin5xx.c:1013:
+	drv_data->workqueue = create_singlethread_workqueue(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drv_data->workqueue"
#1096: FILE: drivers/spi/spi_bfin5xx.c:1015:
+	if (drv_data->workqueue == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1127: FILE: drivers/spi/spi_bfin5xx.c:1046:
+	unsigned limit = 500;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1135: FILE: drivers/spi/spi_bfin5xx.c:1054:
+	 * friends on every SPI message. Do this instead */

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1139: FILE: drivers/spi/spi_bfin5xx.c:1058:
+		msleep(10);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1255: FILE: drivers/spi/spi_bfin5xx.c:1174:
+	if ((status = bfin5xx_spi_remove(pdev)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev->driver"
#1266: FILE: drivers/spi/spi_bfin5xx.c:1185:
+	    dev->driver != NULL) {

WARNING:TYPO_SPELLING: 'childern' may be misspelled - perhaps 'children'?
#1279: FILE: drivers/spi/spi_bfin5xx.c:1198:
+	/* Check all childern for current power state */
 	             ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1317: FILE: drivers/spi/spi_bfin5xx.c:1236:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460643.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 52 warnings, 43 checks, 1280 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460643.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
