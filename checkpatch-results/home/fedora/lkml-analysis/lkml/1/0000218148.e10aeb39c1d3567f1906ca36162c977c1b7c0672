WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-v28-for-linus-phase4-D

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#567: FILE: arch/x86/Kconfig:1692:
+config INTR_REMAP
+	bool "Support for Interrupt Remapping (EXPERIMENTAL)"
+	depends on X86_64 && X86_IO_APIC && PCI_MSI && ACPI && EXPERIMENTAL
+	help
+	 Supports Interrupt remapping for IO-APIC and MSI devices.
+	 To use x2apic mode in the CPU's which support x2APIC enhancements or
+	 to support platforms with CPU's having > 8 bit APIC ID, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#586: FILE: arch/x86/Kconfig.cpu:422:
+menuconfig PROCESSOR_SELECT
+	default y
+	bool "Supported processor vendors" if EMBEDDED
+	help
+	  This lets you choose what x86 vendor support code your kernel
+	  will include.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#593: FILE: arch/x86/Kconfig.cpu:429:
+config CPU_SUP_INTEL
+	default y
+	bool "Support Intel processors" if PROCESSOR_SELECT
+	help
+	  This enables extended support for Intel processors
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#599: FILE: arch/x86/Kconfig.cpu:435:
+config CPU_SUP_CYRIX_32
+	default y
+	bool "Support Cyrix processors" if PROCESSOR_SELECT
+	depends on !64BIT
+	help
+	  This enables extended support for Cyrix processors
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#606: FILE: arch/x86/Kconfig.cpu:442:
+config CPU_SUP_AMD
+	default y
+	bool "Support AMD processors" if PROCESSOR_SELECT
+	help
+	  This enables extended support for AMD processors
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#612: FILE: arch/x86/Kconfig.cpu:448:
+config CPU_SUP_CENTAUR_32
+	default y
+	bool "Support Centaur processors" if PROCESSOR_SELECT
+	depends on !64BIT
+	help
+	  This enables extended support for Centaur processors
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#619: FILE: arch/x86/Kconfig.cpu:455:
+config CPU_SUP_CENTAUR_64
+	default y
+	bool "Support Centaur processors" if PROCESSOR_SELECT
+	depends on 64BIT
+	help
+	  This enables extended support for Centaur processors
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#626: FILE: arch/x86/Kconfig.cpu:462:
+config CPU_SUP_TRANSMETA_32
+	default y
+	bool "Support Transmeta processors" if PROCESSOR_SELECT
+	depends on !64BIT
+	help
+	  This enables extended support for Transmeta processors
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#633: FILE: arch/x86/Kconfig.cpu:469:
+config CPU_SUP_UMC_32
+	default y
+	bool "Support UMC processors" if PROCESSOR_SELECT
+	depends on !64BIT
+	help
+	  This enables extended support for UMC processors
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#670: FILE: arch/x86/boot/cpu.c:73:
+						printf("%s ", msg_strs+2);
 						                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#713: FILE: arch/x86/boot/mkcpustr.c:29:
+			str = x86_cap_flags[i*32+j];
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#713: FILE: arch/x86/boot/mkcpustr.c:29:
+			str = x86_cap_flags[i*32+j];
 			                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#715: FILE: arch/x86/boot/mkcpustr.c:31:
+			if (i == NCAPINTS-1 && j == 31) {
 			                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#717: FILE: arch/x86/boot/mkcpustr.c:33:
+				/* The last entry must be unconditional; this
+				   also consumes the compiler-added null

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#718: FILE: arch/x86/boot/mkcpustr.c:34:
+				   character */

CHECK:SPACING: No space is necessary after a cast
#829: FILE: arch/x86/ia32/ia32_signal.c:413:
+		*fpstate = (struct _fpstate_ia32 *) sp;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1193: FILE: arch/x86/kernel/apic_32.c:617:
+		printk(KERN_INFO "Disabling APIC timer\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1304: FILE: arch/x86/kernel/apic_32.c:854:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1373: FILE: arch/x86/kernel/apic_32.c:999:
+			printk(KERN_INFO "Leaving ESR disabled.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1393: FILE: arch/x86/kernel/apic_32.c:1022:
+		printk(KERN_INFO "No ESR for 82489DX.\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1742: FILE: arch/x86/kernel/apic_32.c:1743:
 }
+early_param("disableapic", setup_disableapic);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1753: FILE: arch/x86/kernel/apic_32.c:1750:
 }
+early_param("nolapic", setup_nolapic);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1766: FILE: arch/x86/kernel/apic_32.c:1764:
+}
+early_param("noapictimer", parse_disable_apic_timer);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1773: FILE: arch/x86/kernel/apic_32.c:1771:
+}
+early_param("nolapic_timer", parse_nolapic_timer);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1788: FILE: arch/x86/kernel/apic_32.c:1784:
+	if (strcmp("debug", arg) == 0)
[...]
-	else if (strcmp(arg, "verbose") == 0)
[...]
 		apic_verbosity = APIC_VERBOSE;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1793: FILE: arch/x86/kernel/apic_32.c:1788:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1794: FILE: arch/x86/kernel/apic_32.c:1789:
+		printk(KERN_WARNING "APIC Verbosity level %s not recognised"

WARNING:SPLIT_STRING: quoted string split across lines
#1795: FILE: arch/x86/kernel/apic_32.c:1790:
+		printk(KERN_WARNING "APIC Verbosity level %s not recognised"
+			" use apic=verbose or apic=debug\n", arg);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:RETURN_VOID: void function return statements are not generally useful
#1918: FILE: arch/x86/kernel/apic_64.c:195:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#1928: FILE: arch/x86/kernel/apic_64.c:205:
+	wrmsrl(APIC_BASE_MSR + (APIC_ICR >> 4), ((__u64) id) << 32 | low);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2021: FILE: arch/x86/kernel/apic_64.c:298:
+	apic_write(APIC_TDCR,
+		(tmp_value & ~(APIC_TDR_DIV_1 | APIC_TDR_DIV_TMBASE)) |

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'boot_cpu_data.x86_vendor == X86_VENDOR_INTEL'
#2223: FILE: arch/x86/kernel/apic_64.c:854:
+	if ((boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) &&
+	    (boot_cpu_data.x86 == 15))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'boot_cpu_data.x86 == 15'
#2223: FILE: arch/x86/kernel/apic_64.c:854:
+	if ((boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) &&
+	    (boot_cpu_data.x86 == 15))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2244: FILE: arch/x86/kernel/apic_64.c:876:
+	unsigned long oldvalue, value, maxlvt;
+	if (lapic_is_integrated() && !esr_disable) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2252: FILE: arch/x86/kernel/apic_64.c:884:
+			printk(KERN_INFO "Leaving ESR disabled.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#2272: FILE: arch/x86/kernel/apic_64.c:904:
+			apic_printk(APIC_VERBOSE, "ESR value before enabling "
+				"vector: 0x%08lx  after: 0x%08lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2275: FILE: arch/x86/kernel/apic_64.c:907:
+		printk(KERN_INFO "No ESR for 82489DX.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2279: FILE: arch/x86/kernel/apic_64.c:911:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2324: FILE: arch/x86/kernel/apic_64.c:1042:
+		printk("x2apic enabled by BIOS, switching to x2apic ops\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2325: FILE: arch/x86/kernel/apic_64.c:1043:
+		x2apic_preenabled = x2apic = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2336: FILE: arch/x86/kernel/apic_64.c:1054:
+		printk("Enabling x2apic\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2351: FILE: arch/x86/kernel/apic_64.c:1069:
+		printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#2353: FILE: arch/x86/kernel/apic_64.c:1071:
+		       "Skipped enabling x2apic and Interrupt-remapping "
+		       "because of nox2apic\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2361: FILE: arch/x86/kernel/apic_64.c:1079:
+		printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#2363: FILE: arch/x86/kernel/apic_64.c:1081:
+		       "Skipped enabling x2apic and Interrupt-remapping "
+		       "because of skipping io-apic setup\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2369: FILE: arch/x86/kernel/apic_64.c:1087:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2375: FILE: arch/x86/kernel/apic_64.c:1093:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2413: FILE: arch/x86/kernel/apic_64.c:1131:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2416: FILE: arch/x86/kernel/apic_64.c:1134:
+			printk(KERN_INFO

CHECK:BRACES: Unbalanced braces around else statement
#2418: FILE: arch/x86/kernel/apic_64.c:1136:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2419: FILE: arch/x86/kernel/apic_64.c:1137:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#2427: FILE: arch/x86/kernel/apic_64.c:1145:
+		panic("x2apic enabled prior OS handover,"
+		      " enable CONFIG_INTR_REMAP");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2429: FILE: arch/x86/kernel/apic_64.c:1147:
+	printk(KERN_INFO "Enable CONFIG_INTR_REMAP for enabling intr-remapping "

WARNING:SPLIT_STRING: quoted string split across lines
#2430: FILE: arch/x86/kernel/apic_64.c:1148:
+	printk(KERN_INFO "Enable CONFIG_INTR_REMAP for enabling intr-remapping "
+	       " and x2apic\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#2434: FILE: arch/x86/kernel/apic_64.c:1152:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#2508: FILE: arch/x86/kernel/apic_64.c:1350:
+		apic_printk(APIC_VERBOSE, "leaving PIC mode, "
+				"enabling APIC mode.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#2536: FILE: arch/x86/kernel/apic_64.c:1378:
+		apic_printk(APIC_VERBOSE, "disabling APIC mode, "
+				"entering PIC mode.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2568: FILE: arch/x86/kernel/apic_64.c:1433:
+		printk(KERN_WARNING "BIOS bug, APIC version is 0 for CPU#%d! "

WARNING:SPLIT_STRING: quoted string split across lines
#2569: FILE: arch/x86/kernel/apic_64.c:1434:
+		printk(KERN_WARNING "BIOS bug, APIC version is 0 for CPU#%d! "
+				"fixing up to 0x10. (tell your hw vendor)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2578: FILE: arch/x86/kernel/apic_64.c:1442:
 		printk(KERN_WARNING "WARNING: NR_CPUS limit of %i reached."
+			"  Processor ignored.\n", NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2578: FILE: arch/x86/kernel/apic_64.c:1442:
+			"  Processor ignored.\n", NR_CPUS);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2601: FILE: arch/x86/kernel/apic_64.c:1477:
+			/* If P4 and above fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2753: FILE: arch/x86/kernel/apic_64.c:1752:
 }
+early_param("nox2apic", setup_nox2apic);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2790: FILE: arch/x86/kernel/apic_64.c:1785:
 }
+early_param("noapictimer", parse_disable_apic_timer);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2797: FILE: arch/x86/kernel/apic_64.c:1792:
+}
+early_param("nolapic_timer", parse_nolapic_timer);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2816: FILE: arch/x86/kernel/apic_64.c:1813:
+	if (strcmp("debug", arg) == 0)
[...]
+	else if (strcmp("verbose", arg) == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2820: FILE: arch/x86/kernel/apic_64.c:1817:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2821: FILE: arch/x86/kernel/apic_64.c:1818:
+		printk(KERN_WARNING "APIC Verbosity level %s not recognised"

WARNING:SPLIT_STRING: quoted string split across lines
#2822: FILE: arch/x86/kernel/apic_64.c:1819:
+		printk(KERN_WARNING "APIC Verbosity level %s not recognised"
+			" use apic=verbose or apic=debug\n", arg);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2828: FILE: arch/x86/kernel/apic_64.c:1825:
+}
+early_param("apic", apic_set_verbosity);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2943: FILE: arch/x86/kernel/cpu/addon_cpuid_features.c:98:
+	core_level_siblings = smp_num_siblings = LEVEL_MAX_SIBLINGS(ebx);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2944: FILE: arch/x86/kernel/cpu/addon_cpuid_features.c:99:
+	core_plus_mask_width = ht_mask_width = BITS_SHIFT_NEXT_LEVEL(eax);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2974: FILE: arch/x86/kernel/cpu/addon_cpuid_features.c:129:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2975: FILE: arch/x86/kernel/cpu/addon_cpuid_features.c:130:
+	printk(KERN_INFO  "CPU: Physical Processor ID: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2978: FILE: arch/x86/kernel/cpu/addon_cpuid_features.c:133:
+		printk(KERN_INFO  "CPU: Processor Core ID: %d\n",

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#3003: FILE: arch/x86/kernel/cpu/amd.c:12:
+# include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3035: FILE: arch/x86/kernel/cpu/amd.c:48:
+		if (inl (CBAR) & CBAR_ENB)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3036: FILE: arch/x86/kernel/cpu/amd.c:49:
+			outl (0 | CBAR_KEY, CBAR);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3046: FILE: arch/x86/kernel/cpu/amd.c:53:
 
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3068: FILE: arch/x86/kernel/cpu/amd.c:74:
+		printk(KERN_INFO "AMD K6 stepping B detected - ");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3081: FILE: arch/x86/kernel/cpu/amd.c:87:
+		d = d2-d;
 		      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3083: FILE: arch/x86/kernel/cpu/amd.c:89:
+		if (d > 20*K6_BUG_LOOP)
 		          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3084: FILE: arch/x86/kernel/cpu/amd.c:90:
+			printk("system stability may be impaired when more than 32 MB are used.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3086: FILE: arch/x86/kernel/cpu/amd.c:92:
+			printk("probably OK (after B9730xxxx).\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3087: FILE: arch/x86/kernel/cpu/amd.c:93:
+		printk(KERN_INFO "Please see http://membres.lycos.fr/poulot/k6bug.html\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3092: FILE: arch/x86/kernel/cpu/amd.c:98:
+	if (c->x86_model < 8 ||
+	   (c->x86_model == 8 && c->x86_mask < 8)) {

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3098: FILE: arch/x86/kernel/cpu/amd.c:104:
+		if ((l&0x0000FFFF) == 0) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3100: FILE: arch/x86/kernel/cpu/amd.c:106:
+			unsigned long flags;
+			l = (1<<0)|((mbytes/4)<<1);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3100: FILE: arch/x86/kernel/cpu/amd.c:106:
+			l = (1<<0)|((mbytes/4)<<1);
 			      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3100: FILE: arch/x86/kernel/cpu/amd.c:106:
+			l = (1<<0)|((mbytes/4)<<1);
 			          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3100: FILE: arch/x86/kernel/cpu/amd.c:106:
+			l = (1<<0)|((mbytes/4)<<1);
 			                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3100: FILE: arch/x86/kernel/cpu/amd.c:106:
+			l = (1<<0)|((mbytes/4)<<1);
 			                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3105: FILE: arch/x86/kernel/cpu/amd.c:111:
+			printk(KERN_INFO "Enabling old style K6 write allocation for %d Mb\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3106: FILE: arch/x86/kernel/cpu/amd.c:112:
+			printk(KERN_INFO "Enabling old style K6 write allocation for %d Mb\n",
+				mbytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3112: FILE: arch/x86/kernel/cpu/amd.c:118:
+	if ((c->x86_model == 8 && c->x86_mask > 7) ||
+	     c->x86_model == 9 || c->x86_model == 13) {

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3119: FILE: arch/x86/kernel/cpu/amd.c:125:
+		if ((l&0xFFFF0000) == 0) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3121: FILE: arch/x86/kernel/cpu/amd.c:127:
+			unsigned long flags;
+			l = ((mbytes>>2)<<22)|(1<<16);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3121: FILE: arch/x86/kernel/cpu/amd.c:127:
+			l = ((mbytes>>2)<<22)|(1<<16);
 			            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3121: FILE: arch/x86/kernel/cpu/amd.c:127:
+			l = ((mbytes>>2)<<22)|(1<<16);
 			                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3121: FILE: arch/x86/kernel/cpu/amd.c:127:
+			l = ((mbytes>>2)<<22)|(1<<16);
 			                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3121: FILE: arch/x86/kernel/cpu/amd.c:127:
+			l = ((mbytes>>2)<<22)|(1<<16);
 			                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3126: FILE: arch/x86/kernel/cpu/amd.c:132:
+			printk(KERN_INFO "Enabling new style K6 write allocation for %d Mb\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3127: FILE: arch/x86/kernel/cpu/amd.c:133:
+			printk(KERN_INFO "Enabling new style K6 write allocation for %d Mb\n",
+				mbytes);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3151: FILE: arch/x86/kernel/cpu/amd.c:157:
+			printk(KERN_INFO "Enabling disabled K7/SSE Support.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model > 8'
#3164: FILE: arch/x86/kernel/cpu/amd.c:170:
+	if ((c->x86_model == 8 && c->x86_mask >= 1) || (c->x86_model > 8)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3167: FILE: arch/x86/kernel/cpu/amd.c:173:
+			printk ("CPU: CLK_CTL MSR was %x. Reprogramming to %x\n", l,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3167: FILE: arch/x86/kernel/cpu/amd.c:173:
+			printk ("CPU: CLK_CTL MSR was %x. Reprogramming to %x\n", l,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3168: FILE: arch/x86/kernel/cpu/amd.c:174:
+				((l & 0x000fffff)|0x20000000));
 				                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3169: FILE: arch/x86/kernel/cpu/amd.c:175:
+			wrmsr(MSR_K7_CLK_CTL, (l & 0x000fffff)|0x20000000, h);
 			                                      ^

WARNING:TYPO_SPELLING: 'distingush' may be misspelled - perhaps 'distinguish'?
#3197: FILE: arch/x86/kernel/cpu/amd.c:203:
+ * On a AMD dual core setup the lower bits of the APIC id distingush the cores.
                                                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3203: FILE: arch/x86/kernel/cpu/amd.c:209:
+	unsigned bits;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3208: FILE: arch/x86/kernel/cpu/amd.c:214:
+	c->cpu_core_id = c->initial_apicid & ((1 << bits)-1);
 	                                                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3219: FILE: arch/x86/kernel/cpu/amd.c:225:
+	unsigned apicid = hard_smp_processor_id();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3226: FILE: arch/x86/kernel/cpu/amd.c:232:
+		/* Two possibilities here:
+		   - The CPU is missing memory and no node was created.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3233: FILE: arch/x86/kernel/cpu/amd.c:239:
+		   path for the previous case.  */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3246: FILE: arch/x86/kernel/cpu/amd.c:252:
+	printk(KERN_INFO "CPU %d/%x -> Node %d\n", cpu, apicid, node);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3253: FILE: arch/x86/kernel/cpu/amd.c:259:
+	unsigned bits, ecx;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3281: FILE: arch/x86/kernel/cpu/amd.c:287:
+	if (c->x86_power & (1<<8))
 	                     ^

ERROR:SPACING: space required before the open parenthesis '('
#3465: FILE: arch/x86/kernel/cpu/amd.c:334:
+		if((level >= 0x0f48 && level < 0x0f50) || level >= 0x0f58)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3514: FILE: arch/x86/kernel/cpu/amd.c:372:
+			/* Should distinguish Models here, but this is only
+			   a fallback anyways. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3514: FILE: arch/x86/kernel/cpu/amd.c:372:
+			   a fallback anyways. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 >= 0x0f'
#3551: FILE: arch/x86/kernel/cpu/amd.c:391:
+		if ((c->x86 >= 0x0f) && (cpuid_edx(0x80000006) & 0xf000))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#3586: FILE: arch/x86/kernel/cpu/amd.c:422:
+		if (!rdmsrl_safe(MSR_K8_TSEG_ADDR, &tseg)) {
+		    printk(KERN_DEBUG "tseg: %010llx\n", tseg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3587: FILE: arch/x86/kernel/cpu/amd.c:423:
+		    printk(KERN_DEBUG "tseg: %010llx\n", tseg);

WARNING:TABSTOP: Statements should start on a tabstop
#3588: FILE: arch/x86/kernel/cpu/amd.c:424:
+		    if ((tseg>>PMD_SHIFT) <

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3588: FILE: arch/x86/kernel/cpu/amd.c:424:
+		    if ((tseg>>PMD_SHIFT) <
 		             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3589: FILE: arch/x86/kernel/cpu/amd.c:425:
+				(max_low_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) ||
 				                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3589: FILE: arch/x86/kernel/cpu/amd.c:425:
+				(max_low_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) ||
 				                               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3590: FILE: arch/x86/kernel/cpu/amd.c:426:
+			((tseg>>PMD_SHIFT) <
 			      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3591: FILE: arch/x86/kernel/cpu/amd.c:427:
+				(max_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) &&
 				               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3591: FILE: arch/x86/kernel/cpu/amd.c:427:
+				(max_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) &&
 				                           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3592: FILE: arch/x86/kernel/cpu/amd.c:428:
+			 (tseg>>PMD_SHIFT) >= (1ULL<<(32 - PMD_SHIFT))))
 			      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3592: FILE: arch/x86/kernel/cpu/amd.c:428:
+			 (tseg>>PMD_SHIFT) >= (1ULL<<(32 - PMD_SHIFT))))
 			                           ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#3631: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3913: FILE: arch/x86/kernel/cpu/cmpxchg.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3922: FILE: arch/x86/kernel/cpu/cmpxchg.c:10:
+unsigned long cmpxchg_386_u8(volatile void *ptr, u8 old, u8 new)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3937: FILE: arch/x86/kernel/cpu/cmpxchg.c:25:
+unsigned long cmpxchg_386_u16(volatile void *ptr, u16 old, u16 new)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3952: FILE: arch/x86/kernel/cpu/cmpxchg.c:40:
+unsigned long cmpxchg_386_u32(volatile void *ptr, u32 old, u32 new)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3969: FILE: arch/x86/kernel/cpu/cmpxchg.c:57:
+unsigned long long cmpxchg_486_u64(volatile void *ptr, u64 old, u64 new)

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/linkage.h> instead of <asm/linkage.h>
#4008: FILE: arch/x86/kernel/cpu/common.c:16:
+#include <asm/linkage.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#4023: FILE: arch/x86/kernel/cpu/common.c:31:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#4024: FILE: arch/x86/kernel/cpu/common.c:32:
+#include <asm/processor.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#4026: FILE: arch/x86/kernel/cpu/common.c:34:
+#include <asm/atomic.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4041: FILE: arch/x86/kernel/cpu/common.c:49:
+/* The TLS descriptors are currently at a different place compared to i386.
+   Hopefully nobody expects them at a fixed place (Wine?) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4041: FILE: arch/x86/kernel/cpu/common.c:49:
+   Hopefully nobody expects them at a fixed place (Wine?) */

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#4074: FILE: arch/x86/kernel/cpu/common.c:105:
+__setup("cachesize=", cachesize_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#4082: FILE: arch/x86/kernel/cpu/common.c:113:
+__setup("nofxsr", x86_fxsr_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#4089: FILE: arch/x86/kernel/cpu/common.c:120:
+__setup("nosep", x86_sep_setup);

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#4109: FILE: arch/x86/kernel/cpu/common.c:140:
+	return ((f1^f2) & flag) != 0;
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4123: FILE: arch/x86/kernel/cpu/common.c:154:
+		unsigned long lo, hi;
+		rdmsr(MSR_IA32_BBL_CR_CTL, lo, hi);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#4126: FILE: arch/x86/kernel/cpu/common.c:157:
+		printk(KERN_NOTICE "CPU serial number disabled.\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#4139: FILE: arch/x86/kernel/cpu/common.c:170:
+__setup("serialnumber", x86_serial_nr_setup);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4145: FILE: arch/x86/kernel/cpu/common.c:176:
+}
+/* Probe for the CPUID instruction */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4150: FILE: arch/x86/kernel/cpu/common.c:181:
+}
+static inline void squash_the_stupid_serial_number(struct cpuinfo_x86 *c)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4186: FILE: arch/x86/kernel/cpu/common.c:217:
+ * it's on the real one. */

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#4266: FILE: arch/x86/kernel/cpu/common.c:291:
+				edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 				   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#4266: FILE: arch/x86/kernel/cpu/common.c:291:
+				edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 				            ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#4266: FILE: arch/x86/kernel/cpu/common.c:291:
+				edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 				                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#4266: FILE: arch/x86/kernel/cpu/common.c:291:
+				edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 				                               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#4267: FILE: arch/x86/kernel/cpu/common.c:292:
+		c->x86_cache_size = (ecx>>24) + (edx>>24);
 		                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#4267: FILE: arch/x86/kernel/cpu/common.c:292:
+		c->x86_cache_size = (ecx>>24) + (edx>>24);
 		                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4339: FILE: arch/x86/kernel/cpu/common.c:346:
+		printk(KERN_INFO  "CPU: Hyper-Threading is disabled\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4341: FILE: arch/x86/kernel/cpu/common.c:348:
+	} else if (smp_num_siblings > 1) {
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4342: FILE: arch/x86/kernel/cpu/common.c:349:
+		if (smp_num_siblings > NR_CPUS) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4343: FILE: arch/x86/kernel/cpu/common.c:350:
+			printk(KERN_WARNING "CPU: Unsupported number of siblings %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4344: FILE: arch/x86/kernel/cpu/common.c:351:
+			printk(KERN_WARNING "CPU: Unsupported number of siblings %d",
+					smp_num_siblings);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4375: FILE: arch/x86/kernel/cpu/common.c:380:
+		printk(KERN_INFO  "CPU: Physical Processor ID: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4377: FILE: arch/x86/kernel/cpu/common.c:382:
+		printk(KERN_INFO  "CPU: Processor Core ID: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4415: FILE: arch/x86/kernel/cpu/common.c:409:
+		printk(KERN_ERR "CPU: vendor_id '%s' unknown, using generic init.\n", v);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4520: FILE: arch/x86/kernel/cpu/common.c:452:
+		u32 capability, excap;
+		cpuid(0x00000001, &tfms, &ebx, &excap, &capability);

WARNING:SIZEOF_PARENTHESIS: sizeof c->x86_capability should be sizeof(c->x86_capability)
#4602: FILE: arch/x86/kernel/cpu/common.c:525:
+	memset(&c->x86_capability, 0, sizeof c->x86_capability);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4634: FILE: arch/x86/kernel/cpu/common.c:552:
+	printk("KERNEL supported cpus:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4647: FILE: arch/x86/kernel/cpu/common.c:565:
+			printk("  %s %s\n", cpudev->c_vendor,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4648: FILE: arch/x86/kernel/cpu/common.c:566:
+			printk("  %s %s\n", cpudev->c_vendor,
+				cpudev->c_ident[j]);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4881: FILE: arch/x86/kernel/cpu/common.c:742:
+	unsigned min;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4882: FILE: arch/x86/kernel/cpu/common.c:743:
+	unsigned max;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4902: FILE: arch/x86/kernel/cpu/common.c:755:
+	unsigned index;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4905: FILE: arch/x86/kernel/cpu/common.c:758:
+	unsigned index_min, index_max;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4913: FILE: arch/x86/kernel/cpu/common.c:766:
+			printk(KERN_INFO " MSR%08x: %016llx\n", index, val);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#4947: FILE: arch/x86/kernel/cpu/common.c:782:
+__setup("show_msr=", setup_show_msr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#4956: FILE: arch/x86/kernel/cpu/common.c:801:
+		printk(KERN_CONT "%s ", vendor);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#4956: FILE: arch/x86/kernel/cpu/common.c:801:
+		printk(KERN_CONT "%s ", vendor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#4961: FILE: arch/x86/kernel/cpu/common.c:804:
+		printk(KERN_CONT "%s", c->x86_model_id);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#4961: FILE: arch/x86/kernel/cpu/common.c:804:
+		printk(KERN_CONT "%s", c->x86_model_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#4964: FILE: arch/x86/kernel/cpu/common.c:806:
+		printk(KERN_CONT "%d86", c->x86);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#4964: FILE: arch/x86/kernel/cpu/common.c:806:
+		printk(KERN_CONT "%d86", c->x86);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#4968: FILE: arch/x86/kernel/cpu/common.c:809:
+		printk(KERN_CONT " stepping %02x\n", c->x86_mask);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#4968: FILE: arch/x86/kernel/cpu/common.c:809:
+		printk(KERN_CONT " stepping %02x\n", c->x86_mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#4971: FILE: arch/x86/kernel/cpu/common.c:811:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#4971: FILE: arch/x86/kernel/cpu/common.c:811:
+		printk(KERN_CONT "\n");

CHECK:SPACING: No space is necessary after a cast
#4992: FILE: arch/x86/kernel/cpu/common.c:839:
+struct desc_ptr idt_descr = { 256 * 16 - 1, (unsigned long) idt_table };

WARNING:MEMORY_BARRIER: memory barrier without comment
#5006: FILE: arch/x86/kernel/cpu/common.c:853:
+	mb();

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#5038: FILE: arch/x86/kernel/cpu/common.c:885:
+extern asmlinkage void ignore_sysret(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5049: FILE: arch/x86/kernel/cpu/common.c:895:
+	wrmsrl(MSR_STAR,  ((u64)__USER32_CS)<<48  | ((u64)__KERNEL_CS)<<32);
 	                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5049: FILE: arch/x86/kernel/cpu/common.c:895:
+	wrmsrl(MSR_STAR,  ((u64)__USER32_CS)<<48  | ((u64)__KERNEL_CS)<<32);
 	                                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5065: FILE: arch/x86/kernel/cpu/common.c:905:
+	       X86_EFLAGS_TF|X86_EFLAGS_DF|X86_EFLAGS_IF|X86_EFLAGS_IOPL);
 	                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5065: FILE: arch/x86/kernel/cpu/common.c:905:
+	       X86_EFLAGS_TF|X86_EFLAGS_DF|X86_EFLAGS_IF|X86_EFLAGS_IOPL);
 	                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5065: FILE: arch/x86/kernel/cpu/common.c:905:
+	       X86_EFLAGS_TF|X86_EFLAGS_DF|X86_EFLAGS_IF|X86_EFLAGS_IOPL);
 	                                                ^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#5071: FILE: arch/x86/kernel/cpu/common.c:911:
+ * Copies of the original ist values from the tss are only accessed during
                           ^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5128: FILE: arch/x86/kernel/cpu/common.c:956:
+	printk(KERN_INFO "Initializing CPU#%d\n", cpu);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5130: FILE: arch/x86/kernel/cpu/common.c:958:
+	clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5130: FILE: arch/x86/kernel/cpu/common.c:958:
+	clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5130: FILE: arch/x86/kernel/cpu/common.c:958:
+	clear_in_cr4(X86_CR4_VME|X86_CR4_PVI|X86_CR4_TSD|X86_CR4_DE);
 	                                                ^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#5154: FILE: arch/x86/kernel/cpu/common.c:982:
+	if (!orig_ist->ist[0]) {
 	               ^^^

WARNING:SPLIT_STRING: quoted string split across lines
#5164: FILE: arch/x86/kernel/cpu/common.c:992:
+					panic("Cannot allocate exception "
+					      "stack %ld %d\n", v, cpu);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#5167: FILE: arch/x86/kernel/cpu/common.c:995:
+			orig_ist->ist[v] = t->x86_tss.ist[v] =
 			          ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#5167: FILE: arch/x86/kernel/cpu/common.c:995:
+			orig_ist->ist[v] = t->x86_tss.ist[v] =
 			                              ^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5167: FILE: arch/x86/kernel/cpu/common.c:995:
+			orig_ist->ist[v] = t->x86_tss.ist[v] =

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5183: FILE: arch/x86/kernel/cpu/common.c:1011:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#5198: FILE: arch/x86/kernel/cpu/common.c:1026:
+	if (kgdb_connected && arch_kgdb_ops.correct_hw_break)
[...]
+	else {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#5200: FILE: arch/x86/kernel/cpu/common.c:1028:
+	else {
[...]
+	set_debugreg(0UL, 0);

CHECK:BRACES: Unbalanced braces around else statement
#5200: FILE: arch/x86/kernel/cpu/common.c:1028:
+	else {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cpu_devX' may be better as '(cpu_devX)' to avoid precedence issues
#6039: FILE: arch/x86/kernel/cpu/cpu.h:27:
+#define cpu_dev_register(cpu_devX) \
+	static struct cpu_dev *__cpu_dev_##cpu_devX __used \
+	__attribute__((__section__(".x86_cpu_dev.init"))) = \
+	&cpu_devX;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6039: FILE: arch/x86/kernel/cpu/cpu.h:27:
+#define cpu_dev_register(cpu_devX) \
+	static struct cpu_dev *__cpu_dev_##cpu_devX __used \
+	__attribute__((__section__(".x86_cpu_dev.init"))) = \
+	&cpu_devX;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <__cpu_dev_##cpu_devX>
#6040: FILE: arch/x86/kernel/cpu/cpu.h:28:
+	static struct cpu_dev *__cpu_dev_##cpu_devX __used \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".x86_cpu_dev.init") over __attribute__((__section__(".x86_cpu_dev.init")))
#6041: FILE: arch/x86/kernel/cpu/cpu.h:29:
+	__attribute__((__section__(".x86_cpu_dev.init"))) = \

CHECK:CAMELCASE: Avoid CamelCase: <setCx86_old>
#6070: FILE: arch/x86/kernel/cpu/cyrix.c:124:
+	setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0) & ~0x80);

CHECK:CAMELCASE: Avoid CamelCase: <getCx86_old>
#6070: FILE: arch/x86/kernel/cpu/cyrix.c:124:
+	setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0) & ~0x80);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#6127: FILE: arch/x86/kernel/cpu/cyrix.c:316:
+			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);
 			                                             ^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/topology.h> instead of <asm/topology.h>
#6258: FILE: arch/x86/kernel/cpu/intel.c:19:
+#include <asm/topology.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6338: FILE: arch/x86/kernel/cpu/intel.c:97:
+			printk(KERN_NOTICE "Intel Pentium with F0 0F bug - workaround enabled.\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6348: FILE: arch/x86/kernel/cpu/intel.c:107:
+	if ((c->x86<<8 | c->x86_model<<4 | c->x86_mask) < 0x633)
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6348: FILE: arch/x86/kernel/cpu/intel.c:107:
+	if ((c->x86<<8 | c->x86_model<<4 | c->x86_mask) < 0x633)
 	                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6369: FILE: arch/x86/kernel/cpu/intel.c:130:
+	if (cpu_has_apic && (c->x86<<8 | c->x86_model<<4) == 0x520 &&
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6369: FILE: arch/x86/kernel/cpu/intel.c:130:
+	if (cpu_has_apic && (c->x86<<8 | c->x86_model<<4) == 0x520 &&
 	                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6373: FILE: arch/x86/kernel/cpu/intel.c:134:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6405: FILE: arch/x86/kernel/cpu/intel.c:166:
+	unsigned node;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6410: FILE: arch/x86/kernel/cpu/intel.c:171:
+	/* Don't do the funky fallback heuristics the AMD version employs
+	   for now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6410: FILE: arch/x86/kernel/cpu/intel.c:171:
+	   for now. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#6416: FILE: arch/x86/kernel/cpu/intel.c:177:
+	printk(KERN_INFO "CPU %d/%x -> Node %d\n", cpu, apicid, node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6521: FILE: arch/x86/kernel/cpu/intel.c:257:
+		unsigned int l1;
+		rdmsr(MSR_IA32_MISC_ENABLE, l1, l2);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6522: FILE: arch/x86/kernel/cpu/intel.c:258:
+		if (!(l1 & (1<<11)))
 		             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6524: FILE: arch/x86/kernel/cpu/intel.c:260:
+		if (!(l1 & (1<<12)))
 		             ^

WARNING:TYPO_SPELLING: 'indentify' may be misspelled - perhaps 'identify'?
#6841: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:2:
+ *	Routines to indentify caches on Intel CPU.
   	            ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6886: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:197:
+amd_cpuid4(int leaf, union _cpuid4_leaf_eax *eax,
+		     union _cpuid4_leaf_ebx *ebx,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7010: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:703:
+		printk(KERN_ERR "Attempting AMD northbridge operation on a system with no northbridge\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#7020: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:713:
+^I^Iret += sprintf(buf, "%sReads:  %s\tNew Entries: %s\n",  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7053: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:746:
+		printk(KERN_ERR "Attempting AMD northbridge operation on a system with no northbridge\n");

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#7071: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:777:
+static struct _cache_attr cache_disable = __ATTR(cache_disable, 0644, show_cache_disable, store_cache_disable);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#7135: FILE: arch/x86/kernel/cpu/mkcapflags.pl:2:
+#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7172: FILE: arch/x86/kernel/cpu/powerflags.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#7178: FILE: arch/x86/kernel/cpu/powerflags.c:7:
+#include <asm/cpufeature.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#7275: FILE: arch/x86/kernel/e820.c:152:
+			printk("(unusable)\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#7315: FILE: arch/x86/kernel/e820.c:1302:
+		if (e820.map[i].type != E820_RESERVED || res->start < (1ULL<<20))
 		                                                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7362: FILE: arch/x86/kernel/es7000_32.c:52:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VALUE' may be better as '(VALUE)' to avoid precedence issues
#7369: FILE: arch/x86/kernel/es7000_32.c:59:
+#define	MIP_PORT(VALUE)	((VALUE >> 32) & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VALUE' may be better as '(VALUE)' to avoid precedence issues
#7371: FILE: arch/x86/kernel/es7000_32.c:61:
+#define	MIP_RD_LO(VALUE)	(VALUE & 0xffffffff)

CHECK:CAMELCASE: Avoid CamelCase: <Header>
#7416: FILE: arch/x86/kernel/es7000_32.c:106:
+	struct acpi_table_header Header;

CHECK:CAMELCASE: Avoid CamelCase: <OEMTableAddr>
#7417: FILE: arch/x86/kernel/es7000_32.c:107:
+	u32 OEMTableAddr;

CHECK:CAMELCASE: Avoid CamelCase: <OEMTableSize>
#7418: FILE: arch/x86/kernel/es7000_32.c:108:
+	u32 OEMTableSize;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7421: FILE: arch/x86/kernel/es7000_32.c:111:
+extern int find_unisys_acpi_oem_table(unsigned long *oem_addr);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VALUE' may be better as '(VALUE)' to avoid precedence issues
#7436: FILE: arch/x86/kernel/es7000_32.c:126:
+#define	MIP_FUNC(VALUE)		(VALUE & 0xff)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gsi < 16'
#7447: FILE: arch/x86/kernel/es7000_32.c:158:
+	if (!ioapic && (gsi < 16))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7471: FILE: arch/x86/kernel/genapic_64.c:26:
+extern struct genapic apic_physflat;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7472: FILE: arch/x86/kernel/genapic_64.c:27:
+extern struct genapic apic_x2xpic_uv_x;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7473: FILE: arch/x86/kernel/genapic_64.c:28:
+extern struct genapic apic_x2apic_phys;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7474: FILE: arch/x86/kernel/genapic_64.c:29:
+extern struct genapic apic_x2apic_cluster;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7520: FILE: arch/x86/kernel/genapic_64.c:54:
+		printk(KERN_INFO "Setting APIC routing to %s\n", genapic->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7546: FILE: arch/x86/kernel/genapic_64.c:72:
+			printk(KERN_INFO "Setting APIC routing to %s.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7547: FILE: arch/x86/kernel/genapic_64.c:73:
+			printk(KERN_INFO "Setting APIC routing to %s.\n",
+				genapic->name);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#7608: FILE: arch/x86/kernel/genapic_flat_64.c:113:
+	id = (((x)>>24) & 0xFFu);
 	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#7616: FILE: arch/x86/kernel/genapic_flat_64.c:121:
+	x = ((id & 0xFFu)<<24);
 	                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#7652: FILE: arch/x86/kernel/genapic_flat_64.c:165:
+	.apic_id_mask = (0xFFu<<24),
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7669: FILE: arch/x86/kernel/genapic_flat_64.c:182:
+	if (acpi_gbl_FADT.header.revision > FADT2_REVISION_ID &&
+		(acpi_gbl_FADT.flags & ACPI_FADT_APIC_PHYSICAL))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#7695: FILE: arch/x86/kernel/genapic_flat_64.c:249:
+	.apic_id_mask = (0xFFu<<24),
 	                      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7703: FILE: arch/x86/kernel/genx2apic_cluster.c:1:
+#include <linux/threads.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#7711: FILE: arch/x86/kernel/genx2apic_cluster.c:9:
+#include <asm/smp.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#7738: FILE: arch/x86/kernel/genx2apic_cluster.c:36:
+	cpumask_t domain = CPU_MASK_NONE;
+	cpu_set(cpu, domain);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7803: FILE: arch/x86/kernel/genx2apic_cluster.c:101:
+	if ((unsigned)cpu < NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#7803: FILE: arch/x86/kernel/genx2apic_cluster.c:101:
+	if ((unsigned)cpu < NR_CPUS)

WARNING:RETURN_VOID: void function return statements are not generally useful
#7841: FILE: arch/x86/kernel/genx2apic_cluster.c:139:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <dest_LowestPrio>
#7846: FILE: arch/x86/kernel/genx2apic_cluster.c:144:
+	.int_delivery_mode = dest_LowestPrio,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7868: FILE: arch/x86/kernel/genx2apic_phys.c:1:
+#include <linux/threads.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#7876: FILE: arch/x86/kernel/genx2apic_phys.c:9:
+#include <asm/smp.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#7887: FILE: arch/x86/kernel/genx2apic_phys.c:20:
+}
+early_param("x2apic_phys", set_x2apic_phys_mode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#7907: FILE: arch/x86/kernel/genx2apic_phys.c:40:
+	cpumask_t domain = CPU_MASK_NONE;
+	cpu_set(cpu, domain);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7966: FILE: arch/x86/kernel/genx2apic_phys.c:99:
+	if ((unsigned)cpu < NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#7966: FILE: arch/x86/kernel/genx2apic_phys.c:99:
+	if ((unsigned)cpu < NR_CPUS)

WARNING:RETURN_VOID: void function return statements are not generally useful
#8001: FILE: arch/x86/kernel/genx2apic_phys.c:134:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <dest_Fixed>
#8006: FILE: arch/x86/kernel/genx2apic_phys.c:139:
+	.int_delivery_mode = dest_Fixed,

CHECK:BRACES: braces {} should be used on all arms of this statement
#8051: FILE: arch/x86/kernel/genx2apic_uv_x.c:36:
+		if (!strcmp(oem_table_id, "UVL"))
[...]
+		else if (!strcmp(oem_table_id, "UVX"))
[...]
+		else if (!strcmp(oem_table_id, "UVH")) {
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8113: FILE: arch/x86/kernel/genx2apic_uv_x.c:196:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8152: FILE: arch/x86/kernel/genx2apic_uv_x.c:469:
+
+

CHECK:SPACING: No space is necessary after a cast
#8280: FILE: arch/x86/kernel/i387.c:480:
+			  (__u32 __user *) (buf + sig_xstate_ia32_size

CHECK:SPACING: No space is necessary after a cast
#8290: FILE: arch/x86/kernel/i387.c:490:
+	struct _fpstate_ia32 __user *fp = (struct _fpstate_ia32 __user *) buf;

CHECK:SPACING: No space is necessary after a cast
#8349: FILE: arch/x86/kernel/i387.c:550:
+			((struct _fpstate_ia32 __user *) buf);

CHECK:SPACING: No space is necessary after a cast
#8351: FILE: arch/x86/kernel/i387.c:552:
+		(struct i387_fxsave_struct __user *) &fx_user->_fxsr_env[0];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#8368: FILE: arch/x86/kernel/i387.c:569:
+	xsave_hdr->reserved1[0] = xsave_hdr->reserved1[1] = 0;

CHECK:SPACING: No space is necessary after a cast
#8392: FILE: arch/x86/kernel/i387.c:593:
+	struct _fpstate_ia32 __user *fp = (struct _fpstate_ia32 __user *) buf;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#8404: FILE: arch/x86/kernel/i387.c:605:
+		return 0;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#8404: FILE: arch/x86/kernel/i387.c:605:
+	} else

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#8481: FILE: arch/x86/kernel/io_apic_32.c:54:
+#define __apicdebuginit(type) static type __init

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8491: FILE: arch/x86/kernel/io_apic_32.c:1347:
 
+

CHECK:SPACING: No space is necessary after a cast
#8492: FILE: arch/x86/kernel/io_apic_32.c:1348:
+__apicdebuginit(void) print_IO_APIC(void)

CHECK:SPACING: No space is necessary after a cast
#8503: FILE: arch/x86/kernel/io_apic_32.c:1463:
+__apicdebuginit(void) print_APIC_bitfield(int base)

CHECK:SPACING: No space is necessary after a cast
#8512: FILE: arch/x86/kernel/io_apic_32.c:1484:
+__apicdebuginit(void) print_local_APIC(void *dummy)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#8537: FILE: arch/x86/kernel/io_apic_32.c:1539:
+	printk(KERN_DEBUG "... APIC ICR: %08x\n", icr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#8538: FILE: arch/x86/kernel/io_apic_32.c:1540:
+	printk(KERN_DEBUG "... APIC ICR2: %08x\n", icr >> 32);

CHECK:SPACING: No space is necessary after a cast
#8547: FILE: arch/x86/kernel/io_apic_32.c:1568:
+__apicdebuginit(void) print_all_local_APICs(void)

CHECK:CAMELCASE: Avoid CamelCase: <print_all_local_APICs>
#8547: FILE: arch/x86/kernel/io_apic_32.c:1568:
+__apicdebuginit(void) print_all_local_APICs(void)

CHECK:SPACING: No space is necessary after a cast
#8553: FILE: arch/x86/kernel/io_apic_32.c:1573:
+__apicdebuginit(void) print_PIC(void)

CHECK:SPACING: No space is necessary after a cast
#8562: FILE: arch/x86/kernel/io_apic_32.c:1605:
+__apicdebuginit(int) print_all_ICs(void)

CHECK:CAMELCASE: Avoid CamelCase: <print_all_ICs>
#8562: FILE: arch/x86/kernel/io_apic_32.c:1605:
+__apicdebuginit(int) print_all_ICs(void)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#8628: FILE: arch/x86/kernel/io_apic_64.c:58:
+#define __apicdebuginit(type) static type __init

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#8662: FILE: arch/x86/kernel/io_apic_64.c:316:
+			io_apic_write(apic, 0x11 + pin*2, dest);
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#8686: FILE: arch/x86/kernel/io_apic_64.c:469:
+		nr_ioapic_registers[apic] = reg_01.bits.entries+1;
 		                                               ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#8690: FILE: arch/x86/kernel/io_apic_64.c:473:
+		early_ioapic_entries[apic] =
+			kzalloc(sizeof(struct IO_APIC_route_entry) *
+				nr_ioapic_registers[apic], GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#8701: FILE: arch/x86/kernel/io_apic_64.c:484:
+			entry = early_ioapic_entries[apic][pin] =

ERROR:SPACING: space required after that ',' (ctx:VxV)
#8785: FILE: arch/x86/kernel/io_apic_64.c:956:
+	memset(entry,0,sizeof(*entry));
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#8785: FILE: arch/x86/kernel/io_apic_64.c:956:
+	memset(entry,0,sizeof(*entry));
 	              ^

CHECK:SPACING: No space is necessary after a cast
#8792: FILE: arch/x86/kernel/io_apic_64.c:963:
+			(struct IR_IO_APIC_route_entry *) entry;

CHECK:BRACES: Unbalanced braces around else statement
#8817: FILE: arch/x86/kernel/io_apic_64.c:988:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8864: FILE: arch/x86/kernel/io_apic_64.c:1035:
+		printk("Failed to setup ioapic entry for ioapic  %d, pin %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8887: FILE: arch/x86/kernel/io_apic_64.c:1120:
 
+

CHECK:SPACING: No space is necessary after a cast
#8888: FILE: arch/x86/kernel/io_apic_64.c:1121:
+__apicdebuginit(void) print_IO_APIC(void)

CHECK:SPACING: No space is necessary after a cast
#8899: FILE: arch/x86/kernel/io_apic_64.c:1215:
+__apicdebuginit(void) print_APIC_bitfield(int base)

CHECK:SPACING: No space is necessary after a cast
#8908: FILE: arch/x86/kernel/io_apic_64.c:1236:
+__apicdebuginit(void) print_local_APIC(void *dummy)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#8920: FILE: arch/x86/kernel/io_apic_64.c:1247:
+	printk(KERN_INFO "... APIC ID:      %08x (%01x)\n", v, read_apic_id());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#8933: FILE: arch/x86/kernel/io_apic_64.c:1284:
+	printk(KERN_DEBUG "... APIC ICR: %08x\n", icr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#8934: FILE: arch/x86/kernel/io_apic_64.c:1285:
+	printk(KERN_DEBUG "... APIC ICR2: %08x\n", icr >> 32);

CHECK:SPACING: No space is necessary after a cast
#8943: FILE: arch/x86/kernel/io_apic_64.c:1313:
+__apicdebuginit(void) print_all_local_APICs(void)

CHECK:SPACING: No space is necessary after a cast
#8949: FILE: arch/x86/kernel/io_apic_64.c:1318:
+__apicdebuginit(void) print_PIC(void)

CHECK:SPACING: No space is necessary after a cast
#8958: FILE: arch/x86/kernel/io_apic_64.c:1350:
+__apicdebuginit(int) print_all_ICs(void)

WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#8997: FILE: arch/x86/kernel/io_apic_64.c:1568:
+ * For level triggered, we need to modify the io-apic RTE aswell with the update
                                                           ^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#9065: FILE: arch/x86/kernel/io_apic_64.c:1636:
+^I ^I * Interrupt in progress. Migrating irq now will change the$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9065: FILE: arch/x86/kernel/io_apic_64.c:1636:
+^I ^I * Interrupt in progress. Migrating irq now will change the$

WARNING:TYPO_SPELLING: 'everthing' may be misspelled - perhaps 'everything'?
#9074: FILE: arch/x86/kernel/io_apic_64.c:1645:
+	/* everthing is clear. we have right of way */
 	   ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#9092: FILE: arch/x86/kernel/io_apic_64.c:1663:
+		struct irq_desc *desc = irq_desc + irq;
+		if (desc->status & IRQ_MOVE_PENDING) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#9104: FILE: arch/x86/kernel/io_apic_64.c:1675:
+^I^I^I^I^I         irq_desc[irq].pending_mask);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9153: FILE: arch/x86/kernel/io_apic_64.c:1840:
+^I.name ^I^I= "IR-IO-APIC",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9154: FILE: arch/x86/kernel/io_apic_64.c:1841:
+^I.startup ^I= startup_ioapic_irq,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9155: FILE: arch/x86/kernel/io_apic_64.c:1842:
+^I.mask^I ^I= mask_IO_APIC_irq,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9156: FILE: arch/x86/kernel/io_apic_64.c:1843:
+^I.unmask^I ^I= unmask_IO_APIC_irq,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9157: FILE: arch/x86/kernel/io_apic_64.c:1844:
+^I.ack ^I^I= ack_x2apic_edge,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9158: FILE: arch/x86/kernel/io_apic_64.c:1845:
+^I.eoi ^I^I= ack_x2apic_level,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9160: FILE: arch/x86/kernel/io_apic_64.c:1847:
+^I.set_affinity ^I= set_ir_ioapic_affinity_irq,$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#9226: FILE: arch/x86/kernel/io_apic_64.c:2339:
+		BUG_ON(ir_index == -1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#9228: FILE: arch/x86/kernel/io_apic_64.c:2341:
+		memset (&irte, 0, sizeof(irte));

CHECK:BRACES: Unbalanced braces around else statement
#9245: FILE: arch/x86/kernel/io_apic_64.c:2358:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#9337: FILE: arch/x86/kernel/io_apic_64.c:2501:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#9344: FILE: arch/x86/kernel/io_apic_64.c:2508:
+		printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#9346: FILE: arch/x86/kernel/io_apic_64.c:2510:
+^I^I        pci_name(dev));$

CHECK:BRACES: Unbalanced braces around else statement
#9373: FILE: arch/x86/kernel/io_apic_64.c:2537:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#9621: FILE: arch/x86/kernel/setup.c:761:
+ ^Iif (cpu_has_x2apic)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9621: FILE: arch/x86/kernel/setup.c:761:
+ ^Iif (cpu_has_x2apic)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#9621: FILE: arch/x86/kernel/setup.c:761:
+ ^Iif (cpu_has_x2apic)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#9622: FILE: arch/x86/kernel/setup.c:762:
+ ^I^Icheck_x2apic();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#9622: FILE: arch/x86/kernel/setup.c:762:
+ ^I^Icheck_x2apic();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#9622: FILE: arch/x86/kernel/setup.c:762:
+ ^I^Icheck_x2apic();$

CHECK:SPACING: No space is necessary after a cast
#9736: FILE: arch/x86/kernel/signal_32.c:326:
+		*fpstate = (struct _fpstate *) sp;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#10120: FILE: arch/x86/kernel/vmi_32.c:908:
+       para_fill(apic_ops->read, APICRead);$

CHECK:CAMELCASE: Avoid CamelCase: <APICRead>
#10120: FILE: arch/x86/kernel/vmi_32.c:908:
+       para_fill(apic_ops->read, APICRead);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#10121: FILE: arch/x86/kernel/vmi_32.c:909:
+       para_fill(apic_ops->write, APICWrite);$

CHECK:CAMELCASE: Avoid CamelCase: <APICWrite>
#10121: FILE: arch/x86/kernel/vmi_32.c:909:
+       para_fill(apic_ops->write, APICWrite);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10180: FILE: arch/x86/kernel/xsave.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#10236: FILE: arch/x86/kernel/xsave.c:57:
+	err = __get_user(magic2, (__u32 *) (((void *)fpstate) +

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#10264: FILE: arch/x86/kernel/xsave.c:85:
+	BUG_ON(sig_xstate_size < xstate_size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#10267: FILE: arch/x86/kernel/xsave.c:88:
+		printk("save_i387_xstate: bad fpstate %p\n", buf);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_i387_xstate', this function's name, in a string
#10267: FILE: arch/x86/kernel/xsave.c:88:
+		printk("save_i387_xstate: bad fpstate %p\n", buf);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#10274: FILE: arch/x86/kernel/xsave.c:95:
+^I ^I * Start with clearing the user buffer. This will present a$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#10274: FILE: arch/x86/kernel/xsave.c:95:
+^I ^I * Start with clearing the user buffer. This will present a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#10275: FILE: arch/x86/kernel/xsave.c:96:
+^I ^I * clean context for the bytes not touched by the fxsave/xsave.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#10275: FILE: arch/x86/kernel/xsave.c:96:
+^I ^I * clean context for the bytes not touched by the fxsave/xsave.$

CHECK:SPACING: No space is necessary after a cast
#10301: FILE: arch/x86/kernel/xsave.c:122:
+				  (__u32 __user *) (buf + sig_xstate_size

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10319: FILE: arch/x86/kernel/xsave.c:140:
+	if (((unsigned long)buf % 64) ||
+	     check_for_xstate(buf, buf, &fx_sw_user))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#10362: FILE: arch/x86/kernel/xsave.c:183:
+		return 0;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#10362: FILE: arch/x86/kernel/xsave.c:183:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10471: FILE: arch/x86/kernel/xsave.c:292:
+		printk(KERN_ERR "FP/SSE not shown under xsave features 0x%llx\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#10473: FILE: arch/x86/kernel/xsave.c:294:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#10492: FILE: arch/x86/kernel/xsave.c:313:
+	printk(KERN_INFO "xsave/xrstor: enabled xstate_bv 0x%llx, "

WARNING:SPLIT_STRING: quoted string split across lines
#10493: FILE: arch/x86/kernel/xsave.c:314:
+	printk(KERN_INFO "xsave/xrstor: enabled xstate_bv 0x%llx, "
+	       "cntxt size 0x%x\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#10563: FILE: arch/x86/lguest/boot.c:810:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#10946: FILE: arch/x86/mm/init_64.c:116:
+}
+early_param("noexec", nonx_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#10975: FILE: arch/x86/mm/init_64.c:145:
+__setup("noexec32=", nonx32_setup);

CHECK:BRACES: Unbalanced braces around else statement
#11048: FILE: arch/x86/pci/mmconfig-shared.c:439:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#11153: FILE: arch/x86/xen/enlighten.c:608:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11153: FILE: arch/x86/xen/enlighten.c:608:
+        return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#11158: FILE: arch/x86/xen/enlighten.c:613:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11158: FILE: arch/x86/xen/enlighten.c:613:
+        return 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11215: FILE: drivers/pci/dma_remapping.h:1:
+#ifndef _DMA_REMAPPING_H

CHECK:BIT_MACRO: Prefer using the BIT macro
#11223: FILE: drivers/pci/dma_remapping.h:9:
+#define PAGE_SIZE_4K		(1UL << PAGE_SHIFT_4K)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11231: FILE: drivers/pci/dma_remapping.h:17:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11242: FILE: drivers/pci/dma_remapping.h:28:
+};
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#11242: FILE: drivers/pci/dma_remapping.h:28:
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))
                                    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11247: FILE: drivers/pci/dma_remapping.h:33:
+}
+static inline void set_root_present(struct root_entry *root)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11251: FILE: drivers/pci/dma_remapping.h:37:
+}
+static inline void set_root_value(struct root_entry *root, unsigned long value)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#11261: FILE: drivers/pci/dma_remapping.h:47:
+		(root_present(root)?phys_to_virt(

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#11261: FILE: drivers/pci/dma_remapping.h:47:
+		(root_present(root)?phys_to_virt(
 		                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#11262: FILE: drivers/pci/dma_remapping.h:48:
+		root->val & PAGE_MASK_4K):
 		                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11281: FILE: drivers/pci/dma_remapping.h:67:
+};
+#define context_present(c) ((c).lo & 1)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11288: FILE: drivers/pci/dma_remapping.h:74:
+#define context_set_present(c) do {(c).lo |= 1;} while (0)
                                               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11288: FILE: drivers/pci/dma_remapping.h:74:
+#define context_set_present(c) do {(c).lo |= 1;} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11289: FILE: drivers/pci/dma_remapping.h:75:
+#define context_set_fault_enable(c) \
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11290: FILE: drivers/pci/dma_remapping.h:76:
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while (0)
 	                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#11291: FILE: drivers/pci/dma_remapping.h:77:
+#define context_set_translation_type(c, val) \
+	do { \
+		(c).lo &= (((u64)-1) << 4) | 3; \
+		(c).lo |= ((val) & 3) << 2; \
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11297: FILE: drivers/pci/dma_remapping.h:83:
+#define context_set_address_root(c, val) \
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11298: FILE: drivers/pci/dma_remapping.h:84:
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while (0)
 	                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11299: FILE: drivers/pci/dma_remapping.h:85:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while (0)
                                                                  ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11299: FILE: drivers/pci/dma_remapping.h:85:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11300: FILE: drivers/pci/dma_remapping.h:86:
+#define context_set_domain_id(c, val) \
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11301: FILE: drivers/pci/dma_remapping.h:87:
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while (0)
 	                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11302: FILE: drivers/pci/dma_remapping.h:88:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while (0)
                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#11302: FILE: drivers/pci/dma_remapping.h:88:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while (0)

WARNING:TYPO_SPELLING: 'physcial' may be misspelled - perhaps 'physical'?
#11310: FILE: drivers/pci/dma_remapping.h:96:
+ * 12-63: Host physcial address
                ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11315: FILE: drivers/pci/dma_remapping.h:101:
+};
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11315: FILE: drivers/pci/dma_remapping.h:101:
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)
                         	               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11315: FILE: drivers/pci/dma_remapping.h:101:
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11320: FILE: drivers/pci/dma_remapping.h:106:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while (0)
                                                            ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11320: FILE: drivers/pci/dma_remapping.h:106:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11321: FILE: drivers/pci/dma_remapping.h:107:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while (0)
                                                             ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11321: FILE: drivers/pci/dma_remapping.h:107:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#11322: FILE: drivers/pci/dma_remapping.h:108:
+#define dma_set_pte_prot(p, prot) \
+		do {(p).val = ((p).val & ~3) | ((prot) & 3); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11322: FILE: drivers/pci/dma_remapping.h:108:
+#define dma_set_pte_prot(p, prot) \
+		do {(p).val = ((p).val & ~3) | ((prot) & 3); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#11325: FILE: drivers/pci/dma_remapping.h:111:
+#define dma_set_pte_addr(p, addr) do {\
+		(p).val |= ((addr) & PAGE_MASK_4K); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#11326: FILE: drivers/pci/dma_remapping.h:112:
+		(p).val |= ((addr) & PAGE_MASK_4K); } while (0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#11335: FILE: drivers/pci/dma_remapping.h:121:
+^Istruct list_head devices; ^I/* all devices' list */$

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#11353: FILE: drivers/pci/dma_remapping.h:139:
+	u8 bus;			/* PCI bus numer */
 	       			           ^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#11359: FILE: drivers/pci/dma_remapping.h:145:
+extern int init_dmars(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#11360: FILE: drivers/pci/dma_remapping.h:146:
+extern void free_dmar_iommu(struct intel_iommu *iommu);

WARNING:RETURN_VOID: void function return statements are not generally useful
#11368: FILE: drivers/pci/dma_remapping.h:154:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#11445: FILE: drivers/pci/dmar.c:198:
+	drhd = (struct acpi_dmar_hardware_unit *) dmaru->hdr;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11476: FILE: drivers/pci/dmar.c:230:
+
+

CHECK:SPACING: No space is necessary after a cast
#11503: FILE: drivers/pci/dmar.c:256:
+	rmrr = (struct acpi_dmar_reserved_memory *) rmrru->hdr;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rmrru->devices_cnt == 0'
#11510: FILE: drivers/pci/dmar.c:261:
+	if (ret || (rmrru->devices_cnt == 0)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11526: FILE: drivers/pci/dmar.c:292:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11569: FILE: drivers/pci/dmar.c:367:
+		if (drhd->include_all || dmar_pci_device_match(drhd->devices,
+						drhd->devices_cnt, dev))

WARNING:LINE_SPACING: Missing a blank line after declarations
#11590: FILE: drivers/pci/dmar.c:388:
+		struct dmar_rmrr_unit *rmrr;
+		for_each_rmrr_units(rmrr) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11601: FILE: drivers/pci/dmar.c:399:
 
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#11616: FILE: drivers/pci/dmar.c:413:
+			printk(KERN_INFO PREFIX "parse DMAR table failure.\n");

CHECK:SPACING: No space is necessary after a cast
#11655: FILE: drivers/pci/dmar.c:467:
+		dmar = (struct acpi_table_dmar *) dmar_tbl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#11657: FILE: drivers/pci/dmar.c:469:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#11659: FILE: drivers/pci/dmar.c:471:
+			       "Queued invalidation will be enabled to support "
+			       "x2apic and Intr-remapping.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#11660: FILE: drivers/pci/dmar.c:472:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#11662: FILE: drivers/pci/dmar.c:474:
+			       "Disabling IOMMU detection, because of missing "
+			       "queued invalidation support for IOTLB "

WARNING:SPLIT_STRING: quoted string split across lines
#11663: FILE: drivers/pci/dmar.c:475:
+			       "queued invalidation support for IOTLB "
+			       "invalidation\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#11664: FILE: drivers/pci/dmar.c:476:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#11666: FILE: drivers/pci/dmar.c:478:
+			       "Use \"nox2apic\", if you want to use Intel "
+			       " IOMMU for DMA-remapping and don't care about "

WARNING:SPLIT_STRING: quoted string split across lines
#11667: FILE: drivers/pci/dmar.c:479:
+			       " IOMMU for DMA-remapping and don't care about "
+			       " x2apic support\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11680: FILE: drivers/pci/dmar.c:492:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#11686: FILE: drivers/pci/dmar.c:498:
+	static int iommu_allocated = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#11696: FILE: drivers/pci/dmar.c:508:
+		printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11704: FILE: drivers/pci/dmar.c:516:
+	map_size = max_t(int, ecap_max_iotlb_offset(iommu->ecap),
+		cap_max_fault_reg_offset(iommu->cap));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#11710: FILE: drivers/pci/dmar.c:522:
+			printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11717: FILE: drivers/pci/dmar.c:529:
+	pr_debug("IOMMU %llx: ver %d:%d cap %llx ecap %llx\n",
+		drhd->reg_base_addr, DMAR_VER_MAJOR(ver), DMAR_VER_MINOR(ver),

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#11781: FILE: drivers/pci/dmar.c:593:
+	qi->desc_status[index] = qi->desc_status[wait_index] = QI_IN_USE;

CHECK:SPACING: No space is necessary after a cast
#11864: FILE: drivers/pci/dmar.c:676:
+		free_page((unsigned long) qi->desc);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#11870: FILE: drivers/pci/dmar.c:682:
+	qi->free_head = qi->free_tail = 0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#12194: FILE: drivers/pci/intel-iommu.c:2291:
+^I^Ireturn ^I-ENODEV;$

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#12227: FILE: drivers/pci/intel-iommu.h:30:
+#include <asm/cacheflush.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'e' may be better as '(e)' to avoid precedence issues
#12249: FILE: drivers/pci/intel-iommu.h:124:
+#define ecap_eim_support(e)	((e >> 4) & 0x1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'e' may be better as '(e)' to avoid precedence issues
#12250: FILE: drivers/pci/intel-iommu.h:125:
+#define ecap_ir_support(e)	((e >> 3) & 0x1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'e' may be better as '(e)' to avoid precedence issues
#12251: FILE: drivers/pci/intel-iommu.h:126:
+#define ecap_max_handle_mask(e) ((e >> 20) & 0xf)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'id' may be better as '(id)' to avoid precedence issues
#12265: FILE: drivers/pci/intel-iommu.h:148:
+#define DMA_ID_TLB_DID(id)	(((u64)((id & 0xffff) << 16)))

CHECK:SPACING: No space is necessary after a cast
#12279: FILE: drivers/pci/intel-iommu.h:165:
+#define DMA_GCMD_IRE (((u32) 1) << 25)

CHECK:SPACING: No space is necessary after a cast
#12319: FILE: drivers/pci/intel-iommu.h:205:
+#define DMAR_OPERATION_TIMEOUT ((cycles_t) tsc_khz*10*1000) /* 10sec */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#12319: FILE: drivers/pci/intel-iommu.h:205:
+#define DMAR_OPERATION_TIMEOUT ((cycles_t) tsc_khz*10*1000) /* 10sec */
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#12319: FILE: drivers/pci/intel-iommu.h:205:
+#define DMAR_OPERATION_TIMEOUT ((cycles_t) tsc_khz*10*1000) /* 10sec */
                                                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iommu' may be better as '(iommu)' to avoid precedence issues
#12321: FILE: drivers/pci/intel-iommu.h:207:
+#define IOMMU_WAIT_OP(iommu, offset, op, cond, sts) \
+{\
+	cycles_t start_time = get_cycles();\
+	while (1) {\
+		sts = op (iommu->reg + offset);\
+		if (cond)\
+			break;\
+		if (DMAR_OPERATION_TIMEOUT < (get_cycles() - start_time))\
+			panic("DMAR hardware is malfunctioning\n");\
+		cpu_relax();\
+	}\
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#12321: FILE: drivers/pci/intel-iommu.h:207:
+#define IOMMU_WAIT_OP(iommu, offset, op, cond, sts) \
+{\
+	cycles_t start_time = get_cycles();\
+	while (1) {\
+		sts = op (iommu->reg + offset);\
+		if (cond)\
+			break;\
+		if (DMAR_OPERATION_TIMEOUT < (get_cycles() - start_time))\
+			panic("DMAR hardware is malfunctioning\n");\
+		cpu_relax();\
+	}\
 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#12325: FILE: drivers/pci/intel-iommu.h:211:
+		sts = op (iommu->reg + offset);\

ERROR:SPACING: space required after that close brace '}'
#12331: FILE: drivers/pci/intel-iommu.h:217:
+	}\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#12419: FILE: drivers/pci/intel-iommu.h:235:
+#define QI_IEC_IIDEX(idx)	(((u64)(idx & 0xffff) << 32))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#12420: FILE: drivers/pci/intel-iommu.h:236:
+#define QI_IEC_IM(m)		(((u64)(m & 0x1f) << 27))

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#12438: FILE: drivers/pci/intel-iommu.h:246:
+	spinlock_t      q_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#12486: FILE: drivers/pci/intel-iommu.h:276:
+^Iunsigned long ^I*domain_ids; /* bitmap of domains */$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#12504: FILE: drivers/pci/intel-iommu.h:292:
+static inline void __iommu_flush_cache(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#12513: FILE: drivers/pci/intel-iommu.h:299:
+extern struct dmar_drhd_unit * dmar_find_matched_drhd_unit(struct pci_dev *dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12513: FILE: drivers/pci/intel-iommu.h:299:
+extern struct dmar_drhd_unit * dmar_find_matched_drhd_unit(struct pci_dev *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12515: FILE: drivers/pci/intel-iommu.h:301:
+extern int alloc_iommu(struct dmar_drhd_unit *drhd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12516: FILE: drivers/pci/intel-iommu.h:302:
+extern void free_iommu(struct intel_iommu *iommu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12517: FILE: drivers/pci/intel-iommu.h:303:
+extern int dmar_enable_qi(struct intel_iommu *iommu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12518: FILE: drivers/pci/intel-iommu.h:304:
+extern void qi_global_iec(struct intel_iommu *iommu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12520: FILE: drivers/pci/intel-iommu.h:306:
+extern void qi_submit_sync(struct qi_desc *desc, struct intel_iommu *iommu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12528: FILE: drivers/pci/intr_remapping.c:1:
+#include <linux/dmar.h>

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#12594: FILE: drivers/pci/intr_remapping.c:67:
+	index = start_index = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#12602: FILE: drivers/pci/intr_remapping.c:75:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#12604: FILE: drivers/pci/intr_remapping.c:77:
+		       "Requested mask %x exceeds the max invalidation handle"
+		       " mask value %Lx\n", mask,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#12604: FILE: drivers/pci/intr_remapping.c:77:
+		       " mask value %Lx\n", mask,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#12622: FILE: drivers/pci/intr_remapping.c:95:
+			printk(KERN_ERR "can't allocate an IRTE\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#12844: FILE: drivers/pci/intr_remapping.c:317:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#12850: FILE: drivers/pci/intr_remapping.c:323:
+	ir_table = iommu->ir_table = kzalloc(sizeof(struct ir_table),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*iommu->ir_table)...) over kzalloc(sizeof(struct ir_table)...)
#12850: FILE: drivers/pci/intr_remapping.c:323:
+	ir_table = iommu->ir_table = kzalloc(sizeof(struct ir_table),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#12859: FILE: drivers/pci/intr_remapping.c:332:
+		printk(KERN_ERR "failed to allocate pages of order %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#12886: FILE: drivers/pci/intr_remapping.c:359:
+			printk(KERN_INFO "DRHD %Lx: EIM not supported by DRHD, "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#12886: FILE: drivers/pci/intr_remapping.c:359:
+			printk(KERN_INFO "DRHD %Lx: EIM not supported by DRHD, "

WARNING:SPLIT_STRING: quoted string split across lines
#12887: FILE: drivers/pci/intr_remapping.c:360:
+			printk(KERN_INFO "DRHD %Lx: EIM not supported by DRHD, "
+			       " ecap %Lx\n", drhd->reg_base_addr, iommu->ecap);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#12887: FILE: drivers/pci/intr_remapping.c:360:
+			       " ecap %Lx\n", drhd->reg_base_addr, iommu->ecap);

WARNING:LINE_SPACING: Missing a blank line after declarations
#12898: FILE: drivers/pci/intr_remapping.c:371:
+		struct intel_iommu *iommu = drhd->iommu;
+		ret = dmar_enable_qi(iommu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#12901: FILE: drivers/pci/intr_remapping.c:374:
+			printk(KERN_ERR "DRHD %Lx: failed to enable queued, "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#12901: FILE: drivers/pci/intr_remapping.c:374:
+			printk(KERN_ERR "DRHD %Lx: failed to enable queued, "

WARNING:SPLIT_STRING: quoted string split across lines
#12902: FILE: drivers/pci/intr_remapping.c:375:
+			printk(KERN_ERR "DRHD %Lx: failed to enable queued, "
+			       " invalidation, ecap %Lx, ret %d\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#12902: FILE: drivers/pci/intr_remapping.c:375:
+			       " invalidation, ecap %Lx, ret %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#12953: FILE: drivers/pci/intr_remapping.c:426:
+				printk(KERN_WARNING "Exceeded Max IO APICS\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#12957: FILE: drivers/pci/intr_remapping.c:430:
+			printk(KERN_INFO "IOAPIC id %d under DRHD base"

WARNING:SPLIT_STRING: quoted string split across lines
#12958: FILE: drivers/pci/intr_remapping.c:431:
+			printk(KERN_INFO "IOAPIC id %d under DRHD base"
+			       " 0x%Lx\n", scope->enumeration_id,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#12958: FILE: drivers/pci/intr_remapping.c:431:
+			       " 0x%Lx\n", scope->enumeration_id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#12992: FILE: drivers/pci/intr_remapping.c:465:
+		printk(KERN_WARNING

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13005: FILE: drivers/pci/intr_remapping.h:1:
+#include "intel-iommu.h"

WARNING:INCLUDE_LINUX: Use #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#13033: FILE: include/asm-x86/apic.h:12:
+#include <asm/cpufeature.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13090: FILE: include/asm-x86/apic.h:99:
+extern void check_x2apic(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13091: FILE: include/asm-x86/apic.h:100:
+extern void enable_x2apic(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13092: FILE: include/asm-x86/apic.h:101:
+extern void enable_IR_x2apic(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13093: FILE: include/asm-x86/apic.h:102:
+extern void x2apic_icr_write(u32 low, u32 id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#13124: FILE: include/asm-x86/apic.h:133:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#13145: FILE: include/asm-x86/apicdef.h:133:
+#define X2APIC_ENABLE	(1UL << 10)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13172: FILE: include/asm-x86/bigsmp/apic.h:1:
+#ifndef __ASM_MACH_APIC_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13207: FILE: include/asm-x86/bigsmp/apicdef.h:1:
+#ifndef __ASM_MACH_APICDEF_H

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#13210: FILE: include/asm-x86/bigsmp/apicdef.h:4:
+#define		APIC_ID_MASK		(0xFF<<24)
        		            		     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#13212: FILE: include/asm-x86/bigsmp/apicdef.h:6:
+static inline unsigned get_apic_id(unsigned long x)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#13214: FILE: include/asm-x86/bigsmp/apicdef.h:8:
+	return (((x)>>24)&0xFF);
 	            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#13214: FILE: include/asm-x86/bigsmp/apicdef.h:8:
+	return (((x)>>24)&0xFF);
 	                 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13230: FILE: include/asm-x86/bigsmp/ipi.h:1:
+#ifndef __ASM_MACH_IPI_H

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13281: FILE: include/asm-x86/cpufeature.h:23:
+#define X86_FEATURE_MSR		(0*32+ 5) /* Model-Specific Registers */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13281: FILE: include/asm-x86/cpufeature.h:23:
+#define X86_FEATURE_MSR		(0*32+ 5) /* Model-Specific Registers */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13290: FILE: include/asm-x86/cpufeature.h:32:
+#define X86_FEATURE_CMOV	(0*32+15) /* CMOV instructions */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13290: FILE: include/asm-x86/cpufeature.h:32:
+#define X86_FEATURE_CMOV	(0*32+15) /* CMOV instructions */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13297: FILE: include/asm-x86/cpufeature.h:37:
+#define X86_FEATURE_CLFLSH	(0*32+19) /* "clflush" CLFLUSH instruction */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13297: FILE: include/asm-x86/cpufeature.h:37:
+#define X86_FEATURE_CLFLSH	(0*32+19) /* "clflush" CLFLUSH instruction */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13298: FILE: include/asm-x86/cpufeature.h:38:
+#define X86_FEATURE_DS		(0*32+21) /* "dts" Debug Store */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13298: FILE: include/asm-x86/cpufeature.h:38:
+#define X86_FEATURE_DS		(0*32+21) /* "dts" Debug Store */
                       		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13306: FILE: include/asm-x86/cpufeature.h:41:
+#define X86_FEATURE_FXSR	(0*32+24) /* FXSAVE/FXRSTOR, CR4.OSFXSR */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13306: FILE: include/asm-x86/cpufeature.h:41:
+#define X86_FEATURE_FXSR	(0*32+24) /* FXSAVE/FXRSTOR, CR4.OSFXSR */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13307: FILE: include/asm-x86/cpufeature.h:42:
+#define X86_FEATURE_XMM		(0*32+25) /* "sse" */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13307: FILE: include/asm-x86/cpufeature.h:42:
+#define X86_FEATURE_XMM		(0*32+25) /* "sse" */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13308: FILE: include/asm-x86/cpufeature.h:43:
+#define X86_FEATURE_XMM2	(0*32+26) /* "sse2" */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13308: FILE: include/asm-x86/cpufeature.h:43:
+#define X86_FEATURE_XMM2	(0*32+26) /* "sse2" */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13309: FILE: include/asm-x86/cpufeature.h:44:
+#define X86_FEATURE_SELFSNOOP	(0*32+27) /* "ss" CPU self snoop */
                              	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13309: FILE: include/asm-x86/cpufeature.h:44:
+#define X86_FEATURE_SELFSNOOP	(0*32+27) /* "ss" CPU self snoop */
                              	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13312: FILE: include/asm-x86/cpufeature.h:46:
+#define X86_FEATURE_ACC		(0*32+29) /* "tm" Automatic clock control */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13312: FILE: include/asm-x86/cpufeature.h:46:
+#define X86_FEATURE_ACC		(0*32+29) /* "tm" Automatic clock control */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13314: FILE: include/asm-x86/cpufeature.h:48:
+#define X86_FEATURE_PBE		(0*32+31) /* Pending Break Enable */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13314: FILE: include/asm-x86/cpufeature.h:48:
+#define X86_FEATURE_PBE		(0*32+31) /* Pending Break Enable */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13323: FILE: include/asm-x86/cpufeature.h:56:
+#define X86_FEATURE_FXSR_OPT	(1*32+25) /* FXSAVE/FXRSTOR optimizations */
                             	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13323: FILE: include/asm-x86/cpufeature.h:56:
+#define X86_FEATURE_FXSR_OPT	(1*32+25) /* FXSAVE/FXRSTOR optimizations */
                             	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13324: FILE: include/asm-x86/cpufeature.h:57:
+#define X86_FEATURE_GBPAGES	(1*32+26) /* "pdpe1gb" GB pages */
                            	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13324: FILE: include/asm-x86/cpufeature.h:57:
+#define X86_FEATURE_GBPAGES	(1*32+26) /* "pdpe1gb" GB pages */
                            	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13336: FILE: include/asm-x86/cpufeature.h:75:
+#define X86_FEATURE_K8		(3*32+ 4) /* "" Opteron, Athlon64 */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13336: FILE: include/asm-x86/cpufeature.h:75:
+#define X86_FEATURE_K8		(3*32+ 4) /* "" Opteron, Athlon64 */
                       		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13337: FILE: include/asm-x86/cpufeature.h:76:
+#define X86_FEATURE_K7		(3*32+ 5) /* "" Athlon */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13337: FILE: include/asm-x86/cpufeature.h:76:
+#define X86_FEATURE_K7		(3*32+ 5) /* "" Athlon */
                       		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13338: FILE: include/asm-x86/cpufeature.h:77:
+#define X86_FEATURE_P3		(3*32+ 6) /* "" P3 */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13338: FILE: include/asm-x86/cpufeature.h:77:
+#define X86_FEATURE_P3		(3*32+ 6) /* "" P3 */
                       		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13339: FILE: include/asm-x86/cpufeature.h:78:
+#define X86_FEATURE_P4		(3*32+ 7) /* "" P4 */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13339: FILE: include/asm-x86/cpufeature.h:78:
+#define X86_FEATURE_P4		(3*32+ 7) /* "" P4 */
                       		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13343: FILE: include/asm-x86/cpufeature.h:81:
+#define X86_FEATURE_FXSAVE_LEAK (3*32+10) /* "" FXSAVE leaks FOP/FIP/FOP */
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13343: FILE: include/asm-x86/cpufeature.h:81:
+#define X86_FEATURE_FXSAVE_LEAK (3*32+10) /* "" FXSAVE leaks FOP/FIP/FOP */
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13345: FILE: include/asm-x86/cpufeature.h:83:
+#define X86_FEATURE_NOPL	(3*32+20) /* The NOPL (0F 1F) instructions */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13345: FILE: include/asm-x86/cpufeature.h:83:
+#define X86_FEATURE_NOPL	(3*32+20) /* The NOPL (0F 1F) instructions */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13354: FILE: include/asm-x86/cpufeature.h:86:
+#define X86_FEATURE_SYSCALL32	(3*32+14) /* "" syscall in ia32 userspace */
                              	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13354: FILE: include/asm-x86/cpufeature.h:86:
+#define X86_FEATURE_SYSCALL32	(3*32+14) /* "" syscall in ia32 userspace */
                              	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13355: FILE: include/asm-x86/cpufeature.h:87:
+#define X86_FEATURE_SYSENTER32	(3*32+15) /* "" sysenter in ia32 userspace */
                               	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13355: FILE: include/asm-x86/cpufeature.h:87:
+#define X86_FEATURE_SYSENTER32	(3*32+15) /* "" sysenter in ia32 userspace */
                               	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13356: FILE: include/asm-x86/cpufeature.h:88:
+#define X86_FEATURE_REP_GOOD	(3*32+16) /* rep microcode works well */
                             	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13356: FILE: include/asm-x86/cpufeature.h:88:
+#define X86_FEATURE_REP_GOOD	(3*32+16) /* rep microcode works well */
                             	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13357: FILE: include/asm-x86/cpufeature.h:89:
+#define X86_FEATURE_MFENCE_RDTSC (3*32+17) /* "" Mfence synchronizes RDTSC */
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13357: FILE: include/asm-x86/cpufeature.h:89:
+#define X86_FEATURE_MFENCE_RDTSC (3*32+17) /* "" Mfence synchronizes RDTSC */
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13358: FILE: include/asm-x86/cpufeature.h:90:
+#define X86_FEATURE_LFENCE_RDTSC (3*32+18) /* "" Lfence synchronizes RDTSC */
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13358: FILE: include/asm-x86/cpufeature.h:90:
+#define X86_FEATURE_LFENCE_RDTSC (3*32+18) /* "" Lfence synchronizes RDTSC */
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13359: FILE: include/asm-x86/cpufeature.h:91:
+#define X86_FEATURE_11AP	(3*32+19) /* "" Bad local APIC aka 11AP */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13359: FILE: include/asm-x86/cpufeature.h:91:
+#define X86_FEATURE_11AP	(3*32+19) /* "" Bad local APIC aka 11AP */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13362: FILE: include/asm-x86/cpufeature.h:94:
+#define X86_FEATURE_XTOPOLOGY	(3*32+21) /* cpu topology enum extensions */
                              	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13362: FILE: include/asm-x86/cpufeature.h:94:
+#define X86_FEATURE_XTOPOLOGY	(3*32+21) /* cpu topology enum extensions */
                              	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13368: FILE: include/asm-x86/cpufeature.h:97:
+#define X86_FEATURE_XMM3	(4*32+ 0) /* "pni" SSE-3 */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13368: FILE: include/asm-x86/cpufeature.h:97:
+#define X86_FEATURE_XMM3	(4*32+ 0) /* "pni" SSE-3 */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13369: FILE: include/asm-x86/cpufeature.h:98:
+#define X86_FEATURE_PCLMULQDQ	(4*32+ 1) /* PCLMULQDQ instruction */
                              	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13369: FILE: include/asm-x86/cpufeature.h:98:
+#define X86_FEATURE_PCLMULQDQ	(4*32+ 1) /* PCLMULQDQ instruction */
                              	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13370: FILE: include/asm-x86/cpufeature.h:99:
+#define X86_FEATURE_DTES64	(4*32+ 2) /* 64-bit Debug Store */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13370: FILE: include/asm-x86/cpufeature.h:99:
+#define X86_FEATURE_DTES64	(4*32+ 2) /* 64-bit Debug Store */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13371: FILE: include/asm-x86/cpufeature.h:100:
+#define X86_FEATURE_MWAIT	(4*32+ 3) /* "monitor" Monitor/Mwait support */
                          	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13371: FILE: include/asm-x86/cpufeature.h:100:
+#define X86_FEATURE_MWAIT	(4*32+ 3) /* "monitor" Monitor/Mwait support */
                          	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13372: FILE: include/asm-x86/cpufeature.h:101:
+#define X86_FEATURE_DSCPL	(4*32+ 4) /* "ds_cpl" CPL Qual. Debug Store */
                          	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13372: FILE: include/asm-x86/cpufeature.h:101:
+#define X86_FEATURE_DSCPL	(4*32+ 4) /* "ds_cpl" CPL Qual. Debug Store */
                          	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13373: FILE: include/asm-x86/cpufeature.h:102:
+#define X86_FEATURE_VMX		(4*32+ 5) /* Hardware virtualization */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13373: FILE: include/asm-x86/cpufeature.h:102:
+#define X86_FEATURE_VMX		(4*32+ 5) /* Hardware virtualization */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13374: FILE: include/asm-x86/cpufeature.h:103:
+#define X86_FEATURE_SMX		(4*32+ 6) /* Safer mode */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13374: FILE: include/asm-x86/cpufeature.h:103:
+#define X86_FEATURE_SMX		(4*32+ 6) /* Safer mode */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13377: FILE: include/asm-x86/cpufeature.h:106:
+#define X86_FEATURE_SSSE3	(4*32+ 9) /* Supplemental SSE-3 */
                          	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13377: FILE: include/asm-x86/cpufeature.h:106:
+#define X86_FEATURE_SSSE3	(4*32+ 9) /* Supplemental SSE-3 */
                          	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13379: FILE: include/asm-x86/cpufeature.h:108:
+#define X86_FEATURE_FMA		(4*32+12) /* Fused multiply-add */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13379: FILE: include/asm-x86/cpufeature.h:108:
+#define X86_FEATURE_FMA		(4*32+12) /* Fused multiply-add */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13382: FILE: include/asm-x86/cpufeature.h:111:
+#define X86_FEATURE_PDCM	(4*32+15) /* Performance Capabilities */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13382: FILE: include/asm-x86/cpufeature.h:111:
+#define X86_FEATURE_PDCM	(4*32+15) /* Performance Capabilities */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13385: FILE: include/asm-x86/cpufeature.h:113:
+#define X86_FEATURE_XMM4_1	(4*32+19) /* "sse4_1" SSE-4.1 */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13385: FILE: include/asm-x86/cpufeature.h:113:
+#define X86_FEATURE_XMM4_1	(4*32+19) /* "sse4_1" SSE-4.1 */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13386: FILE: include/asm-x86/cpufeature.h:114:
+#define X86_FEATURE_XMM4_2	(4*32+20) /* "sse4_2" SSE-4.2 */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13386: FILE: include/asm-x86/cpufeature.h:114:
+#define X86_FEATURE_XMM4_2	(4*32+20) /* "sse4_2" SSE-4.2 */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13387: FILE: include/asm-x86/cpufeature.h:115:
+#define X86_FEATURE_X2APIC	(4*32+21) /* x2APIC */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13387: FILE: include/asm-x86/cpufeature.h:115:
+#define X86_FEATURE_X2APIC	(4*32+21) /* x2APIC */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13388: FILE: include/asm-x86/cpufeature.h:116:
+#define X86_FEATURE_AES		(4*32+25) /* AES instructions */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13388: FILE: include/asm-x86/cpufeature.h:116:
+#define X86_FEATURE_AES		(4*32+25) /* AES instructions */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13389: FILE: include/asm-x86/cpufeature.h:117:
+#define X86_FEATURE_XSAVE	(4*32+26) /* XSAVE/XRSTOR/XSETBV/XGETBV */
                          	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13389: FILE: include/asm-x86/cpufeature.h:117:
+#define X86_FEATURE_XSAVE	(4*32+26) /* XSAVE/XRSTOR/XSETBV/XGETBV */
                          	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13390: FILE: include/asm-x86/cpufeature.h:118:
+#define X86_FEATURE_OSXSAVE	(4*32+27) /* "" XSAVE enabled in the OS */
                            	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13390: FILE: include/asm-x86/cpufeature.h:118:
+#define X86_FEATURE_OSXSAVE	(4*32+27) /* "" XSAVE enabled in the OS */
                            	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13391: FILE: include/asm-x86/cpufeature.h:119:
+#define X86_FEATURE_AVX		(4*32+28) /* Advanced Vector Extensions */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13391: FILE: include/asm-x86/cpufeature.h:119:
+#define X86_FEATURE_AVX		(4*32+28) /* Advanced Vector Extensions */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13398: FILE: include/asm-x86/cpufeature.h:122:
+#define X86_FEATURE_XSTORE	(5*32+ 2) /* "rng" RNG present (xstore) */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13398: FILE: include/asm-x86/cpufeature.h:122:
+#define X86_FEATURE_XSTORE	(5*32+ 2) /* "rng" RNG present (xstore) */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13399: FILE: include/asm-x86/cpufeature.h:123:
+#define X86_FEATURE_XSTORE_EN	(5*32+ 3) /* "rng_en" RNG enabled */
                              	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13399: FILE: include/asm-x86/cpufeature.h:123:
+#define X86_FEATURE_XSTORE_EN	(5*32+ 3) /* "rng_en" RNG enabled */
                              	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13400: FILE: include/asm-x86/cpufeature.h:124:
+#define X86_FEATURE_XCRYPT	(5*32+ 6) /* "ace" on-CPU crypto (xcrypt) */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13400: FILE: include/asm-x86/cpufeature.h:124:
+#define X86_FEATURE_XCRYPT	(5*32+ 6) /* "ace" on-CPU crypto (xcrypt) */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13401: FILE: include/asm-x86/cpufeature.h:125:
+#define X86_FEATURE_XCRYPT_EN	(5*32+ 7) /* "ace_en" on-CPU crypto enabled */
                              	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13401: FILE: include/asm-x86/cpufeature.h:125:
+#define X86_FEATURE_XCRYPT_EN	(5*32+ 7) /* "ace_en" on-CPU crypto enabled */
                              	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13408: FILE: include/asm-x86/cpufeature.h:128:
+#define X86_FEATURE_PHE		(5*32+10) /* PadLock Hash Engine */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13408: FILE: include/asm-x86/cpufeature.h:128:
+#define X86_FEATURE_PHE		(5*32+10) /* PadLock Hash Engine */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13409: FILE: include/asm-x86/cpufeature.h:129:
+#define X86_FEATURE_PHE_EN	(5*32+11) /* PHE enabled */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13409: FILE: include/asm-x86/cpufeature.h:129:
+#define X86_FEATURE_PHE_EN	(5*32+11) /* PHE enabled */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13410: FILE: include/asm-x86/cpufeature.h:130:
+#define X86_FEATURE_PMM		(5*32+12) /* PadLock Montgomery Multiplier */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13410: FILE: include/asm-x86/cpufeature.h:130:
+#define X86_FEATURE_PMM		(5*32+12) /* PadLock Montgomery Multiplier */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13411: FILE: include/asm-x86/cpufeature.h:131:
+#define X86_FEATURE_PMM_EN	(5*32+13) /* PMM enabled */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13411: FILE: include/asm-x86/cpufeature.h:131:
+#define X86_FEATURE_PMM_EN	(5*32+13) /* PMM enabled */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13417: FILE: include/asm-x86/cpufeature.h:136:
+#define X86_FEATURE_SVM		(6*32+ 2) /* Secure virtual machine */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13417: FILE: include/asm-x86/cpufeature.h:136:
+#define X86_FEATURE_SVM		(6*32+ 2) /* Secure virtual machine */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13418: FILE: include/asm-x86/cpufeature.h:137:
+#define X86_FEATURE_EXTAPIC	(6*32+ 3) /* Extended APIC space */
                            	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13418: FILE: include/asm-x86/cpufeature.h:137:
+#define X86_FEATURE_EXTAPIC	(6*32+ 3) /* Extended APIC space */
                            	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13419: FILE: include/asm-x86/cpufeature.h:138:
+#define X86_FEATURE_CR8_LEGACY	(6*32+ 4) /* CR8 in 32-bit mode */
                               	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13419: FILE: include/asm-x86/cpufeature.h:138:
+#define X86_FEATURE_CR8_LEGACY	(6*32+ 4) /* CR8 in 32-bit mode */
                               	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13420: FILE: include/asm-x86/cpufeature.h:139:
+#define X86_FEATURE_ABM		(6*32+ 5) /* Advanced bit manipulation */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13420: FILE: include/asm-x86/cpufeature.h:139:
+#define X86_FEATURE_ABM		(6*32+ 5) /* Advanced bit manipulation */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13421: FILE: include/asm-x86/cpufeature.h:140:
+#define X86_FEATURE_SSE4A	(6*32+ 6) /* SSE-4A */
                          	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13421: FILE: include/asm-x86/cpufeature.h:140:
+#define X86_FEATURE_SSE4A	(6*32+ 6) /* SSE-4A */
                          	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13422: FILE: include/asm-x86/cpufeature.h:141:
+#define X86_FEATURE_MISALIGNSSE (6*32+ 7) /* Misaligned SSE mode */
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13422: FILE: include/asm-x86/cpufeature.h:141:
+#define X86_FEATURE_MISALIGNSSE (6*32+ 7) /* Misaligned SSE mode */
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13423: FILE: include/asm-x86/cpufeature.h:142:
+#define X86_FEATURE_3DNOWPREFETCH (6*32+ 8) /* 3DNow prefetch instructions */
                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13423: FILE: include/asm-x86/cpufeature.h:142:
+#define X86_FEATURE_3DNOWPREFETCH (6*32+ 8) /* 3DNow prefetch instructions */
                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13424: FILE: include/asm-x86/cpufeature.h:143:
+#define X86_FEATURE_OSVW	(6*32+ 9) /* OS Visible Workaround */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13424: FILE: include/asm-x86/cpufeature.h:143:
+#define X86_FEATURE_OSVW	(6*32+ 9) /* OS Visible Workaround */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13425: FILE: include/asm-x86/cpufeature.h:144:
+#define X86_FEATURE_IBS		(6*32+10) /* Instruction Based Sampling */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13425: FILE: include/asm-x86/cpufeature.h:144:
+#define X86_FEATURE_IBS		(6*32+10) /* Instruction Based Sampling */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13426: FILE: include/asm-x86/cpufeature.h:145:
+#define X86_FEATURE_SSE5	(6*32+11) /* SSE-5 */
                         	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13426: FILE: include/asm-x86/cpufeature.h:145:
+#define X86_FEATURE_SSE5	(6*32+11) /* SSE-5 */
                         	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13427: FILE: include/asm-x86/cpufeature.h:146:
+#define X86_FEATURE_SKINIT	(6*32+12) /* SKINIT/STGI instructions */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13427: FILE: include/asm-x86/cpufeature.h:146:
+#define X86_FEATURE_SKINIT	(6*32+12) /* SKINIT/STGI instructions */
                           	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13428: FILE: include/asm-x86/cpufeature.h:147:
+#define X86_FEATURE_WDT		(6*32+13) /* Watchdog timer */
                        		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#13428: FILE: include/asm-x86/cpufeature.h:147:
+#define X86_FEATURE_WDT		(6*32+13) /* Watchdog timer */
                        		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13437: FILE: include/asm-x86/cpufeature.h:156:
+#define X86_FEATURE_TPR_SHADOW  (8*32+ 0) /* Intel TPR Shadow */
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13437: FILE: include/asm-x86/cpufeature.h:156:
+#define X86_FEATURE_TPR_SHADOW  (8*32+ 0) /* Intel TPR Shadow */
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13438: FILE: include/asm-x86/cpufeature.h:157:
+#define X86_FEATURE_VNMI        (8*32+ 1) /* Intel Virtual NMI */
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13438: FILE: include/asm-x86/cpufeature.h:157:
+#define X86_FEATURE_VNMI        (8*32+ 1) /* Intel Virtual NMI */
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13439: FILE: include/asm-x86/cpufeature.h:158:
+#define X86_FEATURE_FLEXPRIORITY (8*32+ 2) /* Intel FlexPriority */
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13439: FILE: include/asm-x86/cpufeature.h:158:
+#define X86_FEATURE_FLEXPRIORITY (8*32+ 2) /* Intel FlexPriority */
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13440: FILE: include/asm-x86/cpufeature.h:159:
+#define X86_FEATURE_EPT         (8*32+ 3) /* Intel Extended Page Table */
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13440: FILE: include/asm-x86/cpufeature.h:159:
+#define X86_FEATURE_EPT         (8*32+ 3) /* Intel Extended Page Table */
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#13441: FILE: include/asm-x86/cpufeature.h:160:
+#define X86_FEATURE_VPID        (8*32+ 4) /* Intel Virtual Processor ID */
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#13441: FILE: include/asm-x86/cpufeature.h:160:
+#define X86_FEATURE_VPID        (8*32+ 4) /* Intel Virtual Processor ID */
                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13482: FILE: include/asm-x86/e820.h:125:
+extern void e820_reserve_resources_late(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13496: FILE: include/asm-x86/es7000/apic.h:1:
+#ifndef __ASM_ES7000_APIC_H

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#13536: FILE: include/asm-x86/es7000/apic.h:43:
+}
+static inline unsigned long check_apicid_present(int bit)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13600: FILE: include/asm-x86/es7000/apicdef.h:1:
+#ifndef __ASM_ES7000_APICDEF_H

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#13603: FILE: include/asm-x86/es7000/apicdef.h:4:
+#define		APIC_ID_MASK		(0xFF<<24)
        		            		     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#13605: FILE: include/asm-x86/es7000/apicdef.h:6:
+static inline unsigned get_apic_id(unsigned long x)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#13607: FILE: include/asm-x86/es7000/apicdef.h:8:
+	return (((x)>>24)&0xFF);
 	            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#13607: FILE: include/asm-x86/es7000/apicdef.h:8:
+	return (((x)>>24)&0xFF);
 	                 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13623: FILE: include/asm-x86/es7000/ipi.h:1:
+#ifndef __ASM_ES7000_IPI_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13644: FILE: include/asm-x86/es7000/mpparse.h:1:
+#ifndef __ASM_ES7000_MPPARSE_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13665: FILE: include/asm-x86/es7000/wakecpu.h:1:
+#ifndef __ASM_ES7000_WAKECPU_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13712: FILE: include/asm-x86/genapic_64.h:45:
+extern void apic_send_IPI_self(int vector);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13764: FILE: include/asm-x86/i387.h:42:
+extern int save_i387_xstate_ia32(void __user *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13765: FILE: include/asm-x86/i387.h:43:
+extern int restore_i387_xstate_ia32(void __user *buf);

CHECK:BIT_MACRO: Prefer using the BIT macro
#13768: FILE: include/asm-x86/i387.h:46:
+#define X87_FSW_ES (1 << 7)	/* Exception Summary */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13916: FILE: include/asm-x86/i387.h:262:
+extern int save_i387_xstate(void __user *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13917: FILE: include/asm-x86/i387.h:263:
+extern int restore_i387_xstate(void __user *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13929: FILE: include/asm-x86/i8259.h:60:
+extern void mask_8259A(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13930: FILE: include/asm-x86/i8259.h:61:
+extern void unmask_8259A(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#13953: FILE: include/asm-x86/io_apic.h:122:
+} __attribute__ ((packed));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13963: FILE: include/asm-x86/io_apic.h:201:
+extern int save_mask_IO_APIC_setup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13964: FILE: include/asm-x86/io_apic.h:202:
+extern void restore_IO_APIC_setup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#13965: FILE: include/asm-x86/io_apic.h:203:
+extern void reinit_intr_remapped_IO_APIC(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#13965: FILE: include/asm-x86/io_apic.h:203:
+extern void reinit_intr_remapped_IO_APIC(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14037: FILE: include/asm-x86/irq_remapping.h:1:
+#ifndef _ASM_IRQ_REMAPPING_H

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#14042: FILE: include/asm-x86/irq_remapping.h:6:
+#define IRTE_DEST(dest) ((x2apic) ? dest : dest << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#14180: FILE: include/asm-x86/msidef.h:51:
+#define MSI_ADDR_IR_EXT_INT		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#14181: FILE: include/asm-x86/msidef.h:52:
+#define MSI_ADDR_IR_SHV			(1 << 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'index' may be better as '(index)' to avoid precedence issues
#14182: FILE: include/asm-x86/msidef.h:53:
+#define MSI_ADDR_IR_INDEX1(index)	((index & 0x8000) >> 13)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'index' may be better as '(index)' to avoid precedence issues
#14183: FILE: include/asm-x86/msidef.h:54:
+#define MSI_ADDR_IR_INDEX2(index)	((index & 0x7fff) << 5)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14227: FILE: include/asm-x86/numaq/apic.h:1:
+#ifndef __ASM_NUMAQ_APIC_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14248: FILE: include/asm-x86/numaq/apicdef.h:1:
+#ifndef __ASM_NUMAQ_APICDEF_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14269: FILE: include/asm-x86/numaq/ipi.h:1:
+#ifndef __ASM_NUMAQ_IPI_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14286: FILE: include/asm-x86/numaq/mpparse.h:1:
+#ifndef __ASM_NUMAQ_MPPARSE_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#14289: FILE: include/asm-x86/numaq/mpparse.h:4:
+extern void numaq_mps_oem_check(struct mp_config_table *mpc, char *oem,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14303: FILE: include/asm-x86/numaq/wakecpu.h:1:
+#ifndef __ASM_NUMAQ_WAKECPU_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#14401: FILE: include/asm-x86/processor.h:169:
+extern void detect_extended_topology(struct cpuinfo_x86 *c);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#14431: FILE: include/asm-x86/processor.h:360:
+} __attribute__((packed));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#14437: FILE: include/asm-x86/processor.h:366:
+} __attribute__ ((packed, aligned (64)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#14437: FILE: include/asm-x86/processor.h:366:
+} __attribute__ ((packed, aligned (64)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(64) over __attribute__((aligned(64)))
#14437: FILE: include/asm-x86/processor.h:366:
+} __attribute__ ((packed, aligned (64)));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#14514: FILE: include/asm-x86/sigcontext.h:95:
+						   * state info */

WARNING:TYPO_SPELLING: 'defintion' may be misspelled - perhaps 'definition'?
#14529: FILE: include/asm-x86/sigcontext.h:127:
+	 * of extended memory layout. See comments at the defintion of
 	                                                  ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#14545: FILE: include/asm-x86/sigcontext.h:185:
+						   * state information */

WARNING:TYPO_SPELLING: 'defintion' may be misspelled - perhaps 'definition'?
#14560: FILE: include/asm-x86/sigcontext.h:222:
+	 * of extended memory layout. See comments at the defintion of
 	                                                  ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14662: FILE: include/asm-x86/summit/apic.h:1:
+#ifndef __ASM_SUMMIT_APIC_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14738: FILE: include/asm-x86/summit/apicdef.h:1:
+#ifndef __ASM_SUMMIT_APICDEF_H

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#14741: FILE: include/asm-x86/summit/apicdef.h:4:
+#define		APIC_ID_MASK		(0xFF<<24)
        		            		     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#14743: FILE: include/asm-x86/summit/apicdef.h:6:
+static inline unsigned get_apic_id(unsigned long x)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#14745: FILE: include/asm-x86/summit/apicdef.h:8:
+	return (x>>24)&0xFF;
 	         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#14745: FILE: include/asm-x86/summit/apicdef.h:8:
+	return (x>>24)&0xFF;
 	              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14761: FILE: include/asm-x86/summit/ipi.h:1:
+#ifndef __ASM_SUMMIT_IPI_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14782: FILE: include/asm-x86/summit/irq_vectors_limits.h:1:
+#ifndef _ASM_IRQ_VECTORS_LIMITS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14803: FILE: include/asm-x86/summit/mpparse.h:1:
+#ifndef __ASM_SUMMIT_MPPARSE_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#14816: FILE: include/asm-x86/summit/mpparse.h:15:
+static inline int mps_oem_check(struct mp_config_table *mpc, char *oem,
 		char *productid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#14821: FILE: include/asm-x86/summit/mpparse.h:18:
+	if (!strncmp(oem, "IBM ENSW", 8) &&
+			(!strncmp(productid, "VIGIL SMP", 9)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14866: FILE: include/asm-x86/xcr.h:1:
+/* -*- linux-c -*- ------------------------------------------------------- *

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#14874: FILE: include/asm-x86/xcr.h:9:
+ * ----------------------------------------------------------------------- */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14921: FILE: include/asm-x86/xsave.h:1:
+#ifndef __ASM_X86_XSAVE_H

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#14925: FILE: include/asm-x86/xsave.h:5:
+#include <asm/processor.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#14950: FILE: include/asm-x86/xsave.h:30:
+extern void xsave_cntxt_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#14951: FILE: include/asm-x86/xsave.h:31:
+extern void xsave_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#14952: FILE: include/asm-x86/xsave.h:32:
+extern int init_fpu(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#14953: FILE: include/asm-x86/xsave.h:33:
+extern int check_for_xstate(struct i387_fxsave_struct __user *buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#14978: FILE: include/asm-x86/xsave.h:58:
+	int err;
+	__asm__ __volatile__("1: .byte " REX_PREFIX "0x0f,0xae,0x27\n"

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#15033: FILE: include/asm-x86/xsave.h:113:
+	/* This, however, we can work around by forcing the compiler to select
+	   an addressing mode that doesn't require extended registers. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#15033: FILE: include/asm-x86/xsave.h:113:
+	   an addressing mode that doesn't require extended registers. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->thread.xstate->xsave
#15035: FILE: include/asm-x86/xsave.h:115:
+			     : : "D" (&(tsk->thread.xstate->xsave)),

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#15055: FILE: include/linux/dmar.h:35:
+^Istruct^Ipci_dev **devices; ^I/* target device array^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#15057: FILE: include/linux/dmar.h:37:
+^Iu8^Iignored:1; ^I^I/* ignore drhd^I^I*/$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15067: FILE: include/linux/dmar.h:47:
+extern int dmar_table_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15068: FILE: include/linux/dmar.h:48:
+extern int early_dmar_detect(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15069: FILE: include/linux/dmar.h:49:
+extern int dmar_dev_scope_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15072: FILE: include/linux/dmar.h:52:
+extern void detect_intel_iommu(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#15074: FILE: include/linux/dmar.h:54:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15075: FILE: include/linux/dmar.h:55:
+extern int parse_ioapics_under_ir(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15076: FILE: include/linux/dmar.h:56:
+extern int alloc_iommu(struct dmar_drhd_unit *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dmar_drhd_unit *' should also have an identifier name
#15076: FILE: include/linux/dmar.h:56:
+extern int alloc_iommu(struct dmar_drhd_unit *);

WARNING:RETURN_VOID: void function return statements are not generally useful
#15081: FILE: include/linux/dmar.h:61:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15091: FILE: include/linux/dmar.h:71:
+extern int enable_intr_remapping(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#15091: FILE: include/linux/dmar.h:71:
+extern int enable_intr_remapping(int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#15096: FILE: include/linux/dmar.h:76:
+^I^I^I__u64^Ipresent ^I: 1,$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#15121: FILE: include/linux/dmar.h:101:
+};
+extern int get_irte(int irq, struct irte *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15121: FILE: include/linux/dmar.h:101:
+extern int get_irte(int irq, struct irte *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15122: FILE: include/linux/dmar.h:102:
+extern int modify_irte(int irq, struct irte *irte_modified);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15123: FILE: include/linux/dmar.h:103:
+extern int alloc_irte(struct intel_iommu *iommu, int irq, u16 count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15124: FILE: include/linux/dmar.h:104:
+extern int set_irte_irq(int irq, struct intel_iommu *iommu, u16 index,

ERROR:CODE_INDENT: code indent should use tabs where possible
#15125: FILE: include/linux/dmar.h:105:
+   ^I^I^Iu16 sub_handle);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#15125: FILE: include/linux/dmar.h:105:
+   ^I^I^Iu16 sub_handle);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#15125: FILE: include/linux/dmar.h:105:
+extern int set_irte_irq(int irq, struct intel_iommu *iommu, u16 index,
+   			u16 sub_handle);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#15125: FILE: include/linux/dmar.h:105:
+   ^I^I^Iu16 sub_handle);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15126: FILE: include/linux/dmar.h:106:
+extern int map_irq_to_irte_handle(int irq, u16 *sub_handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15127: FILE: include/linux/dmar.h:107:
+extern int clear_irte_irq(int irq, struct intel_iommu *iommu, u16 index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15128: FILE: include/linux/dmar.h:108:
+extern int flush_irte(int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15129: FILE: include/linux/dmar.h:109:
+extern int free_irte(int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15131: FILE: include/linux/dmar.h:111:
+extern int irq_remapped(int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15132: FILE: include/linux/dmar.h:112:
+extern struct intel_iommu *map_dev_to_ir(struct pci_dev *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15133: FILE: include/linux/dmar.h:113:
+extern struct intel_iommu *map_ioapic_to_ir(int apic);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15183: FILE: include/linux/dmar.h:147:
+extern int intel_iommu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#15209: FILE: include/linux/ioport.h:111:
+extern void reserve_region_with_split(struct resource *root,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#15210: FILE: include/linux/ioport.h:112:
+extern void reserve_region_with_split(struct resource *root,
+			     resource_size_t start, resource_size_t end,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#15236: FILE: include/linux/percpu.h:27:
+#define DEFINE_PER_CPU_PAGE_ALIGNED(type, name)			\
+	__attribute__((__section__(".data.percpu.page_aligned")))	\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu.page_aligned") over __attribute__((__section__(".data.percpu.page_aligned")))
#15237: FILE: include/linux/percpu.h:28:
+	__attribute__((__section__(".data.percpu.page_aligned")))	\

CHECK:BRACES: braces {} should be used on all arms of this statement
#15260: FILE: kernel/irq/manage.c:92:
+	if (desc->status & IRQ_MOVE_PCNTXT) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#15266: FILE: kernel/irq/manage.c:98:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#15280: FILE: kernel/resource.c:520:
+static void __init __reserve_region_with_split(struct resource *root,
+		resource_size_t start, resource_size_t end,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#15312: FILE: kernel/resource.c:552:
+		printk(KERN_DEBUG "    __reserve_region_with_split: (%s) [%llx, %llx], res: (%s) [%llx, %llx]\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__reserve_region_with_split', this function's name, in a string
#15312: FILE: kernel/resource.c:552:
+		printk(KERN_DEBUG "    __reserve_region_with_split: (%s) [%llx, %llx], res: (%s) [%llx, %llx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#15313: FILE: kernel/resource.c:553:
+		printk(KERN_DEBUG "    __reserve_region_with_split: (%s) [%llx, %llx], res: (%s) [%llx, %llx]\n",
+			 conflict->name, conflict->start, conflict->end,

WARNING:TYPO_SPELLING: 'coverred' may be misspelled - perhaps 'covered'?
#15318: FILE: kernel/resource.c:558:
+		/* conflict coverred whole area */
 		            ^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#15323: FILE: kernel/resource.c:563:
+			__reserve_region_with_split(root, start, conflict->start-1, name);
 			                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#15333: FILE: kernel/resource.c:573:
+			__reserve_region_with_split(root, conflict->end+1, end, name);
 			                                               ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#15336: FILE: kernel/resource.c:576:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#15339: FILE: kernel/resource.c:579:
+void reserve_region_with_split(struct resource *root,
+		resource_size_t start, resource_size_t end,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218148.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 298 warnings, 432 checks, 12323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218148.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
