CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#42: FILE: fs/udf/balloc.c:430:
+	uint32_t elen;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#53: FILE: fs/udf/balloc.c:460:
+	epos.offset = oepos.offset = sizeof(struct unallocSpaceEntry);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceEntry>
#53: FILE: fs/udf/balloc.c:460:
+	epos.offset = oepos.offset = sizeof(struct unallocSpaceEntry);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#58: FILE: fs/udf/balloc.c:462:
+	epos.block = oepos.block = UDF_I_LOCATION(table);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#59: FILE: fs/udf/balloc.c:463:
+	epos.bh = oepos.bh = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#85: FILE: fs/udf/balloc.c:507:
+		if (epos.bh != oepos.bh)
[...]
+			udf_release_data(oepos.bh);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#131: FILE: fs/udf/balloc.c:563:
+			epos.block.logicalBlockNum = eloc.logicalBlockNum;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#137: FILE: fs/udf/balloc.c:567:
+			if (!(epos.bh = udf_tread(sb,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: fs/udf/balloc.c:568:
+			if (!(epos.bh = udf_tread(sb,
+				udf_get_lb_pblock(sb, epos.block, 0))))

CHECK:CAMELCASE: Avoid CamelCase: <allocExtDesc>
#147: FILE: fs/udf/balloc.c:573:
+			aed = (struct allocExtDesc *)(epos.bh->b_data);

CHECK:CAMELCASE: Avoid CamelCase: <previousAllocExtLocation>
#148: FILE: fs/udf/balloc.c:574:
+			aed->previousAllocExtLocation = cpu_to_le32(oepos.block.logicalBlockNum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: fs/udf/balloc.c:607:
+				udf_new_tag(epos.bh->b_data, TAG_IDENT_AED, 3, 1,
+					epos.block.logicalBlockNum, sizeof(tag));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: fs/udf/balloc.c:610:
+				udf_new_tag(epos.bh->b_data, TAG_IDENT_AED, 2, 1,
+					epos.block.logicalBlockNum, sizeof(tag));

CHECK:CAMELCASE: Avoid CamelCase: <extPosition>
#203: FILE: fs/udf/balloc.c:619:
+					sad->extPosition = cpu_to_le32(epos.block.logicalBlockNum);

CHECK:CAMELCASE: Avoid CamelCase: <extLocation>
#212: FILE: fs/udf/balloc.c:628:
+					lad->extLocation = cpu_to_lelb(epos.block);

CHECK:BRACES: braces {} should be used on all arms of this statement
#217: FILE: fs/udf/balloc.c:632:
+			if (oepos.bh)
[...]
+				mark_buffer_dirty(oepos.bh);
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#267: FILE: fs/udf/balloc.c:677:
+	uint32_t elen, adsize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#327: FILE: fs/udf/balloc.c:746:
+	uint32_t elen, goal_elen = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#344: FILE: fs/udf/balloc.c:771:
+	epos.bh = goal_epos.bh = NULL;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#419: FILE: fs/udf/dir.c:116:
+	uint32_t elen;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: fs/udf/inode.c:55:
+static int8_t udf_insert_aext(struct inode *, struct extent_position,
+	kernel_lb_addr, uint32_t);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#595: FILE: fs/udf/inode.c:199:
+	uint32_t elen;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#606: FILE: fs/udf/inode.c:241:
+	sfibh.sbh = sfibh.ebh = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#663: FILE: fs/udf/inode.c:379:
+	cur_epos = next_epos = prev_epos;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#706: FILE: fs/udf/inode.c:408:
+		if ((etype = udf_next_aext(inode, &next_epos, &eloc, &elen, 1)) == -1)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#731: FILE: fs/udf/inode.c:484:
+		if ((etype = udf_next_aext(inode, &next_epos, &eloc, &elen, 0)) != -1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: fs/udf/inode.c:813:
+			udf_delete_aext(inode, *epos, laarr[i].extLocation,
+				laarr[i].extLength);

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#785: FILE: fs/udf/inode.c:813:
+				laarr[i].extLength);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: fs/udf/inode.c:820:
+			udf_insert_aext(inode, *epos, laarr[i].extLocation,
+				laarr[i].extLength);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: fs/udf/inode.c:822:
+			udf_next_aext(inode, epos, &laarr[i].extLocation,
+				&laarr[i].extLength, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: fs/udf/inode.c:831:
+		udf_write_aext(inode, epos, laarr[i].extLocation,
+			laarr[i].extLength, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: fs/udf/inode.c:1563:
+int8_t udf_add_aext(struct inode *inode, struct extent_position *epos,
+	kernel_lb_addr eloc, uint32_t elen, int inc)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#832: FILE: fs/udf/inode.c:1573:
+		ptr = UDF_I_DATA(inode) + epos->offset - udf_file_entry_alloc_offset(inode) + UDF_I_LENEATTR(inode);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#853: FILE: fs/udf/inode.c:1591:
+		if (!(epos->block.logicalBlockNum = udf_new_block(inode->i_sb, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: fs/udf/inode.c:1592:
+		if (!(epos->block.logicalBlockNum = udf_new_block(inode->i_sb, NULL,
 			obloc.partitionReferenceNum, obloc.logicalBlockNum, &err)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#930: FILE: fs/udf/inode.c:1666:
+		if (epos->bh)
[...]
+				udf_update_tag(epos->bh->b_data, sizeof(struct allocExtDesc));
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: fs/udf/inode.c:1703:
+int8_t udf_write_aext(struct inode *inode, struct extent_position *epos,
+    kernel_lb_addr eloc, uint32_t elen, int inc)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: fs/udf/inode.c:1703:
+    kernel_lb_addr eloc, uint32_t elen, int inc)$

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#988: FILE: fs/udf/inode.c:1709:
+		ptr = UDF_I_DATA(inode) + epos->offset - udf_file_entry_alloc_offset(inode) + UDF_I_LENEATTR(inode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1003: FILE: fs/udf/inode.c:1736:
+	if (epos->bh)
[...]
-		mark_buffer_dirty_inode(bh, inode);
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1010: FILE: fs/udf/inode.c:1741:
+			struct allocExtDesc *aed = (struct allocExtDesc *)epos->bh->b_data;
+			udf_update_tag(epos->bh->b_data,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1011: FILE: fs/udf/inode.c:1742:
+			udf_update_tag(epos->bh->b_data,
 				le32_to_cpu(aed->lengthAllocDescs) + sizeof(struct allocExtDesc));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1029: FILE: fs/udf/inode.c:1755:
+int8_t udf_next_aext(struct inode *inode, struct extent_position *epos,
+	kernel_lb_addr *eloc, uint32_t *elen, int inc)

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1044: FILE: fs/udf/inode.c:1765:
+		if (!(epos->bh = udf_tread(inode->i_sb, udf_get_lb_pblock(inode->i_sb, epos->block, 0))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1044: FILE: fs/udf/inode.c:1765:
+		if (!(epos->bh = udf_tread(inode->i_sb, udf_get_lb_pblock(inode->i_sb, epos->block, 0))))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: fs/udf/inode.c:1777:
+int8_t udf_current_aext(struct inode *inode, struct extent_position *epos,
+	kernel_lb_addr *eloc, uint32_t *elen, int inc)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1073: FILE: fs/udf/inode.c:1787:
+		ptr = UDF_I_DATA(inode) + epos->offset - udf_file_entry_alloc_offset(inode) + UDF_I_LENEATTR(inode);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1085: FILE: fs/udf/inode.c:1795:
+		alen = sizeof(struct allocExtDesc) + le32_to_cpu(((struct allocExtDesc *)epos->bh->b_data)->lengthAllocDescs);

CHECK:CAMELCASE: Avoid CamelCase: <lengthAllocDescs>
#1085: FILE: fs/udf/inode.c:1795:
+		alen = sizeof(struct allocExtDesc) + le32_to_cpu(((struct allocExtDesc *)epos->bh->b_data)->lengthAllocDescs);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1094: FILE: fs/udf/inode.c:1804:
+			if (!(sad = udf_get_fileshortad(ptr, alen, &epos->offset, inc)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1103: FILE: fs/udf/inode.c:1817:
+			if (!(lad = udf_get_filelongad(ptr, alen, &epos->offset, inc)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: fs/udf/inode.c:1859:
+int8_t udf_delete_aext(struct inode *inode, struct extent_position epos,
+	kernel_lb_addr eloc, uint32_t elen)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1223: FILE: fs/udf/inode.c:1914:
+				udf_update_tag(oepos.bh->b_data, oepos.offset - (2*adsize));
 				                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1268: FILE: fs/udf/inode.c:1947:
+int8_t inode_bmap(struct inode *inode, sector_t block, struct extent_position *pos,
+	kernel_lb_addr *eloc, uint32_t *elen, sector_t *offset)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1286: FILE: fs/udf/inode.c:1965:
+		if ((etype = udf_next_aext(inode, pos, eloc, elen, 1)) == -1)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1297: FILE: fs/udf/inode.c:1982:
+	uint32_t elen;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1306: FILE: fs/udf/inode.c:1989:
+	if (inode_bmap(inode, block, &epos, &eloc, &elen, &offset) == (EXT_RECORDED_ALLOCATED >> 30))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1327: FILE: fs/udf/namei.c:159:
+	uint32_t elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1408: FILE: fs/udf/namei.c:357:
+	uint32_t elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1550: FILE: fs/udf/namei.c:785:
+	uint32_t elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1641: FILE: fs/udf/namei.c:965:
+		uint32_t elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1699: FILE: fs/udf/super.c:1888:
+	uint32_t elen;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1732: FILE: fs/udf/truncate.c:31:
+static void extent_trunc(struct inode * inode, struct extent_position *epos,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1733: FILE: fs/udf/truncate.c:32:
+static void extent_trunc(struct inode * inode, struct extent_position *epos,
+	kernel_lb_addr eloc, int8_t etype, uint32_t elen, uint32_t nelen)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1754: FILE: fs/udf/truncate.c:68:
+	uint32_t elen, nelen;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1768: FILE: fs/udf/truncate.c:78:
+^I^Iadsize = sizeof(short_ad); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1813: FILE: fs/udf/truncate.c:112:
+			aed->lengthAllocDescs = cpu_to_le32(epos.offset - sizeof(struct allocExtDesc));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1813: FILE: fs/udf/truncate.c:112:
+			struct allocExtDesc *aed = (struct allocExtDesc *)(epos.bh->b_data);
+			aed->lengthAllocDescs = cpu_to_le32(epos.offset - sizeof(struct allocExtDesc));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1836: FILE: fs/udf/truncate.c:129:
+	uint32_t elen, nelen = 0, indirect_ext_len = 0, lenalloc;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1849: FILE: fs/udf/truncate.c:140:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1889: FILE: fs/udf/truncate.c:167:
+					 * indirect extent - free it too */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1895: FILE: fs/udf/truncate.c:170:
+					udf_free_blocks(inode->i_sb, inode, epos.block, 0, indirect_ext_len);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1908: FILE: fs/udf/truncate.c:181:
+						struct allocExtDesc *aed = (struct allocExtDesc *)(epos.bh->b_data);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1917: FILE: fs/udf/truncate.c:187:
+							udf_update_tag(epos.bh->b_data, sizeof(struct allocExtDesc));

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1929: FILE: fs/udf/truncate.c:194:
+				epos.bh = udf_tread(inode->i_sb, udf_get_lb_pblock(inode->i_sb, eloc, 0));

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1979: FILE: fs/udf/truncate.c:230:
+					udf_update_tag(epos.bh->b_data, sizeof(struct allocExtDesc));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2059: FILE: fs/udf/udfdecl.h:82:
+	uint32_t offset;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2063: FILE: fs/udf/udfdecl.h:86:
+
+

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct extent_position *' should also have an identifier name
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t *' should also have an identifier name
#2077: FILE: fs/udf/udfdecl.h:109:
+extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2078: FILE: fs/udf/udfdecl.h:110:
+extern int8_t udf_add_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2078: FILE: fs/udf/udfdecl.h:110:
+extern int8_t udf_add_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct extent_position *' should also have an identifier name
#2078: FILE: fs/udf/udfdecl.h:110:
+extern int8_t udf_add_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr' should also have an identifier name
#2078: FILE: fs/udf/udfdecl.h:110:
+extern int8_t udf_add_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t' should also have an identifier name
#2078: FILE: fs/udf/udfdecl.h:110:
+extern int8_t udf_add_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2078: FILE: fs/udf/udfdecl.h:110:
+extern int8_t udf_add_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2079: FILE: fs/udf/udfdecl.h:111:
+extern int8_t udf_write_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2079: FILE: fs/udf/udfdecl.h:111:
+extern int8_t udf_write_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2079: FILE: fs/udf/udfdecl.h:111:
+extern int8_t udf_write_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct extent_position *' should also have an identifier name
#2079: FILE: fs/udf/udfdecl.h:111:
+extern int8_t udf_write_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr' should also have an identifier name
#2079: FILE: fs/udf/udfdecl.h:111:
+extern int8_t udf_write_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t' should also have an identifier name
#2079: FILE: fs/udf/udfdecl.h:111:
+extern int8_t udf_write_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2079: FILE: fs/udf/udfdecl.h:111:
+extern int8_t udf_write_aext(struct inode *, struct extent_position *, kernel_lb_addr, uint32_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2080: FILE: fs/udf/udfdecl.h:112:
+extern int8_t udf_delete_aext(struct inode *, struct extent_position, kernel_lb_addr, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2080: FILE: fs/udf/udfdecl.h:112:
+extern int8_t udf_delete_aext(struct inode *, struct extent_position, kernel_lb_addr, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct extent_position' should also have an identifier name
#2080: FILE: fs/udf/udfdecl.h:112:
+extern int8_t udf_delete_aext(struct inode *, struct extent_position, kernel_lb_addr, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr' should also have an identifier name
#2080: FILE: fs/udf/udfdecl.h:112:
+extern int8_t udf_delete_aext(struct inode *, struct extent_position, kernel_lb_addr, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t' should also have an identifier name
#2080: FILE: fs/udf/udfdecl.h:112:
+extern int8_t udf_delete_aext(struct inode *, struct extent_position, kernel_lb_addr, uint32_t);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2081: FILE: fs/udf/udfdecl.h:113:
+extern int8_t udf_next_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2081: FILE: fs/udf/udfdecl.h:113:
+extern int8_t udf_next_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2081: FILE: fs/udf/udfdecl.h:113:
+extern int8_t udf_next_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct extent_position *' should also have an identifier name
#2081: FILE: fs/udf/udfdecl.h:113:
+extern int8_t udf_next_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#2081: FILE: fs/udf/udfdecl.h:113:
+extern int8_t udf_next_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#2081: FILE: fs/udf/udfdecl.h:113:
+extern int8_t udf_next_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2081: FILE: fs/udf/udfdecl.h:113:
+extern int8_t udf_next_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#2082: FILE: fs/udf/udfdecl.h:114:
+extern int8_t udf_current_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2082: FILE: fs/udf/udfdecl.h:114:
+extern int8_t udf_current_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2082: FILE: fs/udf/udfdecl.h:114:
+extern int8_t udf_current_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct extent_position *' should also have an identifier name
#2082: FILE: fs/udf/udfdecl.h:114:
+extern int8_t udf_current_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#2082: FILE: fs/udf/udfdecl.h:114:
+extern int8_t udf_current_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#2082: FILE: fs/udf/udfdecl.h:114:
+extern int8_t udf_current_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2082: FILE: fs/udf/udfdecl.h:114:
+extern int8_t udf_current_aext(struct inode *, struct extent_position *, kernel_lb_addr *, uint32_t *, int);

WARNING:LONG_LINE: line length of 194 exceeds 100 columns
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

CHECK:CAMELCASE: Avoid CamelCase: <fileIdentDesc>
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct udf_fileident_bh *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fileIdentDesc *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct extent_position *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t *' should also have an identifier name
#2091: FILE: fs/udf/udfdecl.h:161:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, struct extent_position *, kernel_lb_addr *, uint32_t *, sector_t *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459942.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 60 warnings, 59 checks, 1953 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459942.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
