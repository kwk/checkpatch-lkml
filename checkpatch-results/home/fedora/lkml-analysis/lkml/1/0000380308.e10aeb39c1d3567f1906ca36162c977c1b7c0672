WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: drivers/kvm/i8259.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: drivers/kvm/i8259.c:37:
+	int mask;
+	mask = 1 << irq;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#99: FILE: drivers/kvm/i8259.c:38:
+	if (s->elcr & mask)	/* level triggered */
[...]
+		} else {
[...]
+	else	/* edge triggered */
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#100: FILE: drivers/kvm/i8259.c:39:
+		if (level) {
[...]
+		} else {
[...]
+	else	/* edge triggered */
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#108: FILE: drivers/kvm/i8259.c:47:
+		if (level) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#112: FILE: drivers/kvm/i8259.c:51:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#123: FILE: drivers/kvm/i8259.c:62:
+	int priority;
+	if (mask == 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#196: FILE: drivers/kvm/i8259.c:135:
+	if (s->auto_eoi) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#199: FILE: drivers/kvm/i8259.c:138:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#215: FILE: drivers/kvm/i8259.c:154:
+		if (irq == 2) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#226: FILE: drivers/kvm/i8259.c:165:
+		} else

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 's->pics_state->irq_request_opaque'
#273: FILE: drivers/kvm/i8259.c:212:
+			s->pics_state->irq_request(s->pics_state->
+						   irq_request_opaque, 0);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#277: FILE: drivers/kvm/i8259.c:216:
+				printk(KERN_ERR "single mode not supported");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#279: FILE: drivers/kvm/i8259.c:218:
+				printk(KERN_ERR

CHECK:BRACES: Unbalanced braces around else statement
#325: FILE: drivers/kvm/i8259.c:264:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#379: FILE: drivers/kvm/i8259.c:318:
+	if (s->poll) {
[...]
+	} else
[...]
+			else
[...]
+		else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#382: FILE: drivers/kvm/i8259.c:321:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#396: FILE: drivers/kvm/i8259.c:335:
+	struct kvm_kpic_state *s = opaque;
+	s->elcr = val & s->elcr_mask;

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: drivers/kvm/i8259.c:341:
+	struct kvm_kpic_state *s = opaque;
+	return s->elcr;

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#427: FILE: drivers/kvm/i8259.c:366:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#428: FILE: drivers/kvm/i8259.c:367:
+			printk(KERN_ERR "PIC: non byte write\n");

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#452: FILE: drivers/kvm/i8259.c:391:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#453: FILE: drivers/kvm/i8259.c:392:
+			printk(KERN_ERR "PIC: non byte read\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#484: FILE: drivers/kvm/i8259.c:423:
+	struct kvm_pic *s;
+	s = kzalloc(sizeof(struct kvm_pic), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*s)...) over kzalloc(sizeof(struct kvm_pic)...)
#484: FILE: drivers/kvm/i8259.c:423:
+	s = kzalloc(sizeof(struct kvm_pic), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#510: FILE: drivers/kvm/irq.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#524: FILE: drivers/kvm/irq.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'intack' may be misspelled - perhaps 'intact'?
#538: FILE: drivers/kvm/irq.c:29:
+ * intack.
    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'intack' may be misspelled - perhaps 'intact'?
#554: FILE: drivers/kvm/irq.c:45:
+ * Read pending interrupt vector and intack.
                                      ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#577: FILE: drivers/kvm/irq.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#591: FILE: drivers/kvm/irq.h:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: drivers/kvm/kvm_main.c:1264:
+	if (vcpu->irq_summary ||
+		(irqchip_in_kernel(vcpu->kvm) && kvm_cpu_has_interrupt(vcpu)))

WARNING:SIZEOF_PARENTHESIS: sizeof irq_event should be sizeof(irq_event)
#711: FILE: drivers/kvm/kvm_main.c:2733:
+		if (copy_from_user(&irq_event, argp, sizeof irq_event))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: drivers/kvm/kvm_main.c:2738:
+				kvm_pic_set_irq(pic_irqchip(kvm),
+					irq_event.irq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: drivers/kvm/svm.c:926:
+	if (!irqchip_in_kernel(kvm) &&
+		is_external_interrupt(exit_int_info))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: drivers/kvm/vmx.c:1593:
+	vmcs_write32(VM_ENTRY_INTR_INFO_FIELD,
+			irq | INTR_TYPE_EXT_INTR | INTR_INFO_VALID_MASK);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#982: FILE: drivers/kvm/vmx.c:2086:
+			printk(KERN_ERR "Fault when IDT_Vectoring\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: drivers/kvm/vmx.c:2095:
+		vmcs_write32(VM_ENTRY_INSTRUCTION_LEN,
+				vmcs_read32(VM_EXIT_INSTRUCTION_LEN));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: drivers/kvm/vmx.c:2099:
+			vmcs_write32(VM_ENTRY_EXCEPTION_ERROR_CODE,
+				vmcs_read32(IDT_VECTORING_ERROR_CODE));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380308.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 20 warnings, 18 checks, 959 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380308.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
