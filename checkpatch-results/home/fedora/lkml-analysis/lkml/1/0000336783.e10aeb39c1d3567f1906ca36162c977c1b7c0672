WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
test code. This patch maps and unmaps some random pages in the direct mapping

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: arch/x86/mm/pageattr-test.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#67: FILE: arch/x86/mm/pageattr-test.c:13:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#68: FILE: arch/x86/mm/pageattr-test.c:14:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#69: FILE: arch/x86/mm/pageattr-test.c:15:
+#include <asm/kdebug.h>

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#83: FILE: arch/x86/mm/pageattr-test.c:29:
+	GPS = (1<<30)
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#104: FILE: arch/x86/mm/pageattr-test.c:50:
+	s->lpg = s->gpg = s->spg = s->exec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#116: FILE: arch/x86/mm/pageattr-test.c:62:
+				printk("CPA %lx no pte level %d\n", adr, level);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#126: FILE: arch/x86/mm/pageattr-test.c:72:
+			i += GPS/PAGE_SIZE;
 			        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#129: FILE: arch/x86/mm/pageattr-test.c:75:
+				printk("%lx level %d but not PSE %Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#129: FILE: arch/x86/mm/pageattr-test.c:75:
+				printk("%lx level %d but not PSE %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: arch/x86/mm/pageattr-test.c:76:
+				printk("%lx level %d but not PSE %Lx\n",
+					adr, level, (u64)pte_val(*pte));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#134: FILE: arch/x86/mm/pageattr-test.c:80:
+			i += LPS/PAGE_SIZE;
 			        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#147: FILE: arch/x86/mm/pageattr-test.c:93:
+	printk("CPA mapping 4k %lu large %lu gb %lu x %lu[%lx-%lx] miss %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: arch/x86/mm/pageattr-test.c:94:
+	printk("CPA mapping 4k %lu large %lu gb %lu x %lu[%lx-%lx] miss %lu\n",
+		s->spg, s->lpg, s->gpg, s->exec,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: arch/x86/mm/pageattr-test.c:96:
+	expected = (s->gpg*GPS + s->lpg*LPS)/PAGE_SIZE + s->spg + missed;
 	                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: arch/x86/mm/pageattr-test.c:96:
+	expected = (s->gpg*GPS + s->lpg*LPS)/PAGE_SIZE + s->spg + missed;
 	                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#150: FILE: arch/x86/mm/pageattr-test.c:96:
+	expected = (s->gpg*GPS + s->lpg*LPS)/PAGE_SIZE + s->spg + missed;
 	                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#152: FILE: arch/x86/mm/pageattr-test.c:98:
+		printk("CPA max_mapped %lu but expected %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: arch/x86/mm/pageattr-test.c:99:
+		printk("CPA max_mapped %lu but expected %lu\n",
+			max_mapped, expected);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: arch/x86/mm/pageattr-test.c:112:
+static unsigned len[NTEST] __initdata;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/x86/mm/pageattr-test.c:125:
+	printk("CPA exercising pageattr\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#183: FILE: arch/x86/mm/pageattr-test.c:129:
+		printk("CPA Cannot vmalloc bitmap\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#183: FILE: arch/x86/mm/pageattr-test.c:129:
+	if (!bm) {
+		printk("CPA Cannot vmalloc bitmap\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#192: FILE: arch/x86/mm/pageattr-test.c:138:
+		unsigned long pfn = random32() % max_mapped;
+		addr[i] = (unsigned long)__va(pfn << PAGE_SHIFT);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#201: FILE: arch/x86/mm/pageattr-test.c:147:
+			pte = lookup_address(addr[i] + k*PAGE_SIZE, &level);
 			                                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#206: FILE: arch/x86/mm/pageattr-test.c:152:
+			if (k == 0)
[...]
+			else if (pgprot_val(pte_pgprot(*pte)) !=
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: arch/x86/mm/pageattr-test.c:171:
+		err = change_page_attr(virt_to_page(addr[i]), len[i],
+			    pte_pgprot(pte_clrhuge(pte_clrglobal(pte0))));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#227: FILE: arch/x86/mm/pageattr-test.c:173:
+			printk("CPA %d failed %d\n", i, err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: arch/x86/mm/pageattr-test.c:179:
+			printk("CPA %lx: bad pte %Lx\n", addr[i],

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#233: FILE: arch/x86/mm/pageattr-test.c:179:
+			printk("CPA %lx: bad pte %Lx\n", addr[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: arch/x86/mm/pageattr-test.c:180:
+			printk("CPA %lx: bad pte %Lx\n", addr[i],
+				pte ? (u64)pte_val(*pte) : 0ULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#238: FILE: arch/x86/mm/pageattr-test.c:184:
+			printk("CPA %lx: unexpected level %d\n", addr[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: arch/x86/mm/pageattr-test.c:185:
+			printk("CPA %lx: unexpected level %d\n", addr[i],
+					level);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#243: FILE: arch/x86/mm/pageattr-test.c:189:
+
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: arch/x86/mm/pageattr-test.c:195:
+	printk("CPA reverting everything\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: arch/x86/mm/pageattr-test.c:201:
+			printk("CPA lookup of %lx failed\n", addr[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: arch/x86/mm/pageattr-test.c:206:
+		err = change_page_attr(virt_to_page(addr[i]), len[i],
+					  pte_pgprot(pte_mkglobal(*pte)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: arch/x86/mm/pageattr-test.c:208:
+			printk("CPA reverting failed: %d\n", err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#267: FILE: arch/x86/mm/pageattr-test.c:213:
+			printk("CPA %lx: bad pte after revert %Lx\n", addr[i],

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#267: FILE: arch/x86/mm/pageattr-test.c:213:
+			printk("CPA %lx: bad pte after revert %Lx\n", addr[i],

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#272: FILE: arch/x86/mm/pageattr-test.c:218:
+
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#280: FILE: arch/x86/mm/pageattr-test.c:226:
+		printk("CPA selftests NOT PASSED. Please report.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: arch/x86/mm/pageattr-test.c:228:
+		printk("CPA selftests PASSED\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336783.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 21 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336783.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
