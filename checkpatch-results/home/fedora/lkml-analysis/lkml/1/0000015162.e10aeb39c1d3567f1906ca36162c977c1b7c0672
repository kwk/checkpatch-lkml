WARNING:TYPO_SPELLING: 'vertification' may be misspelled - perhaps 'verification'?
#36: 
mtd driver must have support proper ECC and badblock vertification
                                                     ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'EXPERMENTAL' may be misspelled - perhaps 'EXPERIMENTAL'?
#66: FILE: drivers/mtd/Kconfig:313:
+	  This enables new and very EXPERMENTAL support for SmartMedia/xD
 	                            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'tanslation' may be misspelled - perhaps 'translation'?
#67: FILE: drivers/mtd/Kconfig:314:
+	  FTL (Flash tanslation layer)
 	             ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'caluculated' may be misspelled - perhaps 'calculated'?
#77: FILE: drivers/mtd/Kconfig:324:
+	  Very old SmartMedia cards need ECC to be caluculated in the FTL
 	                                           ^^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#97: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: drivers/mtd/sm_ftl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#126: FILE: drivers/mtd/sm_ftl.c:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#130: FILE: drivers/mtd/sm_ftl.c:29:
+module_param(cache_timeout, bool, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: drivers/mtd/sm_ftl.c:40:
+ssize_t sm_attr_show(struct device *dev, struct device_attribute *attr,
+			char *buf)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: drivers/mtd/sm_ftl.c:49:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: drivers/mtd/sm_ftl.c:62:
+	char *vendor = kmalloc(vendor_len, GFP_KERNEL);
+	memcpy(vendor, ftl->cis_buffer + SM_CIS_VENDOR_OFFSET, vendor_len);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#173: FILE: drivers/mtd/sm_ftl.c:72:
+	vendor_attribute->dev_attr.attr.mode = S_IRUGO;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: drivers/mtd/sm_ftl.c:75:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/mtd/sm_ftl.c:78:
+	attributes = kzalloc(sizeof(struct attribute *) * (NUM_ATTRIBUTES + 1),
+								GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*attr_group)...) over kzalloc(sizeof(struct attribute_group)...)
#183: FILE: drivers/mtd/sm_ftl.c:82:
+	attr_group = kzalloc(sizeof(struct attribute_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#194: FILE: drivers/mtd/sm_ftl.c:93:
+	for (i = 0; attributes[i] ; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/mtd/sm_ftl.c:99:
+			container_of(dev_attr,
+				struct sm_sysfs_attribute, dev_attr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#210: FILE: drivers/mtd/sm_ftl.c:109:
+
+

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#219: FILE: drivers/mtd/sm_ftl.c:118:
+	/* check parity - endianess doesn't matter */
 	                  ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: drivers/mtd/sm_ftl.c:125:
+
+

WARNING:TYPO_SPELLING: 'asscociated' may be misspelled - perhaps 'associated'?
#228: FILE: drivers/mtd/sm_ftl.c:127:
+ * Read LBA asscociated with block
             ^^^^^^^^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#245: FILE: drivers/mtd/sm_ftl.c:144:
+	lba_test = *(u16 *)oob->lba_copy1 ^ *(u16*)oob->lba_copy2;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#270: FILE: drivers/mtd/sm_ftl.c:169:
+	oob->lba_copy1[0] = oob->lba_copy2[0] = tmp[0];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#271: FILE: drivers/mtd/sm_ftl.c:170:
+	oob->lba_copy1[1] = oob->lba_copy2[1] = tmp[1];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#274: FILE: drivers/mtd/sm_ftl.c:173:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/mtd/sm_ftl.c:190:
+static void sm_break_offset(struct sm_ftl *ftl, loff_t offset,
+					int *zone, int *block, int *boffset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: drivers/mtd/sm_ftl.c:221:
+static int sm_read_sector(struct sm_ftl *ftl,
+			int zone, int block, int boffset,

WARNING:TYPO_SPELLING: 'vertification' may be misspelled - perhaps 'verification'?
#337: FILE: drivers/mtd/sm_ftl.c:236:
+	/* User might not need the oob, but we do for data vertification */
 	                                                   ^^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#352: FILE: drivers/mtd/sm_ftl.c:251:
+		/* Avoid infinite recursion on CIS reads, sm_recheck_media
+			won't help anyway */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#352: FILE: drivers/mtd/sm_ftl.c:251:
+			won't help anyway */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#362: FILE: drivers/mtd/sm_ftl.c:261:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#364: FILE: drivers/mtd/sm_ftl.c:263:
+	/* Unfortunelly, oob read will _always_ succeed,
+		despite card removal..... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#364: FILE: drivers/mtd/sm_ftl.c:263:
+		despite card removal..... */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/mtd/sm_ftl.c:269:
+		dbg("read of block %d at zone %d, failed due to error (%d)",
+			block, zone, ret);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#388: FILE: drivers/mtd/sm_ftl.c:287:
+			" as bad" , block, zone);
 			          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#388: FILE: drivers/mtd/sm_ftl.c:287:
+		dbg("read of block %d at zone %d, failed because it is marked"
+			" as bad" , block, zone);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: drivers/mtd/sm_ftl.c:293:
+	if (ret == -EBADMSG ||
+		(ftl->smallpagenand && sm_correct_sector(buffer, oob))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#395: FILE: drivers/mtd/sm_ftl.c:294:
+		(ftl->smallpagenand && sm_correct_sector(buffer, oob))) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: drivers/mtd/sm_ftl.c:296:
+		dbg("read of block %d at zone %d, failed due to ECC error",
+			block, zone);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: drivers/mtd/sm_ftl.c:305:
+static int sm_write_sector(struct sm_ftl *ftl,
+			int zone, int block, int boffset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: drivers/mtd/sm_ftl.c:312:
+	BUG_ON(ftl->readonly);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: drivers/mtd/sm_ftl.c:336:
+		dbg("write to block %d at zone %d, failed with error %d",
+			block, zone, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: drivers/mtd/sm_ftl.c:353:
+static int sm_write_block(struct sm_ftl *ftl, u8 *buf,
+				int zone, int block, int lba,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#470: FILE: drivers/mtd/sm_ftl.c:369:
+				boffset += SM_SECTOR_SIZE) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#474: FILE: drivers/mtd/sm_ftl.c:373:
+		if (test_bit(boffset / SM_SECTOR_SIZE, &invalid_bitmap)) {
+

WARNING:TYPO_SPELLING: 'coudn't' may be misspelled - perhaps 'couldn't'?
#476: FILE: drivers/mtd/sm_ftl.c:375:
+				" coudn't be read, marking it as invalid",
 				  ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#476: FILE: drivers/mtd/sm_ftl.c:375:
+			sm_printk("sector %d of block at LBA %d of zone %d"
+				" coudn't be read, marking it as invalid",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: drivers/mtd/sm_ftl.c:384:
+			__nand_calculate_ecc(buf + boffset,
+						SM_SMALL_PAGE, oob.ecc1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: drivers/mtd/sm_ftl.c:387:
+			__nand_calculate_ecc(buf + boffset + SM_SMALL_PAGE,
+						SM_SMALL_PAGE, oob.ecc2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: drivers/mtd/sm_ftl.c:391:
+		if (!sm_write_sector(ftl, zone, block, boffset,
+							buf + boffset, &oob))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#496: FILE: drivers/mtd/sm_ftl.c:395:
+		if (!retry) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#499: FILE: drivers/mtd/sm_ftl.c:398:
+			/* This is safe, because we never write in blocks
+				that contain valuable data.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: drivers/mtd/sm_ftl.c:400:
+			as erased, but that isn't fully erased*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#516: FILE: drivers/mtd/sm_ftl.c:415:
+
+

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#536: FILE: drivers/mtd/sm_ftl.c:435:
+		any bad blocks till fail completly */
 		                         ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#536: FILE: drivers/mtd/sm_ftl.c:435:
+	/* This also fails on fake xD cards, but I guess these won't expose
+		any bad blocks till fail completly */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#536: FILE: drivers/mtd/sm_ftl.c:435:
+		any bad blocks till fail completly */

WARNING:TYPO_SPELLING: 'succedes' may be misspelled - perhaps 'succeeds'?
#543: FILE: drivers/mtd/sm_ftl.c:442:
+ * If erase succedes, it updates free block fifo, otherwise marks block as bad
             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: drivers/mtd/sm_ftl.c:445:
+static int sm_erase_block(struct sm_ftl *ftl, int zone_num, u16 block,
+								int put_free)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#561: FILE: drivers/mtd/sm_ftl.c:460:
+	BUG_ON(ftl->readonly);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: drivers/mtd/sm_ftl.c:469:
+		sm_printk("erase of block %d in zone %d failed",
+							block, zone_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: drivers/mtd/sm_ftl.c:478:
+		sm_printk("erase of block %d in zone %d failed after wait",
+			block, zone_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: drivers/mtd/sm_ftl.c:484:
+		kfifo_in(&zone->free_sectors,
+			(const unsigned char *)&block, sizeof(block));

WARNING:LINE_SPACING: Missing a blank line after declarations
#596: FILE: drivers/mtd/sm_ftl.c:495:
+	struct sm_ftl *ftl = (struct sm_ftl *)self->priv;
+	complete(&ftl->erase_completion);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#608: FILE: drivers/mtd/sm_ftl.c:507:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#611: FILE: drivers/mtd/sm_ftl.c:510:
+	/* Only blocks that are valid or are sliced in two parts, are
+		accepted */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#611: FILE: drivers/mtd/sm_ftl.c:510:
+		accepted */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#614: FILE: drivers/mtd/sm_ftl.c:513:
+					boffset += SM_SECTOR_SIZE) {
+

WARNING:TYPO_SPELLING: 'shoudn't' may be misspelled - perhaps 'shouldn't'?
#615: FILE: drivers/mtd/sm_ftl.c:514:
+		/* This shoudn't happen anyway */
 		        ^^^^^^^^

WARNING:TYPO_SPELLING: 'partialy' may be misspelled - perhaps 'partially'?
#629: FILE: drivers/mtd/sm_ftl.c:528:
+	/* If the block is sliced (partialy erased usually) erase it */
 	                           ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#655: FILE: drivers/mtd/sm_ftl.c:554:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#659: FILE: drivers/mtd/sm_ftl.c:558:
+};
+/* Find out media parameters.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#660: FILE: drivers/mtd/sm_ftl.c:559:
+ * This ideally has to be based on nand id, but for now device size is enough */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#690: FILE: drivers/mtd/sm_ftl.c:589:
+		} else {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#713: FILE: drivers/mtd/sm_ftl.c:612:
+	/* Minimum xD size is 16M. Also, all xD cards have standard zone
+	   sizes. SmartMedia cards exist up to 128 Mb and have same layout*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#713: FILE: drivers/mtd/sm_ftl.c:612:
+	   sizes. SmartMedia cards exist up to 128 Mb and have same layout*/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#760: FILE: drivers/mtd/sm_ftl.c:659:
+	if (sm_read_sector(ftl,
[...]
+			return -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: drivers/mtd/sm_ftl.c:660:
+	if (sm_read_sector(ftl,
+		0, ftl->cis_block, ftl->cis_boffset, ftl->cis_buffer, &oob))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: drivers/mtd/sm_ftl.c:670:
+	if (!memcmp(ftl->cis_buffer + SM_SMALL_PAGE, cis_signature,
+						sizeof(cis_signature)))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#785: FILE: drivers/mtd/sm_ftl.c:684:
+	for (block = 0 ; block < ftl->zone_size - ftl->max_lba ; block++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#801: FILE: drivers/mtd/sm_ftl.c:700:
+						boffset += SM_SECTOR_SIZE) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#818: FILE: drivers/mtd/sm_ftl.c:717:
+		dbg("CIS block found at offset %d",
+			block * ftl->block_size + boffset);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#829: FILE: drivers/mtd/sm_ftl.c:728:
+	if (sm_read_cis(ftl)) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#857: FILE: drivers/mtd/sm_ftl.c:756:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#866: FILE: drivers/mtd/sm_ftl.c:765:
+	for (block = 0 ; block < ftl->zone_size ; block++) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#876: FILE: drivers/mtd/sm_ftl.c:775:
+		/* Test to see if block is erased. It is enough to test
+			first sector, because erase happens in one shot */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#876: FILE: drivers/mtd/sm_ftl.c:775:
+			first sector, because erase happens in one shot */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: drivers/mtd/sm_ftl.c:778:
+			kfifo_in(&zone->free_sectors,
+				(unsigned char *)&block, 2);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#886: FILE: drivers/mtd/sm_ftl.c:785:
+		/* However the way the block valid status is defined, ensures
+			very low probability of failure here */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#886: FILE: drivers/mtd/sm_ftl.c:785:
+			very low probability of failure here */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#892: FILE: drivers/mtd/sm_ftl.c:791:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#897: FILE: drivers/mtd/sm_ftl.c:796:
+		/* We can try to erase it, or mark it as bad, but
+			lets leave that to recovery application */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#897: FILE: drivers/mtd/sm_ftl.c:796:
+			lets leave that to recovery application */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#903: FILE: drivers/mtd/sm_ftl.c:802:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#905: FILE: drivers/mtd/sm_ftl.c:804:
+		/* If there is no collision,
+			just put the sector in the FTL table */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#905: FILE: drivers/mtd/sm_ftl.c:804:
+			just put the sector in the FTL table */

WARNING:SPLIT_STRING: quoted string split across lines
#913: FILE: drivers/mtd/sm_ftl.c:812:
+		sm_printk("collision"
+			" of LBA %d between blocks %d and %d in zone %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: drivers/mtd/sm_ftl.c:821:
+		if (sm_check_block(ftl, zone_num,
+					zone->lba_to_phys_table[lba])) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#928: FILE: drivers/mtd/sm_ftl.c:827:
+		/* If both blocks are valid and share same LBA, it means that
+			they hold different versions of same data. It not

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#939: FILE: drivers/mtd/sm_ftl.c:838:
+	/* No free sectors, means that the zone is heavily damaged, write won't
+		work, but it can still can be (partially) read */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#939: FILE: drivers/mtd/sm_ftl.c:838:
+		work, but it can still can be (partially) read */

WARNING:TYPO_SPELLING: 'automaticly' may be misspelled - perhaps 'automatically'?
#956: FILE: drivers/mtd/sm_ftl.c:855:
+/* Get and automaticly initialize an FTL mapping for one zone */
            ^^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#962: FILE: drivers/mtd/sm_ftl.c:861:
+	BUG_ON(zone_num >= ftl->zone_count);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#974: FILE: drivers/mtd/sm_ftl.c:873:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#998: FILE: drivers/mtd/sm_ftl.c:897:
+	if (test_bit(boffset / SM_SECTOR_SIZE,
[...]
+			return -1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#999: FILE: drivers/mtd/sm_ftl.c:898:
+	if (test_bit(boffset / SM_SECTOR_SIZE,
+		&ftl->cache_data_invalid_bitmap))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1022: FILE: drivers/mtd/sm_ftl.c:921:
+	BUG_ON(zone_num < 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1026: FILE: drivers/mtd/sm_ftl.c:925:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1029: FILE: drivers/mtd/sm_ftl.c:928:
+	for_each_bit(sector_num, &ftl->cache_data_invalid_bitmap,
+		ftl->block_size / SM_SECTOR_SIZE) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1030: FILE: drivers/mtd/sm_ftl.c:929:
+		ftl->block_size / SM_SECTOR_SIZE) {
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1031: FILE: drivers/mtd/sm_ftl.c:930:
+		if (!sm_read_sector(ftl,
[...]
+				clear_bit(sector_num,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1032: FILE: drivers/mtd/sm_ftl.c:931:
+		if (!sm_read_sector(ftl,
+			zone_num, block_num, sector_num * SM_SECTOR_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: drivers/mtd/sm_ftl.c:934:
+				clear_bit(sector_num,
+					&ftl->cache_data_invalid_bitmap);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1043: FILE: drivers/mtd/sm_ftl.c:942:
+	/* We could still continue by erasing the current block,
+		but for such worn out media it doesn't worth the trouble,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1044: FILE: drivers/mtd/sm_ftl.c:943:
+			and the dangers */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1053: FILE: drivers/mtd/sm_ftl.c:952:
+	if (sm_write_block(ftl, ftl->cache_data, zone_num, write_sector,
[...]
+			goto restart;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1054: FILE: drivers/mtd/sm_ftl.c:953:
+	if (sm_write_block(ftl, ftl->cache_data, zone_num, write_sector,
+		ftl->cache_block, ftl->cache_data_invalid_bitmap))

WARNING:TYPO_SPELLING: 'succesfull' may be misspelled - perhaps 'successful'?
#1060: FILE: drivers/mtd/sm_ftl.c:959:
+	/* Write succesfull, so erase and free the old block */
 	         ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1068: FILE: drivers/mtd/sm_ftl.c:967:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1073: FILE: drivers/mtd/sm_ftl.c:972:
+	struct sm_ftl *ftl = (struct sm_ftl *)data;
+	queue_work(cache_flush_workqueue, &ftl->flush_work);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1080: FILE: drivers/mtd/sm_ftl.c:979:
+	struct sm_ftl *ftl = container_of(work, struct sm_ftl, flush_work);
+	mutex_lock(&ftl->mutex);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1084: FILE: drivers/mtd/sm_ftl.c:983:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1090: FILE: drivers/mtd/sm_ftl.c:989:
+static int sm_read(struct mtd_blktrans_dev *dev,
+				unsigned long sect_no, char *buf)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1100: FILE: drivers/mtd/sm_ftl.c:999:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: drivers/mtd/sm_ftl.c:1035:
+static int sm_write(struct mtd_blktrans_dev *dev,
+				unsigned long sec_no, char *buf)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1142: FILE: drivers/mtd/sm_ftl.c:1041:
+	BUG_ON(ftl->readonly);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1157: FILE: drivers/mtd/sm_ftl.c:1056:
+	if (ftl->cache_block != block || ftl->cache_zone != zone_num) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1202: FILE: drivers/mtd/sm_ftl.c:1101:
+	struct sm_ftl *ftl = dev->priv;
+	geo->heads = ftl->heads;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ftl)...) over kzalloc(sizeof(struct sm_ftl)...)
#1215: FILE: drivers/mtd/sm_ftl.c:1114:
+	ftl = kzalloc(sizeof(struct sm_ftl), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1224: FILE: drivers/mtd/sm_ftl.c:1123:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ftl->zones)...) over kzalloc(sizeof(struct ftl_zone)...)
#1235: FILE: drivers/mtd/sm_ftl.c:1134:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1235: FILE: drivers/mtd/sm_ftl.c:1134:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,
+								GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1236: FILE: drivers/mtd/sm_ftl.c:1135:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,
+								GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trans)...) over kzalloc(sizeof(struct mtd_blktrans_dev)...)
#1249: FILE: drivers/mtd/sm_ftl.c:1148:
+	trans = kzalloc(sizeof(struct mtd_blktrans_dev), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1262: FILE: drivers/mtd/sm_ftl.c:1161:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1269: FILE: drivers/mtd/sm_ftl.c:1168:
+	sm_printk("Found %d MiB xD/SmartMedia FTL on mtd%d",
+		(int)(mtd->size / (1024 * 1024)), mtd->index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1273: FILE: drivers/mtd/sm_ftl.c:1172:
+	dbg("%d zone(s), each consists of %d blocks (+%d spares)",
+		ftl->zone_count, ftl->max_lba,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: drivers/mtd/sm_ftl.c:1175:
+	dbg("each block consists of %d bytes",
+		ftl->block_size);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1306: FILE: drivers/mtd/sm_ftl.c:1205:
+	for (i = 0 ; i < ftl->zone_count; i++) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1342: FILE: drivers/mtd/sm_ftl.c:1241:
+	int error = 0;
+	cache_flush_workqueue = create_freezeable_workqueue("smflush");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1352: FILE: drivers/mtd/sm_ftl.c:1251:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1372: FILE: drivers/mtd/sm_ftl.h:1:
+/*

WARNING:TYPO_SPELLING: 'loosly' may be misspelled - perhaps 'loosely'?
#1376: FILE: drivers/mtd/sm_ftl.h:5:
+ * Based loosly on ssfdc.c which is
          ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1390: FILE: drivers/mtd/sm_ftl.h:19:
+
+

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#1420: FILE: drivers/mtd/sm_ftl.h:49:
+	long unsigned int cache_data_invalid_bitmap;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#1420: FILE: drivers/mtd/sm_ftl.h:49:
+	long unsigned int cache_data_invalid_bitmap;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1441: FILE: drivers/mtd/sm_ftl.h:70:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1445: FILE: drivers/mtd/sm_ftl.h:74:
+	printk(KERN_WARNING "sm_ftl" ": " format "\n", ## __VA_ARGS__)

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#1445: FILE: drivers/mtd/sm_ftl.h:74:
+	printk(KERN_WARNING "sm_ftl" ": " format "\n", ## __VA_ARGS__)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1447: FILE: drivers/mtd/sm_ftl.h:76:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1451: FILE: drivers/mtd/sm_ftl.h:80:
+	printk(KERN_DEBUG "sm_ftl" ": " format "\n", ## __VA_ARGS__)

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#1451: FILE: drivers/mtd/sm_ftl.h:80:
+	printk(KERN_DEBUG "sm_ftl" ": " format "\n", ## __VA_ARGS__)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1460: FILE: drivers/mtd/sm_ftl.h:89:
+static int sm_erase_block(struct sm_ftl *ftl, int zone_num, u16 block,
+								int put_free);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000015162.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 72 warnings, 79 checks, 1390 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000015162.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
