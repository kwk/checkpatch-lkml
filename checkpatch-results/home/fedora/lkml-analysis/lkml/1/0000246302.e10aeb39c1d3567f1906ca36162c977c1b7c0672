ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: include/linux/init.h:254:
+        void **name;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: include/linux/init.h:254:
+        void **name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: include/linux/init.h:255:
+        unsigned long size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: include/linux/init.h:255:
+        unsigned long size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: include/linux/init.h:256:
+        unsigned int *nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: include/linux/init.h:256:
+        unsigned int *nr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: include/linux/init.h:257:
+        unsigned long align;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/linux/init.h:257:
+        unsigned long align;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: include/linux/init.h:258:
+        void (*init_work)(void *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: include/linux/init.h:258:
+        void (*init_work)(void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#81: FILE: include/linux/init.h:258:
+        void (*init_work)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#83: FILE: include/linux/init.h:260:
+};
+extern struct dyn_array *__dyn_array_start[], *__dyn_array_end[];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nameX' may be better as '(nameX)' to avoid precedence issues
#85: FILE: include/linux/init.h:262:
+#define DEFINE_DYN_ARRAY(nameX, sizeX, nrX, alignX, init_workX) \
+		static struct dyn_array __dyn_array_##nameX __initdata = \
+		{	.name = (void **)&nameX,\
+			.size = sizeX,\
+			.nr   = &nrX,\
+			.align = alignX,\
+			.init_work = init_workX,\
+		}; \
+		static struct dyn_array *__dyn_array_ptr_##nameX __used \
+		__attribute__((__section__(".dyn_array.init"))) = \
+			&__dyn_array_##nameX

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nrX' may be better as '(nrX)' to avoid precedence issues
#85: FILE: include/linux/init.h:262:
+#define DEFINE_DYN_ARRAY(nameX, sizeX, nrX, alignX, init_workX) \
+		static struct dyn_array __dyn_array_##nameX __initdata = \
+		{	.name = (void **)&nameX,\
+			.size = sizeX,\
+			.nr   = &nrX,\
+			.align = alignX,\
+			.init_work = init_workX,\
+		}; \
+		static struct dyn_array *__dyn_array_ptr_##nameX __used \
+		__attribute__((__section__(".dyn_array.init"))) = \
+			&__dyn_array_##nameX

CHECK:CAMELCASE: Avoid CamelCase: <__dyn_array_##nameX>
#86: FILE: include/linux/init.h:263:
+		static struct dyn_array __dyn_array_##nameX __initdata = \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__dyn_array_ptr_##nameX>
#93: FILE: include/linux/init.h:270:
+		static struct dyn_array *__dyn_array_ptr_##nameX __used \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".dyn_array.init") over __attribute__((__section__(".dyn_array.init")))
#94: FILE: include/linux/init.h:271:
+		__attribute__((__section__(".dyn_array.init"))) = \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/init.h:274:
+extern void pre_alloc_dyn_array(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#113: FILE: init/main.c:546:
+	struct dyn_array **daa;
 	                   ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#115: FILE: init/main.c:548:
+	for (daa = __dyn_array_start ; daa < __dyn_array_end; daa++) {
 	     ^^^

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#115: FILE: init/main.c:548:
+	for (daa = __dyn_array_start ; daa < __dyn_array_end; daa++) {
 	                               ^^^

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#115: FILE: init/main.c:548:
+	for (daa = __dyn_array_start ; daa < __dyn_array_end; daa++) {
 	                                                      ^^^

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#116: FILE: init/main.c:549:
+		struct dyn_array *da = *daa;
 		                        ^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#120: FILE: init/main.c:553:
+		printk(KERN_CONT "size:%#lx nr:%d align:%#lx",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#120: FILE: init/main.c:553:
+		printk(KERN_CONT "size:%#lx nr:%d align:%#lx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: init/main.c:554:
+		printk(KERN_CONT "size:%#lx nr:%d align:%#lx",
+			da->size, *da->nr, da->align);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#124: FILE: init/main.c:557:
+		printk(KERN_CONT " ==> [%#lx - %#lx]\n", phys, phys + size);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#124: FILE: init/main.c:557:
+		printk(KERN_CONT " ==> [%#lx - %#lx]\n", phys, phys + size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#139: FILE: init/main.c:602:
+	printk(KERN_INFO "nr_irqs: %d\n", nr_irqs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000246302.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 17 warnings, 7 checks, 79 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000246302.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
