CHECK:CAMELCASE: Avoid CamelCase: <MoxaDriverIoctl>
#56: FILE: drivers/char/moxa.c:221:
+static int MoxaDriverIoctl(struct tty_struct *, unsigned int, unsigned long);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortEnable>
#81: FILE: drivers/char/moxa.c:225:
+static void MoxaPortEnable(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortDisable>
#82: FILE: drivers/char/moxa.c:226:
+static void MoxaPortDisable(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortSetTermio>
#83: FILE: drivers/char/moxa.c:227:
+static int MoxaPortSetTermio(struct moxa_port *, struct ktermios *, speed_t);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortGetLineOut>
#84: FILE: drivers/char/moxa.c:228:
+static int MoxaPortGetLineOut(struct moxa_port *, int *, int *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortLineCtrl>
#85: FILE: drivers/char/moxa.c:229:
+static void MoxaPortLineCtrl(struct moxa_port *, int, int);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortFlowCtrl>
#86: FILE: drivers/char/moxa.c:230:
+static void MoxaPortFlowCtrl(struct moxa_port *, int, int, int, int, int);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortLineStatus>
#87: FILE: drivers/char/moxa.c:231:
+static int MoxaPortLineStatus(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortDCDChange>
#88: FILE: drivers/char/moxa.c:232:
+static int MoxaPortDCDChange(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortDCDON>
#89: FILE: drivers/char/moxa.c:233:
+static int MoxaPortDCDON(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortFlushData>
#90: FILE: drivers/char/moxa.c:234:
+static void MoxaPortFlushData(struct moxa_port *, int);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortWriteData>
#91: FILE: drivers/char/moxa.c:235:
+static int MoxaPortWriteData(struct moxa_port *, unsigned char *, int);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortReadData>
#92: FILE: drivers/char/moxa.c:236:
+static int MoxaPortReadData(struct moxa_port *, struct tty_struct *tty);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortTxQueue>
#93: FILE: drivers/char/moxa.c:237:
+static int MoxaPortTxQueue(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortRxQueue>
#94: FILE: drivers/char/moxa.c:238:
+static int MoxaPortRxQueue(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortTxFree>
#95: FILE: drivers/char/moxa.c:239:
+static int MoxaPortTxFree(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortTxDisable>
#96: FILE: drivers/char/moxa.c:240:
+static void MoxaPortTxDisable(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortTxEnable>
#97: FILE: drivers/char/moxa.c:241:
+static void MoxaPortTxEnable(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortResetBrkCnt>
#98: FILE: drivers/char/moxa.c:242:
+static int MoxaPortResetBrkCnt(struct moxa_port *);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortSendBreak>
#99: FILE: drivers/char/moxa.c:243:
+static void MoxaPortSendBreak(struct moxa_port *, int);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaSetFifo>
#103: FILE: drivers/char/moxa.c:246:
+static void MoxaSetFifo(struct moxa_port *port, int enable);

CHECK:CAMELCASE: Avoid CamelCase: <emptyTimer>
#159: FILE: drivers/char/moxa.c:999:
+		del_timer_sync(&ch->emptyTimer);

CHECK:SPACING: No space is necessary after a cast
#185: FILE: drivers/char/moxa.c:1032:
+	len = MoxaPortWriteData(ch, (unsigned char *) buf, count);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty->index != MAX_PORTS'
#260: FILE: drivers/char/moxa.c:1119:
+	if ((tty->index != MAX_PORTS) && (!ch))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ch'
#260: FILE: drivers/char/moxa.c:1119:
+	if ((tty->index != MAX_PORTS) && (!ch))

CHECK:CAMELCASE: Avoid CamelCase: <ofsAddr>
#489: FILE: drivers/char/moxa.c:1566:
+	ofsAddr = port->tableAddr;

CHECK:CAMELCASE: Avoid CamelCase: <tableAddr>
#489: FILE: drivers/char/moxa.c:1566:
+	ofsAddr = port->tableAddr;

CHECK:CAMELCASE: Avoid CamelCase: <lowChkFlag>
#493: FILE: drivers/char/moxa.c:1569:
+		port->lowChkFlag = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: drivers/char/moxa.c:1575:
+static int MoxaDriverIoctl(struct tty_struct *tty, unsigned int cmd,
+		unsigned long arg)

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortIsValid>
#538: FILE: drivers/char/moxa.c:2011:
+static int MoxaPortIsValid(int port)

CHECK:CAMELCASE: Avoid CamelCase: <breakCnt>
#559: FILE: drivers/char/moxa.c:2027:
+	port->breakCnt = 0;

CHECK:CAMELCASE: Avoid CamelCase: <boardType>
#560: FILE: drivers/char/moxa.c:2028:
+	if (port->board->boardType == MOXA_BOARD_C320_ISA ||

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortGetMaxBaud>
#582: FILE: drivers/char/moxa.c:2052:
+static long MoxaPortGetMaxBaud(struct moxa_port *port)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/char/moxa.c:2055:
+	if (port->board->boardType == MOXA_BOARD_C320_ISA ||
+			port->board->boardType == MOXA_BOARD_C320_PCI)

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortSetBaud>
#595: FILE: drivers/char/moxa.c:2062:
+static long MoxaPortSetBaud(struct moxa_port *port, long baud)

CHECK:CAMELCASE: Avoid CamelCase: <curBaud>
#613: FILE: drivers/char/moxa.c:2082:
+	port->curBaud = baud;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: drivers/char/moxa.c:2087:
+static int MoxaPortSetTermio(struct moxa_port *port, struct ktermios *termio,
+		speed_t baud)

CHECK:CAMELCASE: Avoid CamelCase: <chkPort>
#626: FILE: drivers/char/moxa.c:2093:
+	if (port->chkPort == 0 || termio == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: drivers/char/moxa.c:2127:
+	if (port->board->boardType == MOXA_BOARD_C320_ISA ||
+			port->board->boardType == MOXA_BOARD_C320_PCI) {

CHECK:CAMELCASE: Avoid CamelCase: <dtrState>
#649: FILE: drivers/char/moxa.c:2143:
+static int MoxaPortGetLineOut(struct moxa_port *port, int *dtrState,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: drivers/char/moxa.c:2144:
+static int MoxaPortGetLineOut(struct moxa_port *port, int *dtrState,
+		int *rtsState)

CHECK:CAMELCASE: Avoid CamelCase: <rtsState>
#650: FILE: drivers/char/moxa.c:2144:
+		int *rtsState)

CHECK:CAMELCASE: Avoid CamelCase: <lineCtrl>
#669: FILE: drivers/char/moxa.c:2150:
+		*dtrState = !!(port->lineCtrl & DTR_ON);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: drivers/char/moxa.c:2170:
+static void MoxaPortFlowCtrl(struct moxa_port *port, int rts, int cts,
+		int txflow, int rxflow, int txany)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: drivers/char/moxa.c:2194:
+	if (port->board->boardType == MOXA_BOARD_C320_ISA ||
+			port->board->boardType == MOXA_BOARD_C320_PCI) {

CHECK:CAMELCASE: Avoid CamelCase: <DCDState>
#737: FILE: drivers/char/moxa.c:2203:
+		if ((port->DCDState & DCD_oldstate) == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: drivers/char/moxa.c:2239:
+static int MoxaPortWriteData(struct moxa_port *port, unsigned char *buffer,
+		int len)

CHECK:CAMELCASE: Avoid CamelCase: <baseAddr>
#794: FILE: drivers/char/moxa.c:2249:
+	baseAddr = port->board->basemem;

CHECK:CAMELCASE: Avoid CamelCase: <moxaLog>
#803: FILE: drivers/char/moxa.c:2259:
+	moxaLog.txcnt[port->tty->index] += c;

CHECK:CAMELCASE: Avoid CamelCase: <Magic_code>
#902: FILE: drivers/char/moxa.c:2415:
+	moxafunc(port->tableAddr, FC_SetXoffState, Magic_code);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 50 checks, 875 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
