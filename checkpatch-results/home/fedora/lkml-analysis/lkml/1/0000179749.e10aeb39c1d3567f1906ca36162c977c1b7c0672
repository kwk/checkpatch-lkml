WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
Subject: [PATCH 2/2] [Target_Core_Mod/ConfigFS]: Add T10 EVPD / WWN storage object attributes

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Nicholas A. Bellinger <nab@linux-iscsi.org'
#108: 
Signed-off-by: Nicholas A. Bellinger <nab@linux-iscsi.org

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#124: FILE: drivers/lio-core/target_core_configfs.c:515:
+#define SE_DEV_WWN_ATTR(_name, _mode)						\
+static struct target_core_dev_wwn_attribute target_core_dev_wwn_##_name =	\
+		__CONFIGFS_EATTR(_name, _mode,					\
+		target_core_dev_wwn_show_attr_##_name,				\
+		target_core_dev_wwn_store_attr_##_name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#130: FILE: drivers/lio-core/target_core_configfs.c:521:
+#define SE_DEV_WWN_ATTR_RO(_name);						\
+static struct target_core_dev_wwn_attribute target_core_dev_wwn_##_name =	\
+		__CONFIGFS_EATTR_RO(_name,					\
+		target_core_dev_wwn_show_attr_##_name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#138: FILE: drivers/lio-core/target_core_configfs.c:529:
+static ssize_t target_core_dev_wwn_show_attr_evpd_unit_serial (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#138: FILE: drivers/lio-core/target_core_configfs.c:529:
+static ssize_t target_core_dev_wwn_show_attr_evpd_unit_serial (

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: drivers/lio-core/target_core_configfs.c:536:
+        if (!(dev = se_dev->se_dev_ptr)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: drivers/lio-core/target_core_configfs.c:536:
+        if (!(dev = se_dev->se_dev_ptr)) $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: drivers/lio-core/target_core_configfs.c:536:
+        if (!(dev = se_dev->se_dev_ptr)) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#145: FILE: drivers/lio-core/target_core_configfs.c:536:
+        if (!(dev = se_dev->se_dev_ptr)) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: drivers/lio-core/target_core_configfs.c:537:
+                return(-ENODEV);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: drivers/lio-core/target_core_configfs.c:537:
+                return(-ENODEV);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: drivers/lio-core/target_core_configfs.c:540:
+	return(sprintf(page, "T10 EVPD Unit Serial Number:: %s\n",
+		&t10_wwn->unit_serial[0]));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#152: FILE: drivers/lio-core/target_core_configfs.c:543:
+static ssize_t target_core_dev_wwn_store_attr_evpd_unit_serial (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: drivers/lio-core/target_core_configfs.c:543:
+static ssize_t target_core_dev_wwn_store_attr_evpd_unit_serial (

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#160: FILE: drivers/lio-core/target_core_configfs.c:551:
+SE_DEV_WWN_ATTR(evpd_unit_serial, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#165: FILE: drivers/lio-core/target_core_configfs.c:556:
+static ssize_t target_core_dev_wwn_show_attr_evpd_protocol_identifier (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#165: FILE: drivers/lio-core/target_core_configfs.c:556:
+static ssize_t target_core_dev_wwn_show_attr_evpd_protocol_identifier (

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#175: FILE: drivers/lio-core/target_core_configfs.c:566:
+	if (!(dev = se_dev->se_dev_ptr))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: drivers/lio-core/target_core_configfs.c:581:
+		len += sprintf(page+len, "%s", buf);
 		                   ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#194: FILE: drivers/lio-core/target_core_configfs.c:585:
+	return(len);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#197: FILE: drivers/lio-core/target_core_configfs.c:588:
+static ssize_t target_core_dev_wwn_store_attr_evpd_protocol_identifier (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#197: FILE: drivers/lio-core/target_core_configfs.c:588:
+static ssize_t target_core_dev_wwn_store_attr_evpd_protocol_identifier (

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#202: FILE: drivers/lio-core/target_core_configfs.c:593:
+	return(-ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#205: FILE: drivers/lio-core/target_core_configfs.c:596:
+SE_DEV_WWN_ATTR(evpd_protocol_identifier, S_IRUGO | S_IWUSR);

WARNING:TYPO_SPELLING: 'assoication' may be misspelled - perhaps 'association'?
#208: FILE: drivers/lio-core/target_core_configfs.c:599:
+ * Generic wrapper for dumping EVPD identifiers by assoication.
                                                    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_assoc' may be better as '(_assoc)' to avoid precedence issues
#210: FILE: drivers/lio-core/target_core_configfs.c:601:
+#define DEF_DEV_WWN_ASSOC_SHOW(_name, _assoc)					\
+static ssize_t target_core_dev_wwn_show_attr_##_name (				\
+	struct t10_wwn_s *t10_wwn,						\
+	char *page)								\
+{										\
+	se_subsystem_dev_t *se_dev = t10_wwn->t10_sub_dev;			\
+	se_device_t *dev;							\
+	t10_evpd_t *evpd;							\
+	unsigned char buf[EVPD_TMP_BUF_SIZE];					\
+	ssize_t len = 0;							\
+										\
+	if (!(dev = se_dev->se_dev_ptr))					\
+		return(-ENODEV);						\
+										\
+	spin_lock(&t10_wwn->t10_evpd_lock);					\
+	list_for_each_entry(evpd, &t10_wwn->t10_evpd_list, evpd_list) {		\
+		if (evpd->association != _assoc)				\
+			continue;						\
+										\
+		memset(buf, 0, EVPD_TMP_BUF_SIZE);				\
+		transport_dump_evpd_assoc(evpd, buf, EVPD_TMP_BUF_SIZE);	\
+		if ((len + strlen(buf) > PAGE_SIZE))				\
+			break;							\
+		len += sprintf(page+len, "%s", buf);				\
+										\
+		memset(buf, 0, EVPD_TMP_BUF_SIZE);				\
+		transport_dump_evpd_ident_type(evpd, buf, EVPD_TMP_BUF_SIZE);	\
+		if ((len + strlen(buf) > PAGE_SIZE))				\
+			break;							\
+		len += sprintf(page+len, "%s", buf);				\
+										\
+		memset(buf, 0, EVPD_TMP_BUF_SIZE);				\
+		transport_dump_evpd_ident(evpd, buf, EVPD_TMP_BUF_SIZE);	\
+		if ((len + strlen(buf) > PAGE_SIZE))				\
+			break;							\
+		len += sprintf(page+len, "%s", buf);				\
+	}									\
+	spin_unlock(&t10_wwn->t10_evpd_lock);					\
+										\
+	return(len);								\
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#211: FILE: drivers/lio-core/target_core_configfs.c:602:
+static ssize_t target_core_dev_wwn_show_attr_##_name (				\

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#221: FILE: drivers/lio-core/target_core_configfs.c:612:
+	if (!(dev = se_dev->se_dev_ptr))					\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#233: FILE: drivers/lio-core/target_core_configfs.c:624:
+		len += sprintf(page+len, "%s", buf);				\
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#239: FILE: drivers/lio-core/target_core_configfs.c:630:
+		len += sprintf(page+len, "%s", buf);				\
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#245: FILE: drivers/lio-core/target_core_configfs.c:636:
+		len += sprintf(page+len, "%s", buf);				\
 		                   ^

WARNING:TYPO_SPELLING: 'Assoication' may be misspelled - perhaps 'Association'?
#253: FILE: drivers/lio-core/target_core_configfs.c:644:
+ * EVPD page 0x83 Assoication: Logical Unit
                   ^^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#257: FILE: drivers/lio-core/target_core_configfs.c:648:
+static ssize_t target_core_dev_wwn_store_attr_evpd_assoc_logical_unit (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#257: FILE: drivers/lio-core/target_core_configfs.c:648:
+static ssize_t target_core_dev_wwn_store_attr_evpd_assoc_logical_unit (

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#262: FILE: drivers/lio-core/target_core_configfs.c:653:
+	return(-ENOSYS);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#265: FILE: drivers/lio-core/target_core_configfs.c:656:
+SE_DEV_WWN_ATTR(evpd_assoc_logical_unit, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#272: FILE: drivers/lio-core/target_core_configfs.c:663:
+static ssize_t target_core_dev_wwn_store_attr_evpd_assoc_target_port (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#272: FILE: drivers/lio-core/target_core_configfs.c:663:
+static ssize_t target_core_dev_wwn_store_attr_evpd_assoc_target_port (

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: drivers/lio-core/target_core_configfs.c:668:
+        return(-ENOSYS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: drivers/lio-core/target_core_configfs.c:668:
+        return(-ENOSYS);$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#277: FILE: drivers/lio-core/target_core_configfs.c:668:
+        return(-ENOSYS);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#280: FILE: drivers/lio-core/target_core_configfs.c:671:
+SE_DEV_WWN_ATTR(evpd_assoc_target_port, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#287: FILE: drivers/lio-core/target_core_configfs.c:678:
+static ssize_t target_core_dev_wwn_store_attr_evpd_assoc_scsi_target_device (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#287: FILE: drivers/lio-core/target_core_configfs.c:678:
+static ssize_t target_core_dev_wwn_store_attr_evpd_assoc_scsi_target_device (

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: drivers/lio-core/target_core_configfs.c:683:
+        return(-ENOSYS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: drivers/lio-core/target_core_configfs.c:683:
+        return(-ENOSYS);$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#292: FILE: drivers/lio-core/target_core_configfs.c:683:
+        return(-ENOSYS);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#295: FILE: drivers/lio-core/target_core_configfs.c:686:
+SE_DEV_WWN_ATTR(evpd_assoc_scsi_target_device, S_IRUGO | S_IWUSR);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#347: FILE: drivers/lio-core/target_core_configfs.c:959:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 3,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#347: FILE: drivers/lio-core/target_core_configfs.c:959:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 3,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/lio-core/target_core_configfs.c:960:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 3,
 			GFP_KERNEL)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: drivers/lio-core/target_core_configfs.c:977:
+	config_group_init_type_name(&se_dev->t10_wwn.t10_wwn_group, "wwn",
+			&target_core_dev_wwn_cit);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000179749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 26 warnings, 16 checks, 243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000179749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
