WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
generic interfaces to use hardware breakpoint infrastructure of the system. 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: include/asm-generic/hw_breakpoint.h:1:
+#ifndef	_ASM_GENERIC_HW_BREAKPOINT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: include/asm-generic/hw_breakpoint.h:53:
+ * ^I%HW_BREAKPOINT_RW (triggered on read or write access),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: include/asm-generic/hw_breakpoint.h:54:
+ * ^I%HW_BREAKPOINT_WRITE (triggered on write access), and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: include/asm-generic/hw_breakpoint.h:55:
+ * ^I%HW_BREAKPOINT_READ (triggered on read access).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: include/asm-generic/hw_breakpoint.h:129:
+ * ^Iprintk(KERN_DEBUG "Inside pre_handler of breakpoint exception\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: include/asm-generic/hw_breakpoint.h:130:
+ * ^Idump_stack();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: include/asm-generic/hw_breakpoint.h:131:
+ *  ^I.......<more debugging output>........$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: include/asm-generic/hw_breakpoint.h:136:
+ * ^Iprintk(KERN_DEBUG "Inside post_handler of breakpoint exception\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: include/asm-generic/hw_breakpoint.h:137:
+ * ^Idump_stack();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: include/asm-generic/hw_breakpoint.h:138:
+ *  ^I.......<more debugging output>........$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hw_breakpoint *' should also have an identifier name
#217: FILE: include/asm-generic/hw_breakpoint.h:170:
+	void		(*installed)(struct hw_breakpoint *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hw_breakpoint *' should also have an identifier name
#218: FILE: include/asm-generic/hw_breakpoint.h:171:
+	void		(*uninstalled)(struct hw_breakpoint *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hw_breakpoint *' should also have an identifier name
#219: FILE: include/asm-generic/hw_breakpoint.h:172:
+	void		(*triggered)(struct hw_breakpoint *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#219: FILE: include/asm-generic/hw_breakpoint.h:172:
+	void		(*triggered)(struct hw_breakpoint *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: include/asm-generic/hw_breakpoint.h:173:
+	void		(*triggered)(struct hw_breakpoint *,
+							struct pt_regs *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#232: FILE: include/asm-generic/hw_breakpoint.h:185:
+static unsigned hw_breakpoint_get_len(struct hw_breakpoint *bp);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#233: FILE: include/asm-generic/hw_breakpoint.h:186:
+static unsigned hw_breakpoint_get_type(struct hw_breakpoint *bp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: include/asm-generic/hw_breakpoint.h:228:
+int register_user_hw_breakpoint(struct task_struct *tsk,
+		struct hw_breakpoint *bp,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#276: FILE: include/asm-generic/hw_breakpoint.h:229:
+		const void __user *address, unsigned len, unsigned type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#276: FILE: include/asm-generic/hw_breakpoint.h:229:
+		const void __user *address, unsigned len, unsigned type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: include/asm-generic/hw_breakpoint.h:231:
+void unregister_user_hw_breakpoint(struct task_struct *tsk,
+		struct hw_breakpoint *bp);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#286: FILE: include/asm-generic/hw_breakpoint.h:239:
+struct thread_hw_breakpoint *alloc_thread_hw_breakpoint(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#296: FILE: kernel/hw_breakpoint.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#308: FILE: kernel/hw_breakpoint.c:13:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#309: FILE: kernel/hw_breakpoint.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: kernel/hw_breakpoint.c:28:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#379: FILE: kernel/hw_breakpoint.c:84:
+		 * protect our access to the list pointers. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#383: FILE: kernel/hw_breakpoint.c:88:
+		list_for_each_entry_rcu(bp, &thbi->thread_bps, node) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#385: FILE: kernel/hw_breakpoint.c:90:
+			 * don't install.  Otherwise do. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->uninstalled)
#389: FILE: kernel/hw_breakpoint.c:94:
+						(bp->uninstalled)(bp);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->installed)
#397: FILE: kernel/hw_breakpoint.c:102:
+						(bp->installed)(bp);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#408: FILE: kernel/hw_breakpoint.c:113:
+	if (unlikely(chbi->cur_kbpdata != thr_kbpdata)) {
+

WARNING:SIZEOF_PARENTHESIS: sizeof tprio should be sizeof(tprio)
#519: FILE: kernel/hw_breakpoint.c:224:
+	memset(tprio, 0, sizeof tprio);

CHECK:BRACES: Unbalanced braces around else statement
#561: FILE: kernel/hw_breakpoint.c:266:
+		else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->uninstalled)
#578: FILE: kernel/hw_breakpoint.c:283:
+				(bp->uninstalled)(bp);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->installed)
#608: FILE: kernel/hw_breakpoint.c:313:
+					(bp->installed)(bp);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#620: FILE: kernel/hw_breakpoint.c:325:
+struct thread_hw_breakpoint *alloc_thread_hw_breakpoint(

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*thbi)...) over kzalloc(sizeof(struct thread_hw_breakpoint)...)
#626: FILE: kernel/hw_breakpoint.c:331:
+		thbi = kzalloc(sizeof(struct thread_hw_breakpoint),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: kernel/hw_breakpoint.c:332:
+		thbi = kzalloc(sizeof(struct thread_hw_breakpoint),
+				GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->uninstalled)
#658: FILE: kernel/hw_breakpoint.c:363:
+			(bp->uninstalled)(bp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: kernel/hw_breakpoint.c:389:
+int copy_thread_hw_breakpoint(struct task_struct *tsk,
+		struct task_struct *child, unsigned long clone_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: kernel/hw_breakpoint.c:432:
+static int insert_bp_in_list(struct hw_breakpoint *bp,
+		struct thread_hw_breakpoint *thbi, struct task_struct *tsk)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: kernel/hw_breakpoint.c:472:
+static void remove_bp_from_list(struct hw_breakpoint *bp,
+		struct thread_hw_breakpoint *thbi, struct task_struct *tsk)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->uninstalled)
#786: FILE: kernel/hw_breakpoint.c:491:
+		(bp->uninstalled)(bp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: kernel/hw_breakpoint.c:529:
+int __register_user_hw_breakpoint(struct task_struct *tsk,
+					struct hw_breakpoint *bp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#894: FILE: kernel/hw_breakpoint.c:599:
+int register_user_hw_breakpoint(struct task_struct *tsk,
+		struct hw_breakpoint *bp,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#895: FILE: kernel/hw_breakpoint.c:600:
+		const void __user *address, unsigned len, unsigned type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#895: FILE: kernel/hw_breakpoint.c:600:
+		const void __user *address, unsigned len, unsigned type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: kernel/hw_breakpoint.c:614:
+void __unregister_user_hw_breakpoint(struct task_struct *tsk,
+		struct hw_breakpoint *bp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: kernel/hw_breakpoint.c:642:
+void unregister_user_hw_breakpoint(struct task_struct *tsk,
+		struct hw_breakpoint *bp)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 25 warnings, 24 checks, 965 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
