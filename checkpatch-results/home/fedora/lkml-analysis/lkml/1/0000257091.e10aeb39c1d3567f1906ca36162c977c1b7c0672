WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: include/linux/semaphore.h:17:
+    atomic_t        count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: include/linux/semaphore.h:24:
+    .count        = ATOMIC_INIT(n),                \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: kernel/semaphore.c:27:
+ * semaphore.  If it's negative, there may be tasks waiting on the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#93: FILE: kernel/semaphore.c:27:
wait_list.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: kernel/semaphore.c:56:
+    if (likely(atomic_dec_return(&sem->count) >= 0))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: kernel/semaphore.c:57:
+        return;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: kernel/semaphore.c:57:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: kernel/semaphore.c:59:
+    __down(sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: kernel/semaphore.c:74:
+    if (likely(atomic_dec_return(&sem->count) >= 0))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: kernel/semaphore.c:75:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: kernel/semaphore.c:75:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: kernel/semaphore.c:77:
+    return __down_interruptible(sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: kernel/semaphore.c:93:
+    if (likely(atomic_dec_return(&sem->count) >= 0))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: kernel/semaphore.c:94:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: kernel/semaphore.c:94:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: kernel/semaphore.c:96:
+    return __down_killable(sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: kernel/semaphore.c:115:
+    int old, cmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: kernel/semaphore.c:121:
+    old = atomic_read(&sem->count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: kernel/semaphore.c:122:
+    while (old > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: kernel/semaphore.c:123:
+        cmp = old;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: kernel/semaphore.c:123:
+        cmp = old;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: kernel/semaphore.c:124:
+        old = atomic_cmpxchg(&sem->count, cmp, old - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: kernel/semaphore.c:124:
+        old = atomic_cmpxchg(&sem->count, cmp, old - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: kernel/semaphore.c:125:
+        if (old == cmp)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: kernel/semaphore.c:125:
+        if (old == cmp)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#178: FILE: kernel/semaphore.c:125:
+        if (old == cmp)
+            return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: kernel/semaphore.c:126:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: kernel/semaphore.c:126:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: kernel/semaphore.c:127:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: kernel/semaphore.c:129:
+    return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: kernel/semaphore.c:145:
+    if (likely(atomic_dec_return(&sem->count) >= 0))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: kernel/semaphore.c:146:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: kernel/semaphore.c:146:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: kernel/semaphore.c:148:
+    return __down_timeout(sem, jiffies);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: kernel/semaphore.c:161:
+    if (likely(atomic_inc_return(&sem->count) > 0))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: kernel/semaphore.c:162:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: kernel/semaphore.c:162:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: kernel/semaphore.c:164:
+    __up(sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: kernel/semaphore.c:186:
+    unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: kernel/semaphore.c:188:
+    spin_lock_irqsave(&sem->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: kernel/semaphore.c:193:
+    if (atomic_dec_return(&sem->count) >= 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: kernel/semaphore.c:194:
+        goto done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: kernel/semaphore.c:194:
+        goto done;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#247: FILE: kernel/semaphore.c:211:
         if (waiter.up)
+            goto done;

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: kernel/semaphore.c:212:
+            goto done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: kernel/semaphore.c:212:
+            goto done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: kernel/semaphore.c:217:
+    spin_unlock_irqrestore(&sem->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: kernel/semaphore.c:222:
+    spin_unlock_irqrestore(&sem->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: kernel/semaphore.c:226:
+    spin_unlock_irqrestore(&sem->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: kernel/semaphore.c:227:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: kernel/semaphore.c:252:
+    struct semaphore_waiter *waiter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: kernel/semaphore.c:253:
+    unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: kernel/semaphore.c:254:
+    int old, cmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: kernel/semaphore.c:256:
+    spin_lock_irqsave(&sem->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: kernel/semaphore.c:263:
+    if (list_empty(&sem->wait_list)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: kernel/semaphore.c:264:
+        old = atomic_read(&sem->count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: kernel/semaphore.c:264:
+        old = atomic_read(&sem->count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: kernel/semaphore.c:265:
+        do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: kernel/semaphore.c:265:
+        do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#287: FILE: kernel/semaphore.c:265:
+        do {
+            cmp = old;

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: kernel/semaphore.c:266:
+            cmp = old;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: kernel/semaphore.c:266:
+            cmp = old;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: kernel/semaphore.c:267:
+            old = (old > 0) ? old + 1 : 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: kernel/semaphore.c:267:
+            old = (old > 0) ? old + 1 : 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: kernel/semaphore.c:268:
+            old = atomic_cmpxchg(&sem->count, cmp, old);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: kernel/semaphore.c:268:
+            old = atomic_cmpxchg(&sem->count, cmp, old);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: kernel/semaphore.c:269:
+        } while (cmp != old);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: kernel/semaphore.c:269:
+        } while (cmp != old);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: kernel/semaphore.c:271:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: kernel/semaphore.c:272:
+        waiter = list_first_entry(&sem->wait_list,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: kernel/semaphore.c:272:
+        waiter = list_first_entry(&sem->wait_list,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: kernel/semaphore.c:273:
+        waiter = list_first_entry(&sem->wait_list,
                         struct semaphore_waiter, list);

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: kernel/semaphore.c:274:
+        list_del(&waiter->list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: kernel/semaphore.c:274:
+        list_del(&waiter->list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: kernel/semaphore.c:275:
+        waiter->up = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: kernel/semaphore.c:275:
+        waiter->up = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: kernel/semaphore.c:276:
+        wake_up_process(waiter->task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: kernel/semaphore.c:276:
+        wake_up_process(waiter->task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: kernel/semaphore.c:277:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: kernel/semaphore.c:278:
+    spin_unlock_irqrestore(&sem->lock, flags);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 56 warnings, 1 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
