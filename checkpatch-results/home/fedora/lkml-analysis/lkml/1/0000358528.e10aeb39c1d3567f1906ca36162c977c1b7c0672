WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
I found a few bugs in the BFS driver. Detailed description of the bugs as well as the steps to reproduce the errors are given in the kernel bugzilla. Please follow these links for more information:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/bfs/dir.c:25:
+static int bfs_add_entry(struct inode *dir, const unsigned char *name,
+						int namelen, int ino);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: fs/bfs/dir.c:26:
+static struct buffer_head *bfs_find_entry(struct inode *dir, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: fs/bfs/dir.c:27:
+static struct buffer_head *bfs_find_entry(struct inode *dir, 
+				const unsigned char *name, int namelen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: fs/bfs/dir.c:42:
+		printf("Bad f_pos=%08lx for %s:%08lx\n",
+					(unsigned long)f->f_pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: fs/bfs/dir.c:61:
+				if (filldir(dirent, de->name, size, f->f_pos,
+						le16_to_cpu(de->ino),

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/bfs/dir.c:87:
+						struct nameidata *nd)
 						                  ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: fs/bfs/dir.c:87:
+static int bfs_create(struct inode *dir, struct dentry *dentry, int mode,
+						struct nameidata *nd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: fs/bfs/dir.c:124:
+	err = bfs_add_entry(dir, dentry->d_name.name, dentry->d_name.len,
+							inode->i_ino);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#193: FILE: fs/bfs/dir.c:137:
+						struct nameidata *nd)
 						                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: fs/bfs/dir.c:137:
+static struct dentry *bfs_lookup(struct inode *dir, struct dentry *dentry,
+						struct nameidata *nd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: fs/bfs/dir.c:163:
+static int bfs_link(struct dentry *old, struct inode *dir,
+						struct dentry *new)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: fs/bfs/dir.c:170:
+	err = bfs_add_entry(dir, new->d_name.name, new->d_name.len,
+							inode->i_ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/bfs/dir.c:199:
+		printf("unlinking non-existent file %s:%lu (nlink=%d)\n",
+					inode->i_sb->s_id, inode->i_ino,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: fs/bfs/dir.c:217:
+static int bfs_rename(struct inode *old_dir, struct dentry *old_dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: fs/bfs/dir.c:218:
+static int bfs_rename(struct inode *old_dir, struct dentry *old_dentry, 
+			struct inode *new_dir, struct dentry *new_dentry)

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: fs/bfs/dir.c:251:
+^I^I^I ^I^Inew_dentry->d_name.len,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#287: FILE: fs/bfs/dir.c:251:
+^I^I^I ^I^Inew_dentry->d_name.len,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: fs/bfs/dir.c:282:
+static int bfs_add_entry(struct inode *dir, const unsigned char *name,
+							int namelen, int ino)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: fs/bfs/dir.c:300:
+^I^Iif (!bh) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: fs/bfs/dir.c:327:
+static inline int bfs_namecmp(int len, const unsigned char *name,
+							const char *buffer)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < BFS_NAMELEN'
#354: FILE: fs/bfs/dir.c:329:
+	if ((len < BFS_NAMELEN) && buffer[len])

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: fs/bfs/dir.c:334:
+static struct buffer_head *bfs_find_entry(struct inode *dir, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: fs/bfs/dir.c:335:
+static struct buffer_head *bfs_find_entry(struct inode *dir, 
+			const unsigned char *name, int namelen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: fs/bfs/dir.c:357:
+		if (le16_to_cpu(de->ino) &&
+				bfs_namecmp(namelen, name, de->name)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: fs/bfs/file.c:36:
+static int bfs_move_block(unsigned long from, unsigned long to,
+					struct super_block *sb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: fs/bfs/file.c:60:
+			dprintf("failed to move block %08lx -> %08lx\n", i,
+								where + i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: fs/bfs/file.c:66:
+static int bfs_get_block(struct inode *inode, sector_t block, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: fs/bfs/file.c:67:
+static int bfs_get_block(struct inode *inode, sector_t block, 
+			struct buffer_head *bh_result, int create)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys <= bi->i_eblock'
#465: FILE: fs/bfs/file.c:90:
+	if (bi->i_sblock && (phys <= bi->i_eblock)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: fs/bfs/file.c:103:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: fs/bfs/file.c:128:
+^Iif (bi->i_sblock) { $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: fs/bfs/file.c:133:
+			dprintf("failed to move ino=%08lx -> fs corruption\n",
+								inode->i_ino);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#538: FILE: fs/bfs/inode.c:33:
+void dump_imap(const char *prefix, struct super_block *s);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ino < BFS_ROOT_INO'
#551: FILE: fs/bfs/inode.c:42:
+	if ((ino < BFS_ROOT_INO) || (ino > BFS_SB(inode->i_sb)->si_lasti)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: fs/bfs/inode.c:52:
+		printf("Unable to read inode %s:%08lx\n", inode->i_sb->s_id,
+									ino);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ino < BFS_ROOT_INO'
#612: FILE: fs/bfs/inode.c:100:
+	if ((ino < BFS_ROOT_INO) || (ino > BFS_SB(inode->i_sb)->si_lasti)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: fs/bfs/inode.c:110:
+		printf("Unable to read inode %s:%08x\n",
+				inode->i_sb->s_id, ino);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ino < BFS_ROOT_INO'
#665: FILE: fs/bfs/inode.c:156:
+	if ((ino < BFS_ROOT_INO) || (ino > info->si_lasti)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ino > info->si_lasti'
#665: FILE: fs/bfs/inode.c:156:
+	if ((ino < BFS_ROOT_INO) || (ino > info->si_lasti)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: fs/bfs/inode.c:170:
+		printf("Unable to read inode %s:%08lx\n",
+					inode->i_sb->s_id, ino);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#744: FILE: fs/bfs/inode.c:295:
+		if (i > PAGE_SIZE - 100) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: fs/bfs/inode.c:302:
+	printf("BFS-fs: %s: lasti=%08lx <%s>\n",
+				prefix, BFS_SB(s)->si_lasti, tmpbuf);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#787: FILE: fs/bfs/inode.c:344:
+^Ifor (i = 0; i < BFS_ROOT_INO; i++) $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000358528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 5 warnings, 29 checks, 718 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000358528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
