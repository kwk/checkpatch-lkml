CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#54: FILE: include/linux/rwlock_api_smp.h:44:
+#define _raw_read_lock(lock)			\
+	do {					\
+		__acquire(lock);		\
+		__raw_read_lock(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#63: FILE: include/linux/rwlock_api_smp.h:52:
+#define _raw_write_lock(lock)			\
+	do {					\
+		__acquire(lock);		\
+		__raw_write_lock(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#72: FILE: include/linux/rwlock_api_smp.h:60:
+#define _raw_read_lock_bh(lock)			\
+	do {					\
+		__acquire(lock);		\
+		__raw_read_lock_bh(lock);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#81: FILE: include/linux/rwlock_api_smp.h:68:
+#define _raw_write_lock_bh(lock)		\
+	do {					\
+		__acquire(lock);		\
+		__raw_write_lock_bh(lock);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#90: FILE: include/linux/rwlock_api_smp.h:76:
+#define _raw_read_lock_irq(lock)		\
+	do {					\
+		__acquire(lock);		\
+		__raw_read_lock_irq(lock);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#99: FILE: include/linux/rwlock_api_smp.h:84:
+#define _raw_write_lock_irq(lock)		\
+	do {					\
+		__acquire(lock);		\
+		__raw_write_lock_irq(lock);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#108: FILE: include/linux/rwlock_api_smp.h:92:
+#define _raw_read_lock_irqsave(lock)		\
+	({					\
+		__acquire(lock);		\
+		__raw_read_lock_irqsave(lock);	\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#117: FILE: include/linux/rwlock_api_smp.h:100:
+#define _raw_write_lock_irqsave(lock)		\
+	({					\
+		__acquire(lock);		\
+		__raw_write_lock_irqsave(lock);	\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#130: FILE: include/linux/rwlock_api_smp.h:116:
+#define _raw_read_unlock(lock)			\
+	do {					\
+		__raw_read_unlock(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#139: FILE: include/linux/rwlock_api_smp.h:124:
+#define _raw_write_unlock(lock)			\
+	do {					\
+		__raw_write_unlock(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#148: FILE: include/linux/rwlock_api_smp.h:132:
+#define _raw_read_unlock_bh(lock)		\
+	do {					\
+		__raw_read_unlock_bh(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#157: FILE: include/linux/rwlock_api_smp.h:140:
+#define _raw_write_unlock_bh(lock)		\
+	do {					\
+		__raw_write_unlock_bh(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#166: FILE: include/linux/rwlock_api_smp.h:148:
+#define _raw_read_unlock_irq(lock)		\
+	do {					\
+		__raw_read_unlock_irq(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#175: FILE: include/linux/rwlock_api_smp.h:156:
+#define _raw_write_unlock_irq(lock)		\
+	do {					\
+		__raw_write_unlock_irq(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#185: FILE: include/linux/rwlock_api_smp.h:164:
+#define _raw_read_unlock_irqrestore(lock, flags)		\
+	do {							\
+		__raw_read_unlock_irqrestore(lock, flags);	\
+		__release(lock);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#195: FILE: include/linux/rwlock_api_smp.h:172:
+#define _raw_write_unlock_irqrestore(lock, flags)		\
+	do {							\
+		__raw_write_unlock_irqrestore(lock, flags);	\
+		__release(lock);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#212: FILE: include/linux/spinlock_api_smp.h:47:
+#define _raw_spin_lock(lock)			\
+	do {					\
+		__acquire(lock);		\
+		__raw_spin_lock(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#221: FILE: include/linux/spinlock_api_smp.h:55:
+#define _raw_spin_lock_bh(lock)			\
+	do {					\
+		__acquire(lock);		\
+		__raw_spin_lock_bh(lock);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#230: FILE: include/linux/spinlock_api_smp.h:63:
+#define _raw_spin_lock_irq(lock)		\
+	do {					\
+		__acquire(lock);		\
+		__raw_spin_lock_irq(lock);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#239: FILE: include/linux/spinlock_api_smp.h:71:
+#define _raw_spin_lock_irqsave(lock)		\
+	({					\
+		__acquire(lock);		\
+		__raw_spin_lock_irqsave(lock);	\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#252: FILE: include/linux/spinlock_api_smp.h:87:
+#define _raw_spin_unlock(lock)			\
+	do {					\
+		__raw_spin_unlock(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#261: FILE: include/linux/spinlock_api_smp.h:95:
+#define _raw_spin_unlock_bh(lock)		\
+	do {					\
+		__raw_spin_unlock_bh(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#270: FILE: include/linux/spinlock_api_smp.h:103:
+#define _raw_spin_unlock_irq(lock)		\
+	do {					\
+		__raw_spin_unlock_irq(lock);	\
+		__release(lock);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#279: FILE: include/linux/spinlock_api_smp.h:111:
+#define _raw_spin_unlock_irqrestore(lock, flags)		\
+	do {							\
+		__raw_spin_unlock_irqrestore(lock, flags);	\
+		__release(lock);				\
+	} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000002247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 24 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000002247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
