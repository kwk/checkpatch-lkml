WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: fs/proc/mempool.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#83: FILE: fs/proc/mempool.c:20:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#85: FILE: fs/proc/mempool.c:22:
+#include <asm/pgtable.h>

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#106: FILE: fs/proc/mempool.c:43:
+	seq_printf(m, "name            type     size  min curr\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#130: FILE: fs/proc/mempool.c:67:
+	BUG_ON(mempool == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mempool"
#130: FILE: fs/proc/mempool.c:67:
+	BUG_ON(mempool == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: fs/proc/mempool.c:70:
+	seq_printf(m, "%-15s %-8s %5d %4d %d\n", mempool->name,
+		mempool_type_name[mempool->type], mempool->size,

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#138: FILE: fs/proc/mempool.c:75:
+static struct seq_operations mempool_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#145: FILE: fs/proc/mempool.c:82:
+static int mempool_open(struct inode *inode, struct file *filp)
                                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#147: FILE: fs/proc/mempool.c:84:
+	return seq_open(filp, &mempool_seq_ops);
 	                ^^^^

CHECK:SPACING: No space is necessary after a cast
#209: FILE: include/linux/mempool.h:65:
+			      (void *) kc, name, MEMPOOL_SLAB);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: include/linux/mempool.h:76:
+static inline mempool_t *mempool_create_kmalloc_pool(int min_nr, size_t size,
+	const char *name)

CHECK:SPACING: No space is necessary after a cast
#223: FILE: include/linux/mempool.h:79:
+			      (void *) size, name, MEMPOOL_KMALLOC);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#226: FILE: include/linux/mempool.h:81:
 }
+static inline mempool_t *mempool_create_kzalloc_pool(int min_nr, size_t size,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: include/linux/mempool.h:82:
+static inline mempool_t *mempool_create_kzalloc_pool(int min_nr, size_t size,
+	const char *name)

CHECK:SPACING: No space is necessary after a cast
#231: FILE: include/linux/mempool.h:85:
+			      (void *) size, name, MEMPOOL_KMALLOC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: include/linux/mempool.h:95:
+static inline mempool_t *mempool_create_page_pool(int min_nr, int order,
+	const char *name)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pool->name"
#301: FILE: mm/mempool.c:107:
+	if (pool->name == NULL) {

CHECK:SPACING: No space is necessary after a cast
#309: FILE: mm/mempool.c:115:
+		pool->size = (int)(long) pool_data;

CHECK:SPACING: No space is necessary after a cast
#311: FILE: mm/mempool.c:117:
+		pool->size = (int)(PAGE_SIZE << (int)(long) pool_data);

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: mm/mempool.c:120:
+		struct kmem_cache *kc = pool_data;
+		pool->size = kmem_cache_size(kc);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198086.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 12 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198086.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
