WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Successfully tested with the mce v2 receiver and remote that shipped with my

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#50: FILE: drivers/input/lirc/Kconfig:28:
+config LIRC_MCEUSB2
+	tristate "Microsoft Media Center Ed. Receiver, v2"
+	default n
+	depends on LIRC_DEV
+	help
+	  Driver for the Microsoft Media Center Ed. Receiver, v2
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#71: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: drivers/input/lirc/lirc_mceusb2.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#106: FILE: drivers/input/lirc/lirc_mceusb2.c:31:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#107: FILE: drivers/input/lirc/lirc_mceusb2.c:32:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: drivers/input/lirc/lirc_mceusb2.c:82:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#167: FILE: drivers/input/lirc/lirc_mceusb2.c:92:
+			printk(KERN_DEBUG fmt, ## args);	\

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#278: FILE: drivers/input/lirc/lirc_mceusb2.c:203:
+struct irctl {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#310: FILE: drivers/input/lirc/lirc_mceusb2.c:235:
+	struct mutex lock;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#323: FILE: drivers/input/lirc/lirc_mceusb2.c:248:
+	char codes[USB_BUFLEN*3 + 1];
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#330: FILE: drivers/input/lirc/lirc_mceusb2.c:255:
+		snprintf(codes+i*3, 4, "%02x ", buf[i] & 0xFF);
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#330: FILE: drivers/input/lirc/lirc_mceusb2.c:255:
+		snprintf(codes+i*3, 4, "%02x ", buf[i] & 0xFF);
 		                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#332: FILE: drivers/input/lirc/lirc_mceusb2.c:257:
+	printk(KERN_INFO "" DRIVER_NAME "[%d]: data received %s (length=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: drivers/input/lirc/lirc_mceusb2.c:258:
+	printk(KERN_INFO "" DRIVER_NAME "[%d]: data received %s (length=%d)\n",
+		ir->devnum, codes, len);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#356: FILE: drivers/input/lirc/lirc_mceusb2.c:281:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: drivers/input/lirc/lirc_mceusb2.c:283:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: drivers/input/lirc/lirc_mceusb2.c:302:
+					usb_fill_int_urb(async_urb, ir->usbdev,
+						usb_sndintpipe(ir->usbdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/input/lirc/lirc_mceusb2.c:303:
+						usb_sndintpipe(ir->usbdev,
+							ep->bEndpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#378: FILE: drivers/input/lirc/lirc_mceusb2.c:303:
+							ep->bEndpointAddress),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#381: FILE: drivers/input/lirc/lirc_mceusb2.c:306:
+					(usb_complete_t) usb_async_callback,

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#382: FILE: drivers/input/lirc/lirc_mceusb2.c:307:
+					ir, ep->bInterval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: drivers/input/lirc/lirc_mceusb2.c:313:
+					usb_fill_int_urb(async_urb, ir->usbdev,
+						usb_rcvintpipe(ir->usbdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: drivers/input/lirc/lirc_mceusb2.c:314:
+						usb_rcvintpipe(ir->usbdev,
+							ep->bEndpointAddress),

CHECK:SPACING: No space is necessary after a cast
#391: FILE: drivers/input/lirc/lirc_mceusb2.c:316:
+					(usb_complete_t) usb_async_callback,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#431: FILE: drivers/input/lirc/lirc_mceusb2.c:356:
+		printk(DRIVER_NAME "[%d]: error in lirc_unregister minor: %d\n"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: drivers/input/lirc/lirc_mceusb2.c:359:
+			printk(DRIVER_NAME

WARNING:SPLIT_STRING: quoted string split across lines
#436: FILE: drivers/input/lirc/lirc_mceusb2.c:361:
+				"[%d]: device is opened, will unregister"
+				" on close\n", devnum);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: drivers/input/lirc/lirc_mceusb2.c:369:
+			printk(DRIVER_NAME "[%d]: lirc_unregister failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: drivers/input/lirc/lirc_mceusb2.c:370:
+			printk(DRIVER_NAME "[%d]: lirc_unregister failed\n",
+			devnum);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#449: FILE: drivers/input/lirc/lirc_mceusb2.c:374:
+		printk(DRIVER_NAME "[%d]: didn't free resources\n", devnum);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: drivers/input/lirc/lirc_mceusb2.c:378:
+	printk(DRIVER_NAME "[%d]: usb remote disconnected\n", devnum);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#467: FILE: drivers/input/lirc/lirc_mceusb2.c:392:
+		printk(DRIVER_NAME "[?]: set_use_inc called with no context\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_use_inc', this function's name, in a string
#467: FILE: drivers/input/lirc/lirc_mceusb2.c:392:
+		printk(DRIVER_NAME "[?]: set_use_inc called with no context\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#486: FILE: drivers/input/lirc/lirc_mceusb2.c:411:
+		printk(DRIVER_NAME "[?]: set_use_dec called with no context\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_use_dec', this function's name, in a string
#486: FILE: drivers/input/lirc/lirc_mceusb2.c:411:
+		printk(DRIVER_NAME "[?]: set_use_dec called with no context\n");

CHECK:SPACING: No space is necessary after a cast
#502: FILE: drivers/input/lirc/lirc_mceusb2.c:427:
+				    (unsigned char *) &ir->lircdata);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#541: FILE: drivers/input/lirc/lirc_mceusb2.c:466:
+			switch (ir->buf_in[i]) {
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#564: FILE: drivers/input/lirc/lirc_mceusb2.c:489:
+				     j <= packet_len && (i+j < buf_len);
 				                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#579: FILE: drivers/input/lirc/lirc_mceusb2.c:504:
+						 MCE_PULSE_MASK)*MCE_TIME_UNIT;
 						                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#590: FILE: drivers/input/lirc/lirc_mceusb2.c:515:
+				/* A transmission containing one or
+				   more consecutive ir commands always

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#593: FILE: drivers/input/lirc/lirc_mceusb2.c:518:
+				   0x00 0x00 0x80 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#596: FILE: drivers/input/lirc/lirc_mceusb2.c:521:
+		/*
+		Uncomment this if the last 100ms

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: drivers/input/lirc/lirc_mceusb2.c:557:
+
+

WARNING:TYPO_SPELLING: 'Singnal' may be misspelled - perhaps 'Signal'?
#640: FILE: drivers/input/lirc/lirc_mceusb2.c:565:
+	unsigned long signal_duration = 0; /* Singnal length in us */
 	                                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#655: FILE: drivers/input/lirc/lirc_mceusb2.c:580:
+	if (count > LIRCBUF_SIZE || count%2 == 0)
 	                                 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmdcount < MCE_CMDBUF_SIZE'
#673: FILE: drivers/input/lirc/lirc_mceusb2.c:598:
+			if ((cmdcount < MCE_CMDBUF_SIZE) &&
+			    (cmdcount - MCE_TX_HEADER_LENGTH) %
+			     MCE_CODE_LENGTH == 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#706: FILE: drivers/input/lirc/lirc_mceusb2.c:631:
+	/* The lircd gap calculation expects the write function to
+	   wait the time it takes for the ircommand to be sent before

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#707: FILE: drivers/input/lirc/lirc_mceusb2.c:632:
+	   it returns. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#727: FILE: drivers/input/lirc/lirc_mceusb2.c:652:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#737: FILE: drivers/input/lirc/lirc_mceusb2.c:662:
+	if (ir->carrier_freq != carrier) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#741: FILE: drivers/input/lirc/lirc_mceusb2.c:666:
+			dprintk(DRIVER_NAME "[%d]: SET_CARRIER disabling "
+				"carrier modulation\n", ir->devnum);

WARNING:SPLIT_STRING: quoted string split across lines
#755: FILE: drivers/input/lirc/lirc_mceusb2.c:680:
+				dprintk(DRIVER_NAME "[%d]: SET_CARRIER "
+					"requesting %d Hz\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#759: FILE: drivers/input/lirc/lirc_mceusb2.c:684:
+				/* Transmit the new carrier to the mce
+				   device */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#759: FILE: drivers/input/lirc/lirc_mceusb2.c:684:
+				   device */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#769: FILE: drivers/input/lirc/lirc_mceusb2.c:694:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#774: FILE: drivers/input/lirc/lirc_mceusb2.c:699:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#788: FILE: drivers/input/lirc/lirc_mceusb2.c:713:
+
+

CHECK:SPACING: No space is necessary after a cast
#792: FILE: drivers/input/lirc/lirc_mceusb2.c:717:
+		result = get_user(ivalue, (unsigned int *) arg);

CHECK:SPACING: No space is necessary after a cast
#813: FILE: drivers/input/lirc/lirc_mceusb2.c:738:
+				  (unsigned long *) arg);

CHECK:SPACING: No space is necessary after a cast
#821: FILE: drivers/input/lirc/lirc_mceusb2.c:746:
+		result = get_user(lvalue, (unsigned long *) arg);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#825: FILE: drivers/input/lirc/lirc_mceusb2.c:750:
+		if (lvalue != (LIRC_MODE_PULSE&LIRC_CAN_SEND_MASK))
 		                              ^

CHECK:SPACING: No space is necessary after a cast
#831: FILE: drivers/input/lirc/lirc_mceusb2.c:756:
+		result = get_user(ivalue, (unsigned int *) arg);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#845: FILE: drivers/input/lirc/lirc_mceusb2.c:770:
+static struct file_operations lirc_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#849: FILE: drivers/input/lirc/lirc_mceusb2.c:774:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: drivers/input/lirc/lirc_mceusb2.c:776:
+static int usb_remote_probe(struct usb_interface *intf,
+				const struct usb_device_id *id)

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#880: FILE: drivers/input/lirc/lirc_mceusb2.c:805:
+	for (i = 0; i < idesc->desc.bNumEndpoints; ++i) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ep_in == NULL'
#883: FILE: drivers/input/lirc/lirc_mceusb2.c:808:
+		if ((ep_in == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)
+			    == USB_DIR_IN)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_INT))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_in"
#883: FILE: drivers/input/lirc/lirc_mceusb2.c:808:
+		if ((ep_in == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#884: FILE: drivers/input/lirc/lirc_mceusb2.c:809:
+		if ((ep_in == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#886: FILE: drivers/input/lirc/lirc_mceusb2.c:811:
+			    == USB_DIR_IN)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#886: FILE: drivers/input/lirc/lirc_mceusb2.c:811:
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#888: FILE: drivers/input/lirc/lirc_mceusb2.c:813:
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#890: FILE: drivers/input/lirc/lirc_mceusb2.c:815:
+			    == USB_ENDPOINT_XFER_INT))) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#892: FILE: drivers/input/lirc/lirc_mceusb2.c:817:
+			dprintk(DRIVER_NAME ": acceptable inbound endpoint "
+				"found\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ep_out == NULL'
#905: FILE: drivers/input/lirc/lirc_mceusb2.c:830:
+		if ((ep_out == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)
+			    == USB_DIR_OUT)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_INT))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_out"
#905: FILE: drivers/input/lirc/lirc_mceusb2.c:830:
+		if ((ep_out == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#906: FILE: drivers/input/lirc/lirc_mceusb2.c:831:
+		if ((ep_out == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#908: FILE: drivers/input/lirc/lirc_mceusb2.c:833:
+			    == USB_DIR_OUT)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#910: FILE: drivers/input/lirc/lirc_mceusb2.c:835:
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#912: FILE: drivers/input/lirc/lirc_mceusb2.c:837:
+			    == USB_ENDPOINT_XFER_INT))) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#914: FILE: drivers/input/lirc/lirc_mceusb2.c:839:
+			dprintk(DRIVER_NAME ": acceptable outbound endpoint "
+				"found\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_in"
#927: FILE: drivers/input/lirc/lirc_mceusb2.c:852:
+	if (ep_in == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ir)...) over kmalloc(sizeof(struct irctl)...)
#938: FILE: drivers/input/lirc/lirc_mceusb2.c:863:
+	ir = kmalloc(sizeof(struct irctl), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*plugin)...) over kmalloc(sizeof(struct lirc_plugin)...)
#946: FILE: drivers/input/lirc/lirc_mceusb2.c:871:
+	plugin = kmalloc(sizeof(struct lirc_plugin), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rbuf)...) over kmalloc(sizeof(struct lirc_buffer)...)
#952: FILE: drivers/input/lirc/lirc_mceusb2.c:877:
+	rbuf = kmalloc(sizeof(struct lirc_buffer), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#1002: FILE: drivers/input/lirc/lirc_mceusb2.c:927:
+	/* free allocated memory incase of failure */
 	                         ^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1017: FILE: drivers/input/lirc/lirc_mceusb2.c:942:
+		printk(DRIVER_NAME "[%d]: out of memory (code=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1018: FILE: drivers/input/lirc/lirc_mceusb2.c:943:
+		printk(DRIVER_NAME "[%d]: out of memory (code=%d)\n",
+			devnum, mem_failure);

CHECK:CAMELCASE: Avoid CamelCase: <iManufacturer>
#1041: FILE: drivers/input/lirc/lirc_mceusb2.c:966:
+	if (dev->descriptor.iManufacturer

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1042: FILE: drivers/input/lirc/lirc_mceusb2.c:967:
+	if (dev->descriptor.iManufacturer
+		&& usb_string(dev, dev->descriptor.iManufacturer, buf, 63) > 0)

CHECK:CAMELCASE: Avoid CamelCase: <iProduct>
#1044: FILE: drivers/input/lirc/lirc_mceusb2.c:969:
+	if (dev->descriptor.iProduct

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1045: FILE: drivers/input/lirc/lirc_mceusb2.c:970:
+	if (dev->descriptor.iProduct
+		&& usb_string(dev, dev->descriptor.iProduct, buf, 63) > 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1047: FILE: drivers/input/lirc/lirc_mceusb2.c:972:
+	printk(DRIVER_NAME "[%d]: %s on usb%d:%d\n", devnum, name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: drivers/input/lirc/lirc_mceusb2.c:977:
+	usb_fill_int_urb(ir->urb_in, dev, pipe, ir->buf_in,
+		maxp, (usb_complete_t) usb_remote_recv, ir, ep_in->bInterval);

CHECK:SPACING: No space is necessary after a cast
#1052: FILE: drivers/input/lirc/lirc_mceusb2.c:977:
+		maxp, (usb_complete_t) usb_remote_recv, ir, ep_in->bInterval);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1068: FILE: drivers/input/lirc/lirc_mceusb2.c:993:
+		printk(DRIVER_NAME "[%d]: usb reset config ret %x\n",

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#1089: FILE: drivers/input/lirc/lirc_mceusb2.c:1014:
+		 * they start with 0x9f - but the async callback doesnt handle
 		                                                 ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1109: FILE: drivers/input/lirc/lirc_mceusb2.c:1034:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1135: FILE: drivers/input/lirc/lirc_mceusb2.c:1060:
+	struct irctl *ir = usb_get_intfdata(intf);
+	printk(DRIVER_NAME "[%d]: suspend\n", ir->devnum);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1135: FILE: drivers/input/lirc/lirc_mceusb2.c:1060:
+	printk(DRIVER_NAME "[%d]: suspend\n", ir->devnum);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1143: FILE: drivers/input/lirc/lirc_mceusb2.c:1068:
+	struct irctl *ir = usb_get_intfdata(intf);
+	printk(DRIVER_NAME "[%d]: resume\n", ir->devnum);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1143: FILE: drivers/input/lirc/lirc_mceusb2.c:1068:
+	printk(DRIVER_NAME "[%d]: resume\n", ir->devnum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1163: FILE: drivers/input/lirc/lirc_mceusb2.c:1088:
+	printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1164: FILE: drivers/input/lirc/lirc_mceusb2.c:1089:
+	printk(KERN_INFO DRIVER_NAME ": " DRIVER_DESC " " DRIVER_VERSION "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1165: FILE: drivers/input/lirc/lirc_mceusb2.c:1090:
+	printk(KERN_INFO DRIVER_NAME ": " DRIVER_AUTHOR "\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1172: FILE: drivers/input/lirc/lirc_mceusb2.c:1097:
+		printk(DRIVER_NAME ": usb register failed, result = %d\n", i);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 42 warnings, 63 checks, 1137 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
