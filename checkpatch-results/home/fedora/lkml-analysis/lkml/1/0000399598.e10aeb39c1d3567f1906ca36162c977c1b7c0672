ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: arch/mips/kernel/irixelf.c:47:
+                          struct file *file, unsigned long limit);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: arch/mips/kernel/irixelf.c:47:
+                          struct file *file, unsigned long limit);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: arch/mips/kernel/irixelf.c:1091:
+static int irix_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#89: FILE: arch/sparc64/kernel/binfmt_aout32.c:38:
+static int aout32_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: arch/sparc64/kernel/binfmt_aout32.c:38:
+static int aout32_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#98: FILE: arch/sparc64/kernel/binfmt_aout32.c:86:
+static int aout32_core_dump(long signr, struct pt_regs *regs, struct file *file, unsigned long limit)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#108: FILE: arch/sparc64/kernel/binfmt_aout32.c:105:
+	if ((dump.u_dsize+dump.u_ssize) > limit)
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dump.u_ssize'
#114: FILE: arch/sparc64/kernel/binfmt_aout32.c:109:
+	if ((dump.u_ssize) > limit)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#127: FILE: arch/x86_64/ia32/ia32_aout.c:43:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: arch/x86_64/ia32/ia32_aout.c:43:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: arch/x86_64/ia32/ia32_aout.c:151:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: arch/x86_64/ia32/ia32_aout.c:171:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: arch/x86_64/ia32/ia32_aout.c:171:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#152: FILE: arch/x86_64/ia32/ia32_aout.c:175:
+	if ((dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#165: FILE: fs/binfmt_aout.c:34:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: fs/binfmt_aout.c:34:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: fs/binfmt_aout.c:91:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: fs/binfmt_aout.c:126:
+	if ((dump.u_dsize+dump.u_ssize) > limit)
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: fs/binfmt_aout.c:129:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: fs/binfmt_aout.c:129:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dump.u_ssize'
#197: FILE: fs/binfmt_aout.c:135:
+	if ((dump.u_ssize) > limit)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: fs/binfmt_aout.c:138:
+	if ((dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#275: FILE: fs/binfmt_flat.c:78:
+static int flat_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: fs/binfmt_flat.c:78:
+static int flat_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: fs/binfmt_flat.c:93:
+static int flat_core_dump(long signr, struct pt_regs * regs, struct file *file, unsigned long limit)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: fs/binfmt_som.c:47:
+static int som_core_dump(long signr, struct pt_regs * regs, unsigned long limit);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: fs/exec.c:1775:
+^I * at which point file size limits and permissions will be imposed $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ispipe'
#335: FILE: fs/exec.c:1778:
+	if ((!ispipe) &&
+	   (core_limit < binfmt->min_coredump))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'core_limit < binfmt->min_coredump'
#335: FILE: fs/exec.c:1778:
+	if ((!ispipe) &&
+	   (core_limit < binfmt->min_coredump))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: fs/exec.c:1779:
+	if ((!ispipe) &&
+	   (core_limit < binfmt->min_coredump))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#362: FILE: include/linux/binfmts.h:70:
+	int (*core_dump)(long signr, struct pt_regs * regs, struct file * file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#362: FILE: include/linux/binfmts.h:70:
+	int (*core_dump)(long signr, struct pt_regs * regs, struct file * file, unsigned long limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#362: FILE: include/linux/binfmts.h:70:
+	int (*core_dump)(long signr, struct pt_regs * regs, struct file * file, unsigned long limit);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 7 warnings, 13 checks, 250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
