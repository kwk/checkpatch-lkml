WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
This is the second revision of the patch: it have been re-written to reduce the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#92: FILE: kernel/module.c:69:
+ * Siarhei Liakh, Xuxian Jiang  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#95: FILE: kernel/module.c:72:
+ * memory regions occupies */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'BASE' - possible side-effects?
#96: FILE: kernel/module.c:73:
+#define NUMBER_OF_PAGES(BASE, SIZE) ((unsigned long) \
+	(((unsigned long) BASE + (unsigned long) SIZE) >> PAGE_SHIFT) - \
+	(((unsigned long) BASE) >> PAGE_SHIFT) + ((SIZE > 0) ? 1 : 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'BASE' may be better as '(BASE)' to avoid precedence issues
#96: FILE: kernel/module.c:73:
+#define NUMBER_OF_PAGES(BASE, SIZE) ((unsigned long) \
+	(((unsigned long) BASE + (unsigned long) SIZE) >> PAGE_SHIFT) - \
+	(((unsigned long) BASE) >> PAGE_SHIFT) + ((SIZE > 0) ? 1 : 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#96: FILE: kernel/module.c:73:
+#define NUMBER_OF_PAGES(BASE, SIZE) ((unsigned long) \
+	(((unsigned long) BASE + (unsigned long) SIZE) >> PAGE_SHIFT) - \
+	(((unsigned long) BASE) >> PAGE_SHIFT) + ((SIZE > 0) ? 1 : 0))

CHECK:SPACING: No space is necessary after a cast
#97: FILE: kernel/module.c:74:
+	(((unsigned long) BASE + (unsigned long) SIZE) >> PAGE_SHIFT) - \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#98: FILE: kernel/module.c:75:
+	(((unsigned long) BASE) >> PAGE_SHIFT) + ((SIZE > 0) ? 1 : 0))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: kernel/module.c:78:
+#define SET_SECTION_RO_NX(BASE, TEXT_PAGES, RO_PAGES, TOTAL_PAGES) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'BASE' - possible side-effects?
#101: FILE: kernel/module.c:78:
+#define SET_SECTION_RO_NX(BASE, TEXT_PAGES, RO_PAGES, TOTAL_PAGES) 	\
+	do {								\
+		DEBUGP("MODULE SECTION: 0x%lx %lu\n"			\
+			"  RO: 0x%lx %lu\n"				\
+			"  NX: 0x%lx %lu\n",				\
+			(unsigned long)BASE, (unsigned long)TOTAL_PAGES,\
+			(unsigned long)BASE, (unsigned long)RO_PAGES,	\
+			(unsigned long)BASE +				\
+			  ((unsigned long)TEXT_PAGES << PAGE_SHIFT),	\
+			(unsigned long)TOTAL_PAGES -			\
+			  (unsigned long)TEXT_PAGES);			\
+		if (RO_PAGES > 0)					\
+			set_memory_ro((unsigned long)BASE,		\
+					(unsigned long)RO_PAGES);	\
+		if (TOTAL_PAGES > TEXT_PAGES)				\
+			set_memory_nx((unsigned long)BASE + 		\
+					  ((unsigned long)TEXT_PAGES <<	\
+					    PAGE_SHIFT) ,		\
+					(unsigned long)TOTAL_PAGES -	\
+					  (unsigned long)TEXT_PAGES);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'TEXT_PAGES' - possible side-effects?
#101: FILE: kernel/module.c:78:
+#define SET_SECTION_RO_NX(BASE, TEXT_PAGES, RO_PAGES, TOTAL_PAGES) 	\
+	do {								\
+		DEBUGP("MODULE SECTION: 0x%lx %lu\n"			\
+			"  RO: 0x%lx %lu\n"				\
+			"  NX: 0x%lx %lu\n",				\
+			(unsigned long)BASE, (unsigned long)TOTAL_PAGES,\
+			(unsigned long)BASE, (unsigned long)RO_PAGES,	\
+			(unsigned long)BASE +				\
+			  ((unsigned long)TEXT_PAGES << PAGE_SHIFT),	\
+			(unsigned long)TOTAL_PAGES -			\
+			  (unsigned long)TEXT_PAGES);			\
+		if (RO_PAGES > 0)					\
+			set_memory_ro((unsigned long)BASE,		\
+					(unsigned long)RO_PAGES);	\
+		if (TOTAL_PAGES > TEXT_PAGES)				\
+			set_memory_nx((unsigned long)BASE + 		\
+					  ((unsigned long)TEXT_PAGES <<	\
+					    PAGE_SHIFT) ,		\
+					(unsigned long)TOTAL_PAGES -	\
+					  (unsigned long)TEXT_PAGES);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'TEXT_PAGES' may be better as '(TEXT_PAGES)' to avoid precedence issues
#101: FILE: kernel/module.c:78:
+#define SET_SECTION_RO_NX(BASE, TEXT_PAGES, RO_PAGES, TOTAL_PAGES) 	\
+	do {								\
+		DEBUGP("MODULE SECTION: 0x%lx %lu\n"			\
+			"  RO: 0x%lx %lu\n"				\
+			"  NX: 0x%lx %lu\n",				\
+			(unsigned long)BASE, (unsigned long)TOTAL_PAGES,\
+			(unsigned long)BASE, (unsigned long)RO_PAGES,	\
+			(unsigned long)BASE +				\
+			  ((unsigned long)TEXT_PAGES << PAGE_SHIFT),	\
+			(unsigned long)TOTAL_PAGES -			\
+			  (unsigned long)TEXT_PAGES);			\
+		if (RO_PAGES > 0)					\
+			set_memory_ro((unsigned long)BASE,		\
+					(unsigned long)RO_PAGES);	\
+		if (TOTAL_PAGES > TEXT_PAGES)				\
+			set_memory_nx((unsigned long)BASE + 		\
+					  ((unsigned long)TEXT_PAGES <<	\
+					    PAGE_SHIFT) ,		\
+					(unsigned long)TOTAL_PAGES -	\
+					  (unsigned long)TEXT_PAGES);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'RO_PAGES' - possible side-effects?
#101: FILE: kernel/module.c:78:
+#define SET_SECTION_RO_NX(BASE, TEXT_PAGES, RO_PAGES, TOTAL_PAGES) 	\
+	do {								\
+		DEBUGP("MODULE SECTION: 0x%lx %lu\n"			\
+			"  RO: 0x%lx %lu\n"				\
+			"  NX: 0x%lx %lu\n",				\
+			(unsigned long)BASE, (unsigned long)TOTAL_PAGES,\
+			(unsigned long)BASE, (unsigned long)RO_PAGES,	\
+			(unsigned long)BASE +				\
+			  ((unsigned long)TEXT_PAGES << PAGE_SHIFT),	\
+			(unsigned long)TOTAL_PAGES -			\
+			  (unsigned long)TEXT_PAGES);			\
+		if (RO_PAGES > 0)					\
+			set_memory_ro((unsigned long)BASE,		\
+					(unsigned long)RO_PAGES);	\
+		if (TOTAL_PAGES > TEXT_PAGES)				\
+			set_memory_nx((unsigned long)BASE + 		\
+					  ((unsigned long)TEXT_PAGES <<	\
+					    PAGE_SHIFT) ,		\
+					(unsigned long)TOTAL_PAGES -	\
+					  (unsigned long)TEXT_PAGES);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'TOTAL_PAGES' - possible side-effects?
#101: FILE: kernel/module.c:78:
+#define SET_SECTION_RO_NX(BASE, TEXT_PAGES, RO_PAGES, TOTAL_PAGES) 	\
+	do {								\
+		DEBUGP("MODULE SECTION: 0x%lx %lu\n"			\
+			"  RO: 0x%lx %lu\n"				\
+			"  NX: 0x%lx %lu\n",				\
+			(unsigned long)BASE, (unsigned long)TOTAL_PAGES,\
+			(unsigned long)BASE, (unsigned long)RO_PAGES,	\
+			(unsigned long)BASE +				\
+			  ((unsigned long)TEXT_PAGES << PAGE_SHIFT),	\
+			(unsigned long)TOTAL_PAGES -			\
+			  (unsigned long)TEXT_PAGES);			\
+		if (RO_PAGES > 0)					\
+			set_memory_ro((unsigned long)BASE,		\
+					(unsigned long)RO_PAGES);	\
+		if (TOTAL_PAGES > TEXT_PAGES)				\
+			set_memory_nx((unsigned long)BASE + 		\
+					  ((unsigned long)TEXT_PAGES <<	\
+					    PAGE_SHIFT) ,		\
+					(unsigned long)TOTAL_PAGES -	\
+					  (unsigned long)TEXT_PAGES);	\
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: kernel/module.c:93:
+^I^I^Iset_memory_nx((unsigned long)BASE + ^I^I\$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#118: FILE: kernel/module.c:95:
+					    PAGE_SHIFT) ,		\
 					                ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: kernel/module.c:100:
+#define PROTECT_MODULE(MOD) ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MOD' - possible side-effects?
#123: FILE: kernel/module.c:100:
+#define PROTECT_MODULE(MOD) 					\
+	do {							\
+		/* Set RO and NX regions for core */		\
+		SET_SECTION_RO_NX(MOD->module_core,		\
+			NUMBER_OF_PAGES(MOD->module_core,	\
+					 MOD->core_text_size),	\
+			NUMBER_OF_PAGES(MOD->module_core,	\
+					 MOD->core_ro_size),	\
+			NUMBER_OF_PAGES(MOD->module_core,	\
+					 MOD->core_size));	\
+		/* Set RO and NX regions for init */		\
+		SET_SECTION_RO_NX(MOD->module_init,		\
+			NUMBER_OF_PAGES(MOD->module_init,	\
+					 MOD->init_text_size),	\
+			NUMBER_OF_PAGES(MOD->module_init,	\
+					 MOD->init_ro_size),	\
+			NUMBER_OF_PAGES(MOD->module_init,	\
+					 MOD->init_size));	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'MOD' may be better as '(MOD)' to avoid precedence issues
#123: FILE: kernel/module.c:100:
+#define PROTECT_MODULE(MOD) 					\
+	do {							\
+		/* Set RO and NX regions for core */		\
+		SET_SECTION_RO_NX(MOD->module_core,		\
+			NUMBER_OF_PAGES(MOD->module_core,	\
+					 MOD->core_text_size),	\
+			NUMBER_OF_PAGES(MOD->module_core,	\
+					 MOD->core_ro_size),	\
+			NUMBER_OF_PAGES(MOD->module_core,	\
+					 MOD->core_size));	\
+		/* Set RO and NX regions for init */		\
+		SET_SECTION_RO_NX(MOD->module_init,		\
+			NUMBER_OF_PAGES(MOD->module_init,	\
+					 MOD->init_text_size),	\
+			NUMBER_OF_PAGES(MOD->module_init,	\
+					 MOD->init_ro_size),	\
+			NUMBER_OF_PAGES(MOD->module_init,	\
+					 MOD->init_size));	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#144: FILE: kernel/module.c:121:
+#define SET_ALIGNMENT_FLAG(ALIGN_FLAG, VAL)			\
+	do { ALIGN_FLAG = VAL; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SECTION_SIZE' - possible side-effects?
#147: FILE: kernel/module.c:124:
+#define ALIGN_MODULE_SECTION(SECTION_SIZE, ALIGN_FLAG)		\
+	do {							\
+		if (ALIGN_FLAG) {				\
+			SECTION_SIZE = ALIGN(SECTION_SIZE,	\
+						PAGE_SIZE);	\
+			ALIGN_FLAG = 0;				\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ALIGN_FLAG' - possible side-effects?
#147: FILE: kernel/module.c:124:
+#define ALIGN_MODULE_SECTION(SECTION_SIZE, ALIGN_FLAG)		\
+	do {							\
+		if (ALIGN_FLAG) {				\
+			SECTION_SIZE = ALIGN(SECTION_SIZE,	\
+						PAGE_SIZE);	\
+			ALIGN_FLAG = 0;				\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'SEC_GROUP' may be better as '(SEC_GROUP)' to avoid precedence issues
#156: FILE: kernel/module.c:133:
+#define CATCH_MODULE_RO_SECTION(SEC_GROUP, RO_SIZE, SIZE, ALIGN_FLAG)	\
+	do {								\
+		if (SEC_GROUP == 1) {					\
+			/* module RO size (text+rodata)	*/		\
+			RO_SIZE = SIZE;					\
+			/* next section should start on new page */	\
+			SET_ALIGNMENT_FLAG(ALIGN_FLAG, 1);		\
+		}							\
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: kernel/module.c:143:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: kernel/module.c:145:
+ * module_free() is platform-specific */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: kernel/module.c:154:
+		DEBUGP("RELEASING MODULE CORE: 0x%lx %lu\n",
+				(unsigned long)mod->module_core, total_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: kernel/module.c:162:
+		DEBUGP("RELEASING MODULE INIT: 0x%lx %lu\n",
+				(unsigned long)mod->module_init, total_pages);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#194: FILE: kernel/module.c:171:
+#define PROTECT_MODULE(MOD) do { ; } while (0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#195: FILE: kernel/module.c:172:
+#define generic_module_free(mod, module_region) module_free(mod ,
                                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#195: FILE: kernel/module.c:172:
+#define generic_module_free(mod, module_region) module_free(mod ,

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#196: FILE: kernel/module.c:172:
module_region)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#206: FILE: kernel/module.c:182:
+ * module_alloc() is platform-specific */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000103030.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 18 checks, 248 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000103030.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
