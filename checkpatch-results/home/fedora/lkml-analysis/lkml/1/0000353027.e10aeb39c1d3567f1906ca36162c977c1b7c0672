WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
Form a single percpu.h from percpu_32.h and percpu_64.h. Both are now pretty

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: include/asm-x86/percpu.h:1:
+#ifndef _ASM_X86_PERCPU_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#55: FILE: include/asm-x86/percpu.h:8:
+/* Same as asm-generic/percpu.h, except that we store the per cpu offset
+   in the PDA. Longer term the PDA and every per cpu variable

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#57: FILE: include/asm-x86/percpu.h:10:
+   from %gs */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#89: FILE: include/asm-x86/percpu.h:42:
+#define PER_CPU(var, reg)				\
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
+	lea per_cpu__##var(reg), reg

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#89: FILE: include/asm-x86/percpu.h:42:
+#define PER_CPU(var, reg)				\
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
+	lea per_cpu__##var(reg), reg

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#90: FILE: include/asm-x86/percpu.h:43:
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#90: FILE: include/asm-x86/percpu.h:43:
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#92: FILE: include/asm-x86/percpu.h:45:
+#define PER_CPU_VAR(var)	%fs:per_cpu__##var
                         	^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#92: FILE: include/asm-x86/percpu.h:45:
+#define PER_CPU_VAR(var)	%fs:per_cpu__##var
                         	   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#92: FILE: include/asm-x86/percpu.h:45:
+#define PER_CPU_VAR(var)	%fs:per_cpu__##var

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#94: FILE: include/asm-x86/percpu.h:47:
+#define PER_CPU(var, reg)			\
+	movl $per_cpu__##var, reg

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: include/asm-x86/percpu.h:85:
+ * don't give an lvalue though). */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/asm-x86/percpu.h:86:
+extern void __bad_percpu_size(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: include/asm-x86/percpu.h:88:
+#define percpu_to_op(op,var,val)				\
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: include/asm-x86/percpu.h:88:
+#define percpu_to_op(op,var,val)				\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#135: FILE: include/asm-x86/percpu.h:88:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#135: FILE: include/asm-x86/percpu.h:88:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#135: FILE: include/asm-x86/percpu.h:88:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#137: FILE: include/asm-x86/percpu.h:90:
+		typedef typeof(var) T__;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#138: FILE: include/asm-x86/percpu.h:91:
+		if (0) { T__ tmp__; tmp__ = (val); }		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#141: FILE: include/asm-x86/percpu.h:94:
+			asm(op "b %1,"__percpu_seg"%0"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#143: FILE: include/asm-x86/percpu.h:96:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#146: FILE: include/asm-x86/percpu.h:99:
+			asm(op "w %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#148: FILE: include/asm-x86/percpu.h:101:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#151: FILE: include/asm-x86/percpu.h:104:
+			asm(op "l %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#153: FILE: include/asm-x86/percpu.h:106:
+			    :"ri" ((T__)val));			\
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#155: FILE: include/asm-x86/percpu.h:108:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: include/asm-x86/percpu.h:112:
+#define percpu_from_op(op,var)					\
                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#159: FILE: include/asm-x86/percpu.h:112:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#159: FILE: include/asm-x86/percpu.h:112:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#164: FILE: include/asm-x86/percpu.h:117:
+			asm(op "b "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#169: FILE: include/asm-x86/percpu.h:122:
+			asm(op "w "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#174: FILE: include/asm-x86/percpu.h:127:
+			asm(op "l "__percpu_seg"%1,%0"		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#178: FILE: include/asm-x86/percpu.h:131:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: include/asm-x86/percpu.h:136:
+#define x86_write_percpu(var,val) percpu_to_op("mov", per_cpu__##var, val)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: include/asm-x86/percpu.h:137:
+#define x86_add_percpu(var,val) percpu_to_op("add", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: include/asm-x86/percpu.h:138:
+#define x86_sub_percpu(var,val) percpu_to_op("sub", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#186: FILE: include/asm-x86/percpu.h:139:
+#define x86_or_percpu(var,val) percpu_to_op("or", per_cpu__##var, val)
                          ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 6 warnings, 17 checks, 146 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
