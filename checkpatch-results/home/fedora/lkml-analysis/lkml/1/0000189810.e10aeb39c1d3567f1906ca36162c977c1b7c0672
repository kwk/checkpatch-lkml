WARNING:TYPO_SPELLING: 'implementes' may be misspelled - perhaps 'implements'?
#32: 
This patch implementes all supported directory operations
           ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/pohmelfs/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#94: FILE: fs/pohmelfs/dir.c:51:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp->hash == hash'
#104: FILE: fs/pohmelfs/dir.c:61:
+	if (tmp && (tmp->hash == hash))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: fs/pohmelfs/dir.c:84:
+static struct pohmelfs_name *pohmelfs_insert_hash(struct pohmelfs_inode *pi,
+		struct pohmelfs_name *new)

CHECK:BRACES: braces {} should be used on all arms of this statement
#139: FILE: fs/pohmelfs/dir.c:96:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#143: FILE: fs/pohmelfs/dir.c:100:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#150: FILE: fs/pohmelfs/dir.c:107:
+		printk("%s: exist: parent: %llu, ino: %llu, hash: %x, len: %u, data: '%s', "

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: fs/pohmelfs/dir.c:108:
+^I^I^I^I           "new: ino: %llu, hash: %x, len: %u, data: '%s'.\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPLIT_STRING: quoted string split across lines
#151: FILE: fs/pohmelfs/dir.c:108:
+		printk("%s: exist: parent: %llu, ino: %llu, hash: %x, len: %u, data: '%s', "
+				           "new: ino: %llu, hash: %x, len: %u, data: '%s'.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*n)...) over kzalloc(sizeof(struct pohmelfs_name)...)
#219: FILE: fs/pohmelfs/dir.c:176:
+	n = kzalloc(sizeof(struct pohmelfs_name) + len, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: fs/pohmelfs/dir.c:183:
+	n->data = (char *)(n+1);
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: fs/pohmelfs/dir.c:192:
+static int pohmelfs_add_dir(struct pohmelfs_sb *psb, struct pohmelfs_inode *parent,
+		struct pohmelfs_inode *npi, struct qstr *str, unsigned int mode, int link)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: fs/pohmelfs/dir.c:209:
+	if (!(str->len == 1 && str->name[0] == '.') &&
+			!(str->len == 2 && str->name[0] == '.' && str->name[1] == '.')) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: fs/pohmelfs/dir.c:248:
+struct pohmelfs_inode *pohmelfs_new_inode(struct pohmelfs_sb *psb,
+		struct pohmelfs_inode *parent, struct qstr *str,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: fs/pohmelfs/dir.c:256:
+	dprintk("%s: creating inode: parent: %llu, ino: %llu, str: %p.\n",
+			__func__, (parent)?parent->ino:0, info->ino, str);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#299: FILE: fs/pohmelfs/dir.c:256:
+			__func__, (parent)?parent->ino:0, info->ino, str);
 			                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#299: FILE: fs/pohmelfs/dir.c:256:
+			__func__, (parent)?parent->ino:0, info->ino, str);
 			                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: fs/pohmelfs/dir.c:269:
+		dprintk("%s: filling VFS inode: %lu/%llu.\n",
+				__func__, new->i_ino, info->ino);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#330: FILE: fs/pohmelfs/dir.c:287:
+			err = pohmelfs_add_dir(psb, npi, (parent)?parent:npi, &s,
 			                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#330: FILE: fs/pohmelfs/dir.c:287:
+			err = pohmelfs_add_dir(psb, npi, (parent)?parent:npi, &s,
 			                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/pohmelfs/dir.c:288:
+			err = pohmelfs_add_dir(psb, npi, (parent)?parent:npi, &s,
+					(parent)?parent->vfs_inode.i_mode:npi->vfs_inode.i_mode, 0);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#331: FILE: fs/pohmelfs/dir.c:288:
+					(parent)?parent->vfs_inode.i_mode:npi->vfs_inode.i_mode, 0);
 					        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#331: FILE: fs/pohmelfs/dir.c:288:
+					(parent)?parent->vfs_inode.i_mode:npi->vfs_inode.i_mode, 0);
 					                                 ^

WARNING:LONG_LINE_STRING: line length of 107 exceeds 100 columns
#341: FILE: fs/pohmelfs/dir.c:298:
+			dprintk("%s: %s inserted name: '%s', new_offset: %llu, ino: %llu, parent: %llu.\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: fs/pohmelfs/dir.c:299:
+			dprintk("%s: %s inserted name: '%s', new_offset: %llu, ino: %llu, parent: %llu.\n",
+					__func__, (err)?"unsuccessfully":"successfully",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#342: FILE: fs/pohmelfs/dir.c:299:
+					__func__, (err)?"unsuccessfully":"successfully",
 					               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#342: FILE: fs/pohmelfs/dir.c:299:
+					__func__, (err)?"unsuccessfully":"successfully",
 					                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#364: FILE: fs/pohmelfs/dir.c:321:
+	printk("%s: putting inode: %p, npi: %p, error: %d.\n", __func__, new, npi, err);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#365: FILE: fs/pohmelfs/dir.c:322:
+	iput(new);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: fs/pohmelfs/dir.c:328:
+static int pohmelfs_remote_sync_complete(struct page **pages, unsigned int page_num,
+		void *private, int err)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: fs/pohmelfs/dir.c:356:
+	dprintk("%s: dir: %llu, state: %lx: created: %d, remote_synced: %d.\n",
+			__func__, pi->ino, pi->state, test_bit(NETFS_INODE_CREATED, &pi->state),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: fs/pohmelfs/dir.c:371:
+	err = pohmelfs_meta_command(pi, NETFS_READDIR, NETFS_TRANS_SINGLE_DST,
+			pohmelfs_remote_sync_complete, pi, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: fs/pohmelfs/dir.c:377:
+	ret = wait_event_interruptible_timeout(psb->wait,
+			test_bit(NETFS_INODE_REMOTE_SYNCED, &pi->state) || pi->error, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: fs/pohmelfs/dir.c:415:
+	dprintk("%s: parent: %llu, fpos: %llu, hash: %08lx.\n",
+			__func__, pi->ino, (u64)file->f_pos,

WARNING:SPLIT_STRING: quoted string split across lines
#479: FILE: fs/pohmelfs/dir.c:436:
+		dprintk("%s: offset: %llu, parent ino: %llu, name: '%s', len: %u, ino: %llu, "
+				"mode: %o/%o, fpos: %llu, hash: %08x.\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rb_node == &n->hash_node'
#498: FILE: fs/pohmelfs/dir.c:455:
+		if (!rb_node || (rb_node == &n->hash_node)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: fs/pohmelfs/dir.c:485:
+static int pohmelfs_lookup_single(struct pohmelfs_inode *parent,
+		struct qstr *str, u64 ino)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: fs/pohmelfs/dir.c:493:
+	err = pohmelfs_meta_command_data(parent, parent->ino, NETFS_LOOKUP,
+			(char *)str->name, NETFS_TRANS_SINGLE_DST, NULL, NULL, ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: fs/pohmelfs/dir.c:499:
+	ret = wait_event_interruptible_timeout(psb->wait,
+			!test_bit(NETFS_COMMAND_PENDING, &parent->state), ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#556: FILE: fs/pohmelfs/dir.c:513:
+	printk("%s: failed: parent: %llu, ino: %llu, name: '%s', err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: fs/pohmelfs/dir.c:514:
+	printk("%s: failed: parent: %llu, ino: %llu, name: '%s', err: %d.\n",
+			__func__, parent->ino, ino, str->name, err);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#570: FILE: fs/pohmelfs/dir.c:527:
+struct dentry *pohmelfs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: fs/pohmelfs/dir.c:552:
+	dprintk("%s: 1 ino: %lu, inode: %p, name: '%s', hash: %x, parent_state: %lx.\n",
+			__func__, ino, inode, str.name, str.hash, parent->state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: fs/pohmelfs/dir.c:561:
+	dprintk("%s: dir: %p, dir_ino: %llu, name: '%s', len: %u, dir_state: %lx, ino: %lu.\n",
+			__func__, dir, parent->ino,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#629: FILE: fs/pohmelfs/dir.c:586:
+		printk("%s: second lookup ino: %lu, inode: %p, name: '%s', hash: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: fs/pohmelfs/dir.c:587:
+		printk("%s: second lookup ino: %lu, inode: %p, name: '%s', hash: %x.\n",
+				__func__, ino, inode, str.name, str.hash);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#632: FILE: fs/pohmelfs/dir.c:589:
+			printk("%s: No inode for ino: %lu, name: '%s', hash: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: fs/pohmelfs/dir.c:590:
+			printk("%s: No inode for ino: %lu, name: '%s', hash: %x.\n",
+				__func__, ino, str.name, str.hash);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#638: FILE: fs/pohmelfs/dir.c:595:
+		printk("%s: No inode number : name: '%s', hash: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: fs/pohmelfs/dir.c:596:
+		printk("%s: No inode number : name: '%s', hash: %x.\n",
+			__func__, str.name, str.hash);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: fs/pohmelfs/dir.c:607:
+struct pohmelfs_inode *pohmelfs_create_entry_local(struct pohmelfs_sb *psb,
+	struct pohmelfs_inode *parent, struct qstr *str, u64 start, int mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: fs/pohmelfs/dir.c:614:
+	dprintk("%s: name: '%s', mode: %o, start: %llu.\n",
+			__func__, str->name, mode, start);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#665: FILE: fs/pohmelfs/dir.c:622:
+	info.nlink = S_ISDIR(mode)?2:1;
 	                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#665: FILE: fs/pohmelfs/dir.c:622:
+	info.nlink = S_ISDIR(mode)?2:1;
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: fs/pohmelfs/dir.c:671:
+	dprintk("%s: parent: %llu, inode: %llu, name: '%s', parent_nlink: %d, nlink: %d.\n",
+			__func__, parent->ino, npi->ino, dentry->d_name.name,

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#715: FILE: fs/pohmelfs/dir.c:672:
+			(signed)dir->i_nlink, (signed)npi->vfs_inode.i_nlink);

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#715: FILE: fs/pohmelfs/dir.c:672:
+			(signed)dir->i_nlink, (signed)npi->vfs_inode.i_nlink);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#724: FILE: fs/pohmelfs/dir.c:681:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: fs/pohmelfs/dir.c:681:
+static int pohmelfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: fs/pohmelfs/dir.c:722:
+	dprintk("%s: dir_ino: %llu, inode: %llu, name: '%s', nlink: %d.\n",
+			__func__, parent->ino, pi->ino,

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#766: FILE: fs/pohmelfs/dir.c:723:
+			str.name, (signed)inode->i_nlink);

CHECK:BRACES: braces {} should be used on all arms of this statement
#772: FILE: fs/pohmelfs/dir.c:729:
+		if (test_bit(NETFS_INODE_CREATED, &pi->state)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#775: FILE: fs/pohmelfs/dir.c:732:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: fs/pohmelfs/dir.c:772:
+	dprintk("%s: parent: %llu, inode: %llu, name: '%s', parent_nlink: %d, nlink: %d.\n",
+			__func__, POHMELFS_I(dir)->ino, POHMELFS_I(inode)->ino,

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#816: FILE: fs/pohmelfs/dir.c:773:
+			dentry->d_name.name, (signed)dir->i_nlink, (signed)inode->i_nlink);

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#816: FILE: fs/pohmelfs/dir.c:773:
+			dentry->d_name.name, (signed)dir->i_nlink, (signed)inode->i_nlink);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: fs/pohmelfs/dir.c:790:
+static int pohmelfs_create_link(struct pohmelfs_inode *parent, struct qstr *obj,
+		struct pohmelfs_inode *target, struct qstr *tstr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#863: FILE: fs/pohmelfs/dir.c:820:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#926: FILE: fs/pohmelfs/dir.c:883:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: fs/pohmelfs/dir.c:883:
+	dprintk("%s: parent: %llu, obj: '%s', target_inode: %llu, target_str: '%s', full: '%s'.\n",
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#926: FILE: fs/pohmelfs/dir.c:883:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#926: FILE: fs/pohmelfs/dir.c:883:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                                      ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#926: FILE: fs/pohmelfs/dir.c:883:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#926: FILE: fs/pohmelfs/dir.c:883:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: fs/pohmelfs/dir.c:891:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: fs/pohmelfs/dir.c:911:
+static int pohmelfs_link(struct dentry *old_dentry, struct inode *dir,
+	struct dentry *dentry)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRWXG | S_IRWXO' are not preferred. Consider using octal permissions '0777'.
#990: FILE: fs/pohmelfs/dir.c:947:
+	err = pohmelfs_create_entry(dir, dentry, 0, S_IFLNK | S_IRWXU | S_IRWXG | S_IRWXO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1003: FILE: fs/pohmelfs/dir.c:960:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: fs/pohmelfs/dir.c:966:
+static int pohmelfs_send_rename(struct pohmelfs_inode *pi, struct pohmelfs_inode *parent,
+		struct qstr *str)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1070: FILE: fs/pohmelfs/dir.c:1027:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: fs/pohmelfs/dir.c:1039:
+static int pohmelfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+			struct inode *new_dir, struct dentry *new_dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1091: FILE: fs/pohmelfs/dir.c:1048:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: fs/pohmelfs/dir.c:1074:
+		if (S_ISDIR(old_inode->i_mode) &&
+				new_parent->total_len <= 3)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1124: FILE: fs/pohmelfs/dir.c:1081:
+	dprintk("%s: ino: %llu, parent: %llu, name: '%s' -> parent: %llu, name: '%s'.\n",
+			__func__, old->ino, old_parent->ino, old_dentry->d_name.name,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: fs/pohmelfs/dir.c:1104:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1179: FILE: fs/pohmelfs/dir.c:1136:
+^I.lookup ^I= pohmelfs_lookup,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1189: FILE: fs/pohmelfs/path_entry.c:1:
+/*

WARNING:TYPO_SPELLING: 'pathes' may be misspelled - perhaps 'paths'?
#1218: FILE: fs/pohmelfs/path_entry.c:30:
+ * Used to create pathes to root, strings (or structures,
                   ^^^^^^

WARNING:TYPO_SPELLING: 'pathes' may be misspelled - perhaps 'paths'?
#1223: FILE: fs/pohmelfs/path_entry.c:35:
+ * with anyone else, server operates on names and pathes, not some obscure ids.
                                                   ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: fs/pohmelfs/path_entry.c:90:
+static struct pohmelfs_path_entry *pohmelfs_insert_path_entry(struct rb_root *root,
+		struct pohmelfs_path_entry *new)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1290: FILE: fs/pohmelfs/path_entry.c:102:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1294: FILE: fs/pohmelfs/path_entry.c:106:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1301: FILE: fs/pohmelfs/path_entry.c:113:
+		printk("%s: exist: ino: %llu, data: '%s', new: ino: %llu, data: '%s'.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1302: FILE: fs/pohmelfs/path_entry.c:114:
+		printk("%s: exist: ino: %llu, data: '%s', new: ino: %llu, data: '%s'.\n",
+			__func__, ret->ino, ret->name, new->ino, new->name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'e->len >= str->len'
#1356: FILE: fs/pohmelfs/path_entry.c:168:
+	if ((e->len >= str->len) && (parent_ino == e->parent->ino)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent_ino == e->parent->ino'
#1356: FILE: fs/pohmelfs/path_entry.c:168:
+	if ((e->len >= str->len) && (parent_ino == e->parent->ino)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1376: FILE: fs/pohmelfs/path_entry.c:188:
+struct pohmelfs_path_entry * pohmelfs_add_path_entry(struct pohmelfs_sb *psb,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1377: FILE: fs/pohmelfs/path_entry.c:189:
+struct pohmelfs_path_entry * pohmelfs_add_path_entry(struct pohmelfs_sb *psb,
+	u64 parent_ino, u64 ino, struct qstr *str, int link, unsigned int mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: fs/pohmelfs/path_entry.c:219:
+	dprintk("%s: parent: %llu, ino: %llu, name: '%s', len: %u.\n",
+			__func__, parent_ino, ino, e->name, e->len);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1412: FILE: fs/pohmelfs/path_entry.c:224:
+static int pohmelfs_prepare_path(struct pohmelfs_inode *pi, struct list_head *list, int len, int create)

WARNING:TYPO_SPELLING: 'stuctures' may be misspelled - perhaps 'structures'?
#1436: FILE: fs/pohmelfs/path_entry.c:248:
+ * Path is formed as set of stuctures, containing name of the object
                             ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1467: FILE: fs/pohmelfs/path_entry.c:279:
+		dprintk("%s: ino: %llu, mode: %o, is_link: %d, name: '%s', used: %d, ne_len: %u.\n",
+				__func__, e->ino, ne->mode, e->link, e->name, used, ne->len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1497: FILE: fs/pohmelfs/path_entry.c:309:
+			BUG_ON(!e->name);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: fs/pohmelfs/path_entry.c:317:
+	dprintk("%s: inode: %llu, full path: '%s', used: %d.\n",
+			__func__, pi->ino, (char *)data, used);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 31 warnings, 68 checks, 1495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
