WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#44: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#55: FILE: drivers/trec/Kconfig:7:
+config TREC
+	def_bool n
+	bool "Trace record support"
+	---help---
+	  Trace records are a light weight tracing facility
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/trec/trec.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#98: FILE: drivers/trec/trec.c:19:
+#define DPK(fmt, args...) printk(KERN_ERR "trec " fmt, ## args)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#104: FILE: drivers/trec/trec.c:25:
+struct trec_dev_struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'expermental' may be misspelled - perhaps 'experimental'?
#114: FILE: drivers/trec/trec.c:35:
+int major = 240;	/* 240 a "local/expermental" device number for the moment */
                 	                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#117: FILE: drivers/trec/trec.c:38:
+module_param(major, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#118: FILE: drivers/trec/trec.c:39:
+module_param(minor, int, S_IRUGO);

CHECK:CAMELCASE: Avoid CamelCase: <pFile>
#123: FILE: drivers/trec/trec.c:44:
+static int trec_open(struct inode *inode, struct file *pFile);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:CONST_STRUCT: struct file_operations should normally be const
#129: FILE: drivers/trec/trec.c:50:
+struct file_operations trec_f_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#136: FILE: drivers/trec/trec.c:57:
+	uint64_t	tsc;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#149: FILE: drivers/trec/trec.c:70:
+	struct trec_buffer_struct *	pNext;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <pNext>
#149: FILE: drivers/trec/trec.c:70:
+	struct trec_buffer_struct *	pNext;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#150: FILE: drivers/trec/trec.c:71:
+	struct trec_struct *		pCur;

CHECK:CAMELCASE: Avoid CamelCase: <pCur>
#150: FILE: drivers/trec/trec.c:71:
+	struct trec_struct *		pCur;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#151: FILE: drivers/trec/trec.c:72:
+	struct trec_struct *		pEnd;

CHECK:CAMELCASE: Avoid CamelCase: <pEnd>
#151: FILE: drivers/trec/trec.c:72:
+	struct trec_struct *		pEnd;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: drivers/trec/trec.c:81:
+struct trec_buffer_struct ^IgTrec_buffers[2][TREC_COUNT];$

CHECK:CAMELCASE: Avoid CamelCase: <gTrec_buffers>
#160: FILE: drivers/trec/trec.c:81:
+struct trec_buffer_struct 	gTrec_buffers[2][TREC_COUNT];

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#161: FILE: drivers/trec/trec.c:82:
+int				gTrec_idx = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:CAMELCASE: Avoid CamelCase: <gTrec_idx>
#161: FILE: drivers/trec/trec.c:82:
+int				gTrec_idx = 0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: drivers/trec/trec.c:83:
+spinlock_t ^I^I^IgTrec_lock = SPIN_LOCK_UNLOCKED;$

CHECK:CAMELCASE: Avoid CamelCase: <gTrec_lock>
#162: FILE: drivers/trec/trec.c:83:
+spinlock_t 			gTrec_lock = SPIN_LOCK_UNLOCKED;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#164: FILE: drivers/trec/trec.c:85:
+struct trec_buffer_struct *	pTrec_cur = NULL;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#164: FILE: drivers/trec/trec.c:85:
+struct trec_buffer_struct *	pTrec_cur = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <pTrec_cur>
#164: FILE: drivers/trec/trec.c:85:
+struct trec_buffer_struct *	pTrec_cur = NULL;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#165: FILE: drivers/trec/trec.c:86:
+struct trec_buffer_struct *	pTrec_snapshot = NULL;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#165: FILE: drivers/trec/trec.c:86:
+struct trec_buffer_struct *	pTrec_snapshot = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <pTrec_snapshot>
#165: FILE: drivers/trec/trec.c:86:
+struct trec_buffer_struct *	pTrec_snapshot = NULL;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: drivers/trec/trec.c:88:
+struct trec_dev_struct ^I^Itrec_dev;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: drivers/trec/trec.c:109:
+^I^I^Imodname = delim = ""; ^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: drivers/trec/trec.c:109:
+^I^I^Imodname = delim = ""; ^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#188: FILE: drivers/trec/trec.c:109:
+			modname = delim = ""; 		

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: drivers/trec/trec.c:111:
+		n = snprintf(b, bsize, "0x%016lx %s%s%s%s+0x%lx/0x%lx",
+			address, delim, modname, delim, symname, offset, symsize);

CHECK:CAMELCASE: Avoid CamelCase: <pTrec>
#211: FILE: drivers/trec/trec.c:132:
+			struct trec_buffer_struct *pTrec = &gTrec_buffers[i][j];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: drivers/trec/trec.c:134:
+			pTrec->pNext = &gTrec_buffers[i][(j+1) % TREC_COUNT];
 			                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: drivers/trec/trec.c:166:
+^IpTrec->tsc = rd_tsc();^I$

CHECK:CAMELCASE: Avoid CamelCase: <pCur_buffer>
#275: FILE: drivers/trec/trec.c:196:
+	struct trec_buffer_struct *pCur_buffer;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#277: FILE: drivers/trec/trec.c:198:
+	printk(KERN_ERR "\ntrec_print_snapshot:\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: drivers/trec/trec.c:209:
+^I^I^I$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#290: FILE: drivers/trec/trec.c:211:
+					pCur->tsc, pCur->pid, (void *)pCur->tsk, (void *)pCur->v1, (void

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/trec/trec.c:211:
+			n = snprintf(b, sizeof(b), KERN_ERR "t=%20llu pid=%5u tsk=%p v1=%p v2=%p",
+					pCur->tsc, pCur->pid, (void *)pCur->tsk, (void *)pCur->v1, (void

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#291: FILE: drivers/trec/trec.c:211:
*)pCur->v2);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/trec/trec.c:211:
+			n = snprintf(b, sizeof(b), KERN_ERR "t=%20llu pid=%5u tsk=%p v1=%p v2=%p",
*)pCur->v2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#292: FILE: drivers/trec/trec.c:212:
+			n += snprint_address(b+n, sizeof(b)-n, pCur->pc);
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#292: FILE: drivers/trec/trec.c:212:
+			n += snprint_address(b+n, sizeof(b)-n, pCur->pc);
 			                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#293: FILE: drivers/trec/trec.c:213:
+			printk("%s\n", b);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#298: FILE: drivers/trec/trec.c:218:
+	printk(KERN_ERR "trec_print_snapshot done\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_print_snapshot', this function's name, in a string
#298: FILE: drivers/trec/trec.c:218:
+	printk(KERN_ERR "trec_print_snapshot done\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <pDev>
#308: FILE: drivers/trec/trec.c:228:
+	struct trec_dev_struct *pDev;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_open', this function's name, in a string
#310: FILE: drivers/trec/trec.c:230:
+	DPK("trec_open: E\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_open', this function's name, in a string
#315: FILE: drivers/trec/trec.c:235:
+	DPK("trec_open: X result=%d\n", result);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_release', this function's name, in a string
#326: FILE: drivers/trec/trec.c:246:
+	DPK("trec_release: E\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/trec/trec.c:247:
+^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_release', this function's name, in a string
#328: FILE: drivers/trec/trec.c:248:
+	DPK("trec_release: X result=%d\n", result);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: drivers/trec/trec.c:257:
+^Iint ^I^Iresult;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#338: FILE: drivers/trec/trec.c:258:
+^Idev_t ^I^Idev_number = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: drivers/trec/trec.c:259:
+^Istatic struct ^Iclass *trec_class;$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#341: FILE: drivers/trec/trec.c:261:
+	DPK("trec_device_init: E\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#346: FILE: drivers/trec/trec.c:266:
+		DPK("trec_device_init: static major result=%d\n", result);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#350: FILE: drivers/trec/trec.c:270:
+		DPK("trec_device_init: dynamic major result=%d\n", result);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: drivers/trec/trec.c:271:
+^I}^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#354: FILE: drivers/trec/trec.c:274:
+		printk(KERN_WARNING "trec: can't get major %d\n", major);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: drivers/trec/trec.c:281:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#363: FILE: drivers/trec/trec.c:283:
+	if (result)
+	{

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#365: FILE: drivers/trec/trec.c:285:
+		DPK("trec_device_init: cdev_add failed\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#378: FILE: drivers/trec/trec.c:298:
+	if (pTrec_cur == NULL) {
+		trec_init();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pTrec_cur"
#378: FILE: drivers/trec/trec.c:298:
+	if (pTrec_cur == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: drivers/trec/trec.c:304:
+	TREC2(2,3);
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: drivers/trec/trec.c:307:
+done:^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#388: FILE: drivers/trec/trec.c:308:
+	DPK("trec_device_init: X result=%d major=%d minor=%d\n", result,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: drivers/trec/trec.c:309:
+	DPK("trec_device_init: X result=%d major=%d minor=%d\n", result,
+	return result;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_exit', this function's name, in a string
#400: FILE: drivers/trec/trec.c:319:
+	DPK("trec_device_exit: E\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_exit', this function's name, in a string
#404: FILE: drivers/trec/trec.c:323:
+	DPK("trec_device_exit: X\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#416: FILE: include/asm-generic/trec.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#439: FILE: include/asm-i386/trec.h:1:
+/*

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#457: FILE: include/asm-i386/trec.h:19:
+static uint64_t inline rd_tsc(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#459: FILE: include/asm-i386/trec.h:21:
+	volatile uint64_t value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#459: FILE: include/asm-i386/trec.h:21:
+	volatile uint64_t value;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#478: FILE: include/asm-x86_64/trec.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#497: FILE: include/linux/trec.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#508: FILE: include/linux/trec.h:12:
+#include <asm/processor.h>	/* For current_text_addr */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#515: FILE: include/linux/trec.h:19:
+#define TREC2(__v1, __v2)	trec_write(TREC_PC_ADDR, TREC_PID,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: include/linux/trec.h:20:
+#define TREC_RETV(__retv) ^Ido { TREC0(); return(__retv); } while (0)$

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#517: FILE: include/linux/trec.h:20:
+#define TREC_RETV(__retv) 	do { TREC0(); return(__retv); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: include/linux/trec.h:21:
+#define TREC_RET() ^I^Ido { TREC0(); return; } while (0)$

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#518: FILE: include/linux/trec.h:21:
+#define TREC_RET() 		do { TREC0(); return; } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#523: FILE: include/linux/trec.h:26:
+#define ZREC_RETV(__retv) ^Ido { } while (0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#524: FILE: include/linux/trec.h:27:
+#define ZREC_RET() ^I^Ido { } while (0)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/linux/trec.h:29:
+extern void trec_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: include/linux/trec.h:30:
+extern void trec_write(unsigned long pc, int pid, unsigned long v1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: include/linux/trec.h:31:
+extern void trec_write(unsigned long pc, int pid, unsigned long v1,
+extern void trec_snapshot(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#529: FILE: include/linux/trec.h:31:
+extern void trec_snapshot(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#530: FILE: include/linux/trec.h:32:
+extern void trec_print_snapshot(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453738.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 46 warnings, 28 checks, 448 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453738.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
