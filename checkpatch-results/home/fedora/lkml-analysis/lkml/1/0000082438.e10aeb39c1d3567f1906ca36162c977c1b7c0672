WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <EepromWriteByte>
#62: FILE: drivers/staging/et131x/et1310_eeprom.c:154:
+int32_t EepromWriteByte(struct et131x_adapter *etdev, uint32_t unAddress,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <unAddress>
#62: FILE: drivers/staging/et131x/et1310_eeprom.c:154:
+int32_t EepromWriteByte(struct et131x_adapter *etdev, uint32_t unAddress,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#76: FILE: drivers/staging/et131x/et1310_eeprom.c:295:
 		if (bStatus & LBCIF_STATUS_GENERAL_ERROR
+		    && etdev->RevisionID == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <RevisionID>
#76: FILE: drivers/staging/et131x/et1310_eeprom.c:295:
+		    && etdev->RevisionID == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <EepromReadByte>
#94: FILE: drivers/staging/et131x/et1310_eeprom.c:360:
+int32_t EepromReadByte(struct et131x_adapter *etdev, uint32_t unAddress,

CHECK:CAMELCASE: Avoid CamelCase: <ConfigGlobalRegs>
#112: FILE: drivers/staging/et131x/et1310_jagcore.c:102:
+void ConfigGlobalRegs(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <pGbl>
#115: FILE: drivers/staging/et131x/et1310_jagcore.c:104:
+	struct _GLOBAL_t __iomem *pGbl = &etdev->CSRAddress->global;

CHECK:CAMELCASE: Avoid CamelCase: <CSRAddress>
#115: FILE: drivers/staging/et131x/et1310_jagcore.c:104:
+	struct _GLOBAL_t __iomem *pGbl = &etdev->CSRAddress->global;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryPhyLoopbk>
#121: FILE: drivers/staging/et131x/et1310_jagcore.c:108:
+	if (etdev->RegistryPhyLoopbk == false) {

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#121: FILE: drivers/staging/et131x/et1310_jagcore.c:108:
+	if (etdev->RegistryPhyLoopbk == false) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:CAMELCASE: Avoid CamelCase: <RegistryJumboPacket>
#122: FILE: drivers/staging/et131x/et1310_jagcore.c:109:
+		if (etdev->RegistryJumboPacket < 2048) {

CHECK:CAMELCASE: Avoid CamelCase: <RegistryRxMemEnd>
#130: FILE: drivers/staging/et131x/et1310_jagcore.c:116:
+			writel(etdev->RegistryRxMemEnd,

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMMCRegs>
#150: FILE: drivers/staging/et131x/et1310_jagcore.c:176:
+void ConfigMMCRegs(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMACRegs1>
#172: FILE: drivers/staging/et131x/et1310_mac.c:104:
+void ConfigMACRegs1(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <pMac>
#175: FILE: drivers/staging/et131x/et1310_mac.c:106:
+	struct _MAC_t __iomem *pMac = &etdev->CSRAddress->mac;

CHECK:CAMELCASE: Avoid CamelCase: <Octet1>
#189: FILE: drivers/staging/et131x/et1310_mac.c:154:
+	station2.bits.Octet1 = etdev->CurrentAddress[0];

CHECK:CAMELCASE: Avoid CamelCase: <CurrentAddress>
#189: FILE: drivers/staging/et131x/et1310_mac.c:154:
+	station2.bits.Octet1 = etdev->CurrentAddress[0];

CHECK:CAMELCASE: Avoid CamelCase: <Octet2>
#190: FILE: drivers/staging/et131x/et1310_mac.c:155:
+	station2.bits.Octet2 = etdev->CurrentAddress[1];

CHECK:CAMELCASE: Avoid CamelCase: <Octet3>
#191: FILE: drivers/staging/et131x/et1310_mac.c:156:
+	station1.bits.Octet3 = etdev->CurrentAddress[2];

CHECK:CAMELCASE: Avoid CamelCase: <Octet4>
#192: FILE: drivers/staging/et131x/et1310_mac.c:157:
+	station1.bits.Octet4 = etdev->CurrentAddress[3];

CHECK:CAMELCASE: Avoid CamelCase: <Octet5>
#193: FILE: drivers/staging/et131x/et1310_mac.c:158:
+	station1.bits.Octet5 = etdev->CurrentAddress[4];

CHECK:CAMELCASE: Avoid CamelCase: <Octet6>
#194: FILE: drivers/staging/et131x/et1310_mac.c:159:
+	station1.bits.Octet6 = etdev->CurrentAddress[5];

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMACRegs2>
#212: FILE: drivers/staging/et131x/et1310_mac.c:182:
+void ConfigMACRegs2(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <uiLinkSpeed>
#231: FILE: drivers/staging/et131x/et1310_mac.c:198:
+	if (etdev->uiLinkSpeed == TRUEPHY_SPEED_1000MBPS) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->FlowControl == RxOnly'
#241: FILE: drivers/staging/et131x/et1310_mac.c:213:
+	if ((etdev->FlowControl == RxOnly) ||
+	    (etdev->FlowControl == Both)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->FlowControl == Both'
#241: FILE: drivers/staging/et131x/et1310_mac.c:213:
+	if ((etdev->FlowControl == RxOnly) ||
+	    (etdev->FlowControl == Both)) {

CHECK:CAMELCASE: Avoid CamelCase: <FlowControl>
#241: FILE: drivers/staging/et131x/et1310_mac.c:213:
+	if ((etdev->FlowControl == RxOnly) ||

CHECK:CAMELCASE: Avoid CamelCase: <RxOnly>
#241: FILE: drivers/staging/et131x/et1310_mac.c:213:
+	if ((etdev->FlowControl == RxOnly) ||

CHECK:CAMELCASE: Avoid CamelCase: <Both>
#242: FILE: drivers/staging/et131x/et1310_mac.c:214:
+	    (etdev->FlowControl == Both)) {

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#251: FILE: drivers/staging/et131x/et1310_mac.c:235:
+	if (etdev->RegistryPhyLoopbk == false) {

CHECK:CAMELCASE: Avoid CamelCase: <uiDuplexMode>
#261: FILE: drivers/staging/et131x/et1310_mac.c:244:
+	cfg2.bits.full_duplex = etdev->uiDuplexMode;

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_LOWER_POWER>
#285: FILE: drivers/staging/et131x/et1310_mac.c:275:
+	if (!MP_TEST_FLAG(etdev, fMP_ADAPTER_LOWER_POWER)) {

CHECK:CAMELCASE: Avoid CamelCase: <ConfigRxMacRegs>
#296: FILE: drivers/staging/et131x/et1310_mac.c:286:
+void ConfigRxMacRegs(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <pRxMac>
#299: FILE: drivers/staging/et131x/et1310_mac.c:288:
+	struct _RXMAC_t __iomem *pRxMac = &etdev->CSRAddress->rxmac;

CHECK:CAMELCASE: Avoid CamelCase: <PacketFilter>
#329: FILE: drivers/staging/et131x/et1310_mac.c:347:
+	if (etdev->PacketFilter & ET131X_PACKET_TYPE_DIRECTED) {

CHECK:CAMELCASE: Avoid CamelCase: <SetupDeviceForUnicast>
#330: FILE: drivers/staging/et131x/et1310_mac.c:348:
+		SetupDeviceForUnicast(etdev);

CHECK:CAMELCASE: Avoid CamelCase: <SetupDeviceForMulticast>
#344: FILE: drivers/staging/et131x/et1310_mac.c:361:
+		SetupDeviceForMulticast(etdev);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigTxMacRegs>
#370: FILE: drivers/staging/et131x/et1310_mac.c:428:
+void ConfigTxMacRegs(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <pTxMac>
#373: FILE: drivers/staging/et131x/et1310_mac.c:430:
+	struct _TXMAC_t __iomem *pTxMac = &etdev->CSRAddress->txmac;

CHECK:CAMELCASE: Avoid CamelCase: <None>
#382: FILE: drivers/staging/et131x/et1310_mac.c:439:
+	if (etdev->FlowControl == None) {

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMacStatRegs>
#391: FILE: drivers/staging/et131x/et1310_mac.c:450:
+void ConfigMacStatRegs(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <macStat>
#395: FILE: drivers/staging/et131x/et1310_mac.c:453:
+		&etdev->CSRAddress->macStat;

CHECK:CAMELCASE: Avoid CamelCase: <ConfigFlowControl>
#404: FILE: drivers/staging/et131x/et1310_mac.c:541:
+void ConfigFlowControl(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAccessMiBit>
#414: FILE: drivers/staging/et131x/et1310_mac.c:548:
+		ET1310_PhyAccessMiBit(etdev,

CHECK:CAMELCASE: Avoid CamelCase: <RegistryFlowControl>
#424: FILE: drivers/staging/et131x/et1310_mac.c:556:
+			etdev->FlowControl = etdev->RegistryFlowControl;

CHECK:CAMELCASE: Avoid CamelCase: <UpdateMacStatHostCounters>
#457: FILE: drivers/staging/et131x/et1310_mac.c:580:
+void UpdateMacStatHostCounters(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <Stats>
#460: FILE: drivers/staging/et131x/et1310_mac.c:582:
+	struct _ce_stats_t *stats = &etdev->Stats;

CHECK:CAMELCASE: Avoid CamelCase: <HandleMacStatInterrupt>
#479: FILE: drivers/staging/et131x/et1310_mac.c:612:
+void HandleMacStatInterrupt(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <Carry1>
#489: FILE: drivers/staging/et131x/et1310_mac.c:622:
+	Carry1.value = readl(&etdev->CSRAddress->macStat.Carry1.value);

CHECK:CAMELCASE: Avoid CamelCase: <Carry2>
#490: FILE: drivers/staging/et131x/et1310_mac.c:623:
+	Carry2.value = readl(&etdev->CSRAddress->macStat.Carry2.value);

CHECK:CAMELCASE: Avoid CamelCase: <MCAddressCount>
#565: FILE: drivers/staging/et131x/et1310_mac.c:687:
+			    etdev->MCAddressCount);

CHECK:CAMELCASE: Avoid CamelCase: <nIndex>
#569: FILE: drivers/staging/et131x/et1310_mac.c:690:
+		for (nIndex = 0; nIndex < etdev->MCAddressCount; nIndex++) {

CHECK:CAMELCASE: Avoid CamelCase: <MCList>
#579: FILE: drivers/staging/et131x/et1310_mac.c:694:
+			    etdev->MCList[nIndex][0],

CHECK:CAMELCASE: Avoid CamelCase: <et131x_Mii_check>
#660: FILE: drivers/staging/et131x/et1310_phy.c:477:
+void et131x_Mii_check(struct et131x_adapter *etdev,

CHECK:CAMELCASE: Avoid CamelCase: <PoMgmt>
#669: FILE: drivers/staging/et131x/et1310_phy.c:493:
+			etdev->PoMgmt.TransPhyComaModeOnBoot = 20;

CHECK:CAMELCASE: Avoid CamelCase: <TransPhyComaModeOnBoot>
#669: FILE: drivers/staging/et131x/et1310_phy.c:493:
+			etdev->PoMgmt.TransPhyComaModeOnBoot = 20;

CHECK:CAMELCASE: Avoid CamelCase: <Lock>
#675: FILE: drivers/staging/et131x/et1310_phy.c:498:
+			spin_lock_irqsave(&etdev->Lock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <MediaState>
#679: FILE: drivers/staging/et131x/et1310_phy.c:500:
+			etdev->MediaState = NETIF_STATUS_MEDIA_CONNECT;

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_LINK_DETECTION>
#680: FILE: drivers/staging/et131x/et1310_phy.c:501:
+			MP_CLEAR_FLAG(etdev, fMP_ADAPTER_LINK_DETECTION);

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#688: FILE: drivers/staging/et131x/et1310_phy.c:506:
+			if (etdev->RegistryPhyLoopbk == false)

CHECK:CAMELCASE: Avoid CamelCase: <MiRead>
#708: FILE: drivers/staging/et131x/et1310_phy.c:519:
+				MiRead(etdev, 0x12, &Register18);

CHECK:CAMELCASE: Avoid CamelCase: <Register18>
#708: FILE: drivers/staging/et131x/et1310_phy.c:519:
+				MiRead(etdev, 0x12, &Register18);

CHECK:CAMELCASE: Avoid CamelCase: <MiWrite>
#709: FILE: drivers/staging/et131x/et1310_phy.c:520:
+				MiWrite(etdev, 0x12, Register18 | 0x4);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#723: FILE: drivers/staging/et131x/et1310_phy.c:534:
+			     (etdev, fMP_ADAPTER_LINK_DETECTION))
+			    || (etdev->MediaState ==

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#739: FILE: drivers/staging/et131x/et1310_phy.c:545:
+				if (etdev->RegistryPhyLoopbk == false)

CHECK:CAMELCASE: Avoid CamelCase: <RegistryPhyComa>
#778: FILE: drivers/staging/et131x/et1310_phy.c:575:
+			if (etdev->RegistryPhyComa == 1)

CHECK:CAMELCASE: Avoid CamelCase: <EnablePhyComa>
#779: FILE: drivers/staging/et131x/et1310_phy.c:576:
+				EnablePhyComa(etdev);

CHECK:CAMELCASE: Avoid CamelCase: <AiForceDpx>
#787: FILE: drivers/staging/et131x/et1310_phy.c:581:
+	    (etdev->AiForceDpx == 3 && bmsr_ints.bits.link_status)) {

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyLinkStatus>
#789: FILE: drivers/staging/et131x/et1310_phy.c:583:
+			ET1310_PhyLinkStatus(etdev,

CHECK:CAMELCASE: Avoid CamelCase: <uiSpeed>
#796: FILE: drivers/staging/et131x/et1310_phy.c:588:
+			etdev->uiLinkSpeed = uiSpeed;

CHECK:CAMELCASE: Avoid CamelCase: <uiDuplex>
#797: FILE: drivers/staging/et131x/et1310_phy.c:589:
+			etdev->uiDuplexMode = uiDuplex;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#839: FILE: drivers/staging/et131x/et1310_phy.c:616:
+			if (etdev->uiLinkSpeed == TRUEPHY_SPEED_1000MBPS &&
+					etdev->RegistryJumboPacket > 2048)

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAndOrReg>
#840: FILE: drivers/staging/et131x/et1310_phy.c:617:
+				ET1310_PhyAndOrReg(etdev, 0x16, 0xcfff,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: drivers/staging/et131x/et1310_phy.c:618:
+				ET1310_PhyAndOrReg(etdev, 0x16, 0xcfff,
 								   0x2000);

CHECK:CAMELCASE: Avoid CamelCase: <SetRxDmaTimer>
#845: FILE: drivers/staging/et131x/et1310_phy.c:620:
+			SetRxDmaTimer(etdev);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyPowerDown>
#866: FILE: drivers/staging/et131x/et1310_phy.c:639:
+	ET1310_PhyPowerDown(etdev, 1);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAdvertise1000BaseT>
#870: FILE: drivers/staging/et131x/et1310_phy.c:642:
+	ET1310_PhyAdvertise1000BaseT(etdev, TRUEPHY_ADV_DUPLEX_NONE);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAdvertise100BaseT>
#873: FILE: drivers/staging/et131x/et1310_phy.c:644:
+	ET1310_PhyAdvertise100BaseT(etdev, TRUEPHY_ADV_DUPLEX_NONE);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAdvertise10BaseT>
#877: FILE: drivers/staging/et131x/et1310_phy.c:647:
+	ET1310_PhyAdvertise10BaseT(etdev, TRUEPHY_ADV_DUPLEX_HALF);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAutoNeg>
#936: FILE: drivers/staging/et131x/et1310_phy.c:694:
+	ET1310_PhyAutoNeg(etdev, false);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhySpeedSelect>
#948: FILE: drivers/staging/et131x/et1310_phy.c:702:
+	ET1310_PhySpeedSelect(etdev, TRUEPHY_SPEED_10MBPS);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyDuplexMode>
#952: FILE: drivers/staging/et131x/et1310_phy.c:705:
+	ET1310_PhyDuplexMode(etdev, TRUEPHY_DUPLEX_FULL);

CHECK:CAMELCASE: Avoid CamelCase: <DeviceID>
#1131: FILE: drivers/staging/et131x/et1310_phy.c:844:
+	if (etdev->DeviceID != ET131X_PCI_DEVICE_ID_FAST)

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyInit>
#1152: FILE: drivers/staging/et131x/et1310_phy.c:906:
+void ET1310_PhyInit(struct et131x_adapter *etdev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!etdev"
#1157: FILE: drivers/staging/et131x/et1310_phy.c:910:
+	if (etdev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <usData>
#1163: FILE: drivers/staging/et131x/et1310_phy.c:914:
+	MiRead(etdev, PHY_ID_1, &usData);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigPhy>
#1222: FILE: drivers/staging/et131x/et1310_phy.c:955:
+		MiWrite(etdev, PHY_INDEX_REG, ConfigPhy[usIndex][0]);

CHECK:CAMELCASE: Avoid CamelCase: <usIndex>
#1222: FILE: drivers/staging/et131x/et1310_phy.c:955:
+		MiWrite(etdev, PHY_INDEX_REG, ConfigPhy[usIndex][0]);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyReset>
#1247: FILE: drivers/staging/et131x/et1310_phy.c:973:
+void ET1310_PhyReset(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <usMiStatus>
#1408: FILE: drivers/staging/et131x/et1310_phy.c:1183:
+	MiRead(etdev, PHY_STATUS, &usMiStatus);

CHECK:CAMELCASE: Avoid CamelCase: <us1000BaseT>
#1409: FILE: drivers/staging/et131x/et1310_phy.c:1184:
+	MiRead(etdev, PHY_1000_STATUS, &us1000BaseT);

CHECK:CAMELCASE: Avoid CamelCase: <usVmiPhyStatus>
#1410: FILE: drivers/staging/et131x/et1310_phy.c:1185:
+	MiRead(etdev, PHY_PHY_STATUS, &usVmiPhyStatus);

CHECK:CAMELCASE: Avoid CamelCase: <usControl>
#1411: FILE: drivers/staging/et131x/et1310_phy.c:1186:
+	MiRead(etdev, PHY_CONTROL, &usControl);

CHECK:CAMELCASE: Avoid CamelCase: <GlobalPmCSR>
#1495: FILE: drivers/staging/et131x/et1310_pm.c:128:
+	GlobalPmCSR.value = readl(&etdev->CSRAddress->global.pm_csr.value);

CHECK:CAMELCASE: Avoid CamelCase: <PowerDownSpeed>
#1502: FILE: drivers/staging/et131x/et1310_pm.c:133:
+	etdev->PoMgmt.PowerDownSpeed = etdev->AiForceSpeed;

CHECK:CAMELCASE: Avoid CamelCase: <AiForceSpeed>
#1502: FILE: drivers/staging/et131x/et1310_pm.c:133:
+	etdev->PoMgmt.PowerDownSpeed = etdev->AiForceSpeed;

CHECK:CAMELCASE: Avoid CamelCase: <PowerDownDuplex>
#1503: FILE: drivers/staging/et131x/et1310_pm.c:134:
+	etdev->PoMgmt.PowerDownDuplex = etdev->AiForceDpx;

CHECK:CAMELCASE: Avoid CamelCase: <SendHWLock>
#1509: FILE: drivers/staging/et131x/et1310_pm.c:137:
+	spin_lock_irqsave(&etdev->SendHWLock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <LoopCounter>
#1515: FILE: drivers/staging/et131x/et1310_pm.c:142:
+	while ((MP_GET_RCV_REF(etdev) != 0) && (LoopCounter-- > 0))

CHECK:CAMELCASE: Avoid CamelCase: <DisablePhyComa>
#1539: FILE: drivers/staging/et131x/et1310_pm.c:162:
+void DisablePhyComa(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <pMpRfd>
#1602: FILE: drivers/staging/et131x/et1310_rx.c:102:
+void nic_return_rfd(struct et131x_adapter *etdev, PMP_RFD pMpRfd);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigRxDmaRegs>
#1614: FILE: drivers/staging/et131x/et1310_rx.c:681:
+void ConfigRxDmaRegs(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <pRxDma>
#1618: FILE: drivers/staging/et131x/et1310_rx.c:683:
+	struct _RXDMA_t __iomem *pRxDma = &etdev->CSRAddress->rxdma;

CHECK:CAMELCASE: Avoid CamelCase: <pRxLocal>
#1619: FILE: drivers/staging/et131x/et1310_rx.c:684:
+	struct _rx_ring_t *pRxLocal = &etdev->RxRing;

CHECK:CAMELCASE: Avoid CamelCase: <RxRing>
#1619: FILE: drivers/staging/et131x/et1310_rx.c:684:
+	struct _rx_ring_t *pRxLocal = &etdev->RxRing;

CHECK:CAMELCASE: Avoid CamelCase: <RcvLock>
#1637: FILE: drivers/staging/et131x/et1310_rx.c:721:
+	spin_lock_irqsave(&etdev->RcvLock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <RegistryRxNumBuffers>
#1646: FILE: drivers/staging/et131x/et1310_rx.c:795:
+	writel(etdev->RegistryRxNumBuffers, &pRxDma->num_pkt_done.value);

CHECK:CAMELCASE: Avoid CamelCase: <RegistryRxTimeInterval>
#1654: FILE: drivers/staging/et131x/et1310_rx.c:802:
+	writel(etdev->RegistryRxTimeInterval, &pRxDma->max_pkt_time.value);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->uiLinkSpeed == TRUEPHY_SPEED_100MBPS'
#1677: FILE: drivers/staging/et131x/et1310_rx.c:818:
+	if ((etdev->uiLinkSpeed == TRUEPHY_SPEED_100MBPS) ||
+	    (etdev->uiLinkSpeed == TRUEPHY_SPEED_10MBPS)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->uiLinkSpeed == TRUEPHY_SPEED_10MBPS'
#1677: FILE: drivers/staging/et131x/et1310_rx.c:818:
+	if ((etdev->uiLinkSpeed == TRUEPHY_SPEED_100MBPS) ||
+	    (etdev->uiLinkSpeed == TRUEPHY_SPEED_10MBPS)) {

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1BufferSize>
#1731: FILE: drivers/staging/et131x/et1310_rx.c:866:
+		if (etdev->RxRing.Fbr1BufferSize == 4096)

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0BufferSize>
#1742: FILE: drivers/staging/et131x/et1310_rx.c:874:
+		if (etdev->RxRing.Fbr0BufferSize == 256)

CHECK:CAMELCASE: Avoid CamelCase: <ReplicaPhyLoopbk>
#1830: FILE: drivers/staging/et131x/et1310_rx.c:1049:
+		if (etdev->ReplicaPhyLoopbk == 1) {

CHECK:CAMELCASE: Avoid CamelCase: <pBufVa>
#1834: FILE: drivers/staging/et131x/et1310_rx.c:1052:
+			if (memcmp(&pBufVa[6], &etdev->CurrentAddress[0],

CHECK:CAMELCASE: Avoid CamelCase: <ReplicaPhyLoopbkPF>
#1839: FILE: drivers/staging/et131x/et1310_rx.c:1056:
+					etdev->ReplicaPhyLoopbkPF = 1;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1870: FILE: drivers/staging/et131x/et1310_rx.c:1085:
+			if ((etdev->PacketFilter & ET131X_PACKET_TYPE_MULTICAST)
+			    && !(etdev->PacketFilter & ET131X_PACKET_TYPE_PROMISCUOUS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1871: FILE: drivers/staging/et131x/et1310_rx.c:1086:
+			    && !(etdev->PacketFilter & ET131X_PACKET_TYPE_PROMISCUOUS)
+			    && !(etdev->PacketFilter & ET131X_PACKET_TYPE_ALL_MULTICAST)) {

CHECK:CAMELCASE: Avoid CamelCase: <PacketSize>
#1934: FILE: drivers/staging/et131x/et1310_rx.c:1152:
+		etdev->net_stats.rx_bytes += pMpRfd->PacketSize;

CHECK:CAMELCASE: Avoid CamelCase: <RecvList>
#1974: FILE: drivers/staging/et131x/et1310_rx.c:1187:
+	DBG_ASSERT(!list_empty(&etdev->RxRing.RecvList));

CHECK:CAMELCASE: Avoid CamelCase: <RecvPendingList>
#1981: FILE: drivers/staging/et131x/et1310_rx.c:1192:
+	while (!list_empty(&etdev->RxRing.RecvPendingList)) {

CHECK:CAMELCASE: Avoid CamelCase: <nReadyRecv>
#2012: FILE: drivers/staging/et131x/et1310_rx.c:1226:
+			DBG_ASSERT(etdev->RxRing.nReadyRecv == 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!etdev->PacketFilter'
#2030: FILE: drivers/staging/et131x/et1310_rx.c:1243:
+		if ((!etdev->PacketFilter) ||
+		    (etdev->PoMgmt.PowerState != NdisDeviceStateD0) ||
+		    (!MP_LINK_DETECTED(etdev)) ||
 		    (pMpRfd->PacketSize == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->PoMgmt.PowerState != NdisDeviceStateD0'
#2030: FILE: drivers/staging/et131x/et1310_rx.c:1243:
+		if ((!etdev->PacketFilter) ||
+		    (etdev->PoMgmt.PowerState != NdisDeviceStateD0) ||
+		    (!MP_LINK_DETECTED(etdev)) ||
 		    (pMpRfd->PacketSize == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pMpRfd->PacketSize == 0'
#2030: FILE: drivers/staging/et131x/et1310_rx.c:1243:
+		if ((!etdev->PacketFilter) ||
+		    (etdev->PoMgmt.PowerState != NdisDeviceStateD0) ||
+		    (!MP_LINK_DETECTED(etdev)) ||
 		    (pMpRfd->PacketSize == 0)) {

CHECK:CAMELCASE: Avoid CamelCase: <PowerState>
#2031: FILE: drivers/staging/et131x/et1310_rx.c:1244:
+		    (etdev->PoMgmt.PowerState != NdisDeviceStateD0) ||

CHECK:CAMELCASE: Avoid CamelCase: <NdisDeviceStateD0>
#2031: FILE: drivers/staging/et131x/et1310_rx.c:1244:
+		    (etdev->PoMgmt.PowerState != NdisDeviceStateD0) ||

CHECK:CAMELCASE: Avoid CamelCase: <UnfinishedReceives>
#2072: FILE: drivers/staging/et131x/et1310_rx.c:1283:
+		etdev->RxRing.UnfinishedReceives = true;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryTxTimeInterval>
#2073: FILE: drivers/staging/et131x/et1310_rx.c:1284:
+		writel(etdev->RegistryTxTimeInterval * NANO_IN_A_MICRO,

CHECK:CAMELCASE: Avoid CamelCase: <FbrLock>
#2105: FILE: drivers/staging/et131x/et1310_rx.c:1317:
+		spin_lock_irqsave(&etdev->FbrLock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <pMpTcb>
#2150: FILE: drivers/staging/et131x/et1310_tx.c:108:
+static int nic_send_packet(struct et131x_adapter *etdev, PMP_TCB pMpTcb);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigTxDmaRegs>
#2159: FILE: drivers/staging/et131x/et1310_tx.c:250:
+void ConfigTxDmaRegs(struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <pTxDma>
#2162: FILE: drivers/staging/et131x/et1310_tx.c:252:
+	struct _TXDMA_t __iomem *pTxDma = &etdev->CSRAddress->txdma;

CHECK:SPACING: No space is necessary after a cast
#2168: FILE: drivers/staging/et131x/et1310_tx.c:257:
+	writel((uint32_t) (etdev->TxRing.pTxDescRingAdjustedPa >> 32),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <TxRing>
#2168: FILE: drivers/staging/et131x/et1310_tx.c:257:
+	writel((uint32_t) (etdev->TxRing.pTxDescRingAdjustedPa >> 32),

CHECK:CAMELCASE: Avoid CamelCase: <pTxDescRingAdjustedPa>
#2168: FILE: drivers/staging/et131x/et1310_tx.c:257:
+	writel((uint32_t) (etdev->TxRing.pTxDescRingAdjustedPa >> 32),

CHECK:SPACING: No space is necessary after a cast
#2171: FILE: drivers/staging/et131x/et1310_tx.c:259:
+	writel((uint32_t) etdev->TxRing.pTxDescRingAdjustedPa,

CHECK:CAMELCASE: Avoid CamelCase: <pTxStatusPa>
#2180: FILE: drivers/staging/et131x/et1310_tx.c:273:
+	writel(etdev->TxRing.pTxStatusPa, &pTxDma->dma_wb_base_lo);

CHECK:CAMELCASE: Avoid CamelCase: <pTxStatusVa>
#2183: FILE: drivers/staging/et131x/et1310_tx.c:275:
+	memset(etdev->TxRing.pTxStatusVa, 0, sizeof(TX_STATUS_BLOCK_t));

CHECK:CAMELCASE: Avoid CamelCase: <txDmaReadyToSend>
#2187: FILE: drivers/staging/et131x/et1310_tx.c:278:
+	etdev->TxRing.txDmaReadyToSend.value = 0;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryDMACache>
#2235: FILE: drivers/staging/et131x/et1310_tx.c:318:
+		csr.bits.cache_thrshld = etdev->RegistryDMACache;

CHECK:CAMELCASE: Avoid CamelCase: <SendWaitQueue>
#2260: FILE: drivers/staging/et131x/et1310_tx.c:393:
+	if (!list_empty(&etdev->TxRing.SendWaitQueue) ||

CHECK:CAMELCASE: Avoid CamelCase: <DriverNoPhyAccess>
#2275: FILE: drivers/staging/et131x/et1310_tx.c:409:
+		if (MP_SHOULD_FAIL_SEND(etdev) || etdev->DriverNoPhyAccess

CHECK:CAMELCASE: Avoid CamelCase: <TCBReadyQLock>
#2322: FILE: drivers/staging/et131x/et1310_tx.c:485:
+	spin_lock_irqsave(&etdev->TCBReadyQLock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <TCBReadyQueueHead>
#2325: FILE: drivers/staging/et131x/et1310_tx.c:487:
+	pMpTcb = etdev->TxRing.TCBReadyQueueHead;

CHECK:CAMELCASE: Avoid CamelCase: <Next>
#2337: FILE: drivers/staging/et131x/et1310_tx.c:497:
+	etdev->TxRing.TCBReadyQueueHead = pMpTcb->Next;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!etdev->TxRing.TCBReadyQueueHead"
#2341: FILE: drivers/staging/et131x/et1310_tx.c:499:
+	if (etdev->TxRing.TCBReadyQueueHead == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <TCBReadyQueueTail>
#2342: FILE: drivers/staging/et131x/et1310_tx.c:500:
+		etdev->TxRing.TCBReadyQueueTail = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <nBusySend>
#2381: FILE: drivers/staging/et131x/et1310_tx.c:542:
+	DBG_ASSERT(etdev->TxRing.nBusySend <= NUM_TCB);

CHECK:CAMELCASE: Avoid CamelCase: <TxPacketsSinceLastinterrupt>
#2471: FILE: drivers/staging/et131x/et1310_tx.c:713:
+		if (++etdev->TxRing.TxPacketsSinceLastinterrupt ==

CHECK:CAMELCASE: Avoid CamelCase: <RegistryTxNumBuffers>
#2472: FILE: drivers/staging/et131x/et1310_tx.c:714:
+		    etdev->RegistryTxNumBuffers) {

CHECK:CAMELCASE: Avoid CamelCase: <WrIndexStart>
#2484: FILE: drivers/staging/et131x/et1310_tx.c:726:
+	pMpTcb->WrIndexStart = etdev->TxRing.txDmaReadyToSend;

CHECK:CAMELCASE: Avoid CamelCase: <pTxDescRingVa>
#2502: FILE: drivers/staging/et131x/et1310_tx.c:741:
+	memcpy(etdev->TxRing.pTxDescRingVa +

CHECK:CAMELCASE: Avoid CamelCase: <CurDesc>
#2503: FILE: drivers/staging/et131x/et1310_tx.c:742:
+	       etdev->TxRing.txDmaReadyToSend.bits.val, CurDesc,

CHECK:CAMELCASE: Avoid CamelCase: <iThisCopy>
#2507: FILE: drivers/staging/et131x/et1310_tx.c:745:
+	etdev->TxRing.txDmaReadyToSend.bits.val += iThisCopy;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->TxRing.txDmaReadyToSend.bits.val == 0'
#2511: FILE: drivers/staging/et131x/et1310_tx.c:747:
+	if ((etdev->TxRing.txDmaReadyToSend.bits.val == 0) ||
+	    (etdev->TxRing.txDmaReadyToSend.bits.val ==
 	     NUM_DESC_PER_RING_TX)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->TxRing.txDmaReadyToSend.bits.val ==
 	     NUM_DESC_PER_RING_TX'
#2511: FILE: drivers/staging/et131x/et1310_tx.c:747:
+	if ((etdev->TxRing.txDmaReadyToSend.bits.val == 0) ||
+	    (etdev->TxRing.txDmaReadyToSend.bits.val ==
 	     NUM_DESC_PER_RING_TX)) {

CHECK:CAMELCASE: Avoid CamelCase: <iRemainder>
#2530: FILE: drivers/staging/et131x/et1310_tx.c:761:
+		etdev->TxRing.txDmaReadyToSend.bits.val += iRemainder;

CHECK:CAMELCASE: Avoid CamelCase: <TCBSendQLock>
#2547: FILE: drivers/staging/et131x/et1310_tx.c:774:
+	spin_lock_irqsave(&etdev->TCBSendQLock, lockflags2);

CHECK:CAMELCASE: Avoid CamelCase: <CurrSendTail>
#2551: FILE: drivers/staging/et131x/et1310_tx.c:776:
+	if (etdev->TxRing.CurrSendTail)

CHECK:CAMELCASE: Avoid CamelCase: <CurrSendHead>
#2555: FILE: drivers/staging/et131x/et1310_tx.c:779:
+		etdev->TxRing.CurrSendHead = pMpTcb;

CHECK:CAMELCASE: Avoid CamelCase: <NewServiceComplete>
#2613: FILE: drivers/staging/et131x/et1310_tx.c:840:
+		readl(&etdev->CSRAddress->txdma.NewServiceComplete.value);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etdev->uiDuplexMode == 0'
#2622: FILE: drivers/staging/et131x/et1310_tx.c:859:
+	if ((etdev->uiDuplexMode == 0)
 	    && (pMpTcb->PacketLength < NIC_MIN_PACKET_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pMpTcb->PacketLength < NIC_MIN_PACKET_SIZE'
#2622: FILE: drivers/staging/et131x/et1310_tx.c:859:
+	if ((etdev->uiDuplexMode == 0)
 	    && (pMpTcb->PacketLength < NIC_MIN_PACKET_SIZE)) {

CHECK:CAMELCASE: Avoid CamelCase: <DataBufferPtrLow>
#2790: FILE: drivers/staging/et131x/et1310_tx.c:1130:
+		CurDesc.DataBufferPtrLow = etdev->TxRing.pTxDummyBlkPa;

CHECK:CAMELCASE: Avoid CamelCase: <pTxDummyBlkPa>
#2790: FILE: drivers/staging/et131x/et1310_tx.c:1130:
+		CurDesc.DataBufferPtrLow = etdev->TxRing.pTxDummyBlkPa;

CHECK:CAMELCASE: Avoid CamelCase: <WrIndex>
#2810: FILE: drivers/staging/et131x/et1310_tx.c:1149:
+		pMpTcb->WrIndex = etdev->TxRing.txDmaReadyToSend;

CHECK:CAMELCASE: Avoid CamelCase: <DumpDeviceBlock>
#2882: FILE: drivers/staging/et131x/et1310_tx.c:1208:
+	DumpDeviceBlock(DBG_TX_ON, etdev, 1);

CHECK:SPACING: No space is necessary after a cast
#2937: FILE: drivers/staging/et131x/et1310_tx.c:1274:
+			    (TX_DESC_ENTRY_t *) (etdev->TxRing.

CHECK:CAMELCASE: Avoid CamelCase: <SendWaitLock>
#3008: FILE: drivers/staging/et131x/et1310_tx.c:1348:
+		spin_lock_irqsave(&etdev->SendWaitLock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <nWaitSend>
#3012: FILE: drivers/staging/et131x/et1310_tx.c:1350:
+		etdev->TxRing.nWaitSend--;

CHECK:CAMELCASE: Avoid CamelCase: <pEntry>
#3016: FILE: drivers/staging/et131x/et1310_tx.c:1353:
+		pEntry = etdev->TxRing.SendWaitQueue.next;

CHECK:CAMELCASE: Avoid CamelCase: <pNext>
#3033: FILE: drivers/staging/et131x/et1310_tx.c:1366:
+		etdev->TxRing.CurrSendHead = pNext;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3202: FILE: drivers/staging/et131x/et1310_tx.c:1497:
+	while (!list_empty(&etdev->TxRing.SendWaitQueue) &&
+				MP_TCB_RESOURCES_AVAILABLE(etdev)) {

CHECK:CAMELCASE: Avoid CamelCase: <SpeedDuplex>
#3246: FILE: drivers/staging/et131x/et131x_config.c:240:
+		etdev->SpeedDuplex = et131x_speed_set;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryVlanTag>
#3270: FILE: drivers/staging/et131x/et131x_config.c:247:
+	etdev->RegistryVlanTag = PARM_VLAN_TAG_DEF;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryWOLLink>
#3272: FILE: drivers/staging/et131x/et131x_config.c:249:
+	etdev->RegistryWOLLink = PARM_WOL_LINK_DEF;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryWOLMatch>
#3273: FILE: drivers/staging/et131x/et131x_config.c:250:
+	etdev->RegistryWOLMatch = PARM_WOL_MATCH_DEF;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryMACStat>
#3281: FILE: drivers/staging/et131x/et131x_config.c:258:
+	etdev->RegistryMACStat = PARM_MAC_STAT_DEF;

CHECK:CAMELCASE: Avoid CamelCase: <RegistrySCGain>
#3282: FILE: drivers/staging/et131x/et131x_config.c:259:
+	etdev->RegistrySCGain = PARM_SC_GAIN_DEF;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryPMWOL>
#3283: FILE: drivers/staging/et131x/et131x_config.c:260:
+	etdev->RegistryPMWOL = PARM_PM_WOL_DEF;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryNMIDisable>
#3287: FILE: drivers/staging/et131x/et131x_config.c:263:
+		etdev->RegistryNMIDisable = et131x_nmi_disable;

CHECK:CAMELCASE: Avoid CamelCase: <macAddrDef>
#3300: FILE: drivers/staging/et131x/et131x_config.c:271:
+	memcpy(etdev->CurrentAddress, macAddrDef, ETH_ALEN);

CHECK:CAMELCASE: Avoid CamelCase: <bOverrideAddress>
#3301: FILE: drivers/staging/et131x/et131x_config.c:272:
+	etdev->bOverrideAddress = false;

CHECK:CAMELCASE: Avoid CamelCase: <DumpTxQueueContents>
#3382: FILE: drivers/staging/et131x/et131x_debug.c:111:
+void DumpTxQueueContents(int dbgLvl, struct et131x_adapter *etdev)

CHECK:CAMELCASE: Avoid CamelCase: <dbgLvl>
#3382: FILE: drivers/staging/et131x/et131x_debug.c:111:
+void DumpTxQueueContents(int dbgLvl, struct et131x_adapter *etdev)

CHECK:SPACING: No space is necessary after a cast
#3414: FILE: drivers/staging/et131x/et131x_debug.c:154:
+		(uint32_t __iomem *) etdev->CSRAddress;

CHECK:CAMELCASE: Avoid CamelCase: <DumpDeviceReg>
#3429: FILE: drivers/staging/et131x/et131x_debug.c:187:
+void DumpDeviceReg(int dbgLvl, struct et131x_adapter *etdev)

CHECK:SPACING: No space is necessary after a cast
#3435: FILE: drivers/staging/et131x/et131x_debug.c:192:
+		(uint32_t __iomem *) etdev->CSRAddress;

CHECK:SPACING: No space is necessary after a cast
#3448: FILE: drivers/staging/et131x/et131x_initpci.c:450:
+	struct et131x_adapter *etdev = (struct et131x_adapter *) data;

CHECK:CAMELCASE: Avoid CamelCase: <Bmsr>
#3468: FILE: drivers/staging/et131x/et131x_initpci.c:463:
+	if (!etdev->Bmsr.bits.link_status &&

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3479: FILE: drivers/staging/et131x/et131x_initpci.c:471:
+		if (!etdev->Bmsr.bits.link_status
+		    && etdev->RegistryPhyComa) {

CHECK:CAMELCASE: Avoid CamelCase: <ErrorTimer>
#3494: FILE: drivers/staging/et131x/et131x_initpci.c:483:
+	mod_timer(&etdev->ErrorTimer, jiffies +

CHECK:SPACING: No space is necessary after a cast
#3503: FILE: drivers/staging/et131x/et131x_initpci.c:494:
+	struct et131x_adapter *etdev = (struct et131x_adapter *) data;

CHECK:CAMELCASE: Avoid CamelCase: <bLinkTimerActive>
#3508: FILE: drivers/staging/et131x/et131x_initpci.c:498:
+	etdev->bLinkTimerActive = false;

CHECK:CAMELCASE: Avoid CamelCase: <bSetPending>
#3527: FILE: drivers/staging/et131x/et131x_initpci.c:510:
+		etdev->bSetPending = false;

CHECK:CAMELCASE: Avoid CamelCase: <GlobStatus>
#3617: FILE: drivers/staging/et131x/et131x_isr.c:216:
+	INTERRUPT_t GlobStatus = etdev->Stats.InterruptStatus;

CHECK:CAMELCASE: Avoid CamelCase: <InterruptStatus>
#3617: FILE: drivers/staging/et131x/et131x_isr.c:216:
+	INTERRUPT_t GlobStatus = etdev->Stats.InterruptStatus;

CHECK:CAMELCASE: Avoid CamelCase: <TxOnly>
#3644: FILE: drivers/staging/et131x/et131x_isr.c:275:
+			if (etdev->FlowControl == TxOnly ||

CHECK:CAMELCASE: Avoid CamelCase: <TxMacTest>
#3654: FILE: drivers/staging/et131x/et131x_isr.c:333:
+			etdev->TxMacTest.value =

CHECK:SPACING: No space is necessary after a cast
#3675: FILE: drivers/staging/et131x/et131x_isr.c:379:
+			MiRead(etdev, (uint8_t) offsetof(MI_REGS_t, isr),

CHECK:CAMELCASE: Avoid CamelCase: <BmsrData>
#3688: FILE: drivers/staging/et131x/et131x_isr.c:388:
+				    etdev->Bmsr.value ^ BmsrData.value;

CHECK:CAMELCASE: Avoid CamelCase: <BmsrInts>
#3698: FILE: drivers/staging/et131x/et131x_isr.c:397:
+				et131x_Mii_check(etdev, BmsrData, BmsrInts);

CHECK:CAMELCASE: Avoid CamelCase: <TxMacErr>
#3705: FILE: drivers/staging/et131x/et131x_isr.c:403:
+			etdev->TxRing.TxMacErr.value =

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_NON_RECOVER_ERROR>
#3807: FILE: drivers/staging/et131x/et131x_netdev.c:626:
+	if (MP_TEST_FLAG(etdev, fMP_ADAPTER_NON_RECOVER_ERROR)) {

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_HARDWARE_ERROR>
#3814: FILE: drivers/staging/et131x/et131x_netdev.c:632:
+	if (MP_TEST_FLAG(etdev, fMP_ADAPTER_HARDWARE_ERROR)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around etdev->TxRing.pTxStatusVa
#3833: FILE: drivers/staging/et131x/et131x_netdev.c:648:
+			    *(etdev->TxRing.pTxStatusVa);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082438.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 206 checks, 3635 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082438.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
