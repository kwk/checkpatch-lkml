ERROR:SPACING: space required before the open brace '{'
#178: FILE: arch/um/kernel/exec.c:32:
+	if(ret){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#178: FILE: arch/um/kernel/exec.c:32:
+	if(ret){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/um/kernel/exec.c:33:
+		printk("flush_thread - clearing address space failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#180: FILE: arch/um/kernel/exec.c:34:
+		printk("flush_thread - clearing address space failed, "
+		       "err = %d\n", ret);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#299: FILE: arch/um/kernel/process.c:57:
+	return(userspace_pid[0]);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open parenthesis '('
#319: FILE: arch/um/kernel/process.c:121:
+		if(current->pid == 0)

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: arch/um/kernel/process.c:129:
+		if(current->pid == 0)

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: arch/um/kernel/process.c:169:
+	if(current->thread.prev_sched != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->thread.prev_sched"
#359: FILE: arch/um/kernel/process.c:169:
+	if(current->thread.prev_sched != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open brace '{'
#370: FILE: arch/um/kernel/process.c:180:
+	if(n == 1){

ERROR:SPACING: space required before the open parenthesis '('
#370: FILE: arch/um/kernel/process.c:180:
+	if(n == 1){

CHECK:BRACES: braces {} should be used on all arms of this statement
#370: FILE: arch/um/kernel/process.c:180:
+	if(n == 1){
[...]
+	else do_exit(0);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#375: FILE: arch/um/kernel/process.c:185:
+	else do_exit(0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#375: FILE: arch/um/kernel/process.c:185:
+	}
+	else do_exit(0);

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#382: FILE: arch/um/kernel/process.c:192:
+	if(current->thread.prev_sched == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->thread.prev_sched"
#382: FILE: arch/um/kernel/process.c:192:
+	if(current->thread.prev_sched == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#389: FILE: arch/um/kernel/process.c:199:
+	 * improve performance. -bb */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open brace '{'
#413: FILE: arch/um/kernel/process.c:219:
+	if(current->thread.forking){

ERROR:SPACING: space required before the open parenthesis '('
#413: FILE: arch/um/kernel/process.c:219:
+	if(current->thread.forking){

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: arch/um/kernel/process.c:220:
+^I  ^Imemcpy(&p->thread.regs.regs, &regs->regs,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#414: FILE: arch/um/kernel/process.c:220:
+^I  ^Imemcpy(&p->thread.regs.regs, &regs->regs,$

ERROR:SPACING: space required before the open parenthesis '('
#417: FILE: arch/um/kernel/process.c:223:
+		if(sp != 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#430: FILE: arch/um/kernel/process.c:230:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: arch/um/kernel/process.c:230:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#478: FILE: arch/um/kernel/reboot.c:18:
+	if(proc_mm)

CHECK:BRACES: Unbalanced braces around else statement
#483: FILE: arch/um/kernel/reboot.c:23:
+	else {

ERROR:SPACING: space required before the open brace '{'
#488: FILE: arch/um/kernel/reboot.c:28:
+		for_each_process(p){

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: arch/um/kernel/reboot.c:29:
+			if(p->mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->mm"
#489: FILE: arch/um/kernel/reboot.c:29:
+			if(p->mm == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#780: FILE: arch/um/kernel/tlb.c:357:
+	if(!pgd_present(*pgd))

ERROR:SPACING: space required before the open parenthesis '('
#784: FILE: arch/um/kernel/tlb.c:361:
+	if(!pud_present(*pud))

ERROR:SPACING: space required before the open parenthesis '('
#788: FILE: arch/um/kernel/tlb.c:365:
+	if(!pmd_present(*pmd))

ERROR:SPACING: space required before the open brace '{'
#806: FILE: arch/um/kernel/tlb.c:383:
+	if(pte_newpage(*pte)){

ERROR:SPACING: space required before the open parenthesis '('
#806: FILE: arch/um/kernel/tlb.c:383:
+	if(pte_newpage(*pte)){

CHECK:BRACES: braces {} should be used on all arms of this statement
#806: FILE: arch/um/kernel/tlb.c:383:
+	if(pte_newpage(*pte)){
[...]
+	else if(pte_newprot(*pte))
[...]

ERROR:SPACING: space required before the open brace '{'
#807: FILE: arch/um/kernel/tlb.c:384:
+		if(pte_present(*pte)){

ERROR:SPACING: space required before the open parenthesis '('
#807: FILE: arch/um/kernel/tlb.c:384:
+		if(pte_present(*pte)){

CHECK:BRACES: braces {} should be used on all arms of this statement
#807: FILE: arch/um/kernel/tlb.c:384:
+		if(pte_present(*pte)){
[...]
+		else err = unmap(mm_id, address, PAGE_SIZE, 1, &flush);
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#815: FILE: arch/um/kernel/tlb.c:392:
+		else err = unmap(mm_id, address, PAGE_SIZE, 1, &flush);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#815: FILE: arch/um/kernel/tlb.c:392:
+		}
+		else err = unmap(mm_id, address, PAGE_SIZE, 1, &flush);

ERROR:SPACING: space required before the open parenthesis '('
#817: FILE: arch/um/kernel/tlb.c:394:
+	else if(pte_newprot(*pte))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#817: FILE: arch/um/kernel/tlb.c:394:
+	}
+	else if(pte_newprot(*pte))

ERROR:SPACING: space required before the open parenthesis '('
#820: FILE: arch/um/kernel/tlb.c:397:
+	if(err)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#828: FILE: arch/um/kernel/tlb.c:405:
+	printk("Failed to flush page for address 0x%lx\n", address);

ERROR:CODE_INDENT: code indent should use tabs where possible
#840: FILE: arch/um/kernel/tlb.c:455:
+        flush_tlb_kernel_range_common(addr, addr + PAGE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: arch/um/kernel/tlb.c:455:
+        flush_tlb_kernel_range_common(addr, addr + PAGE_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#847: FILE: arch/um/kernel/tlb.c:462:
+        int i, ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: arch/um/kernel/tlb.c:462:
+        int i, ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: arch/um/kernel/tlb.c:464:
+        for(i = 0; i <= last && !ret; i++){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: arch/um/kernel/tlb.c:464:
+        for(i = 0; i <= last && !ret; i++){$

ERROR:SPACING: space required before the open brace '{'
#849: FILE: arch/um/kernel/tlb.c:464:
+        for(i = 0; i <= last && !ret; i++){

ERROR:SPACING: space required before the open parenthesis '('
#849: FILE: arch/um/kernel/tlb.c:464:
+        for(i = 0; i <= last && !ret; i++){

ERROR:SPACING: space required before the open brace '{'
#851: FILE: arch/um/kernel/tlb.c:466:
+		switch(op->type){

ERROR:SPACING: space required before the open parenthesis '('
#851: FILE: arch/um/kernel/tlb.c:466:
+		switch(op->type){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#868: FILE: arch/um/kernel/tlb.c:483:
+			printk("Unknown op type %d in do_ops\n", op->type);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ops', this function's name, in a string
#868: FILE: arch/um/kernel/tlb.c:483:
+			printk("Unknown op type %d in do_ops\n", op->type);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#879: FILE: arch/um/kernel/tlb.c:494:
+        if(!proc_mm && (end_addr > CONFIG_STUB_START))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: arch/um/kernel/tlb.c:494:
+        if(!proc_mm && (end_addr > CONFIG_STUB_START))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end_addr > CONFIG_STUB_START'
#879: FILE: arch/um/kernel/tlb.c:494:
+        if(!proc_mm && (end_addr > CONFIG_STUB_START))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#879: FILE: arch/um/kernel/tlb.c:494:
+        if(!proc_mm && (end_addr > CONFIG_STUB_START))

ERROR:CODE_INDENT: code indent should use tabs where possible
#880: FILE: arch/um/kernel/tlb.c:495:
+                end_addr = CONFIG_STUB_START;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: arch/um/kernel/tlb.c:495:
+                end_addr = CONFIG_STUB_START;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: arch/um/kernel/tlb.c:497:
+        fix_range_common(mm, start_addr, end_addr, force, do_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: arch/um/kernel/tlb.c:497:
+        fix_range_common(mm, start_addr, end_addr, force, do_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#889: FILE: arch/um/kernel/tlb.c:503:
+        if(vma->vm_mm == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: arch/um/kernel/tlb.c:503:
+        if(vma->vm_mm == NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#889: FILE: arch/um/kernel/tlb.c:503:
+        if(vma->vm_mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_mm"
#889: FILE: arch/um/kernel/tlb.c:503:
+        if(vma->vm_mm == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#890: FILE: arch/um/kernel/tlb.c:504:
+                flush_tlb_kernel_range_common(start, end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: arch/um/kernel/tlb.c:504:
+                flush_tlb_kernel_range_common(start, end);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#891: FILE: arch/um/kernel/tlb.c:505:
+        else fix_range(vma->vm_mm, start, end, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: arch/um/kernel/tlb.c:505:
+        else fix_range(vma->vm_mm, start, end, 0);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#891: FILE: arch/um/kernel/tlb.c:505:
+        else fix_range(vma->vm_mm, start, end, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#900: FILE: arch/um/kernel/tlb.c:513:
+         * destroyed.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#901: FILE: arch/um/kernel/tlb.c:514:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#902: FILE: arch/um/kernel/tlb.c:515:
+        if(atomic_read(&mm->mm_users) == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: arch/um/kernel/tlb.c:515:
+        if(atomic_read(&mm->mm_users) == 0)$

ERROR:SPACING: space required before the open parenthesis '('
#902: FILE: arch/um/kernel/tlb.c:515:
+        if(atomic_read(&mm->mm_users) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#903: FILE: arch/um/kernel/tlb.c:516:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: arch/um/kernel/tlb.c:516:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: arch/um/kernel/tlb.c:519:
+        fix_range(mm, 0, end, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: arch/um/kernel/tlb.c:519:
+        fix_range(mm, 0, end, 0);$

ERROR:SPACING: space required before the open parenthesis '('
#915: FILE: arch/um/kernel/tlb.c:527:
+	while(vma != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#915: FILE: arch/um/kernel/tlb.c:527:
+	while(vma != NULL) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#955: FILE: arch/um/kernel/um_arch.c:263:
+	else *task_size_out = CONFIG_STUB_START & PGDIR_MASK;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#1092: FILE: include/asm-um/processor-generic.h:127:
+#define KSTK_REG(tsk, reg) get_thread_reg(reg, &tsk->thread.switch_buf)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1237: FILE: arch/um/include/kern_util.h:57:
+extern void timer_handler(int sig, struct uml_pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1246: FILE: arch/um/include/kern_util.h:67:
+extern void syscall_trace(struct uml_pt_regs *regs, int entryexit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1249: FILE: arch/um/include/kern_util.h:69:
+extern unsigned int do_IRQ(int irq, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1258: FILE: arch/um/include/kern_util.h:79:
+extern void relay_signal(int sig, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1261: FILE: arch/um/include/kern_util.h:81:
+extern void timer_irq(struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1270: FILE: arch/um/include/kern_util.h:112:
+extern void sigio_handler(int sig, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1273: FILE: arch/um/include/kern_util.h:114:
+extern void copy_sc(struct uml_pt_regs *regs, void *from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1278: FILE: arch/um/include/kern_util.h:119:
+extern int start_uml(void);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1366: FILE: arch/um/sys-i386/ptrace.c:26:
+		printk(KERN_WARNING "arch_switch_tls failed, errno %d, not EINVAL\n", -err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1369: FILE: arch/um/sys-i386/ptrace.c:28:
+		printk(KERN_WARNING "arch_switch_tls failed, errno = EINVAL\n");

CHECK:SPACING: No space is necessary after a cast
#1392: FILE: arch/um/sys-x86_64/syscalls.c:93:
+	return arch_prctl(current, code, (unsigned long __user *) addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1407: FILE: arch/um/sys-x86_64/syscalls.c:115:
+        arch_prctl(to, ARCH_SET_FS, (void __user *) to->thread.arch.fs);$

CHECK:SPACING: No space is necessary after a cast
#1407: FILE: arch/um/sys-x86_64/syscalls.c:115:
+        arch_prctl(to, ARCH_SET_FS, (void __user *) to->thread.arch.fs);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1407: FILE: arch/um/sys-x86_64/syscalls.c:115:
+        arch_prctl(to, ARCH_SET_FS, (void __user *) to->thread.arch.fs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1418: FILE: arch/um/kernel/ptrace.c:231:
+                ret = arch_prctl(child, data, (void *) addr);$

CHECK:SPACING: No space is necessary after a cast
#1418: FILE: arch/um/kernel/ptrace.c:231:
+                ret = arch_prctl(child, data, (void *) addr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1418: FILE: arch/um/kernel/ptrace.c:231:
+                ret = arch_prctl(child, data, (void *) addr);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1732: FILE: arch/um/os-Linux/skas/process.c:134:
+static void handle_segv(int pid, struct uml_pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__switch_mm', this function's name, in a string
#1804: FILE: arch/um/os-Linux/skas/process.c:590:
+			panic("__switch_mm - PTRACE_SWITCH_MM failed, "

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1825: FILE: arch/um/os-Linux/skas/trap.c:24:
+	void (*handler)(int, struct uml_pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct uml_pt_regs *' should also have an identifier name
#1825: FILE: arch/um/os-Linux/skas/trap.c:24:
+	void (*handler)(int, struct uml_pt_regs *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1990: FILE: arch/um/sys-x86_64/signal.c:24:
+       (regs)->regs[(regno) / sizeof(unsigned long)] = (sc)->regname$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2007: FILE: arch/um/sys-x86_64/signal.c:55:
+       __get_user((regs)->regs.regs[(regno) / sizeof(unsigned long)], \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2030: FILE: arch/um/sys-x86_64/signal.c:94:
+       __put_user((regs)->regs.regs[(regno) / sizeof(unsigned long)], \$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2067: FILE: arch/um/include/arch.h:12:
+extern int arch_fixup(unsigned long address, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2068: FILE: arch/um/include/arch.h:13:
+extern int arch_handle_signal(int sig, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2092: FILE: arch/um/include/irq_user.h:24:
+extern void sigio_handler(int sig, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2120: FILE: arch/um/include/os.h:284:
+extern void save_registers(int pid, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2121: FILE: arch/um/include/os.h:285:
+extern void restore_registers(int pid, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2122: FILE: arch/um/include/os.h:286:
+extern void userspace(struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2135: FILE: arch/um/include/registers.h:12:
+extern void init_thread_registers(struct uml_pt_regs *to);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2140: FILE: arch/um/include/registers.h:15:
+extern void save_registers(int pid, struct uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2141: FILE: arch/um/include/registers.h:16:
+extern void restore_registers(int pid, struct uml_pt_regs *regs);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2154: FILE: arch/um/include/skas/mmu-skas.h:21:
+extern void __switch_mm(struct mm_id * mm_idp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2154: FILE: arch/um/include/skas/mmu-skas.h:21:
+extern void __switch_mm(struct mm_id * mm_idp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2166: FILE: arch/um/include/skas/skas.h:18:
+extern void handle_syscall(struct uml_pt_regs *regs);

CHECK:SPACING: No space is necessary after a cast
#2179: FILE: arch/um/include/task.h:6:
+#define TASK_REGS(task) ((struct uml_pt_regs *) &(((char *) (task))[HOST_TASK_REGS]))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2333: FILE: include/asm-um/mmu_context.h:53:
+extern int init_new_context(struct task_struct *task, struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2347: FILE: include/asm-um/mmu_context.h:55:
+extern void destroy_context(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2369: FILE: include/asm-um/ptrace-generic.h:47:
+extern void send_sigtrap(struct task_struct *tsk, struct uml_pt_regs *regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2418: FILE: include/asm-um/ptrace-x86_64.h:79:
+extern long arch_prctl(struct task_struct *task, int code,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2623: FILE: include/asm-um/tlbflush.h:27:
+extern void flush_tlb_page(struct vm_area_struct *vma, unsigned long address);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390876.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 59 errors, 29 warnings, 40 checks, 1887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390876.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
