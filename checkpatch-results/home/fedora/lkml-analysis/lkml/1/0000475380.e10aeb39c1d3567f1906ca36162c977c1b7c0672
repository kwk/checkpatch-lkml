WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
Doh! The attached patch introduces /sys/class/misc (along with some bug-fixes.)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#131: FILE: acpi_enumerator.c:90:
+	if (!page) {
+		goto out;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: acpi_enumerator.h:32:
+extern size_t get_handlers_desc(char **buf);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: acpi_enumerator.h:36:
+extern int acpi_enum(void);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#263: FILE: input_enumerator.c:159:
+	if (!page) {
+		goto out;
+	}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: input_enumerator.h:40:
+extern size_t get_devices_desc(char **buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: input_enumerator.h:44:
+extern int input_enum(void);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#341: FILE: procfs.c:47:
+	if (count == left) {
 		*eof = 1;
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: procfs.c:64:
+	if (!buf) {
+		goto out;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#364: FILE: procfs.c:68:
+	if (size > PAGE_SIZE) {
+		size = PAGE_SIZE;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#374: FILE: procfs.c:78:
+	if (count > left) {
+		count = left;
+	}

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#599: FILE: procfs.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#652: FILE: sin.c:77:
+		if (!shutdown) {
+			(void) mod_timer(&timer, next);
+		}

CHECK:SPACING: No space is necessary after a cast
#653: FILE: sin.c:78:
+			(void) mod_timer(&timer, next);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#692: FILE: sin.c:235:
+	if (err < 0) {
+		goto out;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#697: FILE: sin.c:240:
+	if (err < 0) {
+		goto cleanout1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#702: FILE: sin.c:245:
+	if (err < 0) {
+		goto cleanout2;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#708: FILE: sin.c:251:
+		printk(KERN_ERR "sin: sysfs initialization failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#714: FILE: sin.c:257:
+		printk(KERN_ERR "sin: procfs initialization failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#718: FILE: sin.c:261:
+	printk("System Inactivity Notifier 1.4 - (c) Alessandro Di Marco <dmr@gmx.it>\n");

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#768: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#773: FILE: sysfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#790: FILE: sysfs.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_input' to 'input_show'
#816: FILE: sysfs.c:44:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_acpi' to 'acpi_show'
#831: FILE: sysfs.c:59:
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#843: FILE: sysfs.c:71:
+		if (size > PAGE_SIZE) {
+			size = PAGE_SIZE;
+		}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_table' to 'table_show' 'store_table' to 'table_store'
#858: FILE: sysfs.c:86:
+}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'store_interact' to 'interact_store'
#868: FILE: sysfs.c:96:
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#881: FILE: sysfs.c:109:
+	if (err < 0) {
+		goto out;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#886: FILE: sysfs.c:114:
+	if (err < 0) {
+		goto cleanout1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#891: FILE: sysfs.c:119:
+	if (err < 0) {
+		goto cleanout2;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#896: FILE: sysfs.c:124:
+	if (err < 0) {
+		goto cleanout3;
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#925: FILE: sysfs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#942: FILE: sysfs.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#949: FILE: sysfs.h:25:
+extern int start_sysfs(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#950: FILE: sysfs.h:26:
+extern void stop_sysfs(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'endp' - possible side-effects?
#1018: FILE: table.c:98:
+#define parse_num(endp) ({					\
+			const char *cp = endp;			\
+								\
+			while (*cp && isspace(*cp)) {		\
+				++cp;				\
+			}					\
+								\
+			simple_strtol(cp, (char **) &endp, 10);	\
 		})

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: table.c:105:
+			simple_strtol(cp, (char **) &endp, 10);	\

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1025: FILE: table.c:105:
+			simple_strtol(cp, (char **) &endp, 10);	\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1044: FILE: table.c:135:
+	table = t = kmalloc(TABLE_BUFFER_SIZE, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1045: FILE: table.c:136:
+	if (!table) {
+		return -EFAULT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1051: FILE: table.c:142:
+	for (i = 0; i < rt.dnum; i++) {
+		t += sprintf(t, "%d ", rt.devices[i]);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1090: FILE: table.c:270:
+	if (err < 0) {
+		goto cleanout3;
+	}

WARNING:SIZEOF_PARENTHESIS: sizeof TABLE_HELP should be sizeof(TABLE_HELP)
#1127: FILE: table.c:297:
+		size = sizeof TABLE_HELP;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1130: FILE: table.c:300:
+		if (table) {
[...]
+		} else {
[...]

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1183: FILE: table.h:76:
+extern unsigned long occasionally_generate_event(struct acpi_device *acpi_device, unsigned long last);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1183: FILE: table.h:76:
+extern unsigned long occasionally_generate_event(struct acpi_device *acpi_device, unsigned long last);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1188: FILE: table.h:79:
+extern int push_table(const char *buf, unsigned long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1189: FILE: table.h:80:
+extern size_t pull_table(char **buf);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 33 warnings, 13 checks, 1008 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
