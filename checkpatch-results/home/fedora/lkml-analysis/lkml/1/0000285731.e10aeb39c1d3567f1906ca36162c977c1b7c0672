WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#206: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#211: FILE: include/linux/printk.h:1:
+#ifndef _LINUX_PRINTK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#239: FILE: include/linux/printk.h:29:
+	__attribute__ ((format (printf, 1, 0)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: include/linux/printk.h:30:
+asmlinkage int printk(const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#241: FILE: include/linux/printk.h:31:
+	__attribute__ ((format (printf, 1, 2))) __cold;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/linux/printk.h:32:
+extern int log_buf_get_len(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/printk.h:33:
+extern int log_buf_read(int idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/linux/printk.h:34:
+extern int log_buf_copy(char *dest, int idx, int len);

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#248: FILE: include/linux/printk.h:38:
+extern int printk_ratelimit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: include/linux/printk.h:38:
+extern int printk_ratelimit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: include/linux/printk.h:39:
+extern int __ratelimit(int ratelimit_jiffies, int ratelimit_burst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/printk.h:40:
+extern int __printk_ratelimit(int ratelimit_jiffies, int ratelimit_burst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/linux/printk.h:41:
+extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#254: FILE: include/linux/printk.h:44:
+static inline int __attribute__ ((format (printf, 1, 0)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#259: FILE: include/linux/printk.h:49:
+}
+static inline int __attribute__ ((format (printf, 1, 2))) __cold

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#259: FILE: include/linux/printk.h:49:
+static inline int __attribute__ ((format (printf, 1, 2))) __cold

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#260: FILE: include/linux/printk.h:50:
+printk(const char *s, ...)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#264: FILE: include/linux/printk.h:54:
+}
+static inline int log_buf_get_len(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#268: FILE: include/linux/printk.h:58:
+}
+static inline int log_buf_read(int idx)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#272: FILE: include/linux/printk.h:62:
+}
+static inline int log_buf_copy(char *dest, int idx, int len)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#276: FILE: include/linux/printk.h:66:
+}
+static inline int printk_ratelimit(void)

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#276: FILE: include/linux/printk.h:66:
+static inline int printk_ratelimit(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#280: FILE: include/linux/printk.h:70:
+}
+static inline int __printk_ratelimit(int ratelimit_jiffies,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#285: FILE: include/linux/printk.h:75:
+}
+static inline bool printk_timed_ratelimit(unsigned long *caller_jiffies,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#292: FILE: include/linux/printk.h:82:
+extern void __attribute__((format(printf, 1, 2)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/printk.h:82:
+extern void __attribute__((format(printf, 1, 2)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/printk.h:96:
+extern void dump_stack(void) __cold;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#313: FILE: include/linux/printk.h:103:
+};
+extern void hex_dump_to_buffer(const void *buf, size_t len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/printk.h:103:
+extern void hex_dump_to_buffer(const void *buf, size_t len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: include/linux/printk.h:106:
+extern void print_hex_dump(const char *level, const char *prefix_str,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/printk.h:109:
+extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#324: FILE: include/linux/printk.h:114:
+	printk(KERN_EMERG fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#326: FILE: include/linux/printk.h:116:
+	printk(KERN_ALERT fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#328: FILE: include/linux/printk.h:118:
+	printk(KERN_CRIT fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: include/linux/printk.h:120:
+	printk(KERN_ERR fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#332: FILE: include/linux/printk.h:122:
+	printk(KERN_WARNING fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#334: FILE: include/linux/printk.h:124:
+	printk(KERN_NOTICE fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#336: FILE: include/linux/printk.h:126:
+	printk(KERN_INFO fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#341: FILE: include/linux/printk.h:131:
+	printk(KERN_DEBUG fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#344: FILE: include/linux/printk.h:134:
+	({ if (0) printk(KERN_DEBUG fmt, ##arg); 0; })

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285731.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 20 checks, 276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285731.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
