ERROR:SPACING: space required before the open parenthesis '('
#112: FILE: drivers/s390/char/tape_3590.c:128:
+	if(in->flags & 0x40)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: drivers/s390/char/tape_3590.c:132:
+	if(in->flags & 0x80)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#141: FILE: drivers/s390/char/tape_3590.c:157:
+		printk("Invalid KEKL number: %d\n", in->count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: drivers/s390/char/tape_3590.c:158:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kekl->type == TAPE390_KEKL_TYPE_HASH'
#156: FILE: drivers/s390/char/tape_3590.c:172:
+	if ((kekl->type == TAPE390_KEKL_TYPE_HASH) &&
+	    (kekl->type_on_tape == TAPE390_KEKL_TYPE_LABEL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kekl->type_on_tape == TAPE390_KEKL_TYPE_LABEL'
#156: FILE: drivers/s390/char/tape_3590.c:172:
+	if ((kekl->type == TAPE390_KEKL_TYPE_HASH) &&
+	    (kekl->type_on_tape == TAPE390_KEKL_TYPE_LABEL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#189: FILE: drivers/s390/char/tape_3590.c:205:
+	int_kekls = kmalloc(sizeof(*int_kekls), GFP_KERNEL|GFP_DMA);
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: drivers/s390/char/tape_3590.c:214:
+	memset(order,0,sizeof(*order));
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: drivers/s390/char/tape_3590.c:214:
+	memset(order,0,sizeof(*order));
 	              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tape_3592_ioctl_kekl_query', this function's name, in a string
#227: FILE: drivers/s390/char/tape_3590.c:243:
+	DBF_EVENT(6, "tape_3592_ioctl_kekl_query\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#229: FILE: drivers/s390/char/tape_3590.c:245:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#238: FILE: drivers/s390/char/tape_3590.c:254:
+	if (copy_to_user((char __user *) arg, ext_kekls, sizeof(*ext_kekls))) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tape_3592_ioctl_kekl_set', this function's name, in a string
#290: FILE: drivers/s390/char/tape_3590.c:306:
+	DBF_EVENT(6, "tape_3592_ioctl_kekl_set\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#292: FILE: drivers/s390/char/tape_3590.c:308:
+		return -ENOSYS;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tape_3592_enable_crypt', this function's name, in a string
#316: FILE: drivers/s390/char/tape_3590.c:332:
+	DBF_EVENT(6, "tape_3592_enable_crypt\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#318: FILE: drivers/s390/char/tape_3590.c:334:
+		return -ENOSYS;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: drivers/s390/char/tape_3590.c:339:
+	memset(data,0,72);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: drivers/s390/char/tape_3590.c:339:
+	memset(data,0,72);
 	             ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tape_3592_disable_crypt', this function's name, in a string
#347: FILE: drivers/s390/char/tape_3590.c:363:
+	DBF_EVENT(6, "tape_3592_disable_crypt\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#349: FILE: drivers/s390/char/tape_3590.c:365:
+		return -ENOSYS;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: drivers/s390/char/tape_3590.c:370:
+	memset(data,0,72);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: drivers/s390/char/tape_3590.c:370:
+	memset(data,0,72);
 	             ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tape_3592_ioctl_crypt_set', this function's name, in a string
#376: FILE: drivers/s390/char/tape_3590.c:392:
+	DBF_EVENT(6, "tape_3592_ioctl_crypt_set\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#378: FILE: drivers/s390/char/tape_3590.c:394:
+		return -ENOSYS;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tape_3592_ioctl_crypt_query', this function's name, in a string
#397: FILE: drivers/s390/char/tape_3590.c:413:
+	DBF_EVENT(6, "tape_3592_ioctl_crypt_query\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#399: FILE: drivers/s390/char/tape_3590.c:415:
+		return -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/s390/char/tape_3590.c:417:
+	if (copy_to_user((char __user *) arg, &TAPE_3590_CRYPT_INFO(device),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: drivers/s390/char/tape_3590.c:418:
+	if (copy_to_user((char __user *) arg, &TAPE_3590_CRYPT_INFO(device),
+		sizeof(TAPE_3590_CRYPT_INFO(device))))

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '|=' should be on the previous line
#501: FILE: drivers/s390/char/tape_3590.c:773:
+		TAPE_3590_CRYPT_INFO(device).status
+			|= TAPE390_CRYPT_ON_MASK;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around device->modeset_byte
#502: FILE: drivers/s390/char/tape_3590.c:774:
+		*(device->modeset_byte) |= 0x03;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '&=' should be on the previous line
#506: FILE: drivers/s390/char/tape_3590.c:778:
+		TAPE_3590_CRYPT_INFO(device).status
+			&= ~TAPE390_CRYPT_ON_MASK;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around device->modeset_byte
#507: FILE: drivers/s390/char/tape_3590.c:779:
+		*(device->modeset_byte) &= ~0x03;

CHECK:SPACING: No space is necessary after a cast
#547: FILE: drivers/s390/char/tape_3590.c:1337:
+	sense = ((struct tape_3590_sense *) irb->ecw)->fmt.data;

CHECK:SPACING: No space is necessary after a cast
#550: FILE: drivers/s390/char/tape_3590.c:1340:
+	drv_rc = *((u32*) &sense[5]) & 0xffffff;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#550: FILE: drivers/s390/char/tape_3590.c:1340:
+	drv_rc = *((u32*) &sense[5]) & 0xffffff;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#552: FILE: drivers/s390/char/tape_3590.c:1342:
+	ekm_rc2 = *((u16*) &sense[10]);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#552: FILE: drivers/s390/char/tape_3590.c:1342:
+	ekm_rc2 = *((u16*) &sense[10]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cu_rc == 0'
#553: FILE: drivers/s390/char/tape_3590.c:1343:
+	if ((cu_rc == 0) && (ekm_rc2 == 0xee31))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ekm_rc2 == 0xee31'
#553: FILE: drivers/s390/char/tape_3590.c:1343:
+	if ((cu_rc == 0) && (ekm_rc2 == 0xee31))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cu_rc == 1'
#556: FILE: drivers/s390/char/tape_3590.c:1346:
+	if ((cu_rc == 1) || (cu_rc == 2))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cu_rc == 2'
#556: FILE: drivers/s390/char/tape_3590.c:1346:
+	if ((cu_rc == 1) || (cu_rc == 2))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: drivers/s390/char/tape_3590.c:1352:
+	PRINT_ERR("(%s): CU=%02X DRIVE=%06X EKM=%02X:%04X\n", bus_id, cu_rc,
+		drv_rc, ekm_rc1, ekm_rc2);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*data)...) over kzalloc(sizeof(struct tape_3590_disc_data)...)
#629: FILE: drivers/s390/char/tape_3590.c:1563:
+	data = kzalloc(sizeof(struct tape_3590_disc_data), GFP_KERNEL | GFP_DMA);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#644: FILE: drivers/s390/char/tape_3590.c:1574:
+	rc = read_dev_chars(device->cdev, (void**)&rdc_data, 64);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#702: FILE: drivers/s390/char/tape_3590.h:52:
+#define TAPE_3590_CRYPT_INFO(device) \
+	((struct tape_3590_disc_data*)(device->discdata))->crypt_info

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#702: FILE: drivers/s390/char/tape_3590.h:52:
+#define TAPE_3590_CRYPT_INFO(device) \
+	((struct tape_3590_disc_data*)(device->discdata))->crypt_info

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#703: FILE: drivers/s390/char/tape_3590.h:53:
+	((struct tape_3590_disc_data*)(device->discdata))->crypt_info

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#704: FILE: drivers/s390/char/tape_3590.h:54:
+#define TAPE_3590_READ_BACK_OP(device) \
+	((struct tape_3590_disc_data*)(device->discdata))->read_back_op

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#704: FILE: drivers/s390/char/tape_3590.h:54:
+#define TAPE_3590_READ_BACK_OP(device) \
+	((struct tape_3590_disc_data*)(device->discdata))->read_back_op

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#705: FILE: drivers/s390/char/tape_3590.h:55:
+	((struct tape_3590_disc_data*)(device->discdata))->read_back_op

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#718: FILE: drivers/s390/char/tape_3590.h:130:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#725: FILE: drivers/s390/char/tape_3590.h:137:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#730: FILE: drivers/s390/char/tape_3590.h:142:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#740: FILE: drivers/s390/char/tape_3590.h:152:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#748: FILE: drivers/s390/char/tape_3590.h:160:
+} __attribute__ ((packed));

CHECK:SPACING: No space is necessary after a cast
#826: FILE: drivers/s390/char/tape_core.c:816:
+	device = (struct tape_device *) data;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: drivers/s390/char/tape_core.c:820:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#833: FILE: drivers/s390/char/tape_core.c:823:
+	device->lb_timeout.data = (unsigned long) tape_put_device(device);

WARNING:LINE_SPACING: Missing a blank line after declarations
#849: FILE: drivers/s390/char/tape_core.c:1124:
+		struct tape_request *req;
+		req = list_entry(device->req_queue.next,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#971: FILE: include/asm-s390/tape390.h:47:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#973: FILE: include/asm-s390/tape390.h:49:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1011: FILE: include/asm-s390/tape390.h:87:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1015: FILE: include/asm-s390/tape390.h:91:
+} __attribute__ ((packed));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 24 warnings, 24 checks, 925 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
