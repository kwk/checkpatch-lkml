WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
                printk("4MB pages are not currently supported: %lx\n", address);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#155: FILE: arch/i386/Kconfig.debug:29:
+config KMMIO
+	bool "KMMIO (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	depends on KPROBES 
+	help
+	  KMMIO is a Kprobes add-ons for placing a probe on MMIO access, using
+	  register_kmmio(), and providing a callback function. This is useful
+	  for monitoring driver access specific MMIO address.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: arch/i386/Kconfig.debug:32:
+^Idepends on KPROBES $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#180: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: arch/i386/kernel/kmmio.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#185: FILE: arch/i386/kernel/kmmio.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#199: FILE: arch/i386/kernel/kmmio.c:15:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#202: FILE: arch/i386/kernel/kmmio.c:18:
+static int cpu=-1;
               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '-' (ctx:OxV)
#202: FILE: arch/i386/kernel/kmmio.c:18:
+static int cpu=-1;
                ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#203: FILE: arch/i386/kernel/kmmio.c:19:
+static struct kmmio_fault_page *cur_page = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#204: FILE: arch/i386/kernel/kmmio.c:20:
+static struct kmmio_probe *cur_probe = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: arch/i386/kernel/kmmio.c:23:
+ * Interrupts are disabled on entry as trap3 is an interrupt gate $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: arch/i386/kernel/kmmio.c:36:
+^I^I/* XXX some pending fault on other cpu may cause problem! */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: arch/i386/kernel/kmmio.c:41:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: arch/i386/kernel/kmmio.c:42:
+^Icur_probe = get_kmmio_probe(addr); $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#227: FILE: arch/i386/kernel/kmmio.c:43:
+	kmmio_saved_eflags = (regs->eflags & (TF_MASK|IF_MASK));
 	                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: arch/i386/kernel/kmmio.c:44:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#229: FILE: arch/i386/kernel/kmmio.c:45:
+	if (cur_probe && cur_probe->pre_handler) {
+		cur_probe->pre_handler(cur_probe, regs, addr);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: arch/i386/kernel/kmmio.c:48:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: arch/i386/kernel/kmmio.c:54:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: arch/i386/kernel/kmmio.c:55:
+	
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: arch/i386/kernel/kmmio.c:64:
+ * Interrupts are disabled on entry as trap1 is an interrupt gate $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/i386/kernel/kmmio.c:65:
+ * and they remain disabled thorough out this function.  $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#259: FILE: arch/i386/kernel/kmmio.c:75:
+	if (cur_probe && cur_probe->post_handler) {
+		cur_probe->post_handler(cur_probe, condition, regs);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: arch/i386/kernel/kmmio.c:81:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: arch/i386/kernel/kmmio.c:86:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: arch/i386/kernel/kmmio.c:89:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: arch/i386/kernel/kmmio.c:90:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: arch/i386/kernel/kmmio.c:101:
+static inline pte_t *get_pte(unsigned long address) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: arch/i386/kernel/kmmio.c:103:
+        pgd_t *pgd = pgd_offset_k(address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: arch/i386/kernel/kmmio.c:103:
+        pgd_t *pgd = pgd_offset_k(address);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: arch/i386/kernel/kmmio.c:106:
+	pmd_t *pmd = pmd_offset(pud, address);
+	if (pmd_large(*pmd)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#291: FILE: arch/i386/kernel/kmmio.c:107:
+		printk("4MB pages are not currently supported: %lx\n", address);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: arch/i386/kernel/kmmio.c:108:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: arch/i386/kernel/kmmio.c:117:
+static inline void clr_pte_bits(unsigned long addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: arch/i386/kernel/kmmio.c:118:
+^I^I^I^Iunsigned long bitmask) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: arch/i386/kernel/kmmio.c:121:
+	pte_t *pte;
+	pte = get_pte(addr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: arch/i386/kernel/kmmio.c:122:
+^Iset_pte( pte, __pte( pte_val(*pte) & ~bitmask) );^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#306: FILE: arch/i386/kernel/kmmio.c:122:
+	set_pte( pte, __pte( pte_val(*pte) & ~bitmask) );	

ERROR:SPACING: space prohibited before that close parenthesis ')'
#306: FILE: arch/i386/kernel/kmmio.c:122:
+	set_pte( pte, __pte( pte_val(*pte) & ~bitmask) );	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: arch/i386/kernel/kmmio.c:125:
+static inline void set_pte_bits(unsigned long addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: arch/i386/kernel/kmmio.c:126:
+^I^I^I^Iunsigned long bitmask) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: arch/i386/kernel/kmmio.c:129:
+	pte_t *pte;
+	pte = get_pte(addr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: arch/i386/kernel/kmmio.c:130:
+^Iset_pte( pte, __pte( pte_val(*pte) | bitmask) );^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#314: FILE: arch/i386/kernel/kmmio.c:130:
+	set_pte( pte, __pte( pte_val(*pte) | bitmask) );	

ERROR:SPACING: space prohibited before that close parenthesis ')'
#314: FILE: arch/i386/kernel/kmmio.c:130:
+	set_pte( pte, __pte( pte_val(*pte) | bitmask) );	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: arch/i386/kernel/kmmio.c:131:
+};^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: arch/i386/kernel/kmmio.c:134:
+{^I$

ERROR:SPACING: space required before the open parenthesis '('
#335: FILE: arch/i386/kernel/kmmio.c:151:
+	if((unsigned long)virt_addr & ~PAGE_MASK)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: arch/i386/kernel/kmmio.c:152:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: arch/i386/kernel/kmmio.c:153:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: arch/i386/kernel/kmmio.c:157:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#342: FILE: arch/i386/kernel/kmmio.c:158:
+	set_pte( pte, __pte( (pte_val(*pte) & ~PAGE_MASK) | bus_addr) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#342: FILE: arch/i386/kernel/kmmio.c:158:
+	set_pte( pte, __pte( (pte_val(*pte) & ~PAGE_MASK) | bus_addr) );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: arch/i386/kernel/kmmio.c:159:
+^Ireturn virt_addr+offset;^I^I^I^I^I^I^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#343: FILE: arch/i386/kernel/kmmio.c:159:
+	return virt_addr+offset;								
 	                ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#346: FILE: arch/i386/kernel/kmmio.c:162:
+EXPORT_SYMBOL_GPL(kmmio_invert_map);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: arch/i386/mm/fault.c:339:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#401: FILE: include/asm-i386/kmmio.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#413: FILE: include/asm-i386/kmmio.h:13:
+typedef unsigned long kmmio_addr_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#416: FILE: include/asm-i386/kmmio.h:16:
+extern void arm_kmmio_fault_page(kmmio_addr_t page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/asm-i386/kmmio.h:17:
+extern void disarm_kmmio_fault_page(kmmio_addr_t page);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: include/asm-i386/kmmio.h:18:
+extern int post_kmmio_handler(unsigned long condition, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: include/asm-i386/kmmio.h:18:
+extern int post_kmmio_handler(unsigned long condition, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: include/asm-i386/kmmio.h:20:
+extern int kmmio_handler(struct pt_regs *regs, unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/asm-i386/kmmio.h:21:
+extern void *kmmio_invert_map(void *virt_addr, unsigned long bus_addr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: include/asm-i386/kmmio.h:23:
+static inline int post_kmmio_handler(unsigned long condition, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: include/asm-i386/kmmio.h:24:
+^I^I^I^I     struct pt_regs *regs) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: include/asm-i386/kmmio.h:25:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: include/asm-i386/kmmio.h:26:
+^Ireturn 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: include/asm-i386/kmmio.h:28:
+static inline int kmmio_handler(struct pt_regs *regs, unsigned long addr) $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#428: FILE: include/asm-i386/kmmio.h:28:
+}
+static inline int kmmio_handler(struct pt_regs *regs, unsigned long addr) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: include/asm-i386/kmmio.h:29:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: include/asm-i386/kmmio.h:30:
+^Ireturn 0; $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#440: FILE: include/linux/kmmio.h:1:
+#ifndef _LINUX_KMMIO_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: include/linux/kmmio.h:12:
+typedef void (*kmmio_pre_handler_t)(struct kmmio_probe *, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: include/linux/kmmio.h:13:
+^I^I^I^I    struct pt_regs *, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: include/linux/kmmio.h:15:
+typedef void (*kmmio_post_handler_t)(struct kmmio_probe *, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: include/linux/kmmio.h:16:
+^I^I^I^I     unsigned long condition, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: include/linux/kmmio.h:64:
+static inline int is_kmmio_active(void) $

CHECK:SPACING: No space is necessary after a cast
#503: FILE: include/linux/kmmio.h:64:
+static inline int is_kmmio_active(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: include/linux/kmmio.h:65:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: include/linux/kmmio.h:66:
+^Ireturn 0; $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#527: FILE: kernel/kmmio.c:1:
+/* Support for MMIO probes.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#530: FILE: kernel/kmmio.c:4:
+ * (C) 2002 Louis Zhuang <louis.zhuang@intel.com>.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#538: FILE: kernel/kmmio.c:12:
+#include <asm/cacheflush.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#543: FILE: kernel/kmmio.c:17:
+#define KMMIO_TABLE_SIZE (1 << KMMIO_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#548: FILE: kernel/kmmio.c:22:
+#define KMMIO_PAGE_TABLE_SIZE (1 << KMMIO_PAGE_HASH_BITS)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#551: FILE: kernel/kmmio.c:25:
+unsigned int kmmio_count = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#569: FILE: kernel/kmmio.c:43:
+ *	The Interval Skip List: A Data Structure for Finding All Intervals That Overlap a Point (might be simple)

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#570: FILE: kernel/kmmio.c:44:
+ *	Space Efficient Dynamic Stabbing with Fast Queries - Mikkel Thorup */

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: kernel/kmmio.c:48:
+	struct kmmio_probe *p;
+	list_for_each_entry(p, &kmmio_probes, list) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: kernel/kmmio.c:59:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#594: FILE: kernel/kmmio.c:68:
+		printk("adding fault page\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#595: FILE: kernel/kmmio.c:69:
+		if (add_kmmio_fault_page(p->addr + size)) {
+			printk(KERN_ERR "Unable to set page fault\n");
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#596: FILE: kernel/kmmio.c:70:
+			printk(KERN_ERR "Unable to set page fault\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#610: FILE: kernel/kmmio.c:84:
+	unsigned int size = 0;
+	spin_lock_irq(&kmmio_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: kernel/kmmio.c:101:
+^I^Istruct kmmio_fault_page *p $

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#628: FILE: kernel/kmmio.c:102:
+		struct kmmio_fault_page *p 
+			= list_entry(tmp, struct kmmio_fault_page, list);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: kernel/kmmio.c:112:
+^I$

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#645: FILE: kernel/kmmio.c:119:
+	f = (struct kmmio_fault_page *)kmalloc(sizeof(*f), GFP_ATOMIC);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#646: FILE: kernel/kmmio.c:120:
+	if (!f) return -1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: kernel/kmmio.c:123:
+^Ilist_add(&f->list, $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#662: FILE: kernel/kmmio.c:136:
+	if (!f)	return;

ERROR:SPACING: space required before the open parenthesis '('
#664: FILE: kernel/kmmio.c:138:
+	if(!f->count) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: kernel/kmmio.c:150:
+^Ifor (i = 0; i < KMMIO_PAGE_TABLE_SIZE; i++) $

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#680: FILE: kernel/kmmio.c:154:
+__initcall(init_kmmio);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#682: FILE: kernel/kmmio.c:156:
+EXPORT_SYMBOL_GPL(register_kmmio_probe);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#683: FILE: kernel/kmmio.c:157:
+EXPORT_SYMBOL_GPL(unregister_kmmio_probe);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474620.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 64 errors, 31 warnings, 14 checks, 486 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474620.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
