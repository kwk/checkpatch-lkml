CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#43: FILE: fs/udf/inode.c:361:
+int udf_extend_file(struct inode *inode, struct extent_position *last_pos,
+	kernel_long_ad *last_ext, sector_t blocks)

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#46: FILE: fs/udf/inode.c:364:
+	int count = 0, fake = !(last_ext->extLength & UDF_EXTENT_LENGTH_MASK);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#52: FILE: fs/udf/inode.c:370:
+	 * - there's nothing to do... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <extLocation>
#68: FILE: fs/udf/inode.c:386:
+		prealloc_loc = last_ext->extLocation;

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#73: FILE: fs/udf/inode.c:391:
+		last_ext->extLocation.logicalBlockNum = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: fs/udf/inode.c:392:
+       ^I^Ilast_ext->extLocation.partitionReferenceNum = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: fs/udf/inode.c:392:
+       ^I^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: fs/udf/inode.c:392:
+       ^I^Ilast_ext->extLocation.partitionReferenceNum = 0;$

CHECK:CAMELCASE: Avoid CamelCase: <partitionReferenceNum>
#74: FILE: fs/udf/inode.c:392:
+       		last_ext->extLocation.partitionReferenceNum = 0;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#78: FILE: fs/udf/inode.c:396:
+		add = ((1<<30) - sb->s_blocksize - (last_ext->extLength &
 		         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#86: FILE: fs/udf/inode.c:404:
+	if (fake) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: fs/udf/inode.c:406:
+		udf_add_aext(inode, last_pos, last_ext->extLocation,
+			last_ext->extLength, 1);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#91: FILE: fs/udf/inode.c:409:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: fs/udf/inode.c:417:
+       ^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#99: FILE: fs/udf/inode.c:417:
+       ^Ilast_ext->extLocation.partitionReferenceNum = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: fs/udf/inode.c:417:
+       ^Ilast_ext->extLocation.partitionReferenceNum = 0;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#100: FILE: fs/udf/inode.c:418:
+	add = (1 << (30-sb->s_blocksize_bits)) - 1;
 	               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: fs/udf/inode.c:424:
+		if (udf_add_aext(inode, last_pos, last_ext->extLocation,
+			last_ext->extLength, 1) == -1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: fs/udf/inode.c:432:
+		if (udf_add_aext(inode, last_pos, last_ext->extLocation,
+			last_ext->extLength, 1) == -1)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#188: FILE: fs/udf/inode.c:557:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: fs/udf/inode.c:557:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#202: FILE: fs/udf/inode.c:571:
+			 * something up */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#218: FILE: fs/udf/inode.c:581:
+			 * the fake one... */

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#224: FILE: fs/udf/inode.c:587:
+			count ++;
 			      ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#225: FILE: fs/udf/inode.c:588:
+			endnum ++;
 			       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#227: FILE: fs/udf/inode.c:590:
+		endnum = c+1;
 		          ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#231: FILE: fs/udf/inode.c:593:
 	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: fs/udf/inode.c:593:
+	else {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#243: FILE: fs/udf/inode.c:597:
+		if (!c && count != 1)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#263: FILE: fs/udf/inode.c:614:
 		}
+		else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#263: FILE: fs/udf/inode.c:614:
+		else {
 			lastblock = 1;
+		}

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: fs/udf/inode.c:614:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#279: FILE: fs/udf/inode.c:659:
+	the new number of extents is less than the old number */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#321: FILE: fs/udf/truncate.c:146:
+	byte_offset = (offset << sb->s_blocksize_bits) + (inode->i_size & (sb->s_blocksize-1));
 	                                                                                  ^

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#339: FILE: fs/udf/truncate.c:186:
+						if (!UDF_QUERY_FLAG(sb, UDF_FLAG_STRICT) || UDF_SB_UDFREV(sb) >= 0x0201)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#339: FILE: fs/udf/truncate.c:186:
+						if (!UDF_QUERY_FLAG(sb, UDF_FLAG_STRICT) || UDF_SB_UDFREV(sb) >= 0x0201)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#372: FILE: fs/udf/truncate.c:229:
+				if (!UDF_QUERY_FLAG(sb, UDF_FLAG_STRICT) || UDF_SB_UDFREV(sb) >= 0x0201)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#395: FILE: fs/udf/truncate.c:252:
+				 * indirect extent! Create a fake extent... */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: fs/udf/truncate.c:260:
+				etype = udf_next_aext(inode, &epos,
+					&extent.extLocation, &extent.extLength, 0);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#438: FILE: fs/udf/truncate.c:263:
+			udf_extend_file(inode, &epos, &extent, offset+((inode->i_size & (sb->s_blocksize-1)) != 0));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#438: FILE: fs/udf/truncate.c:263:
+			udf_extend_file(inode, &epos, &extent, offset+((inode->i_size & (sb->s_blocksize-1)) != 0));
 			                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#438: FILE: fs/udf/truncate.c:263:
+			udf_extend_file(inode, &epos, &extent, offset+((inode->i_size & (sb->s_blocksize-1)) != 0));
 			                                                                                ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459937.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 14 warnings, 19 checks, 383 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459937.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
