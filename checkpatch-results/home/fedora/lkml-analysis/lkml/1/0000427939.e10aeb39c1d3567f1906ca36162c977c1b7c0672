ERROR:POINTER_LOCATION: "foo *        bar" should be "foo *bar"
#66: FILE: include/linux/cramfs_fs_sb.h:15:
+			char *        linear_virt_addr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: init/do_mounts.c:350:
+	if (do_mount_root("/dev/root","cramfs",root_mountflags,root_mount_data) == 0)
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: init/do_mounts.c:350:
+	if (do_mount_root("/dev/root","cramfs",root_mountflags,root_mount_data) == 0)
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: init/do_mounts.c:350:
+	if (do_mount_root("/dev/root","cramfs",root_mountflags,root_mount_data) == 0)
 	                                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: init/do_mounts.c:389:
+        if (ROOT_DEV == MKDEV(0, 0)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: init/do_mounts.c:389:
+        if (ROOT_DEV == MKDEV(0, 0)) {$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#105: FILE: init/do_mounts.c:389:
+        if (ROOT_DEV == MKDEV(0, 0)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: init/do_mounts.c:390:
+^I        if (mount_cramfs_linear_root())$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: init/do_mounts.c:391:
+^I^I        return;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#108: FILE: init/do_mounts.c:392:
+		printk (KERN_ERR "VFS: Unable to mount linear cramfs root.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#108: FILE: init/do_mounts.c:392:
+		printk (KERN_ERR "VFS: Unable to mount linear cramfs root.\n");

WARNING:TYPO_SPELLING: 'Usefull' may be misspelled - perhaps 'Useful'?
#127: FILE: fs/cramfs/inode.c:21:
+ * etc.  Usefull on embedded platform with ROM :-).
          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#149: FILE: fs/cramfs/inode.c:43:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#150: FILE: fs/cramfs/inode.c:44:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#165: FILE: fs/cramfs/inode.c:65:
+static struct inode_operations cramfs_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: fs/cramfs/inode.c:138:
+ static int cramfs_mmap(struct file *file, struct vm_area_struct *vma)$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#174: FILE: fs/cramfs/inode.c:138:
+ static int cramfs_mmap(struct file *file, struct vm_area_struct *vma)
+ {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: fs/cramfs/inode.c:139:
+ {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: fs/cramfs/inode.c:140:
+ ^Iunsigned long address, length;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: fs/cramfs/inode.c:140:
+ ^Iunsigned long address, length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: fs/cramfs/inode.c:140:
+ ^Iunsigned long address, length;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: fs/cramfs/inode.c:141:
+ ^Istruct inode *inode = file->f_dentry->d_inode;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: fs/cramfs/inode.c:141:
+ ^Istruct inode *inode = file->f_dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: fs/cramfs/inode.c:141:
+ ^Istruct inode *inode = file->f_dentry->d_inode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: fs/cramfs/inode.c:142:
+ ^Istruct super_block *sb = inode->i_sb;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: fs/cramfs/inode.c:142:
+ ^Istruct super_block *sb = inode->i_sb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: fs/cramfs/inode.c:142:
+ ^Istruct super_block *sb = inode->i_sb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: fs/cramfs/inode.c:143:
+ ^Istruct cramfs_sb_info *sbi = CRAMFS_SB(sb);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: fs/cramfs/inode.c:143:
+ ^Istruct cramfs_sb_info *sbi = CRAMFS_SB(sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: fs/cramfs/inode.c:143:
+ ^Istruct cramfs_sb_info *sbi = CRAMFS_SB(sb);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: fs/cramfs/inode.c:144:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/cramfs/inode.c:144:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: fs/cramfs/inode.c:145:
+ ^I/* this is only used in the case of read-only maps for XIP */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#181: FILE: fs/cramfs/inode.c:145:
+ ^I/* this is only used in the case of read-only maps for XIP */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: fs/cramfs/inode.c:145:
+ ^I/* this is only used in the case of read-only maps for XIP */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/cramfs/inode.c:146:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: fs/cramfs/inode.c:146:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/cramfs/inode.c:147:
+ ^Iif (vma->vm_flags & VM_WRITE)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: fs/cramfs/inode.c:147:
+ ^Iif (vma->vm_flags & VM_WRITE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/cramfs/inode.c:147:
+ ^Iif (vma->vm_flags & VM_WRITE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/cramfs/inode.c:148:
+ ^I^Ireturn generic_file_mmap(file, vma);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: fs/cramfs/inode.c:148:
+ ^I^Ireturn generic_file_mmap(file, vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/cramfs/inode.c:148:
+ ^I^Ireturn generic_file_mmap(file, vma);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: fs/cramfs/inode.c:149:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: fs/cramfs/inode.c:149:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: fs/cramfs/inode.c:150:
+ ^Iif ((vma->vm_flags & VM_SHARED) && (vma->vm_flags & VM_MAYWRITE))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: fs/cramfs/inode.c:150:
+ ^Iif ((vma->vm_flags & VM_SHARED) && (vma->vm_flags & VM_MAYWRITE))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/cramfs/inode.c:150:
+ ^Iif ((vma->vm_flags & VM_SHARED) && (vma->vm_flags & VM_MAYWRITE))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: fs/cramfs/inode.c:151:
+ ^I^Ireturn -EINVAL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: fs/cramfs/inode.c:151:
+ ^I^Ireturn -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: fs/cramfs/inode.c:151:
+ ^I^Ireturn -EINVAL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: fs/cramfs/inode.c:152:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/cramfs/inode.c:152:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: fs/cramfs/inode.c:153:
+ ^Iaddress  = PAGE_ALIGN(sbi->linear_phys_addr + OFFSET(inode));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: fs/cramfs/inode.c:153:
+ ^Iaddress  = PAGE_ALIGN(sbi->linear_phys_addr + OFFSET(inode));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: fs/cramfs/inode.c:153:
+ ^Iaddress  = PAGE_ALIGN(sbi->linear_phys_addr + OFFSET(inode));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/cramfs/inode.c:154:
+ ^Iaddress += vma->vm_pgoff << PAGE_SHIFT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: fs/cramfs/inode.c:154:
+ ^Iaddress += vma->vm_pgoff << PAGE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/cramfs/inode.c:154:
+ ^Iaddress += vma->vm_pgoff << PAGE_SHIFT;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: fs/cramfs/inode.c:155:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/cramfs/inode.c:155:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: fs/cramfs/inode.c:156:
+ ^Ilength = vma->vm_end - vma->vm_start;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: fs/cramfs/inode.c:156:
+ ^Ilength = vma->vm_end - vma->vm_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: fs/cramfs/inode.c:156:
+ ^Ilength = vma->vm_end - vma->vm_start;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: fs/cramfs/inode.c:157:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/cramfs/inode.c:157:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: fs/cramfs/inode.c:158:
+ ^Iif (length > inode->i_size)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: fs/cramfs/inode.c:158:
+ ^Iif (length > inode->i_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: fs/cramfs/inode.c:158:
+ ^Iif (length > inode->i_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: fs/cramfs/inode.c:159:
+ ^I^Ilength = inode->i_size;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: fs/cramfs/inode.c:159:
+ ^I^Ilength = inode->i_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: fs/cramfs/inode.c:159:
+ ^I^Ilength = inode->i_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/cramfs/inode.c:160:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/cramfs/inode.c:160:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/cramfs/inode.c:161:
+ ^Ilength = PAGE_ALIGN(length);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: fs/cramfs/inode.c:161:
+ ^Ilength = PAGE_ALIGN(length);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/cramfs/inode.c:161:
+ ^Ilength = PAGE_ALIGN(length);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/cramfs/inode.c:162:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/cramfs/inode.c:162:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: fs/cramfs/inode.c:163:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: fs/cramfs/inode.c:163:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: fs/cramfs/inode.c:163:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: fs/cramfs/inode.c:164:
+ ^I * Don't dump addresses that are not real memory to a core file.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: fs/cramfs/inode.c:164:
+ ^I * Don't dump addresses that are not real memory to a core file.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: fs/cramfs/inode.c:165:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: fs/cramfs/inode.c:165:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: fs/cramfs/inode.c:166:
+ ^Ivma->vm_flags |= (VM_IO | VM_XIP);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: fs/cramfs/inode.c:166:
+ ^Ivma->vm_flags |= (VM_IO | VM_XIP);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: fs/cramfs/inode.c:166:
+ ^Ivma->vm_flags |= (VM_IO | VM_XIP);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: fs/cramfs/inode.c:167:
+ ^Iflush_tlb_page(vma, address);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: fs/cramfs/inode.c:167:
+ ^Iflush_tlb_page(vma, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/cramfs/inode.c:167:
+ ^Iflush_tlb_page(vma, address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: fs/cramfs/inode.c:168:
+ ^Iif (remap_pfn_range(vma, vma->vm_start, address >> PAGE_SHIFT, length,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: fs/cramfs/inode.c:168:
+ ^Iif (remap_pfn_range(vma, vma->vm_start, address >> PAGE_SHIFT, length,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/cramfs/inode.c:168:
+ ^Iif (remap_pfn_range(vma, vma->vm_start, address >> PAGE_SHIFT, length,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: fs/cramfs/inode.c:169:
+ ^I^I^I     vma->vm_page_prot))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: fs/cramfs/inode.c:169:
+ ^I^I^I     vma->vm_page_prot))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/cramfs/inode.c:169:
+ 	if (remap_pfn_range(vma, vma->vm_start, address >> PAGE_SHIFT, length,
+ 			     vma->vm_page_prot))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/cramfs/inode.c:169:
+ ^I^I^I     vma->vm_page_prot))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: fs/cramfs/inode.c:170:
+ ^I^Ireturn -EAGAIN;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: fs/cramfs/inode.c:170:
+ ^I^Ireturn -EAGAIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: fs/cramfs/inode.c:170:
+ ^I^Ireturn -EAGAIN;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: fs/cramfs/inode.c:171:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: fs/cramfs/inode.c:171:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/cramfs/inode.c:173:
+ ^Iprintk("cramfs_mmap: mapped %s at 0x%08lx, length %lu to vma 0x%08lx"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#209: FILE: fs/cramfs/inode.c:173:
+ ^Iprintk("cramfs_mmap: mapped %s at 0x%08lx, length %lu to vma 0x%08lx"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/cramfs/inode.c:173:
+ ^Iprintk("cramfs_mmap: mapped %s at 0x%08lx, length %lu to vma 0x%08lx"$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#209: FILE: fs/cramfs/inode.c:173:
+ 	printk("cramfs_mmap: mapped %s at 0x%08lx, length %lu to vma 0x%08lx"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cramfs_mmap', this function's name, in a string
#209: FILE: fs/cramfs/inode.c:173:
+ 	printk("cramfs_mmap: mapped %s at 0x%08lx, length %lu to vma 0x%08lx"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: fs/cramfs/inode.c:174:
+ ^I^I", page_prot 0x%08lx\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: fs/cramfs/inode.c:174:
+ ^I^I", page_prot 0x%08lx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: fs/cramfs/inode.c:174:
+ ^I^I", page_prot 0x%08lx\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#210: FILE: fs/cramfs/inode.c:174:
+ 	printk("cramfs_mmap: mapped %s at 0x%08lx, length %lu to vma 0x%08lx"
+ 		", page_prot 0x%08lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: fs/cramfs/inode.c:175:
+ ^I^Ifile->f_dentry->d_name.name, address, length,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: fs/cramfs/inode.c:175:
+ ^I^Ifile->f_dentry->d_name.name, address, length,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: fs/cramfs/inode.c:175:
+ ^I^Ifile->f_dentry->d_name.name, address, length,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: fs/cramfs/inode.c:176:
+ ^I^Ivma->vm_start, pgprot_val(vma->vm_page_prot));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: fs/cramfs/inode.c:176:
+ ^I^Ivma->vm_start, pgprot_val(vma->vm_page_prot));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: fs/cramfs/inode.c:176:
+ ^I^Ivma->vm_start, pgprot_val(vma->vm_page_prot));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: fs/cramfs/inode.c:178:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: fs/cramfs/inode.c:178:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: fs/cramfs/inode.c:179:
+ ^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: fs/cramfs/inode.c:179:
+ ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: fs/cramfs/inode.c:179:
+ ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: fs/cramfs/inode.c:180:
+ }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: fs/cramfs/inode.c:181:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/cramfs/inode.c:181:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/cramfs/inode.c:182:
+ static struct file_operations cramfs_linear_xip_fops = {$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#218: FILE: fs/cramfs/inode.c:182:
+ static struct file_operations cramfs_linear_xip_fops = {

WARNING:INDENTED_LABEL: labels should not be indented
#219: FILE: fs/cramfs/inode.c:183:
+   aio_read:   generic_file_aio_read,

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: fs/cramfs/inode.c:184:
+ ^Iread:^Ido_sync_read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: fs/cramfs/inode.c:184:
+ ^Iread:^Ido_sync_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: fs/cramfs/inode.c:184:
+ ^Iread:^Ido_sync_read,$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#220: FILE: fs/cramfs/inode.c:184:
+ 	read:	do_sync_read,
  	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#220: FILE: fs/cramfs/inode.c:184:
+ 	read:	do_sync_read,

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: fs/cramfs/inode.c:185:
+ ^Immap:^Icramfs_mmap,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: fs/cramfs/inode.c:185:
+ ^Immap:^Icramfs_mmap,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: fs/cramfs/inode.c:185:
+ ^Immap:^Icramfs_mmap,$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#221: FILE: fs/cramfs/inode.c:185:
+ 	mmap:	cramfs_mmap,
  	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#221: FILE: fs/cramfs/inode.c:185:
+ 	mmap:	cramfs_mmap,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: fs/cramfs/inode.c:186:
+ };$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: fs/cramfs/inode.c:187:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/cramfs/inode.c:187:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: fs/cramfs/inode.c:189:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: fs/cramfs/inode.c:189:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: fs/cramfs/inode.c:191:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: fs/cramfs/inode.c:191:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: fs/cramfs/inode.c:193:
+ static struct backing_dev_info cramfs_backing_dev_info = {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/cramfs/inode.c:194:
+ ^I.ra_pages^I= 0,^I/* No readahead */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: fs/cramfs/inode.c:194:
+ ^I.ra_pages^I= 0,^I/* No readahead */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/cramfs/inode.c:194:
+ ^I.ra_pages^I= 0,^I/* No readahead */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: fs/cramfs/inode.c:195:
+ };$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: fs/cramfs/inode.c:204:
+                inode->i_mapping->backing_dev_info = &cramfs_backing_dev_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: fs/cramfs/inode.c:204:
+                inode->i_mapping->backing_dev_info = &cramfs_backing_dev_info;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: fs/cramfs/inode.c:208:
+             ^Iif(S_ISREG(inode->i_mode)) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: fs/cramfs/inode.c:208:
+             ^Iif(S_ISREG(inode->i_mode)) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: fs/cramfs/inode.c:208:
+             ^Iif(S_ISREG(inode->i_mode)) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: fs/cramfs/inode.c:208:
+             ^Iif(S_ISREG(inode->i_mode)) $

ERROR:SPACING: space required before the open parenthesis '('
#246: FILE: fs/cramfs/inode.c:208:
+             	if(S_ISREG(inode->i_mode)) 

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#247: FILE: fs/cramfs/inode.c:209:
+			inode->i_fop = CRAMFS_INODE_IS_XIP(inode) ? &cramfs_linear_xip_fops : &generic_ro_fops;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: fs/cramfs/inode.c:210:
+#endif          $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#264: FILE: fs/cramfs/inode.c:226:
+	return (void*)(sbi->linear_virt_addr + offset);

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: fs/cramfs/inode.c:376:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: fs/cramfs/inode.c:377:
+         * The physical location of the cramfs image is specified as$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: fs/cramfs/inode.c:378:
+         * a mount parameter.  This parameter is mandatory for obvious$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: fs/cramfs/inode.c:379:
+         * reasons.  Some validation is made on the phys address but this$

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: fs/cramfs/inode.c:380:
+         * is not exhaustive and we count on the fact that someone using$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: fs/cramfs/inode.c:381:
+         * this feature is supposed to know what he/she's doing.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: fs/cramfs/inode.c:382:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: fs/cramfs/inode.c:383:
+        if (!data || !(p = strstr((char *)data, "physaddr="))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: fs/cramfs/inode.c:383:
+        if (!data || !(p = strstr((char *)data, "physaddr="))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#308: FILE: fs/cramfs/inode.c:383:
+        if (!data || !(p = strstr((char *)data, "physaddr="))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: fs/cramfs/inode.c:384:
+                printk(KERN_ERR "cramfs: unknown physical address for linear cramfs image\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: fs/cramfs/inode.c:384:
+                printk(KERN_ERR "cramfs: unknown physical address for linear cramfs image\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#309: FILE: fs/cramfs/inode.c:384:
+                printk(KERN_ERR "cramfs: unknown physical address for linear cramfs image\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: fs/cramfs/inode.c:385:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: fs/cramfs/inode.c:385:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: fs/cramfs/inode.c:386:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: fs/cramfs/inode.c:386:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: fs/cramfs/inode.c:387:
+        sbi->linear_phys_addr = simple_strtoul(p + 9, NULL, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: fs/cramfs/inode.c:387:
+        sbi->linear_phys_addr = simple_strtoul(p + 9, NULL, 0);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#312: FILE: fs/cramfs/inode.c:387:
+        sbi->linear_phys_addr = simple_strtoul(p + 9, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: fs/cramfs/inode.c:388:
+        if (sbi->linear_phys_addr & (PAGE_SIZE-1)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: fs/cramfs/inode.c:388:
+        if (sbi->linear_phys_addr & (PAGE_SIZE-1)) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#313: FILE: fs/cramfs/inode.c:388:
+        if (sbi->linear_phys_addr & (PAGE_SIZE-1)) {
                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: fs/cramfs/inode.c:389:
+                printk(KERN_ERR "cramfs: physical address 0x%lx for linear cramfs isn't aligned to a page boundary\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: fs/cramfs/inode.c:389:
+                printk(KERN_ERR "cramfs: physical address 0x%lx for linear cramfs isn't aligned to a page boundary\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#314: FILE: fs/cramfs/inode.c:389:
+                printk(KERN_ERR "cramfs: physical address 0x%lx for linear cramfs isn't aligned to a page boundary\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: fs/cramfs/inode.c:390:
+                       sbi->linear_phys_addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: fs/cramfs/inode.c:390:
+                       sbi->linear_phys_addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: fs/cramfs/inode.c:391:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: fs/cramfs/inode.c:391:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: fs/cramfs/inode.c:392:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: fs/cramfs/inode.c:392:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: fs/cramfs/inode.c:393:
+        if (sbi->linear_phys_addr == 0) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: fs/cramfs/inode.c:393:
+        if (sbi->linear_phys_addr == 0) { $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: fs/cramfs/inode.c:393:
+        if (sbi->linear_phys_addr == 0) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: fs/cramfs/inode.c:394:
+                printk(KERN_ERR "cramfs: physical address for linear cramfs image can't be 0\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: fs/cramfs/inode.c:394:
+                printk(KERN_ERR "cramfs: physical address for linear cramfs image can't be 0\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#319: FILE: fs/cramfs/inode.c:394:
+                printk(KERN_ERR "cramfs: physical address for linear cramfs image can't be 0\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: fs/cramfs/inode.c:395:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: fs/cramfs/inode.c:395:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: fs/cramfs/inode.c:396:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: fs/cramfs/inode.c:396:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: fs/cramfs/inode.c:397:
+        printk(KERN_INFO "cramfs: checking physical address 0x%lx for linear cramfs image\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: fs/cramfs/inode.c:397:
+        printk(KERN_INFO "cramfs: checking physical address 0x%lx for linear cramfs image\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#322: FILE: fs/cramfs/inode.c:397:
+        printk(KERN_INFO "cramfs: checking physical address 0x%lx for linear cramfs image\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: fs/cramfs/inode.c:398:
+               sbi->linear_phys_addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: fs/cramfs/inode.c:398:
+               sbi->linear_phys_addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: fs/cramfs/inode.c:400:
+        /* Map only one page for now.  Will remap it when fs size is known. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: fs/cramfs/inode.c:401:
+        sbi->linear_virt_addr =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: fs/cramfs/inode.c:401:
+        sbi->linear_virt_addr =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: fs/cramfs/inode.c:402:
+                ioremap(sbi->linear_phys_addr, PAGE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: fs/cramfs/inode.c:402:
+                ioremap(sbi->linear_phys_addr, PAGE_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: fs/cramfs/inode.c:403:
+        if (!sbi->linear_virt_addr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: fs/cramfs/inode.c:403:
+        if (!sbi->linear_virt_addr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: fs/cramfs/inode.c:404:
+                printk(KERN_ERR "cramfs: ioremap of the linear cramfs image failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: fs/cramfs/inode.c:404:
+                printk(KERN_ERR "cramfs: ioremap of the linear cramfs image failed\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#329: FILE: fs/cramfs/inode.c:404:
+                printk(KERN_ERR "cramfs: ioremap of the linear cramfs image failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: fs/cramfs/inode.c:405:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: fs/cramfs/inode.c:405:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: fs/cramfs/inode.c:406:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: fs/cramfs/inode.c:406:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: fs/cramfs/inode.c:408:
+        mutex_lock(&read_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: fs/cramfs/inode.c:408:
+        mutex_lock(&read_mutex);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#347: FILE: fs/cramfs/inode.c:475:
+	printk(KERN_INFO "cramfs: linear cramfs image appears to be %lu KB in size\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#348: FILE: fs/cramfs/inode.c:476:
+	       sbi->size/1024);
 	                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#354: FILE: fs/cramfs/inode.c:482:
+		printk(KERN_ERR "cramfs: ioremap of the linear cramfs image failed\n");

ERROR:SPACING: space required before the open parenthesis '('
#372: FILE: fs/cramfs/inode.c:652:
+		if(CRAMFS_INODE_IS_XIP(inode)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: fs/cramfs/inode.c:653:
+^I^I^Iblkptr_offset = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: fs/cramfs/inode.c:654:
+^I^I^I^IPAGE_ALIGN(OFFSET(inode)) + $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: fs/cramfs/inode.c:658:
+			memcpy(page_address(page),
+				cramfs_read(sb, blkptr_offset, PAGE_CACHE_SIZE),

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#383: FILE: fs/cramfs/inode.c:663:
+		} else {
[...]
 		start_offset = OFFSET(inode) + maxblock*4;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#403: FILE: fs/cramfs/inode.c:714:
+static struct inode_operations cramfs_dir_inode_operations = {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#418: FILE: fs/cramfs/inode.c:727:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: fs/cramfs/inode.c:729:
+       return get_sb_nodev(fs_type, flags, data, cramfs_fill_super,mnt);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#420: FILE: fs/cramfs/inode.c:729:
+       return get_sb_nodev(fs_type, flags, data, cramfs_fill_super,mnt);
                                                                   ^

WARNING:TYPO_SPELLING: 'adressed' may be misspelled - perhaps 'addressed'?
#448: FILE: fs/Kconfig:1404:
+	  a linear adressed memory range (usually non volatile memory
 	           ^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#499: FILE: mm/memory.c:1039:
+		if (!vma || ((vma->vm_flags & (VM_IO | VM_PFNMAP))
+				&& !(vma->vm_flags & VM_XIP))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#510: FILE: mm/memory.c:1493:
+static inline void break_cow(struct vm_area_struct * vma, struct page * new_page, unsigned long address,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#510: FILE: mm/memory.c:1493:
+static inline void break_cow(struct vm_area_struct * vma, struct page * new_page, unsigned long address,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#510: FILE: mm/memory.c:1493:
+static inline void break_cow(struct vm_area_struct * vma, struct page * new_page, unsigned long address,

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: mm/memory.c:1494:
+                pte_t *page_table)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: mm/memory.c:1494:
+static inline void break_cow(struct vm_area_struct * vma, struct page * new_page, unsigned long address,
+                pte_t *page_table)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: mm/memory.c:1494:
+                pte_t *page_table)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: mm/memory.c:1496:
+        pte_t entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: mm/memory.c:1496:
+        pte_t entry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: mm/memory.c:1498:
+        entry = maybe_mkwrite(pte_mkdirty(mk_pte(new_page, vma->vm_page_prot)),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: mm/memory.c:1498:
+        entry = maybe_mkwrite(pte_mkdirty(mk_pte(new_page, vma->vm_page_prot)),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: mm/memory.c:1499:
+                              vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: mm/memory.c:1499:
+                              vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: mm/memory.c:1500:
+        ptep_establish(vma, address, page_table, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: mm/memory.c:1500:
+        ptep_establish(vma, address, page_table, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: mm/memory.c:1501:
+        update_mmu_cache(vma, address, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: mm/memory.c:1501:
+        update_mmu_cache(vma, address, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: mm/memory.c:1502:
+        lazy_mmu_prot_update(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: mm/memory.c:1502:
+        lazy_mmu_prot_update(entry);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: mm/memory.c:1562:
+                if ((vma->vm_flags & VM_XIP) && pte_present(orig_pte) && $

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: mm/memory.c:1562:
+                if ((vma->vm_flags & VM_XIP) && pte_present(orig_pte) && $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: mm/memory.c:1562:
+                if ((vma->vm_flags & VM_XIP) && pte_present(orig_pte) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: mm/memory.c:1563:
+                if ((vma->vm_flags & VM_XIP) && pte_present(orig_pte) && 
+			pte_read(orig_pte)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: mm/memory.c:1564:
+                        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: mm/memory.c:1565:
+                         * Handle COW of XIP memory.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: mm/memory.c:1566:
+                         * Note that the source memory actually isn't a ram$

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: mm/memory.c:1567:
+                         * page so no struct page is associated to the source$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: mm/memory.c:1568:
+                         * pte.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: mm/memory.c:1569:
+                         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: mm/memory.c:1570:
+                        char *dst;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: mm/memory.c:1570:
+                        char *dst;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: mm/memory.c:1571:
+                        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: mm/memory.c:1571:
+                        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: mm/memory.c:1573:
+                        spin_unlock(&mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: mm/memory.c:1573:
+                        spin_unlock(&mm->page_table_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: mm/memory.c:1574:
+                        new_page = alloc_page(GFP_HIGHUSER);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: mm/memory.c:1574:
+                        new_page = alloc_page(GFP_HIGHUSER);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#548: FILE: mm/memory.c:1575:
+                        if (!new_page)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: mm/memory.c:1575:
+                        if (!new_page)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: mm/memory.c:1576:
+                                return VM_FAULT_OOM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: mm/memory.c:1576:
+                                return VM_FAULT_OOM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: mm/memory.c:1578:
+                        /* copy XIP data to memory */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: mm/memory.c:1580:
+                        dst = kmap_atomic(new_page, KM_USER0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: mm/memory.c:1580:
+                        dst = kmap_atomic(new_page, KM_USER0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: mm/memory.c:1581:
+                        ret = copy_from_user(dst, (void*)address, PAGE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: mm/memory.c:1581:
+                        ret = copy_from_user(dst, (void*)address, PAGE_SIZE);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#554: FILE: mm/memory.c:1581:
+                        ret = copy_from_user(dst, (void*)address, PAGE_SIZE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: mm/memory.c:1582:
+                        kunmap_atomic(dst, KM_USER0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: mm/memory.c:1582:
+                        kunmap_atomic(dst, KM_USER0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: mm/memory.c:1584:
+                        /* make sure pte didn't change while we dropped the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: mm/memory.c:1585:
+                           lock */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#558: FILE: mm/memory.c:1585:
+                        /* make sure pte didn't change while we dropped the
+                           lock */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#558: FILE: mm/memory.c:1585:
+                           lock */

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: mm/memory.c:1586:
+                        spin_lock(&mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: mm/memory.c:1586:
+                        spin_lock(&mm->page_table_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: mm/memory.c:1587:
+                        if (!ret && pte_same(*page_table, orig_pte)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: mm/memory.c:1587:
+                        if (!ret && pte_same(*page_table, orig_pte)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#562: FILE: mm/memory.c:1589:
+                                break_cow(vma, new_page, address, page_table);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: mm/memory.c:1589:
+                                break_cow(vma, new_page, address, page_table);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#563: FILE: mm/memory.c:1590:
+                                lru_cache_add(new_page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: mm/memory.c:1590:
+                                lru_cache_add(new_page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: mm/memory.c:1591:
+                                page_add_file_rmap(new_page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: mm/memory.c:1591:
+                                page_add_file_rmap(new_page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: mm/memory.c:1592:
+                                spin_unlock(&mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: mm/memory.c:1592:
+                                spin_unlock(&mm->page_table_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#566: FILE: mm/memory.c:1593:
+                                return VM_FAULT_MINOR;  /* Minor fault */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: mm/memory.c:1593:
+                                return VM_FAULT_MINOR;  /* Minor fault */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: mm/memory.c:1594:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: mm/memory.c:1594:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: mm/memory.c:1596:
+                        /* pte changed: back off */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: mm/memory.c:1597:
+                        spin_unlock(&mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: mm/memory.c:1597:
+                        spin_unlock(&mm->page_table_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: mm/memory.c:1598:
+                        page_cache_release(new_page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: mm/memory.c:1598:
+                        page_cache_release(new_page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: mm/memory.c:1599:
+                        return ret ? VM_FAULT_OOM : VM_FAULT_MINOR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: mm/memory.c:1599:
+                        return ret ? VM_FAULT_OOM : VM_FAULT_MINOR;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: mm/memory.c:1600:
+        ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: mm/memory.c:1600:
+        ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: mm/memory.c:1600:
+        ^I}$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 143 errors, 166 warnings, 8 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
