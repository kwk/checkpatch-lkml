WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
   git://git.kernel.org/pub/scm/linux/kernel/git/glommer/linux-2.6-x86-integration.git master

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: arch/x86/kernel/irqinit_64.c:216:
+		int vector = FIRST_EXTERNAL_VECTOR + i;
+		if (vector != IA32_SYSCALL_VECTOR)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: arch/x86/kernel/microcode.c:665:
+		cpumask_t old;
+		cpumask_of_cpu_ptr(newmask, cpu);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#667: 
rename from arch/x86/kernel/time_32.c

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#676: FILE: arch/x86/kernel/time.c:39:
+#include <asm/nmi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#683: FILE: arch/x86/kernel/time.c:46:
+volatile unsigned long __jiffies __section_jiffies = INITIAL_JIFFIES;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#686: FILE: arch/x86/kernel/time.c:49:
+ * processor frequency */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#773: FILE: arch/x86/kernel/time.c:163:
+		u8 irq_v = inb_p(0x61);	/* read the current state */
+		outb_p(irq_v|0x80, 0x61);	/* reset the IRQ */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#773: FILE: arch/x86/kernel/time.c:163:
+		outb_p(irq_v|0x80, 0x61);	/* reset the IRQ */
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1081: FILE: include/linux/cpumask.h:280:
+#define	cpumask_of_cpu_ptr(v, cpu)					\
+		const cpumask_t *v = &cpumask_of_cpu(cpu)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1083: FILE: include/linux/cpumask.h:282:
+#define	cpumask_of_cpu_ptr_declare(v)					\
+		const cpumask_t *v

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1085: FILE: include/linux/cpumask.h:284:
+#define cpumask_of_cpu_ptr_next(v, cpu)					\
+					v = &cpumask_of_cpu(cpu)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1088: FILE: include/linux/cpumask.h:287:
+#define cpumask_of_cpu(cpu)						\
+({									\
+	typeof(_unused_cpumask_arg_) m;					\
+	if (sizeof(m) == sizeof(unsigned long)) {			\
+		m.bits[0] = 1UL<<(cpu);					\
+	} else {							\
+		cpus_clear(m);						\
+		cpu_set((cpu), m);					\
+	}								\
+	m;								\
+})

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1092: FILE: include/linux/cpumask.h:291:
+		m.bits[0] = 1UL<<(cpu);					\
 		               ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1099: FILE: include/linux/cpumask.h:298:
+#define^Icpumask_of_cpu_ptr(v, cpu) ^I^I^I^I^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1099: FILE: include/linux/cpumask.h:298:
+#define	cpumask_of_cpu_ptr(v, cpu) 					\
+		cpumask_t _##v = cpumask_of_cpu(cpu);			\
+		const cpumask_t *v = &_##v

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1102: FILE: include/linux/cpumask.h:301:
+#define	cpumask_of_cpu_ptr_declare(v)					\
+		cpumask_t _##v;						\
+		const cpumask_t *v = &_##v

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1105: FILE: include/linux/cpumask.h:304:
+#define cpumask_of_cpu_ptr_next(v, cpu)					\
+					_##v = cpumask_of_cpu(cpu)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 8 warnings, 8 checks, 813 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
