WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/clklib.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: Unnecessary space before function pointer arguments
#74: FILE: include/linux/clklib.h:23:
+	int (*can_get)	(struct clk *, struct device *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#74: FILE: include/linux/clklib.h:23:
+	int (*can_get)	(struct clk *, struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#74: FILE: include/linux/clklib.h:23:
+	int (*can_get)	(struct clk *, struct device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#75: FILE: include/linux/clklib.h:24:
+	int (*set_parent) (struct clk *, struct clk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#75: FILE: include/linux/clklib.h:24:
+	int (*set_parent) (struct clk *, struct clk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#75: FILE: include/linux/clklib.h:24:
+	int (*set_parent) (struct clk *, struct clk *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#76: FILE: include/linux/clklib.h:25:
+	int (*enable)	(struct clk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#76: FILE: include/linux/clklib.h:25:
+	int (*enable)	(struct clk *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#77: FILE: include/linux/clklib.h:26:
+	void (*disable)	(struct clk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#77: FILE: include/linux/clklib.h:26:
+	void (*disable)	(struct clk *);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#78: FILE: include/linux/clklib.h:27:
+	unsigned long (*getrate) (struct clk*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#78: FILE: include/linux/clklib.h:27:
+	unsigned long (*getrate) (struct clk*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk*' should also have an identifier name
#78: FILE: include/linux/clklib.h:27:
+	unsigned long (*getrate) (struct clk*);

WARNING:SPACING: Unnecessary space before function pointer arguments
#79: FILE: include/linux/clklib.h:28:
+	int (*setrate)	(struct clk *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#79: FILE: include/linux/clklib.h:28:
+	int (*setrate)	(struct clk *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#79: FILE: include/linux/clklib.h:28:
+	int (*setrate)	(struct clk *, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#80: FILE: include/linux/clklib.h:29:
+	long (*roundrate) (struct clk *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#80: FILE: include/linux/clklib.h:29:
+	long (*roundrate) (struct clk *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#80: FILE: include/linux/clklib.h:29:
+	long (*roundrate) (struct clk *, unsigned long);

WARNING:LINE_SPACING: Missing a blank line after declarations
#90: FILE: include/linux/clklib.h:39:
+	int i;
+	for (i = 0; i < num; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#90: FILE: include/linux/clklib.h:39:
+	for (i = 0; i < num; i++) {
+		clk_register(&clks[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: include/linux/clklib.h:44:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#107: FILE: include/linux/clklib.h:56:
+			.name= _function,		\
 			     ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#115: FILE: include/linux/clklib.h:64:
+static int __maybe_unused clk_alloc_functions(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#126: FILE: include/linux/clklib.h:75:
+			printk(KERN_ERR "Error allocating %s.%s function.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: include/linux/clklib.h:76:
+			printk(KERN_ERR "Error allocating %s.%s function.\n",
+					funcs[i].parent,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: kernel/clklib.c:1:
+#include <linux/kernel.h>

WARNING:BRACES: braces {} are not necessary for single statement blocks
#460: FILE: kernel/clklib.c:288:
+	if (rc) {
+		kfree(clk);
+	}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000327522.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 25 warnings, 3 checks, 400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000327522.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
