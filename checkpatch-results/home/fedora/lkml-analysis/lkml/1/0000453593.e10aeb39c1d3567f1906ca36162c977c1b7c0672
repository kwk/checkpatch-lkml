ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: crypto/Kconfig:481:
+^I  by the rsa module to hold a multi-precision integer, so this $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: crypto/rsa.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#115: FILE: crypto/rsa.c:20:
+	#error "Rsa module needs at least 8 auxilliary mpis"
 	                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#122: FILE: crypto/rsa.c:27:
+typedef struct mpi {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: crypto/rsa.c:34:
+static mpi ^I*aux[CONFIG_RSA_AUXCOUNT];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: crypto/rsa.c:35:
+static u32 ^Imodinv;$

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#134: FILE: crypto/rsa.c:39:
+ * @n: pointer pointer to the allocated mpi

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#152: FILE: crypto/rsa.c:57:
+	handle->data = kzalloc(limbs * sizeof(u32), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#160: FILE: crypto/rsa.c:65:
+	handle->size = handle->limbs = limbs;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#174: FILE: crypto/rsa.c:79:
+ * @n: pointer pointer to the allocated mpi

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#208: FILE: crypto/rsa.c:113:
+ * @n: pointer pointer to the allocated mpi

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: crypto/rsa.c:155:
+^I^I^Imemcpy(tmp->data, handle->data, $

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#271: FILE: crypto/rsa.c:176:
+ * @n: pointer pointer to the allocated mpi

WARNING:TYPO_SPELLING: 'needeed' may be misspelled - perhaps 'needed'?
#277: FILE: crypto/rsa.c:182:
+ * (and relocated) if needeed
                       ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#341: FILE: crypto/rsa.c:246:
+	printk("Mpi at 0x%x, %d limbs in size, %d limbs allocated, value = ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#346: FILE: crypto/rsa.c:251:
+		printk("0\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#351: FILE: crypto/rsa.c:256:
+	printk("%s", (n->sign)? "-": " ");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#351: FILE: crypto/rsa.c:256:
+	printk("%s", (n->sign)? "-": " ");
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#351: FILE: crypto/rsa.c:256:
+	printk("%s", (n->sign)? "-": " ");
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: crypto/rsa.c:268:
+^I^I/* Print each limb as though each of its nibbles was a $

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#376: FILE: crypto/rsa.c:281:
+			byte += (byte <= 0x09)? '0': 'a' - 0x0A;
 			                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#376: FILE: crypto/rsa.c:281:
+			byte += (byte <= 0x09)? '0': 'a' - 0x0A;
 			                           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#377: FILE: crypto/rsa.c:282:
+			printk("%c", byte);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: crypto/rsa.c:286:
+	printk("\n");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#426: FILE: crypto/rsa.c:331:
+		return (a->sign)? -1: 1;
 		                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#426: FILE: crypto/rsa.c:331:
+		return (a->sign)? -1: 1;
 		                    ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#435: FILE: crypto/rsa.c:340:
+		return -1;
+	else

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#489: FILE: crypto/rsa.c:394:
+ * @n: pointer pointer to the allocated mpi

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#509: FILE: crypto/rsa.c:414:
+			buf[i] = (i + distance >= size)? 0: buf[i + distance];
 			                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#509: FILE: crypto/rsa.c:414:
+			buf[i] = (i + distance >= size)? 0: buf[i + distance];
 			                                  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#534: FILE: crypto/rsa.c:439:
+	if (lz < bits) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#542: FILE: crypto/rsa.c:447:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#595: FILE: crypto/rsa.c:500:
+			buf[i + j] = tmp = buf[i + j] + (abuf[j] * (u64)bbuf[i]) + (tmp >> 32);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#610: FILE: crypto/rsa.c:515:
+	if ((retval = mpi_resize(res, size, true)) < 0 ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#621: FILE: crypto/rsa.c:526:
+	if (a->sign == b->sign) {
+		 u8 borrow = false;

WARNING:TABSTOP: Statements should start on a tabstop
#622: FILE: crypto/rsa.c:527:
+		 u8 borrow = false;

WARNING:TABSTOP: Statements should start on a tabstop
#623: FILE: crypto/rsa.c:528:
+		 u32 limb;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#631: FILE: crypto/rsa.c:536:
+		handle->sign = (borrow)? !b->sign: b->sign;
 		                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#631: FILE: crypto/rsa.c:536:
+		handle->sign = (borrow)? !b->sign: b->sign;
 		                                 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#636: FILE: crypto/rsa.c:541:
+	else {
+		 u8 carry = false;

CHECK:BRACES: Unbalanced braces around else statement
#636: FILE: crypto/rsa.c:541:
+	else {

WARNING:TABSTOP: Statements should start on a tabstop
#637: FILE: crypto/rsa.c:542:
+		 u8 carry = false;

WARNING:TABSTOP: Statements should start on a tabstop
#638: FILE: crypto/rsa.c:543:
+		 u64 sum;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#641: FILE: crypto/rsa.c:546:
+			buf[i] = sum = abuf[i] + bbuf[i] + carry;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#661: FILE: crypto/rsa.c:566:
+	if ((retval = mpi_copy(&aux[0], a)) < 0 ||

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#701: FILE: crypto/rsa.c:606:
+	pow1 = y = 1;

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#717: FILE: crypto/rsa.c:622:
+ * @res: pointer pointer to the result

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#738: FILE: crypto/rsa.c:643:
+	tmp = buf = aux[2]->data;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#746: FILE: crypto/rsa.c:651:
+			tmp[j] = product = tmp[j] + (m * (u64)nbuf[j]) + (product >> 32);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#749: FILE: crypto/rsa.c:654:
+			buf[j] = product = buf[j] + (product >> 32);

CHECK:BRACES: braces {} should be used on all arms of this statement
#761: FILE: crypto/rsa.c:666:
+	if (mpi_compare(aux[2], n) >= 0) {
[...]
+	else if ((retval = mpi_copy(res, aux[2])) < 0)
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#762: FILE: crypto/rsa.c:667:
+		if ((retval = mpi_subtract(&aux[3], aux[2], n)) < 0 ||

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#766: FILE: crypto/rsa.c:671:
+	else if ((retval = mpi_copy(res, aux[2])) < 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#766: FILE: crypto/rsa.c:671:
+	}
+	else if ((retval = mpi_copy(res, aux[2])) < 0)

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#773: FILE: crypto/rsa.c:678:
+ * @res: pointer pointer to the result

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: crypto/rsa.c:735:
+^I^I^I/* While the exponent has non significant zeroes shift $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: crypto/rsa.c:736:
+^I^I^I * it to the left $

CHECK:BRACES: braces {} should be used on all arms of this statement
#844: FILE: crypto/rsa.c:749:
+			if (limb & 0x80000000) {
[...]
+			else if ((retval = mpi_copy(&aux[7], aux[5])) < 0)
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#850: FILE: crypto/rsa.c:755:
+			else if ((retval = mpi_copy(&aux[7], aux[5])) < 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#850: FILE: crypto/rsa.c:755:
+			}
+			else if ((retval = mpi_copy(&aux[7], aux[5])) < 0)

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#869: FILE: crypto/rsa.c:774:
+	/* Pre-allocate some auxilliary mpis */
 	                     ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#870: FILE: crypto/rsa.c:775:
+	printk(KERN_DEBUG "Allocating %d bytes for auxilliary operands\n",
 	                                           ^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#870: FILE: crypto/rsa.c:775:
+	printk(KERN_DEBUG "Allocating %d bytes for auxilliary operands\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#880: FILE: crypto/rsa.c:785:
+	printk(KERN_DEBUG "RSA cipher algorithm module initialized\n");

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#894: FILE: crypto/rsa.c:799:
+	/* Free all the pre-allocated auxilliary mpis */
 	                              ^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#897: FILE: crypto/rsa.c:802:
+	printk(KERN_DEBUG "RSA cipher algorithm module unloaded\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 32 warnings, 11 checks, 856 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
