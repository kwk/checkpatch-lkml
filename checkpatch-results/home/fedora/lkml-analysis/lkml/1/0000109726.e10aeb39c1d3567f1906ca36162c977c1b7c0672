WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#179: FILE: kernel/sched.c:273:
+static DEFINE_PER_CPU(struct rt_rq, init_rt_task_rq) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#186: FILE: kernel/sched.c:280:
+static DEFINE_PER_CPU(struct rt_rq, init_rt_task_rq) \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: kernel/sched.c:9117:
+static void init_tg_rt_entry(struct task_group *tg, struct rt_rq *rt_rq,
+		struct sched_rt_entity *rt_se, struct rt_rq *rt_task_rq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: kernel/sched.c:9237:
+	init_rt_bandwidth(&init_task_group.rt_rq_group.rt_bandwidth,
+			global_rt_period(), global_rt_runtime());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: kernel/sched.c:9239:
+	init_rt_bandwidth(&init_task_group.rt_task_group.rt_bandwidth,
 			global_rt_period(), global_rt_runtime());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: kernel/sched.c:9244:
+	init_rt_bandwidth(&root_task_group.rt_rq_group.rt_bandwidth,
+			global_rt_period(), RUNTIME_INF);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: kernel/sched.c:9246:
+	init_rt_bandwidth(&root_task_group.rt_task_group.rt_bandwidth,
 			global_rt_period(), RUNTIME_INF);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#446: FILE: kernel/sched.c:9639:
+		if (rt_tg->rt_se[i])
+			kfree(rt_tg->rt_se[i]);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#473: FILE: kernel/sched.c:9660:
+	tg->rt_rq_group.rt_rq = kzalloc(sizeof(rt_rq) * nr_cpu_ids, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#476: FILE: kernel/sched.c:9663:
+	tg->rt_rq_group.rt_se = kzalloc(sizeof(rt_se) * nr_cpu_ids, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#480: FILE: kernel/sched.c:9667:
+	tg->rt_task_group.rt_rq = kzalloc(sizeof(rt_rq) * nr_cpu_ids,
+					  GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#486: FILE: kernel/sched.c:9671:
+	tg->rt_task_group.rt_se = kzalloc(sizeof(rt_se) * nr_cpu_ids,
+					  GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: kernel/sched.c:9677:
+	init_rt_bandwidth(&tg->rt_rq_group.rt_bandwidth,
+			ktime_to_ns(def_rt_bandwidth.rt_period), 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: kernel/sched.c:9681:
+	init_rt_bandwidth(&tg->rt_task_group.rt_bandwidth,
 			ktime_to_ns(def_rt_bandwidth.rt_period), 0);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc_node(sizeof(*rt_task_rq)...) over kzalloc_node(sizeof(struct rt_rq)...)
#509: FILE: kernel/sched.c:9697:
+		rt_task_rq = kzalloc_node(sizeof(struct rt_rq),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc_node(sizeof(*rt_task_se)...) over kzalloc_node(sizeof(struct sched_rt_entity)...)
#514: FILE: kernel/sched.c:9702:
+		rt_task_se = kzalloc_node(sizeof(struct sched_rt_entity),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: kernel/sched.c:9729:
+	list_add_rcu(&tg->rt_rq_group.rt_rq[cpu]->leaf_rt_rq_list,
+			&cpu_rq(cpu)->leaf_rt_rq_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: kernel/sched.c:9731:
+	list_add_rcu(&tg->rt_task_group.rt_rq[cpu]->leaf_rt_rq_list,
 			&cpu_rq(cpu)->leaf_rt_rq_list);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#580: FILE: kernel/sched.c:10004:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#589: FILE: kernel/sched.c:10013:
+	if (d && tg == d->tg && d->rt_task_group) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#592: FILE: kernel/sched.c:10016:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#601: FILE: kernel/sched.c:10025:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: kernel/sched.c:10438:
+static int cpu_rt_task_period_write_uint(struct cgroup *cgrp,
+			struct cftype *cftype, u64 rt_period_us)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1028: FILE: kernel/sched_rt.c:350:
+	if (rt_rq->rt_time) {
[...]
+	} else if (rt_rq->rt_nr_running)
[...]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1032: FILE: kernel/sched_rt.c:354:
+		rt_rq->rt_time -= min(rt_rq->rt_time, overrun*runtime);
 		                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1033: FILE: kernel/sched_rt.c:355:
+		rt_rq->rt_deadline += overrun*ktime_to_ns(rt_rq->rt_period);
 		                             ^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#1294: FILE: kernel/sched_rt.c:786:
+	 *   group would exceed ist allocated bandwidth.
 	                        ^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109726.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 19 checks, 1264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109726.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
