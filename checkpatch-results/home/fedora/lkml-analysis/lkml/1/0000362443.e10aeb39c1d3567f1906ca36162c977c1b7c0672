WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
implementation should not be used in a SMP context. However, the cmpxchg_local

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#118: FILE: arch/i386/kernel/cpu/intel.c:354:
+unsigned long long cmpxchg_486_u64(volatile void *ptr, u64 old, u64 new)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#153: FILE: include/asm-i386/cmpxchg.h:108:
+#define cmpxchg(ptr, o, n)						     \
+	((__typeof__(*(ptr)))__cmpxchg((ptr), (unsigned long)(o),	     \
+					(unsigned long)(n), sizeof(*(ptr))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#156: FILE: include/asm-i386/cmpxchg.h:111:
+#define sync_cmpxchg(ptr, o, n)						     \
+	((__typeof__(*(ptr)))__sync_cmpxchg((ptr), (unsigned long)(o),	     \
+					(unsigned long)(n), sizeof(*(ptr))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#159: FILE: include/asm-i386/cmpxchg.h:114:
+#define cmpxchg_local(ptr, o, n)					     \
+	((__typeof__(*(ptr)))__cmpxchg_local((ptr), (unsigned long)(o),	     \
+					(unsigned long)(n), sizeof(*(ptr))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#165: FILE: include/asm-i386/cmpxchg.h:120:
+#define cmpxchg64(ptr, o, n)						      \
+	((__typeof__(*(ptr)))__cmpxchg64((ptr), (unsigned long long)(o),      \
+					(unsigned long long)(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#168: FILE: include/asm-i386/cmpxchg.h:123:
+#define cmpxchg64_local(ptr, o, n)					      \
+	((__typeof__(*(ptr)))__cmpxchg64_local((ptr), (unsigned long long)(o),\
+					(unsigned long long)(n)))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#178: FILE: include/asm-i386/cmpxchg.h:215:
+static inline unsigned long long __cmpxchg64(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: include/asm-i386/cmpxchg.h:216:
+static inline unsigned long long __cmpxchg64(volatile void *ptr,
+			unsigned long long old, unsigned long long new)

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: include/asm-i386/cmpxchg.h:219:
+	unsigned long long prev;
+	__asm__ __volatile__(LOCK_PREFIX "cmpxchg8b %3"

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#192: FILE: include/asm-i386/cmpxchg.h:229:
+static inline unsigned long long __cmpxchg64_local(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: include/asm-i386/cmpxchg.h:230:
+static inline unsigned long long __cmpxchg64_local(volatile void *ptr,
+			unsigned long long old, unsigned long long new)

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: include/asm-i386/cmpxchg.h:233:
+	unsigned long long prev;
+	__asm__ __volatile__("cmpxchg8b %3"

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#263: FILE: include/asm-i386/cmpxchg.h:298:
+extern unsigned long long cmpxchg_486_u64(volatile void *, u64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/asm-i386/cmpxchg.h:298:
+extern unsigned long long cmpxchg_486_u64(volatile void *, u64, u64);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#265: FILE: include/asm-i386/cmpxchg.h:300:
+#define cmpxchg64(ptr, o, n)						\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 4))				\
+		__ret = __cmpxchg64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	else								\
+		__ret = cmpxchg_486_u64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'o' - possible side-effects?
#265: FILE: include/asm-i386/cmpxchg.h:300:
+#define cmpxchg64(ptr, o, n)						\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 4))				\
+		__ret = __cmpxchg64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	else								\
+		__ret = cmpxchg_486_u64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#265: FILE: include/asm-i386/cmpxchg.h:300:
+#define cmpxchg64(ptr, o, n)						\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 4))				\
+		__ret = __cmpxchg64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	else								\
+		__ret = cmpxchg_486_u64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#276: FILE: include/asm-i386/cmpxchg.h:311:
+#define cmpxchg64_local(ptr, o, n)					\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 4))				\
+		__ret = __cmpxchg64_local((ptr), (unsigned long long)(o), \
+				(unsigned long long)(n));		\
+	else								\
+		__ret = cmpxchg_486_u64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'o' - possible side-effects?
#276: FILE: include/asm-i386/cmpxchg.h:311:
+#define cmpxchg64_local(ptr, o, n)					\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 4))				\
+		__ret = __cmpxchg64_local((ptr), (unsigned long long)(o), \
+				(unsigned long long)(n));		\
+	else								\
+		__ret = cmpxchg_486_u64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#276: FILE: include/asm-i386/cmpxchg.h:311:
+#define cmpxchg64_local(ptr, o, n)					\
+({									\
+	__typeof__(*(ptr)) __ret;					\
+	if (likely(boot_cpu_data.x86 > 4))				\
+		__ret = __cmpxchg64_local((ptr), (unsigned long long)(o), \
+				(unsigned long long)(n));		\
+	else								\
+		__ret = cmpxchg_486_u64((ptr), (unsigned long long)(o),	\
+				(unsigned long long)(n));		\
+	__ret;								\
+})

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000362443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 14 checks, 174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000362443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
