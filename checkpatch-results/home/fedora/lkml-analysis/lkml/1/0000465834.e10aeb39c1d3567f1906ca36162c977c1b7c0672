WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '166fb223f9507431fb97820549e3e41980987445', maybe rebased or not pulled?
#58: 
commit 166fb223f9507431fb97820549e3e41980987445

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#68: 
    Signed-off-by: Pierre Ossman <ossman@cendio.se>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!server->txbuf"
#79: FILE: fs/ncpfs/inode.c:580:
+	if (server->txbuf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!server->rxbuf"
#82: FILE: fs/ncpfs/inode.c:583:
+	if (server->rxbuf == NULL)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#137: FILE: fs/ncpfs/sock.c:60:
+	unsigned char* reply_buf;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#149: FILE: fs/ncpfs/sock.c:72:
+static inline struct ncp_request_reply* ncp_alloc_req(void)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req)...) over kmalloc(sizeof(struct ncp_request_reply)...)
#153: FILE: fs/ncpfs/sock.c:76:
+	req = kmalloc(sizeof(struct ncp_request_reply), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#183: FILE: fs/ncpfs/sock.c:132:
+static inline void ncp_finish_request(struct ncp_server *server, struct ncp_request_reply *req, int result)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#262: FILE: fs/ncpfs/sock.c:319:
+	/* we copy the data so that we do not depend on the caller
+	   staying alive */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: fs/ncpfs/sock.c:319:
+	   staying alive */

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#282: FILE: fs/ncpfs/sock.c:439:
+					result = _recv(sock, server->rxbuf, req->datalen, MSG_DONTWAIT);

WARNING:LONG_LINE: line length of 170 exceeds 100 columns
#291: FILE: fs/ncpfs/sock.c:449:
+							if (sign_verify_reply(server, server->rxbuf + hdrl, result - hdrl, cpu_to_le32(result), server->rxbuf + result)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#291: FILE: fs/ncpfs/sock.c:449:
+							if (sign_verify_reply(server, server->rxbuf + hdrl, result - hdrl, cpu_to_le32(result), server->rxbuf + result)) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#323: FILE: fs/ncpfs/sock.c:625:
+				((struct ncp_reply_header*)server->rxbuf)->type = NCP_REPLY;

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#333: FILE: fs/ncpfs/sock.c:639:
+					if (((struct ncp_reply_header*)server->rxbuf)->sequence != server->sequence) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#333: FILE: fs/ncpfs/sock.c:639:
+					if (((struct ncp_reply_header*)server->rxbuf)->sequence != server->sequence) {

WARNING:LONG_LINE: line length of 184 exceeds 100 columns
#339: FILE: fs/ncpfs/sock.c:644:
+					if ((((struct ncp_reply_header*)server->rxbuf)->conn_low | (((struct ncp_reply_header*)server->rxbuf)->conn_high << 8)) != server->connection) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#339: FILE: fs/ncpfs/sock.c:644:
+					if ((((struct ncp_reply_header*)server->rxbuf)->conn_low | (((struct ncp_reply_header*)server->rxbuf)->conn_high << 8)) != server->connection) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#339: FILE: fs/ncpfs/sock.c:644:
+					if ((((struct ncp_reply_header*)server->rxbuf)->conn_low | (((struct ncp_reply_header*)server->rxbuf)->conn_high << 8)) != server->connection) {

WARNING:LONG_LINE: line length of 164 exceeds 100 columns
#348: FILE: fs/ncpfs/sock.c:652:
+					if (sign_verify_reply(server, server->rxbuf + 6, req->datalen - 6, cpu_to_be32(req->datalen + 16), &server->rcv.buf.type)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#374: FILE: fs/ncpfs/sock.c:699:
+		unsigned char* reply_buf, int max_reply_size)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#406: FILE: fs/ncpfs/sock.c:714:
+	req->tx_type = *(u_int16_t*)server->packet;

WARNING:TYPO_SPELLING: 'requres' may be misspelled - perhaps 'requires'?
#448: FILE: include/linux/ncp_fs_sb.h:53:
+	unsigned char *txbuf;	/* Storage for current requres */
 	                     	                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 12 warnings, 3 checks, 347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
