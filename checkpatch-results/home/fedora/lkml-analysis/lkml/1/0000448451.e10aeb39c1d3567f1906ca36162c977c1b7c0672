CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: mm/sparse.c:201:
+static int __meminit sparse_init_one_section(struct mem_section *ms,
 		unsigned long pnum, struct page *mem_map,

WARNING:MISPLACED_INIT: __meminitdata should be placed after dma_reserve
#135: FILE: mm/page_alloc.c:108:
+static unsigned long __meminitdata dma_reserve;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: mm/page_alloc.c:131:
+  struct node_active_region __meminitdata early_node_map[MAX_ACTIVE_REGIONS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: mm/page_alloc.c:132:
+  int __meminitdata nr_nodemap_entries;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: mm/page_alloc.c:133:
+  unsigned long __meminitdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: mm/page_alloc.c:134:
+  unsigned long __meminitdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: mm/page_alloc.c:140:
+  unsigned long __meminitdata zone_movable_pfn[MAX_NUMNODES];$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: mm/page_alloc.c:2927:
+void __meminit get_pfn_range_for_nid(unsigned int nid,
 			unsigned long *start_pfn, unsigned long *end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: mm/page_alloc.c:2979:
+void __meminit adjust_zone_range_for_zone_movable(int nid,
 					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: mm/page_alloc.c:3009:
+unsigned long __meminit zone_spanned_pages_in_node(int nid,
 					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: mm/page_alloc.c:3040:
+unsigned long __meminit __absent_pages_in_range(int nid,
 				unsigned long range_start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: mm/page_alloc.c:3100:
+unsigned long __meminit zone_absent_pages_in_node(int nid,
 					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: mm/page_alloc.c:3139:
+static void __meminit calculate_node_totalpages(struct pglist_data *pgdat,
 		unsigned long *zones_size, unsigned long *zholes_size)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448451.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 7 checks, 203 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448451.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
