WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#29: 
From: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
It is build upon the regular double linked list primitives, spinlocks and RCU.

WARNING:TYPO_SPELLING: 'dependancy' may be misspelled - perhaps 'dependency'?
#40: 
dependancy created by the fact that the regular linked lists are circular.
^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/linux/lock_list.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#82: FILE: include/linux/lock_list.h:23:
+	spinlock_t lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/lock_list.h:41:
+extern void __lock_list_add(struct lock_list_head *new,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: include/linux/lock_list.h:45:
+static inline void lock_list_add(struct lock_list_head *new,
+			    struct lock_list_head *list)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/lock_list.h:52:
+extern void lock_list_del_init(struct lock_list_head *entry);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#123: FILE: include/linux/lock_list.h:64:
+#define lock_list_for_each_entry(pos, list, member)			\
+	for (pos = list_entry(lock_list_first_entry(list), 		\
+			      typeof(*pos), member); 			\
+	     pos;							\
+	     pos = list_entry(lock_list_next_entry(list, &pos->member),	\
+			      typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'list' - possible side-effects?
#123: FILE: include/linux/lock_list.h:64:
+#define lock_list_for_each_entry(pos, list, member)			\
+	for (pos = list_entry(lock_list_first_entry(list), 		\
+			      typeof(*pos), member); 			\
+	     pos;							\
+	     pos = list_entry(lock_list_next_entry(list, &pos->member),	\
+			      typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#123: FILE: include/linux/lock_list.h:64:
+#define lock_list_for_each_entry(pos, list, member)			\
+	for (pos = list_entry(lock_list_first_entry(list), 		\
+			      typeof(*pos), member); 			\
+	     pos;							\
+	     pos = list_entry(lock_list_next_entry(list, &pos->member),	\
+			      typeof(*pos), member))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: include/linux/lock_list.h:65:
+^Ifor (pos = list_entry(lock_list_first_entry(list), ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: include/linux/lock_list.h:66:
+^I^I^I      typeof(*pos), member); ^I^I^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos' may be better as '(pos)' to avoid precedence issues
#130: FILE: include/linux/lock_list.h:71:
+#define lock_list_for_each_entry_stop(pos, member)			\
+	spin_unlock(&(pos->member.lock))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#130: FILE: include/linux/lock_list.h:71:
+#define lock_list_for_each_entry_stop(pos, member)			\
+	spin_unlock(&(pos->member.lock))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pos->member.lock
#131: FILE: include/linux/lock_list.h:72:
+	spin_unlock(&(pos->member.lock))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#153: FILE: lib/lock_list.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: lib/lock_list.c:60:
+	struct lock_list_head *next = entry->next;
+	if (likely(next != list)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#212: FILE: lib/lock_list.c:60:
+	if (likely(next != list)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: lib/lock_list.c:64:
+		BUG_ON(entry->next != next);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#217: FILE: lib/lock_list.c:65:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473843.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 12 checks, 153 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473843.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
