WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: include/asm-generic/cache.h:1:
+#ifndef __ASM_GENERIC_CACHE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#77: FILE: include/asm-generic/cache.h:10:
+#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: include/asm-generic/cacheflush.h:1:
+#ifndef __ASM_CACHEFLUSH_H

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: include/asm-generic/cacheflush.h:20:
+#define flush_icache_page(vma,pg)		do { } while (0)
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: include/asm-generic/cacheflush.h:21:
+#define flush_icache_user_range(vma,pg,adr,len)	do { } while (0)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: include/asm-generic/cacheflush.h:21:
+#define flush_icache_user_range(vma,pg,adr,len)	do { } while (0)
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: include/asm-generic/cacheflush.h:21:
+#define flush_icache_user_range(vma,pg,adr,len)	do { } while (0)
                                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: include/asm-generic/mmu.h:1:
+#ifndef __ASM_GENERIC_MMU_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#130: FILE: include/asm-generic/mmu.h:9:
+typedef struct {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#142: FILE: include/asm-generic/mmu_context.h:1:
+#ifndef __ASM_GENERIC_MMU_CONTEXT_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: include/asm-generic/mmu_context.h:15:
+static inline void enter_lazy_tlb(struct mm_struct *mm,
+			struct task_struct *tsk)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/asm-generic/mmu_context.h:20:
+static inline int init_new_context(struct task_struct *tsk,
+			struct mm_struct *mm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: include/asm-generic/mmu_context.h:30:
+static inline void deactivate_mm(struct task_struct *task,
+			struct mm_struct *mm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: include/asm-generic/mmu_context.h:35:
+static inline void switch_mm(struct mm_struct *prev,
+			struct mm_struct *next,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#193: FILE: include/asm-generic/page.h:1:
+#ifndef __ASM_GENERIC_PAGE_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: include/asm-generic/page.h:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#209: FILE: include/asm-generic/page.h:17:
+#define PAGE_SIZE	(1 << PAGE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#211: FILE: include/asm-generic/page.h:19:
+#define PAGE_SIZE	(1UL << PAGE_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#213: FILE: include/asm-generic/page.h:21:
+#define PAGE_MASK	(~(PAGE_SIZE-1))
                  	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: include/asm-generic/page.h:31:
+#define copy_page(to,from)	memcpy((to), (from), PAGE_SIZE)
                     ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#231: FILE: include/asm-generic/page.h:39:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#234: FILE: include/asm-generic/page.h:42:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#237: FILE: include/asm-generic/page.h:45:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#240: FILE: include/asm-generic/page.h:48:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#243: FILE: include/asm-generic/page.h:51:
+typedef struct page *pgtable_t;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#246: FILE: include/asm-generic/page.h:54:
+#define pmd_val(x)	((&x)->pmd[0])

ERROR:SPACING: space prohibited before that close parenthesis ')'
#250: FILE: include/asm-generic/page.h:58:
+#define __pte(x)	((pte_t) { (x) } )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#251: FILE: include/asm-generic/page.h:59:
+#define __pmd(x)	((pmd_t) { (x) } )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#252: FILE: include/asm-generic/page.h:60:
+#define __pgd(x)	((pgd_t) { (x) } )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#253: FILE: include/asm-generic/page.h:61:
+#define __pgprot(x)	((pgprot_t) { (x) } )

CHECK:SPACING: No space is necessary after a cast
#269: FILE: include/asm-generic/page.h:77:
+#define __pa(x) ((unsigned long) (x) - PAGE_OFFSET)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#274: FILE: include/asm-generic/page.h:82:
+#define virt_to_page(addr)	(mem_map + (((unsigned long)(addr)-PAGE_OFFSET) >> PAGE_SHIFT))
                           	                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kaddr' - possible side-effects?
#283: FILE: include/asm-generic/page.h:91:
+#define	virt_addr_valid(kaddr)	(((void *)(kaddr) >= (void *)PAGE_OFFSET) && \
+				((void *)(kaddr) < (void *)memory_end))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#298: FILE: include/asm-generic/pgalloc.h:1:
+#ifndef __ASM_GENERIC_PGALLOC_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#316: FILE: include/asm-generic/segment.h:1:
+#ifndef __ASM_GENERIC_SEGMENT_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#331: FILE: include/asm-generic/tlbflush.h:1:
+#ifndef __ASM_GENERIC_TLBFLUSH_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#344: FILE: include/asm-generic/tlbflush.h:14:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#347: FILE: include/asm-generic/tlbflush.h:17:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: include/asm-generic/uaccess.h:1:
+#ifndef __ASM_GENERIC_UACCESS_H

ERROR:SPACING: space required after that ',' (ctx:VxV)
#388: FILE: include/asm-generic/uaccess.h:34:
+#define access_ok(type, addr, size) __access_ok((unsigned long)(addr),(size))
                                                                      ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#415: FILE: include/asm-generic/uaccess.h:61:
+struct exception_table_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: include/asm-generic/uaccess.h:66:
+extern unsigned long search_exception_table(unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#420: FILE: include/asm-generic/uaccess.h:66:
+extern unsigned long search_exception_table(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#427: FILE: include/asm-generic/uaccess.h:73:
+#define __put_user(x, ptr)				\
+({							\
+	int __pu_err = 0;				\
+	typeof(*(ptr)) __pu_val = (x);			\
+	switch (sizeof (*(ptr))) {			\
+	case 1:						\
+	case 2:						\
+	case 4:						\
+		*(ptr) = (__pu_val);			\
+		break;					\
+	case 8:						\
+		memcpy(ptr, &__pu_val, sizeof (*(ptr)));\
+		break;					\
+	default:					\
+		__pu_err = __put_user_bad();		\
+		break;					\
+	}						\
+	__pu_err;					\
+})

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#431: FILE: include/asm-generic/uaccess.h:77:
+	switch (sizeof (*(ptr))) {			\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#438: FILE: include/asm-generic/uaccess.h:84:
+		memcpy(ptr, &__pu_val, sizeof (*(ptr)));\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#446: FILE: include/asm-generic/uaccess.h:92:
+extern int __put_user_bad(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#449: FILE: include/asm-generic/uaccess.h:95:
+#define put_user(x, ptr) (				\
+	__access_ok(ptr, sizeof (*ptr)) ?		\
+		__put_user(x, ptr) :			\
+		-EFAULT)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#450: FILE: include/asm-generic/uaccess.h:96:
+	__access_ok(ptr, sizeof (*ptr)) ?		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#455: FILE: include/asm-generic/uaccess.h:101:
+#define __get_user(x, ptr)				\
+({							\
+	int __gu_err = 0;				\
+	unsigned long __gu_val = (unsigned long)*ptr;	\
+	switch (sizeof(*(ptr))) {			\
+	case 1:						\
+	case 2:						\
+	case 4:						\
+	case 8:						\
+		break;					\
+	default:					\
+		__gu_err = __get_user_bad();		\
+		__gu_val = 0;				\
+		break;					\
+	}						\
+	(x) = (typeof(*ptr))__gu_val;			\
+	__gu_err;					\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#455: FILE: include/asm-generic/uaccess.h:101:
+#define __get_user(x, ptr)				\
+({							\
+	int __gu_err = 0;				\
+	unsigned long __gu_val = (unsigned long)*ptr;	\
+	switch (sizeof(*(ptr))) {			\
+	case 1:						\
+	case 2:						\
+	case 4:						\
+	case 8:						\
+		break;					\
+	default:					\
+		__gu_err = __get_user_bad();		\
+		__gu_val = 0;				\
+		break;					\
+	}						\
+	(x) = (typeof(*ptr))__gu_val;			\
+	__gu_err;					\
+})

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#473: FILE: include/asm-generic/uaccess.h:119:
+extern int __get_user_bad(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#476: FILE: include/asm-generic/uaccess.h:122:
+#define get_user(x, ptr) (				\
+	__access_ok(ptr, sizeof (*ptr)) ?		\
+		__get_user(x, ptr) :			\
+		-EFAULT)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#477: FILE: include/asm-generic/uaccess.h:123:
+	__access_ok(ptr, sizeof (*ptr)) ?		\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: include/asm-generic/uaccess.h:129:
+static inline __must_check long __copy_from_user(void *to,
+		const void __user *from, unsigned long n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: include/asm-generic/uaccess.h:138:
+static inline __must_check long __copy_to_user(void __user *to,
+		const void *from, unsigned long n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: include/asm-generic/uaccess.h:154:
+static inline long copy_from_user(void *to,
+		const void __user * from, unsigned long n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#508: FILE: include/asm-generic/uaccess.h:154:
+		const void __user * from, unsigned long n)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: include/asm-generic/uaccess.h:164:
+static inline long copy_to_user(void __user *to,
+		const void *from, unsigned long n)

WARNING:LINE_SPACING: Missing a blank line after declarations
#535: FILE: include/asm-generic/uaccess.h:181:
+	char *tmp;
+	strncpy(dst, src, count);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131574.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 23 warnings, 26 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131574.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
