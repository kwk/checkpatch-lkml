WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#72: FILE: arch/um/os-Linux/user_syms.c:37:
+	int sym(void);                  \

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#137: FILE: arch/um/os-Linux/mem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tempdir"
#174: FILE: arch/um/os-Linux/mem.c:35:
+	if (tempdir != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir != NULL'
#181: FILE: arch/um/os-Linux/mem.c:40:
+		if ((dir != NULL) && (*dir != '\0'))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dir"
#181: FILE: arch/um/os-Linux/mem.c:40:
+		if ((dir != NULL) && (*dir != '\0'))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir == NULL'
#185: FILE: arch/um/os-Linux/mem.c:43:
+	if ((dir == NULL) || (*dir == '\0'))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#185: FILE: arch/um/os-Linux/mem.c:43:
+	if ((dir == NULL) || (*dir == '\0'))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tempdir"
#190: FILE: arch/um/os-Linux/mem.c:47:
+	if (tempdir == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#420: FILE: arch/um/os-Linux/skas/process.c:344:
+		printk(UM_KERN_ERR "Failed to get itimer, errno = %d\n", errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#509: FILE: arch/um/os-Linux/sys-x86_64/registers.c:38:
+		printk(UM_KERN_ERR "get_thread_regs - unknown register %d\n",

CHECK:SPACING: No space is necessary after a cast
#584: FILE: arch/um/os-Linux/util.c:21:
+	if (mprotect((void *) address, UM_THREAD_SIZE,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: arch/um/os-Linux/util.c:22:
+	if (mprotect((void *) address, UM_THREAD_SIZE,
 		    PROT_READ | PROT_WRITE | PROT_EXEC) < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#630: FILE: arch/um/os-Linux/drivers/ethertap_kern.c:33:
+	printk(KERN_INFO "ethertap backend - %s", epri->dev_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#634: FILE: arch/um/os-Linux/drivers/ethertap_kern.c:35:
+		printk(KERN_CONT ", IP = %s", epri->gate_addr);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#634: FILE: arch/um/os-Linux/drivers/ethertap_kern.c:35:
+		printk(KERN_CONT ", IP = %s", epri->gate_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#635: FILE: arch/um/os-Linux/drivers/ethertap_kern.c:36:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#635: FILE: arch/um/os-Linux/drivers/ethertap_kern.c:36:
+	printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#648: FILE: arch/um/os-Linux/drivers/tuntap_kern.c:32:
+	printk(KERN_INFO "TUN/TAP backend - ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#652: FILE: arch/um/os-Linux/drivers/tuntap_kern.c:34:
+		printk(KERN_CONT "IP = %s", tpri->gate_addr);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#652: FILE: arch/um/os-Linux/drivers/tuntap_kern.c:34:
+		printk(KERN_CONT "IP = %s", tpri->gate_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#653: FILE: arch/um/os-Linux/drivers/tuntap_kern.c:35:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#653: FILE: arch/um/os-Linux/drivers/tuntap_kern.c:35:
+	printk(KERN_CONT "\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#666: FILE: arch/um/os-Linux/process.c:227:
+	printk(UM_KERN_CONT "OK\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000325902.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 8 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000325902.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
