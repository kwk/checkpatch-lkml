WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: include/linux/integrity.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: include/linux/integrity.h:20:
+void integrity_audit_msg(int audit_msgno, struct inode *inode,
+			const unsigned char *fname, char *op,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/integrity.h:24:
+extern int integrity_measure_policy(struct inode *inode, enum lim_hooks func,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/integrity.h:25:
+extern int integrity_measure_policy(struct inode *inode, enum lim_hooks func,
+					int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/integrity.h:26:
+extern int integrity_measure_rule_add(char *, char *, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#129: FILE: include/linux/integrity.h:26:
+extern int integrity_measure_rule_add(char *, char *, char *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#129: FILE: include/linux/integrity.h:26:
+extern int integrity_measure_rule_add(char *, char *, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#129: FILE: include/linux/integrity.h:26:
+extern int integrity_measure_rule_add(char *, char *, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#129: FILE: include/linux/integrity.h:26:
+extern int integrity_measure_rule_add(char *, char *, char *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/integrity.h:27:
+extern void integrity_measure_policy_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/integrity.h:28:
+extern void integrity_measure_policy_complete(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#140: FILE: include/linux/integrity.h:37:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: include/linux/integrity.h:43:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: include/linux/integrity.h:53:
+ * ^Idecision.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: include/linux/integrity.h:54:
+ * ^IReturn 0 if operation was successful.$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#167: FILE: include/linux/integrity.h:64:
+	int (*collect_measurement)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#168: FILE: include/linux/integrity.h:65:
+	int (*appraise_measurement)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#169: FILE: include/linux/integrity.h:66:
+	void (*store_measurement)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#170: FILE: include/linux/integrity.h:67:
+	int (*must_measure)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#171: FILE: include/linux/integrity.h:68:
+	void (*display_template)(struct seq_file *m, void *,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#174: FILE: include/linux/integrity.h:71:
+};
+extern int register_template(char *template_name,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/linux/integrity.h:71:
+extern int register_template(char *template_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: include/linux/integrity.h:72:
+extern int register_template(char *template_name,
+				struct template_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/integrity.h:73:
+extern int unregister_template(char *template_name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/integrity.h:74:
+extern int integrity_find_template(char *, struct template_operations **ops);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#177: FILE: include/linux/integrity.h:74:
+extern int integrity_find_template(char *, struct template_operations **ops);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: include/linux/integrity.h:80:
+ * ^IThis hook mediates the point when a search for a binary handler^Iwill$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: include/linux/integrity.h:81:
+ * ^Ibegin.  At this point, the OS protects against an executable file,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: include/linux/integrity.h:82:
+ * ^Ialready open for write, from being executed; and an executable file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: include/linux/integrity.h:83:
+ * ^Ialready open for execute, from being modified. So we can be certain$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: include/linux/integrity.h:85:
+ * ^Ithe file being executed.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: include/linux/integrity.h:86:
+ * ^I@bprm contains the linux_binprm structure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: include/linux/integrity.h:91:
+ * ^Ito be set.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: include/linux/integrity.h:96:
+ * ^Iidentified by @name for @dentry.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: include/linux/integrity.h:100:
+ * ^Ii_integrity field is initialized to NULL when the inode structure is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: include/linux/integrity.h:101:
+ * ^Iallocated.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: include/linux/integrity.h:102:
+ * ^I@inode contains the inode structure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: include/linux/integrity.h:103:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: include/linux/integrity.h:107:
+ * ^IDeallocate the inode integrity structure and set @inode->i_integrity to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: include/linux/integrity.h:108:
+ * ^INULL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: include/linux/integrity.h:112:
+ * ^Ixattr information.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: include/linux/integrity.h:115:
+ * ^I@name contains the security xattr name suffix.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: include/linux/integrity.h:121:
+ * ^Ia file is opened (as well as many other operations).  At this point,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: include/linux/integrity.h:123:
+ * ^Ibe made.$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#229: FILE: include/linux/integrity.h:126:
+ *      @nd contains the nameidata (may be NULL).
          ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: include/linux/integrity.h:130:
+ * ^I*file contains the file structure being closed.$

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#236: FILE: include/linux/integrity.h:133:
+ *	Measurement(collect, appraise, store) of files mmaped for EXEC,
   	                                               ^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#252: FILE: include/linux/integrity.h:149:
+	int (*bprm_check_integrity) (struct linux_binprm *bprm);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#253: FILE: include/linux/integrity.h:150:
+	int (*inode_setxattr) (struct dentry *dentry, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: include/linux/integrity.h:151:
+	int (*inode_setxattr) (struct dentry *dentry, const char *name,
+				const void *value, size_t size, int flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#255: FILE: include/linux/integrity.h:152:
+	void (*inode_post_setxattr) (struct dentry *dentry, const char *name);

WARNING:SPACING: Unnecessary space before function pointer arguments
#256: FILE: include/linux/integrity.h:153:
+	int (*inode_alloc_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#257: FILE: include/linux/integrity.h:154:
+	void (*inode_free_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#258: FILE: include/linux/integrity.h:155:
+	void (*inode_init_integrity) (struct inode *inode, struct inode *dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: include/linux/integrity.h:156:
+	void (*inode_init_integrity) (struct inode *inode, struct inode *dir,
+				    char **name, void **value, size_t *len);

WARNING:SPACING: Unnecessary space before function pointer arguments
#260: FILE: include/linux/integrity.h:157:
+	int (*inode_permission) (struct inode *inode, int mask,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#261: FILE: include/linux/integrity.h:158:
+				struct nameidata *nd);
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: include/linux/integrity.h:158:
+	int (*inode_permission) (struct inode *inode, int mask,
+				struct nameidata *nd);

WARNING:SPACING: Unnecessary space before function pointer arguments
#262: FILE: include/linux/integrity.h:159:
+	void (*file_free_integrity) (struct file *file);

WARNING:SPACING: Unnecessary space before function pointer arguments
#263: FILE: include/linux/integrity.h:160:
+	int (*file_mmap) (struct file *file,

WARNING:SPACING: Unnecessary space before function pointer arguments
#267: FILE: include/linux/integrity.h:164:
+	void (*d_instantiate) (struct dentry *dentry, struct inode *inode);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#269: FILE: include/linux/integrity.h:166:
+};
+extern int register_integrity(struct integrity_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/linux/integrity.h:166:
+extern int register_integrity(struct integrity_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/linux/integrity.h:167:
+extern int unregister_integrity(struct integrity_operations *ops);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#275: FILE: include/linux/integrity.h:172:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: include/linux/integrity.h:180:
+int integrity_inode_setxattr(struct dentry *dentry, const char *name,
+				const void *value, size_t size, int flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: include/linux/integrity.h:185:
+void integrity_inode_init_integrity(struct inode *inode, struct inode *dir,
+				char **name, void **value, size_t *len);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#290: FILE: include/linux/integrity.h:187:
+				struct nameidata *nd);
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: include/linux/integrity.h:187:
+int integrity_inode_permission(struct inode *inode, int mask,
+				struct nameidata *nd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: include/linux/integrity.h:190:
+int integrity_file_mmap(struct file *file,
+			  unsigned long reqprot, unsigned long prot,

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: include/linux/integrity.h:203:
+^I^I^I^I ^I   const char *name, const void *value,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: include/linux/integrity.h:203:
+^I^I^I^I ^I   const char *name, const void *value,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: include/linux/integrity.h:203:
+static inline int integrity_inode_setxattr(struct dentry *dentry,
+				 	   const char *name, const void *value,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: include/linux/integrity.h:210:
+static inline void integrity_inode_post_setxattr(struct dentry *dentry,
+						const char *name)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: include/linux/integrity.h:222:
+static inline int integrity_inode_init_integrity(struct inode *inode,
+						struct inode *dir,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#334: FILE: include/linux/integrity.h:231:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: include/linux/integrity.h:231:
+static inline int integrity_inode_permission(struct inode *inode, int mask,
+				struct nameidata *nd)

WARNING:RETURN_VOID: void function return statements are not generally useful
#347: FILE: include/linux/integrity.h:244:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: include/linux/integrity.h:247:
+static inline int integrity_file_mmap(struct file *file,
+			  unsigned long reqprot, unsigned long prot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: include/linux/integrity.h:255:
+static inline void integrity_d_instantiate(struct dentry *dentry,
+						struct inode *inode)

WARNING:RETURN_VOID: void function return statements are not generally useful
#361: FILE: include/linux/integrity.h:258:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#370: FILE: security/integrity/integrity.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#379: FILE: security/integrity/integrity.c:10:
+ * ^Iregister integrity subsystem$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: security/integrity/integrity.c:11:
+ * ^Iregister integrity template$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#399: FILE: security/integrity/integrity.c:30:
+};
+static int template_initialized;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: security/integrity/integrity.c:71:
+int register_template(char *template_name,
+			struct template_operations *template_ops)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: security/integrity/integrity.c:123:
+int integrity_find_template(char *template_name,
+				struct template_operations **template_ops)

WARNING:RETURN_VOID: void function return statements are not generally useful
#535: FILE: security/integrity/integrity.c:166:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#580: FILE: security/integrity/integrity.c:211:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: security/integrity/integrity.c:211:
+int integrity_inode_permission(struct inode *inode, int mask,
+				struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#582: FILE: security/integrity/integrity.c:213:
+	return integrity_ops->inode_permission(inode, mask, nd);
 	                                                    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: security/integrity/integrity.c:217:
+void integrity_inode_init_integrity(struct inode *inode, struct inode *dir,
+					char **name, void **value, size_t *len)

WARNING:RETURN_VOID: void function return statements are not generally useful
#592: FILE: security/integrity/integrity.c:223:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#619: FILE: security/integrity/integrity_dummy.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#628: FILE: security/integrity/integrity_dummy.c:10:
+ * ^IInstantiate integrity subsystem$

WARNING:RETURN_VOID: void function return statements are not generally useful
#653: FILE: security/integrity/integrity_dummy.c:35:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#659: FILE: security/integrity/integrity_dummy.c:41:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#664: FILE: security/integrity/integrity_dummy.c:46:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: security/integrity/integrity_dummy.c:49:
+static int dummy_file_mmap(struct file *file,
+			  unsigned long reqprot, unsigned long prot,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#685: FILE: security/integrity/integrity_dummy.c:67:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: security/integrity/integrity_dummy.c:67:
+static	int dummy_inode_permission(struct inode *inode, int mask,
+				struct nameidata *nd)

WARNING:RETURN_VOID: void function return statements are not generally useful
#693: FILE: security/integrity/integrity_dummy.c:75:
+	return;
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ops' - possible side-effects?
#708: FILE: security/integrity/integrity_dummy.c:90:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" integrity operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ops' may be better as '(ops)' to avoid precedence issues
#708: FILE: security/integrity/integrity_dummy.c:90:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" integrity operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'function' - possible side-effects?
#708: FILE: security/integrity/integrity_dummy.c:90:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" integrity operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#708: FILE: security/integrity/integrity_dummy.c:90:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" integrity operation with the dummy one.\n");\
+			}						\
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#712: FILE: security/integrity/integrity_dummy.c:94:
+			printk(KERN_INFO "Had to override the " #function \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#736: FILE: security/integrity/integrity_dummy.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#748: FILE: security/integrity/integrity_dummy.h:13:
+extern void integrity_fixup_ops(struct integrity_operations *ops);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#818: FILE: fs/ext3/xattr_security.c:62:
+		 * indicate this is a new inode. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#969: FILE: include/linux/audit.h:449:
+extern void audit_log_inode_context(struct audit_buffer *ab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: include/linux/audit.h:450:
+extern void audit_log_inode_context(struct audit_buffer *ab,
+					struct inode *inode);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#978: FILE: include/linux/audit.h:531:
+#define audit_log_inode_context(b, a) do { ; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#987: FILE: security/integrity/integrity_audit.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#996: FILE: security/integrity/integrity_audit.c:10:
+ * ^IAudit calls for the integrity subsystem$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1010: FILE: security/integrity/integrity_audit.c:24:
+	integrity_audit = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1017: FILE: security/integrity/integrity_audit.c:31:
+__setup("integrity_audit=", integrity_audit_setup);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1027: FILE: security/integrity/integrity_audit.c:41:
+	struct audit_buffer *ab;
+	if (!integrity_audit && result == 1)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1099: FILE: security/integrity/Kconfig:7:
+config INTEGRITY
+	bool "Enable different integrity models"
+	help
+	  This allows you to choose different integrity modules to be
+	  configured into your kernel.
+
+	  If you are unsure how to answer this question, answer N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1169: FILE: fs/namei.c:290:
+	retval =  security_inode_permission(inode, mask, nd);
 	                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1172: FILE: fs/namei.c:293:
+	return integrity_inode_permission(inode, mask, nd);
 	                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1189: FILE: fs/namei.c:494:
+	retval =  security_inode_permission(inode, MAY_EXEC, nd);
 	                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1192: FILE: fs/namei.c:497:
+	return integrity_inode_permission(inode, MAY_EXEC, nd);
 	                                                   ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1223: FILE: security/integrity/integrity_policy.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1232: FILE: security/integrity/integrity_policy.c:10:
+ * ^I- initialize default measure policy rules$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1258: FILE: security/integrity/integrity_policy.c:36:
+};
+static struct list_head measure_default_rules;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rule->func != 0'
#1277: FILE: security/integrity/integrity_policy.c:55:
+	if (result && (rule->func != 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rule->mask != 0'
#1281: FILE: security/integrity/integrity_policy.c:59:
+	if (result && (rule->mask != 0)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1307: FILE: security/integrity/integrity_policy.c:85:
+ * ^I^I^I      and mask$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1348: FILE: security/integrity/integrity_policy.c:126:
+ * ^I^Ia complete policy ruleset.$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277347.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 83 warnings, 46 checks, 1209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277347.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
