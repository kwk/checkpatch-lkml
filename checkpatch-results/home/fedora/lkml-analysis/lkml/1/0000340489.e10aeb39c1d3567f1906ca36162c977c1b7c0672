WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
when implementing the GPIO programming interface.  Platforms can update their

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: drivers/gpio/gpiolib.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/gpio.h> instead of <asm/gpio.h>
#91: FILE: drivers/gpio/gpiolib.c:6:
+#include <asm/gpio.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#93: FILE: drivers/gpio/gpiolib.c:8:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: drivers/gpio/gpiolib.c:21:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#136: FILE: drivers/gpio/gpiolib.c:51:
+};
+static struct gpio_desc gpio_desc[ARCH_NR_GPIOS];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: drivers/gpio/gpiolib.c:75:
+static inline struct gpio_chip *gpio_to_chip(unsigned gpio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#178: FILE: drivers/gpio/gpiolib.c:93:
+	unsigned	id;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gpio_desc[id].chip"
#193: FILE: drivers/gpio/gpiolib.c:108:
+		if (gpio_desc[id].chip != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gpiochip_add', this function's name, in a string
#209: FILE: drivers/gpio/gpiolib.c:124:
+		pr_err("gpiochip_add: gpios %d..%d (%s) not registered\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/gpio/gpiolib.c:125:
+		pr_err("gpiochip_add: gpios %d..%d (%s) not registered\n",
+			chip->base, chip->base + chip->ngpio,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#226: FILE: drivers/gpio/gpiolib.c:141:
+	unsigned	id;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: drivers/gpio/gpiolib.c:161:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#251: FILE: drivers/gpio/gpiolib.c:166:
+int gpio_request(unsigned gpio, const char *label)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc->chip"
#262: FILE: drivers/gpio/gpiolib.c:177:
+	if (desc->chip == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#269: FILE: drivers/gpio/gpiolib.c:184:
+	if (test_and_set_bit(FLAG_REQUESTED, &desc->flags) == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#272: FILE: drivers/gpio/gpiolib.c:187:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gpio_request', this function's name, in a string
#277: FILE: drivers/gpio/gpiolib.c:192:
+		pr_debug("gpio_request: gpio-%d (%s) status %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/gpio/gpiolib.c:193:
+		pr_debug("gpio_request: gpio-%d (%s) status %d\n",
+			gpio, label ? : "?", status);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#284: FILE: drivers/gpio/gpiolib.c:199:
+void gpio_free(unsigned gpio)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: drivers/gpio/gpiolib.c:221:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#320: FILE: drivers/gpio/gpiolib.c:235:
+const char *gpiochip_is_requested(struct gpio_chip *chip, unsigned offset)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#322: FILE: drivers/gpio/gpiolib.c:237:
+	unsigned gpio = chip->base + offset;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#336: FILE: drivers/gpio/gpiolib.c:251:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#346: FILE: drivers/gpio/gpiolib.c:261:
+int gpio_direction_input(unsigned gpio)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/gpio/gpiolib.c:294:
+		pr_debug("%s: gpio-%d status %d\n",
+			__FUNCTION__, gpio, status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#379: FILE: drivers/gpio/gpiolib.c:294:
+			__FUNCTION__, gpio, status);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: drivers/gpio/gpiolib.c:299:
+int gpio_direction_output(unsigned gpio, int value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: drivers/gpio/gpiolib.c:332:
+		pr_debug("%s: gpio-%d status %d\n",
+			__FUNCTION__, gpio, status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#417: FILE: drivers/gpio/gpiolib.c:332:
+			__FUNCTION__, gpio, status);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: drivers/gpio/gpiolib.c:337:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#454: FILE: drivers/gpio/gpiolib.c:369:
+int __gpio_get_value(unsigned gpio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#473: FILE: drivers/gpio/gpiolib.c:388:
+void __gpio_set_value(unsigned gpio, int value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#491: FILE: drivers/gpio/gpiolib.c:406:
+int __gpio_cansleep(unsigned gpio)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#502: FILE: drivers/gpio/gpiolib.c:417:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#508: FILE: drivers/gpio/gpiolib.c:423:
+int gpio_get_value_cansleep(unsigned gpio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#518: FILE: drivers/gpio/gpiolib.c:433:
+void gpio_set_value_cansleep(unsigned gpio, int value)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#528: FILE: drivers/gpio/gpiolib.c:443:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#534: FILE: drivers/gpio/gpiolib.c:449:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#537: FILE: drivers/gpio/gpiolib.c:452:
+	unsigned		i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#538: FILE: drivers/gpio/gpiolib.c:453:
+	unsigned		gpio = chip->base;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: drivers/gpio/gpiolib.c:463:
+		seq_printf(s, " gpio-%-3d (%-12s) %s %s",
+			gpio, gdesc->label,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: drivers/gpio/gpiolib.c:507:
+				seq_printf(s, " irq-%d %s%s",
+					irq, trigger,

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#598: FILE: drivers/gpio/gpiolib.c:513:
+		seq_printf(s, "\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#605: FILE: drivers/gpio/gpiolib.c:520:
+	unsigned		gpio;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: drivers/gpio/gpiolib.c:533:
+		seq_printf(s, "%sGPIOs %d-%d, %s%s:\n",
+				started ? "\n" : "",

WARNING:CONST_STRUCT: struct file_operations should normally be const
#636: FILE: drivers/gpio/gpiolib.c:551:
+static struct file_operations gpiolib_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: No space is necessary after a cast
#646: FILE: drivers/gpio/gpiolib.c:561:
+	(void) debugfs_create_file("gpio", S_IFREG | S_IRUGO,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#646: FILE: drivers/gpio/gpiolib.c:561:
+	(void) debugfs_create_file("gpio", S_IFREG | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'programing' may be misspelled - perhaps 'programming'?
#695: FILE: include/asm-generic/gpio.h:40:
+ * they can all be accessed through a common programing interface.
                                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: include/asm-generic/gpio.h:53:
+	int			(*direction_input)(struct gpio_chip *chip,
+						unsigned offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#708: FILE: include/asm-generic/gpio.h:53:
+						unsigned offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: include/asm-generic/gpio.h:55:
+	int			(*get)(struct gpio_chip *chip,
+						unsigned offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#710: FILE: include/asm-generic/gpio.h:55:
+						unsigned offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: include/asm-generic/gpio.h:57:
+	int			(*direction_output)(struct gpio_chip *chip,
+						unsigned offset, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#712: FILE: include/asm-generic/gpio.h:57:
+						unsigned offset, int value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: include/asm-generic/gpio.h:59:
+	void			(*set)(struct gpio_chip *chip,
+						unsigned offset, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#714: FILE: include/asm-generic/gpio.h:59:
+						unsigned offset, int value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: include/asm-generic/gpio.h:61:
+	void			(*dbg_show)(struct seq_file *s,
+						struct gpio_chip *chip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#722: FILE: include/asm-generic/gpio.h:67:
+extern const char *gpiochip_is_requested(struct gpio_chip *chip,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: include/asm-generic/gpio.h:68:
+extern const char *gpiochip_is_requested(struct gpio_chip *chip,
+			unsigned offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#723: FILE: include/asm-generic/gpio.h:68:
+			unsigned offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#726: FILE: include/asm-generic/gpio.h:71:
+extern int gpiochip_add(struct gpio_chip *chip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/asm-generic/gpio.h:72:
+extern int __must_check gpiochip_remove(struct gpio_chip *chip);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#729: FILE: include/asm-generic/gpio.h:74:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#733: FILE: include/asm-generic/gpio.h:78:
+extern int gpio_request(unsigned gpio, const char *label);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#733: FILE: include/asm-generic/gpio.h:78:
+extern int gpio_request(unsigned gpio, const char *label);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#734: FILE: include/asm-generic/gpio.h:79:
+extern void gpio_free(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#734: FILE: include/asm-generic/gpio.h:79:
+extern void gpio_free(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#736: FILE: include/asm-generic/gpio.h:81:
+extern int gpio_direction_input(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#736: FILE: include/asm-generic/gpio.h:81:
+extern int gpio_direction_input(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#737: FILE: include/asm-generic/gpio.h:82:
+extern int gpio_direction_output(unsigned gpio, int value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#737: FILE: include/asm-generic/gpio.h:82:
+extern int gpio_direction_output(unsigned gpio, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#739: FILE: include/asm-generic/gpio.h:84:
+extern int gpio_get_value_cansleep(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: include/asm-generic/gpio.h:84:
+extern int gpio_get_value_cansleep(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#740: FILE: include/asm-generic/gpio.h:85:
+extern void gpio_set_value_cansleep(unsigned gpio, int value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#740: FILE: include/asm-generic/gpio.h:85:
+extern void gpio_set_value_cansleep(unsigned gpio, int value);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#742: FILE: include/asm-generic/gpio.h:87:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#747: FILE: include/asm-generic/gpio.h:92:
+extern int __gpio_get_value(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#747: FILE: include/asm-generic/gpio.h:92:
+extern int __gpio_get_value(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#748: FILE: include/asm-generic/gpio.h:93:
+extern void __gpio_set_value(unsigned gpio, int value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#748: FILE: include/asm-generic/gpio.h:93:
+extern void __gpio_set_value(unsigned gpio, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#750: FILE: include/asm-generic/gpio.h:95:
+extern int __gpio_cansleep(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#750: FILE: include/asm-generic/gpio.h:95:
+extern int __gpio_cansleep(unsigned gpio);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#752: FILE: include/asm-generic/gpio.h:97:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 42 warnings, 43 checks, 680 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
