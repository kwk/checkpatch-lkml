WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Here is the ACPI GPE statistics patch, forward ported to grok 2.6.25's kobject changes.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# ls /sys/firmware/acpi/interrupts/

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# cat /sys/firmware/acpi/interrupts/summary

WARNING:BAD_SIGN_OFF: Non-standard signature: Inspired-by-original-patch-by:
#86: 
Inspired-by-original-patch-by: Luming Yu <luming.yu@intel.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:BRACES: braces {} should be used on all arms of this statement
#139: FILE: drivers/acpi/osl.c:339:
+	if (handled) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#142: FILE: drivers/acpi/osl.c:342:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#189: FILE: drivers/acpi/system.c:187:
+};
+static struct kobj_attribute *gpe_attrs;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#217: FILE: drivers/acpi/system.c:215:
+{
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#234: FILE: drivers/acpi/system.c:232:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/acpi/system.c:235:
+static ssize_t interrupt_summary_show(struct kobject *kobj,
+	struct kobj_attribute *attribute, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: drivers/acpi/system.c:282:
+static ssize_t interrupt_summary_reset(struct kobject *kobj,
+	struct kobj_attribute *attribute, const char *buf, size_t count)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#300: FILE: drivers/acpi/system.c:298:
+}
+void acpi_os_gpe_count(u32 gpe_number)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#302: FILE: drivers/acpi/system.c:300:
+{
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#312: FILE: drivers/acpi/system.c:310:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#317: FILE: drivers/acpi/system.c:315:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/acpi/system.c:317:
+static ssize_t gpe_count_show(struct kobject *kobj,
+	struct kobj_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: drivers/acpi/system.c:323:
+static ssize_t gpe_count_reset(struct kobject *kobj,
+	struct kobj_attribute *attr, const char *buf, size_t size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: drivers/acpi/system.c:337:
+	all_attrs = kzalloc(sizeof(struct attribute *) * (number_of_gpes + 2),
+			GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!all_attrs"
#340: FILE: drivers/acpi/system.c:338:
+	if (all_attrs == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acpi_gpe_counters"
#344: FILE: drivers/acpi/system.c:342:
+	if (acpi_gpe_counters == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*gpe_attrs)...) over kzalloc(sizeof(struct kobj_attribute)...)
#347: FILE: drivers/acpi/system.c:345:
+	gpe_attrs = kzalloc(sizeof(struct kobj_attribute) * (number_of_gpes),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/acpi/system.c:346:
+	gpe_attrs = kzalloc(sizeof(struct kobj_attribute) * (number_of_gpes),
+			GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gpe_attrs"
#349: FILE: drivers/acpi/system.c:347:
+	if (gpe_attrs == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#358: FILE: drivers/acpi/system.c:356:
+		if (name == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#378: FILE: drivers/acpi/system.c:376:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#387: FILE: drivers/acpi/system.c:385:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 18 checks, 309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
