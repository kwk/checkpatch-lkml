WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#66: FILE: drivers/net/irda/Kconfig:36:
+config BFIN_SIR0
+       bool "Blackfin SIR on UART0"
+       depends on BFIN_SIR && !SERIAL_BFIN_UART0
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#70: FILE: drivers/net/irda/Kconfig:40:
+config BFIN_SIR1
+       bool "Blackfin SIR on UART1"
+       depends on BFIN_SIR && !SERIAL_BFIN_UART1 && (!BF531 && !BF532 && !BF533 && !BF561)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#74: FILE: drivers/net/irda/Kconfig:44:
+config BFIN_SIR2
+       bool "Blackfin SIR on UART2"
+       depends on BFIN_SIR && !SERIAL_BFIN_UART2 && (BF54x || BF538 || BF539)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#78: FILE: drivers/net/irda/Kconfig:48:
+config BFIN_SIR3
+       bool "Blackfin SIR on UART3"
+       depends on BFIN_SIR && !SERIAL_BFIN_UART3 && (BF54x)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#82: FILE: drivers/net/irda/Kconfig:52:
+choice
+       prompt "SIR Mode"
+       depends on BFIN_SIR
+       default SIR_BFIN_DMA
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#87: FILE: drivers/net/irda/Kconfig:57:
+config SIR_BFIN_DMA
+       bool "DMA mode"
+       depends on !DMA_UNCACHED_NONE
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#91: FILE: drivers/net/irda/Kconfig:61:
+config SIR_BFIN_PIO
+       bool "PIO mode"

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#111: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: drivers/net/irda/bfin_sir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#149: FILE: drivers/net/irda/bfin_sir.c:34:
+static void __devinit bfin_sir_init_ports(struct bfin_sir_port *sp, struct platform_device *pdev)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sp->rx_dma_timer
#175: FILE: drivers/net/irda/bfin_sir.c:60:
+	init_timer(&(sp->rx_dma_timer));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#185: FILE: drivers/net/irda/bfin_sir.c:70:
+	while (!(SIR_UART_GET_LSR(port) & THRE)) {
 	                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#225: FILE: drivers/net/irda/bfin_sir.c:110:
+		quot = (port->clk + (8 * speed)) / (16 * speed)\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#264: FILE: drivers/net/irda/bfin_sir.c:149:
+		printk(KERN_WARNING "bfin_sir: Invalid speed %d\n", speed);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->tx_buff.data
#295: FILE: drivers/net/irda/bfin_sir.c:180:
+		chr = *(self->tx_buff.data);

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#347: FILE: drivers/net/irda/bfin_sir.c:232:
+	if (SIR_UART_GET_LSR(port) & THRE)
 	                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/net/irda/bfin_sir.c:264:
+	blackfin_dcache_flush_range((unsigned long)(self->tx_buff.data),
+		(unsigned long)(self->tx_buff.data+self->tx_buff.len));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: drivers/net/irda/bfin_sir.c:264:
+		(unsigned long)(self->tx_buff.data+self->tx_buff.len));
 		                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/net/irda/bfin_sir.c:266:
+	set_dma_config(port->tx_dma_channel,
+		set_bfin_dma_config(DIR_READ, DMA_FLOW_STOP,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: drivers/net/irda/bfin_sir.c:267:
+		set_bfin_dma_config(DIR_READ, DMA_FLOW_STOP,
+			INTR_ON_BUF, DIMENSION_LINEAR, DATA_SIZE_8,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/net/irda/bfin_sir.c:270:
+	set_dma_start_addr(port->tx_dma_channel,
+		(unsigned long)(self->tx_buff.data));

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#503: FILE: drivers/net/irda/bfin_sir.c:388:
+	port->rx_dma_buf.buf = (unsigned char *)dma_alloc_coherent(NULL, PAGE_SIZE, &dma_handle, GFP_DMA);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#503: FILE: drivers/net/irda/bfin_sir.c:388:
+	port->rx_dma_buf.buf = (unsigned char *)dma_alloc_coherent(NULL, PAGE_SIZE, &dma_handle, GFP_DMA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: drivers/net/irda/bfin_sir.c:394:
+	set_dma_config(port->rx_dma_channel,
+				set_bfin_dma_config(DIR_WRITE, DMA_FLOW_AUTO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: drivers/net/irda/bfin_sir.c:395:
+				set_bfin_dma_config(DIR_WRITE, DMA_FLOW_AUTO,
+									INTR_ON_ROW, DIMENSION_2D,

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#511: FILE: drivers/net/irda/bfin_sir.c:396:
+									DATA_SIZE_8, DMA_SYNC_RESTART));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#529: FILE: drivers/net/irda/bfin_sir.c:414:
+	if (request_irq(port->irq+1, bfin_sir_tx_int, IRQF_DISABLED, "BFIN_SIR_TX", dev)) {
 	                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around port->rx_dma_timer
#553: FILE: drivers/net/irda/bfin_sir.c:438:
+	del_timer(&(port->rx_dma_timer));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#556: FILE: drivers/net/irda/bfin_sir.c:441:
+	free_irq(port->irq+1, dev);
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#584: FILE: drivers/net/irda/bfin_sir.c:469:
+}
+static int bfin_sir_resume(struct platform_device *pdev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#743: FILE: drivers/net/irda/bfin_sir.c:628:
+	/*
+	 * Now enable the interrupt then start the queue

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#795: FILE: drivers/net/irda/bfin_sir.c:680:
+static int __devinit bfin_sir_probe(struct platform_device *pdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#853: FILE: drivers/net/irda/bfin_sir.c:738:
+		printk(KERN_WARNING "bfin_sir: Invalid maximum baud rate, using 9600\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#864: FILE: drivers/net/irda/bfin_sir.c:749:
+	if (err) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#874: FILE: drivers/net/irda/bfin_sir.c:759:
+	} else

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#880: FILE: drivers/net/irda/bfin_sir.c:765:
+static int __devexit bfin_sir_remove(struct platform_device *pdev)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#936: FILE: drivers/net/irda/bfin_sir.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#960: FILE: drivers/net/irda/bfin_sir.h:25:
+#include <asm/cacheflush.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#997: FILE: drivers/net/irda/bfin_sir.h:62:
+	spinlock_t              lock;

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1043: FILE: drivers/net/irda/bfin_sir.h:108:
+#define SIR_UART_STOP_TX(port)     do { SIR_UART_PUT_LSR(port, TFI); SIR_UART_CLEAR_IER(port, ETBEI); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#1043: FILE: drivers/net/irda/bfin_sir.h:108:
+#define SIR_UART_STOP_TX(port)     do { SIR_UART_PUT_LSR(port, TFI); SIR_UART_CLEAR_IER(port, ETBEI); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1044: FILE: drivers/net/irda/bfin_sir.h:109:
+#define SIR_UART_ENABLE_TX(port)   do { SIR_UART_SET_IER(port, ETBEI); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1045: FILE: drivers/net/irda/bfin_sir.h:110:
+#define SIR_UART_STOP_RX(port)     do { SIR_UART_CLEAR_IER(port, ERBFI); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1046: FILE: drivers/net/irda/bfin_sir.h:111:
+#define SIR_UART_ENABLE_RX(port)   do { SIR_UART_SET_IER(port, ERBFI); } while (0)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1053: FILE: drivers/net/irda/bfin_sir.h:118:
+#define SIR_UART_SET_DLAB(port)    do { SIR_UART_PUT_LCR(port, SIR_UART_GET_LCR(port) | DLAB); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#1053: FILE: drivers/net/irda/bfin_sir.h:118:
+#define SIR_UART_SET_DLAB(port)    do { SIR_UART_PUT_LCR(port, SIR_UART_GET_LCR(port) | DLAB); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1053: FILE: drivers/net/irda/bfin_sir.h:118:
+#define SIR_UART_SET_DLAB(port)    do { SIR_UART_PUT_LCR(port, SIR_UART_GET_LCR(port) | DLAB); } while (0)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1054: FILE: drivers/net/irda/bfin_sir.h:119:
+#define SIR_UART_CLEAR_DLAB(port)  do { SIR_UART_PUT_LCR(port, SIR_UART_GET_LCR(port) & ~DLAB); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#1054: FILE: drivers/net/irda/bfin_sir.h:119:
+#define SIR_UART_CLEAR_DLAB(port)  do { SIR_UART_PUT_LCR(port, SIR_UART_GET_LCR(port) & ~DLAB); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1054: FILE: drivers/net/irda/bfin_sir.h:119:
+#define SIR_UART_CLEAR_DLAB(port)  do { SIR_UART_PUT_LCR(port, SIR_UART_GET_LCR(port) & ~DLAB); } while (0)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1058: FILE: drivers/net/irda/bfin_sir.h:123:
+#define SIR_UART_STOP_TX(port)     do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) & ~ETBEI); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#1058: FILE: drivers/net/irda/bfin_sir.h:123:
+#define SIR_UART_STOP_TX(port)     do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) & ~ETBEI); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1058: FILE: drivers/net/irda/bfin_sir.h:123:
+#define SIR_UART_STOP_TX(port)     do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) & ~ETBEI); } while (0)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1059: FILE: drivers/net/irda/bfin_sir.h:124:
+#define SIR_UART_ENABLE_TX(port)   do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) | ETBEI); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#1059: FILE: drivers/net/irda/bfin_sir.h:124:
+#define SIR_UART_ENABLE_TX(port)   do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) | ETBEI); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1059: FILE: drivers/net/irda/bfin_sir.h:124:
+#define SIR_UART_ENABLE_TX(port)   do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) | ETBEI); } while (0)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1060: FILE: drivers/net/irda/bfin_sir.h:125:
+#define SIR_UART_STOP_RX(port)     do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) & ~ERBFI); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#1060: FILE: drivers/net/irda/bfin_sir.h:125:
+#define SIR_UART_STOP_RX(port)     do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) & ~ERBFI); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1060: FILE: drivers/net/irda/bfin_sir.h:125:
+#define SIR_UART_STOP_RX(port)     do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) & ~ERBFI); } while (0)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1061: FILE: drivers/net/irda/bfin_sir.h:126:
+#define SIR_UART_ENABLE_RX(port)   do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) | ERBFI); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#1061: FILE: drivers/net/irda/bfin_sir.h:126:
+#define SIR_UART_ENABLE_RX(port)   do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) | ERBFI); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1061: FILE: drivers/net/irda/bfin_sir.h:126:
+#define SIR_UART_ENABLE_RX(port)   do { SIR_UART_PUT_IER(port, SIR_UART_GET_IER(port) | ERBFI); } while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1066: FILE: drivers/net/irda/bfin_sir.h:131:
+	unsigned int lsr = bfin_read16(port->membase + OFFSET_LSR);
+	port->lsr |= (lsr & (BI|FE|PE|OE));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1066: FILE: drivers/net/irda/bfin_sir.h:131:
+	port->lsr |= (lsr & (BI|FE|PE|OE));
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1066: FILE: drivers/net/irda/bfin_sir.h:131:
+	port->lsr |= (lsr & (BI|FE|PE|OE));
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1066: FILE: drivers/net/irda/bfin_sir.h:131:
+	port->lsr |= (lsr & (BI|FE|PE|OE));
 	                             ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156653.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 40 warnings, 26 checks, 1019 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156653.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
