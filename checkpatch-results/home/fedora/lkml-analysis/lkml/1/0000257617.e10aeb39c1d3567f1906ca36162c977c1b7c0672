WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#68: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: arch/microblaze/kernel/init_task.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#87: FILE: arch/microblaze/kernel/init_task.c:15:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init_task") over __attribute__((__section__(".data.init_task")))
#96: FILE: arch/microblaze/kernel/init_task.c:24:
+	__attribute__((__section__(".data.init_task"))) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#97: FILE: arch/microblaze/kernel/init_task.c:25:
+	__attribute__((__section__(".data.init_task"))) =
+{ INIT_THREAD_INFO(init_task) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: arch/microblaze/kernel/process.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#120: FILE: arch/microblaze/kernel/process.c:14:
+#include <asm/bitops.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: arch/microblaze/kernel/process.c:25:
+	int i;
+	printk(KERN_INFO "pc:\t0x%08lx\tsp:\t0x%08lx\n", regs->pc, regs->r1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#131: FILE: arch/microblaze/kernel/process.c:25:
+	printk(KERN_INFO "pc:\t0x%08lx\tsp:\t0x%08lx\n", regs->pc, regs->r1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#132: FILE: arch/microblaze/kernel/process.c:26:
+	printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#136: FILE: arch/microblaze/kernel/process.c:30:
+	printk(KERN_INFO

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->r4
#139: FILE: arch/microblaze/kernel/process.c:33:
+	for (i = 4, p = &(regs->r4); i < 32; i += 4, p += 4) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#140: FILE: arch/microblaze/kernel/process.c:34:
+		printk(KERN_INFO "r%i:\t0x%08lx\tr%i:\t0x%08lx\tr%i:\t"

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: arch/microblaze/kernel/process.c:36:
+			i, *p, i+1, *(p+1), i+2, *(p+2), i+3, *(p+3));
 			        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: arch/microblaze/kernel/process.c:36:
+			i, *p, i+1, *(p+1), i+2, *(p+2), i+3, *(p+3));
 			               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: arch/microblaze/kernel/process.c:36:
+			i, *p, i+1, *(p+1), i+2, *(p+2), i+3, *(p+3));
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: arch/microblaze/kernel/process.c:36:
+			i, *p, i+1, *(p+1), i+2, *(p+2), i+3, *(p+3));
 			                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: arch/microblaze/kernel/process.c:36:
+			i, *p, i+1, *(p+1), i+2, *(p+2), i+3, *(p+3));
 			                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: arch/microblaze/kernel/process.c:36:
+			i, *p, i+1, *(p+1), i+2, *(p+2), i+3, *(p+3));
 			                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#144: FILE: arch/microblaze/kernel/process.c:38:
+	printk(KERN_INFO "\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#168: FILE: arch/microblaze/kernel/process.c:62:
+__setup("nohlt", nohlt_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#175: FILE: arch/microblaze/kernel/process.c:69:
+__setup("hlt", hlt_setup);

CHECK:BRACES: Unbalanced braces around else statement
#187: FILE: arch/microblaze/kernel/process.c:81:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#231: FILE: arch/microblaze/kernel/process.c:125:
+		childregs->r1 = ((unsigned long) ti) + THREAD_SIZE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: arch/microblaze/kernel/process.c:174:
+	ret = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0,
+			&regs, 0, NULL, NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 14 checks, 211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
