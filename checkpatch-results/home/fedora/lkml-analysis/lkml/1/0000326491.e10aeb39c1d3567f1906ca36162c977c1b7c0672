WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
 include/asm-s390/bitops.h               |  558 ++++++++++++++----------------

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#179: FILE: arch/s390/Kconfig.debug:9:
+config DEBUG_PAGEALLOC
+	bool "Debug page memory allocations"
+	depends on DEBUG_KERNEL
+	help
+	  Unmap pages from the kernel linear mapping after free_pages().
+	  This results in a slowdown, but helps to find certain types of
+	  memory corruptions.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#419: FILE: arch/s390/kernel/smp.c:1010:
+static int __devinit smp_add_present_cpu(int cpu)

CHECK:SPACING: No space is necessary after a cast
#490: FILE: arch/s390/kernel/stacktrace.c:90:
+	low = (unsigned long) task_stack_page(tsk);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#491: FILE: arch/s390/kernel/stacktrace.c:91:
+	high = (unsigned long) task_pt_regs(tsk);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#505: FILE: arch/s390/kernel/traps.c:274:
+	printk("SMP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#508: FILE: arch/s390/kernel/traps.c:277:
+	printk("DEBUG_PAGEALLOC");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sense[25] == 0x1D'
#657: FILE: drivers/s390/block/dasd_3990_erp.c:304:
+		if (sense && (sense[25] == 0x1D)) { /* state change pending */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#677: FILE: drivers/s390/block/dasd_3990_erp.c:2125:
+ *   Does a generic inspection if a control check occured and sets up
                                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cqr1->irb.esw.esw0.erw.cons == 0'
#725: FILE: drivers/s390/block/dasd_3990_erp.c:2321:
+	if ((cqr1->irb.esw.esw0.erw.cons == 0) &&
+	    (cqr2->irb.esw.esw0.erw.cons == 0))	{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cqr2->irb.esw.esw0.erw.cons == 0'
#725: FILE: drivers/s390/block/dasd_3990_erp.c:2321:
+	if ((cqr1->irb.esw.esw0.erw.cons == 0) &&
+	    (cqr2->irb.esw.esw0.erw.cons == 0))	{

ERROR:IN_ATOMIC: do not use in_atomic in drivers
#786: FILE: drivers/s390/char/sclp_tty.c:335:
+				if (in_atomic())

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

ERROR:IN_ATOMIC: do not use in_atomic in drivers
#799: FILE: drivers/s390/char/sclp_vt220.c:403:
+				if (in_atomic())

CHECK:BRACES: Unbalanced braces around else statement
#1057: FILE: drivers/s390/cio/chsc.c:1031:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ccode == 0'
#1127: FILE: drivers/s390/cio/device_id.c:101:
+	if ((ccode == 0) || (ccode == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ccode == 2'
#1127: FILE: drivers/s390/cio/device_id.c:101:
+	if ((ccode == 0) || (ccode == 2)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1149: FILE: drivers/s390/cio/device_id.c:111:
+		ps->cu_type = vm_vdev_to_cu_type(diag_data.vrdcvcla,
+						diag_data.vrdcvtyp);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1267: FILE: include/asm-s390/bitops.h:454:
+	typedef struct { long _[__BITOPS_WORDS(size)]; } addrtype;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1270: FILE: include/asm-s390/bitops.h:457:
+	asm volatile(

CHECK:SPACING: No space is necessary after a cast
#1289: FILE: include/asm-s390/bitops.h:476:
+		: "d" (-1UL), "a" (addr), "m" (*(addrtype *) addr)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1290: FILE: include/asm-s390/bitops.h:477:
+		: "cc" );

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1302: FILE: include/asm-s390/bitops.h:489:
+	typedef struct { long _[__BITOPS_WORDS(size)]; } addrtype;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1305: FILE: include/asm-s390/bitops.h:492:
+	asm volatile(

CHECK:SPACING: No space is necessary after a cast
#1324: FILE: include/asm-s390/bitops.h:511:
+		: "d" (0UL), "a" (addr), "m" (*(addrtype *) addr)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1325: FILE: include/asm-s390/bitops.h:512:
+		: "cc" );

CHECK:SPACING: No space is necessary after a cast
#1354: FILE: include/asm-s390/bitops.h:537:
+	return nr + _zb_findmap[(unsigned char) word];

CHECK:SPACING: No space is necessary after a cast
#1388: FILE: include/asm-s390/bitops.h:561:
+	return nr + _sb_findmap[(unsigned char) word];

CHECK:SPACING: No space is necessary after a cast
#1404: FILE: include/asm-s390/bitops.h:573:
+	p = (unsigned long *)((unsigned long) p + offset);

CHECK:SPACING: No space is necessary after a cast
#1425: FILE: include/asm-s390/bitops.h:587:
+	p = (unsigned long *)((unsigned long) p + offset);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1464: FILE: include/asm-s390/bitops.h:596:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1466: FILE: include/asm-s390/bitops.h:598:
+		: "=d" (word) : "m" (*p) );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1530: FILE: include/asm-s390/bitops.h:624:
+static inline unsigned long __ffs (unsigned long word)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1610: FILE: include/asm-s390/bitops.h:660:
+	bits = __ffz_word(bytes*8, __load_ulong_be(addr, bytes));
 	                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1622: FILE: include/asm-s390/bitops.h:672:
+static inline unsigned long find_first_bit(const unsigned long * addr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1667: FILE: include/asm-s390/bitops.h:680:
+	bits = __ffs_word(bytes*8, __load_ulong_be(addr, bytes));
 	                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1682: FILE: include/asm-s390/bitops.h:690:
+static inline int find_next_zero_bit (const unsigned long * addr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1682: FILE: include/asm-s390/bitops.h:690:
+static inline int find_next_zero_bit (const unsigned long * addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1714: FILE: include/asm-s390/bitops.h:726:
+static inline int find_next_bit (const unsigned long * addr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1714: FILE: include/asm-s390/bitops.h:726:
+static inline int find_next_bit (const unsigned long * addr,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1795: FILE: include/asm-s390/bitops.h:801:
+	bits = __ffz_word(bytes*8, __load_ulong_le(vaddr, bytes));
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1896: FILE: include/asm-s390/bitops.h:842:
+	bits = __ffs_word(bytes*8, __load_ulong_le(vaddr, bytes));
 	                       ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccwgroup_device *' should also have an identifier name
#1961: FILE: include/asm-s390/ccwgroup.h:53:
+	void (*shutdown)(struct ccwgroup_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 12 warnings, 22 checks, 1718 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
