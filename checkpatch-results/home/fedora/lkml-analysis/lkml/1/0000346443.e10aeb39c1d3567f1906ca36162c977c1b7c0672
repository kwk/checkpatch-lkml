WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
> FYI, we are currently discussing and testing this proposed patch to e2fsprogs off-list in Red Hat's bugzilla:

WARNING:TYPO_SPELLING: 'publically' may be misspelled - perhaps 'publicly'?
#42: 
Note that this bug is currently not publically visible.  (You need to
                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '740837def7fc55ba6b0368f46a4b4abcaba0becd', maybe rebased or not pulled?
#63: 
commit 740837def7fc55ba6b0368f46a4b4abcaba0becd

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#78: 
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#301: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#307: FILE: debian/libuuid1.postinst:2:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#321: FILE: debian/libuuid1.postrm:2:
+set -e

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#401: FILE: debian/uuid-runtime.postinst:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#416: FILE: debian/uuid-runtime.postrm:2:
+set -e

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#429: FILE: debian/uuid-runtime.prerm:2:
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#473: FILE: lib/uuid/gen_uuid.c:87:
+#define THREAD_LOCAL static TLS

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#490: FILE: lib/uuid/gen_uuid.c:259:
+static int get_clock(uint32_t *clock_high, uint32_t *clock_low,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#491: FILE: lib/uuid/gen_uuid.c:260:
+		     uint16_t *ret_clock_seq, int *num)

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: lib/uuid/gen_uuid.c:266:
+	THREAD_LOCAL FILE		*state_f;
+	THREAD_LOCAL uint16_t		clock_seq;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#500: FILE: lib/uuid/gen_uuid.c:266:
+	THREAD_LOCAL uint16_t		clock_seq;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#511: FILE: lib/uuid/gen_uuid.c:274:
+				O_RDWR|O_CREAT, 0660);
 				      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#512: FILE: lib/uuid/gen_uuid.c:275:
+		(void) umask(save_umask);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#522: FILE: lib/uuid/gen_uuid.c:285:
+			if ((errno == EAGAIN) || (errno == EINTR))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#522: FILE: lib/uuid/gen_uuid.c:285:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#593: FILE: lib/uuid/gen_uuid.c:368:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#593: FILE: lib/uuid/gen_uuid.c:368:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#604: FILE: lib/uuid/gen_uuid.c:379:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#616: FILE: lib/uuid/gen_uuid.c:391:
+	int32_t reply_len = 0, expected = 16;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#621: FILE: lib/uuid/gen_uuid.c:396:
+	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#627: FILE: lib/uuid/gen_uuid.c:402:
+	if (connect(s, (const struct sockaddr *) &srv_addr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#631: FILE: lib/uuid/gen_uuid.c:406:
+		if (access_ret == 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#637: FILE: lib/uuid/gen_uuid.c:412:
+			if (connect(s, (const struct sockaddr *) &srv_addr,

CHECK:BRACES: Unbalanced braces around else statement
#640: FILE: lib/uuid/gen_uuid.c:415:
+		} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#646: FILE: lib/uuid/gen_uuid.c:421:
+		memcpy(op_buf+1, num, sizeof(num));
 		             ^

CHECK:SPACING: No space is necessary after a cast
#655: FILE: lib/uuid/gen_uuid.c:430:
+	ret = read_all(s, (char *) &reply_len, sizeof(reply_len));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#665: FILE: lib/uuid/gen_uuid.c:440:
+		memcpy(op_buf+16, num, sizeof(int));
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#705: FILE: lib/uuid/gen_uuid.c:489:
+		if (now > last_time+1)
 		                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#738: FILE: lib/uuid/gen_uuid.c:522:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#775: FILE: lib/uuid/gen_uuid.c:554:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#785: FILE: lib/uuid/uuidd.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: lib/uuid/uuidd.h:50:
+extern void uuid__generate_time(uuid_t out, int *num);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: lib/uuid/uuidd.h:51:
+extern void uuid__generate_random(uuid_t out, int *num);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1006: FILE: misc/uuidd.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1034: FILE: misc/uuidd.c:29:
+extern char *optarg;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1035: FILE: misc/uuidd.c:30:
+extern int optind;

WARNING:SPLIT_STRING: quoted string split across lines
#1050: FILE: misc/uuidd.c:45:
+	fprintf(stderr, _("Usage: %s [-d] [-p pidfile] [-s socketpath] "
+			  "[-T timeout]\n"), progname);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1067: FILE: misc/uuidd.c:62:
+	} else if (pid != 0) {
+	    exit(0);

CHECK:SPACING: No space is necessary after a cast
#1079: FILE: misc/uuidd.c:74:
+	(void) setsid();

CHECK:SPACING: No space is necessary after a cast
#1081: FILE: misc/uuidd.c:76:
+	(void) setreuid(euid, euid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#1099: FILE: misc/uuidd.c:94:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#1099: FILE: misc/uuidd.c:94:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:SPACING: No space is necessary after a cast
#1114: FILE: misc/uuidd.c:109:
+	(void) unlink(cleanup_pidfile);

CHECK:SPACING: No space is necessary after a cast
#1115: FILE: misc/uuidd.c:110:
+	(void) unlink(cleanup_socket);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1126: FILE: misc/uuidd.c:121:
+	int32_t			reply_len = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1132: FILE: misc/uuidd.c:127:
+	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {

WARNING:SPLIT_STRING: quoted string split across lines
#1135: FILE: misc/uuidd.c:130:
+			fprintf(stderr, _("Couldn't create unix stream "
+					  "socket: %s"), strerror(errno));

CHECK:SPACING: No space is necessary after a cast
#1144: FILE: misc/uuidd.c:139:
+	(void) unlink(socket_path);

CHECK:SPACING: No space is necessary after a cast
#1146: FILE: misc/uuidd.c:141:
+	if (bind(s, (const struct sockaddr *) &my_addr,

CHECK:SPACING: No space is necessary after a cast
#1154: FILE: misc/uuidd.c:149:
+	(void) umask(save_umask);

WARNING:SPLIT_STRING: quoted string split across lines
#1159: FILE: misc/uuidd.c:154:
+			fprintf(stderr, _("Couldn't listen on unix "
+					  "socket %s: %s\n"), socket_path,

CHECK:SPACING: No space is necessary after a cast
#1180: FILE: misc/uuidd.c:175:
+		ns = accept(s, (struct sockaddr *) &from_addr, &fromlen);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#1183: FILE: misc/uuidd.c:178:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#1183: FILE: misc/uuidd.c:178:
+			if ((errno == EAGAIN) || (errno == EINTR))

WARNING:SPLIT_STRING: quoted string split across lines
#1194: FILE: misc/uuidd.c:189:
+				printf(_("Error reading from client, "
+					 "len = %d\n"), len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 4'
#1197: FILE: misc/uuidd.c:192:
+		if ((op == 4) || (op == 5)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 5'
#1197: FILE: misc/uuidd.c:192:
+		if ((op == 4) || (op == 5)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1197: FILE: misc/uuidd.c:192:
+		if ((op == 4) || (op == 5)) {
[...]
+		} else if (debug)
[...]

CHECK:SPACING: No space is necessary after a cast
#1198: FILE: misc/uuidd.c:193:
+			if (read_all(ns, (char *) &num, sizeof(num)) != 4)

ERROR:SPACING: space required before the open parenthesis '('
#1206: FILE: misc/uuidd.c:201:
+		switch(op) {

CHECK:SPACING: No space is necessary after a cast
#1208: FILE: misc/uuidd.c:203:
+			sprintf((char *) reply_buf, "%d", getpid());

CHECK:SPACING: No space is necessary after a cast
#1209: FILE: misc/uuidd.c:204:
+			reply_len = strlen((char *) reply_buf)+1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1209: FILE: misc/uuidd.c:204:
+			reply_len = strlen((char *) reply_buf)+1;
 			                                      ^

CHECK:SPACING: No space is necessary after a cast
#1212: FILE: misc/uuidd.c:207:
+			sprintf((char *) reply_buf, "%d", UUIDD_MAX_OP);

CHECK:SPACING: No space is necessary after a cast
#1213: FILE: misc/uuidd.c:208:
+			reply_len = strlen((char *) reply_buf)+1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1213: FILE: misc/uuidd.c:208:
+			reply_len = strlen((char *) reply_buf)+1;
 			                                      ^

WARNING:SPLIT_STRING: quoted string split across lines
#1240: FILE: misc/uuidd.c:235:
+				printf(_("Generated time UUID %s and %d "
+					 "following\n"), str, num);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1244: FILE: misc/uuidd.c:239:
+			memcpy(reply_buf+reply_len, &num, sizeof(num));
 			                ^

CHECK:SPACING: No space is necessary after a cast
#1252: FILE: misc/uuidd.c:247:
+			if (num*16 > (int) (sizeof(reply_buf)-sizeof(num)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1252: FILE: misc/uuidd.c:247:
+			if (num*16 > (int) (sizeof(reply_buf)-sizeof(num)))
 			       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1252: FILE: misc/uuidd.c:247:
+			if (num*16 > (int) (sizeof(reply_buf)-sizeof(num)))
 			                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1253: FILE: misc/uuidd.c:248:
+				num = (sizeof(reply_buf)-sizeof(num)) / 16;
 				                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1254: FILE: misc/uuidd.c:249:
+			uuid__generate_random(reply_buf+sizeof(num), &num);
 			                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1257: FILE: misc/uuidd.c:252:
+				for (i=0, cp=reply_buf+sizeof(num);
 				      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1257: FILE: misc/uuidd.c:252:
+				for (i=0, cp=reply_buf+sizeof(num);
 				            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1257: FILE: misc/uuidd.c:252:
+				for (i=0, cp=reply_buf+sizeof(num);
 				                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1258: FILE: misc/uuidd.c:253:
+				     i < num; i++, cp+=16) {
 				                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1263: FILE: misc/uuidd.c:258:
+			reply_len = (num*16) + sizeof(num);
 			                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1273: FILE: misc/uuidd.c:268:
+	shutdown_socket:

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1285: FILE: misc/uuidd.c:280:
+	int32_t reply_len = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 4'
#1288: FILE: misc/uuidd.c:283:
+	if (((op == 4) || (op == 5)) && !num) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 5'
#1288: FILE: misc/uuidd.c:283:
+	if (((op == 4) || (op == 5)) && !num) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1295: FILE: misc/uuidd.c:290:
+	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {

CHECK:SPACING: No space is necessary after a cast
#1304: FILE: misc/uuidd.c:299:
+	if (connect(s, (const struct sockaddr *) &srv_addr,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1313: FILE: misc/uuidd.c:308:
+		if ((*num)*16 > buflen-4)
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1313: FILE: misc/uuidd.c:308:
+		if ((*num)*16 > buflen-4)
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1314: FILE: misc/uuidd.c:309:
+			*num = (buflen-4) / 16;
 			              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 4'
#1318: FILE: misc/uuidd.c:313:
+	if ((op == 4) || (op == 5)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 5'
#1318: FILE: misc/uuidd.c:313:
+	if ((op == 4) || (op == 5)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1319: FILE: misc/uuidd.c:314:
+		memcpy(op_buf+1, num, sizeof(int));
 		             ^

CHECK:SPACING: No space is necessary after a cast
#1331: FILE: misc/uuidd.c:326:
+	ret = read_all(s, (char *) &reply_len, sizeof(reply_len));

CHECK:SPACING: No space is necessary after a cast
#1344: FILE: misc/uuidd.c:339:
+	ret = read_all(s, (char *) buf, reply_len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret > 0'
#1346: FILE: misc/uuidd.c:341:
+	if ((ret > 0) && (op == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 4'
#1346: FILE: misc/uuidd.c:341:
+	if ((ret > 0) && (op == 4)) {

CHECK:SPACING: No space is necessary after a cast
#1347: FILE: misc/uuidd.c:342:
+		if (reply_len >= (int) (16+sizeof(int)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1347: FILE: misc/uuidd.c:342:
+		if (reply_len >= (int) (16+sizeof(int)))
 		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1348: FILE: misc/uuidd.c:343:
+			memcpy(buf+16, num, sizeof(int));
 			          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret > 0'
#1352: FILE: misc/uuidd.c:347:
+	if ((ret > 0) && (op == 5)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == 5'
#1352: FILE: misc/uuidd.c:347:
+	if ((ret > 0) && (op == 5)) {

CHECK:SPACING: No space is necessary after a cast
#1353: FILE: misc/uuidd.c:348:
+		if (*num >= (int) sizeof(int))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1364: FILE: misc/uuidd.c:359:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1371: FILE: misc/uuidd.c:366:
+^Ichar   ^I^Istr[37], *tmp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1374: FILE: misc/uuidd.c:369:
+^Igid_t ^I^Igid;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1386: FILE: misc/uuidd.c:381:
+	while ((c = getopt (argc, argv, "dkn:qp:s:tT:r")) != EOF) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num < 0'
#1398: FILE: misc/uuidd.c:393:
+			if ((num < 0) || *tmp) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timeout < 0'
#1419: FILE: misc/uuidd.c:414:
+			if ((timeout < 0) || *tmp) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1447: FILE: misc/uuidd.c:442:
+		ret = call_daemon(socket_path, do_type+2, buf,
 		                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1464: FILE: misc/uuidd.c:459:
+			if (ret != sizeof(num) + num*sizeof(uu))
 			                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1466: FILE: misc/uuidd.c:461:
+			for (i=0; i < num; i++, cp+=16) {
 			      ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1466: FILE: misc/uuidd.c:461:
+			for (i=0; i < num; i++, cp+=16) {
 			                          ^

CHECK:SPACING: No space is necessary after a cast
#1474: FILE: misc/uuidd.c:469:
+		ret = call_daemon(socket_path, do_type, (unsigned char *) &uu,

WARNING:INDENTED_LABEL: labels should not be indented
#1482: FILE: misc/uuidd.c:477:
+		unexpected_size:

CHECK:SPACING: No space is necessary after a cast
#1498: FILE: misc/uuidd.c:493:
+		if (do_kill && ((do_kill = atoi((char *) buf)) > 0)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1498: FILE: misc/uuidd.c:493:
+		if (do_kill && ((do_kill = atoi((char *) buf)) > 0)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1504: FILE: misc/uuidd.c:499:
+						_("Couldn't kill uuidd running "
+						  "at pid %d: %s\n"), do_kill,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#1531: FILE: misc/uuidd.rc:2:
+### BEGIN INIT INFO

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 28 warnings, 81 checks, 1381 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
