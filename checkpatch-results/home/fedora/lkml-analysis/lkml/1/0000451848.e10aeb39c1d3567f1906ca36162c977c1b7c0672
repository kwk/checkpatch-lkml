WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
A novel design which incorporates a foreground-background descending priority

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#127: 
and the allocation of slots is dependant on nice level. In the
                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#364: FILE: kernel/sched.c:87:
+#define SCHED_PRIO(p)		((p)+MAX_RT_PRIO)
                      		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#623: FILE: kernel/sched.c:667:
+	return SCHED_PRIO(find_first_zero_bit(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#660: FILE: kernel/sched.c:700:
+	p->prio = p->normal_prio = first_prio_slot(p);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: kernel/sched.c:711:
+ static inline void update_if_moved(struct task_struct *p, struct rq *rq)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#714: FILE: kernel/sched.c:749:
+	if (p->rotation == rq->prio_rotation) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#715: FILE: kernel/sched.c:750:
+		if (p->array == array) {
[...]
+		} else if (p->array == rq->expired) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#722: FILE: kernel/sched.c:757:
+			return;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#722: FILE: kernel/sched.c:757:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#724: FILE: kernel/sched.c:759:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#732: FILE: kernel/sched.c:767:
+	p->prio = p->normal_prio = queue_prio;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#814: FILE: kernel/sched.c:833:
+	slice = rr = p->quota;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#880: FILE: kernel/sched.c:915:
+		return MAX_RT_PRIO-1 - p->rt_priority;
 		                  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1000: FILE: kernel/sched.c:954:
+		if (nice < -6) {
[...]
+		} else if (nice > 0 && (rr * HZ / 1000 / 2) > 0)
[...]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1102: FILE: kernel/sched.c:1386:
+#define rq_idle(rq)	((rq)->curr == (rq)->idle && !rt_task((rq)->curr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1104: FILE: kernel/sched.c:1388:
+#define rq_idle(rq)	((rq)->curr == (rq)->idle)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1112: FILE: kernel/sched.c:1396:
+	return ((p->array == task_rq(p)->active &&
+		TASK_PREEMPTS_CURR(p, curr)) || rq_idle(rq));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1726: FILE: kernel/sched.c:3287:
+	if (!rt_prio(idx))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1728: FILE: kernel/sched.c:3289:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1772: FILE: kernel/sched.c:3750:
+	if ((queued = task_queued(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#1795: FILE: kernel/sched.c:3764:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1806: FILE: kernel/sched.c:3774:
+	int queued, old_prio,delta;
 	                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1817: FILE: kernel/sched.c:3795:
+	if ((queued = task_queued(p))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1855: FILE: kernel/sched.c:3931:
+	BUG_ON(task_queued(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1886: FILE: kernel/sched.c:4026:
+	if ((queued = task_queued(p)))

CHECK:BRACES: Unbalanced braces around else statement
#1901: FILE: kernel/sched.c:4040:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1932: FILE: kernel/sched.c:4324:
+	if (rq->nr_running == 1)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1934: FILE: kernel/sched.c:4326:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1970: FILE: kernel/sched.c:4674:
+	idle->timestamp = idle->last_ran = sched_clock();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1972: FILE: kernel/sched.c:4676:
+	idle->prio = idle->normal_prio = NICE_TO_PRIO(0);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2013: FILE: kernel/sched.c:6632:
+			bitmap_zero(prio_matrix[i] , PRIO_RANGE);
 			                           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2054: FILE: kernel/sched.c:6679:
 		for (j = 0; j < 2; j++) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2094: FILE: kernel/sched.c:6760:
+		if ((queued = task_queued(p)))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2140: FILE: kernel/sysctl.c:79:
+extern int rr_interval;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2149: FILE: kernel/sysctl.c:164:
+/* Constants for minimum and maximum testing in vm_table.
+   We use these as one-element integer vectors. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2149: FILE: kernel/sysctl.c:164:
+   We use these as one-element integer vectors. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2154: FILE: kernel/sysctl.c:169:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2166: FILE: kernel/sysctl.c:514:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'one', consider using the shared one in include/linux/sysctl.h
#2170: FILE: kernel/sysctl.c:518:
+		.extra1		= &one,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000451848.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 10 warnings, 24 checks, 1838 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000451848.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
