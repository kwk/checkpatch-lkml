WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/wbr_policy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <AuCpdown_PARENT_OPQ>
#87: FILE: fs/aufs/wbr_policy.c:44:
+#define AuCpdown_PARENT_OPQ	1

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuCpdown_WHED>
#88: FILE: fs/aufs/wbr_policy.c:45:
+#define AuCpdown_WHED		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#88: FILE: fs/aufs/wbr_policy.c:45:
+#define AuCpdown_WHED		(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuCpdown_MADE_DIR>
#89: FILE: fs/aufs/wbr_policy.c:46:
+#define AuCpdown_MADE_DIR	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#89: FILE: fs/aufs/wbr_policy.c:46:
+#define AuCpdown_MADE_DIR	(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuCpdown_DIROPQ>
#90: FILE: fs/aufs/wbr_policy.c:47:
+#define AuCpdown_DIROPQ		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#90: FILE: fs/aufs/wbr_policy.c:47:
+#define AuCpdown_DIROPQ		(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <AuCpdown_##name>
#91: FILE: fs/aufs/wbr_policy.c:48:
+#define au_ftest_cpdown(flags, name)	((flags) & AuCpdown_##name)

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#158: FILE: fs/aufs/wbr_policy.c:115:
+	AuDebugOn(h_dir != au_h_iptr(dir, bdst));

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#159: FILE: fs/aufs/wbr_policy.c:116:
+	IMustLock(h_dir);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#167: FILE: fs/aufs/wbr_policy.c:124:
+			      S_IRWXU | S_IRUGO | S_IXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#181: FILE: fs/aufs/wbr_policy.c:138:
+	parent_opq = (au_ftest_cpdown(args->flags, PARENT_OPQ)
+		      && args->parent == dentry);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#183: FILE: fs/aufs/wbr_policy.c:140:
+	mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#217: FILE: fs/aufs/wbr_policy.c:174:
+			AuIOErr("failed removing diropq for %.*s b%d (%d)\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#218: FILE: fs/aufs/wbr_policy.c:175:
+				AuDLNPair(dentry), bdst, rerr);

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#300: FILE: fs/aufs/wbr_policy.c:257:
+	AuDbg("b%d\n", err);

CHECK:BRACES: braces {} should be used on all arms of this statement
#367: FILE: fs/aufs/wbr_policy.c:324:
+		if (!isdir) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#372: FILE: fs/aufs/wbr_policy.c:329:
+		} else

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn1>
#404: FILE: fs/aufs/wbr_policy.c:361:
+		AuWarn1("failed updating mfs(%d), ignored\n", -ENOMEM);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#428: FILE: fs/aufs/wbr_policy.c:385:
+		BUILD_BUG_ON(sizeof(b) < sizeof(st->f_bavail)
+			     || sizeof(b) < sizeof(st->f_bsize));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#457: FILE: fs/aufs/wbr_policy.c:414:
+	if (time_after(jiffies, mfs->mfs_jiffy + mfs->mfs_expire)
+	    || mfs->mfs_bindex < 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#458: FILE: fs/aufs/wbr_policy.c:415:
+	    || mfs->mfs_bindex < 0
+	    || au_br_rdonly(au_sbr(sb, mfs->mfs_bindex)))

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_TDP>
#622: FILE: fs/aufs/wbr_policy.c:579:
+	[AuWbrCopyup_TDP] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BUP>
#625: FILE: fs/aufs/wbr_policy.c:582:
+	[AuWbrCopyup_BUP] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BU>
#628: FILE: fs/aufs/wbr_policy.c:585:
+	[AuWbrCopyup_BU] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_TDP>
#634: FILE: fs/aufs/wbr_policy.c:591:
+	[AuWbrCreate_TDP] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_RR>
#637: FILE: fs/aufs/wbr_policy.c:594:
+	[AuWbrCreate_RR] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFS>
#641: FILE: fs/aufs/wbr_policy.c:598:
+	[AuWbrCreate_MFS] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSV>
#646: FILE: fs/aufs/wbr_policy.c:603:
+	[AuWbrCreate_MFSV] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRR>
#651: FILE: fs/aufs/wbr_policy.c:608:
+	[AuWbrCreate_MFSRR] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRRV>
#656: FILE: fs/aufs/wbr_policy.c:613:
+	[AuWbrCreate_MFSRRV] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFS>
#661: FILE: fs/aufs/wbr_policy.c:618:
+	[AuWbrCreate_PMFS] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFSV>
#666: FILE: fs/aufs/wbr_policy.c:623:
+	[AuWbrCreate_PMFSV] = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154201.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 32 checks, 628 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154201.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
