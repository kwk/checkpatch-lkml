WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#74: 
  - Revert use of 'pr_fmt' to avoid tainting whom includes us (Nathan Lynch)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#147: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: checkpoint/checkpoint.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#262: FILE: checkpoint/checkpoint.c:111:
+		printk(KERN_NOTICE "c/r: error string truncated: ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#318: FILE: checkpoint/checkpoint.c:167:
+		printk(KERN_NOTICE "c/r: error string unsaved (%d): %s\n",

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#358: FILE: checkpoint/checkpoint.c:207:
+	h->major = (LINUX_VERSION_CODE >> 16) & 0xff;

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#359: FILE: checkpoint/checkpoint.c:208:
+	h->minor = (LINUX_VERSION_CODE >> 8) & 0xff;

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#360: FILE: checkpoint/checkpoint.c:209:
+	h->patch = (LINUX_VERSION_CODE) & 0xff;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#430: FILE: checkpoint/process.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#535: FILE: checkpoint/restart.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: checkpoint/restart.c:33:
+static int _ckpt_read_obj(struct ckpt_ctx *ctx, struct ckpt_hdr *h,
+			void *ptr, int len, int max)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#601: FILE: checkpoint/restart.c:67:
+	BUG_ON(!len);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#646: FILE: checkpoint/restart.c:112:
+	BUG_ON(!len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#662: FILE: checkpoint/restart.c:128:
+	BUG_ON(!len);

CHECK:SPACING: No space is necessary after a cast
#668: FILE: checkpoint/restart.c:134:
+		((char *) ptr)[len - 1] = '\0';	/* always play it safe */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#725: FILE: checkpoint/restart.c:191:
+	BUG_ON(!len);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#804: FILE: checkpoint/restart.c:270:
+	    h->major != ((LINUX_VERSION_CODE >> 16) & 0xff) ||

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#805: FILE: checkpoint/restart.c:271:
+	    h->minor != ((LINUX_VERSION_CODE >> 8) & 0xff) ||

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#806: FILE: checkpoint/restart.c:272:
+	    h->patch != ((LINUX_VERSION_CODE) & 0xff))

CHECK:SPACING: No space is necessary after a cast
#898: FILE: checkpoint/sys.c:33:
+	void __user *uaddr = (__force void __user *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#904: FILE: checkpoint/sys.c:39:
+		loff_t pos = file_pos_read(file);
+		nwrite = vfs_write(file, uaddr, nleft, &pos);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#933: FILE: checkpoint/sys.c:68:
+	void __user *uaddr = (__force void __user *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#939: FILE: checkpoint/sys.c:74:
+		loff_t pos = file_pos_read(file);
+		nread = vfs_read(file, uaddr, nleft, &pos);

CHECK:BRACES: braces {} should be used on all arms of this statement
#942: FILE: checkpoint/sys.c:77:
+			if (nread == -EAGAIN) {
[...]
+			} else if (nread == 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'unexecpted' may be misspelled - perhaps 'unexpected'?
#946: FILE: checkpoint/sys.c:81:
+				nread = -EPIPE;		/* unexecpted EOF */
 				               		   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#961: FILE: checkpoint/sys.c:96:
+	ret = _ckpt_kread(ctx->file , addr, count);
 	                            ^

WARNING:TYPO_SPELLING: 'interchangable' may be misspelled - perhaps 'interchangeable'?
#986: FILE: checkpoint/sys.c:121:
+ * (requiring 'ptr' makes it easily interchangable with kmalloc/kfree
                                     ^^^^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1002: FILE: checkpoint/sys.c:137:
+	struct ckpt_hdr *h = (struct ckpt_hdr *) ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1003: FILE: checkpoint/sys.c:138:
+	struct ckpt_hdr *h = (struct ckpt_hdr *) ptr;
+	_ckpt_hdr_put(ctx, ptr, h->len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1026: FILE: checkpoint/sys.c:161:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1120: FILE: checkpoint/sys.c:264:
+
+

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1131: FILE: checkpoint/sys.c:275:
+	ret = strict_strtoul(s, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1138: FILE: checkpoint/sys.c:282:
+__setup("ckpt_debug=", ckpt_debug_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1161: FILE: include/linux/checkpoint.h:1:
+#ifndef _LINUX_CHECKPOINT_H_

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1181: FILE: include/linux/checkpoint.h:21:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#1186: FILE: include/linux/checkpoint.h:26:
+#define CKPT_CTX_CHECKPOINT	(1 << CKPT_CTX_CHECKPOINT_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1187: FILE: include/linux/checkpoint.h:27:
+#define CKPT_CTX_RESTART	(1 << CKPT_CTX_RESTART_BIT)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1189: FILE: include/linux/checkpoint.h:29:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1190: FILE: include/linux/checkpoint.h:30:
+extern int ckpt_kwrite(struct ckpt_ctx *ctx, void *buf, int count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1191: FILE: include/linux/checkpoint.h:31:
+extern int ckpt_kread(struct ckpt_ctx *ctx, void *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1193: FILE: include/linux/checkpoint.h:33:
+extern void _ckpt_hdr_put(struct ckpt_ctx *ctx, void *ptr, int n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1194: FILE: include/linux/checkpoint.h:34:
+extern void ckpt_hdr_put(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1195: FILE: include/linux/checkpoint.h:35:
+extern void *ckpt_hdr_get(struct ckpt_ctx *ctx, int n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1196: FILE: include/linux/checkpoint.h:36:
+extern void *ckpt_hdr_get_type(struct ckpt_ctx *ctx, int n, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1198: FILE: include/linux/checkpoint.h:38:
+extern int ckpt_write_obj(struct ckpt_ctx *ctx, struct ckpt_hdr *h);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1199: FILE: include/linux/checkpoint.h:39:
+extern int ckpt_write_obj_type(struct ckpt_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: include/linux/checkpoint.h:41:
+extern int ckpt_write_buffer(struct ckpt_ctx *ctx, void *ptr, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1202: FILE: include/linux/checkpoint.h:42:
+extern int ckpt_write_string(struct ckpt_ctx *ctx, char *str, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1203: FILE: include/linux/checkpoint.h:43:
+extern void __ckpt_write_err(struct ckpt_ctx *ctx, char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1204: FILE: include/linux/checkpoint.h:44:
+extern int ckpt_write_err(struct ckpt_ctx *ctx, char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1206: FILE: include/linux/checkpoint.h:46:
+extern int _ckpt_read_obj_type(struct ckpt_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1208: FILE: include/linux/checkpoint.h:48:
+extern int _ckpt_read_buffer(struct ckpt_ctx *ctx, void *ptr, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1209: FILE: include/linux/checkpoint.h:49:
+extern int _ckpt_read_string(struct ckpt_ctx *ctx, void *ptr, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1210: FILE: include/linux/checkpoint.h:50:
+extern void *ckpt_read_obj_type(struct ckpt_ctx *ctx, int len, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1211: FILE: include/linux/checkpoint.h:51:
+extern void *ckpt_read_buf_type(struct ckpt_ctx *ctx, int len, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1213: FILE: include/linux/checkpoint.h:53:
+extern long do_checkpoint(struct ckpt_ctx *ctx, pid_t pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1214: FILE: include/linux/checkpoint.h:54:
+extern long do_restart(struct ckpt_ctx *ctx, pid_t pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1217: FILE: include/linux/checkpoint.h:57:
+extern int checkpoint_task(struct ckpt_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1218: FILE: include/linux/checkpoint.h:58:
+extern int restore_task(struct ckpt_ctx *ctx);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1220: FILE: include/linux/checkpoint.h:60:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1239: FILE: include/linux/checkpoint.h:79:
+			printk(KERN_DEBUG "[%d:%d:c/r:%s:%d] " fmt,	\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1268: FILE: include/linux/checkpoint_hdr.h:1:
+#ifndef _CHECKPOINT_CKPT_HDR_H_

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1286: FILE: include/linux/checkpoint_hdr.h:19:
+ * __attribute__((aligned (8))) for the entire structure.

WARNING:TYPO_SPELLING: 'Therfore' may be misspelled - perhaps 'Therefore'?
#1299: FILE: include/linux/checkpoint_hdr.h:32:
+ * header format: 'struct ckpt_hdr' must prefix all other headers. Therfore
                                                                    ^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1306: FILE: include/linux/checkpoint_hdr.h:39:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1329: FILE: include/linux/checkpoint_hdr.h:62:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1354: FILE: include/linux/checkpoint_hdr.h:87:
+} __attribute__((aligned(8)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1356: FILE: include/linux/checkpoint_hdr.h:89:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1361: FILE: include/linux/checkpoint_hdr.h:94:
+} __attribute__((aligned(8)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1363: FILE: include/linux/checkpoint_hdr.h:96:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1374: FILE: include/linux/checkpoint_hdr.h:107:
+} __attribute__((aligned(8)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1383: FILE: include/linux/checkpoint_types.h:1:
+#ifndef _LINUX_CHECKPOINT_TYPES_H_

WARNING:TYPO_SPELLING: 'kerenl' may be misspelled - perhaps 'kernel'?
#1404: FILE: include/linux/checkpoint_types.h:22:
+	unsigned long kflags;	/* kerenl flags */
 	                     	   ^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093796.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 35 warnings, 37 checks, 1267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093796.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
