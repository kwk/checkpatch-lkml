WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: drivers/regulator/core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: drivers/regulator/core.c:97:
+static void _notifier_call_chain(struct regulator_dev *rdev,
+				  unsigned long event, void *data);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#185: FILE: drivers/regulator/core.c:125:
+	BUG_ON(*min_uV > *max_uV);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#188: FILE: drivers/regulator/core.c:128:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#193: FILE: drivers/regulator/core.c:133:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:CAMELCASE: Avoid CamelCase: <max_uV>
#198: FILE: drivers/regulator/core.c:138:
+	if (*max_uV > rdev->constraints->max_uV)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <min_uV>
#200: FILE: drivers/regulator/core.c:140:
+	if (*min_uV < rdev->constraints->min_uV)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/regulator/core.c:151:
+static int regulator_check_current_limit(struct regulator_dev *rdev,
+					int *min_uA, int *max_uA)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: drivers/regulator/core.c:153:
+	BUG_ON(*min_uA > *max_uA);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#216: FILE: drivers/regulator/core.c:156:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#221: FILE: drivers/regulator/core.c:161:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:CAMELCASE: Avoid CamelCase: <max_uA>
#226: FILE: drivers/regulator/core.c:166:
+	if (*max_uA > rdev->constraints->max_uA ||

CHECK:CAMELCASE: Avoid CamelCase: <min_uA>
#227: FILE: drivers/regulator/core.c:167:
+	    *min_uA < rdev->constraints->min_uA) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#228: FILE: drivers/regulator/core.c:168:
+		printk(KERN_ERR "%s: invalid current range %d-%duA for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#243: FILE: drivers/regulator/core.c:183:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#248: FILE: drivers/regulator/core.c:188:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#253: FILE: drivers/regulator/core.c:193:
+		printk(KERN_ERR "%s: invalid mode %x for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#264: FILE: drivers/regulator/core.c:204:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#269: FILE: drivers/regulator/core.c:209:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: drivers/regulator/core.c:217:
+static ssize_t device_requested_uA_show(struct device *dev,
+			     struct device_attribute *attr, char *buf)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#282: FILE: drivers/regulator/core.c:222:
+	if (regulator == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <uA_load>
#285: FILE: drivers/regulator/core.c:225:
+	return sprintf(buf, "%d\n", regulator->uA_load);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: drivers/regulator/core.c:229:
+static ssize_t regulator_uV_show(struct device *dev,
+				struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: drivers/regulator/core.c:242:
+static ssize_t regulator_uA_show(struct device *dev,
+				struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: drivers/regulator/core.c:250:
+static ssize_t regulator_opmode_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: drivers/regulator/core.c:269:
+static ssize_t regulator_state_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: drivers/regulator/core.c:283:
+static ssize_t regulator_min_uA_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: drivers/regulator/core.c:294:
+static ssize_t regulator_max_uA_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: drivers/regulator/core.c:305:
+static ssize_t regulator_min_uV_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/regulator/core.c:316:
+static ssize_t regulator_max_uV_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: drivers/regulator/core.c:327:
+static ssize_t regulator_total_uA_show(struct device *dev,
+				      struct device_attribute *attr, char *buf)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#394: FILE: drivers/regulator/core.c:334:
+	list_for_each_entry(regulator, &rdev->consumer_list, list)
+	    uA += regulator->uA_load;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/regulator/core.c:341:
+static ssize_t regulator_num_users_show(struct device *dev,
+				       struct device_attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: drivers/regulator/core.c:344:
+	struct regulator_dev *rdev = to_rdev(dev);
+	return sprintf(buf, "%d\n", rdev->use_count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: drivers/regulator/core.c:348:
+static ssize_t regulator_type_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: drivers/regulator/core.c:379:
+	struct regulator_dev *rdev = to_rdev(dev);
+	kfree(rdev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#449: FILE: drivers/regulator/core.c:389:
+ * consumer load. All locks held by caller */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#457: FILE: drivers/regulator/core.c:397:
+	if (err < 0 || !rdev->desc->ops->get_optimum_mode ||
+	    !rdev->desc->ops->get_voltage || !rdev->desc->ops->set_mode);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <input_uV>
#470: FILE: drivers/regulator/core.c:410:
+		input_uV = rdev->constraints->input_uV;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#475: FILE: drivers/regulator/core.c:415:
+	list_for_each_entry(sibling, &rdev->consumer_list, list)
+	    current_uA += sibling->uA_load;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#520: FILE: drivers/regulator/core.c:460:
+	printk(KERN_INFO "regulator: %s: %s\n", rdev->desc->name, buf);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#534: FILE: drivers/regulator/core.c:474:
+	if (regulator == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: drivers/regulator/core.c:484:
+		size = scnprintf(buf, REG_STR_SIZE, "microamps_requested_%s",
+			supply_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator->dev_attr.attr.name"
#550: FILE: drivers/regulator/core.c:490:
+		if (regulator->dev_attr.attr.name == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#558: FILE: drivers/regulator/core.c:498:
+			printk(KERN_WARNING "%s: could not add regulator_dev"

WARNING:SPLIT_STRING: quoted string split across lines
#559: FILE: drivers/regulator/core.c:499:
+			printk(KERN_WARNING "%s: could not add regulator_dev"
+				" load sysfs\n", __func__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator->supply_name"
#570: FILE: drivers/regulator/core.c:510:
+		if (regulator->supply_name == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#576: FILE: drivers/regulator/core.c:516:
+			printk(KERN_WARNING

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#615: FILE: drivers/regulator/core.c:555:
+	if (id == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#616: FILE: drivers/regulator/core.c:556:
+		printk(KERN_ERR "regulator: get() with no identifier\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#635: FILE: drivers/regulator/core.c:575:
+	printk(KERN_ERR "regulator: Unable to get requested regulator: %s\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#642: FILE: drivers/regulator/core.c:582:
+	if (regulator == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#664: FILE: drivers/regulator/core.c:604:
+	if (regulator == NULL || IS_ERR(regulator))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#668: FILE: drivers/regulator/core.c:608:
+		printk(KERN_WARNING "Releasing supply %s while enabled\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#698: FILE: drivers/regulator/core.c:638:
+		printk(KERN_ERR "%s: %s has no constraints\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#707: FILE: drivers/regulator/core.c:647:
+			printk(KERN_ERR "%s: failed to enable %s: %d\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#715: FILE: drivers/regulator/core.c:655:
+	if (rdev->desc->ops->enable) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: drivers/regulator/core.c:657:
+		if (rdev->constraints &&
+			(rdev->constraints->valid_ops_mask &

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#723: FILE: drivers/regulator/core.c:663:
+			printk(KERN_ERR "%s: failed to enable %s: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#749: FILE: drivers/regulator/core.c:689:
+		printk(KERN_CRIT "Regulator %s already enabled\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#772: FILE: drivers/regulator/core.c:712:
+	if (rdev->use_count == 1 && !rdev->constraints->always_on) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#777: FILE: drivers/regulator/core.c:717:
+				printk(KERN_ERR "%s: failed to disable %s\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#789: FILE: drivers/regulator/core.c:729:
+	} else if (rdev->use_count > 1) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: drivers/regulator/core.c:731:
+		if (rdev->constraints &&
+			(rdev->constraints->valid_ops_mask &

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#815: FILE: drivers/regulator/core.c:755:
+		printk(KERN_ERR "%s: not in use by this consumer\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/regulator/core.c:756:
+		printk(KERN_ERR "%s: not in use by this consumer\n",
+			__func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#839: FILE: drivers/regulator/core.c:779:
+			printk(KERN_ERR "%s: failed to force disable %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/regulator/core.c:785:
+		_notifier_call_chain(rdev, REGULATOR_EVENT_FORCE_DISABLE,
+			NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: drivers/regulator/core.c:942:
+int regulator_set_current_limit(struct regulator *regulator,
+			       int min_uA, int max_uA)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1174: FILE: drivers/regulator/core.c:1114:
+		printk(KERN_ERR "%s: invalid output voltage found for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1175: FILE: drivers/regulator/core.c:1115:
+		printk(KERN_ERR "%s: invalid output voltage found for %s\n",
+			__func__, rdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1185: FILE: drivers/regulator/core.c:1125:
+		printk(KERN_ERR "%s: invalid input voltage found for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: drivers/regulator/core.c:1126:
+		printk(KERN_ERR "%s: invalid input voltage found for %s\n",
+			__func__, rdev->desc->name);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1191: FILE: drivers/regulator/core.c:1131:
+	list_for_each_entry(consumer, &rdev->consumer_list, list)
+	    total_uA_load += consumer->uA_load;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1198: FILE: drivers/regulator/core.c:1138:
+		printk(KERN_ERR "%s: failed to get optimum mode for %s @"

WARNING:SPLIT_STRING: quoted string split across lines
#1199: FILE: drivers/regulator/core.c:1139:
+		printk(KERN_ERR "%s: failed to get optimum mode for %s @"
+			" %d uA %d -> %d uV\n", __func__, rdev->desc->name,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1206: FILE: drivers/regulator/core.c:1146:
+		printk(KERN_ERR "%s: failed to set optimum mode %x for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: drivers/regulator/core.c:1147:
+		printk(KERN_ERR "%s: failed to set optimum mode %x for %s\n",
+			__func__, mode, rdev->desc->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1225: FILE: drivers/regulator/core.c:1165:
+int regulator_register_notifier(struct regulator *regulator,
+			      struct notifier_block *nb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1240: FILE: drivers/regulator/core.c:1180:
+int regulator_unregister_notifier(struct regulator *regulator,
+				struct notifier_block *nb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1249: FILE: drivers/regulator/core.c:1189:
+static void _notifier_call_chain(struct regulator_dev *rdev,
+				  unsigned long event, void *data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1335: FILE: drivers/regulator/core.c:1275:
+	printk(KERN_ERR "Failed to enable %s\n", consumers[i].supply);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1370: FILE: drivers/regulator/core.c:1310:
+	printk(KERN_ERR "Failed to disable %s\n", consumers[i].supply);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1414: FILE: drivers/regulator/core.c:1354:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1426: FILE: drivers/regulator/core.c:1366:
+struct regulator_dev *regulator_register(struct regulator_desc *regulator_desc,
+					  void *reg_data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc"
#1432: FILE: drivers/regulator/core.c:1372:
+	if (regulator_desc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc->name"
#1435: FILE: drivers/regulator/core.c:1375:
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc->ops"
#1435: FILE: drivers/regulator/core.c:1375:
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rdev)...) over kzalloc(sizeof(struct regulator_dev)...)
#1442: FILE: drivers/regulator/core.c:1382:
+	rdev = kzalloc(sizeof(struct regulator_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rdev"
#1443: FILE: drivers/regulator/core.c:1383:
+	if (rdev == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1466: FILE: drivers/regulator/core.c:1406:
+	if (ret == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1468: FILE: drivers/regulator/core.c:1408:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rdev"
#1485: FILE: drivers/regulator/core.c:1425:
+	if (rdev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#1511: FILE: drivers/regulator/core.c:1451:
+	if (regulator == NULL || supply == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!supply"
#1511: FILE: drivers/regulator/core.c:1451:
+	if (regulator == NULL || supply == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1535: FILE: drivers/regulator/core.c:1475:
+		printk(KERN_ERR

WARNING:TABSTOP: Statements should start on a tabstop
#1538: FILE: drivers/regulator/core.c:1478:
+		       goto out;

WARNING:REPEATED_WORD: Possible repeated word: 'supply'
#1552: FILE: drivers/regulator/core.c:1492:
+ * Returns the supply supply regulator name or NULL if no supply regulator

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#1559: FILE: drivers/regulator/core.c:1499:
+	if (regulator == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1590: FILE: drivers/regulator/core.c:1530:
+int regulator_set_machine_constraints(const char *regulator_name,
+	struct regulation_constraints *constraints)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_name"
#1595: FILE: drivers/regulator/core.c:1535:
+	if (regulator_name == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <apply_uV>
#1612: FILE: drivers/regulator/core.c:1552:
+	if (rdev->constraints->apply_uV &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1613: FILE: drivers/regulator/core.c:1553:
+	if (rdev->constraints->apply_uV &&
+		rdev->constraints->min_uV == rdev->constraints->max_uV &&

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1618: FILE: drivers/regulator/core.c:1558:
+				printk(KERN_ERR "%s: failed to apply %duV"

WARNING:SPLIT_STRING: quoted string split across lines
#1619: FILE: drivers/regulator/core.c:1559:
+				printk(KERN_ERR "%s: failed to apply %duV"
+					" constraint\n", __func__,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1639: FILE: drivers/regulator/core.c:1579:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#1656: FILE: drivers/regulator/core.c:1596:
+	if (regulator == NULL || supply == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!supply"
#1656: FILE: drivers/regulator/core.c:1596:
+	if (regulator == NULL || supply == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*node)...) over kmalloc(sizeof(struct regulator_map)...)
#1659: FILE: drivers/regulator/core.c:1599:
+	node = kmalloc(sizeof(struct regulator_map), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#1660: FILE: drivers/regulator/core.c:1600:
+	if (node == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1723: FILE: drivers/regulator/core.c:1663:
+	printk(KERN_INFO "regulator: core version %s\n", REGULATOR_VERSION);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286442.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 47 warnings, 64 checks, 1668 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286442.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
