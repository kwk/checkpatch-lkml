CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: fs/cifs/cifs_debug.c:344:
+				seq_printf(m, "\nFlushes: %d",
+					atomic_read(&tcon->num_flushes));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#101: FILE: fs/cifs/cifspdu.h:794:
+typedef struct smb_com_flush_req {

CHECK:CAMELCASE: Avoid CamelCase: <FileID>
#103: FILE: fs/cifs/cifspdu.h:796:
+	__u16 FileID;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ByteCount>
#104: FILE: fs/cifs/cifspdu.h:797:
+	__u16 ByteCount;	/* 0 */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#105: FILE: fs/cifs/cifspdu.h:798:
+} __attribute__((packed)) FLUSH_REQ;

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBFlush>
#117: FILE: fs/cifs/cifsproto.h:280:
+extern int CIFSSMBFlush(const int xid, struct cifsTconInfo *tcon,

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#117: FILE: fs/cifs/cifsproto.h:280:
+extern int CIFSSMBFlush(const int xid, struct cifsTconInfo *tcon,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: fs/cifs/cifsproto.h:280:
+extern int CIFSSMBFlush(const int xid, struct cifsTconInfo *tcon,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <pSMB>
#133: FILE: fs/cifs/cifssmb.c:1934:
+	FLUSH_REQ *pSMB = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/cifs/cifssmb.c:1935:
+	FLUSH_REQ *pSMB = NULL;
+	cFYI(1, ("In CIFSSMBFlush"));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#134: FILE: fs/cifs/cifssmb.c:1935:
+	cFYI(1, ("In CIFSSMBFlush"));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'CIFSSMBFlush', this function's name, in a string
#134: FILE: fs/cifs/cifssmb.c:1935:
+	cFYI(1, ("In CIFSSMBFlush"));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#136: FILE: fs/cifs/cifssmb.c:1937:
+	rc = small_smb_init(SMB_COM_FLUSH, 1, tcon, (void **) &pSMB);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#140: FILE: fs/cifs/cifssmb.c:1941:
+	pSMB->FileID = (__u16) smb_file_id;

CHECK:SPACING: No space is necessary after a cast
#142: FILE: fs/cifs/cifssmb.c:1943:
+	rc = SendReceiveNoRsp(xid, tcon->ses, (struct smb_hdr *) pSMB, 0);

CHECK:CAMELCASE: Avoid CamelCase: <SendReceiveNoRsp>
#142: FILE: fs/cifs/cifssmb.c:1943:
+	rc = SendReceiveNoRsp(xid, tcon->ses, (struct smb_hdr *) pSMB, 0);

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#145: FILE: fs/cifs/cifssmb.c:1946:
+		cERROR(1, ("Send error in Flush = %d", rc));

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#162: FILE: fs/cifs/file.c:1526:
+	struct cifsTconInfo *pTcon;

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#163: FILE: fs/cifs/file.c:1527:
+	struct cifsFileInfo *pSMBFile =

CHECK:CAMELCASE: Avoid CamelCase: <pSMBFile>
#163: FILE: fs/cifs/file.c:1527:
+	struct cifsFileInfo *pSMBFile =

CHECK:BRACES: braces {} should be used on all arms of this statement
#180: FILE: fs/cifs/file.c:1539:
+	if (pSMBFile) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: fs/cifs/file.c:1547:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164269.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 18 checks, 106 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164269.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
