WARNING:TYPO_SPELLING: 'Basicly' may be misspelled - perhaps 'Basically'?
#46: 
Basicly, it allocate module ID for kernel memory. Only memory's owner
^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'invalide' may be misspelled - perhaps 'invalid'?
#58: 
clear present flag again immediately but this time don't invalide TLB.
                                                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'shoud' may be misspelled - perhaps 'should'?
#61: 
Because only part of memory need protect and many memory shoud be
                                                         ^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#90: FILE: arch/x86/Kconfig.debug:70:
+config DEBUG_KM_PROTECT
+        bool "Debug kernel memory protect"
+        depends on DEBUG_KERNEL && SLUB
+        help
+          Change page table's present flag to prevent other module's accidental
+          access. This results in a large slowdown and waste more memory, but
+          helps to find certain types of memory corruptions.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#179: FILE: arch/x86/mm/fault.c:849:
+	if ((0 != tsk->km_id) && km_valid_addr(address))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#189: FILE: arch/x86/mm/km_protect.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#203: FILE: arch/x86/mm/km_protect.c:15:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: arch/x86/mm/km_protect.c:18:
+	unsigned short km_id = km_alloc_id();
+	km_set_id(km_id);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#211: FILE: arch/x86/mm/km_protect.c:23:
+		printk(KERN_EMERG "After km_set_id(0):\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#215: FILE: arch/x86/mm/km_protect.c:27:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#215: FILE: arch/x86/mm/km_protect.c:27:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#216: FILE: arch/x86/mm/km_protect.c:28:
+		printk(KERN_EMERG "__get_free_page failed\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#219: FILE: arch/x86/mm/km_protect.c:31:
+}
+unsigned long km_test_addr;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#221: FILE: arch/x86/mm/km_protect.c:33:
+spinlock_t km_test_lock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: arch/x86/mm/km_protect.c:35:
+int km_thread1(void * arg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#225: FILE: arch/x86/mm/km_protect.c:37:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: arch/x86/mm/km_protect.c:39:
+	struct task_struct *tsk = current;
+	set_task_comm(tsk, "km_thread1");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#228: FILE: arch/x86/mm/km_protect.c:40:
+	printk(KERN_INFO "PID: %x\n", current->pid);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#230: FILE: arch/x86/mm/km_protect.c:42:
+	if (0 == km_test_id) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#235: FILE: arch/x86/mm/km_protect.c:47:
+			printk(KERN_INFO "__get_free_page failed\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#239: FILE: arch/x86/mm/km_protect.c:51:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#239: FILE: arch/x86/mm/km_protect.c:51:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#245: FILE: arch/x86/mm/km_protect.c:57:
+	while(1) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#247: FILE: arch/x86/mm/km_protect.c:59:
+		udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/x86/mm/km_protect.c:61:
+no_mem:^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#253: FILE: arch/x86/mm/km_protect.c:65:
+}
+int km_thread2(void * arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#253: FILE: arch/x86/mm/km_protect.c:65:
+int km_thread2(void * arg)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#255: FILE: arch/x86/mm/km_protect.c:67:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#257: FILE: arch/x86/mm/km_protect.c:69:
+	struct task_struct *tsk = current;
+	set_task_comm(tsk, "km_thread2");

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: arch/x86/mm/km_protect.c:71:
+	int i;
+	printk(KERN_INFO "PID: %x\n", current->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#259: FILE: arch/x86/mm/km_protect.c:71:
+	printk(KERN_INFO "PID: %x\n", current->pid);

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: arch/x86/mm/km_protect.c:72:
+	for(i = 0; i++; i < 100)

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#261: FILE: arch/x86/mm/km_protect.c:73:
+		udelay(20000);

WARNING:LONG_UDELAY: long udelay - prefer mdelay; see arch/arm/include/asm/delay.h
#261: FILE: arch/x86/mm/km_protect.c:73:
+		udelay(20000);

ERROR:SPACING: space required before the open parenthesis '('
#262: FILE: arch/x86/mm/km_protect.c:74:
+	while(1) {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#265: FILE: arch/x86/mm/km_protect.c:77:
+		udelay(1000);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#269: FILE: arch/x86/mm/km_protect.c:81:
+}
+void km_test2(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#276: FILE: arch/x86/mm/km_protect.c:88:
+}
+int km_protect_write(struct file *file, const char __user * buffer,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: arch/x86/mm/km_protect.c:88:
+int km_protect_write(struct file *file, const char __user * buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: arch/x86/mm/km_protect.c:89:
+int km_protect_write(struct file *file, const char __user * buffer,
+		unsigned long count, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: arch/x86/mm/km_protect.c:94:
+	unsigned long cmd;
+	if (copy_from_user(buf, buffer, len))

WARNING:NAKED_SSCANF: unchecked sscanf return value
#285: FILE: arch/x86/mm/km_protect.c:97:
+	sscanf(buf, "%li", &cmd);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#285: FILE: arch/x86/mm/km_protect.c:97:
+	sscanf(buf, "%li", &cmd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#294: FILE: arch/x86/mm/km_protect.c:106:
+		printk(KERN_INFO "Command error!\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#298: FILE: arch/x86/mm/km_protect.c:110:
+}
+int km_protect_read(char *buf, char **start, off_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: arch/x86/mm/km_protect.c:111:
+int km_protect_read(char *buf, char **start, off_t offset,
+		int count, int *eof, void *data)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#304: FILE: arch/x86/mm/km_protect.c:116:
+}
+void __init km_protect_init(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#308: FILE: arch/x86/mm/km_protect.c:120:
+		printk(KERN_EMERG "km_protect: alloc km_table failed!\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#313: FILE: arch/x86/mm/km_protect.c:125:
+}
+void __init km_protect_dbginit(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: arch/x86/mm/km_protect.c:128:
+	struct proc_dir_entry *e;
+	e = create_proc_entry("km_protect", 0, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#318: FILE: arch/x86/mm/km_protect.c:130:
+		printk(KERN_EMERG "km_protect: Create proc file failed!\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#325: FILE: arch/x86/mm/km_protect.c:137:
+}
+void km_protect_addr(unsigned long addr, int numpages)

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: arch/x86/mm/km_protect.c:141:
+	unsigned int level;
+	WARN_ON(0 == current->km_id);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#329: FILE: arch/x86/mm/km_protect.c:141:
+	WARN_ON(0 == current->km_id);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#330: FILE: arch/x86/mm/km_protect.c:142:
+	while (numpages > 0)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#340: FILE: arch/x86/mm/km_protect.c:152:
+}
+void km_unprotect_addr(unsigned long addr, int numpages)

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: arch/x86/mm/km_protect.c:156:
+	unsigned int level;
+	if (0 == km_table[__pa(addr) >> PAGE_SHIFT])

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#344: FILE: arch/x86/mm/km_protect.c:156:
+	if (0 == km_table[__pa(addr) >> PAGE_SHIFT])

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#346: FILE: arch/x86/mm/km_protect.c:158:
+	while (numpages > 0)
+	{

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: include/linux/km_protect.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#394: FILE: include/linux/km_protect.h:9:
+#include <asm/pgtable.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#398: FILE: include/linux/km_protect.h:13:
+#define KM_TABLE_SIZE 256*1024*sizeof(unsigned short)
                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#398: FILE: include/linux/km_protect.h:13:
+#define KM_TABLE_SIZE 256*1024*sizeof(unsigned short)
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#398: FILE: include/linux/km_protect.h:13:
+#define KM_TABLE_SIZE 256*1024*sizeof(unsigned short)

ERROR:SPACING: space required before the open parenthesis '('
#411: FILE: include/linux/km_protect.h:26:
+	if(cur_km_id < MAX_KM_ID)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#415: FILE: include/linux/km_protect.h:30:
+}
+static inline unsigned short km_set_id(unsigned short km_id)

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: include/linux/km_protect.h:34:
+		unsigned short prev = current->km_id;
+		current->km_id = km_id;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#426: FILE: include/linux/km_protect.h:41:
+}
+static inline bool km_valid_addr(unsigned long addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#430: FILE: include/linux/km_protect.h:45:
+	volatile int v;

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: include/linux/km_protect.h:46:
+	volatile int v;
+	if (km_table[__pa(addr) >> PAGE_SHIFT] != current->km_id)

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#436: FILE: include/linux/km_protect.h:50:
__pgprot(pgprot_val(pte_pgprot(*kpte)) |

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#449: FILE: include/linux/km_protect.h:62:
+}
+static inline void __init km_protect_dbginit(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#452: FILE: include/linux/km_protect.h:65:
+}
+static inline unsigned short km_alloc_id()

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - unsigned short km_alloc_id() should probably be unsigned short km_alloc_id(void)
#452: FILE: include/linux/km_protect.h:65:
+static inline unsigned short km_alloc_id()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#456: FILE: include/linux/km_protect.h:69:
+}
+static inline unsigned short km_set_id(unsigned short km_id)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209304.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 36 warnings, 24 checks, 418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209304.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
