WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Rewrite unionfs_d_revalidate code to avoid stack-unfriendly recursion: split

WARNING:TYPO_SPELLING: 'interative' may be misspelled - perhaps 'interactive'?
#29: 
into a call to revalidate just one dentry, and an interative driver function
                                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#93: FILE: fs/unionfs/dentry.c:21:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#103: FILE: fs/unionfs/dentry.c:29:
+static int __unionfs_d_revalidate_one(struct dentry *dentry, struct nameidata *nd)
                                                                                ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#149: FILE: fs/unionfs/dentry.c:73:
+		BUG_ON(pdgen != sbgen);	/* should never happen here */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#195: FILE: fs/unionfs/dentry.c:177:
+int __unionfs_d_revalidate_chain(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#212: FILE: fs/unionfs/dentry.c:194:
+		BUG_ON(IS_ROOT(dtmp));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#217: FILE: fs/unionfs/dentry.c:199:
+	if (chain_len == 0) {
+		goto out_this;	/* shortcut if parents are OK */
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#228: FILE: fs/unionfs/dentry.c:210:
+		printk("unionfs: no more memory in %s\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#228: FILE: fs/unionfs/dentry.c:210:
+	if (!chain) {
+		printk("unionfs: no more memory in %s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#228: FILE: fs/unionfs/dentry.c:210:
+		printk("unionfs: no more memory in %s\n", __FUNCTION__);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#237: FILE: fs/unionfs/dentry.c:219:
+	for (i=chain_len-1; i>=0; i--) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#237: FILE: fs/unionfs/dentry.c:219:
+	for (i=chain_len-1; i>=0; i--) {
 	                ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#237: FILE: fs/unionfs/dentry.c:219:
+	for (i=chain_len-1; i>=0; i--) {
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#246: FILE: fs/unionfs/dentry.c:228:
+	for (i=0; i<chain_len; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#246: FILE: fs/unionfs/dentry.c:228:
+	for (i=0; i<chain_len; i++) {
 	           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#253: FILE: fs/unionfs/dentry.c:235:
+		valid = __unionfs_d_revalidate_one(chain[i], nd);
 		                                             ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#263: FILE: fs/unionfs/dentry.c:245:
+		if (!valid) {
+			goto out_free;
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#268: FILE: fs/unionfs/dentry.c:250:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#275: FILE: fs/unionfs/dentry.c:257:
+	valid = __unionfs_d_revalidate_one(dentry, nd);
 	                                           ^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#287: FILE: fs/unionfs/dentry.c:269:
+		for (i=0; i<chain_len; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#287: FILE: fs/unionfs/dentry.c:269:
+		for (i=0; i<chain_len; i++) {
 		           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#287: FILE: fs/unionfs/dentry.c:269:
+		for (i=0; i<chain_len; i++) {
+			dput(chain[i]);
+		}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#301: FILE: fs/unionfs/dentry.c:283:
+	err = __unionfs_d_revalidate_chain(dentry, nd);
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#313: FILE: fs/unionfs/union.h:305:
+int __unionfs_d_revalidate_chain(struct dentry *dentry, struct nameidata *nd);
                                                                           ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 16 warnings, 3 checks, 245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
