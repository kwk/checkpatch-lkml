WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#137: FILE: arch/x86/kernel/paravirt_32.c:240:
+extern void native_irq_enable_syscall_ret(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#190: FILE: include/asm-x86/irqflags.h:1:
+#ifndef _X86_IRQFLAGS_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#204: FILE: include/asm-x86/irqflags.h:15:
+	asm volatile("cli": : :"memory");
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#204: FILE: include/asm-x86/irqflags.h:15:
+	asm volatile("cli": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#209: FILE: include/asm-x86/irqflags.h:20:
+	asm volatile("sti": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#209: FILE: include/asm-x86/irqflags.h:20:
+	asm volatile("sti": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#214: FILE: include/asm-x86/irqflags.h:25:
+	asm volatile("sti; hlt": : :"memory");
 	                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#214: FILE: include/asm-x86/irqflags.h:25:
+	asm volatile("sti; hlt": : :"memory");
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#219: FILE: include/asm-x86/irqflags.h:30:
+	asm volatile("hlt": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#219: FILE: include/asm-x86/irqflags.h:30:
+	asm volatile("hlt": : :"memory");
 	                      ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#283: FILE: include/asm-x86/irqflags.h:94:
+#define raw_local_save_flags(flags) \
+		do { (flags) = __raw_local_save_flags(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#286: FILE: include/asm-x86/irqflags.h:97:
+#define raw_local_irq_save(flags) \
+		do { (flags) = __raw_local_irq_save(); } while (0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#391: FILE: include/asm-x86/irqflags_32.h:30:
+#define ENABLE_INTERRUPTS_SYSCALL_RET	sti; sysexit

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#546: FILE: include/asm-x86/irqflags_64.h:69:
+#define ENABLE_INTERRUPTS_SYSCALL_RET			\
+			movq	%gs:pda_oldrsp, %rsp;	\
+			swapgs;				\
+			sysretq;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#546: FILE: include/asm-x86/irqflags_64.h:69:
+#define ENABLE_INTERRUPTS_SYSCALL_RET			\
+			movq	%gs:pda_oldrsp, %rsp;	\
+			swapgs;				\
+			sysretq;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#547: FILE: include/asm-x86/irqflags_64.h:70:
+			movq	%gs:pda_oldrsp, %rsp;	\
 			    	^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#547: FILE: include/asm-x86/irqflags_64.h:70:
+			movq	%gs:pda_oldrsp, %rsp;	\
 			    	   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#547: FILE: include/asm-x86/irqflags_64.h:70:
+			movq	%gs:pda_oldrsp, %rsp;	\
 			    	                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#585: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#585: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#585: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#585: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		                     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000362489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 5 warnings, 7 checks, 480 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000362489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
