WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
  kobject_tag(kobj) - that returns a "void *" tag that identifies the context

WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: fs/sysfs/dir.c:111:
+		const void *tag;
+		tag = sysfs_lookup_tag(sd->s_parent, sb);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->s_tag.tag != tag'
#164: FILE: fs/sysfs/dir.c:610:
+		if ((parent_sd->s_flags & SYSFS_FLAG_TAGGED) &&
+		    (sd->s_tag.tag != tag))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_tag == tag'
#215: FILE: fs/sysfs/dir.c:930:
+	if ((old_tag == tag) && (strcmp(sd->s_name, new_name) == 0))

WARNING:LINE_SPACING: Missing a blank line after declarations
#256: FILE: fs/sysfs/dir.c:979:
+		struct dentry *dentry;
+		list_for_each_entry(sb, &sysfs_fs_type.fs_supers, s_instances) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pos->s_tag.tag != tag'
#319: FILE: fs/sysfs/dir.c:1123:
+			if ((parent_sd->s_flags & SYSFS_FLAG_TAGGED) &&
+			    (pos->s_tag.tag != tag))

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: fs/sysfs/dir.c:1155:
+		struct kobject *kobj;
+		switch (sysfs_type(sd)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#346: FILE: fs/sysfs/dir.c:1163:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'appopriate' may be misspelled - perhaps 'appropriate'?
#403: FILE: fs/sysfs/dir.c:1220:
+ *	the kobject will be renamed so the appopriate sysfs data structures
   	                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: fs/sysfs/dir.c:1224:
+int sysfs_enable_tagging(struct kobject *kobj,
+	const struct sysfs_tagged_dir_operations *tag_ops)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#610: FILE: fs/sysfs/sysfs.h:50:
+^I^Iconst void ^I^I^I^I^I*tag;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#636: FILE: fs/sysfs/sysfs.h:122:
+extern const void *sysfs_creation_tag(struct sysfs_dirent *parent_sd,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: fs/sysfs/sysfs.h:124:
+extern const void *sysfs_removal_tag(struct kobject *kobj,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#640: FILE: fs/sysfs/sysfs.h:126:
+extern const void *sysfs_lookup_tag(struct sysfs_dirent *dir_sd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#642: FILE: fs/sysfs/sysfs.h:128:
+extern const void *sysfs_dirent_tag(struct sysfs_dirent *sd);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#687: FILE: include/linux/sysfs.h:128:
+int sysfs_enable_tagging(struct kobject *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct sysfs_tagged_dir_operations *' should also have an identifier name
#687: FILE: include/linux/sysfs.h:128:
+int sysfs_enable_tagging(struct kobject *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: include/linux/sysfs.h:228:
+static inline int sysfs_enable_tagging(struct kobject *kobj,
+		       const struct sysfs_tagged_dir_operations *tag_ops)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000272519.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 9 checks, 541 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000272519.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
