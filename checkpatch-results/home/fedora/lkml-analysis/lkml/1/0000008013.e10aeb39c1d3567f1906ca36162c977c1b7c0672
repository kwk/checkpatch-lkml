WARNING:TYPO_SPELLING: 'Managment' may be misspelled - perhaps 'Management'?
#136: FILE: drivers/rapidio/rio-scan.c:282:
+ * rio_em_set_ops- Sets Error Managment operations for a particular vendor switch
                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur->vid == rdev->vid'
#149: FILE: drivers/rapidio/rio-scan.c:295:
+		if ((cur->vid == rdev->vid) && (cur->did == rdev->did)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur->did == rdev->did'
#149: FILE: drivers/rapidio/rio-scan.c:295:
+		if ((cur->vid == rdev->vid) && (cur->did == rdev->did)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: drivers/rapidio/rio-scan.c:381:
+		rdev->em_efptr = rio_mport_get_feature(port, 0, destid,
+						hopcount, RIO_EFB_ERR_MGMNT);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'result == RIO_EFB_SER_EP_FREE_ID'
#221: FILE: drivers/rapidio/rio-scan.c:491:
+		if ((result == RIO_EFB_SER_EP_FREE_ID) ||
+		    (result == RIO_EFB_SER_EP_FREE_ID_V13P) ||
+		    (result == RIO_EFB_SER_EP_FREC_ID))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'result == RIO_EFB_SER_EP_FREE_ID_V13P'
#221: FILE: drivers/rapidio/rio-scan.c:491:
+		if ((result == RIO_EFB_SER_EP_FREE_ID) ||
+		    (result == RIO_EFB_SER_EP_FREE_ID_V13P) ||
+		    (result == RIO_EFB_SER_EP_FREC_ID))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'result == RIO_EFB_SER_EP_FREC_ID'
#221: FILE: drivers/rapidio/rio-scan.c:491:
+		if ((result == RIO_EFB_SER_EP_FREE_ID) ||
+		    (result == RIO_EFB_SER_EP_FREE_ID_V13P) ||
+		    (result == RIO_EFB_SER_EP_FREC_ID))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rdev->em_efptr'
#309: FILE: drivers/rapidio/rio-scan.c:792:
+		if ((rdev->src_ops & RIO_SRC_OPS_PORT_WRITE) &&
+		    (rdev->em_efptr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: drivers/rapidio/rio-scan.c:795:
+			rio_write_config_32(rdev,
+					rdev->em_efptr + RIO_EM_PW_TGT_DEVID,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rdev->em_efptr'
#377: FILE: drivers/rapidio/rio-scan.c:1039:
+	if (rio_is_switch(rdev) && (rdev->em_efptr) &&
+	    (rdev->rswitch->em_init)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rdev->rswitch->em_init'
#377: FILE: drivers/rapidio/rio-scan.c:1039:
+	if (rio_is_switch(rdev) && (rdev->em_efptr) &&
+	    (rdev->rswitch->em_init)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: drivers/rapidio/rio.c:348:
+int rio_request_inb_pwrite(struct rio_dev *rdev,
+		int (*pwcback)(struct rio_dev *rdev, u32* msg, int step))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#432: FILE: drivers/rapidio/rio.c:348:
+		int (*pwcback)(struct rio_dev *rdev, u32* msg, int step))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdev->pwcback"
#437: FILE: drivers/rapidio/rio.c:353:
+	if (rdev->pwcback != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#493: FILE: drivers/rapidio/rio.c:409:
+		switch (ftr_header) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rdev"
#565: FILE: drivers/rapidio/rio.c:481:
+	if (rdev == NULL) {

WARNING:TYPO_SPELLING: 'Someting' may be misspelled - perhaps 'Something'?
#566: FILE: drivers/rapidio/rio.c:482:
+		/* Someting bad here (probably enumeration error) */
 		   ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/rapidio/rio.c:484:
+		pr_err("RIO: %s No matching device for CTag 0x%08x\n",
+			__func__, pw_msg[0]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#577: FILE: drivers/rapidio/rio.c:493:
+	u32 i;
+	pr_debug("%s : Port-Write Message:", __func__);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#578: FILE: drivers/rapidio/rio.c:494:
+	for (i = 0; i < RIO_PW_MSG_SIZE/sizeof(u32); i++) {
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#579: FILE: drivers/rapidio/rio.c:495:
+		if ((i%4) == 0)
 		      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdev->pwcback"
#594: FILE: drivers/rapidio/rio.c:510:
+	if (rdev->pwcback != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/rapidio/rio.c:522:
+		pr_err("RIO_PW: Bad switch initialization for %s\n",
+			rio_name(rdev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: drivers/rapidio/rio.c:540:
+	rio_mport_read_config_32(mport, destid, hopcount,
+			rdev->phys_efptr + RIO_PORT_N_ERR_STS_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: drivers/rapidio/rio.c:549:
+		rio_mport_write_config_32(mport, destid, hopcount,
+			rdev->em_efptr + RIO_EM_PN_ERR_DETECT(portnum), 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: drivers/rapidio/rio.c:556:
+		rio_mport_write_config_32(mport, destid, hopcount,
+			rdev->em_efptr + RIO_EM_LTL_ERR_DETECT, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: drivers/rapidio/rio.c:561:
+	rio_mport_write_config_32(mport, destid, hopcount,
+			rdev->phys_efptr + RIO_PORT_N_ERR_STS_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: drivers/rapidio/rio.c:568:
+			rio_mport_read_config_32(mport, destid, hopcount,
+				rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: drivers/rapidio/rio.c:571:
+			rio_mport_write_config_32(mport, destid, hopcount,
+				rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: drivers/rapidio/rio.c:575:
+			rio_mport_write_config_32(mport, destid, hopcount,
+				rdev->phys_efptr +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: drivers/rapidio/rio.c:581:
+			pr_debug("RIO_PW: Device Extraction on [%s]-P%d\n",
+			       rio_name(rdev), portnum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: drivers/rapidio/rio.c:587:
+			rio_mport_read_config_32(mport, destid, hopcount,
+				rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/rapidio/rio.c:590:
+			rio_mport_write_config_32(mport, destid, hopcount,
+				rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: drivers/rapidio/rio.c:595:
+			pr_debug("RIO_PW: Device Insertion on [%s]-P%d\n",
+			       rio_name(rdev), portnum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: drivers/rapidio/rio.c:601:
+	rio_mport_write_config_32(mport, destid, hopcount,
+			rdev->phys_efptr + RIO_PORT_N_ERR_STS_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: drivers/rapidio/rio.c:619:
+rio_mport_get_efb(struct rio_mport *port, int local, u16 destid,
+		      u8 hopcount, u32 from)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#715: FILE: drivers/rapidio/rio.c:631:
+		return reg_val & RIO_EXT_FTR_PTR_MASK;
+	} else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#744: FILE: drivers/rapidio/rio.h:21:
+extern u32 rio_mport_get_physefb(struct rio_mport *port, int local,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: drivers/rapidio/rio.h:23:
+extern u32 rio_mport_get_efb(struct rio_mport *port, int local, u16 destid,

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#763: FILE: drivers/rapidio/rio.h:76:
+#define DECLARE_RIO_EM_SECTION(section, name, vid, did, init_hook, em_hook)  \
+	static const struct rio_em_ops __rio_em_##name __used   \
+	__section(section) = { vid, did, init_hook, em_hook };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/rapidio/switches/tsi568.c:123:
+	rio_mport_read_config_32(mport, destid, hopcount,
+			TSI568_SP_MODE_BC, &regval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: drivers/rapidio/switches/tsi568.c:125:
+	rio_mport_write_config_32(mport, destid, hopcount,
+			TSI568_SP_MODE_BC, regval | TSI568_SP_MODE_PW_DIS);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#825: FILE: drivers/rapidio/switches/tsi57x.c:28:
+#define TSI578_SP_MODE(n)	(0x11004 + n*0x100)
                          	            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#825: FILE: drivers/rapidio/switches/tsi57x.c:28:
+#define TSI578_SP_MODE(n)	(0x11004 + n*0x100)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#828: FILE: drivers/rapidio/switches/tsi57x.c:31:
+#define TSI578_SP_CTL_INDEP(n)	(0x13004 + n*0x100)
                               	            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#828: FILE: drivers/rapidio/switches/tsi57x.c:31:
+#define TSI578_SP_CTL_INDEP(n)	(0x13004 + n*0x100)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#829: FILE: drivers/rapidio/switches/tsi57x.c:32:
+#define TSI578_SP_LUT_PEINF(n)	(0x13010 + n*0x100)
                               	            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#829: FILE: drivers/rapidio/switches/tsi57x.c:32:
+#define TSI578_SP_LUT_PEINF(n)	(0x13010 + n*0x100)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#830: FILE: drivers/rapidio/switches/tsi57x.c:33:
+#define TSI578_SP_CS_TX(n)	(0x13014 + n*0x100)
                           	            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#830: FILE: drivers/rapidio/switches/tsi57x.c:33:
+#define TSI578_SP_CS_TX(n)	(0x13014 + n*0x100)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#831: FILE: drivers/rapidio/switches/tsi57x.c:34:
+#define TSI578_SP_INT_STATUS(n) (0x13018 + n*0x100)
                                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#831: FILE: drivers/rapidio/switches/tsi57x.c:34:
+#define TSI578_SP_INT_STATUS(n) (0x13018 + n*0x100)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: drivers/rapidio/switches/tsi57x.c:130:
+		rio_mport_read_config_32(mport, destid, hopcount,
+				TSI578_SP_MODE(portnum), &regval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: drivers/rapidio/switches/tsi57x.c:132:
+		rio_mport_write_config_32(mport, destid, hopcount,
+				TSI578_SP_MODE(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: drivers/rapidio/switches/tsi57x.c:137:
+		rio_mport_read_config_32(mport, destid, hopcount,
+				rdev->phys_efptr +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/rapidio/switches/tsi57x.c:141:
+		rio_mport_write_config_32(mport, destid, hopcount,
+				rdev->phys_efptr +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: drivers/rapidio/switches/tsi57x.c:146:
+		rio_mport_read_config_32(mport, destid, hopcount,
+				TSI578_SP_INT_STATUS(portnum), &regval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: drivers/rapidio/switches/tsi57x.c:148:
+		rio_mport_write_config_32(mport, destid, hopcount,
+				TSI578_SP_INT_STATUS(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: drivers/rapidio/switches/tsi57x.c:153:
+		rio_mport_read_config_32(mport, destid, hopcount,
+				TSI578_SP_CTL_INDEP(portnum), &regval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#880: FILE: drivers/rapidio/switches/tsi57x.c:155:
+		rio_mport_write_config_32(mport, destid, hopcount,
+				TSI578_SP_CTL_INDEP(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: drivers/rapidio/switches/tsi57x.c:160:
+		rio_mport_read_config_32(mport, destid, hopcount,
+				rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: drivers/rapidio/switches/tsi57x.c:181:
+	rio_mport_read_config_32(mport, destid, hopcount,
+			rdev->phys_efptr + RIO_PORT_N_ERR_STS_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: drivers/rapidio/switches/tsi57x.c:189:
+		rio_mport_read_config_32(mport, destid, hopcount,
+			rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: drivers/rapidio/switches/tsi57x.c:193:
+			rio_mport_write_config_32(mport, destid, hopcount,
+				rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#920: FILE: drivers/rapidio/switches/tsi57x.c:195:
+			udelay(50);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: drivers/rapidio/switches/tsi57x.c:197:
+			rio_mport_write_config_32(mport, destid, hopcount,
+				rdev->phys_efptr + RIO_PORT_N_CTL_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: drivers/rapidio/switches/tsi57x.c:205:
+		rio_mport_read_config_32(mport, destid, hopcount,
+			rdev->phys_efptr + RIO_PORT_N_MNT_RSP_CSR(portnum),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/rapidio/switches/tsi57x.c:214:
+			rio_mport_write_config_32(mport, destid, hopcount,
+					  TSI578_SP_CS_TX(portnum), 0x40fc8000);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#942: FILE: drivers/rapidio/switches/tsi57x.c:217:
+				udelay(50);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#943: FILE: drivers/rapidio/switches/tsi57x.c:218:
+				rio_mport_read_config_32(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: drivers/rapidio/switches/tsi57x.c:240:
+		rio_mport_read_config_32(mport, destid, hopcount,
+				TSI578_SP_LUT_PEINF(portnum), &regval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: drivers/rapidio/switches/tsi57x.c:244:
+		pr_debug("RIO: TSI578[%s] P%d LUT Parity Error (destID=%d)\n",
+			rio_name(rdev), portnum, regval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: drivers/rapidio/switches/tsi57x.c:246:
+		tsi57x_route_add_entry(mport, destid, hopcount,
+				RIO_GLOBAL_TABLE, regval, route_port);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1027: FILE: include/linux/rio.h:120:
+	int (*pwcback) (struct rio_dev *rdev, u32* msg, int step);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1027: FILE: include/linux/rio.h:120:
+	int (*pwcback) (struct rio_dev *rdev, u32* msg, int step);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1055: FILE: include/linux/rio.h:240:
+	int (*em_init) (struct rio_dev *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1056: FILE: include/linux/rio.h:241:
+	int (*em_handle) (struct rio_dev *dev, u8 swport);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1072: FILE: include/linux/rio.h:265:
+	int (*pwenable) (struct rio_mport *mport, int enable);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1092: FILE: include/linux/rio.h:354:
+	int (*init_hook) (struct rio_dev *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1093: FILE: include/linux/rio.h:355:
+	int (*handler_hook) (struct rio_dev *dev, u8 swport);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1107: FILE: include/linux/rio_drv.h:417:
+extern int rio_request_inb_pwrite(struct rio_dev *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_dev *' should also have an identifier name
#1107: FILE: include/linux/rio_drv.h:417:
+extern int rio_request_inb_pwrite(struct rio_dev *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1109: FILE: include/linux/rio_drv.h:419:
+extern int rio_release_inb_pwrite(struct rio_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_dev *' should also have an identifier name
#1109: FILE: include/linux/rio_drv.h:419:
+extern int rio_release_inb_pwrite(struct rio_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1110: FILE: include/linux/rio_drv.h:420:
+extern int rio_inb_pwrite_handler(u32 *pw_msg);

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1122: FILE: include/linux/rio_regs.h:195:
+#define RIO_EFB_SER_EP_ID_V13P	0x0001	/* [VI] LP/Serial EP Devices, RapidIO Spec ver 1.3 and above */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#1123: FILE: include/linux/rio_regs.h:196:
+#define RIO_EFB_SER_EP_REC_ID_V13P	0x0002	/* [VI] LP/Serial EP Recovery Devices, RapidIO Spec ver 1.3 and above */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#1124: FILE: include/linux/rio_regs.h:197:
+#define RIO_EFB_SER_EP_FREE_ID_V13P	0x0003	/* [VI] LP/Serial EP Free Devices, RapidIO Spec ver 1.3 and above */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1156: FILE: include/linux/rio_regs.h:234:
+#define RIO_PORT_N_ERR_STS_CSR(x)	(0x0058 + x*0x20)
                                  	           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1156: FILE: include/linux/rio_regs.h:234:
+#define RIO_PORT_N_ERR_STS_CSR(x)	(0x0058 + x*0x20)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1163: FILE: include/linux/rio_regs.h:241:
+#define RIO_PORT_N_CTL_CSR(x)		(0x005c + x*0x20)
                              		           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1163: FILE: include/linux/rio_regs.h:241:
+#define RIO_PORT_N_CTL_CSR(x)		(0x005c + x*0x20)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1189: FILE: include/linux/rio_regs.h:267:
+#define RIO_EM_PN_ERR_DETECT(x)	(0x040 + x*0x40) /* Port N Error Detect CSR */
                                	          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1189: FILE: include/linux/rio_regs.h:267:
+#define RIO_EM_PN_ERR_DETECT(x)	(0x040 + x*0x40) /* Port N Error Detect CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1192: FILE: include/linux/rio_regs.h:270:
+#define RIO_EM_PN_ERRRATE_EN(x) (0x044 + x*0x40) /* Port N Error Rate Enable CSR */
                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1192: FILE: include/linux/rio_regs.h:270:
+#define RIO_EM_PN_ERRRATE_EN(x) (0x044 + x*0x40) /* Port N Error Rate Enable CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1193: FILE: include/linux/rio_regs.h:271:
+#define RIO_EM_PN_ATTRIB_CAP(x)	(0x048 + x*0x40) /* Port N Attributes Capture CSR */
                                	          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1193: FILE: include/linux/rio_regs.h:271:
+#define RIO_EM_PN_ATTRIB_CAP(x)	(0x048 + x*0x40) /* Port N Attributes Capture CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1194: FILE: include/linux/rio_regs.h:272:
+#define RIO_EM_PN_PKT_CAP_0(x)	(0x04c + x*0x40) /* Port N Packet/Control Symbol Capture 0 CSR */
                               	          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1194: FILE: include/linux/rio_regs.h:272:
+#define RIO_EM_PN_PKT_CAP_0(x)	(0x04c + x*0x40) /* Port N Packet/Control Symbol Capture 0 CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1195: FILE: include/linux/rio_regs.h:273:
+#define RIO_EM_PN_PKT_CAP_1(x)	(0x050 + x*0x40) /* Port N Packet Capture 1 CSR */
                               	          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1195: FILE: include/linux/rio_regs.h:273:
+#define RIO_EM_PN_PKT_CAP_1(x)	(0x050 + x*0x40) /* Port N Packet Capture 1 CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1196: FILE: include/linux/rio_regs.h:274:
+#define RIO_EM_PN_PKT_CAP_2(x)	(0x054 + x*0x40) /* Port N Packet Capture 2 CSR */
                               	          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1196: FILE: include/linux/rio_regs.h:274:
+#define RIO_EM_PN_PKT_CAP_2(x)	(0x054 + x*0x40) /* Port N Packet Capture 2 CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1197: FILE: include/linux/rio_regs.h:275:
+#define RIO_EM_PN_PKT_CAP_3(x)	(0x058 + x*0x40) /* Port N Packet Capture 3 CSR */
                               	          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1197: FILE: include/linux/rio_regs.h:275:
+#define RIO_EM_PN_PKT_CAP_3(x)	(0x058 + x*0x40) /* Port N Packet Capture 3 CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1198: FILE: include/linux/rio_regs.h:276:
+#define RIO_EM_PN_ERRRATE(x)	(0x068 + x*0x40) /* Port N Error Rate CSR */
                             	          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1198: FILE: include/linux/rio_regs.h:276:
+#define RIO_EM_PN_ERRRATE(x)	(0x068 + x*0x40) /* Port N Error Rate CSR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1199: FILE: include/linux/rio_regs.h:277:
+#define RIO_EM_PN_ERRRATE_TR(x) (0x06c + x*0x40) /* Port N Error Rate Threshold CSR */
                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1199: FILE: include/linux/rio_regs.h:277:
+#define RIO_EM_PN_ERRRATE_TR(x) (0x06c + x*0x40) /* Port N Error Rate Threshold CSR */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 92 checks, 1085 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
