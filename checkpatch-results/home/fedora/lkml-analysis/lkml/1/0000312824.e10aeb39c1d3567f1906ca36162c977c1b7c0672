WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#87: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: include/linux/mmu_notifier.h:1:
+#ifndef _LINUX_MMU_NOTIFIER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: include/linux/mmu_notifier.h:45:
+^I^I^I^I       unsigned long start, unsigned long end);       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/mmu_notifier.h:70:
+extern void mmu_notifier_register(struct mmu_notifier *mn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/mmu_notifier.h:80:
+extern void mmu_notifier_unregister(struct mmu_notifier *mn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: include/linux/mmu_notifier.h:82:
+extern void mmu_notifier_release(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/linux/mmu_notifier.h:83:
+extern int mmu_notifier_clear_flush_young(struct mm_struct *mm,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'function' - possible side-effects?
#181: FILE: include/linux/mmu_notifier.h:91:
+#define mmu_notifier(function, mm, args...)				\
+	do {								\
+		struct mmu_notifier *__mn;				\
+		struct hlist_node *__n;					\
+		struct mm_struct * __mm = mm;				\
+									\
+		if (unlikely(!hlist_empty(&__mm->mmu_notifier.head))) { \
+			rcu_read_lock();				\
+			hlist_for_each_entry_rcu(__mn, __n,		\
+						 &__mm->mmu_notifier.head, \
+						 hlist)			\
+				if (__mn->ops->function)		\
+					__mn->ops->function(__mn,	\
+							    __mm,	\
+							    args);	\
+			rcu_read_unlock();				\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#181: FILE: include/linux/mmu_notifier.h:91:
+#define mmu_notifier(function, mm, args...)				\
+	do {								\
+		struct mmu_notifier *__mn;				\
+		struct hlist_node *__n;					\
+		struct mm_struct * __mm = mm;				\
+									\
+		if (unlikely(!hlist_empty(&__mm->mmu_notifier.head))) { \
+			rcu_read_lock();				\
+			hlist_for_each_entry_rcu(__mn, __n,		\
+						 &__mm->mmu_notifier.head, \
+						 hlist)			\
+				if (__mn->ops->function)		\
+					__mn->ops->function(__mn,	\
+							    __mm,	\
+							    args);	\
+			rcu_read_unlock();				\
+		}							\
+	} while (0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#185: FILE: include/linux/mmu_notifier.h:95:
+		struct mm_struct * __mm = mm;				\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: include/linux/mmu_notifier.h:113:
+	struct vm_area_struct * ___vma = __vma;				\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: include/linux/mmu_notifier.h:123:
+	struct vm_area_struct * ___vma = __vma;				\

ERROR:SPACING: space required before the open parenthesis '('
#225: FILE: include/linux/mmu_notifier.h:135:
+#define mmu_notifier_register(mn, mm) do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#236: FILE: include/linux/mmu_notifier.h:146:
+#define mmu_notifier(function, mm, args...)			       \
+	do {							       \
+		if (0) {					       \
+			struct mmu_notifier *__mn;		       \
+								       \
+			__mn = (struct mmu_notifier *)(0x00ff);	       \
+			__mn->ops->function(__mn, mm, args);	       \
+		};						       \
+	} while (0)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#271: FILE: mm/Kconfig:197:
+config MMU_NOTIFIER
+	def_bool y
+	bool "MMU notifier, for paging KVM/RDMA"

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: mm/memory.c:630:
+		mmu_notifier(invalidate_range_end, src_mm,
+						vma->vm_start, end);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#422: FILE: mm/mmu_notifier.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#423: FILE: mm/mmu_notifier.c:2:
+ *  linux/mm/mmu_notifier.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 5 warnings, 8 checks, 458 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
