WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
union_mount struct only point to the next layer in the union stack. I rewrote

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#60: FILE: fs/Kconfig:59:
+config UNION_MOUNT
+       bool "Union mount support (EXPERIMENTAL)"
+       depends on EXPERIMENTAL
+       ---help---
+         If you say Y here, you will be able to mount file systems as
+         union mount stacks. This is a VFS based implementation and
+         should work with all file systems. If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#100: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: fs/union.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:MISPLACED_INIT: __initdata should be placed after union_hash_entries
#157: FILE: fs/union.c:53:
+static __initdata unsigned long union_hash_entries;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#163: FILE: fs/union.c:59:
+	union_hash_entries = simple_strtoul(str, &str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#167: FILE: fs/union.c:63:
+__setup("union_hash_entries=", set_union_hash_entries);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#186: FILE: fs/union.c:82:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: fs/union.c:84:
+	union_rhashtable = alloc_large_system_hash("rUnion-cache",
+						  sizeof(struct hlist_head),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#209: FILE: fs/union.c:105:
+	BUG_ON(!S_ISDIR(this->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: fs/union.c:106:
+	BUG_ON(!S_ISDIR(next->d_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#231: FILE: fs/union.c:127:
+	BUG_ON(!atomic_read(&um->u_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#241: FILE: fs/union.c:137:
+	BUG_ON(!hlist_unhashed(&um->u_hash));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: fs/union.c:138:
+	BUG_ON(!hlist_unhashed(&um->u_rhash));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'um->u_this.dentry == dentry'
#277: FILE: fs/union.c:173:
+		if ((um->u_this.dentry == dentry) &&
+		    (um->u_this.mnt == mnt))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'um->u_this.mnt == mnt'
#277: FILE: fs/union.c:173:
+		if ((um->u_this.dentry == dentry) &&
+		    (um->u_this.mnt == mnt))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'um->u_next.dentry == dentry'
#292: FILE: fs/union.c:188:
+		if ((um->u_next.dentry == dentry) &&
+		    (um->u_next.mnt == mnt))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'um->u_next.mnt == mnt'
#292: FILE: fs/union.c:188:
+		if ((um->u_next.dentry == dentry) &&
+		    (um->u_next.mnt == mnt))

WARNING:TYPO_SPELLING: 'an union' may be misspelled - perhaps 'a union'?
#303: FILE: fs/union.c:199:
+ * This tests if a dentry is living on an union mounted file system by walking
                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'an union' may be misspelled - perhaps 'a union'?
#313: FILE: fs/union.c:209:
+		/* check if there is an union mounted on top of us */
 		                     ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#346: FILE: fs/union.c:242:
+	BUG_ON(!IS_MNT_UNION(mnt));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: fs/union.c:251:
+		BUG_ON((um->u_next.dentry != dest_dentry) ||

WARNING:TYPO_SPELLING: 'overlayed' may be misspelled - perhaps 'overlaid'?
#370: FILE: fs/union.c:266:
+ * overlayed one. follow_union_down() is called by various lookup functions
    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'an union' may be misspelled - perhaps 'a union'?
#400: FILE: fs/union.c:296:
+ * necessary for following parent pointers in an union mount.
                                               ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#462: FILE: include/linux/union.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#480: FILE: include/linux/union.h:19:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dentry' - possible side-effects?
#501: FILE: include/linux/union.h:40:
+#define IS_UNION(dentry)	(!list_empty(&(dentry)->d_unions) || \
+				 (dentry)->d_unionized)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: include/linux/union.h:44:
+extern int is_unionized(struct dentry *, struct vfsmount *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#505: FILE: include/linux/union.h:44:
+extern int is_unionized(struct dentry *, struct vfsmount *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#505: FILE: include/linux/union.h:44:
+extern int is_unionized(struct dentry *, struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#506: FILE: include/linux/union.h:45:
+extern int append_to_union(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#506: FILE: include/linux/union.h:45:
+extern int append_to_union(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#506: FILE: include/linux/union.h:45:
+extern int append_to_union(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#506: FILE: include/linux/union.h:45:
+extern int append_to_union(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#506: FILE: include/linux/union.h:45:
+extern int append_to_union(struct vfsmount *, struct dentry *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#508: FILE: include/linux/union.h:47:
+extern int follow_union_down(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#508: FILE: include/linux/union.h:47:
+extern int follow_union_down(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#508: FILE: include/linux/union.h:47:
+extern int follow_union_down(struct vfsmount **, struct dentry **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: include/linux/union.h:48:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#509: FILE: include/linux/union.h:48:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#509: FILE: include/linux/union.h:48:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: include/linux/union.h:55:
+#define append_to_union(x1, y1, x2, y2)	({ BUG(); (0); })

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123504.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 30 warnings, 12 checks, 439 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123504.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
