CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: arch/ia64/include/asm/mca.h:156:
+extern int  ia64_reg_CE_extension(int (*fn)(void *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: arch/ia64/include/asm/mca.h:157:
+extern void ia64_unreg_CE_extension(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: arch/ia64/include/asm/mca.h:158:
+extern int isolate_lru_page(struct page *page);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'kaddr' may be better as '(kaddr)' to avoid precedence issues
#117: FILE: arch/ia64/include/asm/page.h:124:
+#define phys_to_page(kaddr)	(pfn_to_page(kaddr >> PAGE_SHIFT))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#138: FILE: arch/ia64/kernel/cpe_migrate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: arch/ia64/kernel/cpe_migrate.c:34:
+^Iu64 ^Ipaddr;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#175: FILE: arch/ia64/kernel/cpe_migrate.c:38:
+};
+LIST_HEAD(ce_list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#236: FILE: arch/ia64/kernel/cpe_migrate.c:99:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#338: FILE: arch/ia64/kernel/cpe_migrate.c:201:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct cpe_info)...)
#417: FILE: arch/ia64/kernel/cpe_migrate.c:280:
+	entry = kmalloc(sizeof(struct cpe_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#493: FILE: arch/ia64/kernel/cpe_migrate.c:356:
+	strlcpy(optstr, buf, len);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#495: FILE: arch/ia64/kernel/cpe_migrate.c:358:
+	err = strict_strtoul(optstr, 16, &opt);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: arch/ia64/kernel/cpe_migrate.c:387:
+	cnt = snprintf(buf, bufend - (buf + cnt),
+			"Memory marked bad:        %d kB\n"

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#552: FILE: arch/ia64/kernel/cpe_migrate.c:415:
+		.mode = S_IWUSR | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#558: FILE: arch/ia64/kernel/cpe_migrate.c:421:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: arch/ia64/kernel/cpe_migrate.c:424:
+cpe_poll_threshold_store(struct kobject *kobj,
+	      struct kobj_attribute *attr, const char *buf, size_t count)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#571: FILE: arch/ia64/kernel/cpe_migrate.c:434:
+	strlcpy(optstr, buf, len);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#573: FILE: arch/ia64/kernel/cpe_migrate.c:436:
+	err = strict_strtoul(optstr, 16, &opt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: arch/ia64/kernel/cpe_migrate.c:446:
+cpe_poll_threshold_show(struct kobject *kobj,
+	     struct kobj_attribute *attr, char *buf)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#595: FILE: arch/ia64/kernel/cpe_migrate.c:458:
+		.mode = S_IWUSR | S_IRUGO,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#601: FILE: arch/ia64/kernel/cpe_migrate.c:464:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: arch/ia64/kernel/cpe_migrate.c:467:
+cmc_poll_threshold_store(struct kobject *kobj,
+	      struct kobj_attribute *attr, const char *buf, size_t count)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#614: FILE: arch/ia64/kernel/cpe_migrate.c:477:
+	strlcpy(optstr, buf, len);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#616: FILE: arch/ia64/kernel/cpe_migrate.c:479:
+	err = strict_strtoul(optstr, 16, &opt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: arch/ia64/kernel/cpe_migrate.c:489:
+cmc_poll_threshold_show(struct kobject *kobj,
+	     struct kobj_attribute *attr, char *buf)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#638: FILE: arch/ia64/kernel/cpe_migrate.c:501:
+		.mode = S_IWUSR | S_IRUGO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: arch/ia64/kernel/cpe_migrate.c:509:
+migrate_threshold_store(struct kobject *kobj,
+	      struct kobj_attribute *attr, const char *buf, size_t count)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#656: FILE: arch/ia64/kernel/cpe_migrate.c:519:
+	strlcpy(optstr, buf, len);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#658: FILE: arch/ia64/kernel/cpe_migrate.c:521:
+	err = strict_strtoul(optstr, 16, &opt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: arch/ia64/kernel/cpe_migrate.c:531:
+migrate_threshold_show(struct kobject *kobj,
+	     struct kobj_attribute *attr, char *buf)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#680: FILE: arch/ia64/kernel/cpe_migrate.c:543:
+		.mode = S_IWUSR | S_IRUGO,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#695: FILE: arch/ia64/kernel/cpe_migrate.c:558:
+		printk(KERN_WARNING "kobject_create_and_add badram failed \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#695: FILE: arch/ia64/kernel/cpe_migrate.c:558:
+		printk(KERN_WARNING "kobject_create_and_add badram failed \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#729: FILE: arch/ia64/kernel/cpe_migrate.c:592:
+		printk(KERN_ERR "ia64_reg_CE_extension failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#734: FILE: arch/ia64/kernel/cpe_migrate.c:597:
+	printk(KERN_INFO "Registered badram Driver\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: arch/ia64/kernel/cpe_migrate.c:624:
+MODULE_PARM_DESC(cpe_polling_enabled,
+		"Enable polling with migration");

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#810: FILE: arch/ia64/kernel/mca.c:546:
+int (*ia64_mca_ce_extension)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: arch/ia64/kernel/mca.c:592:
+		list_for_each_entry_safe(entry, entry2,
+						&cpe_history_list, list) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#858: FILE: arch/ia64/kernel/mca.c:593:
+			if (now - entry->time <= HZ)
[...]
+			else {			/* remove expired entry */
[...]

CHECK:BRACES: Unbalanced braces around else statement
#860: FILE: arch/ia64/kernel/mca.c:595:
+			else {			/* remove expired entry */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: arch/ia64/kernel/mca.c:602:
+		IA64_MCA_DEBUG(KERN_INFO "CPE threshold %d/%d\n",
+						count, cpe_poll_threshold);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: arch/ia64/kernel/mca.c:611:
+			list_for_each_entry_safe(entry, entry2,
+						&cpe_history_list, list) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct ce_history)...)
#895: FILE: arch/ia64/kernel/mca.c:633:
+			entry = kmalloc(sizeof(struct ce_history), GFP_KERNEL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#904: FILE: arch/ia64/kernel/mca.c:642:
+	recover = (ia64_mca_ce_extension && ia64_mca_ce_extension(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: arch/ia64/kernel/mca.c:1451:
+		list_for_each_entry_safe(entry, entry2,
+						&cmc_history_list, list) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#931: FILE: arch/ia64/kernel/mca.c:1452:
+			if (now - entry->time <= HZ)
[...]
+			else {			/* remove expired entry */
[...]

CHECK:BRACES: Unbalanced braces around else statement
#933: FILE: arch/ia64/kernel/mca.c:1454:
+			else {			/* remove expired entry */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: arch/ia64/kernel/mca.c:1461:
+		IA64_MCA_DEBUG(KERN_INFO "CMC threshold %d/%d\n",
+						count, cmc_poll_threshold);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: arch/ia64/kernel/mca.c:1470:
+			list_for_each_entry_safe(entry, entry2,
+						&cmc_history_list, list) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct ce_history)...)
#968: FILE: arch/ia64/kernel/mca.c:1497:
+			entry = kmalloc(sizeof(struct ce_history), GFP_KERNEL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142717.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 30 checks, 887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142717.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
