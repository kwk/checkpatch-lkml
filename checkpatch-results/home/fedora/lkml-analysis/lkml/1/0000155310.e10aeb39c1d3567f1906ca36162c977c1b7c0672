WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
engines can use it. They just have to play with {start,stop}_ftrace_syscalls()

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#50: 
informations:
^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'diplaying' may be misspelled - perhaps 'displaying'?
#60: 
types optionally). Currently the value is a raw hex but higher level values diplaying
                                                                            ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/ftrace.h:522:
+extern void arch_init_ftrace_syscalls(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/ftrace.h:523:
+extern struct syscall_metadata *syscall_nr_to_meta(int nr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/ftrace.h:524:
+extern void start_ftrace_syscalls(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/ftrace.h:525:
+extern void stop_ftrace_syscalls(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/ftrace.h:526:
+extern void ftrace_syscall_enter(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/ftrace.h:527:
+extern void ftrace_syscall_exit(struct pt_regs *regs);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#158: FILE: include/linux/syscalls.h:102:
+#define __SC_STR_ADECL2(t, a, ...)	#a, __SC_STR_ADECL1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#159: FILE: include/linux/syscalls.h:103:
+#define __SC_STR_ADECL3(t, a, ...)	#a, __SC_STR_ADECL2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#160: FILE: include/linux/syscalls.h:104:
+#define __SC_STR_ADECL4(t, a, ...)	#a, __SC_STR_ADECL3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#161: FILE: include/linux/syscalls.h:105:
+#define __SC_STR_ADECL5(t, a, ...)	#a, __SC_STR_ADECL4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#162: FILE: include/linux/syscalls.h:106:
+#define __SC_STR_ADECL6(t, a, ...)	#a, __SC_STR_ADECL5(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#165: FILE: include/linux/syscalls.h:109:
+#define __SC_STR_TDECL2(t, a, ...)	#t, __SC_STR_TDECL1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#166: FILE: include/linux/syscalls.h:110:
+#define __SC_STR_TDECL3(t, a, ...)	#t, __SC_STR_TDECL2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#167: FILE: include/linux/syscalls.h:111:
+#define __SC_STR_TDECL4(t, a, ...)	#t, __SC_STR_TDECL3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#168: FILE: include/linux/syscalls.h:112:
+#define __SC_STR_TDECL5(t, a, ...)	#t, __SC_STR_TDECL4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#169: FILE: include/linux/syscalls.h:113:
+#define __SC_STR_TDECL6(t, a, ...)	#t, __SC_STR_TDECL5(__VA_ARGS__)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#173: FILE: include/linux/syscalls.h:117:
+	  __attribute__((__aligned__(4)))			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__syscalls_metadata") over __attribute__((section("__syscalls_metadata")))
#174: FILE: include/linux/syscalls.h:118:
+	  __attribute__((section("__syscalls_metadata")))	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: include/linux/syscalls.h:120:
+^I^I.name ^I^I= "sys"#sname,^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: include/linux/syscalls.h:121:
+^I^I.nb_args ^I= nb,^I^I^I^I\$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#184: FILE: include/linux/syscalls.h:128:
+	  __attribute__((__aligned__(4)))			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__syscalls_metadata") over __attribute__((section("__syscalls_metadata")))
#185: FILE: include/linux/syscalls.h:129:
+	  __attribute__((section("__syscalls_metadata")))	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: include/linux/syscalls.h:131:
+^I^I.name ^I^I= "sys_"#sname,^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: include/linux/syscalls.h:132:
+^I^I.nb_args ^I= 0,^I^I^I^I\$

CHECK:CAMELCASE: Avoid CamelCase: <SYSCALL_DEFINEx>
#204: FILE: include/linux/syscalls.h:162:
+#define SYSCALL_DEFINEx(x, sname, ...)				\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#204: FILE: include/linux/syscalls.h:162:
+#define SYSCALL_DEFINEx(x, sname, ...)				\
+	static const char *types_##sname[] = {			\
+		__SC_STR_TDECL##x(__VA_ARGS__)			\
+	};							\
+	static const char *args_##sname[] = {			\
+		__SC_STR_ADECL##x(__VA_ARGS__)			\
+	};							\
+	SYSCALL_METADATA(sname, x);				\
+	__SYSCALL_DEFINEx(x, sname, __VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sname' - possible side-effects?
#204: FILE: include/linux/syscalls.h:162:
+#define SYSCALL_DEFINEx(x, sname, ...)				\
+	static const char *types_##sname[] = {			\
+		__SC_STR_TDECL##x(__VA_ARGS__)			\
+	};							\
+	static const char *args_##sname[] = {			\
+		__SC_STR_ADECL##x(__VA_ARGS__)			\
+	};							\
+	SYSCALL_METADATA(sname, x);				\
+	__SYSCALL_DEFINEx(x, sname, __VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <__SYSCALL_DEFINEx>
#212: FILE: include/linux/syscalls.h:170:
+	__SYSCALL_DEFINEx(x, sname, __VA_ARGS__)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#254: FILE: kernel/trace/Kconfig:181:
+config FTRACE_SYSCALLS
+	bool "Trace syscalls"
+	depends on HAVE_FTRACE_SYSCALLS
+	select TRACING
+	help
+	  Basic tracer to catch the syscall entry and exit events.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: kernel/trace/trace.h:209:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#320: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#325: FILE: kernel/trace/trace_syscalls.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: kernel/trace/trace_syscalls.c:87:
+	ret = trace_seq_printf(s, "%s -> 0x%lx\n", entry->name,
+				trace->ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: kernel/trace/trace_syscalls.c:153:
+	event = trace_current_buffer_lock_reserve(TRACE_SYSCALL_ENTER, size,
+							0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: kernel/trace/trace_syscalls.c:182:
+	event = trace_current_buffer_lock_reserve(TRACE_SYSCALL_EXIT,
+				sizeof(*entry), 0, 0);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#531: FILE: kernel/trace/trace_syscalls.c:207:
+^I.type^I ^I= TRACE_SYSCALL_ENTER,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#536: FILE: kernel/trace/trace_syscalls.c:212:
+^I.type^I ^I= TRACE_SYSCALL_EXIT,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#541: FILE: kernel/trace/trace_syscalls.c:217:
+^I.name^I     ^I= "syscall",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#553: FILE: kernel/trace/trace_syscalls.c:229:
+		printk(KERN_WARNING "event %d failed to register\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#560: FILE: kernel/trace/trace_syscalls.c:236:
+		printk(KERN_WARNING "event %d failed to register\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000155310.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 19 warnings, 14 checks, 452 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000155310.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
