WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> Could we please make this easier to use by having some common sysfs helper 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/sysfs.h:81:
+extern int sysfs_access_in_other_task(struct kobject *kobj,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#56: FILE: include/linux/sysfs.h:82:
+extern int sysfs_access_in_other_task(struct kobject *kobj,
+		void (*func)(void *), void *data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#66: FILE: include/linux/sysfs.h:140:
+static inline int sysfs_access_in_other_task(struct kobject *kobj,
+		void (*func)(void *), void *data)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#68: FILE: include/linux/sysfs.h:142:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#83: FILE: fs/sysfs/file.c:647:
+^Istruct kobject ^I^I*kobj;$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#84: FILE: fs/sysfs/file.c:648:
+	void			(*func)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (ots->func)
#94: FILE: fs/sysfs/file.c:658:
+	(ots->func)(ots->data);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: fs/sysfs/file.c:682:
+int sysfs_access_in_other_task(struct kobject *kobj, void (*func)(void *),
+		void *data)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/device.h:359:
+extern int device_access_in_other_task(struct device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: include/linux/device.h:360:
+extern int device_access_in_other_task(struct device *dev,
+		void (*func)(struct device *));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: drivers/base/core.c:427:
+int device_access_in_other_task(struct device *dev,
+		void (*func)(struct device *))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456160.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 8 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456160.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
