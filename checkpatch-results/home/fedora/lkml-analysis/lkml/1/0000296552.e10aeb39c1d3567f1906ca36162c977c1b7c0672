WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
    Add lookup and directory management routines for OMFS.  The filesystem uses

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#30: 
    Signed-off-by: Bob Copeland <me@bobcopeland.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: fs/omfs/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#56: FILE: fs/omfs/dir.c:15:
+	int i, hash = 0;
+	for (i = 0; i < namelen; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#66: FILE: fs/omfs/dir.c:25:
+static struct buffer_head *omfs_get_bucket(struct inode *dir,
+		const char *name, int namelen, int *ofs)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#68: FILE: fs/omfs/dir.c:27:
+	int nbuckets = (dir->i_size - OMFS_DIR_START)/8;
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: fs/omfs/dir.c:36:
+static struct buffer_head *omfs_scan_list(struct inode *dir, u64 block,
+				const char *name, int namelen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#86: FILE: fs/omfs/dir.c:45:
+		bh = sb_bread(dir->i_sb,
+			clus_to_blk(OMFS_SB(dir->i_sb), block));

CHECK:SPACING: No space is necessary after a cast
#90: FILE: fs/omfs/dir.c:49:
+		oi = (struct omfs_inode *) bh->b_data;

CHECK:SPACING: No space is necessary after a cast
#117: FILE: fs/omfs/dir.c:76:
+	block = be64_to_cpu(*((__be64 *) &bh->b_data[ofs]));

CHECK:BRACES: braces {} should be used on all arms of this statement
#138: FILE: fs/omfs/dir.c:97:
+	if (inode->i_mode & S_IFDIR) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: fs/omfs/dir.c:99:
+		memset(&bh->b_data[OMFS_DIR_START], 0xff,
+			sbi->s_sys_blocksize - OMFS_DIR_START);

CHECK:BRACES: Unbalanced braces around else statement
#141: FILE: fs/omfs/dir.c:100:
+	} else

CHECK:SPACING: No space is necessary after a cast
#144: FILE: fs/omfs/dir.c:103:
+	oi = (struct omfs_inode *) bh->b_data;

CHECK:SPACING: No space is necessary after a cast
#169: FILE: fs/omfs/dir.c:128:
+	entry = (__be64 *) &bh->b_data[ofs];

CHECK:SPACING: No space is necessary after a cast
#180: FILE: fs/omfs/dir.c:139:
+	oi = (struct omfs_inode *) bh->b_data;

CHECK:SPACING: No space is necessary after a cast
#217: FILE: fs/omfs/dir.c:176:
+	entry = (__be64 *) &bh->b_data[ofs];

CHECK:SPACING: No space is necessary after a cast
#226: FILE: fs/omfs/dir.c:185:
+	oi = (struct omfs_inode *) bh2->b_data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: fs/omfs/dir.c:193:
+		bh = sb_bread(dir->i_sb,
+			clus_to_blk(OMFS_SB(dir->i_sb), prev));

CHECK:SPACING: No space is necessary after a cast
#239: FILE: fs/omfs/dir.c:198:
+		oi = (struct omfs_inode *) bh->b_data;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#252: FILE: fs/omfs/dir.c:211:
+		iput(dirty);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: fs/omfs/dir.c:225:
+	bh = sb_bread(inode->i_sb, clus_to_blk(OMFS_SB(inode->i_sb),
+			inode->i_ino));

CHECK:SPACING: No space is necessary after a cast
#271: FILE: fs/omfs/dir.c:230:
+	ptr = (u64 *) &bh->b_data[OMFS_DIR_START];

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#344: FILE: fs/omfs/dir.c:303:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/omfs/dir.c:303:
+static int omfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#369: FILE: fs/omfs/dir.c:328:
+				  struct nameidata *nd)
 				                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#381: FILE: fs/omfs/dir.c:340:
+		ino_t ino = be64_to_cpu(oi->i_head.h_self);
+		brelse(bh);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: fs/omfs/dir.c:350:
+int omfs_is_bad(struct omfs_sb_info *sbi, struct omfs_header *header, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: fs/omfs/dir.c:351:
+int omfs_is_bad(struct omfs_sb_info *sbi, struct omfs_header *header, 
+	u64 fsblock)

WARNING:LINE_SPACING: Missing a blank line after declarations
#396: FILE: fs/omfs/dir.c:355:
+	u64 ino = be64_to_cpu(header->h_self);
+	is_bad = ((ino != fsblock) || (ino < sbi->s_root_ino) ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#400: FILE: fs/omfs/dir.c:359:
+		printk(KERN_WARNING "omfs: bad hash chain detected\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#405: FILE: fs/omfs/dir.c:364:
+static int omfs_fill_chain(struct file *filp, void *dirent, filldir_t filldir,
                                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: fs/omfs/dir.c:365:
+static int omfs_fill_chain(struct file *filp, void *dirent, filldir_t filldir,
+		u64 fsblock, int hindex)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: fs/omfs/dir.c:377:
+		bh = sb_bread(dir->i_sb, clus_to_blk(OMFS_SB(dir->i_sb),
+				fsblock));

CHECK:SPACING: No space is necessary after a cast
#422: FILE: fs/omfs/dir.c:381:
+		oi = (struct omfs_inode *) bh->b_data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: fs/omfs/dir.c:400:
+		res = filldir(dirent, oi->i_name, strnlen(oi->i_name,
+			OMFS_NAMELEN), filp->f_pos, self, d_type);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#451: FILE: fs/omfs/dir.c:410:
+static int omfs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                      ^^^^

CHECK:SPACING: No space is necessary after a cast
#464: FILE: fs/omfs/dir.c:423:
+	switch ((unsigned long) filp->f_pos) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#469: FILE: fs/omfs/dir.c:428:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: fs/omfs/dir.c:431:
+		if (filldir(dirent, "..", 2, 1,
+		    parent_ino(filp->f_dentry), DT_DIR) < 0)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#475: FILE: fs/omfs/dir.c:434:
+		/* fall through */

CHECK:SPACING: No space is necessary after a cast
#491: FILE: fs/omfs/dir.c:450:
+		fsblock = be64_to_cpu(*((__be64 *) &bh->b_data[offset]));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#493: FILE: fs/omfs/dir.c:452:
+		res = omfs_fill_chain(filp, dirent, filldir, fsblock, hindex);
 		                      ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#498: FILE: fs/omfs/dir.c:457:
+		filp->f_pos = (hchain+2) << 20;
 		                     ^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#508: FILE: fs/omfs/dir.c:467:
+struct inode_operations omfs_dir_inops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#517: FILE: fs/omfs/dir.c:476:
+struct file_operations omfs_dir_operations = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296552.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 18 warnings, 28 checks, 479 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296552.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
