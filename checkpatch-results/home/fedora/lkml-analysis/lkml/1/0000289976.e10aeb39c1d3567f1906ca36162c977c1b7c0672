WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
> >    git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-bigbox-bootmem-v2.git for-linus

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#99: FILE: arch/x86/kernel/e820_64.c:119:
+		printk(KERN_INFO "  early res: %d [%lx-%lx] %s\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: arch/x86/kernel/e820_64.c:120:
+		printk(KERN_INFO "  early res: %d [%lx-%lx] %s\n", i,
+			final_start, final_end - 1, r->name);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#113: FILE: arch/x86/kernel/setup_64.c:193:
+	early_res_to_bootmem(0, end_pfn<<PAGE_SHIFT);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __meminitdata should be placed after node_start
#163: FILE: arch/x86/mm/init_64.c:937:
+static int __meminitdata node_start;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#177: FILE: arch/x86/mm/init_64.c:976:
+					printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#178: FILE: arch/x86/mm/init_64.c:977:
+						addr_start, addr_end-1, p_start, p_end-1, node_start);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: arch/x86/mm/init_64.c:977:
+					printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",
+						addr_start, addr_end-1, p_start, p_end-1, node_start);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: arch/x86/mm/init_64.c:977:
+						addr_start, addr_end-1, p_start, p_end-1, node_start);
 						                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: arch/x86/mm/init_64.c:977:
+						addr_start, addr_end-1, p_start, p_end-1, node_start);
 						                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#195: FILE: arch/x86/mm/init_64.c:994:
+		printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: arch/x86/mm/init_64.c:995:
+		printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",
+			addr_start, addr_end-1, p_start, p_end-1, node_start);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#196: FILE: arch/x86/mm/init_64.c:995:
+			addr_start, addr_end-1, p_start, p_end-1, node_start);
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#196: FILE: arch/x86/mm/init_64.c:995:
+			addr_start, addr_end-1, p_start, p_end-1, node_start);
 			                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#257: FILE: arch/x86/mm/numa_64.c:271:
+		printk(KERN_INFO "    NODE_DATA(%d) on node %d\n", nodeid, nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: arch/x86/mm/numa_64.c:274:
+		reserve_bootmem_node(NODE_DATA(nodeid), nodedata_phys,
+					pgdat_size, BOOTMEM_DEFAULT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#263: FILE: arch/x86/mm/numa_64.c:277:
+		printk(KERN_INFO "    bootmap(%d) on node %d\n", nodeid, nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: arch/x86/mm/numa_64.c:280:
+		reserve_bootmem_node(NODE_DATA(nodeid), bootmap_start,
+				 bootmap_pages<<PAGE_SHIFT, BOOTMEM_DEFAULT);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#266: FILE: arch/x86/mm/numa_64.c:280:
+				 bootmap_pages<<PAGE_SHIFT, BOOTMEM_DEFAULT);
 				              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/asm-x86/e820_64.h:52:
+extern void early_res_to_bootmem(unsigned long start, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: mm/bootmem.c:115:
+static int __init can_reserve_bootmem_core(bootmem_data_t *bdata,
 			unsigned long addr, unsigned long size, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#312: FILE: mm/bootmem.c:120:
+	BUG_ON(!size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: mm/bootmem.c:124:
+	if (addr + size < bdata->node_boot_start ||
+		PFN_DOWN(addr) > bdata->node_low_pfn)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#325: FILE: mm/bootmem.c:131:
+		sidx= PFN_DOWN(addr - bdata->node_boot_start);
 		    ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#342: FILE: mm/bootmem.c:148:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: mm/bootmem.c:151:
+static void __init reserve_bootmem_core(bootmem_data_t *bdata,
+			unsigned long addr, unsigned long size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: mm/bootmem.c:160:
+	if (addr + size < bdata->node_boot_start ||
+		PFN_DOWN(addr) > bdata->node_low_pfn)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#365: FILE: mm/bootmem.c:167:
+		sidx= PFN_DOWN(addr - bdata->node_boot_start);
 		    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#428: FILE: mm/bootmem.c:262:
+			    PFN_DOWN(node_boot_start - bdata->node_boot_start)/BITS_PER_LONG;
 			                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: mm/bootmem.c:285:
+		if (bdata->last_success > node_boot_start &&
+			bdata->last_success - node_boot_start >= preferred)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#598: FILE: mm/sparse.c:298:
+void __attribute__((weak)) __meminit vmemmap_populate_print_last(void)

WARNING:TYPO_SPELLING: 'continously' may be misspelled - perhaps 'continuously'?
#617: FILE: mm/sparse.c:319:
+	 * here try to allocate 2M pages continously.
 	                                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289976.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 19 checks, 527 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289976.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
