WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#define XXX native_XXX.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#459: FILE: include/asm-i386/desc.h:103:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#462: FILE: include/asm-i386/desc.h:106:
+	asm volatile("ltr %w0"::"q" (GDT_ENTRY_TSS*8));
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#465: FILE: include/asm-i386/desc.h:109:
+static inline void native_load_gdt(const struct Xgt_desc_struct *dtr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#477: FILE: include/asm-i386/desc.h:121:
+	asm ("sgdt %0":"=m" (*dtr));
 	              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#482: FILE: include/asm-i386/desc.h:126:
+	asm ("sidt %0":"=m" (*dtr));
 	              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#488: FILE: include/asm-i386/desc.h:132:
+	unsigned long tr;
+	asm ("str %0":"=r" (tr));

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#488: FILE: include/asm-i386/desc.h:132:
+	asm ("str %0":"=r" (tr));
 	             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: include/asm-i386/irqflags.h:17:
+	unsigned long f;
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#546: FILE: include/asm-i386/irqflags.h:17:
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);
 	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#546: FILE: include/asm-i386/irqflags.h:17:
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#552: FILE: include/asm-i386/irqflags.h:23:
+	asm volatile("pushl %0 ; popfl": /* no output */
 	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#553: FILE: include/asm-i386/irqflags.h:24:
+			     :"g" (f)
 			     ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#554: FILE: include/asm-i386/irqflags.h:25:
+			     :"memory", "cc");
 			     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#559: FILE: include/asm-i386/irqflags.h:30:
+	asm volatile("cli": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#559: FILE: include/asm-i386/irqflags.h:30:
+	asm volatile("cli": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#564: FILE: include/asm-i386/irqflags.h:35:
+	asm volatile("sti": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#564: FILE: include/asm-i386/irqflags.h:35:
+	asm volatile("sti": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#569: FILE: include/asm-i386/irqflags.h:40:
+	asm volatile("sti; hlt": : :"memory");
 	                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#569: FILE: include/asm-i386/irqflags.h:40:
+	asm volatile("sti; hlt": : :"memory");
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#574: FILE: include/asm-i386/irqflags.h:45:
+	asm volatile("hlt": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#574: FILE: include/asm-i386/irqflags.h:45:
+	asm volatile("hlt": : :"memory");
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: include/asm-i386/msr.h:24:
+ ^I^I     ".section __ex_table,\"a\"\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#666: FILE: include/asm-i386/msr.h:24:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: include/asm-i386/msr.h:24:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#668: FILE: include/asm-i386/msr.h:26:
+^I^I     "   .long ^I2b,3b\n\t"$

WARNING:LINE_SPACING: Missing a blank line after declarations
#685: FILE: include/asm-i386/msr.h:43:
+	int err;
+	asm volatile("2: wrmsr ; xorl %0,%0\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: include/asm-i386/msr.h:48:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#690: FILE: include/asm-i386/msr.h:48:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: include/asm-i386/msr.h:48:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#692: FILE: include/asm-i386/msr.h:50:
+^I^I     "   .long ^I2b,3b\n\t"$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#695: FILE: include/asm-i386/msr.h:53:
+		     : "c" (msr), "0" ((u32)val), "d" ((u32)(val>>32)),
 		                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#703: FILE: include/asm-i386/msr.h:61:
+	unsigned long long val;
+	asm volatile("rdtsc" : "=A" (val));

WARNING:LINE_SPACING: Missing a blank line after declarations
#710: FILE: include/asm-i386/msr.h:68:
+	unsigned long long val;
+	asm volatile("rdpmc" : "=A" (val));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#736: FILE: include/asm-i386/msr.h:82:
+#define rdmsr(msr,val1,val2)						\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#736: FILE: include/asm-i386/msr.h:82:
+#define rdmsr(msr,val1,val2)						\
                       ^

ERROR:SPACING: space required before the open parenthesis '('
#741: FILE: include/asm-i386/msr.h:87:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#743: FILE: include/asm-i386/msr.h:89:
+#define wrmsr(msr,val1,val2)						\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#743: FILE: include/asm-i386/msr.h:89:
+#define wrmsr(msr,val1,val2)						\
                       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val1' may be better as '(val1)' to avoid precedence issues
#743: FILE: include/asm-i386/msr.h:89:
+#define wrmsr(msr,val1,val2)						\
+	native_write_msr(msr, ((unsigned long long)val2 << 32) | val1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val2' may be better as '(val2)' to avoid precedence issues
#743: FILE: include/asm-i386/msr.h:89:
+#define wrmsr(msr,val1,val2)						\
+	native_write_msr(msr, ((unsigned long long)val2 << 32) | val1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: include/asm-i386/msr.h:92:
+#define rdmsrl(msr,val)					\
                   ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#746: FILE: include/asm-i386/msr.h:92:
+#define rdmsrl(msr,val)					\
+	do {						\
+		(val) = native_read_msr(msr);		\
+	} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#749: FILE: include/asm-i386/msr.h:95:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#770: FILE: include/asm-i386/msr.h:106:
+#define wrmsr_safe(msr,val1,val2)						\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#770: FILE: include/asm-i386/msr.h:106:
+#define wrmsr_safe(msr,val1,val2)						\
                            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val1' may be better as '(val1)' to avoid precedence issues
#770: FILE: include/asm-i386/msr.h:106:
+#define wrmsr_safe(msr,val1,val2)						\
+	(native_write_msr_safe(msr, ((unsigned long long)val2 << 32) | val1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val2' may be better as '(val2)' to avoid precedence issues
#770: FILE: include/asm-i386/msr.h:106:
+#define wrmsr_safe(msr,val1,val2)						\
+	(native_write_msr_safe(msr, ((unsigned long long)val2 << 32) | val1))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: include/asm-i386/msr.h:110:
+#define rdmsr_safe(msr,p1,p2)						\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: include/asm-i386/msr.h:110:
+#define rdmsr_safe(msr,p1,p2)						\
                          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p1' may be better as '(p1)' to avoid precedence issues
#796: FILE: include/asm-i386/msr.h:110:
+#define rdmsr_safe(msr,p1,p2)						\
+	({								\
+		int __err;						\
+		unsigned long long __val = native_read_msr_safe(msr, &__err);\
+		(*p1) = __val;						\
+		(*p2) = __val >> 32;					\
+		__err;							\
+	})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p2' may be better as '(p2)' to avoid precedence issues
#796: FILE: include/asm-i386/msr.h:110:
+#define rdmsr_safe(msr,p1,p2)						\
+	({								\
+		int __err;						\
+		unsigned long long __val = native_read_msr_safe(msr, &__err);\
+		(*p1) = __val;						\
+		(*p2) = __val >> 32;					\
+		__err;							\
+	})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#805: FILE: include/asm-i386/msr.h:119:
+#define rdtsc(low,high)						\
                  ^

ERROR:SPACING: space required before the open parenthesis '('
#810: FILE: include/asm-i386/msr.h:124:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#812: FILE: include/asm-i386/msr.h:126:
+#define rdtscl(low)						\
+	do {							\
+		(low) = native_read_tsc();			\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#815: FILE: include/asm-i386/msr.h:129:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: include/asm-i386/msr.h:135:
+#define rdpmc(counter,low,high)					\
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: include/asm-i386/msr.h:135:
+#define rdpmc(counter,low,high)					\
                          ^

ERROR:SPACING: space required before the open parenthesis '('
#830: FILE: include/asm-i386/msr.h:140:
+	} while(0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_struct *' should also have an identifier name
#857: FILE: include/asm-i386/paravirt.h:109:
+	void (*write_ldt_entry)(struct desc_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_struct *' should also have an identifier name
#859: FILE: include/asm-i386/paravirt.h:111:
+	void (*write_gdt_entry)(struct desc_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_struct *' should also have an identifier name
#861: FILE: include/asm-i386/paravirt.h:113:
+	void (*write_idt_entry)(struct desc_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: include/asm-i386/processor.h:151:
+static inline void native_cpuid(unsigned int *eax, unsigned int *ebx,
 					 unsigned int *ecx, unsigned int *edx)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#919: FILE: include/asm-i386/processor.h:558:
 
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#922: FILE: include/asm-i386/processor.h:561:
+^Iunsigned long val = 0; ^I/* Damn you, gcc! */$

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#926: FILE: include/asm-i386/processor.h:565:
+		asm("movl %%db0, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#928: FILE: include/asm-i386/processor.h:567:
+		asm("movl %%db1, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#930: FILE: include/asm-i386/processor.h:569:
+		asm("movl %%db2, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#932: FILE: include/asm-i386/processor.h:571:
+		asm("movl %%db3, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#934: FILE: include/asm-i386/processor.h:573:
+		asm("movl %%db6, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#936: FILE: include/asm-i386/processor.h:575:
+		asm("movl %%db7, %0" :"=r" (val)); break;
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#938: FILE: include/asm-i386/processor.h:577:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#947: FILE: include/asm-i386/processor.h:586:
+		asm("movl %0,%%db0"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#950: FILE: include/asm-i386/processor.h:589:
+		asm("movl %0,%%db1"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#953: FILE: include/asm-i386/processor.h:592:
+		asm("movl %0,%%db2"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#956: FILE: include/asm-i386/processor.h:595:
+		asm("movl %0,%%db3"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#959: FILE: include/asm-i386/processor.h:598:
+		asm("movl %0,%%db6"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#962: FILE: include/asm-i386/processor.h:601:
+		asm("movl %0,%%db7"	: /* no output */ :"r" (value));
 		                   	                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#965: FILE: include/asm-i386/processor.h:604:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#973: FILE: include/asm-i386/processor.h:611:
+static inline void native_set_iopl_mask(unsigned mask)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#996: FILE: include/asm-i386/processor.h:638:
+#define get_debugreg(var, register)				\
+	(var) = native_get_debugreg(register)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1013: FILE: include/asm-i386/system.h:91:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1022: FILE: include/asm-i386/system.h:100:
+	unsigned long val;
+	asm volatile("movl %%cr0,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1022: FILE: include/asm-i386/system.h:100:
+	asm volatile("movl %%cr0,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1028: FILE: include/asm-i386/system.h:106:
+	asm volatile("movl %0,%%cr0": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1028: FILE: include/asm-i386/system.h:106:
+	asm volatile("movl %0,%%cr0": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1034: FILE: include/asm-i386/system.h:112:
+	unsigned long val;
+	asm volatile("movl %%cr2,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1034: FILE: include/asm-i386/system.h:112:
+	asm volatile("movl %%cr2,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1040: FILE: include/asm-i386/system.h:118:
+	asm volatile("movl %0,%%cr2": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1040: FILE: include/asm-i386/system.h:118:
+	asm volatile("movl %0,%%cr2": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1046: FILE: include/asm-i386/system.h:124:
+	unsigned long val;
+	asm volatile("movl %%cr3,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1046: FILE: include/asm-i386/system.h:124:
+	asm volatile("movl %%cr3,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1052: FILE: include/asm-i386/system.h:130:
+	asm volatile("movl %0,%%cr3": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1052: FILE: include/asm-i386/system.h:130:
+	asm volatile("movl %0,%%cr3": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1058: FILE: include/asm-i386/system.h:136:
+	unsigned long val;
+	asm volatile("movl %%cr4,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1058: FILE: include/asm-i386/system.h:136:
+	asm volatile("movl %%cr4,%0\n\t" :"=r" (val));
 	                                 ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1066: FILE: include/asm-i386/system.h:144:
+	asm("1: movl %%cr4, %0		\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1067: FILE: include/asm-i386/system.h:145:
+		"2:				\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1068: FILE: include/asm-i386/system.h:146:
+		".section __ex_table,\"a\"	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1069: FILE: include/asm-i386/system.h:147:
+		".long 1b,2b			\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1070: FILE: include/asm-i386/system.h:148:
+		".previous			\n"

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1071: FILE: include/asm-i386/system.h:149:
+		: "=r" (val): "0" (0));
 		            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1077: FILE: include/asm-i386/system.h:155:
+	asm volatile("movl %0,%%cr4": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1077: FILE: include/asm-i386/system.h:155:
+	asm volatile("movl %0,%%cr4": :"r" (val));
 	                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1082: FILE: include/asm-i386/system.h:160:
+	asm volatile("wbinvd": : :"memory");
 	                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1082: FILE: include/asm-i386/system.h:160:
+	asm volatile("wbinvd": : :"memory");
 	                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1085: FILE: include/asm-i386/system.h:163:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452811.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 59 errors, 30 warnings, 18 checks, 1049 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452811.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
