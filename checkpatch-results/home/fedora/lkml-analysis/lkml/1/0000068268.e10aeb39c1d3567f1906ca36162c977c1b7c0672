WARNING:TYPO_SPELLING: 'bewteen' may be misspelled - perhaps 'between'?
#33: 
syscall will take care of in-kernel synchronization bewteen tasks.
                                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#66: 
error has occured). This prevents tasks from returning to user space
          ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: checkpoint/restart.c:452:
+	int active = ctx->active_pid;
+	return active >= 0 ? ctx->pids_arr[active].vpid : 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctx' - possible side-effects?
#212: FILE: checkpoint/restart.c:467:
+#define restore_notify_error(ctx, errno) \
+do { \
+	ckpt_debug("ctx root pid %d err %d", ctx->root_pid, errno); \
+	_restore_notify_error(ctx, errno); \
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#212: FILE: checkpoint/restart.c:467:
+#define restore_notify_error(ctx, errno) \
+do { \
+	ckpt_debug("ctx root pid %d err %d", ctx->root_pid, errno); \
+	_restore_notify_error(ctx, errno); \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'errno' - possible side-effects?
#212: FILE: checkpoint/restart.c:467:
+#define restore_notify_error(ctx, errno) \
+do { \
+	ckpt_debug("ctx root pid %d err %d", ctx->root_pid, errno); \
+	_restore_notify_error(ctx, errno); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#216: FILE: checkpoint/restart.c:471:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'extremly' may be misspelled - perhaps 'extremely'?
#298: FILE: checkpoint/restart.c:553:
+	 * to prepare_descendants() on us (although extremly unlikely)
 	                                            ^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: checkpoint/restart.c:637:
+				ckpt_debug("bad task %d\n",task_pid_vnr(task));
 				                          ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#413: FILE: checkpoint/restart.c:668:
+			root = task = next_thread(task);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#434: FILE: checkpoint/restart.c:689:
+	BUG_ON(ctx->active_pid != -1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#663: FILE: checkpoint/sys.c:192:
+	BUG_ON(atomic_read(&ctx->refcount));

CHECK:BIT_MACRO: Prefer using the BIT macro
#772: FILE: include/linux/checkpoint.h:37:
+#define CKPT_CTX_SUCCESS	(1 << CKPT_CTX_SUCCESS_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#773: FILE: include/linux/checkpoint.h:38:
+#define CKPT_CTX_ERROR		(1 << CKPT_CTX_ERROR_BIT)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#779: FILE: include/linux/checkpoint.h:44:
+extern void exit_checkpoint(struct task_struct *tsk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#806: FILE: include/linux/checkpoint.h:92:
+extern void ckpt_ctx_get(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#807: FILE: include/linux/checkpoint.h:93:
+extern void ckpt_ctx_put(struct ckpt_ctx *ctx);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068268.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 6 warnings, 9 checks, 728 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068268.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
