WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Subject: [PATCH 13/33] score: create head files page.h pgalloc.h pgtable-bits.h pgtable.h

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#48: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: arch/score/include/asm/page.h:1:
+#ifndef _ASM_SCORE_PAGE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#60: FILE: arch/score/include/asm/page.h:8:
+#define PAGE_SIZE	(1UL << PAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#61: FILE: arch/score/include/asm/page.h:9:
+#define PAGE_MASK	(~(PAGE_SIZE-1))
                  	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#67: FILE: arch/score/include/asm/page.h:15:
+#define PAGE_UP(addr)	(((addr)+((PAGE_SIZE)-1))&(~((PAGE_SIZE)-1)))
                      	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#67: FILE: arch/score/include/asm/page.h:15:
+#define PAGE_UP(addr)	(((addr)+((PAGE_SIZE)-1))&(~((PAGE_SIZE)-1)))
                      	                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#67: FILE: arch/score/include/asm/page.h:15:
+#define PAGE_UP(addr)	(((addr)+((PAGE_SIZE)-1))&(~((PAGE_SIZE)-1)))
                      	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#67: FILE: arch/score/include/asm/page.h:15:
+#define PAGE_UP(addr)	(((addr)+((PAGE_SIZE)-1))&(~((PAGE_SIZE)-1)))
                      	                                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#68: FILE: arch/score/include/asm/page.h:16:
+#define PAGE_DOWN(addr)	((addr)&(~((PAGE_SIZE)-1)))
                        	       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#68: FILE: arch/score/include/asm/page.h:16:
+#define PAGE_DOWN(addr)	((addr)&(~((PAGE_SIZE)-1)))
                        	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: arch/score/include/asm/page.h:19:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#71: FILE: arch/score/include/asm/page.h:19:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#71: FILE: arch/score/include/asm/page.h:19:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#71: FILE: arch/score/include/asm/page.h:19:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#71: FILE: arch/score/include/asm/page.h:19:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#72: FILE: arch/score/include/asm/page.h:20:
+#define _ALIGN_DOWN(addr, size)	((addr)&(~((size)-1)))
                                	       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#72: FILE: arch/score/include/asm/page.h:20:
+#define _ALIGN_DOWN(addr, size)	((addr)&(~((size)-1)))
                                	                 ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#95: FILE: arch/score/include/asm/page.h:43:
+typedef struct { unsigned long pte; } pte_t;		/* page table entry */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#96: FILE: arch/score/include/asm/page.h:44:
+typedef struct { unsigned long pgd; } pgd_t;		/* PGD table entry */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#97: FILE: arch/score/include/asm/page.h:45:
+typedef struct { unsigned long pgprot; } pgprot_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#98: FILE: arch/score/include/asm/page.h:46:
+typedef struct page *pgtable_t;

CHECK:SPACING: No space is necessary after a cast
#113: FILE: arch/score/include/asm/page.h:61:
+#define __va(x)		((void *)((unsigned long) (x) + PAGE_OFFSET))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#128: FILE: arch/score/include/asm/page.h:76:
+#define pfn_valid(pfn)		((pfn) >= min_low_pfn && (pfn) < max_mapnr)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: arch/score/include/asm/pgalloc.h:1:
+#ifndef _ASM_SCORE_PGALLOC_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: arch/score/include/asm/pgalloc.h:7:
+static inline void pmd_populate_kernel(struct mm_struct *mm, pmd_t *pmd,
+	pte_t *pte)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: arch/score/include/asm/pgalloc.h:13:
+static inline void pmd_populate(struct mm_struct *mm, pmd_t *pmd,
+	pgtable_t pte)

CHECK:SPACING: No space is necessary after a cast
#174: FILE: arch/score/include/asm/pgalloc.h:24:
+	ret = (pgd_t *) __get_free_pages(GFP_KERNEL, PGD_ORDER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: arch/score/include/asm/pgalloc.h:29:
+		memcpy(ret + USER_PTRS_PER_PGD, init + USER_PTRS_PER_PGD,
+		(PTRS_PER_PGD - USER_PTRS_PER_PGD) * sizeof(pgd_t));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: arch/score/include/asm/pgalloc.h:41:
+static inline pte_t *pte_alloc_one_kernel(struct mm_struct *mm,
+	unsigned long address)

CHECK:SPACING: No space is necessary after a cast
#195: FILE: arch/score/include/asm/pgalloc.h:45:
+	pte = (pte_t *) __get_free_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#195: FILE: arch/score/include/asm/pgalloc.h:45:
+	pte = (pte_t *) __get_free_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO,
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#195: FILE: arch/score/include/asm/pgalloc.h:45:
+	pte = (pte_t *) __get_free_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO,
 	                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: arch/score/include/asm/pgalloc.h:52:
+static inline struct page *pte_alloc_one(struct mm_struct *mm,
+	unsigned long address)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#225: FILE: arch/score/include/asm/pgalloc.h:75:
+#define __pte_free_tlb(tlb, pte, buf)			\
+do {							\
+	pgtable_page_dtor(pte);				\
+	tlb_remove_page((tlb), pte);			\
+} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#240: FILE: arch/score/include/asm/pgtable-bits.h:1:
+#ifndef _ASM_SCORE_PGTABLE_BITS_H

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#243: FILE: arch/score/include/asm/pgtable-bits.h:4:
+#define _PAGE_ACCESSED			(1<<5)	/* implemented in software */
                       			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#243: FILE: arch/score/include/asm/pgtable-bits.h:4:
+#define _PAGE_ACCESSED			(1<<5)	/* implemented in software */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#244: FILE: arch/score/include/asm/pgtable-bits.h:5:
+#define _PAGE_READ			(1<<6)	/* implemented in software */
                   			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#244: FILE: arch/score/include/asm/pgtable-bits.h:5:
+#define _PAGE_READ			(1<<6)	/* implemented in software */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#245: FILE: arch/score/include/asm/pgtable-bits.h:6:
+#define _PAGE_WRITE			(1<<7)	/* implemented in software */
                    			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#245: FILE: arch/score/include/asm/pgtable-bits.h:6:
+#define _PAGE_WRITE			(1<<7)	/* implemented in software */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#246: FILE: arch/score/include/asm/pgtable-bits.h:7:
+#define _PAGE_PRESENT			(1<<9)	/* implemented in software */
                      			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#246: FILE: arch/score/include/asm/pgtable-bits.h:7:
+#define _PAGE_PRESENT			(1<<9)	/* implemented in software */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#247: FILE: arch/score/include/asm/pgtable-bits.h:8:
+#define _PAGE_MODIFIED			(1<<10)	/* implemented in software */
                       			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#247: FILE: arch/score/include/asm/pgtable-bits.h:8:
+#define _PAGE_MODIFIED			(1<<10)	/* implemented in software */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#248: FILE: arch/score/include/asm/pgtable-bits.h:9:
+#define _PAGE_FILE			(1<<10)
                   			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#248: FILE: arch/score/include/asm/pgtable-bits.h:9:
+#define _PAGE_FILE			(1<<10)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#250: FILE: arch/score/include/asm/pgtable-bits.h:11:
+#define _PAGE_GLOBAL			(1<<0)
                     			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#250: FILE: arch/score/include/asm/pgtable-bits.h:11:
+#define _PAGE_GLOBAL			(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#251: FILE: arch/score/include/asm/pgtable-bits.h:12:
+#define _PAGE_VALID			(1<<1)
                    			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#251: FILE: arch/score/include/asm/pgtable-bits.h:12:
+#define _PAGE_VALID			(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#252: FILE: arch/score/include/asm/pgtable-bits.h:13:
+#define _PAGE_SILENT_READ		(1<<1)	/* synonym */
                          		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#252: FILE: arch/score/include/asm/pgtable-bits.h:13:
+#define _PAGE_SILENT_READ		(1<<1)	/* synonym */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#253: FILE: arch/score/include/asm/pgtable-bits.h:14:
+#define _PAGE_DIRTY			(1<<2)	/* Write bit */
                    			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#253: FILE: arch/score/include/asm/pgtable-bits.h:14:
+#define _PAGE_DIRTY			(1<<2)	/* Write bit */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#254: FILE: arch/score/include/asm/pgtable-bits.h:15:
+#define _PAGE_SILENT_WRITE		(1<<2)
                           		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#254: FILE: arch/score/include/asm/pgtable-bits.h:15:
+#define _PAGE_SILENT_WRITE		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#255: FILE: arch/score/include/asm/pgtable-bits.h:16:
+#define _PAGE_CACHE			(1<<3)	/* cache */
                    			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#255: FILE: arch/score/include/asm/pgtable-bits.h:16:
+#define _PAGE_CACHE			(1<<3)	/* cache */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#256: FILE: arch/score/include/asm/pgtable-bits.h:17:
+#define _CACHE_MASK			(1<<3)
                    			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#256: FILE: arch/score/include/asm/pgtable-bits.h:17:
+#define _CACHE_MASK			(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#257: FILE: arch/score/include/asm/pgtable-bits.h:18:
+#define _PAGE_BUFFERABLE		(1<<4)	/*Fallow Spec. */
                         		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#257: FILE: arch/score/include/asm/pgtable-bits.h:18:
+#define _PAGE_BUFFERABLE		(1<<4)	/*Fallow Spec. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: arch/score/include/asm/pgtable.h:1:
+#ifndef _ASM_SCORE_PGTABLE_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: arch/score/include/asm/pgtable.h:11:
+extern void load_pgd(unsigned long pg_dir);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#282: FILE: arch/score/include/asm/pgtable.h:12:
+extern pte_t invalid_pte_table[PAGE_SIZE/sizeof(pte_t)];
                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#299: FILE: arch/score/include/asm/pgtable.h:29:
+#define USER_PTRS_PER_PGD	(0x80000000UL/PGDIR_SIZE)
                          	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#306: FILE: arch/score/include/asm/pgtable.h:36:
+#define VMALLOC_END		(FIXADDR_START - 2*PAGE_SIZE)
                    		                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#309: FILE: arch/score/include/asm/pgtable.h:39:
+	printk(KERN_ERR "%s:%d: bad pte %08lx.\n", \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#312: FILE: arch/score/include/asm/pgtable.h:42:
+	printk(KERN_ERR "%s:%d: bad pgd %08lx.\n", \

CHECK:SPACING: No space is necessary after a cast
#320: FILE: arch/score/include/asm/pgtable.h:50:
+	return pmd_val(pmd) == (unsigned long) invalid_pte_table;

CHECK:SPACING: No space is necessary after a cast
#327: FILE: arch/score/include/asm/pgtable.h:57:
+	return pmd_val(pmd) != (unsigned long) invalid_pte_table;

CHECK:SPACING: No space is necessary after a cast
#332: FILE: arch/score/include/asm/pgtable.h:62:
+	pmd_val(*pmdp) = ((unsigned long) invalid_pte_table);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#341: FILE: arch/score/include/asm/pgtable.h:71:
+#define __pud_offset(address)	(((address) >> PUD_SHIFT) & (PTRS_PER_PUD-1))
                              	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#342: FILE: arch/score/include/asm/pgtable.h:72:
+#define __pmd_offset(address)	(((address) >> PMD_SHIFT) & (PTRS_PER_PMD-1))
                              	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#346: FILE: arch/score/include/asm/pgtable.h:76:
+#define pgd_index(address)	(((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD-1))
                           	                                           ^

CHECK:SPACING: No space is necessary after a cast
#355: FILE: arch/score/include/asm/pgtable.h:85:
+	((pte_t *) pmd_page_vaddr(*(dir)) + __pte_offset(address))

CHECK:SPACING: No space is necessary after a cast
#357: FILE: arch/score/include/asm/pgtable.h:87:
+	((pte_t *) pmd_page_vaddr(*(dir)) + __pte_offset(address))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_pte' - possible side-effects?
#371: FILE: arch/score/include/asm/pgtable.h:101:
+#define pte_to_pgoff(_pte)		\
+	(((_pte).pte & 0x1ff) | (((_pte).pte >> 11) << 9))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'off' - possible side-effects?
#373: FILE: arch/score/include/asm/pgtable.h:103:
+#define pgoff_to_pte(off)		\
+	((pte_t) {((off) & 0x1ff) | (((off) >> 9) << 11) | _PAGE_FILE})

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#386: FILE: arch/score/include/asm/pgtable.h:116:
+#define pte_clear(mm, addr, xp)		\
+	do { set_pte_at(mm, addr, xp, __pte(0)); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#448: FILE: arch/score/include/asm/pgtable.h:178:
+#define __swp_offset(x) ^I((x).val >> 11)$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#492: FILE: arch/score/include/asm/pgtable.h:222:
+	pte_val(pte) &= ~(_PAGE_MODIFIED|_PAGE_SILENT_WRITE);
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#498: FILE: arch/score/include/asm/pgtable.h:228:
+	pte_val(pte) &= ~(_PAGE_ACCESSED|_PAGE_SILENT_READ);
 	                                ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#526: FILE: arch/score/include/asm/pgtable.h:256:
+#define set_pmd(pmdptr, pmdval)		\
+	 do { *(pmdptr) = (pmdval); } while (0)

WARNING:TABSTOP: Statements should start on a tabstop
#527: FILE: arch/score/include/asm/pgtable.h:257:
+	 do { *(pmdptr) = (pmdval); } while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: arch/score/include/asm/pgtable.h:262:
+extern void paging_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#539: FILE: arch/score/include/asm/pgtable.h:269:
+extern void __update_tlb(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: arch/score/include/asm/pgtable.h:270:
+extern void __update_tlb(struct vm_area_struct *vma,
+	unsigned long address,	pte_t pte);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: arch/score/include/asm/pgtable.h:271:
+extern void __update_cache(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: arch/score/include/asm/pgtable.h:272:
+extern void __update_cache(struct vm_area_struct *vma,
+	unsigned long address,	pte_t pte);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: arch/score/include/asm/pgtable.h:275:
+static inline void update_mmu_cache(struct vm_area_struct *vma,
+	unsigned long address, pte_t pte)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 77 checks, 487 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
