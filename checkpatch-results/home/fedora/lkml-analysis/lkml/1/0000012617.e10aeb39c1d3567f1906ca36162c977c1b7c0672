WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#55: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/linux/compaction.h:1:
+#ifndef _LINUX_COMPACTION_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#126: FILE: mm/compaction.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#127: FILE: mm/compaction.c:2:
+ * linux/mm/compaction.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: mm/compaction.c:49:
+static int isolate_freepages_block(struct zone *zone,
+				unsigned long blockpfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: mm/compaction.c:106:
+static void isolate_freepages(struct zone *zone,
+				struct compact_control *cc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: mm/compaction.c:163:
+static unsigned long isolate_migratepages(struct zone *zone,
+					struct compact_control *cc)

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: mm/compaction.c:190:
+		struct page *page;
+		if (!pfn_valid_within(low_pfn))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: mm/compaction.c:225:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: mm/compaction.c:238:
+static struct page *compaction_alloc(struct page *migratepage,
+					unsigned long data,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cc"
#369: FILE: mm/compaction.c:244:
+	VM_BUG_ON(cc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#396: FILE: mm/compaction.c:271:
+	struct page *page;
+	list_for_each_entry(page, &cc->migratepages, lru)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: mm/compaction.c:281:
+static inline int compact_finished(struct zone *zone,
+						struct compact_control *cc)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#429: FILE: mm/compaction.c:304:
+	cc->free_pfn &= ~(pageblock_nr_pages-1);
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: mm/compaction.c:308:
+		unsigned long nr_migrate, nr_remaining;
+		if (!isolate_migratepages(zone, cc))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: mm/compaction.c:313:
+		migrate_pages(&cc->migratepages, compaction_alloc,
+						(unsigned long)cc, 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: mm/page_alloc.c:1178:
+	BUG_ON(!PageBuddy(page));

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: mm/page_alloc.c:1201:
+		struct page *endpage = page + (1 << order) - 1;
+		for (; page < endpage; page += pageblock_nr_pages)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000012617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 8 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000012617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
