WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/dprintk.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#54: FILE: include/linux/dprintk.h:6:
+ * $Id: dprintk.h,v 1.1 2008/09/04 04:46:06 gnb Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#68: FILE: include/linux/dprintk.h:20:
+struct _dprintk
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#89: FILE: include/linux/dprintk.h:41:
+#define _DPRINTK_FLAGS_PRINT	(1<<0)	/* printk() a message using the format */
                             	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#89: FILE: include/linux/dprintk.h:41:
+#define _DPRINTK_FLAGS_PRINT	(1<<0)	/* printk() a message using the format */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#90: FILE: include/linux/dprintk.h:42:
+#define _DPRINTK_FLAGS_STACK	(1<<1)	/* print a kernel stack using dump_stack() */
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#90: FILE: include/linux/dprintk.h:42:
+#define _DPRINTK_FLAGS_STACK	(1<<1)	/* print a kernel stack using dump_stack() */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#91: FILE: include/linux/dprintk.h:43:
+#define _DPRINTK_FLAGS_CRASH	(1<<2)	/* cause a kernel crash for debugging */
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#91: FILE: include/linux/dprintk.h:43:
+#define _DPRINTK_FLAGS_CRASH	(1<<2)	/* cause a kernel crash for debugging */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#96: FILE: include/linux/dprintk.h:48:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".dprintk") over __attribute__((section(".dprintk")))
#107: FILE: include/linux/dprintk.h:59:
+		__attribute__((section(".dprintk"))) _dp = {	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#108: FILE: include/linux/dprintk.h:60:
+		.function = __FUNCTION__,			\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#116: FILE: include/linux/dprintk.h:68:
+		printk(_dp.format, ## __VA_ARGS__);		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#119: FILE: include/linux/dprintk.h:71:
+	BUG_ON(_dp.flags & _DPRINTK_FLAGS_CRASH);		\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#120: FILE: include/linux/dprintk.h:72:
+} while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#262: FILE: include/linux/sunrpc/debug.h:75:
+# define dprintk(args...)	do ; while (0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178218.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 6 warnings, 7 checks, 211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178218.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
