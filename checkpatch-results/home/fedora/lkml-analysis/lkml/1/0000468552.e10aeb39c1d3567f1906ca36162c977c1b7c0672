CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/cpuset.h:73:
+extern int cpuset_can_attach_task(struct container *cont,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/cpuset.h:75:
+extern void cpuset_attach_task(struct container *cont,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: include/linux/cpuset.h:76:
+extern void cpuset_attach_task(struct container *cont,
+				struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/cpuset.h:77:
+extern void cpuset_post_attach_task(struct container *cont,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/cpuset.h:80:
+extern int cpuset_populate_dir(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/cpuset.h:81:
+extern int cpuset_create(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/cpuset.h:82:
+extern void cpuset_destroy(struct container *cont);

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: kernel/fork.c:1067:
+ ^I^Igoto bad_fork_cleanup_container;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: kernel/fork.c:1067:
+ ^I^Igoto bad_fork_cleanup_container;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: kernel/fork.c:1067:
+ ^I^Igoto bad_fork_cleanup_container;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#227: FILE: kernel/container.c:98:
+ * exist, you could miss a notification */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#331: FILE: kernel/container.c:623:
+			 * string */

WARNING:LINE_SPACING: Missing a blank line after declarations
#349: FILE: kernel/container.c:687:
+		size_t n;
+		container_manage_lock();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#351: FILE: kernel/container.c:689:
+		n = min(n, (size_t) PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(size_t, n, PAGE_SIZE)
#351: FILE: kernel/container.c:689:
+		n = min(n, (size_t) PAGE_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cont == &top_container'
#378: FILE: kernel/container.c:1045:
+	if ((cont == &top_container) &&
+	    (err = container_add_file(cont, &cft_release_agent)) < 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#378: FILE: kernel/container.c:1045:
+	if ((cont == &top_container) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#382: FILE: kernel/container.c:1049:
+	if ((err = cpuset_populate_dir(cont)) < 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#447: FILE: kernel/container.c:1377:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#737: FILE: kernel/cpuset.c:154:
+ * silently switch it to mount "container" instead */

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: kernel/cpuset.c:161:
+	int ret = -ENODEV;
+	container_set_release_agent_path("/sbin/cpuset_release_agent");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1756: FILE: kernel/cpuset.c:1088:
+	if ((err = container_add_file(cont, &cft_cpus)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1759: FILE: kernel/cpuset.c:1090:
+	if ((err = container_add_file(cont, &cft_mems)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1762: FILE: kernel/cpuset.c:1092:
+	if ((err = container_add_file(cont, &cft_cpu_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1765: FILE: kernel/cpuset.c:1094:
+	if ((err = container_add_file(cont, &cft_mem_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1768: FILE: kernel/cpuset.c:1096:
+	if ((err = container_add_file(cont, &cft_memory_migrate)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1771: FILE: kernel/cpuset.c:1098:
+	if ((err = container_add_file(cont, &cft_memory_pressure)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1774: FILE: kernel/cpuset.c:1100:
+	if ((err = container_add_file(cont, &cft_spread_page)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1779: FILE: kernel/cpuset.c:1102:
+	if ((err = container_add_file(cont, &cft_spread_slab)) < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1889: FILE: kernel/cpuset.c:1164:
+		BUG_ON(retval);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1920: FILE: kernel/cpuset.c:1178:
+	struct container *cont = current->container;
+	cont->cpuset = &top_cpuset;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2285: FILE: init/Kconfig:276:
+config PROC_PID_CPUSET
+	bool "Include legacy /proc/<pid>/cpuset file"
+	depends on CPUSETS
+	default y
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2560: FILE: include/linux/fs.h:1844:
+extern void get_filesystem(struct file_system_type *fs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2561: FILE: include/linux/fs.h:1845:
+extern void put_filesystem(struct file_system_type *fs);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2574: FILE: include/linux/mempolicy.h:155:
+ (cpuset_being_rebound == current->container->cpuset)$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468552.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 12 warnings, 12 checks, 2387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468552.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
