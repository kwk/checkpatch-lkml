CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: drivers/usb/serial/ir-usb.c:111:
+static int ir_open(struct tty_struct *tty, struct usb_serial_port *port,
+		struct file *filep);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: drivers/usb/serial/ir-usb.c:113:
+static void ir_close(struct tty_struct *tty, struct usb_serial_port *port,
+		struct file *filep);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: drivers/usb/serial/ir-usb.c:115:
+static int ir_write(struct tty_struct *tty, struct usb_serial_port *port,
+		const unsigned char *buf, int count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: drivers/usb/serial/ir-usb.c:119:
+static void ir_set_termios(struct tty_struct *tty,
+		struct usb_serial_port *port, struct ktermios *old_termios);

CHECK:CAMELCASE: Avoid CamelCase: <bcdSpecRevision>
#113: FILE: drivers/usb/serial/ir-usb.c:167:
+	dbg("bcdSpecRevision=%x", desc->bcdSpecRevision);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: drivers/usb/serial/ir-usb.c:190:
+static struct irda_class_desc *irda_usb_find_class_desc(struct usb_device *dev,
+						unsigned int ifnum)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*desc)...) over kzalloc(sizeof(struct irda_class_desc)...)
#131: FILE: drivers/usb/serial/ir-usb.c:195:
+	desc = kzalloc(sizeof(struct irda_class_desc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#132: FILE: drivers/usb/serial/ir-usb.c:196:
+	if (desc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: drivers/usb/serial/ir-usb.c:200:
+	ret = usb_control_msg(dev, usb_rcvctrlpipe(dev, 0),
 			IU_REQ_GET_CLASS_DESC,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#182: FILE: drivers/usb/serial/ir-usb.c:234:
+	case 24:result = 0x20;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#185: FILE: drivers/usb/serial/ir-usb.c:237:
+	case 12:result = 0x30;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#188: FILE: drivers/usb/serial/ir-usb.c:240:
+	case  6:result = 0x40;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#190: FILE: drivers/usb/serial/ir-usb.c:242:
+	case  3:result = 0x50;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#192: FILE: drivers/usb/serial/ir-usb.c:244:
+	case  2:result = 0x60;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#194: FILE: drivers/usb/serial/ir-usb.c:246:
+	case  1:result = 0x70;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#196: FILE: drivers/usb/serial/ir-usb.c:248:
+	case  0:result = 0x80;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: drivers/usb/serial/ir-usb.c:267:
+	dbg("%s - Baud rates supported:%s%s%s%s%s%s%s%s%s",
 		__func__,

CHECK:CAMELCASE: Avoid CamelCase: <bmAdditionalBOFs>
#237: FILE: drivers/usb/serial/ir-usb.c:278:
+	switch (irda_desc->bmAdditionalBOFs) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#262: FILE: drivers/usb/serial/ir-usb.c:303:
+	default:;

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#262: FILE: drivers/usb/serial/ir-usb.c:303:
+	default:;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#281: FILE: drivers/usb/serial/ir-usb.c:321:
 		if (!buffer) {
+			dev_err(&port->dev, "%s - out of memory.\n", __func__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#293: FILE: drivers/usb/serial/ir-usb.c:330:
 		if (!buffer) {
+			dev_err(&port->dev, "%s - out of memory.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: drivers/usb/serial/ir-usb.c:331:
+			dev_err(&port->dev, "%s - out of memory.\n",
+								__func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: drivers/usb/serial/ir-usb.c:342:
+	usb_fill_bulk_urb(port->read_urb, port->serial->dev,
+			usb_rcvbulkpipe(port->serial->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/usb/serial/ir-usb.c:343:
+			usb_rcvbulkpipe(port->serial->dev,
+						port->bulk_in_endpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bulk_in_endpointAddress>
#315: FILE: drivers/usb/serial/ir-usb.c:343:
+						port->bulk_in_endpointAddress),

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#331: FILE: drivers/usb/serial/ir-usb.c:357:
+			struct usb_serial_port *port, struct file *filp)
 			                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: drivers/usb/serial/ir-usb.c:402:
+	usb_fill_bulk_urb(port->write_urb, port->serial->dev,
+			usb_sndbulkpipe(port->serial->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: drivers/usb/serial/ir-usb.c:403:
+			usb_sndbulkpipe(port->serial->dev,
+				port->bulk_out_endpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bulk_out_endpointAddress>
#357: FILE: drivers/usb/serial/ir-usb.c:403:
+				port->bulk_out_endpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: drivers/usb/serial/ir-usb.c:436:
+	usb_serial_debug_data(debug, &port->dev, __func__, urb->actual_length,
+						urb->transfer_buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: drivers/usb/serial/ir-usb.c:468:
+		usb_serial_debug_data(debug, &port->dev, __func__,
+					urb->actual_length, data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/usb/serial/ir-usb.c:473:
+			tty_insert_flip_string(tty, data + 1,
+						urb->actual_length - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: drivers/usb/serial/ir-usb.c:486:
+		usb_fill_bulk_urb(port->read_urb, port->serial->dev,
 				usb_rcvbulkpipe(port->serial->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/usb/serial/ir-usb.c:495:
+			dev_err(&port->dev,
+			    "%s - failed resubmitting read urb, error %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: drivers/usb/serial/ir-usb.c:500:
+		dbg("%s - nonzero read bulk status received: %d",
+							__func__, status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: drivers/usb/serial/ir-usb.c:571:
+	usb_fill_bulk_urb(port->write_urb, port->serial->dev,
+			usb_sndbulkpipe(port->serial->dev,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265202.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 4 warnings, 25 checks, 559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265202.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
