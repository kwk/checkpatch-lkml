WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
nameidata is split into an intent structure and a VFS-level only structure.)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#52: FILE: fs/unionfs/copyup.c:180:
+		struct nameidata nd;
 		                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#53: FILE: fs/unionfs/copyup.c:181:
+		err = init_lower_nd(&nd, LOOKUP_CREATE);
 		                     ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#53: FILE: fs/unionfs/copyup.c:181:
+		struct nameidata nd;
+		err = init_lower_nd(&nd, LOOKUP_CREATE);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#56: FILE: fs/unionfs/copyup.c:184:
+		args.create.nd = &nd;
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#56: FILE: fs/unionfs/copyup.c:184:
+		args.create.nd = &nd;
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#64: FILE: fs/unionfs/copyup.c:191:
+		release_lower_nd(&nd, err);
 		                  ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: fs/unionfs/lookup.c:568:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#88: FILE: fs/unionfs/lookup.c:572:
+ * Inside that nd structure, this function may also return an allocated
                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#89: FILE: fs/unionfs/lookup.c:573:
+ * struct file (for open intents).  The caller, when done with this nd, must
                                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#92: FILE: fs/unionfs/lookup.c:576:
+int init_lower_nd(struct nameidata *nd, unsigned int flags)
                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#104: FILE: fs/unionfs/lookup.c:588:
+	memset(nd, 0, sizeof(struct nameidata));
 	       ^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*file)...) over kzalloc(sizeof(struct file)...)
#111: FILE: fs/unionfs/lookup.c:595:
+		file = kzalloc(sizeof(struct file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: fs/unionfs/lookup.c:608:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#131: FILE: fs/unionfs/lookup.c:615:
+void release_lower_nd(struct nameidata *nd, int err)
                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#136: FILE: fs/unionfs/lookup.c:620:
+		release_open_intent(nd);
 		                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#150: FILE: fs/unionfs/rename.c:259:
+		struct nameidata nd;
 		                 ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: fs/unionfs/rename.c:260:
+		struct nameidata nd;
+		if (!wh_old || wh_old->d_inode || bwh_old < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#152: FILE: fs/unionfs/rename.c:261:
+			printk(KERN_ERR "unionfs: rename error "

WARNING:SPLIT_STRING: quoted string split across lines
#153: FILE: fs/unionfs/rename.c:262:
+			printk(KERN_ERR "unionfs: rename error "
+			       "(wh_old=%p/%p bwh_old=%d)\n", wh_old,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#158: FILE: fs/unionfs/rename.c:267:
+		err = init_lower_nd(&nd, LOOKUP_CREATE);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#164: FILE: fs/unionfs/rename.c:272:
+				       &nd);
 				        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#172: FILE: fs/unionfs/rename.c:285:
+		release_lower_nd(&nd, local_err);
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#184: FILE: fs/unionfs/subr.c:32:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#192: FILE: fs/unionfs/subr.c:86:
+		err = init_lower_nd(&nd, LOOKUP_CREATE);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#201: FILE: fs/unionfs/subr.c:94:
+					 &nd);
 					  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#204: FILE: fs/unionfs/subr.c:97:
+		release_lower_nd(&nd, err);
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#212: FILE: fs/unionfs/subr.c:159:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#220: FILE: fs/unionfs/subr.c:174:
+	err = init_lower_nd(&nd, LOOKUP_CREATE);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#225: FILE: fs/unionfs/subr.c:178:
+		err = vfs_create(lower_dir, diropq, S_IRUGO, &nd);
 		                                              ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#225: FILE: fs/unionfs/subr.c:178:
+		err = vfs_create(lower_dir, diropq, S_IRUGO, &nd);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#228: FILE: fs/unionfs/subr.c:181:
+	release_lower_nd(&nd, err);
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#240: FILE: fs/unionfs/union.h:251:
+extern int init_lower_nd(struct nameidata *nd, unsigned int flags);
                                            ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: fs/unionfs/union.h:251:
+extern int init_lower_nd(struct nameidata *nd, unsigned int flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#241: FILE: fs/unionfs/union.h:252:
+extern void release_lower_nd(struct nameidata *nd, int err);
                                                ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: fs/unionfs/union.h:252:
+extern void release_lower_nd(struct nameidata *nd, int err);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384299.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 4 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384299.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
