CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#76: FILE: arch/x86/kernel/tlb_uv.c:32:
+}
+early_param("nobau", setup_nobau);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: arch/x86/kernel/tlb_uv.c:85:
+static inline void uv_reply_to_message(int msg_slot, int resource,
+		struct bau_payload_queue_entry *msg,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#193: FILE: arch/x86/kernel/tlb_uv.c:145:
+		for (msg2 = msg+1, i = 0; i < DEST_Q_SIZE; msg2++, i++) {
 		               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#200: FILE: arch/x86/kernel/tlb_uv.c:152:
+			/* uv_bau_process_message: same conditions
+			   for cancellation as uv_do_reset */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#200: FILE: arch/x86/kernel/tlb_uv.c:152:
+			   for cancellation as uv_do_reset */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg2->replied_to == 0'
#201: FILE: arch/x86/kernel/tlb_uv.c:153:
+			if ((msg2->replied_to == 0) &&
+			    (msg2->canceled == 0) &&
+			    (msg2->sw_ack_vector) &&
+			    ((msg2->sw_ack_vector &
+				this_sw_ack_vector) == 0) &&
+			    (msg2->sending_cpu == sending_cpu) &&
+			    (msg2->msg_type != MSG_NOOP)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg2->canceled == 0'
#201: FILE: arch/x86/kernel/tlb_uv.c:153:
+			if ((msg2->replied_to == 0) &&
+			    (msg2->canceled == 0) &&
+			    (msg2->sw_ack_vector) &&
+			    ((msg2->sw_ack_vector &
+				this_sw_ack_vector) == 0) &&
+			    (msg2->sending_cpu == sending_cpu) &&
+			    (msg2->msg_type != MSG_NOOP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg2->sw_ack_vector'
#201: FILE: arch/x86/kernel/tlb_uv.c:153:
+			if ((msg2->replied_to == 0) &&
+			    (msg2->canceled == 0) &&
+			    (msg2->sw_ack_vector) &&
+			    ((msg2->sw_ack_vector &
+				this_sw_ack_vector) == 0) &&
+			    (msg2->sending_cpu == sending_cpu) &&
+			    (msg2->msg_type != MSG_NOOP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg2->sending_cpu == sending_cpu'
#201: FILE: arch/x86/kernel/tlb_uv.c:153:
+			if ((msg2->replied_to == 0) &&
+			    (msg2->canceled == 0) &&
+			    (msg2->sw_ack_vector) &&
+			    ((msg2->sw_ack_vector &
+				this_sw_ack_vector) == 0) &&
+			    (msg2->sending_cpu == sending_cpu) &&
+			    (msg2->msg_type != MSG_NOOP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg2->msg_type != MSG_NOOP'
#201: FILE: arch/x86/kernel/tlb_uv.c:153:
+			if ((msg2->replied_to == 0) &&
+			    (msg2->canceled == 0) &&
+			    (msg2->sw_ack_vector) &&
+			    ((msg2->sw_ack_vector &
+				this_sw_ack_vector) == 0) &&
+			    (msg2->sending_cpu == sending_cpu) &&
+			    (msg2->msg_type != MSG_NOOP)) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#234: FILE: arch/x86/kernel/tlb_uv.c:186:
+					uv_write_local_mmr(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: arch/x86/kernel/tlb_uv.c:211:
+		msg_ack_count = atomic_add_short_return(socket_ack_count,
+				(struct atomic_short *)&msg->acknowledge_count);

WARNING:RETURN_VOID: void function return statements are not generally useful
#273: FILE: arch/x86/kernel/tlb_uv.c:222:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: arch/x86/kernel/tlb_uv.c:230:
+	int cpu;
+	for_each_present_cpu(cpu)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#344: FILE: arch/x86/kernel/tlb_uv.c:272:
+		/* uv_do_reset: same conditions for cancellation as
+		   uv_bau_process_message */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#344: FILE: arch/x86/kernel/tlb_uv.c:272:
+		   uv_bau_process_message */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->replied_to == 0'
#345: FILE: arch/x86/kernel/tlb_uv.c:273:
+		if ((msg->replied_to == 0) &&
+		    (msg->canceled == 0) &&
+		    (msg->sending_cpu == rap->sender) &&
+		    (msg->sw_ack_vector) &&
+		    (msg->msg_type != MSG_NOOP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->canceled == 0'
#345: FILE: arch/x86/kernel/tlb_uv.c:273:
+		if ((msg->replied_to == 0) &&
+		    (msg->canceled == 0) &&
+		    (msg->sending_cpu == rap->sender) &&
+		    (msg->sw_ack_vector) &&
+		    (msg->msg_type != MSG_NOOP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->sending_cpu == rap->sender'
#345: FILE: arch/x86/kernel/tlb_uv.c:273:
+		if ((msg->replied_to == 0) &&
+		    (msg->canceled == 0) &&
+		    (msg->sending_cpu == rap->sender) &&
+		    (msg->sw_ack_vector) &&
+		    (msg->msg_type != MSG_NOOP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->sw_ack_vector'
#345: FILE: arch/x86/kernel/tlb_uv.c:273:
+		if ((msg->replied_to == 0) &&
+		    (msg->canceled == 0) &&
+		    (msg->sending_cpu == rap->sender) &&
+		    (msg->sw_ack_vector) &&
+		    (msg->msg_type != MSG_NOOP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->msg_type != MSG_NOOP'
#345: FILE: arch/x86/kernel/tlb_uv.c:273:
+		if ((msg->replied_to == 0) &&
+		    (msg->canceled == 0) &&
+		    (msg->sending_cpu == rap->sender) &&
+		    (msg->sw_ack_vector) &&
+		    (msg->msg_type != MSG_NOOP)) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#371: FILE: arch/x86/kernel/tlb_uv.c:299:
+				uv_write_local_mmr(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: arch/x86/kernel/tlb_uv.c:313:
+static void uv_reset_with_ipi(struct bau_target_nodemask *distribution,
+		int sender)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: arch/x86/kernel/tlb_uv.c:345:
+uv_reset_busy(struct bau_control *bcp, unsigned long mmr_offset,
+		int right_shift, struct ptc_stats *stat)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: arch/x86/kernel/tlb_uv.c:354:
+	atomic_add_short_return(1,
+		(struct atomic_short *)&pmaster->pnode_quiesce);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#444: FILE: arch/x86/kernel/tlb_uv.c:355:
+	printk(KERN_INFO "cpu %d bau quiet, reset mmr\n", bcp->cpu);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#445: FILE: arch/x86/kernel/tlb_uv.c:356:
+	while (atomic_read_short(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#447: FILE: arch/x86/kernel/tlb_uv.c:358:
+		atomic_read_short(

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#453: FILE: arch/x86/kernel/tlb_uv.c:364:
+	mask |= (3UL < right_shift);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: arch/x86/kernel/tlb_uv.c:370:
+	atomic_add_short_return(-1,
+		(struct atomic_short *)&pmaster->pnode_quiesce);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#507: FILE: arch/x86/kernel/tlb_uv.c:413:
+				printk(KERN_INFO

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#510: FILE: arch/x86/kernel/tlb_uv.c:416:
+			udelay(1000); /*source side timeouts are long*/

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: arch/x86/kernel/tlb_uv.c:435:
+				uv_reset_with_ipi(&bau_desc->distribution,
+							this_cpu);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#554: FILE: arch/x86/kernel/tlb_uv.c:439:
+			return FLUSH_RETRY;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: arch/x86/kernel/tlb_uv.c:449:
+					uv_reset_busy(bcp, mmr_offset,
+							right_shift, stat);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: arch/x86/kernel/tlb_uv.c:496:
+	while (!atomic_add_unless(&pmaster->active_descripter_count, 1,
+						pmaster->max_concurrent)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#675: FILE: arch/x86/kernel/tlb_uv.c:552:
+	if (completion_status == FLUSH_COMPLETE && try > 1)
[...]
+	else if (completion_status == FLUSH_GIVEUP) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#838: FILE: arch/x86/kernel/tlb_uv.c:724:
+		uv_bau_process_message(msg, msg_slot, sw_ack_slot, bcp,
+					va_queue_first, va_queue_last);

WARNING:LINE_SPACING: Missing a blank line after declarations
#879: FILE: arch/x86/kernel/tlb_uv.c:822:
+	unsigned long flags, us;
+	local_irq_save(flags);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#896: FILE: arch/x86/kernel/tlb_uv.c:839:
+	cyc = (ns << CYC2NS_SCALE_FACTOR)/(per_cpu(cyc2ns, smp_processor_id()));
 	                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#946: FILE: arch/x86/kernel/tlb_uv.c:880:
 
+

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#972: FILE: arch/x86/kernel/tlb_uv.c:903:
+	if (strict_strtol(optstr, 10, &input_arg) < 0) {

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#980: FILE: arch/x86/kernel/tlb_uv.c:910:
+		printk(KERN_DEBUG "Sender statistics:\n");

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#998: FILE: arch/x86/kernel/tlb_uv.c:922:
+		"retried:  destination timeouts sucessfully retried\n");
 		                                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1008: FILE: arch/x86/kernel/tlb_uv.c:929:
+		printk(KERN_DEBUG "Destination side statistics:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1018: FILE: arch/x86/kernel/tlb_uv.c:934:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1020: FILE: arch/x86/kernel/tlb_uv.c:936:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1022: FILE: arch/x86/kernel/tlb_uv.c:938:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1024: FILE: arch/x86/kernel/tlb_uv.c:940:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1026: FILE: arch/x86/kernel/tlb_uv.c:942:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1028: FILE: arch/x86/kernel/tlb_uv.c:944:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1030: FILE: arch/x86/kernel/tlb_uv.c:946:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1032: FILE: arch/x86/kernel/tlb_uv.c:948:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1034: FILE: arch/x86/kernel/tlb_uv.c:950:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1036: FILE: arch/x86/kernel/tlb_uv.c:952:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1048: FILE: arch/x86/kernel/tlb_uv.c:961:
+		printk(KERN_DEBUG "Set BAU max concurrent:%d\n",

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1134: FILE: arch/x86/kernel/tlb_uv.c:1028:
+	bau_desc = (struct bau_desc *)kmalloc_node(sizeof(struct bau_desc)*
 	                                                                  ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1134: FILE: arch/x86/kernel/tlb_uv.c:1028:
+	bau_desc = (struct bau_desc *)kmalloc_node(sizeof(struct bau_desc)*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*bau_desc)...) over kmalloc_node(sizeof(struct bau_desc)...)
#1134: FILE: arch/x86/kernel/tlb_uv.c:1028:
+	bau_desc = (struct bau_desc *)kmalloc_node(sizeof(struct bau_desc)*

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1137: FILE: arch/x86/kernel/tlb_uv.c:1030:
+	BUG_ON(!bau_desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1154: FILE: arch/x86/kernel/tlb_uv.c:1044:
+	for (i = 0, bd2 = bau_desc; i < (UV_ADP_SIZE*UV_ITEMS_PER_DESCRIPTOR);
 	                                            ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1309: FILE: arch/x86/kernel/tlb_uv.c:1172:
+	blade_descs = (struct blade_desc *)
+		kmalloc(nblades * sizeof(struct blade_desc), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1322: FILE: arch/x86/kernel/tlb_uv.c:1185:
+		socket = (cpu_physical_id(cpu)>>5)&1;
 		                              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1322: FILE: arch/x86/kernel/tlb_uv.c:1185:
+		socket = (cpu_physical_id(cpu)>>5)&1;
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1324: FILE: arch/x86/kernel/tlb_uv.c:1187:
+			bdp->num_sockets = socket+1;
 			                         ^

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#1412: FILE: arch/x86/kernel/tlb_uv.c:1269:
+				      ((unsigned long)1 << 63));

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1581: FILE: arch/x86/include/asm/uv/uv_bau.h:299:
+	spinlock_t quiesce_lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1645: FILE: arch/x86/include/asm/uv/uv_bau.h:357:
 }
+static inline int bau_node_weight(struct bau_target_nodemask *dstp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1682: FILE: arch/x86/include/asm/uv/uv_bau.h:399:
+	short __i = i;
+	asm volatile(LOCK_PREFIX "xaddw %0, %1"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001007.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 31 warnings, 38 checks, 1611 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001007.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
