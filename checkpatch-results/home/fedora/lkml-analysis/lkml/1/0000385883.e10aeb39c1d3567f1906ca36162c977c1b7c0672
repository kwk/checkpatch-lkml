CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/spinlock.h:166:
+extern int _atomic_dec_and_spin_lock(spinlock_t *lock, atomic_t *atomic);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#281: FILE: include/linux/spinlock.h:357:
+#define spin_is_locked(lock)	\

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#297: FILE: include/linux/spinlock.h:370:
+#define spin_trylock(lock)	\
+	__cond_lock(lock, PICK_SPIN_OP_RET(__spin_trylock, _spin_trylock, lock))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#302: FILE: include/linux/spinlock.h:373:
+#define read_trylock(lock)	\
+	__cond_lock(lock, PICK_RW_OP_RET(__read_trylock, _read_trylock, lock))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#307: FILE: include/linux/spinlock.h:376:
+#define write_trylock(lock)	\
+	__cond_lock(lock, PICK_RW_OP_RET(__write_trylock, _write_trylock, lock))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#312: FILE: include/linux/spinlock.h:380:
+^I__cond_lock(lock, PICK_RW_OP_RET(__write_trylock_irqsave, ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#366: FILE: include/linux/spinlock.h:422:
+^Iflags = PICK_SPIN_OP_RET(__spin_lock_irqsave_nested, ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#383: FILE: include/linux/spinlock.h:439:
+	flags = PICK_RW_OP_RET(__write_lock_irqsave, _write_lock_irqsave,lock);\
 	                                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#450: FILE: include/linux/spinlock.h:463:
+#define spin_unlock_irqrestore(lock, flags)				\
+do {									\
+	BUILD_CHECK_IRQ_FLAGS(flags);					\
+	PICK_SPIN_OP(__spin_unlock_irqrestore, _spin_unlock_irqrestore,	\
+		     lock, flags);					\
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#472: FILE: include/linux/spinlock.h:475:
+#define read_unlock_irqrestore(lock, flags)				\
+do {									\
+	BUILD_CHECK_IRQ_FLAGS(flags);					\
+	PICK_RW_OP(__read_unlock_irqrestore, _read_unlock_irqrestore,	\
+		lock, flags);						\
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#488: FILE: include/linux/spinlock.h:486:
+#define write_unlock_irqrestore(lock, flags)				\
+do {									\
+	BUILD_CHECK_IRQ_FLAGS(flags);					\
+	PICK_RW_OP(__write_unlock_irqrestore, _write_unlock_irqrestore, \
+		lock, flags);						\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#502: FILE: include/linux/spinlock.h:498:
+#define spin_trylock_bh(lock)	\
+	__cond_lock(lock, PICK_SPIN_OP_RET(__spin_trylock_bh, _spin_trylock_bh,\
+		lock))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#506: FILE: include/linux/spinlock.h:502:
+#define spin_trylock_irq(lock)	\
+	__cond_lock(lock, PICK_SPIN_OP_RET(__spin_trylock_irq,		\
+		__spin_trylock_irq, lock))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: include/linux/spinlock.h:507:
+^I__cond_lock(lock, PICK_SPIN_OP_RET(__spin_trylock_irqsave, ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: include/linux/spinlock.h:513:
+  extern int __atomic_dec_and_spin_lock(raw_spinlock_t *lock, atomic_t *atomic);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#519: FILE: include/linux/spinlock.h:513:
+  extern int __atomic_dec_and_spin_lock(raw_spinlock_t *lock, atomic_t *atomic);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 5 warnings, 10 checks, 505 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
