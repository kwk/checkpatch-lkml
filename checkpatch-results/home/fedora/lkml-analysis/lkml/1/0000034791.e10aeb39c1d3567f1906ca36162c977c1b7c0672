CHECK:BIT_MACRO: Prefer using the BIT macro
#94: FILE: drivers/regulator/mc13783-regulator.c:41:
+#define MC13783_REG_REGULATORSETTING0_VRFCPVSEL_M	(1 << 13)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#95: FILE: drivers/regulator/mc13783-regulator.c:42:
+#define MC13783_REG_REGULATORSETTING0_VSIMVSEL_M	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: drivers/regulator/mc13783-regulator.c:43:
+#define MC13783_REG_REGULATORSETTING0_VESIMVSEL_M	(1 << 15)

WARNING:CONST_STRUCT: struct regulator_ops should normally be const
#193: FILE: drivers/regulator/mc13783-regulator.c:165:
+static struct regulator_ops mc13783_fixed_regulator_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_voltages' - possible side-effects?
#216: FILE: drivers/regulator/mc13783-regulator.c:185:
+#define MC13783_FIXED_DEFINE(prefix, _name, _reg, _voltages)		\
+	[MC13783_ ## prefix ## _ ## _name] = {				\
+		.desc = {						\
+			.name = #prefix "_" #_name,			\
+			.n_voltages = ARRAY_SIZE(_voltages),		\
+			.ops = &mc13783_fixed_regulator_ops,		\
+			.type = REGULATOR_VOLTAGE,			\
+			.id = MC13783_ ## prefix ## _ ## _name,		\
+			.owner = THIS_MODULE,				\
+		},							\
+		.reg = MC13783_REG_ ## _reg,				\
+		.enable_bit = MC13783_REG_ ## _reg ## _ ## _name ## EN,	\
+		.voltages =  _voltages,					\
+	}

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#278: FILE: drivers/regulator/mc13783-regulator.c:223:
+	MC13783_DEFINE_REGU(VIOLO, REGULATORMODE0, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#280: FILE: drivers/regulator/mc13783-regulator.c:225:
+	MC13783_DEFINE_REGU(VDIG, REGULATORMODE0, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#282: FILE: drivers/regulator/mc13783-regulator.c:227:
+	MC13783_DEFINE_REGU(VGEN, REGULATORMODE0, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#284: FILE: drivers/regulator/mc13783-regulator.c:229:
+	MC13783_DEFINE_REGU(VRFDIG, REGULATORMODE0, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#286: FILE: drivers/regulator/mc13783-regulator.c:231:
+	MC13783_DEFINE_REGU(VRFREF, REGULATORMODE0, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#288: FILE: drivers/regulator/mc13783-regulator.c:233:
+	MC13783_DEFINE_REGU(VRFCP, REGULATORMODE0, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#290: FILE: drivers/regulator/mc13783-regulator.c:235:
+	MC13783_DEFINE_REGU(VSIM, REGULATORMODE1, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#292: FILE: drivers/regulator/mc13783-regulator.c:237:
+	MC13783_DEFINE_REGU(VESIM, REGULATORMODE1, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#294: FILE: drivers/regulator/mc13783-regulator.c:239:
+	MC13783_DEFINE_REGU(VCAM, REGULATORMODE1, REGULATORSETTING0,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#297: FILE: drivers/regulator/mc13783-regulator.c:242:
+	MC13783_DEFINE_REGU(VVIB, REGULATORMODE1, REGULATORSETTING1,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#299: FILE: drivers/regulator/mc13783-regulator.c:244:
+	MC13783_DEFINE_REGU(VRF1, REGULATORMODE1, REGULATORSETTING1,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#301: FILE: drivers/regulator/mc13783-regulator.c:246:
+	MC13783_DEFINE_REGU(VRF2, REGULATORMODE1, REGULATORSETTING1,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#303: FILE: drivers/regulator/mc13783-regulator.c:248:
+	MC13783_DEFINE_REGU(VMMC1, REGULATORMODE1, REGULATORSETTING1,	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#305: FILE: drivers/regulator/mc13783-regulator.c:250:
+	MC13783_DEFINE_REGU(VMMC2, REGULATORMODE1, REGULATORSETTING1,	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/regulator/mc13783-regulator.c:313:
+static int mc13783_regulator_list_voltage(struct regulator_dev *rdev,
+						unsigned selector)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#319: FILE: drivers/regulator/mc13783-regulator.c:313:
+						unsigned selector)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: drivers/regulator/mc13783-regulator.c:324:
+static int mc13783_get_best_voltage_index(struct regulator_dev *rdev,
+						int min_uV, int max_uV)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: drivers/regulator/mc13783-regulator.c:349:
+		dev_warn(&rdev->dev, "no possible value for %d<=x<=%d uV\n",
+				min_uV, max_uV);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: drivers/regulator/mc13783-regulator.c:356:
+static int mc13783_regulator_set_voltage(struct regulator_dev *rdev,
+						int min_uV, int max_uV)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#373: FILE: drivers/regulator/mc13783-regulator.c:367:
+	dev_dbg(rdev_get_dev(rdev), "%s best value: %d \n", __func__, value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/regulator/mc13783-regulator.c:373:
+	ret = mc13783_reg_rmw(priv->mc13783, mc13783_regulators[id].vsel_reg,
+			mc13783_regulators[id].vsel_mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: drivers/regulator/mc13783-regulator.c:390:
+	ret = mc13783_reg_read(priv->mc13783,
+				mc13783_regulators[id].vsel_reg, &val);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#407: FILE: drivers/regulator/mc13783-regulator.c:401:
+	BUG_ON(val < 0 || val > mc13783_regulators[id].desc.n_voltages);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: drivers/regulator/mc13783-regulator.c:416:
+static int mc13783_fixed_regulator_set_voltage(struct regulator_dev *rdev,
+						int min_uV, int max_uV)

WARNING:CONST_STRUCT: struct regulator_ops should normally be const
#445: FILE: drivers/regulator/mc13783-regulator.c:439:
+static struct regulator_ops mc13783_fixed_regulator_ops = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#454: FILE: drivers/regulator/mc13783-regulator.c:448:
 static int __devinit mc13783_regulator_probe(struct platform_device *pdev)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 11 checks, 392 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
