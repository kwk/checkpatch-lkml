WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
flat fair queuing support where there is only one group, "root group" and all

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: block/Kconfig.iosched:5:
+config ELV_FAIR_QUEUING
+	bool "Elevator Fair Queuing Support"
+	default n
+	---help---
+	  Traditionally only cfq had notion of multiple queues and it did
+	  fair queuing at its own. With the cgroups and need of controlling
+	  IO, now even the simple io schedulers like noop, deadline, as will
+	  have one queue per cgroup and will need hierarchical fair queuing.
+	  Instead of every io scheduler implementing its own fair queuing
+	  logic, this option enables fair queuing in elevator layer so that
+	  other ioschedulers can make use of it.
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: block/elevator-fq.c:257:
+__enqueue_io_entity(struct io_service_tree *st, struct io_entity *entity,
+			int add_front)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'key == entity_key(st, entry)'
#243: FILE: block/elevator-fq.c:269:
+		if (key < entity_key(st, entry) ||
+			(add_front && (key == entity_key(st, entry)))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: block/elevator-fq.c:270:
+		if (key < entity_key(st, entry) ||
+			(add_front && (key == entity_key(st, entry)))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: block/elevator-fq.c:427:
+	BUG_ON(ioq->nr_queued);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#342: FILE: block/elevator-fq.c:428:
+	BUG_ON(elv_ioq_busy(ioq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#343: FILE: block/elevator-fq.c:429:
+	BUG_ON(efqd->active_queue == ioq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#346: FILE: block/elevator-fq.c:432:
+	BUG_ON(!e->ops->elevator_free_sched_queue_fn);

CHECK:SPACING: No space is necessary after a cast
#370: FILE: block/elevator-fq.c:456:
+	char *p = (char *) page;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#372: FILE: block/elevator-fq.c:458:
+	*var = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#376: FILE: block/elevator-fq.c:462:
+#define SHOW_FUNCTION(__FUNC, __VAR, __CONV)				\
+ssize_t __FUNC(struct elevator_queue *e, char *page)		\
+{									\
+	struct elv_fq_data *efqd = e->efqd;				\
+	unsigned int __data = __VAR;					\
+	if (__CONV)							\
+		__data = jiffies_to_msecs(__data);			\
+	return elv_var_show(__data, (page));				\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#385: FILE: block/elevator-fq.c:471:
+}
+SHOW_FUNCTION(elv_slice_sync_show, efqd->elv_slice[1], 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#386: FILE: block/elevator-fq.c:472:
+EXPORT_SYMBOL(elv_slice_sync_show);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#388: FILE: block/elevator-fq.c:474:
+EXPORT_SYMBOL(elv_slice_async_show);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__PTR' - possible side-effects?
#391: FILE: block/elevator-fq.c:477:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)\
+{									\
+	struct elv_fq_data *efqd = e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MIN' - possible side-effects?
#391: FILE: block/elevator-fq.c:477:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)\
+{									\
+	struct elv_fq_data *efqd = e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MAX' - possible side-effects?
#391: FILE: block/elevator-fq.c:477:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)\
+{									\
+	struct elv_fq_data *efqd = e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#391: FILE: block/elevator-fq.c:477:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)\
+{									\
+	struct elv_fq_data *efqd = e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#407: FILE: block/elevator-fq.c:493:
+}
+STORE_FUNCTION(elv_slice_sync_store, &efqd->elv_slice[1], 1, UINT_MAX, 1);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#408: FILE: block/elevator-fq.c:494:
+EXPORT_SYMBOL(elv_slice_sync_store);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#410: FILE: block/elevator-fq.c:496:
+EXPORT_SYMBOL(elv_slice_async_store);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: block/elevator-fq.c:550:
+int elv_init_ioq(struct elevator_queue *eq, struct io_queue *ioq, pid_t pid,
+		int is_sync)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioq"
#482: FILE: block/elevator-fq.c:568:
+	if (ioq != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: block/elevator-fq.c:592:
+void *elv_io_group_async_queue_prio(struct io_group *iog, int ioprio_class,
+						int ioprio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#521: FILE: block/elevator-fq.c:607:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: block/elevator-fq.c:617:
+void elv_io_group_set_async_queue(struct io_group *iog, int ioprio_class,
+					int ioprio, struct io_queue *ioq)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: block/elevator-fq.c:630:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: block/elevator-fq.c:642:
+static struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#562: FILE: block/elevator-fq.c:648:
+	if (iog == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#602: FILE: block/elevator-fq.c:688:
+	BUG_ON(efqd->active_queue != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "efqd->active_queue"
#602: FILE: block/elevator-fq.c:688:
+	BUG_ON(efqd->active_queue != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: block/elevator-fq.c:714:
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d",
+						efqd->busy_queues);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#629: FILE: block/elevator-fq.c:715:
+		ioq->slice_start = ioq->slice_end = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:REPEATED_WORD: Possible repeated word: 'this'
#657: FILE: block/elevator-fq.c:743:
+		 * io scheduler selected the next queue for us. Pass this
+		 * this info back to io scheudler. cfq currently uses it

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: block/elevator-fq.c:770:
+	BUG_ON(elv_ioq_busy(ioq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#685: FILE: block/elevator-fq.c:771:
+	BUG_ON(ioq == efqd->active_queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#696: FILE: block/elevator-fq.c:782:
+	BUG_ON(!elv_ioq_busy(ioq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#697: FILE: block/elevator-fq.c:783:
+	BUG_ON(ioq->nr_queued);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#700: FILE: block/elevator-fq.c:786:
+	BUG_ON(efqd->busy_queues == 0);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#744: FILE: block/elevator-fq.c:830:
+	if (!ioq->slice_end || ioq->slice_start == jiffies) {

WARNING:SPLIT_STRING: quoted string split across lines
#757: FILE: block/elevator-fq.c:843:
+	elv_log_ioq(efqd, ioq, "disp_start = %lu sl_start= %lu sl_end=%lu,"
+			" jiffies=%lu", ioq->dispatch_start, ioq->slice_start,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: block/elevator-fq.c:846:
+	elv_log_ioq(efqd, ioq, "sl_used=%ld, overshoot=%ld sect=%lu",
+				slice_used, slice_overshoot, ioq->nr_sectors);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#763: FILE: block/elevator-fq.c:849:
+	BUG_ON(ioq != efqd->active_queue);

CHECK:BRACES: braces {} should be used on all arms of this statement
#770: FILE: block/elevator-fq.c:856:
+	if (!ioq->nr_queued)
[...]
+	else if (!elv_ioq_sync(ioq)) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: block/elevator-fq.c:882:
+static int elv_should_preempt(struct request_queue *q, struct io_queue *new_ioq,
+			struct request *rq)

WARNING:TYPO_SPELLING: 'pre-empt' may be misspelled - perhaps 'preempt'?
#811: FILE: block/elevator-fq.c:897:
+	 * Allow an RT request to pre-empt an ongoing non-RT cfqq timeslice.
 	                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#815: FILE: block/elevator-fq.c:901:
+	if (new_entity->ioprio_class == IOPRIO_CLASS_RT
+	    && entity->ioprio_class != IOPRIO_CLASS_RT)

WARNING:TYPO_SPELLING: 'pre-empt' may be misspelled - perhaps 'preempt'?
#818: FILE: block/elevator-fq.c:904:
+	 * Allow an BE request to pre-empt an ongoing IDLE clas timeslice.
 	                          ^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#822: FILE: block/elevator-fq.c:908:
+	if (new_entity->ioprio_class == IOPRIO_CLASS_BE
+	    && entity->ioprio_class == IOPRIO_CLASS_IDLE)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: block/elevator-fq.c:946:
+	BUG_ON(!efqd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#861: FILE: block/elevator-fq.c:947:
+	BUG_ON(!ioq);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#913: FILE: block/elevator-fq.c:999:
+	if (ioq) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: block/elevator-fq.c:1047:
+static inline struct io_queue *elv_close_cooperator(struct request_queue *q,
+					struct io_queue *ioq)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioq"
#985: FILE: block/elevator-fq.c:1071:
+	if (ioq == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1053: FILE: block/elevator-fq.c:1139:
+	BUG_ON(!ioq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1057: FILE: block/elevator-fq.c:1143:
+	BUG_ON(!efqd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1068: FILE: block/elevator-fq.c:1154:
+	BUG_ON(!ioq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1084: FILE: block/elevator-fq.c:1170:
+	elv_log_ioq(efqd, rq->ioq, "activate rq, drv=%d",
+						efqd->rq_in_driver);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: block/elevator-fq.c:1183:
+	elv_log_ioq(efqd, rq->ioq, "deactivate rq, drv=%d",
+						efqd->rq_in_driver);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: block/elevator-fq.c:1203:
+	elv_log_ioq(efqd, ioq, "complete rq_queued=%d drv=%d disp=%d",
+			ioq->nr_queued, efqd->rq_in_driver,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1139: FILE: block/elevator-fq.c:1225:
+		else if (!ioq->nr_queued && !elv_close_cooperator(q, ioq)
+			 && sync && !rq_noidle(rq))

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#1154: FILE: block/elevator-fq.c:1240:
+	if (elv_ioq_pool)
+		kmem_cache_destroy(elv_ioq_pool);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#1193: FILE: block/elevator-fq.c:1279:
+	if (iog == NULL)

CHECK:SPACING: No space is necessary after a cast
#1212: FILE: block/elevator-fq.c:1298:
+	efqd->idle_slice_timer.data = (unsigned long) efqd;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1238: FILE: block/elevator-fq.c:1324:
+	BUG_ON(timer_pending(&efqd->idle_slice_timer));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1266: FILE: block/elevator-fq.h:27:
+	__ATTR(name, S_IRUGO|S_IWUSR, elv_##name##_show, elv_##name##_store)
 	                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1266: FILE: block/elevator-fq.h:27:
+	__ATTR(name, S_IRUGO|S_IWUSR, elv_##name##_show, elv_##name##_store)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ioq' - possible side-effects?
#1332: FILE: block/elevator-fq.h:125:
+#define elv_log_ioq(efqd, ioq, fmt, args...) \
+	blk_add_trace_msg((efqd)->queue, "elv%d%c " fmt, (ioq)->pid,	\
+				elv_ioq_sync(ioq) ? 'S' : 'A', ##args)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1431: FILE: block/elevator-fq.h:275:
+elv_init_ioq_sched_queue(struct elevator_queue *eq, struct io_queue *ioq,
+					void *sched_queue)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1448: FILE: block/elevator-fq.h:292:
+extern ssize_t elv_slice_sync_show(struct elevator_queue *q, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1449: FILE: block/elevator-fq.h:293:
+extern ssize_t elv_slice_sync_store(struct elevator_queue *q, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1450: FILE: block/elevator-fq.h:294:
+extern ssize_t elv_slice_sync_store(struct elevator_queue *q, const char *name,
+						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1451: FILE: block/elevator-fq.h:295:
+extern ssize_t elv_slice_async_show(struct elevator_queue *q, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1452: FILE: block/elevator-fq.h:296:
+extern ssize_t elv_slice_async_store(struct elevator_queue *q, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1453: FILE: block/elevator-fq.h:297:
+extern ssize_t elv_slice_async_store(struct elevator_queue *q, const char *name,
+						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1456: FILE: block/elevator-fq.h:300:
+extern struct elv_fq_data *elv_alloc_fq_data(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: block/elevator-fq.h:301:
+extern struct elv_fq_data *elv_alloc_fq_data(struct request_queue *q,
+					struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1458: FILE: block/elevator-fq.h:302:
+extern void elv_release_fq_data(struct elv_fq_data *efqd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1459: FILE: block/elevator-fq.h:303:
+extern int elv_init_fq_data(struct request_queue *q, struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1460: FILE: block/elevator-fq.h:304:
+extern void elv_exit_fq_data(struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1462: FILE: block/elevator-fq.h:306:
+extern void elv_ioq_request_add(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1463: FILE: block/elevator-fq.h:307:
+extern void elv_ioq_request_removed(struct elevator_queue *e,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1464: FILE: block/elevator-fq.h:308:
+extern void elv_ioq_request_removed(struct elevator_queue *e,
+					struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1465: FILE: block/elevator-fq.h:309:
+extern void elv_dispatched_request_fair(struct elevator_queue *e,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1468: FILE: block/elevator-fq.h:312:
+extern void elv_activate_rq_fair(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1469: FILE: block/elevator-fq.h:313:
+extern void elv_deactivate_rq_fair(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1471: FILE: block/elevator-fq.h:315:
+extern void elv_ioq_completed_request(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1472: FILE: block/elevator-fq.h:316:
+extern void elv_ioq_completed_request(struct request_queue *q,
+				struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1474: FILE: block/elevator-fq.h:318:
+extern void *elv_select_ioq(struct request_queue *q, int force);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1478: FILE: block/elevator-fq.h:322:
+extern void elv_ioq_slice_expired(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1479: FILE: block/elevator-fq.h:323:
+extern void elv_ioq_slice_expired(struct request_queue *q,
+					struct io_queue *ioq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1480: FILE: block/elevator-fq.h:324:
+extern int elv_init_ioq(struct elevator_queue *eq, struct io_queue *ioq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1481: FILE: block/elevator-fq.h:325:
+extern int elv_init_ioq(struct elevator_queue *eq, struct io_queue *ioq,
+				pid_t pid, int is_sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1482: FILE: block/elevator-fq.h:326:
+extern void elv_init_ioq_io_group(struct io_queue *ioq, struct io_group *iog);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1483: FILE: block/elevator-fq.h:327:
+extern void elv_schedule_dispatch(struct request_queue *q);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1484: FILE: block/elevator-fq.h:328:
+extern void *elv_io_group_async_queue_prio(struct io_group *iog,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1485: FILE: block/elevator-fq.h:329:
+extern void *elv_io_group_async_queue_prio(struct io_group *iog,
+						int ioprio_class, int ioprio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1486: FILE: block/elevator-fq.h:330:
+extern void elv_io_group_set_async_queue(struct io_group *iog, int ioprio_class,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1487: FILE: block/elevator-fq.h:331:
+extern void elv_io_group_set_async_queue(struct io_group *iog, int ioprio_class,
+					int ioprio, struct io_queue *ioq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1488: FILE: block/elevator-fq.h:332:
+extern struct io_queue *elv_alloc_ioq(struct request_queue *q, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1489: FILE: block/elevator-fq.h:333:
+extern void elv_free_ioq(struct io_queue *ioq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1490: FILE: block/elevator-fq.h:334:
+extern struct io_group *ioq_to_io_group(struct io_queue *ioq);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1498: FILE: block/elevator-fq.h:342:
+}
+static inline void elv_release_fq_data(struct elv_fq_data *efqd) {}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1581: FILE: block/elevator.c:265:
+	if (eq->hash)
+		kfree(eq->hash);

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1764: FILE: include/linux/elevator.h:72:
+	elevator_free_sched_queue_fn *elevator_free_sched_queue_fn;
 	                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1818: FILE: include/linux/elevator.h:256:
+extern void *elv_get_sched_queue(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1819: FILE: include/linux/elevator.h:257:
+extern void *elv_select_sched_queue(struct request_queue *q, int force);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078456.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 36 warnings, 72 checks, 1666 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078456.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
