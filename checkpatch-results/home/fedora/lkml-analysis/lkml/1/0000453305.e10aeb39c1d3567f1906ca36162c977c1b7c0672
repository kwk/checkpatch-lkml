WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#define XXX native_XXX.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: include/asm-i386/desc.h:103:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#444: FILE: include/asm-i386/desc.h:106:
+	asm volatile("ltr %w0"::"q" (GDT_ENTRY_TSS*8));
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#447: FILE: include/asm-i386/desc.h:109:
+static inline void native_load_gdt(const struct Xgt_desc_struct *dtr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#459: FILE: include/asm-i386/desc.h:121:
+	asm ("sgdt %0":"=m" (*dtr));
 	              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#464: FILE: include/asm-i386/desc.h:126:
+	asm ("sidt %0":"=m" (*dtr));
 	              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#470: FILE: include/asm-i386/desc.h:132:
+	unsigned long tr;
+	asm ("str %0":"=r" (tr));

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#470: FILE: include/asm-i386/desc.h:132:
+	asm ("str %0":"=r" (tr));
 	             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#528: FILE: include/asm-i386/irqflags.h:17:
+	unsigned long f;
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#528: FILE: include/asm-i386/irqflags.h:17:
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);
 	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#528: FILE: include/asm-i386/irqflags.h:17:
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#534: FILE: include/asm-i386/irqflags.h:23:
+	asm volatile("pushl %0 ; popfl": /* no output */
 	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#535: FILE: include/asm-i386/irqflags.h:24:
+			     :"g" (f)
 			     ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#536: FILE: include/asm-i386/irqflags.h:25:
+			     :"memory", "cc");
 			     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#541: FILE: include/asm-i386/irqflags.h:30:
+	asm volatile("cli": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#541: FILE: include/asm-i386/irqflags.h:30:
+	asm volatile("cli": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#546: FILE: include/asm-i386/irqflags.h:35:
+	asm volatile("sti": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#546: FILE: include/asm-i386/irqflags.h:35:
+	asm volatile("sti": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#551: FILE: include/asm-i386/irqflags.h:40:
+	asm volatile("sti; hlt": : :"memory");
 	                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#551: FILE: include/asm-i386/irqflags.h:40:
+	asm volatile("sti; hlt": : :"memory");
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#556: FILE: include/asm-i386/irqflags.h:45:
+	asm volatile("hlt": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#556: FILE: include/asm-i386/irqflags.h:45:
+	asm volatile("hlt": : :"memory");
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#639: FILE: include/asm-i386/msr.h:15:
+ ^I^I     ".section __ex_table,\"a\"\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#639: FILE: include/asm-i386/msr.h:15:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: include/asm-i386/msr.h:15:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#641: FILE: include/asm-i386/msr.h:17:
+^I^I     "   .long ^I2b,3b\n\t"$

WARNING:LINE_SPACING: Missing a blank line after declarations
#652: FILE: include/asm-i386/msr.h:28:
+	int err;
+	asm volatile("2: wrmsr ; xorl %0,%0\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: include/asm-i386/msr.h:33:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#657: FILE: include/asm-i386/msr.h:33:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: include/asm-i386/msr.h:33:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: include/asm-i386/msr.h:35:
+^I^I     "   .long ^I2b,3b\n\t"$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#662: FILE: include/asm-i386/msr.h:38:
+		     : "c" (msr), "0" ((u32)val), "d" ((u32)(val>>32)),
 		                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#670: FILE: include/asm-i386/msr.h:46:
+	unsigned long long val;
+	asm volatile("rdtsc" : "=A" (val));

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: include/asm-i386/msr.h:53:
+	unsigned long long val;
+	asm volatile("rdpmc" : "=A" (val));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#703: FILE: include/asm-i386/msr.h:67:
+#define rdmsr(msr,val1,val2)						\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#703: FILE: include/asm-i386/msr.h:67:
+#define rdmsr(msr,val1,val2)						\
                       ^

ERROR:SPACING: space required before the open parenthesis '('
#709: FILE: include/asm-i386/msr.h:73:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#711: FILE: include/asm-i386/msr.h:75:
+#define wrmsr(msr,val1,val2)						\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#711: FILE: include/asm-i386/msr.h:75:
+#define wrmsr(msr,val1,val2)						\
                       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val1' may be better as '(val1)' to avoid precedence issues
#711: FILE: include/asm-i386/msr.h:75:
+#define wrmsr(msr,val1,val2)						\
+	do {								\
+		native_write_msr(msr, ((unsigned long long)val2 << 32) | val1);	\
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val2' may be better as '(val2)' to avoid precedence issues
#711: FILE: include/asm-i386/msr.h:75:
+#define wrmsr(msr,val1,val2)						\
+	do {								\
+		native_write_msr(msr, ((unsigned long long)val2 << 32) | val1);	\
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#711: FILE: include/asm-i386/msr.h:75:
+#define wrmsr(msr,val1,val2)						\
+	do {								\
+		native_write_msr(msr, ((unsigned long long)val2 << 32) | val1);	\
+	} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#714: FILE: include/asm-i386/msr.h:78:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#716: FILE: include/asm-i386/msr.h:80:
+#define rdmsrl(msr,val)					\
                   ^

ERROR:SPACING: space required before the open parenthesis '('
#720: FILE: include/asm-i386/msr.h:84:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#741: FILE: include/asm-i386/msr.h:95:
+#define wrmsr_safe(msr,val1,val2)						\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#741: FILE: include/asm-i386/msr.h:95:
+#define wrmsr_safe(msr,val1,val2)						\
                            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val1' may be better as '(val1)' to avoid precedence issues
#741: FILE: include/asm-i386/msr.h:95:
+#define wrmsr_safe(msr,val1,val2)						\
+	(native_write_msr(msr, ((unsigned long long)val2 << 32) | val1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val2' may be better as '(val2)' to avoid precedence issues
#741: FILE: include/asm-i386/msr.h:95:
+#define wrmsr_safe(msr,val1,val2)						\
+	(native_write_msr(msr, ((unsigned long long)val2 << 32) | val1))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#767: FILE: include/asm-i386/msr.h:99:
+#define rdmsr_safe(msr,val1,val2)						\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#767: FILE: include/asm-i386/msr.h:99:
+#define rdmsr_safe(msr,val1,val2)						\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#776: FILE: include/asm-i386/msr.h:108:
+#define rdtsc(low,high)						\
                  ^

ERROR:SPACING: space required before the open parenthesis '('
#781: FILE: include/asm-i386/msr.h:113:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#783: FILE: include/asm-i386/msr.h:115:
+#define rdtscl(low)						\
+	do {							\
+		(low) = native_read_tsc();			\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#786: FILE: include/asm-i386/msr.h:118:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: include/asm-i386/msr.h:124:
+#define rdpmc(counter,low,high)					\
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: include/asm-i386/msr.h:124:
+#define rdpmc(counter,low,high)					\
                          ^

ERROR:SPACING: space required before the open parenthesis '('
#801: FILE: include/asm-i386/msr.h:129:
+	} while(0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_struct *' should also have an identifier name
#828: FILE: include/asm-i386/paravirt.h:109:
+	void (*write_ldt_entry)(struct desc_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_struct *' should also have an identifier name
#830: FILE: include/asm-i386/paravirt.h:111:
+	void (*write_gdt_entry)(struct desc_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_struct *' should also have an identifier name
#832: FILE: include/asm-i386/paravirt.h:113:
+	void (*write_idt_entry)(struct desc_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: include/asm-i386/processor.h:151:
+static inline void native_cpuid(unsigned int *eax, unsigned int *ebx,
 					 unsigned int *ecx, unsigned int *edx)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#882: FILE: include/asm-i386/processor.h:557:
 
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#885: FILE: include/asm-i386/processor.h:560:
+^Iunsigned long val = 0; ^I/* Damn you, gcc! */$

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#889: FILE: include/asm-i386/processor.h:564:
+		asm("movl %%db0, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#891: FILE: include/asm-i386/processor.h:566:
+		asm("movl %%db1, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#893: FILE: include/asm-i386/processor.h:568:
+		asm("movl %%db2, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#895: FILE: include/asm-i386/processor.h:570:
+		asm("movl %%db3, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#897: FILE: include/asm-i386/processor.h:572:
+		asm("movl %%db6, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#899: FILE: include/asm-i386/processor.h:574:
+		asm("movl %%db7, %0" :"=r" (val)); break;
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: include/asm-i386/processor.h:576:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#910: FILE: include/asm-i386/processor.h:585:
+		asm("movl %0,%%db0"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#913: FILE: include/asm-i386/processor.h:588:
+		asm("movl %0,%%db1"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#916: FILE: include/asm-i386/processor.h:591:
+		asm("movl %0,%%db2"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#919: FILE: include/asm-i386/processor.h:594:
+		asm("movl %0,%%db3"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#922: FILE: include/asm-i386/processor.h:597:
+		asm("movl %0,%%db6"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#925: FILE: include/asm-i386/processor.h:600:
+		asm("movl %0,%%db7"	: /* no output */ :"r" (value));
 		                   	                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#928: FILE: include/asm-i386/processor.h:603:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#936: FILE: include/asm-i386/processor.h:610:
+static inline void native_set_iopl_mask(unsigned mask)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#959: FILE: include/asm-i386/processor.h:637:
+#define get_debugreg(var, register)				\
+	(var) = native_get_debugreg(register)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#976: FILE: include/asm-i386/system.h:91:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#985: FILE: include/asm-i386/system.h:100:
+	unsigned long val;
+	asm volatile("movl %%cr0,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#985: FILE: include/asm-i386/system.h:100:
+	asm volatile("movl %%cr0,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#991: FILE: include/asm-i386/system.h:106:
+	asm volatile("movl %0,%%cr0": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#991: FILE: include/asm-i386/system.h:106:
+	asm volatile("movl %0,%%cr0": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#997: FILE: include/asm-i386/system.h:112:
+	unsigned long val;
+	asm volatile("movl %%cr2,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#997: FILE: include/asm-i386/system.h:112:
+	asm volatile("movl %%cr2,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1003: FILE: include/asm-i386/system.h:118:
+	asm volatile("movl %0,%%cr2": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1003: FILE: include/asm-i386/system.h:118:
+	asm volatile("movl %0,%%cr2": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1009: FILE: include/asm-i386/system.h:124:
+	unsigned long val;
+	asm volatile("movl %%cr3,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1009: FILE: include/asm-i386/system.h:124:
+	asm volatile("movl %%cr3,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1015: FILE: include/asm-i386/system.h:130:
+	asm volatile("movl %0,%%cr3": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1015: FILE: include/asm-i386/system.h:130:
+	asm volatile("movl %0,%%cr3": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1021: FILE: include/asm-i386/system.h:136:
+	unsigned long val;
+	asm volatile("movl %%cr4,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1021: FILE: include/asm-i386/system.h:136:
+	asm volatile("movl %%cr4,%0\n\t" :"=r" (val));
 	                                 ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1029: FILE: include/asm-i386/system.h:144:
+	asm("1: movl %%cr4, %0		\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1030: FILE: include/asm-i386/system.h:145:
+		"2:				\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1031: FILE: include/asm-i386/system.h:146:
+		".section __ex_table,\"a\"	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1032: FILE: include/asm-i386/system.h:147:
+		".long 1b,2b			\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1033: FILE: include/asm-i386/system.h:148:
+		".previous			\n"

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1034: FILE: include/asm-i386/system.h:149:
+		: "=r" (val): "0" (0));
 		            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1040: FILE: include/asm-i386/system.h:155:
+	asm volatile("movl %0,%%cr4": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1040: FILE: include/asm-i386/system.h:155:
+	asm volatile("movl %0,%%cr4": :"r" (val));
 	                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1045: FILE: include/asm-i386/system.h:160:
+	asm volatile("wbinvd": : :"memory");
 	                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1045: FILE: include/asm-i386/system.h:160:
+	asm volatile("wbinvd": : :"memory");
 	                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1048: FILE: include/asm-i386/system.h:163:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453305.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 60 errors, 30 warnings, 16 checks, 1021 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453305.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
