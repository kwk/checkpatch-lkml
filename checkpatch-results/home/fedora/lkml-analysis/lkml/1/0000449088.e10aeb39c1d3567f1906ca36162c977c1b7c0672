CHECK:SPACING: No space is necessary after a cast
#64: FILE: drivers/usb/gadget/rndis.c:1224:
+	buf = (void *) skb_push (skb, sizeof *header);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#64: FILE: drivers/usb/gadget/rndis.c:1224:
+	buf = (void *) skb_push (skb, sizeof *header);

WARNING:SIZEOF_PARENTHESIS: sizeof *header should be sizeof(*header)
#64: FILE: drivers/usb/gadget/rndis.c:1224:
+	buf = (void *) skb_push (skb, sizeof *header);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#65: FILE: drivers/usb/gadget/rndis.c:1225:
+	memset (buf, 0, sizeof *header);

WARNING:SIZEOF_PARENTHESIS: sizeof *header should be sizeof(*header)
#65: FILE: drivers/usb/gadget/rndis.c:1225:
+	memset (buf, 0, sizeof *header);

CHECK:CAMELCASE: Avoid CamelCase: <MessageType>
#67: FILE: drivers/usb/gadget/rndis.c:1227:
+	put_unaligned(__constant_cpu_to_le32(REMOTE_NDIS_PACKET_MSG), &header->MessageType);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#67: FILE: drivers/usb/gadget/rndis.c:1227:
+	put_unaligned(__constant_cpu_to_le32(REMOTE_NDIS_PACKET_MSG), &header->MessageType);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <MessageLength>
#68: FILE: drivers/usb/gadget/rndis.c:1228:
+	put_unaligned(cpu_to_le32(skb->len), &header->MessageLength);

CHECK:CAMELCASE: Avoid CamelCase: <DataOffset>
#69: FILE: drivers/usb/gadget/rndis.c:1229:
+	put_unaligned(__constant_cpu_to_le32(36), &header->DataOffset);

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#69: FILE: drivers/usb/gadget/rndis.c:1229:
+	put_unaligned(__constant_cpu_to_le32(36), &header->DataOffset);

CHECK:CAMELCASE: Avoid CamelCase: <DataLength>
#70: FILE: drivers/usb/gadget/rndis.c:1230:
+	put_unaligned(cpu_to_le32(skb->len - sizeof *header), &header->DataLength);

WARNING:SIZEOF_PARENTHESIS: sizeof *header should be sizeof(*header)
#70: FILE: drivers/usb/gadget/rndis.c:1230:
+	put_unaligned(cpu_to_le32(skb->len - sizeof *header), &header->DataLength);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 5 checks, 30 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
