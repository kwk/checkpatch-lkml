ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#70: 
--- a/arch/x86/include/asm/unistd_32.h

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#117: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: fs/waitfd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#123: FILE: fs/waitfd.c:2:
+ *  fs/waitfd.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: fs/waitfd.c:23:
+    int ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: fs/waitfd.c:24:
+    pid_t upid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/waitfd.c:29:
+    kfree(file->private_data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: fs/waitfd.c:30:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/waitfd.c:35:
+    struct waitfd_ctx *ctx = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/waitfd.c:36:
+    long value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/waitfd.c:38:
+    poll_wait(file, &current->signal->wait_chldexit, wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/waitfd.c:40:
+    value = peek_waitpid(ctx->upid, ctx->ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: fs/waitfd.c:41:
+    if (value > 0) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#162: FILE: fs/waitfd.c:41:
+    if (value > 0) {
+        return POLLIN;
+    } if (value == -ECHILD) {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: fs/waitfd.c:42:
+        return POLLIN;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/waitfd.c:42:
+        return POLLIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: fs/waitfd.c:43:
+    } if (value == -ECHILD) {$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line (or did you mean 'else if'?)
#164: FILE: fs/waitfd.c:43:
+    } if (value == -ECHILD) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: fs/waitfd.c:44:
+        return POLLIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: fs/waitfd.c:44:
+        return POLLIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: fs/waitfd.c:45:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: fs/waitfd.c:47:
+    return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: fs/waitfd.c:51:
+ * Returns a multiple of the size of a "struct waitfd_siginfo", or a $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#173: FILE: fs/waitfd.c:51:
negative

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/waitfd.c:55:
+static ssize_t waitfd_read(struct file *file, char __user *buf, size_t $

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: fs/waitfd.c:56:
+                 loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: fs/waitfd.c:56:
+                 loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: fs/waitfd.c:58:
+    struct waitfd_ctx *ctx = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: fs/waitfd.c:59:
+    int __user *stat_addr = (int *)buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/waitfd.c:60:
+    int nonblock = file->f_flags & O_NONBLOCK ? WNOHANG: 0;$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#183: FILE: fs/waitfd.c:60:
+    int nonblock = file->f_flags & O_NONBLOCK ? WNOHANG: 0;
                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/waitfd.c:61:
+    ssize_t ret, total = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/waitfd.c:63:
+    count /= sizeof(int);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: fs/waitfd.c:64:
+    if (!count)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: fs/waitfd.c:65:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/waitfd.c:65:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/waitfd.c:67:
+    do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: fs/waitfd.c:68:
+        ret = sys_wait4(ctx->upid, stat_addr, ctx->ops | nonblock,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/waitfd.c:68:
+        ret = sys_wait4(ctx->upid, stat_addr, ctx->ops | nonblock,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: fs/waitfd.c:69:
+                NULL);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: fs/waitfd.c:69:
+        ret = sys_wait4(ctx->upid, stat_addr, ctx->ops | nonblock,
+                NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: fs/waitfd.c:69:
+                NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/waitfd.c:70:
+        if (ret == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/waitfd.c:70:
+        if (ret == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#193: FILE: fs/waitfd.c:70:
+        if (ret == 0)
+            ret = -EAGAIN;

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: fs/waitfd.c:71:
+            ret = -EAGAIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: fs/waitfd.c:71:
+            ret = -EAGAIN;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: fs/waitfd.c:72:
+        if (ret == -ECHILD)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: fs/waitfd.c:72:
+        if (ret == -ECHILD)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#195: FILE: fs/waitfd.c:72:
+        if (ret == -ECHILD)
+            ret = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/waitfd.c:73:
+            ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/waitfd.c:73:
+            ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/waitfd.c:74:
+        if (ret <= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/waitfd.c:74:
+        if (ret <= 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#197: FILE: fs/waitfd.c:74:
+        if (ret <= 0)
+            break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/waitfd.c:75:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/waitfd.c:75:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: fs/waitfd.c:77:
+        stat_addr++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/waitfd.c:77:
+        stat_addr++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: fs/waitfd.c:78:
+        total += sizeof(struct siginfo);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: fs/waitfd.c:78:
+        total += sizeof(struct siginfo);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: fs/waitfd.c:79:
+        nonblock = WNOHANG;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: fs/waitfd.c:79:
+        nonblock = WNOHANG;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/waitfd.c:80:
+    } while (--count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/waitfd.c:82:
+    return total ? total: ret;$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#205: FILE: fs/waitfd.c:82:
+    return total ? total: ret;
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/waitfd.c:86:
+    .release    = waitfd_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: fs/waitfd.c:87:
+    .poll        = waitfd_poll,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: fs/waitfd.c:88:
+    .read        = waitfd_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: fs/waitfd.c:93:
+    int ufd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/waitfd.c:94:
+    struct waitfd_ctx *ctx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: fs/waitfd.c:96:
+    if (ops & ~(WNOHANG|WUNTRACED|WCONTINUED|$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#219: FILE: fs/waitfd.c:96:
+    if (ops & ~(WNOHANG|WUNTRACED|WCONTINUED|
                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#219: FILE: fs/waitfd.c:96:
+    if (ops & ~(WNOHANG|WUNTRACED|WCONTINUED|
                                  ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#219: FILE: fs/waitfd.c:96:
+    if (ops & ~(WNOHANG|WUNTRACED|WCONTINUED|
                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: fs/waitfd.c:97:
+            __WNOTHREAD|__WCLONE|__WALL))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: fs/waitfd.c:97:
+            __WNOTHREAD|__WCLONE|__WALL))$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#220: FILE: fs/waitfd.c:97:
+            __WNOTHREAD|__WCLONE|__WALL))
                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#220: FILE: fs/waitfd.c:97:
+            __WNOTHREAD|__WCLONE|__WALL))
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: fs/waitfd.c:98:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: fs/waitfd.c:98:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/waitfd.c:100:
+    ctx = kmalloc(sizeof(*ctx), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: fs/waitfd.c:101:
+    if (!ctx)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/waitfd.c:102:
+        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: fs/waitfd.c:102:
+        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: fs/waitfd.c:104:
+    ctx->ops = ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: fs/waitfd.c:105:
+    ctx->upid = upid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/waitfd.c:107:
+    ufd = anon_inode_getfd("[waitfd]", &waitfd_fops, ctx,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: fs/waitfd.c:108:
+                   (ops & WNOHANG) ? O_NONBLOCK : 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: fs/waitfd.c:108:
+    ufd = anon_inode_getfd("[waitfd]", &waitfd_fops, ctx,
+                   (ops & WNOHANG) ? O_NONBLOCK : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: fs/waitfd.c:108:
+                   (ops & WNOHANG) ? O_NONBLOCK : 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: fs/waitfd.c:109:
+    if (ufd < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: fs/waitfd.c:110:
+        kfree(ctx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: fs/waitfd.c:110:
+        kfree(ctx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: fs/waitfd.c:112:
+    return ufd;$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#245: FILE: init/Kconfig:686:
+config WAITFD
+    bool "Enable waitfd() system call" if EMBEDDED
+    select ANON_INODES
+    default y
+    help
+      Enable the waitfd() system call that allows receving child state
+      changes from a file descriptor.
+
+      If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'receving' may be misspelled - perhaps 'receiving'?
#250: FILE: init/Kconfig:691:
+      Enable the waitfd() system call that allows receving child state
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: kernel/exit.c:1236:
+    if (infop) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: kernel/exit.c:1237:
+        if (!retval)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: kernel/exit.c:1237:
+        if (!retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#280: FILE: kernel/exit.c:1237:
+        if (!retval)
+            retval = put_user(SIGCHLD, &infop->si_signo);

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: kernel/exit.c:1238:
+            retval = put_user(SIGCHLD, &infop->si_signo);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: kernel/exit.c:1238:
+            retval = put_user(SIGCHLD, &infop->si_signo);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: kernel/exit.c:1239:
+        if (!retval)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: kernel/exit.c:1239:
+        if (!retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#282: FILE: kernel/exit.c:1239:
+        if (!retval)
+            retval = put_user(0, &infop->si_errno);

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: kernel/exit.c:1240:
+            retval = put_user(0, &infop->si_errno);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: kernel/exit.c:1240:
+            retval = put_user(0, &infop->si_errno);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: kernel/exit.c:1241:
+        if (!retval)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: kernel/exit.c:1241:
+        if (!retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#284: FILE: kernel/exit.c:1241:
+        if (!retval)
+            retval = put_user((short)why, &infop->si_code);

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: kernel/exit.c:1242:
+            retval = put_user((short)why, &infop->si_code);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: kernel/exit.c:1242:
+            retval = put_user((short)why, &infop->si_code);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: kernel/exit.c:1243:
+        if (!retval)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: kernel/exit.c:1243:
+        if (!retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#286: FILE: kernel/exit.c:1243:
+        if (!retval)
+            retval = put_user(pid, &infop->si_pid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: kernel/exit.c:1244:
+            retval = put_user(pid, &infop->si_pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: kernel/exit.c:1244:
+            retval = put_user(pid, &infop->si_pid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: kernel/exit.c:1245:
+        if (!retval)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: kernel/exit.c:1245:
+        if (!retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#288: FILE: kernel/exit.c:1245:
+        if (!retval)
+            retval = put_user(uid, &infop->si_uid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: kernel/exit.c:1246:
+            retval = put_user(uid, &infop->si_uid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: kernel/exit.c:1246:
+            retval = put_user(uid, &infop->si_uid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: kernel/exit.c:1247:
+        if (!retval)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: kernel/exit.c:1247:
+        if (!retval)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#290: FILE: kernel/exit.c:1247:
+        if (!retval)
+            retval = put_user(status, &infop->si_status);

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: kernel/exit.c:1248:
+            retval = put_user(status, &infop->si_status);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: kernel/exit.c:1248:
+            retval = put_user(status, &infop->si_status);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: kernel/exit.c:1249:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: kernel/exit.c:1801:
+    struct pid *pid = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: kernel/exit.c:1802:
+    enum pid_type type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: kernel/exit.c:1803:
+    long ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: kernel/exit.c:1805:
+    if (options & ~(WNOHANG|WUNTRACED|WCONTINUED|$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#306: FILE: kernel/exit.c:1805:
+    if (options & ~(WNOHANG|WUNTRACED|WCONTINUED|
                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#306: FILE: kernel/exit.c:1805:
+    if (options & ~(WNOHANG|WUNTRACED|WCONTINUED|
                                      ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#306: FILE: kernel/exit.c:1805:
+    if (options & ~(WNOHANG|WUNTRACED|WCONTINUED|
                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: kernel/exit.c:1806:
+            __WNOTHREAD|__WCLONE|__WALL))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: kernel/exit.c:1806:
+            __WNOTHREAD|__WCLONE|__WALL))$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#307: FILE: kernel/exit.c:1806:
+            __WNOTHREAD|__WCLONE|__WALL))
                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#307: FILE: kernel/exit.c:1806:
+            __WNOTHREAD|__WCLONE|__WALL))
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: kernel/exit.c:1807:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: kernel/exit.c:1807:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: kernel/exit.c:1809:
+    options |= WNOHANG | WNOWAIT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: kernel/exit.c:1811:
+    if (upid == -1)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: kernel/exit.c:1811:
+    if (upid == -1)
[...]
+    else if (upid < 0) {
[...]
+    } else if (upid == 0) {
[...]
+    } else /* upid > 0 */ {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: kernel/exit.c:1812:
+        type = PIDTYPE_MAX;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: kernel/exit.c:1812:
+        type = PIDTYPE_MAX;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: kernel/exit.c:1813:
+    else if (upid < 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: kernel/exit.c:1814:
+        type = PIDTYPE_PGID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: kernel/exit.c:1814:
+        type = PIDTYPE_PGID;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: kernel/exit.c:1815:
+        pid = find_get_pid(-upid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: kernel/exit.c:1815:
+        pid = find_get_pid(-upid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: kernel/exit.c:1816:
+    } else if (upid == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: kernel/exit.c:1817:
+        type = PIDTYPE_PGID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: kernel/exit.c:1817:
+        type = PIDTYPE_PGID;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: kernel/exit.c:1818:
+        pid = get_pid(task_pgrp(current));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: kernel/exit.c:1818:
+        pid = get_pid(task_pgrp(current));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: kernel/exit.c:1819:
+    } else /* upid > 0 */ {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: kernel/exit.c:1820:
+        type = PIDTYPE_PID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: kernel/exit.c:1820:
+        type = PIDTYPE_PID;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: kernel/exit.c:1821:
+        pid = find_get_pid(upid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: kernel/exit.c:1821:
+        pid = find_get_pid(upid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: kernel/exit.c:1822:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: kernel/exit.c:1824:
+    ret = do_wait(type, pid, options | WEXITED, NULL, NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: kernel/exit.c:1825:
+    put_pid(pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: kernel/exit.c:1828:
+    asmlinkage_protect(4, ret, upid, options);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: kernel/exit.c:1829:
+    return ret;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000194490.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 48 errors, 106 warnings, 13 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000194490.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
