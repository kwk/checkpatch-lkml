WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
Fix a race condition in the transmit code, where the dma interrupt could update

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#131: FILE: drivers/net/macmace.c:41:
+static char mac_mace_string[] = "macmace";

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: drivers/net/macmace.c:45:
+#define N_TX_RING	(1 << N_TX_BUFF_ORDER)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#137: FILE: drivers/net/macmace.c:47:
+#define N_RX_RING	(1 << N_RX_BUFF_ORDER)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#241: FILE: drivers/net/macmace.c:190:
+static int __devinit mace_probe(struct platform_device *pdev)

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: drivers/net/macmace.c:213:
+ ^ISET_MODULE_OWNER(dev);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: drivers/net/macmace.c:213:
+ ^ISET_MODULE_OWNER(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: drivers/net/macmace.c:213:
+ ^ISET_MODULE_OWNER(dev);$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#301: FILE: drivers/net/macmace.c:270:
+/*
+ * Reset the chip.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#307: FILE: drivers/net/macmace.c:276:
+	volatile struct mace *mb = mp->mace;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#315: FILE: drivers/net/macmace.c:284:
+			udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#321: FILE: drivers/net/macmace.c:290:
+		printk(KERN_ERR "macmace: cannot reset chip!\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#340: FILE: drivers/net/macmace.c:309:
+	if (mp->chipid == BROKEN_ADDRCHG_REV)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#342: FILE: drivers/net/macmace.c:311:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#372: FILE: drivers/net/macmace.c:338:
+	if (mp->chipid == BROKEN_ADDRCHG_REV)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#374: FILE: drivers/net/macmace.c:340:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#380: FILE: drivers/net/macmace.c:346:
+		mb->padr = dev->dev_addr[i] = p[i];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#388: FILE: drivers/net/macmace.c:354:
+	volatile struct mace *mb = mp->mace;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/net/macmace.c:397:
+	mp->tx_ring = dma_alloc_coherent(mp->device,
+			N_TX_RING * MACE_BUFF_SIZE,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->tx_ring"
#462: FILE: drivers/net/macmace.c:399:
+	if (mp->tx_ring == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#463: FILE: drivers/net/macmace.c:400:
+		printk(KERN_ERR "%s: unable to allocate DMA tx buffers\n", dev->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: drivers/net/macmace.c:405:
+	mp->rx_ring = dma_alloc_coherent(mp->device,
+			N_RX_RING * MACE_BUFF_SIZE,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->rx_ring"
#477: FILE: drivers/net/macmace.c:407:
+	if (mp->rx_ring == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#478: FILE: drivers/net/macmace.c:408:
+		printk(KERN_ERR "%s: unable to allocate DMA rx buffers\n", dev->name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: drivers/net/macmace.c:432:
+^I                  mp->tx_ring, mp->tx_ring_phys);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#568: FILE: drivers/net/macmace.c:469:
+		printk(KERN_ERR "macmace: tx queue running but no free buffers.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: drivers/net/macmace.c:499:
+	struct mace_data *mp = netdev_priv(dev);
+	return &mp->stats;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#617: FILE: drivers/net/macmace.c:536:
+		if (mp->chipid == BROKEN_ADDRCHG_REV)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#619: FILE: drivers/net/macmace.c:538:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#674: FILE: drivers/net/macmace.c:568:
+			printk(KERN_DEBUG "macmace: babbling transmitter\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#677: FILE: drivers/net/macmace.c:571:
+			printk(KERN_DEBUG "macmace: jabbering transceiver\n");

CHECK:SPACING: No space is necessary after a cast
#689: FILE: drivers/net/macmace.c:576:
+	struct net_device *dev = (struct net_device *) dev_id;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#713: FILE: drivers/net/macmace.c:591:
+			printk(KERN_ERR "macmace: xmtfs not valid! (fs=%x)\n", fs);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#716: FILE: drivers/net/macmace.c:594:
+			/*
+			 * XXX mace likes to hang the machine after a xmtfs error.

WARNING:TYPO_SPELLING: 'reseting' may be misspelled - perhaps 'resetting'?
#717: FILE: drivers/net/macmace.c:595:
+			 * This is hard to reproduce, reseting *may* help
 			                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#723: FILE: drivers/net/macmace.c:599:
+		if (!mp->tx_count) {
+			printk(KERN_DEBUG "macmace: tx ring ran out? (fs=%x)\n", fs);
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#724: FILE: drivers/net/macmace.c:600:
+			printk(KERN_DEBUG "macmace: tx ring ran out? (fs=%x)\n", fs);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#727: FILE: drivers/net/macmace.c:603:
+		if (fs & (UFLO|LCOL|LCAR|RTRY)) {
 		              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#727: FILE: drivers/net/macmace.c:603:
+		if (fs & (UFLO|LCOL|LCAR|RTRY)) {
 		                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#727: FILE: drivers/net/macmace.c:603:
+		if (fs & (UFLO|LCOL|LCAR|RTRY)) {
 		                        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#729: FILE: drivers/net/macmace.c:605:
+			if (fs & LCAR)
[...]
+			else if (fs & (UFLO|LCOL|RTRY)) {
[...]

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#731: FILE: drivers/net/macmace.c:607:
+			else if (fs & (UFLO|LCOL|RTRY)) {
 			                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#731: FILE: drivers/net/macmace.c:607:
+			else if (fs & (UFLO|LCOL|RTRY)) {
 			                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#734: FILE: drivers/net/macmace.c:610:
+					printk(KERN_ERR "%s: DMA underrun.\n", dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#786: FILE: drivers/net/macmace.c:636:
+	printk(KERN_ERR "macmace: transmit timeout - resetting\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#827: FILE: drivers/net/macmace.c:667:
+			printk(KERN_DEBUG "%s: fifo overflow.\n", dev->name);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#837: FILE: drivers/net/macmace.c:677:
+		unsigned int frame_length = mf->rcvcnt + ((frame_status & 0x0F) << 8 );

CHECK:SPACING: No space is necessary after a cast
#891: FILE: drivers/net/macmace.c:729:
+			mace_dma_rx_frame(dev, (struct mace_frame*) (mp->rx_ring

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#891: FILE: drivers/net/macmace.c:729:
+			mace_dma_rx_frame(dev, (struct mace_frame*) (mp->rx_ring

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#908: FILE: drivers/net/macmace.c:764:
+static int __devexit mac_mace_device_remove (struct platform_device *pdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#908: FILE: drivers/net/macmace.c:764:
+static int __devexit mac_mace_device_remove (struct platform_device *pdev)

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: drivers/net/macmace.c:775:
+^I                  mp->rx_ring, mp->rx_ring_phys);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#921: FILE: drivers/net/macmace.c:777:
+^I                  mp->tx_ring, mp->tx_ring_phys);$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#940: FILE: drivers/net/macmace.c:796:
+	if ((err = platform_driver_register(&mac_mace_driver))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#941: FILE: drivers/net/macmace.c:797:
+		printk(KERN_ERR "Driver registration failed\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437478.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 26 warnings, 22 checks, 876 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437478.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
