WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
This patch adds prefetch support to access nand flash in both mpu and dma mode.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: arch/arm/mach-omap2/gpmc.c:412:
+void gpmc_prefetch_start(int cs, int dma_mode,
+				unsigned int u32_count, int is_write)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#90: FILE: arch/arm/mach-omap2/gpmc.c:414:
+	uint32_t prefetch_config1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: arch/arm/mach-omap2/gpmc.c:415:
+	uint32_t prefetch_config1;
+	if (is_write) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#126: FILE: arch/arm/mach-omap2/gpmc.c:450:
+	uint32_t prefetch_config1;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#152: FILE: arch/arm/mach-omap2/gpmc.c:476:
+}
+void gpmc_prefetch_stop(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#155: FILE: arch/arm/mach-omap2/gpmc.c:479:
+}
+void gpmc_prefetch_start(int cs, int dma_mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: arch/arm/mach-omap2/gpmc.c:480:
+void gpmc_prefetch_start(int cs, int dma_mode,
+				unsigned int u32_count, int is_write)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: arch/arm/plat-omap/include/mach/gpmc.h:106:
+extern void gpmc_prefetch_start(int cs, int dma_mode,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: arch/arm/plat-omap/include/mach/gpmc.h:107:
+extern void gpmc_prefetch_start(int cs, int dma_mode,
+					unsigned int u32_count, int is_write);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: arch/arm/plat-omap/include/mach/gpmc.h:108:
+extern void gpmc_prefetch_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: arch/arm/plat-omap/include/mach/gpmc.h:109:
+extern int  gpmc_prefetch_status(void);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#196: FILE: drivers/mtd/nand/Kconfig:83:
+config MTD_NAND_OMAP_PREFETCH
+	bool "GPMC prefetch support for NAND Flash device"
+	depends on MTD_NAND && MTD_NAND_OMAP2
+	default y
+	help
+	 The NAND device can be accessed for Read/Write using GPMC PREFETCH engine
+	 to improve the performance.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#204: FILE: drivers/mtd/nand/Kconfig:91:
+config MTD_NAND_OMAP_PREFETCH_DMA
+	depends on MTD_NAND_OMAP_PREFETCH
+	bool "DMA mode"
+	default n
+	help
+	 The GPMC PREFETCH engine can be configured eigther in MPU interrupt mode
+	 or in DMA interrupt mode.
+	 Say y for DMA mode or MPU mode will be used
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#300: FILE: drivers/mtd/nand/omap2.c:241:
+		while (GPMC_BUF_EMPTY == (readl(info->gpmc_baseaddr +
+						GPMC_STATUS) & GPMC_BUF_FULL));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#323: FILE: drivers/mtd/nand/omap2.c:292:
+	complete((struct completion *) data);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'configer' may be misspelled - perhaps 'configure'?
#327: FILE: drivers/mtd/nand/omap2.c:296:
+ * omap_nand_dma_transfer: configer and start dma transfer
                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: drivers/mtd/nand/omap2.c:303:
+static inline int omap_nand_dma_transfer(struct mtd_info *mtd, void *addr,
+					unsigned int len, int is_write)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#338: FILE: drivers/mtd/nand/omap2.c:307:
+	uint32_t prefetch_status = 0;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#346: FILE: drivers/mtd/nand/omap2.c:315:
+	int buf_len = len/64;
 	                 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#367: FILE: drivers/mtd/nand/omap2.c:336:
+	if (is_write) {
+	    omap_set_dma_dest_params(info->dma_ch, 0, OMAP_DMA_AMODE_CONSTANT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/mtd/nand/omap2.c:338:
+	    omap_set_dma_dest_params(info->dma_ch, 0, OMAP_DMA_AMODE_CONSTANT,
+						info->phys_base, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: drivers/mtd/nand/omap2.c:341:
+	    omap_set_dma_src_params(info->dma_ch, 0, OMAP_DMA_AMODE_POST_INC,
+							dma_addr, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: drivers/mtd/nand/omap2.c:344:
+	    omap_set_dma_transfer_params(info->dma_ch, OMAP_DMA_DATA_TYPE_S32,
+					0x10, buf_len, OMAP_DMA_SYNC_FRAME,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#377: FILE: drivers/mtd/nand/omap2.c:346:
+	} else {
+	    omap_set_dma_src_params(info->dma_ch, 0, OMAP_DMA_AMODE_CONSTANT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/mtd/nand/omap2.c:348:
+	    omap_set_dma_src_params(info->dma_ch, 0, OMAP_DMA_AMODE_CONSTANT,
+						info->phys_base, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: drivers/mtd/nand/omap2.c:351:
+	    omap_set_dma_dest_params(info->dma_ch, 0, OMAP_DMA_AMODE_POST_INC,
+							dma_addr, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/mtd/nand/omap2.c:354:
+	    omap_set_dma_transfer_params(info->dma_ch, OMAP_DMA_DATA_TYPE_S32,
+					0x10, buf_len, OMAP_DMA_SYNC_FRAME,

CHECK:SPACING: No space is necessary after a cast
#407: FILE: drivers/mtd/nand/omap2.c:376:
+		is_write == 0 ? omap_read_buf16(mtd, (u_char *) addr, len)

CHECK:SPACING: No space is necessary after a cast
#408: FILE: drivers/mtd/nand/omap2.c:377:
+			: omap_write_buf16(mtd, (u_char *) addr, len);

CHECK:SPACING: No space is necessary after a cast
#410: FILE: drivers/mtd/nand/omap2.c:379:
+		is_write == 0 ? omap_read_buf8(mtd, (u_char *) addr, len)

CHECK:SPACING: No space is necessary after a cast
#411: FILE: drivers/mtd/nand/omap2.c:380:
+			: omap_write_buf8(mtd, (u_char *) addr, len);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#418: FILE: drivers/mtd/nand/omap2.c:387:
+}
+static inline int omap_nand_dma_transfer(struct mtd_info *mtd, void *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: drivers/mtd/nand/omap2.c:388:
+static inline int omap_nand_dma_transfer(struct mtd_info *mtd, void *addr,
+					unsigned int len, int is_write)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#435: FILE: drivers/mtd/nand/omap2.c:404:
+	uint32_t prefetch_status = 0, read_count = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!use_dma'
#438: FILE: drivers/mtd/nand/omap2.c:407:
+	if ((use_dma && len <= mtd->oobsize) || (!use_dma)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#439: FILE: drivers/mtd/nand/omap2.c:408:
+	if ((use_dma && len <= mtd->oobsize) || (!use_dma)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#445: FILE: drivers/mtd/nand/omap2.c:414:
+		p = (u32 *) buf;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: drivers/mtd/nand/omap2.c:423:
+			__raw_readsl(info->nand_pref_fifo_add, p,
+							read_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: drivers/mtd/nand/omap2.c:444:
+static void omap_write_buf_pref(struct mtd_info *mtd,
+					const u_char *buf, int len)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#479: FILE: drivers/mtd/nand/omap2.c:448:
+	uint32_t prefetch_status = 0, write_count = 0;

CHECK:SPACING: No space is necessary after a cast
#481: FILE: drivers/mtd/nand/omap2.c:450:
+	u16 *p = (u16 *) buf;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!use_dma'
#483: FILE: drivers/mtd/nand/omap2.c:452:
+	if ((use_dma && len <= mtd->oobsize) || (!use_dma)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#484: FILE: drivers/mtd/nand/omap2.c:453:
+	if ((use_dma && len <= mtd->oobsize) || (!use_dma)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: drivers/mtd/nand/omap2.c:920:
+			err = omap_request_dma(OMAP24XX_DMA_GPMC, "NAND",
+				omap_nand_dma_cb, &info->comp, &info->dma_ch);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#528: FILE: drivers/mtd/nand/omap2.c:923:
+				printk(KERN_WARNING "DMA request failed."

WARNING:SPLIT_STRING: quoted string split across lines
#529: FILE: drivers/mtd/nand/omap2.c:924:
+				printk(KERN_WARNING "DMA request failed."
+					" Non-dma data transfer mode\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#590: FILE: drivers/mtd/nand/omap2.c:1048:
+	if ((1 == use_dma) && (0 == use_prefetch)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#591: FILE: drivers/mtd/nand/omap2.c:1049:
+		printk(KERN_INFO"Wrong parameters: 'use_dma' can not be 1 "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#591: FILE: drivers/mtd/nand/omap2.c:1049:
+		printk(KERN_INFO"Wrong parameters: 'use_dma' can not be 1 "

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPLIT_STRING: quoted string split across lines
#592: FILE: drivers/mtd/nand/omap2.c:1050:
+		printk(KERN_INFO"Wrong parameters: 'use_dma' can not be 1 "
+				"without use_prefetch'. Prefetch will not be"

WARNING:SPLIT_STRING: quoted string split across lines
#593: FILE: drivers/mtd/nand/omap2.c:1051:
+				"without use_prefetch'. Prefetch will not be"
+				" used in either mode (mpu or dma)\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000116919.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 38 checks, 521 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000116919.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
