WARNING:TYPO_SPELLING: 'archtecture' may be misspelled - perhaps 'architecture'?
#32: 
checks and maintain appropriate states. Because of its archtecture it
                                                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Protocol processing was moved to the small and fast userspace network stack [1]

WARNING:TYPO_SPELLING: 'priveledges' may be misspelled - perhaps 'privileges'?
#47: 
 * Ability to inject packet into the network without root priveledges.
                                                          ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#56: 
	interupt handler and not software interrupt).
	^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#114: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: include/linux/netchannel.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#120: FILE: include/linux/netchannel.h:2:
+ * ^Inetchannel.h$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: include/linux/netchannel.h:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: include/linux/netchannel.h:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#136: FILE: include/linux/netchannel.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#137: FILE: include/linux/netchannel.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#148: FILE: include/linux/netchannel.h:30:
+struct netchannel_addr
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: include/linux/netchannel.h:38:
+ * Destination and source addresses/ports are from receiving point ov view, $

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#161: FILE: include/linux/netchannel.h:43:
+struct netchannel_control
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#174: FILE: include/linux/netchannel.h:56:
+struct netchannel_page
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: include/linux/netchannel.h:57:
+^Ivoid ^I^I*page[NETCHANNEL_NUM_PER_PAGE];$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#179: FILE: include/linux/netchannel.h:61:
+struct netchannel
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: include/linux/netchannel.h:67:
+^Istruct dst_entry ^I^I*dst;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/netdevice.h:1237:
+extern int netchannel_recv(struct sk_buff *skb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: include/linux/netdevice.h:1239:
+static inline int netchannel_recv(struct sk_buff *skb) $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#299: FILE: net/core/netchannel/Kconfig:1:
+config NETCHANNEL
+	bool "Network channels"
+	---help---
+	  Network channel is a peer-to-peer abstraction, which allows to create
+	  high performance dataflow between two hosts. 
+	  Main advantages are:
+	  	unified address cache (there is no split to IPv6/IPv4)
+		protocol processing moved to userspace
+		dynamic scalable object storage
+		cache friendly packet storage in single netchannel
+			(allows to reduce skb size)

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: net/core/netchannel/Kconfig:5:
+^I  high performance dataflow between two hosts. $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#323: FILE: net/core/netchannel/netchannel.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#324: FILE: net/core/netchannel/netchannel.c:2:
+ * ^Inetchannel.c$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: net/core/netchannel/netchannel.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: net/core/netchannel/netchannel.c:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#340: FILE: net/core/netchannel/netchannel.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#341: FILE: net/core/netchannel/netchannel.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#365: FILE: net/core/netchannel/netchannel.c:43:
+static int netchannel_started = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: net/core/netchannel/netchannel.c:49:
+static int netchannel_skb_get_ports(struct sk_buff *skb,
+		struct netchannel_addr *src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: net/core/netchannel/netchannel.c:61:
+static int netchannel_convert_skb_ipv6(struct sk_buff *skb,
+		struct netchannel_addr *src,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#408: FILE: net/core/netchannel/netchannel.c:86:
+	src->size = dst->size = 16;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#409: FILE: net/core/netchannel/netchannel.c:87:
+	src->proto = dst->proto = hdr->nexthdr;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#414: FILE: net/core/netchannel/netchannel.c:92:
+	switch (hdr->nexthdr) {
+		case NEXTHDR_TCP:
+		case NEXTHDR_UDP:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: net/core/netchannel/netchannel.c:109:
+static int netchannel_convert_skb_ipv4(struct sk_buff *skb,
+		struct netchannel_addr *src,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#454: FILE: net/core/netchannel/netchannel.c:132:
+	if (skb->len < len || len < (iph->ihl*4))
 	                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#462: FILE: net/core/netchannel/netchannel.c:140:
+	src->size = dst->size = 4;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#463: FILE: net/core/netchannel/netchannel.c:141:
+	src->proto = dst->proto = iph->protocol;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#468: FILE: net/core/netchannel/netchannel.c:146:
+	switch (iph->protocol) {
+		case IPPROTO_TCP:
+		case IPPROTO_UDP:
[...]
+		default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: net/core/netchannel/netchannel.c:163:
+static int netchannel_convert_skb(struct sk_buff *skb,
+		struct netchannel_addr *src,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#491: FILE: net/core/netchannel/netchannel.c:169:
+	switch (ntohs(skb->protocol)) {
+		case ETH_P_IP:
[...]
+		case ETH_P_IPV6:
[...]
+		default:

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#586: FILE: net/core/netchannel/netchannel.c:264:
+			    .nl_u = { .ip4_u =
+				      { .saddr = saddr,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#591: FILE: net/core/netchannel/netchannel.c:269:
+			    .uli_u = { .ports =
+				       { .sport = sport,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dst->ops->check"
#604: FILE: net/core/netchannel/netchannel.c:282:
+	if (dst && dst->obsolete && dst->ops->check(dst, 0) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#637: FILE: net/core/netchannel/netchannel.c:315:
+	for (i=0; i<num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#637: FILE: net/core/netchannel/netchannel.c:315:
+	for (i=0; i<num; ++i) {
 	           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct netchannel_page)...)
#638: FILE: net/core/netchannel/netchannel.c:316:
+		p = kzalloc(sizeof(struct netchannel_page), mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*l1)...) over kzalloc(sizeof(struct netchannel_page)...)
#666: FILE: net/core/netchannel/netchannel.c:344:
+	l1 = kzalloc(sizeof(struct netchannel_page), mask);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#689: FILE: net/core/netchannel/netchannel.c:367:
+	for (i=0; i<l2_num; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#689: FILE: net/core/netchannel/netchannel.c:367:
+	for (i=0; i<l2_num; ++i)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: net/core/netchannel/netchannel.c:387:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#711: FILE: net/core/netchannel/netchannel.c:389:
+/*
+ * Addresses and ports must be in network byte order.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: net/core/netchannel/netchannel.c:454:
+	netchannel_cache = kmem_cache_create("netchannel", sizeof(struct netchannel),
+			0, 0, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#783: FILE: net/core/netchannel/netchannel.c:461:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#784: FILE: net/core/netchannel/netchannel.c:462:
+	printk(KERN_NOTICE "Netchannel subsystem has been initialized.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#792: FILE: net/core/netchannel/netchannel.c:470:
+	printk(KERN_NOTICE "netchannel: failed to initialize subsystem.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#803: FILE: net/core/netchannel/storage.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#806: FILE: net/core/netchannel/storage.c:4:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#818: FILE: net/core/netchannel/storage.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#819: FILE: net/core/netchannel/storage.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#832: FILE: net/core/netchannel/storage.c:30:
+struct netchannel_head
+{

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#834: FILE: net/core/netchannel/storage.c:32:
+	spinlock_t			lock;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#839: FILE: net/core/netchannel/storage.c:37:
+struct netchannel_hashtable
+{

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#846: FILE: net/core/netchannel/storage.c:44:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#849: FILE: net/core/netchannel/storage.c:47:
+	printk("%s: size: %d, addr: ", str, a->size);

CHECK:BRACES: braces {} should be used on all arms of this statement
#850: FILE: net/core/netchannel/storage.c:48:
+	if (a->size == 4)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#851: FILE: net/core/netchannel/storage.c:49:
+		printk(NIPQUAD_FMT ":", a->addr[0], a->addr[1], a->addr[2], a->addr[3]);

CHECK:BRACES: Unbalanced braces around else statement
#852: FILE: net/core/netchannel/storage.c:50:
+	else {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#855: FILE: net/core/netchannel/storage.c:53:
+		for (i=0; i<a->size; ++i)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#855: FILE: net/core/netchannel/storage.c:53:
+		for (i=0; i<a->size; ++i)
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#856: FILE: net/core/netchannel/storage.c:54:
+			printk("%02x:", a->addr[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#858: FILE: net/core/netchannel/storage.c:56:
+	printk("%d, proto: %d.\n", ntohs(a->port), a->proto);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: net/core/netchannel/storage.c:61:
+static struct netchannel_head *netchannel_hash(struct netchannel_hashtable *t,
+		struct netchannel_addr *a1, struct netchannel_addr *a2)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#887: FILE: net/core/netchannel/storage.c:85:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: net/core/netchannel/storage.c:104:
+static inline int netchannel_match(struct netchannel *nc,
+		struct netchannel_addr *src, struct netchannel_addr *dst)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: net/core/netchannel/storage.c:113:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: net/core/netchannel/storage.c:118:
+^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#943: FILE: net/core/netchannel/storage.c:141:
+#if 0

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*h)...) over kmalloc(sizeof(struct netchannel_head)...)
#957: FILE: net/core/netchannel/storage.c:155:
+	h = kmalloc(sizeof(struct netchannel_head) * num, mask);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#957: FILE: net/core/netchannel/storage.c:155:
+	h = kmalloc(sizeof(struct netchannel_head) * num, mask);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#961: FILE: net/core/netchannel/storage.c:159:
+	for (i=0; i<num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#961: FILE: net/core/netchannel/storage.c:159:
+	for (i=0; i<num; ++i) {
 	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#985: FILE: net/core/netchannel/user.c:1:
+#include <linux/kernel.h>

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#994: FILE: net/core/netchannel/user.c:10:
+static char netchannel_name[] = "netchannel";

ERROR:TRAILING_WHITESPACE: trailing whitespace
#996: FILE: net/core/netchannel/user.c:12:
+static int netchannel_get_sb(struct file_system_type *fs_type, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: net/core/netchannel/user.c:13:
+static int netchannel_get_sb(struct file_system_type *fs_type, 
+		int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: net/core/netchannel/user.c:92:
+static int netchannel_copy_to_user(struct netchannel *nc, void __user *arg, unsigned int size,
+		unsigned int timeout)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1128: FILE: net/core/netchannel/user.c:144:
+	struct netchannel *nc = file->private_data;
+	return netchannel_copy_to_user(nc, buf, size, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1134: FILE: net/core/netchannel/user.c:150:
+	struct netchannel *nc = file->private_data;
+	return netchannel_copy_from_user(nc, (void __user *)buf, size);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1158: FILE: net/core/netchannel/user.c:174:
+static struct file_operations netchannel_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1185: FILE: net/core/netchannel/user.c:201:
+	file->f_mode = FMODE_READ|FMODE_WRITE;
 	                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1190: FILE: net/core/netchannel/user.c:206:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1206: FILE: net/core/netchannel/user.c:222:
+		printk(KERN_ERR "Failed to register netchannel fs, err: %d.\n", err);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1216: FILE: net/core/netchannel/user.c:232:
+		printk(KERN_ERR "Failed to mount netchannel fs, err: %ld.\n", PTR_ERR(netchannel_mnt));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1216: FILE: net/core/netchannel/user.c:232:
+		printk(KERN_ERR "Failed to mount netchannel fs, err: %ld.\n", PTR_ERR(netchannel_mnt));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230631.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 39 errors, 32 warnings, 24 checks, 1076 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230631.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
