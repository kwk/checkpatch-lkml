WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
      cfq-iosched: get rid of the need for __GFP_NOFAIL in cfq_find_alloc_queue()

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->next_ordered == QUEUE_ORDERED_NONE'
#130: FILE: block/blk-core.c:1173:
+	if (bio_barrier(bio) && bio_has_data(bio) &&
+	    (q->next_ordered == QUEUE_ORDERED_NONE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#367: FILE: block/cfq-iosched.c:1704:
+		if (cfqq) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#370: FILE: block/cfq-iosched.c:1707:
+			cfq_log_cfqq(cfqd, cfqq, "alloced");
 			                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#371: FILE: block/cfq-iosched.c:1708:
+		} else

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#423: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#814: FILE: fs/bio-integrity.c:34:
+#define IS(x) { .nr_vecs = x, .name = "bip-"__stringify(x) }

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#818: FILE: fs/bio-integrity.c:38:
+};
+#undef IS

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#838: FILE: fs/bio-integrity.c:58:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#889: FILE: fs/bio-integrity.c:97:
+	if (bip == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#897: FILE: fs/bio-integrity.c:100:
+		if (unlikely(bip == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#898: FILE: fs/bio-integrity.c:101:
+			printk(KERN_ERR "%s: could not alloc bip\n", __func__);

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#1024: FILE: fs/bio-integrity.c:775:
+	if (bs->bio_integrity_pool)
+		mempool_destroy(bs->bio_integrity_pool);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1055: FILE: fs/bio-integrity.c:795:
+					  SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL);
 					                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1156: FILE: include/linux/bio.h:640:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1156: FILE: include/linux/bio.h:640:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1156: FILE: include/linux/bio.h:640:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#1156: FILE: include/linux/bio.h:640:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1156: FILE: include/linux/bio.h:640:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1156: FILE: include/linux/bio.h:640:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1159: FILE: include/linux/bio.h:642:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1159: FILE: include/linux/bio.h:642:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1159: FILE: include/linux/bio.h:642:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1168: FILE: include/linux/bio.h:652:
+extern int bio_integrity_clone(struct bio *, struct bio *, gfp_t, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1168: FILE: include/linux/bio.h:652:
+extern int bio_integrity_clone(struct bio *, struct bio *, gfp_t, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1168: FILE: include/linux/bio.h:652:
+extern int bio_integrity_clone(struct bio *, struct bio *, gfp_t, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#1168: FILE: include/linux/bio.h:652:
+extern int bio_integrity_clone(struct bio *, struct bio *, gfp_t, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1168: FILE: include/linux/bio.h:652:
+extern int bio_integrity_clone(struct bio *, struct bio *, gfp_t, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1169: FILE: include/linux/bio.h:653:
+extern int bioset_integrity_create(struct bio_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1169: FILE: include/linux/bio.h:653:
+extern int bioset_integrity_create(struct bio_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1169: FILE: include/linux/bio.h:653:
+extern int bioset_integrity_create(struct bio_set *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1170: FILE: include/linux/bio.h:654:
+extern void bioset_integrity_free(struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1170: FILE: include/linux/bio.h:654:
+extern void bioset_integrity_free(struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1171: FILE: include/linux/bio.h:655:
+extern void bio_integrity_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1230: FILE: include/linux/blkdev.h:994:
+extern int blk_verify_command(unsigned char *cmd, fmode_t has_write_perm);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101796.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 15 checks, 824 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101796.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
