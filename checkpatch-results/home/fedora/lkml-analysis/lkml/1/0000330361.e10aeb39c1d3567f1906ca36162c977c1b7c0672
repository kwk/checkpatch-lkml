WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: arch/x86/math-emu/errors.c:61:
+  if (FPU_CS == __USER_CS) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#48: FILE: arch/x86/math-emu/errors.c:61:
+  if (FPU_CS == __USER_CS) {
[...]
+      for (i = 0; i < MAX_PRINTED_BYTES; i++) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: arch/x86/math-emu/errors.c:63:
+      for (i = 0; i < MAX_PRINTED_BYTES; i++) {$

WARNING:TABSTOP: Statements should start on a tabstop
#56: FILE: arch/x86/math-emu/errors.c:65:
+	  if ((byte1 & 0xf8) == 0xd8) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#56: FILE: arch/x86/math-emu/errors.c:65:
+	  if ((byte1 & 0xf8) == 0xd8) {
 	      printk(" %02x", byte1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/x86/math-emu/errors.c:74:
+      else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#66: FILE: arch/x86/math-emu/errors.c:74:
+      else {
 	  FPU_get_user(FPU_modrm, 1 + (u_char __user *) address);

CHECK:BRACES: Unbalanced braces around else statement
#66: FILE: arch/x86/math-emu/errors.c:74:
+      else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: arch/x86/math-emu/errors.c:138:
+  for (i = 0; i < 8; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#86: FILE: arch/x86/math-emu/errors.c:138:
+  for (i = 0; i < 8; i++) {
       FPU_REG *r = &st(i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/x86/math-emu/errors.c:269:
+  if (n & EX_INTERNAL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#101: FILE: arch/x86/math-emu/errors.c:269:
+  if (n & EX_INTERNAL) {
       int_type = n - EX_INTERNAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: arch/x86/math-emu/errors.c:275:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#109: FILE: arch/x86/math-emu/errors.c:275:
+  else {
[...]
       n &= (SW_Exc_Mask);

CHECK:BRACES: Unbalanced braces around else statement
#109: FILE: arch/x86/math-emu/errors.c:275:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/x86/math-emu/errors.c:283:
+      if (n & (SW_Stack_Fault | EX_Precision)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#119: FILE: arch/x86/math-emu/errors.c:283:
+      if (n & (SW_Stack_Fault | EX_Precision)) {
 	  if (!(n & SW_C1))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: arch/x86/math-emu/errors.c:292:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#129: FILE: arch/x86/math-emu/errors.c:292:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {
[...]
       printk(FPU_VERSION" "__DATE__" (C) W. Metzenthen.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n == EX_INTERNAL'
#129: FILE: arch/x86/math-emu/errors.c:292:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: arch/x86/math-emu/errors.c:303:
+      if (exception_names[i].type) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#139: FILE: arch/x86/math-emu/errors.c:303:
+      if (exception_names[i].type) {
[...]
 	  printk("FP Exception: %s!\n", exception_names[i].name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: arch/x86/math-emu/errors.c:311:
+      if (n == EX_INTERNAL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#149: FILE: arch/x86/math-emu/errors.c:311:
+      if (n == EX_INTERNAL) {
 	  printk("FPU emulator: Internal error type 0x%04x\n", int_type);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/x86/math-emu/errors.c:347:
+  if (!signalling) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#163: FILE: arch/x86/math-emu/errors.c:347:
+  if (!signalling) {
+      if (!isNaN) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/x86/math-emu/errors.c:348:
+      if (!isNaN) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#164: FILE: arch/x86/math-emu/errors.c:348:
+      if (!isNaN) {
[...]
+	  if (control_word & CW_Invalid) {

CHECK:CAMELCASE: Avoid CamelCase: <isNaN>
#164: FILE: arch/x86/math-emu/errors.c:348:
+      if (!isNaN) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TABSTOP: Statements should start on a tabstop
#166: FILE: arch/x86/math-emu/errors.c:350:
+	  if (control_word & CW_Invalid) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#166: FILE: arch/x86/math-emu/errors.c:350:
+	  if (control_word & CW_Invalid) {
[...]
 	      reg_copy(&CONST_QNaN, a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/x86/math-emu/errors.c:360:
+  if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#176: FILE: arch/x86/math-emu/errors.c:360:
+  if (control_word & CW_Invalid) {
[...]
+      if (!(a->sigh & 0x80000000)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: arch/x86/math-emu/errors.c:362:
+      if (!(a->sigh & 0x80000000)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#180: FILE: arch/x86/math-emu/errors.c:362:
+      if (!(a->sigh & 0x80000000)) {
[...]
 	  reg_copy(&CONST_QNaN, a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/x86/math-emu/errors.c:398:
+  if (unsupported) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#193: FILE: arch/x86/math-emu/errors.c:398:
+  if (unsupported) {
+      if (control_word & CW_Invalid) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: arch/x86/math-emu/errors.c:399:
+      if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#194: FILE: arch/x86/math-emu/errors.c:399:
+      if (control_word & CW_Invalid) {
[...]
 	  FPU_copy_to_regi(&CONST_QNaN, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: arch/x86/math-emu/errors.c:407:
+  if (taga == TW_NaN) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#204: FILE: arch/x86/math-emu/errors.c:407:
+  if (taga == TW_NaN) {
       x = a;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: arch/x86/math-emu/errors.c:409:
+      if (tagb == TW_NaN) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#208: FILE: arch/x86/math-emu/errors.c:409:
+      if (tagb == TW_NaN) {
 	  signalling = !(a->sigh & b->sigh & 0x40000000);

WARNING:TABSTOP: Statements should start on a tabstop
#214: FILE: arch/x86/math-emu/errors.c:413:
+	  else if (significand(b) == significand(a)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#214: FILE: arch/x86/math-emu/errors.c:413:
+	  else if (significand(b) == significand(a)) {
[...]
 	      x = defaultNaN;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/x86/math-emu/errors.c:419:
+      else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#222: FILE: arch/x86/math-emu/errors.c:419:
+      else {
[...]
 	  signalling = !(a->sigh & 0x40000000);

CHECK:BRACES: Unbalanced braces around else statement
#222: FILE: arch/x86/math-emu/errors.c:419:
+      else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: arch/x86/math-emu/errors.c:433:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#232: FILE: arch/x86/math-emu/errors.c:433:
+  else {
       signalling = 0;

CHECK:BRACES: Unbalanced braces around else statement
#232: FILE: arch/x86/math-emu/errors.c:433:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/x86/math-emu/errors.c:440:
+  if ((!signalling) || (control_word & CW_Invalid)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#241: FILE: arch/x86/math-emu/errors.c:440:
+  if ((!signalling) || (control_word & CW_Invalid)) {
       if (!x)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!signalling'
#241: FILE: arch/x86/math-emu/errors.c:440:
+  if ((!signalling) || (control_word & CW_Invalid)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: arch/x86/math-emu/errors.c:469:
+  if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#251: FILE: arch/x86/math-emu/errors.c:469:
+  if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: arch/x86/math-emu/errors.c:485:
+  if (control_word & CW_ZeroDiv) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#261: FILE: arch/x86/math-emu/errors.c:485:
+  if (control_word & CW_ZeroDiv) {
[...]
       FPU_copy_to_regi(&CONST_INF, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: arch/x86/math-emu/errors.c:502:
+  if (control_word & CW_Precision) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#271: FILE: arch/x86/math-emu/errors.c:502:
+  if (control_word & CW_Precision) {
       partial_status &= ~(SW_C1 & flags);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: arch/x86/math-emu/errors.c:507:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#278: FILE: arch/x86/math-emu/errors.c:507:
+  else {
       EXCEPTION(flags);

CHECK:BRACES: Unbalanced braces around else statement
#278: FILE: arch/x86/math-emu/errors.c:507:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: arch/x86/math-emu/errors.c:527:
+  if (control_word & CW_Precision) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#288: FILE: arch/x86/math-emu/errors.c:527:
+  if (control_word & CW_Precision) {
[...]
       partial_status &= ~SW_C1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: arch/x86/math-emu/errors.c:539:
+  if (control_word & CW_Denormal) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#299: FILE: arch/x86/math-emu/errors.c:539:
+  if (control_word & CW_Denormal) {
[...]
       partial_status |= SW_Denorm_Op;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: arch/x86/math-emu/errors.c:544:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#306: FILE: arch/x86/math-emu/errors.c:544:
+  else {
       EXCEPTION(EX_Denormal);

CHECK:BRACES: Unbalanced braces around else statement
#306: FILE: arch/x86/math-emu/errors.c:544:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: arch/x86/math-emu/errors.c:555:
+  if (control_word & CW_Overflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#316: FILE: arch/x86/math-emu/errors.c:555:
+  if (control_word & CW_Overflow) {
[...]
       reg_copy(&CONST_INF, dest);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: arch/x86/math-emu/errors.c:561:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#324: FILE: arch/x86/math-emu/errors.c:561:
+  else {
[...]
       addexponent(dest, (-3 * (1 << 13)));

CHECK:BRACES: Unbalanced braces around else statement
#324: FILE: arch/x86/math-emu/errors.c:561:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: arch/x86/math-emu/errors.c:567:
+  if (control_word & CW_Overflow) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: arch/x86/math-emu/errors.c:585:
+  if (control_word & CW_Underflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#342: FILE: arch/x86/math-emu/errors.c:585:
+  if (control_word & CW_Underflow) {
[...]
+      if (exponent16(dest) <= EXP_UNDER - 63) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: arch/x86/math-emu/errors.c:587:
+      if (exponent16(dest) <= EXP_UNDER - 63) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#346: FILE: arch/x86/math-emu/errors.c:587:
+      if (exponent16(dest) <= EXP_UNDER - 63) {
 	  reg_copy(&CONST_Z, dest);

CHECK:BRACES: braces {} should be used on all arms of this statement
#346: FILE: arch/x86/math-emu/errors.c:587:
+      if (exponent16(dest) <= EXP_UNDER - 63) {
[...]
       else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: arch/x86/math-emu/errors.c:595:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#358: FILE: arch/x86/math-emu/errors.c:595:
+  else {
[...]
       addexponent(dest, (3 * (1 << 13)) + EXTENDED_Ebias);

CHECK:BRACES: Unbalanced braces around else statement
#358: FILE: arch/x86/math-emu/errors.c:595:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: arch/x86/math-emu/errors.c:601:
+  if (control_word & CW_Underflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#366: FILE: arch/x86/math-emu/errors.c:601:
+  if (control_word & CW_Underflow) {
[...]
       EXCEPTION(EX_Precision);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: arch/x86/math-emu/errors.c:615:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#376: FILE: arch/x86/math-emu/errors.c:615:
+ if (control_word & CW_Invalid) {
[...]
       top--;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: arch/x86/math-emu/errors.c:631:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#386: FILE: arch/x86/math-emu/errors.c:631:
+ if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_reg0(&CONST_QNaN, TAG_Special);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: arch/x86/math-emu/errors.c:646:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#396: FILE: arch/x86/math-emu/errors.c:646:
+ if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: arch/x86/math-emu/errors.c:661:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#406: FILE: arch/x86/math-emu/errors.c:661:
+ if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, i);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330361.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 82 warnings, 12 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330361.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
