WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
As I told Martin, I was thinking about taking an axe and moving stuff around in

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: ltt/ltt-relay-alloc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: ltt/ltt-relay-alloc.c:10:
+ * ^I(mathieu.desnoyers@polymtl.ca)$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*buf_page)...) over kmalloc(sizeof(struct buf_page)...)
#145: FILE: ltt/ltt-relay-alloc.c:45:
+		buf_page = kmalloc(sizeof(struct buf_page), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*buf)...) over kzalloc(sizeof(struct rchan_buf)...)
#183: FILE: ltt/ltt-relay-alloc.c:83:
+	struct rchan_buf *buf = kzalloc(sizeof(struct rchan_buf), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: ltt/ltt-relay-alloc.c:84:
+	struct rchan_buf *buf = kzalloc(sizeof(struct rchan_buf), GFP_KERNEL);
+	if (!buf)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: ltt/ltt-relay-alloc.c:109:
+	struct rchan *chan = container_of(kref, struct rchan, kref);
+	kfree(chan);

WARNING:TYPO_SPELLING: 'fileystem' may be misspelled - perhaps 'filesystem'?
#235: FILE: ltt/ltt-relay-alloc.c:135:
+ *	Removes the file from the fileystem, which also frees the
   	                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: ltt/ltt-relay-alloc.c:142:
+	struct rchan_buf *buf = container_of(kref, struct rchan_buf, kref);
+	buf->chan->cb->remove_buf_file(buf->dentry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: ltt/ltt-relay-alloc.c:189:
+	struct rchan_buf *buf = (struct rchan_buf *)data;
+	wake_up_interruptible(&buf->read_wait);

CHECK:BRACES: braces {} should be used on all arms of this statement
#301: FILE: ltt/ltt-relay-alloc.c:201:
+	if (init) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#305: FILE: ltt/ltt-relay-alloc.c:205:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: ltt/ltt-relay-alloc.c:218:
+ ^Istruct rchan_buf *buf = NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#318: FILE: ltt/ltt-relay-alloc.c:218:
+ ^Istruct rchan_buf *buf = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: ltt/ltt-relay-alloc.c:218:
+ ^Istruct rchan_buf *buf = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: ltt/ltt-relay-alloc.c:220:
+ ^Ichar *tmpname;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: ltt/ltt-relay-alloc.c:220:
+ ^Ichar *tmpname;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: ltt/ltt-relay-alloc.c:220:
+ ^Ichar *tmpname;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: ltt/ltt-relay-alloc.c:223:
+ ^Iif (!tmpname)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#323: FILE: ltt/ltt-relay-alloc.c:223:
+ ^Iif (!tmpname)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: ltt/ltt-relay-alloc.c:223:
+ ^Iif (!tmpname)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: ltt/ltt-relay-alloc.c:224:
+ ^I^Igoto end;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#324: FILE: ltt/ltt-relay-alloc.c:224:
+ ^I^Igoto end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: ltt/ltt-relay-alloc.c:224:
+ ^I^Igoto end;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: ltt/ltt-relay-alloc.c:225:
+ ^Isnprintf(tmpname, NAME_MAX, "%s%d", chan->base_filename, cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: ltt/ltt-relay-alloc.c:225:
+ ^Isnprintf(tmpname, NAME_MAX, "%s%d", chan->base_filename, cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: ltt/ltt-relay-alloc.c:225:
+ ^Isnprintf(tmpname, NAME_MAX, "%s%d", chan->base_filename, cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: ltt/ltt-relay-alloc.c:229:
+ ^I^Igoto free_name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#329: FILE: ltt/ltt-relay-alloc.c:229:
+ ^I^Igoto free_name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: ltt/ltt-relay-alloc.c:229:
+ ^I^Igoto free_name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: ltt/ltt-relay-alloc.c:231:
+ ^Ibuf->cpu = cpu;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: ltt/ltt-relay-alloc.c:231:
+ ^Ibuf->cpu = cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: ltt/ltt-relay-alloc.c:231:
+ ^Ibuf->cpu = cpu;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: ltt/ltt-relay-alloc.c:232:
+ ^I__relay_reset(buf, 1);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#332: FILE: ltt/ltt-relay-alloc.c:232:
+ ^I__relay_reset(buf, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: ltt/ltt-relay-alloc.c:232:
+ ^I__relay_reset(buf, 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: ltt/ltt-relay-alloc.c:235:
+ ^Identry = chan->cb->create_buf_file(tmpname, chan->parent, S_IRUSR,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: ltt/ltt-relay-alloc.c:235:
+ ^Identry = chan->cb->create_buf_file(tmpname, chan->parent, S_IRUSR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: ltt/ltt-relay-alloc.c:235:
+ ^Identry = chan->cb->create_buf_file(tmpname, chan->parent, S_IRUSR,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#335: FILE: ltt/ltt-relay-alloc.c:235:
+ 	dentry = chan->cb->create_buf_file(tmpname, chan->parent, S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: ltt/ltt-relay-alloc.c:236:
+ ^I^I^I^I^I   buf);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: ltt/ltt-relay-alloc.c:236:
+ ^I^I^I^I^I   buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: ltt/ltt-relay-alloc.c:236:
+ ^I^I^I^I^I   buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: ltt/ltt-relay-alloc.c:237:
+ ^Iif (!dentry)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: ltt/ltt-relay-alloc.c:237:
+ ^Iif (!dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: ltt/ltt-relay-alloc.c:237:
+ ^Iif (!dentry)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: ltt/ltt-relay-alloc.c:238:
+ ^I^Igoto free_buf;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#338: FILE: ltt/ltt-relay-alloc.c:238:
+ ^I^Igoto free_buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: ltt/ltt-relay-alloc.c:238:
+ ^I^Igoto free_buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: ltt/ltt-relay-alloc.c:242:
+ ^Igoto free_name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#342: FILE: ltt/ltt-relay-alloc.c:242:
+ ^Igoto free_name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: ltt/ltt-relay-alloc.c:242:
+ ^Igoto free_name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: ltt/ltt-relay-alloc.c:245:
+ ^Irelay_destroy_buf(buf);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: ltt/ltt-relay-alloc.c:245:
+ ^Irelay_destroy_buf(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: ltt/ltt-relay-alloc.c:245:
+ ^Irelay_destroy_buf(buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: ltt/ltt-relay-alloc.c:246:
+ ^Ibuf = NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: ltt/ltt-relay-alloc.c:246:
+ ^Ibuf = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: ltt/ltt-relay-alloc.c:246:
+ ^Ibuf = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: ltt/ltt-relay-alloc.c:248:
+ ^Ikfree(tmpname);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: ltt/ltt-relay-alloc.c:248:
+ ^Ikfree(tmpname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: ltt/ltt-relay-alloc.c:248:
+ ^Ikfree(tmpname);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: ltt/ltt-relay-alloc.c:268:
+static void setup_callbacks(struct rchan *chan,
+				   struct rchan_callbacks *cb)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#383: FILE: ltt/ltt-relay-alloc.c:283:
+ * ^Irelay_hotcpu_callback - CPU hotplug callback$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#384: FILE: ltt/ltt-relay-alloc.c:284:
+ * ^I@nb: notifier block$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: ltt/ltt-relay-alloc.c:285:
+ * ^I@action: hotplug action to take$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#386: FILE: ltt/ltt-relay-alloc.c:286:
+ * ^I@hcpu: CPU number$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: ltt/ltt-relay-alloc.c:288:
+ * ^IReturns the success/failure of the operation. (%NOTIFY_OK, %NOTIFY_BAD)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: ltt/ltt-relay-alloc.c:291:
+static int __cpuinit relay_hotcpu_callback(struct notifier_block *nb,
+				unsigned long action,

ERROR:SPACING: space required before the open parenthesis '('
#397: FILE: ltt/ltt-relay-alloc.c:297:
+	switch(action) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: ltt/ltt-relay-alloc.c:305:
+			if(!chan->buf[hotcpu]) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#406: FILE: ltt/ltt-relay-alloc.c:306:
+				printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'relay_hotcpu_callback', this function's name, in a string
#407: FILE: ltt/ltt-relay-alloc.c:307:
+					"relay_hotcpu_callback: cpu %d buffer "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#408: FILE: ltt/ltt-relay-alloc.c:308:
+					"relay_hotcpu_callback: cpu %d buffer "
+					"creation failed\n", hotcpu);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#418: FILE: ltt/ltt-relay-alloc.c:318:
+		 * final relay_flush() call. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: ltt/ltt-relay-alloc.c:341:
+struct rchan *ltt_relay_open(const char *base_filename,
+			 struct dentry *parent,

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: ltt/ltt-relay-alloc.c:349:
+	struct rchan *chan;
+	if (!base_filename)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*chan)...) over kzalloc(sizeof(struct rchan)...)
#455: FILE: ltt/ltt-relay-alloc.c:355:
+	chan = kzalloc(sizeof(struct rchan), GFP_KERNEL);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#465: FILE: ltt/ltt-relay-alloc.c:365:
+	strlcpy(chan->base_filename, base_filename, NAME_MAX);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#520: FILE: ltt/ltt-relay-alloc.c:420:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#524: FILE: ltt/ltt-relay-alloc.c:424:
+static int relay_file_open(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#527: FILE: ltt/ltt-relay-alloc.c:427:
+	struct rchan_buf *buf = inode->i_private;
+	kref_get(&buf->kref);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#530: FILE: ltt/ltt-relay-alloc.c:430:
+	return nonseekable_open(inode, filp);
 	                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#536: FILE: ltt/ltt-relay-alloc.c:436:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#541: FILE: ltt/ltt-relay-alloc.c:441:
+static int relay_file_release(struct inode *inode, struct file *filp)
                                                                 ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#544: FILE: ltt/ltt-relay-alloc.c:444:
+	struct rchan_buf *buf = filp->private_data;
+	kref_put(&buf->kref, relay_remove_buf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#568: FILE: include/linux/ltt-relay.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#569: FILE: include/linux/ltt-relay.h:2:
+ * linux/include/linux/ltt-relay.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#611: FILE: include/linux/ltt-relay.h:44:
+^Istruct timer_list timer; ^I/* reader wake-up timer */$

WARNING:SPACING: Unnecessary space before function pointer arguments
#661: FILE: include/linux/ltt-relay.h:94:
+	int (*subbuf_start) (struct rchan_buf *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: include/linux/ltt-relay.h:143:
+static inline struct buf_page *ltt_relay_find_prev_page(struct rchan_buf *buf,
+	struct buf_page *page, size_t offset, ssize_t diff_offset)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#725: FILE: include/linux/ltt-relay.h:158:
+		if (offset >= iter->offset
+			&& offset < iter->offset + PAGE_SIZE) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#727: FILE: include/linux/ltt-relay.h:160:
+				printk("Backward random access detected in "

WARNING:SPLIT_STRING: quoted string split across lines
#728: FILE: include/linux/ltt-relay.h:161:
+				printk("Backward random access detected in "
+					"ltt_relay. Iterations %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#729: FILE: include/linux/ltt-relay.h:162:
+					"ltt_relay. Iterations %u, "
+					"offset %zu, orig iter->off %zu, "

WARNING:SPLIT_STRING: quoted string split across lines
#730: FILE: include/linux/ltt-relay.h:163:
+					"offset %zu, orig iter->off %zu, "
+					"iter->off %zu diff_offset %zd.\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: include/linux/ltt-relay.h:178:
+static inline struct buf_page *ltt_relay_find_next_page(struct rchan_buf *buf,
+	struct buf_page *page, size_t offset, ssize_t diff_offset)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#760: FILE: include/linux/ltt-relay.h:193:
+		if (offset >= iter->offset
+			&& offset < iter->offset + PAGE_SIZE) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#762: FILE: include/linux/ltt-relay.h:195:
+				printk("Forward random access detected in "

WARNING:SPLIT_STRING: quoted string split across lines
#763: FILE: include/linux/ltt-relay.h:196:
+				printk("Forward random access detected in "
+					"ltt_relay. Iterations %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#764: FILE: include/linux/ltt-relay.h:197:
+					"ltt_relay. Iterations %u, "
+					"offset %zu, orig iter->off %zu, "

WARNING:SPLIT_STRING: quoted string split across lines
#765: FILE: include/linux/ltt-relay.h:198:
+					"offset %zu, orig iter->off %zu, "
+					"iter->off %zu diff_offset %zd.\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: include/linux/ltt-relay.h:214:
+static inline struct buf_page *ltt_relay_cache_page(struct rchan_buf *buf,
+		struct buf_page **page_cache,

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#793: FILE: include/linux/ltt-relay.h:226:
+	 * occured. Finding the right page is done by comparing the
 	   ^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#814: FILE: include/linux/ltt-relay.h:247:
+		WARN_ON(!(diff_offset >= 0
+			&& diff_offset < (ssize_t)PAGE_SIZE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: include/linux/ltt-relay.h:253:
+static inline int ltt_relay_write(struct rchan_buf *buf, size_t offset,
+	const void *src, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: include/linux/ltt-relay.h:283:
+static inline int ltt_relay_read(struct rchan_buf *buf, size_t offset,
+	void *dest, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: include/linux/ltt-relay.h:297:
+		memcpy(dest, page_address(page->page) + (offset & ~PAGE_MASK),
+			pagecpy);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: include/linux/ltt-relay.h:319:
+static inline void *ltt_relay_offset_address(struct rchan_buf *buf,
+	size_t offset)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#895: FILE: include/linux/ltt-relay.h:328:
+		buf->hpage[odd] = page = buf->wpage;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: include/linux/ltt-relay.h:338:
+struct rchan *ltt_relay_open(const char *base_filename,
+			 struct dentry *parent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#910: FILE: include/linux/ltt-relay.h:343:
+extern void ltt_relay_close(struct rchan *chan);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222134.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 72 warnings, 21 checks, 813 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222134.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
