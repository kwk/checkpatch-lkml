WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#95: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2932: FILE: drivers/staging/strip/Kconfig:1:
+config STRIP
+	tristate "STRIP (Metricom starmode radio IP)"
+	depends on INET
+	select WIRELESS_EXT
+	---help---
+	  Say Y if you have a Metricom radio and intend to use Starmode Radio
+	  IP. STRIP is a radio protocol developed for the MosquitoNet project
+	  to send Internet traffic using Metricom radios.  Metricom radios are
+	  small, battery powered, 100kbit/sec packet radio transceivers, about
+	  the size and weight of a cellular telephone. (You may also have heard
+	  them called "Metricom modems" but we avoid the term "modem" because
+	  it misleads many people into thinking that you can plug a Metricom
+	  modem into a phone line and use it as a modem.)
+
+	  You can use STRIP on any Linux machine with a serial port, although
+	  it is obviously most useful for people with laptop computers. If you
+	  think you might get a Metricom radio in the future, there is no harm
+	  in saying Y to STRIP now, except that it makes the kernel a bit
+	  bigger.
+
+	  To compile this as a module, choose M here: the module will be
+	  called strip.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2967: FILE: drivers/staging/strip/strip.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2991: FILE: drivers/staging/strip/strip.c:25:
+ *^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2995: FILE: drivers/staging/strip/strip.c:29:
+ *^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2998: FILE: drivers/staging/strip/strip.c:32:
+ *^I^I$

WARNING:TYPO_SPELLING: 'unneccessarily' may be misspelled - perhaps 'unnecessarily'?
#3000: FILE: drivers/staging/strip/strip.c:34:
+ *		Fixed bug where STR_ERROR flag was getting set unneccessarily
   		                                               ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'unneccessarily' may be misspelled - perhaps 'unnecessarily'?
#3001: FILE: drivers/staging/strip/strip.c:35:
+ *		(causing otherwise good packets to be unneccessarily dropped)
   		                                      ^^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3002: FILE: drivers/staging/strip/strip.c:36:
+ *^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3005: FILE: drivers/staging/strip/strip.c:39:
+ *^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3008: FILE: drivers/staging/strip/strip.c:42:
+ *^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3011: FILE: drivers/staging/strip/strip.c:45:
+ *^I^I$

CHECK:CAMELCASE: Avoid CamelCase: <StripVersion>
#3038: FILE: drivers/staging/strip/strip.c:72:
+static const char StripVersion[] = "1.3A-STUART.CHESHIRE-MODULAR";

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3046: FILE: drivers/staging/strip/strip.c:80:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#3055: FILE: drivers/staging/strip/strip.c:89:
+#include <asm/uaccess.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3091: FILE: drivers/staging/strip/strip.c:125:
+typedef union {

CHECK:CAMELCASE: Avoid CamelCase: <MetricomKey>
#3094: FILE: drivers/staging/strip/strip.c:128:
+} MetricomKey;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3101: FILE: drivers/staging/strip/strip.c:135:
+typedef union {

CHECK:CAMELCASE: Avoid CamelCase: <IPaddr>
#3104: FILE: drivers/staging/strip/strip.c:138:
+} IPaddr;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3111: FILE: drivers/staging/strip/strip.c:145:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <MetricomAddressString>
#3113: FILE: drivers/staging/strip/strip.c:147:
+} MetricomAddressString;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3121: FILE: drivers/staging/strip/strip.c:155:
+#define STRIP_ENCAP_SIZE(X) (32 + (X)*65L/64L)
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3121: FILE: drivers/staging/strip/strip.c:155:
+#define STRIP_ENCAP_SIZE(X) (32 + (X)*65L/64L)
                                          ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3130: FILE: drivers/staging/strip/strip.c:164:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <MetricomAddress>
#3131: FILE: drivers/staging/strip/strip.c:165:
+	MetricomAddress dst_addr;	/* Destination address, e.g. "0000-1234"   */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3136: FILE: drivers/staging/strip/strip.c:170:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <MetricomNode>
#3138: FILE: drivers/staging/strip/strip.c:172:
+} MetricomNode;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3141: FILE: drivers/staging/strip/strip.c:175:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <MetricomNodeTable>
#3145: FILE: drivers/staging/strip/strip.c:179:
+} MetricomNodeTable;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3152: FILE: drivers/staging/strip/strip.c:186:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <FirmwareVersion>
#3154: FILE: drivers/staging/strip/strip.c:188:
+} FirmwareVersion;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3159: FILE: drivers/staging/strip/strip.c:193:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <SerialNumber>
#3161: FILE: drivers/staging/strip/strip.c:195:
+} SerialNumber;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3166: FILE: drivers/staging/strip/strip.c:200:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <BatteryVoltage>
#3168: FILE: drivers/staging/strip/strip.c:202:
+} BatteryVoltage;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3170: FILE: drivers/staging/strip/strip.c:204:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <NoStructure>
#3175: FILE: drivers/staging/strip/strip.c:209:
+	NoStructure = 0,	/* Really old firmware */

CHECK:CAMELCASE: Avoid CamelCase: <StructuredMessages>
#3176: FILE: drivers/staging/strip/strip.c:210:
+	StructuredMessages = 1,	/* Parsable AT response msgs */

CHECK:CAMELCASE: Avoid CamelCase: <ChecksummedMessages>
#3177: FILE: drivers/staging/strip/strip.c:211:
+	ChecksummedMessages = 2	/* Parsable AT response msgs with checksums */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3267: FILE: drivers/staging/strip/strip.c:301:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3284: FILE: drivers/staging/strip/strip.c:318:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3286: FILE: drivers/staging/strip/strip.c:320:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3289: FILE: drivers/staging/strip/strip.c:323:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3294: FILE: drivers/staging/strip/strip.c:328:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3299: FILE: drivers/staging/strip/strip.c:333:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3314: FILE: drivers/staging/strip/strip.c:348:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3318: FILE: drivers/staging/strip/strip.c:352:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3324: FILE: drivers/staging/strip/strip.c:358:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3331: FILE: drivers/staging/strip/strip.c:365:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3338: FILE: drivers/staging/strip/strip.c:372:
+ * $

CHECK:CAMELCASE: Avoid CamelCase: <MaxCommandStringLength>
#3345: FILE: drivers/staging/strip/strip.c:379:
+static const int MaxCommandStringLength = 32;

CHECK:CAMELCASE: Avoid CamelCase: <CompatibilityCommand>
#3346: FILE: drivers/staging/strip/strip.c:380:
+static const int CompatibilityCommand = 1;

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3348: FILE: drivers/staging/strip/strip.c:382:
+static const char CommandString0[] = "*&COMMAND*ATS319=7";	/* Turn on checksums & info messages */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <CommandString0>
#3348: FILE: drivers/staging/strip/strip.c:382:
+static const char CommandString0[] = "*&COMMAND*ATS319=7";	/* Turn on checksums & info messages */

CHECK:CAMELCASE: Avoid CamelCase: <CommandString1>
#3349: FILE: drivers/staging/strip/strip.c:383:
+static const char CommandString1[] = "*&COMMAND*ATS305?";	/* Query radio name */

CHECK:CAMELCASE: Avoid CamelCase: <CommandString2>
#3350: FILE: drivers/staging/strip/strip.c:384:
+static const char CommandString2[] = "*&COMMAND*ATS325?";	/* Query battery voltage */

CHECK:CAMELCASE: Avoid CamelCase: <CommandString3>
#3351: FILE: drivers/staging/strip/strip.c:385:
+static const char CommandString3[] = "*&COMMAND*ATS300?";	/* Query version information */

CHECK:CAMELCASE: Avoid CamelCase: <CommandString4>
#3352: FILE: drivers/staging/strip/strip.c:386:
+static const char CommandString4[] = "*&COMMAND*ATS311?";	/* Query poletop list */

CHECK:CAMELCASE: Avoid CamelCase: <CommandString5>
#3353: FILE: drivers/staging/strip/strip.c:387:
+static const char CommandString5[] = "*&COMMAND*AT~LA";		/* Query portables list */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3354: FILE: drivers/staging/strip/strip.c:388:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <StringDescriptor>
#3357: FILE: drivers/staging/strip/strip.c:391:
+} StringDescriptor;

CHECK:CAMELCASE: Avoid CamelCase: <CommandString>
#3359: FILE: drivers/staging/strip/strip.c:393:
+static const StringDescriptor CommandString[] = {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'S' - possible side-effects?
#3368: FILE: drivers/staging/strip/strip.c:402:
+#define GOT_ALL_RADIO_INFO(S)      \
+    ((S)->firmware_version.c[0] && \
+     (S)->battery_voltage.c[0]  && \
+     memcmp(&(S)->true_dev_addr, zero_address.c, sizeof(zero_address)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3369: FILE: drivers/staging/strip/strip.c:403:
+    ((S)->firmware_version.c[0] && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3370: FILE: drivers/staging/strip/strip.c:404:
+     (S)->battery_voltage.c[0]  && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3371: FILE: drivers/staging/strip/strip.c:405:
+     memcmp(&(S)->true_dev_addr, zero_address.c, sizeof(zero_address)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3377: FILE: drivers/staging/strip/strip.c:411:
+    { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3377: FILE: drivers/staging/strip/strip.c:411:
+static const MetricomAddress broadcast_address =
+    { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <SIP0Key>
#3379: FILE: drivers/staging/strip/strip.c:413:
+static const MetricomKey SIP0Key = { "SIP0" };

CHECK:CAMELCASE: Avoid CamelCase: <ARP0Key>
#3380: FILE: drivers/staging/strip/strip.c:414:
+static const MetricomKey ARP0Key = { "ARP0" };

CHECK:CAMELCASE: Avoid CamelCase: <MaxARPInterval>
#3386: FILE: drivers/staging/strip/strip.c:420:
+static const long MaxARPInterval = 60 * HZ;	/* One minute */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#3397: FILE: drivers/staging/strip/strip.c:431:
+static const unsigned short MAX_RECV_MTU = 1500;	/* Hoping for Ethernet sized packets in the future! */

CHECK:CAMELCASE: Avoid CamelCase: <LongTime>
#3400: FILE: drivers/staging/strip/strip.c:434:
+static const long LongTime = 0x7FFFFFFF;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3412: FILE: drivers/staging/strip/strip.c:446:
+#define has_prefix(T,L,P) (((L) >= sizeof(P)-1) && !strncmp((T), (P), sizeof(P)-1))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3412: FILE: drivers/staging/strip/strip.c:446:
+#define has_prefix(T,L,P) (((L) >= sizeof(P)-1) && !strncmp((T), (P), sizeof(P)-1))
                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3412: FILE: drivers/staging/strip/strip.c:446:
+#define has_prefix(T,L,P) (((L) >= sizeof(P)-1) && !strncmp((T), (P), sizeof(P)-1))
                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3412: FILE: drivers/staging/strip/strip.c:446:
+#define has_prefix(T,L,P) (((L) >= sizeof(P)-1) && !strncmp((T), (P), sizeof(P)-1))
                                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3415: FILE: drivers/staging/strip/strip.c:449:
+#define text_equal(T,L,S) (((L) == sizeof(S)-1) && !strncmp((T), (S), sizeof(S)-1))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3415: FILE: drivers/staging/strip/strip.c:449:
+#define text_equal(T,L,S) (((L) == sizeof(S)-1) && !strncmp((T), (S), sizeof(S)-1))
                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3415: FILE: drivers/staging/strip/strip.c:449:
+#define text_equal(T,L,S) (((L) == sizeof(S)-1) && !strncmp((T), (S), sizeof(S)-1))
                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3415: FILE: drivers/staging/strip/strip.c:449:
+#define text_equal(T,L,S) (((L) == sizeof(S)-1) && !strncmp((T), (S), sizeof(S)-1))
                                                                                ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3417: FILE: drivers/staging/strip/strip.c:451:
+#define READHEX(X) ((X)>='0' && (X)<='9' ? (X)-'0' :      \
                        ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3417: FILE: drivers/staging/strip/strip.c:451:
+#define READHEX(X) ((X)>='0' && (X)<='9' ? (X)-'0' :      \
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3417: FILE: drivers/staging/strip/strip.c:451:
+#define READHEX(X) ((X)>='0' && (X)<='9' ? (X)-'0' :      \
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#3417: FILE: drivers/staging/strip/strip.c:451:
+#define READHEX(X) ((X)>='0' && (X)<='9' ? (X)-'0' :      \
+                    (X)>='a' && (X)<='f' ? (X)-'a'+10 :   \
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )

ERROR:CODE_INDENT: code indent should use tabs where possible
#3418: FILE: drivers/staging/strip/strip.c:452:
+                    (X)>='a' && (X)<='f' ? (X)-'a'+10 :   \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3418: FILE: drivers/staging/strip/strip.c:452:
+                    (X)>='a' && (X)<='f' ? (X)-'a'+10 :   \$

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3418: FILE: drivers/staging/strip/strip.c:452:
+                    (X)>='a' && (X)<='f' ? (X)-'a'+10 :   \
                        ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3418: FILE: drivers/staging/strip/strip.c:452:
+                    (X)>='a' && (X)<='f' ? (X)-'a'+10 :   \
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3418: FILE: drivers/staging/strip/strip.c:452:
+                    (X)>='a' && (X)<='f' ? (X)-'a'+10 :   \
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3418: FILE: drivers/staging/strip/strip.c:452:
+                    (X)>='a' && (X)<='f' ? (X)-'a'+10 :   \
                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#3419: FILE: drivers/staging/strip/strip.c:453:
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3419: FILE: drivers/staging/strip/strip.c:453:
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )$

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3419: FILE: drivers/staging/strip/strip.c:453:
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )
                        ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3419: FILE: drivers/staging/strip/strip.c:453:
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3419: FILE: drivers/staging/strip/strip.c:453:
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3419: FILE: drivers/staging/strip/strip.c:453:
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )
                                                   ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3419: FILE: drivers/staging/strip/strip.c:453:
+                    (X)>='A' && (X)<='F' ? (X)-'A'+10 : 0 )

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3423: FILE: drivers/staging/strip/strip.c:457:
+#define READDEC(X) ((X)>='0' && (X)<='9' ? (X)-'0' : 0)
                        ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3423: FILE: drivers/staging/strip/strip.c:457:
+#define READDEC(X) ((X)>='0' && (X)<='9' ? (X)-'0' : 0)
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3423: FILE: drivers/staging/strip/strip.c:457:
+#define READDEC(X) ((X)>='0' && (X)<='9' ? (X)-'0' : 0)
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#3423: FILE: drivers/staging/strip/strip.c:457:
+#define READDEC(X) ((X)>='0' && (X)<='9' ? (X)-'0' : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#3425: FILE: drivers/staging/strip/strip.c:459:
+#define ARRAY_END(X) (&((X)[ARRAY_SIZE(X)]))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3429: FILE: drivers/staging/strip/strip.c:463:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "neighbor_entry"
#3441: FILE: drivers/staging/strip/strip.c:475:
+	if (neighbor_entry != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3452: FILE: drivers/staging/strip/strip.c:486:
+static void DumpData(char *msg, struct strip *strip_info, __u8 * ptr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <DumpData>
#3452: FILE: drivers/staging/strip/strip.c:486:
+static void DumpData(char *msg, struct strip *strip_info, __u8 * ptr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3453: FILE: drivers/staging/strip/strip.c:487:
+		     __u8 * end)

CHECK:CAMELCASE: Avoid CamelCase: <MAX_DumpData>
#3456: FILE: drivers/staging/strip/strip.c:490:
+	__u8 pkt_text[MAX_DumpData], *p = pkt_text;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3479: FILE: drivers/staging/strip/strip.c:513:
+	printk(KERN_INFO "%s: %-13s%s\n", strip_info->dev->name, msg, pkt_text);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3482: FILE: drivers/staging/strip/strip.c:516:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3494: FILE: drivers/staging/strip/strip.c:528:
+typedef enum {

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_Diff>
#3495: FILE: drivers/staging/strip/strip.c:529:
+	Stuff_Diff = 0x00,

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_DiffZero>
#3496: FILE: drivers/staging/strip/strip.c:530:
+	Stuff_DiffZero = 0x40,

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_Same>
#3497: FILE: drivers/staging/strip/strip.c:531:
+	Stuff_Same = 0x80,

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_Zero>
#3498: FILE: drivers/staging/strip/strip.c:532:
+	Stuff_Zero = 0xC0,

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_NoCode>
#3499: FILE: drivers/staging/strip/strip.c:533:
+	Stuff_NoCode = 0xFF,	/* Special code, meaning no code selected */

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_CodeMask>
#3501: FILE: drivers/staging/strip/strip.c:535:
+	Stuff_CodeMask = 0xC0,

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_CountMask>
#3502: FILE: drivers/staging/strip/strip.c:536:
+	Stuff_CountMask = 0x3F,

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_MaxCount>
#3503: FILE: drivers/staging/strip/strip.c:537:
+	Stuff_MaxCount = 0x3F,

CHECK:CAMELCASE: Avoid CamelCase: <Stuff_Magic>
#3504: FILE: drivers/staging/strip/strip.c:538:
+	Stuff_Magic = 0x0D	/* The value we are eliminating */

CHECK:CAMELCASE: Avoid CamelCase: <StuffingCode>
#3505: FILE: drivers/staging/strip/strip.c:539:
+} StuffingCode;

CHECK:CAMELCASE: Avoid CamelCase: <StuffData_FinishBlock>
#3520: FILE: drivers/staging/strip/strip.c:554:
+#define StuffData_FinishBlock(X) \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3523: FILE: drivers/staging/strip/strip.c:557:
+static __u8 *StuffData(__u8 * src, __u32 length, __u8 * dst,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3523: FILE: drivers/staging/strip/strip.c:557:
+static __u8 *StuffData(__u8 * src, __u32 length, __u8 * dst,

CHECK:CAMELCASE: Avoid CamelCase: <StuffData>
#3523: FILE: drivers/staging/strip/strip.c:557:
+static __u8 *StuffData(__u8 * src, __u32 length, __u8 * dst,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#3524: FILE: drivers/staging/strip/strip.c:558:
+		       __u8 ** code_ptr_ptr)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3588: FILE: drivers/staging/strip/strip.c:622:
+			/* and fall through to Stuff_Diff case below

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3589: FILE: drivers/staging/strip/strip.c:623:
+^I^I^I * Note cunning cleverness here: case Stuff_Diff compares $

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3605: FILE: drivers/staging/strip/strip.c:639:
+			/* else, if we have three in a row, it is worth starting a Stuff_Same block */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3607: FILE: drivers/staging/strip/strip.c:641:
+			else if ((*src ^ Stuff_Magic) == dst[-1]
+				 && dst[-1] == dst[-2]) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3611: FILE: drivers/staging/strip/strip.c:645:
+				if (code == Stuff_Diff + 0) {
+					code = Stuff_Same + 0;
+				}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3621: FILE: drivers/staging/strip/strip.c:655:
+			else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3628: FILE: drivers/staging/strip/strip.c:662:
+		if (count == Stuff_MaxCount) {
+			StuffData_FinishBlock(code + count);
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3646: FILE: drivers/staging/strip/strip.c:680:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3655: FILE: drivers/staging/strip/strip.c:689:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3661: FILE: drivers/staging/strip/strip.c:695:
+static __u8 *UnStuffData(__u8 * src, __u8 * end, __u8 * dst,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3661: FILE: drivers/staging/strip/strip.c:695:
+static __u8 *UnStuffData(__u8 * src, __u8 * end, __u8 * dst,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3661: FILE: drivers/staging/strip/strip.c:695:
+static __u8 *UnStuffData(__u8 * src, __u8 * end, __u8 * dst,

CHECK:CAMELCASE: Avoid CamelCase: <UnStuffData>
#3661: FILE: drivers/staging/strip/strip.c:695:
+static __u8 *UnStuffData(__u8 * src, __u8 * end, __u8 * dst,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3670: FILE: drivers/staging/strip/strip.c:704:
+		int count = (*src ^ Stuff_Magic) & Stuff_CountMask;
+		switch ((*src ^ Stuff_Magic) & Stuff_CodeMask) {

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#3677: FILE: drivers/staging/strip/strip.c:711:
+			}
+			while (--count >= 0 && dst < dst_end);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#3678: FILE: drivers/staging/strip/strip.c:712:
+			if (count < 0)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3680: FILE: drivers/staging/strip/strip.c:714:
+			else {

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#3695: FILE: drivers/staging/strip/strip.c:729:
+			}
+			while (--count >= 0 && dst < dst_end);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#3708: FILE: drivers/staging/strip/strip.c:742:
+			}
+			while (--count >= 0 && dst < dst_end);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#3718: FILE: drivers/staging/strip/strip.c:752:
+			}
+			while (--count >= 0 && dst < dst_end);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3732: FILE: drivers/staging/strip/strip.c:766:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#3744: FILE: drivers/staging/strip/strip.c:778:
+	old_termios =*(tty->termios);
 	            ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#3744: FILE: drivers/staging/strip/strip.c:778:
+	old_termios =*(tty->termios);
 	             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tty->termios
#3744: FILE: drivers/staging/strip/strip.c:778:
+	old_termios =*(tty->termios);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#3754: FILE: drivers/staging/strip/strip.c:788:
+#define IS_RADIO_ADDRESS(p) (                                                 \
+  isdigit((p)[0]) && isdigit((p)[1]) && isdigit((p)[2]) && isdigit((p)[3]) && \
+  (p)[4] == '-' &&                                                            \
+  isdigit((p)[5]) && isdigit((p)[6]) && isdigit((p)[7]) && isdigit((p)[8])    )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3755: FILE: drivers/staging/strip/strip.c:789:
+  isdigit((p)[0]) && isdigit((p)[1]) && isdigit((p)[2]) && isdigit((p)[3]) && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3756: FILE: drivers/staging/strip/strip.c:790:
+  (p)[4] == '-' &&                                                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3757: FILE: drivers/staging/strip/strip.c:791:
+  isdigit((p)[5]) && isdigit((p)[6]) && isdigit((p)[7]) && isdigit((p)[8])    )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3757: FILE: drivers/staging/strip/strip.c:791:
+  isdigit((p)[5]) && isdigit((p)[6]) && isdigit((p)[7]) && isdigit((p)[8])    )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3759: FILE: drivers/staging/strip/strip.c:793:
+static int string_to_radio_address(MetricomAddress * addr, __u8 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3759: FILE: drivers/staging/strip/strip.c:793:
+static int string_to_radio_address(MetricomAddress * addr, __u8 * p)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#3769: FILE: drivers/staging/strip/strip.c:803:
+	return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3776: FILE: drivers/staging/strip/strip.c:810:
+static __u8 *radio_address_to_string(const MetricomAddress * addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3777: FILE: drivers/staging/strip/strip.c:811:
+				     MetricomAddressString * p)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#3781: FILE: drivers/staging/strip/strip.c:815:
+	return (p->c);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3798: FILE: drivers/staging/strip/strip.c:832:
+	__u8 *t = kmalloc(tx_size, GFP_ATOMIC);
+	if (r && s && t) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3804: FILE: drivers/staging/strip/strip.c:838:
+		strip_info->mtu = dev->mtu = mtu;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#3805: FILE: drivers/staging/strip/strip.c:839:
+		return (1);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#3810: FILE: drivers/staging/strip/strip.c:844:
+	return (0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3814: FILE: drivers/staging/strip/strip.c:848:
+ * MTU has been changed by the IP layer. $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3827: FILE: drivers/staging/strip/strip.c:861:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3835: FILE: drivers/staging/strip/strip.c:869:
+		printk(KERN_ERR "%s: unable to grow strip buffers, MTU change cancelled.\n",

CHECK:BRACES: Unbalanced braces around else statement
#3845: FILE: drivers/staging/strip/strip.c:879:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#3855: FILE: drivers/staging/strip/strip.c:889:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3863: FILE: drivers/staging/strip/strip.c:897:
+	printk(KERN_NOTICE "%s: strip MTU changed fom %d to %d.\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3882: FILE: drivers/staging/strip/strip.c:916:
+
+

WARNING:TYPO_SPELLING: 'charactes' may be misspelled - perhaps 'characters'?
#3889: FILE: drivers/staging/strip/strip.c:923:
+ * ascii representation of the number plus 9 charactes for the " seconds"
                                              ^^^^^^^^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#3901: FILE: drivers/staging/strip/strip.c:935:
+	return (buffer);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3905: FILE: drivers/staging/strip/strip.c:939:
+static struct strip *strip_get_idx(loff_t pos) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3949: FILE: drivers/staging/strip/strip.c:983:
+static void strip_seq_neighbours(struct seq_file *seq,
+			   const MetricomNodeTable * table,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3949: FILE: drivers/staging/strip/strip.c:983:
+			   const MetricomNodeTable * table,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3958: FILE: drivers/staging/strip/strip.c:992:
+		int i;
+		t = table->timestamp;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3970: FILE: drivers/staging/strip/strip.c:1004:
+	} while (table->timestamp.tv_sec != t.tv_sec
+		 || table->timestamp.tv_usec != t.tv_usec);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3976: FILE: drivers/staging/strip/strip.c:1010:
+ * run issues. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3978: FILE: drivers/staging/strip/strip.c:1012:
+ * The buffer in seq_file is PAGESIZE (4K) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3983: FILE: drivers/staging/strip/strip.c:1017:
+static void strip_seq_status_info(struct seq_file *seq, $

CHECK:SPACING: No space is necessary after a cast
#4007: FILE: drivers/staging/strip/strip.c:1041:
+	    *(MetricomAddress *) strip_info->dev->dev_addr;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#4032: FILE: drivers/staging/strip/strip.c:1066:
+		seq_printf(seq, " (Checksums Enabled)");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#4033: FILE: drivers/staging/strip/strip.c:1067:
+	seq_printf(seq, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4038: FILE: drivers/staging/strip/strip.c:1072:
+	seq_printf(seq, " Receive packet rate:   %ld packets per second\n",
+		     rx_average_pps / 8);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4040: FILE: drivers/staging/strip/strip.c:1074:
+	seq_printf(seq, " Transmit packet rate:  %ld packets per second\n",
+		     tx_average_pps / 8);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4042: FILE: drivers/staging/strip/strip.c:1076:
+	seq_printf(seq, " Sent packet rate:      %ld packets per second\n",
+		     sx_average_pps / 8);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4044: FILE: drivers/staging/strip/strip.c:1078:
+	seq_printf(seq, " Next watchdog probe:\t%s\n",
+		     time_delta(temp, watchdog_doprobe));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4046: FILE: drivers/staging/strip/strip.c:1080:
+	seq_printf(seq, " Next watchdog reset:\t%s\n",
+		     time_delta(temp, watchdog_doreset));

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#4047: FILE: drivers/staging/strip/strip.c:1081:
+	seq_printf(seq, " Next gratuitous ARP:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#4052: FILE: drivers/staging/strip/strip.c:1086:
+		seq_printf(seq, "Disabled\n");

CHECK:BRACES: Unbalanced braces around else statement
#4053: FILE: drivers/staging/strip/strip.c:1087:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4056: FILE: drivers/staging/strip/strip.c:1090:
+		seq_printf(seq, " Next ARP interval:\t%ld seconds\n",
+			     JIFFIE_TO_SEC(arp_interval));

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#4061: FILE: drivers/staging/strip/strip.c:1095:
+		seq_printf(seq, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4063: FILE: drivers/staging/strip/strip.c:1097:
+		seq_printf(seq,
+			     " Total bytes:         \trx:\t%lu\ttx:\t%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4066: FILE: drivers/staging/strip/strip.c:1100:
+		seq_printf(seq,
+			     "  thru radio:         \trx:\t%lu\ttx:\t%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4069: FILE: drivers/staging/strip/strip.c:1103:
+		seq_printf(seq,
+			     "  thru serial port:   \trx:\t%lu\ttx:\t%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4072: FILE: drivers/staging/strip/strip.c:1106:
+		seq_printf(seq,
+			     " Total stat/err bytes:\trx:\t%lu\ttx:\t%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4076: FILE: drivers/staging/strip/strip.c:1110:
+		strip_seq_neighbours(seq, &strip_info->poletops,
+					"Poletops:");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4078: FILE: drivers/staging/strip/strip.c:1112:
+		strip_seq_neighbours(seq, &strip_info->portables,
+					"Portables:");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4095: FILE: drivers/staging/strip/strip.c:1129:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4117: FILE: drivers/staging/strip/strip.c:1151:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <ResetRadio>
#4122: FILE: drivers/staging/strip/strip.c:1156:
+static void ResetRadio(struct strip *strip_info)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4128: FILE: drivers/staging/strip/strip.c:1162:
+^I/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4133: FILE: drivers/staging/strip/strip.c:1167:
+		printk(KERN_INFO "%s: No response: Resetting radio.\n",

CHECK:SPACING: No space is necessary after a cast
#4153: FILE: drivers/staging/strip/strip.c:1187:
+	*(MetricomAddress *) & strip_info->true_dev_addr = zero_address;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#4153: FILE: drivers/staging/strip/strip.c:1187:
+	*(MetricomAddress *) & strip_info->true_dev_addr = zero_address;
 	                     ^

CHECK:SPACING: No space is necessary after a cast
#4155: FILE: drivers/staging/strip/strip.c:1189:
+		*(MetricomAddress *) strip_info->dev->dev_addr =

CHECK:BRACES: braces {} should be used on all arms of this statement
#4174: FILE: drivers/staging/strip/strip.c:1208:
+		if (strip_info->user_baud == tty_get_baud_rate(tty)) {
[...]
+		} else
[...]

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#4178: FILE: drivers/staging/strip/strip.c:1212:
+			static const StringDescriptor baudstring[2] =
+			    { {b0, sizeof(b0) - 1}

CHECK:BRACES: Unbalanced braces around else statement
#4188: FILE: drivers/staging/strip/strip.c:1222:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4228: FILE: drivers/staging/strip/strip.c:1262:
+static __u8 *add_checksum(__u8 * buffer, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4228: FILE: drivers/staging/strip/strip.c:1262:
+static __u8 *add_checksum(__u8 * buffer, __u8 * end)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4232: FILE: drivers/staging/strip/strip.c:1266:
+	__u8 *p = buffer;
+	while (p < end)

CHECK:CAMELCASE: Avoid CamelCase: <xF>
#4234: FILE: drivers/staging/strip/strip.c:1268:
+	end[3] = hextable[sum & 0xF];

CHECK:BRACES: braces {} should be used on all arms of this statement
#4257: FILE: drivers/staging/strip/strip.c:1291:
+	if (header->protocol == htons(ETH_P_IP))
[...]
+	else if (header->protocol == htons(ETH_P_ARP))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4261: FILE: drivers/staging/strip/strip.c:1295:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4262: FILE: drivers/staging/strip/strip.c:1296:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'strip_make_packet', this function's name, in a string
#4263: FILE: drivers/staging/strip/strip.c:1297:
+		       "%s: strip_make_packet: Unknown packet type 0x%04X\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4265: FILE: drivers/staging/strip/strip.c:1299:
+		return (NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4269: FILE: drivers/staging/strip/strip.c:1303:
+		printk(KERN_ERR

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4272: FILE: drivers/staging/strip/strip.c:1306:
+		return (NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4280: FILE: drivers/staging/strip/strip.c:1314:
+		printk(KERN_ERR "%s: Dropping packet addressed to self\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4282: FILE: drivers/staging/strip/strip.c:1316:
+		return (NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!in_dev"
#4295: FILE: drivers/staging/strip/strip.c:1329:
+		if (in_dev == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4305: FILE: drivers/staging/strip/strip.c:1339:
+			printk(KERN_ERR

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4308: FILE: drivers/staging/strip/strip.c:1342:
+			return (NULL);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4344: FILE: drivers/staging/strip/strip.c:1378:
+	return (ptr);

CHECK:SPACING: No space is necessary after a cast
#4351: FILE: drivers/staging/strip/strip.c:1385:
+	int doreset = (long) jiffies - strip_info->watchdog_doreset >= 0;

CHECK:SPACING: No space is necessary after a cast
#4352: FILE: drivers/staging/strip/strip.c:1386:
+	int doprobe = (long) jiffies - strip_info->watchdog_doprobe >= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4353: FILE: drivers/staging/strip/strip.c:1387:
+	int doprobe = (long) jiffies - strip_info->watchdog_doprobe >= 0
+	    && !doreset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#4361: FILE: drivers/staging/strip/strip.c:1395:
+		char *newptr = strip_make_packet(ptr, strip_info, skb);
+		strip_info->tx_pps_count++;

CHECK:BRACES: braces {} should be used on all arms of this statement
#4362: FILE: drivers/staging/strip/strip.c:1396:
+		if (!newptr)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4364: FILE: drivers/staging/strip/strip.c:1398:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4385: FILE: drivers/staging/strip/strip.c:1419:
+			struct timeval tv;
+			do_gettimeofday(&tv);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4386: FILE: drivers/staging/strip/strip.c:1420:
+			printk(KERN_INFO "**** Sending tickle string %d      at %02d.%06d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4431: FILE: drivers/staging/strip/strip.c:1465:
+		printk(KERN_ERR "%s: Sending%5d bytes;%5d bytes free.\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4447: FILE: drivers/staging/strip/strip.c:1481:
+		brd = addr = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4459: FILE: drivers/staging/strip/strip.c:1493:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4475: FILE: drivers/staging/strip/strip.c:1509:
+	if (strip_info->working
+	    && (long) jiffies - strip_info->gratuitous_arp >= 0

CHECK:SPACING: No space is necessary after a cast
#4475: FILE: drivers/staging/strip/strip.c:1509:
+	    && (long) jiffies - strip_info->gratuitous_arp >= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4476: FILE: drivers/staging/strip/strip.c:1510:
+	    && (long) jiffies - strip_info->gratuitous_arp >= 0
+	    && memcmp(strip_info->dev->dev_addr, zero_address.c,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4478: FILE: drivers/staging/strip/strip.c:1512:
+		      sizeof(zero_address))
+	    && arp_query(haddr.c, brd, strip_info->dev)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4480: FILE: drivers/staging/strip/strip.c:1514:
+		/*printk(KERN_INFO "%s: Sending gratuitous ARP with interval %ld\n",
+		   strip_info->dev->name, strip_info->arp_interval / HZ); */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4480: FILE: drivers/staging/strip/strip.c:1514:
+		   strip_info->dev->name, strip_info->arp_interval / HZ); */

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#4487: FILE: drivers/staging/strip/strip.c:1521:
+			arp_send(ARPOP_REPLY, ETH_P_ARP, addr,	/* Target address of ARP packet is our address */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#4491: FILE: drivers/staging/strip/strip.c:1525:
+				 strip_info->dev->dev_addr,	/* Source HW address is our HW address */

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#4492: FILE: drivers/staging/strip/strip.c:1526:
+				 strip_info->dev->dev_addr);	/* Target HW address is our HW address (redundant) */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4507: FILE: drivers/staging/strip/strip.c:1541:
+		printk(KERN_ERR "%s: xmit call when iface is down\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4516: FILE: drivers/staging/strip/strip.c:1550:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4520: FILE: drivers/staging/strip/strip.c:1554:
+			DIV_ROUND_CLOSEST(strip_info->rx_pps_count*HZ*8, t);
 			                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4520: FILE: drivers/staging/strip/strip.c:1554:
+			DIV_ROUND_CLOSEST(strip_info->rx_pps_count*HZ*8, t);
 			                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4522: FILE: drivers/staging/strip/strip.c:1556:
+			DIV_ROUND_CLOSEST(strip_info->tx_pps_count*HZ*8, t);
 			                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4522: FILE: drivers/staging/strip/strip.c:1556:
+			DIV_ROUND_CLOSEST(strip_info->tx_pps_count*HZ*8, t);
 			                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4524: FILE: drivers/staging/strip/strip.c:1558:
+			DIV_ROUND_CLOSEST(strip_info->sx_pps_count*HZ*8, t);
 			                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4524: FILE: drivers/staging/strip/strip.c:1558:
+			DIV_ROUND_CLOSEST(strip_info->sx_pps_count*HZ*8, t);
 			                                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4536: FILE: drivers/staging/strip/strip.c:1570:
+			printk(KERN_INFO "%s: WARNING: Receiving %ld packets per second.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4539: FILE: drivers/staging/strip/strip.c:1573:
+			printk(KERN_INFO "%s: WARNING: Tx        %ld packets per second.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4542: FILE: drivers/staging/strip/strip.c:1576:
+			printk(KERN_INFO "%s: WARNING: Sending   %ld packets per second.\n",

CHECK:CAMELCASE: Avoid CamelCase: <strip_IdleTask>
#4563: FILE: drivers/staging/strip/strip.c:1597:
+static void strip_IdleTask(unsigned long parameter)

CHECK:SPACING: No space is necessary after a cast
#4565: FILE: drivers/staging/strip/strip.c:1599:
+	strip_xmit(NULL, (struct net_device *) parameter);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4581: FILE: drivers/staging/strip/strip.c:1615:
+			const void *saddr, unsigned len)

CHECK:SPACING: No space is necessary after a cast
#4584: FILE: drivers/staging/strip/strip.c:1618:
+	STRIP_Header *header = (STRIP_Header *) skb_push(skb, sizeof(STRIP_Header));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4587: FILE: drivers/staging/strip/strip.c:1621:
+	/*printk(KERN_INFO "%s: strip_header 0x%04X %s\n", dev->name, type,
+	   type == ETH_P_IP ? "IP" : type == ETH_P_ARP ? "ARP" : ""); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4587: FILE: drivers/staging/strip/strip.c:1621:
+	   type == ETH_P_IP ? "IP" : type == ETH_P_ARP ? "ARP" : ""); */

CHECK:SPACING: No space is necessary after a cast
#4597: FILE: drivers/staging/strip/strip.c:1631:
+	header->dst_addr = *(MetricomAddress *) daddr;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4598: FILE: drivers/staging/strip/strip.c:1632:
+	return (dev->hard_header_len);

CHECK:SPACING: No space is necessary after a cast
#4612: FILE: drivers/staging/strip/strip.c:1646:
+	STRIP_Header *header = (STRIP_Header *) skb->data;

WARNING:REPEATED_WORD: Possible repeated word: 'if'
#4614: FILE: drivers/staging/strip/strip.c:1648:
+	/* Arp find returns zero if if knows the address, */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4622: FILE: drivers/staging/strip/strip.c:1656:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4630: FILE: drivers/staging/strip/strip.c:1664:
+static void get_radio_version(struct strip *strip_info, __u8 * ptr, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4630: FILE: drivers/staging/strip/strip.c:1664:
+static void get_radio_version(struct strip *strip_info, __u8 * ptr, __u8 * end)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4655: FILE: drivers/staging/strip/strip.c:1689:
+		printk(KERN_INFO "%s: Radio Firmware: %.*s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4670: FILE: drivers/staging/strip/strip.c:1704:
+		printk(KERN_DEBUG

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4680: FILE: drivers/staging/strip/strip.c:1714:
+static void get_radio_voltage(struct strip *strip_info, __u8 * ptr, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4680: FILE: drivers/staging/strip/strip.c:1714:
+static void get_radio_voltage(struct strip *strip_info, __u8 * ptr, __u8 * end)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4688: FILE: drivers/staging/strip/strip.c:1722:
+		printk(KERN_DEBUG

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4698: FILE: drivers/staging/strip/strip.c:1732:
+static void get_radio_neighbours(MetricomNodeTable * table, __u8 * ptr, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4698: FILE: drivers/staging/strip/strip.c:1732:
+static void get_radio_neighbours(MetricomNodeTable * table, __u8 * ptr, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4698: FILE: drivers/staging/strip/strip.c:1732:
+static void get_radio_neighbours(MetricomNodeTable * table, __u8 * ptr, __u8 * end)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4704: FILE: drivers/staging/strip/strip.c:1738:
+		char *dst = node->c, *limit = dst + sizeof(*node) - 1;
+		while (ptr < end && *ptr <= 32)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4715: FILE: drivers/staging/strip/strip.c:1749:
+static int get_radio_address(struct strip *strip_info, __u8 * p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4725: FILE: drivers/staging/strip/strip.c:1759:
+		MetricomAddressString addr_string;
+		radio_address_to_string(&addr, &addr_string);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4726: FILE: drivers/staging/strip/strip.c:1760:
+		printk(KERN_INFO "%s: Radio address = %s\n",

CHECK:SPACING: No space is necessary after a cast
#4730: FILE: drivers/staging/strip/strip.c:1764:
+			*(MetricomAddress *) strip_info->dev->dev_addr =

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4750: FILE: drivers/staging/strip/strip.c:1784:
+		printk(KERN_INFO "%s: Radio provides message checksums\n",

CHECK:CAMELCASE: Avoid CamelCase: <RecvErr>
#4756: FILE: drivers/staging/strip/strip.c:1790:
+static void RecvErr(char *msg, struct strip *strip_info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4760: FILE: drivers/staging/strip/strip.c:1794:
+	__u8 *end = strip_info->sx_buff + strip_info->sx_count;
+	DumpData(msg, strip_info, ptr, end);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4764: FILE: drivers/staging/strip/strip.c:1798:
+static void RecvErr_Message(struct strip *strip_info, __u8 * sendername,

CHECK:CAMELCASE: Avoid CamelCase: <RecvErr_Message>
#4764: FILE: drivers/staging/strip/strip.c:1798:
+static void RecvErr_Message(struct strip *strip_info, __u8 * sendername,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4765: FILE: drivers/staging/strip/strip.c:1799:
+			    const __u8 * msg, u_long len)

CHECK:BRACES: braces {} should be used on all arms of this statement
#4767: FILE: drivers/staging/strip/strip.c:1801:
+	if (has_prefix(msg, len, "001")) {	/* Not in StarMode! */
[...]
+	else if (has_prefix(msg, len, "002")) {	/* Remap handle */
[...]
+	else if (has_prefix(msg, len, "003")) {	/* Can't resolve name */
[...]
+	else if (has_prefix(msg, len, "004")) {	/* Name too small or missing */
[...]
+	else if (has_prefix(msg, len, "005"))	/* Bad count specification */
[...]
+	else if (has_prefix(msg, len, "006"))	/* Header too big */
[...]
+	else if (has_prefix(msg, len, "007")) {	/* Body too big */
[...]
+	else if (has_prefix(msg, len, "008")) {	/* Bad character in name */
[...]
+	else if (has_prefix(msg, len, "009"))	/* No count or line terminator */
[...]
+	else if (has_prefix(msg, len, "010"))	/* Invalid checksum */
[...]
+	else if (has_prefix(msg, len, "011"))	/* Checksum didn't match */
[...]
+	else if (has_prefix(msg, len, "012"))	/* Failed to transmit packet */
[...]
+	else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4769: FILE: drivers/staging/strip/strip.c:1803:
+		printk(KERN_INFO "%s: Radio %s is not in StarMode\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4779: FILE: drivers/staging/strip/strip.c:1813:
+		printk(KERN_INFO "%s: Destination radio name is unknown\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#4788: FILE: drivers/staging/strip/strip.c:1822:
+			struct timeval tv;
+			do_gettimeofday(&tv);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4789: FILE: drivers/staging/strip/strip.c:1823:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4796: FILE: drivers/staging/strip/strip.c:1830:
+			printk(KERN_INFO "%s: Radio now in starmode\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4807: FILE: drivers/staging/strip/strip.c:1841:
+			printk(KERN_INFO

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#4813: FILE: drivers/staging/strip/strip.c:1847:
+			 * If this message has a valid checksum on the end, then the call to verify_checksum

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#4814: FILE: drivers/staging/strip/strip.c:1848:
+			 * will elevate the firmware_level to ChecksummedMessages for us. (The actual return

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#4819: FILE: drivers/staging/strip/strip.c:1853:
+			 * If the radio has structured messages but we don't yet have all our information about it,

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#4820: FILE: drivers/staging/strip/strip.c:1854:
+			 * we should do probes without delay, until we have gathered all the information

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4835: FILE: drivers/staging/strip/strip.c:1869:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4842: FILE: drivers/staging/strip/strip.c:1876:
+		printk(KERN_ERR

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4863: FILE: drivers/staging/strip/strip.c:1897:
+static void process_AT_response(struct strip *strip_info, __u8 * ptr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4864: FILE: drivers/staging/strip/strip.c:1898:
+				__u8 * end)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4868: FILE: drivers/staging/strip/strip.c:1902:
+	__u8 *p = ptr;
+	while (p < end && p[-1] != 10)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4876: FILE: drivers/staging/strip/strip.c:1910:
+		struct timeval tv;
+		do_gettimeofday(&tv);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4877: FILE: drivers/staging/strip/strip.c:1911:
+		printk(KERN_INFO "**** Got AT response %.7s      at %02d.%06d\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4898: FILE: drivers/staging/strip/strip.c:1932:
+static void process_ACK(struct strip *strip_info, __u8 * ptr, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4898: FILE: drivers/staging/strip/strip.c:1932:
+static void process_ACK(struct strip *strip_info, __u8 * ptr, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4903: FILE: drivers/staging/strip/strip.c:1937:
+static void process_Info(struct strip *strip_info, __u8 * ptr, __u8 * end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4903: FILE: drivers/staging/strip/strip.c:1937:
+static void process_Info(struct strip *strip_info, __u8 * ptr, __u8 * end)

CHECK:CAMELCASE: Avoid CamelCase: <process_Info>
#4903: FILE: drivers/staging/strip/strip.c:1937:
+static void process_Info(struct strip *strip_info, __u8 * ptr, __u8 * end)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4917: FILE: drivers/staging/strip/strip.c:1951:
+		    sizeof(zero_address))
+	    && memcmp(&strip_info->true_dev_addr, zero_address.c,

WARNING:LINE_SPACING: Missing a blank line after declarations
#4920: FILE: drivers/staging/strip/strip.c:1954:
+		struct net_device *dev;
+		read_lock_bh(&dev_base_lock);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4926: FILE: drivers/staging/strip/strip.c:1960:
+				printk(KERN_INFO

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4930: FILE: drivers/staging/strip/strip.c:1964:
+				return (dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4942: FILE: drivers/staging/strip/strip.c:1976:
+static void deliver_packet(struct strip *strip_info, STRIP_Header * header,

WARNING:LINE_SPACING: Missing a blank line after declarations
#4946: FILE: drivers/staging/strip/strip.c:1980:
+	struct sk_buff *skb = dev_alloc_skb(sizeof(STRIP_Header) + packetlen);
+	if (!skb) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4947: FILE: drivers/staging/strip/strip.c:1981:
+		printk(KERN_ERR "%s: memory squeeze, dropping packet.\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#4947: FILE: drivers/staging/strip/strip.c:1981:
+	if (!skb) {
+		printk(KERN_ERR "%s: memory squeeze, dropping packet.\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4975: FILE: drivers/staging/strip/strip.c:2009:
+			      STRIP_Header * header, __u8 * ptr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4975: FILE: drivers/staging/strip/strip.c:2009:
+			      STRIP_Header * header, __u8 * ptr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4976: FILE: drivers/staging/strip/strip.c:2010:
+			      __u8 * end)

CHECK:SPACING: No space is necessary after a cast
#4987: FILE: drivers/staging/strip/strip.c:2021:
+	packetlen = ((__u16) strip_info->rx_buff[2] << 8) | strip_info->rx_buff[3];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4990: FILE: drivers/staging/strip/strip.c:2024:
+		printk(KERN_INFO "%s: Dropping oversized received IP packet: %d bytes\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5017: FILE: drivers/staging/strip/strip.c:2051:
+			       STRIP_Header * header, __u8 * ptr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5017: FILE: drivers/staging/strip/strip.c:2051:
+			       STRIP_Header * header, __u8 * ptr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5018: FILE: drivers/staging/strip/strip.c:2052:
+			       __u8 * end)

CHECK:SPACING: No space is necessary after a cast
#5021: FILE: drivers/staging/strip/strip.c:2055:
+	struct arphdr *arphdr = (struct arphdr *) strip_info->rx_buff;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5033: FILE: drivers/staging/strip/strip.c:2067:
+		printk(KERN_INFO

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5041: FILE: drivers/staging/strip/strip.c:2075:
+	/*printk(KERN_INFO "%s: Got %d byte ARP %s\n",
+	   strip_info->dev->name, packetlen,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5042: FILE: drivers/staging/strip/strip.c:2076:
+	   ntohs(arphdr->ar_op) == ARPOP_REQUEST ? "request" : "reply"); */

CHECK:BRACES: braces {} should be used on all arms of this statement
#5117: FILE: drivers/staging/strip/strip.c:2151:
+	if (*ptr == '*')
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5119: FILE: drivers/staging/strip/strip.c:2153:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5126: FILE: drivers/staging/strip/strip.c:2160:
+	while (ptr < end && *ptr != '*'
+	       && sptr < ARRAY_END(sendername) - 1)

CHECK:BRACES: braces {} should be used on all arms of this statement
#5180: FILE: drivers/staging/strip/strip.c:2214:
+	if (key.l == SIP0Key.l) {
[...]
+	} else if (key.l == ARP0Key.l) {
[...]
+	} else if (key.l == ATR_Key.l) {
[...]
+	} else if (key.l == ACK_Key.l) {
[...]
+	} else if (key.l == INF_Key.l) {
[...]
+	} else if (key.l == ERR_Key.l) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5198: FILE: drivers/staging/strip/strip.c:2232:
+	} else

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#5218: FILE: drivers/staging/strip/strip.c:2252:
+#define TTYERROR(X) ((X) == TTY_BREAK   ? "Break"            : \
+                     (X) == TTY_FRAME   ? "Framing Error"    : \
+                     (X) == TTY_PARITY  ? "Parity Error"     : \
+                     (X) == TTY_OVERRUN ? "Hardware Overrun" : "Unknown Error")

ERROR:CODE_INDENT: code indent should use tabs where possible
#5219: FILE: drivers/staging/strip/strip.c:2253:
+                     (X) == TTY_FRAME   ? "Framing Error"    : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5219: FILE: drivers/staging/strip/strip.c:2253:
+                     (X) == TTY_FRAME   ? "Framing Error"    : \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5220: FILE: drivers/staging/strip/strip.c:2254:
+                     (X) == TTY_PARITY  ? "Parity Error"     : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5220: FILE: drivers/staging/strip/strip.c:2254:
+                     (X) == TTY_PARITY  ? "Parity Error"     : \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5221: FILE: drivers/staging/strip/strip.c:2255:
+                     (X) == TTY_OVERRUN ? "Hardware Overrun" : "Unknown Error")$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5221: FILE: drivers/staging/strip/strip.c:2255:
+                     (X) == TTY_OVERRUN ? "Hardware Overrun" : "Unknown Error")$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5231: FILE: drivers/staging/strip/strip.c:2265:
+static void strip_receive_buf(struct tty_struct *tty, const unsigned char *cp,
+		  char *fp, int count)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5237: FILE: drivers/staging/strip/strip.c:2271:
+	if (!strip_info || strip_info->magic != STRIP_MAGIC
+	    || !netif_running(strip_info->dev))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5241: FILE: drivers/staging/strip/strip.c:2275:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#5244: FILE: drivers/staging/strip/strip.c:2278:
+		struct timeval tv;
+		do_gettimeofday(&tv);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5245: FILE: drivers/staging/strip/strip.c:2279:
+		printk(KERN_INFO

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'strip_receive_buf', this function's name, in a string
#5246: FILE: drivers/staging/strip/strip.c:2280:
+		       "**** strip_receive_buf: %3d bytes at %02d.%06d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5258: FILE: drivers/staging/strip/strip.c:2292:
+			printk(KERN_INFO "%s: %s on serial port\n",

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#5260: FILE: drivers/staging/strip/strip.c:2294:
+		if (fp && *fp++ && !strip_info->discard) {	/* If there's a serial error, record it */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5270: FILE: drivers/staging/strip/strip.c:2304:
+					printk(KERN_INFO

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'strip_info->discard'
#5276: FILE: drivers/staging/strip/strip.c:2310:
+					       strip_info->
+					       discard ? " (discarded)" :

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:BRACES: braces {} should be used on all arms of this statement
#5278: FILE: drivers/staging/strip/strip.c:2312:
+				if (strip_info->sx_count >
[...]
+				} else if (strip_info->discard)
[...]
+				else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5281: FILE: drivers/staging/strip/strip.c:2315:
+					printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5286: FILE: drivers/staging/strip/strip.c:2320:
+					printk(KERN_INFO

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'strip_info->sx_count'
#5300: FILE: drivers/staging/strip/strip.c:2334:
+					strip_info->sx_buff[strip_info->
+							    sx_count] =

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5310: FILE: drivers/staging/strip/strip.c:2344:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5315: FILE: drivers/staging/strip/strip.c:2349:
+			   MetricomAddress * addr)

CHECK:SPACING: No space is necessary after a cast
#5327: FILE: drivers/staging/strip/strip.c:2361:
+		*(MetricomAddress *) strip_info->dev->dev_addr = *addr;

CHECK:SPACING: No space is necessary after a cast
#5329: FILE: drivers/staging/strip/strip.c:2363:
+		*(MetricomAddress *) strip_info->dev->dev_addr =

WARNING:LINE_SPACING: Missing a blank line after declarations
#5338: FILE: drivers/staging/strip/strip.c:2372:
+	struct sockaddr *sa = addr;
+	printk(KERN_INFO "%s: strip_set_dev_mac_address called\n", dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5338: FILE: drivers/staging/strip/strip.c:2372:
+	printk(KERN_INFO "%s: strip_set_dev_mac_address called\n", dev->name);

CHECK:SPACING: No space is necessary after a cast
#5339: FILE: drivers/staging/strip/strip.c:2373:
+	set_mac_address(strip_info, (MetricomAddress *) sa->sa_data);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#5357: FILE: drivers/staging/strip/strip.c:2391:
+	return (&stats);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5360: FILE: drivers/staging/strip/strip.c:2394:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strip_info->tty"
#5392: FILE: drivers/staging/strip/strip.c:2426:
+	if (strip_info->tty == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5407: FILE: drivers/staging/strip/strip.c:2441:
+	printk(KERN_INFO "%s: Initializing Radio.\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#5413: FILE: drivers/staging/strip/strip.c:2447:
+	return (0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5416: FILE: drivers/staging/strip/strip.c:2450:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strip_info->tty"
#5425: FILE: drivers/staging/strip/strip.c:2459:
+	if (strip_info->tty == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5449: FILE: drivers/staging/strip/strip.c:2483:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5451: FILE: drivers/staging/strip/strip.c:2485:
+^I.ndo_open ^I= strip_open_low,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5452: FILE: drivers/staging/strip/strip.c:2486:
+^I.ndo_stop ^I= strip_close_low,$

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#5485: FILE: drivers/staging/strip/strip.c:2519:
+	dev->header_ops = &strip_header_ops,
+	dev->netdev_ops = &strip_netdev_ops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5504: FILE: drivers/staging/strip/strip.c:2538:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5520: FILE: drivers/staging/strip/strip.c:2554:
+
+

CHECK:SPACING: No space is necessary after a cast
#5530: FILE: drivers/staging/strip/strip.c:2564:
+	strip_info->idle_timer.data = (long) dev;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5533: FILE: drivers/staging/strip/strip.c:2567:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->write"
#5581: FILE: drivers/staging/strip/strip.c:2615:
+	if (tty->ops->write == NULL || tty->ops->set_termios == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->set_termios"
#5581: FILE: drivers/staging/strip/strip.c:2615:
+	if (tty->ops->write == NULL || tty->ops->set_termios == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5587: FILE: drivers/staging/strip/strip.c:2621:
+	if ((strip_info = strip_alloc()) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5596: FILE: drivers/staging/strip/strip.c:2630:
+		printk(KERN_ERR "strip: register_netdev() failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5621: FILE: drivers/staging/strip/strip.c:2655:
+	printk(KERN_INFO "STRIP: device \"%s\" activated\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#5627: FILE: drivers/staging/strip/strip.c:2661:
+	return (strip_info->dev->base_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5652: FILE: drivers/staging/strip/strip.c:2686:
+	printk(KERN_INFO "STRIP: device \"%s\" closed down\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5658: FILE: drivers/staging/strip/strip.c:2692:
+
+

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#5676: FILE: drivers/staging/strip/strip.c:2710:
+		if(copy_to_user((void __user *) arg, strip_info->dev->name, strlen(strip_info->dev->name) + 1))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#5676: FILE: drivers/staging/strip/strip.c:2710:
+		if(copy_to_user((void __user *) arg, strip_info->dev->name, strlen(strip_info->dev->name) + 1))

ERROR:SPACING: space required before the open parenthesis '('
#5676: FILE: drivers/staging/strip/strip.c:2710:
+		if(copy_to_user((void __user *) arg, strip_info->dev->name, strlen(strip_info->dev->name) + 1))

CHECK:SPACING: No space is necessary after a cast
#5683: FILE: drivers/staging/strip/strip.c:2717:
+		if(copy_from_user(&addr, (void __user *) arg, sizeof(MetricomAddress)))

ERROR:SPACING: space required before the open parenthesis '('
#5683: FILE: drivers/staging/strip/strip.c:2717:
+		if(copy_from_user(&addr, (void __user *) arg, sizeof(MetricomAddress)))

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#5689: FILE: drivers/staging/strip/strip.c:2723:
+		return tty_mode_ioctl(tty, file, cmd, arg);
+		break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5694: FILE: drivers/staging/strip/strip.c:2728:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5716: FILE: drivers/staging/strip/strip.c:2750:
+    KERN_INFO "STRIP: Version %s (unlimited channels)\n";$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5722: FILE: drivers/staging/strip/strip.c:2756:
+	printk(signon, StripVersion);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#5724: FILE: drivers/staging/strip/strip.c:2758:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5724: FILE: drivers/staging/strip/strip.c:2758:
+
+	

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5728: FILE: drivers/staging/strip/strip.c:2762:
+	if ((status = tty_register_ldisc(N_STRIP, &strip_ldisc)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5729: FILE: drivers/staging/strip/strip.c:2763:
+		printk(KERN_ERR "STRIP: can't register line discipline (err = %d)\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#5735: FILE: drivers/staging/strip/strip.c:2769:
+	proc_net_fops_create(&init_net, "strip", S_IFREG | S_IRUGO, &strip_seq_fops);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5743: FILE: drivers/staging/strip/strip.c:2777:
+    KERN_INFO "STRIP: Module Unloaded\n";$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#5748: FILE: drivers/staging/strip/strip.c:2782:
+	struct list_head *p,*n;
 	                   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#5748: FILE: drivers/staging/strip/strip.c:2782:
+	struct list_head *p,*n;
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#5753: FILE: drivers/staging/strip/strip.c:2787:
+		struct strip *s = list_entry(p, struct strip, list);
+		strip_free(s);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5759: FILE: drivers/staging/strip/strip.c:2793:
+	if ((i = tty_unregister_ldisc(N_STRIP)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5760: FILE: drivers/staging/strip/strip.c:2794:
+		printk(KERN_ERR "STRIP: can't unregister line discipline (err = %d)\n", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5762: FILE: drivers/staging/strip/strip.c:2796:
+	printk(signoff);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057512.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 116 errors, 135 warnings, 162 checks, 2875 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057512.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
