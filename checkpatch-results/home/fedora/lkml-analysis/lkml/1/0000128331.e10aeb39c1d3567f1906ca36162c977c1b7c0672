CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#128: FILE: include/linux/seccomp.h:21:
+	uint16_t mode;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#129: FILE: include/linux/seccomp.h:22:
+	uint16_t bit_length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#130: FILE: include/linux/seccomp.h:23:
+	uint8_t bitmask[0];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#133: FILE: include/linux/seccomp.h:26:
+typedef struct { struct seccomp_state *state; } seccomp_t;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#141: FILE: include/linux/seccomp.h:35:
+extern struct seccomp_state* seccomp_state_dup(const struct seccomp_state *old);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/seccomp.h:35:
+extern struct seccomp_state* seccomp_state_dup(const struct seccomp_state *old);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/seccomp.h:37:
+extern long prctl_set_seccomp(unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#144: FILE: include/linux/seccomp.h:37:
+extern long prctl_set_seccomp(unsigned long, unsigned long, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#144: FILE: include/linux/seccomp.h:37:
+extern long prctl_set_seccomp(unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#144: FILE: include/linux/seccomp.h:37:
+extern long prctl_set_seccomp(unsigned long, unsigned long, unsigned long);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#176: FILE: kernel/fork.c:149:
+	if (tsk->seccomp.state)
+		kfree(tsk->seccomp.state);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*current->seccomp.state)...) over kmalloc(sizeof(struct seccomp_state)...)
#257: FILE: kernel/seccomp.c:80:
+	current->seccomp.state = kmalloc(sizeof(struct seccomp_state) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#265: FILE: kernel/seccomp.c:88:
+			   (void __user *) seccomp_mask,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#290: FILE: kernel/seccomp.c:111:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#291: FILE: kernel/seccomp.c:112:
+	const unsigned byte_length = (seccomp_bitlength + 7) / 8;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#292: FILE: kernel/seccomp.c:113:
+	const uint8_t *current_mask = current->seccomp.state->bitmask;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct seccomp_state)...)
#301: FILE: kernel/seccomp.c:118:
+	new = kmalloc(sizeof(struct seccomp_state) + byte_length, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#307: FILE: kernel/seccomp.c:124:
+			   (void __user *) seccomp_mask,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#326: FILE: kernel/seccomp.c:143:
+struct seccomp_state* seccomp_state_dup(const struct seccomp_state *orig)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#328: FILE: kernel/seccomp.c:145:
+	const unsigned state_len = sizeof(struct seccomp_state) +

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: kernel/seccomp.c:148:
+	struct seccomp_state *new = kmalloc(state_len, GFP_KERNEL);
+	if (!new)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#341: FILE: kernel/seccomp.c:155:
+
+

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#362: FILE: kernel/seccomp.c:176:
+		if (current->seccomp.state)
+			kfree(current->seccomp.state);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*current->seccomp.state)...) over kmalloc(sizeof(struct seccomp_state)...)
#363: FILE: kernel/seccomp.c:177:
+		current->seccomp.state = kmalloc(sizeof(struct seccomp_state),

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#413: FILE: fs/proc/array.c:326:
+static void task_show_seccomp(struct seq_file *m, struct task_struct *p) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#416: FILE: fs/proc/array.c:329:
+	unsigned i;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#423: FILE: fs/proc/array.c:336:
+		const uint8_t *mask = p->seccomp.state->bitmask;

WARNING:LINE_SPACING: Missing a blank line after declarations
#424: FILE: fs/proc/array.c:337:
+		const uint8_t *mask = p->seccomp.state->bitmask;
+		seq_printf(m, "%c%c", hex_asc[mask[i] >> 4],

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: fs/proc/array.c:338:
+^I^I           hex_asc[mask[i] & 15]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#427: FILE: fs/proc/array.c:340:
+	seq_printf(m, "\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000128331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 13 warnings, 13 checks, 301 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000128331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
