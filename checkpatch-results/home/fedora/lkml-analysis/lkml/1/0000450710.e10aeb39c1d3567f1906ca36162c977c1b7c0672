WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#42: 
This code is sucessfully able to load and recognize Mach-O binary files.
             ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: fs/Kconfig.binfmt:58:
+config BINFMT_MACHO
+	tristate "Kernel support for Mach-O and FAT Mach-O binaries"
+	---help---
+	  Mach-O (Mach Object) is a format for libraries and executables used
+	  by the Mach and Darwin operating systems on multiple architectures.
+	  Saying Y here will enable your kernel to run Mach-O binaries built
+	  for your platform.  If the program or library is a FAT Mach-O
+	  binary then it may be run on any platform where an appropriate
+	  binary exists.
+
+	  If you wish to actually run programs compiled for either Darwin or
+	  Mac OS X, you probably also want to enable
+	  "Darwin syscall personality support" for your architecture.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#110: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: fs/mach-o/binfmt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#130: FILE: fs/mach-o/binfmt.c:2:
+ * linux/fs/mach-o/binfmt.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#151: FILE: fs/mach-o/binfmt.c:23:
+#if 0

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#179: FILE: fs/mach-o/binfmt.c:51:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: fs/mach-o/binfmt.c:84:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#217: FILE: fs/mach-o/binfmt.c:89:
+#define MAX_ARCH_COUNT (PAGE_SIZE/sizeof(struct macho_fat_arch))
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#237: FILE: fs/mach-o/binfmt.c:109:
+		macho_dbg("Too many archs (%lu) in Mach-O binary.  Only using"
+				" %lu!\n", arch_count, MAX_ARCH_COUNT);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: fs/mach-o/binfmt.c:125:
+	retval = kernel_read(bprm->file, sizeof(struct macho_fat_header),
+			(void *)archs, arch_data);

WARNING:SPLIT_STRING: quoted string split across lines
#257: FILE: fs/mach-o/binfmt.c:129:
+			macho_dbg("Error while reading Mach-O architecture"
+					" list: %li\n", retval);

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: fs/mach-o/binfmt.c:133:
+			macho_dbg("Truncated arch list (got %lub, wanted"
+					" %lub)\n", retval, arch_data);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#275: FILE: fs/mach-o/binfmt.c:147:
+		unsigned int pref = macho_check_cpu(

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#284: FILE: fs/mach-o/binfmt.c:156:
+	/* If we didn't find any useable architectures then give up */
 	                         ^^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#318: FILE: fs/mach-o/binfmt.c:190:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: fs/mach-o/binfmt.c:217:
+	retval = kernel_read(bprm->file, offset,
+			(void *)&data->header, sizeof(data->header));

WARNING:SPLIT_STRING: quoted string split across lines
#357: FILE: fs/mach-o/binfmt.c:229:
+			macho_dbg("Error while reading Mach-O object"
+					" header: %li\n", retval);

WARNING:SPLIT_STRING: quoted string split across lines
#361: FILE: fs/mach-o/binfmt.c:233:
+			macho_dbg("Truncated Mach-O object header: "
+					"(got %lub, wanted %lub)\n", retval,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: fs/mach-o/binfmt.c:242:
+	if (data->header.magic == MACHO_MACH32_CIGAM ||
+			data->header.magic == MACHO_MACH64_CIGAM) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: fs/mach-o/binfmt.c:253:
+	if (data->header.magic != MACHO_MACH32_MAGIC &&
+			data->header.magic != MACHO_MACH64_MAGIC) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: fs/mach-o/binfmt.c:262:
+	if (!macho_check_cpu(data->header.mach32.cpu_type,
+			data->header.mach32.cpu_subtype)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#391: FILE: fs/mach-o/binfmt.c:263:
+			data->header.mach32.cpu_subtype)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#399: FILE: fs/mach-o/binfmt.c:271:
+			macho_dbg("FAT Mach-O wrapper has mismatched CPU"
+					" types:  Mach-O file corrupt?\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: fs/mach-o/binfmt.c:280:
+	if (!macho_check_file(data->header.mach32.filetype,
+			data->header.mach32.flags)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#428: FILE: fs/mach-o/binfmt.c:300:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#430: FILE: fs/mach-o/binfmt.c:302:
+#if 0

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#436: FILE: fs/mach-o/binfmt.c:308:
+	struct file * file;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#441: FILE: fs/mach-o/binfmt.c:313:
+	char * filename;	/* Name of binary as seen by procps */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#442: FILE: fs/mach-o/binfmt.c:314:
+	char * interp;		/* Name of the binary really executed. Most

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#443: FILE: fs/mach-o/binfmt.c:315:
+	char * interp;		/* Name of the binary really executed. Most
+				   of the time same as filename, but could be

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#444: FILE: fs/mach-o/binfmt.c:316:
+				   different for binfmt_{misc,script} */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#445: FILE: fs/mach-o/binfmt.c:317:
+	unsigned interp_flags;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#446: FILE: fs/mach-o/binfmt.c:318:
+	unsigned interp_data;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#456: FILE: fs/mach-o/cpus.h:1:
+#ifndef  _MACHO_CPUS_H

ERROR:SPACING: exactly one space required after that #ifndef
#456: FILE: fs/mach-o/cpus.h:1:
+#ifndef  _MACHO_CPUS_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#467: FILE: fs/mach-o/cpus.h:12:
+#define _ENTRY(type, num) \
+	MACHO_CPU_TYPE_##type = ((__force macho_cpu_type_t)num)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#485: FILE: fs/mach-o/cpus.h:30:
+};
+#undef _ENTRY

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#491: FILE: fs/mach-o/cpus.h:36:
+#define _ENTRY(subtype, num) \
+	MACHO_CPU_SUBTYPE_##subtype = ((__force macho_cpu_subtype_t)num)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#591: FILE: fs/mach-o/cpus.h:136:
+};
+#undef _ENTRY

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#597: FILE: fs/mach-o/cpus.h:142:
+	const char *		name;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#626: FILE: fs/mach-o/cpus.h:171:
+};
+static const struct macho_cpu_subentry macho_cpu_m68k_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#632: FILE: fs/mach-o/cpus.h:177:
+};
+static const struct macho_cpu_subentry macho_cpu_i386_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#656: FILE: fs/mach-o/cpus.h:201:
+};
+static const struct macho_cpu_subentry macho_cpu_mips_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#667: FILE: fs/mach-o/cpus.h:212:
+};
+static const struct macho_cpu_subentry macho_cpu_m98k_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#672: FILE: fs/mach-o/cpus.h:217:
+};
+static const struct macho_cpu_subentry macho_cpu_parisc_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#677: FILE: fs/mach-o/cpus.h:222:
+};
+static const struct macho_cpu_subentry macho_cpu_m88k_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#683: FILE: fs/mach-o/cpus.h:228:
+};
+static const struct macho_cpu_subentry macho_cpu_sparc_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#687: FILE: fs/mach-o/cpus.h:232:
+};
+static const struct macho_cpu_subentry macho_cpu_i860_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#692: FILE: fs/mach-o/cpus.h:237:
+};
+static const struct macho_cpu_subentry macho_cpu_ppc32_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#708: FILE: fs/mach-o/cpus.h:253:
+};
+static const struct macho_cpu_subentry macho_cpu_ppc64_subtypes[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#713: FILE: fs/mach-o/cpus.h:258:
+};
+#undef _ENTRY

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#723: FILE: fs/mach-o/cpus.h:268:
+};
+static const struct macho_cpu_entry macho_cpu_types[] = {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#729: FILE: fs/mach-o/cpus.h:274:
+	_ENTRY(PPC32,	macho_cpu_ppc32_subtypes,	"PowerPC"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#730: FILE: fs/mach-o/cpus.h:275:
+	_ENTRY(PPC64,	macho_cpu_ppc64_subtypes,	"PowerPC64"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#731: FILE: fs/mach-o/cpus.h:276:
+	_ENTRY(I386,	macho_cpu_i386_subtypes,	"Intel x86"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#732: FILE: fs/mach-o/cpus.h:277:
+	_ENTRY(VAX,	macho_cpu_vax_subtypes,		"VAX"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#734: FILE: fs/mach-o/cpus.h:279:
+	_ENTRY(MIPS,	macho_cpu_mips_subtypes,	"MIPS"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#736: FILE: fs/mach-o/cpus.h:281:
+	_ENTRY(PARISC,	macho_cpu_parisc_subtypes,	"HPPA/PaRISC"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#737: FILE: fs/mach-o/cpus.h:282:
+	_ENTRY(ARM,	NULL,				"ARM"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#739: FILE: fs/mach-o/cpus.h:284:
+	_ENTRY(SPARC,	macho_cpu_sparc_subtypes,	"Sparc"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#740: FILE: fs/mach-o/cpus.h:285:
+	_ENTRY(I860,	macho_cpu_i860_subtypes,	"i860"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#741: FILE: fs/mach-o/cpus.h:286:
+	_ENTRY(ALPHA,	NULL,				"Alpha"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#742: FILE: fs/mach-o/cpus.h:287:
+	_ENTRY(ANY,	NULL,				"unknown"	),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: fs/mach-o/cpus.h:293:
+static unsigned int macho_check_cpu(macho_cpu_type_t type,
+					macho_cpu_subtype_t subtype)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: fs/mach-o/cpus.h:319:
+		macho_dbg("Unknown %s subtype (%u)\n",
+				macho_cpu_types[i].name, subtype);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#791: FILE: fs/mach-o/debug.h:1:
+#ifndef  _MACHO_DEBUG_H

ERROR:SPACING: exactly one space required after that #ifndef
#791: FILE: fs/mach-o/debug.h:1:
+#ifndef  _MACHO_DEBUG_H

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#797: FILE: fs/mach-o/debug.h:7:
+	printk(KERN_DEBUG "binfmt_mach-o: " x,##args)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: fs/mach-o/debug.h:7:
+	printk(KERN_DEBUG "binfmt_mach-o: " x,##args)
 	                                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#806: FILE: fs/mach-o/files.h:1:
+#ifndef  _MACHO_FILES_H

ERROR:SPACING: exactly one space required after that #ifndef
#806: FILE: fs/mach-o/files.h:1:
+#ifndef  _MACHO_FILES_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#816: FILE: fs/mach-o/files.h:11:
+# define _ENTRY(type, num) \
+	MACHO_FILE_TYPE_##type = ((__force macho_file_type_t)num)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#829: FILE: fs/mach-o/files.h:24:
+};
+#undef _ENTRY

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#886: FILE: fs/mach-o/files.h:81:
+static const char *macho_file_flags[] = {

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#887: FILE: fs/mach-o/files.h:82:
+#define _ENTRY(FLAG, NAME) [MACHO_FILE_FLAG_ ## FLAG] = NAME

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space prohibited after that open parenthesis '('
#888: FILE: fs/mach-o/files.h:83:
+	_ENTRY( NO_UNDEF,	"has no undefined references"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#888: FILE: fs/mach-o/files.h:83:
+	_ENTRY( NO_UNDEF,	"has no undefined references"		),

ERROR:SPACING: space prohibited after that open parenthesis '('
#889: FILE: fs/mach-o/files.h:84:
+	_ENTRY( INCR_LINK,	"was incrementally linked"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#889: FILE: fs/mach-o/files.h:84:
+	_ENTRY( INCR_LINK,	"was incrementally linked"		),

ERROR:SPACING: space prohibited after that open parenthesis '('
#890: FILE: fs/mach-o/files.h:85:
+	_ENTRY( DYN_LINK,	"was dynamically linked"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#890: FILE: fs/mach-o/files.h:85:
+	_ENTRY( DYN_LINK,	"was dynamically linked"		),

ERROR:SPACING: space prohibited after that open parenthesis '('
#891: FILE: fs/mach-o/files.h:86:
+	_ENTRY( BIND_AT_LOAD,	"will bind undefined refs during load"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#891: FILE: fs/mach-o/files.h:86:
+	_ENTRY( BIND_AT_LOAD,	"will bind undefined refs during load"	),

ERROR:SPACING: space prohibited after that open parenthesis '('
#892: FILE: fs/mach-o/files.h:87:
+	_ENTRY( PREBOUND,	"is prebound"				),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#892: FILE: fs/mach-o/files.h:87:
+	_ENTRY( PREBOUND,	"is prebound"				),

ERROR:SPACING: space prohibited after that open parenthesis '('
#893: FILE: fs/mach-o/files.h:88:
+	_ENTRY( SPLIT_SEGS,	"has split RO and R/W segments"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#893: FILE: fs/mach-o/files.h:88:
+	_ENTRY( SPLIT_SEGS,	"has split RO and R/W segments"		),

ERROR:SPACING: space prohibited after that open parenthesis '('
#894: FILE: fs/mach-o/files.h:89:
+	_ENTRY( LAZY_INIT,	"is lazily initialized"			),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#894: FILE: fs/mach-o/files.h:89:
+	_ENTRY( LAZY_INIT,	"is lazily initialized"			),

ERROR:SPACING: space prohibited after that open parenthesis '('
#895: FILE: fs/mach-o/files.h:90:
+	_ENTRY( TWO_LEVEL,	"uses two-level namespace bindings"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#895: FILE: fs/mach-o/files.h:90:
+	_ENTRY( TWO_LEVEL,	"uses two-level namespace bindings"	),

ERROR:SPACING: space prohibited after that open parenthesis '('
#896: FILE: fs/mach-o/files.h:91:
+	_ENTRY( FORCE_FLAT,	"forces flat namespace bindings"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#896: FILE: fs/mach-o/files.h:91:
+	_ENTRY( FORCE_FLAT,	"forces flat namespace bindings"	),

ERROR:SPACING: space prohibited after that open parenthesis '('
#897: FILE: fs/mach-o/files.h:92:
+	_ENTRY( NO_MULT_DEFS,	"doesn't have multiply defined symbols"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#897: FILE: fs/mach-o/files.h:92:
+	_ENTRY( NO_MULT_DEFS,	"doesn't have multiply defined symbols"	),

ERROR:SPACING: space prohibited after that open parenthesis '('
#898: FILE: fs/mach-o/files.h:93:
+	_ENTRY( NO_FIX_PREBIND,	"won't notify the prebinding agent"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#898: FILE: fs/mach-o/files.h:93:
+	_ENTRY( NO_FIX_PREBIND,	"won't notify the prebinding agent"	),

ERROR:SPACING: space prohibited after that open parenthesis '('
#899: FILE: fs/mach-o/files.h:94:
+	_ENTRY( PREBINDABLE,	"can be prebound"			),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#899: FILE: fs/mach-o/files.h:94:
+	_ENTRY( PREBINDABLE,	"can be prebound"			),

ERROR:SPACING: space prohibited after that open parenthesis '('
#900: FILE: fs/mach-o/files.h:95:
+	_ENTRY( ALL_MODS_BOUND,	"is fully bound to two-level namespaces"),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#901: FILE: fs/mach-o/files.h:96:
+	_ENTRY( SUBSECT_VIA_SYM,"can be divided via symbols"		),
 	                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#901: FILE: fs/mach-o/files.h:96:
+	_ENTRY( SUBSECT_VIA_SYM,"can be divided via symbols"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#901: FILE: fs/mach-o/files.h:96:
+	_ENTRY( SUBSECT_VIA_SYM,"can be divided via symbols"		),

ERROR:SPACING: space prohibited after that open parenthesis '('
#902: FILE: fs/mach-o/files.h:97:
+	_ENTRY( CANONICAL,	"is canonicalized by un-prebinding"	),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#902: FILE: fs/mach-o/files.h:97:
+	_ENTRY( CANONICAL,	"is canonicalized by un-prebinding"	),

ERROR:SPACING: space prohibited after that open parenthesis '('
#903: FILE: fs/mach-o/files.h:98:
+	_ENTRY( WEAK_DEFINES,	"exports weak symbols"			),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#903: FILE: fs/mach-o/files.h:98:
+	_ENTRY( WEAK_DEFINES,	"exports weak symbols"			),

ERROR:SPACING: space prohibited after that open parenthesis '('
#904: FILE: fs/mach-o/files.h:99:
+	_ENTRY( BINDS_TO_WEAK,	"imports weak symbols"			),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#904: FILE: fs/mach-o/files.h:99:
+	_ENTRY( BINDS_TO_WEAK,	"imports weak symbols"			),

ERROR:SPACING: space prohibited after that open parenthesis '('
#905: FILE: fs/mach-o/files.h:100:
+	_ENTRY( EXECSTACK,	"requires executable stack"		),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#905: FILE: fs/mach-o/files.h:100:
+	_ENTRY( EXECSTACK,	"requires executable stack"		),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: fs/mach-o/files.h:121:
+	macho_dbg("Mach-O %s (%sexecutable):\n", macho_file_types[i].name,
+			macho_file_types[i].runnable?"":"not ");

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#926: FILE: fs/mach-o/files.h:121:
+			macho_file_types[i].runnable?"":"not ");
 			                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#926: FILE: fs/mach-o/files.h:121:
+			macho_file_types[i].runnable?"":"not ");
 			                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: fs/mach-o/files.h:134:
+		macho_dbg("Unknown file flag bits: 0x%08lx\n",
+				(unsigned long)(flags << flag));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#951: FILE: fs/mach-o/headers.h:1:
+#ifndef  _MACHO_HEADERS_H

ERROR:SPACING: exactly one space required after that #ifndef
#951: FILE: fs/mach-o/headers.h:1:
+#ifndef  _MACHO_HEADERS_H

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#958: FILE: fs/mach-o/headers.h:8:
+# define MACHO_FAT_MAGIC (__constant_cpu_to_be32(0xcafebabe))

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#962: FILE: fs/mach-o/headers.h:12:
+} __attribute__((__packed__));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#970: FILE: fs/mach-o/headers.h:20:
+} __attribute__((__packed__));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#983: FILE: fs/mach-o/headers.h:33:
+} __attribute__((__packed__));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#997: FILE: fs/mach-o/headers.h:47:
+} __attribute__((__packed__));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450710.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 60 errors, 31 warnings, 32 checks, 882 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450710.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
