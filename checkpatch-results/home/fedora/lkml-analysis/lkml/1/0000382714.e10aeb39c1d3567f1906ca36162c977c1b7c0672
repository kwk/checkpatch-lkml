WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
This patch adds the core of the fragmentation reduction strategy.  It works by

WARNING:TYPO_SPELLING: 'abitrary' may be misspelled - perhaps 'arbitrary'?
#30: 
Mobility grouping works at an abitrary order less than or equal to MAX_ORDER.
                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#70: FILE: include/linux/mmzone.h:40:
+#define for_each_migratetype_order(order, type) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < MIGRATE_TYPES; type++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'order' - possible side-effects?
#70: FILE: include/linux/mmzone.h:40:
+#define for_each_migratetype_order(order, type) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < MIGRATE_TYPES; type++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: mm/page_alloc.c:165:
+	set_pageblock_flags_group(page, (unsigned long)migratetype,
+					PB_migrate, PB_migrate_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: mm/page_alloc.c:456:
+	list_add(&page->lru,
+		&zone->free_area[order].free_list[migratetype]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#180: FILE: mm/page_alloc.c:656:
+static int fallbacks[MIGRATE_TYPES][MIGRATE_TYPES-1] = {
                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: mm/page_alloc.c:663:
+static struct page *__rmqueue_fallback(struct zone *zone, int order,
+						int start_migratetype)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#195: FILE: mm/page_alloc.c:671:
+	for (current_order = MAX_ORDER-1; current_order >= order;
 	                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#200: FILE: mm/page_alloc.c:676:
+			area = &(zone->free_area[current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: mm/page_alloc.c:681:
+			page = list_entry(area->free_list[migratetype].next,
+					struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: mm/page_alloc.c:695:
+			__mod_zone_page_state(zone, NR_FREE_PAGES,
+							-(1UL << order));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: mm/page_alloc.c:699:
+				set_pageblock_migratetype(page,
+							start_migratetype);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: mm/page_alloc.c:702:
+			expand(zone, page, order, current_order, area,
+								migratetype);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: mm/page_alloc.c:715:
+static struct page *__rmqueue(struct zone *zone, unsigned int order,
+						int migratetype)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#250: FILE: mm/page_alloc.c:723:
+		area = &(zone->free_area[current_order]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/page_alloc.c:728:
+		page = list_entry(area->free_list[migratetype].next,
+							struct page, lru);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#359: FILE: mm/page_alloc.c:2303:
+		if ((pfn & (pageblock_nr_pages-1)))
 		                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: mm/page_alloc.c:2319:
+	int order, t;
+	for_each_migratetype_order(order, t) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382714.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 15 checks, 292 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382714.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
