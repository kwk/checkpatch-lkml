WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
An entry is added by doing "echo <type> <maj> <min> <access>" > devcg.allow,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#143: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: include/linux/devcg.h:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#154: FILE: include/linux/devcg.h:7:
+#include <asm/uaccess.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#192: FILE: include/linux/devcg.h:45:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#195: FILE: include/linux/devcg.h:48:
+static inline struct dev_cgroup *cgroup_to_devcg(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/security.h:1739:
+extern int devcgroup_inode_mknod(struct inode *dir, struct dentry *dentry,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: include/linux/security.h:1740:
+extern int devcgroup_inode_mknod(struct inode *dir, struct dentry *dentry,
+					int mode, dev_t dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/security.h:1741:
+extern int devcgroup_inode_permission(struct inode *inode, int mask,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#215: FILE: include/linux/security.h:1742:
+					struct nameidata *nd);
 					                  ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: include/linux/security.h:1742:
+extern int devcgroup_inode_permission(struct inode *inode, int mask,
+					struct nameidata *nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#238: FILE: include/linux/security.h:2051:
+	return devcgroup_inode_permission(inode, mask, nd);
 	                                               ^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#253: FILE: init/Kconfig:301:
+config CGROUP_DEV
+	bool "Device controller for cgroups"
+	depends on CGROUPS && EXPERIMENTAL
+	help
+	  Provides a cgroup implementing whitelists for devices which
+	  a process in the cgroup can mknod or open.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#281: FILE: kernel/dev_cgroup.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: kernel/dev_cgroup.c:10:
+static int devcg_can_attach(struct cgroup_subsys *ss,
+		struct cgroup *new_cgroup, struct task_struct *task)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: kernel/dev_cgroup.c:66:
+int dev_whitelist_add(struct dev_cgroup *dev_cgroup,
+			struct dev_whitelist_item *wh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: kernel/dev_cgroup.c:86:
+void dev_whitelist_rm(struct dev_cgroup *dev_cgroup,
+			struct dev_whitelist_item *wh)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent_cgroup"
#416: FILE: kernel/dev_cgroup.c:136:
+	if (parent_cgroup == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: kernel/dev_cgroup.c:138:
+		struct dev_whitelist_item *wh;
+		wh = kmalloc(sizeof(*wh), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#419: FILE: kernel/dev_cgroup.c:139:
+		wh->minor = wh->major = ~0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: kernel/dev_cgroup.c:146:
+		ret = dev_whitelist_copy(&dev_cgroup->whitelist,
+				&parent_dev_cgroup->whitelist);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: kernel/dev_cgroup.c:158:
+static void devcg_destroy(struct cgroup_subsys *ss,
+			struct cgroup *cgroup)

WARNING:LINE_SPACING: Missing a blank line after declarations
#457: FILE: kernel/dev_cgroup.c:177:
+	int idx = 0;
+	memset(acc, 0, 4);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#477: FILE: kernel/dev_cgroup.c:197:
+static void set_majmin(char *str, int len, unsigned m)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#506: FILE: kernel/dev_cgroup.c:226:
+		ret = snprintf(s, 4095-(s-buf), "%c %s %s %s\n",
 		                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#506: FILE: kernel/dev_cgroup.c:226:
+		ret = snprintf(s, 4095-(s-buf), "%c %s %s %s\n",
 		                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: kernel/dev_cgroup.c:227:
+		ret = snprintf(s, 4095-(s-buf), "%c %s %s %s\n",
+			type_to_char(wh->type), maj, min, acc);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#508: FILE: kernel/dev_cgroup.c:228:
+		if (s+ret >= buf+4095) {
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#508: FILE: kernel/dev_cgroup.c:228:
+		if (s+ret >= buf+4095) {
 		                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: kernel/dev_cgroup.c:243:
+static ssize_t devcg_access_read(struct cgroup *cgroup,
+			struct cftype *cft, struct file *file,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#549: FILE: kernel/dev_cgroup.c:269:
+		case 'R': access |= ACC_READ; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#551: FILE: kernel/dev_cgroup.c:271:
+		case 'W': access |= ACC_WRITE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#553: FILE: kernel/dev_cgroup.c:273:
+		case 'M': access |= ACC_MKNOD; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#554: FILE: kernel/dev_cgroup.c:274:
+		case '\n': break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: kernel/dev_cgroup.c:287:
+	short type = 0;
+	switch (intype) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#568: FILE: kernel/dev_cgroup.c:288:
+	case 'a': type = DEV_ALL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#569: FILE: kernel/dev_cgroup.c:289:
+	case 'c': type = DEV_CHAR; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#570: FILE: kernel/dev_cgroup.c:290:
+	case 'b': type = DEV_BLOCK; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#571: FILE: kernel/dev_cgroup.c:291:
+	default: type = -EACCES; break;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#576: FILE: kernel/dev_cgroup.c:296:
+static int convert_majmin(char *m, unsigned *u)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#582: FILE: kernel/dev_cgroup.c:302:
+	if (sscanf(m, "%u", u) != 1)
+		return -EINVAL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: kernel/dev_cgroup.c:308:
+static ssize_t devcg_access_write(struct cgroup *cgroup, struct cftype *cft,
+				struct file *file, const char __user *userbuf,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#607: FILE: kernel/dev_cgroup.c:327:
+	buffer = kmalloc(nbytes+1, GFP_KERNEL);
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: kernel/dev_cgroup.c:398:
+static int devcg_populate(struct cgroup_subsys *ss,
+				struct cgroup *cont)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#749: FILE: security/dev_cgroup.c:1:
+/*

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#758: FILE: security/dev_cgroup.c:10:
+				    struct nameidata *nd)
 				                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: security/dev_cgroup.c:10:
+int devcgroup_inode_permission(struct inode *inode, int mask,
+				    struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#765: FILE: security/dev_cgroup.c:17:
+	dev_t device = inode->i_rdev;
+	if (!device)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#835: FILE: security/dev_cgroup.c:87:
+^I.inode_mknod = ^I^I^Idevcgroup_inode_mknod,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#836: FILE: security/dev_cgroup.c:88:
+^I.inode_permission = ^I^Idevcgroup_inode_permission,$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#875: FILE: security/dev_cgroup.c:127:
+			printk(KERN_ERR "Failure registering dev_cgroup LSM\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#878: FILE: security/dev_cgroup.c:130:
+		printk(KERN_INFO "dev_cgroup LSM initialized as secondary\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#881: FILE: security/dev_cgroup.c:133:
+	printk(KERN_INFO "Device cgroup LSM initialized\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: security/smack/smack_lsm.c:46:
+int devcgroup_inode_mknod(struct inode *dir, struct dentry *dentry,
+					int mode, dev_t dev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#903: FILE: security/smack/smack_lsm.c:47:
+int devcgroup_inode_permission(struct inode *inode, int mask,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#904: FILE: security/smack/smack_lsm.c:48:
+					struct nameidata *nd);
 					                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: security/smack/smack_lsm.c:48:
+int devcgroup_inode_permission(struct inode *inode, int mask,
+					struct nameidata *nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#916: FILE: security/smack/smack_lsm.c:540:
+	err = devcgroup_inode_permission(inode, mask, nd);
 	                                              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#916: FILE: security/smack/smack_lsm.c:540:
+	int err;
+	err = devcgroup_inode_permission(inode, mask, nd);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308004.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 26 warnings, 25 checks, 788 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308004.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
