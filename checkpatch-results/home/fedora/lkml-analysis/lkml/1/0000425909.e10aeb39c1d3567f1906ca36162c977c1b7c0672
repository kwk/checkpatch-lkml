ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#62: FILE: arch/blackfin/mm/blackfin_sram.c:102:
+	l1_data_A_sram[0].paddr = (void*)L1_DATA_A_START + (_ebss_l1 - _sdata_l1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#66: FILE: arch/blackfin/mm/blackfin_sram.c:106:
+	printk(KERN_INFO "Blackfin Data A SRAM: %d KB (%d KB free)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#78: FILE: arch/blackfin/mm/blackfin_sram.c:115:
+	printk(KERN_INFO "Blackfin Data B SRAM: %d KB (%d KB free)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#95: FILE: arch/blackfin/mm/blackfin_sram.c:131:
+	printk(KERN_INFO "Blackfin Instruction SRAM: %d KB (%d KB free)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: arch/blackfin/mm/blackfin_sram.c:551:
+                              struct l1_sram_piece *pfree, const int array_size)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: arch/blackfin/mm/blackfin_sram.c:551:
+                              struct l1_sram_piece *pfree, const int array_size)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: arch/blackfin/mm/blackfin_sram.c:558:
+		const char *alloc_type;
+		switch (pfree[i].flag) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#164: FILE: arch/blackfin/mm/blackfin_sram.c:558:
+		switch (pfree[i].flag) {
+			case SRAM_SLT_NULL:      alloc_type = "NULL"; break;
+			case SRAM_SLT_FREE:      alloc_type = "FREE"; break;
+			case SRAM_SLT_ALLOCATED: alloc_type = "ALLOCATED"; break;
+			default:                 alloc_type = "????"; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#165: FILE: arch/blackfin/mm/blackfin_sram.c:559:
+			case SRAM_SLT_NULL:      alloc_type = "NULL"; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#166: FILE: arch/blackfin/mm/blackfin_sram.c:560:
+			case SRAM_SLT_FREE:      alloc_type = "FREE"; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#167: FILE: arch/blackfin/mm/blackfin_sram.c:561:
+			case SRAM_SLT_ALLOCATED: alloc_type = "ALLOCATED"; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#168: FILE: arch/blackfin/mm/blackfin_sram.c:562:
+			default:                 alloc_type = "????"; break;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#175: FILE: arch/blackfin/mm/blackfin_sram.c:569:
+}
+static int l1sram_proc_read(char *buf, char **start, off_t offset, int count,

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: arch/blackfin/mm/blackfin_sram.c:570:
+                            int *eof, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/blackfin/mm/blackfin_sram.c:570:
+                            int *eof, void *data)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: arch/blackfin/mm/blackfin_sram.c:591:
+	struct proc_dir_entry *ptr;
+	ptr = create_proc_entry("sram", S_IFREG | S_IRUGO, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#197: FILE: arch/blackfin/mm/blackfin_sram.c:591:
+	ptr = create_proc_entry("sram", S_IFREG | S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#199: FILE: arch/blackfin/mm/blackfin_sram.c:593:
+		printk(KERN_WARNING "unable to create /proc/sram\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 9 warnings, 1 checks, 156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
