WARNING:REPEATED_WORD: Possible repeated word: 'as'
#82: FILE: include/asm-x86/xen/hypercall.h:71:
+ * weakness as as macro language.  Sorry.  (But let's just give thanks

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#108: FILE: include/asm-x86/xen/hypercall.h:97:
+#define __HYPERCALL_DECLS						\
+	register unsigned long __res  asm(__HYPERCALL_RETREG);		\
+	register unsigned long __arg1 asm(__HYPERCALL_ARG1REG) = __arg1; \
+	register unsigned long __arg2 asm(__HYPERCALL_ARG2REG) = __arg2; \
+	register unsigned long __arg3 asm(__HYPERCALL_ARG3REG) = __arg3; \
+	register unsigned long __arg4 asm(__HYPERCALL_ARG4REG) = __arg4; \
+	register unsigned long __arg5 asm(__HYPERCALL_ARG5REG) = __arg5;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#117: FILE: include/asm-x86/xen/hypercall.h:106:
+#define __HYPERCALL_1PARAM	__HYPERCALL_0PARAM, "+r" (__arg1)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#118: FILE: include/asm-x86/xen/hypercall.h:107:
+#define __HYPERCALL_2PARAM	__HYPERCALL_1PARAM, "+r" (__arg2)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#119: FILE: include/asm-x86/xen/hypercall.h:108:
+#define __HYPERCALL_3PARAM	__HYPERCALL_2PARAM, "+r" (__arg3)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#120: FILE: include/asm-x86/xen/hypercall.h:109:
+#define __HYPERCALL_4PARAM	__HYPERCALL_3PARAM, "+r" (__arg4)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#121: FILE: include/asm-x86/xen/hypercall.h:110:
+#define __HYPERCALL_5PARAM	__HYPERCALL_4PARAM, "+r" (__arg5)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#124: FILE: include/asm-x86/xen/hypercall.h:113:
+#define __HYPERCALL_1ARG(a1)						\
+	__HYPERCALL_0ARG()		__arg1 = (unsigned long)(a1);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#124: FILE: include/asm-x86/xen/hypercall.h:113:
+#define __HYPERCALL_1ARG(a1)						\
+	__HYPERCALL_0ARG()		__arg1 = (unsigned long)(a1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: include/asm-x86/xen/hypercall.h:115:
+#define __HYPERCALL_2ARG(a1,a2)						\
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#126: FILE: include/asm-x86/xen/hypercall.h:115:
+#define __HYPERCALL_2ARG(a1,a2)						\
+	__HYPERCALL_1ARG(a1)		__arg2 = (unsigned long)(a2);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#126: FILE: include/asm-x86/xen/hypercall.h:115:
+#define __HYPERCALL_2ARG(a1,a2)						\
+	__HYPERCALL_1ARG(a1)		__arg2 = (unsigned long)(a2);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/asm-x86/xen/hypercall.h:117:
+#define __HYPERCALL_3ARG(a1,a2,a3)					\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/asm-x86/xen/hypercall.h:117:
+#define __HYPERCALL_3ARG(a1,a2,a3)					\
                               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#128: FILE: include/asm-x86/xen/hypercall.h:117:
+#define __HYPERCALL_3ARG(a1,a2,a3)					\
+	__HYPERCALL_2ARG(a1,a2)		__arg3 = (unsigned long)(a3);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#128: FILE: include/asm-x86/xen/hypercall.h:117:
+#define __HYPERCALL_3ARG(a1,a2,a3)					\
+	__HYPERCALL_2ARG(a1,a2)		__arg3 = (unsigned long)(a3);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: include/asm-x86/xen/hypercall.h:118:
+	__HYPERCALL_2ARG(a1,a2)		__arg3 = (unsigned long)(a3);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: include/asm-x86/xen/hypercall.h:119:
+#define __HYPERCALL_4ARG(a1,a2,a3,a4)					\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: include/asm-x86/xen/hypercall.h:119:
+#define __HYPERCALL_4ARG(a1,a2,a3,a4)					\
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: include/asm-x86/xen/hypercall.h:119:
+#define __HYPERCALL_4ARG(a1,a2,a3,a4)					\
                                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#130: FILE: include/asm-x86/xen/hypercall.h:119:
+#define __HYPERCALL_4ARG(a1,a2,a3,a4)					\
+	__HYPERCALL_3ARG(a1,a2,a3)	__arg4 = (unsigned long)(a4);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#130: FILE: include/asm-x86/xen/hypercall.h:119:
+#define __HYPERCALL_4ARG(a1,a2,a3,a4)					\
+	__HYPERCALL_3ARG(a1,a2,a3)	__arg4 = (unsigned long)(a4);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: include/asm-x86/xen/hypercall.h:120:
+	__HYPERCALL_3ARG(a1,a2,a3)	__arg4 = (unsigned long)(a4);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: include/asm-x86/xen/hypercall.h:120:
+	__HYPERCALL_3ARG(a1,a2,a3)	__arg4 = (unsigned long)(a4);
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: include/asm-x86/xen/hypercall.h:121:
+#define __HYPERCALL_5ARG(a1,a2,a3,a4,a5)				\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: include/asm-x86/xen/hypercall.h:121:
+#define __HYPERCALL_5ARG(a1,a2,a3,a4,a5)				\
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: include/asm-x86/xen/hypercall.h:121:
+#define __HYPERCALL_5ARG(a1,a2,a3,a4,a5)				\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: include/asm-x86/xen/hypercall.h:121:
+#define __HYPERCALL_5ARG(a1,a2,a3,a4,a5)				\
                                     ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#132: FILE: include/asm-x86/xen/hypercall.h:121:
+#define __HYPERCALL_5ARG(a1,a2,a3,a4,a5)				\
+	__HYPERCALL_4ARG(a1,a2,a3,a4)	__arg5 = (unsigned long)(a5);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#132: FILE: include/asm-x86/xen/hypercall.h:121:
+#define __HYPERCALL_5ARG(a1,a2,a3,a4,a5)				\
+	__HYPERCALL_4ARG(a1,a2,a3,a4)	__arg5 = (unsigned long)(a5);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-x86/xen/hypercall.h:122:
+	__HYPERCALL_4ARG(a1,a2,a3,a4)	__arg5 = (unsigned long)(a5);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-x86/xen/hypercall.h:122:
+	__HYPERCALL_4ARG(a1,a2,a3,a4)	__arg5 = (unsigned long)(a5);
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-x86/xen/hypercall.h:122:
+	__HYPERCALL_4ARG(a1,a2,a3,a4)	__arg5 = (unsigned long)(a5);
 	                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#136: FILE: include/asm-x86/xen/hypercall.h:125:
+#define __HYPERCALL_CLOBBER4	__HYPERCALL_CLOBBER5, __HYPERCALL_ARG5REG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#137: FILE: include/asm-x86/xen/hypercall.h:126:
+#define __HYPERCALL_CLOBBER3	__HYPERCALL_CLOBBER4, __HYPERCALL_ARG4REG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#138: FILE: include/asm-x86/xen/hypercall.h:127:
+#define __HYPERCALL_CLOBBER2	__HYPERCALL_CLOBBER3, __HYPERCALL_ARG3REG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#139: FILE: include/asm-x86/xen/hypercall.h:128:
+#define __HYPERCALL_CLOBBER1	__HYPERCALL_CLOBBER2, __HYPERCALL_ARG2REG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#140: FILE: include/asm-x86/xen/hypercall.h:129:
+#define __HYPERCALL_CLOBBER0	__HYPERCALL_CLOBBER1, __HYPERCALL_ARG1REG

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257304.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 7 warnings, 0 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257304.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
