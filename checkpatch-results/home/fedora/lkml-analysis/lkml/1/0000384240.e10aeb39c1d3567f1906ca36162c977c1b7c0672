CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#79: FILE: arch/i386/pci/direct.c:26:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#79: FILE: arch/i386/pci/direct.c:26:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#79: FILE: arch/i386/pci/direct.c:26:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: arch/i386/pci/direct.c:59:
+int pci_conf1_read(unsigned int seg, unsigned int bus,
+			  unsigned int devfn, int reg, int len, u32 *value)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#112: FILE: arch/i386/pci/direct.c:74:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#112: FILE: arch/i386/pci/direct.c:74:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#112: FILE: arch/i386/pci/direct.c:74:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: arch/i386/pci/direct.c:105:
+int pci_conf1_write(unsigned int seg, unsigned int bus,
+		 unsigned int devfn, int reg, int len, u32 value)

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#141: FILE: arch/i386/pci/direct.c:119:
+struct pci_raw_ops pci_direct_conf1ext = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#159: FILE: arch/i386/pci/direct.c:305:
+		printk(KERN_INFO

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#176: FILE: arch/x86_64/kernel/setup.c:68:
+#define ENABLE_CF8_EXT_CFG		(1ULL << 46)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#215: FILE: include/asm-i386/cpufeature.h:85:
+#define X86_FEATURE_PCI_EXT_CFG	(3*32+17) /* PCI extended cfg access */
                                	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#215: FILE: include/asm-i386/cpufeature.h:85:
+#define X86_FEATURE_PCI_EXT_CFG	(3*32+17) /* PCI extended cfg access */
                                	     ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#235: FILE: arch/i386/kernel/cpu/amd.c:35:
+#define ENABLE_CF8_EXT_CFG      (1ULL << 46)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 12 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
