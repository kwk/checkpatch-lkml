WARNING:TYPO_SPELLING: 'consistancy' may be misspelled - perhaps 'consistency'?
#59: 
o Renamed kretprobe-example.c to kretprobe_example.c for consistancy
                                                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#93: FILE: samples/Kconfig:10:
+config SAMPLE_KPROBES
+	tristate "Build kprobes examples -- loadable modules only"
+	depends on KPROBES && m
+	help
+	  This builds several kprobes example modules.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: samples/kprobes/jprobe_example.c:1:
+/*jprobe-example.c */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: samples/kprobes/jprobe_example.c:29:
+static long jdo_fork(unsigned long clone_flags, unsigned long stack_start,
+	      struct pt_regs *regs, unsigned long stack_size,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: samples/kprobes/jprobe_example.c:30:
+	      int __user * parent_tidptr, int __user * child_tidptr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: samples/kprobes/jprobe_example.c:30:
+	      int __user * parent_tidptr, int __user * child_tidptr)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#136: FILE: samples/kprobes/jprobe_example.c:32:
+	printk("jprobe: clone_flags = 0x%lx, stack_size = 0x%lx, regs = 0x%p\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#153: FILE: samples/kprobes/jprobe_example.c:49:
+	int ret;
+	my_jprobe.kp.symbol_name = (char *)probed_func;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#157: FILE: samples/kprobes/jprobe_example.c:53:
+		printk("register_jprobe failed, returned %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#160: FILE: samples/kprobes/jprobe_example.c:56:
+	printk("Planted jprobe at %p, handler addr %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#168: FILE: samples/kprobes/jprobe_example.c:64:
+	printk("jprobe on %s unregistered\n", probed_func);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#179: FILE: samples/kprobes/kprobe_example.c:1:
+/*kprobe_example.c*/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#204: FILE: samples/kprobes/kprobe_example.c:26:
+	printk("pre_handler: p->addr = 0x%p, eip = %lx, eflags = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: samples/kprobes/kprobe_example.c:27:
+	printk("pre_handler: p->addr = 0x%p, eip = %lx, eflags = 0x%lx\n",
+		p->addr, regs->eip, regs->eflags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#208: FILE: samples/kprobes/kprobe_example.c:30:
+	printk("pre_handler: p->addr = 0x%p, rip = %lx, eflags = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: samples/kprobes/kprobe_example.c:31:
+	printk("pre_handler: p->addr = 0x%p, rip = %lx, eflags = 0x%lx\n",
+		p->addr, regs->rip, regs->eflags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: samples/kprobes/kprobe_example.c:34:
+	printk("pre_handler: p->addr = 0x%p, nip = 0x%lx, msr = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: samples/kprobes/kprobe_example.c:35:
+	printk("pre_handler: p->addr = 0x%p, nip = 0x%lx, msr = 0x%lx\n",
+		p->addr, regs->nip, regs->msr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#224: FILE: samples/kprobes/kprobe_example.c:46:
+	printk("post_handler: p->addr = 0x%p, eflags = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: samples/kprobes/kprobe_example.c:47:
+	printk("post_handler: p->addr = 0x%p, eflags = 0x%lx\n",
+		p->addr, regs->eflags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#228: FILE: samples/kprobes/kprobe_example.c:50:
+	printk("post_handler: p->addr = 0x%p, msr = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: samples/kprobes/kprobe_example.c:51:
+	printk("post_handler: p->addr = 0x%p, msr = 0x%lx\n",
+		p->addr, regs->msr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: samples/kprobes/kprobe_example.c:61:
+	printk("fault_handler: p->addr = 0x%p, trap #%dn",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: samples/kprobes/kprobe_example.c:62:
+	printk("fault_handler: p->addr = 0x%p, trap #%dn",
+		p->addr, trapnr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: samples/kprobes/kprobe_example.c:70:
+	int ret;
+	kp.pre_handler = handler_pre;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: samples/kprobes/kprobe_example.c:77:
+		printk("register_kprobe failed, returned %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#258: FILE: samples/kprobes/kprobe_example.c:80:
+	printk("Planted kprobe at %p\n", kp.addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#265: FILE: samples/kprobes/kprobe_example.c:87:
+	printk("kprobe at %p unregistered\n", kp.addr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#276: FILE: samples/kprobes/kretprobe_example.c:1:
+/*kretprobe_example.c*/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: samples/kprobes/kretprobe_example.c:25:
+	printk("%s returns %d\n", probed_func, retval);

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: samples/kprobes/kretprobe_example.c:38:
+	int ret;
+	my_kretprobe.kp.symbol_name = (char *)probed_func;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: samples/kprobes/kretprobe_example.c:42:
+		printk("register_kretprobe failed, returned %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: samples/kprobes/kretprobe_example.c:45:
+	printk("Planted return probe at %p\n", my_kretprobe.kp.addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#327: FILE: samples/kprobes/kretprobe_example.c:52:
+	printk("kretprobe on %s unregistered\n", probed_func);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: samples/kprobes/kretprobe_example.c:55:
+	printk("Missed probing %d instances of %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: samples/kprobes/kretprobe_example.c:56:
+	printk("Missed probing %d instances of %s\n",
+		my_kretprobe.nmissed, probed_func);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376868.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 26 warnings, 8 checks, 472 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376868.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
