WARNING:REPEATED_WORD: Possible repeated word: 'debugfs'
#32: 
  mount -t debugfs debugfs /mnt

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: lib/Kconfig.debug:1057:
+config PROVOKE_CRASH
+	tristate "Provoke kernel crashes through a debugfs interface"
+	depends on DEBUG_FS
+	help
+	  Enable the kernel to crash in different ways through a debugfs interface.
+	  NOTE: This feature is dangerous!
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#83: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: lib/provoke-crash.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: lib/provoke-crash.c:21:
+static ssize_t bugon_write(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: lib/provoke-crash.c:23:
+	BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: lib/provoke-crash.c:29:
+static ssize_t null_dereference_write(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#118: FILE: lib/provoke-crash.c:31:
+	*(volatile int*)NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#118: FILE: lib/provoke-crash.c:31:
+	*(volatile int*)NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: lib/provoke-crash.c:37:
+static ssize_t oops_interrupt_context_write(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: lib/provoke-crash.c:44:
+static ssize_t panic_write(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: lib/provoke-crash.c:52:
+static ssize_t write_after_free_write(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: lib/provoke-crash.c:65:
+static ssize_t overwrite_allocation_write(struct file *f,
+		const char __user *buf, size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: lib/provoke-crash.c:77:
+static ssize_t corrupt_stack_write(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#166: FILE: lib/provoke-crash.c:79:
+	volatile u32 data[8];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: lib/provoke-crash.c:86:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: lib/provoke-crash.c:88:
+static ssize_t unaligned_load_store_write(struct file *f,
+		const char __user *buf, size_t count, loff_t *off)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: lib/provoke-crash.c:90:
+	static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 	                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: lib/provoke-crash.c:90:
+	static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: lib/provoke-crash.c:90:
+	static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: lib/provoke-crash.c:90:
+	static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 	                                                        ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#177: FILE: lib/provoke-crash.c:90:
+	static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#181: FILE: lib/provoke-crash.c:94:
+	p = (u32*)(data + 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: lib/provoke-crash.c:102:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#191: FILE: lib/provoke-crash.c:104:
+struct crash_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#193: FILE: lib/provoke-crash.c:106:
+	struct file_operations fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: lib/provoke-crash.c:113:
+^I{"corrupt_stack", ^I^I{.write = corrupt_stack_write}},$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#215: FILE: lib/provoke-crash.c:128:
+		printk(KERN_ERR "provoke-crash: creating root dir failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: lib/provoke-crash.c:138:
+		de = debugfs_create_file(cur->name, 0200, provoke_crash_root,
+				NULL, &cur->fops);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#226: FILE: lib/provoke-crash.c:139:
+		if (de == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#227: FILE: lib/provoke-crash.c:140:
+			printk(KERN_ERR "provoke_crash: could not create %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: lib/provoke-crash.c:141:
+			printk(KERN_ERR "provoke_crash: could not create %s\n",
+					cur->name);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000019894.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 12 warnings, 13 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000019894.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
