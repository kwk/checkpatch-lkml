WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
   > hiberante/suspend/resume callbacks that I use to turn on/off the timer,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#83: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: debug.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: debug.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#114: FILE: debug.h:27:
+#define set_debug(val) debug = (val)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#115: FILE: debug.h:28:
+#define printd(fmt...) if (unlikely(debug)) { printk("SIN: " fmt); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#115: FILE: debug.h:28:
+#define printd(fmt...) if (unlikely(debug)) { printk("SIN: " fmt); }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:BRACES: braces {} are not necessary for single statement blocks
#115: FILE: debug.h:28:
+#define printd(fmt...) if (unlikely(debug)) { printk("SIN: " fmt); }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#119: FILE: debug.h:32:
+#define set_debug(val) if (val) { printk(KERN_DEBUG SORRY); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#119: FILE: debug.h:32:
+#define set_debug(val) if (val) { printk(KERN_DEBUG SORRY); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#119: FILE: debug.h:32:
+#define set_debug(val) if (val) { printk(KERN_DEBUG SORRY); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#166: FILE: sin.c:85:
+			if (likely(mod_timer(&timer, next))) {
+				WARN_ON(test_bit(RULE_OVER, &status));
+			}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'timer_fn', this function's name, in a string
#194: FILE: sin.c:138:
+		printd(">>>>>>>>>>>> timer_fn()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'timer_fn', this function's name, in a string
#212: FILE: sin.c:159:
+		printd("timer_fn() >>>>>>>>>>>>\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#221: FILE: sin.c:250:
+static int __devinit sin_probe(struct platform_device *dev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#227: FILE: sin.c:256:
+		printk(KERN_ERR "SIN: miscdev initialization failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#233: FILE: sin.c:262:
+		printk(KERN_ERR "SIN: input enumeration failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#239: FILE: sin.c:268:
+		printk(KERN_ERR "SIN: acpi enumeration failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#246: FILE: sin.c:274:
+		printk(KERN_ERR "SIN: sysfs initialization failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#253: FILE: sin.c:280:
+		printk(KERN_ERR "SIN: procfs initialization failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#258: FILE: sin.c:284:
+	printk(KERN_DEBUG "System Inactivity Notifier 1.5 - (c) Alessandro Di Marco <dmr@gmx.it>\n");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#267: FILE: sin.c:300:
+static int __devexit sin_remove(struct platform_device *dev)

CHECK:SPACING: No space is necessary after a cast
#300: FILE: sin.c:335:
+		left = (long) now - (long) last_activity(&uact);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#301: FILE: sin.c:336:
+		right = (long) timer.expires - (long) now;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#373: FILE: sin.c:408:
+	if (err < 0) {
+		goto out;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#384: FILE: sin.c:419:
+	if (err < 0) {
+		goto cleanout2;
+	}

CHECK:SPACING: No space is necessary after a cast
#420: FILE: sin.h:69:
+	uact->last = (long) last - (long) offset;

CHECK:SPACING: No space is necessary after a cast
#458: FILE: table.c:50:
+	(void) acpi_bus_generate_event(acpi_device, rule->type, rule->data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#543: FILE: table.h:71:
+extern void special_event(struct acpi_device *acpi_device);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#942: FILE: sin.c:291:
 static int __devexit sin_remove(struct platform_device *dev)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474973.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 21 warnings, 5 checks, 544 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474973.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
