WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#89: 
Signed-off-by:  Frank Mayhar <fmayhar@google.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread_group_times"
#194: FILE: include/linux/sched.h:2043:
+	if (thread_group_times == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#224: FILE: include/linux/sched.h:2073:
+#define thread_group_update(sig, field, val, op) ({ \
+	if (sig && sig->thread_group_times) {				\
+		int cpu;						\
+		struct thread_group_cputime *thread_group_times;	\
+									\
+		cpu = get_cpu();					\
+		thread_group_times =					\
+			per_cpu_ptr(sig->thread_group_times, cpu);	\
+		thread_group_times->field =				\
+			op(thread_group_times->field, val);		\
+		put_cpu_no_resched();					\
+	}								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sig' may be better as '(sig)' to avoid precedence issues
#224: FILE: include/linux/sched.h:2073:
+#define thread_group_update(sig, field, val, op) ({ \
+	if (sig && sig->thread_group_times) {				\
+		int cpu;						\
+		struct thread_group_cputime *thread_group_times;	\
+									\
+		cpu = get_cpu();					\
+		thread_group_times =					\
+			per_cpu_ptr(sig->thread_group_times, cpu);	\
+		thread_group_times->field =				\
+			op(thread_group_times->field, val);		\
+		put_cpu_no_resched();					\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#224: FILE: include/linux/sched.h:2073:
+#define thread_group_update(sig, field, val, op) ({ \
+	if (sig && sig->thread_group_times) {				\
+		int cpu;						\
+		struct thread_group_cputime *thread_group_times;	\
+									\
+		cpu = get_cpu();					\
+		thread_group_times =					\
+			per_cpu_ptr(sig->thread_group_times, cpu);	\
+		thread_group_times->field =				\
+			op(thread_group_times->field, val);		\
+		put_cpu_no_resched();					\
+	}								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#224: FILE: include/linux/sched.h:2073:
+#define thread_group_update(sig, field, val, op) ({ \
+	if (sig && sig->thread_group_times) {				\
+		int cpu;						\
+		struct thread_group_cputime *thread_group_times;	\
+									\
+		cpu = get_cpu();					\
+		thread_group_times =					\
+			per_cpu_ptr(sig->thread_group_times, cpu);	\
+		thread_group_times->field =				\
+			op(thread_group_times->field, val);		\
+		put_cpu_no_resched();					\
+	}								\
+})

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/linux/sched.h:2091:
+static inline int thread_group_cputime(struct thread_group_cputime *thread_group_times,
+	struct signal_struct *sig)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#261: FILE: include/linux/sched.h:2110:
+	return(1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#286: FILE: include/linux/sched.h:2135:
+#define thread_group_update(sig, field, val, op) ({ \
+	if (sig)							\
+		sig->thread_group_times.field =				\
+			op(sig->thread_group_times.field, val);		\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#286: FILE: include/linux/sched.h:2135:
+#define thread_group_update(sig, field, val, op) ({ \
+	if (sig)							\
+		sig->thread_group_times.field =				\
+			op(sig->thread_group_times.field, val);		\
+})

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: include/linux/sched.h:2145:
+static inline int thread_group_cputime(struct thread_group_cputime *thread_group_times,
+	struct signal_struct *sig)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#299: FILE: include/linux/sched.h:2148:
+	return(1);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#344: FILE: kernel/compat.c:178:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#344: FILE: kernel/compat.c:178:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#783: FILE: kernel/posix-cpu-timers.c:1197:
+#define UNEXPIRED(p, prof, virt, sched) \
+	((cputime_eq((p)->it_prof_expires, cputime_zero) ||	\
+	 cputime_lt((prof), (p)->it_prof_expires)) &&		\
+	(cputime_eq((p)->it_virt_expires, cputime_zero) ||	\
+	 cputime_lt((virt), (p)->it_virt_expires)) &&		\
+	((p)->it_sched_expires == 0 || (sched) < (p)->it_sched_expires))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: kernel/posix-cpu-timers.c:1209:
+	if (UNEXPIRED(tsk, prof_ticks(tsk),
+	    virt_ticks(tsk), tsk->se.sum_exec_runtime)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk->signal"
#800: FILE: kernel/posix-cpu-timers.c:1210:
+		if (unlikely(tsk->signal == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: kernel/posix-cpu-timers.c:1218:
+		tg_prof = cputime_add(thread_group_times.utime,
+		    thread_group_times.stime);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: kernel/sched_fair.c:357:
+		thread_group_update(curtask->signal, sum_exec_runtime,
+			delta_exec, thread_group_runtime_add);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: kernel/sched_rt.c:260:
+	thread_group_update(curr->signal, sum_exec_runtime,
+		delta_exec, thread_group_runtime_add);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#955: FILE: kernel/sys.c:889:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#955: FILE: kernel/sys.c:889:
+		else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302368.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 1 warnings, 17 checks, 834 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302368.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
