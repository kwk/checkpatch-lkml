WARNING:TYPO_SPELLING: 'arbitary' may be misspelled - perhaps 'arbitrary'?
#65: 
And pci_map_*/dma_map_* to remap an arbitary block to the DMA mask of
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#108: 
system has upto 100MB of reserved memory wasted (ZONE_DMA + swiotlb),
           ^^^^

WARNING:TYPO_SPELLING: 'arbitary' may be misspelled - perhaps 'arbitrary'?
#153: 
Also it makes it very simple to allocate below arbitary address boundaries.
                                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#170: 
it to any size needed (upto 2GB currently). The default sizing 
                       ^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: mm/mask-alloc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'repetive' may be misspelled - perhaps 'repetitive'?
#242: FILE: mm/mask-alloc.c:13:
+ * repetive allocation patterns it should be approximately usually
    ^^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#273: FILE: mm/mask-alloc.c:44:
+#define MASK_ZONE_LIMIT (2U<<30) /* 2GB max for now */
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Mprintk>
#275: FILE: mm/mask-alloc.c:46:
+#define Mprintk(x...)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Mprint_symbol>
#276: FILE: mm/mask-alloc.c:47:
+#define Mprint_symbol(x...)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#280: FILE: mm/mask-alloc.c:51:
+unsigned long mask_timeout __read_mostly = 5*HZ;
                                             ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#292: FILE: mm/mask-alloc.c:63:
+static inline unsigned pfn_to_maskbm_index(unsigned long pfn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#297: FILE: mm/mask-alloc.c:68:
+static inline unsigned maskbm_index_to_pfn(unsigned index)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#297: FILE: mm/mask-alloc.c:68:
+static inline unsigned maskbm_index_to_pfn(unsigned index)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#302: FILE: mm/mask-alloc.c:73:
+static unsigned wait_for_mask_free(unsigned left)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#302: FILE: mm/mask-alloc.c:73:
+static unsigned wait_for_mask_free(unsigned left)

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: mm/mask-alloc.c:76:
+	DEFINE_WAIT(wait);
+	prepare_to_wait(&mask_zone_wait, &wait, TASK_UNINTERRUPTIBLE);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: mm/mask-alloc.c:84:
+alloc_higher_pages(gfp_t gfp_mask, unsigned order, unsigned long pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: mm/mask-alloc.c:87:
+	struct page *p = NULL;
+	if (pfn > mask_max_pfn) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#319: FILE: mm/mask-alloc.c:90:
+			p = alloc_pages(gfp_mask|GFP_DMA32|__GFP_NOWARN,
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#319: FILE: mm/mask-alloc.c:90:
+			p = alloc_pages(gfp_mask|GFP_DMA32|__GFP_NOWARN,
 			                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: mm/mask-alloc.c:91:
+			p = alloc_pages(gfp_mask|GFP_DMA32|__GFP_NOWARN,
+						order);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#327: FILE: mm/mask-alloc.c:98:
+		p = alloc_pages(gfp_mask|__GFP_NOWARN, order);
 		                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#350: FILE: mm/mask-alloc.c:121:
+	if (next_bit >= start && next_bit + pages < (mask_max_pfn - (max>>1))) {
 	                                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: mm/mask-alloc.c:129:
+		offset = find_next_zero_string(mask_bitmap, start,
+					mask_max_pfn, pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#364: FILE: mm/mask-alloc.c:135:
+			BUG_ON(test_bit(offset + k, mask_bitmap));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#378: FILE: mm/mask-alloc.c:149:
+	BUG_ON(maskbm_index_to_pfn(offset) != pfn);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#398: FILE: mm/mask-alloc.c:169:
+alloc_pages_mask(gfp_t gfp, unsigned size, u64 mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#401: FILE: mm/mask-alloc.c:172:
+	unsigned pages = (size + PAGE_SIZE - 1) >> PAGE_SHIFT;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#403: FILE: mm/mask-alloc.c:174:
+	unsigned left = (gfp & __GFP_REPEAT) ? ~0 : mask_timeout, oleft;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#404: FILE: mm/mask-alloc.c:175:
+	unsigned order = get_order(size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#406: FILE: mm/mask-alloc.c:177:
+	BUG_ON(size < MASK_MIN_SIZE);	/* You likely passed order by mistake */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#407: FILE: mm/mask-alloc.c:178:
+	BUG_ON(gfp & (__GFP_DMA|__GFP_DMA32|__GFP_COMP));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#407: FILE: mm/mask-alloc.c:178:
+	BUG_ON(gfp & (__GFP_DMA|__GFP_DMA32|__GFP_COMP));
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#407: FILE: mm/mask-alloc.c:178:
+	BUG_ON(gfp & (__GFP_DMA|__GFP_DMA32|__GFP_COMP));
 	                                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#424: FILE: mm/mask-alloc.c:195:
+		if (p != NULL || max_pfn >= max_low_pfn) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#443: FILE: mm/mask-alloc.c:214:
+			Mprintk("mask page %lx size %d mask %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: mm/mask-alloc.c:215:
+			Mprintk("mask page %lx size %d mask %Lx\n",
+			       po, size, mask);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: mm/mask-alloc.c:217:
+			BUG_ON(pfn + pages > mask_max_pfn);

WARNING:LINE_SPACING: Missing a blank line after declarations
#455: FILE: mm/mask-alloc.c:226:
+				struct page *n = p + i;
+				BUG_ON(!test_bit(pfn_to_maskbm_index(pfn+i),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#455: FILE: mm/mask-alloc.c:226:
+				BUG_ON(!test_bit(pfn_to_maskbm_index(pfn+i),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#455: FILE: mm/mask-alloc.c:226:
+				BUG_ON(!test_bit(pfn_to_maskbm_index(pfn+i),
 				                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: mm/mask-alloc.c:227:
+				BUG_ON(!test_bit(pfn_to_maskbm_index(pfn+i),
+						mask_bitmap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#457: FILE: mm/mask-alloc.c:228:
+				BUG_ON(!PageMaskAlloc(n));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#463: FILE: mm/mask-alloc.c:234:
+			count_vm_events(MASK_LOW_WASTE, pages*PAGE_SIZE-size);
 			                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#463: FILE: mm/mask-alloc.c:234:
+			count_vm_events(MASK_LOW_WASTE, pages*PAGE_SIZE-size);
 			                                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#476: FILE: mm/mask-alloc.c:247:
+		printk(KERN_ERR

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#477: FILE: mm/mask-alloc.c:248:
+		"%s: Cannot allocate maskable memory size %u gfp %x mask %Lx\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#499: FILE: mm/mask-alloc.c:270:
+void *get_pages_mask(gfp_t gfp, unsigned size, u64 mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#502: FILE: mm/mask-alloc.c:273:
+	struct page *p = alloc_pages_mask(gfp, size, mask);
+	if (!p)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#515: FILE: mm/mask-alloc.c:286:
+void __free_pages_mask(struct page *page, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#519: FILE: mm/mask-alloc.c:290:
+	unsigned pages;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#521: FILE: mm/mask-alloc.c:292:
+	BUG_ON(size < MASK_MIN_SIZE); /* You likely passed order by mistake */

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: mm/mask-alloc.c:308:
+		struct page *p = page + i;
+		if (free_pages_check(p, 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#540: FILE: mm/mask-alloc.c:311:
+		BUG_ON(!PageMaskAlloc(p));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: mm/mask-alloc.c:313:
+		if (!test_and_clear_bit(pfn_to_maskbm_index(pfn + i),
+						mask_bitmap))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: mm/mask-alloc.c:314:
+			BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#552: FILE: mm/mask-alloc.c:323:
+void free_pages_mask(void *mem, unsigned size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#563: FILE: mm/mask-alloc.c:334:
+		if (isdigit(*s)) {
[...]
+		} else if (!strncmp(s, "force", 5)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#568: FILE: mm/mask-alloc.c:339:
+		} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#575: FILE: mm/mask-alloc.c:346:
+}
+early_param("maskzone", setup_maskzone);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#584: FILE: mm/mask-alloc.c:355:
+	unsigned i = pfn / BITS_PER_PAGE;

WARNING:LINE_SPACING: Missing a blank line after declarations
#585: FILE: mm/mask-alloc.c:356:
+	unsigned i = pfn / BITS_PER_PAGE;
+	if (!alloc_bm[i])

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#592: FILE: mm/mask-alloc.c:363:
+	unsigned i = pfn / BITS_PER_PAGE;

WARNING:LINE_SPACING: Missing a blank line after declarations
#593: FILE: mm/mask-alloc.c:364:
+	unsigned i = pfn / BITS_PER_PAGE;
+	return test_bit(pfn % BITS_PER_PAGE, alloc_bm[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#601: FILE: mm/mask-alloc.c:372:
+		printk(KERN_ERR "FAILED to allocate page for maskable zone\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#614: FILE: mm/mask-alloc.c:385:
+		unsigned old_size = (mask_max_pfn + BITS_PER_LONG) / 8;

WARNING:LINE_SPACING: Missing a blank line after declarations
#615: FILE: mm/mask-alloc.c:386:
+		unsigned old_size = (mask_max_pfn + BITS_PER_LONG) / 8;
+		free_bootmem(virt_to_phys(mask_bitmap), old_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#621: FILE: mm/mask-alloc.c:392:
+	printk(KERN_INFO "Setting maskable low memory zone to %lu MB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: mm/mask-alloc.c:393:
+	printk(KERN_INFO "Setting maskable low memory zone to %lu MB\n",
+			virt_to_phys(adr) >> 20);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#637: FILE: mm/mask-alloc.c:408:
+			printk(KERN_ERR

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#642: FILE: mm/mask-alloc.c:413:
+		if (virt_to_phys(adr) >= MASK_ZONE_LIMIT-PAGE_SIZE)
 		                                        ^

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#666: FILE: mm/mask-alloc.c:437:
+	 * Grab upto boundary first unless the user set an explicit size.
 	        ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#688: FILE: mm/mask-alloc.c:459:
+static __init void prep_free_pg(unsigned pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#691: FILE: mm/mask-alloc.c:462:
+	struct page *p = pfn_to_page(pfn);
+	p->flags = 0;

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageMaskAlloc>
#692: FILE: mm/mask-alloc.c:463:
+	__SetPageMaskAlloc(p);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#719: FILE: mm/mask-alloc.c:490:
+#if 1

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: mm/mask-alloc.c:493:
+		struct page *p = pfn_to_page(i);
+		if (!PageMaskAlloc(p))

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#731: FILE: mm/mask-alloc.c:502:
+	printk(KERN_INFO "Maskable zone upto %luMB with %luMB free\n",
 	                                ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#731: FILE: mm/mask-alloc.c:502:
+	printk(KERN_INFO "Maskable zone upto %luMB with %luMB free\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#753: FILE: include/linux/gfp.h:225:
+extern struct page *alloc_pages_mask(gfp_t gfp_mask, unsigned size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#753: FILE: include/linux/gfp.h:225:
+extern struct page *alloc_pages_mask(gfp_t gfp_mask, unsigned size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: include/linux/gfp.h:226:
+extern struct page *alloc_pages_mask(gfp_t gfp_mask, unsigned size,
+					u64 mask);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#755: FILE: include/linux/gfp.h:227:
+extern void *get_pages_mask(gfp_t gfp_mask, unsigned size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#755: FILE: include/linux/gfp.h:227:
+extern void *get_pages_mask(gfp_t gfp_mask, unsigned size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: include/linux/gfp.h:228:
+extern void *get_pages_mask(gfp_t gfp_mask, unsigned size,
+					u64 mask);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#757: FILE: include/linux/gfp.h:229:
+extern void __free_pages_mask(struct page *page, unsigned size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#757: FILE: include/linux/gfp.h:229:
+extern void __free_pages_mask(struct page *page, unsigned size);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#758: FILE: include/linux/gfp.h:230:
+extern void free_pages_mask(void *addr, unsigned size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#758: FILE: include/linux/gfp.h:230:
+extern void free_pages_mask(void *addr, unsigned size);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#761: FILE: include/linux/gfp.h:233:
+static inline unsigned long __get_dma_pages(gfp_t gfp, unsigned order)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#763: FILE: include/linux/gfp.h:235:
+	unsigned size = PAGE_SIZE << order;

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: include/linux/gfp.h:236:
+	unsigned size = PAGE_SIZE << order;
+	return (unsigned long)get_pages_mask(gfp, size, TRAD_DMA_MASK);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gfp' may be better as '(gfp)' to avoid precedence issues
#779: FILE: include/linux/gfp.h:251:
+#define get_pages_mask(gfp, size, mask) \
+	__get_free_pages(gfp | gfp_mask(mask), get_order(size))

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageMaskAlloc>
#825: FILE: include/linux/page-flags.h:262:
+#define __ClearPageMaskAlloc(page) __clear_bit(PG_mask_alloc, &(page)->flags)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310112.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 61 warnings, 33 checks, 625 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310112.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
