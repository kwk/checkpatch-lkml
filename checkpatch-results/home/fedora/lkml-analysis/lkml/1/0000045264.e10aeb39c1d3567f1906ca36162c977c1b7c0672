WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#29: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: fs/logfs/readwrite.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#35: FILE: fs/logfs/readwrite.c:2:
+ * fs/logfs/readwrite.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#103: FILE: fs/logfs/readwrite.c:70:
+	BUG_ON(bix >= INDIRECT_BIT);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:RETURN_VOID: void function return statements are not generally useful
#128: FILE: fs/logfs/readwrite.c:95:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#129: FILE: fs/logfs/readwrite.c:96:
+}
+#undef ARCH_SHIFT

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#146: FILE: fs/logfs/readwrite.c:113:
+static void logfs_disk_to_inode(struct logfs_disk_inode *di, struct inode*inode)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#165: FILE: fs/logfs/readwrite.c:132:
+	case S_IFSOCK:	/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#166: FILE: fs/logfs/readwrite.c:133:
+	case S_IFBLK:	/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#167: FILE: fs/logfs/readwrite.c:134:
+	case S_IFCHR:	/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#171: FILE: fs/logfs/readwrite.c:138:
+	case S_IFDIR:	/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#172: FILE: fs/logfs/readwrite.c:139:
+	case S_IFREG:	/* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#178: FILE: fs/logfs/readwrite.c:145:
+		BUG();

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#182: FILE: fs/logfs/readwrite.c:149:
+static void logfs_inode_to_disk(struct inode *inode, struct logfs_disk_inode*di)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#202: FILE: fs/logfs/readwrite.c:169:
+	case S_IFSOCK:	/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#203: FILE: fs/logfs/readwrite.c:170:
+	case S_IFBLK:	/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#204: FILE: fs/logfs/readwrite.c:171:
+	case S_IFCHR:	/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#208: FILE: fs/logfs/readwrite.c:175:
+	case S_IFDIR:	/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#209: FILE: fs/logfs/readwrite.c:176:
+	case S_IFREG:	/* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#215: FILE: fs/logfs/readwrite.c:182:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#241: FILE: fs/logfs/readwrite.c:208:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: fs/logfs/readwrite.c:210:
+		BUG_ON(PagePreLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: fs/logfs/readwrite.c:225:
+	BUG_ON(!PageLocked(page));

CHECK:BRACES: braces {} should be used on all arms of this statement
#259: FILE: fs/logfs/readwrite.c:226:
+	if (lock)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#261: FILE: fs/logfs/readwrite.c:228:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#263: FILE: fs/logfs/readwrite.c:230:
+		BUG_ON(!PagePreLocked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: fs/logfs/readwrite.c:247:
+static void logfs_get_wblocks(struct super_block *sb, struct page *page,
+		int lock)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#291: FILE: fs/logfs/readwrite.c:258:
+		 * and mempool fill grade */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: fs/logfs/readwrite.c:263:
+static void logfs_put_wblocks(struct super_block *sb, struct page *page,
+		int lock)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#303: FILE: fs/logfs/readwrite.c:270:
+	 * s_write_mutex or we could race against another task. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: fs/logfs/readwrite.c:276:
+static struct page *logfs_get_read_page(struct inode *inode, u64 bix,
+		level_t level)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#328: FILE: fs/logfs/readwrite.c:295:
+			printk(KERN_ERR "stack at %p\n", &loop);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#329: FILE: fs/logfs/readwrite.c:296:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#333: FILE: fs/logfs/readwrite.c:300:
+			 * is safe to use this page. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: fs/logfs/readwrite.c:308:
+	BUG_ON(!PageLocked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: fs/logfs/readwrite.c:312:
+static struct page *logfs_get_write_page(struct inode *inode, u64 bix,
+		level_t level)

CHECK:BRACES: braces {} should be used on all arms of this statement
#354: FILE: fs/logfs/readwrite.c:321:
+	if (!page) {
[...]
+	} else logfs_lock_write_page(page);
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#365: FILE: fs/logfs/readwrite.c:332:
+	} else logfs_lock_write_page(page);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#366: FILE: fs/logfs/readwrite.c:333:
+	BUG_ON(!PageLocked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: fs/logfs/readwrite.c:350:
+static struct page *logfs_get_page(struct inode *inode, u64 bix, level_t level,
+		int rw)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: fs/logfs/readwrite.c:382:
+static inline void init_shadow_tree(struct super_block *sb,
+		struct shadow_tree *tree)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: fs/logfs/readwrite.c:414:
+	BUG_ON(ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: fs/logfs/readwrite.c:423:
+	if (inode->i_ino == LOGFS_INO_MASTER)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#458: FILE: fs/logfs/readwrite.c:425:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#461: FILE: fs/logfs/readwrite.c:428:
+		BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: fs/logfs/readwrite.c:434:
+	BUG_ON(block->inode->i_ino == LOGFS_INO_MASTER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: fs/logfs/readwrite.c:457:
+static unsigned long fnb(const unsigned long *addr,
+		unsigned long size, unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: fs/logfs/readwrite.c:482:
+static int inode_write_alias(struct super_block *sb,
+		struct logfs_block *block, write_alias_t *write_one_alias)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#520: FILE: fs/logfs/readwrite.c:487:
+	u64 ino , bix;
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#535: FILE: fs/logfs/readwrite.c:502:
+			val = cpu_to_be64(li->li_used_bytes);;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: fs/logfs/readwrite.c:511:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: fs/logfs/readwrite.c:524:
+static int indirect_write_alias(struct super_block *sb,
+		struct logfs_block *block, write_alias_t *write_one_alias)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#561: FILE: fs/logfs/readwrite.c:528:
+	u64 ino , bix;
 	        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: fs/logfs/readwrite.c:565:
+	BUG_ON(!list_empty(&block->item_list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: fs/logfs/readwrite.c:579:
+static void indirect_free_block(struct super_block *sb,
+		struct logfs_block *block)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#619: FILE: fs/logfs/readwrite.c:586:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: fs/logfs/readwrite.c:602:
+struct logfs_block *__alloc_block(struct super_block *sb,
+		u64 ino, u64 bix, level_t level)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: fs/logfs/readwrite.c:633:
+void initialize_block_counters(struct page *page, struct logfs_block *block,
+		__be64 *array, int page_is_empty)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: fs/logfs/readwrite.c:679:
+static void alloc_indirect_block(struct inode *inode, struct page *page,
+		int page_is_empty)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#734: FILE: fs/logfs/readwrite.c:701:
+	BUG_ON(!block);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: fs/logfs/readwrite.c:744:
+static int logfs_read_loop(struct inode *inode, struct page *page,
+		int rw_context)

ERROR:SPACING: space required before the open brace '{'
#794: FILE: fs/logfs/readwrite.c:761:
+			level = SUBLEVEL(level)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: fs/logfs/readwrite.c:782:
+static int logfs_read_block(struct inode *inode, struct page *page,
+		int rw_context)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'li->li_data[bix] == 0'
#871: FILE: fs/logfs/readwrite.c:838:
+		if (data ^ (li->li_data[bix] == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#885: FILE: fs/logfs/readwrite.c:852:
+	BUG_ON(!bofs);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#888: FILE: fs/logfs/readwrite.c:855:
+		increment = 1 << (LOGFS_BLOCK_BITS * ((__force u8)level-1));
 		                                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rblock[slot] != 0'
#902: FILE: fs/logfs/readwrite.c:869:
+			if (data && (rblock[slot] != 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#919: FILE: fs/logfs/readwrite.c:886:
+			BUG_ON(data);

CHECK:BRACES: braces {} should be used on all arms of this statement
#944: FILE: fs/logfs/readwrite.c:911:
+	if (!li->li_data[INDIRECT_INDEX])
[...]
+	else if (li->li_data[INDIRECT_INDEX] & LOGFS_FULLY_POPULATED)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#948: FILE: fs/logfs/readwrite.c:915:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: fs/logfs/readwrite.c:974:
+static int __logfs_is_valid_loop(struct inode *inode, u64 bix,
+		u64 ofs, u64 bofs)

ERROR:SPACING: space required before the open brace '{'
#1014: FILE: fs/logfs/readwrite.c:981:
+	for (level = LEVEL(li->li_height); level != 0; level = SUBLEVEL(level)){

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1016: FILE: fs/logfs/readwrite.c:983:
+		BUG_ON(!page);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_nlink == 0'
#1056: FILE: fs/logfs/readwrite.c:1023:
+	if ((inode->i_nlink == 0) && atomic_read(&inode->i_count) == 1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: fs/logfs/readwrite.c:1044:
+int logfs_is_valid_block(struct super_block *sb, u64 ofs, u64 ino, u64 bix,
+		gc_level_t gc_level)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1084: FILE: fs/logfs/readwrite.c:1051:
+	 * blocks are by definition invalid. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1140: FILE: fs/logfs/readwrite.c:1107:
+	if (available < bytes + super->s_root_reserve &&
+			!capable(CAP_SYS_RESOURCE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1171: FILE: fs/logfs/readwrite.c:1138:
+static void logfs_handle_transaction(struct inode *inode,
+		struct logfs_transaction *ta)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1180: FILE: fs/logfs/readwrite.c:1147:
+		BUG(); /* FIXME: Yes, this needs more thought */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1188: FILE: fs/logfs/readwrite.c:1155:
+	case CREATE_1: /* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1190: FILE: fs/logfs/readwrite.c:1157:
+		BUG_ON(super->s_victim_ino);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1193: FILE: fs/logfs/readwrite.c:1160:
+	case CREATE_2: /* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1195: FILE: fs/logfs/readwrite.c:1162:
+		BUG_ON(super->s_victim_ino != ta->ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1201: FILE: fs/logfs/readwrite.c:1168:
+		BUG_ON(super->s_rename_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1202: FILE: fs/logfs/readwrite.c:1169:
+		BUG_ON(super->s_rename_pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1207: FILE: fs/logfs/readwrite.c:1174:
+		BUG_ON(super->s_rename_dir != ta->dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1208: FILE: fs/logfs/readwrite.c:1175:
+		BUG_ON(super->s_rename_pos != ta->pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1214: FILE: fs/logfs/readwrite.c:1181:
+		BUG_ON(super->s_rename_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1215: FILE: fs/logfs/readwrite.c:1182:
+		BUG_ON(super->s_rename_pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1216: FILE: fs/logfs/readwrite.c:1183:
+		BUG_ON(super->s_victim_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1222: FILE: fs/logfs/readwrite.c:1189:
+		BUG_ON(super->s_rename_dir != ta->dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1223: FILE: fs/logfs/readwrite.c:1190:
+		BUG_ON(super->s_rename_pos != ta->pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1224: FILE: fs/logfs/readwrite.c:1191:
+		BUG_ON(super->s_victim_ino != ta->ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1229: FILE: fs/logfs/readwrite.c:1196:
+		BUG_ON(super->s_rename_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1230: FILE: fs/logfs/readwrite.c:1197:
+		BUG_ON(super->s_rename_pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1231: FILE: fs/logfs/readwrite.c:1198:
+		BUG_ON(super->s_victim_ino != ta->ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1236: FILE: fs/logfs/readwrite.c:1203:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: fs/logfs/readwrite.c:1222:
+static struct logfs_shadow *alloc_shadow(struct inode *inode, u64 bix,
+		level_t level, u64 old_ofs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: fs/logfs/readwrite.c:1267:
+static void fill_shadow_tree(struct inode *inode, struct page *page,
+		struct logfs_shadow *shadow)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1308: FILE: fs/logfs/readwrite.c:1275:
+			super->s_no_object_aliases -= bitmap_weight(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1316: FILE: fs/logfs/readwrite.c:1283:
+			btree_insert64(&tree->old, shadow->old_ofs, shadow,
+					GFP_NOFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1319: FILE: fs/logfs/readwrite.c:1286:
+			btree_insert64(&tree->new, shadow->new_ofs, shadow,
+					GFP_NOFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1327: FILE: fs/logfs/readwrite.c:1294:
+static void logfs_set_alias(struct super_block *sb, struct logfs_block *block,
+		long child_no)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1364: FILE: fs/logfs/readwrite.c:1331:
+static int logfs_write_i0(struct inode *inode, struct page *page,
+		struct write_control *wc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1400: FILE: fs/logfs/readwrite.c:1367:
+static int logfs_write_direct(struct inode *inode, struct page *page,
+		long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1440: FILE: fs/logfs/readwrite.c:1407:
+static int __logfs_write_rec(struct inode *inode, struct page *page,
+		struct write_control *this_wc,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1465: FILE: fs/logfs/readwrite.c:1432:
+	if ((__force u8)level-1 > (__force u8)target_level)
 	                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1467: FILE: fs/logfs/readwrite.c:1434:
+		ret = __logfs_write_rec(inode, page, &child_wc, bix,
+				target_level, SUBLEVEL(level));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1480: FILE: fs/logfs/readwrite.c:1447:
+	 * space for indirect blocks in the future, which we cannot reserve */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1491: FILE: fs/logfs/readwrite.c:1458:
+static int logfs_write_rec(struct inode *inode, struct page *page,
+		pgoff_t bix, level_t target_level, long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: fs/logfs/readwrite.c:1471:
+		ret = __logfs_write_rec(inode, page, &wc, bix, target_level,
+				LEVEL(li->li_height));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1542: FILE: fs/logfs/readwrite.c:1509:
+	BUG_ON(height > 5 || li->li_height > 5);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1545: FILE: fs/logfs/readwrite.c:1512:
+		page = logfs_get_write_page(inode, I0_BLOCKS + 1,
+				LEVEL(li->li_height + 1));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1572: FILE: fs/logfs/readwrite.c:1539:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1603: FILE: fs/logfs/readwrite.c:1570:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1611: FILE: fs/logfs/readwrite.c:1578:
+int logfs_delete(struct inode *inode, pgoff_t index,
+		struct shadow_tree *shadow_tree)

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#1630: FILE: fs/logfs/readwrite.c:1597:
+/* Rewrite cannot mark the inode dirty but has to write it immediatly. */
                                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1632: FILE: fs/logfs/readwrite.c:1599:
+int logfs_rewrite_block(struct inode *inode, u64 bix, u64 ofs,
+		gc_level_t gc_level, long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1653: FILE: fs/logfs/readwrite.c:1620:
+static int truncate_data_block(struct inode *inode, struct page *page,
+		u64 ofs, struct logfs_shadow *shadow, u64 size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1665: FILE: fs/logfs/readwrite.c:1632:
+	BUG_ON(level != 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1676: FILE: fs/logfs/readwrite.c:1643:
+static int logfs_truncate_i0(struct inode *inode, struct page *page,
+		struct write_control *wc, u64 size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1684: FILE: fs/logfs/readwrite.c:1651:
+	BUG_ON(level != 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1711: FILE: fs/logfs/readwrite.c:1678:
+		if (size > (e+1) * LOGFS_BLOCKSIZE)
 		             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1774: FILE: fs/logfs/readwrite.c:1741:
+static int __logfs_truncate_rec(struct inode *inode, struct page *ipage,
+		struct write_control *this_wc, u64 size)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1816: FILE: fs/logfs/readwrite.c:1783:
+		printk("ineffectual truncate (%lx, %lx, %llx)\n", inode->i_ino, ipage->index, size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'move_page_to_inode', this function's name, in a string
#1896: FILE: fs/logfs/readwrite.c:1863:
+	log_blockmove("move_page_to_inode(%llx, %llx, %x)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1897: FILE: fs/logfs/readwrite.c:1864:
+	log_blockmove("move_page_to_inode(%llx, %llx, %x)\n",
+			block->ino, block->bix, block->level);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1898: FILE: fs/logfs/readwrite.c:1865:
+	BUG_ON(li->li_block);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'move_inode_to_page', this function's name, in a string
#1916: FILE: fs/logfs/readwrite.c:1883:
+	log_blockmove("move_inode_to_page(%llx, %llx, %x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1917: FILE: fs/logfs/readwrite.c:1884:
+	log_blockmove("move_inode_to_page(%llx, %llx, %x)\n",
+			block->ino, block->bix, block->level);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1918: FILE: fs/logfs/readwrite.c:1885:
+	BUG_ON(PagePrivate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1943: FILE: fs/logfs/readwrite.c:1910:
+	page = read_cache_page(master_inode->i_mapping, ino,
+			(filler_t *)logfs_readpage, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1962: FILE: fs/logfs/readwrite.c:1929:
+	BUG_ON(inode->i_ino == LOGFS_INO_MASTER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1986: FILE: fs/logfs/readwrite.c:1953:
+	BUG_ON(inode->i_state & I_DIRTY && inode->i_nlink);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1994: FILE: fs/logfs/readwrite.c:1961:
+	BUG_ON(inode->i_ino < LOGFS_RESERVED_INOS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1996: FILE: fs/logfs/readwrite.c:1963:
+	BUG_ON(!page); /* FIXME: Use emergency page */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2008: FILE: fs/logfs/readwrite.c:1975:
+	BUG_ON(inode->i_ino == LOGFS_INO_MASTER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2027: FILE: fs/logfs/readwrite.c:1994:
+static void logfs_mod_segment_entry(struct super_block *sb, u32 segno,
+		int write,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2043: FILE: fs/logfs/readwrite.c:2010:
+	BUG_ON(!page); /* FIXME: We need some reserve page for this case */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2053: FILE: fs/logfs/readwrite.c:2020:
+		BUG_ON((int)be32_to_cpu(se[child_no].valid) > super->s_segsize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2068: FILE: fs/logfs/readwrite.c:2035:
+void logfs_get_segment_entry(struct super_block *sb, u32 segno,
+		struct logfs_segment_entry *se)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2099: FILE: fs/logfs/readwrite.c:2066:
+void logfs_set_segment_erased(struct super_block *sb, u32 segno, u32 ec,
+		gc_level_t gc_level)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2117: FILE: fs/logfs/readwrite.c:2084:
+static void __set_segment_unreserved(struct logfs_segment_entry *se,
+		long ec_level)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2128: FILE: fs/logfs/readwrite.c:2095:
+	logfs_mod_segment_entry(sb, segno, 1, __set_segment_unreserved,
+			ec_level);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2191: FILE: fs/logfs/readwrite.c:2158:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2192: FILE: fs/logfs/readwrite.c:2159:
+	BUG_ON(!PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2193: FILE: fs/logfs/readwrite.c:2160:
+	BUG_ON(logfs_block(page) != block);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2195: FILE: fs/logfs/readwrite.c:2162:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2196: FILE: fs/logfs/readwrite.c:2163:
+	BUG_ON(PagePrivate(page) || page->private);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2218: FILE: fs/logfs/readwrite.c:2185:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t count,
+		loff_t bix, long flags, struct shadow_tree *shadow_tree)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2225: FILE: fs/logfs/readwrite.c:2192:
+	BUG_ON(pos & (LOGFS_BLOCKSIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2225: FILE: fs/logfs/readwrite.c:2192:
+	BUG_ON(pos & (LOGFS_BLOCKSIZE-1));
 	                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2226: FILE: fs/logfs/readwrite.c:2193:
+	BUG_ON(count > LOGFS_BLOCKSIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2264: FILE: fs/logfs/readwrite.c:2231:
+	super->s_block_pool = mempool_create_kmalloc_pool(min_fill,
+			sizeof(struct logfs_block));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2266: FILE: fs/logfs/readwrite.c:2233:
+	super->s_shadow_pool = mempool_create_kmalloc_pool(min_fill,
+			sizeof(struct logfs_shadow));

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#2276: FILE: fs/logfs/readwrite.c:2243:
+	if (super->s_block_pool)
+		mempool_destroy(super->s_block_pool);

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#2278: FILE: fs/logfs/readwrite.c:2245:
+	if (super->s_shadow_pool)
+		mempool_destroy(super->s_shadow_pool);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 85 warnings, 66 checks, 2246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
