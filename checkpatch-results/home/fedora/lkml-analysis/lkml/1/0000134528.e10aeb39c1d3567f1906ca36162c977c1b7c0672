WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#20: 
Subject: [PATCH] sparse LLVM backend (was Re: [rfc] built-in native compiler

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
 s2l-gen.c  | 2101 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#124: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: s2l-gen.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#131: FILE: s2l-gen.c:3:
+ * sparse/s2l-gen.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: s2l-gen.c:152:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#281: FILE: s2l-gen.c:153:
+static struct function *current_func = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#282: FILE: s2l-gen.c:154:
+static struct textbuf *unit_post_text = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: s2l-gen.c:157:
+static void emit_comment(const char * fmt, ...) FORMAT_ATTR(1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'stor_sym_init', this function's name, in a string
#302: FILE: s2l-gen.c:174:
+		die("OOM in stor_sym_init");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#304: FILE: s2l-gen.c:176:
+	stor = (struct storage *) (priv + 1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#326: FILE: s2l-gen.c:198:
+		sprintf(name, "%Ld", s->value);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'new_storage', this function's name, in a string
#385: FILE: s2l-gen.c:257:
+		die("OOM in new_storage");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f"
#397: FILE: s2l-gen.c:269:
+	assert(f != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#428: FILE: s2l-gen.c:300:
+	static int label = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: s2l-gen.c:301:
+	static int label = 0;
+	return ++label;

CHECK:SPACING: No space is necessary after a cast
#442: FILE: s2l-gen.c:314:
+	tmp->text = ((void *) tmp) + sizeof(*tmp);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#460: FILE: s2l-gen.c:332:
+#if 0

CHECK:BRACES: braces {} should be used on all arms of this statement
#467: FILE: s2l-gen.c:339:
+		if (tmp->next == tmp)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#469: FILE: s2l-gen.c:341:
+		else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#492: FILE: s2l-gen.c:364:
+	i = vsnprintf(tmpbuf+7, sizeof(tmpbuf)-4, fmt, args);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#492: FILE: s2l-gen.c:364:
+	i = vsnprintf(tmpbuf+7, sizeof(tmpbuf)-4, fmt, args);
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#494: FILE: s2l-gen.c:366:
+	tmpbuf[i+7] = '\n';
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#495: FILE: s2l-gen.c:367:
+	tmpbuf[i+8] = '\0';
 	        ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#499: FILE: s2l-gen.c:371:
+static void emit_label (int label, const char *comment)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#512: FILE: s2l-gen.c:384:
+static void emit_labelsym (struct symbol *sym, const char *comment)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#541: FILE: s2l-gen.c:413:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#556: FILE: s2l-gen.c:428:
+			(void) rc;	/* FIXME */

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#576: FILE: s2l-gen.c:448:
+		len = strlen(show_string(atom->string)),
+		printf("@.L%d = internal constant [%lu x i8] c%s\n",
+		       atom->label,
+		       (unsigned long) len,
+		       show_string(atom->string));

CHECK:SPACING: No space is necessary after a cast
#579: FILE: s2l-gen.c:451:
+		       (unsigned long) len,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'atom->type == ATOM_TEXT'
#598: FILE: s2l-gen.c:470:
+		if ((atom->type == ATOM_TEXT) && (atom->text))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'atom->text'
#598: FILE: s2l-gen.c:470:
+		if ((atom->type == ATOM_TEXT) && (atom->text))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: s2l-gen.c:505:
+	sprintf(defstr, "define %s%s @%s (",
+	       (sym->ctype.modifiers & MOD_STATIC) ? "internal " : "",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: s2l-gen.c:517:
+		sprintf(stmp, "%s%s %%arg%u",
+		       first_arg ? "" : ", ",

CHECK:SPACING: No space is necessary after a cast
#664: FILE: s2l-gen.c:536:
+	f		=  (struct function *) mem;

CHECK:SPACING: No space is necessary after a cast
#666: FILE: s2l-gen.c:538:
+	f->argv		=  (struct symbol **) mem;

CHECK:SPACING: No space is necessary after a cast
#668: FILE: s2l-gen.c:540:
+	privbase	=  (struct symbol_private *) mem;

CHECK:SPACING: No space is necessary after a cast
#670: FILE: s2l-gen.c:542:
+	storage_base	=  (struct storage *) mem;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current_func"
#686: FILE: s2l-gen.c:558:
+	assert(current_func == NULL);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#691: FILE: s2l-gen.c:563:
+
+}

CHECK:SPACING: No space is necessary after a cast
#743: FILE: s2l-gen.c:615:
+	ll = (long long) expr->value;

CHECK:SPACING: No space is necessary after a cast
#746: FILE: s2l-gen.c:618:
+	case 8:		type = "byte";	ll = (char) ll; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#746: FILE: s2l-gen.c:618:
+	case 8:		type = "byte";	ll = (char) ll; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#747: FILE: s2l-gen.c:619:
+	case 16:	type = "value";	ll = (short) ll; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#747: FILE: s2l-gen.c:619:
+	case 16:	type = "value";	ll = (short) ll; break;

CHECK:SPACING: No space is necessary after a cast
#748: FILE: s2l-gen.c:620:
+	case 32:	type = "long";	ll = (int) ll; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#748: FILE: s2l-gen.c:620:
+	case 32:	type = "long";	ll = (int) ll; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#749: FILE: s2l-gen.c:621:
+	case 64:	type = "quad";	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#750: FILE: s2l-gen.c:622:
+	default:	type = NULL;	break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "type"
#753: FILE: s2l-gen.c:625:
+	assert(type != NULL);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#755: FILE: s2l-gen.c:627:
+	printf("\t.%s\t%Ld\n", type, ll);

WARNING:LINE_SPACING: Missing a blank line after declarations
#786: FILE: s2l-gen.c:658:
+		struct symbol *base_type = sym->ctype.base_type;
+		assert(base_type != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "base_type"
#786: FILE: s2l-gen.c:658:
+		assert(base_type != NULL);

CHECK:SPACING: No space is necessary after a cast
#803: FILE: s2l-gen.c:675:
+		a_ofs = (int) a->init_offset;

CHECK:SPACING: No space is necessary after a cast
#805: FILE: s2l-gen.c:677:
+		b_ofs = (int) b->init_offset;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sort_array', this function's name, in a string
#826: FILE: s2l-gen.c:698:
+		die("OOM in sort_array");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->type == EXPR_POS'
#835: FILE: s2l-gen.c:707:
+		if ((entry->type == EXPR_POS) || (entry->type == EXPR_VALUE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->type == EXPR_VALUE'
#835: FILE: s2l-gen.c:707:
+		if ((entry->type == EXPR_POS) || (entry->type == EXPR_VALUE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->type == EXPR_POS'
#863: FILE: s2l-gen.c:735:
+		if ((entry->type == EXPR_POS) || (entry->type == EXPR_VALUE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->type == EXPR_VALUE'
#863: FILE: s2l-gen.c:735:
+		if ((entry->type == EXPR_POS) || (entry->type == EXPR_VALUE))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#867: FILE: s2l-gen.c:739:
+
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "base_type"
#875: FILE: s2l-gen.c:747:
+	assert(base_type != NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: s2l-gen.c:754:
+^I^I        sym->ctype.alignment,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: s2l-gen.c:754:
+	emit_object_pre(show_ident(sym->ident), sym->ctype.modifiers,
+		        sym->ctype.alignment,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src->type == STOR_ARG'
#917: FILE: s2l-gen.c:789:
+	if ((src->type == STOR_ARG) && (bit_size < 32))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit_size < 32'
#917: FILE: s2l-gen.c:789:
+	if ((src->type == STOR_ARG) && (bit_size < 32))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dest->type == STOR_ARG'
#927: FILE: s2l-gen.c:799:
+	if ((dest->type == STOR_ARG) && (bit_size < 32))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit_size < 32'
#927: FILE: s2l-gen.c:799:
+	if ((dest->type == STOR_ARG) && (bit_size < 32))

ERROR:SPACING: space required before the open parenthesis '('
#994: FILE: s2l-gen.c:866:
+	switch(expr->op) {

CHECK:SPACING: No space is necessary after a cast
#1054: FILE: s2l-gen.c:926:
+	val->value = (long long) expr->value;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1232: FILE: s2l-gen.c:1104:
+	if (postop) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1238: FILE: s2l-gen.c:1110:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1265: FILE: s2l-gen.c:1137:
+	if (expr && expr->ctype) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "val"
#1269: FILE: s2l-gen.c:1141:
+		assert(val != NULL);

CHECK:BRACES: Unbalanced braces around else statement
#1275: FILE: s2l-gen.c:1147:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv"
#1323: FILE: s2l-gen.c:1195:
+	if (priv == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!expr"
#1327: FILE: s2l-gen.c:1199:
+		if (expr == NULL) {

WARNING:LONG_LINE_STRING: line length of 113 exceeds 100 columns
#1329: FILE: s2l-gen.c:1201:
+			fprintf(stderr, "FIXME! no value for symbol %s.  creating pseudo %d (stack offset %d)\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#1329: FILE: s2l-gen.c:1201:
+			struct storage *new = stack_alloc(4);
+			fprintf(stderr, "FIXME! no value for symbol %s.  creating pseudo %d (stack offset %d)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1487: FILE: s2l-gen.c:1359:
+		struct expression *expr = case_stmt->case_expression;
+		if (!expr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1491: FILE: s2l-gen.c:1363:
+	if (default_sym)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1493: FILE: s2l-gen.c:1365:
+	else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1515: FILE: s2l-gen.c:1387:
+			assert (expr->type == EXPR_VALUE);

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#1539: FILE: s2l-gen.c:1411:
+	printf("\t%s:%d:%ld at offset %ld.%d", show_ident(sym->ident), sym->bit_size, sym->ctype.alignment, sym->offset, sym->bit_offset);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1558: FILE: s2l-gen.c:1430:
+	switch (type->type) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1567: FILE: s2l-gen.c:1439:
+		if (sym->initializer) {
[...]
+		} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1570: FILE: s2l-gen.c:1442:
+^I^I^I^I        sym->ctype.alignment,$

CHECK:BRACES: Unbalanced braces around else statement
#1574: FILE: s2l-gen.c:1446:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1592: FILE: s2l-gen.c:1464:
+		struct statement *stmt = type->stmt;
+		if (stmt) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type->type != SYM_BASETYPE'
#1604: FILE: s2l-gen.c:1476:
+	if (sym->initializer && (type->type != SYM_BASETYPE) &&
+	    (type->type != SYM_ARRAY)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type->type != SYM_ARRAY'
#1604: FILE: s2l-gen.c:1476:
+	if (sym->initializer && (type->type != SYM_BASETYPE) &&
+	    (type->type != SYM_ARRAY)) {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1606: FILE: s2l-gen.c:1478:
+		printf(" = \n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1616: FILE: s2l-gen.c:1488:
+	struct symbol *sym;
+	FOR_EACH_PTR(syms, sym) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f->loop_stack"
#1638: FILE: s2l-gen.c:1510:
+	assert(f->loop_stack != NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1681: FILE: s2l-gen.c:1553:
+				struct storage *lbv;
+				lbv = new_storage(STOR_LABEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1731: FILE: s2l-gen.c:1603:
+		struct storage *lbv = new_storage(STOR_LABEL);
+		lbv->label = loop_top;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1739: FILE: s2l-gen.c:1611:
+			struct storage *lbv = new_storage(STOR_LABEL);
+			lbv->label = loop_top;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1747: FILE: s2l-gen.c:1619:
+		struct storage *lbv = new_storage(STOR_LABEL);
+		lbv->label = loop_top;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1788: FILE: s2l-gen.c:1660:
+		struct storage *val = s2l_gen_expression(stmt->goto_expression);
+		printf("\tFIXME goto *v%d\n", val->pseudo);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1793: FILE: s2l-gen.c:1665:
+		struct storage *lbv = new_storage(STOR_LABEL);
+		lbv->label = loopstk_break();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1801: FILE: s2l-gen.c:1673:
+		struct storage *lbv = new_storage(STOR_LABEL);
+		lbv->label = loopstk_continue();

CHECK:BRACES: Unbalanced braces around else statement
#1807: FILE: s2l-gen.c:1679:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1932: FILE: s2l-gen.c:1804:
+			struct symbol *sym = fn->unop->symbol;
+			if (sym->ctype.base_type->type == SYM_FN)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1938: FILE: s2l-gen.c:1810:
+		struct storage *direct_stor = new_storage(STOR_SYM);
+		direct_stor->flags |= STOR_WANTS_FREE;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#2056: FILE: s2l-gen.c:1928:
+		printf("\tmovi.%d\t\tv%d,$%s\n", bits_in_pointer, new->pseudo, show_ident(sym->ident));

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#2063: FILE: s2l-gen.c:1935:
+	printf("\taddi.%d\t\tv%d,vFP,$offsetof(%s:%p)\n", bits_in_pointer, new->pseudo, show_ident(sym->ident), sym);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2104: FILE: s2l-gen.c:1976:
+	struct storage *new = stack_alloc(4);
+	printf("\tmovi.%d\t\tv%d,.L%p\n", bits_in_pointer, new->pseudo, expr->label_symbol);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2119: FILE: s2l-gen.c:1991:
+	printf("\tinsert v%d at [%d:%d] of %s\n", new->pseudo,
+		expr->init_offset, ctype->bit_offset,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2159: FILE: s2l-gen.c:2031:
+		struct position *pos = &expr->pos;
+		printf("\tno type at %s:%d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2160: FILE: s2l-gen.c:2032:
+		printf("\tno type at %s:%d:%d\n",
+			stream_name(pos->stream),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2236: FILE: s2l.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#2291: FILE: s2l.c:56:
+		const char *basename = strrchr(file, '/');
+		basename = basename ?  basename+1 : file;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2291: FILE: s2l.c:56:
+		basename = basename ?  basename+1 : file;
 		                               ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2301: FILE: s2l.c:66:
+#if 0

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000134528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 41 warnings, 61 checks, 2207 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000134528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
