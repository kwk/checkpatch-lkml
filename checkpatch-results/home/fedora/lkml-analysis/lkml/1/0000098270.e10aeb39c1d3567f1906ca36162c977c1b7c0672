WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
slab debug detects the corruption when it allocates and frees the slab. But if someone write to slab memory when it already freed, slab debug could only report its last free point when slab allocates the same block.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: include/mf-runtime.h:1:
+#ifndef _LINUX_MF_RUNTIME

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#123: FILE: include/mf-runtime.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#124: FILE: include/mf-runtime.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#133: FILE: include/mf-runtime.h:27:
+typedef void *__mf_ptr_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#134: FILE: include/mf-runtime.h:28:
+typedef unsigned int __mf_uintptr_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#168: FILE: kernel/mudflap.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#169: FILE: kernel/mudflap.c:2:
+ * kernel/mudflap.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#190: FILE: kernel/mudflap.c:23:
+#define DPRINTK(fmt, args...) printk(fmt, ## args)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#199: FILE: kernel/mudflap.c:32:
+typedef void *__mf_ptr_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#200: FILE: kernel/mudflap.c:33:
+typedef unsigned int __mf_uintptr_t;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#215: FILE: kernel/mudflap.c:48:
+void check_slab_write(void *ptr, unsigned int sz,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: kernel/mudflap.c:49:
+void check_slab_write(void *ptr, unsigned int sz,
+		int type, const char *location);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: kernel/mudflap.c:54:
+	if (ptr < PAGE_OFFSET ||
+		(ptr > (unsigned long)high_memory && high_memory != 0))

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#308: FILE: lib/Kconfig.debug:38:
+config MUDFLAP
+	bool "Enable mudflap to check slab write after free"
+	depends on SLAB && DEBUG_SLAB
+	help
+	  This uses mudflap which introduced by gcc4 to check slab corruption
+	  which is caused by writing after free.
+	  This is smaller and faster than kmemcheck.
 

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: mm/slab.c:4509:
+void check_slab_write(void *ptr, unsigned int sz, int type,
+		const char *location)

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: mm/slab.c:4517:
+	int objnr, size, i = 0, count, free_count = 0;
+	page = virt_to_page(ptr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#342: FILE: mm/slab.c:4522:
+		objnr = (unsigned)(ptr - slabp->s_mem) / cachep->buffer_size;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#356: FILE: mm/slab.c:4536:
+			printk(KERN_ERR "ptr: %p, sz: %d, location: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: mm/slab.c:4537:
+			printk(KERN_ERR "ptr: %p, sz: %d, location: %s\n",
+					ptr, sz, location);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#358: FILE: mm/slab.c:4538:
+			printk(KERN_ERR "write to freed object, size %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: mm/slab.c:4539:
+			printk(KERN_ERR "write to freed object, size %d\n",
+					size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#362: FILE: mm/slab.c:4542:
+				printk(KERN_ERR "%x", realobj[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#365: FILE: mm/slab.c:4545:
+			printk(KERN_ERR "%x\n", realobj[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#367: FILE: mm/slab.c:4547:
+				printk(KERN_ERR "Last user: [<%p>]",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: mm/slab.c:4548:
+				printk(KERN_ERR "Last user: [<%p>]",
+						*dbg_userword(cachep, objp));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: mm/slab.c:4550:
+				print_symbol("(%s)",
+				    (unsigned long)*dbg_userword(cachep, objp));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#371: FILE: mm/slab.c:4551:
+				printk("\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098270.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 20 warnings, 7 checks, 275 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098270.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
