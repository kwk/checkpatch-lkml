WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
perf_counter tools:  Add infrastructure to support loading of kernel module symbols.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: tools/perf/util/module.h:1:
+#ifndef _PERF_MODULE_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sec_dso *' should also have an identifier name
#93: FILE: tools/perf/util/module.h:20:
+	struct section    *(*find_section)(struct sec_dso *, const char *name);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mod_dso *' should also have an identifier name
#109: FILE: tools/perf/util/module.h:36:
+	struct module    *(*find_module)(struct mod_dso *, const char *name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: tools/perf/util/module.c:1:
+#include "util.h"

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: tools/perf/util/module.c:16:
+	unsigned int crc = 0;
+	while (len--) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#161: FILE: tools/perf/util/module.c:30:
+	if (self != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#201: FILE: tools/perf/util/module.c:70:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#219: FILE: tools/perf/util/module.c:88:
+	if (self == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#230: FILE: tools/perf/util/module.c:99:
+		if (hash < s->hash)
[...]
+		else if (hash > s->hash)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#234: FILE: tools/perf/util/module.c:103:
+		else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#237: FILE: tools/perf/util/module.c:106:
+				return s;
+			else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#255: FILE: tools/perf/util/module.c:124:
+	struct rb_node *nd;
 	                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#256: FILE: tools/perf/util/module.c:125:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#256: FILE: tools/perf/util/module.c:125:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#256: FILE: tools/perf/util/module.c:125:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#256: FILE: tools/perf/util/module.c:125:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#256: FILE: tools/perf/util/module.c:125:
+	struct rb_node *nd;
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#257: FILE: tools/perf/util/module.c:126:
+		struct section *pos = rb_entry(nd, struct section, rb_node);
 		                               ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: tools/perf/util/module.c:127:
+		struct section *pos = rb_entry(nd, struct section, rb_node);
+		ret += sec_dso__fprintf_section(pos, fp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#288: FILE: tools/perf/util/module.c:157:
+			free (self->name);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#290: FILE: tools/perf/util/module.c:159:
+			free (self->path);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#291: FILE: tools/perf/util/module.c:160:
+		free (self);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#303: FILE: tools/perf/util/module.c:172:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#343: FILE: tools/perf/util/module.c:212:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#361: FILE: tools/perf/util/module.c:230:
+	if (self == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#372: FILE: tools/perf/util/module.c:241:
+		if (hash < m->hash)
[...]
+		else if (hash > m->hash)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#376: FILE: tools/perf/util/module.c:245:
+		else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#379: FILE: tools/perf/util/module.c:248:
+				return m;
+			else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#396: FILE: tools/perf/util/module.c:265:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#397: FILE: tools/perf/util/module.c:266:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#397: FILE: tools/perf/util/module.c:266:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#397: FILE: tools/perf/util/module.c:266:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#397: FILE: tools/perf/util/module.c:266:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#397: FILE: tools/perf/util/module.c:266:
+	struct rb_node *nd;
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#398: FILE: tools/perf/util/module.c:267:
+		struct module *pos = rb_entry(nd, struct module, rb_node);
 		                              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: tools/perf/util/module.c:268:
+		struct module *pos = rb_entry(nd, struct module, rb_node);
+		ret += mod_dso__fprintf_module(pos, fp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#429: FILE: tools/perf/util/module.c:298:
+			free (self->name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#431: FILE: tools/perf/util/module.c:300:
+			free (self->path);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#432: FILE: tools/perf/util/module.c:301:
+		free (self);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir_path"
#452: FILE: tools/perf/util/module.c:321:
+	if (dir_path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#460: FILE: tools/perf/util/module.c:329:
+	if (dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#473: FILE: tools/perf/util/module.c:342:
+		if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#479: FILE: tools/perf/util/module.c:348:
+		if (file == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: tools/perf/util/module.c:368:
+                vma = strstr(line, "0x");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: tools/perf/util/module.c:368:
+                vma = strstr(line, "0x");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: tools/perf/util/module.c:369:
+                if (!vma) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: tools/perf/util/module.c:369:
+                if (!vma) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#503: FILE: tools/perf/util/module.c:372:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: tools/perf/util/module.c:372:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: tools/perf/util/module.c:374:
+                vma += 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: tools/perf/util/module.c:374:
+                vma += 2;$

ERROR:SPACING: space required before the open parenthesis '('
#545: FILE: tools/perf/util/module.c:414:
+	if(uname(&uts) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#553: FILE: tools/perf/util/module.c:422:
+	if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#562: FILE: tools/perf/util/module.c:431:
+	if (file == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#584: FILE: tools/perf/util/module.c:453:
+		name = tmp = strtok(name, "/");

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#585: FILE: tools/perf/util/module.c:454:
+		while(tmp) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#594: FILE: tools/perf/util/module.c:463:
+			if (*(name+len) == '-')
 			          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#595: FILE: tools/perf/util/module.c:464:
+				*(name+len) = '_';
 				      ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 34 warnings, 19 checks, 569 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
