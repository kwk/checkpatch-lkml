WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
Lock hold-time is the duration the lock was held, this provides a reference for

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: kernel/lockdep.c:2390:
+print_lock_contention_bug(struct task_struct *curr, struct lockdep_map *lock,
+			   unsigned long ip)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: kernel/lockdep.c:2397:
+	printk("\n=================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#290: FILE: kernel/lockdep.c:2398:
+	printk(  "[ BUG: bad contention detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#290: FILE: kernel/lockdep.c:2398:
+	printk(  "[ BUG: bad contention detected! ]\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#291: FILE: kernel/lockdep.c:2399:
+	printk(  "---------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#291: FILE: kernel/lockdep.c:2399:
+	printk(  "---------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#292: FILE: kernel/lockdep.c:2400:
+	printk("%s/%d is trying to contend lock (",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: kernel/lockdep.c:2401:
+	printk("%s/%d is trying to contend lock (",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#295: FILE: kernel/lockdep.c:2403:
+	printk(") at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: kernel/lockdep.c:2405:
+	printk("but there are no locks held!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: kernel/lockdep.c:2406:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#301: FILE: kernel/lockdep.c:2409:
+	printk("\nstack backtrace:\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#381: FILE: kernel/lockdep.c:2601:
+	for (i = depth-1; i >= 0; i--) {
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#421: FILE: kernel/lockdep.c:2641:
+	for (i = depth-1; i >= 0; i--) {
 	              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#575: FILE: include/linux/lockdep.h:191:
+^Iunsigned long long ^I^Iwaittime_stamp;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#587: FILE: include/linux/lockdep.h:312:
+extern void lock_contended(struct lockdep_map *lock, unsigned long ip);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#588: FILE: include/linux/lockdep.h:313:
+extern void lock_acquired(struct lockdep_map *lock);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_lock' - possible side-effects?
#590: FILE: include/linux/lockdep.h:315:
+#define LOCK_CONTENDED(_lock, try, lock)			\
+do {								\
+	if (!try(_lock)) {					\
+		lock_contended(&(_lock)->dep_map, _RET_IP_);	\
+		lock(_lock);					\
+		lock_acquired(&(_lock)->dep_map);		\
+	}							\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'try' may be better as '(try)' to avoid precedence issues
#590: FILE: include/linux/lockdep.h:315:
+#define LOCK_CONTENDED(_lock, try, lock)			\
+do {								\
+	if (!try(_lock)) {					\
+		lock_contended(&(_lock)->dep_map, _RET_IP_);	\
+		lock(_lock);					\
+		lock_acquired(&(_lock)->dep_map);		\
+	}							\
+} while (0)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#620: FILE: lib/Kconfig.debug:276:
+config LOCK_STAT
+	bool "Lock usage statisitics"
+	depends on DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT
+	select LOCKDEP
+	select DEBUG_SPINLOCK
+	select DEBUG_MUTEXES
+	select DEBUG_LOCK_ALLOC
+	default n
+	help
+	 This feature enables tracking lock contention points
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'statisitics' may be misspelled - perhaps 'statistics'?
#621: FILE: lib/Kconfig.debug:277:
+	bool "Lock usage statisitics"
 	                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dependancy' may be misspelled - perhaps 'dependency'?
#688: FILE: include/linux/sysctl.h:169:
+	KERN_PROVE_LOCKING=78, /* int: enable lock dependancy checking */
 	                                           ^^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#688: FILE: include/linux/sysctl.h:169:
+	KERN_PROVE_LOCKING=78, /* int: enable lock dependancy checking */
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#689: FILE: include/linux/sysctl.h:170:
+	KERN_LOCK_STAT=79, /* int: enable lock statistics */
 	              ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 13 warnings, 8 checks, 542 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
