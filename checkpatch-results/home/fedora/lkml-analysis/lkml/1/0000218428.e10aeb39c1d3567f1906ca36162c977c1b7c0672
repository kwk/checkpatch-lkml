WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#82: 
 drivers/ide/ide-floppy.c       |  668 +++++++---------------------------------

WARNING:TYPO_SPELLING: 'an union' may be misspelled - perhaps 'a union'?
#156: 
      ide: make drive->id an union (take 2)
                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/block/hd.c:636:
+			hd_out(disk, nsect, sec, head, cyl, ATA_CMD_PIO_READ,
 				&read_intr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/block/hd.c:642:
+			hd_out(disk, nsect, sec, head, cyl, ATA_CMD_PIO_WRITE,
 				&write_intr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#481: FILE: drivers/ide/ide-atapi.c:43:
+		printk(KERN_ERR "%s: %s: protocol (0x%02x) is not ATAPI\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: drivers/ide/ide-atapi.c:44:
+		printk(KERN_ERR "%s: %s: protocol (0x%02x) is not ATAPI\n",
+			s, drive->name, protocol);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#485: FILE: drivers/ide/ide-atapi.c:47:
+		printk(KERN_ERR "%s: %s: invalid device type (0x%02x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: drivers/ide/ide-atapi.c:48:
+		printk(KERN_ERR "%s: %s: invalid device type (0x%02x)\n",
+			s, drive->name, device_type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#488: FILE: drivers/ide/ide-atapi.c:50:
+		printk(KERN_ERR "%s: %s: the removable flag is not set\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/ide/ide-atapi.c:51:
+		printk(KERN_ERR "%s: %s: the removable flag is not set\n",
+			s, drive->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: drivers/ide/ide-atapi.c:53:
+		printk(KERN_ERR "%s: %s: sorry, DRQ type (0x%02x) not "

WARNING:SPLIT_STRING: quoted string split across lines
#492: FILE: drivers/ide/ide-atapi.c:54:
+		printk(KERN_ERR "%s: %s: sorry, DRQ type (0x%02x) not "
+			"supported\n", s, drive->name, drq_type);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#494: FILE: drivers/ide/ide-atapi.c:56:
+		printk(KERN_ERR "%s: %s: packet size (0x%02x) is not 12 "

WARNING:SPLIT_STRING: quoted string split across lines
#495: FILE: drivers/ide/ide-atapi.c:57:
+		printk(KERN_ERR "%s: %s: packet size (0x%02x) is not 12 "
+			"bytes\n", s, drive->name, packet_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: drivers/ide/ide-atapi.c:66:
+int ide_io_buffers(ide_drive_t *drive, struct ide_atapi_pc *pc,
+		    unsigned int bcount, int write)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#536: FILE: drivers/ide/ide-atapi.c:98:
+			pc->sg = sg = sg_next(sg);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#542: FILE: drivers/ide/ide-atapi.c:104:
+		printk(KERN_ERR "%s: %d leftover bytes, %s\n", drive->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/ide/ide-atapi.c:105:
+		printk(KERN_ERR "%s: %d leftover bytes, %s\n", drive->name,
+			bcount, write ? "padding with zeros"

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#650: FILE: drivers/ide/ide-atapi.c:211:
+	int (*io_buffers)(ide_drive_t *, struct ide_atapi_pc *, unsigned, int))

CHECK:BRACES: Unbalanced braces around else statement
#732: FILE: drivers/ide/ide-atapi.c:371:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: drivers/ide/ide-atapi.c:404:
+	while (retries-- && ((ireason & ATAPI_COD) == 0 ||
+		(ireason & ATAPI_IO))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#880: FILE: drivers/ide/ide-cd.c:1184:
+		if ((unsigned long)buf & alignment || rq->data_len & alignment
+		    || object_is_on_stack(buf))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1545: FILE: drivers/ide/ide-disk.c:823:
+		printk(KERN_CONT " w/%dKiB Cache", id[ATA_ID_BUF_SIZE] / 2);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1545: FILE: drivers/ide/ide-disk.c:823:
+		printk(KERN_CONT " w/%dKiB Cache", id[ATA_ID_BUF_SIZE] / 2);

WARNING:TYPO_SPELLING: 'Clik' may be misspelled - perhaps 'Click'?
#2634: FILE: drivers/ide/ide-floppy.c:691:
+	if (strncmp((char *)&id[ATA_ID_PROD], "IOMEGA Clik!", 11) == 0) {
 	                                              ^^^^

WARNING:TYPO_SPELLING: 'Clik' may be misspelled - perhaps 'Click'?
#2637: FILE: drivers/ide/ide-floppy.c:694:
+		/* IOMEGA Clik! drives do not support lock/unlock commands */
 		          ^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#2882: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2887: FILE: drivers/ide/ide-floppy.h:1:
+#ifndef __IDE_FLOPPY_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2895: FILE: drivers/ide/ide-floppy.h:9:
+typedef struct ide_floppy_obj {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#2941: FILE: drivers/ide/ide-floppy.h:55:
+void ide_floppy_create_mode_sense_cmd(struct ide_atapi_pc *, u8);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#2941: FILE: drivers/ide/ide-floppy.h:55:
+void ide_floppy_create_mode_sense_cmd(struct ide_atapi_pc *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#2942: FILE: drivers/ide/ide-floppy.h:56:
+void ide_floppy_create_read_capacity_cmd(struct ide_atapi_pc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#2943: FILE: drivers/ide/ide-floppy.h:57:
+void ide_floppy_create_request_sense_cmd(struct ide_atapi_pc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#2946: FILE: drivers/ide/ide-floppy.h:60:
+int ide_floppy_format_ioctl(ide_drive_t *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2946: FILE: drivers/ide/ide-floppy.h:60:
+int ide_floppy_format_ioctl(ide_drive_t *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2946: FILE: drivers/ide/ide-floppy.h:60:
+int ide_floppy_format_ioctl(ide_drive_t *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#2946: FILE: drivers/ide/ide-floppy.h:60:
+int ide_floppy_format_ioctl(ide_drive_t *, struct file *, unsigned int,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2956: FILE: drivers/ide/ide-floppy_ioctl.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3005: FILE: drivers/ide/ide-floppy_ioctl.c:50:
+		printk(KERN_ERR "ide-floppy: Can't get floppy parameters\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3021: FILE: drivers/ide/ide-floppy_ioctl.c:66:
+		unsigned int desc_start = 4 + i*8;
 		                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3049: FILE: drivers/ide/ide-floppy_ioctl.c:94:
+static void ide_floppy_create_format_unit_cmd(struct ide_atapi_pc *pc, int b,
+		int l, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3118: FILE: drivers/ide/ide-floppy_ioctl.c:163:
+	if (get_user(blocks, arg) ||
+			get_user(length, arg+1) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3118: FILE: drivers/ide/ide-floppy_ioctl.c:163:
+			get_user(length, arg+1) ||
 			                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3119: FILE: drivers/ide/ide-floppy_ioctl.c:164:
+			get_user(flags, arg+2)) {
 			                   ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3230: FILE: drivers/ide/ide-generic.c:110:
+	for_each_pci_dev(p) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3245: FILE: drivers/ide/ide-generic.c:125:
+		    p->device == PCI_DEVICE_ID_INTEL_82371MX) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3275: FILE: drivers/ide/ide-generic.c:152:
+		printk(KERN_INFO DRV_NAME ": please use \"probe_mask=0x3f\" "

WARNING:SPLIT_STRING: quoted string split across lines
#3276: FILE: drivers/ide/ide-generic.c:153:
+		printk(KERN_INFO DRV_NAME ": please use \"probe_mask=0x3f\" "
+		     "module parameter for probing all legacy ISA IDE ports\n");

CHECK:BRACES: Unbalanced braces around else statement
#3283: FILE: drivers/ide/ide-generic.c:160:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3284: FILE: drivers/ide/ide-generic.c:161:
+		printk(KERN_INFO DRV_NAME ": enforcing probing of I/O ports "

WARNING:SPLIT_STRING: quoted string split across lines
#3285: FILE: drivers/ide/ide-generic.c:162:
+		printk(KERN_INFO DRV_NAME ": enforcing probing of I/O ports "
+			"upon user request\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3574: FILE: drivers/ide/ide-ioctls.c:1:
+/*

CHECK:BRACES: braces {} should be used on all arms of this statement
#3616: FILE: drivers/ide/ide-ioctls.c:43:
+	if (bdev != bdev->bd_contains)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3618: FILE: drivers/ide/ide-ioctls.c:45:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3619: FILE: drivers/ide/ide-ioctls.c:46:
+		if (!capable(CAP_SYS_ADMIN))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3621: FILE: drivers/ide/ide-ioctls.c:48:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#3644: FILE: drivers/ide/ide-ioctls.c:71:
+	if (id == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3682: FILE: drivers/ide/ide-ioctls.c:109:
+static int ide_cmd_ioctl(ide_drive_t *drive, unsigned cmd, unsigned long arg)

CHECK:SPACING: No space is necessary after a cast
#3691: FILE: drivers/ide/ide-ioctls.c:118:
+	if (NULL == (void *) arg) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#3725: FILE: drivers/ide/ide-ioctls.c:152:
+		if (buf == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3737: FILE: drivers/ide/ide-ioctls.c:164:
+			printk(KERN_WARNING "%s: UDMA speeds >UDMA33 cannot "

WARNING:SPLIT_STRING: quoted string split across lines
#3738: FILE: drivers/ide/ide-ioctls.c:165:
+			printk(KERN_WARNING "%s: UDMA speeds >UDMA33 cannot "
+					    "be set\n", drive->name);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3765: FILE: drivers/ide/ide-ioctls.c:192:
+static int ide_task_ioctl(ide_drive_t *drive, unsigned cmd, unsigned long arg)

CHECK:SPACING: No space is necessary after a cast
#3996: FILE: drivers/ide/ide-iops.c:430:
+			be16_to_cpus((u16 *) p);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4364: FILE: drivers/ide/ide-lib.c:342:
+	if (err & ATA_ABORTED)	printk("DriveStatusError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4364: FILE: drivers/ide/ide-lib.c:342:
+	if (err & ATA_ABORTED)	printk("DriveStatusError ");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4366: FILE: drivers/ide/ide-lib.c:344:
+		printk((err & ATA_ABORTED) ? "BadCRC " : "BadSector ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4367: FILE: drivers/ide/ide-lib.c:345:
+	if (err & ATA_UNC)	printk("UncorrectableError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4367: FILE: drivers/ide/ide-lib.c:345:
+	if (err & ATA_UNC)	printk("UncorrectableError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4368: FILE: drivers/ide/ide-lib.c:346:
+	if (err & ATA_IDNF)	printk("SectorIdNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4368: FILE: drivers/ide/ide-lib.c:346:
+	if (err & ATA_IDNF)	printk("SectorIdNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4369: FILE: drivers/ide/ide-lib.c:347:
+	if (err & ATA_TRK0NF)	printk("TrackZeroNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4369: FILE: drivers/ide/ide-lib.c:347:
+	if (err & ATA_TRK0NF)	printk("TrackZeroNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4370: FILE: drivers/ide/ide-lib.c:348:
+	if (err & ATA_AMNF)	printk("AddrMarkNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4370: FILE: drivers/ide/ide-lib.c:348:
+	if (err & ATA_AMNF)	printk("AddrMarkNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4389: FILE: drivers/ide/ide-lib.c:363:
+	if (err & ATAPI_ILI)	printk("IllegalLengthIndication ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4389: FILE: drivers/ide/ide-lib.c:363:
+	if (err & ATAPI_ILI)	printk("IllegalLengthIndication ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4390: FILE: drivers/ide/ide-lib.c:364:
+	if (err & ATAPI_EOM)	printk("EndOfMedia ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4390: FILE: drivers/ide/ide-lib.c:364:
+	if (err & ATAPI_EOM)	printk("EndOfMedia ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4391: FILE: drivers/ide/ide-lib.c:365:
+	if (err & ATA_ABORTED)	printk("AbortedCommand ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4391: FILE: drivers/ide/ide-lib.c:365:
+	if (err & ATA_ABORTED)	printk("AbortedCommand ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4392: FILE: drivers/ide/ide-lib.c:366:
+	if (err & ATA_MCR)	printk("MediaChangeRequested ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4392: FILE: drivers/ide/ide-lib.c:366:
+	if (err & ATA_MCR)	printk("MediaChangeRequested ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4393: FILE: drivers/ide/ide-lib.c:367:
+	if (err & ATAPI_LFS)	printk("LastFailedSense=0x%02x ",

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4393: FILE: drivers/ide/ide-lib.c:367:
+	if (err & ATAPI_LFS)	printk("LastFailedSense=0x%02x ",

CHECK:BRACES: braces {} should be used on all arms of this statement
#4403: FILE: drivers/ide/ide-lib.c:390:
+	if (stat & ATA_BUSY)
[...]
 	else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4413: FILE: drivers/ide/ide-lib.c:393:
+		if (stat & ATA_DRDY)	printk("DriveReady ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4413: FILE: drivers/ide/ide-lib.c:393:
+		if (stat & ATA_DRDY)	printk("DriveReady ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4414: FILE: drivers/ide/ide-lib.c:394:
+		if (stat & ATA_DF)	printk("DeviceFault ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4414: FILE: drivers/ide/ide-lib.c:394:
+		if (stat & ATA_DF)	printk("DeviceFault ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4415: FILE: drivers/ide/ide-lib.c:395:
+		if (stat & ATA_DSC)	printk("SeekComplete ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4415: FILE: drivers/ide/ide-lib.c:395:
+		if (stat & ATA_DSC)	printk("SeekComplete ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4416: FILE: drivers/ide/ide-lib.c:396:
+		if (stat & ATA_DRQ)	printk("DataRequest ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4416: FILE: drivers/ide/ide-lib.c:396:
+		if (stat & ATA_DRQ)	printk("DataRequest ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4417: FILE: drivers/ide/ide-lib.c:397:
+		if (stat & ATA_CORR)	printk("CorrectedError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4417: FILE: drivers/ide/ide-lib.c:397:
+		if (stat & ATA_CORR)	printk("CorrectedError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4418: FILE: drivers/ide/ide-lib.c:398:
+		if (stat & ATA_IDX)	printk("Index ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4418: FILE: drivers/ide/ide-lib.c:398:
+		if (stat & ATA_IDX)	printk("Index ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4419: FILE: drivers/ide/ide-lib.c:399:
+		if (stat & ATA_ERR)	printk("Error ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4419: FILE: drivers/ide/ide-lib.c:399:
+		if (stat & ATA_ERR)	printk("Error ");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4443: FILE: drivers/ide/ide-probe.c:55:
+	id[ATA_ID_CUR_CYLS]	= id[ATA_ID_CYLS]	= drive->cyl;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4444: FILE: drivers/ide/ide-probe.c:56:
+	id[ATA_ID_CUR_HEADS]	= id[ATA_ID_HEADS]	= drive->head;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4445: FILE: drivers/ide/ide-probe.c:57:
+	id[ATA_ID_CUR_SECTORS]	= id[ATA_ID_SECTORS]	= drive->sect;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4458: FILE: drivers/ide/ide-probe.c:66:
+		drive->cyl  = drive->bios_cyl  = id[ATA_ID_CYLS];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4459: FILE: drivers/ide/ide-probe.c:67:
+		drive->head = drive->bios_head = id[ATA_ID_HEADS];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4460: FILE: drivers/ide/ide-probe.c:68:
+		drive->sect = drive->bios_sect = id[ATA_ID_SECTORS];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4572: FILE: drivers/ide/ide-probe.c:154:
+	printk(KERN_INFO "%s: %s, ", drive->name, m);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#4628: FILE: drivers/ide/ide-probe.c:223:
+	printk(KERN_CONT "%s DISK drive\n", is_cfa ? "CFA" : "ATA");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#4628: FILE: drivers/ide/ide-probe.c:223:
+	printk(KERN_CONT "%s DISK drive\n", is_cfa ? "CFA" : "ATA");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4772: FILE: drivers/ide/ide-probe.c:515:
+	printk(KERN_INFO "%s: enabling %s -- ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4773: FILE: drivers/ide/ide-probe.c:516:
+	printk(KERN_INFO "%s: enabling %s -- ",
+		hwif->name, (char *)&drive->id[ATA_ID_PROD]);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5201: FILE: drivers/ide/ide-proc.c:197:
+	if ((ds->flags & DS_SYNC)
+	    && (val < setting->min || val > setting->max))

CHECK:BRACES: braces {} should be used on all arms of this statement
#5305: FILE: drivers/ide/ide-proc.c:276:
+		if (g->name && d && d->name) {
[...]
+		} else if (d && d->name) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5312: FILE: drivers/ide/ide-proc.c:283:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5649: FILE: drivers/ide/ide-tape.c:638:
+static int ide_tape_io_buffers(ide_drive_t *drive, struct ide_atapi_pc *pc,
 				unsigned int bcount, int write)

WARNING:SPLIT_STRING: quoted string split across lines
#5722: FILE: drivers/ide/ide-tape.c:852:
+	debug_log(DBG_SENSE, "sector: %llu, nr_sectors: %lu,"
+			" current_nr_sectors: %u\n",

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#6243: FILE: drivers/ide/ide-tape.c:2176:
+#define ide_tape_devset_get(name, field) \
+static int get_##name(ide_drive_t *drive) \
+{ \
+	idetape_tape_t *tape = drive->driver_data; \
+	return tape->field; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#6250: FILE: drivers/ide/ide-tape.c:2183:
+#define ide_tape_devset_set(name, field) \
+static int set_##name(ide_drive_t *drive, int arg) \
+{ \
+	idetape_tape_t *tape = drive->driver_data; \
+	tape->field = arg; \
+	return 0; \
+}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#6258: FILE: drivers/ide/ide-tape.c:2191:
+#define ide_tape_devset_rw_field(_name, _field) \
+ide_tape_devset_get(_name, _field) \
+ide_tape_devset_set(_name, _field) \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#6258: FILE: drivers/ide/ide-tape.c:2191:
+#define ide_tape_devset_rw_field(_name, _field) \
+ide_tape_devset_get(_name, _field) \
+ide_tape_devset_set(_name, _field) \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_field' - possible side-effects?
#6258: FILE: drivers/ide/ide-tape.c:2191:
+#define ide_tape_devset_rw_field(_name, _field) \
+ide_tape_devset_get(_name, _field) \
+ide_tape_devset_set(_name, _field) \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#6263: FILE: drivers/ide/ide-tape.c:2196:
+#define ide_tape_devset_r_field(_name, _field) \
+ide_tape_devset_get(_name, _field) \
+IDE_DEVSET(_name, 0, get_##_name, NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#6263: FILE: drivers/ide/ide-tape.c:2196:
+#define ide_tape_devset_r_field(_name, _field) \
+ide_tape_devset_get(_name, _field) \
+IDE_DEVSET(_name, 0, get_##_name, NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6290: FILE: drivers/ide/ide-tape.c:2223:
+	__IDE_PROC_DEVSET(tdsc,		IDETAPE_DSC_RW_MIN, IDETAPE_DSC_RW_MAX,
+					mulf_tdsc, divf_tdsc),

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#6694: FILE: drivers/ide/ide-timings.c:163:
+			p.cycle = p.cyc8b = id[ATA_ID_EIDE_PIO];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#6697: FILE: drivers/ide/ide-timings.c:165:
+			p.cycle = p.cyc8b = id[ATA_ID_EIDE_PIO_IORDY];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drive->hwif->dma_ops"
#6834: FILE: drivers/ide/ide.c:293:
+	if (drive->hwif->dma_ops == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7082: FILE: drivers/ide/ide.c:729:
+		printk(KERN_INFO "ide: ignoring the ATA_DF bit for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7083: FILE: drivers/ide/ide.c:730:
+		printk(KERN_INFO "ide: ignoring the ATA_DF bit for %s\n",
 				 drive->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mate"
#7557: FILE: drivers/ide/pci/cs5530.c:87:
+	if (mate == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#7795: FILE: drivers/ide/pci/hpt366.c:987:
+	if (chip_type >= HPT374)
[...]
+	else if (chip_type >= HPT370) {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7805: FILE: drivers/ide/pci/hpt366.c:997:
+	} else					/* HPT366 and HPT368  */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#7866: FILE: drivers/ide/pci/hpt366.c:1323:
 static int __devinit init_dma_hpt366(ide_hwif_t *hwif,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#7946: FILE: drivers/ide/pci/it821x.c:480:
+				printk(KERN_CONT "(%dK stripe)", id[146]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#7946: FILE: drivers/ide/pci/it821x.c:480:
+				printk(KERN_CONT "(%dK stripe)", id[146]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#7947: FILE: drivers/ide/pci/it821x.c:481:
+			printk(KERN_CONT ".\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#7947: FILE: drivers/ide/pci/it821x.c:481:
+			printk(KERN_CONT ".\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#8131: FILE: drivers/ide/pci/pdc202xx_new.c:208:
+		if (strstr(m, *list) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#8210: FILE: drivers/ide/pci/pdc202xx_old.c:159:
+		if (strstr(m, *list) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mate"
#8297: FILE: drivers/ide/pci/sc1200.c:110:
+	if (mate == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8453: FILE: drivers/ide/pci/siimage.c:621:
+	unsigned len	= strnlen(s, ATA_ID_PROD_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <cycleTime>
#8660: FILE: drivers/ide/ppc/pmac.c:690:
+		cycleTime = max_t(int, id[ATA_ID_EIDE_DMA_TIME], cycleTime);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#8808: FILE: drivers/scsi/ide-scsi.c:388:
+#define ide_scsi_devset_get(name, field) \
+static int get_##name(ide_drive_t *drive) \
+{ \
+	idescsi_scsi_t *scsi = drive_to_idescsi(drive); \
+	return scsi->field; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#8815: FILE: drivers/scsi/ide-scsi.c:395:
+#define ide_scsi_devset_set(name, field) \
+static int set_##name(ide_drive_t *drive, int arg) \
+{ \
+	idescsi_scsi_t *scsi = drive_to_idescsi(drive); \
+	scsi->field = arg; \
+	return 0; \
+}

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#8823: FILE: drivers/scsi/ide-scsi.c:403:
+#define ide_scsi_devset_rw_field(_name, _field) \
+ide_scsi_devset_get(_name, _field); \
+ide_scsi_devset_set(_name, _field); \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#8823: FILE: drivers/scsi/ide-scsi.c:403:
+#define ide_scsi_devset_rw_field(_name, _field) \
+ide_scsi_devset_get(_name, _field); \
+ide_scsi_devset_set(_name, _field); \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_field' - possible side-effects?
#8823: FILE: drivers/scsi/ide-scsi.c:403:
+#define ide_scsi_devset_rw_field(_name, _field) \
+ide_scsi_devset_get(_name, _field); \
+ide_scsi_devset_set(_name, _field); \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#8823: FILE: drivers/scsi/ide-scsi.c:403:
+#define ide_scsi_devset_rw_field(_name, _field) \
+ide_scsi_devset_get(_name, _field); \
+ide_scsi_devset_set(_name, _field); \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#9039: FILE: include/linux/ata.h:819:
+	if (lba_sects - chs_sects < chs_sects/10)
 	                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#9047: FILE: include/linux/ata.h:827:
+	if (lba_sects - chs_sects < chs_sects/10) {
 	                                     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#9320: FILE: include/linux/ide.h:663:
+	unsigned int	(*init_chipset)(struct pci_dev *);

CHECK:BIT_MACRO: Prefer using the BIT macro
#9335: FILE: include/linux/ide.h:715:
+#define DS_SYNC	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9338: FILE: include/linux/ide.h:718:
+	int		(*get)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9339: FILE: include/linux/ide.h:719:
+	int		(*set)(ide_drive_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#9339: FILE: include/linux/ide.h:719:
+	int		(*set)(ide_drive_t *, int);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#9349: FILE: include/linux/ide.h:729:
+#define ide_devset_get(name, field) \
+static int get_##name(ide_drive_t *drive) \
+{ \
+	return drive->field; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#9355: FILE: include/linux/ide.h:735:
+#define ide_devset_set(name, field) \
+static int set_##name(ide_drive_t *drive, int arg) \
+{ \
+	drive->field = arg; \
+	return 0; \
+}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#9366: FILE: include/linux/ide.h:746:
+#define IDE_DEVSET(_name, _flags, _get, _set) \
+static __IDE_DEVSET(_name, _flags, _get, _set)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#9422: FILE: include/linux/ide.h:837:
+#define ide_devset_rw_field(_name, _field) \
+ide_devset_get(_name, _field); \
+ide_devset_set(_name, _field); \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#9422: FILE: include/linux/ide.h:837:
+#define ide_devset_rw_field(_name, _field) \
+ide_devset_get(_name, _field); \
+ide_devset_set(_name, _field); \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_field' - possible side-effects?
#9422: FILE: include/linux/ide.h:837:
+#define ide_devset_rw_field(_name, _field) \
+ide_devset_get(_name, _field); \
+ide_devset_set(_name, _field); \
+IDE_DEVSET(_name, DS_SYNC, get_##_name, set_##_name)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9431: FILE: include/linux/ide.h:846:
+	int			(*mulf)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9432: FILE: include/linux/ide.h:847:
+	int			(*divf)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9518: FILE: include/linux/ide.h:975:
+int ide_setting_ioctl(ide_drive_t *, struct block_device *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#9518: FILE: include/linux/ide.h:975:
+int ide_setting_ioctl(ide_drive_t *, struct block_device *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#9518: FILE: include/linux/ide.h:975:
+int ide_setting_ioctl(ide_drive_t *, struct block_device *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#9518: FILE: include/linux/ide.h:975:
+int ide_setting_ioctl(ide_drive_t *, struct block_device *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct ide_ioctl_devset *' should also have an identifier name
#9518: FILE: include/linux/ide.h:975:
+int ide_setting_ioctl(ide_drive_t *, struct block_device *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9521: FILE: include/linux/ide.h:978:
+int generic_ide_ioctl(ide_drive_t *, struct file *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#9521: FILE: include/linux/ide.h:978:
+int generic_ide_ioctl(ide_drive_t *, struct file *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#9521: FILE: include/linux/ide.h:978:
+int generic_ide_ioctl(ide_drive_t *, struct file *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#9521: FILE: include/linux/ide.h:978:
+int generic_ide_ioctl(ide_drive_t *, struct file *, struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#9521: FILE: include/linux/ide.h:978:
+int generic_ide_ioctl(ide_drive_t *, struct file *, struct block_device *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9522: FILE: include/linux/ide.h:979:
+		      unsigned, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16 *' should also have an identifier name
#9531: FILE: include/linux/ide.h:1001:
+void ide_fix_driveid(u16 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_hwif_t *' should also have an identifier name
#9535: FILE: include/linux/ide.h:1005:
+int ide_busy_sleep(ide_hwif_t *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#9535: FILE: include/linux/ide.h:1005:
+int ide_busy_sleep(ide_hwif_t *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#9535: FILE: include/linux/ide.h:1005:
+int ide_busy_sleep(ide_hwif_t *, unsigned long, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9541: FILE: include/linux/ide.h:1011:
+extern int ide_devset_execute(ide_drive_t *drive,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9551: FILE: include/linux/ide.h:1137:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#9551: FILE: include/linux/ide.h:1137:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#9551: FILE: include/linux/ide.h:1137:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#9551: FILE: include/linux/ide.h:1137:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9560: FILE: include/linux/ide.h:1149:
+int ide_check_atapi_device(ide_drive_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#9560: FILE: include/linux/ide.h:1149:
+int ide_check_atapi_device(ide_drive_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#9562: FILE: include/linux/ide.h:1151:
+void ide_init_pc(struct ide_atapi_pc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9577: FILE: include/linux/ide.h:1166:
+void ide_queue_pc_head(ide_drive_t *, struct gendisk *, struct ide_atapi_pc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#9577: FILE: include/linux/ide.h:1166:
+void ide_queue_pc_head(ide_drive_t *, struct gendisk *, struct ide_atapi_pc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#9577: FILE: include/linux/ide.h:1166:
+void ide_queue_pc_head(ide_drive_t *, struct gendisk *, struct ide_atapi_pc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#9577: FILE: include/linux/ide.h:1166:
+void ide_queue_pc_head(ide_drive_t *, struct gendisk *, struct ide_atapi_pc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9579: FILE: include/linux/ide.h:1168:
+int ide_queue_pc_tail(ide_drive_t *, struct gendisk *, struct ide_atapi_pc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#9579: FILE: include/linux/ide.h:1168:
+int ide_queue_pc_tail(ide_drive_t *, struct gendisk *, struct ide_atapi_pc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#9579: FILE: include/linux/ide.h:1168:
+int ide_queue_pc_tail(ide_drive_t *, struct gendisk *, struct ide_atapi_pc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9581: FILE: include/linux/ide.h:1170:
+int ide_do_test_unit_ready(ide_drive_t *, struct gendisk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#9581: FILE: include/linux/ide.h:1170:
+int ide_do_test_unit_ready(ide_drive_t *, struct gendisk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9582: FILE: include/linux/ide.h:1171:
+int ide_do_start_stop(ide_drive_t *, struct gendisk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#9582: FILE: include/linux/ide.h:1171:
+int ide_do_start_stop(ide_drive_t *, struct gendisk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#9582: FILE: include/linux/ide.h:1171:
+int ide_do_start_stop(ide_drive_t *, struct gendisk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#9583: FILE: include/linux/ide.h:1172:
+int ide_set_media_lock(ide_drive_t *, struct gendisk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#9583: FILE: include/linux/ide.h:1172:
+int ide_set_media_lock(ide_drive_t *, struct gendisk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#9583: FILE: include/linux/ide.h:1172:
+int ide_set_media_lock(ide_drive_t *, struct gendisk *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9591: FILE: include/linux/ide.h:1179:
+	int (*io_buffers)(ide_drive_t *, struct ide_atapi_pc *, unsigned int,
 			   int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#9617: FILE: include/linux/ide.h:1341:
+int ide_pci_resume(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16 *' should also have an identifier name
#9631: FILE: include/linux/ide.h:1358:
+int ide_in_drive_list(u16 *, const struct drive_list_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct drive_list_entry *' should also have an identifier name
#9631: FILE: include/linux/ide.h:1358:
+int ide_in_drive_list(u16 *, const struct drive_list_entry *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 114 warnings, 69 checks, 8559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
