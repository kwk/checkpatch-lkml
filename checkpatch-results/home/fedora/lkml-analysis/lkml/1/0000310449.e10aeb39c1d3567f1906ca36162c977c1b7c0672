CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#61: FILE: fs/buffer.c:1679:
+		} else if (!buffer_mapped(bh) && buffer_dirty(bh)
+			   && !wbc->skip_unmapped) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: fs/ext3/inode.c:1477:
+	if (!wbc->skip_unmapped) {
[...]
+	else if (!PageMappedToDisk(page))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: fs/ext3/inode.c:1479:
+		handle = ext3_journal_start(inode,
+				ext3_writepage_trans_blocks(inode));

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#197: FILE: fs/ext3/inode.c:1485:
 	}
+	else if (!PageMappedToDisk(page))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'asure' may be misspelled - perhaps 'assure'?
#278: FILE: fs/ext3/inode.c:2976:
+ * Another thing we have to asure is that if we are in ordered mode
                             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: fs/ext3/inode.c:3028:
+			error = ext3_begin_ordered_truncate(inode,
+					attr->ia_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: fs/ext3/super.c:524:
+	journal_release_jbd_inode(EXT3_SB(inode->i_sb)->s_journal,
+		&EXT3_I(inode)->jinode);

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#348: FILE: fs/jbd/commit.c:41:
+ * sucessfully freed, because they are attached to a committing transaction.
    ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: fs/jbd/commit.c:153:
+static int journal_submit_data_buffers(journal_t *journal,
+		transaction_t *commit_transaction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: fs/jbd/commit.c:196:
+static int journal_finish_data_buffers(journal_t *journal,
+		transaction_t *commit_transaction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: fs/jbd/commit.c:216:
+	list_for_each_entry_safe(jinode, next_i,
+			&commit_transaction->t_inode_list, i_list) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#546: FILE: fs/jbd/commit.c:218:
+		if (jinode->i_next_transaction) {
[...]
+		else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: fs/jbd/commit.c:222:
+			list_add(&jinode->i_list,
+				&jinode->i_transaction->t_inode_list);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#552: FILE: fs/jbd/commit.c:224:
 		}
+		else

WARNING:LINE_SPACING: Missing a blank line after declarations
#721: FILE: fs/jbd/journal.c:1881:
+		DEFINE_WAIT_BIT(wait, &jinode->i_flags, __JI_COMMIT_RUNNING);
+		wq = bit_waitqueue(&jinode->i_flags, __JI_COMMIT_RUNNING);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "jh->b_cp_transaction"
#997: FILE: fs/jbd/transaction.c:1417:
+	if (jh->b_cp_transaction != NULL && jh->b_transaction == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!jh->b_transaction"
#997: FILE: fs/jbd/transaction.c:1417:
+	if (jh->b_cp_transaction != NULL && jh->b_transaction == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: fs/jbd/transaction.c:1915:
+	jbd_debug(4, "Adding inode %lu, tid:%d\n", jinode->i_vfs_inode->i_ino,
+			transaction->t_tid);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1071: FILE: fs/jbd/transaction.c:1924:
+	 * the committing one */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!jinode->i_next_transaction"
#1073: FILE: fs/jbd/transaction.c:1926:
+		J_ASSERT(jinode->i_next_transaction == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: fs/jbd/transaction.c:1962:
+		ret = __filemap_fdatawrite_range(inode->i_vfs_inode->i_mapping,
+			new_size, LLONG_MAX, WB_SYNC_ALL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1140: FILE: include/linux/ext3_fs.h:829:
+extern void ext3_drop_inode (struct inode *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1140: FILE: include/linux/ext3_fs.h:829:
+extern void ext3_drop_inode (struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1140: FILE: include/linux/ext3_fs.h:829:
+extern void ext3_drop_inode (struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1168: FILE: include/linux/jbd.h:352:
+ * since we cannot afford doing last iput() on behalf of kjournald
                                      ^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1170: FILE: include/linux/jbd.h:354:
+#define JI_COMMIT_RUNNING (1 << __JI_COMMIT_RUNNING)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1178: FILE: include/linux/jbd.h:362:
+	 * transaction or the committing one. [j_list_lock] */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1182: FILE: include/linux/jbd.h:366:
+	 * there is already a committing transaction touching it. [j_list_lock] */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1189: FILE: include/linux/jbd.h:373:
+	 * of the structure] */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 17 checks, 1131 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
