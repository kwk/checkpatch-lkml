WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perf-fixes-for-linus

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#69: 
      perf session: Reduce the number of parms to perf_session__process_events
                                         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#267: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'occurances' may be misspelled - perhaps 'occurrences'?
#316: FILE: tools/perf/Documentation/perf-diff.txt:45:
+	all occurances of this separator in symbol names (and other output)
 	    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#507: FILE: tools/perf/builtin-annotate.c:432:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#507: FILE: tools/perf/builtin-annotate.c:432:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#507: FILE: tools/perf/builtin-annotate.c:432:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#507: FILE: tools/perf/builtin-annotate.c:432:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                                   ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#626: FILE: tools/perf/builtin-diff.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#644: FILE: tools/perf/builtin-diff.c:19:
+static char const *input_old = "perf.data.old",

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#646: FILE: tools/perf/builtin-diff.c:21:
+static char	  diff__default_sort_order[] = "dso,symbol";

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he"
#656: FILE: tools/perf/builtin-diff.c:31:
+	if (he == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#709: FILE: tools/perf/builtin-diff.c:84:
+	while (*p != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#711: FILE: tools/perf/builtin-diff.c:86:
+		int cmp;
+		parent = *p;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#715: FILE: tools/perf/builtin-diff.c:90:
+		if (cmp > 0)
[...]
+		else if (cmp < 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#719: FILE: tools/perf/builtin-diff.c:94:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next"
#738: FILE: tools/perf/builtin-diff.c:113:
+	while (next != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#760: FILE: tools/perf/builtin-diff.c:135:
+		if (cmp > 0)
[...]
+		else if (cmp < 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#764: FILE: tools/perf/builtin-diff.c:139:
+		else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#781: FILE: tools/perf/builtin-diff.c:156:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#785: FILE: tools/perf/builtin-diff.c:160:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#785: FILE: tools/perf/builtin-diff.c:160:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#785: FILE: tools/perf/builtin-diff.c:160:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#785: FILE: tools/perf/builtin-diff.c:160:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#786: FILE: tools/perf/builtin-diff.c:161:
+		struct hist_entry *pos = rb_entry(nd, struct hist_entry, rb_node);
 		                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#787: FILE: tools/perf/builtin-diff.c:162:
+		struct hist_entry *pos = rb_entry(nd, struct hist_entry, rb_node);
+		pos->pair = perf_session__find_hist_entry_by_name(old_session, pos);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session[0]"
#798: FILE: tools/perf/builtin-diff.c:173:
+	if (session[0] == NULL || session[1] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session[1]"
#798: FILE: tools/perf/builtin-diff.c:173:
+	if (session[0] == NULL || session[1] == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#843: FILE: tools/perf/builtin-diff.c:218:
+		   "separator for columns, no spaces will be added between "
+		   "columns '.' is reserved."),

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#854: FILE: tools/perf/builtin-diff.c:229:
+		if (argc == 2) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#857: FILE: tools/perf/builtin-diff.c:232:
+		} else

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#981: FILE: tools/perf/builtin-kmem.c:393:
+				sym = map_groups__find_function(&session->kmaps, session, addr, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#1007: FILE: tools/perf/builtin-kmem.c:509:
+	struct perf_session *session = perf_session__new(input_name, O_RDONLY, 0);
+	if (session == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#1007: FILE: tools/perf/builtin-kmem.c:509:
+	if (session == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1106: FILE: tools/perf/builtin-probe.c:122:
+	struct symbol *sym;
+	sym = map__find_symbol_by_name(session.kmap, pp->function,

WARNING:SPLIT_STRING: quoted string split across lines
#1185: FILE: tools/perf/builtin-probe.c:183:
+	OPT_BOOLEAN('f', "force", &session.force_add, "forcibly add events"
+		    " with existing name"),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symbol_conf.vmlinux_name"
#1217: FILE: tools/perf/builtin-probe.c:227:
+	if (symbol_conf.vmlinux_name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session.psession"
#1222: FILE: tools/perf/builtin-probe.c:232:
+	if (session.psession == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#1271: FILE: tools/perf/builtin-probe.c:278:
+		pr_debug("An error occurred in debuginfo analysis."
+			 " Try to use symbols.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1352: FILE: tools/perf/builtin-record.c:434:
+				pr_err("Error, output file %s exists, use -A "
+				       "to append or -f to overwrite.\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1358: FILE: tools/perf/builtin-record.c:440:
+			char oldname[PATH_MAX];
+			snprintf(oldname, sizeof(oldname), "%s.old",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1433: FILE: tools/perf/builtin-record.c:539:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#2218: FILE: tools/perf/builtin-report.c:174:
+	} else if (callchain_param.mode != CHAIN_NONE && !symbol_conf.use_callchain) {
+			symbol_conf.use_callchain = true;

WARNING:LONG_LINE_STRING: line length of 109 exceeds 100 columns
#2281: FILE: tools/perf/builtin-report.c:231:
+		fprintf(stdout, "#\n# (For a higher level overview, try: perf report --sort comm,dso)\n#\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#2286: FILE: tools/perf/builtin-report.c:235:
+		bool raw_printing_style = !strcmp(pretty_printing_style, "raw");
+		perf_read_values_display(stdout, &show_threads_values,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2629: FILE: tools/perf/builtin-sched.c:1514:
+process_sched_runtime_event(void *data, struct perf_session *session,
 			   struct event *event,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2637: FILE: tools/perf/builtin-sched.c:1527:
+		trace_handler->runtime_event(&runtime_event, session, event, cpu, timestamp, thread);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2657: FILE: tools/perf/builtin-sched.c:1563:
+process_sched_migrate_task_event(void *data, struct perf_session *session,
 			   struct event *event,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3007: FILE: tools/perf/builtin-top.c:930:
+static void event__process_sample(const event_t *self,
+				 struct perf_session *session, int counter)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!al.sym"
#3018: FILE: tools/perf/builtin-top.c:951:
+	    al.sym == NULL || al.filtered)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3087: FILE: tools/perf/builtin-top.c:1165:
+	struct perf_session *session = perf_session__new(NULL, O_WRONLY, false);
+	if (session == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#3087: FILE: tools/perf/builtin-top.c:1165:
+	if (session == NULL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3247: FILE: tools/perf/builtin-trace.c:277:
+#define for_each_lang(scripts_dir, lang_dirent, lang_next)		\
+	while (!readdir_r(scripts_dir, &lang_dirent, &lang_next) &&	\
+	       lang_next)						\
+		if (lang_dirent.d_type == DT_DIR &&			\
+		    (strcmp(lang_dirent.d_name, ".")) &&		\
+		    (strcmp(lang_dirent.d_name, "..")))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lang_dirent' - possible side-effects?
#3247: FILE: tools/perf/builtin-trace.c:277:
+#define for_each_lang(scripts_dir, lang_dirent, lang_next)		\
+	while (!readdir_r(scripts_dir, &lang_dirent, &lang_next) &&	\
+	       lang_next)						\
+		if (lang_dirent.d_type == DT_DIR &&			\
+		    (strcmp(lang_dirent.d_name, ".")) &&		\
+		    (strcmp(lang_dirent.d_name, "..")))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lang_dirent' may be better as '(lang_dirent)' to avoid precedence issues
#3247: FILE: tools/perf/builtin-trace.c:277:
+#define for_each_lang(scripts_dir, lang_dirent, lang_next)		\
+	while (!readdir_r(scripts_dir, &lang_dirent, &lang_next) &&	\
+	       lang_next)						\
+		if (lang_dirent.d_type == DT_DIR &&			\
+		    (strcmp(lang_dirent.d_name, ".")) &&		\
+		    (strcmp(lang_dirent.d_name, "..")))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lang_next' - possible side-effects?
#3247: FILE: tools/perf/builtin-trace.c:277:
+#define for_each_lang(scripts_dir, lang_dirent, lang_next)		\
+	while (!readdir_r(scripts_dir, &lang_dirent, &lang_next) &&	\
+	       lang_next)						\
+		if (lang_dirent.d_type == DT_DIR &&			\
+		    (strcmp(lang_dirent.d_name, ".")) &&		\
+		    (strcmp(lang_dirent.d_name, "..")))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lang_next' may be better as '(lang_next)' to avoid precedence issues
#3247: FILE: tools/perf/builtin-trace.c:277:
+#define for_each_lang(scripts_dir, lang_dirent, lang_next)		\
+	while (!readdir_r(scripts_dir, &lang_dirent, &lang_next) &&	\
+	       lang_next)						\
+		if (lang_dirent.d_type == DT_DIR &&			\
+		    (strcmp(lang_dirent.d_name, ".")) &&		\
+		    (strcmp(lang_dirent.d_name, "..")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3254: FILE: tools/perf/builtin-trace.c:284:
+#define for_each_script(lang_dir, script_dirent, script_next)		\
+	while (!readdir_r(lang_dir, &script_dirent, &script_next) &&	\
+	       script_next)						\
+		if (script_dirent.d_type != DT_DIR)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'script_dirent' - possible side-effects?
#3254: FILE: tools/perf/builtin-trace.c:284:
+#define for_each_script(lang_dir, script_dirent, script_next)		\
+	while (!readdir_r(lang_dir, &script_dirent, &script_next) &&	\
+	       script_next)						\
+		if (script_dirent.d_type != DT_DIR)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'script_dirent' may be better as '(script_dirent)' to avoid precedence issues
#3254: FILE: tools/perf/builtin-trace.c:284:
+#define for_each_script(lang_dir, script_dirent, script_next)		\
+	while (!readdir_r(lang_dir, &script_dirent, &script_next) &&	\
+	       script_next)						\
+		if (script_dirent.d_type != DT_DIR)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'script_next' - possible side-effects?
#3254: FILE: tools/perf/builtin-trace.c:284:
+#define for_each_script(lang_dir, script_dirent, script_next)		\
+	while (!readdir_r(lang_dir, &script_dirent, &script_next) &&	\
+	       script_next)						\
+		if (script_dirent.d_type != DT_DIR)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'script_next' may be better as '(script_next)' to avoid precedence issues
#3254: FILE: tools/perf/builtin-trace.c:284:
+#define for_each_script(lang_dir, script_dirent, script_next)		\
+	while (!readdir_r(lang_dir, &script_dirent, &script_next) &&	\
+	       script_next)						\
+		if (script_dirent.d_type != DT_DIR)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3259: FILE: tools/perf/builtin-trace.c:289:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s"
#3276: FILE: tools/perf/builtin-trace.c:306:
+	if (s != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#3567: FILE: tools/perf/builtin-trace.c:592:
+	if (session == NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3598: FILE: tools/perf/builtin.h:20:
+extern int cmd_diff(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#3632: FILE: tools/perf/scripts/perl/bin/check-perf-trace-report:2:
+# description: useless but exhaustive test script

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#3643: FILE: tools/perf/scripts/perl/bin/rw-by-file-report:2:
+# description: r/w activity for a program, by file

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#3655: FILE: tools/perf/scripts/perl/bin/rw-by-pid-report:2:
+# description: system-wide r/w activity

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#3665: FILE: tools/perf/scripts/perl/bin/wakeup-latency-report:2:
+# description: system-wide min/max/avg wakeup latency

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#3675: FILE: tools/perf/scripts/perl/bin/workqueue-stats-report:2:
+# description: workqueue stats (ins/exe/create/destroy)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!perf_session__register_idle_thread"
#3815: FILE: tools/perf/util/data_map.c:151:
+	if (perf_session__register_idle_thread(self) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!getcwd"
#3838: FILE: tools/perf/util/data_map.c:168:
+		if (getcwd(bf, sizeof(bf)) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->cwd"
#3850: FILE: tools/perf/util/data_map.c:175:
+		if (self->cwd == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#4062: FILE: tools/perf/util/event.c:226:
+	if (thread == NULL || thread__set_comm_adjust(thread, self->comm.comm)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4149: FILE: tools/perf/util/event.c:338:
+		unsigned int slen = strlen(self->name);
+		if (slen > dsos__col_width)

CHECK:BRACES: braces {} should be used on all arms of this statement
#4465: FILE: tools/perf/util/hist.c:253:
+		if (!count && i == depth - 1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4470: FILE: tools/perf/util/hist.c:258:
+		} else

WARNING:TYPO_SPELLING: 'seperator' may be misspelled - perhaps 'separator'?
#4536: FILE: tools/perf/util/hist.c:324:
+		 * But we keep the older depth mask for the line seperator
 		                                                 ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4559: FILE: tools/perf/util/hist.c:347:
+	if (callchain_param.mode == CHAIN_GRAPH_REL &&
+		remaining && remaining != new_total) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4560: FILE: tools/perf/util/hist.c:348:
+		remaining && remaining != new_total) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#4589: FILE: tools/perf/util/hist.c:377:
+		if (!printed) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4597: FILE: tools/perf/util/hist.c:385:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4622: FILE: tools/perf/util/hist.c:410:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4754: FILE: tools/perf/util/hist.c:542:
+			se = list_first_entry(&hist_entry__sort_list, typeof(*se),
+						list);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4771: FILE: tools/perf/util/hist.c:559:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4856: FILE: tools/perf/util/hist.c:644:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4856: FILE: tools/perf/util/hist.c:644:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4856: FILE: tools/perf/util/hist.c:644:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4856: FILE: tools/perf/util/hist.c:644:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4857: FILE: tools/perf/util/hist.c:645:
+		struct hist_entry *h = rb_entry(nd, struct hist_entry, rb_node);
 		                                ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "h->pair"
#4860: FILE: tools/perf/util/hist.c:648:
+			if (h->pair != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#4862: FILE: tools/perf/util/hist.c:650:
+^I^I^I^I^I        (long)position);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#4938: FILE: tools/perf/util/hist.h:20:
+void hist_entry__free(struct hist_entry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPLIT_STRING: quoted string split across lines
#5271: FILE: tools/perf/util/probe-event.c:512:
+		pr_warning("Error: event \"%s\" already exists. "
+			   "(Use -f to force duplicates.)\n", base);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5439: FILE: tools/perf/util/probe-event.h:8:
+extern void parse_perf_probe_event(const char *str, struct probe_point *pp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5441: FILE: tools/perf/util/probe-event.h:10:
+extern int synthesize_perf_probe_point(struct probe_point *pp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5445: FILE: tools/perf/util/probe-event.h:12:
+extern void parse_trace_kprobe_event(const char *str, struct probe_point *pp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5448: FILE: tools/perf/util/probe-event.h:14:
+extern void add_trace_kprobe_events(struct probe_point *probes, int nr_probes,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "al.sym"
#5591: FILE: tools/perf/util/session.c:139:
+		if (al.sym != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fp"
#5697: FILE: tools/perf/util/sort.c:311:
+		if (fp != NULL)

CHECK:BRACES: Unbalanced braces around else statement
#5756: FILE: tools/perf/util/string.c:237:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strlist__find"
#5832: FILE: tools/perf/util/strlist.h:30:
+	return strlist__find(self, entry) != NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#5845: FILE: tools/perf/util/strlist.h:47:
+	struct rb_node *rn = rb_first(&self->entries);
+	return rn ? rb_entry(rn, struct str_node, rb_node) : NULL;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5847: FILE: tools/perf/util/strlist.h:49:
+}
+static inline struct str_node *strlist__next(struct str_node *sn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#5850: FILE: tools/perf/util/strlist.h:52:
+	struct rb_node *rn;
+	if (!sn)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#5861: FILE: tools/perf/util/strlist.h:63:
+#define strlist__for_each(pos, self)	\
+	for (pos = strlist__first(self); pos; pos = strlist__next(pos))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#5871: FILE: tools/perf/util/strlist.h:73:
+#define strlist__for_each_safe(pos, n, self)	\
+	for (pos = strlist__first(self), n = strlist__next(pos); pos;\
+	     pos = n, n = strlist__next(n))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#5871: FILE: tools/perf/util/strlist.h:73:
+#define strlist__for_each_safe(pos, n, self)	\
+	for (pos = strlist__first(self), n = strlist__next(pos); pos;\
+	     pos = n, n = strlist__next(n))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#5959: FILE: tools/perf/util/symbol.c:481:
+				curr_map = map_groups__find_by_name(&session->kmaps, map->type, module);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list_str"
#6173: FILE: tools/perf/util/symbol.c:1747:
+	if (list_str == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#6241: FILE: tools/perf/util/symbol.c:1803:
+		pr_debug("Failed to load list of modules for session %s, "
+			 "continuing...\n", self->filename);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6275: FILE: tools/perf/util/symbol.h:68:
+       struct strlist^I*dso_list,$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6415: FILE: tools/perf/util/thread.c:275:
+	for (nd = rb_first(&self->threads); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6415: FILE: tools/perf/util/thread.c:275:
+	for (nd = rb_first(&self->threads); nd; nd = rb_next(nd)) {
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6415: FILE: tools/perf/util/thread.c:275:
+	for (nd = rb_first(&self->threads); nd; nd = rb_next(nd)) {
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6415: FILE: tools/perf/util/thread.c:275:
+	for (nd = rb_first(&self->threads); nd; nd = rb_next(nd)) {
 	                                                     ^^

CHECK:CAMELCASE: Avoid CamelCase: <SvTRUE>
#6538: FILE: tools/perf/util/trace-event-perl.c:387:
+	if (SvTRUE(ERRSV)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: Unnecessary space before function pointer arguments
#6577: FILE: tools/perf/util/trace-event.h:273:
+	int (*start_script) (const char *script, int argc, const char **argv);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033439.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 57 warnings, 59 checks, 5892 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033439.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
