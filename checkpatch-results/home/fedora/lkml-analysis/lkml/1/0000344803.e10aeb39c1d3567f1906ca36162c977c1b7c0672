WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#190: FILE: include/linux/scatterlist.h:203:
+struct scatterlist *sg_last(struct scatterlist *s, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#191: FILE: include/linux/scatterlist.h:204:
+void sg_init_table(struct scatterlist *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#191: FILE: include/linux/scatterlist.h:204:
+void sg_init_table(struct scatterlist *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#192: FILE: include/linux/scatterlist.h:205:
+void sg_init_one(struct scatterlist *, const void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#192: FILE: include/linux/scatterlist.h:205:
+void sg_init_one(struct scatterlist *, const void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#192: FILE: include/linux/scatterlist.h:205:
+void sg_init_one(struct scatterlist *, const void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_table *' should also have an identifier name
#197: FILE: include/linux/scatterlist.h:210:
+void __sg_free_table(struct sg_table *, sg_free_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sg_free_fn *' should also have an identifier name
#197: FILE: include/linux/scatterlist.h:210:
+void __sg_free_table(struct sg_table *, sg_free_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_table *' should also have an identifier name
#198: FILE: include/linux/scatterlist.h:211:
+void sg_free_table(struct sg_table *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_table *' should also have an identifier name
#199: FILE: include/linux/scatterlist.h:212:
+int __sg_alloc_table(struct sg_table *, unsigned int, gfp_t, sg_alloc_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#199: FILE: include/linux/scatterlist.h:212:
+int __sg_alloc_table(struct sg_table *, unsigned int, gfp_t, sg_alloc_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#199: FILE: include/linux/scatterlist.h:212:
+int __sg_alloc_table(struct sg_table *, unsigned int, gfp_t, sg_alloc_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sg_alloc_fn *' should also have an identifier name
#199: FILE: include/linux/scatterlist.h:212:
+int __sg_alloc_table(struct sg_table *, unsigned int, gfp_t, sg_alloc_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_table *' should also have an identifier name
#200: FILE: include/linux/scatterlist.h:213:
+int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#200: FILE: include/linux/scatterlist.h:213:
+int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#200: FILE: include/linux/scatterlist.h:213:
+int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#223: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: lib/scatterlist.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: lib/scatterlist.c:25:
+	BUG_ON(sg->sg_magic != SG_MAGIC);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: lib/scatterlist.c:65:
+	BUG_ON(sgl[0].sg_magic != SG_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: lib/scatterlist.c:66:
+	BUG_ON(!sg_is_last(ret));

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: lib/scatterlist.c:88:
+		unsigned int i;
+		for (i = 0; i < nents; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#344: FILE: lib/scatterlist.c:117:
+		return (struct scatterlist *) __get_free_page(gfp_mask);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#352: FILE: lib/scatterlist.c:125:
+		free_page((unsigned long) sg);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#432: FILE: lib/scatterlist.c:205:
+	BUG_ON(nents > SG_MAX_SINGLE_ALLOC);

CHECK:BRACES: braces {} should be used on all arms of this statement
#442: FILE: lib/scatterlist.c:215:
+		if (alloc_size > SG_MAX_SINGLE_ALLOC) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#445: FILE: lib/scatterlist.c:218:
+		} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344803.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 4 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344803.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
