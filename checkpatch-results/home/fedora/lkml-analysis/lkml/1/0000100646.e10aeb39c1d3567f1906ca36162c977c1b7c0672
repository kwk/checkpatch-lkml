WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Gitweb:     http://git.kernel.org/tip/b7882b7c65abb00194bdb3d4a22d27d70fcc59ba

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#65: 
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: arch/x86/include/asm/atomic_32.h:267:
+extern u64 atomic64_cmpxchg(atomic64_t *ptr, u64 old_val, u64 new_val);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: arch/x86/include/asm/atomic_32.h:277:
+extern u64 atomic64_xchg(atomic64_t *ptr, u64 new_val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: arch/x86/include/asm/atomic_32.h:286:
+extern void atomic64_set(atomic64_t *ptr, u64 new_val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: arch/x86/include/asm/atomic_32.h:294:
+extern u64 atomic64_read(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: arch/x86/include/asm/atomic_32.h:303:
+extern u64 atomic64_add_return(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: arch/x86/include/asm/atomic_32.h:308:
+extern u64 atomic64_sub_return(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: arch/x86/include/asm/atomic_32.h:309:
+extern u64 atomic64_inc_return(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: arch/x86/include/asm/atomic_32.h:310:
+extern u64 atomic64_dec_return(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: arch/x86/include/asm/atomic_32.h:319:
+extern void atomic64_add(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: arch/x86/include/asm/atomic_32.h:328:
+extern void atomic64_sub(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: arch/x86/include/asm/atomic_32.h:339:
+extern int atomic64_sub_and_test(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: arch/x86/include/asm/atomic_32.h:347:
+extern void atomic64_inc(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: arch/x86/include/asm/atomic_32.h:355:
+extern void atomic64_dec(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: arch/x86/include/asm/atomic_32.h:365:
+extern int atomic64_dec_and_test(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: arch/x86/include/asm/atomic_32.h:375:
+extern int atomic64_inc_and_test(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: arch/x86/include/asm/atomic_32.h:386:
+extern int atomic64_add_negative(u64 delta, atomic64_t *ptr);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#336: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#341: FILE: arch/x86/lib/atomic64_32.c:1:
+#include <linux/compiler.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#343: FILE: arch/x86/lib/atomic64_32.c:3:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#345: FILE: arch/x86/lib/atomic64_32.c:5:
+#include <asm/atomic.h>

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#349: FILE: arch/x86/lib/atomic64_32.c:9:
+	asm volatile(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmpxchg8b', this function's name, in a string
#351: FILE: arch/x86/lib/atomic64_32.c:11:
+		LOCK_PREFIX "cmpxchg8b (%[ptr])\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100646.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 19 checks, 445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100646.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
