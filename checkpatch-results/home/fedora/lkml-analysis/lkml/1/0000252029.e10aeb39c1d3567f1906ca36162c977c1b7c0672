WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
This adds a debugging option for network devices. It could grow to add other

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#48: FILE: include/linux/netdevice.h:1241:
+extern void __dev_hold(struct net_device *, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#48: FILE: include/linux/netdevice.h:1241:
+extern void __dev_hold(struct net_device *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#48: FILE: include/linux/netdevice.h:1241:
+extern void __dev_hold(struct net_device *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#49: FILE: include/linux/netdevice.h:1242:
+extern void __dev_put(struct net_device *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#49: FILE: include/linux/netdevice.h:1242:
+extern void __dev_put(struct net_device *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#49: FILE: include/linux/netdevice.h:1242:
+extern void __dev_put(struct net_device *, const char *);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#51: FILE: include/linux/netdevice.h:1244:
+#define dev_hold(dev)	__dev_hold(dev, __FUNCTION__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#52: FILE: include/linux/netdevice.h:1245:
+#define dev_put(dev)	__dev_put(dev, __FUNCTION__)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#72: FILE: lib/Kconfig.debug:431:
+config DEBUG_NETDEV
+       bool "network device debugging"
+       depends on DEBUG_KERNEL
+       help
+	  This option enables extra checking on usage and reference counting
+	  of network devices.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#96: FILE: net/core/dev.c:4102:
+		printk(KERN_DEBUG "%s: dev_hold %d %s\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#103: FILE: net/core/dev.c:4109:
+	BUG_ON(atomic_read(&dev->refcnt) == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#105: FILE: net/core/dev.c:4111:
+		printk(KERN_DEBUG "%s: dev_put %d %s\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252029.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 2 checks, 82 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252029.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
