WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Gitweb:     http://git.kernel.org/tip/0b73da3f40128eab6ca2a07508f424029a1edaeb

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#135: 
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#186: FILE: Documentation/perf_counter/builtin-annotate.c:31:
+static char		default_sort_order[] = "comm,symbol";

CHECK:LINE_SPACING: Please don't use multiple blank lines
#202: FILE: Documentation/perf_counter/builtin-annotate.c:91:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#297: FILE: Documentation/perf_counter/builtin-annotate.c:670:
+		printf("%p %s: count++ [ip: %p, %08Lx] => %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: Documentation/perf_counter/builtin-annotate.c:671:
+		printf("%p %s: count++ [ip: %p, %08Lx] => %Ld\n",
+			(void *)he->sym->start,

CHECK:BRACES: braces {} should be used on all arms of this statement
#434: FILE: Documentation/perf_counter/builtin-annotate.c:1091:
+		if (percent >= 5.0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#436: FILE: Documentation/perf_counter/builtin-annotate.c:1093:
+		else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#457: FILE: Documentation/perf_counter/builtin-annotate.c:1114:
+	uint64_t start, end, len;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#458: FILE: Documentation/perf_counter/builtin-annotate.c:1115:
+	char command[PATH_MAX*2];
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#480: FILE: Documentation/perf_counter/builtin-annotate.c:1137:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", (__u64)start, (__u64)end, filename);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#480: FILE: Documentation/perf_counter/builtin-annotate.c:1137:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", (__u64)start, (__u64)end, filename);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#499: FILE: Documentation/perf_counter/builtin-annotate.c:1156:
+	struct rb_node *nd;
 	                ^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#504: FILE: Documentation/perf_counter/builtin-annotate.c:1161:
+	list_for_each_entry(dso, &dsos, node) {
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: Documentation/perf_counter/builtin-annotate.c:1162:
+		for (nd = rb_first(&dso->syms); nd; nd = rb_next(nd)) {
 		     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: Documentation/perf_counter/builtin-annotate.c:1162:
+		for (nd = rb_first(&dso->syms); nd; nd = rb_next(nd)) {
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: Documentation/perf_counter/builtin-annotate.c:1162:
+		for (nd = rb_first(&dso->syms); nd; nd = rb_next(nd)) {
 		                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: Documentation/perf_counter/builtin-annotate.c:1162:
+		for (nd = rb_first(&dso->syms); nd; nd = rb_next(nd)) {
 		                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#506: FILE: Documentation/perf_counter/builtin-annotate.c:1163:
+			struct symbol *sym = rb_entry(nd, struct symbol, rb_node);
 			                              ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: Documentation/perf_counter/builtin-annotate.c:1304:
+	OPT_STRING('s', "symbol", &sym_hist_filter, "file",
+		    "symbol to annotate"),

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#577: FILE: Documentation/perf_counter/builtin-annotate.c:1340:
+		 * Special case: if there's an argument left then assume tha
 		                                                         ^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#603: FILE: Documentation/perf_counter/util/symbol.c:14:
+				  uint64_t obj_start, int verbose)

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#621: FILE: Documentation/perf_counter/util/symbol.c:23:
+		printf("new symbol: %016Lx [%08lx]: %s, hist: %p, obj_start: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: Documentation/perf_counter/util/symbol.c:24:
+		printf("new symbol: %016Lx [%08lx]: %s, hist: %p, obj_start: %p\n",
+			(__u64)start, len, name, self->hist, (void *)obj_start);

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#624: FILE: Documentation/perf_counter/util/symbol.c:26:
+	self->obj_start= obj_start;
 	               ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#690: FILE: Documentation/perf_counter/util/symbol.c:462:
+		uint64_t obj_start;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000114593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 14 warnings, 11 checks, 541 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000114593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
