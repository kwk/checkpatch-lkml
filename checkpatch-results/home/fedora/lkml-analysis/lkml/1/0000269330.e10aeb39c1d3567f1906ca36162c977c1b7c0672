WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Accounting functions vm_acct_memory() and vm_unacct_memory() are rewritten as

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/mman.h:36:
+extern void vm_acct_get_config(const struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/mman.h:38:
+extern void mem_cgroup_vm_acct_memory(struct mm_struct *mm, long pages);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#83: FILE: include/linux/mman.h:46:
+}
+static inline void mem_cgroup_vm_acct_memory(struct mm_struct *mm, long pages)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#125: FILE: include/linux/mman.h:88:
+		return -ENOMEM;
+	else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#160: FILE: include/linux/mman.h:123:
+	/* Don't let a single process grow too big:
+	   leave 3% of the size of this process for other processes */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#160: FILE: include/linux/mman.h:123:
+	   leave 3% of the size of this process for other processes */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/linux/mman.h:137:
+extern int mem_cgroup_vm_enough_memory_guess(struct mm_struct *mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/mman.h:141:
+extern int mem_cgroup_vm_enough_memory_never(struct mm_struct *mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/mman.h:162:
+extern void vm_acct_memory(struct mm_struct *mm, long pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#250: FILE: mm/memcontrol.c:200:
+	BUG_ON(!mm);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#289: FILE: mm/memcontrol.c:239:
+	total = (long) (mem->res.limit >> PAGE_SHIFT) + 1L;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#356: FILE: mm/memcontrol.c:306:
+	/* Don't let a single process grow too big:
+	   leave 3% of the size of this process for other processes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#356: FILE: mm/memcontrol.c:306:
+	   leave 3% of the size of this process for other processes */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v.overcommit_memory == OVERCOMMIT_GUESS'
#497: FILE: mm/mmap.c:114:
+	if ((v.overcommit_memory == OVERCOMMIT_GUESS) &&
+	   (!mem_cgroup_vm_enough_memory_guess(mm, pages, cap_sys_admin)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: mm/mmap.c:115:
+	if ((v.overcommit_memory == OVERCOMMIT_GUESS) &&
+	   (!mem_cgroup_vm_enough_memory_guess(mm, pages, cap_sys_admin)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v.overcommit_memory == OVERCOMMIT_GUESS'
#606: FILE: mm/nommu.c:1370:
+	if ((v.overcommit_memory == OVERCOMMIT_GUESS) &&
+	   (!mem_cgroup_vm_enough_memory_guess(mm, pages, cap_sys_admin)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: mm/nommu.c:1371:
+	if ((v.overcommit_memory == OVERCOMMIT_GUESS) &&
+	   (!mem_cgroup_vm_enough_memory_guess(mm, pages, cap_sys_admin)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000269330.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 11 checks, 564 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000269330.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
