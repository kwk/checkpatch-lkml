WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
can write to any object and any subject can write to an object thus labeled,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#104: FILE: include/net/netlabel.h:428:
 }
+static inline int netlbl_cfg_unlbl_add_fallback(struct net *net,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#112: FILE: include/net/netlabel.h:436:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#114: FILE: include/net/netlabel.h:438:
+}
+static inline int netlbl_cfg_unlbl_del_fallback(struct net *net,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#121: FILE: include/net/netlabel.h:445:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: net/netlabel/netlabel_kapi.c:106:
 
+

CHECK:SPACING: No space is necessary after a cast
#410: FILE: security/smack/smackfs.c:625:
+	struct smk_slhost *skp = ((struct smk_slhost *) v)->smk_next;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#412: FILE: security/smack/smackfs.c:627:
+	if (skp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#423: FILE: security/smack/smackfs.c:638:
+	struct smk_slhost *skp = (struct smk_slhost *) v;

CHECK:SPACING: No space is necessary after a cast
#424: FILE: security/smack/smackfs.c:639:
+	unsigned char *hp = (char *) &skp->smk_host.sin_addr.s_addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: security/smack/smackfs.c:642:
+	seq_printf(s, "%u.%u.%u.%u %s\n", hp[0], hp[1], hp[2], hp[3],
+		skp->smk_label);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#437: FILE: security/smack/smackfs.c:652:
+static struct seq_operations slhost_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#459: FILE: security/smack/smackfs.c:674:
+ * @filp: file pointer, not actually used
     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: security/smack/smackfs.c:717:
+	rc = sscanf(data, "%hhd.%hhd.%hhd.%hhd/%d %s",
+		&host[0], &host[1], &host[2], &host[3], &m, smack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: security/smack/smackfs.c:720:
+		rc = sscanf(data, "%hhd.%hhd.%hhd.%hhd %s",
+			&host[0], &host[1], &host[2], &host[3], smack);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#513: FILE: security/smack/smackfs.c:728:
+	if (sp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#527: FILE: security/smack/smackfs.c:742:
+	for (skp = smack_slhosts; skp != NULL; skp = skp->smk_next)

CHECK:BRACES: braces {} should be used on all arms of this statement
#536: FILE: security/smack/smackfs.c:751:
+	if (skp == NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#536: FILE: security/smack/smackfs.c:751:
+	if (skp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#538: FILE: security/smack/smackfs.c:753:
+		if (skp == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#548: FILE: security/smack/smackfs.c:763:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: security/smack/smackfs.c:776:
+		rc = netlbl_cfg_unlbl_del_fallback(&init_net, NULL,
+			&skp->smk_host.sin_addr, &skp->smk_mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: security/smack/smackfs.c:783:
+	rc = netlbl_cfg_unlbl_add_fallback(&init_net, NULL,
+		&skp->smk_host.sin_addr, &skp->smk_mask, PF_INET,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#595: FILE: security/smack/smackfs.c:1012:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#602: FILE: security/smack/smackfs.c:1019:
+static ssize_t smk_read_onlycap(struct file *filp, char __user *buf,
                                              ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "smack_onlycap"
#612: FILE: security/smack/smackfs.c:1029:
+	if (smack_onlycap != NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#625: FILE: security/smack/smackfs.c:1042:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "smack_onlycap"
#646: FILE: security/smack/smackfs.c:1063:
+	if (smack_onlycap != NULL && smack_onlycap != sp)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#680: FILE: security/smack/smackfs.c:1222:
+		[SMK_ONLYCAP]	=
+			{"onlycap", &smk_onlycap_ops, S_IRUGO|S_IWUSR},

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#680: FILE: security/smack/smackfs.c:1222:
+			{"onlycap", &smk_onlycap_ops, S_IRUGO|S_IWUSR},
 			                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#680: FILE: security/smack/smackfs.c:1222:
+			{"onlycap", &smk_onlycap_ops, S_IRUGO|S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#682: FILE: security/smack/smackfs.c:1224:
+		[SMK_SLHOST]	=
+			{"slhost", &smk_slhost_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#682: FILE: security/smack/smackfs.c:1224:
+			{"slhost", &smk_slhost_ops, S_IRUGO|S_IWUSR},
 			                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#682: FILE: security/smack/smackfs.c:1224:
+			{"slhost", &smk_slhost_ops, S_IRUGO|S_IWUSR},

CHECK:BRACES: Unbalanced braces around else statement
#812: FILE: security/smack/smack_lsm.c:1350:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#848: FILE: security/smack/smack_lsm.c:1451:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#864: FILE: security/smack/smack_lsm.c:1467:
+	for (slp = smack_slhosts; slp != NULL; slp = slp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock->sk"
#888: FILE: security/smack/smack_lsm.c:1491:
+	if (sock->sk == NULL || sock->sk->sk_family != PF_INET)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hostsp"
#895: FILE: security/smack/smack_lsm.c:1498:
+	if (hostsp == NULL) {

CHECK:SPACING: No space is necessary after a cast
#940: FILE: security/smack/smack_lsm.c:2205:
+	struct sockaddr_in *sip = (struct sockaddr_in *) msg->msg_name;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sip"
#948: FILE: security/smack/smack_lsm.c:2213:
+	if (sip == NULL || sip->sin_family != PF_INET)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hostsp"
#952: FILE: security/smack/smack_lsm.c:2217:
+	if (hostsp == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#967: FILE: security/smack/smack_lsm.c:2232:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#969: FILE: security/smack/smack_lsm.c:2234:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#997: FILE: security/smack/smack_lsm.c:2258:
+				pcat = netlbl_secattr_catmap_walk(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1048: FILE: security/smack/smack_lsm.c:2291:
+		BUG_ON(sp == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#1048: FILE: security/smack/smack_lsm.c:2291:
+		BUG_ON(sp == NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1080: FILE: security/smack/smack_lsm.c:2328:
+	if (rc == 0) {
[...]
-		strncpy(smack, smack_net_ambient, SMK_MAXLEN);
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1086: FILE: security/smack/smack_lsm.c:2332:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 36 checks, 986 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
