WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#366: FILE: tests/Kconfig:79:
+config DEBUG_RODATA_TEST
+	bool "Testcase for the DEBUG_RODATA feature"
+	depends on X86 && DEBUG_RODATA
+	help
+	  This option enables a testcase for the DEBUG_RODATA
+	  feature as well as for the change_page_attr() infrastructure.
+	  If in doubt, say "N"
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#374: FILE: tests/Kconfig:87:
+config DEBUG_NX_TEST
+	tristate "Testcase for the NX non-executable stack feature"
+	depends on X86 && DEBUG_KERNEL && m
+	help
+	  This option enables a testcase for the CPU NX capability
+	  and the software setup of this feature.
+	  If in doubt, say "N"
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#398: FILE: tests/test_nx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#411: FILE: tests/test_nx.c:14:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#432: FILE: tests/test_nx.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#452: FILE: tests/test_nx.c:55:
+		printk(KERN_ERR "test_nx: too many exception table entries!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#453: FILE: tests/test_nx.c:56:
+		printk(KERN_ERR "test_nx: test results are not reliable.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#460: FILE: tests/test_nx.c:63:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#482: FILE: tests/test_nx.c:85:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#490: FILE: tests/test_nx.c:93:
+		_ASM_EXTABLE(0b,2b)
 		               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#513: FILE: tests/test_nx.c:116:
+	printk(KERN_INFO "Testing NX protection\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#517: FILE: tests/test_nx.c:120:
+		printk(KERN_ERR "test_nx: stack was executable\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#521: FILE: tests/test_nx.c:124:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#529: FILE: tests/test_nx.c:132:
+		printk(KERN_ERR "test_nx: heap was executable\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#543: FILE: tests/test_nx.c:146:
+		printk(KERN_ERR "test_nx: .rodata marker has invalid value\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#546: FILE: tests/test_nx.c:149:
+		printk(KERN_ERR "test_nx: .rodata section is executable\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#551: FILE: tests/test_nx.c:154:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#554: FILE: tests/test_nx.c:157:
+		printk(KERN_ERR "test_nx: .data section is executable\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#576: FILE: tests/test_rodata.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#599: FILE: tests/test_rodata.c:24:
+		printk(KERN_ERR "rodata_test: test 1 fails (start data)\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rodata_test', this function's name, in a string
#599: FILE: tests/test_rodata.c:24:
+		printk(KERN_ERR "rodata_test: test 1 fails (start data)\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#613: FILE: tests/test_rodata.c:38:
+	asm volatile(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rodata_test', this function's name, in a string
#614: FILE: tests/test_rodata.c:39:
+		"0:	mov %[zero],(%[rodata_test])\n"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: tests/test_rodata.c:57:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#634: FILE: tests/test_rodata.c:59:
+		printk(KERN_ERR "rodata_test: test data was not read only\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rodata_test', this function's name, in a string
#634: FILE: tests/test_rodata.c:59:
+		printk(KERN_ERR "rodata_test: test data was not read only\n");

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#641: FILE: tests/test_rodata.c:66:
+		printk(KERN_ERR "rodata_test: Test 3 failes (end data)\n");
 		                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#641: FILE: tests/test_rodata.c:66:
+		printk(KERN_ERR "rodata_test: Test 3 failes (end data)\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rodata_test', this function's name, in a string
#641: FILE: tests/test_rodata.c:66:
+		printk(KERN_ERR "rodata_test: Test 3 failes (end data)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#648: FILE: tests/test_rodata.c:73:
+		printk(KERN_ERR "rodata_test: .rodata is not 4k aligned\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rodata_test', this function's name, in a string
#648: FILE: tests/test_rodata.c:73:
+		printk(KERN_ERR "rodata_test: .rodata is not 4k aligned\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#652: FILE: tests/test_rodata.c:77:
+		printk(KERN_ERR "rodata_test: .rodata end is not 4k aligned\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rodata_test', this function's name, in a string
#652: FILE: tests/test_rodata.c:77:
+		printk(KERN_ERR "rodata_test: .rodata end is not 4k aligned\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 26 warnings, 6 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
