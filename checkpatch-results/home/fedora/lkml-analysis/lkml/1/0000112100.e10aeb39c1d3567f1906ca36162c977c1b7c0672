CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: fs/fat/fat.h:315:
+extern int fat_sbi_attr_set_notify(struct msdos_sb_info *sbi,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#58: FILE: fs/fat/fat.h:316:
+extern int fat_sbi_attr_set_notify(struct msdos_sb_info *sbi,
+			unsigned long offset, unsigned long val);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fat_attr *' should also have an identifier name
#111: FILE: fs/fat/inode.c:1183:
+	ssize_t (*show)(struct fat_attr *, struct msdos_sb_info *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msdos_sb_info *' should also have an identifier name
#111: FILE: fs/fat/inode.c:1183:
+	ssize_t (*show)(struct fat_attr *, struct msdos_sb_info *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#111: FILE: fs/fat/inode.c:1183:
+	ssize_t (*show)(struct fat_attr *, struct msdos_sb_info *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fat_attr *' should also have an identifier name
#112: FILE: fs/fat/inode.c:1184:
+	ssize_t (*store)(struct fat_attr *, struct msdos_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msdos_sb_info *' should also have an identifier name
#112: FILE: fs/fat/inode.c:1184:
+	ssize_t (*store)(struct fat_attr *, struct msdos_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#112: FILE: fs/fat/inode.c:1184:
+	ssize_t (*store)(struct fat_attr *, struct msdos_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#112: FILE: fs/fat/inode.c:1184:
+	ssize_t (*store)(struct fat_attr *, struct msdos_sb_info *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: fs/fat/inode.c:1190:
+static ssize_t fat_sbi_attr_show(struct fat_attr *a, struct msdos_sb_info *sbi,
+				char *buf)

CHECK:SPACING: No space is necessary after a cast
#120: FILE: fs/fat/inode.c:1192:
+	unsigned long attr_val = *(unsigned long *)(((char *) sbi) + a->offset);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: fs/fat/inode.c:1193:
+	unsigned long attr_val = *(unsigned long *)(((char *) sbi) + a->offset);
+	return snprintf(buf, PAGE_SIZE, "%lu\n", attr_val);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: fs/fat/inode.c:1197:
+static ssize_t fat_sbi_attr_store(struct fat_attr *a,
+					struct msdos_sb_info *sbi,

CHECK:SPACING: No space is necessary after a cast
#128: FILE: fs/fat/inode.c:1200:
+	unsigned long *attr_val = (unsigned long *)(((char *) sbi) + a->offset);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#130: FILE: fs/fat/inode.c:1202:
+	if (strict_strtoul(buf, 10, attr_val))

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#143: FILE: fs/fat/inode.c:1215:
+}
+#define FAT_SBI_RO_ATTR(name) FAT_SBI_ATTR(name, 0444, \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/fat/inode.c:1227:
+static struct attribute *find_attr_by_offset(struct kobject *kobj,
+					unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: fs/fat/inode.c:1238:
+int fat_sbi_attr_set_notify(struct msdos_sb_info *sbi,
+			unsigned long offset,

CHECK:SPACING: No space is necessary after a cast
#170: FILE: fs/fat/inode.c:1242:
+		(struct fat_attr *) find_attr_by_offset(&sbi->s_kobj, offset);

CHECK:SPACING: No space is necessary after a cast
#176: FILE: fs/fat/inode.c:1248:
+	attr_val = (unsigned long *) (((char *) sbi) + a->offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: fs/fat/inode.c:1261:
+static ssize_t fat_attr_show(struct kobject *kobj, struct attribute *attr,
+				char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: fs/fat/inode.c:1271:
+static ssize_t fat_attr_store(struct kobject *kobj,
+			       struct attribute *attr,

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#216: FILE: fs/fat/inode.c:1288:
+static struct sysfs_ops fat_attr_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: fs/fat/inode.c:1564:
+	error = kobject_init_and_add(&sbi->s_kobj, &fat_ktype, NULL,
+				   "%s", sb->s_id);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 14 checks, 204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
