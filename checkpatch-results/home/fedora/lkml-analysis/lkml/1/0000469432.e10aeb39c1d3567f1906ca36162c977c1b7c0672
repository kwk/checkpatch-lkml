ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#50: FILE: init/do_mounts.c:21:
+int __initdata rd_doload = 0;	/* 1 = load RAM disk, 0 = don't load */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#55: FILE: init/do_mounts.c:24:
+char * __initdata root_device_name = NULL;

WARNING:MISPLACED_INIT: __initdata should be placed after saved_root_name[64]
#56: FILE: init/do_mounts.c:25:
+static char __initdata saved_root_name[64] = "";

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#65: FILE: init/do_mounts.c:217:
+static char * __initdata root_mount_data = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#73: FILE: init/do_mounts.c:224:
+static char * __initdata root_fs_names = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#81: FILE: init/do_mounts.c:231:
+static unsigned int __initdata root_delay = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after root_delay
#81: FILE: init/do_mounts.c:231:
+static unsigned int __initdata root_delay = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#93: FILE: init/do_mounts_initrd.c:16:
+static int __initdata old_fd = 0, root_fd = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after old_fd
#93: FILE: init/do_mounts_initrd.c:16:
+static int __initdata old_fd = 0, root_fd = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#105: FILE: init/do_mounts_md.c:15:
+static int __initdata raid_noautodetect = 0, raid_autopart = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after raid_noautodetect
#105: FILE: init/do_mounts_md.c:15:
+static int __initdata raid_noautodetect = 0, raid_autopart = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#117: FILE: init/do_mounts_md.c:25:
+static int md_setup_ents __initdata = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#129: FILE: init/initramfs.c:10:
+static __initdata char *message = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0l
#152: FILE: init/initramfs.c:87:
+static __initdata unsigned long ino = 0l, major = 0l, minor = 0l, nlink = 0l;

WARNING:MISPLACED_INIT: __initdata should be placed after ino
#152: FILE: init/initramfs.c:87:
+static __initdata unsigned long ino = 0l, major = 0l, minor = 0l, nlink = 0l;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#153: FILE: init/initramfs.c:88:
+static __initdata mode_t mode = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after mode
#153: FILE: init/initramfs.c:88:
+static __initdata mode_t mode = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0l
#154: FILE: init/initramfs.c:89:
+static __initdata unsigned long body_len = 0l, name_len = 0l;

WARNING:MISPLACED_INIT: __initdata should be placed after body_len
#154: FILE: init/initramfs.c:89:
+static __initdata unsigned long body_len = 0l, name_len = 0l;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#155: FILE: init/initramfs.c:90:
+static __initdata uid_t uid = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after uid
#155: FILE: init/initramfs.c:90:
+static __initdata uid_t uid = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#156: FILE: init/initramfs.c:91:
+static __initdata gid_t gid = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after gid
#156: FILE: init/initramfs.c:91:
+static __initdata gid_t gid = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#157: FILE: init/initramfs.c:92:
+static __initdata unsigned rdev = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#157: FILE: init/initramfs.c:92:
+static __initdata unsigned rdev = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after rdev
#157: FILE: init/initramfs.c:92:
+static __initdata unsigned rdev = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Start>
#166: FILE: init/initramfs.c:128:
+} state = Start, next_state = Start;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#171: FILE: init/initramfs.c:130:
+static __initdata char *victim = NULL;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#172: FILE: init/initramfs.c:131:
+static __initdata unsigned count = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#172: FILE: init/initramfs.c:131:
+static __initdata unsigned count = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after count
#172: FILE: init/initramfs.c:131:
+static __initdata unsigned count = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#173: FILE: init/initramfs.c:132:
+static __initdata loff_t this_header = 0, next_header = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after this_header
#173: FILE: init/initramfs.c:132:
+static __initdata loff_t this_header = 0, next_header = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#176: FILE: init/initramfs.c:134:
+static __initdata int dry_run = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after dry_run
#176: FILE: init/initramfs.c:134:
+static __initdata int dry_run = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#187: FILE: init/initramfs.c:143:
+static __initdata char *collected = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#188: FILE: init/initramfs.c:144:
+static __initdata int remains = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after remains
#188: FILE: init/initramfs.c:144:
+static __initdata int remains = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#189: FILE: init/initramfs.c:145:
+static __initdata char *collect = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#198: FILE: init/initramfs.c:161:
+static __initdata char *header_buf = NULL, *symlink_buf = NULL, *name_buf = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#207: FILE: init/initramfs.c:260:
+static __initdata int wfd = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after wfd
#207: FILE: init/initramfs.c:260:
+static __initdata int wfd = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#216: FILE: init/initramfs.c:494:
+static int __initdata do_retain_initrd = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after do_retain_initrd
#216: FILE: init/initramfs.c:494:
+static int __initdata do_retain_initrd = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after tmp_cmdline[COMMAND_LINE_SIZE]
#237: FILE: init/main.c:473:
+	static __initdata char tmp_cmdline[COMMAND_LINE_SIZE] = "";

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#246: FILE: init/main.c:643:
+static int __initdata initcall_debug = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after initcall_debug
#246: FILE: init/main.c:643:
+static int __initdata initcall_debug = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469432.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 20 warnings, 1 checks, 177 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469432.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
