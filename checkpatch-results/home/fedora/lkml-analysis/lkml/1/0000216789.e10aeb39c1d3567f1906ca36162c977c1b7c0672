Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#13: 
Subject: [PATCH 02/21] fat: move fs/vfat/* and fs/msdos/* to fs/fat
                                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'MSDOS' may be misspelled - perhaps ''?
#27: 
This just moves those files, but change link order from MSDOS, VFAT to
                                                        ^^^^^

WARNING:TYPO_SPELLING: 'MSDOS' may be misspelled - perhaps ''?
#28: 
VFAT, MSDOS.
      ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#63: FILE: fs/fat/Makefile:7:
+obj-$(CONFIG_MSDOS_FS) += msdos.o
                           ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: fs/fat/namei_msdos.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#74: FILE: fs/fat/namei_msdos.c:2:
+ *  linux/fs/msdos/namei.c
              ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <dotsOK>
#106: FILE: fs/fat/namei_msdos.c:34:
+		if (opts->dotsOK) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#106: FILE: fs/fat/namei_msdos.c:34:
+		if (opts->dotsOK) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#110: FILE: fs/fat/namei_msdos.c:38:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res == walk'
#137: FILE: fs/fat/namei_msdos.c:65:
+		if ((res == walk) && (c == 0xE5))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c == 0xE5'
#137: FILE: fs/fat/namei_msdos.c:65:
+		if ((res == walk) && (c == 0xE5))

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#219: FILE: fs/fat/namei_msdos.c:147:
+ * Compute the hash for the msdos name corresponding to the dentry.
                             ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#221: FILE: fs/fat/namei_msdos.c:149:
+ * that the existing dentry can be used. The msdos fs routines will
                                              ^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#237: FILE: fs/fat/namei_msdos.c:165:
+ * Compare two msdos names. If either of the names are invalid,
                ^^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#263: FILE: fs/fat/namei_msdos.c:191:
+static struct dentry_operations msdos_dentry_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#274: FILE: fs/fat/namei_msdos.c:202:
+				   struct nameidata *nd)
 				                     ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#323: FILE: fs/fat/namei_msdos.c:251:
+	de.cdate = de.adate = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#336: FILE: fs/fat/namei_msdos.c:264:
+	dir->i_ctime = dir->i_mtime = *ts;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#347: FILE: fs/fat/namei_msdos.c:275:
+			struct nameidata *nd)
 			                  ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#380: FILE: fs/fat/namei_msdos.c:308:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = ts;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#470: FILE: fs/fat/namei_msdos.c:398:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = ts;

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#490: FILE: fs/fat/namei_msdos.c:418:
+	struct super_block *sb= inode->i_sb;
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#526: FILE: fs/fat/namei_msdos.c:454:
+	old_sinfo.bh = sinfo.bh = dotdot_bh = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#559: FILE: fs/fat/namei_msdos.c:487:
+			if (IS_DIRSYNC(old_dir)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#565: FILE: fs/fat/namei_msdos.c:493:
+			} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#569: FILE: fs/fat/namei_msdos.c:497:
+			old_dir->i_ctime = old_dir->i_mtime = CURRENT_TIME_SEC;

CHECK:BRACES: braces {} should be used on all arms of this statement
#604: FILE: fs/fat/namei_msdos.c:532:
+	if (IS_DIRSYNC(new_dir)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#608: FILE: fs/fat/namei_msdos.c:536:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#613: FILE: fs/fat/namei_msdos.c:541:
+		int start = MSDOS_I(new_dir)->i_logstart;
+		dotdot_de->start = cpu_to_le16(start);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#631: FILE: fs/fat/namei_msdos.c:559:
+	old_dir->i_ctime = old_dir->i_mtime = ts;

WARNING:LINE_SPACING: Missing a blank line after declarations
#655: FILE: fs/fat/namei_msdos.c:583:
+		int start = MSDOS_I(old_dir)->i_logstart;
+		dotdot_de->start = cpu_to_le16(start);

WARNING:LINE_SPACING: Missing a blank line after declarations
#674: FILE: fs/fat/namei_msdos.c:602:
+		int err2 = fat_remove_entries(new_dir, &sinfo);
+		if (corrupt)

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#753: FILE: fs/fat/namei_msdos.c:681:
+	.name		= "msdos",
 	     		   ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#779: FILE: fs/fat/namei_vfat.c:1:
+/*

WARNING:TYPO_SPELLING: 'MSDOS' may be misspelled - perhaps ''?
#784: FILE: fs/fat/namei_vfat.c:6:
+ *  Windows95/Windows NT compatible extended MSDOS filesystem
                                              ^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#806: FILE: fs/fat/namei_vfat.c:28:
+static int vfat_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#811: FILE: fs/fat/namei_vfat.c:33:
+	    nd && !(nd->flags & LOOKUP_CONTINUE) && (nd->flags & LOOKUP_CREATE))
 	    ^^

CHECK:BRACES: Unbalanced braces around else statement
#818: FILE: fs/fat/namei_vfat.c:40:
+	else {

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#908: FILE: fs/fat/namei_vfat.c:130:
+static struct dentry_operations vfat_dentry_ops[4] = {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#934: FILE: fs/fat/namei_vfat.c:156:
+	return (w < 0x0020)
+	    || (w == '*') || (w == '?') || (w == '<') || (w == '>')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#935: FILE: fs/fat/namei_vfat.c:157:
+	    || (w == '*') || (w == '?') || (w == '<') || (w == '>')
+	    || (w == '|') || (w == '"') || (w == ':') || (w == '/')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#936: FILE: fs/fat/namei_vfat.c:158:
+	    || (w == '|') || (w == '"') || (w == ':') || (w == '/')
+	    || (w == '\\');

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#942: FILE: fs/fat/namei_vfat.c:164:
+	return (w == '[') || (w == ']') || (w == ';') || (w == ',')
+	    || (w == '+') || (w == '=');

WARNING:LINE_SPACING: Missing a blank line after declarations
#968: FILE: fs/fat/namei_vfat.c:190:
+	int err = fat_scan(dir, name, &sinfo);
+	if (err)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#999: FILE: fs/fat/namei_vfat.c:221:
+};
+#define INIT_SHORTNAME_INFO(x)	do {		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#999: FILE: fs/fat/namei_vfat.c:221:
+#define INIT_SHORTNAME_INFO(x)	do {		\
+	(x)->lower = 1;				\
+	(x)->upper = 1;				\
+	(x)->valid = 1;				\
+} while (0)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1073: FILE: fs/fat/namei_vfat.c:295:
+	ext_start = end = &uname[ulen];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1132: FILE: fs/fat/namei_vfat.c:354:
+	if (baselen == 0) {
+		return -EINVAL;
+	}

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1191: FILE: fs/fat/namei_vfat.c:413:
+			return 0;
+		} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1192: FILE: fs/fat/namei_vfat.c:414:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1220: FILE: fs/fat/namei_vfat.c:442:
+	sz = (jiffies >> 16) & 0x7;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1267: FILE: fs/fat/namei_vfat.c:489:
+			for (i = 0, ip = name, op = outname, *outlen = 0;
+			     i < len && *outlen <= 255;
+			     *outlen += 1)
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1278: FILE: fs/fat/namei_vfat.c:500:
+						if (nc >= '0' && nc <= '9') {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1282: FILE: fs/fat/namei_vfat.c:504:
+						if (nc >= 'a' && nc <= 'f') {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1286: FILE: fs/fat/namei_vfat.c:508:
+						if (nc >= 'A' && nc <= 'F') {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1297: FILE: fs/fat/namei_vfat.c:519:
+					if ((charlen = nls->char2uni(ip, len - i, (wchar_t *)op)) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1297: FILE: fs/fat/namei_vfat.c:519:
+					if ((charlen = nls->char2uni(ip, len - i, (wchar_t *)op)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1307: FILE: fs/fat/namei_vfat.c:529:
+			for (i = 0, ip = name, op = outname, *outlen = 0;
+			     i < len && *outlen <= 255;
+			     i++, *outlen += 1)
+			{

CHECK:BRACES: braces {} should be used on all arms of this statement
#1370: FILE: fs/fat/namei_vfat.c:592:
+	if (err < 0)
[...]
+	else if (err == 1) {
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1403: FILE: fs/fat/namei_vfat.c:625:
+	de->time = de->ctime = time;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1404: FILE: fs/fat/namei_vfat.c:626:
+	de->date = de->cdate = de->adate = date;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slots"
#1427: FILE: fs/fat/namei_vfat.c:649:
+	if (slots == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1440: FILE: fs/fat/namei_vfat.c:662:
+	dir->i_ctime = dir->i_mtime = dir->i_atime = *ts;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1454: FILE: fs/fat/namei_vfat.c:676:
+	unsigned int len = vfat_striptail_len(qname);
+	if (len == 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1460: FILE: fs/fat/namei_vfat.c:682:
+				  struct nameidata *nd)
 				                    ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1485: FILE: fs/fat/namei_vfat.c:707:
+		if (d_invalidate(alias) == 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1487: FILE: fs/fat/namei_vfat.c:709:
+		else {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1488: FILE: fs/fat/namei_vfat.c:710:
+			iput(inode);
 			^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1493: FILE: fs/fat/namei_vfat.c:715:
+
+	}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1507: FILE: fs/fat/namei_vfat.c:729:
+		       struct nameidata *nd)
 		                         ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1530: FILE: fs/fat/namei_vfat.c:752:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = ts;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1562: FILE: fs/fat/namei_vfat.c:784:
+	inode->i_mtime = inode->i_atime = CURRENT_TIME_SEC;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1587: FILE: fs/fat/namei_vfat.c:809:
+	inode->i_mtime = inode->i_atime = CURRENT_TIME_SEC;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1626: FILE: fs/fat/namei_vfat.c:848:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = ts;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1654: FILE: fs/fat/namei_vfat.c:876:
+	old_sinfo.bh = sinfo.bh = dotdot_bh = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1692: FILE: fs/fat/namei_vfat.c:914:
+	if (IS_DIRSYNC(new_dir)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1696: FILE: fs/fat/namei_vfat.c:918:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1701: FILE: fs/fat/namei_vfat.c:923:
+		int start = MSDOS_I(new_dir)->i_logstart;
+		dotdot_de->start = cpu_to_le16(start);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1711: FILE: fs/fat/namei_vfat.c:933:
+ ^I^I^Iinc_nlink(new_dir);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1711: FILE: fs/fat/namei_vfat.c:933:
+ ^I^I^Iinc_nlink(new_dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1711: FILE: fs/fat/namei_vfat.c:933:
+ ^I^I^Iinc_nlink(new_dir);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1719: FILE: fs/fat/namei_vfat.c:941:
+	old_dir->i_ctime = old_dir->i_mtime = ts;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1745: FILE: fs/fat/namei_vfat.c:967:
+		int start = MSDOS_I(old_dir)->i_logstart;
+		dotdot_de->start = cpu_to_le16(start);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1763: FILE: fs/fat/namei_vfat.c:985:
+		int err2 = fat_remove_entries(new_dir, &sinfo);
+		if (corrupt)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216789.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 39 warnings, 40 checks, 1775 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216789.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
