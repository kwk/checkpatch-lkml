CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_66MHz>
#190: FILE: drivers/pci/hotplug/cpqphp.h:606:
+	return (misc & 0x0800) ? PCI_SPEED_66MHz : PCI_SPEED_33MHz;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_33MHz>
#190: FILE: drivers/pci/hotplug/cpqphp.h:606:
+	return (misc & 0x0800) ? PCI_SPEED_66MHz : PCI_SPEED_33MHz;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: drivers/pci/hotplug/cpqphp_ctrl.c:889:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: drivers/pci/hotplug/cpqphp_ctrl.c:1242:
+	info("Successfully changed frequency/mode for adapter in slot %d\n",
 			slot->number);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#665: FILE: drivers/pci/hotplug/cpqphp_ctrl.c:2920:
+			rc = pci_bus_read_config_byte (pci_bus, devfn,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: drivers/pci/hotplug/cpqphp_ctrl.c:2921:
+			rc = pci_bus_read_config_byte (pci_bus, devfn,
 				PCI_INTERRUPT_PIN, &temp_byte);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'evbuffer[0] != 0'
#749: FILE: drivers/pci/hotplug/cpqphp_nvram.c:643:
+		if ((evbuffer[0] != 0) && (!ctrl->push_flag))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ctrl->push_flag'
#749: FILE: drivers/pci/hotplug/cpqphp_nvram.c:643:
+		if ((evbuffer[0] != 0) && (!ctrl->push_flag))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#757: FILE: drivers/pci/hotplug/cpqphp_nvram.c:650:
 
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#770: FILE: drivers/pci/hotplug/cpqphp_pci.c:85:
+int cpqhp_configure_device (struct controller* ctrl, struct pci_func* func)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#770: FILE: drivers/pci/hotplug/cpqphp_pci.c:85:
+int cpqhp_configure_device (struct controller* ctrl, struct pci_func* func)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#770: FILE: drivers/pci/hotplug/cpqphp_pci.c:85:
+int cpqhp_configure_device (struct controller* ctrl, struct pci_func* func)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#779: FILE: drivers/pci/hotplug/cpqphp_pci.c:119:
+int cpqhp_unconfigure_device(struct pci_func* func)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000146733.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 2 warnings, 8 checks, 693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000146733.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
