WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#197: FILE: arch/x86/kernel/io_apic.c:132:
+	printk(KERN_DEBUG "  alloc irq_2_pin on cpu %d node %d\n", cpu, node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: arch/x86/kernel/io_apic.c:188:
+	BUG_ON(count > count_desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#302: FILE: arch/x86/kernel/io_apic.c:217:
+	printk(KERN_DEBUG "  alloc irq_cfg on cpu %d node %d\n", cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#317: FILE: arch/x86/kernel/io_apic.c:230:
+			printk(KERN_ERR "can not alloc irq_cfg\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#318: FILE: arch/x86/kernel/io_apic.c:231:
+			BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: arch/x86/kernel/io_apic.c:239:
+static void init_copy_irq_2_pin(struct irq_cfg *old_cfg, struct irq_cfg *cfg,
+				 int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: arch/x86/kernel/io_apic.c:299:
+void arch_init_copy_chip_data(struct irq_desc *old_desc,
+				 struct irq_desc *desc, int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#593: FILE: arch/x86/kernel/io_apic.c:588:
+			printk(KERN_ERR "can not alloc irq_2_pin to add %d - %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: arch/x86/kernel/io_apic.c:589:
+			printk(KERN_ERR "can not alloc irq_2_pin to add %d - %d\n",
+					apic, pin);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: arch/x86/kernel/io_apic.c:616:
+static void __init replace_pin_at_irq_cpu(struct irq_cfg *cfg, int cpu,
 				      int oldapic, int oldpin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: arch/x86/kernel/io_apic.c:639:
+static inline void io_apic_modify_irq(struct irq_cfg *cfg,
 				int mask_and, int mask_or,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: arch/x86/kernel/io_apic.c:687:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_LEVEL_TRIGGER,
 			IO_APIC_REDIR_MASKED, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: arch/x86/kernel/io_apic.c:693:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_MASKED,
 			IO_APIC_REDIR_LEVEL_TRIGGER, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#696: FILE: arch/x86/kernel/io_apic.c:702:
+	BUG_ON(!cfg);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#726: FILE: arch/x86/kernel/io_apic.c:729:
+}
+static void unmask_IO_APIC_irq(unsigned int irq)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->move_in_progress'
#762: FILE: arch/x86/kernel/io_apic.c:1255:
+	if ((cfg->move_in_progress) || cfg->move_cleanup_count)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: arch/x86/kernel/io_apic.c:1579:
+			setup_IO_APIC_irq(apic, pin, irq, desc,
 					irq_trigger(idx), irq_polarity(idx));

WARNING:LINE_SPACING: Missing a blank line after declarations
#912: FILE: arch/x86/kernel/io_apic.c:1729:
+		struct irq_pin_list *entry;
+		cfg = desc->chip_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1057: FILE: arch/x86/kernel/io_apic.c:2406:
+}
+#ifdef CONFIG_SPARSE_IRQ

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1232: FILE: arch/x86/kernel/io_apic.c:2646:
+}
+static void ack_apic_level(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1310: FILE: arch/x86/kernel/io_apic.c:2752:
+}
+static void unmask_lapic_irq(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1316: FILE: arch/x86/kernel/io_apic.c:2758:
+}
+static void ack_lapic_irq(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1519: FILE: arch/x86/kernel/io_apic.c:3365:
 }
+#ifdef CONFIG_SPARSE_IRQ

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#1609: FILE: arch/x86/kernel/io_apic.c:3522:
+	dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for MSI/MSI-X\n", irq, irq);

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#1847: FILE: arch/x86/kernel/io_apic.c:3895:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1848: FILE: arch/x86/kernel/io_apic.c:3896:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",
+				 irq, irq);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2119: FILE: drivers/pci/htirq.c:94:
+}
+void unmask_ht_irq(unsigned int irq)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2175: FILE: drivers/pci/intr_remapping.c:31:
+	printk(KERN_DEBUG "alloc irq_2_iommu on cpu %d node %d\n", cpu, node);

CHECK:CAMELCASE: Avoid CamelCase: <irq_2_iommuX>
#2218: FILE: drivers/pci/intr_remapping.c:73:
+static struct irq_2_iommu irq_2_iommuX[NR_IRQS];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2253: FILE: drivers/pci/intr_remapping.c:191:
+		printk(KERN_ERR "can't allocate irq_2_iommu\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2266: FILE: drivers/pci/intr_remapping.c:244:
+		printk(KERN_ERR "can't allocate irq_2_iommu\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2470: FILE: include/linux/irq.h:205:
+extern struct irq_desc *irq_to_desc(unsigned int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2471: FILE: include/linux/irq.h:206:
+extern struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2472: FILE: include/linux/irq.h:207:
+extern struct irq_desc *irq_to_desc_alloc(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2473: FILE: include/linux/irq.h:208:
+extern struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2474: FILE: include/linux/irq.h:209:
+extern void arch_early_irq_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2475: FILE: include/linux/irq.h:210:
+extern void arch_init_chip_data(struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2476: FILE: include/linux/irq.h:211:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2477: FILE: include/linux/irq.h:212:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,
+					struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2478: FILE: include/linux/irq.h:213:
+extern void arch_free_chip_data(struct irq_desc *old_desc, struct irq_desc *desc);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2490: FILE: include/linux/irq.h:221:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2490: FILE: include/linux/irq.h:221:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2492: FILE: include/linux/irq.h:223:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2492: FILE: include/linux/irq.h:223:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2510: FILE: include/linux/irq.h:241:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#2510: FILE: include/linux/irq.h:241:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2510: FILE: include/linux/irq.h:241:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2512: FILE: include/linux/irq.h:243:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2514: FILE: include/linux/irq.h:245:
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2516: FILE: include/linux/irq.h:247:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#2516: FILE: include/linux/irq.h:247:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2516: FILE: include/linux/irq.h:247:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2518: FILE: include/linux/irq.h:249:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2520: FILE: include/linux/irq.h:251:
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2575: FILE: include/linux/kernel_stat.h:32:
+       unsigned int irqs[NR_IRQS];$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2604: FILE: include/linux/kernel_stat.h:64:
+extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2834: FILE: kernel/irq/handle.c:59:
+void __init __attribute__((weak)) arch_early_irq_init(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2862: FILE: kernel/irq/handle.c:87:
+	printk(KERN_DEBUG "  alloc kstat_irqs on cpu %d node %d\n", cpu, node);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2894: FILE: kernel/irq/handle.c:119:
+void __attribute__((weak)) arch_init_chip_data(struct irq_desc *desc, int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2908: FILE: kernel/irq/handle.c:133:
+		printk(KERN_ERR "can not alloc kstat_irqs\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2909: FILE: kernel/irq/handle.c:134:
+		BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2916: FILE: kernel/irq/handle.c:141:
+static void init_copy_one_irq_desc(int irq, struct irq_desc *old_desc,
+		 struct irq_desc *desc, int cpu)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2941: FILE: kernel/irq/handle.c:166:
+#define SPARSEIRQHASH_SIZE          (1UL << SPARSEIRQHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2948: FILE: kernel/irq/handle.c:173:
+	[0 ... NR_IRQS_LEGACY-1] = {
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3035: FILE: kernel/irq/handle.c:260:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3036: FILE: kernel/irq/handle.c:261:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",
+		 irq, irq, cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3038: FILE: kernel/irq/handle.c:263:
+		printk(KERN_ERR "can not alloc irq_desc\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3039: FILE: kernel/irq/handle.c:264:
+		BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3066: FILE: kernel/irq/handle.c:291:
+static struct irq_desc *__real_move_irq_desc(struct irq_desc *old_desc,
+						int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3090: FILE: kernel/irq/handle.c:315:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3091: FILE: kernel/irq/handle.c:316:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",
+		 irq, irq, cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3093: FILE: kernel/irq/handle.c:318:
+		printk(KERN_ERR "can not get new irq_desc for moving\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3123: FILE: kernel/irq/handle.c:348:
+	printk(KERN_DEBUG "try to move irq_desc from cpu %d to %d\n", old_cpu, cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3153: FILE: kernel/irq/handle.c:384:
+}
+struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3157: FILE: kernel/irq/handle.c:388:
+}
+struct irq_desc *irq_to_desc_alloc(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3161: FILE: kernel/irq/handle.c:392:
+}
+struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3267: FILE: kernel/irq/handle.c:633:
+	struct irq_desc *desc = irq_to_desc(irq);
+	return desc->kstat_irqs[cpu];

CHECK:SPACING: No space is necessary after a cast
#3292: FILE: arch/x86/kernel/irq.c:113:
+	i = *(loff_t *) v;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3497: FILE: arch/x86/kernel/i8259.c:44:
+}
+static void disable_8259A_irq_desc(struct irq_desc **descp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3501: FILE: arch/x86/kernel/i8259.c:48:
+}
+static void enable_8259A_irq_desc(struct irq_desc **descp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3709: FILE: drivers/pci/msi.c:341:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, entry->msi_attrib.maskbits_mask,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3732: FILE: drivers/pci/msi.c:636:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, mask, ~mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3746: FILE: include/linux/msi.h:15:
+extern void mask_msi_irq_desc(struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3747: FILE: include/linux/msi.h:16:
+extern void unmask_msi_irq_desc(struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3754: FILE: include/linux/msi.h:23:
+extern void read_msi_msg_desc(struct irq_desc *desc, struct msi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3755: FILE: include/linux/msi.h:24:
+extern void write_msi_msg_desc(struct irq_desc *desc, struct msi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3768: FILE: arch/x86/include/asm/hpet.h:76:
+extern void hpet_msi_unmask_desc(struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3769: FILE: arch/x86/include/asm/hpet.h:77:
+extern void hpet_msi_mask_desc(struct irq_desc **descp);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3819: FILE: arch/x86/kernel/hpet.c:379:
+}
+void hpet_msi_mask(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3955: FILE: drivers/pci/intel-iommu.c:787:
+}
+void dmar_msi_mask(unsigned int irq)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3975: FILE: include/linux/dmar.h:126:
+extern void dmar_msi_unmask_desc(struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3976: FILE: include/linux/dmar.h:127:
+extern void dmar_msi_mask_desc(struct irq_desc **descp);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203739.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 32 warnings, 58 checks, 3563 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203739.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
