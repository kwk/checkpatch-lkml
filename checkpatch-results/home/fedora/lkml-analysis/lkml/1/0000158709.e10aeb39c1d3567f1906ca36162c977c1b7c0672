WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
Credits to Zhao Lei <zhaolei@cn.fujitsu.com> for a lot of fixes and extensions

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: ltt/ltt-tracer.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#75: FILE: ltt/ltt-tracer.c:2:
+ * ltt/ltt-tracer.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: ltt/ltt-tracer.c:5:
+ * ^I^IMathieu Desnoyers (mathieu.desnoyers@polymtl.ca)$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#113: FILE: ltt/ltt-tracer.c:40:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: ltt/ltt-tracer.c:48:
+notrace int ltt_filter_control_default(enum ltt_filter_control_msg msg,
+		struct ltt_trace_struct *trace)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: ltt/ltt-tracer.c:196:
+int ltt_module_register(enum ltt_module_function name, void *function,
+		struct module *owner)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ltt_run_filter_owner"
#282: FILE: ltt/ltt-tracer.c:209:
+		if (ltt_run_filter_owner != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ltt_filter_control_owner"
#290: FILE: ltt/ltt-tracer.c:217:
+		if (ltt_filter_control_owner != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ltt_statedump_owner"
#300: FILE: ltt/ltt-tracer.c:227:
+		if (ltt_statedump_owner != NULL) {

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#327: FILE: ltt/ltt-tracer.c:254:
+		synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#339: FILE: ltt/ltt-tracer.c:266:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: ltt/ltt-tracer.c:311:
+static inline int is_channel_overwrite(enum ltt_channels chan,
+	enum trace_mode mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: ltt/ltt-tracer.c:346:
+void notrace ltt_write_trace_header(struct ltt_trace_struct *trace,
+		struct ltt_subbuffer_header *header)

WARNING:LINE_SPACING: Missing a blank line after declarations
#450: FILE: ltt/ltt-tracer.c:377:
+	struct ltt_trace_struct *trace;
+	rcu_read_lock_sched();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#538: FILE: ltt/ltt-tracer.c:465:
+		printk(KERN_ERR	"LTT : Trace name %s already used.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: ltt/ltt-tracer.c:466:
+		printk(KERN_ERR	"LTT : Trace name %s already used.\n",
+				trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#545: FILE: ltt/ltt-tracer.c:472:
+		printk(KERN_ERR	"LTT : Trace name %s already used.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: ltt/ltt-tracer.c:473:
+		printk(KERN_ERR	"LTT : Trace name %s already used.\n",
+				trace_name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_trace)...) over kzalloc(sizeof(struct ltt_trace_struct)...)
#551: FILE: ltt/ltt-tracer.c:478:
+	new_trace = kzalloc(sizeof(struct ltt_trace_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#553: FILE: ltt/ltt-tracer.c:480:
+		printk(KERN_ERR

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#553: FILE: ltt/ltt-tracer.c:480:
+	if (!new_trace) {
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#563: FILE: ltt/ltt-tracer.c:490:
+		printk(KERN_ERR

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#585: FILE: ltt/ltt-tracer.c:512:
+		chantype = get_channel_type_from_name(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#603: FILE: ltt/ltt-tracer.c:530:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: ltt/ltt-tracer.c:534:
+	int ret;
+	ltt_lock_traces();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#631: FILE: ltt/ltt-tracer.c:558:
+		printk(KERN_ERR "LTT : Trace not found %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#643: FILE: ltt/ltt-tracer.c:570:
+		printk(KERN_ERR	"LTT : Transport %s is not present.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: ltt/ltt-tracer.c:571:
+		printk(KERN_ERR	"LTT : Transport %s is not present.\n",
+			trace_type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: ltt/ltt-tracer.c:585:
+int ltt_trace_set_channel_subbufsize(const char *trace_name,
+		const char *channel_name, unsigned int size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#668: FILE: ltt/ltt-tracer.c:595:
+		printk(KERN_ERR "LTT : Trace not found %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#675: FILE: ltt/ltt-tracer.c:602:
+		printk(KERN_ERR "LTT : Channel %s not found\n", channel_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: ltt/ltt-tracer.c:615:
+int ltt_trace_set_channel_subbufcount(const char *trace_name,
+		const char *channel_name, unsigned int cnt)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#698: FILE: ltt/ltt-tracer.c:625:
+		printk(KERN_ERR "LTT : Trace not found %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#705: FILE: ltt/ltt-tracer.c:632:
+		printk(KERN_ERR "LTT : Channel %s not found\n", channel_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: ltt/ltt-tracer.c:645:
+int ltt_trace_set_channel_enable(const char *trace_name,
+		const char *channel_name, unsigned int enable)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: ltt/ltt-tracer.c:655:
+		printk(KERN_ERR "LTT : Trace not found %s\n", trace_name);

WARNING:TYPO_SPELLING: 'Datas' may be misspelled - perhaps 'Data'?
#734: FILE: ltt/ltt-tracer.c:661:
+	 * Datas in metadata channel(marker info) is necessary to be able to
 	   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#738: FILE: ltt/ltt-tracer.c:665:
+		printk(KERN_ERR "LTT : Trying to disable metadata channel\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#745: FILE: ltt/ltt-tracer.c:672:
+		printk(KERN_ERR "LTT : Channel %s not found\n", channel_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: ltt/ltt-tracer.c:686:
+int ltt_trace_set_channel_overwrite(const char *trace_name,
+		const char *channel_name, unsigned int overwrite)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#769: FILE: ltt/ltt-tracer.c:696:
+		printk(KERN_ERR "LTT : Trace not found %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#781: FILE: ltt/ltt-tracer.c:708:
+		printk(KERN_ERR "LTT : Trying to set metadata channel to "

WARNING:SPLIT_STRING: quoted string split across lines
#782: FILE: ltt/ltt-tracer.c:709:
+		printk(KERN_ERR "LTT : Trying to set metadata channel to "
+				"overwrite mode\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#789: FILE: ltt/ltt-tracer.c:716:
+		printk(KERN_ERR "LTT : Channel %s not found\n", channel_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#815: FILE: ltt/ltt-tracer.c:742:
+		printk(KERN_ERR "LTT : Trace not found %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#828: FILE: ltt/ltt-tracer.c:755:
+		printk(KERN_ERR "LTT : Transport is not set.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#833: FILE: ltt/ltt-tracer.c:760:
+		printk(KERN_ERR	"LTT : Can't lock transport module.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#841: FILE: ltt/ltt-tracer.c:768:
+		printk(KERN_ERR	"LTT : Can't create dir for trace %s.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: ltt/ltt-tracer.c:769:
+		printk(KERN_ERR	"LTT : Can't create dir for trace %s.\n",
+			trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#869: FILE: ltt/ltt-tracer.c:796:
+			printk(KERN_ERR	"LTT : Can't create channel %s.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: ltt/ltt-tracer.c:797:
+			printk(KERN_ERR	"LTT : Can't create channel %s.\n",
+				channel_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: ltt/ltt-tracer.c:805:
+		mod_timer(&ltt_async_wakeup_timer,
+				jiffies + LTT_PERCPU_TIMER_INTERVAL);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#881: FILE: ltt/ltt-tracer.c:808:
+	synchronize_sched();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: ltt/ltt-tracer.c:835:
+static int ltt_trace_create(const char *trace_name, const char *trace_type,
+		enum trace_mode mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#935: FILE: ltt/ltt-tracer.c:862:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#940: FILE: ltt/ltt-tracer.c:867:
+		printk(KERN_ERR

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#948: FILE: ltt/ltt-tracer.c:875:
+	synchronize_sched();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1002: FILE: ltt/ltt-tracer.c:929:
+		int ret = 0;
+		__wait_event_interruptible(trace->kref_wq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1003: FILE: ltt/ltt-tracer.c:930:
+		__wait_event_interruptible(trace->kref_wq,
+			(atomic_read(&trace->kref.refcount) == 1), ret);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#1050: FILE: ltt/ltt-tracer.c:977:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1055: FILE: ltt/ltt-tracer.c:982:
+		printk(KERN_INFO "LTT : Tracing already active for trace %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1056: FILE: ltt/ltt-tracer.c:983:
+		printk(KERN_INFO "LTT : Tracing already active for trace %s\n",
+				trace->trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1059: FILE: ltt/ltt-tracer.c:986:
+		printk(KERN_ERR "LTT : Can't lock filter module.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1099: FILE: ltt/ltt-tracer.c:1026:
+		printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#1120: FILE: ltt/ltt-tracer.c:1047:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1125: FILE: ltt/ltt-tracer.c:1052:
+		printk(KERN_INFO "LTT : Tracing not active for trace %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1126: FILE: ltt/ltt-tracer.c:1053:
+		printk(KERN_INFO "LTT : Tracing not active for trace %s\n",
+				trace->trace_name);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1130: FILE: ltt/ltt-tracer.c:1057:
+		synchronize_sched(); /* Wait for each tracing to be finished */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1166: FILE: ltt/ltt-tracer.c:1093:
+	printk(KERN_ALERT "ltt_control : trace %s\n", trace_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ltt_control', this function's name, in a string
#1166: FILE: ltt/ltt-tracer.c:1093:
+	printk(KERN_ALERT "ltt_control : trace %s\n", trace_name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1169: FILE: ltt/ltt-tracer.c:1096:
+		printk(KERN_DEBUG "Start tracing %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1173: FILE: ltt/ltt-tracer.c:1100:
+		printk(KERN_DEBUG "Stop tracing %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1177: FILE: ltt/ltt-tracer.c:1104:
+		printk(KERN_DEBUG "Creating trace %s\n", trace_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1179: FILE: ltt/ltt-tracer.c:1106:
+		err = ltt_trace_create(trace_name, trace_type,
+			args.new_trace.mode,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1188: FILE: ltt/ltt-tracer.c:1115:
+		printk(KERN_DEBUG "Destroying trace %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1206: FILE: ltt/ltt-tracer.c:1133:
+	printk(KERN_DEBUG "ltt_filter_control : trace %s\n", trace_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ltt_filter_control', this function's name, in a string
#1206: FILE: ltt/ltt-tracer.c:1133:
+	printk(KERN_DEBUG "ltt_filter_control : trace %s\n", trace_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#1209: FILE: ltt/ltt-tracer.c:1136:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1210: FILE: ltt/ltt-tracer.c:1137:
+		printk(KERN_ALERT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1221: FILE: ltt/ltt-tracer.c:1148:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1226: FILE: ltt/ltt-tracer.c:1153:
+		printk(KERN_DEBUG

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1261: FILE: ltt/ltt-tracer.c:1188:
+	synchronize_sched();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1263: FILE: ltt/ltt-tracer.c:1190:
+	 * because no readers are left. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158709.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 54 warnings, 30 checks, 1210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158709.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
