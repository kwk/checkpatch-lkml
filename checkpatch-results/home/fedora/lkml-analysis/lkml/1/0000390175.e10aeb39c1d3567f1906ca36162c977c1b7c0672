WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#95: FILE: block/ll_rw_blk.c:1353:
+	rq_for_each_segment(bvec, rq, iter) {
 			int nbytes = bvec->bv_len;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#169: FILE: drivers/block/floppy.c:2461:
+	rq_for_each_segment(bv, current_req, iter) {
 			if (page_address(bv->bv_page) + bv->bv_offset !=

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#198: FILE: drivers/block/floppy.c:2529:
+	rq_for_each_segment(bv, current_req, iter) {
 			if (!remaining)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#227: FILE: drivers/block/lguest_blk.c:149:
+	rq_for_each_segment(bvec, req, iter) {
[...]
 			BUG_ON(i == LGUEST_MAX_DMA_SECTIONS);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#266: FILE: drivers/block/nbd.c:214:
+		rq_for_each_segment(bvec, req, iter) {
 				flags = 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#293: FILE: drivers/block/nbd.c:321:
+		rq_for_each_segment(bvec, req, iter) {
 				result = sock_recv_bvec(sock, bvec);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#389: FILE: drivers/block/xen-blkfront.c:188:
+	rq_for_each_segment(bvec, req, iter) {
 			BUG_ON(ring_req->nr_segments

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#418: FILE: drivers/ide/ide-floppy.c:614:
+	rq_for_each_segment(bvec, rq, iter) {
 			if (!bcount)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#444: FILE: drivers/ide/ide-floppy.c:646:
+	rq_for_each_segment(bvec, rq, iter) {
 			if (!bcount)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#482: FILE: drivers/s390/block/dasd_diag.c:494:
+	rq_for_each_segment(bv, req, iter) {
 			if (bv->bv_len & (blksize - 1))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#497: FILE: drivers/s390/block/dasd_diag.c:515:
+	rq_for_each_segment(bv, req, iter) {
 			dst = page_address(bv->bv_page) + bv->bv_offset;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#536: FILE: drivers/s390/block/dasd_eckd.c:1208:
+	rq_for_each_segment(bv, req, iter) {
 			if (bv->bv_len & (blksize - 1))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#607: FILE: drivers/s390/block/dasd_fba.c:259:
+	rq_for_each_segment(bv, req, iter) {
 			if (bv->bv_len & (blksize - 1))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#687: FILE: drivers/s390/char/tape_34xx.c:1175:
+	rq_for_each_segment(bv, req, iter) {
 			dst = kmap(bv->bv_page) + bv->bv_offset;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#736: FILE: drivers/s390/char/tape_3590.c:654:
+	rq_for_each_segment(bv, req, iter) {
 			dst = page_address(bv->bv_page) + bv->bv_offset;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#763: FILE: include/linux/blkdev.h:646:
+#define __rq_for_each_bio(_bio, rq)	\
 	if ((rq->bio))			\
 		for (_bio = (rq)->bio; _bio; _bio = _bio->bi_next)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_bio' - possible side-effects?
#763: FILE: include/linux/blkdev.h:646:
+#define __rq_for_each_bio(_bio, rq)	\
 	if ((rq->bio))			\
 		for (_bio = (rq)->bio; _bio; _bio = _bio->bi_next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#763: FILE: include/linux/blkdev.h:646:
+#define __rq_for_each_bio(_bio, rq)	\
 	if ((rq->bio))			\
 		for (_bio = (rq)->bio; _bio; _bio = _bio->bi_next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#763: FILE: include/linux/blkdev.h:646:
+#define __rq_for_each_bio(_bio, rq)	\
 	if ((rq->bio))			\
 		for (_bio = (rq)->bio; _bio; _bio = _bio->bi_next)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#767: FILE: include/linux/blkdev.h:650:
+#define rq_for_each_segment(bvl, _rq, _iter)			\
+	__rq_for_each_bio(_iter.bio, _rq)			\
+		bio_for_each_segment(bvl, _iter.bio, _iter.i)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_iter' - possible side-effects?
#767: FILE: include/linux/blkdev.h:650:
+#define rq_for_each_segment(bvl, _rq, _iter)			\
+	__rq_for_each_bio(_iter.bio, _rq)			\
+		bio_for_each_segment(bvl, _iter.bio, _iter.i)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_iter' - possible side-effects?
#771: FILE: include/linux/blkdev.h:654:
+#define rq_iter_last(rq, _iter)					\
+		(_iter.bio->bi_next == NULL && _iter.i == _iter.bio->bi_vcnt-1)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#772: FILE: include/linux/blkdev.h:655:
+		(_iter.bio->bi_next == NULL && _iter.i == _iter.bio->bi_vcnt-1)
 		                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_iter.bio->bi_next"
#772: FILE: include/linux/blkdev.h:655:
+		(_iter.bio->bi_next == NULL && _iter.i == _iter.bio->bi_vcnt-1)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390175.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 29 warnings, 7 checks, 619 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390175.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
