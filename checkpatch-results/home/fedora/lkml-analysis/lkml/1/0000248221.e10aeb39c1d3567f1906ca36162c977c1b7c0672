WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#162: FILE: include/asm-generic/bug.h:25:
+	printk("BUG: failure at %s:%d/%s()!\n", __FILE__, __LINE__, __func__); \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#175: FILE: include/asm-powerpc/ptrace.h:132:
+		printk(KERN_CRIT "%s: partial register set\n", __func__); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#201: FILE: include/asm-x86/mach-es7000/mach_apic.h:174:
+				printk ("%s: Not a valid mask!\n",__func__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: include/asm-x86/mach-es7000/mach_apic.h:174:
+				printk ("%s: Not a valid mask!\n",__func__);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/asm-x86/mach-es7000/mach_apic.h:174:
+				printk ("%s: Not a valid mask!\n",__func__);
 				                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#214: FILE: include/asm-x86/mach-summit/mach_apic.h:163:
+				printk ("%s: Not a valid mask!\n",__func__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: include/asm-x86/mach-summit/mach_apic.h:163:
+				printk ("%s: Not a valid mask!\n",__func__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/asm-x86/mach-summit/mach_apic.h:163:
+				printk ("%s: Not a valid mask!\n",__func__);
 				                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#308: FILE: include/linux/jbd.h:987:
+	printk (KERN_ERR "JBD unimplemented function %s\n", __func__); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#308: FILE: include/linux/jbd.h:987:
+	printk (KERN_ERR "JBD unimplemented function %s\n", __func__); \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: include/linux/jbd2.h:1142:
+	printk (KERN_ERR "JBD unimplemented function %s\n", __func__); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#330: FILE: include/linux/jbd2.h:1142:
+	printk (KERN_ERR "JBD unimplemented function %s\n", __func__); \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#358: FILE: include/linux/libata.h:63:
+#define DPRINTK(fmt, args...) printk(KERN_ERR "%s: " fmt, __func__, ## args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#361: FILE: include/linux/libata.h:65:
+#define VPRINTK(fmt, args...) printk(KERN_ERR "%s: " fmt, __func__, ## args)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#370: FILE: include/linux/libata.h:74:
+#define BPRINTK(fmt, args...) if (ap->flags & ATA_FLAG_DEBUGMSG) printk(KERN_ERR "%s: " fmt, __func__, ## args)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#370: FILE: include/linux/libata.h:74:
+#define BPRINTK(fmt, args...) if (ap->flags & ATA_FLAG_DEBUGMSG) printk(KERN_ERR "%s: " fmt, __func__, ## args)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#370: FILE: include/linux/libata.h:74:
+#define BPRINTK(fmt, args...) if (ap->flags & ATA_FLAG_DEBUGMSG) printk(KERN_ERR "%s: " fmt, __func__, ## args)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#396: FILE: include/linux/reiserfs_fs.h:90:
+		  in_interrupt() ? -1 : task_pid_nr(current), __LINE__ , __func__ , ##args )
 		                                                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#396: FILE: include/linux/reiserfs_fs.h:90:
+		  in_interrupt() ? -1 : task_pid_nr(current), __LINE__ , __func__ , ##args )
 		                                                                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#396: FILE: include/linux/reiserfs_fs.h:90:
+		  in_interrupt() ? -1 : task_pid_nr(current), __LINE__ , __func__ , ##args )

WARNING:LONG_LINE_COMMENT: line length of 192 exceeds 100 columns
#422: FILE: include/media/saa7146.h:27:
+//#define DEBUG_PROLOG printk("(0x%08x)(0x%08x) %s: %s(): ",(dev==0?-1:(dev->mem==0?-1:saa7146_read(dev,RPS_ADDR0))),(dev==0?-1:(dev->mem==0?-1:saa7146_read(dev,IER))),KBUILD_MODNAME,__func__)

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#429: FILE: include/media/saa7146.h:33:
+#define DEBUG_PROLOG printk("%s: %s(): ",KBUILD_MODNAME,__func__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#429: FILE: include/media/saa7146.h:33:
+#define DEBUG_PROLOG printk("%s: %s(): ",KBUILD_MODNAME,__func__)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#429: FILE: include/media/saa7146.h:33:
+#define DEBUG_PROLOG printk("%s: %s(): ",KBUILD_MODNAME,__func__)
                                                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#442: FILE: include/net/9p/9p.h:64:
+		format , __func__, task_pid_nr(current) , ## arg); \
 		       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#442: FILE: include/net/9p/9p.h:64:
+		format , __func__, task_pid_nr(current) , ## arg); \
 		                                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#451: FILE: include/net/9p/9p.h:79:
+		format , __func__, task_pid_nr(current), ## arg); \
 		       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#465: FILE: include/net/bluetooth/bluetooth.h:57:
+#define BT_DBG(fmt, arg...)  printk(KERN_INFO "%s: " fmt "\n" , __func__ , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#465: FILE: include/net/bluetooth/bluetooth.h:57:
+#define BT_DBG(fmt, arg...)  printk(KERN_INFO "%s: " fmt "\n" , __func__ , ## arg)
                                                               ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#465: FILE: include/net/bluetooth/bluetooth.h:57:
+#define BT_DBG(fmt, arg...)  printk(KERN_INFO "%s: " fmt "\n" , __func__ , ## arg)
                                                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#466: FILE: include/net/bluetooth/bluetooth.h:58:
+#define BT_ERR(fmt, arg...)  printk(KERN_ERR  "%s: " fmt "\n" , __func__ , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#466: FILE: include/net/bluetooth/bluetooth.h:58:
+#define BT_ERR(fmt, arg...)  printk(KERN_ERR  "%s: " fmt "\n" , __func__ , ## arg)
                                                               ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#466: FILE: include/net/bluetooth/bluetooth.h:58:
+#define BT_ERR(fmt, arg...)  printk(KERN_ERR  "%s: " fmt "\n" , __func__ , ## arg)
                                                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: include/net/ieee80211.h:117:
+         in_interrupt() ? 'I' : 'U', __func__ , ## args); } while (0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: include/net/ieee80211.h:117:
+         in_interrupt() ? 'I' : 'U', __func__ , ## args); } while (0)$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#479: FILE: include/net/ieee80211.h:117:
+         in_interrupt() ? 'I' : 'U', __func__ , ## args); } while (0)
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#512: FILE: include/net/irda/irda.h:75:
+		__FILE__,__func__,__LINE__,(#expr) ); \
 		        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#512: FILE: include/net/irda/irda.h:75:
+		__FILE__,__func__,__LINE__,(#expr) ); \
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#512: FILE: include/net/irda/irda.h:75:
+		__FILE__,__func__,__LINE__,(#expr) ); \
 		                          ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#512: FILE: include/net/irda/irda.h:75:
+		__FILE__,__func__,__LINE__,(#expr) ); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#538: FILE: include/video/cyblafb.h:7:
+#define debug(f,a...)	printk("%s:" f,  __func__ , ## a);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#538: FILE: include/video/cyblafb.h:7:
+#define debug(f,a...)	printk("%s:" f,  __func__ , ## a);
                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#538: FILE: include/video/cyblafb.h:7:
+#define debug(f,a...)	printk("%s:" f,  __func__ , ## a);
                      	                          ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#538: FILE: include/video/cyblafb.h:7:
+#define debug(f,a...)	printk("%s:" f,  __func__ , ## a);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248221.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 21 warnings, 0 checks, 330 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248221.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
