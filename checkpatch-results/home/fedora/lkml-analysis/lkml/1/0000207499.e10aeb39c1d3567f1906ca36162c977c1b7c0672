ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#54: FILE: mm/biocontrol.c:412:
+struct bio_group* create_bio_group(struct bio_cgroup *biocg,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#55: FILE: mm/biocontrol.c:413:
+struct bio_group* create_bio_group(struct bio_cgroup *biocg,
+						struct request_queue *q)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*biog)...) over kzalloc(sizeof(struct bio_group)...)
#60: FILE: mm/biocontrol.c:418:
+	biog = kzalloc(sizeof(struct bio_group), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#79: FILE: mm/biocontrol.c:437:
+void* alloc_biog_io(void)

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#90: FILE: mm/biocontrol.c:448:
+ * Upon succesful completion of bio, this function starts the inactive timer
         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#103: FILE: mm/biocontrol.c:461:
+	BUG_ON(!biog);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#107: FILE: mm/biocontrol.c:465:
+	BUG_ON(!q);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: mm/biocontrol.c:474:
+		mod_timer(&biog->biog_inactive_timer,
+			jiffies + msecs_to_jiffies(q->biogroup_idletime));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: mm/biocontrol.c:489:
+unsigned long calculate_nr_tokens(struct bio_group *biog,
+					struct request_queue *q)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#136: FILE: mm/biocontrol.c:494:
+	nr_tokens = total_slice * biog->biocg->shares/q->total_weight;
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#138: FILE: mm/biocontrol.c:496:
+	BUG_ON(!nr_tokens);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: mm/biocontrol.c:527:
+void remove_bio_group_from_rbtree(struct bio_group *biog,
+					struct request_queue *q)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: mm/biocontrol.c:551:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: mm/biocontrol.c:553:
+void insert_bio_group_into_rbtree(struct bio_group *biog,
+					struct request_queue *q)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: mm/biocontrol.c:562:
+		BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#212: FILE: mm/biocontrol.c:570:
+		if (biog->key < __biog->key)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#214: FILE: mm/biocontrol.c:572:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#239: FILE: mm/biocontrol.c:597:
+	 * is off the tree */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: mm/biocontrol.c:615:
+	 * biogs */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#284: FILE: mm/biocontrol.c:642:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: mm/biocontrol.c:674:
+	BUG_ON(!biog);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: mm/biocontrol.c:675:
+	BUG_ON(!bio);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'biog->credit_tokens > 0'
#330: FILE: mm/biocontrol.c:688:
+	if ((biog->credit_tokens > 0) && (biog->credit_tokens > nr_sectors)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'biog->credit_tokens > nr_sectors'
#330: FILE: mm/biocontrol.c:688:
+	if ((biog->credit_tokens > 0) && (biog->credit_tokens > nr_sectors)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#353: FILE: mm/biocontrol.c:711:
+		 * finish in case it fires */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#373: FILE: mm/biocontrol.c:731:
+	 * to get a reference to it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#435: FILE: mm/biocontrol.c:793:
+	 * queued bios should get a chance to dispatch first */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: mm/biocontrol.c:820:
+unsigned long __bio_group_try_to_dispatch(struct bio_group *biog,
+							struct bio *bio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: mm/biocontrol.c:825:
+	BUG_ON(!biog);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: mm/biocontrol.c:826:
+	BUG_ON(!bio);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: mm/biocontrol.c:829:
+	BUG_ON(!q);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: mm/biocontrol.c:852:
+	BUG_ON(!q);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: mm/biocontrol.c:871:
+void make_release_bio_list(struct bio_group *biog,
+					struct bio_list *release_list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: mm/biocontrol.c:888:
+		BUG_ON(!bio);

WARNING:RETURN_VOID: void function return statements are not generally useful
#553: FILE: mm/biocontrol.c:911:
+	return;
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#567: FILE: mm/biocontrol.c:925:
+	BUG_ON(!q);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: mm/biocontrol.c:930:
+	BUG_ON(!bio_group_on_queue(biog));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#573: FILE: mm/biocontrol.c:931:
+	BUG_ON(biog->nr_bio);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#575: FILE: mm/biocontrol.c:933:
+	BUG_ON((biog->bio_group_flags > 7));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->nr_biog'
#587: FILE: mm/biocontrol.c:945:
+	if ((q->nr_biog) && should_start_new_token_slice(q))

WARNING:RETURN_VOID: void function return statements are not generally useful
#594: FILE: mm/biocontrol.c:952:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#614: FILE: mm/biocontrol.c:972:
+	while (1) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: mm/biocontrol.c:983:
+				queue_delayed_work(q->biogroup_workqueue,
+							&q->biogroup_work, 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#631: FILE: mm/biocontrol.c:989:
+		BUG_ON(!biog);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: mm/biocontrol.c:997:
+				queue_delayed_work(q->biogroup_workqueue,
+						&q->biogroup_work, 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: mm/biocontrol.c:1011:
+		BUG_ON(!bio);

WARNING:RETURN_VOID: void function return statements are not generally useful
#668: FILE: mm/biocontrol.c:1026:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#694: FILE: mm/biocontrol.c:1052:
+{
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#701: FILE: mm/biocontrol.c:1059:
+	 * Let it pass through unconditionally. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#709: FILE: mm/biocontrol.c:1067:
+	BUG_ON(!biocg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: block/genhd.c:444:
+static ssize_t disk_biogroup_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: block/genhd.c:453:
+static ssize_t disk_biogroup_store(struct device *dev,
+			       struct device_attribute *attr,

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#793: FILE: block/genhd.c:460:
+	if (count > 0 && sscanf(buf, "%d", &i) > 0) {
+		spin_lock_irq(q->queue_lock);
+		if (i)
+			queue_flag_set(QUEUE_FLAG_BIOG_ENABLED, q);
+		else
+			queue_flag_clear(QUEUE_FLAG_BIOG_ENABLED, q);
+
+		spin_unlock_irq(q->queue_lock);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: block/genhd.c:473:
+static ssize_t disk_newslice_count_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: block/genhd.c:482:
+static ssize_t disk_newslice_count_store(struct device *dev,
+			       struct device_attribute *attr,

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#823: FILE: block/genhd.c:490:
+	if (count > 0 && sscanf(buf, "%d", &i) > 0) {
+		spin_lock_irqsave(q->queue_lock, flags);
+			q->newslice_count = i;
+		spin_unlock_irqrestore(q->queue_lock, flags);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: block/genhd.c:499:
+static ssize_t disk_idletime_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: block/genhd.c:508:
+static ssize_t disk_idletime_store(struct device *dev,
+			       struct device_attribute *attr,

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#848: FILE: block/genhd.c:515:
+	if (count > 0 && sscanf(buf, "%d", &i) > 0) {
+		spin_lock_irq(q->queue_lock);
+		if (i)
+			q->biogroup_idletime = i;
+		else
+			q->biogroup_idletime = 0;
+
+		spin_unlock_irq(q->queue_lock);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: block/genhd.c:528:
+static ssize_t disk_deftoken_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: block/genhd.c:537:
+static ssize_t disk_deftoken_store(struct device *dev,
+			       struct device_attribute *attr,

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#877: FILE: block/genhd.c:544:
+	if (count > 0 && sscanf(buf, "%d", &i) > 0) {
+		spin_lock_irq(q->queue_lock);
+		if (i) {
+			if (i > 0x30)
+				q->biogroup_deftoken = i;
+		} else
+			q->biogroup_deftoken = 0;
+
+		spin_unlock_irq(q->queue_lock);
+	}

CHECK:BRACES: braces {} should be used on all arms of this statement
#879: FILE: block/genhd.c:546:
+		if (i) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#882: FILE: block/genhd.c:549:
+		} else

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'disk_biogroup_show' to 'biogroup_show' 'disk_biogroup_store' to 'biogroup_store'
#897: FILE: block/genhd.c:641:
+static DEVICE_ATTR(biogroup, S_IRUGO | S_IWUSR, disk_biogroup_show, disk_biogroup_store);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#897: FILE: block/genhd.c:641:
+static DEVICE_ATTR(biogroup, S_IRUGO | S_IWUSR, disk_biogroup_show, disk_biogroup_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'disk_idletime_show' to 'idletime_show' 'disk_idletime_store' to 'idletime_store'
#898: FILE: block/genhd.c:642:
+static DEVICE_ATTR(idletime, S_IRUGO | S_IWUSR, disk_idletime_show, disk_idletime_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#898: FILE: block/genhd.c:642:
+static DEVICE_ATTR(idletime, S_IRUGO | S_IWUSR, disk_idletime_show, disk_idletime_store);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'disk_deftoken_show' to 'deftoken_show' 'disk_deftoken_store' to 'deftoken_store'
#899: FILE: block/genhd.c:643:
+static DEVICE_ATTR(deftoken, S_IRUGO | S_IWUSR, disk_deftoken_show, disk_deftoken_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#899: FILE: block/genhd.c:643:
+static DEVICE_ATTR(deftoken, S_IRUGO | S_IWUSR, disk_deftoken_show, disk_deftoken_store);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#900: FILE: block/genhd.c:644:
+static DEVICE_ATTR(newslice_count, S_IRUGO | S_IWUSR, disk_newslice_count_show, disk_newslice_count_store);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'disk_newslice_count_show' to 'newslice_count_show' 'disk_newslice_count_store' to 'newslice_count_store'
#900: FILE: block/genhd.c:644:
+static DEVICE_ATTR(newslice_count, S_IRUGO | S_IWUSR, disk_newslice_count_show, disk_newslice_count_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#900: FILE: block/genhd.c:644:
+static DEVICE_ATTR(newslice_count, S_IRUGO | S_IWUSR, disk_newslice_count_show, disk_newslice_count_store);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#947: FILE: include/linux/blkdev.h:318:
+	 * considered no more contending for the bandwidth. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#952: FILE: include/linux/blkdev.h:323:
+	 * suffifiet tokens */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1046: FILE: include/linux/biocontrol.h:52:
+	spinlock_t	bio_group_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1054: FILE: include/linux/biocontrol.h:60:
+	 * with */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: include/linux/biocontrol.h:188:
+static inline void bio_group_flag_clear(unsigned int flag,
+						struct bio_group *biog)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: include/linux/biocontrol.h:194:
+static inline int bio_group_flag_test_and_clear(unsigned int flag,
+					    struct bio_group *biog)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1128: FILE: include/linux/biocontrol.h:205:
+static inline int bio_group_flag_test_and_set(unsigned int flag,
+					  struct bio_group *biog)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207499.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 44 warnings, 34 checks, 1077 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207499.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
