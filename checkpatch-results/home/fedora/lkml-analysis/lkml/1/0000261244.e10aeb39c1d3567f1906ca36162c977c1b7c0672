CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: mm/memcontrol.c:164:
 };
+#define PAGE_CGROUP_FLAG_ACTIVE    (0x1)	/* page is active in this cgroup */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: mm/memcontrol.c:591:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#213: FILE: mm/memcontrol.c:685:
 	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED)
+	    && ((pc->flags & (PAGE_CGROUP_FLAG_FILE | PAGE_CGROUP_FLAG_SHMEM))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#214: FILE: mm/memcontrol.c:686:
+	    && ((pc->flags & (PAGE_CGROUP_FLAG_FILE | PAGE_CGROUP_FLAG_SHMEM))
+		|| page_mapped(page)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: include/linux/pagemap.h:268:
+int add_to_page_cache_nocharge(struct page *page, struct address_space *mapping,
+				pgoff_t index, gfp_t gfp_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: include/linux/pagemap.h:271:
+static inline int add_to_page_cache_nocharge(struct page *page,
+				struct address_space *mapping, pgoff_t index,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: mm/filemap.c:445:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: mm/filemap.c:503:
+int add_to_page_cache(struct page *page, struct address_space *mapping,
+		pgoff_t offset, gfp_t gfp_mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: mm/filemap.c:509:
+		error = add_to_page_cache_nocharge(page, mapping, offset,
+						  gfp_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: mm/shmem.c:944:
+		error = add_to_page_cache_nocharge(page, inode->i_mapping, idx,
 					GFP_NOWAIT);

CHECK:BRACES: Unbalanced braces around else statement
#391: FILE: mm/shmem.c:967:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: mm/shmem.c:1405:
+				ret = add_to_page_cache_nocharge(filepage,
+						mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: mm/hugetlb.c:1817:
+			err = add_to_page_cache_nocharge(page, mapping,
+						idx, GFP_KERNEL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 12 checks, 321 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
