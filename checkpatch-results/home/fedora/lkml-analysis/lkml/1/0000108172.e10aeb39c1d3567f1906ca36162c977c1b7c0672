WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: arch/arm/plat-mxc/include/mach/spi.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#103: FILE: drivers/spi/Kconfig:119:
+config SPI_IMX
+	tristate "Freescale i.MX SPI controllers"
+	depends on ARCH_MXC
+	select SPI_BITBANG
+	help
+	  This enables using the Freescale i.MX SPI controllers in master
+	  mode.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: drivers/spi/mxc_spi.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#148: FILE: drivers/spi/mxc_spi.c:17:
+ * 51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:BIT_MACRO: Prefer using the BIT macro
#179: FILE: drivers/spi/mxc_spi.c:48:
+#define MXC_INT_RR	(1 << 0) /* Receive data ready interrupt */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#180: FILE: drivers/spi/mxc_spi.c:49:
+#define MXC_INT_TE	(1 << 1) /* Transmit FIFO empty interrupt */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mxc_spi_data *' should also have an identifier name
#200: FILE: drivers/spi/mxc_spi.c:69:
+	void (*tx)(struct mxc_spi_data *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mxc_spi_data *' should also have an identifier name
#201: FILE: drivers/spi/mxc_spi.c:70:
+	void (*rx)(struct mxc_spi_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mxc_spi_data *' should also have an identifier name
#207: FILE: drivers/spi/mxc_spi.c:76:
+	void (*intctrl)(struct mxc_spi_data *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#207: FILE: drivers/spi/mxc_spi.c:76:
+	void (*intctrl)(struct mxc_spi_data *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mxc_spi_data *' should also have an identifier name
#208: FILE: drivers/spi/mxc_spi.c:77:
+	int (*config)(struct mxc_spi_data *, struct mxc_spi_config *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mxc_spi_config *' should also have an identifier name
#208: FILE: drivers/spi/mxc_spi.c:77:
+	int (*config)(struct mxc_spi_data *, struct mxc_spi_config *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mxc_spi_data *' should also have an identifier name
#209: FILE: drivers/spi/mxc_spi.c:78:
+	void (*trigger)(struct mxc_spi_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mxc_spi_data *' should also have an identifier name
#210: FILE: drivers/spi/mxc_spi.c:79:
+	int (*rx_available)(struct mxc_spi_data *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/spi/mxc_spi.c:123:
+static unsigned int mxc_spi_clkdiv_1(unsigned int fin,
+		unsigned int fspi)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: drivers/spi/mxc_spi.c:141:
+static unsigned int mxc_spi_clkdiv_2(unsigned int fin,
+		unsigned int fspi)

CHECK:BIT_MACRO: Prefer using the BIT macro
#285: FILE: drivers/spi/mxc_spi.c:154:
+#define MX31_INTREG_TEEN	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#286: FILE: drivers/spi/mxc_spi.c:155:
+#define MX31_INTREG_RREN	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#288: FILE: drivers/spi/mxc_spi.c:157:
+#define MX31_CSPICTRL_ENABLE	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#289: FILE: drivers/spi/mxc_spi.c:158:
+#define MX31_CSPICTRL_MASTER	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#290: FILE: drivers/spi/mxc_spi.c:159:
+#define MX31_CSPICTRL_XCH	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#291: FILE: drivers/spi/mxc_spi.c:160:
+#define MX31_CSPICTRL_POL	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#292: FILE: drivers/spi/mxc_spi.c:161:
+#define MX31_CSPICTRL_PHA	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#293: FILE: drivers/spi/mxc_spi.c:162:
+#define MX31_CSPICTRL_SSCTL	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#294: FILE: drivers/spi/mxc_spi.c:163:
+#define MX31_CSPICTRL_SSPOL	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#302: FILE: drivers/spi/mxc_spi.c:171:
+#define MX31_STATUS_RR		(1 << 3)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: drivers/spi/mxc_spi.c:199:
+static int mx31_config(struct mxc_spi_data *mxc_spi,
+		struct mxc_spi_config *config)

CHECK:BRACES: braces {} should be used on all arms of this statement
#337: FILE: drivers/spi/mxc_spi.c:206:
+	if (cpu_is_mx31())
[...]
+	else if (cpu_is_mx35()) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#367: FILE: drivers/spi/mxc_spi.c:236:
+#define MX27_INTREG_RR		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#368: FILE: drivers/spi/mxc_spi.c:237:
+#define MX27_INTREG_TEEN	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#369: FILE: drivers/spi/mxc_spi.c:238:
+#define MX27_INTREG_RREN	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#371: FILE: drivers/spi/mxc_spi.c:240:
+#define MX27_CSPICTRL_POL	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#372: FILE: drivers/spi/mxc_spi.c:241:
+#define MX27_CSPICTRL_PHA	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#373: FILE: drivers/spi/mxc_spi.c:242:
+#define MX27_CSPICTRL_SSPOL	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#374: FILE: drivers/spi/mxc_spi.c:243:
+#define MX27_CSPICTRL_XCH	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#375: FILE: drivers/spi/mxc_spi.c:244:
+#define MX27_CSPICTRL_ENABLE	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#376: FILE: drivers/spi/mxc_spi.c:245:
+#define MX27_CSPICTRL_MASTER	(1 << 11)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: drivers/spi/mxc_spi.c:271:
+static int mx27_config(struct mxc_spi_data *mxc_spi,
+		struct mxc_spi_config *config)

CHECK:BIT_MACRO: Prefer using the BIT macro
#429: FILE: drivers/spi/mxc_spi.c:298:
+#define MX1_INTREG_RR		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#430: FILE: drivers/spi/mxc_spi.c:299:
+#define MX1_INTREG_TEEN		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#431: FILE: drivers/spi/mxc_spi.c:300:
+#define MX1_INTREG_RREN		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#433: FILE: drivers/spi/mxc_spi.c:302:
+#define MX1_CSPICTRL_POL	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#434: FILE: drivers/spi/mxc_spi.c:303:
+#define MX1_CSPICTRL_PHA	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#435: FILE: drivers/spi/mxc_spi.c:304:
+#define MX1_CSPICTRL_XCH	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#436: FILE: drivers/spi/mxc_spi.c:305:
+#define MX1_CSPICTRL_ENABLE	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#437: FILE: drivers/spi/mxc_spi.c:306:
+#define MX1_CSPICTRL_MASTER	(1 << 10)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/spi/mxc_spi.c:331:
+static int mx1_config(struct mxc_spi_data *mxc_spi,
+		struct mxc_spi_config *config)

CHECK:BRACES: braces {} should be used on all arms of this statement
#509: FILE: drivers/spi/mxc_spi.c:378:
+	if (config.bpw <= 8) {
[...]
+	} else if (config.bpw <= 16) {
[...]
+	} else if (config.bpw <= 32) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#518: FILE: drivers/spi/mxc_spi.c:387:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#519: FILE: drivers/spi/mxc_spi.c:388:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:RETURN_VOID: void function return statements are not generally useful
#525: FILE: drivers/spi/mxc_spi.c:394:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/spi/mxc_spi.c:437:
+static int mxc_spi_setupxfer(struct spi_device *spi,
+				 struct spi_transfer *t)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/spi/mxc_spi.c:452:
+static int mxc_spi_transfer(struct spi_device *spi,
+				struct spi_transfer *transfer)

CHECK:BRACES: braces {} should be used on all arms of this statement
#701: FILE: drivers/spi/mxc_spi.c:570:
+	if (cpu_is_mx31() || cpu_is_mx35()) {
[...]
+	} else  if (cpu_is_mx27() || cpu_is_mx21()) {
[...]
+	} else if (cpu_is_mx1()) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#716: FILE: drivers/spi/mxc_spi.c:585:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#717: FILE: drivers/spi/mxc_spi.c:586:
+		BUG();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108172.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 41 checks, 733 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108172.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
