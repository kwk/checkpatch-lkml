WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '4496d41a540897039138a7d67dbef51f96dd0b09', maybe rebased or not pulled?
#46: 
commit 4496d41a540897039138a7d67dbef51f96dd0b09

WARNING:TYPO_SPELLING: 'wil' may be misspelled - perhaps 'will'?
#47: 
Author: Matthew Wilcox <matthew@wil.cx>
                                ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/kcounter.h:1:
+#ifndef __LINUX_KCOUNTER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: include/linux/kcounter.h:4:
+ * include/linux/kcounter.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#77: FILE: include/linux/kcounter.h:20:
+typedef struct { struct kcounter_owner *owner; } kcounter_cookie_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#79: FILE: include/linux/kcounter.h:22:
+typedef struct { } kcounter_cookie_t;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#83: FILE: include/linux/kcounter.h:26:
+	spinlock_t		lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: include/linux/kcounter.h:35:
+extern void kcounter_init(struct kcounter *kc, unsigned int count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/kcounter.h:37:
+extern int __must_check kcounter_claim(struct kcounter *, kcounter_cookie_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kcounter *' should also have an identifier name
#94: FILE: include/linux/kcounter.h:37:
+extern int __must_check kcounter_claim(struct kcounter *, kcounter_cookie_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kcounter_cookie_t *' should also have an identifier name
#94: FILE: include/linux/kcounter.h:37:
+extern int __must_check kcounter_claim(struct kcounter *, kcounter_cookie_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/kcounter.h:38:
+extern int __must_check kcounter_claim_interruptible(struct kcounter *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kcounter *' should also have an identifier name
#95: FILE: include/linux/kcounter.h:38:
+extern int __must_check kcounter_claim_interruptible(struct kcounter *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kcounter_cookie_t *' should also have an identifier name
#95: FILE: include/linux/kcounter.h:38:
+extern int __must_check kcounter_claim_interruptible(struct kcounter *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: include/linux/kcounter.h:39:
+extern int __must_check kcounter_claim_interruptible(struct kcounter *,
+				kcounter_cookie_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/kcounter.h:40:
+extern int __must_check kcounter_claim_timeout(struct kcounter *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kcounter *' should also have an identifier name
#97: FILE: include/linux/kcounter.h:40:
+extern int __must_check kcounter_claim_timeout(struct kcounter *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kcounter_cookie_t *' should also have an identifier name
#97: FILE: include/linux/kcounter.h:40:
+extern int __must_check kcounter_claim_timeout(struct kcounter *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: include/linux/kcounter.h:41:
+extern int __must_check kcounter_claim_timeout(struct kcounter *,
+				kcounter_cookie_t *, long jiffies);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/kcounter.h:42:
+extern int __must_check kcounter_claim_interruptible_timeout(struct kcounter *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kcounter *' should also have an identifier name
#99: FILE: include/linux/kcounter.h:42:
+extern int __must_check kcounter_claim_interruptible_timeout(struct kcounter *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kcounter_cookie_t *' should also have an identifier name
#99: FILE: include/linux/kcounter.h:42:
+extern int __must_check kcounter_claim_interruptible_timeout(struct kcounter *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: include/linux/kcounter.h:43:
+extern int __must_check kcounter_claim_interruptible_timeout(struct kcounter *,
+				kcounter_cookie_t *, long jiffies);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/kcounter.h:44:
+extern int __must_check kcounter_try_claim(struct kcounter *kc,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kcounter_cookie_t *' should also have an identifier name
#101: FILE: include/linux/kcounter.h:44:
+extern int __must_check kcounter_try_claim(struct kcounter *kc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: include/linux/kcounter.h:45:
+extern int __must_check kcounter_try_claim(struct kcounter *kc,
+				kcounter_cookie_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/kcounter.h:46:
+extern int __must_check kcounter_has_free_resources(struct kcounter *kc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/kcounter.h:47:
+extern void kcounter_release(struct kcounter *, kcounter_cookie_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kcounter *' should also have an identifier name
#104: FILE: include/linux/kcounter.h:47:
+extern void kcounter_release(struct kcounter *, kcounter_cookie_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kcounter_cookie_t *' should also have an identifier name
#104: FILE: include/linux/kcounter.h:47:
+extern void kcounter_release(struct kcounter *, kcounter_cookie_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/kcounter.h:50:
+extern void kcounter_add_resource(struct kcounter *kc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/kcounter.h:51:
+extern int __must_check kcounter_remove_resource(struct kcounter *kc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/kcounter.h:56:
+extern void kcounter_add_all_resources(struct kcounter *kc);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: kernel/kcounter.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#123: FILE: kernel/kcounter.c:2:
+ * kernel/kcounter.c

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#217: FILE: kernel/kcounter.c:96:
+int kcounter_claim_interruptible_timeout(struct kcounter *kc, kcounter_cookie_t *resource, long jiffies)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: kernel/kcounter.c:142:
+static inline int __sched __kc_claim_common(struct kcounter *kc,
+						long state, long timeout)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: kernel/kcounter.c:186:
+static noinline int __sched __kc_claim_timeout(struct kcounter *kc,
+							long jiffies)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#312: FILE: kernel/kcounter.c:191:
+static noinline int __sched __kc_claim_interruptible_timeout(

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: kernel/kcounter.c:230:
+	struct kcounter_owner *owner, **ptr;
+	kc->size = count;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "owner"
#365: FILE: kernel/kcounter.c:244:
+	for (owner = kc->owners; owner != NULL; owner = owner->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: kernel/kcounter.c:255:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "owner"
#383: FILE: kernel/kcounter.c:262:
+	for (owner = kc->owners; owner != NULL; owner = owner->next) {

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#402: FILE: lib/Kconfig.debug:268:
+config DEBUG_KCOUNTER
+	bool "Kcounter debugging: basic checks"
+	depends on DEBUG_KERNEL
+	help
+	  Enabling this option allows the kernel to detect some basic
+	  misuses of the kcounter feature.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294797.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 21 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294797.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
