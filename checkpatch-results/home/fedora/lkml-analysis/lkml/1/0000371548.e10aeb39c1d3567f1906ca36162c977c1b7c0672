WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: security/tomoyo/mount.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#45: FILE: security/tomoyo/mount.c:2:
+ * security/tomoyo/mount.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#57: FILE: security/tomoyo/mount.c:14:
+#define MOUNT_BIND_KEYWORD    ^I      "--bind"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#58: FILE: security/tomoyo/mount.c:15:
+#define MOUNT_MOVE_KEYWORD    ^I      "--move"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#59: FILE: security/tomoyo/mount.c:16:
+#define MOUNT_REMOUNT_KEYWORD ^I      "--remount"$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#87: FILE: security/tomoyo/mount.c:44:
+	__attribute__((format(printf, 3, 4)));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#176: FILE: security/tomoyo/mount.c:133:
+	if (!tmy_correct_path(dev_name, 0, 0, 0, __FUNCTION__) ||

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#177: FILE: security/tomoyo/mount.c:134:
+	    !tmy_correct_path(dir_name, 1, 0, 1, __FUNCTION__))

WARNING:SPACING: space prohibited before semicolon
#221: FILE: security/tomoyo/mount.c:178:
+out: ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#239: FILE: security/tomoyo/mount.c:196:
+	if (!strcmp(type, MOUNT_REMOUNT_KEYWORD)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#251: FILE: security/tomoyo/mount.c:208:
+		   !strcmp(type, MOUNT_MOVE_KEYWORD)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#267: FILE: security/tomoyo/mount.c:224:
+		   !strcmp(type, MOUNT_MAKE_SHARED_KEYWORD)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#278: FILE: security/tomoyo/mount.c:235:
+	} else {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#291: FILE: security/tomoyo/mount.c:248:
+
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#332: FILE: security/tomoyo/mount.c:289:
+		tmy_audit_mount_log(0, 1, "%s%s%sare given "
+				    "for single mount operation",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#348: FILE: security/tomoyo/mount.c:305:
+		tmy_audit_mount_log(0, 1, "%s%s%s%sare given "
+				    "for single mount operation",

CHECK:BRACES: Unbalanced braces around else statement
#384: FILE: security/tomoyo/mount.c:341:
+	else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 57)
#403: FILE: security/tomoyo/mount.c:360:
+		if (strcmp(type, MOUNT_REMOUNT_KEYWORD) == 0)
+			/* Needn't to resolve dev_name */;

CHECK:BRACES: braces {} should be used on all arms of this statement
#403: FILE: security/tomoyo/mount.c:360:
+		if (strcmp(type, MOUNT_REMOUNT_KEYWORD) == 0)
[...]
+		else if (strcmp(type, MOUNT_MAKE_UNBINDABLE_KEYWORD) == 0 ||
[...]
+		else if (strcmp(type, MOUNT_BIND_KEYWORD) == 0 ||
[...]
+		} else if (fstype) {
[...]
+		} else {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 57)
#405: FILE: security/tomoyo/mount.c:362:
+		else if (strcmp(type, MOUNT_MAKE_UNBINDABLE_KEYWORD) == 0 ||
[...]
+			/* Needn't to resolve dev_name */;

CHECK:BRACES: Unbalanced braces around else statement
#492: FILE: security/tomoyo/mount.c:449:
+		} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#509: FILE: security/tomoyo/mount.c:466:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#515: FILE: security/tomoyo/mount.c:472:
+
+}

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#555: FILE: security/tomoyo/mount.c:512:
+	flags = simple_strtoul(cp + 1, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#577: FILE: security/tomoyo/mount.c:534:
+		struct mount_entry *ptr;
+		ptr = list_entry(pos, struct mount_entry, list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#587: FILE: security/tomoyo/mount.c:544:
+out: ;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#592: FILE: security/tomoyo/mount.c:549:
+static int tmy_find_conceal(struct nameidata *nd,
                                               ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#600: FILE: security/tomoyo/mount.c:557:
+		while (1) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#608: FILE: security/tomoyo/mount.c:565:
+			if (dentry == vfsmnt->mnt_root || IS_ROOT(dentry)) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#624: FILE: security/tomoyo/mount.c:581:
+
+		}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#632: FILE: security/tomoyo/mount.c:589:
+ * @nd: pointer to "struct nameidata".
     ^^

WARNING:TYPO_SPELLING: 'directries' may be misspelled - perhaps 'directories'?
#637: FILE: security/tomoyo/mount.c:594:
+ * People seldom mount on directries that have submounts.
                           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#642: FILE: security/tomoyo/mount.c:599:
+int tmy_conceal_mount(struct nameidata *nd)
                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#662: FILE: security/tomoyo/mount.c:619:
+			flag = tmy_find_conceal(nd, vfsmnt, dentry);
 			                        ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#676: FILE: security/tomoyo/mount.c:633:
+		int error = -EPERM;
+		if (dir) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#713: FILE: security/tomoyo/mount.c:670:
+	if (!tmy_correct_path(dir, 1, 0, 1, __FUNCTION__))

WARNING:SPACING: space prohibited before semicolon
#747: FILE: security/tomoyo/mount.c:704:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#842: FILE: security/tomoyo/mount.c:799:
+		struct no_umount_entry *ptr;
+		ptr = list_entry(pos, struct no_umount_entry, list);

WARNING:SPACING: space prohibited before semicolon
#851: FILE: security/tomoyo/mount.c:808:
+out: ;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#881: FILE: security/tomoyo/mount.c:838:
+	if (!tmy_correct_path(old_root, 1, 0, 1, __FUNCTION__) ||

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#882: FILE: security/tomoyo/mount.c:839:
+	    !tmy_correct_path(new_root, 1, 0, 1, __FUNCTION__))

WARNING:SPACING: space prohibited before semicolon
#922: FILE: security/tomoyo/mount.c:879:
+out: ;

WARNING:SPACING: space prohibited before semicolon
#973: FILE: security/tomoyo/mount.c:930:
+out: ;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#990: FILE: security/tomoyo/mount.c:947:
+		if (!is_enforce && tmy_accept(TMY_RESTRICT_PIVOT_ROOT, NULL)
+		    && old_root && new_root) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1041: FILE: security/tomoyo/mount.c:998:
+		struct pivot_root_entry *ptr;
+		ptr = list_entry(pos, struct pivot_root_entry, list);

WARNING:SPACING: space prohibited before semicolon
#1050: FILE: security/tomoyo/mount.c:1007:
+out: ;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371548.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 14 checks, 1010 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371548.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
