WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
Instrumentation dynamically disabled :                           1883.09 MB/s

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: ltt/ltt-relay-locked.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#74: FILE: ltt/ltt-relay-locked.c:2:
+ * ltt/ltt-relay-locked.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#128: FILE: ltt/ltt-relay-locked.c:56:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#129: FILE: ltt/ltt-relay-locked.c:57:
+#define printk_dbg(fmt, args...) printk(fmt, args)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: ltt/ltt-relay-locked.c:62:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: ltt/ltt-relay-locked.c:97:
+static inline void save_last_tsc(struct ltt_channel_buf_struct *ltt_buf,
+					u64 tsc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: ltt/ltt-relay-locked.c:103:
+static inline int last_tsc_overflow(struct ltt_channel_buf_struct *ltt_buf,
+					u64 tsc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: ltt/ltt-relay-locked.c:114:
+static inline void save_last_tsc(struct ltt_channel_buf_struct *ltt_buf,
+					u64 tsc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: ltt/ltt-relay-locked.c:120:
+static inline int last_tsc_overflow(struct ltt_channel_buf_struct *ltt_buf,
+					u64 tsc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: ltt/ltt-relay-locked.c:136:
+static int ltt_relay_create_buffer(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *ltt_chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: ltt/ltt-relay-locked.c:142:
+static void ltt_relay_destroy_buffer(struct ltt_channel_struct *ltt_chan,
+		unsigned int cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: ltt/ltt-relay-locked.c:145:
+static void ltt_force_switch(struct rchan_buf *buf,
+		enum force_switch_mode mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: ltt/ltt-relay-locked.c:151:
+static void ltt_buffer_begin_callback(struct rchan_buf *buf,
+			u64 tsc, unsigned int subbuf_idx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: ltt/ltt-relay-locked.c:158:
+			ltt_relay_offset_address(buf,
+				subbuf_idx * buf->chan->subbuf_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: ltt/ltt-relay-locked.c:171:
+static notrace void ltt_buffer_end_callback(struct rchan_buf *buf,
+		u64 tsc, unsigned int offset, unsigned int subbuf_idx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: ltt/ltt-relay-locked.c:177:
+			ltt_relay_offset_address(buf,
+				subbuf_idx * buf->chan->subbuf_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: ltt/ltt-relay-locked.c:180:
+	header->lost_size = SUBBUF_OFFSET((buf->chan->subbuf_size - offset),
+				buf->chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: ltt/ltt-relay-locked.c:187:
+static notrace void ltt_deliver(struct rchan_buf *buf, unsigned int subbuf_idx,
+		void *subbuf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: ltt/ltt-relay-locked.c:195:
+static struct dentry *ltt_create_buf_file_callback(const char *filename,
+		struct dentry *parent, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: ltt/ltt-relay-locked.c:204:
+	err = ltt_relay_create_buffer(ltt_chan->trace, ltt_chan,
+					buf, buf->cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: ltt/ltt-relay-locked.c:210:
+	dentry = debugfs_create_file(filename, mode, parent, buf,
+			&ltt_file_operations);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#310: FILE: ltt/ltt-relay-locked.c:238:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#311: FILE: ltt/ltt-relay-locked.c:239:
+	if (waitqueue_active(&ltt_buf->write_wait))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: ltt/ltt-relay-locked.c:247:
+static notrace void ltt_buf_unfull(struct rchan_buf *buf,
+		unsigned int subbuf_idx,

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: ltt/ltt-relay-locked.c:261:
+	struct ltt_channel_buf_struct *ltt_buf = buf->chan_private;
+	return ltt_buf->offset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: ltt/ltt-relay-locked.c:267:
+	struct ltt_channel_buf_struct *ltt_buf = buf->chan_private;
+	return ltt_buf->consumed;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#422: FILE: ltt/ltt-relay-locked.c:350:
+		 * happen if this is a buffer we never got. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#426: FILE: ltt/ltt-relay-locked.c:354:
+		return -EIO;
+	} else {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#507: FILE: ltt/ltt-relay-locked.c:435:
+ *	@filp: the file
   	 ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#512: FILE: ltt/ltt-relay-locked.c:440:
+static unsigned int ltt_poll(struct file *filp, poll_table *wait)
                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#521: FILE: ltt/ltt-relay-locked.c:449:
+		poll_wait(filp, &ltt_buf->read_wait, wait);
 		          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#557: FILE: ltt/ltt-relay-locked.c:485:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#573: FILE: ltt/ltt-relay-locked.c:501:
+static int ltt_ioctl(struct inode *inode, struct file *filp,
                                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: ltt/ltt-relay-locked.c:502:
+static int ltt_ioctl(struct inode *inode, struct file *filp,
+		unsigned int cmd, unsigned long arg)

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#613: FILE: ltt/ltt-relay-locked.c:541:
+		return put_user((u32)get_n_subbufs(buf), argp);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#616: FILE: ltt/ltt-relay-locked.c:544:
+		return put_user((u32)get_subbuf_size(buf), argp);
+		break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: ltt/ltt-relay-locked.c:553:
+static long ltt_compat_ioctl(struct file *file, unsigned int cmd,
+		unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: ltt/ltt-relay-locked.c:566:
+static void ltt_relay_pipe_buf_release(struct pipe_inode_info *pipe,
+				   struct pipe_buffer *pbuf)

WARNING:CONST_STRUCT: struct pipe_buf_operations should normally be const
#642: FILE: ltt/ltt-relay-locked.c:570:
+static struct pipe_buf_operations ltt_relay_pipe_buf_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#701: FILE: ltt/ltt-relay-locked.c:629:
+	printk_dbg(KERN_DEBUG "SPLICE actor len %zu pos %zd write_pos %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: ltt/ltt-relay-locked.c:630:
+	printk_dbg(KERN_DEBUG "SPLICE actor len %zu pos %zd write_pos %ld\n",
+		len, (ssize_t)*ppos, ltt_buf->offset);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#710: FILE: ltt/ltt-relay-locked.c:638:
+		printk_dbg(KERN_DEBUG "SPLICE actor loop len %zu roffset %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: ltt/ltt-relay-locked.c:639:
+		printk_dbg(KERN_DEBUG "SPLICE actor loop len %zu roffset %ld\n",
+			len, roffset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: ltt/ltt-relay-locked.c:661:
+static ssize_t ltt_relay_file_splice_read(struct file *in,
+				      loff_t *ppos,

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#744: FILE: ltt/ltt-relay-locked.c:672:
+	printk_dbg(KERN_DEBUG "SPLICE read len %zu pos %zd\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: ltt/ltt-relay-locked.c:673:
+	printk_dbg(KERN_DEBUG "SPLICE read len %zu pos %zd\n",
+		len, (ssize_t)*ppos);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#748: FILE: ltt/ltt-relay-locked.c:676:
+		printk_dbg(KERN_DEBUG "SPLICE read loop ret %d\n", ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#749: FILE: ltt/ltt-relay-locked.c:677:
+		if (ret < 0)
[...]
+		else if (!ret) {
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#771: FILE: ltt/ltt-relay-locked.c:699:
+static void ltt_relay_print_subbuffer_errors(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#782: FILE: ltt/ltt-relay-locked.c:710:
+	printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#784: FILE: ltt/ltt-relay-locked.c:712:
+		"LTT : unread channel %s offset is %ld "
+		"and cons_off : %ld (cpu %u)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#790: FILE: ltt/ltt-relay-locked.c:718:
+		printk(KERN_ALERT

WARNING:SPLIT_STRING: quoted string split across lines
#792: FILE: ltt/ltt-relay-locked.c:720:
+			"LTT : %s : subbuffer %lu has non filled "
+			"commit count %lu.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#794: FILE: ltt/ltt-relay-locked.c:722:
+	printk(KERN_ALERT "LTT : %s : commit count : %lu, subbuf size %zd\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: ltt/ltt-relay-locked.c:723:
+	printk(KERN_ALERT "LTT : %s : commit count : %lu, subbuf size %zd\n",
+			ltt_chan->channel_name, commit_count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: ltt/ltt-relay-locked.c:728:
+static void ltt_relay_print_errors(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *ltt_chan, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: ltt/ltt-relay-locked.c:747:
+static void ltt_relay_print_buffer_errors(struct ltt_channel_struct *ltt_chan,
+		unsigned int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#826: FILE: ltt/ltt-relay-locked.c:754:
+		printk(KERN_ALERT

WARNING:SPLIT_STRING: quoted string split across lines
#828: FILE: ltt/ltt-relay-locked.c:756:
+			"LTT : %s : %ld events lost "
+			"in %s channel (cpu %u).\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#833: FILE: ltt/ltt-relay-locked.c:761:
+		printk(KERN_ALERT

WARNING:SPLIT_STRING: quoted string split across lines
#835: FILE: ltt/ltt-relay-locked.c:763:
+			"LTT : %s : %ld corrupted subbuffers "
+			"in %s channel (cpu %u).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: ltt/ltt-relay-locked.c:780:
+static int ltt_relay_create_buffer(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *ltt_chan, struct rchan_buf *buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#856: FILE: ltt/ltt-relay-locked.c:784:
+	struct ltt_channel_buf_struct *ltt_buf;
+	ltt_buf = kzalloc_node(sizeof(*ltt_buf), GFP_KERNEL, cpu_to_node(cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: ltt/ltt-relay-locked.c:790:
+		kzalloc_node(sizeof(ltt_buf->commit_count) * n_subbufs,
+			GFP_KERNEL, cpu_to_node(cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: ltt/ltt-relay-locked.c:811:
+static void ltt_relay_destroy_buffer(struct ltt_channel_struct *ltt_chan,
+		unsigned int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: ltt/ltt-relay-locked.c:818:
+	kref_put(&ltt_chan->trace->ltt_transport_kref,
+		ltt_release_transport);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: ltt/ltt-relay-locked.c:830:
+static int ltt_relay_create_channel(const char *trace_name,
+		struct ltt_trace_struct *trace, struct dentry *dir,

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EPERM)
#913: FILE: ltt/ltt-relay-locked.c:841:
+		return EPERM;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#915: FILE: ltt/ltt-relay-locked.c:843:
+		strncpy(tmpname, LTT_FLIGHT_PREFIX, PATH_MAX-1);
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#917: FILE: ltt/ltt-relay-locked.c:845:
+			PATH_MAX-1-sizeof(LTT_FLIGHT_PREFIX));
 			        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#917: FILE: ltt/ltt-relay-locked.c:845:
+			PATH_MAX-1-sizeof(LTT_FLIGHT_PREFIX));
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#919: FILE: ltt/ltt-relay-locked.c:847:
+		strncpy(tmpname, channel_name, PATH_MAX-1);
 		                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#921: FILE: ltt/ltt-relay-locked.c:849:
+	strncat(tmpname, "_", PATH_MAX-1-strlen(tmpname));
 	                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#921: FILE: ltt/ltt-relay-locked.c:849:
+	strncat(tmpname, "_", PATH_MAX-1-strlen(tmpname));
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: ltt/ltt-relay-locked.c:858:
+	ltt_chan->trans_channel_data = ltt_relay_open(tmpname,
+			dir,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#938: FILE: ltt/ltt-relay-locked.c:866:
+		tmpname[tmpname_len-1] = '\0';
 		                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ltt_chan->trans_channel_data"
#940: FILE: ltt/ltt-relay-locked.c:868:
+	if (ltt_chan->trans_channel_data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#941: FILE: ltt/ltt-relay-locked.c:869:
+		printk(KERN_ERR "LTT : Can't open %s channel for trace %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: ltt/ltt-relay-locked.c:870:
+		printk(KERN_ERR "LTT : Can't open %s channel for trace %s\n",
+				tmpname, trace_name);

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -ENOENT)
#964: FILE: ltt/ltt-relay-locked.c:892:
+		return ENOENT;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: ltt/ltt-relay-locked.c:895:
+	new_trace->dentry.trace_root = debugfs_create_dir(new_trace->trace_name,
+			ltt_root_dentry);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_trace->dentry.trace_root"
#969: FILE: ltt/ltt-relay-locked.c:897:
+	if (new_trace->dentry.trace_root == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#970: FILE: ltt/ltt-relay-locked.c:898:
+		printk(KERN_ERR "LTT : Trace directory name %s already taken\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: ltt/ltt-relay-locked.c:899:
+		printk(KERN_ERR "LTT : Trace directory name %s already taken\n",
+				new_trace->trace_name);

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EEXIST)
#972: FILE: ltt/ltt-relay-locked.c:900:
+		return EEXIST;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: ltt/ltt-relay-locked.c:943:
+static void ltt_relay_finish_buffer(struct ltt_channel_struct *ltt_channel,
+		unsigned int cpu)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1027: FILE: ltt/ltt-relay-locked.c:955:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1055: FILE: ltt/ltt-relay-locked.c:983:
+static inline int ltt_relay_try_reserve(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: ltt/ltt-relay-locked.c:1004:
+		offsets->size = ltt_get_header_size(ltt_channel,
+					offsets->begin, data_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: ltt/ltt-relay-locked.c:1032:
+			if (!ltt_channel->overwrite &&
+				(SUBBUF_TRUNC(offsets->begin, buf->chan)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1113: FILE: ltt/ltt-relay-locked.c:1041:
+				return -1;
+			} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1128: FILE: ltt/ltt-relay-locked.c:1056:
+		offsets->size = ltt_get_header_size(ltt_channel,
+					offsets->begin, data_size,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1141: FILE: ltt/ltt-relay-locked.c:1069:
+			return -1;
+		} else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1170: FILE: ltt/ltt-relay-locked.c:1098:
+static inline int ltt_relay_try_switch(

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1209: FILE: ltt/ltt-relay-locked.c:1137:
+		if (mode == FORCE_ACTIVE
+		    && !ltt_channel->overwrite

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1210: FILE: ltt/ltt-relay-locked.c:1138:
+		    && !ltt_channel->overwrite
+		    && offsets->begin - ltt_buf->consumed

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1228: FILE: ltt/ltt-relay-locked.c:1156:
+static inline void ltt_reserve_push_reader(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1249: FILE: ltt/ltt-relay-locked.c:1177:
+	if ((SUBBUF_TRUNC(offsets->end-1, buf->chan)
 	                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1249: FILE: ltt/ltt-relay-locked.c:1177:
+	if ((SUBBUF_TRUNC(offsets->end-1, buf->chan)
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1254: FILE: ltt/ltt-relay-locked.c:1182:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1280: FILE: ltt/ltt-relay-locked.c:1208:
+			if (!ltt_channel->overwrite
+			    || offsets->reserve_commit_diff

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1296: FILE: ltt/ltt-relay-locked.c:1224:
+
+

WARNING:TYPO_SPELLING: 'uncommited' may be misspelled - perhaps 'uncommitted'?
#1312: FILE: ltt/ltt-relay-locked.c:1240:
+ * (uncommited) subbuffer will be declared corrupted, and that the new subbuffer
     ^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1317: FILE: ltt/ltt-relay-locked.c:1245:
+static inline void ltt_reserve_switch_old_subbuf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1345: FILE: ltt/ltt-relay-locked.c:1273:
+static inline void ltt_reserve_switch_new_subbuf(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1364: FILE: ltt/ltt-relay-locked.c:1292:
+
+

WARNING:TYPO_SPELLING: 'uncommited' may be misspelled - perhaps 'uncommitted'?
#1380: FILE: ltt/ltt-relay-locked.c:1308:
+ * (uncommited) subbuffer will be declared corrupted, and that the new subbuffer
     ^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1383: FILE: ltt/ltt-relay-locked.c:1311:
+static inline void ltt_reserve_end_switch_current(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1420: FILE: ltt/ltt-relay-locked.c:1348:
+static notrace int ltt_relay_reserve_slot(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *ltt_channel, void **transport_data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1447: FILE: ltt/ltt-relay-locked.c:1375:
+	if (ltt_relay_try_reserve(ltt_channel, ltt_buf,
+			rchan, buf, &offsets, data_size, tsc, rflags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1467: FILE: ltt/ltt-relay-locked.c:1395:
+		ltt_reserve_switch_old_subbuf(ltt_channel, ltt_buf, rchan, buf,
+			&offsets, tsc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1474: FILE: ltt/ltt-relay-locked.c:1402:
+		ltt_reserve_switch_new_subbuf(ltt_channel, ltt_buf, rchan,
+			buf, &offsets, tsc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1478: FILE: ltt/ltt-relay-locked.c:1406:
+		ltt_reserve_end_switch_current(ltt_channel, ltt_buf, rchan,
+			buf, &offsets, tsc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: ltt/ltt-relay-locked.c:1420:
+static notrace void ltt_force_switch(struct rchan_buf *buf,
+		enum force_switch_mode mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: ltt/ltt-relay-locked.c:1440:
+	if (ltt_relay_try_switch(mode, ltt_channel, ltt_buf,
+			rchan, buf, &offsets, &tsc)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1533: FILE: ltt/ltt-relay-locked.c:1461:
+		ltt_reserve_switch_old_subbuf(ltt_channel, ltt_buf, rchan, buf,
+			&offsets, &tsc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1540: FILE: ltt/ltt-relay-locked.c:1468:
+		ltt_reserve_switch_new_subbuf(ltt_channel,
+			ltt_buf, rchan, buf, &offsets, &tsc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: ltt/ltt-relay-locked.c:1485:
+static inline void ltt_write_commit_counter(struct rchan_buf *buf,
+		long buf_offset, size_t slot_size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1562: FILE: ltt/ltt-relay-locked.c:1490:
+	uint32_t lost_old, lost_new;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1568: FILE: ltt/ltt-relay-locked.c:1496:
+			ltt_relay_offset_address(buf,
+				subbuf_idx * buf->chan->subbuf_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1577: FILE: ltt/ltt-relay-locked.c:1505:
+			lost_old = cmpxchg_local(&header->lost_size, lost_old,
+							lost_new);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1587: FILE: ltt/ltt-relay-locked.c:1515:
+static inline void ltt_write_commit_counter(struct rchan_buf *buf,
+		long buf_offset, size_t slot_size)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1603: FILE: ltt/ltt-relay-locked.c:1531:
+static notrace void ltt_relay_commit_slot(

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1634: FILE: ltt/ltt-relay-locked.c:1562:
+ * specific threshold value, we reenable preemption and block.
                                 ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1637: FILE: ltt/ltt-relay-locked.c:1565:
+static int ltt_relay_user_blocking(struct ltt_trace_struct *trace,
+		unsigned int chan_index, size_t data_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1694: FILE: ltt/ltt-relay-locked.c:1622:
+static void ltt_relay_print_user_errors(struct ltt_trace_struct *trace,
+		unsigned int chan_index, size_t data_size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1707: FILE: ltt/ltt-relay-locked.c:1635:
+	printk(KERN_ERR "Error in LTT usertrace : "

WARNING:SPLIT_STRING: quoted string split across lines
#1708: FILE: ltt/ltt-relay-locked.c:1636:
+	printk(KERN_ERR "Error in LTT usertrace : "
+	"buffer full : event lost in blocking "

WARNING:SPLIT_STRING: quoted string split across lines
#1709: FILE: ltt/ltt-relay-locked.c:1637:
+	"buffer full : event lost in blocking "
+	"mode. Increase LTT_RESERVE_CRITICAL.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1710: FILE: ltt/ltt-relay-locked.c:1638:
+	printk(KERN_ERR "LTT nesting level is %u.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1711: FILE: ltt/ltt-relay-locked.c:1639:
+	printk(KERN_ERR "LTT nesting level is %u.\n",
+		per_cpu(ltt_nesting, cpu));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1712: FILE: ltt/ltt-relay-locked.c:1640:
+	printk(KERN_ERR "LTT avail size %lu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1713: FILE: ltt/ltt-relay-locked.c:1641:
+	printk(KERN_ERR "LTT avail size %lu.\n",
+		dbg->avail_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1714: FILE: ltt/ltt-relay-locked.c:1642:
+	printk(KERN_ERR "avai write : %lu, read : %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1715: FILE: ltt/ltt-relay-locked.c:1643:
+	printk(KERN_ERR "avai write : %lu, read : %lu\n",
+			dbg->write, dbg->read);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1720: FILE: ltt/ltt-relay-locked.c:1648:
+	printk(KERN_ERR "LTT cur size %lu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1721: FILE: ltt/ltt-relay-locked.c:1649:
+	printk(KERN_ERR "LTT cur size %lu.\n",
+		dbg->write + LTT_RESERVE_CRITICAL + data_size

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1723: FILE: ltt/ltt-relay-locked.c:1651:
+	printk(KERN_ERR "cur write : %lu, read : %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1724: FILE: ltt/ltt-relay-locked.c:1652:
+	printk(KERN_ERR "cur write : %lu, read : %lu\n",
+			dbg->write, dbg->read);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1757: FILE: ltt/ltt-relay-locked.c:1685:
+	printk(KERN_INFO "LTT : ltt-relay-locked init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1766: FILE: ltt/ltt-relay-locked.c:1694:
+	printk(KERN_INFO "LTT : ltt-relay-locked exit\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158712.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 52 warnings, 90 checks, 1704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158712.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
