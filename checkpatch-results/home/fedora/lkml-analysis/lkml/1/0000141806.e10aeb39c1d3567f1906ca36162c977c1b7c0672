WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#259: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: arch/sparc/include/asm/trap_block.h:1:
+#ifndef _SPARC_TRAP_BLOCK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(64) over __attribute__((aligned(64)))
#315: FILE: arch/sparc/include/asm/trap_block.h:52:
+} __attribute__((aligned(64)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: arch/sparc/include/asm/trap_block.h:54:
+extern void init_cur_cpu_trap(struct thread_info *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct thread_info *' should also have an identifier name
#317: FILE: arch/sparc/include/asm/trap_block.h:54:
+extern void init_cur_cpu_trap(struct thread_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: arch/sparc/include/asm/trap_block.h:55:
+extern void setup_tba(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: arch/sparc/include/asm/trap_block.h:58:
+extern unsigned long real_hard_smp_processor_id(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#330: FILE: arch/sparc/include/asm/trap_block.h:67:
+};
+extern struct cpuid_patch_entry __cpuid_patch, __cpuid_patch_end;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#336: FILE: arch/sparc/include/asm/trap_block.h:73:
+};
+extern struct sun4v_1insn_patch_entry __sun4v_1insn_patch,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#343: FILE: arch/sparc/include/asm/trap_block.h:80:
+};
+extern struct sun4v_2insn_patch_entry __sun4v_2insn_patch,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: arch/sparc/include/asm/trap_block.h:83:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#372: FILE: arch/sparc/include/asm/trap_block.h:109:
+#define __GET_CPUID(REG)				\
+	/* Spitfire implementation (default). */	\
+661:	ldxa		[%g0] ASI_UPA_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	 and		REG, 0x1f, REG;			\
+	nop;						\
+	.section	.cpuid_patch, "ax";		\
+	/* Instruction location. */			\
+	.word		661b;				\
+	/* Cheetah Safari implementation. */		\
+	ldxa		[%g0] ASI_SAFARI_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	and		REG, 0x3ff, REG;		\
+	nop;						\
+	/* Cheetah JBUS implementation. */		\
+	ldxa		[%g0] ASI_JBUS_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	and		REG, 0x1f, REG;			\
+	nop;						\
+	/* Starfire implementation. */			\
+	sethi		%hi(0x1fff40000d0 >> 9), REG;	\
+	sllx		REG, 9, REG;			\
+	or		REG, 0xd0, REG;			\
+	lduwa		[REG] ASI_PHYS_BYPASS_EC_E, REG;\
+	/* sun4v implementation. */			\
+	mov		SCRATCHPAD_CPUID, REG;		\
+	ldxa		[REG] ASI_SCRATCHPAD, REG;	\
+	nop;						\
+	nop;						\
+	.previous;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'REG' - possible side-effects?
#372: FILE: arch/sparc/include/asm/trap_block.h:109:
+#define __GET_CPUID(REG)				\
+	/* Spitfire implementation (default). */	\
+661:	ldxa		[%g0] ASI_UPA_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	 and		REG, 0x1f, REG;			\
+	nop;						\
+	.section	.cpuid_patch, "ax";		\
+	/* Instruction location. */			\
+	.word		661b;				\
+	/* Cheetah Safari implementation. */		\
+	ldxa		[%g0] ASI_SAFARI_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	and		REG, 0x3ff, REG;		\
+	nop;						\
+	/* Cheetah JBUS implementation. */		\
+	ldxa		[%g0] ASI_JBUS_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	and		REG, 0x1f, REG;			\
+	nop;						\
+	/* Starfire implementation. */			\
+	sethi		%hi(0x1fff40000d0 >> 9), REG;	\
+	sllx		REG, 9, REG;			\
+	or		REG, 0xd0, REG;			\
+	lduwa		[REG] ASI_PHYS_BYPASS_EC_E, REG;\
+	/* sun4v implementation. */			\
+	mov		SCRATCHPAD_CPUID, REG;		\
+	ldxa		[REG] ASI_SCRATCHPAD, REG;	\
+	nop;						\
+	nop;						\
+	.previous;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#372: FILE: arch/sparc/include/asm/trap_block.h:109:
+#define __GET_CPUID(REG)				\
+	/* Spitfire implementation (default). */	\
+661:	ldxa		[%g0] ASI_UPA_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	 and		REG, 0x1f, REG;			\
+	nop;						\
+	.section	.cpuid_patch, "ax";		\
+	/* Instruction location. */			\
+	.word		661b;				\
+	/* Cheetah Safari implementation. */		\
+	ldxa		[%g0] ASI_SAFARI_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	and		REG, 0x3ff, REG;		\
+	nop;						\
+	/* Cheetah JBUS implementation. */		\
+	ldxa		[%g0] ASI_JBUS_CONFIG, REG;	\
+	srlx		REG, 17, REG;			\
+	and		REG, 0x1f, REG;			\
+	nop;						\
+	/* Starfire implementation. */			\
+	sethi		%hi(0x1fff40000d0 >> 9), REG;	\
+	sllx		REG, 9, REG;			\
+	or		REG, 0xd0, REG;			\
+	lduwa		[REG] ASI_PHYS_BYPASS_EC_E, REG;\
+	/* sun4v implementation. */			\
+	mov		SCRATCHPAD_CPUID, REG;		\
+	ldxa		[REG] ASI_SCRATCHPAD, REG;	\
+	nop;						\
+	nop;						\
+	.previous;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#374: FILE: arch/sparc/include/asm/trap_block.h:111:
+661:	ldxa		[%g0] ASI_UPA_CONFIG, REG;	\

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#374: FILE: arch/sparc/include/asm/trap_block.h:111:
+661:	ldxa		[%g0] ASI_UPA_CONFIG, REG;	\
    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#374: FILE: arch/sparc/include/asm/trap_block.h:111:
+661:	ldxa		[%g0] ASI_UPA_CONFIG, REG;	\
     	    		 ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#382: FILE: arch/sparc/include/asm/trap_block.h:119:
+	ldxa		[%g0] ASI_SAFARI_CONFIG, REG;	\

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#382: FILE: arch/sparc/include/asm/trap_block.h:119:
+	ldxa		[%g0] ASI_SAFARI_CONFIG, REG;	\
 	    		 ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#387: FILE: arch/sparc/include/asm/trap_block.h:124:
+	ldxa		[%g0] ASI_JBUS_CONFIG, REG;	\

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#387: FILE: arch/sparc/include/asm/trap_block.h:124:
+	ldxa		[%g0] ASI_JBUS_CONFIG, REG;	\
 	    		 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#392: FILE: arch/sparc/include/asm/trap_block.h:129:
+	sethi		%hi(0x1fff40000d0 >> 9), REG;	\
 	     		^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#395: FILE: arch/sparc/include/asm/trap_block.h:132:
+	lduwa		[REG] ASI_PHYS_BYPASS_EC_E, REG;\

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#398: FILE: arch/sparc/include/asm/trap_block.h:135:
+	ldxa		[REG] ASI_SCRATCHPAD, REG;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#405: FILE: arch/sparc/include/asm/trap_block.h:142:
+#define TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	__GET_CPUID(TMP)			\
+	sethi	%hi(trap_block), DEST;		\
+	sllx	TMP, TRAP_BLOCK_SZ_SHIFT, TMP;	\
+	or	DEST, %lo(trap_block), DEST;	\
+	add	DEST, TMP, DEST;		\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'TMP' - possible side-effects?
#405: FILE: arch/sparc/include/asm/trap_block.h:142:
+#define TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	__GET_CPUID(TMP)			\
+	sethi	%hi(trap_block), DEST;		\
+	sllx	TMP, TRAP_BLOCK_SZ_SHIFT, TMP;	\
+	or	DEST, %lo(trap_block), DEST;	\
+	add	DEST, TMP, DEST;		\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#405: FILE: arch/sparc/include/asm/trap_block.h:142:
+#define TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	__GET_CPUID(TMP)			\
+	sethi	%hi(trap_block), DEST;		\
+	sllx	TMP, TRAP_BLOCK_SZ_SHIFT, TMP;	\
+	or	DEST, %lo(trap_block), DEST;	\
+	add	DEST, TMP, DEST;		\
+

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#407: FILE: arch/sparc/include/asm/trap_block.h:144:
+	sethi	%hi(trap_block), DEST;		\
 	     	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#409: FILE: arch/sparc/include/asm/trap_block.h:146:
+	or	DEST, %lo(trap_block), DEST;	\
 	  	      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#413: FILE: arch/sparc/include/asm/trap_block.h:150:
+#define TRAP_LOAD_PGD_PHYS(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#413: FILE: arch/sparc/include/asm/trap_block.h:150:
+#define TRAP_LOAD_PGD_PHYS(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#413: FILE: arch/sparc/include/asm/trap_block.h:150:
+#define TRAP_LOAD_PGD_PHYS(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#415: FILE: arch/sparc/include/asm/trap_block.h:152:
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#418: FILE: arch/sparc/include/asm/trap_block.h:155:
+#define TRAP_LOAD_IRQ_WORK_PA(DEST, TMP)	\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	add	DEST, TRAP_PER_CPU_IRQ_WORKLIST_PA, DEST;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#418: FILE: arch/sparc/include/asm/trap_block.h:155:
+#define TRAP_LOAD_IRQ_WORK_PA(DEST, TMP)	\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	add	DEST, TRAP_PER_CPU_IRQ_WORKLIST_PA, DEST;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#423: FILE: arch/sparc/include/asm/trap_block.h:160:
+#define TRAP_LOAD_THREAD_REG(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#423: FILE: arch/sparc/include/asm/trap_block.h:160:
+#define TRAP_LOAD_THREAD_REG(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#423: FILE: arch/sparc/include/asm/trap_block.h:160:
+#define TRAP_LOAD_THREAD_REG(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#425: FILE: arch/sparc/include/asm/trap_block.h:162:
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'THR' may be better as '(THR)' to avoid precedence issues
#436: FILE: arch/sparc/include/asm/trap_block.h:173:
+#define LOAD_PER_CPU_BASE(DEST, THR, REG1, REG2, REG3)	\
+	lduh	[THR + TI_CPU], REG1;			\
+	sethi	%hi(__per_cpu_shift), REG3;		\
+	sethi	%hi(__per_cpu_base), REG2;		\
+	ldx	[REG3 + %lo(__per_cpu_shift)], REG3;	\
+	ldx	[REG2 + %lo(__per_cpu_base)], REG2;	\
+	sllx	REG1, REG3, REG3;			\
+	add	REG3, REG2, DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'REG1' - possible side-effects?
#436: FILE: arch/sparc/include/asm/trap_block.h:173:
+#define LOAD_PER_CPU_BASE(DEST, THR, REG1, REG2, REG3)	\
+	lduh	[THR + TI_CPU], REG1;			\
+	sethi	%hi(__per_cpu_shift), REG3;		\
+	sethi	%hi(__per_cpu_base), REG2;		\
+	ldx	[REG3 + %lo(__per_cpu_shift)], REG3;	\
+	ldx	[REG2 + %lo(__per_cpu_base)], REG2;	\
+	sllx	REG1, REG3, REG3;			\
+	add	REG3, REG2, DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'REG2' - possible side-effects?
#436: FILE: arch/sparc/include/asm/trap_block.h:173:
+#define LOAD_PER_CPU_BASE(DEST, THR, REG1, REG2, REG3)	\
+	lduh	[THR + TI_CPU], REG1;			\
+	sethi	%hi(__per_cpu_shift), REG3;		\
+	sethi	%hi(__per_cpu_base), REG2;		\
+	ldx	[REG3 + %lo(__per_cpu_shift)], REG3;	\
+	ldx	[REG2 + %lo(__per_cpu_base)], REG2;	\
+	sllx	REG1, REG3, REG3;			\
+	add	REG3, REG2, DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'REG3' - possible side-effects?
#436: FILE: arch/sparc/include/asm/trap_block.h:173:
+#define LOAD_PER_CPU_BASE(DEST, THR, REG1, REG2, REG3)	\
+	lduh	[THR + TI_CPU], REG1;			\
+	sethi	%hi(__per_cpu_shift), REG3;		\
+	sethi	%hi(__per_cpu_base), REG2;		\
+	ldx	[REG3 + %lo(__per_cpu_shift)], REG3;	\
+	ldx	[REG2 + %lo(__per_cpu_base)], REG2;	\
+	sllx	REG1, REG3, REG3;			\
+	add	REG3, REG2, DEST;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#436: FILE: arch/sparc/include/asm/trap_block.h:173:
+#define LOAD_PER_CPU_BASE(DEST, THR, REG1, REG2, REG3)	\
+	lduh	[THR + TI_CPU], REG1;			\
+	sethi	%hi(__per_cpu_shift), REG3;		\
+	sethi	%hi(__per_cpu_base), REG2;		\
+	ldx	[REG3 + %lo(__per_cpu_shift)], REG3;	\
+	ldx	[REG2 + %lo(__per_cpu_base)], REG2;	\
+	sllx	REG1, REG3, REG3;			\
+	add	REG3, REG2, DEST;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#437: FILE: arch/sparc/include/asm/trap_block.h:174:
+	lduh	[THR + TI_CPU], REG1;			\

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#438: FILE: arch/sparc/include/asm/trap_block.h:175:
+	sethi	%hi(__per_cpu_shift), REG3;		\
 	     	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#439: FILE: arch/sparc/include/asm/trap_block.h:176:
+	sethi	%hi(__per_cpu_base), REG2;		\
 	     	^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#440: FILE: arch/sparc/include/asm/trap_block.h:177:
+	ldx	[REG3 + %lo(__per_cpu_shift)], REG3;	\

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#440: FILE: arch/sparc/include/asm/trap_block.h:177:
+	ldx	[REG3 + %lo(__per_cpu_shift)], REG3;	\
 	   	        ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#441: FILE: arch/sparc/include/asm/trap_block.h:178:
+	ldx	[REG2 + %lo(__per_cpu_base)], REG2;	\

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#441: FILE: arch/sparc/include/asm/trap_block.h:178:
+	ldx	[REG2 + %lo(__per_cpu_base)], REG2;	\
 	   	        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#447: FILE: arch/sparc/include/asm/trap_block.h:184:
+#define TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	sethi	%hi(trap_block), DEST;		\
+	or	DEST, %lo(trap_block), DEST;	\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#447: FILE: arch/sparc/include/asm/trap_block.h:184:
+#define TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	sethi	%hi(trap_block), DEST;		\
+	or	DEST, %lo(trap_block), DEST;	\
+

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#448: FILE: arch/sparc/include/asm/trap_block.h:185:
+	sethi	%hi(trap_block), DEST;		\
 	     	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#449: FILE: arch/sparc/include/asm/trap_block.h:186:
+	or	DEST, %lo(trap_block), DEST;	\
 	  	      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#452: FILE: arch/sparc/include/asm/trap_block.h:189:
+#define TRAP_LOAD_PGD_PHYS(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#452: FILE: arch/sparc/include/asm/trap_block.h:189:
+#define TRAP_LOAD_PGD_PHYS(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#452: FILE: arch/sparc/include/asm/trap_block.h:189:
+#define TRAP_LOAD_PGD_PHYS(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#454: FILE: arch/sparc/include/asm/trap_block.h:191:
+	ldx	[DEST + TRAP_PER_CPU_PGD_PADDR], DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#457: FILE: arch/sparc/include/asm/trap_block.h:194:
+#define TRAP_LOAD_IRQ_WORK_PA(DEST, TMP)	\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	add	DEST, TRAP_PER_CPU_IRQ_WORKLIST_PA, DEST;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#457: FILE: arch/sparc/include/asm/trap_block.h:194:
+#define TRAP_LOAD_IRQ_WORK_PA(DEST, TMP)	\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	add	DEST, TRAP_PER_CPU_IRQ_WORKLIST_PA, DEST;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#461: FILE: arch/sparc/include/asm/trap_block.h:198:
+#define TRAP_LOAD_THREAD_REG(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#461: FILE: arch/sparc/include/asm/trap_block.h:198:
+#define TRAP_LOAD_THREAD_REG(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#461: FILE: arch/sparc/include/asm/trap_block.h:198:
+#define TRAP_LOAD_THREAD_REG(DEST, TMP)		\
+	TRAP_LOAD_TRAP_BLOCK(DEST, TMP)		\
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#463: FILE: arch/sparc/include/asm/trap_block.h:200:
+	ldx	[DEST + TRAP_PER_CPU_THREAD], DEST;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 14 warnings, 33 checks, 419 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
