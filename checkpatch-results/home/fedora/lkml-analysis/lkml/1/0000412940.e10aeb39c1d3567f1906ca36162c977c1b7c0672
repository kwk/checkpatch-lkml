WARNING:BAD_SIGN_OFF: 'Acked-by:' is the preferred signature form
#93: 
Acked-By: NeilBrown <neilb@suse.de>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#119: FILE: drivers/md/raid5.c:331:
+raid5_end_write_request (struct bio *bi, unsigned int bytes_done, int error);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: drivers/md/raid5.c:344:
+		mdk_rdev_t *rdev;
+		if (test_and_clear_bit(R5_Wantwrite, &sh->dev[i].flags))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <R5_Wantwrite>
#132: FILE: drivers/md/raid5.c:344:
+		if (test_and_clear_bit(R5_Wantwrite, &sh->dev[i].flags))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <R5_Wantread>
#134: FILE: drivers/md/raid5.c:346:
+		else if (test_and_clear_bit(R5_Wantread, &sh->dev[i].flags))

CHECK:CAMELCASE: Avoid CamelCase: <Faulty>
#149: FILE: drivers/md/raid5.c:361:
+		if (rdev && test_bit(Faulty, &rdev->flags))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: drivers/md/raid5.c:369:
+			if (test_bit(STRIPE_SYNCING, &sh->state) ||
+				test_bit(STRIPE_EXPAND_SOURCE, &sh->state) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: drivers/md/raid5.c:375:
+			pr_debug("%s: for %llu schedule op %ld on disc %d\n",
+				__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#163: FILE: drivers/md/raid5.c:375:
+				__FUNCTION__, (unsigned long long)sh->sector,

CHECK:CAMELCASE: Avoid CamelCase: <R5_ReWrite>
#177: FILE: drivers/md/raid5.c:389:
+			    test_bit(R5_ReWrite, &sh->dev[i].flags))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/md/raid5.c:391:
+				atomic_add(STRIPE_SECTORS,
+					&rdev->corrected_errors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: drivers/md/raid5.c:397:
+			pr_debug("skip op %ld on disc %d for sector %llu\n",
+				bi->bi_rw, i, (unsigned long long)sh->sector);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/md/raid5.c:406:
+async_copy_data(int frombio, struct bio *bio, struct page *page,
+	sector_t sector, struct dma_async_tx_descriptor *tx)

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#202: FILE: drivers/md/raid5.c:414:
+		page_offset = (signed)(bio->bi_sector - sector) * 512;

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#204: FILE: drivers/md/raid5.c:416:
+		page_offset = (signed)(sector - bio->bi_sector) * -512;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: drivers/md/raid5.c:438:
+				tx = async_memcpy(page, bio_page, page_offset,
+					b_offset, clen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: drivers/md/raid5.c:443:
+				tx = async_memcpy(bio_page, page, b_offset,
+					page_offset, clen,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#250: FILE: drivers/md/raid5.c:462:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: drivers/md/raid5.c:463:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#262: FILE: drivers/md/raid5.c:474:
+		/* and check if we need to reply to a read request
+		*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <R5_Wantfill>
#263: FILE: drivers/md/raid5.c:475:
+		if (test_bit(R5_Wantfill, &dev->flags) && !dev->toread) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: drivers/md/raid5.c:477:
+			struct bio *rbi, *rbi2;
+			clear_bit(R5_Wantfill, &dev->flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: drivers/md/raid5.c:483:
+			BUG_ON(!dev->read);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#313: FILE: drivers/md/raid5.c:525:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: drivers/md/raid5.c:526:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: drivers/md/raid5.c:530:
+		struct r5dev *dev = &sh->dev[i];
+		if (test_bit(R5_Wantfill, &dev->flags)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: drivers/md/raid5.c:532:
+			struct bio *rbi;
+			spin_lock_irq(&conf->device_lock);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#321: FILE: drivers/md/raid5.c:533:
+			dev->read = rbi = dev->toread;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: drivers/md/raid5.c:539:
+				tx = async_copy_data(0, rbi, dev->page,
+					dev->sector, tx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/md/raid5.c:547:
+	async_trigger_callback(ASYNC_TX_DEP_ACK | ASYNC_TX_ACK, tx,
+		ops_complete_biofill, sh);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#344: FILE: drivers/md/raid5.c:556:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: drivers/md/raid5.c:557:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: drivers/md/raid5.c:560:
+	BUG_ON(!test_bit(R5_Wantcompute, &tgt->flags));

CHECK:CAMELCASE: Avoid CamelCase: <R5_Wantcompute>
#348: FILE: drivers/md/raid5.c:560:
+	BUG_ON(!test_bit(R5_Wantcompute, &tgt->flags));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/md/raid5.c:581:
+	pr_debug("%s: stripe %llu block: %d\n",
+		__FUNCTION__, (unsigned long long)sh->sector, target);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#369: FILE: drivers/md/raid5.c:581:
+		__FUNCTION__, (unsigned long long)sh->sector, target);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#370: FILE: drivers/md/raid5.c:582:
+	BUG_ON(!test_bit(R5_Wantcompute, &tgt->flags));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: drivers/md/raid5.c:592:
+		tx = async_memcpy(xor_dest, xor_srcs[0], 0, 0, STRIPE_SIZE,
+			0, NULL, ops_complete_compute5, sh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: drivers/md/raid5.c:595:
+		tx = async_xor(xor_dest, xor_srcs, 0, count, STRIPE_SIZE,
+			ASYNC_TX_XOR_ZERO_DST, NULL,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#397: FILE: drivers/md/raid5.c:609:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: drivers/md/raid5.c:610:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#414: FILE: drivers/md/raid5.c:626:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: drivers/md/raid5.c:627:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#419: FILE: drivers/md/raid5.c:631:
+		/* Only process blocks that are known to be uptodate */
 		                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <R5_Wantprexor>
#420: FILE: drivers/md/raid5.c:632:
+		if (dev->towrite && test_bit(R5_Wantprexor, &dev->flags))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/md/raid5.c:637:
+	tx = async_xor(xor_dest, xor_srcs, 0, count, STRIPE_SIZE,
+		ASYNC_TX_DEP_ACK | ASYNC_TX_XOR_DROP_DST, tx,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#442: FILE: drivers/md/raid5.c:654:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: drivers/md/raid5.c:655:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: drivers/md/raid5.c:669:
+			if (i != pd_idx && dev->towrite &&
+				test_bit(R5_LOCKED, &dev->flags))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: drivers/md/raid5.c:679:
+			BUG_ON(dev->written);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#468: FILE: drivers/md/raid5.c:680:
+			wbi = dev->written = chosen;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: drivers/md/raid5.c:686:
+				tx = async_copy_data(1, wbi, dev->page,
+					dev->sector, tx);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#487: FILE: drivers/md/raid5.c:699:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: drivers/md/raid5.c:700:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#500: FILE: drivers/md/raid5.c:712:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: drivers/md/raid5.c:713:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: drivers/md/raid5.c:717:
+		struct r5dev *dev = &sh->dev[i];
+		if (dev->written || i == pd_idx)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#529: FILE: drivers/md/raid5.c:741:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: drivers/md/raid5.c:742:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#536: FILE: drivers/md/raid5.c:748:
+		xor_dest = xor_srcs[count++] = sh->dev[pd_idx].page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: drivers/md/raid5.c:751:
+			struct r5dev *dev = &sh->dev[i];
+			if (dev->written)

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: drivers/md/raid5.c:758:
+			struct r5dev *dev = &sh->dev[i];
+			if (i != pd_idx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/md/raid5.c:780:
+		tx = async_memcpy(xor_dest, xor_srcs[0], 0, 0, STRIPE_SIZE,
+			flags, tx, callback, sh);

CHECK:BRACES: Unbalanced braces around else statement
#569: FILE: drivers/md/raid5.c:781:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/md/raid5.c:783:
+		tx = async_xor(xor_dest, xor_srcs, 0, count, STRIPE_SIZE,
+			flags, tx, callback, sh);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#579: FILE: drivers/md/raid5.c:791:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: drivers/md/raid5.c:792:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/md/raid5.c:795:
+	if (test_and_clear_bit(STRIPE_OP_MOD_DMA_CHECK, &sh->ops.pending) &&
+		sh->ops.zero_sum_result == 0)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#601: FILE: drivers/md/raid5.c:813:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/md/raid5.c:814:
+	pr_debug("%s: stripe %llu\n", __FUNCTION__,
+		(unsigned long long)sh->sector);

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: drivers/md/raid5.c:818:
+		struct r5dev *dev = &sh->dev[i];
+		if (i != pd_idx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: drivers/md/raid5.c:823:
+	tx = async_xor_zero_sum(xor_dest, xor_srcs, 0, count, STRIPE_SIZE,
+		&sh->ops.zero_sum_result, 0, NULL, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: drivers/md/raid5.c:832:
+	tx = async_trigger_callback(ASYNC_TX_DEP_ACK | ASYNC_TX_ACK, tx,
+		ops_complete_check, sh);

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: drivers/md/raid5.c:868:
+			struct r5dev *dev = &sh->dev[i];
+			if (test_and_clear_bit(R5_Overlap, &dev->flags))

CHECK:CAMELCASE: Avoid CamelCase: <R5_Overlap>
#656: FILE: drivers/md/raid5.c:868:
+			if (test_and_clear_bit(R5_Overlap, &dev->flags))

WARNING:TYPO_SPELLING: 'guaruntees' may be misspelled - perhaps 'guarantees'?
#711: FILE: include/linux/raid/raid5.h:156:
+ *    that block as if it is up to date.  raid5_run_ops guaruntees that any
                                                         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#750: FILE: include/linux/raid/raid5.h:226:
+				    * uptodate
 				      ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#750: FILE: include/linux/raid/raid5.h:226:
+#define	R5_Wantcompute	11 /* compute_block in progress treat as
+				    * uptodate

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#753: FILE: include/linux/raid/raid5.h:229:
+#define	R5_Wantfill	12 /* dev->toread contains a bio that needs
+				    * filling

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#756: FILE: include/linux/raid/raid5.h:232:
+#define	R5_Wantprexor	13 /* distinguish blocks ready for rmw from
+				    * other "towrites"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412940.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 37 warnings, 43 checks, 672 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412940.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
