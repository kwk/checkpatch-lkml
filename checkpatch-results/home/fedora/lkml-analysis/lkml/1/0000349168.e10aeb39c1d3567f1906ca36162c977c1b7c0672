WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#35: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: fs/unionfs/copyup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#147: FILE: fs/unionfs/copyup.c:108:
+	if (err == -ENOTSUPP || err == -EOPNOTSUPP)

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#187: FILE: fs/unionfs/copyup.c:148:
+		printk(KERN_WARNING

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#238: FILE: fs/unionfs/copyup.c:199:
+		struct nameidata nd;
 		                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#239: FILE: fs/unionfs/copyup.c:200:
+		err = init_lower_nd(&nd, LOOKUP_CREATE);
 		                     ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: fs/unionfs/copyup.c:200:
+		struct nameidata nd;
+		err = init_lower_nd(&nd, LOOKUP_CREATE);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/unionfs/copyup.c:203:
+		args.create.nd = &nd;
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/unionfs/copyup.c:203:
+		args.create.nd = &nd;
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#249: FILE: fs/unionfs/copyup.c:210:
+		release_lower_nd(&nd, err);
 		                  ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#251: FILE: fs/unionfs/copyup.c:212:
+		printk(KERN_CRIT "unionfs: unknown inode type %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: fs/unionfs/copyup.c:214:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'write_bytes < 0'
#344: FILE: fs/unionfs/copyup.c:305:
+		if ((write_bytes < 0) || (write_bytes < read_bytes)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'write_bytes < read_bytes'
#344: FILE: fs/unionfs/copyup.c:305:
+		if ((write_bytes < 0) || (write_bytes < read_bytes)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#431: FILE: fs/unionfs/copyup.c:392:
+	BUG_ON(new_bindex < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#432: FILE: fs/unionfs/copyup.c:393:
+	BUG_ON(new_bindex >= old_bindex);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#453: FILE: fs/unionfs/copyup.c:414:
+	if (S_ISLNK(old_lower_dentry->d_inode->i_mode)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#465: FILE: fs/unionfs/copyup.c:426:
+		err = old_lower_dentry->d_inode->i_op->readlink(

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: fs/unionfs/copyup.c:528:
+			struct inode *inode = new_lower_dentry->d_inode;
+			atomic_inc(&inode->i_count);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#674: FILE: fs/unionfs/copyup.c:635:
+
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#687: FILE: fs/unionfs/copyup.c:648:
+
+}

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#736: FILE: fs/unionfs/copyup.c:697:
+	path = kmalloc(nr_dentry * sizeof(struct dentry *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#858: FILE: fs/unionfs/copyup.c:819:
+				iput(inode);
 				^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#865: FILE: fs/unionfs/copyup.c:826:
+
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#919: FILE: fs/unionfs/copyup.c:880:
+	BUG_ON(S_ISDIR(dentry->d_inode->i_mode));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#920: FILE: fs/unionfs/copyup.c:881:
+	for (bindex = dbstart(dentry)+1; bindex <= dbend(dentry); bindex++) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#928: FILE: fs/unionfs/copyup.c:889:
+			iput(unionfs_lower_inode_idx(dentry->d_inode, bindex));
 			^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349168.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 8 checks, 897 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349168.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
