WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#100: FILE: kernel/lockdep_proc.c:20:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#152: FILE: kernel/lockdep_proc.c:392:
+	snprintf(buf, bufsiz, "%llu.%02d", nr, ((int)rem+5)/10);
 	                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#152: FILE: kernel/lockdep_proc.c:392:
+	snprintf(buf, bufsiz, "%llu.%02d", nr, ((int)rem+5)/10);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#218: FILE: kernel/lockdep_proc.c:458:
+			seq_line(m, '-', 40-namelen, namelen);
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: kernel/lockdep_proc.c:462:
+		snprintf(ip, sizeof(ip), "[<%p>]",
+				(void *)class->contention_point[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: kernel/lockdep_proc.c:464:
+		seq_printf(m, "%40s %14lu %29s %s\n", name,
+				stats->contention_point[i],

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#236: FILE: kernel/lockdep_proc.c:476:
+	seq_printf(m, "lock_stat version 0.1\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: kernel/lockdep_proc.c:479:
+	seq_printf(m, "%40s %14s %14s %14s %14s %14s %14s %14s %14s\n",
+			"class name",

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#249: FILE: kernel/lockdep_proc.c:489:
+	seq_printf(m, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#288: FILE: kernel/lockdep_proc.c:528:
+static struct seq_operations lockstat_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*data)...) over vmalloc(sizeof(struct lock_stat_seq)...)
#299: FILE: kernel/lockdep_proc.c:539:
+	struct lock_stat_seq *data = vmalloc(sizeof(struct lock_stat_seq));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#305: FILE: kernel/lockdep_proc.c:545:
+	if (!res) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: kernel/lockdep_proc.c:558:
+		sort(data->stats, data->iter_end - data->iter,
+				sizeof(struct lock_stat_data),

CHECK:BRACES: Unbalanced braces around else statement
#322: FILE: kernel/lockdep_proc.c:562:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: kernel/lockdep_proc.c:569:
+ssize_t lock_stat_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *ppos)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#373: FILE: kernel/lockdep_proc.c:618:
+	entry = create_proc_entry("lock_stat", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 11 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
