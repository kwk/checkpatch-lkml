WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: arch/Kconfig:60:
+config UBP
+	bool "User-space breakpoint assistance (EXPERIMENTAL)"
+	depends on MODULES
+	depends on HAVE_UBP
+	help
+	  Ubp enables kernel subsystems to establish breakpoints
+	  in user applications. This service is used by components
+	  such as uprobes. If in doubt, say "N".
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: include/linux/ubp.h:1:
+#ifndef _LINUX_UBP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#95: FILE: include/linux/ubp.h:5:
+ * include/linux/ubp.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#108: FILE: include/linux/ubp.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#109: FILE: include/linux/ubp.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/ubp.h:94:
+extern int ubp_init(u16 *strategies);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/ubp.h:95:
+extern int ubp_insert_bkpt(struct task_struct *tsk, struct ubp_bkpt *ubp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: include/linux/ubp.h:96:
+extern unsigned long ubp_get_bkpt_addr(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/linux/ubp.h:97:
+extern int ubp_pre_sstep(struct task_struct *tsk, struct ubp_bkpt *ubp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: include/linux/ubp.h:98:
+extern int ubp_pre_sstep(struct task_struct *tsk, struct ubp_bkpt *ubp,
+		struct ubp_task_arch_info *tskinfo, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: include/linux/ubp.h:99:
+extern int ubp_post_sstep(struct task_struct *tsk, struct ubp_bkpt *ubp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: include/linux/ubp.h:100:
+extern int ubp_post_sstep(struct task_struct *tsk, struct ubp_bkpt *ubp,
+		struct ubp_task_arch_info *tskinfo, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/ubp.h:101:
+extern int ubp_cancel_xol(struct task_struct *tsk, struct ubp_bkpt *ubp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/ubp.h:102:
+extern int ubp_remove_bkpt(struct task_struct *tsk, struct ubp_bkpt *ubp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/ubp.h:103:
+extern int ubp_validate_insn_addr(struct task_struct *tsk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: include/linux/ubp.h:104:
+extern int ubp_validate_insn_addr(struct task_struct *tsk,
+						unsigned long vaddr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/ubp.h:105:
+extern void ubp_set_ip(struct pt_regs *regs, unsigned long vaddr);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#199: FILE: include/linux/ubp.h:109:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#201: FILE: include/linux/ubp.h:111:
+}
+static inline int ubp_insert_bkpt(struct task_struct *tsk,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: include/linux/ubp.h:112:
+static inline int ubp_insert_bkpt(struct task_struct *tsk,
+						struct ubp_bkpt *ubp)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#204: FILE: include/linux/ubp.h:114:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#206: FILE: include/linux/ubp.h:116:
+}
+static inline unsigned long ubp_get_bkpt_addr(struct pt_regs *regs)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#208: FILE: include/linux/ubp.h:118:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#210: FILE: include/linux/ubp.h:120:
+}
+static inline int ubp_pre_sstep(struct task_struct *tsk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: include/linux/ubp.h:121:
+static inline int ubp_pre_sstep(struct task_struct *tsk,
+	struct ubp_bkpt *ubp, struct ubp_task_arch_info *tskinfo,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#214: FILE: include/linux/ubp.h:124:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#216: FILE: include/linux/ubp.h:126:
+}
+static inline int ubp_post_sstep(struct task_struct *tsk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: include/linux/ubp.h:127:
+static inline int ubp_post_sstep(struct task_struct *tsk,
+	struct ubp_bkpt *ubp, struct ubp_task_arch_info *tskinfo,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#220: FILE: include/linux/ubp.h:130:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#222: FILE: include/linux/ubp.h:132:
+}
+static inline int ubp_cancel_xol(struct task_struct *tsk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: include/linux/ubp.h:133:
+static inline int ubp_cancel_xol(struct task_struct *tsk,
+	struct ubp_bkpt *ubp)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#225: FILE: include/linux/ubp.h:135:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#227: FILE: include/linux/ubp.h:137:
+}
+static inline int ubp_remove_bkpt(struct task_struct *tsk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: include/linux/ubp.h:138:
+static inline int ubp_remove_bkpt(struct task_struct *tsk,
+	struct ubp_bkpt *ubp)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#230: FILE: include/linux/ubp.h:140:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#232: FILE: include/linux/ubp.h:142:
+}
+static inline int ubp_validate_insn_addr(struct task_struct *tsk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: include/linux/ubp.h:143:
+static inline int ubp_validate_insn_addr(struct task_struct *tsk,
+	unsigned long vaddr)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#235: FILE: include/linux/ubp.h:145:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#237: FILE: include/linux/ubp.h:147:
+}
+static inline void ubp_set_ip(struct pt_regs *regs, unsigned long vaddr)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#257: FILE: include/linux/ubp.h:167:
+ * ^IThe number of bytes the instruction pointer is advanced by$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: include/linux/ubp.h:168:
+ * ^Ithis architecture's breakpoint instruction.  For example, after$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: include/linux/ubp.h:169:
+ * ^Ithe powerpc trap instruction executes, the ip still points to the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: include/linux/ubp.h:170:
+ * ^Ibreakpoint instruction (ip_advancement_by_bkpt_insn = 0); but the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: include/linux/ubp.h:171:
+ * ^Ix86 int3 instruction (1 byte) advances the ip past the int3$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: include/linux/ubp.h:172:
+ * ^I(ip_advancement_by_bkpt_insn = 1).$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: include/linux/ubp.h:256:
+	int (*read_opcode)(struct task_struct *tsk, unsigned long vaddr,
+						ubp_opcode_t *opcode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: include/linux/ubp.h:259:
+	int (*set_orig_insn)(struct task_struct *tsk,
+				struct ubp_bkpt *ubp, bool check);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: include/linux/ubp.h:263:
+	int (*pre_xol)(struct task_struct *tsk, struct ubp_bkpt *ubp,
+				struct ubp_task_arch_info *tskinfo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: include/linux/ubp.h:266:
+	int (*post_xol)(struct task_struct *tsk, struct ubp_bkpt *ubp,
+				struct ubp_task_arch_info *tskinfo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: include/linux/ubp.h:273:
+extern int ubp_read_vm(struct task_struct *tsk, unsigned long vaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: include/linux/ubp.h:274:
+extern int ubp_read_vm(struct task_struct *tsk, unsigned long vaddr,
+						void *kbuf, int nbytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: include/linux/ubp.h:275:
+extern int ubp_write_data(struct task_struct *tsk, unsigned long vaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: include/linux/ubp.h:276:
+extern int ubp_write_data(struct task_struct *tsk, unsigned long vaddr,
+					const void *kbuf, int nbytes);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#390: FILE: kernel/ubp_core.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#404: FILE: kernel/ubp_core.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#405: FILE: kernel/ubp_core.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: kernel/ubp_core.c:78:
+	if (!validate_strategy(client_strategies,
+				UBP_HNT_INLINE | UBP_HNT_TSKINFO))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: kernel/ubp_core.c:92:
+int ubp_read_vm(struct task_struct *tsk, unsigned long vaddr,
+						void *kbuf, int nbytes)

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: kernel/ubp_core.c:94:
+	if (tsk == current) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#484: FILE: kernel/ubp_core.c:95:
+		int nleft = copy_from_user(kbuf, (void __user *) vaddr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#487: FILE: kernel/ubp_core.c:98:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: kernel/ubp_core.c:108:
+int ubp_write_data(struct task_struct *tsk, unsigned long vaddr,
+						const void *kbuf, int nbytes)

CHECK:SPACING: No space is necessary after a cast
#502: FILE: kernel/ubp_core.c:113:
+		nleft = copy_to_user((void __user *) vaddr, kbuf, nbytes);

CHECK:BRACES: Unbalanced braces around else statement
#504: FILE: kernel/ubp_core.c:115:
+	} else

CHECK:SPACING: No space is necessary after a cast
#505: FILE: kernel/ubp_core.c:116:
+		return access_process_vm(tsk, vaddr, (void *) kbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: kernel/ubp_core.c:121:
+static int ubp_write_opcode(struct task_struct *tsk, unsigned long vaddr,
+							ubp_opcode_t opcode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: kernel/ubp_core.c:131:
+static int ubp_read_opcode(struct task_struct *tsk, unsigned long vaddr,
+							ubp_opcode_t *opcode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: kernel/ubp_core.c:147:
+static int ubp_set_orig_insn(struct task_struct *tsk, struct ubp_bkpt *ubp,
+								bool check)

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: kernel/ubp_core.c:152:
+		int result = arch->read_opcode(tsk, ubp->vaddr, &opcode);
+		if (result)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: kernel/ubp_core.c:202:
+static void ubp_bkpt_insertion_failed(struct task_struct *tsk,
+				struct ubp_bkpt *ubp, const char *why)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#593: FILE: kernel/ubp_core.c:204:
+	printk(KERN_ERR "Can't place breakpoint at pid %d vaddr %#lx: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: kernel/ubp_core.c:205:
+	printk(KERN_ERR "Can't place breakpoint at pid %d vaddr %#lx: %s\n",
+						tsk->pid, ubp->vaddr, why);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#633: FILE: kernel/ubp_core.c:244:
+	BUG_ON(!tsk || !ubp);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: kernel/ubp_core.c:261:
+		ubp_bkpt_insertion_failed(tsk, ubp,
+					"error reading original instruction");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: kernel/ubp_core.c:267:
+		ubp_bkpt_insertion_failed(tsk, ubp,
+					"bkpt already exists at that addr");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: kernel/ubp_core.c:274:
+		ubp_bkpt_insertion_failed(tsk, ubp,
+					"instruction type cannot be probed");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: kernel/ubp_core.c:281:
+		ubp_bkpt_insertion_failed(tsk, ubp,
+					"failed to insert bkpt instruction");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: kernel/ubp_core.c:314:
+int ubp_pre_sstep(struct task_struct *tsk, struct ubp_bkpt *ubp,
+		struct ubp_task_arch_info *tskinfo, struct pt_regs *regs)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#707: FILE: kernel/ubp_core.c:318:
+	BUG_ON(!tsk || !ubp || !regs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#709: FILE: kernel/ubp_core.c:320:
+		BUG_ON(!ubp->xol_vaddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: kernel/ubp_core.c:348:
+int ubp_post_sstep(struct task_struct *tsk, struct ubp_bkpt *ubp,
+		struct ubp_task_arch_info *tskinfo, struct pt_regs *regs)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#739: FILE: kernel/ubp_core.c:350:
+	BUG_ON(!tsk || !ubp || !regs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: kernel/ubp_core.c:424:
+static int ubp_pre_xol(struct task_struct *tsk, struct ubp_bkpt *ubp,
+		struct ubp_task_arch_info *tskinfo, struct pt_regs *regs)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#823: FILE: kernel/ubp_core.c:434:
+	printk(KERN_ERR "ubp: bad value %d/%#x for parameter %s"

WARNING:SPLIT_STRING: quoted string split across lines
#824: FILE: kernel/ubp_core.c:435:
+	printk(KERN_ERR "ubp: bad value %d/%#x for parameter %s"
+		" in ubp_arch_info\n", value, value, param_name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#825: FILE: kernel/ubp_core.c:436:
+	return -ENOSYS;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#830: FILE: kernel/ubp_core.c:441:
+	printk(KERN_ERR "ubp: ubp_arch_info lacks required function: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: kernel/ubp_core.c:442:
+	printk(KERN_ERR "ubp: ubp_arch_info lacks required function: %s\n",
+								func_name);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#832: FILE: kernel/ubp_core.c:443:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: kernel/ubp_core.c:453:
+		result = ubp_bad_arch_param("max_insn_bytes",
+						arch->max_insn_bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: kernel/ubp_core.c:456:
+		result = ubp_bad_arch_param("ip_advancement_by_bkpt_insn",
+					arch->ip_advancement_by_bkpt_insn);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 29 warnings, 58 checks, 792 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
