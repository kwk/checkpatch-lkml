WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perf-probes-for-linus

WARNING:TYPO_SPELLING: 'betweeen' may be misspelled - perhaps 'between'?
#322: FILE: Documentation/kprobes.txt:604:
+d) DCR must not straddle the border betweeen functions.
                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#388: FILE: arch/Kconfig:60:
+config OPTPROBES
+	bool "Kprobes jump optimization support (EXPERIMENTAL)"
+	default y
+	depends on KPROBES
+	depends on !PREEMPT
+	depends on HAVE_OPTPROBES
+	select KALLSYMS_ALL
+	help
+	  This option will allow kprobes to optimize breakpoint to
+	  a jump for reducing its overhead.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: arch/x86/include/asm/alternative.h:169:
+extern void *text_poke_smp(void *addr, const void *opcode, size_t len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#467: FILE: arch/x86/include/asm/kprobes.h:56:
+#define MAX_OPTINSN_SIZE ^I^I^I^I\$

WARNING:MEMORY_BARRIER: memory barrier without comment
#537: FILE: arch/x86/kernel/alternative.c:598:
+			smp_rmb();

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#601: FILE: arch/x86/kernel/kprobes.c:115:
+	} __attribute__((packed)) *insn;

CHECK:SPACING: No space is necessary after a cast
#673: FILE: arch/x86/kernel/kprobes.c:338:
+		newdisp = (u8 *) src + (s64) insn.displacement.value -

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#674: FILE: arch/x86/kernel/kprobes.c:339:
+			  (u8 *) dest;

CHECK:SPACING: No space is necessary after a cast
#677: FILE: arch/x86/kernel/kprobes.c:341:
+		disp = (u8 *) dest + insn_offset_displacement(&insn);

CHECK:BRACES: braces {} should be used on all arms of this statement
#753: FILE: arch/x86/kernel/kprobes.c:475:
+	if (reenter) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#757: FILE: arch/x86/kernel/kprobes.c:479:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: arch/x86/kernel/kprobes.c:856:
+			synthesize_reljump((void *)regs->ip,
+				(void *)orig_ip + (regs->ip - copy_ip));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#971: FILE: arch/x86/kernel/kprobes.c:1083:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#995: FILE: arch/x86/kernel/kprobes.c:1107:
+	asm volatile (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#997: FILE: arch/x86/kernel/kprobes.c:1109:
+			"optprobe_template_entry: \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1005: FILE: arch/x86/kernel/kprobes.c:1117:
+			"optprobe_template_val: \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1009: FILE: arch/x86/kernel/kprobes.c:1121:
+			"optprobe_template_call: \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1023: FILE: arch/x86/kernel/kprobes.c:1135:
+			"optprobe_template_val: \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1026: FILE: arch/x86/kernel/kprobes.c:1138:
+			"optprobe_template_call: \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1033: FILE: arch/x86/kernel/kprobes.c:1145:
+			"optprobe_template_end: \n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: arch/x86/kernel/kprobes.c:1207:
+	return ((insn->opcode.bytes[0] == 0xff &&
+		(X86_MODRM_REG(insn->modrm.value) & 6) == 4) || /* Jump */

CHECK:SPACING: No space is necessary after a cast
#1263: FILE: arch/x86/kernel/kprobes.c:1375:
+	flush_icache_range((unsigned long) buf,

CHECK:SPACING: No space is necessary after a cast
#1264: FILE: arch/x86/kernel/kprobes.c:1376:
+			   (unsigned long) buf + TMPL_END_IDX +

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1370: FILE: include/linux/kprobes.h:274:
+extern int arch_prepared_optinsn(struct arch_optimized_insn *optinsn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1371: FILE: include/linux/kprobes.h:275:
+extern int arch_check_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1372: FILE: include/linux/kprobes.h:276:
+extern int arch_prepare_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1373: FILE: include/linux/kprobes.h:277:
+extern void arch_remove_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1374: FILE: include/linux/kprobes.h:278:
+extern int  arch_optimize_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1375: FILE: include/linux/kprobes.h:279:
+extern void arch_unoptimize_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1376: FILE: include/linux/kprobes.h:280:
+extern kprobe_opcode_t *get_optinsn_slot(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1377: FILE: include/linux/kprobes.h:281:
+extern void free_optinsn_slot(kprobe_opcode_t *slot, int dirty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1378: FILE: include/linux/kprobes.h:282:
+extern int arch_within_optimized_kprobe(struct optimized_kprobe *op,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1381: FILE: include/linux/kprobes.h:285:
+extern void opt_pre_handler(struct kprobe *p, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1385: FILE: include/linux/kprobes.h:289:
+extern int proc_kprobes_optimization_handler(struct ctl_table *table,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1438: FILE: kernel/kprobes.c:130:
+	return PAGE_SIZE/(c->insn_size * sizeof(kprobe_opcode_t));
 	                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1457: FILE: kernel/kprobes.c:145:
+};
+static int __kprobes collect_garbage_slots(struct kprobe_insn_cache *c);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1518: FILE: kernel/kprobes.c:200:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1584: FILE: kernel/kprobes.c:263:
+		long idx = ((long)slot - (long)kip->insns) / c->insn_size;
+		if (idx >= 0 && idx < slots_per_page(c)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1606: FILE: kernel/kprobes.c:279:
+void __kprobes free_insn_slot(kprobe_opcode_t * slot, int dirty)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1612: FILE: kernel/kprobes.c:285:
 }
+#ifdef CONFIG_OPTPROBES

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1620: FILE: kernel/kprobes.c:293:
+};
+/* Get a slot for optimized_kprobe buffer */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1632: FILE: kernel/kprobes.c:305:
+void __kprobes free_optinsn_slot(kprobe_opcode_t * slot, int dirty)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1749: FILE: kernel/kprobes.c:445:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*op)...) over kzalloc(sizeof(struct optimized_kprobe)...)
#1862: FILE: kernel/kprobes.c:558:
+	op = kzalloc(sizeof(struct optimized_kprobe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1920: FILE: kernel/kprobes.c:616:
+	printk(KERN_INFO "Kprobes globally optimized\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1935: FILE: kernel/kprobes.c:631:
+	printk(KERN_INFO "Kprobes globally unoptimized\n");

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1949: FILE: kernel/kprobes.c:645:
+	synchronize_sched();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2285: FILE: kernel/kprobes.c:1731:
+		seq_printf(pi, "%p  %s  %s+0x%x  %s ",
 			p->addr, kprobe_type, sym, offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2298: FILE: kernel/kprobes.c:1735:
+		seq_printf(pi, "%p  %s  %p ",
+			p->addr, kprobe_type, p->addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2303: FILE: kernel/kprobes.c:1740:
+	seq_printf(pi, "%s%s%s\n",
+		(kprobe_gone(p) ? "[GONE]" : ""),

CHECK:BRACES: braces {} should be used on all arms of this statement
#2314: FILE: kernel/kprobes.c:1778:
+		if (kprobe_aggrprobe(p)) {
[...]
+				report_probe(pi, kp, sym, offset, modname, p);
[...]

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#2405: FILE: kernel/sysctl.c:1461:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'one', consider using the shared one in include/linux/sysctl.h
#2406: FILE: kernel/sysctl.c:1462:
+		.extra2		= &one,

WARNING:SPLIT_STRING: quoted string split across lines
#2566: FILE: tools/perf/builtin-probe.c:181:
+		"[EVENT=]FUNC[+OFF|%return|:RL|;PT][@SRC]|SRC:AL|SRC;PT"
+		" [ARG ...]",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#2696: FILE: tools/perf/util/probe-event.c:173:
+				semantic_error("There is non-digit char"
+					       " in line number.");

WARNING:SPLIT_STRING: quoted string split across lines
#2733: FILE: tools/perf/util/probe-event.c:211:
+		semantic_error("File always requires line number or "
+			       "lazy pattern.");

WARNING:SPLIT_STRING: quoted string split across lines
#2745: FILE: tools/perf/util/probe-event.c:221:
+		semantic_error("Offset/Line/Lazy pattern can't be used with "
+			       "return probe.");

WARNING:SPACING: space prohibited before semicolon
#2848: FILE: tools/perf/util/probe-finder.c:122:
+			return ;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ln"
#2858: FILE: tools/perf/util/probe-finder.c:129:
+	DIE_IF(ln == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#2939: FILE: tools/perf/util/probe-finder.c:158:
+	struct line_node *ln;
+	while (!list_empty(head)) {

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Die>
#2951: FILE: tools/perf/util/probe-finder.c:168:
+static const char *cu_find_realpath(Dwarf_Die *cu_die, const char *fname)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Files>
#2955: FILE: tools/perf/util/probe-finder.c:170:
+	Dwarf_Files *files;

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Addr>
#2994: FILE: tools/perf/util/probe-finder.c:191:
+	Dwarf_Addr	addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3046: FILE: tools/perf/util/probe-finder.c:212:
+	struct __addr_die_search_param ad;
+	ad.addr = addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3166: FILE: tools/perf/util/probe-finder.c:250:
+	const char *name;
+	name = dwarf_diename(dw_die);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#3167: FILE: tools/perf/util/probe-finder.c:251:
+	DIE_IF(name == NULL);

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Op>
#3236: FILE: tools/perf/util/probe-finder.c:299:
+static void show_location(Dwarf_Op *op, struct probe_finder *pf)

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Word>
#3242: FILE: tools/perf/util/probe-finder.c:302:
+	Dwarf_Word offs = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pf->fb_ops"
#3252: FILE: tools/perf/util/probe-finder.c:309:
+		if (pf->fb_ops == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3267: FILE: tools/perf/util/probe-finder.c:316:
+	if (op->atom >= DW_OP_breg0 && op->atom <= DW_OP_breg31) {
[...]
-	} else if (op >= DW_OP_reg0 && op <= DW_OP_reg31) {
[...]
-	} else if (op == DW_OP_bregx) {
[...]
+		regn = op->atom - DW_OP_reg0;
[...]
+		regn = op->number;
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dwarf_attr"
#3318: FILE: tools/perf/util/probe-finder.c:352:
+	if (dwarf_attr(vr_die, DW_AT_location, &attr) == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Attribute>
#3413: FILE: tools/perf/util/probe-finder.c:401:
+	Dwarf_Attribute fb_attr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3434: FILE: tools/perf/util/probe-finder.c:417:
+		ret = snprintf(tmp, MAX_PROBE_BUFFER, "%s+%lu", name,
+				(unsigned long)(pf->addr - eaddr));

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Lines>
#3492: FILE: tools/perf/util/probe-finder.c:465:
+	Dwarf_Lines *lines;

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Line>
#3493: FILE: tools/perf/util/probe-finder.c:466:
+	Dwarf_Line *line;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fbuf"
#3549: FILE: tools/perf/util/probe-finder.c:509:
+	DIE_IF(fbuf == NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3649: FILE: tools/perf/util/probe-finder.c:587:
+	if (pp->lazy_line)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3651: FILE: tools/perf/util/probe-finder.c:589:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3710: FILE: tools/perf/util/probe-finder.c:620:
+		if (pp->lazy_line)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3712: FILE: tools/perf/util/probe-finder.c:622:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#3745: FILE: tools/perf/util/probe-finder.c:628:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Off>
#3767: FILE: tools/perf/util/probe-finder.c:645:
+	Dwarf_Off off, noff;

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf>
#3770: FILE: tools/perf/util/probe-finder.c:648:
+	Dwarf *dbg;

CHECK:BRACES: Unbalanced braces around else statement
#3929: FILE: tools/perf/util/probe-finder.c:740:
+	else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4102: FILE: tools/perf/util/probe-finder.h:57:
+extern int find_probe_point(int fd, struct probe_point *pp);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 27 warnings, 57 checks, 3977 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
