WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#55: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#77: FILE: drivers/scsi/osd/Kbuild:18:
+EXTRA_CFLAGS += -DCONFIG_SCSI_OSD_INITIATOR -DCONFIG_SCSI_OSD_INITIATOR_MODULE

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#79: FILE: drivers/scsi/osd/Kbuild:20:
+EXTRA_CFLAGS += -I$(OSD_INC)

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#87: FILE: drivers/scsi/osd/Makefile

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#135: FILE: drivers/scsi/osd/osd_debug.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#151: FILE: drivers/scsi/osd/osd_debug.h:17:
+#define OSD_ERR(fmt, a...) printk(KERN_ERR "osd: " fmt, ##a)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#152: FILE: drivers/scsi/osd/osd_debug.h:18:
+#define OSD_INFO(fmt, a...) printk(KERN_NOTICE "osd: " fmt, ##a)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#156: FILE: drivers/scsi/osd/osd_debug.h:22:
+	printk(KERN_NOTICE "osd @%s:%d: " fmt, __func__, __LINE__, ##a)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#168: FILE: drivers/scsi/osd/osd_initiator.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <OSDv1_TOTAL_CDB_LEN>
#227: FILE: drivers/scsi/osd/osd_initiator.c:60:
+	BUILD_BUG_ON(sizeof(struct osdv1_cdb) != OSDv1_TOTAL_CDB_LEN);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#230: FILE: drivers/scsi/osd/osd_initiator.c:63:
+static unsigned _osd_req_cdb_len(struct osd_request *or)

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#327: FILE: drivers/scsi/osd/osd_initiator.c:160:
+		OSD_DEBUG("osd_request_async_done error recieved %d\n", error);
 		                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'osd_request_async_done', this function's name, in a string
#327: FILE: drivers/scsi/osd/osd_initiator.c:160:
+		OSD_DEBUG("osd_request_async_done error recieved %d\n", error);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: drivers/scsi/osd/osd_initiator.c:169:
+int osd_execute_request_async(struct osd_request *or,
+	osd_req_done_fn *done, void *private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: drivers/scsi/osd/osd_initiator.c:186:
+static void _osdv1_req_encode_common(struct osd_request *or,
+	__be16 act, const struct osd_obj_id *obj, u64 offset, u64 len)

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be16 should be cpu_to_be16
#363: FILE: drivers/scsi/osd/osd_initiator.c:196:
+	act &= __constant_cpu_to_be16(~0x0080); /* V1 action code */

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/scsi/osd/osd_initiator.c:211:
+static void _osd_req_encode_common(struct osd_request *or,
+	__be16 act, const struct osd_obj_id *obj, u64 offset, u64 len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: drivers/scsi/osd/osd_initiator.c:222:
+	_osd_req_encode_common(or, OSD_ACT_FORMAT_OSD, &osd_root_object, 0,
+				tot_capacity);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: drivers/scsi/osd/osd_initiator.c:230:
+static void _osd_req_encode_partition(struct osd_request *or,
+	__be16 act, osd_id partition)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: drivers/scsi/osd/osd_initiator.c:268:
+void osd_req_write(struct osd_request *or,
+	const struct osd_obj_id *obj, struct bio *bio, u64 offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: drivers/scsi/osd/osd_initiator.c:279:
+void osd_req_read(struct osd_request *or,
+	const struct osd_obj_id *obj, struct bio *bio, u64 offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: drivers/scsi/osd/osd_initiator.c:294:
+static int _init_blk_request(struct osd_request *or,
+	bool has_in, bool has_out)

CHECK:BRACES: braces {} should be used on all arms of this statement
#480: FILE: drivers/scsi/osd/osd_initiator.c:313:
+	if (has_out) {
[...]
+	} else if (has_in)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#490: FILE: drivers/scsi/osd/osd_initiator.c:323:
+			or->in.req = or->request->next_rq = req;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: drivers/scsi/osd/osd_initiator.c:331:
+	OSD_DEBUG("or=%p has_in=%d has_out=%d => %d, %p\n",
+			or, has_in, has_out, ret, or->request);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: drivers/scsi/osd/osd_initiator.c:336:
+int osd_finalize_request(struct osd_request *or,
+	u8 options, const void *cap, const u8 *cap_key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: drivers/scsi/osd/osd_initiator.c:371:
+		OSD_DEBUG("out bytes=%llu (bytes_req=%u)\n",
+			or->out.total_bytes, or->out.req->data_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: drivers/scsi/osd/osd_initiator.c:380:
+		OSD_DEBUG("in bytes=%llu (bytes_req=%u)\n",
+			or->in.total_bytes, or->in.req->data_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: drivers/scsi/osd/osd_initiator.c:407:
+void osd_sec_init_nosec_doall_caps(void *caps,
+	const struct osd_obj_id *obj, bool is_collection, const bool is_v1)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#602: FILE: drivers/scsi/osd/osd_initiator.c:435:
+/*	cap->expiration_time;
+	cap->AUDIT[30-10];

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#604: FILE: drivers/scsi/osd/osd_initiator.c:437:
+	cap->object_created_time; */

CHECK:CAMELCASE: Avoid CamelCase: <OSDv1_CAP_LEN>
#616: FILE: drivers/scsi/osd/osd_initiator.c:449:
+	memcpy(&cdb->v1.caps, caps, OSDv1_CAP_LEN);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000208473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 14 warnings, 17 checks, 540 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000208473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
