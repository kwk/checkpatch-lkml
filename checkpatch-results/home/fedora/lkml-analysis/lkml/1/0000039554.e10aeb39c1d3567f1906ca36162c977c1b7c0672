WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Add basic clock support, cpu identification, I/O mapping and serial port. Boot

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#104: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:37:
+#define MX51_BABBAGE_PAD_UART1_RXD__UART1_RXD	IOMUX_PAD(0x618, 0x228,	IOMUX_CONFIG_ALT0, 0x9e4,   0, MX51_UART1_PAD_CTRL | PAD_CTL_SRE_FAST)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#105: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:38:
+#define MX51_BABBAGE_PAD_UART1_TXD__UART1_TXD	IOMUX_PAD(0x61C, 0x22C, IOMUX_CONFIG_ALT0, 0x0,   0, MX51_UART1_PAD_CTRL | PAD_CTL_SRE_FAST)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#106: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:39:
+#define MX51_BABBAGE_PAD_UART1_RTS__UART1_RTS	IOMUX_PAD(0x620, 0x230, IOMUX_CONFIG_ALT0, 0x9e0, 0, MX51_UART1_PAD_CTRL)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#107: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:40:
+#define MX51_BABBAGE_PAD_UART1_CTS__UART1_CTS	IOMUX_PAD(0x624, 0x234, IOMUX_CONFIG_ALT0, 0x0,   0, MX51_UART1_PAD_CTRL)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#110: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:43:
+#define MX51_BABBAGE_PAD_UART2_RXD__UART2_RXD	IOMUX_PAD(0x628, 0x238, IOMUX_CONFIG_ALT0, 0x9ec, 2, MX51_UART2_PAD_CTRL)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#111: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:44:
+#define MX51_BABBAGE_PAD_UART2_TXD__UART2_TXD	IOMUX_PAD(0x62C, 0x23C, IOMUX_CONFIG_ALT0, 0x0,   0, MX51_UART2_PAD_CTRL)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#114: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:47:
+#define MX51_BABBAGE_PAD_EIM_D25__UART3_RXD	IOMUX_PAD(0x414, 0x080, IOMUX_CONFIG_ALT3, 0x9f4,   0, MX51_UART3_PAD_CTRL)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#115: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:48:
+#define MX51_BABBAGE_PAD_EIM_D26__UART3_TXD	IOMUX_PAD(0x418, 0x084, IOMUX_CONFIG_ALT3, 0x0,   0, MX51_UART3_PAD_CTRL)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#116: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:49:
+#define MX51_BABBAGE_PAD_EIM_D27__UART3_RTS	IOMUX_PAD(0x41c, 0x088, IOMUX_CONFIG_ALT3, 0x9f0,   0, MX51_UART3_PAD_CTRL)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#117: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:50:
+#define MX51_BABBAGE_PAD_EIM_D24__UART3_CTS	IOMUX_PAD(0x410, 0x07c, IOMUX_CONFIG_ALT3, 0x0,   0, MX51_UART3_PAD_CTRL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:52:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 157 exceeds 100 columns
#120: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:53:
+#define MX51_BABBAGE_PAD_GPIO_1_8__GPIO1_8	IOMUX_PAD(0x814, 0x3E8, 0, 0x0, 1, (PAD_CTL_SRE_SLOW | PAD_CTL_DSE_MED | PAD_CTL_PUS_100K_UP |  PAD_CTL_HYS))

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#145: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:78:
+#if defined(CONFIG_SERIAL_IMX) || defined(CONFIG_SERIAL_IMX_MODULE)

WARNING:CONST_STRUCT: struct machine_desc should normally be const
#173: FILE: arch/arm/mach-mx5/board-mx51_babbage.c:106:
+static void __init fixup_mxc_board(struct machine_desc *desc, struct tag *tags,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#215: FILE: arch/arm/mach-mx5/clock.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#262: FILE: arch/arm/mach-mx5/clock.c:48:
+extern void propagate_rate(struct clk *clk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: arch/arm/mach-mx5/clock.c:64:
+	u32 reg;
+	reg = __raw_readl(clk->enable_reg);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#282: FILE: arch/arm/mach-mx5/clock.c:68:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#308: FILE: arch/arm/mach-mx5/clock.c:94:
+		return 3;
+	else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#309: FILE: arch/arm/mach-mx5/clock.c:95:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#322: FILE: arch/arm/mach-mx5/clock.c:108:
+		return pll_base[2];
+	else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: arch/arm/mach-mx5/clock.c:109:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#357: FILE: arch/arm/mach-mx5/clock.c:143:
+	mfn = mfn_abs = dp_mfn & MXC_PLL_DP_MFN_MASK;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#369: FILE: arch/arm/mach-mx5/clock.c:155:
+	temp = (u64) ref_clk * mfn_abs;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#394: FILE: arch/arm/mach-mx5/clock.c:180:
+	pdf = mfi = -1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#396: FILE: arch/arm/mach-mx5/clock.c:182:
+		mfi = rate * (pdf+1) / quad_parent_rate;
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#401: FILE: arch/arm/mach-mx5/clock.c:187:
+	temp64 = rate*(pdf+1) - quad_parent_rate*mfi;
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#401: FILE: arch/arm/mach-mx5/clock.c:187:
+	temp64 = rate*(pdf+1) - quad_parent_rate*mfi;
 	                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#401: FILE: arch/arm/mach-mx5/clock.c:187:
+	temp64 = rate*(pdf+1) - quad_parent_rate*mfi;
 	                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#402: FILE: arch/arm/mach-mx5/clock.c:188:
+	do_div(temp64, quad_parent_rate/1000000);
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#410: FILE: arch/arm/mach-mx5/clock.c:196:
+		reg = mfi<<4 | pdf;
 		         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#415: FILE: arch/arm/mach-mx5/clock.c:201:
+		reg = mfi<<4 | pdf;
 		         ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#487: FILE: arch/arm/mach-mx5/clock.c:273:
+
+		}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_clk_periph_apm_set_parent', this function's name, in a string
#572: FILE: arch/arm/mach-mx5/clock.c:358:
+			panic("pll _clk_periph_apm_set_parent failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#618: FILE: arch/arm/mach-mx5/clock.c:404:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_clk_ahb_set_rate', this function's name, in a string
#641: FILE: arch/arm/mach-mx5/clock.c:427:
+			panic("_clk_ahb_set_rate failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: arch/arm/mach-mx5/clock.c:434:
+static unsigned long _clk_ahb_round_rate(struct clk *clk,
+						unsigned long rate)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#663: FILE: arch/arm/mach-mx5/clock.c:449:
+
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#723: FILE: arch/arm/mach-mx5/clock.c:509:
+		return clk_get_rate(&ipg_clk);
+	} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#724: FILE: arch/arm/mach-mx5/clock.c:510:
+		BUG();

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#947: FILE: arch/arm/mach-mx5/clock.c:733:
+DEFINE_CLOCK(uart1_clk, 0, MXC_CCM_CCGR1, MXC_CCM_CCGR1_CG4_OFFSET, NULL,  NULL, &uart_root_clk, NULL);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#948: FILE: arch/arm/mach-mx5/clock.c:734:
+DEFINE_CLOCK(uart2_clk, 1, MXC_CCM_CCGR1, MXC_CCM_CCGR1_CG6_OFFSET, NULL,  NULL, &uart_root_clk, NULL);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#949: FILE: arch/arm/mach-mx5/clock.c:735:
+DEFINE_CLOCK(uart3_clk, 2, MXC_CCM_CCGR1, MXC_CCM_CCGR1_CG8_OFFSET, NULL,  NULL, &uart_root_clk, NULL);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#950: FILE: arch/arm/mach-mx5/clock.c:736:
+DEFINE_CLOCK(uart1_ipg_clk, 0, MXC_CCM_CCGR1, MXC_CCM_CCGR1_CG3_OFFSET, NULL,  NULL, &ipg_clk, &aips_tz1_clk);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#951: FILE: arch/arm/mach-mx5/clock.c:737:
+DEFINE_CLOCK(uart2_ipg_clk, 1, MXC_CCM_CCGR1, MXC_CCM_CCGR1_CG5_OFFSET, NULL,  NULL, &ipg_clk, &aips_tz1_clk);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#952: FILE: arch/arm/mach-mx5/clock.c:738:
+DEFINE_CLOCK(uart3_ipg_clk, 2, MXC_CCM_CCGR1, MXC_CCM_CCGR1_CG7_OFFSET, NULL,  NULL, &ipg_clk, &spba_clk);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#961: FILE: arch/arm/mach-mx5/clock.c:747:
+#define _REGISTER_CLOCK(d, n, c) \
+       { \
+		.dev_id = d, \
+		.con_id = n,		\
+		.clk = &c, \
+       },

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: arch/arm/mach-mx5/clock.c:748:
+       { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: arch/arm/mach-mx5/clock.c:752:
+       },$

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1009: FILE: arch/arm/mach-mx5/clock.c:795:
+int __init mx51_clocks_init(unsigned long ckil, unsigned long osc, unsigned long ckih1, unsigned long ckih2)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1038: FILE: arch/arm/mach-mx5/cpu.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1057: FILE: arch/arm/mach-mx5/cpu.c:20:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1090: FILE: arch/arm/mach-mx5/crm_regs.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#1157: FILE: arch/arm/mach-mx5/crm_regs.h:68:
+#define MXC_PLL_DP_MFN_TOGC_TOG_DIS	(1 << 17)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1158: FILE: arch/arm/mach-mx5/crm_regs.h:69:
+#define MXC_PLL_DP_MFN_TOGC_TOG_EN	(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1162: FILE: arch/arm/mach-mx5/crm_regs.h:73:
+#define MXC_PLL_DP_DESTAT_TOG_SEL	(1 << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1202: FILE: arch/arm/mach-mx5/crm_regs.h:113:
+#define MXC_CCM_CCR_COSC_EN		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1203: FILE: arch/arm/mach-mx5/crm_regs.h:114:
+#define MXC_CCM_CCR_FPM_MULT_MASK	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1204: FILE: arch/arm/mach-mx5/crm_regs.h:115:
+#define MXC_CCM_CCR_CAMP2_EN		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1205: FILE: arch/arm/mach-mx5/crm_regs.h:116:
+#define MXC_CCM_CCR_CAMP1_EN		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1206: FILE: arch/arm/mach-mx5/crm_regs.h:117:
+#define MXC_CCM_CCR_FPM_EN		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1216: FILE: arch/arm/mach-mx5/crm_regs.h:127:
+#define MXC_CCM_CSR_COSR_READY	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1217: FILE: arch/arm/mach-mx5/crm_regs.h:128:
+#define MXC_CCM_CSR_LVS_VALUE		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1218: FILE: arch/arm/mach-mx5/crm_regs.h:129:
+#define MXC_CCM_CSR_CAMP2_READY	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1219: FILE: arch/arm/mach-mx5/crm_regs.h:130:
+#define MXC_CCM_CSR_CAMP1_READY	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1220: FILE: arch/arm/mach-mx5/crm_regs.h:131:
+#define MXC_CCM_CSR_FPM_READY	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1221: FILE: arch/arm/mach-mx5/crm_regs.h:132:
+#define MXC_CCM_CSR_REF_EN_B		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1231: FILE: arch/arm/mach-mx5/crm_regs.h:142:
+#define MXC_CCM_CCSR_PLL1_SW_CLK_SEL		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1232: FILE: arch/arm/mach-mx5/crm_regs.h:143:
+#define MXC_CCM_CCSR_PLL2_SW_CLK_SEL		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1233: FILE: arch/arm/mach-mx5/crm_regs.h:144:
+#define MXC_CCM_CCSR_PLL3_SW_CLK_SEL		(1 << 0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1318: FILE: arch/arm/mach-mx5/crm_regs.h:229:
+#define MXC_CCM_CSCMR2_DI_CLK_SEL_OFFSET(n)		(26+n*3)
                                            		   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1318: FILE: arch/arm/mach-mx5/crm_regs.h:229:
+#define MXC_CCM_CSCMR2_DI_CLK_SEL_OFFSET(n)		(26+n*3)
                                            		     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1318: FILE: arch/arm/mach-mx5/crm_regs.h:229:
+#define MXC_CCM_CSCMR2_DI_CLK_SEL_OFFSET(n)		(26+n*3)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1319: FILE: arch/arm/mach-mx5/crm_regs.h:230:
+#define MXC_CCM_CSCMR2_DI_CLK_SEL_MASK(n)		(0x7 << (26+n*3))
                                          		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1319: FILE: arch/arm/mach-mx5/crm_regs.h:230:
+#define MXC_CCM_CSCMR2_DI_CLK_SEL_MASK(n)		(0x7 << (26+n*3))
                                          		             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1319: FILE: arch/arm/mach-mx5/crm_regs.h:230:
+#define MXC_CCM_CSCMR2_DI_CLK_SEL_MASK(n)		(0x7 << (26+n*3))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1339: FILE: arch/arm/mach-mx5/crm_regs.h:250:
+#define MXC_CCM_CSCMR2_SPDIF1_COM			(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1340: FILE: arch/arm/mach-mx5/crm_regs.h:251:
+#define MXC_CCM_CSCMR2_SPDIF0_COM			(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1448: FILE: arch/arm/mach-mx5/crm_regs.h:359:
+#define MXC_CCM_CDHIPR_ARM_PODF_BUSY			(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1449: FILE: arch/arm/mach-mx5/crm_regs.h:360:
+#define MXC_CCM_CDHIPR_DDR_HF_CLK_SEL_BUSY		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1450: FILE: arch/arm/mach-mx5/crm_regs.h:361:
+#define MXC_CCM_CDHIPR_DDR_PODF_BUSY			(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1451: FILE: arch/arm/mach-mx5/crm_regs.h:362:
+#define MXC_CCM_CDHIPR_EMI_CLK_SEL_BUSY			(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1452: FILE: arch/arm/mach-mx5/crm_regs.h:363:
+#define MXC_CCM_CDHIPR_PERIPH_CLK_SEL_BUSY		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1453: FILE: arch/arm/mach-mx5/crm_regs.h:364:
+#define MXC_CCM_CDHIPR_NFC_IPG_INT_MEM_PODF_BUSY	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1454: FILE: arch/arm/mach-mx5/crm_regs.h:365:
+#define MXC_CCM_CDHIPR_AHB_PODF_BUSY			(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1455: FILE: arch/arm/mach-mx5/crm_regs.h:366:
+#define MXC_CCM_CDHIPR_EMI_PODF_BUSY			(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1456: FILE: arch/arm/mach-mx5/crm_regs.h:367:
+#define MXC_CCM_CDHIPR_AXI_B_PODF_BUSY			(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1457: FILE: arch/arm/mach-mx5/crm_regs.h:368:
+#define MXC_CCM_CDHIPR_AXI_A_PODF_BUSY			(1 << 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1718: FILE: arch/arm/mach-mx5/crm_regs.h:629:
+#define MXC_DVFSPT0 ^I^I(MXC_DVFS_CORE_BASE + 0x34)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1719: FILE: arch/arm/mach-mx5/crm_regs.h:630:
+#define MXC_DVFSPT1 ^I^I(MXC_DVFS_CORE_BASE + 0x38)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1720: FILE: arch/arm/mach-mx5/crm_regs.h:631:
+#define MXC_DVFSPT2 ^I^I(MXC_DVFS_CORE_BASE + 0x3C)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1721: FILE: arch/arm/mach-mx5/crm_regs.h:632:
+#define MXC_DVFSPT3 ^I^I(MXC_DVFS_CORE_BASE + 0x40)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1745: FILE: arch/arm/mach-mx5/crm_regs.h:656:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#1746: FILE: arch/arm/mach-mx5/crm_regs.h:657:
+#define MXC_CORTEXA8_PLAT_LPC_DSM	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1747: FILE: arch/arm/mach-mx5/crm_regs.h:658:
+#define MXC_CORTEXA8_PLAT_LPC_DBG_DSM	(1 << 1)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1781: FILE: arch/arm/mach-mx5/devices.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1877: FILE: arch/arm/mach-mx5/devices.h:1:
+extern struct platform_device mxc_uart_device0;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1887: FILE: arch/arm/mach-mx5/mm.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1903: FILE: arch/arm/mach-mx5/mm.c:17:
+#include <asm/pgtable.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#1957: FILE: arch/arm/mach-mx5/mm.c:71:
+	u32 tzic_addr;
+	if (mx51_revision() < CHIP_REV_2_0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1979: FILE: arch/arm/plat-mxc/include/mach/iomux-mx51.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1998: FILE: arch/arm/plat-mxc/include/mach/iomux-mx51.h:20:
+typedef enum iomux_config {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2101: FILE: arch/arm/plat-mxc/include/mach/iomux-mx51.h:123:
+/* REVISIT: Not sure of these values
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2294: FILE: arch/arm/plat-mxc/include/mach/mx51.h:1:
+#ifndef __ASM_ARCH_MXC_MX51_H__

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2304: FILE: arch/arm/plat-mxc/include/mach/mx51.h:11:
+ *         ^I30000000^I256M^IGPU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2305: FILE: arch/arm/plat-mxc/include/mach/mx51.h:12:
+ *         ^I40000000^I512M^IIPU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2311: FILE: arch/arm/plat-mxc/include/mach/mx51.h:18:
+ *         ^I90000000^I256M^ICSD0 SDRAM/DDR$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2312: FILE: arch/arm/plat-mxc/include/mach/mx51.h:19:
+ *         ^IA0000000^I256M^ICSD1 SDRAM/DDR$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2313: FILE: arch/arm/plat-mxc/include/mach/mx51.h:20:
+ *         ^IB0000000^I128M^ICS0 Flash$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2314: FILE: arch/arm/plat-mxc/include/mach/mx51.h:21:
+ *         ^IB8000000^I128M^ICS1 Flash$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2315: FILE: arch/arm/plat-mxc/include/mach/mx51.h:22:
+ *         ^IC0000000^I128M^ICS2 Flash$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2316: FILE: arch/arm/plat-mxc/include/mach/mx51.h:23:
+ *         ^IC8000000^I64M^ICS3 Flash$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2317: FILE: arch/arm/plat-mxc/include/mach/mx51.h:24:
+ *         ^ICC000000^I32M^ICS4 SRAM$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2318: FILE: arch/arm/plat-mxc/include/mach/mx51.h:25:
+ *         ^ICE000000^I32M^ICS5 SRAM$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2330: FILE: arch/arm/plat-mxc/include/mach/mx51.h:37:
+#define IRAM_SIZE		(IRAM_PARTITIONS*SZ_8K)	/* 128KB */
                  		                ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2333: FILE: arch/arm/plat-mxc/include/mach/mx51.h:40:
+#if defined(CONFIG_MXC_SECURITY_SCC2) \
+    || defined(CONFIG_MXC_SECURITY_SCC2_MODULE)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2333: FILE: arch/arm/plat-mxc/include/mach/mx51.h:40:
+    || defined(CONFIG_MXC_SECURITY_SCC2_MODULE)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2400: FILE: arch/arm/plat-mxc/include/mach/mx51.h:107:
+#define SPBA0_BASE_ADDR ^I0x70000000$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2406: FILE: arch/arm/plat-mxc/include/mach/mx51.h:113:
+#define UART3_BASE_ADDR ^I(SPBA0_BASE_ADDR + 0x0000C000)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2407: FILE: arch/arm/plat-mxc/include/mach/mx51.h:114:
+#define CSPI1_BASE_ADDR ^I(SPBA0_BASE_ADDR + 0x00010000)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2436: FILE: arch/arm/plat-mxc/include/mach/mx51.h:143:
+#define AIPS1_BASE_ADDR ^I0x73F00000$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2553: FILE: arch/arm/plat-mxc/include/mach/mx51.h:260:
+#define IO_ADDRESS(x)	\
+	(void __force __iomem *) \
+	(((x >= IRAM_BASE_ADDR) && (x < (IRAM_BASE_ADDR + IRAM_SIZE))) ? IRAM_IO_ADDRESS(x):\
+	((x >= TZIC_BASE_ADDR) && (x < (TZIC_BASE_ADDR + TZIC_SIZE))) ? TZIC_IO_ADDRESS(x):\
+	((x >= DEBUG_BASE_ADDR) && (x < (DEBUG_BASE_ADDR + DEBUG_SIZE))) ? DEBUG_IO_ADDRESS(x):\
+	((x >= SPBA0_BASE_ADDR) && (x < (SPBA0_BASE_ADDR + SPBA0_SIZE))) ? SPBA0_IO_ADDRESS(x):\
+	((x >= AIPS1_BASE_ADDR) && (x < (AIPS1_BASE_ADDR + AIPS1_SIZE))) ? AIPS1_IO_ADDRESS(x):\
+	((x >= AIPS2_BASE_ADDR) && (x < (AIPS2_BASE_ADDR + AIPS2_SIZE))) ? AIPS2_IO_ADDRESS(x):\
+	((x >= NFC_BASE_ADDR_AXI) && (x < (NFC_BASE_ADDR_AXI + NFC_AXI_SIZE))) ? NFC_BASE_ADDR_AXI_IO_ADDRESS(x):\
+	0xDEADBEEF)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2553: FILE: arch/arm/plat-mxc/include/mach/mx51.h:260:
+#define IO_ADDRESS(x)	\
+	(void __force __iomem *) \
+	(((x >= IRAM_BASE_ADDR) && (x < (IRAM_BASE_ADDR + IRAM_SIZE))) ? IRAM_IO_ADDRESS(x):\
+	((x >= TZIC_BASE_ADDR) && (x < (TZIC_BASE_ADDR + TZIC_SIZE))) ? TZIC_IO_ADDRESS(x):\
+	((x >= DEBUG_BASE_ADDR) && (x < (DEBUG_BASE_ADDR + DEBUG_SIZE))) ? DEBUG_IO_ADDRESS(x):\
+	((x >= SPBA0_BASE_ADDR) && (x < (SPBA0_BASE_ADDR + SPBA0_SIZE))) ? SPBA0_IO_ADDRESS(x):\
+	((x >= AIPS1_BASE_ADDR) && (x < (AIPS1_BASE_ADDR + AIPS1_SIZE))) ? AIPS1_IO_ADDRESS(x):\
+	((x >= AIPS2_BASE_ADDR) && (x < (AIPS2_BASE_ADDR + AIPS2_SIZE))) ? AIPS2_IO_ADDRESS(x):\
+	((x >= NFC_BASE_ADDR_AXI) && (x < (NFC_BASE_ADDR_AXI + NFC_AXI_SIZE))) ? NFC_BASE_ADDR_AXI_IO_ADDRESS(x):\
+	0xDEADBEEF)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2553: FILE: arch/arm/plat-mxc/include/mach/mx51.h:260:
+#define IO_ADDRESS(x)	\
+	(void __force __iomem *) \
+	(((x >= IRAM_BASE_ADDR) && (x < (IRAM_BASE_ADDR + IRAM_SIZE))) ? IRAM_IO_ADDRESS(x):\
+	((x >= TZIC_BASE_ADDR) && (x < (TZIC_BASE_ADDR + TZIC_SIZE))) ? TZIC_IO_ADDRESS(x):\
+	((x >= DEBUG_BASE_ADDR) && (x < (DEBUG_BASE_ADDR + DEBUG_SIZE))) ? DEBUG_IO_ADDRESS(x):\
+	((x >= SPBA0_BASE_ADDR) && (x < (SPBA0_BASE_ADDR + SPBA0_SIZE))) ? SPBA0_IO_ADDRESS(x):\
+	((x >= AIPS1_BASE_ADDR) && (x < (AIPS1_BASE_ADDR + AIPS1_SIZE))) ? AIPS1_IO_ADDRESS(x):\
+	((x >= AIPS2_BASE_ADDR) && (x < (AIPS2_BASE_ADDR + AIPS2_SIZE))) ? AIPS2_IO_ADDRESS(x):\
+	((x >= NFC_BASE_ADDR_AXI) && (x < (NFC_BASE_ADDR_AXI + NFC_AXI_SIZE))) ? NFC_BASE_ADDR_AXI_IO_ADDRESS(x):\
+	0xDEADBEEF)

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2555: FILE: arch/arm/plat-mxc/include/mach/mx51.h:262:
+	(((x >= IRAM_BASE_ADDR) && (x < (IRAM_BASE_ADDR + IRAM_SIZE))) ? IRAM_IO_ADDRESS(x):\
 	                                                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2556: FILE: arch/arm/plat-mxc/include/mach/mx51.h:263:
+	((x >= TZIC_BASE_ADDR) && (x < (TZIC_BASE_ADDR + TZIC_SIZE))) ? TZIC_IO_ADDRESS(x):\
 	                                                                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2557: FILE: arch/arm/plat-mxc/include/mach/mx51.h:264:
+	((x >= DEBUG_BASE_ADDR) && (x < (DEBUG_BASE_ADDR + DEBUG_SIZE))) ? DEBUG_IO_ADDRESS(x):\
 	                                                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2558: FILE: arch/arm/plat-mxc/include/mach/mx51.h:265:
+	((x >= SPBA0_BASE_ADDR) && (x < (SPBA0_BASE_ADDR + SPBA0_SIZE))) ? SPBA0_IO_ADDRESS(x):\
 	                                                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2559: FILE: arch/arm/plat-mxc/include/mach/mx51.h:266:
+	((x >= AIPS1_BASE_ADDR) && (x < (AIPS1_BASE_ADDR + AIPS1_SIZE))) ? AIPS1_IO_ADDRESS(x):\
 	                                                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2560: FILE: arch/arm/plat-mxc/include/mach/mx51.h:267:
+	((x >= AIPS2_BASE_ADDR) && (x < (AIPS2_BASE_ADDR + AIPS2_SIZE))) ? AIPS2_IO_ADDRESS(x):\
 	                                                                                      ^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#2561: FILE: arch/arm/plat-mxc/include/mach/mx51.h:268:
+	((x >= NFC_BASE_ADDR_AXI) && (x < (NFC_BASE_ADDR_AXI + NFC_AXI_SIZE))) ? NFC_BASE_ADDR_AXI_IO_ADDRESS(x):\

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2561: FILE: arch/arm/plat-mxc/include/mach/mx51.h:268:
+	((x >= NFC_BASE_ADDR_AXI) && (x < (NFC_BASE_ADDR_AXI + NFC_AXI_SIZE))) ? NFC_BASE_ADDR_AXI_IO_ADDRESS(x):\
 	                                                                                                        ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 66 warnings, 61 checks, 2659 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
