WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: drivers/misc/Kconfig:25:
+config ATMEL_TCLIB
+	bool "Atmel AT32/AT91 Timer/Counter Library"
+	depends on (AVR32 || ARCH_AT91)
+	help
+	  Select this if you want a library to allocate the Timer/Counter
+	  blocks found on many Atmel processors.  This facilitates using
+	  these blocks by different drivers despite processor differences.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#97: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: drivers/misc/atmel_tclib.c:1:
+#include <linux/atmel_tc.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#114: FILE: drivers/misc/atmel_tclib.c:13:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#145: FILE: drivers/misc/atmel_tclib.c:44:
+struct atmel_tc *atmel_tc_alloc(unsigned block, const char *name)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tc)...) over kzalloc(sizeof(struct atmel_tc)...)
#219: FILE: drivers/misc/atmel_tclib.c:118:
+	tc = kzalloc(sizeof(struct atmel_tc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#269: FILE: include/linux/atmel_tc.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#330: FILE: include/linux/atmel_tc.h:62:
+extern struct atmel_tc *atmel_tc_alloc(unsigned block, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/atmel_tc.h:62:
+extern struct atmel_tc *atmel_tc_alloc(unsigned block, const char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/linux/atmel_tc.h:63:
+extern void atmel_tc_free(struct atmel_tc *tc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#336: FILE: include/linux/atmel_tc.h:68:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#348: FILE: include/linux/atmel_tc.h:80:
+#define     ATMEL_TC_SYNC	(1 << 0)	/* synchronize timers */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#353: FILE: include/linux/atmel_tc.h:85:
+#define        ATMEL_TC_TC0XC0S_NONE	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#358: FILE: include/linux/atmel_tc.h:90:
+#define        ATMEL_TC_TC1XC1S_NONE	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#363: FILE: include/linux/atmel_tc.h:95:
+#define        ATMEL_TC_TC2XC2S_NONE	(1 << 4)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: include/linux/atmel_tc.h:99:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#386: FILE: include/linux/atmel_tc.h:118:
+#define ATMEL_TC_CHAN(idx)	((idx)*0x40)
                           	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#390: FILE: include/linux/atmel_tc.h:122:
+#define     ATMEL_TC_CLKEN	(1 << 0)	/* clock enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#391: FILE: include/linux/atmel_tc.h:123:
+#define     ATMEL_TC_CLKDIS	(1 << 1)	/* clock disable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#392: FILE: include/linux/atmel_tc.h:124:
+#define     ATMEL_TC_SWTRG	(1 << 2)	/* software trigger */

CHECK:BIT_MACRO: Prefer using the BIT macro
#399: FILE: include/linux/atmel_tc.h:131:
+#define        ATMEL_TC_TIMER_CLOCK2	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#406: FILE: include/linux/atmel_tc.h:138:
+#define     ATMEL_TC_CLKI	(1 << 3)	/* clock invert */

CHECK:BIT_MACRO: Prefer using the BIT macro
#409: FILE: include/linux/atmel_tc.h:141:
+#define        ATMEL_TC_GATE_XC0	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#412: FILE: include/linux/atmel_tc.h:144:
+#define     ATMEL_TC_WAVE	(1 << 15)	/* true = Waveform mode */

CHECK:BIT_MACRO: Prefer using the BIT macro
#415: FILE: include/linux/atmel_tc.h:147:
+#define     ATMEL_TC_LDBSTOP	(1 << 6)	/* counter stops on RB load */

CHECK:BIT_MACRO: Prefer using the BIT macro
#416: FILE: include/linux/atmel_tc.h:148:
+#define     ATMEL_TC_LDBDIS	(1 << 7)	/* counter disable on RB load */

CHECK:BIT_MACRO: Prefer using the BIT macro
#419: FILE: include/linux/atmel_tc.h:151:
+#define        ATMEL_TC_ETRGEDG_RISING	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#422: FILE: include/linux/atmel_tc.h:154:
+#define     ATMEL_TC_ABETRG	(1 << 10)	/* external trigger is TIOA? */

CHECK:BIT_MACRO: Prefer using the BIT macro
#423: FILE: include/linux/atmel_tc.h:155:
+#define     ATMEL_TC_CPCTRG	(1 << 14)	/* RC compare trigger enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#426: FILE: include/linux/atmel_tc.h:158:
+#define        ATMEL_TC_LDRA_RISING	(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#431: FILE: include/linux/atmel_tc.h:163:
+#define        ATMEL_TC_LDRB_RISING	(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#436: FILE: include/linux/atmel_tc.h:168:
+#define     ATMEL_TC_CPCSTOP	(1 <<  6)	/* RC compare stops counter */

CHECK:BIT_MACRO: Prefer using the BIT macro
#437: FILE: include/linux/atmel_tc.h:169:
+#define     ATMEL_TC_CPCDIS	(1 <<  7)	/* RC compare disables counter */

CHECK:BIT_MACRO: Prefer using the BIT macro
#440: FILE: include/linux/atmel_tc.h:172:
+#define        ATMEL_TC_EEVTEDG_RISING	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#445: FILE: include/linux/atmel_tc.h:177:
+#define        ATMEL_TC_EEVT_XC0	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#448: FILE: include/linux/atmel_tc.h:180:
+#define     ATMEL_TC_ENETRG	(1 << 12)	/* external event is trigger */

CHECK:BIT_MACRO: Prefer using the BIT macro
#451: FILE: include/linux/atmel_tc.h:183:
+#define        ATMEL_TC_WAVESEL_UPDOWN	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#456: FILE: include/linux/atmel_tc.h:188:
+#define        ATMEL_TC_ACPA_SET	(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#461: FILE: include/linux/atmel_tc.h:193:
+#define        ATMEL_TC_ACPC_SET	(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#466: FILE: include/linux/atmel_tc.h:198:
+#define        ATMEL_TC_AEEVT_SET	(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#471: FILE: include/linux/atmel_tc.h:203:
+#define        ATMEL_TC_ASWTRG_SET	(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#476: FILE: include/linux/atmel_tc.h:208:
+#define        ATMEL_TC_BCPB_SET	(1 << 24)

CHECK:BIT_MACRO: Prefer using the BIT macro
#481: FILE: include/linux/atmel_tc.h:213:
+#define        ATMEL_TC_BCPC_SET	(1 << 26)

CHECK:BIT_MACRO: Prefer using the BIT macro
#486: FILE: include/linux/atmel_tc.h:218:
+#define        ATMEL_TC_BEEVT_SET	(1 << 28)

CHECK:BIT_MACRO: Prefer using the BIT macro
#491: FILE: include/linux/atmel_tc.h:223:
+#define        ATMEL_TC_BSWTRG_SET	(1 << 30)

CHECK:BIT_MACRO: Prefer using the BIT macro
#502: FILE: include/linux/atmel_tc.h:234:
+#define     ATMEL_TC_CLKSTA	(1 << 16)	/* clock enabled */

CHECK:BIT_MACRO: Prefer using the BIT macro
#503: FILE: include/linux/atmel_tc.h:235:
+#define     ATMEL_TC_MTIOA	(1 << 17)	/* TIOA mirror */

CHECK:BIT_MACRO: Prefer using the BIT macro
#504: FILE: include/linux/atmel_tc.h:236:
+#define     ATMEL_TC_MTIOB	(1 << 18)	/* TIOB mirror */

CHECK:BIT_MACRO: Prefer using the BIT macro
#511: FILE: include/linux/atmel_tc.h:243:
+#define     ATMEL_TC_COVFS	(1 <<  0)	/* counter overflow */

CHECK:BIT_MACRO: Prefer using the BIT macro
#512: FILE: include/linux/atmel_tc.h:244:
+#define     ATMEL_TC_LOVRS	(1 <<  1)	/* load overrun */

CHECK:BIT_MACRO: Prefer using the BIT macro
#513: FILE: include/linux/atmel_tc.h:245:
+#define     ATMEL_TC_CPAS	(1 <<  2)	/* RA compare */

CHECK:BIT_MACRO: Prefer using the BIT macro
#514: FILE: include/linux/atmel_tc.h:246:
+#define     ATMEL_TC_CPBS	(1 <<  3)	/* RB compare */

CHECK:BIT_MACRO: Prefer using the BIT macro
#515: FILE: include/linux/atmel_tc.h:247:
+#define     ATMEL_TC_CPCS	(1 <<  4)	/* RC compare */

CHECK:BIT_MACRO: Prefer using the BIT macro
#516: FILE: include/linux/atmel_tc.h:248:
+#define     ATMEL_TC_LDRAS	(1 <<  5)	/* RA loading */

CHECK:BIT_MACRO: Prefer using the BIT macro
#517: FILE: include/linux/atmel_tc.h:249:
+#define     ATMEL_TC_LDRBS	(1 <<  6)	/* RB loading */

CHECK:BIT_MACRO: Prefer using the BIT macro
#518: FILE: include/linux/atmel_tc.h:250:
+#define     ATMEL_TC_ETRGS	(1 <<  7)	/* external trigger */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 50 checks, 434 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
