WARNING:REPEATED_WORD: Possible repeated word: 'die'
#167: FILE: kernel/workqueue.c:42:
+	WORKER_DIE		= 1 << 1,	/* die die die */

WARNING:REPEATED_WORD: Possible repeated word: 'die'
#167: FILE: kernel/workqueue.c:42:
+	WORKER_DIE		= 1 << 1,	/* die die die */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#476: FILE: kernel/workqueue.c:378:
+	BUG_ON(gcwq->cpu != raw_smp_processor_id());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#647: FILE: kernel/workqueue.c:652:
+	BUG_ON(worker->flags & WORKER_IDLE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#648: FILE: kernel/workqueue.c:653:
+	BUG_ON(!list_empty(&worker->entry) &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#658: FILE: kernel/workqueue.c:663:
+	if (likely(!(worker->flags & WORKER_ROGUE))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#662: FILE: kernel/workqueue.c:667:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#679: FILE: kernel/workqueue.c:684:
+	BUG_ON(!(worker->flags & WORKER_IDLE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#782: FILE: kernel/workqueue.c:782:
+	BUG_ON(worker->running);

CHECK:BRACES: braces {} should be used on all arms of this statement
#814: FILE: kernel/workqueue.c:814:
+		if (time_before(jiffies, expires))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#816: FILE: kernel/workqueue.c:816:
+		else {

WARNING:REPEATED_WORD: Possible repeated word: 'mayday'
#834: FILE: kernel/workqueue.c:834:
+	/* mayday mayday mayday */

WARNING:REPEATED_WORD: Possible repeated word: 'mayday'
#834: FILE: kernel/workqueue.c:834:
+	/* mayday mayday mayday */

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#897: FILE: kernel/workqueue.c:897:
+			if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#898: FILE: kernel/workqueue.c:898:
+				printk(KERN_WARNING "workqueue: too many "

WARNING:SPLIT_STRING: quoted string split across lines
#899: FILE: kernel/workqueue.c:899:
+				printk(KERN_WARNING "workqueue: too many "
+				       "workers (%d) on cpu %d, can't create "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#900: FILE: kernel/workqueue.c:900:
+				       "workers (%d) on cpu %d, can't create "
+				       "new ones\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#912: FILE: kernel/workqueue.c:912:
+			BUG_ON(need_to_create_worker(gcwq));

WARNING:INDENTED_LABEL: labels should not be indented
#918: FILE: kernel/workqueue.c:918:
+	cooldown:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1005: FILE: kernel/workqueue.c:1005:
+	BUG_ON(worker->running);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1017: FILE: kernel/workqueue.c:1017:
+	BUG_ON(worker->running);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1177: FILE: kernel/workqueue.c:1234:
+		BUG_ON(!list_empty(&worker->scheduled));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1178: FILE: kernel/workqueue.c:1235:
+		BUG_ON(worker->running);

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#1278: FILE: kernel/workqueue.c:1336:
+		/* CPU has come up inbetween, retry migration */
 		                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1333: FILE: kernel/workqueue.c:1390:
+		BUG_ON(!list_empty(&rescuer->scheduled));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1512: FILE: kernel/workqueue.c:1873:
+		BUG_ON((unsigned long)cwq & WORK_STRUCT_FLAG_MASK);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1540: FILE: kernel/workqueue.c:1886:
+		wq->rescuer = rescuer = alloc_worker();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1562: FILE: kernel/workqueue.c:1908:
+			struct cpu_workqueue_struct *cwq = get_cwq(cpu, wq);
+			cwq->cur_worklist = &cwq->frozen_works;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1670: FILE: kernel/workqueue.c:2014:
+#define for_each_busy_worker(worker, i, pos, gcwq)			\
+	for (i = 0; i < BUSY_WORKER_HASH_SIZE; i++)			\
+		hlist_for_each_entry(worker, pos, &gcwq->busy_hash[i], hentry) \
+			if (!(worker->flags & WORKER_RESCUER))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'worker' - possible side-effects?
#1670: FILE: kernel/workqueue.c:2014:
+#define for_each_busy_worker(worker, i, pos, gcwq)			\
+	for (i = 0; i < BUSY_WORKER_HASH_SIZE; i++)			\
+		hlist_for_each_entry(worker, pos, &gcwq->busy_hash[i], hentry) \
+			if (!(worker->flags & WORKER_RESCUER))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#1670: FILE: kernel/workqueue.c:2014:
+#define for_each_busy_worker(worker, i, pos, gcwq)			\
+	for (i = 0; i < BUSY_WORKER_HASH_SIZE; i++)			\
+		hlist_for_each_entry(worker, pos, &gcwq->busy_hash[i], hentry) \
+			if (!(worker->flags & WORKER_RESCUER))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gcwq' may be better as '(gcwq)' to avoid precedence issues
#1670: FILE: kernel/workqueue.c:2014:
+#define for_each_busy_worker(worker, i, pos, gcwq)			\
+	for (i = 0; i < BUSY_WORKER_HASH_SIZE; i++)			\
+		hlist_for_each_entry(worker, pos, &gcwq->busy_hash[i], hentry) \
+			if (!(worker->flags & WORKER_RESCUER))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cond' - possible side-effects?
#1691: FILE: kernel/workqueue.c:2035:
+#define trustee_wait_event_timeout(cond, timeout) ({			\
+	long __ret = (timeout);						\
+	while (!((cond) || (gcwq->trustee_state == TRUSTEE_RELEASE)) &&	\
+	       __ret) {							\
+		spin_unlock_irq(&gcwq->lock);				\
+		__wait_event_timeout(gcwq->trustee_wait, (cond) ||	\
+			(gcwq->trustee_state == TRUSTEE_RELEASE),	\
+			__ret);						\
+		spin_lock_irq(&gcwq->lock);				\
+	}								\
+	gcwq->trustee_state == TRUSTEE_RELEASE ? -1 : (__ret);		\
+})

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1737: FILE: kernel/workqueue.c:2076:
+	BUG_ON(force_cpus_allowed_ptr(worker->task, get_cpu_mask(gcwq->cpu)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1752: FILE: kernel/workqueue.c:2091:
+	BUG_ON(gcwq->cpu != smp_processor_id());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1760: FILE: kernel/workqueue.c:2099:
+	BUG_ON(gcwq->cpu != smp_processor_id());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1761: FILE: kernel/workqueue.c:2100:
+	BUG_ON(trustee_wait_event(!(gcwq->flags & GCWQ_MANAGING_WORKERS)) < 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1849: FILE: kernel/workqueue.c:2172:
+			if (worker) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1853: FILE: kernel/workqueue.c:2176:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1939: FILE: kernel/workqueue.c:2252:
+static int __cpuinit workqueue_cpu_callback(struct notifier_block *nfb,
+						unsigned long action,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'new_worker' should also have an identifier name
#1945: FILE: kernel/workqueue.c:2258:
+	struct worker *uninitialized_var(new_worker);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1956: FILE: kernel/workqueue.c:2269:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1958: FILE: kernel/workqueue.c:2271:
+		BUG_ON(gcwq->first_idle);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1972: FILE: kernel/workqueue.c:2285:
+		BUG_ON(gcwq->trustee || gcwq->trustee_state != TRUSTEE_DONE);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1977: FILE: kernel/workqueue.c:2290:
+		/* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1979: FILE: kernel/workqueue.c:2292:
+		BUG_ON(gcwq->first_idle);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1994: FILE: kernel/workqueue.c:2307:
+		/* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2058: FILE: kernel/workqueue.c:2419:
+			BUG_ON(cwq->cur_worklist != &gcwq->worklist);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2201: FILE: kernel/workqueue.c:2571:
+		BUG_ON(!worker);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000065682.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 36 warnings, 12 checks, 2039 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000065682.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
