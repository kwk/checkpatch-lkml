WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#86: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#738: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'bandwith' may be misspelled - perhaps 'bandwidth'?
#743: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:6:
+ * bandwith (e.g. ethernet) and then the remaining slots are divided
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#786: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:49:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:55:
+  unsigned long instance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:56:
+  watch_callback *cb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:57:
+  unsigned long start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:58:
+  unsigned long end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:59:
+  int used;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:72:
+  unsigned long instance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:73:
+  int nbr_regions;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:74:
+  int nbr_clients;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:75:
+  int requested_slots[NBR_OF_REGIONS][NBR_OF_CLIENTS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:76:
+  int active_clients[NBR_OF_REGIONS][NBR_OF_CLIENTS];$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#817: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:80:
+static struct crisv32_watch_entry watches[ARBITERS][NUMBER_OF_BP] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:81:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:82:
+  {regi_marb_foo_bp0},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:83:
+  {regi_marb_foo_bp1},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:84:
+  {regi_marb_foo_bp2},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:85:
+  {regi_marb_foo_bp3}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:86:
+  },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:87:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:88:
+  {regi_marb_bar_bp0},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:89:
+  {regi_marb_bar_bp1},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:90:
+  {regi_marb_bar_bp2},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:91:
+  {regi_marb_bar_bp3}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:92:
+  }$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#833: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:96:
+struct arbiter arbiters[ARBITERS] =
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:97:
+  { /* L2 cache arbiter */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:98:
+    .instance = regi_marb_foo,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:99:
+    .nbr_regions = 2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:100:
+    .nbr_clients = 15$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:101:
+  },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:102:
+  { /* DDR2 arbiter */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:103:
+    .instance = regi_marb_bar,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:104:
+    .nbr_regions = 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:105:
+    .nbr_clients = 9$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#843: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:106:
+  }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#883: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:146:
+	for (slot = 0; slot < NBR_OF_SLOTS; slot++)
+	    val[slot] = -1;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#886: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:149:
+	for (client = 0; client < arbiters[arbiter].nbr_clients; client++) {
+	    int pos;

WARNING:TABSTOP: Statements should start on a tabstop
#887: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:150:
+	    int pos;

WARNING:TABSTOP: Statements should start on a tabstop
#905: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:168:
+	    if (!arbiters[arbiter].requested_slots[region][client]) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:175:
+		if (!arbiters[arbiter].active_clients[region][client] ||
+				unused_slots <= 0)

WARNING:TABSTOP: Statements should start on a tabstop
#919: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:182:
+	    } else

CHECK:BRACES: Unbalanced braces around else statement
#919: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:182:
+	    } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#924: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:187:
+	    while (pos < NBR_OF_SLOTS) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 19)
#925: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:188:
+		if (val[pos] >= 0)
+		   pos++;

CHECK:BRACES: braces {} should be used on all arms of this statement
#925: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:188:
+		if (val[pos] >= 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#927: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:190:
+		else {

WARNING:TABSTOP: Statements should start on a tabstop
#931: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:194:
+	    }

WARNING:LINE_SPACING: Missing a blank line after declarations
#944: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:207:
+			int first = client;
+			while (!arbiters[arbiter].active_clients[region][client]) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 35)
#947: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:210:
+				if (client == first)
+				   break;

WARNING:TABSTOP: Statements should start on a tabstop
#948: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:211:
+				   break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:219:
+				REG_WR_INT_VECT(marb_foo, regi_marb_foo,
+					rw_l2_slots, slot, val[slot]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:222:
+				REG_WR_INT_VECT(marb_foo, regi_marb_foo,
+					rw_intm_slots, slot, val[slot]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:225:
+			REG_WR_INT_VECT(marb_bar, regi_marb_bar,
+				rw_ddr2_slots, slot, val[slot]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#997: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:260:
+		printk(KERN_ERR "Couldn't allocate arbiter IRQ\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1001: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:264:
+		printk(KERN_ERR "Couldn't allocate arbiter IRQ\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:269:
+	crisv32_arbiter_watch(virt_to_phys(&_stext), &_etext - &_stext,
+		MARB_CLIENTS(arbiter_all_clients, arbiter_bar_all_clients),

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#1055: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:318:
+	if (total_assigned + req > NBR_OF_SLOTS)
+	   return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#1056: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:319:
+	   return -ENOMEM;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1065: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:328:
+		crisv32_arbiter_allocate_bandwith(8 << 16,
+			EXT_REGION, bandwidth);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1111: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:374:
+		printk(KERN_ERR "Arbiter: %lX doesn't look like a "

WARNING:SPLIT_STRING: quoted string split across lines
#1112: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:375:
+		printk(KERN_ERR "Arbiter: %lX doesn't look like a "
+			"physical address", start);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1129: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:392:
+				unsigned intr_mask;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1130: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:393:
+				unsigned intr_mask;
+				if (arbiter)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:395:
+					intr_mask = REG_RD_INT(marb_bar,
+						regi_marb_bar, rw_intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1135: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:398:
+					intr_mask = REG_RD_INT(marb_foo,
+						regi_marb_foo, rw_intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:408:
+					REG_WR_INT(marb_bar_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1149: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:412:
+					REG_WR_INT(marb_bar_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1153: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:416:
+					REG_WR_INT(marb_bar_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1156: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:419:
+					REG_WR_INT(marb_bar_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:424:
+					REG_WR_INT(marb_foo_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1165: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:428:
+					REG_WR_INT(marb_foo_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:432:
+					REG_WR_INT(marb_foo_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:435:
+					REG_WR_INT(marb_foo_bp,
+						watches[arbiter][i].instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1187: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:450:
+					REG_WR_INT(marb_bar, regi_marb_bar,
+						rw_intr_mask, intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1190: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:453:
+					REG_WR_INT(marb_foo, regi_marb_foo,
+						rw_intr_mask, intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:482:
+			intr_mask = REG_RD_INT(marb_bar, regi_marb_bar,
+				rw_intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:485:
+			intr_mask = REG_RD_INT(marb_foo, regi_marb_foo,
+				rw_intr_mask);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id2 >= NUMBER_OF_BP'
#1228: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:491:
+		if ((id2 >= NUMBER_OF_BP) || (!watches[arbiter][id2].used)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!watches[arbiter][id2].used'
#1228: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:491:
+		if ((id2 >= NUMBER_OF_BP) || (!watches[arbiter][id2].used)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:497:
+		memset(&watches[arbiter][id2], 0,
+			sizeof(struct crisv32_watch_entry));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:510:
+			REG_WR_INT(marb_bar, regi_marb_bar, rw_intr_mask,
+				intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1250: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:513:
+			REG_WR_INT(marb_foo, regi_marb_foo, rw_intr_mask,
+				intr_mask);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1259: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:522:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1275: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:538:
+	unsigned arbiter = (unsigned)dev_id;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1275: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:538:
+	unsigned arbiter = (unsigned)dev_id;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1297: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:560:
+	printk(KERN_DEBUG "Arbiter IRQ\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1298: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:561:
+	printk(KERN_DEBUG "Clients %X addr %X op %X first %X size %X\n",

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1308: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:571:
+	printk(KERN_DEBUG "IRQ occured at %X\n", (unsigned)get_irq_regs());
 	                       ^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1308: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:571:
+	printk(KERN_DEBUG "IRQ occured at %X\n", (unsigned)get_irq_regs());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1308: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:571:
+	printk(KERN_DEBUG "IRQ occured at %X\n", (unsigned)get_irq_regs());

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1331: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:594:
+	unsigned arbiter = (unsigned)dev_id;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1331: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:594:
+	unsigned arbiter = (unsigned)dev_id;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1353: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:616:
+	printk(KERN_DEBUG "Arbiter IRQ\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1354: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:617:
+	printk(KERN_DEBUG "Clients %X addr %X op %X first %X size %X\n",

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1364: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:627:
+	printk(KERN_DEBUG "IRQ occured at %X\n", (unsigned)get_irq_regs()->erp);
 	                       ^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1364: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:627:
+	printk(KERN_DEBUG "IRQ occured at %X\n", (unsigned)get_irq_regs()->erp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1364: FILE: arch/cris/arch-v32/mach-a3/arbiter.c:627:
+	printk(KERN_DEBUG "IRQ occured at %X\n", (unsigned)get_irq_regs()->erp);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1378: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:1:
+#include <linux/init.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1388: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:11:
+cris_sdram_freq_notifier(struct notifier_block *nb, unsigned long val,
+	void *data);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1403: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:26:
+	reg_clkgen_rw_clk_ctrl clk_ctrl;
+	clk_ctrl = REG_RD(clkgen, regi_clkgen, rw_clk_ctrl);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1412: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:35:
+	reg_clkgen_rw_clk_ctrl clk_ctrl;
+	clk_ctrl = REG_RD(clkgen, regi_clkgen, rw_clk_ctrl);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1428: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:51:
+	 * so all settings are made on CPU0. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1452: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:75:
+	if (cpufreq_frequency_table_target(policy, cris_freq_table,
+			target_freq, relation, &newstate))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1478: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:101:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1485: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:108:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1505: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:128:
+	int ret;
+	ret = cpufreq_register_driver(&cris_freq_driver);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1507: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:130:
+	cpufreq_register_notifier(&cris_sdram_freq_notifier_block,
+		CPUFREQ_TRANSITION_NOTIFIER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:136:
+cris_sdram_freq_notifier(struct notifier_block *nb, unsigned long val,
+	void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1517: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:140:
+	struct cpufreq_freqs *freqs = data;
+	if (val == CPUFREQ_PRECHANGE) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1523: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:146:
+			for (i = 0; i < 50000; i++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1529: FILE: arch/cris/arch-v32/mach-a3/cpufreq.c:152:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1537: FILE: arch/cris/arch-v32/mach-a3/dma.c:1:
+/* Wrapper for DMA channel allocator that starts clocks etc */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: arch/cris/arch-v32/mach-a3/dma.c:21:
+int crisv32_request_dma(unsigned int dmanr, const char *device_id,
+	unsigned options, unsigned int bandwidth, enum dma_owner owner)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1557: FILE: arch/cris/arch-v32/mach-a3/dma.c:21:
+	unsigned options, unsigned int bandwidth, enum dma_owner owner)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1564: FILE: arch/cris/arch-v32/mach-a3/dma.c:28:
+	if (crisv32_arbiter_allocate_bandwith(dmanr,
+			options & DMA_INT_MEM ? INT_REGION : EXT_REGION,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1573: FILE: arch/cris/arch-v32/mach-a3/dma.c:37:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "

WARNING:SPLIT_STRING: quoted string split across lines
#1574: FILE: arch/cris/arch-v32/mach-a3/dma.c:38:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "
+				"already allocated by %s\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1608: FILE: arch/cris/arch-v32/mach-a3/dma.c:72:
+#if MAX_DMA_CHANNELS-1 != 11
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1611: FILE: arch/cris/arch-v32/mach-a3/dma.c:75:
+	default:
 	       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1614: FILE: arch/cris/arch-v32/mach-a3/dma.c:78:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "

WARNING:SPLIT_STRING: quoted string split across lines
#1615: FILE: arch/cris/arch-v32/mach-a3/dma.c:79:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "
+				"only 0-%i valid)\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1616: FILE: arch/cris/arch-v32/mach-a3/dma.c:80:
+				dmanr, device_id, MAX_DMA_CHANNELS-1);
 				                                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1728: FILE: arch/cris/arch-v32/mach-a3/dram_init.S:1:
+/*

WARNING:TYPO_SPELLING: 'decompresser' may be misspelled - perhaps 'decompressor'?
#1733: FILE: arch/cris/arch-v32/mach-a3/dram_init.S:6:
+ * carry information from the decompresser to the kernel
                               ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#1741: FILE: arch/cris/arch-v32/mach-a3/dram_init.S:14:
+ * explicitely instead of depending on it being included in the file that
    ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1801: FILE: arch/cris/arch-v32/mach-a3/dram_init.S:74:
+	ba after_sdram_commands
 	^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1838: FILE: arch/cris/arch-v32/mach-a3/hw_settings.S:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1895: FILE: arch/cris/arch-v32/mach-a3/io.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1908: FILE: arch/cris/arch-v32/mach-a3/io.c:14:
+#include <asm/io.h>

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1933: FILE: arch/cris/arch-v32/mach-a3/io.c:39:
+#define NBR_OF_PORTS sizeof(crisv32_ioports)/sizeof(struct crisv32_ioport)
                                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1933: FILE: arch/cris/arch-v32/mach-a3/io.c:39:
+#define NBR_OF_PORTS sizeof(crisv32_ioports)/sizeof(struct crisv32_ioport)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1950: FILE: arch/cris/arch-v32/mach-a3/io.c:56:
+};
+static struct crisv32_iopin dummy_led = {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1971: FILE: arch/cris/arch-v32/mach-a3/io.c:77:
+	if (strcmp(CONFIG_ETRAX_LED_G_NET0, CONFIG_ETRAX_LED_R_NET0)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1975: FILE: arch/cris/arch-v32/mach-a3/io.c:81:
+	} else

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1992: FILE: arch/cris/arch-v32/mach-a3/io.c:98:
+__initcall(crisv32_io_init);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1995: FILE: arch/cris/arch-v32/mach-a3/io.c:101:
+int crisv32_io_get(struct crisv32_iopin *iopin,
+	unsigned int port, unsigned int pin)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2012: FILE: arch/cris/arch-v32/mach-a3/io.c:118:
+int crisv32_io_get_name(struct crisv32_iopin *iopin,
+	const char *name)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2025: FILE: arch/cris/arch-v32/mach-a3/io.c:131:
+	pin = simple_strtoul(name, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#2041: FILE: arch/cris/arch-v32/mach-a3/io.c:147:
+struct cris_io_operations *cris_iops = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2051: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:1:
+/*

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pins[port * PORT_PINS + i] != pinmux_none'
#2111: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:61:
+		if ((pins[port * PORT_PINS + i] != pinmux_none) &&
+		    (pins[port * PORT_PINS + i] != pinmux_gpio) &&
+		    (pins[port * PORT_PINS + i] != mode)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pins[port * PORT_PINS + i] != pinmux_gpio'
#2111: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:61:
+		if ((pins[port * PORT_PINS + i] != pinmux_none) &&
+		    (pins[port * PORT_PINS + i] != pinmux_gpio) &&
+		    (pins[port * PORT_PINS + i] != mode)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pins[port * PORT_PINS + i] != mode'
#2111: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:61:
+		if ((pins[port * PORT_PINS + i] != pinmux_none) &&
+		    (pins[port * PORT_PINS + i] != pinmux_gpio) &&
+		    (pins[port * PORT_PINS + i] != mode)) {

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#2136: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:86:
+	char saved[sizeof pins];

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#2142: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:92:
+	memcpy(saved, pins, sizeof pins);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2156: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:106:
+		hwprot.eth = hwprot.eth_mdio = regk_pinmux_yes;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2163: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:113:
+		clk_ctrl.ccd_tg_100 = clk_ctrl.ccd_tg_200 = regk_clkgen_yes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2168: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:118:
+		clk_ctrl.ccd_tg_100 = clk_ctrl.ccd_tg_200 = regk_clkgen_yes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2171: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:121:
+		hwprot.tg = hwprot.tg_clk = regk_pinmux_yes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2176: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:126:
+		hwprot.vout = hwprot.vout_sync = regk_pinmux_yes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2230: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:180:
+		hwprot.i2c1 = hwprot.i2c1_sen = regk_pinmux_yes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2234: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:184:
+		hwprot.i2c1 = hwprot.i2c1_sda1 = regk_pinmux_yes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2239: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:189:
+		hwprot.i2c1 = hwprot.i2c1_sda2 = regk_pinmux_yes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2244: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:194:
+		hwprot.i2c1 = hwprot.i2c1_sda3 = regk_pinmux_yes;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2251: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:201:
+	if (!ret) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2254: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:204:
+	} else

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#2255: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:205:
+		memcpy(pins, saved, sizeof pins);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2257: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:207:
+  spin_unlock_irqrestore(&pinmux_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2259: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:209:
+  return ret;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2278: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:228:
+	REG_WRITE(int, regi_pinmux + REG_RD_ADDR_pinmux_rw_gio_pa + 4 * port,
+		gpio_val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2280: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:230:
+	REG_WRITE(int, regi_pinmux + REG_RD_ADDR_pinmux_rw_iop_pa + 4 * port,
+		iop_val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2283: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:233:
+       crisv32_pinmux_dump();$

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#2313: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:263:
+	char saved[sizeof pins];

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#2319: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:269:
+	memcpy(saved, pins, sizeof pins);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2330: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:280:
+		hwprot.eth = hwprot.eth_mdio = hwprot.geth = regk_pinmux_no;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2339: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:289:
+		hwprot.tg = hwprot.tg_clk = regk_pinmux_no;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2343: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:293:
+		hwprot.vout = hwprot.vout_sync = regk_pinmux_no;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2388: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:338:
+		hwprot.i2c1 = hwprot.i2c1_sen = regk_pinmux_no;

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#2412: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:362:
+		memcpy(pins, saved, sizeof pins);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2414: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:364:
+  spin_unlock_irqrestore(&pinmux_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2416: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:366:
+  return ret;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2429: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:379:
+		printk(KERN_DEBUG "Port %c\n", 'A'+i);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2429: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:379:
+		printk(KERN_DEBUG "Port %c\n", 'A'+i);
 		                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2431: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:381:
+			printk(KERN_DEBUG

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2436: FILE: arch/cris/arch-v32/mach-a3/pinmux.c:386:
+__initcall(crisv32_pinmux_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2443: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#2448: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:6:
+#include <asm/io.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#2454: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:12:
+static volatile unsigned *hook_base;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2454: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:12:
+static volatile unsigned *hook_base;

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2458: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:16:
+#define HOOK_TRIG(funcid) \
+	do { \
+		*((unsigned *) HOOK_TRIG_ADDR) = funcid; \
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:SPACING: No space is necessary after a cast
#2460: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:18:
+		*((unsigned *) HOOK_TRIG_ADDR) = funcid; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#2460: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:18:
+		*((unsigned *) HOOK_TRIG_ADDR) = funcid; \

WARNING:LINE_SPACING: Missing a blank line after declarations
#2467: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:25:
+	static int first = 1;
+	if (first) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2473: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:31:
+static unsigned hook_trig(unsigned id)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2473: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:31:
+static unsigned hook_trig(unsigned id)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2475: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:33:
+	unsigned ret;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2480: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:38:
+	 * before trigging */

WARNING:SPACING: space prohibited before semicolon
#2487: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:45:
+	while (VHOOK_DATA(0) > 0) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2487: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:45:
+	while (VHOOK_DATA(0) > 0) ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2496: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:54:
+int hook_call(unsigned id, unsigned pcnt, ...)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2496: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:54:
+int hook_call(unsigned id, unsigned pcnt, ...)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2500: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:58:
+	unsigned ret;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2508: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:66:
+		HOOK_DATA(i) = va_arg(ap, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2516: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:74:
+int hook_call_str(unsigned id, unsigned size, const char *str)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2516: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:74:
+int hook_call_str(unsigned id, unsigned size, const char *str)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2519: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:77:
+	unsigned ret;

WARNING:SPACING: space prohibited before semicolon
#2539: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:97:
+	for (i = 1; str[i]; i++) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2539: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:97:
+	for (i = 1; str[i]; i++) ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2543: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.c:101:
+void CPU_WATCHDOG_TIMEOUT(unsigned t)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2552: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2559: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:8:
+int hook_call(unsigned id, unsigned pcnt, ...);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2559: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:8:
+int hook_call(unsigned id, unsigned pcnt, ...);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2560: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:9:
+int hook_call_str(unsigned id, unsigned size, const char *str);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2560: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:9:
+int hook_call_str(unsigned id, unsigned size, const char *str);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2563: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:12:
+  hook_debug_on = 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2564: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:13:
+  hook_debug_off,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2565: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:14:
+  hook_stop_sim_ok,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2566: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:15:
+  hook_stop_sim_fail,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2567: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:16:
+  hook_alloc_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2568: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:17:
+  hook_ptr_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2569: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:18:
+  hook_free_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2570: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:19:
+  hook_file2shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2571: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:20:
+  hook_cmp_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2572: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:21:
+  hook_print_params,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2573: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:22:
+  hook_sim_time,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2574: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:23:
+  hook_stop_sim,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2575: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:24:
+  hook_kick_dog,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2576: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:25:
+  hook_dog_timeout,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2577: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:26:
+  hook_rand,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2578: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:27:
+  hook_srand,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2579: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:28:
+  hook_rand_range,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2580: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:29:
+  hook_print_str,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2581: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:30:
+  hook_print_hex,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2582: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:31:
+  hook_cmp_offset_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2583: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:32:
+  hook_fill_random_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2584: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:33:
+  hook_alloc_random_data,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2585: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:34:
+  hook_calloc_random_data,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2586: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:35:
+  hook_print_int,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2587: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:36:
+  hook_print_uint,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2588: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:37:
+  hook_fputc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2589: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:38:
+  hook_init_fd,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2590: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:39:
+  hook_sbrk,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2591: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:40:
+  hook_print_context_descr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2592: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:41:
+  hook_print_data_descr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2593: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:42:
+  hook_print_group_descr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2594: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:43:
+  hook_fill_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2595: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:44:
+  hook_sl_srand,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2596: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:45:
+  hook_sl_rand_irange,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2597: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:46:
+  hook_sl_rand_urange,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2598: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:47:
+  hook_sl_sh_malloc_aligned,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2599: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:48:
+  hook_sl_sh_calloc_aligned,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2600: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:49:
+  hook_sl_sh_alloc_random_data,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2601: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:50:
+  hook_sl_sh_file2mem,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2602: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:51:
+  hook_sl_vera_mbox_handle,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2603: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:52:
+  hook_sl_vera_mbox_put,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2604: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:53:
+  hook_sl_vera_mbox_get,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2605: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:54:
+  hook_sl_system,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2606: FILE: arch/cris/arch-v32/mach-a3/vcs_hook.h:55:
+  hook_sl_sh_hexdump$

WARNING:TYPO_SPELLING: 'defult' may be misspelled - perhaps 'default'?
#2677: FILE: arch/cris/arch-v32/mach-fs/Kconfig:62:
+	  SDRAM configuration for group 1. The defult value is 0
 	                                       ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2855: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#2875: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:21:
+#include <asm/io.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2903: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:49:
+    { SDRAM_BANDWIDTH, INTMEM_BANDWIDTH };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2903: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:49:
+static int max_bandwidth[NBR_OF_REGIONS] =
+    { SDRAM_BANDWIDTH, INTMEM_BANDWIDTH };

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2966: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:112:
+			if (!active_clients[region][client]
+			    || unused_slots <= 0)

CHECK:BRACES: Unbalanced braces around else statement
#2973: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:119:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2979: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:125:
+			if (val[pos] >= 0)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2981: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:127:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2998: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:144:
+			int first = client;
+			while (!active_clients[region][client]) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3037: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:183:
+	active_clients[EXT_REGION][10] = active_clients[EXT_REGION][11] = 1;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3043: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:189:
+		printk(KERN_ERR "Couldn't allocate arbiter IRQ\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3126: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:272:
+		printk(KERN_ERR "Arbiter: %lX doesn't look like a "

WARNING:SPLIT_STRING: quoted string split across lines
#3127: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:273:
+		printk(KERN_ERR "Arbiter: %lX doesn't look like a "
+			"physical address", start);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < 0'
#3179: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:325:
+	if ((id < 0) || (id >= NUMBER_OF_BP) || (!watches[id].used)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= NUMBER_OF_BP'
#3179: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:325:
+	if ((id < 0) || (id >= NUMBER_OF_BP) || (!watches[id].used)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!watches[id].used'
#3179: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:325:
+	if ((id < 0) || (id >= NUMBER_OF_BP) || (!watches[id].used)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3241: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:387:
+	printk(KERN_INFO "Arbiter IRQ\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3242: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:388:
+	printk(KERN_INFO "Clients %X addr %X op %X first %X size %X\n",

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#3252: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:398:
+	printk(KERN_INFO "IRQ occured at %lX\n", get_irq_regs()->erp);
 	                      ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3252: FILE: arch/cris/arch-v32/mach-fs/arbiter.c:398:
+	printk(KERN_INFO "IRQ occured at %lX\n", get_irq_regs()->erp);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3265: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:1:
+#include <linux/init.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#3290: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:26:
+	reg_config_rw_clk_ctrl clk_ctrl;
+	clk_ctrl = REG_RD(config, regi_config, rw_clk_ctrl);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3299: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:35:
+	reg_config_rw_clk_ctrl clk_ctrl;
+	clk_ctrl = REG_RD(config, regi_config, rw_clk_ctrl);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3312: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:48:
+	 * so all settings are made on CPU0. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#3386: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:122:
+	int ret;
+	ret = cpufreq_register_driver(&cris_freq_driver);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3398: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:134:
+	struct cpufreq_freqs *freqs = data;
+	if (val == CPUFREQ_PRECHANGE) {

WARNING:SPACING: space prohibited before semicolon
#3404: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:140:
+			for (i = 0; i < 50000; i++) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3404: FILE: arch/cris/arch-v32/mach-fs/cpufreq.c:140:
+			for (i = 0; i < 50000; i++) ;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3417: FILE: arch/cris/arch-v32/mach-fs/dma.c:1:
+/* Wrapper for DMA channel allocator that starts clocks etc */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3437: FILE: arch/cris/arch-v32/mach-fs/dma.c:21:
+			unsigned options, unsigned int bandwidth,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3455: FILE: arch/cris/arch-v32/mach-fs/dma.c:39:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "

WARNING:SPLIT_STRING: quoted string split across lines
#3456: FILE: arch/cris/arch-v32/mach-fs/dma.c:40:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "
+				"already allocated by %s\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3490: FILE: arch/cris/arch-v32/mach-fs/dma.c:74:
+#if MAX_DMA_CHANNELS-1 != 9
                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#3493: FILE: arch/cris/arch-v32/mach-fs/dma.c:77:
+	default:
 	       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3496: FILE: arch/cris/arch-v32/mach-fs/dma.c:80:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "

WARNING:SPLIT_STRING: quoted string split across lines
#3497: FILE: arch/cris/arch-v32/mach-fs/dma.c:81:
+			printk(KERN_ERR "Failed to request DMA %i for %s, "
+				"only 0-%i valid)\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3653: FILE: arch/cris/arch-v32/mach-fs/dram_init.S:1:
+/*

WARNING:TYPO_SPELLING: 'decompresser' may be misspelled - perhaps 'decompressor'?
#3658: FILE: arch/cris/arch-v32/mach-fs/dram_init.S:6:
+ * carry information from the decompresser to the kernel
                               ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#3666: FILE: arch/cris/arch-v32/mach-fs/dram_init.S:14:
+ * explicitely instead of depending on it being included in the file that
    ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#3754: FILE: arch/cris/arch-v32/mach-fs/dram_init.S:102:
+	ba       _sdram_commands_end
 	^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3775: FILE: arch/cris/arch-v32/mach-fs/hw_settings.S:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3851: FILE: arch/cris/arch-v32/mach-fs/io.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#3864: FILE: arch/cris/arch-v32/mach-fs/io.c:14:
+#include <asm/io.h>

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3905: FILE: arch/cris/arch-v32/mach-fs/io.c:55:
+#define NBR_OF_PORTS sizeof(crisv32_ioports)/sizeof(struct crisv32_ioport)
                                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3905: FILE: arch/cris/arch-v32/mach-fs/io.c:55:
+#define NBR_OF_PORTS sizeof(crisv32_ioports)/sizeof(struct crisv32_ioport)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3924: FILE: arch/cris/arch-v32/mach-fs/io.c:74:
+};
+static struct crisv32_iopin dummy_led = {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3946: FILE: arch/cris/arch-v32/mach-fs/io.c:96:
+	if (strcmp(CONFIG_ETRAX_LED_G_NET0, CONFIG_ETRAX_LED_R_NET0)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3951: FILE: arch/cris/arch-v32/mach-fs/io.c:101:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3960: FILE: arch/cris/arch-v32/mach-fs/io.c:110:
+	if (strcmp(CONFIG_ETRAX_LED_G_NET1, CONFIG_ETRAX_LED_R_NET1)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3964: FILE: arch/cris/arch-v32/mach-fs/io.c:114:
+	} else

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#3981: FILE: arch/cris/arch-v32/mach-fs/io.c:131:
+__initcall(crisv32_io_init);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3998: FILE: arch/cris/arch-v32/mach-fs/io.c:148:
+	DEBUG(printk(KERN_DEBUG "crisv32_io_get: Allocated pin %d on port %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'crisv32_io_get', this function's name, in a string
#3998: FILE: arch/cris/arch-v32/mach-fs/io.c:148:
+	DEBUG(printk(KERN_DEBUG "crisv32_io_get: Allocated pin %d on port %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3999: FILE: arch/cris/arch-v32/mach-fs/io.c:149:
+	DEBUG(printk(KERN_DEBUG "crisv32_io_get: Allocated pin %d on port %d\n",
+		pin, port));

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#4017: FILE: arch/cris/arch-v32/mach-fs/io.c:167:
+	pin = simple_strtoul(name, NULL, 10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4030: FILE: arch/cris/arch-v32/mach-fs/io.c:180:
+	DEBUG(printk(KERN_DEBUG

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'crisv32_io_get_name', this function's name, in a string
#4031: FILE: arch/cris/arch-v32/mach-fs/io.c:181:
+		"crisv32_io_get_name: Allocated pin %d on port %d\n",

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#4039: FILE: arch/cris/arch-v32/mach-fs/io.c:189:
+struct cris_io_operations *cris_iops = NULL;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4048: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#4082: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:35:
+		reg_pinmux_rw_pa pa = REG_RD(pinmux, regi_pinmux, rw_pa);
+		initialized = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4084: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:37:
+		pa.pa0 = pa.pa1 = pa.pa2 = pa.pa3 =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4085: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:38:
+		    pa.pa4 = pa.pa5 = pa.pa6 = pa.pa7 = regk_pinmux_yes;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pins[port][i] != pinmux_none'
#4110: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:63:
+		if ((pins[port][i] != pinmux_none)
+		    && (pins[port][i] != pinmux_gpio)
+		    && (pins[port][i] != mode)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pins[port][i] != pinmux_gpio'
#4110: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:63:
+		if ((pins[port][i] != pinmux_none)
+		    && (pins[port][i] != pinmux_gpio)
+		    && (pins[port][i] != mode)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pins[port][i] != mode'
#4110: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:63:
+		if ((pins[port][i] != pinmux_none)
+		    && (pins[port][i] != pinmux_gpio)
+		    && (pins[port][i] != mode)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4111: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:64:
+		if ((pins[port][i] != pinmux_none)
+		    && (pins[port][i] != pinmux_gpio)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4112: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:65:
+		    && (pins[port][i] != pinmux_gpio)
+		    && (pins[port][i] != mode)) {

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#4134: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:87:
+	char saved[sizeof pins];

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#4140: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:93:
+	memcpy(saved, pins, sizeof pins);

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#4208: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:161:
+		memcpy(pins, saved, sizeof pins);

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#4262: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:215:
+	char saved[sizeof pins];

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#4268: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:221:
+	memcpy(saved, pins, sizeof pins);

WARNING:SIZEOF_PARENTHESIS: sizeof pins should be sizeof(pins)
#4336: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:289:
+		memcpy(pins, saved, sizeof pins);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4350: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:303:
+		printk(KERN_DEBUG "Port %c\n", 'B' + i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4352: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:305:
+			printk(KERN_DEBUG "  Pin %d = %d\n", j, pins[i][j]);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#4356: FILE: arch/cris/arch-v32/mach-fs/pinmux.c:309:
+__initcall(crisv32_pinmux_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4363: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4376: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:14:
+#define HOOK_DATA(offset) ((unsigned *)HOOK_MEM_BASE_ADDR)[offset]

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4377: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:15:
+#define VHOOK_DATA(offset) ((volatile unsigned *)HOOK_MEM_BASE_ADDR)[offset]

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4377: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:15:
+#define VHOOK_DATA(offset) ((volatile unsigned *)HOOK_MEM_BASE_ADDR)[offset]

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#4378: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:16:
+#define HOOK_TRIG(funcid) \
+	do { \
+		*((unsigned *) HOOK_TRIG_ADDR) = funcid; \
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#4380: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:18:
+		*((unsigned *) HOOK_TRIG_ADDR) = funcid; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4380: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:18:
+		*((unsigned *) HOOK_TRIG_ADDR) = funcid; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4384: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:22:
+int hook_call(unsigned id, unsigned pcnt, ...)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4384: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:22:
+int hook_call(unsigned id, unsigned pcnt, ...)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4387: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:25:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4388: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:26:
+	unsigned ret;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4398: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:36:
+	 * hook_call. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4407: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:45:
+		str = (char *)va_arg(ap, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4416: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:54:
+			HOOK_DATA(i) = va_arg(ap, unsigned);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4421: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:59:
+	 * trigging */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4422: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:60:
+	ret = *((volatile unsigned *)HOOK_MEM_BASE_ADDR);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4422: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:60:
+	ret = *((volatile unsigned *)HOOK_MEM_BASE_ADDR);

WARNING:SPACING: space prohibited before semicolon
#4428: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:66:
+	while (VHOOK_DATA(0) > 0) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4428: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:66:
+	while (VHOOK_DATA(0) > 0) ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4440: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:78:
+unsigned hook_buf(unsigned i)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4440: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:78:
+unsigned hook_buf(unsigned i)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#4442: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:80:
+	return (HOOK_DATA(i));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPACING: space prohibited before semicolon
#4449: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:87:
+	for (i = 1; str[i]; i++) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4449: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:87:
+	for (i = 1; str[i]; i++) ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4458: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.c:96:
+void CPU_WATCHDOG_TIMEOUT(unsigned t)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4469: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4476: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:8:
+int hook_call(unsigned id, unsigned pcnt, ...);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4476: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:8:
+int hook_call(unsigned id, unsigned pcnt, ...);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4479: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:11:
+  hook_debug_on = 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4480: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:12:
+  hook_debug_off,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4481: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:13:
+  hook_stop_sim_ok,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4482: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:14:
+  hook_stop_sim_fail,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4483: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:15:
+  hook_alloc_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4484: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:16:
+  hook_ptr_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4485: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:17:
+  hook_free_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4486: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:18:
+  hook_file2shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4487: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:19:
+  hook_cmp_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4488: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:20:
+  hook_print_params,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4489: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:21:
+  hook_sim_time,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4490: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:22:
+  hook_stop_sim,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4491: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:23:
+  hook_kick_dog,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4492: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:24:
+  hook_dog_timeout,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4493: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:25:
+  hook_rand,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4494: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:26:
+  hook_srand,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4495: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:27:
+  hook_rand_range,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4496: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:28:
+  hook_print_str,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4497: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:29:
+  hook_print_hex,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4498: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:30:
+  hook_cmp_offset_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4499: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:31:
+  hook_fill_random_shared,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4500: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:32:
+  hook_alloc_random_data,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4501: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:33:
+  hook_calloc_random_data,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4502: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:34:
+  hook_print_int,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4503: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:35:
+  hook_print_uint,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4504: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:36:
+  hook_fputc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4505: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:37:
+  hook_init_fd,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4506: FILE: arch/cris/arch-v32/mach-fs/vcs_hook.h:38:
+  hook_sbrk$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000342191.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 271 warnings, 97 checks, 3780 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000342191.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
