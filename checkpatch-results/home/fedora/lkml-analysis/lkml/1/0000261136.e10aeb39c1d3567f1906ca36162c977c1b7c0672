WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: arch/x86/perfmon/perfmon_intel_arch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: arch/x86/perfmon/perfmon_intel_arch.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: arch/x86/perfmon/perfmon_intel_arch.c:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#86: FILE: arch/x86/perfmon/perfmon_intel_arch.c:40:
+#define PFM_IA_PMC_RSVD	((~((1ULL<<32)-1)) \
                        	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#86: FILE: arch/x86/perfmon/perfmon_intel_arch.c:40:
+#define PFM_IA_PMC_RSVD	((~((1ULL<<32)-1)) \
                        	              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#87: FILE: arch/x86/perfmon/perfmon_intel_arch.c:41:
+			| (1ULL<<20) \
 			       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#88: FILE: arch/x86/perfmon/perfmon_intel_arch.c:42:
+			| (1ULL<<21))
 			       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#94: FILE: arch/x86/perfmon/perfmon_intel_arch.c:48:
+#define PFM_IA_PMC_VAL	(1ULL<<20)
                       	     ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#94: FILE: arch/x86/perfmon/perfmon_intel_arch.c:48:
+#define PFM_IA_PMC_VAL	(1ULL<<20)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#95: FILE: arch/x86/perfmon/perfmon_intel_arch.c:49:
+#define PFM_IA_NO64	(1ULL<<20)
                    	     ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#95: FILE: arch/x86/perfmon/perfmon_intel_arch.c:49:
+#define PFM_IA_NO64	(1ULL<<20)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#107: FILE: arch/x86/perfmon/perfmon_intel_arch.c:61:
+#define PFM_IA_SEL(n)^I{ ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#107: FILE: arch/x86/perfmon/perfmon_intel_arch.c:61:
+#define PFM_IA_SEL(n)	{ 			\
+	.addrs[0] = MSR_GEN_SEL_BASE+(n),	\
+	.ctr = n,				\
+	.reg_type = PFM_REGT_EN}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#108: FILE: arch/x86/perfmon/perfmon_intel_arch.c:62:
+	.addrs[0] = MSR_GEN_SEL_BASE+(n),	\
 	                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#112: FILE: arch/x86/perfmon/perfmon_intel_arch.c:66:
+#define PFM_IA_CTR(n) {				\
+	.addrs[0] = MSR_GEN_PMC_BASE+(n),	\
+	.ctr = n,				\
+	.reg_type = PFM_REGT_CTR}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: arch/x86/perfmon/perfmon_intel_arch.c:67:
+	.addrs[0] = MSR_GEN_PMC_BASE+(n),	\
 	                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#117: FILE: arch/x86/perfmon/perfmon_intel_arch.c:71:
+#define PFM_IA_FCTR(n) {			\
+	.addrs[0] = MSR_GEN_FIXED_PMC_BASE+(n),	\
+	.ctr = n,				\
+	.reg_type = PFM_REGT_CTR}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#118: FILE: arch/x86/perfmon/perfmon_intel_arch.c:72:
+	.addrs[0] = MSR_GEN_FIXED_PMC_BASE+(n),	\
 	                                  ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: arch/x86/perfmon/perfmon_intel_arch.c:81:
+^Iunsigned int num_cnt:8; ^I/* number of generic counters */$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: arch/x86/perfmon/perfmon_intel_arch.c:115:
+	.hw_addr = MSR_GEN_SEL_BASE+(n) \
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#164: FILE: arch/x86/perfmon/perfmon_intel_arch.c:118:
+#define PFM_IA_D(n) PMD_D(PFM_REG_C, "PMC"#n, MSR_P6_PERFCTR0+n)
                                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#164: FILE: arch/x86/perfmon/perfmon_intel_arch.c:118:
+#define PFM_IA_D(n) PMD_D(PFM_REG_C, "PMC"#n, MSR_P6_PERFCTR0+n)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#165: FILE: arch/x86/perfmon/perfmon_intel_arch.c:119:
+#define PFM_IA_FD(n) PMD_D(PFM_REG_C, "FIXED_CTR"#n, MSR_CORE_PERF_FIXED_CTR0+n)
                                                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#165: FILE: arch/x86/perfmon/perfmon_intel_arch.c:119:
+#define PFM_IA_FD(n) PMD_D(PFM_REG_C, "FIXED_CTR"#n, MSR_CORE_PERF_FIXED_CTR0+n)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#181: FILE: arch/x86/perfmon/perfmon_intel_arch.c:135:
+};
+#define PFM_IA_MAX_PMCS	ARRAY_SIZE(pfm_intel_arch_pmc_desc)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#194: FILE: arch/x86/perfmon/perfmon_intel_arch.c:148:
+};
+#define PFM_IA_MAX_PMDS	ARRAY_SIZE(pfm_intel_arch_pmd_desc)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#238: FILE: arch/x86/perfmon/perfmon_intel_arch.c:192:
+#if 0

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#250: FILE: arch/x86/perfmon/perfmon_intel_arch.c:204:
+	 * We need to do this explicitely to avoid depending
 	                      ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#271: FILE: arch/x86/perfmon/perfmon_intel_arch.c:225:
+	if (eax.eax.version == 0
+	    && current_cpu_data.x86 == 6 && current_cpu_data.x86_model == 15) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: arch/x86/perfmon/perfmon_intel_arch.c:249:
+	PFM_INFO("num_gen=%d width=%d num_fixed=%d width=%d",
+		  eax.eax.num_cnt,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#304: FILE: arch/x86/perfmon/perfmon_intel_arch.c:258:
+		printk(KERN_INFO "perfmon: Limiting number of generic counters"

WARNING:SPLIT_STRING: quoted string split across lines
#305: FILE: arch/x86/perfmon/perfmon_intel_arch.c:259:
+		printk(KERN_INFO "perfmon: Limiting number of generic counters"
+				 " to %zu, HW supports %u",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#309: FILE: arch/x86/perfmon/perfmon_intel_arch.c:263:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#318: FILE: arch/x86/perfmon/perfmon_intel_arch.c:272:
+			~((1ULL<<eax.eax.cnt_width)-1);
 			       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#318: FILE: arch/x86/perfmon/perfmon_intel_arch.c:272:
+			~((1ULL<<eax.eax.cnt_width)-1);
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#340: FILE: arch/x86/perfmon/perfmon_intel_arch.c:294:
+		pfm_intel_arch_pmd_desc[PFM_IA_FCNT_BASE+i].rsvd_msk =
 		                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#341: FILE: arch/x86/perfmon/perfmon_intel_arch.c:295:
+			~((1ULL<<edx.edx.cnt_width)-1);
 			       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#341: FILE: arch/x86/perfmon/perfmon_intel_arch.c:295:
+			~((1ULL<<edx.edx.cnt_width)-1);
 			                           ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: arch/x86/perfmon/perfmon_intel_arch.c:302:
+^I * ^Irsvd_msk: set all 4 bits$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#355: FILE: arch/x86/perfmon/perfmon_intel_arch.c:309:
+		pfm_intel_arch_pmd_desc[PFM_IA_FCNT_BASE+i].type = PFM_REG_NA;
 		                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#356: FILE: arch/x86/perfmon/perfmon_intel_arch.c:310:
+		rsvd |= 0xfULL << (i<<2);
 		                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#357: FILE: arch/x86/perfmon/perfmon_intel_arch.c:311:
+		dfl &= ~(0xfULL << (i<<2));
 		                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#387: FILE: arch/x86/perfmon/perfmon_intel_arch.c:341:
+ * ^I0 : no overflow$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: arch/x86/perfmon/perfmon_intel_arch.c:342:
+ * ^I1 : at least one overflow$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#410: FILE: arch/x86/perfmon/perfmon_intel_arch.c:364:
+			rdmsrl(MSR_P6_PERFCTR0+i, val);
 			                      ^

WARNING:REPEATED_WORD: Possible repeated word: 'control'
#496: FILE: arch/x86/perfmon/perfmon_intel_arch.c:450:
+	 * PMC16 is the fixed control control register so it has a

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: arch/x86/perfmon/perfmon_intel_arch.c:455:
+ ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#501: FILE: arch/x86/perfmon/perfmon_intel_arch.c:455:
+ ^I */$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#507: FILE: arch/x86/perfmon/perfmon_intel_arch.c:461:
+				wrmsrl(MSR_P6_EVNTSEL0+i, 0);
 				                      ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#533: FILE: arch/x86/perfmon/perfmon_intel_arch.c:487:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#547: FILE: arch/x86/perfmon/Kconfig:18:
+config  X86_PERFMON_INTEL_ARCH
+	bool "Support for Intel architectural perfmon v1/v2"
+	depends on PERFMON
+	default n
+	help
+	Enables support for Intel architectural performance counters.
+	This feature was introduced with Intel Core Solo/Core Duo processors.

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261136.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 14 warnings, 34 checks, 507 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261136.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
