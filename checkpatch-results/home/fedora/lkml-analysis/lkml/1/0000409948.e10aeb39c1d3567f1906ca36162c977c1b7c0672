WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
--- linux-2.6.22-rc6-balbir/include/linux/res_counter.h	2007-07-05 13:45:17.000000000 -0700

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/res_counter.h:1:
+#ifndef __RES_COUNTER_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'opeate' may be misspelled - perhaps 'operate'?
#121: FILE: include/linux/res_counter.h:49:
+ * @buf:     the buffer to opeate on,...
                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: include/linux/res_counter.h:55:
+ssize_t res_counter_read(struct res_counter *cnt, int member,
+		const char __user *buf, size_t nbytes, loff_t *pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: include/linux/res_counter.h:57:
+ssize_t res_counter_write(struct res_counter *cnt, int member,
+		const char __user *buf, size_t nbytes, loff_t *pos);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#216: FILE: init/Kconfig:363:
+config CONTAINER_MEM_CONT
+	bool "Memory controller for containers"
+	select CONTAINERS
+	select RESOURCE_COUNTERS
+	help
+	  Provides a memory controller that manages both page cache and
+	  RSS memory.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#242: FILE: kernel/res_counter.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: kernel/res_counter.c:63:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: kernel/res_counter.c:75:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: kernel/res_counter.c:80:
+ssize_t res_counter_read(struct res_counter *cnt, int member,
+		const char __user *userbuf, size_t nbytes, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: kernel/res_counter.c:93:
+ssize_t res_counter_write(struct res_counter *cnt, int member,
+		const char __user *userbuf, size_t nbytes, loff_t *pos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#342: FILE: kernel/res_counter.c:101:
+	if (buf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#351: FILE: kernel/res_counter.c:110:
+	tmp = simple_strtoul(buf, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#389: FILE: mm/memcontrol.c:1:
+/* memcontrol.c - Memory Controller

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#413: FILE: mm/memcontrol.c:25:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: mm/memcontrol.c:93:
+	mem = mem_container_from_cont(task_container(p,
+					mem_container_subsys_id));

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#501: FILE: mm/memcontrol.c:113:
+void __always_inline lock_meta_page(struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#506: FILE: mm/memcontrol.c:118:
+void __always_inline unlock_meta_page(struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: mm/memcontrol.c:124:
+unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

CHECK:BRACES: Unbalanced braces around else statement
#558: FILE: mm/memcontrol.c:170:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#584: FILE: mm/memcontrol.c:196:
+	struct mem_container *mem;
+	if (!mp)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mp)...) over kzalloc(sizeof(struct meta_page)...)
#628: FILE: mm/memcontrol.c:240:
+	mp = kzalloc(sizeof(struct meta_page), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp"
#629: FILE: mm/memcontrol.c:241:
+	if (mp == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: mm/memcontrol.c:271:
+ ^I^I * try_to_free_mem_container_pages() might not give us a full$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: mm/memcontrol.c:271:
+ ^I^I * try_to_free_mem_container_pages() might not give us a full$

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: mm/memcontrol.c:272:
+ ^I^I * picture of reclaim. Some pages are reclaimed and might be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#660: FILE: mm/memcontrol.c:272:
+ ^I^I * picture of reclaim. Some pages are reclaimed and might be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: mm/memcontrol.c:273:
+ ^I^I * moved to swap cache or just unmapped from the container.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#661: FILE: mm/memcontrol.c:273:
+ ^I^I * moved to swap cache or just unmapped from the container.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: mm/memcontrol.c:274:
+ ^I^I * Check the limit again to see if the reclaim reduced the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#662: FILE: mm/memcontrol.c:274:
+ ^I^I * Check the limit again to see if the reclaim reduced the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: mm/memcontrol.c:275:
+ ^I^I * current usage of the container before giving up$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#663: FILE: mm/memcontrol.c:275:
+ ^I^I * current usage of the container before giving up$

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: mm/memcontrol.c:276:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#664: FILE: mm/memcontrol.c:276:
+ ^I^I */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: mm/memcontrol.c:320:
+	struct mem_container *mem;
+	if (!mm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: mm/memcontrol.c:367:
+static ssize_t mem_container_read(struct container *cont, struct cftype *cft,
+			struct file *file, char __user *userbuf, size_t nbytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: mm/memcontrol.c:375:
+static ssize_t mem_container_write(struct container *cont, struct cftype *cft,
+				struct file *file, const char __user *userbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: mm/memcontrol.c:383:
+static ssize_t mem_control_type_write(struct container *cont,
+			struct cftype *cft, struct file *file,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#783: FILE: mm/memcontrol.c:395:
+	if (buf == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#792: FILE: mm/memcontrol.c:404:
+	tmp = simple_strtoul(buf, &end, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: mm/memcontrol.c:420:
+static ssize_t mem_control_type_read(struct container *cont,
+				struct cftype *cft,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cont->parent'
#829: FILE: mm/memcontrol.c:441:
+	if (unlikely((cont->parent) == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#829: FILE: mm/memcontrol.c:441:
+	if (unlikely((cont->parent) == NULL)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#833: FILE: mm/memcontrol.c:445:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mem)...) over kzalloc(sizeof(struct mem_container)...)
#834: FILE: mm/memcontrol.c:446:
+		mem = kzalloc(sizeof(struct mem_container), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#836: FILE: mm/memcontrol.c:448:
+	if (mem == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#874: FILE: mm/memcontrol.c:486:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: mm/memcontrol.c:488:
+static void mem_container_destroy(struct container_subsys *ss,
+				struct container *cont)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: mm/memcontrol.c:494:
+static int mem_container_populate(struct container_subsys *ss,
+				struct container *cont)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: mm/memcontrol.c:519:
+static void mem_container_move_task(struct container_subsys *ss,
+				struct container *cont,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#915: FILE: mm/memcontrol.c:527:
+	if (mm == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#938: FILE: mm/memcontrol.c:550:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#953: FILE: include/linux/memcontrol.h:1:
+/* memcontrol.h - Memory Controller

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#977: FILE: include/linux/memcontrol.h:25:
+extern void mm_init_container(struct mm_struct *mm, struct task_struct *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#978: FILE: include/linux/memcontrol.h:26:
+extern void mm_free_container(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#979: FILE: include/linux/memcontrol.h:27:
+extern void page_assign_meta_page(struct page *page, struct meta_page *mp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#980: FILE: include/linux/memcontrol.h:28:
+extern struct meta_page *page_get_meta_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#981: FILE: include/linux/memcontrol.h:29:
+extern int mem_container_charge(struct page *page, struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#982: FILE: include/linux/memcontrol.h:30:
+extern void mem_container_uncharge(struct meta_page *mp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#983: FILE: include/linux/memcontrol.h:31:
+extern void mem_container_move_lists(struct meta_page *mp, bool active);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#984: FILE: include/linux/memcontrol.h:32:
+extern unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: include/linux/memcontrol.h:33:
+extern unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#990: FILE: include/linux/memcontrol.h:38:
+extern void mem_container_out_of_memory(struct mem_container *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#991: FILE: include/linux/memcontrol.h:39:
+extern int mem_container_cache_charge(struct page *page, struct mm_struct *mm);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: include/linux/memcontrol.h:43:
+static inline void mm_init_container(struct mm_struct *mm,
+					struct task_struct *p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1004: FILE: include/linux/memcontrol.h:52:
+static inline void page_assign_meta_page(struct page *page,
+						struct meta_page *mp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: include/linux/memcontrol.h:75:
+static inline int mem_container_cache_charge(struct page *page,
+						struct mm_struct *mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1086: FILE: kernel/fork.c:333:
+static struct mm_struct * mm_init(struct mm_struct * mm, struct task_struct *p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1086: FILE: kernel/fork.c:333:
+static struct mm_struct * mm_init(struct mm_struct * mm, struct task_struct *p)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1178: FILE: mm/filemap.c:447:
 	if (error == 0) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1242: FILE: mm/memory.c:2271:
 	if (write_access) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1339: FILE: mm/swapfile.c:510:
+static int unuse_pte(struct vm_area_struct *vma, pte_t *pte,
 		unsigned long addr, swp_entry_t entry, struct page *page)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1451: FILE: mm/swapfile.c:640:
+		if (vma->anon_vma && (ret = unuse_vma(vma, entry, page)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1479: FILE: mm/swap_state.c:83:
 	if (!error) {
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1518: FILE: include/linux/swap.h:195:
+extern unsigned long try_to_free_mem_container_pages(struct mem_container *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1519: FILE: include/linux/swap.h:196:
+extern int __isolate_lru_page(struct page *page, int mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1563: FILE: mm/vmscan.c:80:
+	unsigned long (*isolate_pages)(unsigned long nr, struct list_head *dst,
+			unsigned long *scanned, int order, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: mm/vmscan.c:752:
+static unsigned long isolate_pages_global(unsigned long nr,
+					struct list_head *dst,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1649: FILE: mm/vmscan.c:1159:
+unsigned long do_try_to_free_pages(struct zone **zones, gfp_t gfp_mask,
+					struct scan_control *sc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc->mem_container"
#1683: FILE: mm/vmscan.c:1191:
+		if (sc->mem_container == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc->mem_container"
#1716: FILE: mm/vmscan.c:1221:
+	if (!sc->all_unreclaimable && sc->mem_container == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: mm/oom_kill.c:52:
+unsigned long badness(struct task_struct *p, unsigned long uptime,
+			struct mem_container *mem)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mem"
#1809: FILE: mm/oom_kill.c:66:
+	if (mem != NULL && mm->mem_container != mem) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1824: FILE: mm/oom_kill.c:217:
+static struct task_struct *select_bad_process(unsigned long *ppoints,
+						struct mem_container *mem)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409948.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 20 warnings, 54 checks, 1660 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409948.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
