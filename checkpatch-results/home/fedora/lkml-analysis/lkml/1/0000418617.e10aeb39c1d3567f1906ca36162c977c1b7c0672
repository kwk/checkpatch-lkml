WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
We limit the maximum length of any string data (such as domainname and pathnames)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: security/tomoyo/include/realpath.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#46: FILE: security/tomoyo/include/realpath.h:2:
+ * security/tomoyo/include/realpath.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: security/tomoyo/include/realpath.h:19:
+                                 struct vfsmount *mnt,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: security/tomoyo/include/realpath.h:19:
+                                 struct vfsmount *mnt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: security/tomoyo/include/realpath.h:20:
+                                 char *newname,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: security/tomoyo/include/realpath.h:20:
+                                 char *newname,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: security/tomoyo/include/realpath.h:21:
+                                 int newname_len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: security/tomoyo/include/realpath.h:21:
+                                 int newname_len);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: security/tomoyo/realpath.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#96: FILE: security/tomoyo/realpath.c:2:
+ * security/tomoyo/realpath.c

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#113: FILE: security/tomoyo/realpath.c:19:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#114: FILE: security/tomoyo/realpath.c:20:
+#include <asm/atomic.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: security/tomoyo/realpath.c:46:
+                                    struct vfsmount *vfsmnt,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: security/tomoyo/realpath.c:46:
+                                    struct vfsmount *vfsmnt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: security/tomoyo/realpath.c:47:
+                                    char *buffer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: security/tomoyo/realpath.c:47:
+                                    char *buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: security/tomoyo/realpath.c:48:
+                                    int buflen)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: security/tomoyo/realpath.c:48:
+                                    int buflen)$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#148: FILE: security/tomoyo/realpath.c:54:
+	if (buflen < 256) goto out;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#181: FILE: security/tomoyo/realpath.c:87:
+			if (IS_ROOT(parent) && *sp > '0' && *sp <= '9' && parent->d_sb
+			    && parent->d_sb->s_magic == PROC_SUPER_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#183: FILE: security/tomoyo/realpath.c:89:
+				const pid_t pid = (pid_t) simple_strtoul(sp, &ep, 10);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#183: FILE: security/tomoyo/realpath.c:89:
+				const pid_t pid = (pid_t) simple_strtoul(sp, &ep, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: security/tomoyo/realpath.c:90:
+				const pid_t pid = (pid_t) simple_strtoul(sp, &ep, 10);
+				if (!*ep && pid == current->tgid) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#195: FILE: security/tomoyo/realpath.c:101:
+				c = * (unsigned char *) cp;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#195: FILE: security/tomoyo/realpath.c:101:
+				c = * (unsigned char *) cp;
 				    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#198: FILE: security/tomoyo/realpath.c:104:
+					if (buflen < 0) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#202: FILE: security/tomoyo/realpath.c:108:
+					if (--buflen < 0) goto out;

CHECK:SPACING: No space is necessary after a cast
#203: FILE: security/tomoyo/realpath.c:109:
+					*--end = (char) c;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#206: FILE: security/tomoyo/realpath.c:112:
+					if (buflen < 0) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#214: FILE: security/tomoyo/realpath.c:120:
+			if (--buflen < 0) goto out;

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: security/tomoyo/realpath.c:133:
+		unsigned char c;
+		while (sp <= cp) {

CHECK:SPACING: No space is necessary after a cast
#228: FILE: security/tomoyo/realpath.c:134:
+			c = * (unsigned char *) cp;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#228: FILE: security/tomoyo/realpath.c:134:
+			c = * (unsigned char *) cp;
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#231: FILE: security/tomoyo/realpath.c:137:
+				if (buflen < 0) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#235: FILE: security/tomoyo/realpath.c:141:
+				if (--buflen < 0) goto out;

CHECK:SPACING: No space is necessary after a cast
#236: FILE: security/tomoyo/realpath.c:142:
+				*--end = (char) c;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#239: FILE: security/tomoyo/realpath.c:145:
+				if (buflen < 0) goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: security/tomoyo/realpath.c:163:
+                                 struct vfsmount *mnt,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: security/tomoyo/realpath.c:163:
+                                 struct vfsmount *mnt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: security/tomoyo/realpath.c:164:
+                                 char *newname,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: security/tomoyo/realpath.c:164:
+                                 char *newname,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: security/tomoyo/realpath.c:165:
+                                 int newname_len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: security/tomoyo/realpath.c:165:
+                                 int newname_len)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: security/tomoyo/realpath.c:170:
+	struct vfsmount *d_mnt;
+	if (!dentry || !mnt || !newname || newname_len <= 0) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#264: FILE: security/tomoyo/realpath.c:170:
+	if (!dentry || !mnt || !newname || newname_len <= 0) return -EINVAL;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#266: FILE: security/tomoyo/realpath.c:172:
+		printk("%s: current->fs == NULL for pid=%d\n", __FUNCTION__, current->pid);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#266: FILE: security/tomoyo/realpath.c:172:
+		printk("%s: current->fs == NULL for pid=%d\n", __FUNCTION__, current->pid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: security/tomoyo/realpath.c:193:
+	char *buf = tomoyo_alloc(TOMOYO_MAX_PATHNAME_LEN);
+	if (buf && tomoyo_realpath_from_dentry2(dentry, mnt, buf, TOMOYO_MAX_PATHNAME_LEN - 1) == 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#295: FILE: security/tomoyo/realpath.c:201:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#296: FILE: security/tomoyo/realpath.c:202:
+	if (pathname && path_lookup(pathname, LOOKUP_FOLLOW, &nd) == 0) {
 	                                                      ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#296: FILE: security/tomoyo/realpath.c:202:
+	struct nameidata nd;
+	if (pathname && path_lookup(pathname, LOOKUP_FOLLOW, &nd) == 0) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#297: FILE: security/tomoyo/realpath.c:203:
+		char *buf = tomoyo_realpath_from_dentry(nd.dentry, nd.mnt);
 		                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#297: FILE: security/tomoyo/realpath.c:203:
+		char *buf = tomoyo_realpath_from_dentry(nd.dentry, nd.mnt);
 		                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#298: FILE: security/tomoyo/realpath.c:204:
+		path_release(&nd);
 		              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: security/tomoyo/realpath.c:204:
+		char *buf = tomoyo_realpath_from_dentry(nd.dentry, nd.mnt);
+		path_release(&nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#306: FILE: security/tomoyo/realpath.c:212:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#307: FILE: security/tomoyo/realpath.c:213:
+	if (pathname && path_lookup(pathname, 0, &nd) == 0) {
 	                                          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#307: FILE: security/tomoyo/realpath.c:213:
+	struct nameidata nd;
+	if (pathname && path_lookup(pathname, 0, &nd) == 0) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#308: FILE: security/tomoyo/realpath.c:214:
+		char *buf = tomoyo_realpath_from_dentry(nd.dentry, nd.mnt);
 		                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#308: FILE: security/tomoyo/realpath.c:214:
+		char *buf = tomoyo_realpath_from_dentry(nd.dentry, nd.mnt);
 		                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#309: FILE: security/tomoyo/realpath.c:215:
+		path_release(&nd);
 		              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: security/tomoyo/realpath.c:215:
+		char *buf = tomoyo_realpath_from_dentry(nd.dentry, nd.mnt);
+		path_release(&nd);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#321: FILE: security/tomoyo/realpath.c:227:
+static inline unsigned int tomoyo_roundup(const unsigned int size) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#322: FILE: security/tomoyo/realpath.c:228:
+	if (sizeof(void *) >= sizeof(long)) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#329: FILE: security/tomoyo/realpath.c:235:
+static unsigned int allocated_memory_for_elements = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#341: FILE: security/tomoyo/realpath.c:247:
+	static char *buf = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: security/tomoyo/realpath.c:251:
+	const unsigned int word_aligned_size = tomoyo_roundup(size);
+	if (word_aligned_size > PAGE_SIZE) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#345: FILE: security/tomoyo/realpath.c:251:
+	if (word_aligned_size > PAGE_SIZE) return NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#348: FILE: security/tomoyo/realpath.c:254:
+		if ((ptr = kmalloc(PAGE_SIZE, GFP_KERNEL)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#349: FILE: security/tomoyo/realpath.c:255:
+			printk("ERROR: Out of memory for tomoyo_alloc_element().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tomoyo_alloc_element', this function's name, in a string
#349: FILE: security/tomoyo/realpath.c:255:
+			printk("ERROR: Out of memory for tomoyo_alloc_element().\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#350: FILE: security/tomoyo/realpath.c:256:
+			if (!sbin_init_started) panic("MAC Initialization failed.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: security/tomoyo/realpath.c:266:
+		int i;
+		ptr = buf + buf_used_len;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#364: FILE: security/tomoyo/realpath.c:270:
+				printk(KERN_ERR "WARNING: Reserved memory was tainted! "

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: security/tomoyo/realpath.c:271:
+^I^I^I^I                "The system might go wrong.\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#365: FILE: security/tomoyo/realpath.c:271:
+				printk(KERN_ERR "WARNING: Reserved memory was tainted! "
+				                "The system might go wrong.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#376: FILE: security/tomoyo/realpath.c:282:
+static unsigned int allocated_memory_for_savename = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: security/tomoyo/realpath.c:314:
+	static int first_call = 1;
+	if (!name) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#408: FILE: security/tomoyo/realpath.c:314:
+	if (!name) return NULL;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#411: FILE: security/tomoyo/realpath.c:317:
+		printk("ERROR: Name too long for tomoyo_save_name().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tomoyo_save_name', this function's name, in a string
#411: FILE: security/tomoyo/realpath.c:317:
+		printk("ERROR: Name too long for tomoyo_save_name().\n");

CHECK:SPACING: No space is necessary after a cast
#414: FILE: security/tomoyo/realpath.c:320:
+	hash = full_name_hash((const unsigned char *) name, len - 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: security/tomoyo/realpath.c:324:
+		int i;
+		first_call = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#424: FILE: security/tomoyo/realpath.c:330:
+		if (TOMOYO_MAX_PATHNAME_LEN > PAGE_SIZE) panic("Bad size.");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#428: FILE: security/tomoyo/realpath.c:334:
+		if (hash == ptr->entry.hash && strcmp(name, ptr->entry.name) == 0) goto out;

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: security/tomoyo/realpath.c:343:
+			char *cp;
+			if ((cp = kmalloc(PAGE_SIZE, GFP_KERNEL)) == NULL ||

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#437: FILE: security/tomoyo/realpath.c:343:
+			if ((cp = kmalloc(PAGE_SIZE, GFP_KERNEL)) == NULL ||

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: security/tomoyo/realpath.c:346:
+				printk("ERROR: Out of memory for tomoyo_save_name().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tomoyo_save_name', this function's name, in a string
#440: FILE: security/tomoyo/realpath.c:346:
+				printk("ERROR: Out of memory for tomoyo_save_name().\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#441: FILE: security/tomoyo/realpath.c:347:
+				if (!sbin_init_started) panic("MAC Initialization failed.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#451: FILE: security/tomoyo/realpath.c:357:
+	if ((ptr = tomoyo_alloc_element(sizeof(*ptr))) == NULL) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#451: FILE: security/tomoyo/realpath.c:357:
+	if ((ptr = tomoyo_alloc_element(sizeof(*ptr))) == NULL) goto out;

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: security/tomoyo/realpath.c:366:
+		struct free_memory_block_list *ptr = &fmb_list;
+		while (ptr->next != fmb)

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#477: FILE: security/tomoyo/realpath.c:383:
+static struct kmem_cache *ccs_cachep = NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#482: FILE: security/tomoyo/realpath.c:388:
+	if (!ccs_cachep) panic("Can't create cache.\n");

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#487: FILE: security/tomoyo/realpath.c:393:
+static unsigned int dynamic_memory_size = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: security/tomoyo/realpath.c:403:
+	void *ret = kmalloc(size, GFP_KERNEL);
+	if (ret) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: security/tomoyo/realpath.c:405:
+		struct cache_entry *new_entry = kmem_cache_alloc(ccs_cachep, GFP_KERNEL);
+		if (!new_entry) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: security/tomoyo/realpath.c:426:
+	struct cache_entry *entry = NULL;
+	if (!p) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#520: FILE: security/tomoyo/realpath.c:426:
+	if (!p) return;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#537: FILE: security/tomoyo/realpath.c:443:
+		printk("BUG: tomoyo_free() with invalid pointer.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tomoyo_free', this function's name, in a string
#537: FILE: security/tomoyo/realpath.c:443:
+		printk("BUG: tomoyo_free() with invalid pointer.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 39 errors, 57 warnings, 7 checks, 491 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
