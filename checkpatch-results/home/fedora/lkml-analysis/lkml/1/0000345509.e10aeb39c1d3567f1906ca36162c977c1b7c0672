WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#84: 
Signed-off-by:  Lee Schermerhorn <lee.schermerhorn@hp.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:LINE_SPACING: Please don't use multiple blank lines
#112: FILE: include/linux/page-flags.h:97:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageNoreclaim>
#141: FILE: include/linux/page-flags.h:272:
+#define __ClearPageNoreclaim(page) __clear_bit(PG_noreclaim, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#166: FILE: include/linux/mmzone.h:90:
+	NR_NORECLAIM=NR_ACTIVE_FILE, /* avoid compiler errors in dead code */
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#179: FILE: include/linux/mmzone.h:134:
+	LRU_NORECLAIM=LRU_ACTIVE_FILE,	/* avoid compiler errors in dead code */
 	             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#186: FILE: include/linux/mmzone.h:141:
+#define for_each_reclaimable_lru(l) for (l = 0; l <= LRU_ACTIVE_FILE; l++)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/linux/swap.h:178:
+extern void FASTCALL(lru_cache_add_active_or_noreclaim(struct page *page,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: include/linux/swap.h:179:
+extern void FASTCALL(lru_cache_add_active_or_noreclaim(struct page *page,
+						struct vm_area_struct *vma));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/linux/swap.h:181:
+extern void FASTCALL(lru_cache_add_noreclaim(struct page *page));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/swap.h:217:
+extern int page_reclaimable(struct page *page, struct vm_area_struct *vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: include/linux/swap.h:220:
+static inline int page_reclaimable(struct page *page,
+						struct vm_area_struct *vma)

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: mm/swap.c:122:
+^I ^Iif (PageLRU(page) && !PageActive(page) && \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#321: FILE: mm/swap.c:122:
+^I ^Iif (PageLRU(page) && !PageActive(page) && \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#321: FILE: mm/swap.c:122:
+	 	if (PageLRU(page) && !PageActive(page) && \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: mm/swap.c:207:
+	if (!PageActive(page) && !PageNoreclaim(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: mm/swap.c:275:
+void fastcall lru_cache_add_active_or_noreclaim(struct page *page,
+					struct vm_area_struct *vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#374: FILE: mm/swap.c:277:
+	if (page_reclaimable(page, vma)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#379: FILE: mm/swap.c:282:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: mm/swap.c:294:
+void fastcall lru_cache_add_active_or_noreclaim(struct page *page,
+					struct vm_area_struct *vma)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageLRU>
#432: FILE: mm/swap.c:424:
+				__ClearPageLRU(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#526: FILE: mm/migrate.c:354:
+	if (TestClearPageActive(page)) {
[...]
+	} else if (TestClearPageNoreclaim(page))
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#750: FILE: mm/vmscan.c:2249:
+{
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345509.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 3 warnings, 16 checks, 607 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345509.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
