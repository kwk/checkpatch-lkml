WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#23: 
Subject: [PATCH] x86: seperate memtest from init_64.c
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: arch/x86/mm/memtest.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: arch/x86/mm/memtest.c:13:
+static void __init memtest(unsigned long start_phys, unsigned long size,
+				 unsigned pattern)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: arch/x86/mm/memtest.c:13:
+				 unsigned pattern)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#234: FILE: arch/x86/mm/memtest.c:51:
+	count = (size - (start_phys_aligned - start_phys))/incr;
 	                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#247: FILE: arch/x86/mm/memtest.c:64:
+					printk(KERN_CONT "\n  %010lx bad mem addr %010lx - %010lx reserved",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#247: FILE: arch/x86/mm/memtest.c:64:
+					printk(KERN_CONT "\n  %010lx bad mem addr %010lx - %010lx reserved",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: arch/x86/mm/memtest.c:65:
+					printk(KERN_CONT "\n  %010lx bad mem addr %010lx - %010lx reserved",
+						val, start_bad, last_bad + incr);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#251: FILE: arch/x86/mm/memtest.c:68:
+				start_bad = last_bad = start_phys_aligned;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#256: FILE: arch/x86/mm/memtest.c:73:
+		printk(KERN_CONT "\n  %016lx bad mem addr %010lx - %010lx reserved",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#256: FILE: arch/x86/mm/memtest.c:73:
+		printk(KERN_CONT "\n  %016lx bad mem addr %010lx - %010lx reserved",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: arch/x86/mm/memtest.c:74:
+		printk(KERN_CONT "\n  %016lx bad mem addr %010lx - %010lx reserved",
+			val, start_bad, last_bad + incr);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#261: FILE: arch/x86/mm/memtest.c:78:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#269: FILE: arch/x86/mm/memtest.c:86:
+		memtest_pattern = simple_strtoul(arg, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#278: FILE: arch/x86/mm/memtest.c:95:
+	unsigned pattern;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#283: FILE: arch/x86/mm/memtest.c:100:
+	printk(KERN_INFO "early_memtest: pattern num %d", memtest_pattern);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_memtest', this function's name, in a string
#283: FILE: arch/x86/mm/memtest.c:100:
+	printk(KERN_INFO "early_memtest: pattern num %d", memtest_pattern);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#296: FILE: arch/x86/mm/memtest.c:113:
+			printk(KERN_CONT "\n  %010llx - %010llx pattern %d",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#296: FILE: arch/x86/mm/memtest.c:113:
+			printk(KERN_CONT "\n  %010llx - %010llx pattern %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: arch/x86/mm/memtest.c:114:
+			printk(KERN_CONT "\n  %010llx - %010llx pattern %d",
+				(unsigned long long)t_start,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#305: FILE: arch/x86/mm/memtest.c:122:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#305: FILE: arch/x86/mm/memtest.c:122:
+	printk(KERN_CONT "\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: include/asm-x86/e820.h:93:
+extern void early_memtest(unsigned long start, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000254636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 8 checks, 259 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000254636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
