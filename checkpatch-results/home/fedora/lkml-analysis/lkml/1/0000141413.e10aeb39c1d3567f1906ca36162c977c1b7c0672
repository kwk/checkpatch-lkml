CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: arch/powerpc/include/asm/dma-mapping.h:26:
+extern void *dma_direct_alloc_coherent(struct device *dev, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: arch/powerpc/include/asm/dma-mapping.h:28:
+extern void dma_direct_free_coherent(struct device *dev, size_t size,

ERROR:SPACING: space required before the open parenthesis '('
#77: FILE: arch/powerpc/include/asm/dma-mapping.h:126:
+	if(dev->archdata.dma_ops == NULL)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->archdata.dma_ops"
#77: FILE: arch/powerpc/include/asm/dma-mapping.h:126:
+	if(dev->archdata.dma_ops == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#78: FILE: arch/powerpc/include/asm/dma-mapping.h:127:
+		printk(KERN_EMERG "dev %s has null dma_ops\n", dev->bus->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#85: FILE: arch/powerpc/include/asm/dma-mapping.h:134:
+	printk(KERN_EMERG "Setting dma_ops to %s\n",

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#118: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#123: FILE: arch/powerpc/include/asm/swiotlb.h:1:
+#ifndef __ASM_SWIOTLB_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#132: FILE: arch/powerpc/include/asm/swiotlb.h:10:
+int swiotlb_arch_address_needs_mapping(struct device *, dma_addr_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t' should also have an identifier name
#132: FILE: arch/powerpc/include/asm/swiotlb.h:10:
+int swiotlb_arch_address_needs_mapping(struct device *, dma_addr_t,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: arch/powerpc/kernel/dma-swiotlb.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#174: FILE: arch/powerpc/kernel/dma-swiotlb.c:19:
+unsigned long get_dma_direct_offset(struct device *dev);

ERROR:SPACING: space required before the open parenthesis '('
#181: FILE: arch/powerpc/kernel/dma-swiotlb.c:26:
+	if(pageaddr != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pageaddr"
#181: FILE: arch/powerpc/kernel/dma-swiotlb.c:26:
+	if(pageaddr != NULL)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#186: FILE: arch/powerpc/kernel/dma-swiotlb.c:31:
+#if 0 /* BGILL - don't need */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask <= DMA_BIT_MASK(36)'
#231: FILE: arch/powerpc/kernel/dma-swiotlb.c:76:
+	if ((mask <= DMA_BIT_MASK(36)) && (addr + size > max))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#245: FILE: arch/powerpc/kernel/dma-swiotlb.c:90:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#272: FILE: arch/powerpc/kernel/dma-swiotlb.c:117:
+#if 0 /* BGILL - should look like this; use other form for debug */

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: arch/powerpc/kernel/dma-swiotlb.c:118:
+	if(dma_get_mask(dev) < DMA_BIT_MASK(36))

ERROR:SPACING: space required before the open parenthesis '('
#276: FILE: arch/powerpc/kernel/dma-swiotlb.c:121:
+	if(!dev->dma_mask) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#276: FILE: arch/powerpc/kernel/dma-swiotlb.c:121:
+	if(!dev->dma_mask) {
[...]
+	else if(*dev->dma_mask < DMA_BIT_MASK(36)) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#277: FILE: arch/powerpc/kernel/dma-swiotlb.c:122:
+		printk(KERN_EMERG "ERROR: no dma_mask set for dev\n");

ERROR:SPACING: space required before the open parenthesis '('
#280: FILE: arch/powerpc/kernel/dma-swiotlb.c:125:
+	else if(*dev->dma_mask < DMA_BIT_MASK(36)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#280: FILE: arch/powerpc/kernel/dma-swiotlb.c:125:
+	}
+	else if(*dev->dma_mask < DMA_BIT_MASK(36)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#283: FILE: arch/powerpc/kernel/dma-swiotlb.c:128:
+	}
+	else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#284: FILE: arch/powerpc/kernel/dma-swiotlb.c:129:
+		printk(KERN_EMERG "ERROR; fall thru with direct_ops\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 13 warnings, 6 checks, 250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
