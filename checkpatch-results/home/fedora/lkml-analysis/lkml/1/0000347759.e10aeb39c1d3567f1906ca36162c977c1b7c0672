WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#70: FILE: arch/powerpc/Kconfig:530:
+config RAPIDIO
+	bool "RapidIO support" if FSL_RAPIDIO
+	help
+	  If you say Y here, the kernel will include drivers and
+	  infrastructure code to support RapidIO interconnect devices.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#157: FILE: arch/powerpc/sysdev/fsl_rio.c:38:
+#define IRQ_RIO_BELL(m)		(((struct rio_priv *)(m->priv))->bellirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#158: FILE: arch/powerpc/sysdev/fsl_rio.c:39:
+#define IRQ_RIO_TX(m)		(((struct rio_priv *)(m->priv))->txirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#159: FILE: arch/powerpc/sysdev/fsl_rio.c:40:
+#define IRQ_RIO_RX(m)		(((struct rio_priv *)(m->priv))->rxirq)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#162: FILE: arch/powerpc/sysdev/fsl_rio.c:43:
+	printk(KERN_ERR "RIO %s: " fmt, __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#162: FILE: arch/powerpc/sysdev/fsl_rio.c:43:
+	printk(KERN_ERR "RIO %s: " fmt, __FUNCTION__, ## arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#163: FILE: arch/powerpc/sysdev/fsl_rio.c:44:
+#define INFO(fmt...) printk(KERN_INFO "RIO: " fmt)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#202: FILE: arch/powerpc/sysdev/fsl_rio.c:95:
+#define DBELL_SID(x)		(*(u16 *)(x + DOORBELL_SID_OFFSET))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#203: FILE: arch/powerpc/sysdev/fsl_rio.c:96:
+#define DBELL_TID(x)		(*(u16 *)(x + DOORBELL_TID_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#288: FILE: arch/powerpc/sysdev/fsl_rio.c:194:
+	volatile void __iomem *regs_win;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#289: FILE: arch/powerpc/sysdev/fsl_rio.c:195:
+	volatile struct rio_atmu_regs __iomem *atmu_regs;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#290: FILE: arch/powerpc/sysdev/fsl_rio.c:196:
+	volatile struct rio_atmu_regs __iomem *maint_atmu_regs;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#291: FILE: arch/powerpc/sysdev/fsl_rio.c:197:
+	volatile struct rio_atmu_regs __iomem *dbell_atmu_regs;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#292: FILE: arch/powerpc/sysdev/fsl_rio.c:198:
+	volatile void __iomem *dbell_win;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#293: FILE: arch/powerpc/sysdev/fsl_rio.c:199:
+	volatile void __iomem *maint_win;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#294: FILE: arch/powerpc/sysdev/fsl_rio.c:200:
+	volatile struct rio_msg_regs __iomem *msg_regs;

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: arch/powerpc/sysdev/fsl_rio.c:221:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_doorbell_send: index %d destid 0x%04x data 0x%04x\n",

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: arch/powerpc/sysdev/fsl_rio.c:222:
+	pr_debug("fsl_doorbell_send: index %d destid 0x%04x data 0x%04x\n",
+			index, destid, data);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: arch/powerpc/sysdev/fsl_rio.c:232:
+		out_be32(&priv->msg_regs->oddatr,data );
 		                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#333: FILE: arch/powerpc/sysdev/fsl_rio.c:232:
+		out_be32(&priv->msg_regs->oddatr,data );

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#358: FILE: arch/powerpc/sysdev/fsl_rio.c:254:
+static int fsl_local_config_read(struct rio_mport *mport, int index, u32 offset, int len, u32 * data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: arch/powerpc/sysdev/fsl_rio.c:254:
+static int fsl_local_config_read(struct rio_mport *mport, int index, u32 offset, int len, u32 * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: arch/powerpc/sysdev/fsl_rio.c:257:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_local_config_read: index %d offset 0x%08x\n", index,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_local_config_read', this function's name, in a string
#364: FILE: arch/powerpc/sysdev/fsl_rio.c:257:
+	pr_debug("fsl_local_config_read: index %d offset 0x%08x\n", index,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: arch/powerpc/sysdev/fsl_rio.c:258:
+	pr_debug("fsl_local_config_read: index %d offset 0x%08x\n", index,
+			offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: arch/powerpc/sysdev/fsl_rio.c:277:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_local_config_write: index %d offset 0x%08x data 0x%08x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_local_config_write', this function's name, in a string
#391: FILE: arch/powerpc/sysdev/fsl_rio.c:277:
+	pr_debug("fsl_local_config_write: index %d offset 0x%08x data 0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: arch/powerpc/sysdev/fsl_rio.c:278:
+	pr_debug("fsl_local_config_write: index %d offset 0x%08x data 0x%08x\n",
+			index, offset, data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: arch/powerpc/sysdev/fsl_rio.c:297:
+static int fsl_rio_config_read(struct rio_mport *mport, int index, u16 destid,
+		u8 hopcount, u32 offset, int len, u32 * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#416: FILE: arch/powerpc/sysdev/fsl_rio.c:297:
+		u8 hopcount, u32 offset, int len, u32 * val)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#427: FILE: arch/powerpc/sysdev/fsl_rio.c:299:
+	volatile void __iomem *data;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_rio_config_read', this function's name, in a string
#430: FILE: arch/powerpc/sysdev/fsl_rio.c:302:
+	pr_debug("fsl_rio_config_read: index %d destid %d hopcount %d "

WARNING:SPLIT_STRING: quoted string split across lines
#431: FILE: arch/powerpc/sysdev/fsl_rio.c:303:
+	pr_debug("fsl_rio_config_read: index %d destid %d hopcount %d "
+			"offset 0x%08x len %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: arch/powerpc/sysdev/fsl_rio.c:339:
+static int fsl_rio_config_write(struct rio_mport *mport, int index, u16 destid,
+		u8 hopcount, u32 offset, int len, u32 val)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#485: FILE: arch/powerpc/sysdev/fsl_rio.c:341:
+	volatile void __iomem *data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: arch/powerpc/sysdev/fsl_rio.c:343:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_rio_config_write', this function's name, in a string
#487: FILE: arch/powerpc/sysdev/fsl_rio.c:343:
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"

WARNING:SPLIT_STRING: quoted string split across lines
#488: FILE: arch/powerpc/sysdev/fsl_rio.c:344:
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"
+			"offset 0x%08x len %d val 0x%08x\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#488: FILE: arch/powerpc/sysdev/fsl_rio.c:344:
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"
+			"offset 0x%08x len %d val 0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: arch/powerpc/sysdev/fsl_rio.c:380:
+static int fsl_rio_map_inb_mem(struct rio_mport *mport, resource_size_t lstart,
+		resource_size_t rstart,	resource_size_t size,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#533: FILE: arch/powerpc/sysdev/fsl_rio.c:385:
+	volatile struct rio_inb_atmu_regs __iomem *inbatmu =

CHECK:BRACES: braces {} should be used on all arms of this statement
#545: FILE: arch/powerpc/sysdev/fsl_rio.c:397:
+	if ((lstart + size) > (_ALIGN_DOWN(lstart, align) + align)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#549: FILE: arch/powerpc/sysdev/fsl_rio.c:401:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#554: FILE: arch/powerpc/sysdev/fsl_rio.c:406:
+		ERR("The local address 0x%x can not be aligned to the same size"
+			" 0x%x with the RapidIO space address 0x%x!\n", lstart,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: arch/powerpc/sysdev/fsl_rio.c:445:
+static int fsl_rio_map_outb_mem(struct rio_mport *mport, resource_size_t lstart,
+		resource_size_t rstart,	resource_size_t size,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#598: FILE: arch/powerpc/sysdev/fsl_rio.c:450:
+	volatile struct rio_atmu_regs __iomem *outbatmu =

CHECK:BRACES: braces {} should be used on all arms of this statement
#610: FILE: arch/powerpc/sysdev/fsl_rio.c:462:
+	if ((lstart + size) > (_ALIGN_DOWN(lstart, align) + align)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#614: FILE: arch/powerpc/sysdev/fsl_rio.c:466:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#619: FILE: arch/powerpc/sysdev/fsl_rio.c:471:
+		ERR("The local address 0x%x can not be aligned to the same size"
+			" 0x%x with the RapidIO space address 0x%x!\n", lstart,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#656: FILE: arch/powerpc/sysdev/fsl_rio.c:508:
+	volatile struct rio_inb_atmu_regs __iomem *inbatmu = (struct rio_inb_atmu_regs *)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#678: FILE: arch/powerpc/sysdev/fsl_rio.c:530:
+	volatile struct rio_atmu_regs __iomem *outbatmu = (struct rio_atmu_regs *)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: arch/powerpc/sysdev/fsl_rio.c:556:
+int rio_hw_add_outb_message(struct rio_mport *mport, struct rio_dev *rdev,
+		int mbox, void *buffer, size_t len)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rio_hw_add_outb_message', this function's name, in a string
#720: FILE: arch/powerpc/sysdev/fsl_rio.c:563:
+	pr_debug("RIO: rio_hw_add_outb_message(): "

WARNING:SPLIT_STRING: quoted string split across lines
#721: FILE: arch/powerpc/sysdev/fsl_rio.c:564:
+	pr_debug("RIO: rio_hw_add_outb_message(): "
+			"destid 0x%04x mbox %d buffer %p len 0x%08x\n",

ERROR:SPACING: space required before the open parenthesis '('
#741: FILE: arch/powerpc/sysdev/fsl_rio.c:578:
+	switch(mport->phy_type) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#744: FILE: arch/powerpc/sysdev/fsl_rio.c:581:
+		desc->dport = (rdev->destid << 16) | ( mbox & 0x3);

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#791: FILE: arch/powerpc/sysdev/fsl_rio.c:620:
+ * mailbox event handler and acks the interrupt occurence.
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#826: FILE: arch/powerpc/sysdev/fsl_rio.c:645:
+		int slot = (dqp - priv->msg_tx_ring.phys) >> 5;
+		port->outb_msg[0].mcback(port, priv->msg_tx_ring.dev_id, -1, slot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: arch/powerpc/sysdev/fsl_rio.c:724:
+	rc = request_irq(IRQ_RIO_TX(mport), fsl_rio_tx_handler, 0, "msg_tx",
+			mport);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: arch/powerpc/sysdev/fsl_rio.c:739:
+	setbits32(&priv->msg_regs->omr,
 		 ((get_bitmask_order(entries) - 2) << 12));

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#1002: FILE: arch/powerpc/sysdev/fsl_rio.c:788:
+ * mailbox event handler and acks the interrupt occurence.
                                                 ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1086: FILE: arch/powerpc/sysdev/fsl_rio.c:863:
+	out_be32(&priv->msg_regs->ifqdpar, (u32) priv->msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#1087: FILE: arch/powerpc/sysdev/fsl_rio.c:864:
+	out_be32(&priv->msg_regs->ifqepar, (u32) priv->msg_rx_ring.phys);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: arch/powerpc/sysdev/fsl_rio.c:890:
+	setbits32(&priv->msg_regs->imr,
+			((get_bitmask_order(entries) - 2) << 12));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1182: FILE: arch/powerpc/sysdev/fsl_rio.c:940:
+		ERR("error adding inbound buffer %d, buffer exists\n",
+		       priv->msg_rx_ring.rx_slot);

CHECK:SPACING: No space is necessary after a cast
#1298: FILE: arch/powerpc/sysdev/fsl_rio.c:1032:
+		    (u32) priv->dbell_ring.virt +

WARNING:SPLIT_STRING: quoted string split across lines
#1307: FILE: arch/powerpc/sysdev/fsl_rio.c:1038:
+		pr_debug("RIO: processing doorbell, sid 0x%02x tid 0x%02x "
+				"info 0x%04x\n", DBELL_SID(dmsg),

WARNING:SPLIT_STRING: quoted string split across lines
#1320: FILE: arch/powerpc/sysdev/fsl_rio.c:1053:
+			pr_debug("RIO: spurious doorbell, sid 0x%02x "
+					"tid 0x%02x info %4.4x\n",

CHECK:SPACING: No space is necessary after a cast
#1384: FILE: arch/powerpc/sysdev/fsl_rio.c:1099:
+	out_be32(&priv->msg_regs->dqdpar, (u32) priv->dbell_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#1385: FILE: arch/powerpc/sysdev/fsl_rio.c:1100:
+	out_be32(&priv->msg_regs->dqepar, (u32) priv->dbell_ring.phys);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1425: FILE: arch/powerpc/sysdev/fsl_rio.c:1131:
+
+}

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1448: FILE: arch/powerpc/sysdev/fsl_rio.c:1153:
+__setup("riohdid=", fsl_rio_get_cmdline);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1464: FILE: arch/powerpc/sysdev/fsl_rio.c:1169:
+			printk("1\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1467: FILE: arch/powerpc/sysdev/fsl_rio.c:1172:
+			printk("4\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1470: FILE: arch/powerpc/sysdev/fsl_rio.c:1175:
+			printk("Unknown\n");

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1471: FILE: arch/powerpc/sysdev/fsl_rio.c:1176:
+			break;;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1477: FILE: arch/powerpc/sysdev/fsl_rio.c:1182:
+			printk("Single-lane 0\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1480: FILE: arch/powerpc/sysdev/fsl_rio.c:1185:
+			printk("Single-lane 2\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1483: FILE: arch/powerpc/sysdev/fsl_rio.c:1188:
+			printk("Four-lane\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1486: FILE: arch/powerpc/sysdev/fsl_rio.c:1191:
+			printk("Unknown\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1496: FILE: arch/powerpc/sysdev/fsl_rio.c:1201:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1501: FILE: arch/powerpc/sysdev/fsl_rio.c:1206:
+	u8 pw = ccsr >> 30;
+	switch (pw) {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1552: FILE: arch/powerpc/sysdev/fsl_rio.c:1250:
+	volatile void __iomem *regs_win = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1592: FILE: arch/powerpc/sysdev/fsl_rio.c:1283:
+	INFO("LAW start 0x%016llx, size 0x%016llx.\n", (u64)law_start,
+						(u64)law_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1594: FILE: arch/powerpc/sysdev/fsl_rio.c:1285:
+	INFO("Regs start 0x%08x size 0x%08x\n",	regs.start,
+						regs.end - regs.start + 1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1612: FILE: arch/powerpc/sysdev/fsl_rio.c:1303:
+		printk("serial\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1615: FILE: arch/powerpc/sysdev/fsl_rio.c:1306:
+		printk("parallel");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1618: FILE: arch/powerpc/sysdev/fsl_rio.c:1309:
+		printk("Unknown type %d\n", phy_type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1624: FILE: arch/powerpc/sysdev/fsl_rio.c:1315:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ops)...) over kzalloc(sizeof(struct rio_ops)...)
#1654: FILE: arch/powerpc/sysdev/fsl_rio.c:1345:
+	ops = kzalloc(sizeof(struct rio_ops), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*port)...) over kzalloc(sizeof(struct rio_mport)...)
#1661: FILE: arch/powerpc/sysdev/fsl_rio.c:1352:
+	port = kzalloc(sizeof(struct rio_mport), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1673: FILE: arch/powerpc/sysdev/fsl_rio.c:1364:
+	INFO("RapidIO Common Transport System size: %d\n",
+			port->sys_size ? 65536 : 256);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv)...) over kzalloc(sizeof(struct rio_priv)...)
#1677: FILE: arch/powerpc/sysdev/fsl_rio.c:1368:
+	priv = kzalloc(sizeof(struct rio_priv), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1695: FILE: arch/powerpc/sysdev/fsl_rio.c:1386:
+	INFO("bellirq: %d, txirq: %d, rxirq %d\n", priv->bellirq,
+				priv->txirq, priv->rxirq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1732: FILE: arch/powerpc/sysdev/fsl_rio.c:1415:
+	if (!rio_request_io_region(port, NULL, law_start, RIO_MAINT_WIN_SIZE,
+				"maint_win", RIO_RESOURCE_MAINT, NULL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1738: FILE: arch/powerpc/sysdev/fsl_rio.c:1421:
+	out_be32(&priv->maint_atmu_regs->rowbar,
+				(law_start >> 12) & 0xffffff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1750: FILE: arch/powerpc/sysdev/fsl_rio.c:1429:
+	if (!rio_request_io_region(port, NULL, law_start + RIO_MAINT_WIN_SIZE,
+			RIO_DBELL_WIN_SIZE,

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1770: FILE: arch/powerpc/sysdev/fsl_rio.c:1449:
+	if (ops)
+		kfree(ops);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1772: FILE: arch/powerpc/sysdev/fsl_rio.c:1451:
+	if (port)
+		kfree(port);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1774: FILE: arch/powerpc/sysdev/fsl_rio.c:1453:
+	if (priv)
+		kfree(priv);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1780: FILE: arch/powerpc/sysdev/fsl_rio.c:1459:
+static int __devinit fsl_of_rio_rpn_probe(struct of_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1781: FILE: arch/powerpc/sysdev/fsl_rio.c:1460:
+static int __devinit fsl_of_rio_rpn_probe(struct of_device *dev,
+				     const struct of_device_id *match)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1784: FILE: arch/powerpc/sysdev/fsl_rio.c:1463:
+	int rc;
+	printk(KERN_INFO "Setting up RapidIO peer-to-peer network %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1784: FILE: arch/powerpc/sysdev/fsl_rio.c:1463:
+	printk(KERN_INFO "Setting up RapidIO peer-to-peer network %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1785: FILE: arch/powerpc/sysdev/fsl_rio.c:1464:
+	printk(KERN_INFO "Setting up RapidIO peer-to-peer network %s\n",
+			dev->node->full_name);

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#1797: FILE: arch/powerpc/sysdev/fsl_rio.c:1476:
+static struct of_device_id fsl_of_rio_rpn_ids[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,rapidio-delta" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#1799: FILE: arch/powerpc/sysdev/fsl_rio.c:1478:
+		.compatible = "fsl,rapidio-delta",

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1840: FILE: drivers/rapidio/Kconfig:12:
+config RAPIDIO_PROC_FS
+	bool "I/O and Memory resource debug"
+	depends on RAPIDIO && PROC_FS
+	default y
+	---help---
+	  Enable this option, it will create a /proc/riores node for
+	  monitoring the RapidIO I/O and Memory resource.
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1935: FILE: drivers/rapidio/rio-scan.c:104:
+	rio_local_write_config_32(port, RIO_DID_CSR, RIO_SET_DID(port->sys_size,
+				did));

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1943: FILE: drivers/rapidio/rio-scan.c:354:
+		if (!(rswitch->route_table = kzalloc(sizeof(u16)*
 		                                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1943: FILE: drivers/rapidio/rio-scan.c:354:
+		if (!(rswitch->route_table = kzalloc(sizeof(u16)*

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1991: FILE: drivers/rapidio/rio-scan.c:605:
+	if ((rdev = rio_setup_device(net, port, RIO_ANY_DESTID(port->sys_size),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1992: FILE: drivers/rapidio/rio-scan.c:606:
+	if ((rdev = rio_setup_device(net, port, RIO_ANY_DESTID(port->sys_size),
+					hopcount, 1))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2002: FILE: drivers/rapidio/rio-scan.c:615:
+		sw_inport = rio_get_swpinfo_inport(port,
+				RIO_ANY_DESTID(port->sys_size), hopcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2012: FILE: drivers/rapidio/rio-scan.c:630:
+		    rio_get_swpinfo_tports(port, RIO_ANY_DESTID(port->sys_size),
+						hopcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2070: FILE: drivers/rapidio/rio-scan.c:1005:
+		if (rio_disc_peer(net, mport, RIO_ANY_DESTID(mport->sys_size),
+					0) < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2122: FILE: drivers/rapidio/rio.c:42:
+	printk(KERN_ERR "%s:%s: " fmt,  __FILE__, __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2122: FILE: drivers/rapidio/rio.c:42:
+	printk(KERN_ERR "%s:%s: " fmt,  __FILE__, __FUNCTION__, ## arg)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2137: FILE: drivers/rapidio/rio.c:64:
+	return (RIO_GET_DID(port->sys_size, result));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2158: FILE: drivers/rapidio/rio.c:367:
+struct resource *rio_request_io_region(struct rio_mport *mport, void *devid,
+		resource_size_t start, resource_size_t size,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2162: FILE: drivers/rapidio/rio.c:371:
+	if (!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#2162: FILE: drivers/rapidio/rio.c:371:
+	if (!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2172: FILE: drivers/rapidio/rio.c:381:
+		if (allocate_resource(&mport->iores, res, size,
+				mport->iores.start, mport->iores.end,

WARNING:TYPO_SPELLING: 'allocte' may be misspelled - perhaps 'allocate'?
#2174: FILE: drivers/rapidio/rio.c:383:
+			ERR("allocte resource error!\n");
 			     ^^^^^^^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2190: FILE: drivers/rapidio/rio.c:399:
+	if (res)
+		kfree(res);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2230: FILE: drivers/rapidio/rio.c:439:
+int rio_map_outb_region(struct rio_mport *mport, u16 tid,
+		struct rio_mem *mem, u32 rflags)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#2238: FILE: drivers/rapidio/rio.c:447:
+	rc = mport->mops->map_outb(mport, mem->iores.start, mem->riores.start, mem->size, tid, rflags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2251: FILE: drivers/rapidio/rio.c:460:
+	unsigned long flags;
+	if (!mport->mops)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2266: FILE: drivers/rapidio/rio.c:475:
+	unsigned long flags;
+	if (!mport->mops)

WARNING:TYPO_SPELLING: 'successed' may be misspelled - perhaps 'succeeded'?
#2278: FILE: drivers/rapidio/rio.c:487:
+ * Return 0 is successed.
                ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2283: FILE: drivers/rapidio/rio.c:492:
+	int rc = 0;
+	if (!mem)

WARNING:TYPO_SPELLING: 'Retrun' may be misspelled - perhaps 'Return'?
#2310: FILE: drivers/rapidio/rio.c:519:
+ * Retrun: The rio_mem struction for inbound memory descriptor.
    ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2321: FILE: drivers/rapidio/rio.c:530:
+struct rio_mem *rio_request_inb_region(struct rio_mport *mport, void *dev_id,
+		resource_size_t size, const char *name, u32 owner)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rmem)...) over kzalloc(sizeof(struct rio_mem)...)
#2326: FILE: drivers/rapidio/rio.c:535:
+	rmem = kzalloc(sizeof(struct rio_mem), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2336: FILE: drivers/rapidio/rio.c:545:
+		printk(KERN_ERR "RIO space request error! ret = %d\n", ret);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2344: FILE: drivers/rapidio/rio.c:553:
+	if (!(rmem->virt = dma_alloc_coherent(NULL, rmem->size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2345: FILE: drivers/rapidio/rio.c:554:
+	if (!(rmem->virt = dma_alloc_coherent(NULL, rmem->size,
+				&rmem->iores.start, GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2353: FILE: drivers/rapidio/rio.c:562:
+	if ((ret = rio_map_inb_region(mport, rmem, 0))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2354: FILE: drivers/rapidio/rio.c:563:
+		printk(KERN_ERR "RIO map inbound mem error, ret = %d\n", ret);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2359: FILE: drivers/rapidio/rio.c:568:
+	if ((ret = rio_space_claim(rmem))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2360: FILE: drivers/rapidio/rio.c:569:
+		printk(KERN_ERR "RIO inbound mem claim error, ret = %d\n", ret);

WARNING:TYPO_SPELLING: 'successed' may be misspelled - perhaps 'succeeded'?
#2377: FILE: drivers/rapidio/rio.c:586:
+ * Return 0 is successed.
                ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2382: FILE: drivers/rapidio/rio.c:591:
+	int rc = 0;
+	if (!mem)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2416: FILE: drivers/rapidio/rio.c:625:
+struct rio_mem *rio_prepare_io_mem(struct rio_mport *mport,
+		struct rio_dev *dev, resource_size_t size, const char *name)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rmem)...) over kzalloc(sizeof(struct rio_mem)...)
#2420: FILE: drivers/rapidio/rio.c:629:
+	rmem = kzalloc(sizeof(struct rio_mem), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2429: FILE: drivers/rapidio/rio.c:638:
+	if (!(rio_request_io_region(mport, dev, 0, size,
+				name, RIO_RESOURCE_MEM, &rmem->iores))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2460: FILE: drivers/rapidio/rio.c:669:
+struct rio_mem *rio_request_outb_region(struct rio_mport *mport, void *dev_id,
+			resource_size_t size, const char *name, u32 owner)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2535: FILE: drivers/rapidio/rio.c:895:
+	if (p->sibling)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2537: FILE: drivers/rapidio/rio.c:897:
+		return p->sibling;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2537: FILE: drivers/rapidio/rio.c:897:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#2539: FILE: drivers/rapidio/rio.c:899:
+		if(rs->res >= RIO_MAX_MPORT_RESOURCES) {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2568: FILE: drivers/rapidio/rio.c:928:
+	seq_printf(m, "IO: ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2589: FILE: drivers/rapidio/rio.c:949:
+	seq_printf(m, "%*s%0*llx-%0*llx : %s\n",
+			depth * 2, "",

CHECK:SPACING: No space is necessary after a cast
#2590: FILE: drivers/rapidio/rio.c:950:
+			width, (unsigned long long) r->start,

CHECK:SPACING: No space is necessary after a cast
#2591: FILE: drivers/rapidio/rio.c:951:
+			width, (unsigned long long) r->end,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2606: FILE: drivers/rapidio/rio.c:966:
+	int res = seq_open(file, &resource_op);
+	if (!res) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2608: FILE: drivers/rapidio/rio.c:968:
+		struct seq_file *m = file->private_data;
+		m->private = &riomres;

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2629: FILE: drivers/rapidio/rio.c:989:
+__initcall(rioresources_init);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2646: FILE: drivers/rapidio/rio.h:54:
+#define RIO_GET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x00ff0000) >> 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2646: FILE: drivers/rapidio/rio.h:54:
+#define RIO_GET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x00ff0000) >> 16))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2647: FILE: drivers/rapidio/rio.h:55:
+#define RIO_SET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x000000ff) << 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2647: FILE: drivers/rapidio/rio.h:55:
+#define RIO_SET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x000000ff) << 16))

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#2649: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2654: FILE: drivers/rapidio/sallocator/Kconfig:1:
+choice
+	prompt "Default RapidIO Space Allocator"
+	depends on RAPIDIO
+	default RIO_SA_DEFAULT_BITMAP
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2659: FILE: drivers/rapidio/sallocator/Kconfig:6:
+	config RIO_SA_DEFAULT_BITMAP
+		bool "Bitmap"
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2687: FILE: drivers/rapidio/sallocator/bitmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2729: FILE: drivers/rapidio/sallocator/bitmap.c:43:
+	printk(KERN_ERR "ERROR %s - %s: " fmt,  __FILE__, __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2729: FILE: drivers/rapidio/sallocator/bitmap.c:43:
+	printk(KERN_ERR "ERROR %s - %s: " fmt,  __FILE__, __FUNCTION__, ## arg)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2731: FILE: drivers/rapidio/sallocator/bitmap.c:45:
+#define DBG(fmt...) printk(fmt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2798: FILE: drivers/rapidio/sallocator/bitmap.c:112:
+int rio_space_request(struct rio_mport *mport, resource_size_t size,
+			struct resource *new)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2808: FILE: drivers/rapidio/sallocator/bitmap.c:122:
+	ret = allocate_resource(root, new, size, root->start, root->end,
+			size, NULL, 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2830: FILE: drivers/rapidio/sallocator/bitmap.c:144:
+	printk("Rio Sect0 %p dump:\n", psect0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2831: FILE: drivers/rapidio/sallocator/bitmap.c:145:
+	printk("...id = 0x%08x, width = %d, rioid = %d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2831: FILE: drivers/rapidio/sallocator/bitmap.c:145:
+	printk("...id = 0x%08x, width = %d, rioid = %d \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2832: FILE: drivers/rapidio/sallocator/bitmap.c:146:
+	printk("...id = 0x%08x, width = %d, rioid = %d \n",
+			psect0->id, psect0->width, psect0->rioid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2835: FILE: drivers/rapidio/sallocator/bitmap.c:149:
+			printk("...inb_res[%d]: ctrl 0x%08x, owner 0x%08x\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2911: FILE: drivers/rapidio/sallocator/bitmap.c:225:
+		if ((sect0->inb_res[i].ctrl & SA_RIO_RES_CTRL_EN) &&
+				(((u64)sect0->inb_res[i].extaddr << 32 |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2927: FILE: drivers/rapidio/sallocator/bitmap.c:241:
+static struct resource *rio_space_get_dev_mem(struct rio_mport *mport,
+		u16 did, struct resource *res)

ERROR:SPACING: space required before the open parenthesis '('
#2929: FILE: drivers/rapidio/sallocator/bitmap.c:243:
+	if(!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2929: FILE: drivers/rapidio/sallocator/bitmap.c:243:
+	if(!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#2929: FILE: drivers/rapidio/sallocator/bitmap.c:243:
+	if(!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

WARNING:TYPO_SPELLING: 'diffrent' may be misspelled - perhaps 'different'?
#2959: FILE: drivers/rapidio/sallocator/bitmap.c:273:
+ * by the driver. If the remote RapidIO device use the diffrent space allocator,
                                                        ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2963: FILE: drivers/rapidio/sallocator/bitmap.c:277:
+int rio_space_find_mem(struct rio_mport *mport, u16 tid,
+			u32 owner, struct resource *res)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2965: FILE: drivers/rapidio/sallocator/bitmap.c:279:
+	volatile struct rio_sect0 __iomem *rsect0;

WARNING:SPLIT_STRING: quoted string split across lines
#2983: FILE: drivers/rapidio/sallocator/bitmap.c:297:
+		DBG("The target RapidIO space allocator is not rio_sa_bitmap! "
+				"id = 0x%x\n", rsect0->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2996: FILE: drivers/rapidio/sallocator/bitmap.c:310:
+		printk(KERN_WARNING "WARNING: The system width %d is smaller "

WARNING:SPLIT_STRING: quoted string split across lines
#2997: FILE: drivers/rapidio/sallocator/bitmap.c:311:
+		printk(KERN_WARNING "WARNING: The system width %d is smaller "
+			"than the remote RapidIO space address width %d!",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3003: FILE: drivers/rapidio/sallocator/bitmap.c:317:
+		if ((in_be32(&rsect0->inb_res[i].ctrl) & SA_RIO_RES_CTRL_EN)
+			  && (in_be32(&rsect0->inb_res[i].owner) == owner )) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3003: FILE: drivers/rapidio/sallocator/bitmap.c:317:
+			  && (in_be32(&rsect0->inb_res[i].owner) == owner )) {

ERROR:SPACING: space required before the open parenthesis '('
#3042: FILE: drivers/rapidio/sallocator/bitmap.c:356:
+	if(!(sect0mem.virt = dma_alloc_coherent(NULL, RIO_SBLOCK_SIZE,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3042: FILE: drivers/rapidio/sallocator/bitmap.c:356:
+	if(!(sect0mem.virt = dma_alloc_coherent(NULL, RIO_SBLOCK_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3043: FILE: drivers/rapidio/sallocator/bitmap.c:357:
+	if(!(sect0mem.virt = dma_alloc_coherent(NULL, RIO_SBLOCK_SIZE,
+					&sect0mem.iores.start, GFP_KERNEL))) {

ERROR:SPACING: space required before the open parenthesis '('
#3050: FILE: drivers/rapidio/sallocator/bitmap.c:364:
+	if(rio_space_request(mport, RIO_SBLOCK_SIZE, &sect0mem.riores))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3064: FILE: drivers/rapidio/sallocator/bitmap.c:378:
+	sblock_buf = rio_prepare_io_mem(mport, NULL, RIO_SBLOCK_SIZE,
+			"sblock_buf");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3150: FILE: include/linux/rio.h:242:
+	int (*lcread) (struct rio_mport *, int index, u32 offset, int len, u32 * data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3150: FILE: include/linux/rio.h:242:
+	int (*lcread) (struct rio_mport *, int index, u32 offset, int len, u32 * data);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3150: FILE: include/linux/rio.h:242:
+	int (*lcread) (struct rio_mport *, int index, u32 offset, int len, u32 * data);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#3151: FILE: include/linux/rio.h:243:
+	int (*lcwrite) (struct rio_mport *, int index, u32 offset, int len, u32 data);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3151: FILE: include/linux/rio.h:243:
+	int (*lcwrite) (struct rio_mport *, int index, u32 offset, int len, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3152: FILE: include/linux/rio.h:244:
+	int (*cread) (struct rio_mport *, int index, u16 destid, u8 hopcount, u32 offset, int len,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3152: FILE: include/linux/rio.h:244:
+	int (*cread) (struct rio_mport *, int index, u16 destid, u8 hopcount, u32 offset, int len,

WARNING:SPACING: Unnecessary space before function pointer arguments
#3155: FILE: include/linux/rio.h:246:
+	int (*cwrite) (struct rio_mport *, int index, u16 destid, u8 hopcount, u32 offset, int len,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3155: FILE: include/linux/rio.h:246:
+	int (*cwrite) (struct rio_mport *, int index, u16 destid, u8 hopcount, u32 offset, int len,

WARNING:SPACING: Unnecessary space before function pointer arguments
#3158: FILE: include/linux/rio.h:248:
+	int (*dsend) (struct rio_mport *, int index, u16 destid, u16 data);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3158: FILE: include/linux/rio.h:248:
+	int (*dsend) (struct rio_mport *, int index, u16 destid, u16 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3198: FILE: include/linux/rio.h:349:
+	int (*map_inb) (struct rio_mport *, resource_size_t lstart,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3198: FILE: include/linux/rio.h:349:
+	int (*map_inb) (struct rio_mport *, resource_size_t lstart,

WARNING:SPACING: Unnecessary space before function pointer arguments
#3201: FILE: include/linux/rio.h:352:
+	int (*map_outb) (struct rio_mport *, resource_size_t lstart,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3201: FILE: include/linux/rio.h:352:
+	int (*map_outb) (struct rio_mport *, resource_size_t lstart,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3202: FILE: include/linux/rio.h:353:
+	int (*map_outb) (struct rio_mport *, resource_size_t lstart,
+			resource_size_t rstart,

WARNING:SPACING: Unnecessary space before function pointer arguments
#3204: FILE: include/linux/rio.h:355:
+	void (*unmap_inb) (struct rio_mport *, resource_size_t lstart);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3204: FILE: include/linux/rio.h:355:
+	void (*unmap_inb) (struct rio_mport *, resource_size_t lstart);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3205: FILE: include/linux/rio.h:356:
+	void (*unmap_outb) (struct rio_mport *, resource_size_t lstart);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3205: FILE: include/linux/rio.h:356:
+	void (*unmap_outb) (struct rio_mport *, resource_size_t lstart);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3220: FILE: include/linux/rio_drv.h:338:
+static inline void rio_init_io_res(struct resource *res, resource_size_t start,
+		resource_size_t end, const char *name, unsigned long flag)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource *' should also have an identifier name
#3236: FILE: include/linux/rio_drv.h:421:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3237: FILE: include/linux/rio_drv.h:422:
+extern struct resource *rio_request_io_region(struct rio_mport *, void *,
+				u32, u32, const char *, unsigned long,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3239: FILE: include/linux/rio_drv.h:424:
+extern struct rio_mem *rio_prepare_io_mem(struct rio_mport *, struct rio_dev *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3239: FILE: include/linux/rio_drv.h:424:
+extern struct rio_mem *rio_prepare_io_mem(struct rio_mport *, struct rio_dev *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_dev *' should also have an identifier name
#3239: FILE: include/linux/rio_drv.h:424:
+extern struct rio_mem *rio_prepare_io_mem(struct rio_mport *, struct rio_dev *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'resource_size_t' should also have an identifier name
#3239: FILE: include/linux/rio_drv.h:424:
+extern struct rio_mem *rio_prepare_io_mem(struct rio_mport *, struct rio_dev *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#3239: FILE: include/linux/rio_drv.h:424:
+extern struct rio_mem *rio_prepare_io_mem(struct rio_mport *, struct rio_dev *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3240: FILE: include/linux/rio_drv.h:425:
+extern struct rio_mem *rio_prepare_io_mem(struct rio_mport *, struct rio_dev *,
+				resource_size_t, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3248: FILE: include/linux/rio_drv.h:428:
+extern struct rio_mem *rio_request_inb_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3248: FILE: include/linux/rio_drv.h:428:
+extern struct rio_mem *rio_request_inb_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3248: FILE: include/linux/rio_drv.h:428:
+extern struct rio_mem *rio_request_inb_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'resource_size_t' should also have an identifier name
#3248: FILE: include/linux/rio_drv.h:428:
+extern struct rio_mem *rio_request_inb_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#3248: FILE: include/linux/rio_drv.h:428:
+extern struct rio_mem *rio_request_inb_region(struct rio_mport *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#3248: FILE: include/linux/rio_drv.h:428:
+extern struct rio_mem *rio_request_inb_region(struct rio_mport *, void *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3249: FILE: include/linux/rio_drv.h:429:
+extern struct rio_mem *rio_request_inb_region(struct rio_mport *, void *,
+				resource_size_t, const char *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3250: FILE: include/linux/rio_drv.h:430:
+extern struct rio_mem *rio_request_outb_region(struct rio_mport *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3250: FILE: include/linux/rio_drv.h:430:
+extern struct rio_mem *rio_request_outb_region(struct rio_mport *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3250: FILE: include/linux/rio_drv.h:430:
+extern struct rio_mem *rio_request_outb_region(struct rio_mport *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'resource_size_t' should also have an identifier name
#3250: FILE: include/linux/rio_drv.h:430:
+extern struct rio_mem *rio_request_outb_region(struct rio_mport *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#3250: FILE: include/linux/rio_drv.h:430:
+extern struct rio_mem *rio_request_outb_region(struct rio_mport *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#3250: FILE: include/linux/rio_drv.h:430:
+extern struct rio_mem *rio_request_outb_region(struct rio_mport *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3251: FILE: include/linux/rio_drv.h:431:
+extern struct rio_mem *rio_request_outb_region(struct rio_mport *,
+		void *, resource_size_t, const char *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3252: FILE: include/linux/rio_drv.h:432:
+extern int rio_release_inb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3252: FILE: include/linux/rio_drv.h:432:
+extern int rio_release_inb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3252: FILE: include/linux/rio_drv.h:432:
+extern int rio_release_inb_region(struct rio_mport *, struct rio_mem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3253: FILE: include/linux/rio_drv.h:433:
+extern int rio_release_outb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3253: FILE: include/linux/rio_drv.h:433:
+extern int rio_release_outb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3253: FILE: include/linux/rio_drv.h:433:
+extern int rio_release_outb_region(struct rio_mport *, struct rio_mem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3256: FILE: include/linux/rio_drv.h:436:
+extern int rio_map_inb_region(struct rio_mport *, struct rio_mem *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3256: FILE: include/linux/rio_drv.h:436:
+extern int rio_map_inb_region(struct rio_mport *, struct rio_mem *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3256: FILE: include/linux/rio_drv.h:436:
+extern int rio_map_inb_region(struct rio_mport *, struct rio_mem *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#3256: FILE: include/linux/rio_drv.h:436:
+extern int rio_map_inb_region(struct rio_mport *, struct rio_mem *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3257: FILE: include/linux/rio_drv.h:437:
+extern int rio_map_outb_region(struct rio_mport *, u16, struct rio_mem *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3257: FILE: include/linux/rio_drv.h:437:
+extern int rio_map_outb_region(struct rio_mport *, u16, struct rio_mem *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#3257: FILE: include/linux/rio_drv.h:437:
+extern int rio_map_outb_region(struct rio_mport *, u16, struct rio_mem *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3257: FILE: include/linux/rio_drv.h:437:
+extern int rio_map_outb_region(struct rio_mport *, u16, struct rio_mem *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#3257: FILE: include/linux/rio_drv.h:437:
+extern int rio_map_outb_region(struct rio_mport *, u16, struct rio_mem *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3258: FILE: include/linux/rio_drv.h:438:
+extern void rio_unmap_inb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3258: FILE: include/linux/rio_drv.h:438:
+extern void rio_unmap_inb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3258: FILE: include/linux/rio_drv.h:438:
+extern void rio_unmap_inb_region(struct rio_mport *, struct rio_mem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3259: FILE: include/linux/rio_drv.h:439:
+extern void rio_unmap_outb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3259: FILE: include/linux/rio_drv.h:439:
+extern void rio_unmap_outb_region(struct rio_mport *, struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3259: FILE: include/linux/rio_drv.h:439:
+extern void rio_unmap_outb_region(struct rio_mport *, struct rio_mem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3262: FILE: include/linux/rio_drv.h:442:
+extern int rio_space_request(struct rio_mport *, resource_size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3262: FILE: include/linux/rio_drv.h:442:
+extern int rio_space_request(struct rio_mport *, resource_size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'resource_size_t' should also have an identifier name
#3262: FILE: include/linux/rio_drv.h:442:
+extern int rio_space_request(struct rio_mport *, resource_size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource *' should also have an identifier name
#3262: FILE: include/linux/rio_drv.h:442:
+extern int rio_space_request(struct rio_mport *, resource_size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3263: FILE: include/linux/rio_drv.h:443:
+extern int rio_space_request(struct rio_mport *, resource_size_t,
+						struct resource *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3264: FILE: include/linux/rio_drv.h:444:
+extern int rio_space_find_mem(struct rio_mport *, u16, u32, struct resource *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3264: FILE: include/linux/rio_drv.h:444:
+extern int rio_space_find_mem(struct rio_mport *, u16, u32, struct resource *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#3264: FILE: include/linux/rio_drv.h:444:
+extern int rio_space_find_mem(struct rio_mport *, u16, u32, struct resource *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#3264: FILE: include/linux/rio_drv.h:444:
+extern int rio_space_find_mem(struct rio_mport *, u16, u32, struct resource *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource *' should also have an identifier name
#3264: FILE: include/linux/rio_drv.h:444:
+extern int rio_space_find_mem(struct rio_mport *, u16, u32, struct resource *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3265: FILE: include/linux/rio_drv.h:445:
+extern int rio_space_init(struct rio_mport *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3265: FILE: include/linux/rio_drv.h:445:
+extern int rio_space_init(struct rio_mport *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3266: FILE: include/linux/rio_drv.h:446:
+extern int rio_space_claim(struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3266: FILE: include/linux/rio_drv.h:446:
+extern int rio_space_claim(struct rio_mem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3267: FILE: include/linux/rio_drv.h:447:
+extern void rio_space_release(struct rio_mem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mem *' should also have an identifier name
#3267: FILE: include/linux/rio_drv.h:447:
+extern void rio_space_release(struct rio_mem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3275: FILE: include/linux/rio_drv.h:497:
+extern u32 rio_get_mport_id(struct rio_mport *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rio_mport *' should also have an identifier name
#3275: FILE: include/linux/rio_drv.h:497:
+extern u32 rio_get_mport_id(struct rio_mport *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347759.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 161 warnings, 101 checks, 3070 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347759.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
