CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: include/linux/kernel.h:23:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#151: FILE: include/linux/kernel.h:27:
+	unsigned line;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#171: FILE: include/linux/kernel.h:47:
+#if defined(CONFIG_TRACE_BRANCH_PROFILING)				\
+	&& !defined(DISABLE_BRANCH_PROFILING) && !defined(__CHECKER__)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#172: FILE: include/linux/kernel.h:48:
+	&& !defined(DISABLE_BRANCH_PROFILING) && !defined(__CHECKER__)	\
+	&& !defined(MODULE)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#181: FILE: include/linux/kernel.h:57:
+				__attribute__((__aligned__(4)))		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_annotated_branch") over __attribute__((section("_ftrace_annotated_branch")))
#182: FILE: include/linux/kernel.h:58:
+				__attribute__((section("_ftrace_annotated_branch"))) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#199: FILE: include/linux/kernel.h:75:
+#define likely(x)	(__builtin_constant_p(x) ? !!(x) : __branch_check__(x, 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#201: FILE: include/linux/kernel.h:77:
+#define unlikely(x)	(__builtin_constant_p(x) ? !!(x) : __branch_check__(x, 0))

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#208: FILE: include/linux/kernel.h:84:
+#define if(cond, ...) __trace_if( (cond , ## __VA_ARGS__) )
                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#208: FILE: include/linux/kernel.h:84:
+#define if(cond, ...) __trace_if( (cond , ## __VA_ARGS__) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#208: FILE: include/linux/kernel.h:84:
+#define if(cond, ...) __trace_if( (cond , ## __VA_ARGS__) )

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: include/linux/kernel.h:84:
+#define if(cond, ...) __trace_if( (cond , ## __VA_ARGS__) )

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#209: FILE: include/linux/kernel.h:85:
+#define __trace_if(cond) \
+	if (__builtin_constant_p((cond)) ? !!(cond) :			\
+	({								\
+		int ______r;						\
+		static struct ftrace_branch_data			\
+			__attribute__((__aligned__(4)))			\
+			__attribute__((section("_ftrace_branch")))	\
+			______f = {					\
+				.func = __func__,			\
+				.file = __FILE__,			\
+				.line = __LINE__,			\
+			};						\
+		______r = !!(cond);					\
+		______f.miss_hit[______r]++;				\
+		______r;						\
+	}))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cond' - possible side-effects?
#209: FILE: include/linux/kernel.h:85:
+#define __trace_if(cond) \
+	if (__builtin_constant_p((cond)) ? !!(cond) :			\
+	({								\
+		int ______r;						\
+		static struct ftrace_branch_data			\
+			__attribute__((__aligned__(4)))			\
+			__attribute__((section("_ftrace_branch")))	\
+			______f = {					\
+				.func = __func__,			\
+				.file = __FILE__,			\
+				.line = __LINE__,			\
+			};						\
+		______r = !!(cond);					\
+		______f.miss_hit[______r]++;				\
+		______r;						\
+	}))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#210: FILE: include/linux/kernel.h:86:
+	if (__builtin_constant_p((cond)) ? !!(cond) :			\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#214: FILE: include/linux/kernel.h:90:
+			__attribute__((__aligned__(4)))			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_branch") over __attribute__((section("_ftrace_branch")))
#215: FILE: include/linux/kernel.h:91:
+			__attribute__((section("_ftrace_branch")))	\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000115987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 5 warnings, 6 checks, 180 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000115987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
