WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
>> want the _pointer_ to be const, you want what it points _to_ to be const. 

WARNING:BAD_SIGN_OFF: Non-standard signature: 'Signed-of-by:' - perhaps 'Signed-off-by:'?
#135: 
Signed-of-by: Mike Travis <travis@sgi.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: No space is necessary after a cast
#240: FILE: include/linux/cpumask.h:105:
+typedef (const unsigned long) *cpumask_t;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#240: FILE: include/linux/cpumask.h:105:
+typedef (const unsigned long) *cpumask_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#240: FILE: include/linux/cpumask.h:105:
+typedef (const unsigned long) *cpumask_t;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#240: FILE: include/linux/cpumask.h:105:
+typedef (const unsigned long) *cpumask_t;
                               ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#241: FILE: include/linux/cpumask.h:106:
+typedef unsigned long cpumask_map_t[1];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#242: FILE: include/linux/cpumask.h:107:
+typedef unsigned long cpumask_var_t[1];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#249: FILE: include/linux/cpumask.h:114:
+#define for_each_cpu(cpu, mask)	\
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#251: FILE: include/linux/cpumask.h:116:
+#define for_each_cpu_in(cpu, mask, andmask) \
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask, (void)andmask)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#268: FILE: include/linux/cpumask.h:133:
+typedef unsigned long *cpumask_var_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#274: FILE: include/linux/cpumask.h:139:
+typedef unsigned long cpumask_var_t[BITS_TO_LONGS(nr_cpu_ids)];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#279: FILE: include/linux/cpumask.h:144:
+typedef const unsigned long *cpumask_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#280: FILE: include/linux/cpumask.h:145:
+typedef unsigned long cpumask_map_t[BITS_TO_LONGS(nr_cpu_ids)];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/cpumask.h:147:
+extern int cpus_first(cpumask_t src);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/cpumask.h:148:
+extern int cpus_next(int n, cpumask_t src);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/cpumask.h:149:
+extern int cpus_next_in(int n, cpumask_t src, cpumask_t andsrc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: include/linux/cpumask.h:150:
+extern int any_cpu_in(cpumask_t mask, cpumask_t andmask);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#290: FILE: include/linux/cpumask.h:155:
+#define for_each_cpu(cpu, mask)				\
+	for ((cpu) = -1;				\
+		(cpu) = cpus_next((cpu), (mask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#293: FILE: include/linux/cpumask.h:158:
+		(cpu) < nr_cpu_ids; )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#295: FILE: include/linux/cpumask.h:160:
+#define for_each_cpu_in(cpu, mask, andmask)			\
+	for ((cpu) = -1;					\
+		(cpu) = cpus_next_in((cpu), (mask), (andmask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#298: FILE: include/linux/cpumask.h:163:
+		(cpu) < nr_cpu_ids; )

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#337: FILE: include/linux/cpumask.h:200:
+static inline void cpu_set(int cpu, volatile cpumask_var_t dst)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#345: FILE: include/linux/cpumask.h:205:
+static inline void cpu_clear(int cpu, volatile cpumask_var_t dst)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: include/linux/cpumask.h:249:
+static inline void cpus_andnot(cpumask_var_t dst, cpumask_t src1,
+						cpumask_t src2)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#527: FILE: include/linux/cpumask.h:325:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-1] =  value		\
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#554: FILE: include/linux/cpumask.h:337:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL,		\
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#555: FILE: include/linux/cpumask.h:338:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD		\
 	                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#555: FILE: include/linux/cpumask.h:338:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD		\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: include/linux/cpumask.h:358:
+static inline int cpumask_parse_user(const char __user *buf, int len,
+							cpumask_var_t dst)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: include/linux/cpumask.h:379:
+static inline void cpus_remap(cpumask_var_t dst, cpumask_t src, cpumask_t old,
+								cpumask_t new)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: include/linux/cpumask.h:385:
+static inline void cpus_onto(cpumask_var_t dst, cpumask_t orig,
+						cpumask_t relmap)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#766: FILE: lib/cpumask.c:14:
+	return find_next_bit(srcp, nr_cpu_ids, n+1);
 	                                        ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222462.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 18 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222462.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
