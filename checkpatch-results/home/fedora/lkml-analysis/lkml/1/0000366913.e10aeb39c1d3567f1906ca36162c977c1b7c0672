WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
I don't want to argue for or against the actual revert; however if Linus/James/Chris

WARNING:SPACING: Unnecessary space before function pointer arguments
#106: FILE: include/linux/security.h:1372:
+	int (*unregister_security) (const char *name,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: include/linux/security.h:1373:
+^I                            struct security_operations *ops);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#115: FILE: include/linux/security.h:1454:
+extern int unregister_security	(struct security_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/security.h:1454:
+extern int unregister_security	(struct security_operations *ops);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: include/linux/security.h:1456:
+extern int mod_unreg_security	(const char *name, struct security_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/security.h:1456:
+extern int mod_unreg_security	(const char *name, struct security_operations *ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#128: FILE: security/dummy.c:911:
+static int dummy_unregister_security (const char *name, struct security_operations *ops)

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#195: FILE: security/security.c:135:
+ * an error is returned.  Otherwise the default security options is set to the
+ * the dummy_security_ops structure, and 0 is returned.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#200: FILE: security/security.c:140:
+		printk(KERN_INFO "%s: trying to unregister "

WARNING:SPLIT_STRING: quoted string split across lines
#201: FILE: security/security.c:141:
+		printk(KERN_INFO "%s: trying to unregister "
+		       "a security_opts structure that is not "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#202: FILE: security/security.c:142:
+		       "a security_opts structure that is not "
+		       "registered, failing.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#202: FILE: security/security.c:142:
+		       "registered, failing.\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#227: FILE: security/security.c:167:
+		printk(KERN_INFO "%s invalid attempt to unregister "

WARNING:SPLIT_STRING: quoted string split across lines
#228: FILE: security/security.c:168:
+		printk(KERN_INFO "%s invalid attempt to unregister "
+		       " primary security ops.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#228: FILE: security/security.c:168:
+		       " primary security ops.\n", __FUNCTION__);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#235: FILE: security/security.c:175:
+EXPORT_SYMBOL_GPL(register_security);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#236: FILE: security/security.c:176:
+EXPORT_SYMBOL_GPL(unregister_security);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#237: FILE: security/security.c:177:
+EXPORT_SYMBOL_GPL(mod_reg_security);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#238: FILE: security/security.c:178:
+EXPORT_SYMBOL_GPL(mod_unreg_security);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#251: FILE: security/selinux/hooks.c:4552:
+static int selinux_unregister_security (const char *name, struct security_operations *ops)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#254: FILE: security/selinux/hooks.c:4555:
+		printk(KERN_ERR "%s:  trying to unregister a security module "

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: security/selinux/hooks.c:4556:
+^I^I        "that is not registered.\n", __FUNCTION__);$

WARNING:SPLIT_STRING: quoted string split across lines
#255: FILE: security/selinux/hooks.c:4556:
+		printk(KERN_ERR "%s:  trying to unregister a security module "
+		        "that is not registered.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#255: FILE: security/selinux/hooks.c:4556:
+		        "that is not registered.\n", __FUNCTION__);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366913.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 21 warnings, 2 checks, 162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366913.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
