CHECK:CAMELCASE: Avoid CamelCase: <accessTime>
#53: FILE: fs/udf/inode.c:1245:
+		if (!udf_stamp_to_time(&inode->i_atime, fe->accessTime))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <modificationTime>
#58: FILE: fs/udf/inode.c:1248:
+		if (!udf_stamp_to_time(&inode->i_mtime, fe->modificationTime))

CHECK:CAMELCASE: Avoid CamelCase: <attrTime>
#63: FILE: fs/udf/inode.c:1251:
+		if (!udf_stamp_to_time(&inode->i_ctime, fe->attrTime))

CHECK:CAMELCASE: Avoid CamelCase: <createTime>
#83: FILE: fs/udf/inode.c:1268:
+		if (!udf_stamp_to_time(&iinfo->i_crtime, efe->createTime))

CHECK:CAMELCASE: Avoid CamelCase: <recordingDateAndTime>
#144: FILE: fs/udf/super.c:918:
+			      pvoldesc->recordingDateAndTime)) {

CHECK:CAMELCASE: Avoid CamelCase: <typeAndTimezone>
#196: FILE: fs/udf/super.c:1790:
+			 ts.hour, ts.minute, le16_to_cpu(ts.typeAndTimezone));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: fs/udf/udfdecl.h:207:
+extern struct timespec *udf_stamp_to_time(struct timespec *dest, timestamp src);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: fs/udf/udfdecl.h:208:
+extern timestamp *udf_time_to_stamp(timestamp *dest, struct timespec src);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#229: FILE: fs/udf/udftime.c:93:
+	uint8_t type = typeAndTimezone >> 12;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'year < EPOCH_YEAR'
#244: FILE: fs/udf/udftime.c:105:
+	if ((year < EPOCH_YEAR) ||
+	    (year >= EPOCH_YEAR + MAX_YEAR_SECONDS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000327287.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 10 checks, 208 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000327287.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
