WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#277: FILE: drivers/ata/libata-core.c:181:
+	BUG_ON(mode != ATA_LITER_EDGE &&

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#292: FILE: drivers/ata/libata-core.c:191:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#307: FILE: drivers/ata/libata-core.c:202:
+			/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#311: FILE: drivers/ata/libata-core.c:206:
+			/* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: drivers/ata/libata-core.c:240:
+	BUG_ON(mode != ATA_DITER_ENABLED && mode != ATA_DITER_ENABLED_REVERSE &&

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#614: FILE: drivers/ata/libata-core.c:6577:
+EXPORT_SYMBOL_GPL(ata_dev_next);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: drivers/ata/libata-eh.c:646:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1198: FILE: drivers/ata/pata_it821x.c:473:
+		/* We do need the right mode information for DMA or PIO
+		   and this comes from the current configuration flags */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1198: FILE: drivers/ata/pata_it821x.c:473:
+		   and this comes from the current configuration flags */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1327: FILE: drivers/ata/pata_pdc2027x.c:415:
+			u32 ctcr1 = ioread32(dev_mmio(ap, dev, PDC_CTCR1));
+			ctcr1 |= (1 << 25);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1366: FILE: drivers/ata/pata_platform.c:39:
+		dev->pio_mode = dev->xfer_mode = XFER_PIO_0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1493: FILE: drivers/ata/sata_sil.c:178:
+	/** These controllers support Large Block Transfer which allows
+	    transfer chunks up to 2GB and which cross 64KB boundaries,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1494: FILE: drivers/ata/sata_sil.c:179:
+	    therefore the DMA limits are more relaxed than standard ATA SFF. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1548: FILE: drivers/ata/sata_sil.c:301:
+	/* set transfer direction, start host DMA transaction
+	   Note: For Large Block Transfer to work, the DMA must be started

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1549: FILE: drivers/ata/sata_sil.c:302:
+	   using the bmdma2 register. */

CHECK:SPACING: No space is necessary after a cast
#1568: FILE: drivers/ata/sata_sil.c:321:
+		u32 addr = (u32) sg_dma_address(sg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info"
#1621: FILE: drivers/firmware/dmi_scan.c:595:
+	if (info == NULL || str == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!str"
#1621: FILE: drivers/firmware/dmi_scan.c:595:
+	if (info == NULL || str == NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1635: FILE: include/linux/dmi.h:50:
+extern bool dmi_match(enum dmi_field f, const char *str);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1686: FILE: include/linux/libata.h:1303:
+				 * host link.  no slave link */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1689: FILE: include/linux/libata.h:1306:
+				 * slave link still comes after host link */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1705: FILE: include/linux/libata.h:1316:
+extern struct ata_link *ata_link_next(struct ata_link *link,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1713: FILE: include/linux/libata.h:1320:
+extern struct ata_device *ata_dev_next(struct ata_device *dev,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'link' - possible side-effects?
#1731: FILE: include/linux/libata.h:1338:
+#define ata_for_each_link(link, ap, mode) \
+	for ((link) = ata_link_next(NULL, (ap), ATA_LITER_##mode); (link); \
+	     (link) = ata_link_next((link), (ap), ATA_LITER_##mode))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ap' - possible side-effects?
#1731: FILE: include/linux/libata.h:1338:
+#define ata_for_each_link(link, ap, mode) \
+	for ((link) = ata_link_next(NULL, (ap), ATA_LITER_##mode); (link); \
+	     (link) = ata_link_next((link), (ap), ATA_LITER_##mode))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1738: FILE: include/linux/libata.h:1342:
+#define ata_for_each_dev(dev, link, mode) \
+	for ((dev) = ata_dev_next(NULL, (link), ATA_DITER_##mode); (dev); \
+	     (dev) = ata_dev_next((dev), (link), ATA_DITER_##mode))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'link' - possible side-effects?
#1738: FILE: include/linux/libata.h:1342:
+#define ata_for_each_dev(dev, link, mode) \
+	for ((dev) = ata_dev_next(NULL, (link), ATA_DITER_##mode); (dev); \
+	     (dev) = ata_dev_next((dev), (link), ATA_DITER_##mode))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189284.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 12 checks, 1445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189284.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
