WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#76: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#95: FILE: drivers/staging/ramzswap/Kconfig:15:
+config RAMZSWAP_STATS
+	bool "Enable ramzswap stats"
+	depends on RAMZSWAP
+	default y
+	help
+	  Enable statistics collection for ramzswap. This adds only a minimal
+	  overhead. In unsure, say Y.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: drivers/staging/ramzswap/ramzswap_drv.c:51:
+static int rzs_test_flag(struct ramzswap *rzs, u32 index,
+			enum rzs_pageflags flag)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: drivers/staging/ramzswap/ramzswap_drv.c:57:
+static void rzs_set_flag(struct ramzswap *rzs, u32 index,
+			enum rzs_pageflags flag)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/staging/ramzswap/ramzswap_drv.c:63:
+static void rzs_clear_flag(struct ramzswap *rzs, u32 index,
+			enum rzs_pageflags flag)

WARNING:SPLIT_STRING: quoted string split across lines
#213: FILE: drivers/staging/ramzswap/ramzswap_drv.c:97:
+		pr_info("Memory limit cannot be greater than "
+			"disksize: limit=%zu, disksize=%zu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: drivers/staging/ramzswap/ramzswap_drv.c:104:
+		size_t mempart, disksize;
+		pr_info("Using default: smaller of (%u%% of RAM) and "

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#221: FILE: drivers/staging/ramzswap/ramzswap_drv.c:105:
+		pr_info("Using default: smaller of (%u%% of RAM) and "
+			"(backing disk size).\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#229: FILE: drivers/staging/ramzswap/ramzswap_drv.c:113:
+		pr_info(

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: drivers/staging/ramzswap/ramzswap_drv.c:115:
+		"Its not advisable setting limit more than half of "
+		"size of memory since we expect a 2:1 compression ratio. "

WARNING:SPLIT_STRING: quoted string split across lines
#232: FILE: drivers/staging/ramzswap/ramzswap_drv.c:116:
+		"size of memory since we expect a 2:1 compression ratio. "
+		"Limit represents amount of *compressed* data we can keep "

WARNING:SPLIT_STRING: quoted string split across lines
#233: FILE: drivers/staging/ramzswap/ramzswap_drv.c:117:
+		"Limit represents amount of *compressed* data we can keep "
+		"in memory!\n"

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: drivers/staging/ramzswap/ramzswap_drv.c:126:
+	BUG_ON(!rzs->memlimit);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#248: FILE: drivers/staging/ramzswap/ramzswap_drv.c:132:
+		pr_info(

WARNING:SPLIT_STRING: quoted string split across lines
#250: FILE: drivers/staging/ramzswap/ramzswap_drv.c:134:
+		"disk size not provided. You can use disksize_kb module "
+		"param to specify size.\nUsing default: (%u%% of RAM).\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#258: FILE: drivers/staging/ramzswap/ramzswap_drv.c:142:
+		pr_info(

WARNING:SPLIT_STRING: quoted string split across lines
#260: FILE: drivers/staging/ramzswap/ramzswap_drv.c:144:
+		"There is little point creating a ramzswap of greater than "
+		"twice the size of memory since we expect a 2:1 compression "

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: drivers/staging/ramzswap/ramzswap_drv.c:145:
+		"twice the size of memory since we expect a 2:1 compression "
+		"ratio. Note that ramzswap uses about 0.1%% of the size of "

WARNING:SPLIT_STRING: quoted string split across lines
#262: FILE: drivers/staging/ramzswap/ramzswap_drv.c:146:
+		"ratio. Note that ramzswap uses about 0.1%% of the size of "
+		"the swap device when not in use so a huge ramzswap is "

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: drivers/staging/ramzswap/ramzswap_drv.c:147:
+		"the swap device when not in use so a huge ramzswap is "
+		"wasteful.\n"

WARNING:TYPO_SPELLING: 'indentify' may be misspelled - perhaps 'identify'?
#276: FILE: drivers/staging/ramzswap/ramzswap_drv.c:160:
+ * to indentify it as a swap partition. Prepare such a header
       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: drivers/staging/ramzswap/ramzswap_drv.c:248:
+void ramzswap_ioctl_get_stats(struct ramzswap *rzs,
+			struct ramzswap_ioctl_stats *s)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: drivers/staging/ramzswap/ramzswap_drv.c:297:
+static int add_backing_swap_extent(struct ramzswap *rzs,
+				pgoff_t phy_pagenum,

WARNING:SPLIT_STRING: quoted string split across lines
#443: FILE: drivers/staging/ramzswap/ramzswap_drv.c:327:
+	pr_debug("add_extent: idx=%u, phy_pgnum=%lu, num_pgs=%lu, "
+		"pg_last=%lu, curr_ext=%p\n", idx, phy_pagenum, num_pages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: drivers/staging/ramzswap/ramzswap_drv.c:337:
+static int setup_backing_swap_extents(struct ramzswap *rzs,
+				struct inode *inode, unsigned long *num_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#456: FILE: drivers/staging/ramzswap/ramzswap_drv.c:340:
+	unsigned blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#457: FILE: drivers/staging/ramzswap/ramzswap_drv.c:341:
+	unsigned blocks_per_page;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#468: FILE: drivers/staging/ramzswap/ramzswap_drv.c:352:
+		unsigned block_in_page;

WARNING:SPLIT_STRING: quoted string split across lines
#521: FILE: drivers/staging/ramzswap/ramzswap_drv.c:405:
+		pr_debug("adding last extent: pagenum=%lu, "
+			"contig_pages=%lu\n", pagenum, contig_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: drivers/staging/ramzswap/ramzswap_drv.c:407:
+		ret = add_backing_swap_extent(rzs,
+			prev_pagenum - (contig_pages - 1), contig_pages);

WARNING:LINE_SPACING: Missing a blank line after declarations
#547: FILE: drivers/staging/ramzswap/ramzswap_drv.c:431:
+		struct list_head *entry = rzs->backing_swap_extent_list.next;
+		page = list_entry(entry, struct page, lru);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#560: FILE: drivers/staging/ramzswap/ramzswap_drv.c:444:
+	unsigned entries_per_page = PAGE_SIZE / sizeof(*rzs->table);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#561: FILE: drivers/staging/ramzswap/ramzswap_drv.c:445:
+	unsigned extents_per_page = PAGE_SIZE / sizeof(*se);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/staging/ramzswap/ramzswap_drv.c:452:
+	se_page = list_entry(rzs->backing_swap_extent_list.next,
+					struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: drivers/staging/ramzswap/ramzswap_drv.c:457:
+	num_table_pages = DIV_ROUND_UP(num_pages * sizeof(*rzs->table),
+							PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: drivers/staging/ramzswap/ramzswap_drv.c:466:
+				BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#584: FILE: drivers/staging/ramzswap/ramzswap_drv.c:468:
+			if (!(se_idx % extents_per_page)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: drivers/staging/ramzswap/ramzswap_drv.c:470:
+				se_page = list_entry(se_page->lru.next,
+						struct page, lru);

CHECK:BRACES: Unbalanced braces around else statement
#588: FILE: drivers/staging/ramzswap/ramzswap_drv.c:472:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: drivers/staging/ramzswap/ramzswap_drv.c:480:
+		pr_debug("map_table: entry=%lu, span=%lu, map=%p, priv=%lu\n",
+			entry, span, table_page->mapping, table_page->private);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: drivers/staging/ramzswap/ramzswap_drv.c:508:
+	swap_file = filp_open(rzs->backing_swap_name,
+				O_RDWR | O_LARGEFILE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: drivers/staging/ramzswap/ramzswap_drv.c:511:
+		pr_err("Error opening backing device: %s\n",
+			rzs->backing_swap_name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#660: FILE: drivers/staging/ramzswap/ramzswap_drv.c:544:
+	BUG_ON(!rzs->disksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: drivers/staging/ramzswap/ramzswap_drv.c:594:
+			se_page = list_entry(se_page->lru.next,
+						struct page, lru);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#805: FILE: drivers/staging/ramzswap/ramzswap_drv.c:689:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#821: FILE: drivers/staging/ramzswap/ramzswap_drv.c:705:
+		u32 pagenum;
+		stat_dec(rzs->stats.num_reads);

WARNING:SPLIT_STRING: quoted string split across lines
#841: FILE: drivers/staging/ramzswap/ramzswap_drv.c:725:
+	pr_debug("Read before write on swap device: "
+		"sector=%lu, size=%u, offset=%u\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#882: FILE: drivers/staging/ramzswap/ramzswap_drv.c:766:
+	ret = lzo1x_decompress_safe(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: drivers/staging/ramzswap/ramzswap_drv.c:777:
+		pr_err("Decompression failed! err=%d, page=%u\n",
+			ret, index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: drivers/staging/ramzswap/ramzswap_drv.c:841:
+	if (rzs->backing_swap &&
+		(rzs->stats.compr_size > rzs->memlimit - PAGE_SIZE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: drivers/staging/ramzswap/ramzswap_drv.c:849:
+	ret = lzo1x_1_compress(user_mem, PAGE_SIZE, src, &clen,
+				rzs->compress_workmem);

WARNING:SPLIT_STRING: quoted string split across lines
#994: FILE: drivers/staging/ramzswap/ramzswap_drv.c:878:
+			pr_info("Error allocating memory for incompressible "
+				"page: %u\n", index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: drivers/staging/ramzswap/ramzswap_drv.c:892:
+	if (xv_malloc(rzs->mem_pool, clen + sizeof(*zheader),
+			&rzs->table[index].page, &offset,

WARNING:SPLIT_STRING: quoted string split across lines
#1012: FILE: drivers/staging/ramzswap/ramzswap_drv.c:896:
+		pr_info("Error allocating memory for compressed "
+			"page: %u, size=%zu\n", index, clen);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1025: FILE: drivers/staging/ramzswap/ramzswap_drv.c:909:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1056: FILE: drivers/staging/ramzswap/ramzswap_drv.c:940:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1082: FILE: drivers/staging/ramzswap/ramzswap_drv.c:966:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1088: FILE: drivers/staging/ramzswap/ramzswap_drv.c:972:
+	if (unlikely(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_vcnt != 1'
#1088: FILE: drivers/staging/ramzswap/ramzswap_drv.c:972:
+	if (unlikely(
+		(bio->bi_sector >= (rzs->disksize >> SECTOR_SHIFT)) ||
+		(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+		(bio->bi_vcnt != 1) ||
+		(bio->bi_size != PAGE_SIZE) ||
+		(bio->bi_io_vec[0].bv_offset != 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_size != PAGE_SIZE'
#1088: FILE: drivers/staging/ramzswap/ramzswap_drv.c:972:
+	if (unlikely(
+		(bio->bi_sector >= (rzs->disksize >> SECTOR_SHIFT)) ||
+		(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+		(bio->bi_vcnt != 1) ||
+		(bio->bi_size != PAGE_SIZE) ||
+		(bio->bi_io_vec[0].bv_offset != 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_io_vec[0].bv_offset != 0'
#1088: FILE: drivers/staging/ramzswap/ramzswap_drv.c:972:
+	if (unlikely(
+		(bio->bi_sector >= (rzs->disksize >> SECTOR_SHIFT)) ||
+		(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+		(bio->bi_vcnt != 1) ||
+		(bio->bi_size != PAGE_SIZE) ||
+		(bio->bi_io_vec[0].bv_offset != 0))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1094: FILE: drivers/staging/ramzswap/ramzswap_drv.c:978:
+		(bio->bi_io_vec[0].bv_offset != 0))) {
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1138: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1022:
+	unsigned entries_per_page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1056:
+	num_table_pages = DIV_ROUND_UP(num_pages * sizeof(*rzs->table),
+					PAGE_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1179: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1063:
+		struct page *page;
+		page = vmalloc_to_page(&rzs->table[entry]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1193: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1077:
+		struct list_head *entry;
+		entry = rzs->backing_swap_extent_list.next;

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1242: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1126:
+	if (!rzs->compress_workmem) {
+		pr_err("Error allocating compressor working memory!\n");

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#1288: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1172:
+	 * We have ident mapping of sectors for ramzswap and
+	 * and the backing swap device. So, this queue flag

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1292: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1176:
+	if (!rzs->backing_swap ||
+			blk_queue_nonrot(rzs->backing_swap->bd_disk->queue))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1218:
+static int ramzswap_ioctl(struct block_device *bdev, fmode_t mode,
+			unsigned int cmd, unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1348: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1232:
+		if (copy_from_user(&disksize_kb, (void *)arg,
+						_IOC_SIZE(cmd))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1363: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1247:
+		if (copy_from_user(&memlimit_kb, (void *)arg,
+						_IOC_SIZE(cmd))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1378: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1262:
+		if (copy_from_user(&rzs->backing_swap_name, (void *)arg,
+						_IOC_SIZE(cmd))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1389: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1273:
+		struct ramzswap_ioctl_stats *stats;
+		if (!rzs->init_done) {

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#1429: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1313:
+static struct block_device_operations ramzswap_devops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1442: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1326:
+		pr_err("Error allocating disk queue for device %d\n",
+			device_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1454: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1338:
+		pr_warning("Error allocating disk structure for device %d\n",
+			device_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1376:
+		pr_warning("Invalid value for num_devices: %u\n",
+				num_devices);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1509: FILE: drivers/staging/ramzswap/ramzswap_drv.c:1393:
+	devices = kzalloc(num_devices * sizeof(struct ramzswap), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1558: FILE: drivers/staging/ramzswap/ramzswap_drv.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1582: FILE: drivers/staging/ramzswap/ramzswap_drv.h:25:
+static const unsigned max_num_devices = 32;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1592: FILE: drivers/staging/ramzswap/ramzswap_drv.h:35:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1600: FILE: drivers/staging/ramzswap/ramzswap_drv.h:43:
+static const unsigned default_disksize_perc_ram = 25;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1601: FILE: drivers/staging/ramzswap/ramzswap_drv.h:44:
+static const unsigned default_memlimit_perc_ram = 15;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1608: FILE: drivers/staging/ramzswap/ramzswap_drv.h:51:
+static const unsigned max_zpage_size_bdev = PAGE_SIZE / 2;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1615: FILE: drivers/staging/ramzswap/ramzswap_drv.h:58:
+static const unsigned max_zpage_size_nobdev = PAGE_SIZE / 4 * 3;

CHECK:BIT_MACRO: Prefer using the BIT macro
#1627: FILE: drivers/staging/ramzswap/ramzswap_drv.h:70:
+#define SECTOR_SIZE		(1 << SECTOR_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1629: FILE: drivers/staging/ramzswap/ramzswap_drv.h:72:
+#define SECTORS_PER_PAGE	(1 << SECTORS_PER_PAGE_SHIFT)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#1662: FILE: drivers/staging/ramzswap/ramzswap_drv.h:105:
+} __attribute__((aligned(4)));;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1662: FILE: drivers/staging/ramzswap/ramzswap_drv.h:105:
+} __attribute__((aligned(4)));;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#1671: FILE: drivers/staging/ramzswap/ramzswap_drv.h:114:
+} __attribute__((aligned(4)));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1676: FILE: drivers/staging/ramzswap/ramzswap_drv.h:119:
+				 * needed to enforce memlimit */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1698: FILE: drivers/staging/ramzswap/ramzswap_drv.h:141:
+	struct mutex lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1735: FILE: drivers/staging/ramzswap/ramzswap_ioctl.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1758: FILE: drivers/staging/ramzswap/ramzswap_ioctl.h:24:
+				 * size (if present) */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1774: FILE: drivers/staging/ramzswap/ramzswap_ioctl.h:40:
+} __attribute__ ((packed, aligned(4)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#1774: FILE: drivers/staging/ramzswap/ramzswap_ioctl.h:40:
+} __attribute__ ((packed, aligned(4)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000069331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 55 warnings, 43 checks, 1690 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000069331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
