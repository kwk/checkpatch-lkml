WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:SPACING: No space is necessary after a cast
#87: FILE: arch/blackfin/kernel/dma-mapping.c:163:
+		sg->dma_address = (dma_addr_t) sg_virt(sg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#161: FILE: arch/mips/mm/dma-default.c:168:
+		addr = (unsigned long) sg_virt(sg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/mips/mm/dma-default.c:172:
+^I^I^I^I                   (void *)addr, sg->length);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#177: FILE: arch/mips/mm/dma-default.c:225:
+			addr = (unsigned long) sg_virt(sg);

CHECK:SPACING: No space is necessary after a cast
#227: FILE: arch/powerpc/kernel/ibmebus.c:105:
+		sg->dma_address = (dma_addr_t) sg_virt(sg);

CHECK:SPACING: No space is necessary after a cast
#240: FILE: arch/powerpc/kernel/iommu.c:310:
+		vaddr = (unsigned long) sg_virt(s);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: arch/sparc/kernel/ioport.c:730:
+		BUG_ON(page_address(sg_page(sg)) == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_address"
#271: FILE: arch/sparc/kernel/ioport.c:730:
+		BUG_ON(page_address(sg_page(sg)) == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: arch/sparc/kernel/ioport.c:750:
+			BUG_ON(page_address(sg_page(sg)) == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_address"
#281: FILE: arch/sparc/kernel/ioport.c:750:
+			BUG_ON(page_address(sg_page(sg)) == NULL);

CHECK:SPACING: No space is necessary after a cast
#284: FILE: arch/sparc/kernel/ioport.c:752:
+			    (unsigned long) page_address(sg_page(sg)),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: arch/sparc/kernel/ioport.c:800:
+			BUG_ON(page_address(sg_page(sg)) == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_address"
#293: FILE: arch/sparc/kernel/ioport.c:800:
+			BUG_ON(page_address(sg_page(sg)) == NULL);

CHECK:SPACING: No space is necessary after a cast
#296: FILE: arch/sparc/kernel/ioport.c:802:
+			    (unsigned long) page_address(sg_page(sg)),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: arch/sparc/kernel/ioport.c:816:
+			BUG_ON(page_address(sg_page(sg)) == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_address"
#305: FILE: arch/sparc/kernel/ioport.c:816:
+			BUG_ON(page_address(sg_page(sg)) == NULL);

CHECK:SPACING: No space is necessary after a cast
#308: FILE: arch/sparc/kernel/ioport.c:818:
+			    (unsigned long) page_address(sg_page(sg)),

CHECK:SPACING: No space is necessary after a cast
#352: FILE: arch/sparc/mm/iommu.c:276:
+		if ((page = (unsigned long) page_address(sg_page(sg))) != 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#352: FILE: arch/sparc/mm/iommu.c:276:
+		if ((page = (unsigned long) page_address(sg_page(sg))) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#412: FILE: arch/sparc64/kernel/iommu_common.c:76:
+	sgaddr = (unsigned long) sg_virt(sg);

CHECK:SPACING: No space is necessary after a cast
#421: FILE: arch/sparc64/kernel/iommu_common.c:126:
+		sgaddr = (unsigned long) sg_virt(sg);

CHECK:SPACING: No space is necessary after a cast
#439: FILE: arch/sparc64/kernel/iommu_common.c:210:
+	prev  = (unsigned long) sg_virt(sg);

CHECK:SPACING: No space is necessary after a cast
#443: FILE: arch/sparc64/kernel/iommu_common.c:212:
+	dent_addr = (u32) ((unsigned long)(sg_virt(sg)) & (IO_PAGE_SIZE - 1UL));

CHECK:SPACING: No space is necessary after a cast
#449: FILE: arch/sparc64/kernel/iommu_common.c:217:
+		addr = (unsigned long) sg_virt(sg);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: arch/x86/kernel/pci-calgary_64.c:416:
+		BUG_ON(!p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#513: FILE: arch/x86/kernel/pci-calgary_64.c:437:
+		BUG_ON(!sg_page(s));

CHECK:SPACING: No space is necessary after a cast
#516: FILE: arch/x86/kernel/pci-calgary_64.c:439:
+		vaddr = (unsigned long) sg_virt(s);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: arch/x86/kernel/pci-nommu_64.c:65:
+		BUG_ON(!sg_page(s));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367101.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 8 warnings, 19 checks, 374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367101.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
