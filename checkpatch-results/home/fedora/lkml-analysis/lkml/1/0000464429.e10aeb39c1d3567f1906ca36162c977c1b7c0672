WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   systems with 1k nodes / processors we have several gigabytes just tied up

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
# name            <objects> <order> <objsize> <slabs>/<partial>/<cpu> <flags>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:MISORDERED_TYPE: type 'short unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#197: FILE: include/linux/mm_types.h:28:
+			short unsigned int inuse;

WARNING:MISORDERED_TYPE: type 'short unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#198: FILE: include/linux/mm_types.h:29:
+			short unsigned int offset;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#246: FILE: include/linux/slub_def.h:1:
+#ifndef _LINUX_SLUB_DEF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#274: FILE: include/linux/slub_def.h:29:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#274: FILE: include/linux/slub_def.h:29:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#274: FILE: include/linux/slub_def.h:29:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#275: FILE: include/linux/slub_def.h:30:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#275: FILE: include/linux/slub_def.h:30:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#275: FILE: include/linux/slub_def.h:30:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#282: FILE: include/linux/slub_def.h:37:
+	struct mutex flushing;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#318: FILE: include/linux/slub_def.h:73:
+	if (size <=    8) return 3;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#319: FILE: include/linux/slub_def.h:74:
+	if (size <=   16) return 4;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#320: FILE: include/linux/slub_def.h:75:
+	if (size <=   32) return 5;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#321: FILE: include/linux/slub_def.h:76:
+	if (size <=   64) return 6;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#323: FILE: include/linux/slub_def.h:78:
+	if (size <=   96) return KMALLOC_SHIFT_HIGH + 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#325: FILE: include/linux/slub_def.h:80:
+	if (size <=  128) return 7;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#327: FILE: include/linux/slub_def.h:82:
+	if (size <=  192) return KMALLOC_SHIFT_HIGH + 2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#329: FILE: include/linux/slub_def.h:84:
+	if (size <=  256) return 8;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#330: FILE: include/linux/slub_def.h:85:
+	if (size <=  512) return 9;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#331: FILE: include/linux/slub_def.h:86:
+	if (size <= 1024) return 10;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#332: FILE: include/linux/slub_def.h:87:
+	if (size <= 2048) return 11;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#333: FILE: include/linux/slub_def.h:88:
+	if (size <= 4096) return 12;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#334: FILE: include/linux/slub_def.h:89:
+	if (size <=   8 * 1024) return 13;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#335: FILE: include/linux/slub_def.h:90:
+	if (size <=  16 * 1024) return 14;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#336: FILE: include/linux/slub_def.h:91:
+	if (size <=  32 * 1024) return 15;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#337: FILE: include/linux/slub_def.h:92:
+	if (size <=  64 * 1024) return 16;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#338: FILE: include/linux/slub_def.h:93:
+	if (size <= 128 * 1024) return 17;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#339: FILE: include/linux/slub_def.h:94:
+	if (size <= 256 * 1024) return 18;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#358: FILE: include/linux/slub_def.h:113:
+		extern void __kmalloc_size_too_large(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: braces {} should be used on all arms of this statement
#372: FILE: include/linux/slub_def.h:127:
+	if (__builtin_constant_p(size) && !(flags & SLUB_DMA)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#376: FILE: include/linux/slub_def.h:131:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#382: FILE: include/linux/slub_def.h:137:
+	if (__builtin_constant_p(size) && !(flags & SLUB_DMA)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#386: FILE: include/linux/slub_def.h:141:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: include/linux/slub_def.h:146:
+extern void *__kmalloc_node(size_t size, gfp_t flags, int node);

CHECK:BRACES: braces {} should be used on all arms of this statement
#395: FILE: include/linux/slub_def.h:150:
+	if (__builtin_constant_p(size) && !(flags & SLUB_DMA)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#399: FILE: include/linux/slub_def.h:154:
+	} else

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#429: FILE: init/Kconfig:531:
+choice
+	prompt "Choose SLAB allocator"
+	default SLAB
+	help
+	   This options allows the use of alternate SLAB allocators.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'chache' may be misspelled - perhaps 'cache'?
#439: FILE: init/Kconfig:541:
+	  well in all environments. It organizes chache hot objects in
 	                                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#498: FILE: mm/slub.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#510: FILE: mm/slub.c:13:
+ * ^IA. Slab defragmentation support$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#511: FILE: mm/slub.c:14:
+ * ^IB. NUMA cache line optimizations and per node partial lists.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: mm/slub.c:15:
+ * ^IC. Lockless allocs via separate freelists for cpu slabs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#513: FILE: mm/slub.c:16:
+ * ^ID. Lockless partial list handling$

WARNING:TYPO_SPELLING: 'Futher' may be misspelled - perhaps 'Further'?
#515: FILE: mm/slub.c:18:
+ *  Futher issues to solve:
     ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: mm/slub.c:20:
+ * ^I1. Support the Slab debugging options$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: mm/slub.c:21:
+ * ^I2. Move logic for draining page allocator queues$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: mm/slub.c:22:
+ * ^I   into the page allocator.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#534: FILE: mm/slub.c:37:
+ * PageActive ^I^IThe slab is used as an cpu cache. Allocations$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#535: FILE: mm/slub.c:38:
+ * ^I^I^Imay be performed from the slab. The slab is not$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#536: FILE: mm/slub.c:39:
+ * ^I^I^Ion a partial list.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#539: FILE: mm/slub.c:42:
+ * ^I^I^Ito push back per cpu slabs if they are unused$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#540: FILE: mm/slub.c:43:
+ * ^I^I^Ifor a longer time period.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#543: FILE: mm/slub.c:46:
+ * ^I^I^Icached instead we use the page allocator for$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: mm/slub.c:47:
+ * ^I^I^Iobject allocation and freeing.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#603: FILE: mm/slub.c:106:
+ * ^I^I^ICore slab cache functions$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: mm/slub.c:132:
+	struct page * page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: mm/slub.c:150:
+	mod_zone_page_state(page_zone(page),
+		(s->flags & SLAB_RECLAIM_ACCOUNT) ?

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: mm/slub.c:183:
+	mod_zone_page_state(page_zone(page),
+		(s->flags & SLAB_RECLAIM_ACCOUNT) ?

ERROR:SPACING: space prohibited after that '-' (ctx:ExW)
#682: FILE: mm/slub.c:185:
+		- pages);
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#700: FILE: mm/slub.c:203:
+	if (unlikely(s->flags & SLAB_DESTROY_BY_RCU)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#708: FILE: mm/slub.c:211:
+	} else

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#741: FILE: mm/slub.c:244:
+static void __always_inline add_partial(struct kmem_cache *s, struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#749: FILE: mm/slub.c:252:
+static void __always_inline remove_partial(struct kmem_cache *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: mm/slub.c:253:
+static void __always_inline remove_partial(struct kmem_cache *s,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: mm/slub.c:267:
+static __always_inline int lock_and_del_slab(struct kmem_cache *s,
+						struct page *page)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#791: FILE: mm/slub.c:294:
+		if (likely(page_to_nid(page) == searchnode) &&
[...]
+				goto out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: mm/slub.c:295:
+		if (likely(page_to_nid(page) == searchnode) &&
+			lock_and_del_slab(s, page))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#843: FILE: mm/slub.c:346:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#844: FILE: mm/slub.c:347:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"
+			" mapping=%p count=%d \n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#844: FILE: mm/slub.c:347:
+			" mapping=%p count=%d \n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#846: FILE: mm/slub.c:349:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: mm/slub.c:355:
+static int check_valid_pointer(struct kmem_cache *s, struct page *page,
+					 void *object, void *origin)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#858: FILE: mm/slub.c:361:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in"

WARNING:SPLIT_STRING: quoted string split across lines
#859: FILE: mm/slub.c:362:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in"
+			" range (%p-%p) in page %p\n", s->name, s->size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#866: FILE: mm/slub.c:369:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\n"

WARNING:SPLIT_STRING: quoted string split across lines
#868: FILE: mm/slub.c:371:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#868: FILE: mm/slub.c:371:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#903: FILE: mm/slub.c:406:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."

WARNING:SPLIT_STRING: quoted string split across lines
#904: FILE: mm/slub.c:407:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."
+			" counter is %d but counted were %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#908: FILE: mm/slub.c:411:
+		printk(KERN_CRIT "****** Trying to continue by marking "

WARNING:SPLIT_STRING: quoted string split across lines
#909: FILE: mm/slub.c:412:
+		printk(KERN_CRIT "****** Trying to continue by marking "
+			"all objects in the slab used (memory leak!)\n");

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSlab>
#929: FILE: mm/slub.c:432:
+	__ClearPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPagePrivate>
#930: FILE: mm/slub.c:433:
+	__ClearPagePrivate(page);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#951: FILE: mm/slub.c:454:
+	__SetPageSlab(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#953: FILE: mm/slub.c:456:
+	if (s->objects > 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#968: FILE: mm/slub.c:471:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <__SetPagePrivate>
#969: FILE: mm/slub.c:472:
+		__SetPagePrivate(page);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#984: FILE: mm/slub.c:487:
+static void __always_inline putback_slab(struct kmem_cache *s, struct page *page)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#999: FILE: mm/slub.c:502:
+static void __always_inline deactivate_slab(struct kmem_cache *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: mm/slub.c:503:
+static void __always_inline deactivate_slab(struct kmem_cache *s,
+						struct page *page, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: mm/slub.c:595:
+static __always_inline void *__slab_alloc(struct kmem_cache *s,
+					gfp_t gfpflags, int node)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1116: FILE: mm/slub.c:619:
+	page->freelist = next_object = object[page->offset];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1148: FILE: mm/slub.c:651:
+	if (s->cpu_slab[cpu]) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1153: FILE: mm/slub.c:656:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1184: FILE: mm/slub.c:687:
+	struct page * page;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1217: FILE: mm/slub.c:720:
+	prior = object[page->offset] = page->freelist;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1249: FILE: mm/slub.c:752:
+	printk(KERN_CRIT "slab_free %s: object %p already free.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1250: FILE: mm/slub.c:753:
+	printk(KERN_CRIT "slab_free %s: object %p already free.\n",
+					s->name, object);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1258: FILE: mm/slub.c:761:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free "

WARNING:SPLIT_STRING: quoted string split across lines
#1259: FILE: mm/slub.c:762:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free "
+			"object(%p) outside of slab.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1265: FILE: mm/slub.c:768:
+		printk(KERN_CRIT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1271: FILE: mm/slub.c:774:
+	printk(KERN_CRIT "slab_free %s(%d): object at %p"

WARNING:SPLIT_STRING: quoted string split across lines
#1272: FILE: mm/slub.c:775:
+	printk(KERN_CRIT "slab_free %s(%d): object at %p"
+			" belongs to slab %s(%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1278: FILE: mm/slub.c:781:
+	printk(KERN_CRIT "***** Trying to continue by not "

WARNING:SPLIT_STRING: quoted string split across lines
#1279: FILE: mm/slub.c:782:
+	printk(KERN_CRIT "***** Trying to continue by not "
+			"freeing object.\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1288: FILE: mm/slub.c:791:
+	struct page * page = virt_to_page(x);

WARNING:TYPO_SPELLING: 'Mininum' may be misspelled - perhaps 'Minimum'?
#1321: FILE: mm/slub.c:824:
+ * Mininum order of slab pages. This influences locking overhead and slab
    ^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1326: FILE: mm/slub.c:829:
+static int slab_min_order = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1333: FILE: mm/slub.c:836:
+	if ((size & (size -1)) == 0) {
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1338: FILE: mm/slub.c:841:
+		int order = fls(size) -1 - PAGE_SHIFT;
 		                      ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1356: FILE: mm/slub.c:859:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1363: FILE: mm/slub.c:866:
+static unsigned long calculate_alignment(unsigned long flags,
+		unsigned long align)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1365: FILE: mm/slub.c:868:
+	if (flags & (SLAB_MUST_HWCACHE_ALIGN|SLAB_HWCACHE_ALIGN))
 	                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1375: FILE: mm/slub.c:878:
+int kmem_cache_open(struct kmem_cache *s,
+		const char *name, size_t size,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1383: FILE: mm/slub.c:886:
+	BUG_ON(flags & SLUB_UNIMPLEMENTED);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1411: FILE: mm/slub.c:914:
+	if (size * 2 < (PAGE_SIZE << calculate_order(size)) &&
+		((flags & SLAB_DESTROY_BY_RCU) || ctor || dtor)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1419: FILE: mm/slub.c:922:
+		 * destructor.
+		*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1434: FILE: mm/slub.c:937:
+	BUG_ON(s->objects > 65535);

WARNING:SPLIT_STRING: quoted string split across lines
#1444: FILE: mm/slub.c:947:
+		panic("Cannot create slab %s size=%ld realsize=%d "
+			"order=%d offset=%d flags=%lx\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1456: FILE: mm/slub.c:959:
+	struct page * page;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1507: FILE: mm/slub.c:1010:
+		if (!page->inuse) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1510: FILE: mm/slub.c:1013:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1545: FILE: mm/slub.c:1048:
+	BUG_ON(kmem_cache_close(s));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1550: FILE: mm/slub.c:1053:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1552: FILE: mm/slub.c:1055:
+static unsigned long count_objects(struct kmem_cache *s,
+	struct list_head *list, unsigned long *nodes)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1568: FILE: mm/slub.c:1071:
+static unsigned long slab_objects(struct kmem_cache *s,
+	unsigned long *p_total, unsigned long *p_cpu_slabs,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1617: FILE: mm/slub.c:1120:
+	get_option (&str, &slab_min_order);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1622: FILE: mm/slub.c:1125:
+__setup("slab_min_order=", setup_slab_min_order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1625: FILE: mm/slub.c:1128:
+static struct kmem_cache *create_kmalloc_cache(struct kmem_cache *s,
+		const char *name, int size)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1627: FILE: mm/slub.c:1130:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: mm/slub.c:1132:
+	if (!kmem_cache_open(s, name, size, ARCH_KMALLOC_MINALIGN,
+			0, NULL, NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1631: FILE: mm/slub.c:1134:
+		panic("Creation of kmalloc slab %s size=%d failed.\n",
+			name, size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1642: FILE: mm/slub.c:1145:
+	BUG_ON(size < 0);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*x)...) over kmalloc(sizeof(struct kmem_cache)...)
#1652: FILE: mm/slub.c:1155:
+	x = kmalloc(sizeof(struct kmem_cache), flags & ~(__GFP_DMA));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1655: FILE: mm/slub.c:1158:
+	if (!x)
+		panic("Unable to allocate memory for dma cache\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1693: FILE: mm/slub.c:1196:
+	BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1695: FILE: mm/slub.c:1198:
+	BUG_ON(!s);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1718: FILE: mm/slub.c:1221:
+int slab_is_available(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1727: FILE: mm/slub.c:1230:
+		create_kmalloc_cache(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1748: FILE: mm/slub.c:1251:
+		BUG_ON(!name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1764: FILE: mm/slub.c:1267:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1776: FILE: mm/slub.c:1279:
+struct kmem_cache *kmem_cache_create(const char *name, size_t size,
+		size_t align, unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1784: FILE: mm/slub.c:1287:
+	if (!ctor && !dtor && !(flags & SLUB_NO_MERGE) &&
+			align <= ARCH_SLAB_MINALIGN) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1799: FILE: mm/slub.c:1302:
+			printk(KERN_INFO "SLUB: Merging slab_cache %s size %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1800: FILE: mm/slub.c:1303:
+			printk(KERN_INFO "SLUB: Merging slab_cache %s size %d"
+				" into kmalloc array size %d\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct kmem_cache)...)
#1807: FILE: mm/slub.c:1310:
+	s = kmalloc(sizeof(struct kmem_cache), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1852: FILE: mm/slub.c:1355:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#1875: FILE: mm/slub.c:1378:
+	seq_puts(m, "# name            <objects> <order> <objsize>"
+		" <slabs>/<partial>/<cpu> <flags>");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1936: FILE: mm/slub.c:1439:
+	objects = slab_objects(s, &total_slabs, &cpu_slabs,
+					&partial_slabs, nodes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1965: FILE: mm/slub.c:1468:
+	x = kasprintf(GFP_KERNEL, "%lu/%lu/%lu", total_slabs, partial_slabs,
+						cpu_slabs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1968: FILE: mm/slub.c:1471:
+	seq_printf(m, "%-21s %6lu %1d %7u %12s %5s",
+		s->name, objects, s->order, s->size, x, options);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1979: FILE: mm/slub.c:1482:
+struct seq_operations slabinfo_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1993: FILE: mm/slub.c:1496:
+static int __cpuinit slab_cpuup_callback(struct notifier_block *nfb,
+		unsigned long action, void *hcpu)

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after slab_notifier
#2008: FILE: mm/slub.c:1511:
+static struct notifier_block __cpuinitdata slab_notifier =

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2009: FILE: mm/slub.c:1512:
+static struct notifier_block __cpuinitdata slab_notifier =
+	{ &slab_cpuup_callback, NULL, 0 };

CHECK:SPACING: No space is necessary after a cast
#2063: FILE: mm/slub.c:1566:
+#define next_reap_node(void) do { } while (0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2066: FILE: mm/slub.c:1569:
+#define REAPTIMEOUT_CPUC	(2*HZ)
                         	  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2076: FILE: mm/slub.c:1579:
+	schedule_delayed_work(&__get_cpu_var(reap_work),
+				      REAPTIMEOUT_CPUC);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2079: FILE: mm/slub.c:1582:
+static void __devinit start_cpu_timer(int cpu)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reap_work->work.func"
#2088: FILE: mm/slub.c:1591:
+	if (keventd_up() && reap_work->work.func == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2106: FILE: mm/slub.c:1609:
+__initcall(cpucache_init);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464429.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 30 errors, 71 warnings, 62 checks, 1917 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464429.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
