WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: drivers/acpi/power_meter.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#144: FILE: drivers/acpi/power_meter.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#145: FILE: drivers/acpi/power_meter.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:BIT_MACRO: Prefer using the BIT macro
#166: FILE: drivers/acpi/power_meter.c:40:
+#define POWER_METER_CAN_MEASURE	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#167: FILE: drivers/acpi/power_meter.c:41:
+#define POWER_METER_CAN_TRIP	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#168: FILE: drivers/acpi/power_meter.c:42:
+#define POWER_METER_CAN_CAP	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#169: FILE: drivers/acpi/power_meter.c:43:
+#define POWER_METER_CAN_NOTIFY	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#170: FILE: drivers/acpi/power_meter.c:44:
+#define POWER_METER_IS_BATTERY	(1 << 8)

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#207: FILE: drivers/acpi/power_meter.c:81:
+	struct mutex		lock;

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#289: FILE: drivers/acpi/power_meter.c:163:
+	res = strict_strtoul(buf, 10, &temp);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#360: FILE: drivers/acpi/power_meter.c:234:
+	res = strict_strtoul(buf, 10, &temp);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#426: FILE: drivers/acpi/power_meter.c:300:
+	res = strict_strtoul(buf, 10, &temp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#505: FILE: drivers/acpi/power_meter.c:379:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#559: FILE: drivers/acpi/power_meter.c:433:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#640: FILE: drivers/acpi/power_meter.c:514:
+		struct acpi_device *obj = resource->domain_devices[i];
+		if (!obj)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#678: FILE: drivers/acpi/power_meter.c:552:
+	resource->domain_devices = kzalloc(sizeof(struct acpi_device *) *
+					   pss->package.count, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: drivers/acpi/power_meter.c:560:
+	resource->holders_dir = kobject_create_and_add("measures",
+					&resource->acpi_dev->dev.kobj);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pss->package.elements[i]
#696: FILE: drivers/acpi/power_meter.c:570:
+		union acpi_object *element = &(pss->package.elements[i]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: drivers/acpi/power_meter.c:587:
+		res = sysfs_create_link(resource->holders_dir, &obj->dev.kobj,
+				      kobject_name(&obj->dev.kobj));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#741: FILE: drivers/acpi/power_meter.c:615:
+		sensors->dev_attr.attr.mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#769: FILE: drivers/acpi/power_meter.c:643:
+		sensors->dev_attr.attr.mode = S_IRUGO | S_IWUSR;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pss->package.elements[i]
#912: FILE: drivers/acpi/power_meter.c:786:
+		union acpi_object *element = &(pss->package.elements[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#980: FILE: drivers/acpi/power_meter.c:854:
+		BUG();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*resource)...) over kzalloc(sizeof(struct acpi_power_meter_resource)...)
#996: FILE: drivers/acpi/power_meter.c:870:
+	resource = kzalloc(sizeof(struct acpi_power_meter_resource),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1013: FILE: drivers/acpi/power_meter.c:887:
+	resource->trip[0] = resource->trip[1] = -1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 12 warnings, 12 checks, 1035 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
