WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
This patch is for implemening percpu counter of array. Unlike percpu counter,

WARNING:TYPO_SPELLING: 'coutner' may be misspelled - perhaps 'counter'?
#85: FILE: include/linux/percpu_counter.h:93:
+ *   DEFINE_ARRAY_COUTER(coutner, NR_MY_ELEMENTS);
                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'coutner' may be misspelled - perhaps 'counter'?
#93: FILE: include/linux/percpu_counter.h:101:
+ *    array_counter_add(GET_ARC(&object->coutner), idx, num);
                                          ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: include/linux/percpu_counter.h:118:
+};
+/* For static size definitions */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#112: FILE: include/linux/percpu_counter.h:120:
+#define DEFINE_ARRAY_COUNTER(name, elements) \
+	struct {\
+		struct array_counter ac;\
+		long __counters[(elements)];} name;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ';' (ctx:VxV)
#115: FILE: include/linux/percpu_counter.h:123:
+		long __counters[(elements)];} name;
 		                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: include/linux/percpu_counter.h:127:
+#define INIT_ARC(x,s) do {		\
                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#119: FILE: include/linux/percpu_counter.h:127:
+#define INIT_ARC(x,s) do {		\
+	memset((x), 0, sizeof(*(x)));	\
+	array_counter_init(&(x)->ac, (s));\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#119: FILE: include/linux/percpu_counter.h:127:
+#define INIT_ARC(x,s) do {		\
+	memset((x), 0, sizeof(*(x)));	\
+	array_counter_init(&(x)->ac, (s));\
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/percpu_counter.h:132:
+extern int array_counter_init(struct array_counter *ac, int size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/percpu_counter.h:133:
+extern void array_counter_destroy(struct array_counter *ac);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/percpu_counter.h:134:
+extern void array_counter_add(struct array_counter *ac, int idx, int val);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/linux/percpu_counter.h:136:
+static inline long array_counter_read(struct array_counter *ac,int idx)
                                                               ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#144: FILE: include/linux/percpu_counter.h:197:
+};
+/* For static size definitions (please see CONFIG_SMP case) */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#145: FILE: include/linux/percpu_counter.h:198:
+#define DEFINE_ARRAY_COUNTER(name, elements) \
+	struct {\
+		struct array_counter ac;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#148: FILE: include/linux/percpu_counter.h:201:
+		long __counters[elements];\

ERROR:SPACING: space required after that close brace '}'
#149: FILE: include/linux/percpu_counter.h:202:
+	}name;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: include/linux/percpu_counter.h:204:
+#define INIT_ARC(x,s) do {		\
                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#151: FILE: include/linux/percpu_counter.h:204:
+#define INIT_ARC(x,s) do {		\
+	memset((x), 0, sizeof(*(x)));	\
+	array_counter_init(&(x)->ac, (s));\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#151: FILE: include/linux/percpu_counter.h:204:
+#define INIT_ARC(x,s) do {		\
+	memset((x), 0, sizeof(*(x)));	\
+	array_counter_init(&(x)->ac, (s));\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#161: FILE: include/linux/percpu_counter.h:214:
+}
+static inline void array_counter_destroy(struct array_counter *ac)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: lib/percpu_counter.c:148:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count >= ac->v.batch'
#243: FILE: lib/percpu_counter.c:187:
+	if ((count >= ac->v.batch) || (-count >= ac->v.batch)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#243: FILE: lib/percpu_counter.c:187:
+	if ((count >= ac->v.batch) || (-count >= ac->v.batch)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#246: FILE: lib/percpu_counter.c:190:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: lib/percpu_counter.c:195:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: lib/percpu_counter.c:197:
+static int __cpuinit array_counter_hotcpu_callback(struct notifier_block *nb,
+					unsigned long action, void *hcpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: lib/percpu_counter.c:203:
+	int idx;
+	if (action != CPU_DEAD)

ERROR:SPACING: space required before the open brace '{'
#270: FILE: lib/percpu_counter.c:214:
+		for (idx = 0; idx < pac->elements; idx++){

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066173.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 7 warnings, 14 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066173.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
