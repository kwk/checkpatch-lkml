WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
>>> That is, start at task->stack + sizeof(thread_info), and stack up on that.

WARNING:TYPO_SPELLING: 'consistant' may be misspelled - perhaps 'consistent'?
#47: 
>> really consistant?
          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'whithout' may be misspelled - perhaps 'without'?
#70: 
So I guess I'm missing some entries but I can allocate 32 slots whithout problems.
                                                                ^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#199: FILE: arch/x86/kernel/ftrace.c:54:
+	} __attribute__((packed));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#228: FILE: arch/x86/kernel/ftrace.c:81:
+	if (!ftrace_return_state.bitmap) {
+		goto fail;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#235: FILE: arch/x86/kernel/ftrace.c:88:
+	smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#241: FILE: arch/x86/kernel/ftrace.c:94:
+	smp_mb();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#246: FILE: arch/x86/kernel/ftrace.c:99:
+
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#269: FILE: arch/x86/kernel/ftrace.c:122:
+	asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#287: FILE: arch/x86/kernel/ftrace.c:140:
+	asm volatile (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: arch/x86/kernel/ftrace.c:173:
+^Iftrace_return_state.trampoline = kmalloc(sizeof(union ftrace_return_code_union)^I* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#329: FILE: arch/x86/kernel/ftrace.c:182:
+	ftrace_return_state.func_table = kmalloc(FTRACE_TRAMPOLINE_SIZE *
+						 sizeof(struct ftrace_retfunc),
+						 GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#341: FILE: arch/x86/kernel/ftrace.c:194:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#353: FILE: arch/x86/kernel/ftrace.c:340:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#385: FILE: include/linux/ftrace.h:244:
+extern void ftrace_return_stub(struct ftrace_retfunc *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_retfunc *' should also have an identifier name
#385: FILE: include/linux/ftrace.h:244:
+extern void ftrace_return_stub(struct ftrace_retfunc *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#386: FILE: include/linux/ftrace.h:245:
+extern void register_ftrace_return(void (*func)(struct ftrace_retfunc *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_retfunc *' should also have an identifier name
#387: FILE: include/linux/ftrace.h:246:
+extern void (*ftrace_function_return)(struct ftrace_retfunc *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: include/linux/ftrace.h:247:
+extern void unregister_ftrace_return(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: kernel/trace/ftrace.c:1470:
+
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#562: FILE: kernel/trace/trace.h:410:
+	(TRACE_ITER_PRINT_PARENT|TRACE_ITER_SYM_OFFSET|TRACE_ITER_SYM_ADDR)
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#562: FILE: kernel/trace/trace.h:410:
+	(TRACE_ITER_PRINT_PARENT|TRACE_ITER_SYM_OFFSET|TRACE_ITER_SYM_ADDR)
 	                                              ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#569: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#574: FILE: kernel/trace/trace_functions_return.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: kernel/trace/trace_functions_return.c:14:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#602: FILE: kernel/trace/trace_functions_return.c:29:
+	int cpu;
+	for_each_online_cpu(cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: kernel/trace/trace_functions_return.c:62:
+		seq_print_ip_sym(s, field->ip,
+				(trace_flags & TRACE_ITER_SYM_MASK));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: kernel/trace/trace_functions_return.c:64:
+		ret = trace_seq_printf(s, " Called: %llu Returned: %llu\n",
+					field->calltime, field->rettime);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#647: FILE: kernel/trace/trace_functions_return.c:74:
+static struct tracer return_trace __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209609.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 14 checks, 507 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209609.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
