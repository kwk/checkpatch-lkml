ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#95: FILE: include/linux/sunrpc/svcsock.h:31:
+	struct page *		sk_pages[RPCSVC_MAXPAGES];	/* received data */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rqstp->rq_pages[i]"
#150: FILE: net/sunrpc/svcsock.c:829:
+		if (rqstp->rq_pages[i] != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: net/sunrpc/svcsock.c:831:
+		BUG_ON(svsk->sk_pages[i] == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!svsk->sk_pages[i]"
#152: FILE: net/sunrpc/svcsock.c:831:
+		BUG_ON(svsk->sk_pages[i] == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: net/sunrpc/svcsock.c:862:
+		BUG_ON(svsk->sk_pages[i] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!svsk->sk_pages[i]"
#183: FILE: net/sunrpc/svcsock.c:862:
+		BUG_ON(svsk->sk_pages[i] == NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#280: FILE: net/sunrpc/svcsock.c:964:
+	if (rqstp->rq_arg.len <= rqstp->rq_arg.head[0].iov_len) {
[...]
-	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#286: FILE: net/sunrpc/svcsock.c:967:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#314: FILE: net/sunrpc/svcsock.c:992:
+	printk(KERN_NOTICE "%s: recvfrom returned errno %d\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123894.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 5 checks, 253 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123894.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
