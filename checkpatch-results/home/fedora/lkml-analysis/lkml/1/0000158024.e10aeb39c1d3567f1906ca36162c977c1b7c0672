WARNING:TYPO_SPELLING: 'PACH' may be misspelled - perhaps 'PATCH'?
#23: 
Subject: [PACH][RFC] SMACK : add  logging support V1
          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
the following patch, against current 2.6.29-rc7, add logging of smack decisions. 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: Documentation/Smack.txt:501:
+2: log accepted $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: Documentation/Smack.txt:502:
+3: log denied&accepted $

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#109: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: security/smack/smack_logging.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#120: FILE: security/smack/smack_logging.c:7:
+ * ^I^I^IJames Morris <jmorris@redhat.com>$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: security/smack/smack_logging.c:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: security/smack/smack_logging.c:53:
+                        struct smack_audit_data *ad, u8 *proto)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: security/smack/smack_logging.c:53:
+int ipv4_skb_to_auditdata(struct sk_buff *skb,
+                        struct smack_audit_data *ad, u8 *proto)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: security/smack/smack_logging.c:53:
+                        struct smack_audit_data *ad, u8 *proto)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: security/smack/smack_logging.c:55:
+        int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: security/smack/smack_logging.c:55:
+        int ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: security/smack/smack_logging.c:56:
+        struct iphdr *ih;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: security/smack/smack_logging.c:56:
+        struct iphdr *ih;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: security/smack/smack_logging.c:58:
+        ih = ip_hdr(skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: security/smack/smack_logging.c:58:
+        ih = ip_hdr(skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: security/smack/smack_logging.c:59:
+        if (ih == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: security/smack/smack_logging.c:59:
+        if (ih == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ih"
#172: FILE: security/smack/smack_logging.c:59:
+        if (ih == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: security/smack/smack_logging.c:74:
+		struct tcphdr *th = tcp_hdr(skb);
+		if (th == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!th"
#187: FILE: security/smack/smack_logging.c:74:
+		if (th == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: security/smack/smack_logging.c:83:
+		struct udphdr *uh = udp_hdr(skb);
+		if (uh == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uh"
#196: FILE: security/smack/smack_logging.c:83:
+		if (uh == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: security/smack/smack_logging.c:91:
+                struct dccp_hdr *dh = dccp_hdr(skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: security/smack/smack_logging.c:91:
+                struct dccp_hdr *dh = dccp_hdr(skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: security/smack/smack_logging.c:92:
+                if (dh == NULL)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: security/smack/smack_logging.c:92:
+                struct dccp_hdr *dh = dccp_hdr(skb);
+                if (dh == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: security/smack/smack_logging.c:92:
+                if (dh == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dh"
#205: FILE: security/smack/smack_logging.c:92:
+                if (dh == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: security/smack/smack_logging.c:93:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: security/smack/smack_logging.c:93:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: security/smack/smack_logging.c:95:
+                ad->u.net.sport = dh->dccph_sport;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: security/smack/smack_logging.c:95:
+                ad->u.net.sport = dh->dccph_sport;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: security/smack/smack_logging.c:96:
+                ad->u.net.dport = dh->dccph_dport;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: security/smack/smack_logging.c:96:
+                ad->u.net.dport = dh->dccph_dport;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: security/smack/smack_logging.c:97:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: security/smack/smack_logging.c:97:
+                break;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: security/smack/smack_logging.c:101:
+		struct sctphdr *sh = sctp_hdr(skb);
+		if (sh == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sh"
#214: FILE: security/smack/smack_logging.c:101:
+		if (sh == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: security/smack/smack_logging.c:105:
+        ^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: security/smack/smack_logging.c:105:
+        ^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: security/smack/smack_logging.c:105:
+        ^Ibreak;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#225: FILE: security/smack/smack_logging.c:112:
+}
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: security/smack/smack_logging.c:122:
+                        struct smack_audit_data *ad, u8 *proto)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: security/smack/smack_logging.c:122:
+int ipv6_skb_to_auditdata(struct sk_buff *skb,
+                        struct smack_audit_data *ad, u8 *proto)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: security/smack/smack_logging.c:122:
+                        struct smack_audit_data *ad, u8 *proto)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: security/smack/smack_logging.c:124:
+        int offset, ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: security/smack/smack_logging.c:124:
+        int offset, ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: security/smack/smack_logging.c:128:
+        ip6 = ipv6_hdr(skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: security/smack/smack_logging.c:128:
+        ip6 = ipv6_hdr(skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: security/smack/smack_logging.c:129:
+        if (ip6 == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: security/smack/smack_logging.c:129:
+        if (ip6 == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip6"
#242: FILE: security/smack/smack_logging.c:129:
+        if (ip6 == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: security/smack/smack_logging.c:132:
+        ipv6_addr_copy(&ad->u.net.v6info.daddr, &ip6->daddr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: security/smack/smack_logging.c:132:
+        ipv6_addr_copy(&ad->u.net.v6info.daddr, &ip6->daddr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: security/smack/smack_logging.c:133:
+        ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: security/smack/smack_logging.c:133:
+        ret = 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: security/smack/smack_logging.c:135:
+	 * skip them */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: security/smack/smack_logging.c:137:
+        offset += sizeof(*ip6);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: security/smack/smack_logging.c:137:
+        offset += sizeof(*ip6);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: security/smack/smack_logging.c:139:
+        offset = ipv6_skip_exthdr(skb, offset, &nexthdr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: security/smack/smack_logging.c:139:
+        offset = ipv6_skip_exthdr(skb, offset, &nexthdr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: security/smack/smack_logging.c:140:
+        if (offset < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: security/smack/smack_logging.c:140:
+        if (offset < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: security/smack/smack_logging.c:141:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: security/smack/smack_logging.c:141:
+                return 0;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!th"
#262: FILE: security/smack/smack_logging.c:149:
+		if (th == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: security/smack/smack_logging.c:160:
+                if (uh == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: security/smack/smack_logging.c:160:
+                if (uh == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uh"
#273: FILE: security/smack/smack_logging.c:160:
+                if (uh == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: security/smack/smack_logging.c:161:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: security/smack/smack_logging.c:161:
+                        break;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dh"
#284: FILE: security/smack/smack_logging.c:171:
+		if (dh == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sh"
#295: FILE: security/smack/smack_logging.c:182:
+		if (sh == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: security/smack/smack_logging.c:186:
+        ^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: security/smack/smack_logging.c:186:
+        ^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: security/smack/smack_logging.c:186:
+        ^Ibreak;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: security/smack/smack_logging.c:195:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: security/smack/smack_logging.c:197:
+static inline void avc_print_ipv6_addr(struct audit_buffer *ab,
+			struct in6_addr *addr, __be16 port,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: security/smack/smack_logging.c:207:
+static inline void avc_print_ipv4_addr(struct audit_buffer *ab, __be32 addr,
+			__be16 port, char *name1, char *name2)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#327: FILE: security/smack/smack_logging.c:214:
+}
+/**

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: security/smack/smack_logging.c:224:
+	int i = 0;
+	if (access & MAY_READ)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: security/smack/smack_logging.c:235:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: security/smack/smack_logging.c:248:
+void smack_log(char *subject_label, char *object_label, int request,
+		 int result, struct smack_audit_data *a)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#399: FILE: security/smack/smack_logging.c:286:
+	if (a==NULL)
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!a"
#399: FILE: security/smack/smack_logging.c:286:
+	if (a==NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: security/smack/smack_logging.c:299:
+			struct dentry *dentry = a->u.fs.path.dentry;
+			if (a->u.fs.path.mnt) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: security/smack/smack_logging.c:308:
+			struct dentry *dentry;
+			inode = a->u.fs.inode;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: security/smack/smack_logging.c:318:
+			audit_log_format(ab, " dev=%s ino=%lu",
+					inode->i_sb->s_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: security/smack/smack_logging.c:340:
+				avc_print_ipv4_addr(ab, inet->rcv_saddr,
+						inet->sport,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: security/smack/smack_logging.c:343:
+				avc_print_ipv4_addr(ab, inet->daddr,
+						inet->dport,

WARNING:TABSTOP: Statements should start on a tabstop
#461: FILE: security/smack/smack_logging.c:348:
+			       struct inet_sock *inet = inet_sk(sk);

WARNING:TABSTOP: Statements should start on a tabstop
#462: FILE: security/smack/smack_logging.c:349:
+			       struct ipv6_pinfo *inet6 = inet6_sk(sk);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: security/smack/smack_logging.c:352:
+			       avc_print_ipv6_addr(ab, &inet6->rcv_saddr,
+					       inet->sport,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: security/smack/smack_logging.c:355:
+			       avc_print_ipv6_addr(ab, &inet6->daddr,
+					       inet->dport,

WARNING:TABSTOP: Statements should start on a tabstop
#470: FILE: security/smack/smack_logging.c:357:
+			       break;

WARNING:TABSTOP: Statements should start on a tabstop
#471: FILE: security/smack/smack_logging.c:358:
+				       }

WARNING:TABSTOP: Statements should start on a tabstop
#474: FILE: security/smack/smack_logging.c:361:
+			       if (u->dentry) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#474: FILE: security/smack/smack_logging.c:361:
+			       if (u->dentry) {
+				       struct path path = {

WARNING:TABSTOP: Statements should start on a tabstop
#475: FILE: security/smack/smack_logging.c:362:
+				       struct path path = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: security/smack/smack_logging.c:367:
+				       audit_log_d_path(ab, "path=",
+						       &path);

WARNING:TABSTOP: Statements should start on a tabstop
#481: FILE: security/smack/smack_logging.c:368:
+				       break;

WARNING:TABSTOP: Statements should start on a tabstop
#482: FILE: security/smack/smack_logging.c:369:
+			       }

WARNING:TABSTOP: Statements should start on a tabstop
#483: FILE: security/smack/smack_logging.c:370:
+			       if (!u->addr)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#483: FILE: security/smack/smack_logging.c:370:
+			       if (!u->addr)
+				       break;

WARNING:TABSTOP: Statements should start on a tabstop
#484: FILE: security/smack/smack_logging.c:371:
+				       break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#485: FILE: security/smack/smack_logging.c:372:
+			       len = u->addr->len-sizeof(short);
 			                         ^

WARNING:TABSTOP: Statements should start on a tabstop
#488: FILE: security/smack/smack_logging.c:375:
+			       if (*p)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#488: FILE: security/smack/smack_logging.c:375:
+			       if (*p)
+				       audit_log_untrustedstring(ab, p);

WARNING:TABSTOP: Statements should start on a tabstop
#490: FILE: security/smack/smack_logging.c:377:
+			       else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#490: FILE: security/smack/smack_logging.c:377:
+			       else
+				       audit_log_n_hex(ab, p, len);

WARNING:TABSTOP: Statements should start on a tabstop
#492: FILE: security/smack/smack_logging.c:379:
+			       break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#496: FILE: security/smack/smack_logging.c:383:
+		switch (a->u.net.family) {
+			case AF_INET:
[...]
+			case AF_INET6:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: security/smack/smack_logging.c:386:
+				avc_print_ipv4_addr(ab, a->u.net.v4info.saddr,
+						a->u.net.sport,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: security/smack/smack_logging.c:389:
+				avc_print_ipv4_addr(ab, a->u.net.v4info.daddr,
+						a->u.net.dport,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: security/smack/smack_logging.c:394:
+				avc_print_ipv6_addr(ab, &a->u.net.v6info.saddr,
+						a->u.net.sport,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: security/smack/smack_logging.c:397:
+				avc_print_ipv6_addr(ab, &a->u.net.v6info.daddr,
+						a->u.net.dport,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: security/smack/smack_logging.c:406:
+			dev = dev_get_by_index(&init_net,
+					a->u.net.netif);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: security/smack/smack_logging.c:409:
+				audit_log_format(ab, " netif=%s",
+						dev->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: security/smack/smack_logging.c:438:
+	int rc;
+	rc = smk_curacc(olabel, access);

WARNING:TYPO_SPELLING: 'subjet' may be misspelled - perhaps 'subject'?
#558: FILE: security/smack/smack_logging.c:445:
+ * @slabel : subjet label
              ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: security/smack/smack_logging.c:453:
+int smk_access_log(char *slabel, char *olabel, int access,
+			struct smack_audit_data *a)

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: security/smack/smack_logging.c:456:
+	int rc;
+	rc = smk_access(slabel, olabel, access);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#580: FILE: security/smack/smack_logging.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#604: FILE: security/smack/smack_logging.h:25:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#609: FILE: security/smack/smack_logging.h:30:
+};
+extern struct smack_log_policy log_policy;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#611: FILE: security/smack/smack_logging.h:32:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#622: FILE: security/smack/smack_logging.h:43:
+^Iunion ^I{$

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: security/smack/smack_logging.h:80:
+                        struct smack_audit_data *ad, u8 *proto);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: security/smack/smack_logging.h:80:
+int ipv4_skb_to_auditdata(struct sk_buff *skb,
+                        struct smack_audit_data *ad, u8 *proto);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: security/smack/smack_logging.h:80:
+                        struct smack_audit_data *ad, u8 *proto);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: security/smack/smack_logging.h:83:
+                        struct smack_audit_data *ad, u8 *proto);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: security/smack/smack_logging.h:83:
+int ipv6_skb_to_auditdata(struct sk_buff *skb,
+                        struct smack_audit_data *ad, u8 *proto);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: security/smack/smack_logging.h:83:
+                        struct smack_audit_data *ad, u8 *proto);$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_d' - possible side-effects?
#665: FILE: security/smack/smack_logging.h:86:
+#define SMACK_AUDIT_DATA_INIT(_d, _t) \
+	{ memset((_d), 0, sizeof(struct smack_audit_data)); (_d)->type = AVC_AUDIT_DATA_##_t; (_d)->function = __func__; }

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#666: FILE: security/smack/smack_logging.h:87:
+	{ memset((_d), 0, sizeof(struct smack_audit_data)); (_d)->type = AVC_AUDIT_DATA_##_t; (_d)->function = __func__; }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: security/smack/smack_logging.h:90:
+void smack_log(char *subject_label, char *object_label,
+		int request,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: security/smack/smack_logging.h:94:
+int smk_access_log(char *subjectlabel, char *olabel, int access,
+			 struct smack_audit_data *a);

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#701: FILE: security/smack/smack_lsm.c:111:
+	/* we won't log here, because rc can be overriden */
 	                                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#724: FILE: security/smack/smack_lsm.c:139:
+	/* we won't log here, because rc can be overriden */
 	                                        ^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: security/smack/smack_lsm.c:607:
+ }$

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1066: FILE: security/smack/smack_lsm.c:1028:
+	/* we don't log here as rc can be overriden */
 	                                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1234: FILE: security/smack/smack_lsm.c:1332:
+	/* we don't log here, we can be overriden */
 	                                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1248: FILE: security/smack/smack_lsm.c:1349:
+	/* we log only if we didn't get overriden */
 	                                ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1264: FILE: security/smack/smack_lsm.c:1689:
 
+

WARNING:TYPO_SPELLING: 'iif' may be misspelled - perhaps 'if'?
#1593: FILE: security/smack/smack_lsm.c:2603:
+	ad.u.net.netif = skb->iif;
 	                      ^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1651: FILE: security/smack/smackfs.c:1117:
 
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1652: FILE: security/smack/smackfs.c:1118:
+static ssize_t smk_read_logging(struct file *filp, char __user *buf,
                                              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1662: FILE: security/smack/smackfs.c:1128:
+	sprintf(temp, "%d\n",
+		 log_policy.log_denied + log_policy.log_accepted*2);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1662: FILE: security/smack/smackfs.c:1128:
+		 log_policy.log_denied + log_policy.log_accepted*2);
 		                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1668: FILE: security/smack/smackfs.c:1134:
+static ssize_t smk_write_logging(struct file *file, const char __user *buf,
+				size_t count, loff_t *ppos)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1684: FILE: security/smack/smackfs.c:1150:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:SPACING: space prohibited before semicolon
#1689: FILE: security/smack/smackfs.c:1155:
+	log_policy.log_accepted = (i & 2) >> 1 ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1693: FILE: security/smack/smackfs.c:1159:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1707: FILE: security/smack/smackfs.c:1196:
+		[SMK_LOGGING]	=
+			{"logging", &smk_logging_ops, S_IRUGO|S_IWUSR},

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1707: FILE: security/smack/smackfs.c:1196:
+			{"logging", &smk_logging_ops, S_IRUGO|S_IWUSR},
 			                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1707: FILE: security/smack/smackfs.c:1196:
+			{"logging", &smk_logging_ops, S_IRUGO|S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158024.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 32 errors, 76 warnings, 50 checks, 1540 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158024.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
