WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#90: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: drivers/i2c/busses/i2c-cpm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#122: FILE: drivers/i2c/busses/i2c-cpm.c:28:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#123: FILE: drivers/i2c/busses/i2c-cpm.c:29:
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpm_i2c_force_close', this function's name, in a string
#277: FILE: drivers/i2c/busses/i2c-cpm.c:183:
+	dev_dbg(&adap->dev, "cpm_i2c_force_close()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: drivers/i2c/busses/i2c-cpm.c:192:
+static void cpm_i2c_parse_message(struct i2c_adapter *adap,
+	struct i2c_msg *pmsg, int num, int tx, int rx)

CHECK:SPACING: No space is necessary after a cast
#306: FILE: drivers/i2c/busses/i2c-cpm.c:212:
+	rb = (u_char *) (((ulong) rb + 1) & ~1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#339: FILE: drivers/i2c/busses/i2c-cpm.c:245:
+		memcpy(tb+1, pmsg->buf, pmsg->len);
 		         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: drivers/i2c/busses/i2c-cpm.c:253:
+static int cpm_i2c_check_message(struct i2c_adapter *adap,
+	struct i2c_msg *pmsg, int tx, int rx)

CHECK:SPACING: No space is necessary after a cast
#362: FILE: drivers/i2c/busses/i2c-cpm.c:268:
+	rb = (u_char *) (((uint) rb + 1) & ~1);

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#445: FILE: drivers/i2c/busses/i2c-cpm.c:351:
+	/* Enable RX/TX/Error interupts */
 	                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/i2c/busses/i2c-cpm.c:368:
+			ret = wait_event_interruptible_timeout(cpm->i2c_wait,
+				!(in_be16(&rbdf[rptr].cbd_sc) & BD_SC_EMPTY),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: drivers/i2c/busses/i2c-cpm.c:372:
+			ret = wait_event_interruptible_timeout(cpm->i2c_wait,
+				!(in_be16(&tbdf[tptr].cbd_sc) & BD_SC_READY),

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#523: FILE: drivers/i2c/busses/i2c-cpm.c:429:
+static int __devinit cpm_i2c_setup(struct cpm_i2c *cpm)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpm_i2c_setup', this function's name, in a string
#533: FILE: drivers/i2c/busses/i2c-cpm.c:439:
+	dev_dbg(&cpm->ofdev->dev, "cpm_i2c_setup()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i2c_base"
#549: FILE: drivers/i2c/busses/i2c-cpm.c:455:
+	if (i2c_base == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#555: FILE: drivers/i2c/busses/i2c-cpm.c:461:
+	if (of_device_is_compatible(ofdev->node, "fsl,cpm1-i2c")) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpm->i2c_reg"
#587: FILE: drivers/i2c/busses/i2c-cpm.c:493:
+	if (cpm->i2c_reg == NULL) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#628: FILE: drivers/i2c/busses/i2c-cpm.c:534:
+		cpm->rxbuf[i] = dma_alloc_coherent(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#636: FILE: drivers/i2c/busses/i2c-cpm.c:542:
+		cpm->txbuf[i] = (unsigned char *)dma_alloc_coherent(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#636: FILE: drivers/i2c/busses/i2c-cpm.c:542:
+		cpm->txbuf[i] = (unsigned char *)dma_alloc_coherent(

WARNING:TYPO_SPELLING: 'devided' may be misspelled - perhaps 'divided'?
#664: FILE: drivers/i2c/busses/i2c-cpm.c:570:
+	 * i2c baud rate generator. This is devided by 2 x (DIV + 3) to get
 	                                    ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/i2c/busses/i2c-cpm.c:589:
+			dma_free_coherent(NULL, CPM_MAX_READ + 1,
+				cpm->rxbuf[i], cpm->rxdma[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: drivers/i2c/busses/i2c-cpm.c:592:
+			dma_free_coherent(NULL, CPM_MAX_READ + 1,
+				cpm->txbuf[i], cpm->txdma[i]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpm->version == 1'
#692: FILE: drivers/i2c/busses/i2c-cpm.c:598:
+	if ((cpm->version == 1) && (!cpm->i2c_addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!cpm->i2c_addr'
#692: FILE: drivers/i2c/busses/i2c-cpm.c:598:
+	if ((cpm->version == 1) && (!cpm->i2c_addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: drivers/i2c/busses/i2c-cpm.c:623:
+		dma_free_coherent(NULL, CPM_MAX_READ + 1,
+			cpm->rxbuf[i], cpm->rxdma[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: drivers/i2c/busses/i2c-cpm.c:625:
+		dma_free_coherent(NULL, CPM_MAX_READ + 1,
+			cpm->txbuf[i], cpm->txdma[i]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpm->version == 1'
#725: FILE: drivers/i2c/busses/i2c-cpm.c:631:
+	if ((cpm->version == 1) && (!cpm->i2c_addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!cpm->i2c_addr'
#725: FILE: drivers/i2c/busses/i2c-cpm.c:631:
+	if ((cpm->version == 1) && (!cpm->i2c_addr))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#731: FILE: drivers/i2c/busses/i2c-cpm.c:637:
+static int __devinit cpm_i2c_probe(struct of_device *ofdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: drivers/i2c/busses/i2c-cpm.c:638:
+static int __devinit cpm_i2c_probe(struct of_device *ofdev,
+			 const struct of_device_id *match)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cpm)...) over kzalloc(sizeof(struct cpm_i2c)...)
#738: FILE: drivers/i2c/busses/i2c-cpm.c:644:
+	cpm = kzalloc(sizeof(struct cpm_i2c), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#759: FILE: drivers/i2c/busses/i2c-cpm.c:665:
+	if (data && len == 4) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#762: FILE: drivers/i2c/busses/i2c-cpm.c:668:
+	} else

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#788: FILE: drivers/i2c/busses/i2c-cpm.c:694:
+static int __devexit cpm_i2c_remove(struct of_device *ofdev)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277336.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 24 checks, 768 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277336.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
