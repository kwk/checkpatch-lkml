CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#55: 
drivers/staging/otus/80211core/cagg.c: In function ¡zfAggRxEnabled¢:
                                                   ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#62: 
drivers/staging/otus/80211core/cagg.c:1836: warning: unused variable ¡up¢
                                                                     ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#64: 
¡fragOff¢
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#65: 
drivers/staging/otus/80211core/cagg.c:1835: warning: unused variable ¡ac
                                                                     ^

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:CAMELCASE: Avoid CamelCase: <zfAggInit>
#84: FILE: staging/otus/80211core/cagg_cs_fix.c:37:
+void zfAggInit(zdev_t *dev)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#170: FILE: staging/otus/80211core/cagg_cs_fix.c:45:
+	/*
+	* reset sta information

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <aggInitiated>
#174: FILE: staging/otus/80211core/cagg_cs_fix.c:49:
+	wd->aggInitiated = 0;

CHECK:CAMELCASE: Avoid CamelCase: <addbaComplete>
#175: FILE: staging/otus/80211core/cagg_cs_fix.c:50:
+	wd->addbaComplete = 0;

CHECK:CAMELCASE: Avoid CamelCase: <addbaCount>
#176: FILE: staging/otus/80211core/cagg_cs_fix.c:51:
+	wd->addbaCount = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#181: FILE: staging/otus/80211core/cagg_cs_fix.c:56:
+			wd->aggSta[i].aggFlag[j] = wd->aggSta[i].count[j] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <aggSta>
#181: FILE: staging/otus/80211core/cagg_cs_fix.c:56:
+			wd->aggSta[i].aggFlag[j] = wd->aggSta[i].count[j] = 0;

CHECK:CAMELCASE: Avoid CamelCase: <aggFlag>
#181: FILE: staging/otus/80211core/cagg_cs_fix.c:56:
+			wd->aggSta[i].aggFlag[j] = wd->aggSta[i].count[j] = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: staging/otus/80211core/cagg_cs_fix.c:58:
+			wd->aggSta[i].tid_tx[j+1] = NULL;
 			                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#188: FILE: staging/otus/80211core/cagg_cs_fix.c:63:
+	/*
+	* reset Tx/Rx aggregation queue information

CHECK:CAMELCASE: Avoid CamelCase: <aggState>
#190: FILE: staging/otus/80211core/cagg_cs_fix.c:65:
+	wd->aggState = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#193: FILE: staging/otus/80211core/cagg_cs_fix.c:68:
+		/*
+		* reset tx aggregation queue

CHECK:CAMELCASE: Avoid CamelCase: <aggQPool>
#195: FILE: staging/otus/80211core/cagg_cs_fix.c:70:
+		wd->aggQPool[i] = zfwMemAllocate(dev, sizeof(struct aggQueue));

CHECK:CAMELCASE: Avoid CamelCase: <zfwMemAllocate>
#195: FILE: staging/otus/80211core/cagg_cs_fix.c:70:
+		wd->aggQPool[i] = zfwMemAllocate(dev, sizeof(struct aggQueue));

CHECK:CAMELCASE: Avoid CamelCase: <aggQueue>
#195: FILE: staging/otus/80211core/cagg_cs_fix.c:70:
+		wd->aggQPool[i] = zfwMemAllocate(dev, sizeof(struct aggQueue));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#200: FILE: staging/otus/80211core/cagg_cs_fix.c:75:
+		wd->aggQPool[i]->aggHead = wd->aggQPool[i]->aggTail =

CHECK:CAMELCASE: Avoid CamelCase: <aggHead>
#200: FILE: staging/otus/80211core/cagg_cs_fix.c:75:
+		wd->aggQPool[i]->aggHead = wd->aggQPool[i]->aggTail =

CHECK:CAMELCASE: Avoid CamelCase: <aggTail>
#200: FILE: staging/otus/80211core/cagg_cs_fix.c:75:
+		wd->aggQPool[i]->aggHead = wd->aggQPool[i]->aggTail =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#201: FILE: staging/otus/80211core/cagg_cs_fix.c:76:
+		wd->aggQPool[i]->aggQEnabled = wd->aggQPool[i]->aggReady =

CHECK:CAMELCASE: Avoid CamelCase: <aggQEnabled>
#201: FILE: staging/otus/80211core/cagg_cs_fix.c:76:
+		wd->aggQPool[i]->aggQEnabled = wd->aggQPool[i]->aggReady =

CHECK:CAMELCASE: Avoid CamelCase: <aggReady>
#201: FILE: staging/otus/80211core/cagg_cs_fix.c:76:
+		wd->aggQPool[i]->aggQEnabled = wd->aggQPool[i]->aggReady =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#202: FILE: staging/otus/80211core/cagg_cs_fix.c:77:
+		wd->aggQPool[i]->clearFlag = wd->aggQPool[i]->deleteFlag = 0;

CHECK:CAMELCASE: Avoid CamelCase: <clearFlag>
#202: FILE: staging/otus/80211core/cagg_cs_fix.c:77:
+		wd->aggQPool[i]->clearFlag = wd->aggQPool[i]->deleteFlag = 0;

CHECK:CAMELCASE: Avoid CamelCase: <deleteFlag>
#202: FILE: staging/otus/80211core/cagg_cs_fix.c:77:
+		wd->aggQPool[i]->clearFlag = wd->aggQPool[i]->deleteFlag = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#206: FILE: staging/otus/80211core/cagg_cs_fix.c:81:
+		/*
+		* reset rx aggregation queue

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#214: FILE: staging/otus/80211core/cagg_cs_fix.c:89:
+		wd->tid_rx[i]->seq_start = wd->tid_rx[i]->baw_head = \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#214: FILE: staging/otus/80211core/cagg_cs_fix.c:89:
+		wd->tid_rx[i]->seq_start = wd->tid_rx[i]->baw_head = \

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#221: FILE: staging/otus/80211core/cagg_cs_fix.c:96:
+		/*
+		* reset ADDBA exchange status code

CHECK:CAMELCASE: Avoid CamelCase: <addBaExchangeStatusCode>
#228: FILE: staging/otus/80211core/cagg_cs_fix.c:103:
+		wd->tid_rx[i]->addBaExchangeStatusCode = 0;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTallyReset>
#232: FILE: staging/otus/80211core/cagg_cs_fix.c:107:
+	zfAggTallyReset(dev);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggDestInit>
#233: FILE: staging/otus/80211core/cagg_cs_fix.c:108:
+	DESTQ.init = zfAggDestInit;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawInit>
#253: FILE: staging/otus/80211core/cagg_cs_fix.c:119:
+	BAW->init = zfBawInit;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggGetSta>
#264: FILE: staging/otus/80211core/cagg_cs_fix.c:146:
+u16_t zfAggGetSta(zdev_t *dev, zbuf_t *buf)

CHECK:CAMELCASE: Avoid CamelCase: <wlanMode>
#294: FILE: staging/otus/80211core/cagg_cs_fix.c:161:
+	if (wd->wlanMode == ZM_MODE_AP)

CHECK:CAMELCASE: Avoid CamelCase: <zfApFindSta>
#295: FILE: staging/otus/80211core/cagg_cs_fix.c:162:
+		id = zfApFindSta(dev, dst);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxGetQueue>
#315: FILE: staging/otus/80211core/cagg_cs_fix.c:193:
+TID_TX zfAggTxGetQueue(zdev_t *dev, u16_t aid, u16_t tid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: staging/otus/80211core/cagg_cs_fix.c:197:
+	TID_TX  tid_tx;
+	zmw_get_wlan_dev(dev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#333: FILE: staging/otus/80211core/cagg_cs_fix.c:202:
+	/*
+	* not a STA aid

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#335: FILE: staging/otus/80211core/cagg_cs_fix.c:204:
+	if (0xffff == aid)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#348: FILE: staging/otus/80211core/cagg_cs_fix.c:212:
+	if (0 == tid_tx->aggQEnabled)

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxNewQueue>
#364: FILE: staging/otus/80211core/cagg_cs_fix.c:237:
+TID_TX zfAggTxNewQueue(zdev_t *dev, u16_t aid, u16_t tid, zbuf_t *buf)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#410: FILE: staging/otus/80211core/cagg_cs_fix.c:241:
+	u16_t   ac = zcUpToAc[tid&0x7] & 0x3;
 	                         ^

CHECK:CAMELCASE: Avoid CamelCase: <zcUpToAc>
#410: FILE: staging/otus/80211core/cagg_cs_fix.c:241:
+	u16_t   ac = zcUpToAc[tid&0x7] & 0x3;

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: staging/otus/80211core/cagg_cs_fix.c:242:
+	u16_t   ac = zcUpToAc[tid&0x7] & 0x3;
+	zmw_get_wlan_dev(dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#416: FILE: staging/otus/80211core/cagg_cs_fix.c:247:
+	/*
+	* not a STA aid

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#418: FILE: staging/otus/80211core/cagg_cs_fix.c:249:
+	if (0xffff == aid)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#424: FILE: staging/otus/80211core/cagg_cs_fix.c:255:
+	/*
+	* find one new queue for sta

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#429: FILE: staging/otus/80211core/cagg_cs_fix.c:260:
+			/*
+			* this q is enabled

CHECK:CAMELCASE: Avoid CamelCase: <aggQSTA>
#434: FILE: staging/otus/80211core/cagg_cs_fix.c:265:
+			tid_tx->aggQSTA = aid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#437: FILE: staging/otus/80211core/cagg_cs_fix.c:268:
+			tid_tx->aggHead = tid_tx->aggTail = tid_tx->size = 0;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxEnqueue>
#460: FILE: staging/otus/80211core/cagg_cs_fix.c:305:
+u16_t zfAggTxEnqueue(zdev_t *dev, zbuf_t *buf, u16_t aid, TID_TX tid_tx)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#734: FILE: staging/otus/80211core/cagg_cs_fix.c:321:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#736: FILE: staging/otus/80211core/cagg_cs_fix.c:323:
+		/*
+		* buffer copy

CHECK:CAMELCASE: Avoid CamelCase: <sendComplete>
#741: FILE: staging/otus/80211core/cagg_cs_fix.c:328:
+		u8_t    sendComplete = 0;

CHECK:CAMELCASE: Avoid CamelCase: <zm_agg_GetTime>
#744: FILE: staging/otus/80211core/cagg_cs_fix.c:331:
+		time = zm_agg_GetTime();

CHECK:CAMELCASE: Avoid CamelCase: <arrivalTime>
#745: FILE: staging/otus/80211core/cagg_cs_fix.c:332:
+		tid_tx->aggvtxq[tid_tx->aggHead].arrivalTime = time;

CHECK:CAMELCASE: Avoid CamelCase: <lastArrival>
#749: FILE: staging/otus/80211core/cagg_cs_fix.c:336:
+		tid_tx->lastArrival = time;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: staging/otus/80211core/cagg_cs_fix.c:339:
+		tid_tx->size = zm_agg_qlen(dev, tid_tx->aggHead,
+							tid_tx->aggTail);

CHECK:CAMELCASE: Avoid CamelCase: <zfcbSendCompleteIndication>
#765: FILE: staging/otus/80211core/cagg_cs_fix.c:352:
+		if (buf && sendComplete && wd->zfcbSendCompleteIndication) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#771: FILE: staging/otus/80211core/cagg_cs_fix.c:358:
+		/*if (tid_tx->size >= 16 && zfHpGetFreeTxdCount(dev) > 20)
+		* zfAggTxSend(dev, zfHpGetFreeTxdCount(dev), tid_tx);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#774: FILE: staging/otus/80211core/cagg_cs_fix.c:361:
+		return ZM_SUCCESS;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: staging/otus/80211core/cagg_cs_fix.c:363:
+		zm_msg1_agg(ZM_LV_0, "can't enqueue, tid_tx->size=",
+								tid_tx->size);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#778: FILE: staging/otus/80211core/cagg_cs_fix.c:365:
+		/*
+		* Queue Full

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#782: FILE: staging/otus/80211core/cagg_cs_fix.c:369:
+		/*
+		* zm_msg1_agg(ZM_LV_0, "Queue full, qnum = ", qnum);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggDestExist>
#799: FILE: staging/otus/80211core/cagg_cs_fix.c:386:
+u16_t zfAggDestExist(zdev_t *dev, u16_t Qtype, u16_t ac, TID_TX tid_tx,

CHECK:CAMELCASE: Avoid CamelCase: <Qtype>
#799: FILE: staging/otus/80211core/cagg_cs_fix.c:386:
+u16_t zfAggDestExist(zdev_t *dev, u16_t Qtype, u16_t ac, TID_TX tid_tx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: staging/otus/80211core/cagg_cs_fix.c:387:
+u16_t zfAggDestExist(zdev_t *dev, u16_t Qtype, u16_t ac, TID_TX tid_tx,
+			void *vtxq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#804: FILE: staging/otus/80211core/cagg_cs_fix.c:391:
+	u16_t   exist = 0;
+	zmw_get_wlan_dev(dev);

CHECK:CAMELCASE: Avoid CamelCase: <Head>
#809: FILE: staging/otus/80211core/cagg_cs_fix.c:396:
+	if (!DESTQ.Head[ac]) {

CHECK:CAMELCASE: Avoid CamelCase: <zfAggDestInsert>
#831: FILE: staging/otus/80211core/cagg_cs_fix.c:418:
+void zfAggDestInsert(zdev_t *dev, u16_t Qtype, u16_t ac, TID_TX tid_tx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: staging/otus/80211core/cagg_cs_fix.c:419:
+void zfAggDestInsert(zdev_t *dev, u16_t Qtype, u16_t ac, TID_TX tid_tx,
+			void *vtxq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#835: FILE: staging/otus/80211core/cagg_cs_fix.c:422:
+	struct dest *new_dest;
+	zmw_get_wlan_dev(dev);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#845: FILE: staging/otus/80211core/cagg_cs_fix.c:432:
+	if (0 == Qtype)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#853: FILE: staging/otus/80211core/cagg_cs_fix.c:440:
+		DESTQ.Head[ac] = DESTQ.dest[ac] = new_dest;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#862: FILE: staging/otus/80211core/cagg_cs_fix.c:449:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#865: FILE: staging/otus/80211core/cagg_cs_fix.c:452:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <zfAggDestDelete>
#867: FILE: staging/otus/80211core/cagg_cs_fix.c:454:
+void zfAggDestDelete(zdev_t *dev, u16_t Qtype, TID_TX tid_tx, void *vtxq)

CHECK:CAMELCASE: Avoid CamelCase: <destLock>
#877: FILE: staging/otus/80211core/cagg_cs_fix.c:464:
+	if (wd->destLock) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#882: FILE: staging/otus/80211core/cagg_cs_fix.c:469:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#900: FILE: staging/otus/80211core/cagg_cs_fix.c:487:
+		if ((Qtype == 0 && dest->next->tid_tx == tid_tx) ||
+			(Qtype == 1 && dest->next->vtxq == vtxq)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#901: FILE: staging/otus/80211core/cagg_cs_fix.c:488:
+			(Qtype == 1 && dest->next->vtxq == vtxq)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: staging/otus/80211core/cagg_cs_fix.c:490:
+			tid_tx->size = zm_agg_qlen(dev, tid_tx->aggHead,
+							tid_tx->aggTail);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#913: FILE: staging/otus/80211core/cagg_cs_fix.c:500:
+					DESTQ.Head[i] = DESTQ.dest[i] = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#920: FILE: staging/otus/80211core/cagg_cs_fix.c:507:
+			if (temp == NULL) {
[...]
+			} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#920: FILE: staging/otus/80211core/cagg_cs_fix.c:507:
+			if (temp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#922: FILE: staging/otus/80211core/cagg_cs_fix.c:509:
+				/* do nothing
+				* zfwMemFree(dev, temp,

CHECK:BRACES: Unbalanced braces around else statement
#925: FILE: staging/otus/80211core/cagg_cs_fix.c:512:
+			} else

CHECK:CAMELCASE: Avoid CamelCase: <zfwMemFree>
#926: FILE: staging/otus/80211core/cagg_cs_fix.c:513:
+				zfwMemFree(dev, temp, sizeof(struct dest));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#929: FILE: staging/otus/80211core/cagg_cs_fix.c:516:
+			/*zmw_enter_critical_section(dev);
+			* if (DESTQ.size[i] > 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#930: FILE: staging/otus/80211core/cagg_cs_fix.c:517:
+^I^I^I* ^IDESTQ.size[i]--;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#935: FILE: staging/otus/80211core/cagg_cs_fix.c:522:
+
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#938: FILE: staging/otus/80211core/cagg_cs_fix.c:525:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#943: FILE: staging/otus/80211core/cagg_cs_fix.c:530:
+	u16_t i;
+	zmw_get_wlan_dev(dev);

CHECK:CAMELCASE: Avoid CamelCase: <getNext>
#956: FILE: staging/otus/80211core/cagg_cs_fix.c:543:
+	DESTQ.getNext = zfAggDestGetNext;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggDestGetNext>
#956: FILE: staging/otus/80211core/cagg_cs_fix.c:543:
+	DESTQ.getNext = zfAggDestGetNext;

WARNING:RETURN_VOID: void function return statements are not generally useful
#960: FILE: staging/otus/80211core/cagg_cs_fix.c:547:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#965: FILE: staging/otus/80211core/cagg_cs_fix.c:552:
+	struct dest *dest = NULL;
+	zmw_get_wlan_dev(dev);

CHECK:BRACES: braces {} should be used on all arms of this statement
#970: FILE: staging/otus/80211core/cagg_cs_fix.c:557:
+	if (DESTQ.dest[ac]) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#973: FILE: staging/otus/80211core/cagg_cs_fix.c:560:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTidTxInsertHead>
#986: FILE: staging/otus/80211core/cagg_cs_fix.c:570:
+u16_t zfAggTidTxInsertHead(zdev_t *dev, struct bufInfo *buf_info, TID_TX tid_tx)

CHECK:CAMELCASE: Avoid CamelCase: <bufInfo>
#986: FILE: staging/otus/80211core/cagg_cs_fix.c:570:
+u16_t zfAggTidTxInsertHead(zdev_t *dev, struct bufInfo *buf_info, TID_TX tid_tx)

CHECK:CAMELCASE: Avoid CamelCase: <zfwBufFree>
#1003: FILE: staging/otus/80211core/cagg_cs_fix.c:587:
+		zfwBufFree(dev, buf, ZM_SUCCESS);

CHECK:CAMELCASE: Avoid CamelCase: <headerLen>
#1017: FILE: staging/otus/80211core/cagg_cs_fix.c:601:
+	baw_header->headerLen   = buf_info->baw_header->headerLen;

CHECK:CAMELCASE: Avoid CamelCase: <micLen>
#1018: FILE: staging/otus/80211core/cagg_cs_fix.c:602:
+	baw_header->micLen      = buf_info->baw_header->micLen;

CHECK:CAMELCASE: Avoid CamelCase: <snapLen>
#1019: FILE: staging/otus/80211core/cagg_cs_fix.c:603:
+	baw_header->snapLen     = buf_info->baw_header->snapLen;

CHECK:CAMELCASE: Avoid CamelCase: <removeLen>
#1020: FILE: staging/otus/80211core/cagg_cs_fix.c:604:
+	baw_header->removeLen   = buf_info->baw_header->removeLen;

CHECK:CAMELCASE: Avoid CamelCase: <keyIdx>
#1021: FILE: staging/otus/80211core/cagg_cs_fix.c:605:
+	baw_header->keyIdx      = buf_info->baw_header->keyIdx;

CHECK:CAMELCASE: Avoid CamelCase: <zfwMemoryCopy>
#1022: FILE: staging/otus/80211core/cagg_cs_fix.c:606:
+	zfwMemoryCopy((u8_t *)baw_header->header,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1023: FILE: staging/otus/80211core/cagg_cs_fix.c:607:
+	zfwMemoryCopy((u8_t *)baw_header->header,
+				(u8_t *)buf_info->baw_header->header, 58);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1025: FILE: staging/otus/80211core/cagg_cs_fix.c:609:
+	zfwMemoryCopy((u8_t *)baw_header->mic,
+				(u8_t *)buf_info->baw_header->mic   , 8);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1025: FILE: staging/otus/80211core/cagg_cs_fix.c:609:
+				(u8_t *)buf_info->baw_header->mic   , 8);
 				                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: staging/otus/80211core/cagg_cs_fix.c:611:
+	zfwMemoryCopy((u8_t *)baw_header->snap,
+				(u8_t *)buf_info->baw_header->snap  , 8);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1027: FILE: staging/otus/80211core/cagg_cs_fix.c:611:
+				(u8_t *)buf_info->baw_header->snap  , 8);
 				                                    ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1034: FILE: staging/otus/80211core/cagg_cs_fix.c:618:
+	if (1 == tid_tx->size)

CHECK:CAMELCASE: Avoid CamelCase: <zfiTxComplete>
#1044: FILE: staging/otus/80211core/cagg_cs_fix.c:628:
+void zfiTxComplete(zdev_t *dev)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->wlanMode == ZM_MODE_AP'
#1316: FILE: staging/otus/80211core/cagg_cs_fix.c:634:
+	if ((wd->wlanMode == ZM_MODE_AP) ||
+		(wd->wlanMode == ZM_MODE_INFRASTRUCTURE && wd->sta.EnableHT) ||
+		(wd->wlanMode == ZM_MODE_PSEUDO))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->wlanMode == ZM_MODE_PSEUDO'
#1316: FILE: staging/otus/80211core/cagg_cs_fix.c:634:
+	if ((wd->wlanMode == ZM_MODE_AP) ||
+		(wd->wlanMode == ZM_MODE_INFRASTRUCTURE && wd->sta.EnableHT) ||
+		(wd->wlanMode == ZM_MODE_PSEUDO))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1317: FILE: staging/otus/80211core/cagg_cs_fix.c:635:
+	if ((wd->wlanMode == ZM_MODE_AP) ||
+		(wd->wlanMode == ZM_MODE_INFRASTRUCTURE && wd->sta.EnableHT) ||

CHECK:CAMELCASE: Avoid CamelCase: <EnableHT>
#1317: FILE: staging/otus/80211core/cagg_cs_fix.c:635:
+		(wd->wlanMode == ZM_MODE_INFRASTRUCTURE && wd->sta.EnableHT) ||

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxScheduler>
#1319: FILE: staging/otus/80211core/cagg_cs_fix.c:637:
+		zfAggTxScheduler(dev, 0);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1322: FILE: staging/otus/80211core/cagg_cs_fix.c:640:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxReady>
#1324: FILE: staging/otus/80211core/cagg_cs_fix.c:642:
+TID_TX zfAggTxReady(zdev_t *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1329: FILE: staging/otus/80211core/cagg_cs_fix.c:647:
+	TID_TX  tid_tx = NULL;
+	zmw_get_wlan_dev(dev);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggValidTidTx>
#1348: FILE: staging/otus/80211core/cagg_cs_fix.c:666:
+u16_t zfAggValidTidTx(zdev_t *dev, TID_TX tid_tx)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1351: FILE: staging/otus/80211core/cagg_cs_fix.c:669:
+	u16_t i, valid = 0;
+	zmw_get_wlan_dev(dev);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1361: FILE: staging/otus/80211core/cagg_cs_fix.c:679:
+			break;
+		} else {

CHECK:CAMELCASE: Avoid CamelCase: <ScanAndClear>
#1370: FILE: staging/otus/80211core/cagg_cs_fix.c:688:
+void zfAggTxScheduler(zdev_t *dev, u8_t ScanAndClear)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1379: FILE: staging/otus/80211core/cagg_cs_fix.c:697:
+	u16_t txq_threshold;
+	zmw_get_wlan_dev(dev);

CHECK:CAMELCASE: Avoid CamelCase: <zfHpGetFreeTxdCount>
#1398: FILE: staging/otus/80211core/cagg_cs_fix.c:716:
+	while (zfHpGetFreeTxdCount(dev) > 20 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1399: FILE: staging/otus/80211core/cagg_cs_fix.c:717:
+	while (zfHpGetFreeTxdCount(dev) > 20 &&
+					(TXQL < txq_threshold || tid_tx)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1399: FILE: staging/otus/80211core/cagg_cs_fix.c:717:
+					(TXQL < txq_threshold || tid_tx)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1401: FILE: staging/otus/80211core/cagg_cs_fix.c:719:
+		/* while (zfHpGetFreeTxdCount(dev) > 20
+		*		&& (ScanAndClear || tid_tx)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1414: FILE: staging/otus/80211core/cagg_cs_fix.c:732:
+		if (0 >= destQ_count)

CHECK:CAMELCASE: Avoid CamelCase: <DbgPrint>
#1444: FILE: staging/otus/80211core/cagg_cs_fix.c:762:
+			DbgPrint("bug report! DESTQ.getNext got nothing!");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1454: FILE: staging/otus/80211core/cagg_cs_fix.c:772:
+				tid_tx->size = zm_agg_qlen(dev,
+					tid_tx->aggHead, tid_tx->aggTail);

CHECK:BRACES: Unbalanced braces around else statement
#1455: FILE: staging/otus/80211core/cagg_cs_fix.c:773:
+			else {

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxSend>
#1474: FILE: staging/otus/80211core/cagg_cs_fix.c:792:
+				zfAggTxSend(dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1475: FILE: staging/otus/80211core/cagg_cs_fix.c:793:
+				zfAggTxSend(dev,
+				zfHpGetFreeTxdCount(dev), tid_tx);

CHECK:CAMELCASE: Avoid CamelCase: <zfGetVtxq>
#1483: FILE: staging/otus/80211core/cagg_cs_fix.c:801:
+			buf = zfGetVtxq(dev, ac);

CHECK:CAMELCASE: Avoid CamelCase: <zfTxSendEth>
#1486: FILE: staging/otus/80211core/cagg_cs_fix.c:804:
+			zfTxSendEth(dev, buf, 0, ZM_EXTERNAL_ALLOC_BUF, 0);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1488: FILE: staging/otus/80211core/cagg_cs_fix.c:806:
+
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1494: FILE: staging/otus/80211core/cagg_cs_fix.c:812:
+	/* while ((zfHpGetFreeTxdCount(dev)) > 32) {
+	while ((zfHpGetFreeTxdCount(dev)) > 32) {

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTx>
#1535: FILE: staging/otus/80211core/cagg_cs_fix.c:869:
+u16_t zfAggTx(zdev_t *dev, zbuf_t *buf, u16_t tid)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1572: FILE: staging/otus/80211core/cagg_cs_fix.c:888:
+	if (0xffff == aid) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1574: FILE: staging/otus/80211core/cagg_cs_fix.c:890:
+		/*
+		* STA not associated, this is a BC/MC or STA->AP packet

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1586: FILE: staging/otus/80211core/cagg_cs_fix.c:897:
+	/*
+	* STA associated, a unicast packet

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1602: FILE: staging/otus/80211core/cagg_cs_fix.c:903:
+	/*tid_q.tid_tx = tid_tx;
+	wd->destQ.insert = zfAggDestInsert;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tid_tx"
#1605: FILE: staging/otus/80211core/cagg_cs_fix.c:906:
+	if (tid_tx != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1607: FILE: staging/otus/80211core/cagg_cs_fix.c:908:
+		/*
+		* this (aid, ac) is aggregated

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1620: FILE: staging/otus/80211core/cagg_cs_fix.c:914:
+			/*
+			* arrival rate too low

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1629: FILE: staging/otus/80211core/cagg_cs_fix.c:921:
+			/* wd->aggQPool[qnum]->clearFlag =
+			*  wd->aggQPool[qnum]->deleteFlag =1;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1634: FILE: staging/otus/80211core/cagg_cs_fix.c:925:
 
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1642: FILE: staging/otus/80211core/cagg_cs_fix.c:931:
+		/*
+		* this (aid, ac) not yet aggregated

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1656: FILE: staging/otus/80211core/cagg_cs_fix.c:938:
+			/*
+			* arrivalrate high enough to get a new agg queue

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1669: FILE: staging/otus/80211core/cagg_cs_fix.c:944:
+			/* zm_msg1_agg(ZM_LV_0, "get new AggQueue qnum = ",
+			*  tid_tx->);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1745: FILE: staging/otus/80211core/cagg_cs_fix.c:983:
+			/*
+			* arrival rate is not high enough to get

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxReadyCount>
#1760: FILE: staging/otus/80211core/cagg_cs_fix.c:1012:
+u16_t zfAggTxReadyCount(zdev_t *dev, u16_t ac)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1784: FILE: staging/otus/80211core/cagg_cs_fix.c:1025:
+		if (wd->aggQPool[i]->aggQEnabled &&
+			(wd->aggQPool[i]->aggReady || \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1784: FILE: staging/otus/80211core/cagg_cs_fix.c:1025:
+			(wd->aggQPool[i]->aggReady || \

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxPartial>
#1802: FILE: staging/otus/80211core/cagg_cs_fix.c:1055:
+u16_t zfAggTxPartial(zdev_t *dev, u16_t ac, u16_t readycount)

CHECK:CAMELCASE: Avoid CamelCase: <vtxqHead>
#1819: FILE: staging/otus/80211core/cagg_cs_fix.c:1066:
+	qlen = zm_agg_qlen(dev, wd->vtxqHead[ac], wd->vtxqTail[ac]);

CHECK:CAMELCASE: Avoid CamelCase: <vtxqTail>
#1819: FILE: staging/otus/80211core/cagg_cs_fix.c:1066:
+	qlen = zm_agg_qlen(dev, wd->vtxqHead[ac], wd->vtxqTail[ac]);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1832: FILE: staging/otus/80211core/cagg_cs_fix.c:1070:
+					((u16_t)qlen/(qlen + readycount)));
 					            ^

CHECK:CAMELCASE: Avoid CamelCase: <freeTxd>
#1855: FILE: staging/otus/80211core/cagg_cs_fix.c:1103:
+u16_t zfAggTxSend(zdev_t *dev, u32_t freeTxd, TID_TX tid_tx)

CHECK:CAMELCASE: Avoid CamelCase: <aggControl>
#1946: FILE: staging/otus/80211core/cagg_cs_fix.c:1110:
+	struct  aggControl aggControl;

CHECK:CAMELCASE: Avoid CamelCase: <aggLen>
#1947: FILE: staging/otus/80211core/cagg_cs_fix.c:1111:
+	u16_t   aggLen;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1965: FILE: staging/otus/80211core/cagg_cs_fix.c:1129:
+	/*
+	* why there have to be 2 free Txd?

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1970: FILE: staging/otus/80211core/cagg_cs_fix.c:1134:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxGetVtxq>
#1972: FILE: staging/otus/80211core/cagg_cs_fix.c:1136:
+		buf = zfAggTxGetVtxq(dev, tid_tx);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1975: FILE: staging/otus/80211core/cagg_cs_fix.c:1139:
+		if (tid_tx->size == 0)
[...]
+		return 1;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1981: FILE: staging/otus/80211core/cagg_cs_fix.c:1145:
+	/*
+	* Free Txd queue is big enough to put aggregation

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1991: FILE: staging/otus/80211core/cagg_cs_fix.c:1155:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <aggFrameSize>
#1993: FILE: staging/otus/80211core/cagg_cs_fix.c:1157:
+	tid_tx->aggFrameSize = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1999: FILE: staging/otus/80211core/cagg_cs_fix.c:1163:
+		tid_tx->size = zm_agg_qlen(dev, tid_tx->aggHead,
+							tid_tx->aggTail);

CHECK:CAMELCASE: Avoid CamelCase: <completeIndex>
#2004: FILE: staging/otus/80211core/cagg_cs_fix.c:1168:
+			u16_t completeIndex;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2006: FILE: staging/otus/80211core/cagg_cs_fix.c:1170:
+			if (0 == j) {

CHECK:CAMELCASE: Avoid CamelCase: <ampduIndication>
#2007: FILE: staging/otus/80211core/cagg_cs_fix.c:1171:
+				aggControl.ampduIndication = ZM_AGG_FIRST_MPDU;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2015: FILE: staging/otus/80211core/cagg_cs_fix.c:1179:
+				*  500 ms, drop it */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2015: FILE: staging/otus/80211core/cagg_cs_fix.c:1179:
+				/* the packet is delayed more than
+				*  500 ms, drop it */

CHECK:CAMELCASE: Avoid CamelCase: <zfwBufGetSize>
#2017: FILE: staging/otus/80211core/cagg_cs_fix.c:1181:
+			tid_tx->aggFrameSize += zfwBufGetSize(dev, buf);

CHECK:CAMELCASE: Avoid CamelCase: <addbaIndication>
#2018: FILE: staging/otus/80211core/cagg_cs_fix.c:1182:
+			aggControl.addbaIndication = 0;

CHECK:CAMELCASE: Avoid CamelCase: <aggEnabled>
#2019: FILE: staging/otus/80211core/cagg_cs_fix.c:1183:
+			aggControl.aggEnabled = 1;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxSendEth>
#2064: FILE: staging/otus/80211core/cagg_cs_fix.c:1191:
+			zfAggTxSendEth(dev, buf, 0, ZM_EXTERNAL_ALLOC_BUF, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2065: FILE: staging/otus/80211core/cagg_cs_fix.c:1192:
+			zfAggTxSendEth(dev, buf, 0, ZM_EXTERNAL_ALLOC_BUF, 0,
+							&aggControl, tid_tx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2083: FILE: staging/otus/80211core/cagg_cs_fix.c:1201:
+			if (zm_agg_inQ(tid_tx, completeIndex) &&
+				wd->zfcbSendCompleteIndication

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2084: FILE: staging/otus/80211core/cagg_cs_fix.c:1202:
+				wd->zfcbSendCompleteIndication
+				&& tid_tx->aggvtxq[completeIndex].buf) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2092: FILE: staging/otus/80211core/cagg_cs_fix.c:1210:
+			/*
+			* this aggregation queue is empty

WARNING:SPLIT_STRING: quoted string split across lines
#2095: FILE: staging/otus/80211core/cagg_cs_fix.c:1213:
+			zm_msg1_agg(ZM_LV_0, "aggLen not reached, but no more "
+						"frame, j=", j);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2108: FILE: staging/otus/80211core/cagg_cs_fix.c:1226:
+	if (tid_tx->size == 0)
[...]
+	if (j > 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2115: FILE: staging/otus/80211core/cagg_cs_fix.c:1233:
+		zm_msg1_agg(ZM_LV_0, "0xC2:sent 1 aggr, aggr_count=",
+								aggr_count);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxGetReadyQueue>
#2127: FILE: staging/otus/80211core/cagg_cs_fix.c:1259:
+TID_TX zfAggTxGetReadyQueue(zdev_t *dev, u16_t ac)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->aggQPool[i]->size > 0'
#2165: FILE: staging/otus/80211core/cagg_cs_fix.c:1273:
+		if (1 == wd->aggQPool[i]->aggQEnabled &&
+			ac == wd->aggQPool[i]->ac &&
+			(wd->aggQPool[i]->size > 0)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2165: FILE: staging/otus/80211core/cagg_cs_fix.c:1273:
+		if (1 == wd->aggQPool[i]->aggQEnabled &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2166: FILE: staging/otus/80211core/cagg_cs_fix.c:1274:
+		if (1 == wd->aggQPool[i]->aggQEnabled &&
+			ac == wd->aggQPool[i]->ac &&

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2168: FILE: staging/otus/80211core/cagg_cs_fix.c:1276:
+			if (0 == time || time > wd->aggQPool[i]->aggvtxq[\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#2168: FILE: staging/otus/80211core/cagg_cs_fix.c:1276:
+			if (0 == time || time > wd->aggQPool[i]->aggvtxq[\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2236: FILE: staging/otus/80211core/cagg_cs_fix.c:1325:
+		tid_tx->size = zm_agg_qlen(dev, tid_tx->aggHead,
+							tid_tx->aggTail);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2237: FILE: staging/otus/80211core/cagg_cs_fix.c:1326:
+		if (NULL == buf) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2239: FILE: staging/otus/80211core/cagg_cs_fix.c:1328:
+			/*tid_tx->aggTail = tid_tx->aggHead = tid_tx->size = 0;
+			* zm_msg1_agg(ZM_LV_0, "GetVtxq buf == NULL,

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2246: FILE: staging/otus/80211core/cagg_cs_fix.c:1335:
+		/*
+		* queue is empty

WARNING:SPLIT_STRING: quoted string split across lines
#2249: FILE: staging/otus/80211core/cagg_cs_fix.c:1338:
+		zm_msg1_agg(ZM_LV_0, "tid_tx->aggHead == tid_tx->aggTail, "
+						"tid_tx->size=", tid_tx->size);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2251: FILE: staging/otus/80211core/cagg_cs_fix.c:1340:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2255: FILE: staging/otus/80211core/cagg_cs_fix.c:1344:
+		zm_msg1_agg(ZM_LV_0, "qlen!=tid_tx->size! tid_tx->size=",
+								tid_tx->size);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxDeleteQueue>
#2265: FILE: staging/otus/80211core/cagg_cs_fix.c:1367:
+u16_t zfAggTxDeleteQueue(zdev_t *dev, u16_t qnum)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2299: FILE: staging/otus/80211core/cagg_cs_fix.c:1385:
+	tx_tid->aggHead = tx_tid->aggTail = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2301: FILE: staging/otus/80211core/cagg_cs_fix.c:1387:
+	tx_tid->clearFlag = tx_tid->deleteFlag = 0;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawCore>
#2548: FILE: staging/otus/80211core/cagg_cs_fix.c:1403:
+void zfBawCore(zdev_t *dev, u16_t baw_seq, u32_t bitmap, u16_t aggLen)

CHECK:CAMELCASE: Avoid CamelCase: <getQ>
#2557: FILE: staging/otus/80211core/cagg_cs_fix.c:1412:
+	tid_baw = BAW->getQ(dev, baw_seq);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2559: FILE: staging/otus/80211core/cagg_cs_fix.c:1414:
+	if (NULL == tid_baw)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2570: FILE: staging/otus/80211core/cagg_cs_fix.c:1425:
+				zfAggTidTxInsertHead(dev, buf_info,
+							tid_baw->tid_tx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2587: FILE: staging/otus/80211core/cagg_cs_fix.c:1442:
+	u16_t i, j;
+	zmw_get_wlan_dev(dev);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2594: FILE: staging/otus/80211core/cagg_cs_fix.c:1449:
+		tid_baw->enabled = tid_baw->head = tid_baw->tail =

CHECK:CAMELCASE: Avoid CamelCase: <delPoint>
#2599: FILE: staging/otus/80211core/cagg_cs_fix.c:1454:
+	BAW->delPoint = 0;

CHECK:CAMELCASE: Avoid CamelCase: <getNewQ>
#2601: FILE: staging/otus/80211core/cagg_cs_fix.c:1456:
+	BAW->getNewQ = zfBawGetNewQ;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawGetNewQ>
#2601: FILE: staging/otus/80211core/cagg_cs_fix.c:1456:
+	BAW->getNewQ = zfBawGetNewQ;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawInsert>
#2602: FILE: staging/otus/80211core/cagg_cs_fix.c:1457:
+	BAW->insert = zfBawInsert;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawPop>
#2603: FILE: staging/otus/80211core/cagg_cs_fix.c:1458:
+	BAW->pop = zfBawPop;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawEnable>
#2604: FILE: staging/otus/80211core/cagg_cs_fix.c:1459:
+	BAW->enable = zfBawEnable;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawDisable>
#2605: FILE: staging/otus/80211core/cagg_cs_fix.c:1460:
+	BAW->disable = zfBawDisable;

CHECK:CAMELCASE: Avoid CamelCase: <zfBawGetQ>
#2606: FILE: staging/otus/80211core/cagg_cs_fix.c:1461:
+	BAW->getQ = zfBawGetQ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2614: FILE: staging/otus/80211core/cagg_cs_fix.c:1469:
+	u16_t i;
+	zmw_get_wlan_dev(dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2618: FILE: staging/otus/80211core/cagg_cs_fix.c:1473:
+	/*
+	for (i=0; i<ZM_BAW_POOL_SIZE; i++){

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2628: FILE: staging/otus/80211core/cagg_cs_fix.c:1483:
+	/* if (ZM_BAW_POOL_SIZE == i) {
+		return NULL;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2641: FILE: staging/otus/80211core/cagg_cs_fix.c:1496:
+	if (1 == next_baw->enabled)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2651: FILE: staging/otus/80211core/cagg_cs_fix.c:1506:
+u16_t zfBawInsert(zdev_t *dev, zbuf_t *buf, u16_t baw_seq, TID_BAW tid_baw,
+			u8_t baw_retransmit, struct baw_header_r *header_r)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2669: FILE: staging/otus/80211core/cagg_cs_fix.c:1524:
+		zfwMemoryCopy((u8_t *)baw_header->header,
+						(u8_t *)header_r->header, 58);

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#2670: FILE: staging/otus/80211core/cagg_cs_fix.c:1525:
+		zfwMemoryCopy((u8_t *)baw_header->mic   ,
 		                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2671: FILE: staging/otus/80211core/cagg_cs_fix.c:1526:
+		zfwMemoryCopy((u8_t *)baw_header->mic   ,
+						(u8_t *)header_r->mic   , 8);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2671: FILE: staging/otus/80211core/cagg_cs_fix.c:1526:
+						(u8_t *)header_r->mic   , 8);
 						                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#2672: FILE: staging/otus/80211core/cagg_cs_fix.c:1527:
+		zfwMemoryCopy((u8_t *)baw_header->snap  ,
 		                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2673: FILE: staging/otus/80211core/cagg_cs_fix.c:1528:
+		zfwMemoryCopy((u8_t *)baw_header->snap  ,
+						(u8_t *)header_r->snap  , 8);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2673: FILE: staging/otus/80211core/cagg_cs_fix.c:1528:
+						(u8_t *)header_r->snap  , 8);
 						                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2696: FILE: staging/otus/80211core/cagg_cs_fix.c:1551:
+	struct bufInfo *buf_info;
+	zmw_get_wlan_dev(dev);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2702: FILE: staging/otus/80211core/cagg_cs_fix.c:1557:
+	if (NULL == buf_info->buf)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2723: FILE: staging/otus/80211core/cagg_cs_fix.c:1578:
+	tid_baw->head = tid_baw->tail = tid_baw->size = 0;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2736: FILE: staging/otus/80211core/cagg_cs_fix.c:1591:
+		if (tid_baw->frame[i].buf) {
+

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2755: FILE: staging/otus/80211core/cagg_cs_fix.c:1610:
+		if (TRUE == tid_baw->enabled) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#2755: FILE: staging/otus/80211core/cagg_cs_fix.c:1610:
+		if (TRUE == tid_baw->enabled) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2757: FILE: staging/otus/80211core/cagg_cs_fix.c:1612:
+			zm_msg1_agg(ZM_LV_0, "get an old tid_baw, baw_seq=",
+								 baw_seq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2759: FILE: staging/otus/80211core/cagg_cs_fix.c:1614:
+			zm_msg1_agg(ZM_LV_0, "check a  tid_baw->start_seq=",
+							tid_baw->start_seq);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2764: FILE: staging/otus/80211core/cagg_cs_fix.c:1619:
+
+	}

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2765: FILE: staging/otus/80211core/cagg_cs_fix.c:1620:
+	if (ZM_BAW_POOL_SIZE == i)

CHECK:CAMELCASE: Avoid CamelCase: <aggTally>
#2775: FILE: staging/otus/80211core/cagg_cs_fix.c:1630:
+	struct aggTally *agg_tal;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggScanAndClear>
#2801: FILE: staging/otus/80211core/cagg_cs_fix.c:1668:
+u16_t zfAggScanAndClear(zdev_t *dev, u32_t time)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2865: FILE: staging/otus/80211core/cagg_cs_fix.c:1691:
+		if (1 == wd->aggQPool[i]->aggQEnabled) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2876: FILE: staging/otus/80211core/cagg_cs_fix.c:1702:
+			tid_tx->size = zm_agg_qlen(dev,
+					tid_tx->aggHead, tid_tx->aggTail);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#2880: FILE: staging/otus/80211core/cagg_cs_fix.c:1706:
+			} else if (tid_tx->size > 0) {
[...]
+					tid_tx->clearFlag = 1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2881: FILE: staging/otus/80211core/cagg_cs_fix.c:1707:
+			} else if (tid_tx->size > 0) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2885: FILE: staging/otus/80211core/cagg_cs_fix.c:1711:
+					/*zm_msg1_agg(ZM_LV_0, "clear queue
+						tick =", tick);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2894: FILE: staging/otus/80211core/cagg_cs_fix.c:1720:
+
+				}

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2898: FILE: staging/otus/80211core/cagg_cs_fix.c:1724:
+				/*
+				* queue empty

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#2903: FILE: staging/otus/80211core/cagg_cs_fix.c:1729:
+						"idle for n sec. n = ", \

WARNING:SPLIT_STRING: quoted string split across lines
#2903: FILE: staging/otus/80211core/cagg_cs_fix.c:1729:
+					zm_msg1_agg(ZM_LV_0, "delete queue, "
+						"idle for n sec. n = ", \

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2904: FILE: staging/otus/80211core/cagg_cs_fix.c:1730:
+						ZM_AGG_DELETE_TIME/10);
 						                  ^

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRxClear>
#2919: FILE: staging/otus/80211core/cagg_cs_fix.c:1742:
+	zfAggRxClear(dev, time);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggPrintTally>
#2934: FILE: staging/otus/80211core/cagg_cs_fix.c:1746:
+		zfAggPrintTally(dev);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3079: FILE: staging/otus/80211core/cagg_cs_fix.c:1782:
+	agg_tal->got_packets_sum = agg_tal->got_bytes_sum =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3080: FILE: staging/otus/80211core/cagg_cs_fix.c:1783:
+		agg_tal->sent_packets_sum = agg_tal->sent_bytes_sum = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->commTally.BA_Fail == 0'
#3086: FILE: staging/otus/80211core/cagg_cs_fix.c:1789:
+	if ((wd->commTally.BA_Fail == 0) || (wd->commTally.Hw_Tx_MPDU == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->commTally.Hw_Tx_MPDU == 0'
#3086: FILE: staging/otus/80211core/cagg_cs_fix.c:1789:
+	if ((wd->commTally.BA_Fail == 0) || (wd->commTally.Hw_Tx_MPDU == 0)) {

CHECK:CAMELCASE: Avoid CamelCase: <commTally>
#3086: FILE: staging/otus/80211core/cagg_cs_fix.c:1789:
+	if ((wd->commTally.BA_Fail == 0) || (wd->commTally.Hw_Tx_MPDU == 0)) {

CHECK:CAMELCASE: Avoid CamelCase: <BA_Fail>
#3086: FILE: staging/otus/80211core/cagg_cs_fix.c:1789:
+	if ((wd->commTally.BA_Fail == 0) || (wd->commTally.Hw_Tx_MPDU == 0)) {

CHECK:CAMELCASE: Avoid CamelCase: <Hw_Tx_MPDU>
#3086: FILE: staging/otus/80211core/cagg_cs_fix.c:1789:
+	if ((wd->commTally.BA_Fail == 0) || (wd->commTally.Hw_Tx_MPDU == 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3088: FILE: staging/otus/80211core/cagg_cs_fix.c:1791:
+		zm_msg1_agg(ZM_LV_0, "Hardware Tx MPDU=",
+						wd->commTally.Hw_Tx_MPDU);

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#3089: FILE: staging/otus/80211core/cagg_cs_fix.c:1792:
+		zm_msg1_agg(ZM_LV_0, "  BA Fail number=",
 		                        ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3090: FILE: staging/otus/80211core/cagg_cs_fix.c:1793:
+		zm_msg1_agg(ZM_LV_0, "  BA Fail number=",
+						wd->commTally.BA_Fail);

CHECK:BRACES: Unbalanced braces around else statement
#3091: FILE: staging/otus/80211core/cagg_cs_fix.c:1794:
+	} else

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#3092: FILE: staging/otus/80211core/cagg_cs_fix.c:1795:
+		zm_msg1_agg(ZM_LV_0, "1/(BA fail rate)=",
 		                         ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3093: FILE: staging/otus/80211core/cagg_cs_fix.c:1796:
+		zm_msg1_agg(ZM_LV_0, "1/(BA fail rate)=",
+			wd->commTally.Hw_Tx_MPDU/wd->commTally.BA_Fail);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3093: FILE: staging/otus/80211core/cagg_cs_fix.c:1796:
+			wd->commTally.Hw_Tx_MPDU/wd->commTally.BA_Fail);
 			                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3112: FILE: staging/otus/80211core/cagg_cs_fix.c:1815:
+			u16_t j = tid_rx->baw_tail;
+			while ((j != tid_rx->baw_head) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3113: FILE: staging/otus/80211core/cagg_cs_fix.c:1816:
+			while ((j != tid_rx->baw_head) &&
+						!tid_rx->frame[j].buf) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'j != tid_rx->baw_head'
#3116: FILE: staging/otus/80211core/cagg_cs_fix.c:1819:
+			if ((j != tid_rx->baw_head) &&
+					(time - tid_rx->frame[j].arrivalTime) >
+					(ZM_AGG_CLEAR_TIME - 5)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3117: FILE: staging/otus/80211core/cagg_cs_fix.c:1820:
+			if ((j != tid_rx->baw_head) &&
+					(time - tid_rx->frame[j].arrivalTime) >

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3121: FILE: staging/otus/80211core/cagg_cs_fix.c:1824:
+				zm_msg0_agg(ZM_LV_1,
+						"queue RxFlush by RxClear");

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRxFlush>
#3122: FILE: staging/otus/80211core/cagg_cs_fix.c:1825:
+				zfAggRxFlush(dev, 0, tid_rx);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRxEnabled>
#3132: FILE: staging/otus/80211core/cagg_cs_fix.c:1835:
+struct agg_tid_rx *zfAggRxEnabled(zdev_t *dev, zbuf_t *buf)

CHECK:CAMELCASE: Avoid CamelCase: <fragOff>
#3134: FILE: staging/otus/80211core/cagg_cs_fix.c:1837:
+	u16_t dst0, src[3], ac, aid, fragOff;

CHECK:CAMELCASE: Avoid CamelCase: <frameType>
#3138: FILE: staging/otus/80211core/cagg_cs_fix.c:1841:
+	u16_t frameType;

CHECK:CAMELCASE: Avoid CamelCase: <frameCtrl>
#3139: FILE: staging/otus/80211core/cagg_cs_fix.c:1842:
+	u16_t frameCtrl;

CHECK:CAMELCASE: Avoid CamelCase: <frameSubtype>
#3140: FILE: staging/otus/80211core/cagg_cs_fix.c:1843:
+	u16_t frameSubtype;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3187: FILE: staging/otus/80211core/cagg_cs_fix.c:1867:
+	tcp_seq = zmw_rx_buf_readb(dev, buf, 22+36) << 24;
 	                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3188: FILE: staging/otus/80211core/cagg_cs_fix.c:1868:
+	tcp_seq += zmw_rx_buf_readb(dev, buf, 22+37) << 16;
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3189: FILE: staging/otus/80211core/cagg_cs_fix.c:1869:
+	tcp_seq += zmw_rx_buf_readb(dev, buf, 22+38) << 8;
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3190: FILE: staging/otus/80211core/cagg_cs_fix.c:1870:
+	tcp_seq += zmw_rx_buf_readb(dev, buf, 22+39);
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3200: FILE: staging/otus/80211core/cagg_cs_fix.c:1874:
+	dst0 = zmw_rx_buf_readh(dev, buf, offset+4);
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3202: FILE: staging/otus/80211core/cagg_cs_fix.c:1876:
+	src[0] = zmw_rx_buf_readh(dev, buf, offset+10);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3203: FILE: staging/otus/80211core/cagg_cs_fix.c:1877:
+	src[1] = zmw_rx_buf_readh(dev, buf, offset+12);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3204: FILE: staging/otus/80211core/cagg_cs_fix.c:1878:
+	src[2] = zmw_rx_buf_readh(dev, buf, offset+14);
 	                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3228: FILE: staging/otus/80211core/cagg_cs_fix.c:1891:
+	/*
+	* Filter unicast frame only, aid == 0 is for debug only

WARNING:SPACING: space prohibited before semicolon
#3240: FILE: staging/otus/80211core/cagg_cs_fix.c:1895:
+		tid_rx = zfAggRxGetQueue(dev, buf) ;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRxGetQueue>
#3240: FILE: staging/otus/80211core/cagg_cs_fix.c:1895:
+		tid_rx = zfAggRxGetQueue(dev, buf) ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3241: FILE: staging/otus/80211core/cagg_cs_fix.c:1896:
+		if (!tid_rx)
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3243: FILE: staging/otus/80211core/cagg_cs_fix.c:1898:
+			return NULL;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#3243: FILE: staging/otus/80211core/cagg_cs_fix.c:1898:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3245: FILE: staging/otus/80211core/cagg_cs_fix.c:1900:
+			/*if (tid_rx->addBaExchangeStatusCode ==
+			ZM_AGG_ADDBA_RESPONSE)

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRx>
#3261: FILE: staging/otus/80211core/cagg_cs_fix.c:1912:
+u16_t zfAggRx(zdev_t *dev, zbuf_t *buf, struct zsAdditionInfo *addInfo,

CHECK:CAMELCASE: Avoid CamelCase: <zsAdditionInfo>
#3261: FILE: staging/otus/80211core/cagg_cs_fix.c:1912:
+u16_t zfAggRx(zdev_t *dev, zbuf_t *buf, struct zsAdditionInfo *addInfo,

CHECK:CAMELCASE: Avoid CamelCase: <addInfo>
#3261: FILE: staging/otus/80211core/cagg_cs_fix.c:1912:
+u16_t zfAggRx(zdev_t *dev, zbuf_t *buf, struct zsAdditionInfo *addInfo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3262: FILE: staging/otus/80211core/cagg_cs_fix.c:1913:
+u16_t zfAggRx(zdev_t *dev, zbuf_t *buf, struct zsAdditionInfo *addInfo,
+						struct agg_tid_rx *tid_rx)

CHECK:CAMELCASE: Avoid CamelCase: <frameSubType>
#3662: FILE: staging/otus/80211core/cagg_cs_fix.c:1919:
+	u8_t    frameSubType;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3672: FILE: staging/otus/80211core/cagg_cs_fix.c:1929:
+	seq_no = zmw_rx_buf_readh(dev, buf, offset+22) >> 4;
 	                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3676: FILE: staging/otus/80211core/cagg_cs_fix.c:1933:
+	/*
+	* for debug

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3680: FILE: staging/otus/80211core/cagg_cs_fix.c:1937:
+	/* zm_msg2_agg(ZM_LV_0, "queue seq = ", seq_no);
+	* DbgPrint("%s:%s%lxh %s%lxh\n", __func__, "queue seq=", seq_no,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3687: FILE: staging/otus/80211core/cagg_cs_fix.c:1944:
+	/* In some APs, we found that it might transmit NULL data whose
+	sequence number is out or order. In order to avoid this problem,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'zfAggRx', this function's name, in a string
#3701: FILE: staging/otus/80211core/cagg_cs_fix.c:1958:
+			zm_debug_msg0("Free Rx NULL data in zfAggRx");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3710: FILE: staging/otus/80211core/cagg_cs_fix.c:1967:
+	/*
+	* sequence number wrap at 4k

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3720: FILE: staging/otus/80211core/cagg_cs_fix.c:1977:
+
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3727: FILE: staging/otus/80211core/cagg_cs_fix.c:1984:
+			/* DbgPrint("head=%d, tail=%d", tid_rx->baw_head,
+			tid_rx->baw_tail);

CHECK:CAMELCASE: Avoid CamelCase: <zfcbRecv80211>
#3737: FILE: staging/otus/80211core/cagg_cs_fix.c:1994:
+		if (wd->zfcbRecv80211 != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wd->zfcbRecv80211"
#3737: FILE: staging/otus/80211core/cagg_cs_fix.c:1994:
+		if (wd->zfcbRecv80211 != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3739: FILE: staging/otus/80211core/cagg_cs_fix.c:1996:
+			/*seq_no = zmw_rx_buf_readh(dev, buf, offset+22) >> 4;
+			DbgPrint("Recv indicate seq=%d\n", seq_no);

CHECK:CAMELCASE: Avoid CamelCase: <zfiRecv80211>
#3745: FILE: staging/otus/80211core/cagg_cs_fix.c:2002:
+			zfiRecv80211(dev, buf, addInfo);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRxEnqueue>
#3747: FILE: staging/otus/80211core/cagg_cs_fix.c:2004:
+	} else if (!zfAggRxEnqueue(dev, buf, tid_rx, addInfo)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3749: FILE: staging/otus/80211core/cagg_cs_fix.c:2006:
+		/*
+		* duplicated packet

CHECK:CAMELCASE: Avoid CamelCase: <tailIndex>
#3756: FILE: staging/otus/80211core/cagg_cs_fix.c:2013:
+		u16_t tailIndex;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3771: FILE: staging/otus/80211core/cagg_cs_fix.c:2028:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3773: FILE: staging/otus/80211core/cagg_cs_fix.c:2030:
+		/*if(pbuf && tid_rx->baw_size > 0)
+			tid_rx->baw_size--;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wd->zfcbRecv80211"
#3780: FILE: staging/otus/80211core/cagg_cs_fix.c:2037:
+		if (wd->zfcbRecv80211 != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3782: FILE: staging/otus/80211core/cagg_cs_fix.c:2039:
+			/*seq_no = zmw_rx_buf_readh(dev, pbuf, offset+22) >> 4;
+			DbgPrint("Recv indicate seq=%d\n", seq_no);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3788: FILE: staging/otus/80211core/cagg_cs_fix.c:2045:
+			/*seq_no = zmw_rx_buf_readh(dev, pbuf, offset+22) >> 4;
+			DbgPrint("Recv indicate seq=%d\n", seq_no);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3808: FILE: staging/otus/80211core/cagg_cs_fix.c:2065:
+	src[0] = zmw_rx_buf_readh(dev, buf, offset+10);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3809: FILE: staging/otus/80211core/cagg_cs_fix.c:2066:
+	src[1] = zmw_rx_buf_readh(dev, buf, offset+12);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3810: FILE: staging/otus/80211core/cagg_cs_fix.c:2067:
+	src[2] = zmw_rx_buf_readh(dev, buf, offset+14);
 	                                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->tid_rx[i]->aid == aid'
#3819: FILE: staging/otus/80211core/cagg_cs_fix.c:2076:
+		if ((wd->tid_rx[i]->aid == aid) && (wd->tid_rx[i]->ac == ac)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->tid_rx[i]->ac == ac'
#3819: FILE: staging/otus/80211core/cagg_cs_fix.c:2076:
+		if ((wd->tid_rx[i]->aid == aid) && (wd->tid_rx[i]->ac == ac)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3830: FILE: staging/otus/80211core/cagg_cs_fix.c:2087:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3832: FILE: staging/otus/80211core/cagg_cs_fix.c:2089:
+u16_t zfAggRxEnqueue(zdev_t *dev, zbuf_t *buf, struct agg_tid_rx *tid_rx,
+						struct zsAdditionInfo *addInfo)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3845: FILE: staging/otus/80211core/cagg_cs_fix.c:2102:
+	seq_no = zmw_rx_buf_readh(dev, buf, offset+22) >> 4;
 	                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3849: FILE: staging/otus/80211core/cagg_cs_fix.c:2106:
+	/*
+	* sequence number wrap at 4k

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid_rx->seq_start > 3967'
#3854: FILE: staging/otus/80211core/cagg_cs_fix.c:2111:
+		if ((tid_rx->seq_start > 3967) && (seq_no < 128)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seq_no < 128'
#3854: FILE: staging/otus/80211core/cagg_cs_fix.c:2111:
+		if ((tid_rx->seq_start > 3967) && (seq_no < 128)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3881: FILE: staging/otus/80211core/cagg_cs_fix.c:2138:
+		/*if (wd->zfcbRecv80211 != NULL) {
+			wd->zfcbRecv80211(dev, buf, addInfo);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3885: FILE: staging/otus/80211core/cagg_cs_fix.c:2142:
+		}*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3891: FILE: staging/otus/80211core/cagg_cs_fix.c:2148:
+		/*zfAggRxFlush(dev, seq_no, tid_rx);
+		tid_rx->seq_start = seq_no;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3896: FILE: staging/otus/80211core/cagg_cs_fix.c:2153:
+		/* DbgPrint("Free an old packet, seq_start=%d, seq_no=%d\n",
+				tid_rx->seq_start, seq_no);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3900: FILE: staging/otus/80211core/cagg_cs_fix.c:2157:
+		/*
+		* duplicate past packet

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3904: FILE: staging/otus/80211core/cagg_cs_fix.c:2161:
+		return 0;
+	} else {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3923: FILE: staging/otus/80211core/cagg_cs_fix.c:2180:
+		/*
+		* queue full

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3926: FILE: staging/otus/80211core/cagg_cs_fix.c:2183:
+		/*DbgPrint("index >= 64, seq_start=%d, seq_no=%d\n",
+		tid_rx->seq_start, seq_no);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid_rx->seq_start > seq_no'
#3931: FILE: staging/otus/80211core/cagg_cs_fix.c:2188:
+		if ((tid_rx->seq_start > seq_no) && (tid_rx->seq_start > 1000)
+				&& (tid_rx->seq_start - 1000) > seq_no) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid_rx->seq_start > 1000'
#3931: FILE: staging/otus/80211core/cagg_cs_fix.c:2188:
+		if ((tid_rx->seq_start > seq_no) && (tid_rx->seq_start > 1000)
+				&& (tid_rx->seq_start - 1000) > seq_no) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3932: FILE: staging/otus/80211core/cagg_cs_fix.c:2189:
+		if ((tid_rx->seq_start > seq_no) && (tid_rx->seq_start > 1000)
+				&& (tid_rx->seq_start - 1000) > seq_no) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3939: FILE: staging/otus/80211core/cagg_cs_fix.c:2196:
+			/*DbgPrint("index >= 64, seq_start=%d, seq_no=%d\n",
+			tid_rx->seq_start, seq_no);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid_rx->seq_start > seq_no'
#3944: FILE: staging/otus/80211core/cagg_cs_fix.c:2201:
+			if ((tid_rx->seq_start > seq_no) &&
+						(tid_rx->seq_start > 1000) &&
+					(tid_rx->seq_start - 1000) > seq_no) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid_rx->seq_start > 1000'
#3944: FILE: staging/otus/80211core/cagg_cs_fix.c:2201:
+			if ((tid_rx->seq_start > seq_no) &&
+						(tid_rx->seq_start > 1000) &&
+					(tid_rx->seq_start - 1000) > seq_no) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3945: FILE: staging/otus/80211core/cagg_cs_fix.c:2202:
+			if ((tid_rx->seq_start > seq_no) &&
+						(tid_rx->seq_start > 1000) &&

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3952: FILE: staging/otus/80211core/cagg_cs_fix.c:2209:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3955: FILE: staging/otus/80211core/cagg_cs_fix.c:2212:
+	if (tid_rx->frame[q_index].buf &&
+		(((tid_rx->baw_head - tid_rx->baw_tail) & ZM_AGG_BAW_MASK) >

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3957: FILE: staging/otus/80211core/cagg_cs_fix.c:2214:
+		(((q_index) - tid_rx->baw_tail) & ZM_AGG_BAW_MASK))) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3961: FILE: staging/otus/80211core/cagg_cs_fix.c:2218:
+		/* DbgPrint("Free a duplicate packet, seq_start=%d,
+		*  seq_no=%d\n", tid_rx->seq_start, seq_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3979: FILE: staging/otus/80211core/cagg_cs_fix.c:2236:
+	zfwMemoryCopy((void *)&tid_rx->frame[q_index].addInfo, (void *)addInfo,
+						sizeof(struct zsAdditionInfo));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3982: FILE: staging/otus/80211core/cagg_cs_fix.c:2239:
+	/*
+	* for debug simulated aggregation only,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3987: FILE: staging/otus/80211core/cagg_cs_fix.c:2244:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4000: FILE: staging/otus/80211core/cagg_cs_fix.c:2257:
+	/*
+	* success

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4003: FILE: staging/otus/80211core/cagg_cs_fix.c:2260:
+	/*DbgPrint("head=%d, tail=%d, start=%d", tid_rx->baw_head,
+	tid_rx->baw_tail, tid_rx->seq_start);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4013: FILE: staging/otus/80211core/cagg_cs_fix.c:2270:
+	struct zsAdditionInfo addInfo;
+	zmw_get_wlan_dev(dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4027: FILE: staging/otus/80211core/cagg_cs_fix.c:2284:
+		zfwMemoryCopy((void *)&addInfo,
+		(void *)&tid_rx->frame[tid_rx->baw_tail].addInfo,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4036: FILE: staging/otus/80211core/cagg_cs_fix.c:2293:
+		if (pbuf) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wd->zfcbRecv80211"
#4039: FILE: staging/otus/80211core/cagg_cs_fix.c:2296:
+			if (wd->zfcbRecv80211 != NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4053: FILE: staging/otus/80211core/cagg_cs_fix.c:2310:
+	tid_rx->baw_head = tid_rx->baw_tail = 0;

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRxFreeBuf>
#4064: FILE: staging/otus/80211core/cagg_cs_fix.c:2333:
+u16_t zfAggRxFreeBuf(zdev_t *dev, u16_t destroy)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4190: FILE: staging/otus/80211core/cagg_cs_fix.c:2360:
+#if 0

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4214: FILE: staging/otus/80211core/cagg_cs_fix.c:2384:
+		tid_rx->baw_head = tid_rx->baw_tail = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4222: FILE: staging/otus/80211core/cagg_cs_fix.c:2392:
+			zm_msg1_agg(ZM_LV_0,
+					"Device down, clear BAW queue:", i);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4227: FILE: staging/otus/80211core/cagg_cs_fix.c:2397:
+		if (1 == wd->aggQPool[i]->aggQEnabled) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4238: FILE: staging/otus/80211core/cagg_cs_fix.c:2408:
+			zfwMemFree(dev, wd->aggQPool[i],
+						sizeof(struct aggQueue));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4240: FILE: staging/otus/80211core/cagg_cs_fix.c:2410:
+			zfwMemFree(dev, wd->tid_rx[i],
+						sizeof(struct agg_tid_rx));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4252: FILE: staging/otus/80211core/cagg_cs_fix.c:2422:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRecvBAR>
#4253: FILE: staging/otus/80211core/cagg_cs_fix.c:2423:
+void zfAggRecvBAR(zdev_t *dev, zbuf_t *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4257: FILE: staging/otus/80211core/cagg_cs_fix.c:2427:
+	u8_t i, bitmap[8];
+	len = zfwBufGetSize(dev, buf);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4258: FILE: staging/otus/80211core/cagg_cs_fix.c:2428:
+	start_seq = zmw_rx_buf_readh(dev, buf, len-2);
 	                                          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#4259: FILE: staging/otus/80211core/cagg_cs_fix.c:2429:
+	DbgPrint("Received a BAR Control frame, start_seq=%d", start_seq>>4);
 	                                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <zfSendBA>
#4263: FILE: staging/otus/80211core/cagg_cs_fix.c:2433:
+	zfSendBA(dev, start_seq, bitmap);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggTxRetransmit>
#4337: FILE: staging/otus/80211core/cagg_cs_fix.c:2438:
+void zfAggTxRetransmit(zdev_t *dev, struct bufInfo *buf_info,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4338: FILE: staging/otus/80211core/cagg_cs_fix.c:2439:
+void zfAggTxRetransmit(zdev_t *dev, struct bufInfo *buf_info,
+			struct aggControl *aggControl, TID_TX tid_tx)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ZM_AGG_FIRST_MPDU == aggControl->ampduIndication'
#4344: FILE: staging/otus/80211core/cagg_cs_fix.c:2445:
+	if (aggControl && (ZM_AGG_FIRST_MPDU == aggControl->ampduIndication)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4344: FILE: staging/otus/80211core/cagg_cs_fix.c:2445:
+	if (aggControl && (ZM_AGG_FIRST_MPDU == aggControl->ampduIndication)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4352: FILE: staging/otus/80211core/cagg_cs_fix.c:2453:
+		/*if (wd->enableAggregation==0 &&
+				!(buf_info->baw_header->header[6]&0x1))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4359: FILE: staging/otus/80211core/cagg_cs_fix.c:2460:
+		if (ZM_AGG_LAST_MPDU == aggControl->ampduIndication) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4366: FILE: staging/otus/80211core/cagg_cs_fix.c:2467:
+		/*}
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4383: FILE: staging/otus/80211core/cagg_cs_fix.c:2484:
+	/*if (aggControl->tid_baw) {
+		struct baw_header_r header_r;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4396: FILE: staging/otus/80211core/cagg_cs_fix.c:2497:
+	}*/

CHECK:CAMELCASE: Avoid CamelCase: <zfHpSend>
#4398: FILE: staging/otus/80211core/cagg_cs_fix.c:2499:
+	err = zfHpSend(dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4399: FILE: staging/otus/80211core/cagg_cs_fix.c:2500:
+	err = zfHpSend(dev,
+		buf_info->baw_header->header,

CHECK:CAMELCASE: Avoid CamelCase: <zlError>
#4413: FILE: staging/otus/80211core/cagg_cs_fix.c:2513:
+		goto zlError;

CHECK:CAMELCASE: Avoid CamelCase: <bufType>
#4434: FILE: staging/otus/80211core/cagg_cs_fix.c:2541:
+u16_t zfAggTxSendEth(zdev_t *dev, zbuf_t *buf, u16_t port, u16_t bufType,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4435: FILE: staging/otus/80211core/cagg_cs_fix.c:2542:
+u16_t zfAggTxSendEth(zdev_t *dev, zbuf_t *buf, u16_t port, u16_t bufType,
+		u8_t flag, struct aggControl *aggControl, TID_TX tid_tx)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4461: FILE: staging/otus/80211core/cagg_cs_fix.c:2548:
+	u16_t header[(8+30+2+18)/2];    /* ctr+(4+a1+a2+a3+2+a4)+qos+iv */
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4461: FILE: staging/otus/80211core/cagg_cs_fix.c:2548:
+	u16_t header[(8+30+2+18)/2];    /* ctr+(4+a1+a2+a3+2+a4)+qos+iv */
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4461: FILE: staging/otus/80211core/cagg_cs_fix.c:2548:
+	u16_t header[(8+30+2+18)/2];    /* ctr+(4+a1+a2+a3+2+a4)+qos+iv */
 	                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4461: FILE: staging/otus/80211core/cagg_cs_fix.c:2548:
+	u16_t header[(8+30+2+18)/2];    /* ctr+(4+a1+a2+a3+2+a4)+qos+iv */
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4463: FILE: staging/otus/80211core/cagg_cs_fix.c:2550:
+	u16_t mic[8/2];
 	           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4465: FILE: staging/otus/80211core/cagg_cs_fix.c:2552:
+	u16_t snap[8/2];
 	            ^

CHECK:CAMELCASE: Avoid CamelCase: <fragLen>
#4467: FILE: staging/otus/80211core/cagg_cs_fix.c:2554:
+	u16_t fragLen;

CHECK:CAMELCASE: Avoid CamelCase: <frameLen>
#4468: FILE: staging/otus/80211core/cagg_cs_fix.c:2555:
+	u16_t frameLen;

CHECK:CAMELCASE: Avoid CamelCase: <fragNum>
#4469: FILE: staging/otus/80211core/cagg_cs_fix.c:2556:
+	u16_t fragNum;

CHECK:CAMELCASE: Avoid CamelCase: <zsFrag>
#4470: FILE: staging/otus/80211core/cagg_cs_fix.c:2557:
+	struct zsFrag frag;

CHECK:CAMELCASE: Avoid CamelCase: <qosType>
#4475: FILE: staging/otus/80211core/cagg_cs_fix.c:2562:
+	u8_t qosType, keyIdx = 0;

CHECK:CAMELCASE: Avoid CamelCase: <zfTxGetIpTosAndFrag>
#4490: FILE: staging/otus/80211core/cagg_cs_fix.c:2572:
+	zfTxGetIpTosAndFrag(dev, buf, &up, &fragOff);

CHECK:CAMELCASE: Avoid CamelCase: <bcHalKeyIdx>
#4592: FILE: staging/otus/80211core/cagg_cs_fix.c:2617:
+		keyIdx = wd->ap.bcHalKeyIdx[port];

CHECK:CAMELCASE: Avoid CamelCase: <staTable>
#4595: FILE: staging/otus/80211core/cagg_cs_fix.c:2620:
+			switch (wd->ap.staTable[id].encryMode) {

CHECK:CAMELCASE: Avoid CamelCase: <encryMode>
#4595: FILE: staging/otus/80211core/cagg_cs_fix.c:2620:
+			switch (wd->ap.staTable[id].encryMode) {

CHECK:CAMELCASE: Avoid CamelCase: <keyId>
#4633: FILE: staging/otus/80211core/cagg_cs_fix.c:2635:
+			keyIdx = wd->sta.keyId;

CHECK:CAMELCASE: Avoid CamelCase: <cencKeyId>
#4658: FILE: staging/otus/80211core/cagg_cs_fix.c:2646:
+			keyIdx = wd->sta.cencKeyId;

CHECK:CAMELCASE: Avoid CamelCase: <zfTxGenWlanSnap>
#4665: FILE: staging/otus/80211core/cagg_cs_fix.c:2653:
+	removeLen = zfTxGenWlanSnap(dev, buf, snap, &snapLen);

CHECK:CAMELCASE: Avoid CamelCase: <fragThreshold>
#4668: FILE: staging/otus/80211core/cagg_cs_fix.c:2656:
+	fragLen = wd->fragThreshold;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->wlanMode == ZM_MODE_INFRASTRUCTURE'
#4692: FILE: staging/otus/80211core/cagg_cs_fix.c:2662:
+	if ((wd->wlanMode == ZM_MODE_INFRASTRUCTURE) &&
+		(wd->sta.encryMode == ZM_TKIP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->sta.encryMode == ZM_TKIP'
#4692: FILE: staging/otus/80211core/cagg_cs_fix.c:2662:
+	if ((wd->wlanMode == ZM_MODE_INFRASTRUCTURE) &&
+		(wd->sta.encryMode == ZM_TKIP)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4693: FILE: staging/otus/80211core/cagg_cs_fix.c:2663:
+	if ((wd->wlanMode == ZM_MODE_INFRASTRUCTURE) &&
+		(wd->sta.encryMode == ZM_TKIP)) {

CHECK:CAMELCASE: Avoid CamelCase: <zfTxGenWlanTail>
#4695: FILE: staging/otus/80211core/cagg_cs_fix.c:2665:
+			micLen = zfTxGenWlanTail(dev, buf, snap, snapLen, mic);

CHECK:CAMELCASE: Avoid CamelCase: <zfApGetStaQosType>
#4782: FILE: staging/otus/80211core/cagg_cs_fix.c:2684:
+		zfApGetStaQosType(dev, da, &qosType);

CHECK:CAMELCASE: Avoid CamelCase: <wmeConnected>
#4786: FILE: staging/otus/80211core/cagg_cs_fix.c:2688:
+		if (wd->sta.wmeConnected == 0)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#4795: FILE: staging/otus/80211core/cagg_cs_fix.c:2697:
+	frag.seq[0] = ((wd->seq[zcUpToAc[up&0x7]]++) << 4);
 	                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ZM_AGG_FIRST_MPDU == aggControl->ampduIndication'
#4796: FILE: staging/otus/80211core/cagg_cs_fix.c:2698:
+	if (aggControl && (ZM_AGG_FIRST_MPDU == aggControl->ampduIndication)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4796: FILE: staging/otus/80211core/cagg_cs_fix.c:2698:
+	if (aggControl && (ZM_AGG_FIRST_MPDU == aggControl->ampduIndication)) {

CHECK:CAMELCASE: Avoid CamelCase: <zfTxGenWlanHeader>
#4812: FILE: staging/otus/80211core/cagg_cs_fix.c:2714:
+		headerLen = zfTxGenWlanHeader(dev, frag.buf[i], header,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4813: FILE: staging/otus/80211core/cagg_cs_fix.c:2715:
+		headerLen = zfTxGenWlanHeader(dev, frag.buf[i], header,
+				frag.seq[i], frag.flag[i], snapLen+micLen,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4813: FILE: staging/otus/80211core/cagg_cs_fix.c:2715:
+				frag.seq[i], frag.flag[i], snapLen+micLen,
 				                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4819: FILE: staging/otus/80211core/cagg_cs_fix.c:2721:
+		/*if ((addrTblSize = zfwBufMapDma(dev, frag.buf[i],
+							&addrTbl)) == 0)

CHECK:CAMELCASE: Avoid CamelCase: <addrTblSize>
#4890: FILE: staging/otus/80211core/cagg_cs_fix.c:2738:
+		zm_msg1_tx(ZM_LV_0, "addrTblSize=", addrTblSize);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#4895: FILE: staging/otus/80211core/cagg_cs_fix.c:2743:
+		if ((da[0]&0x1) == 0) {
 		          ^

CHECK:CAMELCASE: Avoid CamelCase: <txUnicastFrm>
#4896: FILE: staging/otus/80211core/cagg_cs_fix.c:2744:
+			wd->commTally.txUnicastFrm++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4897: FILE: staging/otus/80211core/cagg_cs_fix.c:2745:
+			wd->commTally.txUnicastOctets += (fragLen+snapLen);
 			                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <txUnicastOctets>
#4897: FILE: staging/otus/80211core/cagg_cs_fix.c:2745:
+			wd->commTally.txUnicastOctets += (fragLen+snapLen);

CHECK:CAMELCASE: Avoid CamelCase: <txBroadcastFrm>
#4899: FILE: staging/otus/80211core/cagg_cs_fix.c:2747:
+			wd->commTally.txBroadcastFrm++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4900: FILE: staging/otus/80211core/cagg_cs_fix.c:2748:
+			wd->commTally.txBroadcastOctets += (fragLen+snapLen);
 			                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <txBroadcastOctets>
#4900: FILE: staging/otus/80211core/cagg_cs_fix.c:2748:
+			wd->commTally.txBroadcastOctets += (fragLen+snapLen);

CHECK:CAMELCASE: Avoid CamelCase: <txMulticastFrm>
#4902: FILE: staging/otus/80211core/cagg_cs_fix.c:2750:
+			wd->commTally.txMulticastFrm++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4903: FILE: staging/otus/80211core/cagg_cs_fix.c:2751:
+			wd->commTally.txMulticastOctets += (fragLen+snapLen);
 			                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <txMulticastOctets>
#4903: FILE: staging/otus/80211core/cagg_cs_fix.c:2751:
+			wd->commTally.txMulticastOctets += (fragLen+snapLen);

CHECK:CAMELCASE: Avoid CamelCase: <ledStruct>
#4905: FILE: staging/otus/80211core/cagg_cs_fix.c:2753:
+		wd->ledStruct.txTraffic++;

CHECK:CAMELCASE: Avoid CamelCase: <txTraffic>
#4905: FILE: staging/otus/80211core/cagg_cs_fix.c:2753:
+		wd->ledStruct.txTraffic++;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4907: FILE: staging/otus/80211core/cagg_cs_fix.c:2755:
+#if 0		/* Who care this? */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4908: FILE: staging/otus/80211core/cagg_cs_fix.c:2756:
+		if ((i) && (i == (fragNum-1)))
 		                         ^

CHECK:CAMELCASE: Avoid CamelCase: <trafTally>
#4909: FILE: staging/otus/80211core/cagg_cs_fix.c:2757:
+			wd->trafTally.txDataByteCount -= micLen;

CHECK:CAMELCASE: Avoid CamelCase: <txDataByteCount>
#4909: FILE: staging/otus/80211core/cagg_cs_fix.c:2757:
+			wd->trafTally.txDataByteCount -= micLen;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4913: FILE: staging/otus/80211core/cagg_cs_fix.c:2761:
+		/*if (aggControl->tid_baw && aggControl->aggEnabled) {
+		struct baw_header_r header_r;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4930: FILE: staging/otus/80211core/cagg_cs_fix.c:2778:
+		err = zfHpSend(dev, header, headerLen, snap, snapLen,
+				mic, micLen, frag.buf[i], removeLen,

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#4931: FILE: staging/otus/80211core/cagg_cs_fix.c:2779:
+				frag.bufType[i], zcUpToAc[up&0x7],
 				                            ^

CHECK:CAMELCASE: Avoid CamelCase: <zfAggSendAddbaRequest>
#4970: FILE: staging/otus/80211core/cagg_cs_fix.c:2802:
+u16_t zfAggSendAddbaRequest(zdev_t *dev, u16_t *dst, u16_t ac, u16_t up)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5130: FILE: staging/otus/80211core/cagg_cs_fix.c:2810:
+	u16_t header[(24+25+1)/2];
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5130: FILE: staging/otus/80211core/cagg_cs_fix.c:2810:
+	u16_t header[(24+25+1)/2];
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#5130: FILE: staging/otus/80211core/cagg_cs_fix.c:2810:
+	u16_t header[(24+25+1)/2];
 	                      ^

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#5140: FILE: staging/otus/80211core/cagg_cs_fix.c:2820:
+	* TBD : Maximum size of managment frame
 	                        ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5140: FILE: staging/otus/80211core/cagg_cs_fix.c:2820:
+	/*
+	* TBD : Maximum size of managment frame

CHECK:CAMELCASE: Avoid CamelCase: <zfwBufAllocate>
#5142: FILE: staging/otus/80211core/cagg_cs_fix.c:2822:
+	buf = zfwBufAllocate(dev, 1024);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#5144: FILE: staging/otus/80211core/cagg_cs_fix.c:2824:
+	if (buf == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5150: FILE: staging/otus/80211core/cagg_cs_fix.c:2830:
+	/*
+	* Reserve room for wlan header

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5155: FILE: staging/otus/80211core/cagg_cs_fix.c:2835:
+	/*
+	* add addba frame body

CHECK:CAMELCASE: Avoid CamelCase: <zfAggSetAddbaFrameBody>
#5157: FILE: staging/otus/80211core/cagg_cs_fix.c:2837:
+	offset = zfAggSetAddbaFrameBody(dev, buf, offset, ac, up);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5159: FILE: staging/otus/80211core/cagg_cs_fix.c:2839:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zfwBufSetSize>
#5160: FILE: staging/otus/80211core/cagg_cs_fix.c:2840:
+	zfwBufSetSize(dev, buf, offset);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5163: FILE: staging/otus/80211core/cagg_cs_fix.c:2843:
+	/*
+	* Copy wlan header

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5165: FILE: staging/otus/80211core/cagg_cs_fix.c:2845:
+	zfAggGenAddbaHeader(dev, dst, header, offset-hlen, buf, vap, encrypt);
 	                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <zfAggGenAddbaHeader>
#5165: FILE: staging/otus/80211core/cagg_cs_fix.c:2845:
+	zfAggGenAddbaHeader(dev, dst, header, offset-hlen, buf, vap, encrypt);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5166: FILE: staging/otus/80211core/cagg_cs_fix.c:2846:
+	for (i = 0; i < (hlen>>1); i++)
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5167: FILE: staging/otus/80211core/cagg_cs_fix.c:2847:
+		zmw_tx_buf_writeh(dev, buf, i*2, header[i]);
 		                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5171: FILE: staging/otus/80211core/cagg_cs_fix.c:2851:
+	/*if ((addrTblSize = zfwBufMapDma(dev, buf, &addrTbl)) == 0)
+	if ((addrTblSize = zfwMapTxDma(dev, buf, &addrTbl)) == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5189: FILE: staging/otus/80211core/cagg_cs_fix.c:2866:
+	err = zfHpSend(dev, NULL, 0, NULL, 0, NULL, 0, buf, 0,
+		ZM_INTERNAL_ALLOC_BUF, 0, 0xff);

CHECK:CAMELCASE: Avoid CamelCase: <zfPutVmmq>
#5287: FILE: staging/otus/80211core/cagg_cs_fix.c:2872:
+	zfPutVmmq(dev, buf);

CHECK:CAMELCASE: Avoid CamelCase: <zfPushVtxq>
#5288: FILE: staging/otus/80211core/cagg_cs_fix.c:2873:
+	zfPushVtxq(dev);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5293: FILE: staging/otus/80211core/cagg_cs_fix.c:2878:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5296: FILE: staging/otus/80211core/cagg_cs_fix.c:2881:
+u16_t zfAggSetAddbaFrameBody(zdev_t *dev, zbuf_t *buf,
+			u16_t offset, u16_t ac, u16_t up)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5304: FILE: staging/otus/80211core/cagg_cs_fix.c:2889:
+	/*
+	* ADDBA Request frame body

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5308: FILE: staging/otus/80211core/cagg_cs_fix.c:2893:
+	/*
+	* Category

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5312: FILE: staging/otus/80211core/cagg_cs_fix.c:2897:
+	/*
+	* Action details = 0

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5316: FILE: staging/otus/80211core/cagg_cs_fix.c:2901:
+	/*
+	* Dialog Token = nonzero

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5321: FILE: staging/otus/80211core/cagg_cs_fix.c:2906:
+	/*
+	* Block Ack parameter set

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5322: FILE: staging/otus/80211core/cagg_cs_fix.c:2907:
+	* BA policy = 1 for immediate BA, 0 for delayed BA
 	  ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5322: FILE: staging/otus/80211core/cagg_cs_fix.c:2907:
+	* BA policy = 1 for immediate BA, 0 for delayed BA
 	                              ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5322: FILE: staging/otus/80211core/cagg_cs_fix.c:2907:
+	* BA policy = 1 for immediate BA, 0 for delayed BA
 	                                                ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5328: FILE: staging/otus/80211core/cagg_cs_fix.c:2913:
+	* x Reserved x BA policy x  TID   x Buffer size x
 	               ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#5333: FILE: staging/otus/80211core/cagg_cs_fix.c:2918:
+	ba_parameter |= 2;          /* ba policy = 1 */
 	                               ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5337: FILE: staging/otus/80211core/cagg_cs_fix.c:2922:
+	* BA timeout value
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5337: FILE: staging/otus/80211core/cagg_cs_fix.c:2922:
+	/*
+	* BA timeout value

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5342: FILE: staging/otus/80211core/cagg_cs_fix.c:2927:
+	* BA starting sequence number
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5342: FILE: staging/otus/80211core/cagg_cs_fix.c:2927:
+	/*
+	* BA starting sequence number

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5346: FILE: staging/otus/80211core/cagg_cs_fix.c:2931:
+	* x Frag num(0) x BA starting seq num x
 	                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5357: FILE: staging/otus/80211core/cagg_cs_fix.c:2942:
+u16_t zfAggGenAddbaHeader(zdev_t *dev, u16_t *dst,
+	u16_t *header, u16_t len, zbuf_t *buf, u16_t vap, u8_t encrypt)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5367: FILE: staging/otus/80211core/cagg_cs_fix.c:2952:
+	/*
+	* Generate control setting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5370: FILE: staging/otus/80211core/cagg_cs_fix.c:2955:
+	header[0] = 24+len+4;   /* Length */
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5370: FILE: staging/otus/80211core/cagg_cs_fix.c:2955:
+	header[0] = 24+len+4;   /* Length */
 	                  ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5373: FILE: staging/otus/80211core/cagg_cs_fix.c:2958:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5384: FILE: staging/otus/80211core/cagg_cs_fix.c:2969:
+	/*
+	* Generate WLAN header

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5389: FILE: staging/otus/80211core/cagg_cs_fix.c:2974:
+	/*
+	* Duration

CHECK:CAMELCASE: Avoid CamelCase: <macAddr>
#5408: FILE: staging/otus/80211core/cagg_cs_fix.c:2993:
+		header[4 + 8] = wd->macAddr[0];

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5410: FILE: staging/otus/80211core/cagg_cs_fix.c:2995:
+		header[4 + 10] = wd->macAddr[2] + (vap<<8);
 		                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5422: FILE: staging/otus/80211core/cagg_cs_fix.c:3007:
+		header[4 + 7] = wd->macAddr[2] + (vap<<8);
 		                                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5428: FILE: staging/otus/80211core/cagg_cs_fix.c:3013:
+	header[4 + 11] = ((wd->mmseq++)<<4);
 	                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5434: FILE: staging/otus/80211core/cagg_cs_fix.c:3019:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zfAggProcessAction>
#5435: FILE: staging/otus/80211core/cagg_cs_fix.c:3020:
+u16_t zfAggProcessAction(zdev_t *dev, zbuf_t *buf)

CHECK:CAMELCASE: Avoid CamelCase: <zfAggBlockAckActionFrame>
#5447: FILE: staging/otus/80211core/cagg_cs_fix.c:3032:
+		zfAggBlockAckActionFrame(dev, buf);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5450: FILE: staging/otus/80211core/cagg_cs_fix.c:3035:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5455: FILE: staging/otus/80211core/cagg_cs_fix.c:3040:
+
+

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5798: FILE: staging/otus/80211core/cagg_cs_fix.c:3053:
+		zm_msg0_agg(ZM_LV_0, "Received BA Action frame is "
 		                               ^^

WARNING:SPLIT_STRING: quoted string split across lines
#5799: FILE: staging/otus/80211core/cagg_cs_fix.c:3054:
+		zm_msg0_agg(ZM_LV_0, "Received BA Action frame is "
+							"ADDBA request");

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRecvAddbaRequest>
#5800: FILE: staging/otus/80211core/cagg_cs_fix.c:3055:
+		zfAggRecvAddbaRequest(dev, buf);

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5803: FILE: staging/otus/80211core/cagg_cs_fix.c:3058:
+		zm_msg0_agg(ZM_LV_0, "Received BA Action frame is "
 		                               ^^

WARNING:SPLIT_STRING: quoted string split across lines
#5804: FILE: staging/otus/80211core/cagg_cs_fix.c:3059:
+		zm_msg0_agg(ZM_LV_0, "Received BA Action frame is "
+							"ADDBA response");

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRecvAddbaResponse>
#5805: FILE: staging/otus/80211core/cagg_cs_fix.c:3060:
+		zfAggRecvAddbaResponse(dev, buf);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggRecvDelba>
#5808: FILE: staging/otus/80211core/cagg_cs_fix.c:3063:
+		zfAggRecvDelba(dev, buf);

CHECK:CAMELCASE: Avoid CamelCase: <aggBaFrameParameter>
#5818: FILE: staging/otus/80211core/cagg_cs_fix.c:3073:
+	struct aggBaFrameParameter bf;

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#5828: FILE: staging/otus/80211core/cagg_cs_fix.c:3082:
+	* ba parameter set
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5828: FILE: staging/otus/80211core/cagg_cs_fix.c:3082:
+	/*
+	* ba parameter set

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5835: FILE: staging/otus/80211core/cagg_cs_fix.c:3089:
+	* BA timeout value
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5835: FILE: staging/otus/80211core/cagg_cs_fix.c:3089:
+	/*
+	* BA timeout value

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5839: FILE: staging/otus/80211core/cagg_cs_fix.c:3093:
+	* BA starting sequence number
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5839: FILE: staging/otus/80211core/cagg_cs_fix.c:3093:
+	/*
+	* BA starting sequence number

CHECK:CAMELCASE: Avoid CamelCase: <zfAggSendAddbaResponse>
#5849: FILE: staging/otus/80211core/cagg_cs_fix.c:3103:
+	zfAggSendAddbaResponse(dev, &bf);

CHECK:CAMELCASE: Avoid CamelCase: <zfAggAddbaSetTidRx>
#5851: FILE: staging/otus/80211core/cagg_cs_fix.c:3105:
+	zfAggAddbaSetTidRx(dev, buf, &bf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5857: FILE: staging/otus/80211core/cagg_cs_fix.c:3111:
+u16_t zfAggAddbaSetTidRx(zdev_t *dev, zbuf_t *buf,
+					struct aggBaFrameParameter *bf)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5869: FILE: staging/otus/80211core/cagg_cs_fix.c:3123:
+	src[0] = zmw_rx_buf_readh(dev, buf, offset+10);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5870: FILE: staging/otus/80211core/cagg_cs_fix.c:3124:
+	src[1] = zmw_rx_buf_readh(dev, buf, offset+12);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5871: FILE: staging/otus/80211core/cagg_cs_fix.c:3125:
+	src[2] = zmw_rx_buf_readh(dev, buf, offset+14);
 	                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5875: FILE: staging/otus/80211core/cagg_cs_fix.c:3129:
+	ac = zcUpToAc[up&0x7] & 0x3;
 	                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->tid_rx[i]->aid == aid'
#5880: FILE: staging/otus/80211core/cagg_cs_fix.c:3134:
+		if ((wd->tid_rx[i]->aid == aid) && (wd->tid_rx[i]->ac == ac)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd->tid_rx[i]->ac == ac'
#5880: FILE: staging/otus/80211core/cagg_cs_fix.c:3134:
+		if ((wd->tid_rx[i]->aid == aid) && (wd->tid_rx[i]->ac == ac)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5903: FILE: staging/otus/80211core/cagg_cs_fix.c:3157:
+	tid_rx->baw_head = tid_rx->baw_tail = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5904: FILE: staging/otus/80211core/cagg_cs_fix.c:3158:
+	tid_rx->sq_exceed_count = tid_rx->sq_behind_count = 0;

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#5934: FILE: staging/otus/80211core/cagg_cs_fix.c:3188:
+	* ba parameter set
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5934: FILE: staging/otus/80211core/cagg_cs_fix.c:3188:
+	/*
+	* ba parameter set

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#5941: FILE: staging/otus/80211core/cagg_cs_fix.c:3195:
+	* BA timeout value
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5941: FILE: staging/otus/80211core/cagg_cs_fix.c:3195:
+	/*
+	* BA timeout value

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5951: FILE: staging/otus/80211core/cagg_cs_fix.c:3205:
+	ac = zcUpToAc[bf.tid&0x7] & 0x3;
 	                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5988: FILE: staging/otus/80211core/cagg_cs_fix.c:3242:
+
+

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#5990: FILE: staging/otus/80211core/cagg_cs_fix.c:3244:
+	* TBD : Maximum size of managment frame
 	                        ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5990: FILE: staging/otus/80211core/cagg_cs_fix.c:3244:
+	/*
+	* TBD : Maximum size of managment frame

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#5994: FILE: staging/otus/80211core/cagg_cs_fix.c:3248:
+	if (buf == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6000: FILE: staging/otus/80211core/cagg_cs_fix.c:3254:
+	/*
+	* Reserve room for wlan header

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6005: FILE: staging/otus/80211core/cagg_cs_fix.c:3259:
+	/*
+	* add addba frame body

CHECK:CAMELCASE: Avoid CamelCase: <zfAggSetAddbaResponseFrameBody>
#6007: FILE: staging/otus/80211core/cagg_cs_fix.c:3261:
+	offset = zfAggSetAddbaResponseFrameBody(dev, buf, bf, offset);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6009: FILE: staging/otus/80211core/cagg_cs_fix.c:3263:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6013: FILE: staging/otus/80211core/cagg_cs_fix.c:3267:
+	/*
+	* Copy wlan header

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6019: FILE: staging/otus/80211core/cagg_cs_fix.c:3273:
+	zfAggGenAddbaHeader(dev, dst, header, offset-hlen, buf, vap, encrypt);
 	                                            ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#6020: FILE: staging/otus/80211core/cagg_cs_fix.c:3274:
+	for (i = 0; i < (hlen>>1); i++)
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6021: FILE: staging/otus/80211core/cagg_cs_fix.c:3275:
+		zmw_tx_buf_writeh(dev, buf, i*2, header[i]);
 		                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6025: FILE: staging/otus/80211core/cagg_cs_fix.c:3279:
+	/*if ((addrTblSize = zfwBufMapDma(dev, buf, &addrTbl)) == 0)
+	if ((addrTblSize = zfwMapTxDma(dev, buf, &addrTbl)) == 0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#6037: FILE: staging/otus/80211core/cagg_cs_fix.c:3291:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6039: FILE: staging/otus/80211core/cagg_cs_fix.c:3293:
+	err = zfHpSend(dev, NULL, 0, NULL, 0, NULL, 0, buf, 0,
+		ZM_INTERNAL_ALLOC_BUF, 0, 0xff);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6050: FILE: staging/otus/80211core/cagg_cs_fix.c:3304:
+	/* zfAggSendAddbaRequest(dev, dst,
+			zcUpToAc[bf->tid&0x7] & 0x3, bf->tid);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#6054: FILE: staging/otus/80211core/cagg_cs_fix.c:3308:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6057: FILE: staging/otus/80211core/cagg_cs_fix.c:3311:
+u16_t zfAggSetAddbaResponseFrameBody(zdev_t *dev, zbuf_t *buf,
+		struct aggBaFrameParameter *bf, u16_t offset)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6059: FILE: staging/otus/80211core/cagg_cs_fix.c:3313:
+{
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6064: FILE: staging/otus/80211core/cagg_cs_fix.c:3318:
+	/*
+	* ADDBA Request frame body

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6068: FILE: staging/otus/80211core/cagg_cs_fix.c:3322:
+	/*
+	* Category

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6072: FILE: staging/otus/80211core/cagg_cs_fix.c:3326:
+	/*
+	* Action details = 0

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6076: FILE: staging/otus/80211core/cagg_cs_fix.c:3330:
+	/*
+	* Dialog Token = nonzero

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6080: FILE: staging/otus/80211core/cagg_cs_fix.c:3334:
+	/*
+	* Status code

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6085: FILE: staging/otus/80211core/cagg_cs_fix.c:3339:
+	/*
+	* Block Ack parameter set

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#6086: FILE: staging/otus/80211core/cagg_cs_fix.c:3340:
+	* BA policy = 1 for immediate BA, 0 for delayed BA
 	  ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#6086: FILE: staging/otus/80211core/cagg_cs_fix.c:3340:
+	* BA policy = 1 for immediate BA, 0 for delayed BA
 	                              ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#6086: FILE: staging/otus/80211core/cagg_cs_fix.c:3340:
+	* BA policy = 1 for immediate BA, 0 for delayed BA
 	                                                ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#6092: FILE: staging/otus/80211core/cagg_cs_fix.c:3346:
+	* x Reserved x BA policy x  TID   x Buffer size x
 	               ^^

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#6098: FILE: staging/otus/80211core/cagg_cs_fix.c:3352:
+	* BA timeout value
 	  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6098: FILE: staging/otus/80211core/cagg_cs_fix.c:3352:
+	/*
+	* BA timeout value

CHECK:CAMELCASE: Avoid CamelCase: <zfAggInvokeBar>
#6106: FILE: staging/otus/80211core/cagg_cs_fix.c:3360:
+void zfAggInvokeBar(zdev_t *dev, TID_TX tid_tx)

CHECK:CAMELCASE: Avoid CamelCase: <aggBarControl>
#6108: FILE: staging/otus/80211core/cagg_cs_fix.c:3362:
+	struct aggBarControl aggBarControl;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6112: FILE: staging/otus/80211core/cagg_cs_fix.c:3366:
+	/*zmw_declare_for_critical_section();
+	bar_control = aggBarControl->tid_info << 12 |

CHECK:CAMELCASE: Avoid CamelCase: <zfAggSendBar>
#6121: FILE: staging/otus/80211core/cagg_cs_fix.c:3375:
+	zfAggSendBar(dev, tid_tx, &aggBarControl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6131: FILE: staging/otus/80211core/cagg_cs_fix.c:3384:
+u16_t zfAggSendBar(zdev_t *dev, TID_TX tid_tx,
+			struct aggBarControl *aggBarControl)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6285: FILE: staging/otus/80211core/cagg_cs_fix.c:3401:
+
+

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#6287: FILE: staging/otus/80211core/cagg_cs_fix.c:3403:
+	* TBD : Maximum size of managment frame
 	                        ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6287: FILE: staging/otus/80211core/cagg_cs_fix.c:3403:
+	/*
+	* TBD : Maximum size of managment frame

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#6291: FILE: staging/otus/80211core/cagg_cs_fix.c:3407:
+	if (buf == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6297: FILE: staging/otus/80211core/cagg_cs_fix.c:3413:
+	/*
+	* Reserve room for wlan header

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6302: FILE: staging/otus/80211core/cagg_cs_fix.c:3418:
+	/*
+	* add addba frame body

CHECK:CAMELCASE: Avoid CamelCase: <zfAggSetBarBody>
#6304: FILE: staging/otus/80211core/cagg_cs_fix.c:3420:
+	offset = zfAggSetBarBody(dev, buf, offset, tid_tx, aggBarControl);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6306: FILE: staging/otus/80211core/cagg_cs_fix.c:3422:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6310: FILE: staging/otus/80211core/cagg_cs_fix.c:3426:
+	/*
+	* Copy wlan header

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6312: FILE: staging/otus/80211core/cagg_cs_fix.c:3428:
+	zfAggGenBarHeader(dev, tid_tx->dst, header, offset-hlen,
 	                                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <zfAggGenBarHeader>
#6312: FILE: staging/otus/80211core/cagg_cs_fix.c:3428:
+	zfAggGenBarHeader(dev, tid_tx->dst, header, offset-hlen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6313: FILE: staging/otus/80211core/cagg_cs_fix.c:3429:
+	zfAggGenBarHeader(dev, tid_tx->dst, header, offset-hlen,
+							buf, vap, encrypt);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#6314: FILE: staging/otus/80211core/cagg_cs_fix.c:3430:
+	for (i = 0; i < (hlen>>1); i++)
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6315: FILE: staging/otus/80211core/cagg_cs_fix.c:3431:
+		zmw_tx_buf_writeh(dev, buf, i*2, header[i]);
 		                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6319: FILE: staging/otus/80211core/cagg_cs_fix.c:3435:
+	/*if ((addrTblSize = zfwBufMapDma(dev, buf, &addrTbl)) == 0)
+	if ((addrTblSize = zfwMapTxDma(dev, buf, &addrTbl)) == 0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#6332: FILE: staging/otus/80211core/cagg_cs_fix.c:3448:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6334: FILE: staging/otus/80211core/cagg_cs_fix.c:3450:
+	err = zfHpSend(dev, NULL, 0, NULL, 0, NULL, 0, buf, 0,
+		ZM_INTERNAL_ALLOC_BUF, 0, 0xff);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#6346: FILE: staging/otus/80211core/cagg_cs_fix.c:3462:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6349: FILE: staging/otus/80211core/cagg_cs_fix.c:3465:
+u16_t zfAggSetBarBody(zdev_t *dev, zbuf_t *buf, u16_t offset, TID_TX tid_tx,
+					struct aggBarControl *aggBarControl)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6357: FILE: staging/otus/80211core/cagg_cs_fix.c:3473:
+	/*
+	* BAR Control frame body

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6361: FILE: staging/otus/80211core/cagg_cs_fix.c:3477:
+	/*
+	* BAR Control Field

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#6376: FILE: staging/otus/80211core/cagg_cs_fix.c:3492:
+	if (0 == aggBarControl->multi_tid) {

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#6378: FILE: staging/otus/80211core/cagg_cs_fix.c:3494:
+		* BA starting sequence number
 		  ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6378: FILE: staging/otus/80211core/cagg_cs_fix.c:3494:
+		/*
+		* BA starting sequence number

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#6382: FILE: staging/otus/80211core/cagg_cs_fix.c:3498:
+		* x Frag num(0) x BA starting seq num x
 		                  ^^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#6390: FILE: staging/otus/80211core/cagg_cs_fix.c:3506:
+	if (1 == aggBarControl->multi_tid &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6391: FILE: staging/otus/80211core/cagg_cs_fix.c:3507:
+	if (1 == aggBarControl->multi_tid &&
+				1 == aggBarControl->compressed_bitmap) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#6391: FILE: staging/otus/80211core/cagg_cs_fix.c:3507:
+				1 == aggBarControl->compressed_bitmap) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6399: FILE: staging/otus/80211core/cagg_cs_fix.c:3515:
+u16_t zfAggGenBarHeader(zdev_t *dev, u16_t *dst,
+	u16_t *header, u16_t len, zbuf_t *buf, u16_t vap, u8_t encrypt)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6401: FILE: staging/otus/80211core/cagg_cs_fix.c:3517:
+	u8_t  hlen = 16+8;        /* MAC ctrl + PHY ctrl + 802.11 MM header */
 	               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6409: FILE: staging/otus/80211core/cagg_cs_fix.c:3525:
+	/*
+	* Generate control setting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6412: FILE: staging/otus/80211core/cagg_cs_fix.c:3528:
+	header[0] = 16+len+4;   /* Length */
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6412: FILE: staging/otus/80211core/cagg_cs_fix.c:3528:
+	header[0] = 16+len+4;   /* Length */
 	                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6454: FILE: staging/otus/80211core/cagg_cs_fix.c:3542:
+	/*
+	* Generate WLAN header

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#6459: FILE: staging/otus/80211core/cagg_cs_fix.c:3547:
+	/*
+	* Duration

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6477: FILE: staging/otus/80211core/cagg_cs_fix.c:3563:
+		header[4 + 7] = wd->macAddr[2] + (vap<<8); /* VAP */
 		                                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#6496: FILE: staging/otus/80211core/cagg_cs_fix.c:3571:
+	header[4 + 11] = ((wd->mmseq++)<<4);
 	                               ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151632.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 210 warnings, 387 checks, 6416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151632.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
