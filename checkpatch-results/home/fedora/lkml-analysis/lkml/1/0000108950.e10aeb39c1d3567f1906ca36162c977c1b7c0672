WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > > Since pm_runtime_resume() takes care of powering up the parent, there's

WARNING:TYPO_SPELLING: 'responsibile' may be misspelled - perhaps 'responsible'?
#112: FILE: kernel/power/Kconfig:223:
+	  responsibile for the actual handling of the autosuspend requests and
 	  ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: kernel/power/main.c:237:
+	int error = pm_start_workqueue();
+	if (error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#168: FILE: include/linux/pm.h:169:
any

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: include/linux/pm.h:172:
+ * There also are the following callbacks related to run-time power $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: include/linux/pm.h:182:
+ * @runtime_resume: Put the device into the fully active state in response to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: include/linux/pm.h:187:
+ * @runtime_idle: Device appears to be inactive and it might be put into a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: include/linux/pm.h:347:
+ * These state labels are used internally by the PM core to indicate the $

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#285: FILE: include/linux/pm.h:415:
+	spinlock_t		lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#306: FILE: drivers/base/power/runtime.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#307: FILE: drivers/base/power/runtime.c:2:
+ * drivers/base/power/runtime.c - Helper functions for device run-time PM

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: drivers/base/power/runtime.c:39:
+ * pm_device_suspended - Check if given device has been suspended at run $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: drivers/base/power/runtime.c:68:
+ * Check if all children of given device are suspended and call the device $

WARNING:TYPO_SPELLING: 'funtion' may be misspelled - perhaps 'function'?
#390: FILE: drivers/base/power/runtime.c:83:
+ * @sync: If unset, the funtion has been called via pm_wq.
                         ^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#412: FILE: drivers/base/power/runtime.c:105:
+	} else if ((dev->power.runtime_status & RPM_NO_SUSPEND)
+	    || (!sync && dev->power.suspend_aborted)) {

WARNING:TYPO_SPELLING: 'miliseconds' may be misspelled - perhaps 'milliseconds'?
#500: FILE: drivers/base/power/runtime.c:193:
+ * @msec: Time, in miliseconds, to wait before attempting to suspend the 
                    ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: drivers/base/power/runtime.c:193:
+ * @msec: Time, in miliseconds, to wait before attempting to suspend the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: drivers/base/power/runtime.c:236:
+ * flags in the device object to reflect the current status of the device.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: drivers/base/power/runtime.c:237:
+ * runtime suspend is in progress while this function is being run, wait for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: drivers/base/power/runtime.c:238:
+ * to finish before resuming the device.  If runtime suspend is scheduled, $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#564: FILE: drivers/base/power/runtime.c:253:
+	if (dev->power.runtime_status == RPM_ERROR) {
+		goto out_unlock;
+	} if (!(dev->power.runtime_status & ~RPM_GRACE)) {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line (or did you mean 'else if'?)
#566: FILE: drivers/base/power/runtime.c:255:
+	} if (!(dev->power.runtime_status & ~RPM_GRACE)) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#592: FILE: drivers/base/power/runtime.c:281:
+	} else if (dev->power.runtime_status == RPM_SUSPENDED && dev->parent
+	    && (dev->parent->power.runtime_status & ~RPM_GRACE)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: drivers/base/power/runtime.c:353:
+ * Use @work to get the device object the resume has been scheduled for and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: drivers/base/power/runtime.c:354:
+ * __pm_runtime_resume() for it without forcing a grace period after the $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#700: FILE: drivers/base/power/runtime.c:387:
+	} else if (dev->parent
+	    && (dev->parent->power.runtime_status & RPM_INACTIVE)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: drivers/base/power/runtime.c:418:
+ * This routine is only supposed to be called when the run-time PM workqueue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#733: FILE: drivers/base/power/runtime.c:419:
+ * frozen (i.e. during system-wide suspend or hibernation) when it is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: drivers/base/power/runtime.c:439:
+ * This routine is only supposed to be called when the run-time PM workqueue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: drivers/base/power/runtime.c:440:
+ * frozen (i.e. during system-wide suspend or hibernation) when it is $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pm_runtime_enable', this function's name, in a string
#802: FILE: drivers/base/power/runtime.c:485:
+		dev_warn(dev, "PM: Excessive pm_runtime_enable()!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#822: FILE: include/linux/pm_runtime.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#840: FILE: include/linux/pm_runtime.h:19:
+extern void pm_runtime_init(struct device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#841: FILE: include/linux/pm_runtime.h:20:
+extern void __pm_runtime_change_status(struct device *dev, unsigned int $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#841: FILE: include/linux/pm_runtime.h:20:
+extern void __pm_runtime_change_status(struct device *dev, unsigned int 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#844: FILE: include/linux/pm_runtime.h:22:
+extern int __pm_runtime_suspend(struct device *dev, bool sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#845: FILE: include/linux/pm_runtime.h:23:
+extern void pm_request_suspend(struct device *dev, unsigned int msec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#846: FILE: include/linux/pm_runtime.h:24:
+extern int __pm_runtime_resume(struct device *dev, bool grace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#847: FILE: include/linux/pm_runtime.h:25:
+extern void __pm_request_resume(struct device *dev, bool grace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#848: FILE: include/linux/pm_runtime.h:26:
+extern void pm_cancel_runtime_suspend(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#849: FILE: include/linux/pm_runtime.h:27:
+extern void pm_cancel_runtime_resume(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#850: FILE: include/linux/pm_runtime.h:28:
+extern void pm_runtime_disable(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#851: FILE: include/linux/pm_runtime.h:29:
+extern void pm_runtime_enable(struct device *dev);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#875: FILE: include/linux/pm_runtime.h:53:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: include/linux/pm_runtime.h:55:
+static inline void pm_request_suspend(struct device *dev, unsigned int msec) $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#877: FILE: include/linux/pm_runtime.h:55:
+}
+static inline void pm_request_suspend(struct device *dev, unsigned int msec) 

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#881: FILE: include/linux/pm_runtime.h:58:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#883: FILE: include/linux/pm_runtime.h:60:
+}
+static inline void __pm_request_resume(struct device *dev, bool grace) {}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: Documentation/power/runtime_pm.txt:10:
+* The power management workqueue pm_wq in which bus types and device drivers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: Documentation/power/runtime_pm.txt:13:
+  them to be synchronized with system-wide power transitions.  pm_wq is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1045: FILE: Documentation/power/runtime_pm.txt:16:
+* A number of run-time PM fields in the 'power' member of 'struct device' $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1047: FILE: Documentation/power/runtime_pm.txt:17:
+  is of the type 'struct dev_pm_info', defined in include/linux/pm.h) that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: Documentation/power/runtime_pm.txt:23:
+* A set of helper functions defined in drivers/base/power/runtime.c that can $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1057: FILE: Documentation/power/runtime_pm.txt:25:
+  synchronization between them is taken care of by the PM core.  Bus types $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: Documentation/power/runtime_pm.txt:59:
+the device object.  It is called during the initialization of the device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1097: FILE: Documentation/power/runtime_pm.txt:63:
+respectively, all of the run-time PM core operations.  They do it by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1101: FILE: Documentation/power/runtime_pm.txt:66:
+pm_request_suspend(), pm_runtime_resume() and so on return immediately $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1119: FILE: Documentation/power/runtime_pm.txt:83:
+'struct device' for mutual synchronization.  The 'power.runtime_status' $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1121: FILE: Documentation/power/runtime_pm.txt:84:
+called the device's run-time PM status in what follows, is set to RPM_ACTIVE $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1125: FILE: Documentation/power/runtime_pm.txt:87:
+pm_request_suspend() is used to queue up a suspend request for an active $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1130: FILE: Documentation/power/runtime_pm.txt:91:
+immediately.  Otherwise, it changes the device's run-time PM status to $

WARNING:TYPO_SPELLING: 'miliseconds' may be misspelled - perhaps 'milliseconds'?
#1134: FILE: Documentation/power/runtime_pm.txt:94:
+miliseconds.  It is valid to call this function from interrupt context.
 ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: Documentation/power/runtime_pm.txt:97:
+device.  It is called directly by a bus type or device driver.  An $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: Documentation/power/runtime_pm.txt:100:
+situations when a queued up suspend request has just been cancelled.  Apart $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: Documentation/power/runtime_pm.txt:102:
+* If the device is suspended (i.e. the RPM_SUSPENDED bit is set in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: Documentation/power/runtime_pm.txt:104:
+* If the device is about to resume or is in a post-resume grace period (i.e. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1151: FILE: Documentation/power/runtime_pm.txt:107:
+  returned if the function has been called via pm_wq as a result of a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1153: FILE: Documentation/power/runtime_pm.txt:108:
+  suspend request (the 'power.suspend_aborted' field is used for this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1155: FILE: Documentation/power/runtime_pm.txt:109:
+* If the device is suspending (i.e. its run-time PM status is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1161: FILE: Documentation/power/runtime_pm.txt:114:
+  'power.suspend_skip_children' flag is not set for it, the device's run-time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1168: FILE: Documentation/power/runtime_pm.txt:120:
+callback or to carry out any other suitable action depending on the bus $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: Documentation/power/runtime_pm.txt:122:
+  RPM_SUSPENDING bit is cleared in the device's run-time PM status field.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: Documentation/power/runtime_pm.txt:123:
+  that has happened, the device is regarded by the PM core as suspended, but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1175: FILE: Documentation/power/runtime_pm.txt:124:
+  _need_ _not_ mean that the device has been put into a low power state.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1177: FILE: Documentation/power/runtime_pm.txt:125:
+  really occurs to the device at this point totally depends on its bus type $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1180: FILE: Documentation/power/runtime_pm.txt:127:
+  Additionally, if the device bus type's ->runtime_suspend() callback $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1182: FILE: Documentation/power/runtime_pm.txt:128:
+  successfully, the device bus type's ->runtime_idle() callback is executed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: Documentation/power/runtime_pm.txt:129:
+  the device's parent, if there is one and if all of its children are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: Documentation/power/runtime_pm.txt:133:
+* If another error code is returned, the device's run-time PM status is set $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1191: FILE: Documentation/power/runtime_pm.txt:134:
+  RPM_ERROR and the PM core will refuse to carry out any run-time PM $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: Documentation/power/runtime_pm.txt:135:
+  for it until the status is cleared by its bus type or driver with the help $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1201: FILE: Documentation/power/runtime_pm.txt:142:
+pm_request_resume() and pm_request_resume_grace() are used to queue up a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1204: FILE: Documentation/power/runtime_pm.txt:144:
+pending.  The difference between them is that pm_request_resume_grace() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1207: FILE: Documentation/power/runtime_pm.txt:146:
+prevents the PM core from suspending the device or queueing up a suspend $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1209: FILE: Documentation/power/runtime_pm.txt:147:
+for it until the RPM_GRACE bit is cleared with the help of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1212: FILE: Documentation/power/runtime_pm.txt:149:
+* If a suspend request is pending for the device (i.e. the device's run-time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: Documentation/power/runtime_pm.txt:150:
+  status is RPM_IDLE), it is cancelled, the 'power.suspend_aborted' flag is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1216: FILE: Documentation/power/runtime_pm.txt:151:
+  for the device, the RPM_IDLE bit is cleared in the device's run-time PM $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: Documentation/power/runtime_pm.txt:154:
+* If the device is not suspended or suspending (i.e. none of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1222: FILE: Documentation/power/runtime_pm.txt:155:
+  and RPM_SUSPENDING bits is set in the device's run-time PM status field), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1236: FILE: Documentation/power/runtime_pm.txt:167:
+request pending.  They are called either by the PM core, to complete a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1240: FILE: Documentation/power/runtime_pm.txt:170:
+RPM_GRACE bit to be set in the device's run-time PM status field, which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1242: FILE: Documentation/power/runtime_pm.txt:171:
+the PM core from suspending the device or queueing up a suspend request for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: Documentation/power/runtime_pm.txt:172:
+until the RPM_GRACE bit is cleared with the help of pm_runtime_release().  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1250: FILE: Documentation/power/runtime_pm.txt:177:
+  run-time PM status is RPM_IDLE), it is cancelled, the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: Documentation/power/runtime_pm.txt:180:
+  additionally sets the RPM_GRACE bit in the device's run-time PM status $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: Documentation/power/runtime_pm.txt:184:
+* If the device is suspended (i.e. the RPM_SUSPENDED bit is set in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1261: FILE: Documentation/power/runtime_pm.txt:185:
+  run-time PM status field), the device's parent exists and is not active $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1263: FILE: Documentation/power/runtime_pm.txt:186:
+  the parent's run-time PM status is not RPM_ACTIVE or RPM_GRACE), the parent $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: Documentation/power/runtime_pm.txt:190:
+  running at the same time for the same device, the function waits for the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1272: FILE: Documentation/power/runtime_pm.txt:193:
+and the RPM_RESUMING bit is set in the device's run-time PM status field.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1275: FILE: Documentation/power/runtime_pm.txt:195:
+responsible for handling the device as appropriate (for example, it may $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: Documentation/power/runtime_pm.txt:196:
+to execute the device driver's ->runtime_resume() callback or to carry out $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1281: FILE: Documentation/power/runtime_pm.txt:199:
+  'active' (i.e. the device's run-time PM status field is either RPM_ACTIVE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1289: FILE: Documentation/power/runtime_pm.txt:206:
+* If another error code is returned, the device's run-time PM status is set $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1291: FILE: Documentation/power/runtime_pm.txt:207:
+  RPM_ERROR and the PM core will refuse to carry out any run-time PM $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1293: FILE: Documentation/power/runtime_pm.txt:208:
+  for it until the status is cleared by its bus type or driver with the help $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1310: FILE: Documentation/power/runtime_pm.txt:223:
+pm_cancel_runtime_suspend() is used to cancel a pending suspend request for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1317: FILE: Documentation/power/runtime_pm.txt:229:
+is disabled and it is supposed to be used during system-wide power $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1322: FILE: Documentation/power/runtime_pm.txt:233:
+argument is 'true', the field is set to 0, and if 'enable' is 'false', the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1330: FILE: Documentation/power/runtime_pm.txt:240:
+pm_runtime_clear_suspended() is used to change the device's run-time PM $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1346: FILE: Documentation/power/runtime_pm.txt:255:
+The ->runtime_suspend() callback is executed by pm_runtime_suspend() for the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1350: FILE: Documentation/power/runtime_pm.txt:258:
+include executing the device driver's ->runtime_suspend() callback (from the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1353: FILE: Documentation/power/runtime_pm.txt:260:
+callback in a device driver as long as the bus type's ->runtime_suspend() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1358: FILE: Documentation/power/runtime_pm.txt:264:
+  device has been put into a low power state.  It is supposed to mean, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1362: FILE: Documentation/power/runtime_pm.txt:267:
+* If the bus type's ->runtime_suspend() callback returns -EBUSY or -EAGAIN, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1364: FILE: Documentation/power/runtime_pm.txt:268:
+  device's run-time PM status is set to RPM_ACTIVE, which means that the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1367: FILE: Documentation/power/runtime_pm.txt:270:
+* If the bus type's ->runtime_suspend() callback returns an error code $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1369: FILE: Documentation/power/runtime_pm.txt:271:
+  from -EBUSY or -EAGAIN, the PM core regards this as an unrecoverable error $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1376: FILE: Documentation/power/runtime_pm.txt:277:
+hand, if device_may_wakeup() returns 'true' for the device and the device is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1381: FILE: Documentation/power/runtime_pm.txt:281:
+device.  Generally, remote wake-up should be enabled whenever the device is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1386: FILE: Documentation/power/runtime_pm.txt:285:
+The ->runtime_resume() callback is executed by pm_runtime_resume() for the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1390: FILE: Documentation/power/runtime_pm.txt:288:
+include executing the device driver's ->runtime_resume() callback (from the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1393: FILE: Documentation/power/runtime_pm.txt:290:
+callback in a device driver as long as the bus type's ->runtime_resume() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1399: FILE: Documentation/power/runtime_pm.txt:295:
+* If the bus type's ->runtime_resume() callback returns -EBUSY or -EAGAIN, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1401: FILE: Documentation/power/runtime_pm.txt:296:
+  device's run-time PM status is set to RPM_SUSPENDED, which is supposed to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1405: FILE: Documentation/power/runtime_pm.txt:299:
+* If the bus type's ->runtime_resume() callback returns an error code $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: Documentation/power/runtime_pm.txt:300:
+  from -EBUSY or -EAGAIN, the PM core regards this as an unrecoverable error $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1417: FILE: Documentation/power/runtime_pm.txt:309:
+action is to check if the device can be suspended (i.e. if all of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1419: FILE: Documentation/power/runtime_pm.txt:310:
+necessary for suspending the device are met) and to queue up a suspend $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108950.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 101 errors, 13 warnings, 16 checks, 1274 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108950.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
