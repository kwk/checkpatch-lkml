WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
Unlike, let's say, hypervisor C/R style which only needs to freeze guest kernel

WARNING:TYPO_SPELLING: 'lenth' may be misspelled - perhaps 'length'?
#132: 
object lenth including header and globally unique object id (per-image,
       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#345: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#350: FILE: include/linux/kstate-image.h:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#362: FILE: include/linux/kstate-image.h:13:
+typedef struct kstate_ref kstate_ref_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#474: FILE: include/linux/kstate.h:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#509: FILE: include/linux/kstate.h:36:
+#define for_each_kstate_object(ctx, obj, type)				\
+	list_for_each_entry(obj, &ctx->obj[type], o_list)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'obj' - possible side-effects?
#509: FILE: include/linux/kstate.h:36:
+#define for_each_kstate_object(ctx, obj, type)				\
+	list_for_each_entry(obj, &ctx->obj[type], o_list)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#511: FILE: include/linux/kstate.h:38:
+#define for_each_kstate_object_safe(ctx, obj, tmp, type)		\
+	list_for_each_entry_safe(obj, tmp, &ctx->obj[type], o_list)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'obj' - possible side-effects?
#511: FILE: include/linux/kstate.h:38:
+#define for_each_kstate_object_safe(ctx, obj, tmp, type)		\
+	list_for_each_entry_safe(obj, tmp, &ctx->obj[type], o_list)

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#513: FILE: include/linux/kstate.h:40:
+struct kstate_object *find_kstate_obj_by_ptr(struct kstate_context *ctx, const void *ptr, enum kstate_context_obj_type type);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#514: FILE: include/linux/kstate.h:41:
+struct kstate_object *find_kstate_obj_by_ref(struct kstate_context *ctx, kstate_ref_t *ref, enum kstate_context_obj_type type);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#515: FILE: include/linux/kstate.h:42:
+struct kstate_object *find_kstate_obj_by_id(struct kstate_context *ctx, kstate_ref_t *ref, enum kstate_context_obj_type type);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#518: FILE: include/linux/kstate.h:45:
+int kstate_restore_object(struct kstate_context *ctx, void *p, enum kstate_context_obj_type type, kstate_ref_t *ref);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#527: FILE: include/linux/kstate.h:54:
+void *kstate_read_image(struct kstate_context *ctx, kstate_ref_t *ref, __u32 type, unsigned int len);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#528: FILE: include/linux/kstate.h:55:
+int kstate_write_image(struct kstate_context *ctx, void *i, unsigned int len, struct kstate_object *obj);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#543: FILE: include/linux/kstate.h:70:
+#if 0

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#564: FILE: include/linux/kstate.h:91:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#574: FILE: include/linux/kstate.h:101:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#584: FILE: include/linux/kstate.h:111:
+	return -ENOSYS;

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#587: FILE: include/linux/kstate.h:114:
+static inline int kstate_arch_dump_task_struct(struct kstate_context *ctx, struct task_struct *tsk, void *arch_i)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#589: FILE: include/linux/kstate.h:116:
+	return -ENOSYS;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#592: FILE: include/linux/kstate.h:119:
+static inline int kstate_arch_restore_task_struct(struct task_struct *tsk, struct kstate_image_task_struct *i)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#594: FILE: include/linux/kstate.h:121:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#604: FILE: include/linux/kstate.h:131:
+	return -ENOSYS;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#607: FILE: include/linux/kstate.h:134:
+static inline int kstate_arch_dump_mm_struct(struct kstate_context *ctx, struct mm_struct *mm, void *arch_i)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#609: FILE: include/linux/kstate.h:136:
+	return -ENOSYS;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#612: FILE: include/linux/kstate.h:139:
+static inline int kstate_arch_restore_mm_struct(struct kstate_context *ctx, struct kstate_image_mm_struct *i)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#614: FILE: include/linux/kstate.h:141:
+	return -ENOSYS;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#685: FILE: kernel/kstate/Kconfig:1:
+config CHECKPOINT
+	bool "Container checkpoint/restart"
+	select FREEZER
+	help
+	  Container checkpoint/restart.
+
+	  Say N.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#712: FILE: kernel/kstate/cpt-sys.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#813: FILE: kernel/kstate/cpt-sys.c:102:
+	strlcpy((char *)&hdr.uts_release, (const char *)init_uts_ns.name.release, sizeof(hdr.uts_release));

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#813: FILE: kernel/kstate/cpt-sys.c:102:
+	strlcpy((char *)&hdr.uts_release, (const char *)init_uts_ns.name.release, sizeof(hdr.uts_release));

CHECK:BRACES: braces {} should be used on all arms of this statement
#867: FILE: kernel/kstate/cpt-sys.c:156:
+		if (nsproxy) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#871: FILE: kernel/kstate/cpt-sys.c:160:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#914: FILE: kernel/kstate/kstate-context.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ctx)...) over kmalloc(sizeof(struct kstate_context)...)
#930: FILE: kernel/kstate/kstate-context.c:17:
+	ctx = kmalloc(sizeof(struct kstate_context), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#969: FILE: kernel/kstate/kstate-file.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1046: FILE: kernel/kstate/kstate-file.c:78:
+			pr_err("file %p/%pS has external references %lu:%lu\n", file, file->f_op, obj->o_count, cnt);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1092: FILE: kernel/kstate/kstate-file.c:124:
+	pr_debug("dump file %p: name_len %u, '%.*s', ->f_op %pS\n", file, i->name_len, i->name_len, name, file->f_op);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1108: FILE: kernel/kstate/kstate-file.c:140:
+	pr_debug("dump file %p: ref {%llu, %u}, rv %d\n", file, (unsigned long long)obj->o_ref.pos, obj->o_ref.id, rv);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1162: FILE: kernel/kstate/kstate-file.c:194:
+	pr_debug("restore file %p: ref {%llu, %u}, rv %d: '%s'\n", file, (unsigned long long)ref->pos, ref->id, rv, name);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1170: FILE: kernel/kstate/kstate-file.c:202:
+	pr_debug("%s: return %d, ref {%llu, %u}\n", __func__, rv, (unsigned long long)ref->pos, ref->id);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1179: FILE: kernel/kstate/kstate-image.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1182: FILE: kernel/kstate/kstate-image.c:4:
+#include <asm/uaccess.h>

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1288: FILE: kernel/kstate/kstate-image.c:110:
+int kstate_write_image(struct kstate_context *ctx, void *i, unsigned int len, struct kstate_object *obj)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1301: FILE: kernel/kstate/kstate-mm.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:INCLUDE_LINUX: Use #include <linux/elf.h> instead of <asm/elf.h>
#1308: FILE: kernel/kstate/kstate-mm.c:8:
+#include <asm/elf.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1310: FILE: kernel/kstate/kstate-mm.c:10:
+#include <asm/mmu_context.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1322: FILE: kernel/kstate/kstate-mm.c:22:
+		WARN(1, "vma %08lx-%08lx %pS isn't checkpointable\n",
+			vma->vm_start, vma->vm_end, vma->vm_ops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: kernel/kstate/kstate-mm.c:62:
+		WARN(1, "vma %08lx-%08lx %pS has uncheckpointable flags %08lx\n",
+			vma->vm_start, vma->vm_end, vma->vm_ops, vm_flags);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1378: FILE: kernel/kstate/kstate-mm.c:78:
+		page = follow_page(vma, addr, FOLL_ANON|FOLL_GET);
 		                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1392: FILE: kernel/kstate/kstate-mm.c:92:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1435: FILE: kernel/kstate/kstate-mm.c:135:
+	pr_debug("dump vma %p: %08lx-%08lx %c%c%c%c vm_flags %08lx, vm_pgoff %08lx\n",
+		vma, vma->vm_start, vma->vm_end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1473: FILE: kernel/kstate/kstate-mm.c:173:
+	pr_debug("dump vma %p: %08lx-%08lx %c%c%c%c vm_flags %08lx, vm_pgoff %08lx, vm_ops %pS\n",
+		vma, vma->vm_start, vma->vm_end,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1512: FILE: kernel/kstate/kstate-mm.c:212:
+	BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1624: FILE: kernel/kstate/kstate-mm.c:324:
+	if (kstate_ref_undefined(&i->ref_vm_file))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1626: FILE: kernel/kstate/kstate-mm.c:326:
+	else {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1748: FILE: kernel/kstate/kstate-mm.c:448:
+			pr_err("mm_struct %p has external references %lu:%u\n", mm, obj->o_count, cnt);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1789: FILE: kernel/kstate/kstate-mm.c:489:
+	pr_debug("dump mm_struct %p: ref {%llu, %u}, rv %d\n", mm, (unsigned long long)obj->o_ref.pos, obj->o_ref.id, rv);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1854: FILE: kernel/kstate/kstate-mm.c:554:
+	pr_debug("restore mm_struct %p: ref {%llu, %u}, rv %d\n", mm, (unsigned long long)ref->pos, ref->id, rv);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1861: FILE: kernel/kstate/kstate-mm.c:561:
+	pr_debug("%s: return %d, ref {%llu, %u}\n", __func__, rv, (unsigned long long)ref->pos, ref->id);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1870: FILE: kernel/kstate/kstate-object.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1883: FILE: kernel/kstate/kstate-object.c:14:
+	BUG_ON(type >= NR_KSTATE_CTX_TYPES);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*obj)...) over kzalloc(sizeof(struct kstate_object)...)
#1890: FILE: kernel/kstate/kstate-object.c:21:
+	obj = kzalloc(sizeof(struct kstate_object), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1910: FILE: kernel/kstate/kstate-object.c:41:
+		BUG();

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1915: FILE: kernel/kstate/kstate-object.c:46:
+int kstate_restore_object(struct kstate_context *ctx, void *p, enum kstate_context_obj_type type, kstate_ref_t *ref)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*obj)...) over kzalloc(sizeof(struct kstate_object)...)
#1919: FILE: kernel/kstate/kstate-object.c:50:
+	obj = kzalloc(sizeof(struct kstate_object), GFP_KERNEL);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1932: FILE: kernel/kstate/kstate-object.c:63:
+struct kstate_object *find_kstate_obj_by_ptr(struct kstate_context *ctx, const void *ptr, enum kstate_context_obj_type type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1936: FILE: kernel/kstate/kstate-object.c:67:
+	BUG_ON(type >= NR_KSTATE_CTX_TYPES);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1945: FILE: kernel/kstate/kstate-object.c:76:
+struct kstate_object *find_kstate_obj_by_ref(struct kstate_context *ctx, kstate_ref_t *ref, enum kstate_context_obj_type type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1949: FILE: kernel/kstate/kstate-object.c:80:
+	BUG_ON(type >= NR_KSTATE_CTX_TYPES);

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1958: FILE: kernel/kstate/kstate-object.c:89:
+struct kstate_object *find_kstate_obj_by_id(struct kstate_context *ctx, kstate_ref_t *ref, enum kstate_context_obj_type type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1962: FILE: kernel/kstate/kstate-object.c:93:
+	BUG_ON(type >= NR_KSTATE_CTX_TYPES);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1976: FILE: kernel/kstate/kstate-task.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1981: FILE: kernel/kstate/kstate-task.c:6:
+#include <asm/mmu_context.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2040: FILE: kernel/kstate/kstate-task.c:65:
+	BUG_ON(find_kstate_obj_by_ptr(ctx, tsk, KSTATE_CTX_TASK_STRUCT));

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#2073: FILE: kernel/kstate/kstate-task.c:98:
+	strlcpy((char *)i->comm, (const char *)tsk->comm, sizeof(i->comm));

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#2081: FILE: kernel/kstate/kstate-task.c:106:
+	pr_debug("dump task_struct %p: ref {%llu, %u}, rv %d: '%s'\n", tsk, (unsigned long long)obj->o_ref.pos, obj->o_ref.id, rv, tsk->comm);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2137: FILE: kernel/kstate/kstate-task.c:162:
+	if (!tmp) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2143: FILE: kernel/kstate/kstate-task.c:168:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2150: FILE: kernel/kstate/kstate-task.c:175:
+	tsk->mm = tsk->active_mm = mm;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2185: FILE: kernel/kstate/kstate-task.c:210:
+	tsk->real_parent = tsk->parent = real_parent;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2221: FILE: kernel/kstate/kstate-task.c:246:
+	tsk = kthread_run(task_struct_restorer, &tsk_ctx, "%.*s", (int)sizeof(i->comm) - 1, i->comm);

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#2247: FILE: kernel/kstate/kstate-task.c:272:
+	pr_debug("restore task_struct %p: ref {%llu, %u}, rv %d: '%s'\n", tsk, (unsigned long long)ref->pos, ref->id, rv, tsk->comm);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2260: FILE: kernel/kstate/kstate-task.c:285:
+	pr_debug("%s: return %d, ref {%llu, %u}\n", __func__, rv, (unsigned long long)ref->pos, ref->id);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2269: FILE: kernel/kstate/rst-sys.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000122013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 67 warnings, 20 checks, 1999 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000122013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
