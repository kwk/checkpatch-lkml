CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#53: FILE: lguest.c:33:
+typedef uint64_t u64;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: lguest.c:42:
+unsigned long (*finish)(unsigned long mem, unsigned long *page_offset,
+			  const char *initrd, unsigned long *ird_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: lguest.c:78:
+	unsigned long (*handle_output)(int fd, const struct iovec *iov,
+				     unsigned int num, struct device *me);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: lguest.c:157:
+static unsigned long finish32(unsigned long mem, unsigned long *page_offset,
+			  const char *initrd, unsigned long *ird_size)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#108: FILE: lguest.c:183:
 		pgdir[(i + *page_offset/getpagesize())/1024]
+			= (((u32)(long)linear + i*sizeof(u32)) | PAGE_PRESENT);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#108: FILE: lguest.c:183:
+			= (((u32)(long)linear + i*sizeof(u32)) | PAGE_PRESENT);
 			                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: lguest.c:193:
+static unsigned long finish64(unsigned long mem, unsigned long *page_offset,
+		  const char *initrd, unsigned long *ird_size)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#124: FILE: lguest.c:199:
+static unsigned long map_elf32(int elf_fd, const Elf32_Ehdr *ehdr, unsigned long mem,
                                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#124: FILE: lguest.c:199:
+static unsigned long map_elf32(int elf_fd, const Elf32_Ehdr *ehdr, unsigned long mem,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: lguest.c:200:
+static unsigned long map_elf32(int elf_fd, const Elf32_Ehdr *ehdr, unsigned long mem,
 		   unsigned long *pgdir_addr,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#143: FILE: lguest.c:249:
+			    PROT_READ|PROT_WRITE|PROT_EXEC,
 			             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#143: FILE: lguest.c:249:
+			    PROT_READ|PROT_WRITE|PROT_EXEC,
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#144: FILE: lguest.c:250:
+			    MAP_FIXED|MAP_PRIVATE,
 			             ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#157: FILE: lguest.c:263:
+static unsigned long map_elf64(int elf_fd, const Elf64_Ehdr *ehdr, unsigned long mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: lguest.c:264:
+static unsigned long map_elf64(int elf_fd, const Elf64_Ehdr *ehdr, unsigned long mem,
+		   unsigned long *pgdir_addr,

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Phdr>
#164: FILE: lguest.c:270:
+	Elf64_Phdr phdr[ehdr->e_phnum];

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Shdr>
#166: FILE: lguest.c:272:
+	Elf64_Shdr sec[ehdr->e_shnum];

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Sym>
#167: FILE: lguest.c:273:
+	Elf64_Sym *syms;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#173: FILE: lguest.c:279:
+	if (ehdr->e_type != ET_EXEC
+	    || ehdr->e_machine != EM_X86_64

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#174: FILE: lguest.c:280:
+	    || ehdr->e_machine != EM_X86_64
+	    || ehdr->e_phentsize != sizeof(Elf64_Phdr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#175: FILE: lguest.c:281:
+	    || ehdr->e_phentsize != sizeof(Elf64_Phdr)
+	    || ehdr->e_phnum < 1 || ehdr->e_phnum > 65536U/sizeof(Elf64_Phdr))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#175: FILE: lguest.c:281:
+	    || ehdr->e_phnum < 1 || ehdr->e_phnum > 65536U/sizeof(Elf64_Phdr))
 	                                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: lguest.c:293:
+	 * to their physical addresses (our virtual == guest physical). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#221: FILE: lguest.c:329:
+	 * Start by finding the symtab section */

WARNING:LINE_SPACING: Missing a blank line after declarations
#230: FILE: lguest.c:338:
+			int ret = 0;
+			syms = malloc(sec[i].sh_size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: lguest.c:340:
+				err(1,"Not enough memory for symbol table");
 				     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#241: FILE: lguest.c:349:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#243: FILE: lguest.c:351:
+			 * names */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: lguest.c:354:
+				err(1,"Not enough memory for string table");
 				     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#247: FILE: lguest.c:355:
+			ret = lseek(elf_fd, sec[sec[i].sh_link].sh_offset , SEEK_SET);
 			                                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syms[i].st_shndx == SHN_UNDEF'
#259: FILE: lguest.c:367:
+		if ((syms[i].st_shndx == SHN_UNDEF) || !syms[i].st_name)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: lguest.c:370:
+		if (!strcmp("boot_level4_pgt",
+				(char *)((u64)syms[i].st_name + strtab))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: lguest.c:377:
+		err(1,"Unable to find boot pgdir");
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: lguest.c:404:
+static unsigned long bzimage(int fd, unsigned long mem, unsigned long *pgdir_addr,
+			   const char *initrd, unsigned long *ird_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: lguest.c:430:
+static unsigned long load_bzimage(int bzimage_fd, const Elf32_Ehdr *ehdr,
+				unsigned long mem, unsigned long *pgdir_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: lguest.c:513:
+				 unsigned long (*handle_output)(int,
 						      const struct iovec *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#350: FILE: lguest.c:572:
+static unsigned long *dma2iov(unsigned long dma, struct iovec iov[], unsigned *num)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: lguest.c:596:
+static unsigned long *get_dma_buffer(int fd, void *addr,
 			   struct iovec iov[], unsigned *num, u32 *irq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: lguest.c:686:
+static unsigned long handle_tun_output(int fd, const struct iovec *iov,
+				     unsigned num, struct device *dev)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#396: FILE: lguest.c:686:
+				     unsigned num, struct device *dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: lguest.c:694:
+static unsigned long handle_block_output(int fd, const struct iovec *iov,
+				       unsigned num, struct device *dev)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#406: FILE: lguest.c:694:
+				       unsigned num, struct device *dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: lguest.c:706:
+^I^Ierr(1, "Bad offset %llu vs %llu", (unsigned long long)off, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: lguest.c:707:
+		err(1, "Bad offset %llu vs %llu", (unsigned long long)off, 
+						(unsigned long long)device_len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: lguest.c:711:
+^Iverbose("Block: %s at offset %llu\n", p->type ? "WRITE" : "READ", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: lguest.c:712:
+	verbose("Block: %s at offset %llu\n", p->type ? "WRITE" : "READ", 
+						(unsigned long long)off);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: lguest.c:723:
+			errx(1, "Write past end  %llu+%u",
+						(unsigned long long)off, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: lguest.c:992:
+static unsigned long handle_console_output(int fd, const struct iovec *iov,
+					 unsigned num, struct device*dev)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#458: FILE: lguest.c:992:
+					 unsigned num, struct device*dev)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#458: FILE: lguest.c:992:
+					 unsigned num, struct device*dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: lguest.c:1027:
+static long handle_device(int fd, unsigned long dma, unsigned long addr,
 			 struct devices *devices)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: lguest.c:1073:
+^Ierrno = 0;^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#483: FILE: lguest.c:1074:
+	switch (*(elf_nident+EI_CLASS)) {
+		case ELFCLASS32:
[...]
+		case ELFCLASS64:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#483: FILE: lguest.c:1074:
+	switch (*(elf_nident+EI_CLASS)) {
 	                    ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#504: FILE: lguest.c:1095:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449700.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 8 warnings, 38 checks, 468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449700.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
