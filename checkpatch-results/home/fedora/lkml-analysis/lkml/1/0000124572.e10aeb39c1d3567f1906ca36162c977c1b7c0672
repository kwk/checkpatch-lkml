WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: drivers/block/drbd/drbd_int.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#56: FILE: drivers/block/drbd/drbd_int.h:2:
+/*
+  drbd_int.h

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#76: FILE: drivers/block/drbd/drbd_int.h:22:
+  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: drivers/block/drbd/drbd_int.h:46:
+# define __protected_by(x)       __attribute__((require_context(x,1,999,"rdwr")))
                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: drivers/block/drbd/drbd_int.h:46:
+# define __protected_by(x)       __attribute__((require_context(x,1,999,"rdwr")))
                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: drivers/block/drbd/drbd_int.h:46:
+# define __protected_by(x)       __attribute__((require_context(x,1,999,"rdwr")))
                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#101: FILE: drivers/block/drbd/drbd_int.h:47:
+# define __protected_read_by(x)  __attribute__((require_context(x,1,999,"read")))
                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#101: FILE: drivers/block/drbd/drbd_int.h:47:
+# define __protected_read_by(x)  __attribute__((require_context(x,1,999,"read")))
                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#101: FILE: drivers/block/drbd/drbd_int.h:47:
+# define __protected_read_by(x)  __attribute__((require_context(x,1,999,"read")))
                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: drivers/block/drbd/drbd_int.h:48:
+# define __protected_write_by(x) __attribute__((require_context(x,1,999,"write")))
                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: drivers/block/drbd/drbd_int.h:48:
+# define __protected_write_by(x) __attribute__((require_context(x,1,999,"write")))
                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: drivers/block/drbd/drbd_int.h:48:
+# define __protected_write_by(x) __attribute__((require_context(x,1,999,"write")))
                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: drivers/block/drbd/drbd_int.h:49:
+# define __must_hold(x)       __attribute__((context(x,1,1), require_context(x,1,999,"call")))
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: drivers/block/drbd/drbd_int.h:49:
+# define __must_hold(x)       __attribute__((context(x,1,1), require_context(x,1,999,"call")))
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: drivers/block/drbd/drbd_int.h:49:
+# define __must_hold(x)       __attribute__((context(x,1,1), require_context(x,1,999,"call")))
                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: drivers/block/drbd/drbd_int.h:49:
+# define __must_hold(x)       __attribute__((context(x,1,1), require_context(x,1,999,"call")))
                                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: drivers/block/drbd/drbd_int.h:49:
+# define __must_hold(x)       __attribute__((context(x,1,1), require_context(x,1,999,"call")))
                                                                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#103: FILE: drivers/block/drbd/drbd_int.h:49:
+# define __must_hold(x)       __attribute__((context(x,1,1), require_context(x,1,999,"call")))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#111: FILE: drivers/block/drbd/drbd_int.h:57:
+#define __no_warn(lock, stmt) do { __acquire(lock); stmt; __release(lock); } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#127: FILE: drivers/block/drbd/drbd_int.h:73:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#136: FILE: drivers/block/drbd/drbd_int.h:82:
+ * This is used to wake the asender,
                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#151: FILE: drivers/block/drbd/drbd_int.h:97:
+ * so if it says "cannot dereference null pointer at adress 0x00000001",
                                                      ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#152: FILE: drivers/block/drbd/drbd_int.h:98:
+ * it is most likely one of these :( */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#173: FILE: drivers/block/drbd/drbd_int.h:119:
+#define DUMPP(A)   dev_err(DEV, #A " = %p in %s:%d\n", (A), __FILE__, __LINE__);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#174: FILE: drivers/block/drbd/drbd_int.h:120:
+#define DUMPLU(A)  dev_err(DEV, #A " = %lu in %s:%d\n", (unsigned long)(A), __FILE__, __LINE__);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#175: FILE: drivers/block/drbd/drbd_int.h:121:
+#define DUMPLLU(A) dev_err(DEV, #A " = %llu in %s:%d\n", (unsigned long long)(A), __FILE__, __LINE__);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#175: FILE: drivers/block/drbd/drbd_int.h:121:
+#define DUMPLLU(A) dev_err(DEV, #A " = %llu in %s:%d\n", (unsigned long long)(A), __FILE__, __LINE__);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#176: FILE: drivers/block/drbd/drbd_int.h:122:
+#define DUMPLX(A)  dev_err(DEV, #A " = %lx in %s:%d\n", (A), __FILE__, __LINE__);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#177: FILE: drivers/block/drbd/drbd_int.h:123:
+#define DUMPI(A)   dev_err(DEV, #A " = %d in %s:%d\n", (int)(A), __FILE__, __LINE__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: drivers/block/drbd/drbd_int.h:125:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#183: FILE: drivers/block/drbd/drbd_int.h:129:
+#define D_ASSERT(exp)	if (!(exp)) \
+	 dev_err(DEV, "ASSERT( " #exp " ) in %s:%d\n", __FILE__, __LINE__)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#186: FILE: drivers/block/drbd/drbd_int.h:132:
+#define ERR_IF(exp) if (({				\
+	int _b = (exp) != 0;				\
+	if (_b) dev_err(DEV, "%s: (%s) in %s:%d\n",	\
+		__func__, #exp, __FILE__, __LINE__);	\
+	 _b;						\
+	}))

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#188: FILE: drivers/block/drbd/drbd_int.h:134:
+	if (_b) dev_err(DEV, "%s: (%s) in %s:%d\n",	\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/block/drbd/drbd_int.h:141:
+    DRBD_FAULT_MD_WR = 0,^I/* meta data write */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/block/drbd/drbd_int.h:142:
+    DRBD_FAULT_MD_RD,^I^I/*           read  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/block/drbd/drbd_int.h:143:
+    DRBD_FAULT_RS_WR,^I^I/* resync          */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/block/drbd/drbd_int.h:144:
+    DRBD_FAULT_RS_RD,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: drivers/block/drbd/drbd_int.h:145:
+    DRBD_FAULT_DT_WR,^I^I/* data            */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: drivers/block/drbd/drbd_int.h:146:
+    DRBD_FAULT_DT_RD,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: drivers/block/drbd/drbd_int.h:147:
+    DRBD_FAULT_DT_RA,^I^I/* data read ahead */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/block/drbd/drbd_int.h:148:
+    DRBD_FAULT_BM_ALLOC,        /* bitmap allocation */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/block/drbd/drbd_int.h:149:
+    DRBD_FAULT_AL_EE,^I^I/* alloc ee */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: drivers/block/drbd/drbd_int.h:151:
+    DRBD_FAULT_MAX,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: drivers/block/drbd/drbd_int.h:154:
+extern void trace_drbd_resync(struct drbd_conf *mdev, int level, const char *fmt, ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: drivers/block/drbd/drbd_int.h:161:
+    return fault_rate &&$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#216: FILE: drivers/block/drbd/drbd_int.h:162:
+	    (enable_faults & (1<<type)) &&
 	                       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#219: FILE: drivers/block/drbd/drbd_int.h:165:
+}
+#define FAULT_ACTIVE(_m, _t) (drbd_insert_fault((_m), (_t)))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#226: FILE: drivers/block/drbd/drbd_int.h:172:
+#define div_ceil(A, B) ((A)/(B) + ((A)%(B) ? 1 : 0))
                            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#226: FILE: drivers/block/drbd/drbd_int.h:172:
+#define div_ceil(A, B) ((A)/(B) + ((A)%(B) ? 1 : 0))
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#226: FILE: drivers/block/drbd/drbd_int.h:172:
+#define div_ceil(A, B) ((A)/(B) + ((A)%(B) ? 1 : 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'B' - possible side-effects?
#226: FILE: drivers/block/drbd/drbd_int.h:172:
+#define div_ceil(A, B) ((A)/(B) + ((A)%(B) ? 1 : 0))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#228: FILE: drivers/block/drbd/drbd_int.h:174:
+#define div_floor(A, B) ((A)/(B))
                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#232: FILE: drivers/block/drbd/drbd_int.h:178:
+#define DRBD_MD_MAGIC (DRBD_MAGIC+4)
                                  ^

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#260: FILE: drivers/block/drbd/drbd_int.h:206:
+	/* asender (meta socket */
 	   ^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#280: FILE: drivers/block/drbd/drbd_int.h:226:
+	P_SYNC_PARAM89	      = 0x23, /* data socket, protocol version 89 replacement for P_SYNC_PARAM */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#299: FILE: drivers/block/drbd/drbd_int.h:245:
+	 * one PRO_VERSION */

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#300: FILE: drivers/block/drbd/drbd_int.h:246:
+	static const char *cmdnames[] = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#350: FILE: drivers/block/drbd/drbd_int.h:296:
+ * possibly in some encoding scheme */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#355: FILE: drivers/block/drbd/drbd_int.h:301:
+	 * call the accessor functions over and again. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#363: FILE: drivers/block/drbd/drbd_int.h:309:
+	unsigned packets[2];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#364: FILE: drivers/block/drbd/drbd_int.h:310:
+	unsigned bytes[2];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: drivers/block/drbd/drbd_int.h:313:
+extern void INFO_bm_xfer_stats(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: drivers/block/drbd/drbd_int.h:314:
+extern void INFO_bm_xfer_stats(struct drbd_conf *mdev,
+		const char *direction, struct bm_xfer_ctx *c);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#378: FILE: drivers/block/drbd/drbd_int.h:324:
+	 * the plain text bitmap much more convenient.  */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#452: FILE: drivers/block/drbd/drbd_int.h:398:
+
+

WARNING:TYPO_SPELLING: 'reserverd' may be misspelled - perhaps 'reserved'?
#477: FILE: drivers/block/drbd/drbd_int.h:423:
+	 * for now, feature_flags and the reserverd array shall be zero.
 	                                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'reserverd' may be misspelled - perhaps 'reserved'?
#481: FILE: drivers/block/drbd/drbd_int.h:427:
+	u64 reserverd[7];
 	    ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#508: FILE: drivers/block/drbd/drbd_int.h:454:
+        /* protocol version 89: */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: drivers/block/drbd/drbd_int.h:468:
+              /* Since protocol version 87 and higher. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#580: FILE: drivers/block/drbd/drbd_int.h:526:
+ * Bump proto version when changing this. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#584: FILE: drivers/block/drbd/drbd_int.h:530:
+	 * algorithm evaluation. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: drivers/block/drbd/drbd_int.h:555:
+	BUG_ON(code & ~0xf);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#634: FILE: drivers/block/drbd/drbd_int.h:580:
+	BUG_ON(n & ~0x7);

WARNING:TYPO_SPELLING: 'architechtures' may be misspelled - perhaps 'architectures'?
#641: FILE: drivers/block/drbd/drbd_int.h:587:
+ * most architechtures have used for a long time.
         ^^^^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#644: FILE: drivers/block/drbd/drbd_int.h:590:
+#define BM_PACKET_WORDS (BM_PACKET_PAYLOAD_BYTES/sizeof(long))
                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: drivers/block/drbd/drbd_int.h:598:
+        struct p_header          header;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: drivers/block/drbd/drbd_int.h:598:
+        struct p_header          header;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#653: FILE: drivers/block/drbd/drbd_int.h:599:
+        struct p_handshake       handshake;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: drivers/block/drbd/drbd_int.h:599:
+        struct p_handshake       handshake;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: drivers/block/drbd/drbd_int.h:600:
+        struct p_data            data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: drivers/block/drbd/drbd_int.h:600:
+        struct p_data            data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: drivers/block/drbd/drbd_int.h:601:
+        struct p_block_ack       block_ack;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: drivers/block/drbd/drbd_int.h:601:
+        struct p_block_ack       block_ack;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: drivers/block/drbd/drbd_int.h:602:
+        struct p_barrier         barrier;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: drivers/block/drbd/drbd_int.h:602:
+        struct p_barrier         barrier;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: drivers/block/drbd/drbd_int.h:603:
+        struct p_barrier_ack     barrier_ack;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: drivers/block/drbd/drbd_int.h:603:
+        struct p_barrier_ack     barrier_ack;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: drivers/block/drbd/drbd_int.h:604:
+        struct p_rs_param_89     rs_param_89;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: drivers/block/drbd/drbd_int.h:604:
+        struct p_rs_param_89     rs_param_89;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: drivers/block/drbd/drbd_int.h:605:
+        struct p_protocol        protocol;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: drivers/block/drbd/drbd_int.h:605:
+        struct p_protocol        protocol;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: drivers/block/drbd/drbd_int.h:606:
+        struct p_sizes           sizes;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: drivers/block/drbd/drbd_int.h:606:
+        struct p_sizes           sizes;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: drivers/block/drbd/drbd_int.h:607:
+        struct p_uuids           uuids;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: drivers/block/drbd/drbd_int.h:607:
+        struct p_uuids           uuids;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: drivers/block/drbd/drbd_int.h:608:
+        struct p_state           state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: drivers/block/drbd/drbd_int.h:608:
+        struct p_state           state;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: drivers/block/drbd/drbd_int.h:609:
+        struct p_req_state       req_state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: drivers/block/drbd/drbd_int.h:609:
+        struct p_req_state       req_state;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: drivers/block/drbd/drbd_int.h:610:
+        struct p_req_state_reply req_state_reply;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: drivers/block/drbd/drbd_int.h:610:
+        struct p_req_state_reply req_state_reply;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: drivers/block/drbd/drbd_int.h:611:
+        struct p_block_req       block_req;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: drivers/block/drbd/drbd_int.h:611:
+        struct p_block_req       block_req;$

CHECK:CAMELCASE: Avoid CamelCase: <None>
#670: FILE: drivers/block/drbd/drbd_int.h:616:
+	None,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Running>
#671: FILE: drivers/block/drbd/drbd_int.h:617:
+	Running,

CHECK:CAMELCASE: Avoid CamelCase: <Exiting>
#672: FILE: drivers/block/drbd/drbd_int.h:618:
+	Exiting,

CHECK:CAMELCASE: Avoid CamelCase: <Restarting>
#673: FILE: drivers/block/drbd/drbd_int.h:619:
+	Restarting

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#677: FILE: drivers/block/drbd/drbd_int.h:623:
+	spinlock_t t_lock;

WARNING:SPACING: Unnecessary space before function pointer arguments
#681: FILE: drivers/block/drbd/drbd_int.h:627:
+	int (*function) (struct drbd_thread *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_thread *' should also have an identifier name
#681: FILE: drivers/block/drbd/drbd_int.h:627:
+	int (*function) (struct drbd_thread *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#686: FILE: drivers/block/drbd/drbd_int.h:632:
+static inline enum drbd_thread_state get_t_state(struct drbd_thread *thi)
                                                                      ^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#690: FILE: drivers/block/drbd/drbd_int.h:636:
+	 *	--lge */

WARNING:MEMORY_BARRIER: memory barrier without comment
#692: FILE: drivers/block/drbd/drbd_int.h:638:
+	smp_rmb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#696: FILE: drivers/block/drbd/drbd_int.h:642:
+
+

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#715: FILE: drivers/block/drbd/drbd_int.h:661:
+	struct hlist_node colision;
 	                  ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#726: FILE: drivers/block/drbd/drbd_int.h:672:
+	 * we might be able to use that to our advantage...  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#746: FILE: drivers/block/drbd/drbd_int.h:692:
+/* These Tl_epoch_entries may be in one of 6 lists:
+   active_ee .. data packet being written

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#786: FILE: drivers/block/drbd/drbd_int.h:732:
+	struct hlist_node colision;
 	                  ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#792: FILE: drivers/block/drbd/drbd_int.h:738:
+	 * we might be able to use that to our advantage...  */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#810: FILE: drivers/block/drbd/drbd_int.h:756:
+};
+#define EE_CALL_AL_COMPLETE_IO (1<<__EE_CALL_AL_COMPLETE_IO)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#810: FILE: drivers/block/drbd/drbd_int.h:756:
+#define EE_CALL_AL_COMPLETE_IO (1<<__EE_CALL_AL_COMPLETE_IO)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#810: FILE: drivers/block/drbd/drbd_int.h:756:
+#define EE_CALL_AL_COMPLETE_IO (1<<__EE_CALL_AL_COMPLETE_IO)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#811: FILE: drivers/block/drbd/drbd_int.h:757:
+#define EE_CONFLICT_PENDING    (1<<__EE_CONFLICT_PENDING)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#811: FILE: drivers/block/drbd/drbd_int.h:757:
+#define EE_CONFLICT_PENDING    (1<<__EE_CONFLICT_PENDING)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#812: FILE: drivers/block/drbd/drbd_int.h:758:
+#define EE_MAY_SET_IN_SYNC     (1<<__EE_MAY_SET_IN_SYNC)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#812: FILE: drivers/block/drbd/drbd_int.h:758:
+#define EE_MAY_SET_IN_SYNC     (1<<__EE_MAY_SET_IN_SYNC)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#813: FILE: drivers/block/drbd/drbd_int.h:759:
+#define EE_IS_BARRIER          (1<<__EE_IS_BARRIER)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#813: FILE: drivers/block/drbd/drbd_int.h:759:
+#define EE_IS_BARRIER          (1<<__EE_IS_BARRIER)

WARNING:TYPO_SPELLING: 'preceeded' may be misspelled - perhaps 'preceded'?
#817: FILE: drivers/block/drbd/drbd_int.h:763:
+	CREATE_BARRIER,		/* next P_DATA is preceeded by a P_BARRIER */
 	               		                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#818: FILE: drivers/block/drbd/drbd_int.h:764:
+	SIGNAL_ASENDER,		/* whether asender wants to be interrupted */
 	               		           ^^^^^^^

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#819: FILE: drivers/block/drbd/drbd_int.h:765:
+	SEND_PING,		/* whether asender should send a ping asap */
 	          		           ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#832: FILE: drivers/block/drbd/drbd_int.h:778:
+				 * goes into C_CONNECTED state. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#838: FILE: drivers/block/drbd/drbd_int.h:784:
+	MD_NO_BARRIER,		/* meta data device does not support barriers,
+				   so don't even try */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#838: FILE: drivers/block/drbd/drbd_int.h:784:
+				   so don't even try */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#841: FILE: drivers/block/drbd/drbd_int.h:787:
+	BITMAP_IO,		/* suspend application io;
+				   once no more io in flight, start bitmap io */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#841: FILE: drivers/block/drbd/drbd_int.h:787:
+				   once no more io in flight, start bitmap io */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#847: FILE: drivers/block/drbd/drbd_int.h:793:
+				 * if set, also prevents the device from dying */

WARNING:TYPO_SPELLING: 'dissalowed' may be misspelled - perhaps 'disallowed'?
#850: FILE: drivers/block/drbd/drbd_int.h:796:
+				 * reconfiguring (nl_disk_conf, nl_net_conf) is dissalowed,
 				                                                ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#851: FILE: drivers/block/drbd/drbd_int.h:797:
+				 * while this is set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#857: FILE: drivers/block/drbd/drbd_int.h:803:
+ * MAYBE group them further */

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#874: FILE: drivers/block/drbd/drbd_int.h:820:
+	struct mutex mutex;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#877: FILE: drivers/block/drbd/drbd_int.h:823:
+	 * send/receive buffers off the stack */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#901: FILE: drivers/block/drbd/drbd_int.h:847:
+#define NL_PACKET(name, number, fields) struct name { fields };

ERROR:SPACING: space required after that ',' (ctx:VxV)
#902: FILE: drivers/block/drbd/drbd_int.h:848:
+#define NL_INTEGER(pn,pr,member) int member;
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#902: FILE: drivers/block/drbd/drbd_int.h:848:
+#define NL_INTEGER(pn,pr,member) int member;
                         ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#902: FILE: drivers/block/drbd/drbd_int.h:848:
+#define NL_INTEGER(pn,pr,member) int member;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#903: FILE: drivers/block/drbd/drbd_int.h:849:
+#define NL_INT64(pn,pr,member) __u64 member;
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#903: FILE: drivers/block/drbd/drbd_int.h:849:
+#define NL_INT64(pn,pr,member) __u64 member;
                       ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#903: FILE: drivers/block/drbd/drbd_int.h:849:
+#define NL_INT64(pn,pr,member) __u64 member;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#904: FILE: drivers/block/drbd/drbd_int.h:850:
+#define NL_BIT(pn,pr,member)   unsigned member:1;
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#904: FILE: drivers/block/drbd/drbd_int.h:850:
+#define NL_BIT(pn,pr,member)   unsigned member:1;
                     ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#904: FILE: drivers/block/drbd/drbd_int.h:850:
+#define NL_BIT(pn,pr,member)   unsigned member:1;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#905: FILE: drivers/block/drbd/drbd_int.h:851:
+#define NL_STRING(pn,pr,member,len) unsigned char member[len]; int member ## _len;
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#905: FILE: drivers/block/drbd/drbd_int.h:851:
+#define NL_STRING(pn,pr,member,len) unsigned char member[len]; int member ## _len;
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#905: FILE: drivers/block/drbd/drbd_int.h:851:
+#define NL_STRING(pn,pr,member,len) unsigned char member[len]; int member ## _len;
                               ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#905: FILE: drivers/block/drbd/drbd_int.h:851:
+#define NL_STRING(pn,pr,member,len) unsigned char member[len]; int member ## _len;

WARNING:TYPO_SPELLING: 'replys' may be misspelled - perhaps 'replies'?
#978: FILE: drivers/block/drbd/drbd_int.h:924:
+	atomic_t unacked_cnt;	 /* Need to send replys for */
 	                     	                 ^^^^^^

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#1014: FILE: drivers/block/drbd/drbd_int.h:960:
+	struct drbd_thread asender;
 	                   ^^^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1028: FILE: drivers/block/drbd/drbd_int.h:974:
+	spinlock_t epoch_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1065: FILE: drivers/block/drbd/drbd_int.h:1011:
+	spinlock_t peer_seq_lock;

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#1089: FILE: drivers/block/drbd/drbd_int.h:1035:
+/* returns 1 if it was successfull,
                        ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1101: FILE: drivers/block/drbd/drbd_int.h:1047:
+	 * while we were waiting in down()... */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mdev->data.socket"
#1102: FILE: drivers/block/drbd/drbd_int.h:1048:
+	if (unlikely(mdev->data.socket == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1128: FILE: drivers/block/drbd/drbd_int.h:1074:
+extern void drbd_init_set_defaults(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1129: FILE: drivers/block/drbd/drbd_int.h:1075:
+extern int drbd_change_state(struct drbd_conf *mdev, enum chg_state_flags f,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: drivers/block/drbd/drbd_int.h:1076:
+extern int drbd_change_state(struct drbd_conf *mdev, enum chg_state_flags f,
+			union drbd_state mask, union drbd_state val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1131: FILE: drivers/block/drbd/drbd_int.h:1077:
+extern void drbd_force_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1131: FILE: drivers/block/drbd/drbd_int.h:1077:
+extern void drbd_force_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1131: FILE: drivers/block/drbd/drbd_int.h:1077:
+extern void drbd_force_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1131: FILE: drivers/block/drbd/drbd_int.h:1077:
+extern void drbd_force_state(struct drbd_conf *, union drbd_state,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: drivers/block/drbd/drbd_int.h:1078:
+extern void drbd_force_state(struct drbd_conf *, union drbd_state,
+			union drbd_state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1133: FILE: drivers/block/drbd/drbd_int.h:1079:
+extern int _drbd_request_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1133: FILE: drivers/block/drbd/drbd_int.h:1079:
+extern int _drbd_request_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1133: FILE: drivers/block/drbd/drbd_int.h:1079:
+extern int _drbd_request_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1133: FILE: drivers/block/drbd/drbd_int.h:1079:
+extern int _drbd_request_state(struct drbd_conf *, union drbd_state,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1134: FILE: drivers/block/drbd/drbd_int.h:1080:
+extern int _drbd_request_state(struct drbd_conf *, union drbd_state,
+			union drbd_state, enum chg_state_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1135: FILE: drivers/block/drbd/drbd_int.h:1081:
+extern int __drbd_set_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1135: FILE: drivers/block/drbd/drbd_int.h:1081:
+extern int __drbd_set_state(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1135: FILE: drivers/block/drbd/drbd_int.h:1081:
+extern int __drbd_set_state(struct drbd_conf *, union drbd_state,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1137: FILE: drivers/block/drbd/drbd_int.h:1083:
+extern void print_st_err(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1137: FILE: drivers/block/drbd/drbd_int.h:1083:
+extern void print_st_err(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1137: FILE: drivers/block/drbd/drbd_int.h:1083:
+extern void print_st_err(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1137: FILE: drivers/block/drbd/drbd_int.h:1083:
+extern void print_st_err(struct drbd_conf *, union drbd_state,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1137: FILE: drivers/block/drbd/drbd_int.h:1083:
+extern void print_st_err(struct drbd_conf *, union drbd_state,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1138: FILE: drivers/block/drbd/drbd_int.h:1084:
+extern void print_st_err(struct drbd_conf *, union drbd_state,
+			union drbd_state, int);

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1139: FILE: drivers/block/drbd/drbd_int.h:1085:
+extern int  drbd_thread_start(struct drbd_thread *thi);
                                                   ^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1139: FILE: drivers/block/drbd/drbd_int.h:1085:
+extern int  drbd_thread_start(struct drbd_thread *thi);

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1140: FILE: drivers/block/drbd/drbd_int.h:1086:
+extern void _drbd_thread_stop(struct drbd_thread *thi, int restart, int wait);
                                                   ^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1140: FILE: drivers/block/drbd/drbd_int.h:1086:
+extern void _drbd_thread_stop(struct drbd_thread *thi, int restart, int wait);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1142: FILE: drivers/block/drbd/drbd_int.h:1088:
+extern void drbd_thread_current_set_cpu(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1143: FILE: drivers/block/drbd/drbd_int.h:1089:
+extern cpumask_t drbd_calc_cpu_mask(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1148: FILE: drivers/block/drbd/drbd_int.h:1094:
+extern void drbd_free_resources(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1149: FILE: drivers/block/drbd/drbd_int.h:1095:
+extern void tl_release(struct drbd_conf *mdev, unsigned int barrier_nr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1151: FILE: drivers/block/drbd/drbd_int.h:1097:
+extern void tl_clear(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1152: FILE: drivers/block/drbd/drbd_int.h:1098:
+extern void _tl_add_barrier(struct drbd_conf *, struct drbd_tl_epoch *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1152: FILE: drivers/block/drbd/drbd_int.h:1098:
+extern void _tl_add_barrier(struct drbd_conf *, struct drbd_tl_epoch *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_tl_epoch *' should also have an identifier name
#1152: FILE: drivers/block/drbd/drbd_int.h:1098:
+extern void _tl_add_barrier(struct drbd_conf *, struct drbd_tl_epoch *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1153: FILE: drivers/block/drbd/drbd_int.h:1099:
+extern void drbd_free_sock(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1154: FILE: drivers/block/drbd/drbd_int.h:1100:
+extern int drbd_send(struct drbd_conf *mdev, struct socket *sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1155: FILE: drivers/block/drbd/drbd_int.h:1101:
+extern int drbd_send(struct drbd_conf *mdev, struct socket *sock,
+			void *buf, size_t size, unsigned msg_flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1155: FILE: drivers/block/drbd/drbd_int.h:1101:
+			void *buf, size_t size, unsigned msg_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1156: FILE: drivers/block/drbd/drbd_int.h:1102:
+extern int drbd_send_protocol(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1157: FILE: drivers/block/drbd/drbd_int.h:1103:
+extern int drbd_send_uuids(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1158: FILE: drivers/block/drbd/drbd_int.h:1104:
+extern int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1159: FILE: drivers/block/drbd/drbd_int.h:1105:
+extern int drbd_send_sync_uuid(struct drbd_conf *mdev, u64 val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1160: FILE: drivers/block/drbd/drbd_int.h:1106:
+extern int drbd_send_sizes(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1161: FILE: drivers/block/drbd/drbd_int.h:1107:
+extern int _drbd_send_state(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1162: FILE: drivers/block/drbd/drbd_int.h:1108:
+extern int drbd_send_state(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1163: FILE: drivers/block/drbd/drbd_int.h:1109:
+extern int _drbd_send_cmd(struct drbd_conf *mdev, struct socket *sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1164: FILE: drivers/block/drbd/drbd_int.h:1110:
+extern int _drbd_send_cmd(struct drbd_conf *mdev, struct socket *sock,
+			enum drbd_packets cmd, struct p_header *h,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1165: FILE: drivers/block/drbd/drbd_int.h:1111:
+			size_t size, unsigned msg_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1168: FILE: drivers/block/drbd/drbd_int.h:1114:
+extern int drbd_send_cmd(struct drbd_conf *mdev, int use_data_socket,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: drivers/block/drbd/drbd_int.h:1115:
+extern int drbd_send_cmd(struct drbd_conf *mdev, int use_data_socket,
+			enum drbd_packets cmd, struct p_header *h,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1171: FILE: drivers/block/drbd/drbd_int.h:1117:
+extern int drbd_send_cmd2(struct drbd_conf *mdev, enum drbd_packets cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/block/drbd/drbd_int.h:1118:
+extern int drbd_send_cmd2(struct drbd_conf *mdev, enum drbd_packets cmd,
+			char *data, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1173: FILE: drivers/block/drbd/drbd_int.h:1119:
+extern int drbd_send_sync_param(struct drbd_conf *mdev, struct syncer_conf *sc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1174: FILE: drivers/block/drbd/drbd_int.h:1120:
+extern int drbd_send_b_ack(struct drbd_conf *mdev, u32 barrier_nr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1175: FILE: drivers/block/drbd/drbd_int.h:1121:
+extern int drbd_send_b_ack(struct drbd_conf *mdev, u32 barrier_nr,
+			u32 set_size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1176: FILE: drivers/block/drbd/drbd_int.h:1122:
+extern int drbd_send_ack(struct drbd_conf *mdev, enum drbd_packets cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: drivers/block/drbd/drbd_int.h:1123:
+extern int drbd_send_ack(struct drbd_conf *mdev, enum drbd_packets cmd,
+			struct drbd_epoch_entry *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1178: FILE: drivers/block/drbd/drbd_int.h:1124:
+extern int drbd_send_ack_rp(struct drbd_conf *mdev, enum drbd_packets cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1179: FILE: drivers/block/drbd/drbd_int.h:1125:
+extern int drbd_send_ack_rp(struct drbd_conf *mdev, enum drbd_packets cmd,
+			struct p_block_req *rp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1180: FILE: drivers/block/drbd/drbd_int.h:1126:
+extern int drbd_send_ack_dp(struct drbd_conf *mdev, enum drbd_packets cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: drivers/block/drbd/drbd_int.h:1127:
+extern int drbd_send_ack_dp(struct drbd_conf *mdev, enum drbd_packets cmd,
+			struct p_data *dp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1182: FILE: drivers/block/drbd/drbd_int.h:1128:
+extern int drbd_send_ack_ex(struct drbd_conf *mdev, enum drbd_packets cmd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1184: FILE: drivers/block/drbd/drbd_int.h:1130:
+extern int _drbd_send_page(struct drbd_conf *mdev, struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1185: FILE: drivers/block/drbd/drbd_int.h:1131:
+extern int _drbd_send_page(struct drbd_conf *mdev, struct page *page,
+			int offset, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1186: FILE: drivers/block/drbd/drbd_int.h:1132:
+extern int drbd_send_block(struct drbd_conf *mdev, enum drbd_packets cmd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1188: FILE: drivers/block/drbd/drbd_int.h:1134:
+extern int drbd_send_dblock(struct drbd_conf *mdev, struct drbd_request *req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1189: FILE: drivers/block/drbd/drbd_int.h:1135:
+extern int _drbd_send_barrier(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1190: FILE: drivers/block/drbd/drbd_int.h:1136:
+extern int _drbd_send_barrier(struct drbd_conf *mdev,
+			struct drbd_tl_epoch *barrier);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1191: FILE: drivers/block/drbd/drbd_int.h:1137:
+extern int drbd_send_drequest(struct drbd_conf *mdev, int cmd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1193: FILE: drivers/block/drbd/drbd_int.h:1139:
+extern int drbd_send_drequest_csum(struct drbd_conf *mdev,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1194: FILE: drivers/block/drbd/drbd_int.h:1140:
+				   sector_t sector,int size,
 				                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1197: FILE: drivers/block/drbd/drbd_int.h:1143:
+extern int drbd_send_ov_request(struct drbd_conf *mdev,sector_t sector,int size);
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1197: FILE: drivers/block/drbd/drbd_int.h:1143:
+extern int drbd_send_ov_request(struct drbd_conf *mdev,sector_t sector,int size);
                                                                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1197: FILE: drivers/block/drbd/drbd_int.h:1143:
+extern int drbd_send_ov_request(struct drbd_conf *mdev,sector_t sector,int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1199: FILE: drivers/block/drbd/drbd_int.h:1145:
+extern int drbd_send_bitmap(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1200: FILE: drivers/block/drbd/drbd_int.h:1146:
+extern int _drbd_send_bitmap(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: drivers/block/drbd/drbd_int.h:1147:
+extern int drbd_send_sr_reply(struct drbd_conf *mdev, int retcode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1202: FILE: drivers/block/drbd/drbd_int.h:1148:
+extern void drbd_free_bc(struct drbd_backing_dev *ldev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1203: FILE: drivers/block/drbd/drbd_int.h:1149:
+extern int drbd_io_error(struct drbd_conf *mdev, int forcedetach);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1204: FILE: drivers/block/drbd/drbd_int.h:1150:
+extern void drbd_mdev_cleanup(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1207: FILE: drivers/block/drbd/drbd_int.h:1153:
+extern void drbd_md_sync(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1208: FILE: drivers/block/drbd/drbd_int.h:1154:
+extern int  drbd_md_read(struct drbd_conf *mdev, struct drbd_backing_dev *bdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1210: FILE: drivers/block/drbd/drbd_int.h:1156:
+extern void drbd_uuid_set(struct drbd_conf *mdev, int idx, u64 val) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1211: FILE: drivers/block/drbd/drbd_int.h:1157:
+extern void _drbd_uuid_set(struct drbd_conf *mdev, int idx, u64 val) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1212: FILE: drivers/block/drbd/drbd_int.h:1158:
+extern void drbd_uuid_new_current(struct drbd_conf *mdev) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1213: FILE: drivers/block/drbd/drbd_int.h:1159:
+extern void _drbd_uuid_new_current(struct drbd_conf *mdev) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1214: FILE: drivers/block/drbd/drbd_int.h:1160:
+extern void drbd_uuid_set_bm(struct drbd_conf *mdev, u64 val) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1215: FILE: drivers/block/drbd/drbd_int.h:1161:
+extern void drbd_md_set_flag(struct drbd_conf *mdev, int flags) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1216: FILE: drivers/block/drbd/drbd_int.h:1162:
+extern void drbd_md_clear_flag(struct drbd_conf *mdev, int flags)__must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1217: FILE: drivers/block/drbd/drbd_int.h:1163:
+extern int drbd_md_test_flag(struct drbd_backing_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_backing_dev *' should also have an identifier name
#1217: FILE: drivers/block/drbd/drbd_int.h:1163:
+extern int drbd_md_test_flag(struct drbd_backing_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1217: FILE: drivers/block/drbd/drbd_int.h:1163:
+extern int drbd_md_test_flag(struct drbd_backing_dev *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1218: FILE: drivers/block/drbd/drbd_int.h:1164:
+extern void drbd_md_mark_dirty(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1219: FILE: drivers/block/drbd/drbd_int.h:1165:
+extern void drbd_queue_bitmap_io(struct drbd_conf *mdev,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1221: FILE: drivers/block/drbd/drbd_int.h:1167:
+				 void (*done)(struct drbd_conf *, int),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1221: FILE: drivers/block/drbd/drbd_int.h:1167:
+				 void (*done)(struct drbd_conf *, int),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1223: FILE: drivers/block/drbd/drbd_int.h:1169:
+extern int drbd_bmio_set_n_write(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1224: FILE: drivers/block/drbd/drbd_int.h:1170:
+extern int drbd_bmio_clear_n_write(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1225: FILE: drivers/block/drbd/drbd_int.h:1171:
+extern int drbd_bitmap_io(struct drbd_conf *mdev, int (*io_fn)(struct drbd_conf *), char *why);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1227: FILE: drivers/block/drbd/drbd_int.h:1173:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1229: FILE: drivers/block/drbd/drbd_int.h:1175:
+/* Meta data layout
+   We reserve a 128MB Block (4k aligned)

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#1231: FILE: drivers/block/drbd/drbd_int.h:1177:
+   * or on a seperate meta data device. */
              ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1231: FILE: drivers/block/drbd/drbd_int.h:1177:
+   * or on a seperate meta data device. */

WARNING:TYPO_SPELLING: 'smalles' may be misspelled - perhaps 'smallest'?
#1240: FILE: drivers/block/drbd/drbd_int.h:1186:
+/* Since the smalles IO unit is usually 512 byte */
              ^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1242: FILE: drivers/block/drbd/drbd_int.h:1188:
+#define MD_SECTOR_SIZE	 (1<<MD_SECTOR_SHIFT)
                       	   ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1242: FILE: drivers/block/drbd/drbd_int.h:1188:
+#define MD_SECTOR_SIZE	 (1<<MD_SECTOR_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1245: FILE: drivers/block/drbd/drbd_int.h:1191:
+#define AL_EXTENTS_PT ((MD_SECTOR_SIZE-12)/8-1) /* 61 ; Extents per 512B sector */
                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1245: FILE: drivers/block/drbd/drbd_int.h:1191:
+#define AL_EXTENTS_PT ((MD_SECTOR_SIZE-12)/8-1) /* 61 ; Extents per 512B sector */
                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1245: FILE: drivers/block/drbd/drbd_int.h:1191:
+#define AL_EXTENTS_PT ((MD_SECTOR_SIZE-12)/8-1) /* 61 ; Extents per 512B sector */
                                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1247: FILE: drivers/block/drbd/drbd_int.h:1193:
+#define AL_EXTENT_SIZE (1<<AL_EXTENT_SHIFT)
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1247: FILE: drivers/block/drbd/drbd_int.h:1193:
+#define AL_EXTENT_SIZE (1<<AL_EXTENT_SHIFT)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1282: FILE: drivers/block/drbd/drbd_int.h:1228:
+#define BM_BLOCK_SIZE	 (1<<BM_BLOCK_SHIFT)
                      	   ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1282: FILE: drivers/block/drbd/drbd_int.h:1228:
+#define BM_BLOCK_SIZE	 (1<<BM_BLOCK_SHIFT)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1284: FILE: drivers/block/drbd/drbd_int.h:1230:
+ * per sector of on disk bitmap */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1286: FILE: drivers/block/drbd/drbd_int.h:1232:
+#define BM_EXT_SIZE	 (1<<BM_EXT_SHIFT)
                    	   ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1286: FILE: drivers/block/drbd/drbd_int.h:1232:
+#define BM_EXT_SIZE	 (1<<BM_EXT_SHIFT)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1293: FILE: drivers/block/drbd/drbd_int.h:1239:
+#define BM_SECT_TO_BIT(x)   ((x)>>(BM_BLOCK_SHIFT-9))
                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1293: FILE: drivers/block/drbd/drbd_int.h:1239:
+#define BM_SECT_TO_BIT(x)   ((x)>>(BM_BLOCK_SHIFT-9))
                                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1294: FILE: drivers/block/drbd/drbd_int.h:1240:
+#define BM_BIT_TO_SECT(x)   ((sector_t)(x)<<(BM_BLOCK_SHIFT-9))
                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1294: FILE: drivers/block/drbd/drbd_int.h:1240:
+#define BM_BIT_TO_SECT(x)   ((sector_t)(x)<<(BM_BLOCK_SHIFT-9))
                                                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1298: FILE: drivers/block/drbd/drbd_int.h:1244:
+#define Bit2KB(bits) ((bits)<<(BM_BLOCK_SHIFT-10))
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1298: FILE: drivers/block/drbd/drbd_int.h:1244:
+#define Bit2KB(bits) ((bits)<<(BM_BLOCK_SHIFT-10))
                                              ^

CHECK:CAMELCASE: Avoid CamelCase: <Bit2KB>
#1298: FILE: drivers/block/drbd/drbd_int.h:1244:
+#define Bit2KB(bits) ((bits)<<(BM_BLOCK_SHIFT-10))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1301: FILE: drivers/block/drbd/drbd_int.h:1247:
+ * _storage_ sector is located in */

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1302: FILE: drivers/block/drbd/drbd_int.h:1248:
+#define BM_SECT_TO_EXT(x)   ((x)>>(BM_EXT_SHIFT-9))
                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1302: FILE: drivers/block/drbd/drbd_int.h:1248:
+#define BM_SECT_TO_EXT(x)   ((x)>>(BM_EXT_SHIFT-9))
                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1305: FILE: drivers/block/drbd/drbd_int.h:1251:
+#define BM_EXT_TO_SECT(x)   ((sector_t)(x) << (BM_EXT_SHIFT-9))
                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1310: FILE: drivers/block/drbd/drbd_int.h:1256:
+#define BM_WORDS_PER_AL_EXT (1 << (AL_EXTENT_SHIFT-BM_BLOCK_SHIFT-LN2_BPL))
                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1310: FILE: drivers/block/drbd/drbd_int.h:1256:
+#define BM_WORDS_PER_AL_EXT (1 << (AL_EXTENT_SHIFT-BM_BLOCK_SHIFT-LN2_BPL))
                                                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1313: FILE: drivers/block/drbd/drbd_int.h:1259:
+#define BM_BLOCKS_PER_BM_EXT_MASK  ((1<<BM_BLOCKS_PER_BM_EXT_B) - 1)
                                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1331: FILE: drivers/block/drbd/drbd_int.h:1277:
+	  ((MD_RESERVED_SECT - MD_BM_OFFSET) * (1LL<<(BM_EXT_SHIFT-9)))
 	                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1331: FILE: drivers/block/drbd/drbd_int.h:1277:
+	  ((MD_RESERVED_SECT - MD_BM_OFFSET) * (1LL<<(BM_EXT_SHIFT-9)))
 	                                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1344: FILE: drivers/block/drbd/drbd_int.h:1290:
+ * you should use 64bit OS for that much storage, anyways. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1353: FILE: drivers/block/drbd/drbd_int.h:1299:
+ * hash table. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1355: FILE: drivers/block/drbd/drbd_int.h:1301:
+#define DRBD_MAX_SEGMENT_SIZE (1U<<(9+HT_SHIFT))
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1355: FILE: drivers/block/drbd/drbd_int.h:1301:
+#define DRBD_MAX_SEGMENT_SIZE (1U<<(9+HT_SHIFT))
                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1360: FILE: drivers/block/drbd/drbd_int.h:1306:
+extern int  drbd_bm_init(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1361: FILE: drivers/block/drbd/drbd_int.h:1307:
+extern int  drbd_bm_resize(struct drbd_conf *mdev, sector_t sectors);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1362: FILE: drivers/block/drbd/drbd_int.h:1308:
+extern void drbd_bm_cleanup(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1363: FILE: drivers/block/drbd/drbd_int.h:1309:
+extern void drbd_bm_set_all(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1364: FILE: drivers/block/drbd/drbd_int.h:1310:
+extern void drbd_bm_clear_all(struct drbd_conf *mdev);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1365: FILE: drivers/block/drbd/drbd_int.h:1311:
+extern int  drbd_bm_set_bits(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1365: FILE: drivers/block/drbd/drbd_int.h:1311:
+extern int  drbd_bm_set_bits(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1367: FILE: drivers/block/drbd/drbd_int.h:1313:
+extern int  drbd_bm_clear_bits(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1367: FILE: drivers/block/drbd/drbd_int.h:1313:
+extern int  drbd_bm_clear_bits(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1370: FILE: drivers/block/drbd/drbd_int.h:1316:
+extern int _drbd_bm_set_bits(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: drivers/block/drbd/drbd_int.h:1317:
+extern int _drbd_bm_set_bits(struct drbd_conf *mdev,
+		const unsigned long s, const unsigned long e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1372: FILE: drivers/block/drbd/drbd_int.h:1318:
+extern int  drbd_bm_test_bit(struct drbd_conf *mdev, unsigned long bitnr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1373: FILE: drivers/block/drbd/drbd_int.h:1319:
+extern int  drbd_bm_e_weight(struct drbd_conf *mdev, unsigned long enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1374: FILE: drivers/block/drbd/drbd_int.h:1320:
+extern int  drbd_bm_write_sect(struct drbd_conf *mdev, unsigned long enr) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1375: FILE: drivers/block/drbd/drbd_int.h:1321:
+extern int  drbd_bm_read(struct drbd_conf *mdev) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1376: FILE: drivers/block/drbd/drbd_int.h:1322:
+extern int  drbd_bm_write(struct drbd_conf *mdev) __must_hold(local);

CHECK:CAMELCASE: Avoid CamelCase: <drbd_bm_ALe_set_all>
#1377: FILE: drivers/block/drbd/drbd_int.h:1323:
+extern unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1377: FILE: drivers/block/drbd/drbd_int.h:1323:
+extern unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1378: FILE: drivers/block/drbd/drbd_int.h:1324:
+extern unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev,
+		unsigned long al_enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1379: FILE: drivers/block/drbd/drbd_int.h:1325:
+extern size_t	     drbd_bm_words(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1380: FILE: drivers/block/drbd/drbd_int.h:1326:
+extern unsigned long drbd_bm_bits(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1381: FILE: drivers/block/drbd/drbd_int.h:1327:
+extern sector_t      drbd_bm_capacity(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1382: FILE: drivers/block/drbd/drbd_int.h:1328:
+extern unsigned long drbd_bm_find_next(struct drbd_conf *mdev, unsigned long bm_fo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1384: FILE: drivers/block/drbd/drbd_int.h:1330:
+extern unsigned long _drbd_bm_find_next(struct drbd_conf *mdev, unsigned long bm_fo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1385: FILE: drivers/block/drbd/drbd_int.h:1331:
+extern unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev, unsigned long bm_fo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1386: FILE: drivers/block/drbd/drbd_int.h:1332:
+extern unsigned long drbd_bm_total_weight(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1387: FILE: drivers/block/drbd/drbd_int.h:1333:
+extern int drbd_bm_rs_done(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1389: FILE: drivers/block/drbd/drbd_int.h:1335:
+extern void drbd_bm_merge_lel(struct drbd_conf *mdev, size_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1390: FILE: drivers/block/drbd/drbd_int.h:1336:
+extern void drbd_bm_merge_lel(struct drbd_conf *mdev, size_t offset,
+		size_t number, unsigned long *buffer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1392: FILE: drivers/block/drbd/drbd_int.h:1338:
+extern void drbd_bm_get_lel(struct drbd_conf *mdev, size_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1393: FILE: drivers/block/drbd/drbd_int.h:1339:
+extern void drbd_bm_get_lel(struct drbd_conf *mdev, size_t offset,
+		size_t number, unsigned long *buffer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1395: FILE: drivers/block/drbd/drbd_int.h:1341:
+extern void drbd_bm_lock(struct drbd_conf *mdev, char *why);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1396: FILE: drivers/block/drbd/drbd_int.h:1342:
+extern void drbd_bm_unlock(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1398: FILE: drivers/block/drbd/drbd_int.h:1344:
+extern void _drbd_bm_recount_bits(struct drbd_conf *mdev, char *file, int line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1401: FILE: drivers/block/drbd/drbd_int.h:1347:
+extern int drbd_bm_count_bits(struct drbd_conf *mdev, const unsigned long s, const unsigned long e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1416: FILE: drivers/block/drbd/drbd_int.h:1362:
+extern struct drbd_conf *drbd_new_device(unsigned int minor);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1417: FILE: drivers/block/drbd/drbd_int.h:1363:
+extern void drbd_free_mdev(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1422: FILE: drivers/block/drbd/drbd_int.h:1368:
+extern int drbd_make_request_26(struct request_queue *q, struct bio *bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1423: FILE: drivers/block/drbd/drbd_int.h:1369:
+extern int drbd_read_remote(struct drbd_conf *mdev, struct drbd_request *req);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1424: FILE: drivers/block/drbd/drbd_int.h:1370:
+extern int drbd_merge_bvec(struct request_queue *q, struct bvec_merge_data *bvm, struct bio_vec *bvec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1424: FILE: drivers/block/drbd/drbd_int.h:1370:
+extern int drbd_merge_bvec(struct request_queue *q, struct bvec_merge_data *bvm, struct bio_vec *bvec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1425: FILE: drivers/block/drbd/drbd_int.h:1371:
+extern int is_valid_ar_handle(struct drbd_request *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_request *' should also have an identifier name
#1425: FILE: drivers/block/drbd/drbd_int.h:1371:
+extern int is_valid_ar_handle(struct drbd_request *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#1425: FILE: drivers/block/drbd/drbd_int.h:1371:
+extern int is_valid_ar_handle(struct drbd_request *, sector_t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1427: FILE: drivers/block/drbd/drbd_int.h:1373:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1429: FILE: drivers/block/drbd/drbd_int.h:1375:
+extern void drbd_suspend_io(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1430: FILE: drivers/block/drbd/drbd_int.h:1376:
+extern void drbd_resume_io(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1431: FILE: drivers/block/drbd/drbd_int.h:1377:
+extern char *ppsize(char *buf, unsigned long long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1432: FILE: drivers/block/drbd/drbd_int.h:1378:
+extern sector_t drbd_new_dev_size(struct drbd_conf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1432: FILE: drivers/block/drbd/drbd_int.h:1378:
+extern sector_t drbd_new_dev_size(struct drbd_conf *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_backing_dev *' should also have an identifier name
#1432: FILE: drivers/block/drbd/drbd_int.h:1378:
+extern sector_t drbd_new_dev_size(struct drbd_conf *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1433: FILE: drivers/block/drbd/drbd_int.h:1379:
+extern sector_t drbd_new_dev_size(struct drbd_conf *,
+		struct drbd_backing_dev *);

CHECK:SPACING: No space is necessary after a cast
#1435: FILE: drivers/block/drbd/drbd_int.h:1381:
+extern enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1435: FILE: drivers/block/drbd/drbd_int.h:1381:
+extern enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *) __must_hold(local);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1435: FILE: drivers/block/drbd/drbd_int.h:1381:
+extern enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1436: FILE: drivers/block/drbd/drbd_int.h:1382:
+extern void resync_after_online_grow(struct drbd_conf *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1436: FILE: drivers/block/drbd/drbd_int.h:1382:
+extern void resync_after_online_grow(struct drbd_conf *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1437: FILE: drivers/block/drbd/drbd_int.h:1383:
+extern void drbd_setup_queue_param(struct drbd_conf *mdev, unsigned int) __must_hold(local);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1437: FILE: drivers/block/drbd/drbd_int.h:1383:
+extern void drbd_setup_queue_param(struct drbd_conf *mdev, unsigned int) __must_hold(local);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1438: FILE: drivers/block/drbd/drbd_int.h:1384:
+extern int drbd_set_role(struct drbd_conf *mdev, enum drbd_role new_role,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1439: FILE: drivers/block/drbd/drbd_int.h:1385:
+extern int drbd_set_role(struct drbd_conf *mdev, enum drbd_role new_role,
+		int force);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1441: FILE: drivers/block/drbd/drbd_int.h:1387:
+extern int drbd_khelper(struct drbd_conf *mdev, char *cmd);

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1444: FILE: drivers/block/drbd/drbd_int.h:1390:
+extern int drbd_worker(struct drbd_thread *thi);
                                            ^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1444: FILE: drivers/block/drbd/drbd_int.h:1390:
+extern int drbd_worker(struct drbd_thread *thi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1445: FILE: drivers/block/drbd/drbd_int.h:1391:
+extern void drbd_alter_sa(struct drbd_conf *mdev, int na);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1446: FILE: drivers/block/drbd/drbd_int.h:1392:
+extern void drbd_start_resync(struct drbd_conf *mdev, enum drbd_conns side);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1447: FILE: drivers/block/drbd/drbd_int.h:1393:
+extern void resume_next_sg(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1448: FILE: drivers/block/drbd/drbd_int.h:1394:
+extern void suspend_other_sg(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1449: FILE: drivers/block/drbd/drbd_int.h:1395:
+extern int drbd_resync_finished(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1451: FILE: drivers/block/drbd/drbd_int.h:1397:
+extern int drbd_md_sync_page_io(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1452: FILE: drivers/block/drbd/drbd_int.h:1398:
+extern int drbd_md_sync_page_io(struct drbd_conf *mdev,
+		struct drbd_backing_dev *bdev, sector_t sector, int rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1453: FILE: drivers/block/drbd/drbd_int.h:1399:
+extern void drbd_ov_oos_found(struct drbd_conf*, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf*' should also have an identifier name
#1453: FILE: drivers/block/drbd/drbd_int.h:1399:
+extern void drbd_ov_oos_found(struct drbd_conf*, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#1453: FILE: drivers/block/drbd/drbd_int.h:1399:
+extern void drbd_ov_oos_found(struct drbd_conf*, sector_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1453: FILE: drivers/block/drbd/drbd_int.h:1399:
+extern void drbd_ov_oos_found(struct drbd_conf*, sector_t, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1459: FILE: drivers/block/drbd/drbd_int.h:1405:
+		dev_err(DEV, "Out of sync: start=%llu, size=%lu (sectors)\n",
+		     (unsigned long long)mdev->ov_last_oos_start,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1462: FILE: drivers/block/drbd/drbd_int.h:1408:
+	mdev->ov_last_oos_size=0;
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1465: FILE: drivers/block/drbd/drbd_int.h:1411:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1468: FILE: drivers/block/drbd/drbd_int.h:1414:
+extern int w_req_cancel_conflict(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1468: FILE: drivers/block/drbd/drbd_int.h:1414:
+extern int w_req_cancel_conflict(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1468: FILE: drivers/block/drbd/drbd_int.h:1414:
+extern int w_req_cancel_conflict(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1468: FILE: drivers/block/drbd/drbd_int.h:1414:
+extern int w_req_cancel_conflict(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1469: FILE: drivers/block/drbd/drbd_int.h:1415:
+extern int w_read_retry_remote(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1469: FILE: drivers/block/drbd/drbd_int.h:1415:
+extern int w_read_retry_remote(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1469: FILE: drivers/block/drbd/drbd_int.h:1415:
+extern int w_read_retry_remote(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1469: FILE: drivers/block/drbd/drbd_int.h:1415:
+extern int w_read_retry_remote(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1470: FILE: drivers/block/drbd/drbd_int.h:1416:
+extern int w_e_end_data_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1470: FILE: drivers/block/drbd/drbd_int.h:1416:
+extern int w_e_end_data_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1470: FILE: drivers/block/drbd/drbd_int.h:1416:
+extern int w_e_end_data_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1470: FILE: drivers/block/drbd/drbd_int.h:1416:
+extern int w_e_end_data_req(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1471: FILE: drivers/block/drbd/drbd_int.h:1417:
+extern int w_e_end_rsdata_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1471: FILE: drivers/block/drbd/drbd_int.h:1417:
+extern int w_e_end_rsdata_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1471: FILE: drivers/block/drbd/drbd_int.h:1417:
+extern int w_e_end_rsdata_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1471: FILE: drivers/block/drbd/drbd_int.h:1417:
+extern int w_e_end_rsdata_req(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1472: FILE: drivers/block/drbd/drbd_int.h:1418:
+extern int w_e_end_csum_rs_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1472: FILE: drivers/block/drbd/drbd_int.h:1418:
+extern int w_e_end_csum_rs_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1472: FILE: drivers/block/drbd/drbd_int.h:1418:
+extern int w_e_end_csum_rs_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1472: FILE: drivers/block/drbd/drbd_int.h:1418:
+extern int w_e_end_csum_rs_req(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1473: FILE: drivers/block/drbd/drbd_int.h:1419:
+extern int w_e_end_ov_reply(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1473: FILE: drivers/block/drbd/drbd_int.h:1419:
+extern int w_e_end_ov_reply(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1473: FILE: drivers/block/drbd/drbd_int.h:1419:
+extern int w_e_end_ov_reply(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1473: FILE: drivers/block/drbd/drbd_int.h:1419:
+extern int w_e_end_ov_reply(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1474: FILE: drivers/block/drbd/drbd_int.h:1420:
+extern int w_e_end_ov_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1474: FILE: drivers/block/drbd/drbd_int.h:1420:
+extern int w_e_end_ov_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1474: FILE: drivers/block/drbd/drbd_int.h:1420:
+extern int w_e_end_ov_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1474: FILE: drivers/block/drbd/drbd_int.h:1420:
+extern int w_e_end_ov_req(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1475: FILE: drivers/block/drbd/drbd_int.h:1421:
+extern int w_ov_finished(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1475: FILE: drivers/block/drbd/drbd_int.h:1421:
+extern int w_ov_finished(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1475: FILE: drivers/block/drbd/drbd_int.h:1421:
+extern int w_ov_finished(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1475: FILE: drivers/block/drbd/drbd_int.h:1421:
+extern int w_ov_finished(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1476: FILE: drivers/block/drbd/drbd_int.h:1422:
+extern int w_resync_inactive(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1476: FILE: drivers/block/drbd/drbd_int.h:1422:
+extern int w_resync_inactive(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1476: FILE: drivers/block/drbd/drbd_int.h:1422:
+extern int w_resync_inactive(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1476: FILE: drivers/block/drbd/drbd_int.h:1422:
+extern int w_resync_inactive(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1477: FILE: drivers/block/drbd/drbd_int.h:1423:
+extern int w_resume_next_sg(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1477: FILE: drivers/block/drbd/drbd_int.h:1423:
+extern int w_resume_next_sg(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1477: FILE: drivers/block/drbd/drbd_int.h:1423:
+extern int w_resume_next_sg(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1477: FILE: drivers/block/drbd/drbd_int.h:1423:
+extern int w_resume_next_sg(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1478: FILE: drivers/block/drbd/drbd_int.h:1424:
+extern int w_io_error(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1478: FILE: drivers/block/drbd/drbd_int.h:1424:
+extern int w_io_error(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1478: FILE: drivers/block/drbd/drbd_int.h:1424:
+extern int w_io_error(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1478: FILE: drivers/block/drbd/drbd_int.h:1424:
+extern int w_io_error(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1479: FILE: drivers/block/drbd/drbd_int.h:1425:
+extern int w_send_write_hint(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1479: FILE: drivers/block/drbd/drbd_int.h:1425:
+extern int w_send_write_hint(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1479: FILE: drivers/block/drbd/drbd_int.h:1425:
+extern int w_send_write_hint(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1479: FILE: drivers/block/drbd/drbd_int.h:1425:
+extern int w_send_write_hint(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1480: FILE: drivers/block/drbd/drbd_int.h:1426:
+extern int w_make_resync_request(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1480: FILE: drivers/block/drbd/drbd_int.h:1426:
+extern int w_make_resync_request(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1480: FILE: drivers/block/drbd/drbd_int.h:1426:
+extern int w_make_resync_request(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1480: FILE: drivers/block/drbd/drbd_int.h:1426:
+extern int w_make_resync_request(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1481: FILE: drivers/block/drbd/drbd_int.h:1427:
+extern int w_send_dblock(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1481: FILE: drivers/block/drbd/drbd_int.h:1427:
+extern int w_send_dblock(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1481: FILE: drivers/block/drbd/drbd_int.h:1427:
+extern int w_send_dblock(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1481: FILE: drivers/block/drbd/drbd_int.h:1427:
+extern int w_send_dblock(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1482: FILE: drivers/block/drbd/drbd_int.h:1428:
+extern int w_send_barrier(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1482: FILE: drivers/block/drbd/drbd_int.h:1428:
+extern int w_send_barrier(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1482: FILE: drivers/block/drbd/drbd_int.h:1428:
+extern int w_send_barrier(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1482: FILE: drivers/block/drbd/drbd_int.h:1428:
+extern int w_send_barrier(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1483: FILE: drivers/block/drbd/drbd_int.h:1429:
+extern int w_send_read_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1483: FILE: drivers/block/drbd/drbd_int.h:1429:
+extern int w_send_read_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1483: FILE: drivers/block/drbd/drbd_int.h:1429:
+extern int w_send_read_req(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1483: FILE: drivers/block/drbd/drbd_int.h:1429:
+extern int w_send_read_req(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1484: FILE: drivers/block/drbd/drbd_int.h:1430:
+extern int w_prev_work_done(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1484: FILE: drivers/block/drbd/drbd_int.h:1430:
+extern int w_prev_work_done(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1484: FILE: drivers/block/drbd/drbd_int.h:1430:
+extern int w_prev_work_done(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1484: FILE: drivers/block/drbd/drbd_int.h:1430:
+extern int w_prev_work_done(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1485: FILE: drivers/block/drbd/drbd_int.h:1431:
+extern int w_e_reissue(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#1485: FILE: drivers/block/drbd/drbd_int.h:1431:
+extern int w_e_reissue(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#1485: FILE: drivers/block/drbd/drbd_int.h:1431:
+extern int w_e_reissue(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1485: FILE: drivers/block/drbd/drbd_int.h:1431:
+extern int w_e_reissue(struct drbd_conf *, struct drbd_work *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1487: FILE: drivers/block/drbd/drbd_int.h:1433:
+extern void resync_timer_fn(unsigned long data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1490: FILE: drivers/block/drbd/drbd_int.h:1436:
+extern int drbd_release_ee(struct drbd_conf *mdev, struct list_head *list);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1491: FILE: drivers/block/drbd/drbd_int.h:1437:
+extern struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: drivers/block/drbd/drbd_int.h:1438:
+extern struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev,
+					    u64 id,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1496: FILE: drivers/block/drbd/drbd_int.h:1442:
+extern void drbd_free_ee(struct drbd_conf *mdev, struct drbd_epoch_entry *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1497: FILE: drivers/block/drbd/drbd_int.h:1443:
+extern void drbd_wait_ee_list_empty(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1498: FILE: drivers/block/drbd/drbd_int.h:1444:
+extern void drbd_wait_ee_list_empty(struct drbd_conf *mdev,
+		struct list_head *head);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1499: FILE: drivers/block/drbd/drbd_int.h:1445:
+extern void _drbd_wait_ee_list_empty(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1500: FILE: drivers/block/drbd/drbd_int.h:1446:
+extern void _drbd_wait_ee_list_empty(struct drbd_conf *mdev,
+		struct list_head *head);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1501: FILE: drivers/block/drbd/drbd_int.h:1447:
+extern void drbd_set_recv_tcq(struct drbd_conf *mdev, int tcq_enabled);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1502: FILE: drivers/block/drbd/drbd_int.h:1448:
+extern void _drbd_clear_done_ee(struct drbd_conf *mdev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1505: FILE: drivers/block/drbd/drbd_int.h:1451:
+ * mess with get_fs/set_fs, we know we are KERNEL_DS always. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1507: FILE: drivers/block/drbd/drbd_int.h:1453:
+static inline int drbd_setsockopt(struct socket *sock, int level, int optname,
+			char __user *optval, int optlen)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1510: FILE: drivers/block/drbd/drbd_int.h:1456:
+	int err;
+	if (level == SOL_SOCKET)

CHECK:SPACING: No space is necessary after a cast
#1521: FILE: drivers/block/drbd/drbd_int.h:1467:
+	(void) drbd_setsockopt(sock, SOL_TCP, TCP_CORK,

CHECK:SPACING: No space is necessary after a cast
#1528: FILE: drivers/block/drbd/drbd_int.h:1474:
+	(void) drbd_setsockopt(sock, SOL_TCP, TCP_CORK,

CHECK:SPACING: No space is necessary after a cast
#1535: FILE: drivers/block/drbd/drbd_int.h:1481:
+	(void) drbd_setsockopt(sock, SOL_TCP, TCP_NODELAY,

CHECK:SPACING: No space is necessary after a cast
#1542: FILE: drivers/block/drbd/drbd_int.h:1488:
+	(void) drbd_setsockopt(sock, SOL_TCP, TCP_QUICKACK,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1550: FILE: drivers/block/drbd/drbd_int.h:1496:
+extern struct file_operations drbd_proc_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1551: FILE: drivers/block/drbd/drbd_int.h:1497:
+extern const char *conns_to_name(enum drbd_conns s);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1552: FILE: drivers/block/drbd/drbd_int.h:1498:
+extern const char *roles_to_name(enum drbd_role s);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1555: FILE: drivers/block/drbd/drbd_int.h:1501:
+extern void drbd_al_begin_io(struct drbd_conf *mdev, sector_t sector);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1556: FILE: drivers/block/drbd/drbd_int.h:1502:
+extern void drbd_al_complete_io(struct drbd_conf *mdev, sector_t sector);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1557: FILE: drivers/block/drbd/drbd_int.h:1503:
+extern void drbd_rs_complete_io(struct drbd_conf *mdev, sector_t sector);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1558: FILE: drivers/block/drbd/drbd_int.h:1504:
+extern int drbd_rs_begin_io(struct drbd_conf *mdev, sector_t sector);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1559: FILE: drivers/block/drbd/drbd_int.h:1505:
+extern int drbd_try_rs_begin_io(struct drbd_conf *mdev, sector_t sector);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1560: FILE: drivers/block/drbd/drbd_int.h:1506:
+extern void drbd_rs_cancel_all(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1561: FILE: drivers/block/drbd/drbd_int.h:1507:
+extern int drbd_rs_del_all(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1562: FILE: drivers/block/drbd/drbd_int.h:1508:
+extern void drbd_rs_failed_io(struct drbd_conf *mdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1563: FILE: drivers/block/drbd/drbd_int.h:1509:
+extern void drbd_rs_failed_io(struct drbd_conf *mdev,
+		sector_t sector, int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1564: FILE: drivers/block/drbd/drbd_int.h:1510:
+extern int drbd_al_read_log(struct drbd_conf *mdev, struct drbd_backing_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_backing_dev *' should also have an identifier name
#1564: FILE: drivers/block/drbd/drbd_int.h:1510:
+extern int drbd_al_read_log(struct drbd_conf *mdev, struct drbd_backing_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1565: FILE: drivers/block/drbd/drbd_int.h:1511:
+extern void __drbd_set_in_sync(struct drbd_conf *mdev, sector_t sector,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1566: FILE: drivers/block/drbd/drbd_int.h:1512:
+extern void __drbd_set_in_sync(struct drbd_conf *mdev, sector_t sector,
+		int size, const char *file, const unsigned int line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1569: FILE: drivers/block/drbd/drbd_int.h:1515:
+extern void __drbd_set_out_of_sync(struct drbd_conf *mdev, sector_t sector,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: drivers/block/drbd/drbd_int.h:1516:
+extern void __drbd_set_out_of_sync(struct drbd_conf *mdev, sector_t sector,
+		int size, const char *file, const unsigned int line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1573: FILE: drivers/block/drbd/drbd_int.h:1519:
+extern void drbd_al_apply_to_bm(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1574: FILE: drivers/block/drbd/drbd_int.h:1520:
+extern void drbd_al_to_on_disk_bm(struct drbd_conf *mdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1575: FILE: drivers/block/drbd/drbd_int.h:1521:
+extern void drbd_al_shrink(struct drbd_conf *mdev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1577: FILE: drivers/block/drbd/drbd_int.h:1523:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union drbd_state' should also have an identifier name
#1582: FILE: drivers/block/drbd/drbd_int.h:1528:
+void drbd_bcast_state(struct drbd_conf *mdev, union drbd_state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1585: FILE: drivers/block/drbd/drbd_int.h:1531:
+void drbd_bcast_ee(struct drbd_conf *mdev,
+		const char *reason, const int dgs,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1586: FILE: drivers/block/drbd/drbd_int.h:1532:
+		const char* seen_hash, const char* calc_hash,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1586: FILE: drivers/block/drbd/drbd_int.h:1532:
+		const char* seen_hash, const char* calc_hash,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1587: FILE: drivers/block/drbd/drbd_int.h:1533:
+		const struct drbd_epoch_entry* e);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1589: FILE: drivers/block/drbd/drbd_int.h:1535:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1617: FILE: drivers/block/drbd/drbd_int.h:1563:
+#define NS(T, S) \
+	({ union drbd_state mask; mask.i = 0; mask.T = T##_MASK; mask; }), \
+	({ union drbd_state val; val.i = 0; val.T = (S); val; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'T' - possible side-effects?
#1617: FILE: drivers/block/drbd/drbd_int.h:1563:
+#define NS(T, S) \
+	({ union drbd_state mask; mask.i = 0; mask.T = T##_MASK; mask; }), \
+	({ union drbd_state val; val.i = 0; val.T = (S); val; })

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1620: FILE: drivers/block/drbd/drbd_int.h:1566:
+#define NS2(T1, S1, T2, S2) \
+	({ union drbd_state mask; mask.i = 0; mask.T1 = T1##_MASK; \
+	  mask.T2 = T2##_MASK; mask; }), \
+	({ union drbd_state val; val.i = 0; val.T1 = (S1); \
+	  val.T2 = (S2); val; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'T1' - possible side-effects?
#1620: FILE: drivers/block/drbd/drbd_int.h:1566:
+#define NS2(T1, S1, T2, S2) \
+	({ union drbd_state mask; mask.i = 0; mask.T1 = T1##_MASK; \
+	  mask.T2 = T2##_MASK; mask; }), \
+	({ union drbd_state val; val.i = 0; val.T1 = (S1); \
+	  val.T2 = (S2); val; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'T2' - possible side-effects?
#1620: FILE: drivers/block/drbd/drbd_int.h:1566:
+#define NS2(T1, S1, T2, S2) \
+	({ union drbd_state mask; mask.i = 0; mask.T1 = T1##_MASK; \
+	  mask.T2 = T2##_MASK; mask; }), \
+	({ union drbd_state val; val.i = 0; val.T1 = (S1); \
+	  val.T2 = (S2); val; })

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1625: FILE: drivers/block/drbd/drbd_int.h:1571:
+#define NS3(T1, S1, T2, S2, T3, S3) \
+	({ union drbd_state mask; mask.i = 0; mask.T1 = T1##_MASK; \
+	  mask.T2 = T2##_MASK; mask.T3 = T3##_MASK; mask; }), \
+	({ union drbd_state val;  val.i = 0; val.T1 = (S1); \
+	  val.T2 = (S2); val.T3 = (S3); val; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'T1' - possible side-effects?
#1625: FILE: drivers/block/drbd/drbd_int.h:1571:
+#define NS3(T1, S1, T2, S2, T3, S3) \
+	({ union drbd_state mask; mask.i = 0; mask.T1 = T1##_MASK; \
+	  mask.T2 = T2##_MASK; mask.T3 = T3##_MASK; mask; }), \
+	({ union drbd_state val;  val.i = 0; val.T1 = (S1); \
+	  val.T2 = (S2); val.T3 = (S3); val; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'T2' - possible side-effects?
#1625: FILE: drivers/block/drbd/drbd_int.h:1571:
+#define NS3(T1, S1, T2, S2, T3, S3) \
+	({ union drbd_state mask; mask.i = 0; mask.T1 = T1##_MASK; \
+	  mask.T2 = T2##_MASK; mask.T3 = T3##_MASK; mask; }), \
+	({ union drbd_state val;  val.i = 0; val.T1 = (S1); \
+	  val.T2 = (S2); val.T3 = (S3); val; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'T3' - possible side-effects?
#1625: FILE: drivers/block/drbd/drbd_int.h:1571:
+#define NS3(T1, S1, T2, S2, T3, S3) \
+	({ union drbd_state mask; mask.i = 0; mask.T1 = T1##_MASK; \
+	  mask.T2 = T2##_MASK; mask.T3 = T3##_MASK; mask; }), \
+	({ union drbd_state val;  val.i = 0; val.T1 = (S1); \
+	  val.T2 = (S2); val.T3 = (S3); val; })

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1631: FILE: drivers/block/drbd/drbd_int.h:1577:
+#define _NS(D, T, S) \
+	D, ({ union drbd_state __ns; __ns.i = D->state.i; __ns.T = (S); __ns; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'D' - possible side-effects?
#1631: FILE: drivers/block/drbd/drbd_int.h:1577:
+#define _NS(D, T, S) \
+	D, ({ union drbd_state __ns; __ns.i = D->state.i; __ns.T = (S); __ns; })

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1633: FILE: drivers/block/drbd/drbd_int.h:1579:
+#define _NS2(D, T1, S1, T2, S2) \
+	D, ({ union drbd_state __ns; __ns.i = D->state.i; __ns.T1 = (S1); \
+	__ns.T2 = (S2); __ns; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'D' - possible side-effects?
#1633: FILE: drivers/block/drbd/drbd_int.h:1579:
+#define _NS2(D, T1, S1, T2, S2) \
+	D, ({ union drbd_state __ns; __ns.i = D->state.i; __ns.T1 = (S1); \
+	__ns.T2 = (S2); __ns; })

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1636: FILE: drivers/block/drbd/drbd_int.h:1582:
+#define _NS3(D, T1, S1, T2, S2, T3, S3) \
+	D, ({ union drbd_state __ns; __ns.i = D->state.i; __ns.T1 = (S1); \
+	__ns.T2 = (S2); __ns.T3 = (S3); __ns; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'D' - possible side-effects?
#1636: FILE: drivers/block/drbd/drbd_int.h:1582:
+#define _NS3(D, T1, S1, T2, S2, T3, S3) \
+	D, ({ union drbd_state __ns; __ns.i = D->state.i; __ns.T1 = (S1); \
+	__ns.T2 = (S2); __ns.T3 = (S3); __ns; })

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1657: FILE: drivers/block/drbd/drbd_int.h:1603:
+static inline int _drbd_set_state(struct drbd_conf *mdev,
+				   union drbd_state ns, enum chg_state_flags flags,

WARNING:TYPO_SPELLING: 'Reqest' may be misspelled - perhaps 'Request'?
#1670: FILE: drivers/block/drbd/drbd_int.h:1616:
+ * drbd_request_state() - Reqest a state change
                           ^^^^^^

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#1691: FILE: drivers/block/drbd/drbd_int.h:1637:
+			if (printk_ratelimit())

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1695: FILE: drivers/block/drbd/drbd_int.h:1641:
+		/* NOTE fall through to detach case if forcedetach set */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1707: FILE: drivers/block/drbd/drbd_int.h:1653:
+ * drbd_chk_io_error: Handle the on_io_error setting, should be called from all io completion handlers

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1715: FILE: drivers/block/drbd/drbd_int.h:1661:
+static inline void drbd_chk_io_error(struct drbd_conf *mdev,
+	int error, int forcedetach)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1719: FILE: drivers/block/drbd/drbd_int.h:1665:
+		unsigned long flags;
+		spin_lock_irqsave(&mdev->req_lock, flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1725: FILE: drivers/block/drbd/drbd_int.h:1671:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1777: FILE: drivers/block/drbd/drbd_int.h:1723:
+	sector_t s;
+	switch (bdev->dc.meta_dev_idx) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1787: FILE: drivers/block/drbd/drbd_int.h:1733:
+		s = min_t(sector_t, DRBD_MAX_SECTORS_FLEX,
+				drbd_get_capacity(bdev->backing_bdev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1790: FILE: drivers/block/drbd/drbd_int.h:1736:
+		s = min_t(sector_t, s,
+			BM_EXT_TO_SECT(bdev->md.md_size_sect

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1795: FILE: drivers/block/drbd/drbd_int.h:1741:
+		s = min_t(sector_t, DRBD_MAX_SECTORS,
+				drbd_get_capacity(bdev->backing_bdev));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1815: FILE: drivers/block/drbd/drbd_int.h:1761:
+		 * position: last 4k aligned block of 4k size */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1841: FILE: drivers/block/drbd/drbd_int.h:1787:
+	unsigned long flags;
+	spin_lock_irqsave(&q->q_lock, flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1844: FILE: drivers/block/drbd/drbd_int.h:1790:
+	up(&q->s); /* within the spinlock,
+		      see comment near end of drbd_worker() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1844: FILE: drivers/block/drbd/drbd_int.h:1790:
+		      see comment near end of drbd_worker() */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1852: FILE: drivers/block/drbd/drbd_int.h:1798:
+	unsigned long flags;
+	spin_lock_irqsave(&q->q_lock, flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1855: FILE: drivers/block/drbd/drbd_int.h:1801:
+	up(&q->s); /* within the spinlock,
+		      see comment near end of drbd_worker() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1855: FILE: drivers/block/drbd/drbd_int.h:1801:
+		      see comment near end of drbd_worker() */

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#1862: FILE: drivers/block/drbd/drbd_int.h:1808:
+		force_sig(DRBD_SIG, mdev->asender.task);
 		                          ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1872: FILE: drivers/block/drbd/drbd_int.h:1818:
+static inline int drbd_send_short_cmd(struct drbd_conf *mdev,
+	enum drbd_packets cmd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1875: FILE: drivers/block/drbd/drbd_int.h:1821:
+	struct p_header h;
+	return drbd_send_cmd(mdev, USE_DATA_SOCKET, cmd, &h, sizeof(h));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1881: FILE: drivers/block/drbd/drbd_int.h:1827:
+	struct p_header h;
+	return drbd_send_cmd(mdev, USE_META_SOCKET, P_PING, &h, sizeof(h));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1887: FILE: drivers/block/drbd/drbd_int.h:1833:
+	struct p_header h;
+	return drbd_send_cmd(mdev, USE_META_SOCKET, P_PING_ACK, &h, sizeof(h));

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1890: FILE: drivers/block/drbd/drbd_int.h:1836:
+static inline void drbd_thread_stop(struct drbd_thread *thi)
                                                         ^^^

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1892: FILE: drivers/block/drbd/drbd_int.h:1838:
+	_drbd_thread_stop(thi, FALSE, TRUE);
 	                  ^^^

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1895: FILE: drivers/block/drbd/drbd_int.h:1841:
+static inline void drbd_thread_stop_nowait(struct drbd_thread *thi)
                                                                ^^^

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1897: FILE: drivers/block/drbd/drbd_int.h:1843:
+	_drbd_thread_stop(thi, FALSE, FALSE);
 	                  ^^^

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1900: FILE: drivers/block/drbd/drbd_int.h:1846:
+static inline void drbd_thread_restart_nowait(struct drbd_thread *thi)
                                                                   ^^^

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#1902: FILE: drivers/block/drbd/drbd_int.h:1848:
+	_drbd_thread_stop(thi, TRUE, FALSE);
 	                  ^^^

WARNING:REPEATED_WORD: Possible repeated word: 'packets'
#1905: FILE: drivers/block/drbd/drbd_int.h:1851:
+/* counts how many answer packets packets we expect from our peer,

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1932: FILE: drivers/block/drbd/drbd_int.h:1878:
+#define ERR_IF_CNT_IS_NEGATIVE(which)				\
+	if (atomic_read(&mdev->which) < 0)			\
+		dev_err(DEV, "in %s:%d: " #which " = %d < 0 !\n",	\
+		    __func__ , __LINE__ ,			\
+		    atomic_read(&mdev->which))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'which' - possible side-effects?
#1932: FILE: drivers/block/drbd/drbd_int.h:1878:
+#define ERR_IF_CNT_IS_NEGATIVE(which)				\
+	if (atomic_read(&mdev->which) < 0)			\
+		dev_err(DEV, "in %s:%d: " #which " = %d < 0 !\n",	\
+		    __func__ , __LINE__ ,			\
+		    atomic_read(&mdev->which))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'which' may be better as '(which)' to avoid precedence issues
#1932: FILE: drivers/block/drbd/drbd_int.h:1878:
+#define ERR_IF_CNT_IS_NEGATIVE(which)				\
+	if (atomic_read(&mdev->which) < 0)			\
+		dev_err(DEV, "in %s:%d: " #which " = %d < 0 !\n",	\
+		    __func__ , __LINE__ ,			\
+		    atomic_read(&mdev->which))

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1935: FILE: drivers/block/drbd/drbd_int.h:1881:
+		    __func__ , __LINE__ ,			\
 		             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1935: FILE: drivers/block/drbd/drbd_int.h:1881:
+		    __func__ , __LINE__ ,			\
 		                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mdev' - possible side-effects?
#1938: FILE: drivers/block/drbd/drbd_int.h:1884:
+#define dec_ap_pending(mdev)	do {				\
+	typecheck(struct drbd_conf *, mdev);			\
+	if (atomic_dec_and_test(&mdev->ap_pending_cnt))		\
+		wake_up(&mdev->misc_wait);			\
+	ERR_IF_CNT_IS_NEGATIVE(ap_pending_cnt); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mdev' may be better as '(mdev)' to avoid precedence issues
#1938: FILE: drivers/block/drbd/drbd_int.h:1884:
+#define dec_ap_pending(mdev)	do {				\
+	typecheck(struct drbd_conf *, mdev);			\
+	if (atomic_dec_and_test(&mdev->ap_pending_cnt))		\
+		wake_up(&mdev->misc_wait);			\
+	ERR_IF_CNT_IS_NEGATIVE(ap_pending_cnt); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1942: FILE: drivers/block/drbd/drbd_int.h:1888:
+	ERR_IF_CNT_IS_NEGATIVE(ap_pending_cnt); } while (0)

WARNING:TYPO_SPELLING: 'whith' may be misspelled - perhaps 'with'?
#1947: FILE: drivers/block/drbd/drbd_int.h:1893:
+ * C_SYNC_SOURCE sends P_RS_DATA_REPLY   (and expects P_WRITE_ACK whith ID_SYNCER)
                                                                   ^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mdev' may be better as '(mdev)' to avoid precedence issues
#1955: FILE: drivers/block/drbd/drbd_int.h:1901:
+#define dec_rs_pending(mdev)	do {				\
+	typecheck(struct drbd_conf *, mdev);			\
+	atomic_dec(&mdev->rs_pending_cnt);			\
+	ERR_IF_CNT_IS_NEGATIVE(rs_pending_cnt); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1958: FILE: drivers/block/drbd/drbd_int.h:1904:
+	ERR_IF_CNT_IS_NEGATIVE(rs_pending_cnt); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mdev' may be better as '(mdev)' to avoid precedence issues
#1974: FILE: drivers/block/drbd/drbd_int.h:1920:
+#define dec_unacked(mdev)	do {				\
+	typecheck(struct drbd_conf *, mdev);			\
+	atomic_dec(&mdev->unacked_cnt);				\
+	ERR_IF_CNT_IS_NEGATIVE(unacked_cnt); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1977: FILE: drivers/block/drbd/drbd_int.h:1923:
+	ERR_IF_CNT_IS_NEGATIVE(unacked_cnt); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mdev' may be better as '(mdev)' to avoid precedence issues
#1979: FILE: drivers/block/drbd/drbd_int.h:1925:
+#define sub_unacked(mdev, n)	do {				\
+	typecheck(struct drbd_conf *, mdev);			\
+	atomic_sub(n, &mdev->unacked_cnt);			\
+	ERR_IF_CNT_IS_NEGATIVE(unacked_cnt); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1982: FILE: drivers/block/drbd/drbd_int.h:1928:
+	ERR_IF_CNT_IS_NEGATIVE(unacked_cnt); } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1984: FILE: drivers/block/drbd/drbd_int.h:1930:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2014: FILE: drivers/block/drbd/drbd_int.h:1960:
+#define get_ldev(M) __cond_lock(local, _get_ldev_if_state(M,D_INCONSISTENT))
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2015: FILE: drivers/block/drbd/drbd_int.h:1961:
+#define get_ldev_if_state(M,MINS) __cond_lock(local, _get_ldev_if_state(M,MINS))
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2015: FILE: drivers/block/drbd/drbd_int.h:1961:
+#define get_ldev_if_state(M,MINS) __cond_lock(local, _get_ldev_if_state(M,MINS))
                                                                          ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2037: FILE: drivers/block/drbd/drbd_int.h:1983:
+extern int _get_ldev_if_state(struct drbd_conf *mdev, enum drbd_disk_state mins);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2042: FILE: drivers/block/drbd/drbd_int.h:1988:
+static inline void drbd_get_syncer_progress(struct drbd_conf *mdev,
+		unsigned long *bits_left, unsigned int *per_mil_done)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2052: FILE: drivers/block/drbd/drbd_int.h:1998:
+	 * for the percentage, we don't care. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2056: FILE: drivers/block/drbd/drbd_int.h:2002:
+	 * +1 to prevent division by zero */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2065: FILE: drivers/block/drbd/drbd_int.h:2011:
+		dev_warn(DEV, "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
+				conns_to_name(mdev->state.conn),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2071: FILE: drivers/block/drbd/drbd_int.h:2017:
+				(*bits_left >> 10)*1000UL
 				                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2077: FILE: drivers/block/drbd/drbd_int.h:2023:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2080: FILE: drivers/block/drbd/drbd_int.h:2026:
+ * maybe re-implement using semaphores? */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2084: FILE: drivers/block/drbd/drbd_int.h:2030:
+	int mxb = 1000000; /* arbitrary limit on open requests */
+	if (get_net_conf(mdev)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2093: FILE: drivers/block/drbd/drbd_int.h:2039:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2095: FILE: drivers/block/drbd/drbd_int.h:2041:
+	 * for any newly introduced state we may have forgotten to add here */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2113: FILE: drivers/block/drbd/drbd_int.h:2059:
+	 * like handshake or teardown */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2165: FILE: drivers/block/drbd/drbd_int.h:2111:
+	 * to start during "stable" states. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2172: FILE: drivers/block/drbd/drbd_int.h:2118:
+	 * and we are within the spinlock anyways, we have this workaround.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2182: FILE: drivers/block/drbd/drbd_int.h:2128:
+ * and not sure when it has 3 or 4 arguments */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2186: FILE: drivers/block/drbd/drbd_int.h:2132:
+	 * os.conn != C_WF_BITMAP_S && ns.conn == C_WF_BITMAP_S */

WARNING:TYPO_SPELLING: 'exeed' may be misspelled - perhaps 'exceed'?
#2192: FILE: drivers/block/drbd/drbd_int.h:2138:
+	 *    handshake as long as we would exeed the max_buffer limit.
 	                                    ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2195: FILE: drivers/block/drbd/drbd_int.h:2141:
+	 * we need to atomic_inc within the spinlock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2217: FILE: drivers/block/drbd/drbd_int.h:2163:
+	 * e.g. (ap_bio == mxb/2 || ap_bio == 0) ? */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2240: FILE: drivers/block/drbd/drbd_int.h:2186:
+}
+#define seq_lt(a, b) (seq_cmp((a), (b)) < 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#2245: FILE: drivers/block/drbd/drbd_int.h:2191:
+#define seq_max(a, b) ((u32)(seq_gt((a), (b)) ? (a) : (b)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#2245: FILE: drivers/block/drbd/drbd_int.h:2191:
+#define seq_max(a, b) ((u32)(seq_gt((a), (b)) ? (a) : (b)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2250: FILE: drivers/block/drbd/drbd_int.h:2196:
+	unsigned int m;
+	spin_lock(&mdev->peer_seq_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2261: FILE: drivers/block/drbd/drbd_int.h:2207:
+	struct sock *sk = mdev->data.socket->sk;
+	if (sk->sk_wmem_queued > sk->sk_sndbuf * 4 / 5)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2268: FILE: drivers/block/drbd/drbd_int.h:2214:
+	 * of distributed TCQ stuff */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2310: FILE: drivers/block/drbd/drbd_wrappers.h:1:
+#ifndef _DRBD_WRAPPERS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2349: FILE: drivers/block/drbd/drbd_wrappers.h:40:
+extern void drbd_md_io_complete(struct bio *bio, int error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2350: FILE: drivers/block/drbd/drbd_wrappers.h:41:
+extern void drbd_endio_read_sec(struct bio *bio, int error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2351: FILE: drivers/block/drbd/drbd_wrappers.h:42:
+extern void drbd_endio_write_sec(struct bio *bio, int error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2352: FILE: drivers/block/drbd/drbd_wrappers.h:43:
+extern void drbd_endio_pri(struct bio *bio, int error);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2362: FILE: drivers/block/drbd/drbd_wrappers.h:53:
+		printk(KERN_ERR "drbd%d: drbd_generic_make_request: "

WARNING:SPLIT_STRING: quoted string split across lines
#2363: FILE: drivers/block/drbd/drbd_wrappers.h:54:
+		printk(KERN_ERR "drbd%d: drbd_generic_make_request: "
+				"bio->bi_bdev == NULL\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#2379: FILE: drivers/block/drbd/drbd_wrappers.h:70:
+	struct request_queue *q;
+	q = bdev_get_queue(mdev->this_bdev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2384: FILE: drivers/block/drbd/drbd_wrappers.h:75:
+ * implicitly checked in blk_plug_device */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2396: FILE: drivers/block/drbd/drbd_wrappers.h:87:
+        return (crypto_tfm_alg_type(tfm) & CRYPTO_ALG_TYPE_HASH_MASK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2396: FILE: drivers/block/drbd/drbd_wrappers.h:87:
+        return (crypto_tfm_alg_type(tfm) & CRYPTO_ALG_TYPE_HASH_MASK)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2397: FILE: drivers/block/drbd/drbd_wrappers.h:88:
+                == CRYPTO_ALG_TYPE_HASH;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2397: FILE: drivers/block/drbd/drbd_wrappers.h:88:
+                == CRYPTO_ALG_TYPE_HASH;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2402: FILE: drivers/block/drbd/drbd_wrappers.h:93:
+# define __cond_lock(x,c) (c)
                       ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 69 errors, 234 warnings, 297 checks, 2345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
