CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address >= (unsigned long)_stext'
#158: FILE: include/asm-x86_64/kprobes.h:95:
+	if (kernel_text_is_ro && ((address >= (unsigned long)_stext)
+					&& (address < (unsigned long) _etext)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < (unsigned long) _etext'
#158: FILE: include/asm-x86_64/kprobes.h:95:
+	if (kernel_text_is_ro && ((address >= (unsigned long)_stext)
+					&& (address < (unsigned long) _etext)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#159: FILE: include/asm-x86_64/kprobes.h:96:
+	if (kernel_text_is_ro && ((address >= (unsigned long)_stext)
+					&& (address < (unsigned long) _etext)))

CHECK:SPACING: No space is necessary after a cast
#159: FILE: include/asm-x86_64/kprobes.h:96:
+					&& (address < (unsigned long) _etext)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BAD_SIGN_OFF: Duplicate signature
#176: 
Signed-off-by: Prasanna S P<prasanna@in.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Duplicate signature
#177: 
Acked-by: Jim Keniston <jkenisto@us.ibm.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#178: 
Cc: Andi Kleen <ak@suse.de>

WARNING:BAD_SIGN_OFF: Duplicate signature
#179: 
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

CHECK:SPACING: No space is necessary after a cast
#195: FILE: arch/i386/kernel/kprobes.c:172:
+	unsigned long addr = (unsigned long) p->addr;

CHECK:SPACING: No space is necessary after a cast
#216: FILE: arch/i386/kernel/kprobes.c:193:
+	unsigned long addr = (unsigned long) p->addr;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#272: FILE: include/asm-i386/kprobes.h:98:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address >= PFN_ALIGN(_text)'
#273: FILE: include/asm-i386/kprobes.h:99:
+	if (kernel_text_is_ro && ((address >= PFN_ALIGN(_text))
+				&& (address < PFN_ALIGN(_etext))))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < PFN_ALIGN(_etext)'
#273: FILE: include/asm-i386/kprobes.h:99:
+	if (kernel_text_is_ro && ((address >= PFN_ALIGN(_text))
+				&& (address < PFN_ALIGN(_etext))))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#274: FILE: include/asm-i386/kprobes.h:100:
+	if (kernel_text_is_ro && ((address >= PFN_ALIGN(_text))
+				&& (address < PFN_ALIGN(_etext))))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 10 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416489.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
