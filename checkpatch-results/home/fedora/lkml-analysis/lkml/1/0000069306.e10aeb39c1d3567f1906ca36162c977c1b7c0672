CHECK:CAMELCASE: Avoid CamelCase: <Outbound>
#47: FILE: drivers/staging/hv/ChannelMgmt.h:249:
+	struct hv_ring_buffer_info Outbound;	/* send to parent */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Inbound>
#48: FILE: drivers/staging/hv/ChannelMgmt.h:250:
+	struct hv_ring_buffer_info Inbound;	/* receive from parent */

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBufferAvailBytes>
#61: FILE: drivers/staging/hv/RingBuffer.c:49:
+GetRingBufferAvailBytes(struct hv_ring_buffer_info *rbi, u32 *read, u32 *write)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#70: FILE: drivers/staging/hv/RingBuffer.c:71:
+GetNextWriteLocation(struct hv_ring_buffer_info* RingInfo)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <GetNextWriteLocation>
#70: FILE: drivers/staging/hv/RingBuffer.c:71:
+GetNextWriteLocation(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <RingInfo>
#70: FILE: drivers/staging/hv/RingBuffer.c:71:
+GetNextWriteLocation(struct hv_ring_buffer_info* RingInfo)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#79: FILE: drivers/staging/hv/RingBuffer.c:90:
+SetNextWriteLocation(struct hv_ring_buffer_info* RingInfo, u32 NextWriteLocation)

CHECK:CAMELCASE: Avoid CamelCase: <SetNextWriteLocation>
#79: FILE: drivers/staging/hv/RingBuffer.c:90:
+SetNextWriteLocation(struct hv_ring_buffer_info* RingInfo, u32 NextWriteLocation)

CHECK:CAMELCASE: Avoid CamelCase: <NextWriteLocation>
#79: FILE: drivers/staging/hv/RingBuffer.c:90:
+SetNextWriteLocation(struct hv_ring_buffer_info* RingInfo, u32 NextWriteLocation)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#88: FILE: drivers/staging/hv/RingBuffer.c:105:
+GetNextReadLocation(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <GetNextReadLocation>
#88: FILE: drivers/staging/hv/RingBuffer.c:105:
+GetNextReadLocation(struct hv_ring_buffer_info* RingInfo)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#97: FILE: drivers/staging/hv/RingBuffer.c:125:
+GetNextReadLocationWithOffset(struct hv_ring_buffer_info* RingInfo, u32 Offset)

CHECK:CAMELCASE: Avoid CamelCase: <GetNextReadLocationWithOffset>
#97: FILE: drivers/staging/hv/RingBuffer.c:125:
+GetNextReadLocationWithOffset(struct hv_ring_buffer_info* RingInfo, u32 Offset)

CHECK:CAMELCASE: Avoid CamelCase: <Offset>
#97: FILE: drivers/staging/hv/RingBuffer.c:125:
+GetNextReadLocationWithOffset(struct hv_ring_buffer_info* RingInfo, u32 Offset)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#106: FILE: drivers/staging/hv/RingBuffer.c:146:
+SetNextReadLocation(struct hv_ring_buffer_info* RingInfo, u32 NextReadLocation)

CHECK:CAMELCASE: Avoid CamelCase: <SetNextReadLocation>
#106: FILE: drivers/staging/hv/RingBuffer.c:146:
+SetNextReadLocation(struct hv_ring_buffer_info* RingInfo, u32 NextReadLocation)

CHECK:CAMELCASE: Avoid CamelCase: <NextReadLocation>
#106: FILE: drivers/staging/hv/RingBuffer.c:146:
+SetNextReadLocation(struct hv_ring_buffer_info* RingInfo, u32 NextReadLocation)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#115: FILE: drivers/staging/hv/RingBuffer.c:162:
+GetRingBuffer(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBuffer>
#115: FILE: drivers/staging/hv/RingBuffer.c:162:
+GetRingBuffer(struct hv_ring_buffer_info* RingInfo)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#124: FILE: drivers/staging/hv/RingBuffer.c:178:
+GetRingBufferSize(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBufferSize>
#124: FILE: drivers/staging/hv/RingBuffer.c:178:
+GetRingBufferSize(struct hv_ring_buffer_info* RingInfo)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#133: FILE: drivers/staging/hv/RingBuffer.c:193:
+GetRingBufferIndices(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBufferIndices>
#133: FILE: drivers/staging/hv/RingBuffer.c:193:
+GetRingBufferIndices(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <DumpRingInfo>
#142: FILE: drivers/staging/hv/RingBuffer.c:208:
+void DumpRingInfo(struct hv_ring_buffer_info *RingInfo, char *Prefix)

CHECK:CAMELCASE: Avoid CamelCase: <Prefix>
#142: FILE: drivers/staging/hv/RingBuffer.c:208:
+void DumpRingInfo(struct hv_ring_buffer_info *RingInfo, char *Prefix)

CHECK:CAMELCASE: Avoid CamelCase: <RingBufferGetDebugInfo>
#168: FILE: drivers/staging/hv/RingBuffer.c:253:
+void RingBufferGetDebugInfo(struct hv_ring_buffer_info *RingInfo,

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBufferInterruptMask>
#177: FILE: drivers/staging/hv/RingBuffer.c:282:
+u32 GetRingBufferInterruptMask(struct hv_ring_buffer_info *rbi)

CHECK:CAMELCASE: Avoid CamelCase: <RingBufferInit>
#186: FILE: drivers/staging/hv/RingBuffer.c:296:
+int RingBufferInit(struct hv_ring_buffer_info *RingInfo, void *Buffer, u32 BufferLen)

CHECK:CAMELCASE: Avoid CamelCase: <Buffer>
#186: FILE: drivers/staging/hv/RingBuffer.c:296:
+int RingBufferInit(struct hv_ring_buffer_info *RingInfo, void *Buffer, u32 BufferLen)

CHECK:CAMELCASE: Avoid CamelCase: <BufferLen>
#186: FILE: drivers/staging/hv/RingBuffer.c:296:
+int RingBufferInit(struct hv_ring_buffer_info *RingInfo, void *Buffer, u32 BufferLen)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#200: FILE: drivers/staging/hv/RingBuffer.c:322:
+void RingBufferCleanup(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <RingBufferCleanup>
#200: FILE: drivers/staging/hv/RingBuffer.c:322:
+void RingBufferCleanup(struct hv_ring_buffer_info* RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <RingBufferWrite>
#209: FILE: drivers/staging/hv/RingBuffer.c:335:
+int RingBufferWrite(struct hv_ring_buffer_info *OutRingInfo,

CHECK:CAMELCASE: Avoid CamelCase: <OutRingInfo>
#209: FILE: drivers/staging/hv/RingBuffer.c:335:
+int RingBufferWrite(struct hv_ring_buffer_info *OutRingInfo,

CHECK:CAMELCASE: Avoid CamelCase: <RingBufferPeek>
#218: FILE: drivers/staging/hv/RingBuffer.c:422:
+int RingBufferPeek(struct hv_ring_buffer_info *InRingInfo, void *Buffer, u32 BufferLen)

CHECK:CAMELCASE: Avoid CamelCase: <InRingInfo>
#218: FILE: drivers/staging/hv/RingBuffer.c:422:
+int RingBufferPeek(struct hv_ring_buffer_info *InRingInfo, void *Buffer, u32 BufferLen)

CHECK:CAMELCASE: Avoid CamelCase: <RingBufferRead>
#227: FILE: drivers/staging/hv/RingBuffer.c:466:
+int RingBufferRead(struct hv_ring_buffer_info *InRingInfo, void *Buffer,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000069306.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 0 warnings, 28 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000069306.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
