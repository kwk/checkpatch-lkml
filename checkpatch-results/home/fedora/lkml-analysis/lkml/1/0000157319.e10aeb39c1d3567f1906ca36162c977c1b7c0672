WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: fs/ceph/crush/crush.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#75: FILE: fs/ceph/crush/crush.c:8:
+# define kfree(x) do { if (x) free(x); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#76: FILE: fs/ceph/crush/crush.c:9:
+# define BUG_ON(x) assert(!(x))

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: fs/ceph/crush/crush.c:24:
+ ^Iswitch (b->alg) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: fs/ceph/crush/crush.c:24:
+ ^Iswitch (b->alg) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: fs/ceph/crush/crush.c:24:
+ ^Iswitch (b->alg) {$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#93: FILE: fs/ceph/crush/crush.c:26:
+		return ((struct crush_bucket_uniform*)b)->item_weight;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#95: FILE: fs/ceph/crush/crush.c:28:
+		return ((struct crush_bucket_list*)b)->item_weights[p];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#98: FILE: fs/ceph/crush/crush.c:31:
+			return ((struct crush_bucket_tree*)b)->node_weights[p];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#101: FILE: fs/ceph/crush/crush.c:34:
+		return ((struct crush_bucket_straw*)b)->item_weights[p];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map->buckets[b]"
#115: FILE: fs/ceph/crush/crush.c:48:
+		if (map->buckets[b] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#119: FILE: fs/ceph/crush/crush.c:52:
+			BUG_ON(c >= map->max_devices ||

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#124: FILE: fs/ceph/crush/crush.c:57:
+				map->bucket_parents[-1-c] = map->buckets[b]->id;
 				                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map->buckets[b]"
#187: FILE: fs/ceph/crush/crush.c:120:
+			if (map->buckets[b] == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: fs/ceph/crush/crush.c:139:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#213: FILE: fs/ceph/crush/crush.h:1:
+#ifndef _CRUSH_CRUSH_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#231: FILE: fs/ceph/crush/crush.h:19:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: fs/ceph/crush/crush.h:22:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#238: FILE: fs/ceph/crush/crush.h:26:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: fs/ceph/crush/crush.h:43:
+^I                              /* arg2 = type */$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#288: FILE: fs/ceph/crush/crush.h:76:
+			      (len)*sizeof(struct crush_rule_step))
 			           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#290: FILE: fs/ceph/crush/crush.h:78:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#312: FILE: fs/ceph/crush/crush.h:100:
+};
+static inline const char *crush_bucket_alg_name(int alg) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#312: FILE: fs/ceph/crush/crush.h:100:
+static inline const char *crush_bucket_alg_name(int alg) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#341: FILE: fs/ceph/crush/crush.h:129:
+	__u32 *sum_weights;   /* 16-bit fixed point.  element i is sum
+				 of weights 0..i, inclusive */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#341: FILE: fs/ceph/crush/crush.h:129:
+				 of weights 0..i, inclusive */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#346: FILE: fs/ceph/crush/crush.h:134:
+	struct crush_bucket h;  /* note: h.size is _tree_ size, not number of
+				   actual items */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#346: FILE: fs/ceph/crush/crush.h:134:
+				   actual items */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#356: FILE: fs/ceph/crush/crush.h:144:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#380: FILE: fs/ceph/crush/crush.h:168:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: fs/ceph/crush/crush.h:170:
+extern int crush_get_bucket_item_weight(struct crush_bucket *b, int pos);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: fs/ceph/crush/crush.h:171:
+extern void crush_calc_parents(struct crush_map *map);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: fs/ceph/crush/crush.h:172:
+extern void crush_destroy_bucket_uniform(struct crush_bucket_uniform *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#385: FILE: fs/ceph/crush/crush.h:173:
+extern void crush_destroy_bucket_list(struct crush_bucket_list *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#386: FILE: fs/ceph/crush/crush.h:174:
+extern void crush_destroy_bucket_tree(struct crush_bucket_tree *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#387: FILE: fs/ceph/crush/crush.h:175:
+extern void crush_destroy_bucket_straw(struct crush_bucket_straw *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: fs/ceph/crush/crush.h:176:
+extern void crush_destroy_bucket(struct crush_bucket *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#389: FILE: fs/ceph/crush/crush.h:177:
+extern void crush_destroy(struct crush_map *map);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#398: FILE: fs/ceph/crush/hash.h:1:
+#ifndef _CRUSH_HASH_H

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
                    ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
+	a=a-b;  a=a-c;  a=a^(c>>13); \
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
+	c=c-a;  c=c-b;  c=c^(b>>13); \
+	a=a-b;  a=a-c;  a=a^(c>>12); \
+	b=b-c;  b=b-a;  b=b^(a<<16); \
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
+	a=a-b;  a=a-c;  a=a^(c>>3); \
+	b=b-c;  b=b-a;  b=b^(a<<10); \
+	c=c-a;  c=c-b;  c=c^(b>>15);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
+	a=a-b;  a=a-c;  a=a^(c>>13); \
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
+	c=c-a;  c=c-b;  c=c^(b>>13); \
+	a=a-b;  a=a-c;  a=a^(c>>12); \
+	b=b-c;  b=b-a;  b=b^(a<<16); \
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
+	a=a-b;  a=a-c;  a=a^(c>>3); \
+	b=b-c;  b=b-a;  b=b^(a<<10); \
+	c=c-a;  c=c-b;  c=c^(b>>15);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
+	a=a-b;  a=a-c;  a=a^(c>>13); \
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
+	c=c-a;  c=c-b;  c=c^(b>>13); \
+	a=a-b;  a=a-c;  a=a^(c>>12); \
+	b=b-c;  b=b-a;  b=b^(a<<16); \
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
+	a=a-b;  a=a-c;  a=a^(c>>3); \
+	b=b-c;  b=b-a;  b=b^(a<<10); \
+	c=c-a;  c=c-b;  c=c^(b>>15);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
+	a=a-b;  a=a-c;  a=a^(c>>13); \
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
+	c=c-a;  c=c-b;  c=c^(b>>13); \
+	a=a-b;  a=a-c;  a=a^(c>>12); \
+	b=b-c;  b=b-a;  b=b^(a<<16); \
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
+	a=a-b;  a=a-c;  a=a^(c>>3); \
+	b=b-c;  b=b-a;  b=b^(a<<10); \
+	c=c-a;  c=c-b;  c=c^(b>>15);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
+	a=a-b;  a=a-c;  a=a^(c>>13); \
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
+	c=c-a;  c=c-b;  c=c^(b>>13); \
+	a=a-b;  a=a-c;  a=a^(c>>12); \
+	b=b-c;  b=b-a;  b=b^(a<<16); \
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
+	a=a-b;  a=a-c;  a=a^(c>>3); \
+	b=b-c;  b=b-a;  b=b^(a<<10); \
+	c=c-a;  c=c-b;  c=c^(b>>15);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
+	a=a-b;  a=a-c;  a=a^(c>>13); \
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
+	c=c-a;  c=c-b;  c=c^(b>>13); \
+	a=a-b;  a=a-c;  a=a^(c>>12); \
+	b=b-c;  b=b-a;  b=b^(a<<16); \
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
+	a=a-b;  a=a-c;  a=a^(c>>3); \
+	b=b-c;  b=b-a;  b=b^(a<<10); \
+	c=c-a;  c=c-b;  c=c^(b>>15);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#404: FILE: fs/ceph/crush/hash.h:7:
+#define hashmix(a,b,c) \
+	a=a-b;  a=a-c;  a=a^(c>>13); \
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
+	c=c-a;  c=c-b;  c=c^(b>>13); \
+	a=a-b;  a=a-c;  a=a^(c>>12); \
+	b=b-c;  b=b-a;  b=b^(a<<16); \
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
+	a=a-b;  a=a-c;  a=a^(c>>3); \
+	b=b-c;  b=b-a;  b=b^(a<<10); \
+	c=c-a;  c=c-b;  c=c^(b>>15);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#405: FILE: fs/ceph/crush/hash.h:8:
+	a=a-b;  a=a-c;  a=a^(c>>13); \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#405: FILE: fs/ceph/crush/hash.h:8:
+	a=a-b;  a=a-c;  a=a^(c>>13); \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#405: FILE: fs/ceph/crush/hash.h:8:
+	a=a-b;  a=a-c;  a=a^(c>>13); \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#405: FILE: fs/ceph/crush/hash.h:8:
+	a=a-b;  a=a-c;  a=a^(c>>13); \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#405: FILE: fs/ceph/crush/hash.h:8:
+	a=a-b;  a=a-c;  a=a^(c>>13); \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#405: FILE: fs/ceph/crush/hash.h:8:
+	a=a-b;  a=a-c;  a=a^(c>>13); \
 	                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#405: FILE: fs/ceph/crush/hash.h:8:
+	a=a-b;  a=a-c;  a=a^(c>>13); \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#406: FILE: fs/ceph/crush/hash.h:9:
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#406: FILE: fs/ceph/crush/hash.h:9:
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#406: FILE: fs/ceph/crush/hash.h:9:
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#406: FILE: fs/ceph/crush/hash.h:9:
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#406: FILE: fs/ceph/crush/hash.h:9:
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#406: FILE: fs/ceph/crush/hash.h:9:
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
 	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#406: FILE: fs/ceph/crush/hash.h:9:
+	b=b-c;  b=b-a;  b=b^(a<<8);  \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#407: FILE: fs/ceph/crush/hash.h:10:
+	c=c-a;  c=c-b;  c=c^(b>>13); \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#407: FILE: fs/ceph/crush/hash.h:10:
+	c=c-a;  c=c-b;  c=c^(b>>13); \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#407: FILE: fs/ceph/crush/hash.h:10:
+	c=c-a;  c=c-b;  c=c^(b>>13); \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#407: FILE: fs/ceph/crush/hash.h:10:
+	c=c-a;  c=c-b;  c=c^(b>>13); \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#407: FILE: fs/ceph/crush/hash.h:10:
+	c=c-a;  c=c-b;  c=c^(b>>13); \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#407: FILE: fs/ceph/crush/hash.h:10:
+	c=c-a;  c=c-b;  c=c^(b>>13); \
 	                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#407: FILE: fs/ceph/crush/hash.h:10:
+	c=c-a;  c=c-b;  c=c^(b>>13); \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#408: FILE: fs/ceph/crush/hash.h:11:
+	a=a-b;  a=a-c;  a=a^(c>>12); \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#408: FILE: fs/ceph/crush/hash.h:11:
+	a=a-b;  a=a-c;  a=a^(c>>12); \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#408: FILE: fs/ceph/crush/hash.h:11:
+	a=a-b;  a=a-c;  a=a^(c>>12); \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#408: FILE: fs/ceph/crush/hash.h:11:
+	a=a-b;  a=a-c;  a=a^(c>>12); \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#408: FILE: fs/ceph/crush/hash.h:11:
+	a=a-b;  a=a-c;  a=a^(c>>12); \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#408: FILE: fs/ceph/crush/hash.h:11:
+	a=a-b;  a=a-c;  a=a^(c>>12); \
 	                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#408: FILE: fs/ceph/crush/hash.h:11:
+	a=a-b;  a=a-c;  a=a^(c>>12); \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#409: FILE: fs/ceph/crush/hash.h:12:
+	b=b-c;  b=b-a;  b=b^(a<<16); \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#409: FILE: fs/ceph/crush/hash.h:12:
+	b=b-c;  b=b-a;  b=b^(a<<16); \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#409: FILE: fs/ceph/crush/hash.h:12:
+	b=b-c;  b=b-a;  b=b^(a<<16); \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#409: FILE: fs/ceph/crush/hash.h:12:
+	b=b-c;  b=b-a;  b=b^(a<<16); \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#409: FILE: fs/ceph/crush/hash.h:12:
+	b=b-c;  b=b-a;  b=b^(a<<16); \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#409: FILE: fs/ceph/crush/hash.h:12:
+	b=b-c;  b=b-a;  b=b^(a<<16); \
 	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#409: FILE: fs/ceph/crush/hash.h:12:
+	b=b-c;  b=b-a;  b=b^(a<<16); \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#410: FILE: fs/ceph/crush/hash.h:13:
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#410: FILE: fs/ceph/crush/hash.h:13:
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#410: FILE: fs/ceph/crush/hash.h:13:
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#410: FILE: fs/ceph/crush/hash.h:13:
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#410: FILE: fs/ceph/crush/hash.h:13:
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#410: FILE: fs/ceph/crush/hash.h:13:
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
 	                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#410: FILE: fs/ceph/crush/hash.h:13:
+	c=c-a;  c=c-b;  c=c^(b>>5);  \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#411: FILE: fs/ceph/crush/hash.h:14:
+	a=a-b;  a=a-c;  a=a^(c>>3); \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#411: FILE: fs/ceph/crush/hash.h:14:
+	a=a-b;  a=a-c;  a=a^(c>>3); \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#411: FILE: fs/ceph/crush/hash.h:14:
+	a=a-b;  a=a-c;  a=a^(c>>3); \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#411: FILE: fs/ceph/crush/hash.h:14:
+	a=a-b;  a=a-c;  a=a^(c>>3); \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#411: FILE: fs/ceph/crush/hash.h:14:
+	a=a-b;  a=a-c;  a=a^(c>>3); \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#411: FILE: fs/ceph/crush/hash.h:14:
+	a=a-b;  a=a-c;  a=a^(c>>3); \
 	                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#411: FILE: fs/ceph/crush/hash.h:14:
+	a=a-b;  a=a-c;  a=a^(c>>3); \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#412: FILE: fs/ceph/crush/hash.h:15:
+	b=b-c;  b=b-a;  b=b^(a<<10); \
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#412: FILE: fs/ceph/crush/hash.h:15:
+	b=b-c;  b=b-a;  b=b^(a<<10); \
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#412: FILE: fs/ceph/crush/hash.h:15:
+	b=b-c;  b=b-a;  b=b^(a<<10); \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#412: FILE: fs/ceph/crush/hash.h:15:
+	b=b-c;  b=b-a;  b=b^(a<<10); \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#412: FILE: fs/ceph/crush/hash.h:15:
+	b=b-c;  b=b-a;  b=b^(a<<10); \
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#412: FILE: fs/ceph/crush/hash.h:15:
+	b=b-c;  b=b-a;  b=b^(a<<10); \
 	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#412: FILE: fs/ceph/crush/hash.h:15:
+	b=b-c;  b=b-a;  b=b^(a<<10); \
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#413: FILE: fs/ceph/crush/hash.h:16:
+	c=c-a;  c=c-b;  c=c^(b>>15);
 	 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#413: FILE: fs/ceph/crush/hash.h:16:
+	c=c-a;  c=c-b;  c=c^(b>>15);
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#413: FILE: fs/ceph/crush/hash.h:16:
+	c=c-a;  c=c-b;  c=c^(b>>15);
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#413: FILE: fs/ceph/crush/hash.h:16:
+	c=c-a;  c=c-b;  c=c^(b>>15);
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#413: FILE: fs/ceph/crush/hash.h:16:
+	c=c-a;  c=c-b;  c=c^(b>>15);
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#413: FILE: fs/ceph/crush/hash.h:16:
+	c=c-a;  c=c-b;  c=c^(b>>15);
 	                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#413: FILE: fs/ceph/crush/hash.h:16:
+	c=c-a;  c=c-b;  c=c^(b>>15);
 	                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#417: FILE: fs/ceph/crush/hash.h:20:
+static inline unsigned crush_hash32(unsigned a) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#417: FILE: fs/ceph/crush/hash.h:20:
+static inline unsigned crush_hash32(unsigned a) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#417: FILE: fs/ceph/crush/hash.h:20:
+static inline unsigned crush_hash32(unsigned a) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#418: FILE: fs/ceph/crush/hash.h:21:
+	unsigned hash = crush_hash_seed ^ a;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#419: FILE: fs/ceph/crush/hash.h:22:
+	unsigned b = a;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#420: FILE: fs/ceph/crush/hash.h:23:
+	unsigned x = 231232;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#421: FILE: fs/ceph/crush/hash.h:24:
+	unsigned y = 1232;

WARNING:LINE_SPACING: Missing a blank line after declarations
#422: FILE: fs/ceph/crush/hash.h:25:
+	unsigned y = 1232;
+	hashmix(b, x, hash);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: fs/ceph/crush/hash.h:30:
+static inline unsigned crush_hash32_2(unsigned a, unsigned b) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: fs/ceph/crush/hash.h:30:
+static inline unsigned crush_hash32_2(unsigned a, unsigned b) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: fs/ceph/crush/hash.h:30:
+static inline unsigned crush_hash32_2(unsigned a, unsigned b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#427: FILE: fs/ceph/crush/hash.h:30:
+static inline unsigned crush_hash32_2(unsigned a, unsigned b) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#428: FILE: fs/ceph/crush/hash.h:31:
+	unsigned hash = crush_hash_seed ^ a ^ b;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#429: FILE: fs/ceph/crush/hash.h:32:
+	unsigned x = 231232;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#430: FILE: fs/ceph/crush/hash.h:33:
+	unsigned y = 1232;

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: fs/ceph/crush/hash.h:34:
+	unsigned y = 1232;
+	hashmix(a, b, hash);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: fs/ceph/crush/hash.h:40:
+static inline unsigned crush_hash32_3(unsigned a, unsigned b, unsigned c) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: fs/ceph/crush/hash.h:40:
+static inline unsigned crush_hash32_3(unsigned a, unsigned b, unsigned c) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: fs/ceph/crush/hash.h:40:
+static inline unsigned crush_hash32_3(unsigned a, unsigned b, unsigned c) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: fs/ceph/crush/hash.h:40:
+static inline unsigned crush_hash32_3(unsigned a, unsigned b, unsigned c) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#437: FILE: fs/ceph/crush/hash.h:40:
+static inline unsigned crush_hash32_3(unsigned a, unsigned b, unsigned c) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#439: FILE: fs/ceph/crush/hash.h:42:
+	unsigned x = 231232;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#440: FILE: fs/ceph/crush/hash.h:43:
+	unsigned y = 1232;

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: fs/ceph/crush/hash.h:44:
+	unsigned y = 1232;
+	hashmix(a, b, hash);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#449: FILE: fs/ceph/crush/hash.h:52:
+static inline unsigned crush_hash32_4(unsigned a, unsigned b, unsigned c, unsigned d) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#449: FILE: fs/ceph/crush/hash.h:52:
+static inline unsigned crush_hash32_4(unsigned a, unsigned b, unsigned c, unsigned d) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#449: FILE: fs/ceph/crush/hash.h:52:
+static inline unsigned crush_hash32_4(unsigned a, unsigned b, unsigned c, unsigned d) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#449: FILE: fs/ceph/crush/hash.h:52:
+static inline unsigned crush_hash32_4(unsigned a, unsigned b, unsigned c, unsigned d) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#449: FILE: fs/ceph/crush/hash.h:52:
+static inline unsigned crush_hash32_4(unsigned a, unsigned b, unsigned c, unsigned d) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#449: FILE: fs/ceph/crush/hash.h:52:
+static inline unsigned crush_hash32_4(unsigned a, unsigned b, unsigned c, unsigned d) {

CHECK:SPACING: spaces preferred around that '^' (ctx:WxV)
#450: FILE: fs/ceph/crush/hash.h:53:
+	unsigned int hash = crush_hash_seed ^a ^ b ^ c ^ d;
 	                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#451: FILE: fs/ceph/crush/hash.h:54:
+	unsigned x = 231232;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#452: FILE: fs/ceph/crush/hash.h:55:
+	unsigned y = 1232;

WARNING:LINE_SPACING: Missing a blank line after declarations
#453: FILE: fs/ceph/crush/hash.h:56:
+	unsigned y = 1232;
+	hashmix(a, b, hash);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: fs/ceph/crush/hash.h:65:
+static inline unsigned crush_hash32_5(unsigned a, unsigned b, unsigned c, unsigned d, unsigned e) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: fs/ceph/crush/hash.h:65:
+static inline unsigned crush_hash32_5(unsigned a, unsigned b, unsigned c, unsigned d, unsigned e) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: fs/ceph/crush/hash.h:65:
+static inline unsigned crush_hash32_5(unsigned a, unsigned b, unsigned c, unsigned d, unsigned e) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: fs/ceph/crush/hash.h:65:
+static inline unsigned crush_hash32_5(unsigned a, unsigned b, unsigned c, unsigned d, unsigned e) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: fs/ceph/crush/hash.h:65:
+static inline unsigned crush_hash32_5(unsigned a, unsigned b, unsigned c, unsigned d, unsigned e) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: fs/ceph/crush/hash.h:65:
+static inline unsigned crush_hash32_5(unsigned a, unsigned b, unsigned c, unsigned d, unsigned e) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#462: FILE: fs/ceph/crush/hash.h:65:
+static inline unsigned crush_hash32_5(unsigned a, unsigned b, unsigned c, unsigned d, unsigned e) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#464: FILE: fs/ceph/crush/hash.h:67:
+	unsigned x = 231232;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#465: FILE: fs/ceph/crush/hash.h:68:
+	unsigned y = 1232;

WARNING:LINE_SPACING: Missing a blank line after declarations
#466: FILE: fs/ceph/crush/hash.h:69:
+	unsigned y = 1232;
+	hashmix(a, b, hash);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#484: FILE: fs/ceph/crush/mapper.c:1:
+

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#488: FILE: fs/ceph/crush/mapper.c:5:
+# include <asm/bug.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: fs/ceph/crush/mapper.c:15:
+# define BUG_ON(x) assert(!(x))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#507: FILE: fs/ceph/crush/mapper.c:24:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: fs/ceph/crush/mapper.c:47:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#543: FILE: fs/ceph/crush/mapper.c:60:
+	unsigned o = crush_hash32_2(x, bucket->h.id) & 0xffff;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#544: FILE: fs/ceph/crush/mapper.c:61:
+	unsigned p = bucket->primes[crush_hash32_2(bucket->h.id, x) %

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#546: FILE: fs/ceph/crush/mapper.c:63:
+	unsigned s = (x + o + (r+1)*p) % bucket->h.size;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#546: FILE: fs/ceph/crush/mapper.c:63:
+	unsigned s = (x + o + (r+1)*p) % bucket->h.size;
 	                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#546: FILE: fs/ceph/crush/mapper.c:63:
+	unsigned s = (x + o + (r+1)*p) % bucket->h.size;
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#559: FILE: fs/ceph/crush/mapper.c:76:
+	for (i = bucket->h.size-1; i >= 0; i--) {
 	                       ^

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#564: FILE: fs/ceph/crush/mapper.c:81:
+		  i, x, r, bucket->h.items[i], bucket->item_weights[i], bucket->sum_weights[i], w);*/

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#564: FILE: fs/ceph/crush/mapper.c:81:
+		/*dprintk("list_choose i=%d x=%d r=%d item %d weight %x sum_weight %x rand %llx",
+		  i, x, r, bucket->h.items[i], bucket->item_weights[i], bucket->sum_weights[i], w);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#564: FILE: fs/ceph/crush/mapper.c:81:
+		  i, x, r, bucket->h.items[i], bucket->item_weights[i], bucket->sum_weights[i], w);*/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#575: FILE: fs/ceph/crush/mapper.c:92:
+	BUG_ON(1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#579: FILE: fs/ceph/crush/mapper.c:96:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#581: FILE: fs/ceph/crush/mapper.c:98:
+static int height(int n) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: fs/ceph/crush/mapper.c:100:
+	int h = 0;
+	while ((n & 1) == 0) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#590: FILE: fs/ceph/crush/mapper.c:107:
+static int left(int x) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: fs/ceph/crush/mapper.c:109:
+	int h = height(x);
+	return x - (1 << (h-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#592: FILE: fs/ceph/crush/mapper.c:109:
+	return x - (1 << (h-1));
 	                   ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#595: FILE: fs/ceph/crush/mapper.c:112:
+static int right(int x) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#597: FILE: fs/ceph/crush/mapper.c:114:
+	int h = height(x);
+	return x + (1 << (h-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#597: FILE: fs/ceph/crush/mapper.c:114:
+	return x + (1 << (h-1));
 	                   ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#600: FILE: fs/ceph/crush/mapper.c:117:
+static int terminal(int x) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#637: FILE: fs/ceph/crush/mapper.c:154:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#678: FILE: fs/ceph/crush/mapper.c:195:
+		BUG_ON(1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#683: FILE: fs/ceph/crush/mapper.c:200:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#729: FILE: fs/ceph/crush/mapper.c:246:
+	int collide, reject;
+	dprintk("choose bucket %d x %d outpos %d\n", bucket->id, x, outpos);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#752: FILE: fs/ceph/crush/mapper.c:269:
+						r += (numrep+1) * (flocal+ftotal- shift);
 						            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#752: FILE: fs/ceph/crush/mapper.c:269:
+						r += (numrep+1) * (flocal+ftotal- shift);
 						                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxW)
#752: FILE: fs/ceph/crush/mapper.c:269:
+						r += (numrep+1) * (flocal+ftotal- shift);
 						                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#755: FILE: fs/ceph/crush/mapper.c:272:
+						r += numrep * (flocal+ftotal-shift);
 						                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#755: FILE: fs/ceph/crush/mapper.c:272:
+						r += numrep * (flocal+ftotal-shift);
 						                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#762: FILE: fs/ceph/crush/mapper.c:279:
+						r += numrep * (flocal+ftotal-shift);
 						                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#762: FILE: fs/ceph/crush/mapper.c:279:
+						r += numrep * (flocal+ftotal-shift);
 						                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: fs/ceph/crush/mapper.c:284:
+				BUG_ON(item >= map->max_devices);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#771: FILE: fs/ceph/crush/mapper.c:288:
+					itemtype = map->buckets[-1-item]->type;
 					                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#778: FILE: fs/ceph/crush/mapper.c:295:
+					BUG_ON(item >= 0 ||

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#779: FILE: fs/ceph/crush/mapper.c:296:
+					       (-1-item) >= map->max_buckets);
 					          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#780: FILE: fs/ceph/crush/mapper.c:297:
+					in = map->buckets[-1-item];
 					                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#795: FILE: fs/ceph/crush/mapper.c:312:
+				    crush_choose(map, map->buckets[-1-item], weight,
 				                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#796: FILE: fs/ceph/crush/mapper.c:313:
+						 x, outpos+1, 0,
 						          ^

CHECK:BRACES: Unbalanced braces around else statement
#821: FILE: fs/ceph/crush/mapper.c:338:
+					} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#824: FILE: fs/ceph/crush/mapper.c:341:
+					dprintk("  reject %d  collide %d  ftotal %d  flocal %d shift %d\n", reject, collide, ftotal, flocal, shift);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#843: FILE: fs/ceph/crush/mapper.c:360:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#871: FILE: fs/ceph/crush/mapper.c:388:
+	int i,j;
 	     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#876: FILE: fs/ceph/crush/mapper.c:393:
+	BUG_ON(ruleno >= map->max_rules);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#878: FILE: fs/ceph/crush/mapper.c:395:
+	a = kmalloc(CRUSH_MAX_SET * sizeof(int), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#881: FILE: fs/ceph/crush/mapper.c:398:
+	b = kmalloc(CRUSH_MAX_SET * sizeof(int), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#884: FILE: fs/ceph/crush/mapper.c:401:
+	c = kmalloc(CRUSH_MAX_SET * sizeof(int), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#887: FILE: fs/ceph/crush/mapper.c:404:
+	force_context = kmalloc(CRUSH_MAX_DEPTH * sizeof(int), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'dne' may be misspelled - perhaps 'done'?
#904: FILE: fs/ceph/crush/mapper.c:421:
+			/*dprintk("CRUSH: forcefed device dne\n");*/
 			                                  ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dne' may be misspelled - perhaps 'done'?
#905: FILE: fs/ceph/crush/mapper.c:422:
+			rc = -1;  /* force fed device dne */
 			                              ^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#915: FILE: fs/ceph/crush/mapper.c:432:
+					force = map->bucket_parents[-1-force];
 					                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#928: FILE: fs/ceph/crush/mapper.c:445:
+				BUG_ON(force_context[force_pos] != w[0]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#939: FILE: fs/ceph/crush/mapper.c:456:
+			BUG_ON(wsize == 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: fs/ceph/crush/mapper.c:458:
+^I^I^Irecurse_to_leaf = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#943: FILE: fs/ceph/crush/mapper.c:460:
+^I^I^I^Irule->steps[step].op == CRUSH_RULE_CHOOSE_LEAF_INDEP;^I^I^I^I$

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#943: FILE: fs/ceph/crush/mapper.c:460:
+				rule->steps[step].op == CRUSH_RULE_CHOOSE_LEAF_INDEP;				

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#966: FILE: fs/ceph/crush/mapper.c:483:
+					       map->buckets[-1-force_context[force_pos]]->type)
 					                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#975: FILE: fs/ceph/crush/mapper.c:492:
+						      map->buckets[-1-w[i]],
 						                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#979: FILE: fs/ceph/crush/mapper.c:496:
+						      o+osize, j,
 						       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#981: FILE: fs/ceph/crush/mapper.c:498:
+						      recurse_to_leaf, c+osize);
 						                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#986: FILE: fs/ceph/crush/mapper.c:503:
+				memcpy(o, c, osize*sizeof(*o));
 				                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#995: FILE: fs/ceph/crush/mapper.c:512:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#997: FILE: fs/ceph/crush/mapper.c:514:
+			for (i=0; i<wsize && result_len < result_max; i++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#997: FILE: fs/ceph/crush/mapper.c:514:
+			for (i=0; i<wsize && result_len < result_max; i++) {
 			           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1005: FILE: fs/ceph/crush/mapper.c:522:
+			BUG_ON(1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1019: FILE: fs/ceph/crush/mapper.c:536:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1026: FILE: fs/ceph/crush/mapper.h:1:
+#ifndef _CRUSH_MAPPER_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1037: FILE: fs/ceph/crush/mapper.h:12:
+extern int crush_find_rule(struct crush_map *map, int pool, int type, int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1038: FILE: fs/ceph/crush/mapper.h:13:
+extern int crush_do_rule(struct crush_map *map,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157319.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 51 errors, 81 warnings, 97 checks, 953 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157319.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
