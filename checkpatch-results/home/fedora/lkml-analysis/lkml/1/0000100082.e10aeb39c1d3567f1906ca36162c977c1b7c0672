WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#98: FILE: kernel/module.c:67:
+ * to ensure complete separation of code and data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SECTION' - possible side-effects?
#100: FILE: kernel/module.c:69:
+#define ALIGN_MODULE_SECTION(SECTION, ALIGNMENT) \
+	do { SECTION = ALIGN(SECTION, ALIGNMENT); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#100: FILE: kernel/module.c:69:
+#define ALIGN_MODULE_SECTION(SECTION, ALIGNMENT) \
+	do { SECTION = ALIGN(SECTION, ALIGNMENT); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#103: FILE: kernel/module.c:72:
+#define ALIGN_MODULE_SECTION(SECTION, ALIGNMENT) do { ; } while (0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#107: FILE: kernel/module.c:76:
+ * 0 otherwise */

CHECK:SPACING: No space is necessary after a cast
#108: FILE: kernel/module.c:77:
+#define PAGE_ALIGNED(ADDR) (((unsigned long) ADDR & \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ADDR' may be better as '(ADDR)' to avoid precedence issues
#108: FILE: kernel/module.c:77:
+#define PAGE_ALIGNED(ADDR) (((unsigned long) ADDR & \
+				((1UL << PAGE_SHIFT) - 1UL)) ? \
+					(0) : (1))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#113: FILE: kernel/module.c:82:
+ * that contains that address */

CHECK:SPACING: No space is necessary after a cast
#114: FILE: kernel/module.c:83:
+#define PAGE_NUMBER(ADDR) (((unsigned long) ADDR) >> PAGE_SHIFT)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#117: FILE: kernel/module.c:86:
+ * memory regions occupies */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'BASE' - possible side-effects?
#118: FILE: kernel/module.c:87:
+#define NUMBER_OF_PAGES(BASE, SIZE) ((SIZE > 0) ?	\
+		(PAGE_NUMBER(BASE + SIZE - 1) -		\
+			 PAGE_NUMBER(BASE) + 1)		\
+		: (0UL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'BASE' may be better as '(BASE)' to avoid precedence issues
#118: FILE: kernel/module.c:87:
+#define NUMBER_OF_PAGES(BASE, SIZE) ((SIZE > 0) ?	\
+		(PAGE_NUMBER(BASE + SIZE - 1) -		\
+			 PAGE_NUMBER(BASE) + 1)		\
+		: (0UL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#118: FILE: kernel/module.c:87:
+#define NUMBER_OF_PAGES(BASE, SIZE) ((SIZE > 0) ?	\
+		(PAGE_NUMBER(BASE + SIZE - 1) -		\
+			 PAGE_NUMBER(BASE) + 1)		\
+		: (0UL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'SIZE' may be better as '(SIZE)' to avoid precedence issues
#118: FILE: kernel/module.c:87:
+#define NUMBER_OF_PAGES(BASE, SIZE) ((SIZE > 0) ?	\
+		(PAGE_NUMBER(BASE + SIZE - 1) -		\
+			 PAGE_NUMBER(BASE) + 1)		\
+		: (0UL))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: kernel/module.c:94:
+ * if necessary */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'SEC_GROUP' may be better as '(SEC_GROUP)' to avoid precedence issues
#126: FILE: kernel/module.c:95:
+#define CATCH_MODULE_SECTION(SEC_GROUP, SEC_ID, SEC_SIZE, SIZE)	\
+	do {							\
+		if (SEC_GROUP == SEC_ID) {			\
+			/* align section size to a page */	\
+			ALIGN_MODULE_SECTION(SIZE, PAGE_SIZE);	\
+			/* set new module section size */	\
+			SEC_SIZE = SIZE;			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'SEC_ID' may be better as '(SEC_ID)' to avoid precedence issues
#126: FILE: kernel/module.c:95:
+#define CATCH_MODULE_SECTION(SEC_GROUP, SEC_ID, SEC_SIZE, SIZE)	\
+	do {							\
+		if (SEC_GROUP == SEC_ID) {			\
+			/* align section size to a page */	\
+			ALIGN_MODULE_SECTION(SIZE, PAGE_SIZE);	\
+			/* set new module section size */	\
+			SEC_SIZE = SIZE;			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#126: FILE: kernel/module.c:95:
+#define CATCH_MODULE_SECTION(SEC_GROUP, SEC_ID, SEC_SIZE, SIZE)	\
+	do {							\
+		if (SEC_GROUP == SEC_ID) {			\
+			/* align section size to a page */	\
+			ALIGN_MODULE_SECTION(SIZE, PAGE_SIZE);	\
+			/* set new module section size */	\
+			SEC_SIZE = SIZE;			\
+		}						\
+	} while (0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#144: FILE: kernel/module.c:230:
+ * module_alloc() is platform-specific */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#148: FILE: kernel/module.c:234:
+ * module_free() is platform-specific */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: kernel/module.c:243:
+		DEBUGP("RELEASING MODULE CORE: 0x%lx %lu\n",
+				(unsigned long)mod->module_core, total_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: kernel/module.c:251:
+		DEBUGP("RELEASING MODULE INIT: 0x%lx %lu\n",
+				(unsigned long)mod->module_init, total_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: kernel/module.c:1751:
+		CATCH_MODULE_SECTION(m, 0, mod->core_text_size,
+					mod->core_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: kernel/module.c:1755:
+		CATCH_MODULE_SECTION(m, 1, mod->core_ro_size,
+					mod->core_size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#208: FILE: kernel/module.c:1758:
+		 * RW data + small alloc )*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: kernel/module.c:1760:
+		CATCH_MODULE_SECTION(m, 3, mod->core_size,
+					mod->core_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: kernel/module.c:1779:
+		CATCH_MODULE_SECTION(m, 0, mod->init_text_size,
+					mod->init_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: kernel/module.c:1783:
+		CATCH_MODULE_SECTION(m, 1, mod->init_ro_size,
+					mod->init_size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#229: FILE: kernel/module.c:1786:
+		 * RW data + small alloc )*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: kernel/module.c:1788:
+		CATCH_MODULE_SECTION(m, 3, mod->init_size,
+					mod->init_size);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#236: FILE: kernel/module.c:1953:
*debug, unsigned int num)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#252: FILE: kernel/module.c:1971:
+ * Siarhei Liakh, Xuxian Jiang  */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: kernel/module.c:1973:
+static void set_section_ro_nx(unsigned long base,
+			unsigned long text_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: kernel/module.c:2450:
+	set_section_ro_nx((unsigned long)mod->module_core,
+				mod->core_text_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: kernel/module.c:2456:
+	set_section_ro_nx((unsigned long)mod->module_init,
+				mod->init_text_size,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100082.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 22 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100082.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
