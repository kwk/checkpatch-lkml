WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Only allocate the FPU area when the application actually uses FPU, i.e., in the

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: arch/x86/kernel/i387.c:107:
+                tsk->thread.cntxt = alloc_cntxt_struct();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: arch/x86/kernel/i387.c:107:
+                tsk->thread.cntxt = alloc_cntxt_struct();$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: arch/x86/kernel/process.c:16:
+struct task_struct * alloc_task_struct(struct task_struct *src)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#90: FILE: arch/x86/kernel/process.c:20:
+	if (tsk && src->thread.cntxt) {
[...]
+	} else if (tsk)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/asm-x86/i387.h:28:
+extern union thread_cntxt *alloc_cntxt_struct(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/asm-x86/processor.h:746:
+extern void free_cntxt_struct(struct task_struct *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: include/asm-x86/thread_info.h:9:
+extern struct task_struct * alloc_task_struct(struct task_struct *src);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/asm-x86/thread_info.h:9:
+extern struct task_struct * alloc_task_struct(struct task_struct *src);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 2 warnings, 4 checks, 129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
