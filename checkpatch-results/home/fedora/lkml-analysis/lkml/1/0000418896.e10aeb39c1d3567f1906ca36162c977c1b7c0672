WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#63: FILE: fs/sysfs/bin.c:237:
+	BUG_ON(!kobj || !kobj->sd || !attr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: fs/sysfs/dir.c:448:
+int sysfs_create_dir(struct kobject * kobj,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: fs/sysfs/file.c:452:
+	BUG_ON(!kobj || !kobj->sd || !attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#478: FILE: fs/sysfs/file.c:490:
+	struct dentry * dir = kobj->sd->s_dentry;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#566: FILE: fs/sysfs/group.c:50:
+	BUG_ON(!kobj || !kobj->sd);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#579: FILE: fs/sysfs/group.c:59:
+	if ((error = create_files(sd, grp))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#604: FILE: fs/sysfs/group.c:75:
+		BUG_ON(!sd);

CHECK:BRACES: Unbalanced braces around else statement
#605: FILE: fs/sysfs/group.c:76:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#723: FILE: fs/sysfs/sysfs.h:72:
+extern int sysfs_add_file(struct sysfs_dirent *dir_sd,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: fs/sysfs/sysfs.h:74:
+extern int sysfs_hash_and_remove(struct sysfs_dirent *dir_sd, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#730: FILE: fs/sysfs/sysfs.h:77:
+extern int sysfs_create_subdir(struct kobject *kobj, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#732: FILE: fs/sysfs/sysfs.h:79:
+extern void sysfs_remove_subdir(struct sysfs_dirent *sd);

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#745: FILE: include/linux/kobject.h:58:
+	struct sysfs_dirent	* sd;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: include/linux/kobject.h:74:
+extern int __must_check kobject_shadow_add(struct kobject *kobj,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#802: FILE: include/linux/sysfs.h:143:
+extern struct sysfs_dirent *sysfs_create_shadow_dir(struct kobject *kobj);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#803: FILE: include/linux/sysfs.h:144:
+extern void sysfs_remove_shadow_dir(struct sysfs_dirent *shadow_sd);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#839: FILE: lib/kobject.c:47:
+static int create_dir(struct kobject * kobj, struct sysfs_dirent *shadow_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#867: FILE: lib/kobject.c:364:
+int kobject_shadow_rename(struct kobject * kobj,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418896.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 4 warnings, 8 checks, 733 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418896.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
