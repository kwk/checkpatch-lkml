WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
  (one for sync and one for async) per device and number of requests allocated

WARNING:TYPO_SPELLING: 'deivce' may be misspelled - perhaps 'device'?
#46: 
  Hence there is a need for new interface which can query deivce congestion
                                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'trun' may be misspelled - perhaps 'turn'?
#53: 
  block layer and in trun elevator to find out if the io group the page will
                     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: block/blk-core.c:104:
+int blk_queue_io_group_congested(struct backing_dev_info *bdi, int bdi_bits,
+					struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: block/elevator-fq.c:1096:
+void elv_io_group_congestion_threshold(struct request_queue *q,
+						struct io_group *iog)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: block/elevator-fq.c:1113:
+static inline int elv_is_iog_congested(struct request_queue *q,
+					struct io_group *iog, int sync)

WARNING:SPLIT_STRING: quoted string split across lines
#232: FILE: block/elevator-fq.c:1144:
+		elv_log_iog(&q->elevator->efqd, iog, "iog congested=%d sync=%d"
+			" rl.count[sync]=%d nr_group_requests=%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: block/elevator-fq.c:1151:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: block/elevator-fq.c:1518:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: block/elevator-fq.c:1520:
+struct io_group *io_get_io_group_bio(struct request_queue *q, struct bio *bio,
+					int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: block/elevator-fq.c:1570:
+struct io_group *io_get_io_group(struct request_queue *q, struct page *page,
 					int create)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#384: FILE: block/elevator-fq.c:1576:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: block/elevator-fq.c:2235:
+struct io_group *io_get_io_group_bio(struct request_queue *q, struct bio *bio,
+					int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: block/elevator-fq.c:2242:
+struct io_group *io_get_io_group(struct request_queue *q, struct page *page,
 						int create)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#523: FILE: block/elevator-fq.h:548:
+extern int elv_io_group_congested(struct request_queue *q, struct page *page,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: block/elevator-fq.h:549:
+extern int elv_io_group_congested(struct request_queue *q, struct page *page,
+					int sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: block/elevator-fq.h:682:
+extern struct io_group *io_get_io_group_bio(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: block/elevator-fq.h:683:
+extern struct io_group *io_get_io_group_bio(struct request_queue *q,
 					struct bio *bio, int create);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: drivers/md/dm-table.c:1004:
+int dm_table_any_congested(struct dm_table *t, int bdi_bits, struct page *page,
+				int group)

WARNING:LINE_SPACING: Missing a blank line after declarations
#560: FILE: drivers/md/dm-table.c:1016:
+			struct backing_dev_info *bdi = &q->backing_dev_info;
+			r |= group ? bdi_congested_group(bdi, bdi_bits, page)

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: drivers/md/dm-table.c:1018:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/md/dm.c:998:
+static int dm_any_congested(void *congested_data, int bdi_bits,
+					struct page *page, int group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/md/dm.h:50:
+int dm_table_any_congested(struct dm_table *t, int bdi_bits, struct page *page,
+				int group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/md/multipath.c:196:
+static int multipath_congested(void *data, int bits, struct page *page,
+					int group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: fs/btrfs/disk-io.c:1254:
+static int btrfs_congested_fn(void *congested_data, int bdi_bits,
+					struct page *page, int group)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#813: FILE: fs/btrfs/extent_io.c:2366:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#897: FILE: fs/gfs2/ops_address.c:380:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: include/linux/backing-dev.h:233:
+extern int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#976: FILE: include/linux/backing-dev.h:234:
+extern int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,
+				struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#978: FILE: include/linux/backing-dev.h:236:
+extern int bdi_read_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#979: FILE: include/linux/backing-dev.h:237:
+extern int bdi_read_congested_group(struct backing_dev_info *bdi,
+						struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#981: FILE: include/linux/backing-dev.h:239:
+extern int bdi_or_group_read_congested(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: include/linux/backing-dev.h:240:
+extern int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#984: FILE: include/linux/backing-dev.h:242:
+extern int bdi_write_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: include/linux/backing-dev.h:243:
+extern int bdi_write_congested_group(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: include/linux/backing-dev.h:245:
+extern int bdi_or_group_write_congested(struct backing_dev_info *bdi,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#990: FILE: include/linux/backing-dev.h:248:
+extern int bdi_rw_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: include/linux/backing-dev.h:249:
+extern int bdi_rw_congested_group(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: include/linux/backing-dev.h:252:
+static inline int bdi_congested_group(struct backing_dev_info *bdi,
+					int bdi_bits, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: include/linux/backing-dev.h:258:
+static inline int bdi_read_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: include/linux/backing-dev.h:264:
+static inline int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: include/linux/backing-dev.h:270:
+static inline int bdi_write_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1018: FILE: include/linux/backing-dev.h:276:
+static inline int bdi_or_group_write_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: include/linux/backing-dev.h:282:
+static inline int bdi_rw_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1042: FILE: include/linux/biotrack.h:52:
+extern unsigned long get_blkio_cgroup_id_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1067: FILE: include/linux/blkdev.h:884:
+extern int blk_queue_io_group_congested(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: mm/backing-dev.c:348:
+int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,
+				struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: mm/backing-dev.c:365:
+int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1137: FILE: mm/backing-dev.c:379:
+int bdi_or_group_write_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1195: FILE: mm/page-writeback.c:988:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 45 checks, 945 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
