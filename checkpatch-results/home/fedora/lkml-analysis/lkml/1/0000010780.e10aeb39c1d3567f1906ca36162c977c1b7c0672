CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#41: FILE: arch/x86/kvm/emulate.c:79:
+#define Priv        (1<<27) /* instruction generates #GP if current CPL != 0 */
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Priv>
#41: FILE: arch/x86/kvm/emulate.c:79:
+#define Priv        (1<<27) /* instruction generates #GP if current CPL != 0 */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BIT_MACRO: Prefer using the BIT macro
#41: FILE: arch/x86/kvm/emulate.c:79:
+#define Priv        (1<<27) /* instruction generates #GP if current CPL != 0 */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <ImplicitOps>
#50: FILE: arch/x86/kvm/emulate.c:215:
+	ImplicitOps | Priv, ImplicitOps, Group | Group3_Byte, Group | Group3,

CHECK:CAMELCASE: Avoid CamelCase: <Group>
#50: FILE: arch/x86/kvm/emulate.c:215:
+	ImplicitOps | Priv, ImplicitOps, Group | Group3_Byte, Group | Group3,

CHECK:CAMELCASE: Avoid CamelCase: <Group3_Byte>
#50: FILE: arch/x86/kvm/emulate.c:215:
+	ImplicitOps | Priv, ImplicitOps, Group | Group3_Byte, Group | Group3,

CHECK:CAMELCASE: Avoid CamelCase: <Group3>
#50: FILE: arch/x86/kvm/emulate.c:215:
+	ImplicitOps | Priv, ImplicitOps, Group | Group3_Byte, Group | Group3,

CHECK:CAMELCASE: Avoid CamelCase: <GroupDual>
#60: FILE: arch/x86/kvm/emulate.c:223:
+	0, Group | GroupDual | Group7, 0, 0,

CHECK:CAMELCASE: Avoid CamelCase: <Group7>
#60: FILE: arch/x86/kvm/emulate.c:223:
+	0, Group | GroupDual | Group7, 0, 0,

CHECK:CAMELCASE: Avoid CamelCase: <ModRM>
#63: FILE: arch/x86/kvm/emulate.c:226:
+	0, ImplicitOps | ModRM, 0, 0,

CHECK:CAMELCASE: Avoid CamelCase: <SrcMem>
#85: FILE: arch/x86/kvm/emulate.c:330:
+	0, 0, ModRM | SrcMem | Priv, ModRM | SrcMem | Priv,

CHECK:CAMELCASE: Avoid CamelCase: <SrcMem16>
#88: FILE: arch/x86/kvm/emulate.c:332:
+	SrcMem16 | ModRM | Mov | Priv, SrcMem | ModRM | ByteOp | Priv,

CHECK:CAMELCASE: Avoid CamelCase: <Mov>
#88: FILE: arch/x86/kvm/emulate.c:332:
+	SrcMem16 | ModRM | Mov | Priv, SrcMem | ModRM | ByteOp | Priv,

CHECK:CAMELCASE: Avoid CamelCase: <ByteOp>
#88: FILE: arch/x86/kvm/emulate.c:332:
+	SrcMem16 | ModRM | Mov | Priv, SrcMem | ModRM | ByteOp | Priv,

CHECK:CAMELCASE: Avoid CamelCase: <SrcNone>
#97: FILE: arch/x86/kvm/emulate.c:343:
+	SrcNone | ModRM | Priv, 0, 0, SrcNone | ModRM,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 15 checks, 83 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
