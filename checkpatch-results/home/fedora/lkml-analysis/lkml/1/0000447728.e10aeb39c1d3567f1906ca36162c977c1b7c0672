WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
get_futex_key() does a check against sizeof(u32) regardless of futex being 64bits or not.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#82: 
     (calling find_vma()). This validation tells us if the futex uses
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#83: 
     an inode based store (mapped file), or mm based store (anonymous mem)
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#92: 
                (rollback is value != expected_value, returns EWOULDBLOCK)
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#93: 
        (various loops if test triggers mm faults)
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#99: 
   <block>
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#102: 
 may be done by the futex_wake())
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#108: 
 This means scalability problems if many processes/threads want to use
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#109: 
 futexes at the same time.
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#110: 
 This means NUMA unbalance because this hashtable is located on one node.
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#114: 
 Even if mmap_sem is a rw_semaphore, up_read()/down_read() are doing atomic
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#115: 
 ops on mmap_sem, dirtying cache line :
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#116: 
        - lot of cache line ping pongs on SMP configurations.
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#118: 
 mmap_sem is also extensively used by mm code (page faults, mmap()/munmap())
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#119: 
 Highly threaded processes might suffer from mmap_sem contention.
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#121: 
 mmap_sem is also used by oprofile code. Enabling oprofile hurts threaded
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#125: 
 It's also a cache line ping pong on SMP. It also increases mmap_sem hold time
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#126: 
 because of cache misses.
^

WARNING:TYPO_SPELLING: 'carefuly' may be misspelled - perhaps 'carefully'?
#134: 
optimal performance if carefuly implemented. Time has come for linux to have 
                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#138: 
 - Taking the mmap_sem semaphore, conflicting with other subsystems.
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#139: 
 - Modifying a ref_count on mm or an inode, still conflicting with mm or fs.
^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: kernel/futex.c:210:
+int get_futex_key(void __user *fuaddr, int fsize, struct rw_semaphore *fshared,
+	union futex_key *key)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#353: FILE: kernel/futex.c:314:
+	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
+		case FUT_OFF_INODE:
[...]
+		case FUT_OFF_MMSHARED:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#353: FILE: kernel/futex.c:314:
+	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: kernel/futex.c:321:
+  ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#362: FILE: kernel/futex.c:321:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: kernel/futex.c:321:
+  ^I}$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#374: FILE: kernel/futex.c:333:
+	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
+		case FUT_OFF_INODE:
[...]
+		case FUT_OFF_MMSHARED:

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#374: FILE: kernel/futex.c:333:
+	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: kernel/futex.c:1108:
+^I^I * enough, we need to handle the fault ourselves. Make $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: kernel/futex.c:1113:
+			ret = futex_handle_fault((unsigned long)uaddr2,
+						fshared, attempt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: kernel/futex.c:1992:
+static int futex_unlock_pi(unsigned long __user *uaddr, int futex64,
+	struct rw_semaphore *fshared)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1036: FILE: kernel/futex.c:2503:
+	if (cmd == FUTEX_REQUEUE || cmd == FUTEX_CMP_REQUEUE
+	    || cmd == FUTEX_CMP_REQUEUE_PI)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1065: FILE: kernel/futex.c:2536:
+	if (cmd == FUTEX_REQUEUE || cmd == FUTEX_CMP_REQUEUE
+	    || cmd == FUTEX_CMP_REQUEUE_PI)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447728.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 4 warnings, 26 checks, 829 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447728.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
