WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Variant symlinks add the ability to embed variables in to the contents of symbolic links so their targets can change based on outside sources (user environment, uts, filesystems, etc.)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#37: FILE: include/linux/variant.h:1:
+#ifndef _LINUX_VARIANT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#40: FILE: include/linux/variant.h:4:
+int variant_func_register(int ( *variant_func)(const char *, int, char *, int), int priority, char *name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#40: FILE: include/linux/variant.h:4:
+int variant_func_register(int ( *variant_func)(const char *, int, char *, int), int priority, char *name);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: fs/Kconfig:527:
+config VARIANT
+	bool "Variant symlink support (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	help
+	  If you say Y here, all filesystems will have the ability to
+	  dynamically redirect their symbolic link targets based on embedded
+	  variables. If unsure, say N
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#113: FILE: fs/namei.c:555:
+			path_release(nd);
 			             ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#138: FILE: fs/variant/variant.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#152: FILE: fs/variant/variant.c:15:
+ *   along with this program;  if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#153: FILE: fs/variant/variant.c:16:
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:SPACING: Unnecessary space after function pointer open parenthesis
#182: FILE: fs/variant/variant.c:45:
+	int ( *variant_lookup_func)(const char *key, int keylen, char *dest, int destlen);

ERROR:SPACING: space prohibited after that open parenthesis '('
#182: FILE: fs/variant/variant.c:45:
+	int ( *variant_lookup_func)(const char *key, int keylen, char *dest, int destlen);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#193: FILE: fs/variant/variant.c:56:
+int variant_func_register(int ( *variant_func)(const char *, int, char *, int), int priority, char *name)

ERROR:SPACING: space prohibited after that open parenthesis '('
#193: FILE: fs/variant/variant.c:56:
+int variant_func_register(int ( *variant_func)(const char *, int, char *, int), int priority, char *name)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#201: FILE: fs/variant/variant.c:64:
+	new_module = (struct variant_func_module *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#201: FILE: fs/variant/variant.c:64:
+	new_module = (struct variant_func_module *)kmalloc(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#208: FILE: fs/variant/variant.c:71:
+		new_module->name = (char *)kmalloc(strlen(name)+1, GFP_KERNEL);
 		                                               ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#208: FILE: fs/variant/variant.c:71:
+		new_module->name = (char *)kmalloc(strlen(name)+1, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#273: FILE: fs/variant/variant.c:136:
+	*newpath = (char *)kmalloc(PATH_MAX, GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#274: FILE: fs/variant/variant.c:137:
+	if (*newpath == NULL) {
+		return -ENOMEM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpath"
#274: FILE: fs/variant/variant.c:137:
+	if (*newpath == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#278: FILE: fs/variant/variant.c:141:
+	cur = beg = path;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#281: FILE: fs/variant/variant.c:144:
+		if ((cur[1] == '{') && (end = strchr(cur+2, '}'))) {
 		                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: fs/variant/variant.c:144:
+		if ((cur[1] == '{') && (end = strchr(cur+2, '}'))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#282: FILE: fs/variant/variant.c:145:
+		if ((cur[1] == '{') && (end = strchr(cur+2, '}'))) {
+

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#295: FILE: fs/variant/variant.c:158:
+			varsize = variant_var_lookup(cur + 2, end - cur - 2, tmppath, PATH_MAX - (tmppath - *newpath));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#310: FILE: fs/variant/variant.c:173:
+			cur = beg = end;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375340.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 13 warnings, 7 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375340.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
