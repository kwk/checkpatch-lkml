WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: instrumentation/marker.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#61: FILE: instrumentation/marker.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#62: FILE: instrumentation/marker.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#74: FILE: instrumentation/marker.c:28:
+extern struct marker __stop___markers[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: instrumentation/marker.c:51:
+#define MARKER_TABLE_SIZE (1 << MARKER_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: instrumentation/marker.c:76:
+void __mark_empty_function(const struct marker *mdata, void *private,
+	const char *fmt, ...)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#139: FILE: instrumentation/marker.c:93:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: instrumentation/marker.c:106:
+static int add_marker(const char *name, const char *format,
+	marker_probe_func *probe, void *private)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#159: FILE: instrumentation/marker.c:113:
+	u32 hash = jhash(name, name_len-1, 0);
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#163: FILE: instrumentation/marker.c:117:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#166: FILE: instrumentation/marker.c:120:
+			printk(KERN_NOTICE

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct marker_entry)...)
#176: FILE: instrumentation/marker.c:130:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: instrumentation/marker.c:131:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,
+			GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#181: FILE: instrumentation/marker.c:135:
+	if (format) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: instrumentation/marker.c:139:
+		trace_mark(core_marker_format, "name %s format %s",
+				e->name, e->format);

CHECK:BRACES: Unbalanced braces around else statement
#186: FILE: instrumentation/marker.c:140:
+	} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#207: FILE: instrumentation/marker.c:161:
+	u32 hash = jhash(name, len-1, 0);
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#209: FILE: instrumentation/marker.c:163:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct marker_entry)...)
#233: FILE: instrumentation/marker.c:187:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: instrumentation/marker.c:188:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,
+			GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: instrumentation/marker.c:202:
+	trace_mark(core_marker_format, "name %s format %s",
+			e->name, e->format);

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: instrumentation/marker.c:212:
+	int ret;
+	WARN_ON(strcmp((*entry)->name, elem->name) != 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#262: FILE: instrumentation/marker.c:216:
+			printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#264: FILE: instrumentation/marker.c:218:
+				"Format mismatch for probe %s "
+				"(%s), marker (%s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: instrumentation/marker.c:263:
+void marker_update_probe_range(struct marker *begin,
+	struct marker *end, struct module *probe_module,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: instrumentation/marker.c:299:
+	marker_update_probe_range(__start___markers,
+			__stop___markers, probe_module, &refcount);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#349: FILE: instrumentation/marker.c:303:
+		synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: instrumentation/marker.c:320:
+int marker_probe_register(const char *name, const char *format,
+			marker_probe_func *probe, void *private)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#378: FILE: instrumentation/marker.c:332:
+		synchronize_sched();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#559: FILE: instrumentation/marker.c:513:
+	u32 hash = jhash(name, name_len-1, 0);
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#562: FILE: instrumentation/marker.c:516:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363822.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 21 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363822.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
