WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#113: FILE: kernel/trace/Kconfig:241:
+config SYSPROF_TRACER
+	bool "Sysprof Tracer"
+	depends on X86
+	select GENERIC_TRACER
+	select CONTEXT_SWITCH_TRACER
+	help
+	  This tracer provides the trace needed by the 'Sysprof' userspace
+	  tool.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:LONG_LINE: line length of 416 exceeds 100 columns
#235: FILE: init/main.c:939:
+#define DEBUG_COUNT (defined(CONFIG_DEBUG_RT_MUTEXES) + defined(CONFIG_IRQSOFF_TRACER) + defined(CONFIG_PREEMPT_TRACER) + defined(CONFIG_STACK_TRACER) + defined(CONFIG_INTERRUPT_OFF_HIST) + defined(CONFIG_PREEMPT_OFF_HIST) + defined(CONFIG_WAKEUP_LATENCY_HIST) + defined(CONFIG_DEBUG_SLAB) + defined(CONFIG_DEBUG_PAGEALLOC) + defined(CONFIG_LOCKDEP) + (defined(CONFIG_FTRACE) - defined(CONFIG_FTRACE_MCOUNT_RECORD)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#248: FILE: init/main.c:963:
+	printk(KERN_ERR "*        CONFIG_INTERRUPT_OFF_HIST                                          *\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#251: FILE: init/main.c:966:
+	printk(KERN_ERR "*        CONFIG_PREEMPT_OFF_HIST                                            *\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#277: FILE: kernel/trace/latency_hist.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#278: FILE: kernel/trace/latency_hist.c:2:
+ * kernel/trace/latency_hist.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#299: FILE: kernel/trace/latency_hist.c:23:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: kernel/trace/latency_hist.c:86:
+static notrace void probe_wakeup_latency_hist_start(struct rq *rq,
+    struct task_struct *p, int success);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: kernel/trace/latency_hist.c:86:
+    struct task_struct *p, int success);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: kernel/trace/latency_hist.c:88:
+static notrace void probe_wakeup_latency_hist_stop(struct rq *rq,
+    struct task_struct *prev, struct task_struct *next);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: kernel/trace/latency_hist.c:88:
+    struct task_struct *prev, struct task_struct *next);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#369: FILE: kernel/trace/latency_hist.c:93:
+};
+static struct task_struct *ts;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#376: FILE: kernel/trace/latency_hist.c:100:
+};
+static DEFINE_PER_CPU(struct maxlatproc_data, wakeup_maxlatproc);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#377: FILE: kernel/trace/latency_hist.c:101:
+static unsigned wakeup_prio = (unsigned)-1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#377: FILE: kernel/trace/latency_hist.c:101:
+static unsigned wakeup_prio = (unsigned)-1;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#387: FILE: kernel/trace/latency_hist.c:111:
+	if (cpu < 0 || cpu >= NR_CPUS || latency_type < 0 ||

CHECK:BRACES: braces {} should be used on all arms of this statement
#427: FILE: kernel/trace/latency_hist.c:151:
+	if (latency < my_hist->min_lat)
[...]
+	else if (latency > my_hist->max_lat) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#446: FILE: kernel/trace/latency_hist.c:170:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#461: FILE: kernel/trace/latency_hist.c:185:
+		if (likely(my_hist->total_samples)) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: kernel/trace/latency_hist.c:188:
+			    div64_u64(my_hist->accumulate_lat,
+			    my_hist->total_samples);

CHECK:BRACES: Unbalanced braces around else statement
#466: FILE: kernel/trace/latency_hist.c:190:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#474: FILE: kernel/trace/latency_hist.c:198:
+			   "#There are %llu samples greater or equal"
+			   " than %d microseconds\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#510: FILE: kernel/trace/latency_hist.c:234:
+	int index = *(loff_t *) p;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#517: FILE: kernel/trace/latency_hist.c:241:
+static struct seq_operations latency_hist_seq_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#531: FILE: kernel/trace/latency_hist.c:255:
+		struct seq_file *seq = file->private_data;
+		seq->private = inode->i_private;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#536: FILE: kernel/trace/latency_hist.c:260:
+static struct file_operations latency_hist_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: kernel/trace/latency_hist.c:283:
+latency_hist_reset(struct file *file, const char __user *a,
+			   size_t size, loff_t *off)

CHECK:SPACING: No space is necessary after a cast
#563: FILE: kernel/trace/latency_hist.c:287:
+	int latency_type = (int) file->private_data;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#566: FILE: kernel/trace/latency_hist.c:290:
+	switch (latency_type) {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#600: FILE: kernel/trace/latency_hist.c:324:
+			mp->prio = mp->pid = mp->latency = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#613: FILE: kernel/trace/latency_hist.c:337:
+latency_hist_show_pid(struct file *filp, char __user *ubuf,
                                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#626: FILE: kernel/trace/latency_hist.c:350:
+latency_hist_pid(struct file *filp, const char __user *ubuf,
                               ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#640: FILE: kernel/trace/latency_hist.c:364:
+	if (strict_strtoul(buf, 10, &pid))

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#648: FILE: kernel/trace/latency_hist.c:372:
+latency_hist_show_maxlatproc(struct file *filp, char __user *ubuf,
                                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: kernel/trace/latency_hist.c:373:
+latency_hist_show_maxlatproc(struct file *filp, char __user *ubuf,
+		      size_t cnt, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: kernel/trace/latency_hist.c:381:
+	r = snprintf(buf, sizeof(buf), "%5d %3d %ld %s\n",
+	    mp->pid, mp->prio, mp->latency, mp->comm);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#680: FILE: kernel/trace/latency_hist.c:404:
+latency_hist_show_enable(struct file *filp, char __user *ubuf,
                                       ^^^^

CHECK:SPACING: No space is necessary after a cast
#684: FILE: kernel/trace/latency_hist.c:408:
+	struct enable_data *ed = (struct enable_data *) filp->private_data;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#694: FILE: kernel/trace/latency_hist.c:418:
+latency_hist_enable(struct file *filp, const char __user *ubuf,
                                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: kernel/trace/latency_hist.c:419:
+latency_hist_enable(struct file *filp, const char __user *ubuf,
+			   size_t cnt, loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#699: FILE: kernel/trace/latency_hist.c:423:
+	struct enable_data *ed = (struct enable_data *) filp->private_data;

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#709: FILE: kernel/trace/latency_hist.c:433:
+	if (strict_strtol(buf, 10, &enable))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#720: FILE: kernel/trace/latency_hist.c:444:
+			ret = register_trace_sched_wakeup(

WARNING:SPLIT_STRING: quoted string split across lines
#724: FILE: kernel/trace/latency_hist.c:448:
+				pr_info("wakeup trace: Couldn't assign "
+				    "probe_wakeup_latency_hist_start "

WARNING:SPLIT_STRING: quoted string split across lines
#725: FILE: kernel/trace/latency_hist.c:449:
+				    "probe_wakeup_latency_hist_start "
+				    "to trace_sched_wakeup\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#728: FILE: kernel/trace/latency_hist.c:452:
+			ret = register_trace_sched_wakeup_new(

WARNING:SPLIT_STRING: quoted string split across lines
#732: FILE: kernel/trace/latency_hist.c:456:
+				pr_info("wakeup trace: Couldn't assign "
+				    "probe_wakeup_latency_hist_start "

WARNING:SPLIT_STRING: quoted string split across lines
#733: FILE: kernel/trace/latency_hist.c:457:
+				    "probe_wakeup_latency_hist_start "
+				    "to trace_sched_wakeup_new\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#734: FILE: kernel/trace/latency_hist.c:458:
+				unregister_trace_sched_wakeup(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#738: FILE: kernel/trace/latency_hist.c:462:
+			ret = register_trace_sched_switch(

WARNING:SPLIT_STRING: quoted string split across lines
#742: FILE: kernel/trace/latency_hist.c:466:
+				pr_info("wakeup trace: Couldn't assign "
+				    "probe_wakeup_latency_hist_stop "

WARNING:SPLIT_STRING: quoted string split across lines
#743: FILE: kernel/trace/latency_hist.c:467:
+				    "probe_wakeup_latency_hist_stop "
+				    "to trace_sched_switch\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#744: FILE: kernel/trace/latency_hist.c:468:
+				unregister_trace_sched_wakeup(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#746: FILE: kernel/trace/latency_hist.c:470:
+				unregister_trace_sched_switch(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#752: FILE: kernel/trace/latency_hist.c:476:
+			ret = register_trace_preemptirqsoff_hist(

WARNING:SPLIT_STRING: quoted string split across lines
#756: FILE: kernel/trace/latency_hist.c:480:
+				pr_info("wakeup trace: Couldn't assign "
+				    "probe_preemptirqsoff_hist "

WARNING:SPLIT_STRING: quoted string split across lines
#757: FILE: kernel/trace/latency_hist.c:481:
+				    "probe_preemptirqsoff_hist "
+				    "to trace_preemptirqsoff_hist\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#769: FILE: kernel/trace/latency_hist.c:493:
+			unregister_trace_sched_wakeup(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#771: FILE: kernel/trace/latency_hist.c:495:
+			unregister_trace_sched_wakeup_new(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#773: FILE: kernel/trace/latency_hist.c:497:
+			unregister_trace_sched_switch(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#776: FILE: kernel/trace/latency_hist.c:500:
+			wakeup_prio = (unsigned)-1;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#779: FILE: kernel/trace/latency_hist.c:503:
+			unregister_trace_preemptirqsoff_hist(

WARNING:CONST_STRUCT: struct file_operations should normally be const
#801: FILE: kernel/trace/latency_hist.c:525:
+static struct file_operations latency_hist_reset_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#806: FILE: kernel/trace/latency_hist.c:530:
+static struct file_operations latency_hist_pid_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#812: FILE: kernel/trace/latency_hist.c:536:
+static struct file_operations latency_hist_maxlatproc_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#817: FILE: kernel/trace/latency_hist.c:541:
+static struct file_operations latency_hist_enable_fops = {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#829: FILE: kernel/trace/latency_hist.c:553:
+		cycle_t uninitialized_var(start);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'start' should also have an identifier name
#829: FILE: kernel/trace/latency_hist.c:553:
+		cycle_t uninitialized_var(start);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#865: FILE: kernel/trace/latency_hist.c:589:
+		cycle_t uninitialized_var(stop);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'stop' should also have an identifier name
#865: FILE: kernel/trace/latency_hist.c:589:
+		cycle_t uninitialized_var(stop);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: kernel/trace/latency_hist.c:603:
+				latency_hist(IRQSOFF_LATENCY, cpu, latency,
+				    NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: kernel/trace/latency_hist.c:621:
+				latency_hist(PREEMPTOFF_LATENCY, cpu, latency,
+				    NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: kernel/trace/latency_hist.c:639:
+				latency_hist(PREEMPTIRQSOFF_LATENCY, cpu,
+				    latency, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: kernel/trace/latency_hist.c:654:
+notrace void probe_wakeup_latency_hist_start(struct rq *rq,
+    struct task_struct *p, int success)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: kernel/trace/latency_hist.c:654:
+    struct task_struct *p, int success)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: kernel/trace/latency_hist.c:681:
+notrace void probe_wakeup_latency_hist_stop(struct rq *rq,
+    struct task_struct *prev, struct task_struct *next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: kernel/trace/latency_hist.c:681:
+    struct task_struct *prev, struct task_struct *next)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#979: FILE: kernel/trace/latency_hist.c:703:
+	wakeup_prio = (unsigned)-1;

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1098: FILE: kernel/trace/latency_hist.c:822:
+__initcall(latency_hist_init);

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#1138: FILE: Documentation/trace/histograms.txt:35:
+Effective latencies are actually occuring during wakeup of a process. To
                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#1259: FILE: Documentation/trace/histograms.txt:156:
+These data are also reset when the wakeup histogram ist reset.
                                                     ^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1265: FILE: include/trace/events/hist.h:1:
+#undef TRACE_SYSTEM

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1275: FILE: include/trace/events/hist.h:11:
+#define trace_preemptirqsoff_hist(a,b)
                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: include/trace/events/hist.h:14:
+TRACE_EVENT(preemptirqsoff_hist,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1283: FILE: include/trace/events/hist.h:19:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#1284: FILE: include/trace/events/hist.h:20:
+		__field(	int,	reason	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1284: FILE: include/trace/events/hist.h:20:
+		__field(	int,	reason	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1285: FILE: include/trace/events/hist.h:21:
+		__field(	int,	starthist	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1285: FILE: include/trace/events/hist.h:21:
+		__field(	int,	starthist	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1288: FILE: include/trace/events/hist.h:24:
+	TP_fast_assign(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1307: FILE: include/trace/events/latency_hist.h:1:
+#ifndef _LATENCY_HIST_H

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(actions)
#1330: FILE: include/trace/events/latency_hist.h:24:
+	if (action >= 0 && action <= sizeof(actions)/sizeof(actions[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1330: FILE: include/trace/events/latency_hist.h:24:
+	if (action >= 0 && action <= sizeof(actions)/sizeof(actions[0]))
 	                                            ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1332: FILE: include/trace/events/latency_hist.h:26:
+	return("unknown");

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1345: FILE: include/linux/sched.h:1972:
+extern struct task_struct *rq_curr(struct rq *rq);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000072505.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 50 warnings, 39 checks, 1245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000072505.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
