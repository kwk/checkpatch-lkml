WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
Simply white-out a given directory entry. This functionality is usually used

CHECK:LINE_SPACING: Please don't use multiple blank lines
#86: FILE: fs/namei.c:2172:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#109: FILE: fs/namei.c:2195:
+	if (isdir) {
[...]
+	} else if (S_ISDIR(victim->d_inode->i_mode))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#148: FILE: fs/namei.c:2234:
+	BUG_ON(dentry->d_parent->d_inode != dir);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#159: FILE: fs/namei.c:2245:
+		if (d_mountpoint(dentry))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#161: FILE: fs/namei.c:2247:
+		else {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#225: FILE: include/linux/fs.h:208:
+#define MS_WHITEOUT	(1<<26) /* fs does support white-out filetype */
                    	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#225: FILE: include/linux/fs.h:208:
+#define MS_WHITEOUT	(1<<26) /* fs does support white-out filetype */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: include/linux/fs.h:1426:
+extern int vfs_whiteout(struct inode *, struct dentry *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#233: FILE: include/linux/fs.h:1426:
+extern int vfs_whiteout(struct inode *, struct dentry *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#233: FILE: include/linux/fs.h:1426:
+extern int vfs_whiteout(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: include/linux/fs.h:1426:
+extern int vfs_whiteout(struct inode *, struct dentry *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#241: FILE: include/linux/fs.h:1531:
+	int (*whiteout) (struct inode *, struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#241: FILE: include/linux/fs.h:1531:
+	int (*whiteout) (struct inode *, struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#241: FILE: include/linux/fs.h:1531:
+	int (*whiteout) (struct inode *, struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#241: FILE: include/linux/fs.h:1531:
+	int (*whiteout) (struct inode *, struct dentry *, struct dentry *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 7 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
