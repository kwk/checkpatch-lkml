WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#125: FILE: fs/notify/fsnotify.c:54:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#172: FILE: fs/notify/fsnotify.h:75:
+	/* indication one of the users wants this object dead.  Kill will happen when refcnt hits 0 */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: fs/notify/fsnotify.h:94:
+extern void fsnotify_mark_get(struct fsnotify_mark_entry *entry);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#188: FILE: fs/notify/fsnotify.h:95:
+extern void fsnotify_mark_put(struct fsnotify_mark_entry *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: fs/notify/fsnotify.h:96:
+extern void fsnotify_clear_mark_group(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: fs/notify/fsnotify.h:97:
+extern void fsnotify_kill_mark_inode(struct fsnotify_mark_entry *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: fs/notify/fsnotify.h:98:
+extern void fsnotify_clear_mark_inode(struct inode *inode, unsigned long mask, unsigned int flags);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#218: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#223: FILE: fs/notify/inode_mark.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#238: FILE: fs/notify/inode_mark.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#249: FILE: fs/notify/inode_mark.c:27:
+#include <asm/atomic.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!entry->refcnt'
#288: FILE: fs/notify/inode_mark.c:66:
+	if ((!entry->refcnt) && (entry->killme)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->killme'
#288: FILE: fs/notify/inode_mark.c:66:
+	if ((!entry->refcnt) && (entry->killme)) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#385: FILE: fs/notify/inode_mark.c:163:
+struct fsnotify_mark_entry *fsnotify_mark_add(struct fsnotify_group *group, struct inode *inode, unsigned long mask)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: fs/notify/inode_mark.c:219:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#444: FILE: fs/notify/inode_mark.c:222:
+	fsnotify_mark_kmem_cache = kmem_cache_create("fsnotify_mark_entry", sizeof(struct fsnotify_mark_entry), 0, SLAB_PANIC, NULL);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#497: FILE: include/linux/fsnotify_backend.h:47:
+	void (*mark_clear_inode)(struct fsnotify_mark_entry *entry, struct inode *inode, unsigned long mask, unsigned int flags);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#498: FILE: include/linux/fsnotify_backend.h:48:
+	int (*should_send_event)(struct fsnotify_group *group, struct inode *inode, unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: include/linux/fsnotify_backend.h:75:
+extern void __fsnotify_inode_delete(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#525: FILE: include/linux/fsnotify_backend.h:83:
+extern void fsnotify_recalc_inode_mask(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/linux/fsnotify_backend.h:84:
+extern void fsnotify_mark_get(struct fsnotify_mark_entry *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: include/linux/fsnotify_backend.h:85:
+extern void fsnotify_mark_put(struct fsnotify_mark_entry *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: include/linux/fsnotify_backend.h:86:
+extern void fsnotify_clear_mark_group(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#529: FILE: include/linux/fsnotify_backend.h:87:
+extern void fsnotify_kill_mark_inode(struct fsnotify_mark_entry *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#530: FILE: include/linux/fsnotify_backend.h:88:
+extern void fsnotify_clear_mark_inode(struct inode *inode, unsigned long mask, unsigned int flags);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#531: FILE: include/linux/fsnotify_backend.h:89:
+extern struct fsnotify_mark_entry *fsnotify_mark_add(struct fsnotify_group *group, struct inode *inode, unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: include/linux/fsnotify_backend.h:89:
+extern struct fsnotify_mark_entry *fsnotify_mark_add(struct fsnotify_group *group, struct inode *inode, unsigned long mask);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 16 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
