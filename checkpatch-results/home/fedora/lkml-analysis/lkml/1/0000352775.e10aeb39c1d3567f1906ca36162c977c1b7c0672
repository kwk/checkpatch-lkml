WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: arch/x86/kernel/ptrace.c:1:
+/* By Ross Biro 1/23/92 */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#84: FILE: arch/x86/kernel/ptrace.c:19:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#85: FILE: arch/x86/kernel/ptrace.c:20:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#87: FILE: arch/x86/kernel/ptrace.c:22:
+#include <asm/processor.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: arch/x86/kernel/ptrace.c:49:
+static int putreg(struct task_struct *child,
+	unsigned long regno, unsigned long value)

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: arch/x86/kernel/ptrace.c:52:
+	struct pt_regs *regs = task_pt_regs(child);
+	regno >>= 2;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#187: FILE: arch/x86/kernel/ptrace.c:122:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#224: FILE: arch/x86/kernel/ptrace.c:159:
+	case 0:		child->thread.debugreg0 = data; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#225: FILE: arch/x86/kernel/ptrace.c:160:
+	case 1:		child->thread.debugreg1 = data; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#226: FILE: arch/x86/kernel/ptrace.c:161:
+	case 2:		child->thread.debugreg2 = data; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#227: FILE: arch/x86/kernel/ptrace.c:162:
+	case 3:		child->thread.debugreg3 = data; break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#266: FILE: arch/x86/kernel/ptrace.c:201:
+			if ((0x5f54 >> ((data >> (16 + 4*i)) & 0xf)) & 1)
 			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#292: FILE: arch/x86/kernel/ptrace.c:227:
+	struct user * dummy = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#313: FILE: arch/x86/kernel/ptrace.c:248:
+		if(addr < FRAME_SIZE*sizeof(long))
 		                    ^

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: arch/x86/kernel/ptrace.c:248:
+		if(addr < FRAME_SIZE*sizeof(long))

CHECK:SPACING: No space is necessary after a cast
#315: FILE: arch/x86/kernel/ptrace.c:250:
+		if(addr >= (long) &dummy->u_debugreg[0] &&

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: arch/x86/kernel/ptrace.c:250:
+		if(addr >= (long) &dummy->u_debugreg[0] &&

CHECK:SPACING: No space is necessary after a cast
#316: FILE: arch/x86/kernel/ptrace.c:251:
+		   addr <= (long) &dummy->u_debugreg[7]){

ERROR:SPACING: space required before the open brace '{'
#316: FILE: arch/x86/kernel/ptrace.c:251:
+		   addr <= (long) &dummy->u_debugreg[7]){

CHECK:SPACING: No space is necessary after a cast
#317: FILE: arch/x86/kernel/ptrace.c:252:
+			addr -= (long) &dummy->u_debugreg[0];

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#337: FILE: arch/x86/kernel/ptrace.c:272:
+		if (addr < FRAME_SIZE*sizeof(long)) {
 		                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#342: FILE: arch/x86/kernel/ptrace.c:277:
+		/* We need to be very careful here.  We implicitly
+		   want to modify a portion of the task_struct, and we

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#344: FILE: arch/x86/kernel/ptrace.c:279:
+		   to modify. */

WARNING:TABSTOP: Statements should start on a tabstop
#347: FILE: arch/x86/kernel/ptrace.c:282:
+		  if(addr >= (long) &dummy->u_debugreg[0] &&

CHECK:SPACING: No space is necessary after a cast
#347: FILE: arch/x86/kernel/ptrace.c:282:
+		  if(addr >= (long) &dummy->u_debugreg[0] &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 26)
#347: FILE: arch/x86/kernel/ptrace.c:282:
+		  if(addr >= (long) &dummy->u_debugreg[0] &&
[...]
+			  addr -= (long) &dummy->u_debugreg;

ERROR:SPACING: space required before the open parenthesis '('
#347: FILE: arch/x86/kernel/ptrace.c:282:
+		  if(addr >= (long) &dummy->u_debugreg[0] &&

CHECK:SPACING: No space is necessary after a cast
#348: FILE: arch/x86/kernel/ptrace.c:283:
+		     addr <= (long) &dummy->u_debugreg[7]){

ERROR:SPACING: space required before the open brace '{'
#348: FILE: arch/x86/kernel/ptrace.c:283:
+		     addr <= (long) &dummy->u_debugreg[7]){

CHECK:SPACING: No space is necessary after a cast
#349: FILE: arch/x86/kernel/ptrace.c:284:
+			  addr -= (long) &dummy->u_debugreg;

WARNING:TABSTOP: Statements should start on a tabstop
#352: FILE: arch/x86/kernel/ptrace.c:287:
+		  }

WARNING:TABSTOP: Statements should start on a tabstop
#353: FILE: arch/x86/kernel/ptrace.c:288:
+		  break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: arch/x86/kernel/ptrace.c:291:
+^I  ^Iif (!access_ok(VERIFY_WRITE, datap, FRAME_SIZE*sizeof(long))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#356: FILE: arch/x86/kernel/ptrace.c:291:
+^I  ^Iif (!access_ok(VERIFY_WRITE, datap, FRAME_SIZE*sizeof(long))) {$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#356: FILE: arch/x86/kernel/ptrace.c:291:
+	  	if (!access_ok(VERIFY_WRITE, datap, FRAME_SIZE*sizeof(long))) {
 	  	                                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#360: FILE: arch/x86/kernel/ptrace.c:295:
+		for ( i = 0; i < FRAME_SIZE*sizeof(long); i += sizeof(long) ) {
 		                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#360: FILE: arch/x86/kernel/ptrace.c:295:
+		for ( i = 0; i < FRAME_SIZE*sizeof(long); i += sizeof(long) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#360: FILE: arch/x86/kernel/ptrace.c:295:
+		for ( i = 0; i < FRAME_SIZE*sizeof(long); i += sizeof(long) ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: arch/x86/kernel/ptrace.c:305:
+^I  ^Iif (!access_ok(VERIFY_READ, datap, FRAME_SIZE*sizeof(long))) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: arch/x86/kernel/ptrace.c:305:
+^I  ^Iif (!access_ok(VERIFY_READ, datap, FRAME_SIZE*sizeof(long))) {$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#370: FILE: arch/x86/kernel/ptrace.c:305:
+	  	if (!access_ok(VERIFY_READ, datap, FRAME_SIZE*sizeof(long))) {
 	  	                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#374: FILE: arch/x86/kernel/ptrace.c:309:
+		for ( i = 0; i < FRAME_SIZE*sizeof(long); i += sizeof(long) ) {
 		                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#374: FILE: arch/x86/kernel/ptrace.c:309:
+		for ( i = 0; i < FRAME_SIZE*sizeof(long); i += sizeof(long) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#374: FILE: arch/x86/kernel/ptrace.c:309:
+		for ( i = 0; i < FRAME_SIZE*sizeof(long); i += sizeof(long) ) {

CHECK:SPACING: No space is necessary after a cast
#435: FILE: arch/x86/kernel/ptrace.c:370:
+					 (struct user_desc __user *) data);

CHECK:SPACING: No space is necessary after a cast
#442: FILE: arch/x86/kernel/ptrace.c:377:
+					 (struct user_desc __user *) data, 0);

CHECK:SPACING: No space is necessary after a cast
#465: FILE: arch/x86/kernel/ptrace.c:400:
+	info.si_addr = user_mode_vm(regs) ? (void __user *) regs->ip : NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: arch/x86/kernel/ptrace.c:427:
+			audit_syscall_exit(AUDITSC_RESULT(regs->ax),
+						regs->ax);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#512: FILE: arch/x86/kernel/ptrace.c:447:
+	 * here. We have to check this and return */

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: arch/x86/kernel/ptrace.c:455:
+ ^Iif (!test_thread_flag(TIF_SYSCALL_TRACE) && !is_sysemu)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#520: FILE: arch/x86/kernel/ptrace.c:455:
+ ^Iif (!test_thread_flag(TIF_SYSCALL_TRACE) && !is_sysemu)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: arch/x86/kernel/ptrace.c:455:
+ ^Iif (!test_thread_flag(TIF_SYSCALL_TRACE) && !is_sysemu)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#524: FILE: arch/x86/kernel/ptrace.c:459:
+	/* the 0x80 provides a way for the tracing parent to distinguish
+	   between a syscall stop and SIGTRAP delivery */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#524: FILE: arch/x86/kernel/ptrace.c:459:
+	   between a syscall stop and SIGTRAP delivery */

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#526: FILE: arch/x86/kernel/ptrace.c:461:
+	ptrace_notify(SIGTRAP | ((current->ptrace & PT_TRACESYSGOOD) ? 0x80:0));
 	                                                                   ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 17 warnings, 22 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
