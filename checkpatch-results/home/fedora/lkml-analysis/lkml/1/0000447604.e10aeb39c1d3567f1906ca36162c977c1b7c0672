WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
> > Christoph if you could let us know which benchmarks you are seeing gains

WARNING:TYPO_SPELLING: 'folowing' may be misspelled - perhaps 'following'?
#91: 
Then add the folowing to the code:
             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: include/linux/perf.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#202: FILE: kernel/perf.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#261: FILE: kernel/perf.c:60:
+		printk(KERN_CRIT "pc_throughput: item (%d) out of range\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pc_throughput', this function's name, in a string
#261: FILE: kernel/perf.c:60:
+		printk(KERN_CRIT "pc_throughput: item (%d) out of range\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: kernel/perf.c:61:
+		printk(KERN_CRIT "pc_throughput: item (%d) out of range\n",
+			pc->item);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#275: FILE: kernel/perf.c:74:
+		printk(KERN_ERR "perfcount %s: invalid time difference.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: kernel/perf.c:75:
+		printk(KERN_ERR "perfcount %s: invalid time difference.\n",
+			var_id[pc->item]);

WARNING:RETURN_VOID: void function return statements are not generally useful
#299: FILE: kernel/perf.c:98:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#304: FILE: kernel/perf.c:103:
+	c->events =0;
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#305: FILE: kernel/perf.c:104:
+	c->time =0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#306: FILE: kernel/perf.c:105:
+	c->maxtime =0;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#307: FILE: kernel/perf.c:106:
+	c->mintime =0;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#308: FILE: kernel/perf.c:107:
+	c->bytes =0;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#309: FILE: kernel/perf.c:108:
+	c->minbytes =0;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#310: FILE: kernel/perf.c:109:
+	c->maxbytes =0;
 	            ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#313: FILE: kernel/perf.c:112:
+static void perfcount_reset(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: kernel/perf.c:118:
+^I^I ^Ireset_perfcount_item($

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: kernel/perf.c:118:
+^I^I ^Ireset_perfcount_item($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#319: FILE: kernel/perf.c:118:
+		 	reset_perfcount_item(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#325: FILE: kernel/perf.c:124:
+	const char * s;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#338: FILE: kernel/perf.c:137:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#363: FILE: kernel/perf.c:162:
+	unsigned n = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#364: FILE: kernel/perf.c:163:
+	unsigned rem = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#365: FILE: kernel/perf.c:164:
+	unsigned last_divisor = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: kernel/perf.c:197:
+static void pc_print(struct seq_file *s, const struct unit *u,
+	unsigned long count, unsigned long sum,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: kernel/perf.c:201:
+	seq_putc(s,'(');
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: kernel/perf.c:203:
+	seq_putc(s,'/');
 	          ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#406: FILE: kernel/perf.c:205:
+		pval(s, (sum + count / 2 ) / count, u);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: kernel/perf.c:208:
+	seq_putc(s,'/');
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#411: FILE: kernel/perf.c:210:
+	seq_putc(s,')');
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: kernel/perf.c:213:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#421: FILE: kernel/perf.c:220:
+	if (cpu >= 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#423: FILE: kernel/perf.c:222:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: kernel/perf.c:224:
+		memcpy(&summary, &per_cpu(perf_counters, 0)[counter],
+			sizeof(summary));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#438: FILE: kernel/perf.c:237:
+			if (summary.mintime == 0 ||
[...]
+					summary.mintime = c->mintime;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: kernel/perf.c:238:
+			if (summary.mintime == 0 ||
+				(c->mintime != 0 &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#446: FILE: kernel/perf.c:245:
+			if (summary.minbytes == 0 ||
[...]
+					summary.minbytes = c->minbytes;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: kernel/perf.c:246:
+			if (summary.minbytes == 0 ||
+				(c->minbytes != 0 &&

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#451: FILE: kernel/perf.c:250:
+
+		}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: kernel/perf.c:259:
+		seq_putc(s,' ');
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#469: FILE: kernel/perf.c:268:
+	return (*pos < NR_PC_ITEMS) ? (void *)(*pos +1) : NULL;
 	                                            ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#482: FILE: kernel/perf.c:281:
+struct seq_operations perf_data_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#500: FILE: kernel/perf.c:299:
+static struct file_operations perf_data_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: kernel/perf.c:307:
+static int perf_reset_write(struct file *file, const char __user *buffer,
+	unsigned long count, void *data)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#514: FILE: kernel/perf.c:313:
+static __init int init_perfcounter(void) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#523: FILE: kernel/perf.c:322:
+	perf_reset = create_proc_entry("reset", S_IWUGO, proc_perf);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#526: FILE: kernel/perf.c:325:
+	perf_all = create_proc_entry("all", S_IRUGO, proc_perf);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#535: FILE: kernel/perf.c:334:
+		p = create_proc_entry(name, S_IRUGO, proc_perf);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#545: FILE: kernel/perf.c:344:
+__initcall(init_perfcounter);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#694: FILE: mm/memory.c:2529:
 	if (pgd_present(*pgd))		/* Another has populated it */
+	{

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: mm/memory.c:2534:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#717: FILE: mm/memory.c:2557:
 	if (pud_present(*pud))		/* Another has populated it */
+	{

CHECK:BRACES: Unbalanced braces around else statement
#723: FILE: mm/memory.c:2562:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#726: FILE: mm/memory.c:2565:
 	if (pgd_present(*pud))		/* Another has populated it */
+	{

CHECK:BRACES: Unbalanced braces around else statement
#732: FILE: mm/memory.c:2570:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447604.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 20 warnings, 17 checks, 568 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447604.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
