WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Successfully tested with the mce v2 transceiver and remote that shipped with a

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#63: FILE: drivers/input/lirc/Kconfig:14:
+config LIRC_MCEUSB
+	tristate "Windows Media Center Ed. USB IR Transceiver"
+	depends on LIRC_DEV && USB
+	help
+	  Driver for Windows Media Center Ed. USB IR Transceivers
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: drivers/input/lirc/lirc_mceusb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: drivers/input/lirc/lirc_mceusb.c:38:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#122: FILE: drivers/input/lirc/lirc_mceusb.c:39:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#168: FILE: drivers/input/lirc/lirc_mceusb.c:85:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#315: FILE: drivers/input/lirc/lirc_mceusb.c:232:
+struct mceusb_dev {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#349: FILE: drivers/input/lirc/lirc_mceusb.c:266:
+	struct mutex lock;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#396: FILE: drivers/input/lirc/lirc_mceusb.c:313:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: drivers/input/lirc/lirc_mceusb.c:338:
+			usb_fill_int_urb(async_urb, ir->usbdev,
+				usb_sndintpipe(ir->usbdev,

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#422: FILE: drivers/input/lirc/lirc_mceusb.c:339:
+					       ep->bEndpointAddress),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#424: FILE: drivers/input/lirc/lirc_mceusb.c:341:
+				(usb_complete_t) usb_async_callback,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#425: FILE: drivers/input/lirc/lirc_mceusb.c:342:
+				ir, ep->bInterval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: drivers/input/lirc/lirc_mceusb.c:347:
+			usb_fill_int_urb(async_urb, ir->usbdev,
+				usb_rcvintpipe(ir->usbdev,

CHECK:SPACING: No space is necessary after a cast
#433: FILE: drivers/input/lirc/lirc_mceusb.c:350:
+				(usb_complete_t) usb_async_callback,

WARNING:SPLIT_STRING: quoted string split across lines
#471: FILE: drivers/input/lirc/lirc_mceusb.c:388:
+			dev_info(ir->d->dev, "device is opened, will "
+				 "unregister on close\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#501: FILE: drivers/input/lirc/lirc_mceusb.c:418:
+		printk(KERN_WARNING DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#522: FILE: drivers/input/lirc/lirc_mceusb.c:439:
+		printk(KERN_WARNING DRIVER_NAME

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: drivers/input/lirc/lirc_mceusb.c:457:
+		lirc_buffer_write(ir->d->rbuf,
+				    (unsigned char *) &ir->lircdata);

CHECK:SPACING: No space is necessary after a cast
#540: FILE: drivers/input/lirc/lirc_mceusb.c:457:
+				    (unsigned char *) &ir->lircdata);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 8)
#601: FILE: drivers/input/lirc/lirc_mceusb.c:518:
+		} else if (ir->buf_in[i] == MCE_CONTROL_HEADER) {
[...]
+	Uncomment this if the last 100ms "infinity"-space should be transmitted

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#608: FILE: drivers/input/lirc/lirc_mceusb.c:525:
+#if 0

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#609: FILE: drivers/input/lirc/lirc_mceusb.c:526:
+	Uncomment this if the last 100ms "infinity"-space should be transmitted
 	                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Uncomment>
#609: FILE: drivers/input/lirc/lirc_mceusb.c:526:
+	Uncomment this if the last 100ms "infinity"-space should be transmitted

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'transmission.Changes'
#611: FILE: drivers/input/lirc/lirc_mceusb.c:528:
+	to lirc directly instead of at the beginning of the next transmission.
+	Changes pulse/space order.

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#611: FILE: drivers/input/lirc/lirc_mceusb.c:528:
+	Changes pulse/space order.
 	             ^

CHECK:CAMELCASE: Avoid CamelCase: <Changes>
#611: FILE: drivers/input/lirc/lirc_mceusb.c:528:
+	Changes pulse/space order.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#623: FILE: drivers/input/lirc/lirc_mceusb.c:540:
+			break;
+		} else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#631: FILE: drivers/input/lirc/lirc_mceusb.c:548:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#678: FILE: drivers/input/lirc/lirc_mceusb.c:595:
+
+

WARNING:TYPO_SPELLING: 'Singnal' may be misspelled - perhaps 'Signal'?
#686: FILE: drivers/input/lirc/lirc_mceusb.c:603:
+	unsigned long signal_duration = 0; /* Singnal length in us */
 	                                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#701: FILE: drivers/input/lirc/lirc_mceusb.c:618:
+	if (count > LIRCBUF_SIZE || count%2 == 0)
 	                                 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmdcount < MCE_CMDBUF_SIZE'
#719: FILE: drivers/input/lirc/lirc_mceusb.c:636:
+			if ((cmdcount < MCE_CMDBUF_SIZE) &&
+			    (cmdcount - MCE_TX_HEADER_LENGTH) %
+			     MCE_CODE_LENGTH == 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#775: FILE: drivers/input/lirc/lirc_mceusb.c:692:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#785: FILE: drivers/input/lirc/lirc_mceusb.c:702:
+	if (ir->carrier_freq != carrier) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#789: FILE: drivers/input/lirc/lirc_mceusb.c:706:
+			dev_dbg(ir->d->dev, "SET_CARRIER disabling carrier "
+				"modulation\n");

WARNING:SPLIT_STRING: quoted string split across lines
#803: FILE: drivers/input/lirc/lirc_mceusb.c:720:
+				dev_dbg(ir->d->dev, "SET_CARRIER requesting "
+					"%d Hz\n", carrier);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#815: FILE: drivers/input/lirc/lirc_mceusb.c:732:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#820: FILE: drivers/input/lirc/lirc_mceusb.c:737:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#834: FILE: drivers/input/lirc/lirc_mceusb.c:751:
+
+

CHECK:SPACING: No space is necessary after a cast
#838: FILE: drivers/input/lirc/lirc_mceusb.c:755:
+		result = get_user(ivalue, (unsigned int *) arg);

CHECK:SPACING: No space is necessary after a cast
#859: FILE: drivers/input/lirc/lirc_mceusb.c:776:
+				  (unsigned long *) arg);

CHECK:SPACING: No space is necessary after a cast
#867: FILE: drivers/input/lirc/lirc_mceusb.c:784:
+		result = get_user(lvalue, (unsigned long *) arg);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#871: FILE: drivers/input/lirc/lirc_mceusb.c:788:
+		if (lvalue != (LIRC_MODE_PULSE&LIRC_CAN_SEND_MASK))
 		                              ^

CHECK:SPACING: No space is necessary after a cast
#877: FILE: drivers/input/lirc/lirc_mceusb.c:794:
+		result = get_user(ivalue, (unsigned int *) arg);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#891: FILE: drivers/input/lirc/lirc_mceusb.c:808:
+static struct file_operations lirc_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: drivers/input/lirc/lirc_mceusb.c:831:
+		usb_bulk_msg(ir->usbdev,
+			usb_rcvbulkpipe(ir->usbdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: drivers/input/lirc/lirc_mceusb.c:832:
+			usb_rcvbulkpipe(ir->usbdev,
+				ir->usb_ep_in->bEndpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: drivers/input/lirc/lirc_mceusb.c:886:
+static int mceusb_dev_probe(struct usb_interface *intf,
+				const struct usb_device_id *id)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#988: FILE: drivers/input/lirc/lirc_mceusb.c:905:
+	dev_dbg(&intf->dev, ": %s called\n", __func__);

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#1001: FILE: drivers/input/lirc/lirc_mceusb.c:918:
+	for (i = 0; i < idesc->desc.bNumEndpoints; ++i) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ep_in == NULL'
#1004: FILE: drivers/input/lirc/lirc_mceusb.c:921:
+		if ((ep_in == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)
+			    == USB_DIR_IN)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_INT))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_in"
#1004: FILE: drivers/input/lirc/lirc_mceusb.c:921:
+		if ((ep_in == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1005: FILE: drivers/input/lirc/lirc_mceusb.c:922:
+		if ((ep_in == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1007: FILE: drivers/input/lirc/lirc_mceusb.c:924:
+			    == USB_DIR_IN)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#1007: FILE: drivers/input/lirc/lirc_mceusb.c:924:
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1009: FILE: drivers/input/lirc/lirc_mceusb.c:926:
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1011: FILE: drivers/input/lirc/lirc_mceusb.c:928:
+			    == USB_ENDPOINT_XFER_INT))) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1013: FILE: drivers/input/lirc/lirc_mceusb.c:930:
+			dev_dbg(&intf->dev, ": acceptable inbound endpoint "
+				"found\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ep_out == NULL'
#1026: FILE: drivers/input/lirc/lirc_mceusb.c:943:
+		if ((ep_out == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)
+			    == USB_DIR_OUT)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
+			    == USB_ENDPOINT_XFER_INT))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_out"
#1026: FILE: drivers/input/lirc/lirc_mceusb.c:943:
+		if ((ep_out == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1027: FILE: drivers/input/lirc/lirc_mceusb.c:944:
+		if ((ep_out == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1029: FILE: drivers/input/lirc/lirc_mceusb.c:946:
+			    == USB_DIR_OUT)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1031: FILE: drivers/input/lirc/lirc_mceusb.c:948:
+			    == USB_ENDPOINT_XFER_BULK)
+			|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1033: FILE: drivers/input/lirc/lirc_mceusb.c:950:
+			    == USB_ENDPOINT_XFER_INT))) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1035: FILE: drivers/input/lirc/lirc_mceusb.c:952:
+			dev_dbg(&intf->dev, ": acceptable outbound endpoint "
+				"found\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_in"
#1048: FILE: drivers/input/lirc/lirc_mceusb.c:965:
+	if (ep_in == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ir)...) over kzalloc(sizeof(struct mceusb_dev)...)
#1058: FILE: drivers/input/lirc/lirc_mceusb.c:975:
+	ir = kzalloc(sizeof(struct mceusb_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*driver)...) over kzalloc(sizeof(struct lirc_driver)...)
#1064: FILE: drivers/input/lirc/lirc_mceusb.c:981:
+	driver = kzalloc(sizeof(struct lirc_driver), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rbuf)...) over kmalloc(sizeof(struct lirc_buffer)...)
#1070: FILE: drivers/input/lirc/lirc_mceusb.c:987:
+	rbuf = kmalloc(sizeof(struct lirc_buffer), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <iManufacturer>
#1156: FILE: drivers/input/lirc/lirc_mceusb.c:1073:
+	if (dev->descriptor.iManufacturer

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1157: FILE: drivers/input/lirc/lirc_mceusb.c:1074:
+	if (dev->descriptor.iManufacturer
+	    && usb_string(dev, dev->descriptor.iManufacturer,

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1159: FILE: drivers/input/lirc/lirc_mceusb.c:1076:
+		strlcpy(name, buf, sizeof(name));

CHECK:CAMELCASE: Avoid CamelCase: <iProduct>
#1160: FILE: drivers/input/lirc/lirc_mceusb.c:1077:
+	if (dev->descriptor.iProduct

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1161: FILE: drivers/input/lirc/lirc_mceusb.c:1078:
+	if (dev->descriptor.iProduct
+	    && usb_string(dev, dev->descriptor.iProduct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: drivers/input/lirc/lirc_mceusb.c:1085:
+	usb_fill_int_urb(ir->urb_in, dev, pipe, ir->buf_in,
+		maxp, (usb_complete_t) mceusb_dev_recv, ir, ep_in->bInterval);

CHECK:SPACING: No space is necessary after a cast
#1168: FILE: drivers/input/lirc/lirc_mceusb.c:1085:
+		maxp, (usb_complete_t) mceusb_dev_recv, ir, ep_in->bInterval);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1205: FILE: drivers/input/lirc/lirc_mceusb.c:1122:
+	} else {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1233: FILE: drivers/input/lirc/lirc_mceusb.c:1150:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1259: FILE: drivers/input/lirc/lirc_mceusb.c:1176:
+	struct mceusb_dev *ir = usb_get_intfdata(intf);
+	dev_info(ir->d->dev, "suspend\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1267: FILE: drivers/input/lirc/lirc_mceusb.c:1184:
+	struct mceusb_dev *ir = usb_get_intfdata(intf);
+	dev_info(ir->d->dev, "resume\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1287: FILE: drivers/input/lirc/lirc_mceusb.c:1204:
+	printk(KERN_INFO DRIVER_NAME ": " DRIVER_DESC " " DRIVER_VERSION "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1288: FILE: drivers/input/lirc/lirc_mceusb.c:1205:
+	printk(KERN_INFO DRIVER_NAME ": " DRIVER_AUTHOR "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1290: FILE: drivers/input/lirc/lirc_mceusb.c:1207:
+		printk(KERN_DEBUG DRIVER_NAME ": debug mode enabled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1294: FILE: drivers/input/lirc/lirc_mceusb.c:1211:
+		printk(KERN_ERR DRIVER_NAME

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1317: FILE: drivers/input/lirc/lirc_mceusb.c:1234:
+module_param(debug, bool, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 26 warnings, 58 checks, 1250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
