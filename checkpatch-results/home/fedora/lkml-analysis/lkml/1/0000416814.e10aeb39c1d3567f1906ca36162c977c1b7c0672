WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#62: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#67: FILE: include/linux/gtsc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#86: FILE: include/linux/gtsc.h:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#87: FILE: include/linux/gtsc.h:21:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <Gtsc_trace_setup>
#102: FILE: include/linux/gtsc.h:36:
+	Gtsc_trace_setup = 1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Gtsc_trace_running>
#103: FILE: include/linux/gtsc.h:37:
+	Gtsc_trace_running,

CHECK:CAMELCASE: Avoid CamelCase: <Gtsc_trace_stopped>
#104: FILE: include/linux/gtsc.h:38:
+	Gtsc_trace_stopped,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/gtsc.h:92:
+extern struct gtsc_trace *gtsc_trace_setup(char *root, char *name, u32 buf_size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/linux/gtsc.h:93:
+extern struct gtsc_trace *gtsc_trace_setup(char *root, char *name, u32 buf_size,
+					 u32 buf_nr, u32 flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/gtsc.h:103:
+extern int gtsc_trace_startstop(struct gtsc_trace *gtsc, int start);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/gtsc.h:110:
+extern void gtsc_trace_cleanup(struct gtsc_trace *gtsc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/gtsc.h:115:
+extern unsigned long long  gtsc_timestamp(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: include/linux/gtsc.h:121:
+#define gtsc_timestamp(void) ^I^I^I(unsigned long long) (0)$

CHECK:SPACING: No space is necessary after a cast
#187: FILE: include/linux/gtsc.h:121:
+#define gtsc_timestamp(void) 			(unsigned long long) (0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#187: FILE: include/linux/gtsc.h:121:
+#define gtsc_timestamp(void) 			(unsigned long long) (0)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#199: FILE: lib/Kconfig:127:
+config GTSC
+	bool "Generic Trace Setup and Control"
+	select RELAY
+	select DEBUG_FS
+	help
+	This option enables support for the GTSC. 
+
+	If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: lib/Kconfig:132:
+^IThis option enables support for the GTSC. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: lib/gtsc.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#246: FILE: lib/gtsc.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#247: FILE: lib/gtsc.c:20:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#261: FILE: lib/gtsc.c:34:
+static int gtsc_state_open(struct inode *inode, struct file *filp)
                                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#267: FILE: lib/gtsc.c:40:
+static ssize_t gtsc_state_read(struct file *filp, char __user *buffer,
                                             ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: lib/gtsc.c:41:
+                               size_t count, loff_t *ppos)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: lib/gtsc.c:41:
+                               size_t count, loff_t *ppos)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: lib/gtsc.c:53:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#281: FILE: lib/gtsc.c:54:
+static ssize_t gtsc_state_write(struct file *filp, const char __user *buffer,
                                              ^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#296: FILE: lib/gtsc.c:69:
+	if (strncmp(buf, "start", strlen("start")) == 0 ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#296: FILE: lib/gtsc.c:69:
+	if (strncmp(buf, "start", strlen("start")) == 0 ) {
[...]
+	} else if (strncmp(buffer, "stop", strlen("stop")) == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#304: FILE: lib/gtsc.c:77:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: lib/gtsc.c:83:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#311: FILE: lib/gtsc.c:84:
+static struct file_operations gtsc_state_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#318: FILE: lib/gtsc.c:91:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: lib/gtsc.c:102:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#342: FILE: lib/gtsc.c:115:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*r)...) over kzalloc(sizeof(struct gtsc_root)...)
#354: FILE: lib/gtsc.c:127:
+	r = kzalloc(sizeof(struct gtsc_root), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#358: FILE: lib/gtsc.c:131:
+	strlcpy(r->gtsc_name, root, sizeof(r->gtsc_name));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: lib/gtsc.c:140:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root"
#374: FILE: lib/gtsc.c:147:
+	if (root == NULL || name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#374: FILE: lib/gtsc.c:147:
+	if (root == NULL || name == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: lib/gtsc.c:149:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#394: FILE: lib/gtsc.c:167:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#395: FILE: lib/gtsc.c:168:
+static int gtsc_dropped_open(struct inode *inode, struct file *filp)
                                                                ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#401: FILE: lib/gtsc.c:174:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#402: FILE: lib/gtsc.c:175:
+static ssize_t gtsc_dropped_read(struct file *filp, char __user *buffer,
                                               ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: lib/gtsc.c:186:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#414: FILE: lib/gtsc.c:187:
+static struct file_operations gtsc_dropped_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#420: FILE: lib/gtsc.c:193:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: lib/gtsc.c:202:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: lib/gtsc.c:205:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: lib/gtsc.c:213:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#447: FILE: lib/gtsc.c:220:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: lib/gtsc.c:222:
+static struct dentry *gtsc_create_buf_file_callback(const char *filename,
+						   struct dentry *parent,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: lib/gtsc.c:231:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: lib/gtsc.c:233:
+static struct dentry *gtsc_create_global_buf_file_callback(const char *filename,
+							  struct dentry *parent,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#470: FILE: lib/gtsc.c:243:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#476: FILE: lib/gtsc.c:249:
+};
+static struct rchan_callbacks gtsc_relay_callbacks_global = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#482: FILE: lib/gtsc.c:255:
+
+

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#486: FILE: lib/gtsc.c:259:
+	if (gtsc->state_file)
+		debugfs_remove(gtsc->state_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#488: FILE: lib/gtsc.c:261:
+	if (gtsc->dropped_file)
+		debugfs_remove(gtsc->dropped_file);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#528: FILE: lib/gtsc.c:301:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: lib/gtsc.c:324:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#570: FILE: lib/gtsc.c:343:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#598: FILE: lib/gtsc.c:371:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 16 warnings, 36 checks, 530 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
