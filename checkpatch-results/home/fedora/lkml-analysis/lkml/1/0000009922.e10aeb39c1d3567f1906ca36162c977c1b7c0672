WARNING:TYPO_SPELLING: 'controled' may be misspelled - perhaps 'controlled'?
#32: 
a per profile level.  Only resources specified in a profile are controled
                                                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#71: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: security/apparmor/capability.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#154: FILE: security/apparmor/capability.c:79:
+		return sa->base.error;
+	} else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#204: FILE: security/apparmor/include/capability.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#255: FILE: security/apparmor/include/ipc.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: security/apparmor/include/net.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: security/apparmor/include/net.h:31:
+extern int aa_net_perm(struct aa_profile *profile, char *operation,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: security/apparmor/include/net.h:33:
+extern int aa_revalidate_sk(struct sock *sk, char *operation);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#335: FILE: security/apparmor/include/resource.h:1:
+/*

WARNING:TYPO_SPELLING: 'defintions' may be misspelled - perhaps 'definitions'?
#338: FILE: security/apparmor/include/resource.h:4:
+ * This file contains AppArmor resource limits function defintions.
                                                         ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: security/apparmor/ipc.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: security/apparmor/ipc.c:75:
+	int error = 0;
+	tracer_p = aa_cred_profile(cred);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: security/apparmor/ipc.c:90:
+		struct cred *lcred = get_task_cred(tracee);
+		tracee_p = aa_cred_profile(lcred);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#493: FILE: security/apparmor/net.c:1:
+/*

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#515: FILE: security/apparmor/net.c:23:
+static const char *sock_type_names[] = {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#558: FILE: security/apparmor/net.c:66:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: security/apparmor/net.c:75:
+		u16 audit_mask = profile->net.audit[sa->family];
+		if (likely((AUDIT_MODE(profile) != AUDIT_ALL) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family < 0'
#601: FILE: security/apparmor/net.c:109:
+	if ((family < 0) || (family >= AF_MAX))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family >= AF_MAX'
#601: FILE: security/apparmor/net.c:109:
+	if ((family < 0) || (family >= AF_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type < 0'
#604: FILE: security/apparmor/net.c:112:
+	if ((type < 0) || (type >= SOCK_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type >= SOCK_MAX'
#604: FILE: security/apparmor/net.c:112:
+	if ((type < 0) || (type >= SOCK_MAX))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#644: FILE: security/apparmor/resource.c:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009922.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 7 checks, 630 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009922.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
