WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: arch/ia64/kernel/cpe_migrate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#121: FILE: arch/ia64/kernel/cpe_migrate.c:53:
+spinlock_t cpe_migrate_lock;

WARNING:RETURN_VOID: void function return statements are not generally useful
#165: FILE: arch/ia64/kernel/cpe_migrate.c:97:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#170: FILE: arch/ia64/kernel/cpe_migrate.c:102:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#252: FILE: arch/ia64/kernel/cpe_migrate.c:184:
+
+		}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#259: FILE: arch/ia64/kernel/cpe_migrate.c:191:
+}
+static DECLARE_WORK(cpe_enable_work, ia64_mca_cpe_migrate);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpe_head == cpe_tail'
#289: FILE: arch/ia64/kernel/cpe_migrate.c:221:
+	if (!((cpe_head == cpe_tail) && (cpe_paddr[cpe_head] == 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpe_paddr[cpe_head] == 0'
#289: FILE: arch/ia64/kernel/cpe_migrate.c:221:
+	if (!((cpe_head == cpe_tail) && (cpe_paddr[cpe_head] == 0)))

CHECK:CAMELCASE: Avoid CamelCase: <freeOneBadPage>
#318: FILE: arch/ia64/kernel/cpe_migrate.c:250:
+freeOneBadPage(unsigned long paddr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <freeAllBadPages>
#340: FILE: arch/ia64/kernel/cpe_migrate.c:272:
+freeAllBadPages(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: arch/ia64/kernel/cpe_migrate.c:288:
+padpage_write(struct file *file, const char __user *user,
+		size_t count, loff_t *data)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#369: FILE: arch/ia64/kernel/cpe_migrate.c:301:
+	opt = simple_strtoul(optstr, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#390: FILE: arch/ia64/kernel/cpe_migrate.c:322:
+			seq_printf(file, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#392: FILE: arch/ia64/kernel/cpe_migrate.c:324:
+	seq_printf(file, "\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#402: FILE: arch/ia64/kernel/cpe_migrate.c:334:
+static struct file_operations proc_badpage_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#418: FILE: arch/ia64/kernel/cpe_migrate.c:350:
+		printk(KERN_ERR "ia64_reg_CE_extension failed.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_badpage"
#424: FILE: arch/ia64/kernel/cpe_migrate.c:356:
+	if (proc_badpage == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#425: FILE: arch/ia64/kernel/cpe_migrate.c:357:
+		printk(KERN_ERR "unable to create %s proc entry",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: arch/ia64/kernel/cpe_migrate.c:358:
+		printk(KERN_ERR "unable to create %s proc entry",
+				BADRAM_BASENAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#430: FILE: arch/ia64/kernel/cpe_migrate.c:362:
+	printk(KERN_INFO "Registered badram Driver\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: arch/ia64/kernel/cpe_migrate.c:378:
+MODULE_PARM_DESC(cpe_polling_enabled,
+		"Enable polling with migration");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#519: FILE: arch/ia64/kernel/mca.c:613:
+	recover = (ia64_mca_ce_extension && ia64_mca_ce_extension(

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#532: FILE: arch/ia64/Kconfig:459:
+config IA64_CPE_MIGRATE
+	tristate "Migrate data off pages with correctable errors"
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#554: FILE: include/asm-ia64/mca.h:154:
+extern int  ia64_reg_CE_extension(int (*fn)(void *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#555: FILE: include/asm-ia64/mca.h:155:
+extern void ia64_unreg_CE_extension(void);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'kaddr' may be better as '(kaddr)' to avoid precedence issues
#619: FILE: include/asm-ia64/page.h:125:
+#define	phys_to_page(kaddr)	(pfn_to_page(kaddr >> PAGE_SHIFT))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#643: FILE: include/linux/migrate.h:41:
+extern void move_to_lru(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#643: FILE: include/linux/migrate.h:41:
+extern void move_to_lru(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#651: FILE: include/linux/migrate.h:63:
 }
+static inline void move_to_lru(struct page *p) { return; }

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 18 checks, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
