WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: include/linux/kmemleak.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#56: FILE: include/linux/kmemleak.h:2:
+ * include/linux/kmemleak.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#71: FILE: include/linux/kmemleak.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#72: FILE: include/linux/kmemleak.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/kmemleak.h:26:
+extern void kmemleak_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/kmemleak.h:27:
+extern void kmemleak_alloc(const void *ptr, size_t size, int min_count,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/kmemleak.h:29:
+extern void kmemleak_free(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/kmemleak.h:30:
+extern void kmemleak_padding(const void *ptr, unsigned long offset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/kmemleak.h:32:
+extern void kmemleak_not_leak(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/kmemleak.h:33:
+extern void kmemleak_ignore(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/kmemleak.h:34:
+extern void kmemleak_scan_area(const void *ptr, unsigned long offset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/kmemleak.h:36:
+extern void kmemleak_no_scan(const void *ptr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#116: FILE: include/linux/kmemleak.h:62:
+}
+static inline void kmemleak_alloc(const void *ptr, size_t size, int min_count,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#120: FILE: include/linux/kmemleak.h:66:
+}
+static inline void kmemleak_alloc_recursive(const void *ptr, size_t size,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#125: FILE: include/linux/kmemleak.h:71:
+}
+static inline void kmemleak_free(const void *ptr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#128: FILE: include/linux/kmemleak.h:74:
+}
+static inline void kmemleak_free_recursive(const void *ptr, unsigned long flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#131: FILE: include/linux/kmemleak.h:77:
+}
+static inline void kmemleak_not_leak(const void *ptr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#134: FILE: include/linux/kmemleak.h:80:
+}
+static inline void kmemleak_ignore(const void *ptr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: include/linux/kmemleak.h:83:
+}
+static inline void kmemleak_scan_area(const void *ptr, unsigned long offset,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#141: FILE: include/linux/kmemleak.h:87:
+}
+static inline void kmemleak_erase(void **ptr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#144: FILE: include/linux/kmemleak.h:90:
+}
+static inline void kmemleak_no_scan(const void *ptr)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: mm/kmemleak.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#187: FILE: mm/kmemleak.c:2:
+ * mm/kmemleak.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#202: FILE: mm/kmemleak.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#203: FILE: mm/kmemleak.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#279: FILE: mm/kmemleak.c:94:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#280: FILE: mm/kmemleak.c:95:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#314: FILE: mm/kmemleak.c:129:
+	spinlock_t lock;

CHECK:BIT_MACRO: Prefer using the BIT macro
#338: FILE: mm/kmemleak.c:153:
+#define OBJECT_ALLOCATED	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#340: FILE: mm/kmemleak.c:155:
+#define OBJECT_REPORTED		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#342: FILE: mm/kmemleak.c:157:
+#define OBJECT_NO_SCAN		(1 << 2)

WARNING:MISPLACED_INIT: __initdata should be placed after early_log[200]
#419: FILE: mm/kmemleak.c:234:
+static struct early_log __initdata early_log[200];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after crt_early_log
#420: FILE: mm/kmemleak.c:235:
+static int __initdata crt_early_log;

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#433: FILE: mm/kmemleak.c:248:
+ * Macro invoked when a serious kmemleak condition occured and cannot be
                                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seq' - possible side-effects?
#482: FILE: mm/kmemleak.c:297:
+#define print_helper(seq, x...)	do {	\
+	if (seq)			\
+		seq_printf(seq, x);	\
+	else				\
+		pr_info(x);		\
+} while (0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#548: FILE: mm/kmemleak.c:363:
+	if (node) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#555: FILE: mm/kmemleak.c:370:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#648: FILE: mm/kmemleak.c:463:
+		kmemleak_panic("kmemleak: Cannot allocate a kmemleak_object "
+			       "structure\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#708: FILE: mm/kmemleak.c:523:
+		kmemleak_panic("kmemleak: Cannot insert 0x%lx into the object "
+			       "search tree (already existing)\n", ptr);

WARNING:SPLIT_STRING: quoted string split across lines
#819: FILE: mm/kmemleak.c:634:
+		kmemleak_warn("kmemleak: Adding scan area to unknown "
+			      "object at 0x%08lx\n", ptr);

WARNING:SPLIT_STRING: quoted string split across lines
#832: FILE: mm/kmemleak.c:647:
+		kmemleak_warn("kmemleak: Scan area larger than object "
+			      "0x%08lx\n", ptr);

WARNING:SPLIT_STRING: quoted string split across lines
#862: FILE: mm/kmemleak.c:677:
+		kmemleak_warn("kmemleak: Not scanning unknown object at "
+			      "0x%08lx\n", ptr);

WARNING:TYPO_SPELLING: 'interruptable' may be misspelled - perhaps 'interruptible'?
#1011: FILE: mm/kmemleak.c:826:
+ * Memory scanning is a long process and it needs to be interruptable. This
                                                         ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1012: FILE: mm/kmemleak.c:827:
+ * function checks whether such interrupt condition occured.
                                                     ^^^^^^^

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#1105: FILE: mm/kmemleak.c:920:
+	 * Once the object->lock is aquired, the corresponding memory block
 	                            ^^^^^^^

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#1106: FILE: mm/kmemleak.c:921:
+	 * cannot be freed (the same lock is aquired in delete_object).
 	                                     ^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1451: FILE: mm/kmemleak.c:1266:
+	if (strncmp(buf, "off", 3) == 0)
[...]
+	else if (strncmp(buf, "stack=on", 8) == 0)
[...]
+	else if (strncmp(buf, "stack=off", 9) == 0)
[...]
+	else if (strncmp(buf, "scan=on", 7) == 0)
[...]
+	else if (strncmp(buf, "scan=off", 8) == 0)
[...]
+	else if (strncmp(buf, "scan=", 5) == 0) {
[...]
+	} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1465: FILE: mm/kmemleak.c:1280:
+		err = strict_strtoul(buf + 5, 0, &secs);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: Unbalanced braces around else statement
#1473: FILE: mm/kmemleak.c:1288:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1559: FILE: mm/kmemleak.c:1374:
+}
+early_param("kmemleak", kmemleak_boot_config);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1631: FILE: mm/kmemleak.c:1446:
+		 * Some error occured and kmemleak was disabled. There is a
 		              ^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1640: FILE: mm/kmemleak.c:1455:
+	dentry = debugfs_create_file("kmemleak", S_IRUGO, NULL, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPLIT_STRING: quoted string split across lines
#1644: FILE: mm/kmemleak.c:1459:
+		pr_warning("kmemleak: Failed to create the debugfs kmemleak "
+			   "file\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000191498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 23 warnings, 27 checks, 1586 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000191498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
