WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: drivers/w1/slaves/w1_ds2431.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#68: FILE: drivers/w1/slaves/w1_ds2431.c:26:
+#define W1_F2D_PAGE_SIZE		(1<<W1_F2D_PAGE_BITS)
                         		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#68: FILE: drivers/w1/slaves/w1_ds2431.c:26:
+#define W1_F2D_PAGE_SIZE		(1<<W1_F2D_PAGE_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#72: FILE: drivers/w1/slaves/w1_ds2431.c:30:
+#define W1_F2D_SCRATCH_SIZE  (1<<W1_F2D_SCRATCH_BITS)
                                ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#72: FILE: drivers/w1/slaves/w1_ds2431.c:30:
+#define W1_F2D_SCRATCH_SIZE  (1<<W1_F2D_SCRATCH_BITS)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#73: FILE: drivers/w1/slaves/w1_ds2431.c:31:
+#define W1_F2D_SCRATCH_MASK  (W1_F2D_SCRATCH_SIZE-1)
                                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#80: FILE: drivers/w1/slaves/w1_ds2431.c:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: drivers/w1/slaves/w1_ds2431.c:92:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: drivers/w1/slaves/w1_ds2431.c:96:
+	dev_err(&sl->dev, "proof reading failed %d times\n",
+			W1_F2D_READ_RETRIES);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: drivers/w1/slaves/w1_ds2431.c:101:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rdbuf[0] != wrbuf[1]'
#220: FILE: drivers/w1/slaves/w1_ds2431.c:178:
+	if ((rdbuf[0] != wrbuf[1]) || (rdbuf[1] != wrbuf[2]) ||
+	    (rdbuf[2] != es) || (memcmp(data, &rdbuf[3], len) != 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rdbuf[1] != wrbuf[2]'
#220: FILE: drivers/w1/slaves/w1_ds2431.c:178:
+	if ((rdbuf[0] != wrbuf[1]) || (rdbuf[1] != wrbuf[2]) ||
+	    (rdbuf[2] != es) || (memcmp(data, &rdbuf[3], len) != 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rdbuf[2] != es'
#220: FILE: drivers/w1/slaves/w1_ds2431.c:178:
+	if ((rdbuf[0] != wrbuf[1]) || (rdbuf[1] != wrbuf[2]) ||
+	    (rdbuf[2] != es) || (memcmp(data, &rdbuf[3], len) != 0)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#222: FILE: drivers/w1/slaves/w1_ds2431.c:180:
+	    (rdbuf[2] != es) || (memcmp(data, &rdbuf[3], len) != 0)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#268: FILE: drivers/w1/slaves/w1_ds2431.c:226:
+	while (len > 0) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/w1/slaves/w1_ds2431.c:233:
+			if (w1_f2d_readblock(sl, addr & ~W1_F2D_SCRATCH_MASK,
+					W1_F2D_SCRATCH_SIZE, tmp)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: drivers/w1/slaves/w1_ds2431.c:247:
+			if (w1_f2d_write(sl, addr & ~W1_F2D_SCRATCH_MASK,
+					W1_F2D_SCRATCH_SIZE, tmp) < 0) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#294: FILE: drivers/w1/slaves/w1_ds2431.c:252:
+		} else {
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#315: FILE: drivers/w1/slaves/w1_ds2431.c:273:
+		.mode = S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#325: FILE: drivers/w1/slaves/w1_ds2431.c:283:
+	int err;
+	err = sysfs_create_bin_file(&sl->dev.kobj, &w1_f2d_bin_attr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227330.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 17 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227330.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
