WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
Subject: Re: [PATCH 4/6] omap iommu: simple virtual address space management

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: arch/arm/include/asm/io.h:80:
+extern int ioremap_page(unsigned long virt, unsigned long phys,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#152: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#157: FILE: arch/arm/plat-omap/include/mach/iovmm.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#188: FILE: arch/arm/plat-omap/include/mach/iovmm.h:32:
+#define IOVMF_HW_SIZE		(1 << IOVMF_SW_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#190: FILE: arch/arm/plat-omap/include/mach/iovmm.h:34:
+#define IOVMF_SW_MASK		(~IOVMF_HW_MASK)UL

CHECK:BIT_MACRO: Prefer using the BIT macro
#204: FILE: arch/arm/plat-omap/include/mach/iovmm.h:48:
+#define IOVMF_ENDIAN_MASK	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#214: FILE: arch/arm/plat-omap/include/mach/iovmm.h:58:
+#define IOVMF_MIXED_MASK	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#220: FILE: arch/arm/plat-omap/include/mach/iovmm.h:64:
+#define IOVMF_MMIO		(1 << IOVMF_SW_SHIFT)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: arch/arm/plat-omap/include/mach/iovmm.h:77:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: arch/arm/plat-omap/include/mach/iovmm.h:78:
+extern struct iovm_struct *find_iovm_area(struct iommu *obj, u32 da);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: arch/arm/plat-omap/include/mach/iovmm.h:79:
+extern u32 iommu_vmap(struct iommu *obj, u32 da,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: arch/arm/plat-omap/include/mach/iovmm.h:80:
+extern u32 iommu_vmap(struct iommu *obj, u32 da,
+			const struct sg_table *sgt, u32 flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: arch/arm/plat-omap/include/mach/iovmm.h:81:
+extern struct sg_table *iommu_vunmap(struct iommu *obj, u32 da);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: arch/arm/plat-omap/include/mach/iovmm.h:82:
+extern u32 iommu_vmalloc(struct iommu *obj, u32 da, size_t bytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: arch/arm/plat-omap/include/mach/iovmm.h:83:
+extern u32 iommu_vmalloc(struct iommu *obj, u32 da, size_t bytes,
+			   u32 flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: arch/arm/plat-omap/include/mach/iovmm.h:84:
+extern void iommu_vfree(struct iommu *obj, const u32 da);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: arch/arm/plat-omap/include/mach/iovmm.h:85:
+extern u32 iommu_kmap(struct iommu *obj, u32 da, u32 pa, size_t bytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: arch/arm/plat-omap/include/mach/iovmm.h:86:
+extern u32 iommu_kmap(struct iommu *obj, u32 da, u32 pa, size_t bytes,
+			u32 flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: arch/arm/plat-omap/include/mach/iovmm.h:87:
+extern void iommu_kunmap(struct iommu *obj, u32 da);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: arch/arm/plat-omap/include/mach/iovmm.h:88:
+extern u32 iommu_kmalloc(struct iommu *obj, u32 da, size_t bytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: arch/arm/plat-omap/include/mach/iovmm.h:89:
+extern u32 iommu_kmalloc(struct iommu *obj, u32 da, size_t bytes,
+			   u32 flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: arch/arm/plat-omap/include/mach/iovmm.h:90:
+extern void iommu_kfree(struct iommu *obj, u32 da);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: arch/arm/plat-omap/include/mach/iovmm.h:92:
+extern void *da_to_va(struct iommu *obj, u32 da);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#257: FILE: arch/arm/plat-omap/iovmm.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#274: FILE: arch/arm/plat-omap/iovmm.c:18:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#275: FILE: arch/arm/plat-omap/iovmm.c:19:
+#include <asm/cacheflush.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#343: FILE: arch/arm/plat-omap/iovmm.c:87:
+}
+#define sgtable_ok(x)	(!!sgtable_len(x))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: arch/arm/plat-omap/iovmm.c:111:
+	BUG_ON(bytes);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#386: FILE: arch/arm/plat-omap/iovmm.c:130:
+	if ((flags & IOVMF_LINEAR) && (flags & IOVMF_DA_ANON)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#390: FILE: arch/arm/plat-omap/iovmm.c:134:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: arch/arm/plat-omap/iovmm.c:188:
+		BUG_ON(bytes != PAGE_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'da >= tmp->da_start'
#472: FILE: arch/arm/plat-omap/iovmm.c:216:
+		if ((da >= tmp->da_start) && (da < tmp->da_end)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'da < tmp->da_end'
#472: FILE: arch/arm/plat-omap/iovmm.c:216:
+		if ((da >= tmp->da_start) && (da < tmp->da_end)) {

WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#514: FILE: arch/arm/plat-omap/iovmm.c:258:
+	u32 start, prev_end, alignement;
 	                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#520: FILE: arch/arm/plat-omap/iovmm.c:264:
+	alignement = PAGE_SIZE;
 	^^^^^^^^^^

WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#528: FILE: arch/arm/plat-omap/iovmm.c:272:
+			alignement = iopgsz_max(bytes);
 			^^^^^^^^^^

WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#529: FILE: arch/arm/plat-omap/iovmm.c:273:
+		start = roundup(start, alignement);
 		                       ^^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#538: FILE: arch/arm/plat-omap/iovmm.c:282:
+	list_for_each_entry(tmp, &obj->mmap, list) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev_end <= start'
#539: FILE: arch/arm/plat-omap/iovmm.c:283:
+		if ((prev_end <= start) && (start + bytes < tmp->da_start))

WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#543: FILE: arch/arm/plat-omap/iovmm.c:287:
+			start = roundup(tmp->da_end, alignement);
 			                             ^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start >= prev_end'
#548: FILE: arch/arm/plat-omap/iovmm.c:292:
+	if ((start >= prev_end) && (ULONG_MAX - start >= bytes))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#584: FILE: arch/arm/plat-omap/iovmm.c:328:
+	BUG_ON(!obj || !area);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: arch/arm/plat-omap/iovmm.c:381:
+		BUG_ON(!pg);

WARNING:TYPO_SPELLING: 'readibility' may be misspelled - perhaps 'readability'?
#651: FILE: arch/arm/plat-omap/iovmm.c:395:
+	 * consistency of the code readibility.
 	                           ^^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: arch/arm/plat-omap/iovmm.c:397:
+	BUG_ON(!sgt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#669: FILE: arch/arm/plat-omap/iovmm.c:413:
+		BUG_ON(!iopgsz_ok(bytes));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#678: FILE: arch/arm/plat-omap/iovmm.c:422:
+	BUG_ON(len);

WARNING:TYPO_SPELLING: 'readibility' may be misspelled - perhaps 'readability'?
#687: FILE: arch/arm/plat-omap/iovmm.c:431:
+	 * consistency of the code readibility
 	                           ^^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#689: FILE: arch/arm/plat-omap/iovmm.c:433:
+	BUG_ON(!sgt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: arch/arm/plat-omap/iovmm.c:448:
+	BUG_ON(!sgtable_ok(sgt));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: arch/arm/plat-omap/iovmm.c:485:
+		BUG_ON(!iopgsz_ok(bytes));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#754: FILE: arch/arm/plat-omap/iovmm.c:498:
+	BUG_ON((!total) || !IS_ALIGNED(total, PAGE_SIZE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: arch/arm/plat-omap/iovmm.c:511:
+		BUG_ON(!IS_ALIGNED(bytes, PAGE_SIZE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#772: FILE: arch/arm/plat-omap/iovmm.c:516:
+	BUG_ON(total);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#782: FILE: arch/arm/plat-omap/iovmm.c:526:
+	BUG_ON(in_interrupt());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: arch/arm/plat-omap/iovmm.c:564:
+static u32 map_iommu_region(struct iommu *obj, u32 da,
+	      const struct sg_table *sgt, void *va, size_t bytes, u32 flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: arch/arm/plat-omap/iovmm.c:597:
+static inline u32 __iommu_vmap(struct iommu *obj, u32 da,
+		 const struct sg_table *sgt, void *va, size_t bytes, u32 flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: arch/arm/plat-omap/iovmm.c:612:
+u32 iommu_vmap(struct iommu *obj, u32 da, const struct sg_table *sgt,
+		 u32 flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: arch/arm/plat-omap/iovmm.c:735:
+static u32 __iommu_kmap(struct iommu *obj, u32 da, u32 pa, void *va,
+			  size_t bytes, u32 flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: arch/arm/plat-omap/iovmm.c:765:
+u32 iommu_kmap(struct iommu *obj, u32 da, u32 pa, size_t bytes,
+		 u32 flags)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1123: FILE: arch/arm/plat-omap/iovmm.c:867:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000175456.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 25 warnings, 36 checks, 1014 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000175456.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
