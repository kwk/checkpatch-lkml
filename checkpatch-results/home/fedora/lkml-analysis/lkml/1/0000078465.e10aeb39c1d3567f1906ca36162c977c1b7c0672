WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
  (one for sync and one for async) per device and number of requests allocated

WARNING:TYPO_SPELLING: 'deivce' may be misspelled - perhaps 'device'?
#47: 
  Hence there is a need for new interface which can query deivce congestion
                                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'trun' may be misspelled - perhaps 'turn'?
#54: 
  block layer and in trun elevator to find out if the io group the page will
                     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: block/blk-core.c:95:
+int blk_queue_io_group_congested(struct backing_dev_info *bdi, int bdi_bits,
+					struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: block/blk-sysfs.c:87:
+static ssize_t queue_group_requests_store(struct request_queue *q,
+					const char *page, size_t count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: block/elevator-fq.c:963:
+void elv_io_group_congestion_threshold(struct request_queue *q,
+						struct io_group *iog)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: block/elevator-fq.c:1004:
+int elv_page_io_group_congested(struct request_queue *q, struct page *page,
+								int sync)

WARNING:SPLIT_STRING: quoted string split across lines
#245: FILE: block/elevator-fq.c:1031:
+		elv_log_iog(q->elevator->efqd, iog, "iog congested=%d sync=%d"
+			" rl.count[sync]=%d nr_group_requests=%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#275: FILE: block/elevator-fq.c:1061:
+	if (iog->rl.count[sync]+1 >= elv_iog_congestion_on_threshold(iog))
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: block/elevator-fq.h:468:
+extern int elv_page_io_group_congested(struct request_queue *q,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: block/elevator-fq.h:469:
+extern int elv_page_io_group_congested(struct request_queue *q,
+					struct page *page, int sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: block/elevator-fq.h:470:
+extern void elv_freed_request(struct request_list *rl, int sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: block/elevator-fq.h:471:
+extern void elv_get_request(struct request_list *rl, int sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: block/elevator-fq.h:472:
+extern void elv_updated_nr_group_requests(struct request_queue *q);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: drivers/md/dm-table.c:1174:
+int dm_table_any_congested(struct dm_table *t, int bdi_bits, struct page *page,
+				int group)

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: drivers/md/dm-table.c:1186:
+			struct backing_dev_info *bdi = &q->backing_dev_info;
+			r |= group ? bdi_congested_group(bdi, bdi_bits, page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: drivers/md/dm-table.c:1188:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: drivers/md/dm.c:1612:
+static int dm_any_congested(void *congested_data, int bdi_bits,
+					struct page *page, int group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: drivers/md/dm.c:1630:
+				r = dm_table_any_congested(map, bdi_bits, page,
+								 group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: drivers/md/dm.h:61:
+int dm_table_any_congested(struct dm_table *t, int bdi_bits, struct page *page,
+				int group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/md/multipath.c:196:
+static int multipath_congested(void *data, int bits, struct page *page,
+					int group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: fs/btrfs/disk-io.c:1253:
+static int btrfs_congested_fn(void *congested_data, int bdi_bits,
+					struct page *page, int group)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#670: FILE: fs/btrfs/extent_io.c:2376:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#754: FILE: fs/gfs2/aops.c:379:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#832: FILE: include/linux/backing-dev.h:233:
+extern int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: include/linux/backing-dev.h:234:
+extern int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,
+				struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: include/linux/backing-dev.h:236:
+extern int bdi_read_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: include/linux/backing-dev.h:237:
+extern int bdi_read_congested_group(struct backing_dev_info *bdi,
+						struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#838: FILE: include/linux/backing-dev.h:239:
+extern int bdi_or_group_read_congested(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#839: FILE: include/linux/backing-dev.h:240:
+extern int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#841: FILE: include/linux/backing-dev.h:242:
+extern int bdi_write_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: include/linux/backing-dev.h:243:
+extern int bdi_write_congested_group(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#844: FILE: include/linux/backing-dev.h:245:
+extern int bdi_or_group_write_congested(struct backing_dev_info *bdi,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#847: FILE: include/linux/backing-dev.h:248:
+extern int bdi_rw_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: include/linux/backing-dev.h:249:
+extern int bdi_rw_congested_group(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: include/linux/backing-dev.h:252:
+static inline int bdi_congested_group(struct backing_dev_info *bdi,
+					int bdi_bits, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: include/linux/backing-dev.h:258:
+static inline int bdi_read_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: include/linux/backing-dev.h:264:
+static inline int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: include/linux/backing-dev.h:270:
+static inline int bdi_write_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: include/linux/backing-dev.h:276:
+static inline int bdi_or_group_write_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: include/linux/backing-dev.h:282:
+static inline int bdi_rw_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#896: FILE: include/linux/backing-dev.h:297:
+extern void congestion_wake_up(int sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#909: FILE: include/linux/blkdev.h:850:
+extern int blk_queue_io_group_congested(struct backing_dev_info *bdi,

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#936: FILE: mm/backing-dev.c:291:
+	if (waitqueue_active(wqh))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#974: FILE: mm/backing-dev.c:353:
+int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,
+				struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: mm/backing-dev.c:370:
+int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1005: FILE: mm/backing-dev.c:384:
+int bdi_or_group_write_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1031: FILE: mm/page-writeback.c:992:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078465.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 42 checks, 798 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078465.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
