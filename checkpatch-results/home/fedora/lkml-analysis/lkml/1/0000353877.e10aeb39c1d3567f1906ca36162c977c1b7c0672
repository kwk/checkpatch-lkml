CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: drivers/pci/hotplug/acpiphp_core.c:347:
+	retval = pci_hp_register(slot->hotplug_slot,
+					acpiphp_slot->bridge->pci_bus,

WARNING:SPLIT_STRING: quoted string split across lines
#185: FILE: drivers/pci/hotplug/acpiphp_glue.c:264:
+				warn("Slot %d already registered by another "
+					"hotplug driver\n", slot->sun);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#188: FILE: drivers/pci/hotplug/acpiphp_glue.c:267:
+				warn("acpiphp_register_hotplug_slot failed "
+					"(err code = 0x%x)\n", retval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/pci/hotplug/ibmphp_ebda.c:1004:
+		pci_hp_register(tmp_slot->hotplug_slot,
+			pci_find_bus(0, tmp_slot->bus), tmp_slot->device);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/pci/hotplug/pci_hotplug_core.c:135:
+static ssize_t power_write_file(struct pci_slot *pci_slot, const char *buf,
 		size_t count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/pci/hotplug/pci_hotplug_core.c:194:
+static ssize_t attention_write_file(struct pci_slot *slot, const char *buf,
 		size_t count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/pci/hotplug/pci_hotplug_core.c:318:
+static ssize_t test_write_file(struct pci_slot *pci_slot, const char *buf,
 		size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#719: FILE: drivers/pci/hotplug/pci_hotplug_core.c:543:
+	struct hotplug_slot *hotplug = slot->hotplug;
+	hotplug->release(hotplug);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#815: FILE: drivers/pci/hotplug/pci_hotplug_core.c:634:
+	struct pci_slot *slot;
+	if (!hotplug || !info)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: drivers/pci/hotplug/pciehp_core.c:258:
+			retval = sysfs_create_file(&hotplug_slot->pci_slot->kobj,
 				&hotplug_slot_attr_lock.attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: drivers/pci/hotplug/pciehp_core.c:291:
+			sysfs_remove_file(&slot->hotplug_slot->pci_slot->kobj,
 				&hotplug_slot_attr_lock.attr);

WARNING:SPLIT_STRING: quoted string split across lines
#943: FILE: drivers/pci/hotplug/pciehp_core.c:459:
+			warn("%s: slot already registered by another "
+				"hotplug driver\n", PCIE_MODULE_NAME);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: drivers/pci/hotplug/pciehp_core.c:462:
+			err("%s: slot initialization failed\n",
+				PCIE_MODULE_NAME);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#958: FILE: drivers/pci/hotplug/rpadlpar_sysfs.c:26:
+extern struct kset pci_slots_subsys;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1025: FILE: drivers/pci/hotplug/shpchp_core.c:154:
+		retval = pci_hp_register(slot->hotplug_slot,
+				ctrl->pci_dev->subordinate, slot->device);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_slot *' should also have an identifier name
#1064: FILE: drivers/pci/pci.h:102:
+	ssize_t (*show)(struct pci_slot *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1064: FILE: drivers/pci/pci.h:102:
+	ssize_t (*show)(struct pci_slot *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_slot *' should also have an identifier name
#1065: FILE: drivers/pci/pci.h:103:
+	ssize_t (*store)(struct pci_slot *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1065: FILE: drivers/pci/pci.h:103:
+	ssize_t (*store)(struct pci_slot *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1065: FILE: drivers/pci/pci.h:103:
+	ssize_t (*store)(struct pci_slot *, const char *, size_t);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1067: FILE: drivers/pci/pci.h:105:
+};
+#define to_pci_slot_attr(s) container_of(s, struct pci_slot_attribute, attr)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1070: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1075: FILE: drivers/pci/slot.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1076: FILE: drivers/pci/slot.c:2:
+ * drivers/pci/slot.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'wil' may be misspelled - perhaps 'will'?
#1077: FILE: drivers/pci/slot.c:3:
+ * Copyright (C) 2006 Matthew Wilcox <matthew@wil.cx>
                                               ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1090: FILE: drivers/pci/slot.c:16:
+static ssize_t pci_slot_attr_show(struct kobject *kobj,
+					struct attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1094: FILE: drivers/pci/slot.c:20:
+	struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);
+	return attribute->show ? attribute->show(slot, buf) : -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: drivers/pci/slot.c:24:
+static ssize_t pci_slot_attr_store(struct kobject *kobj,
+			struct attribute *attr, const char *buf, size_t len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1102: FILE: drivers/pci/slot.c:28:
+	struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);
+	return attribute->store ? attribute->store(slot, buf, len) : -EIO;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1105: FILE: drivers/pci/slot.c:31:
+static struct sysfs_ops pci_slot_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1117: FILE: drivers/pci/slot.c:43:
+	.attr = { .name = "address", .mode = S_IFREG | S_IRUGO },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1158: FILE: drivers/pci/slot.c:84:
+};
+decl_subsys_name(pci_slots, slots, &pci_slot_ktype, NULL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1166: FILE: drivers/pci/slot.c:92:
+	retval = found = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1224: FILE: drivers/pci/slot.c:150:
+		printk(KERN_ERR "Unable to register kobject %s", name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1266: FILE: drivers/pci/slot.c:192:
+		printk(KERN_ERR "PCI: Slot initialisation failure (%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1267: FILE: drivers/pci/slot.c:193:
+		printk(KERN_ERR "PCI: Slot initialisation failure (%d)",
+			result);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_slot *' should also have an identifier name
#1287: FILE: include/linux/pci.h:139:
+	void (*release)(struct pci_slot *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1362: FILE: include/linux/pci_hotplug.h:168:
+extern int pci_hp_register(struct hotplug_slot *, struct pci_bus *, int nr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hotplug_slot *' should also have an identifier name
#1362: FILE: include/linux/pci_hotplug.h:168:
+extern int pci_hp_register(struct hotplug_slot *, struct pci_bus *, int nr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#1362: FILE: include/linux/pci_hotplug.h:168:
+extern int pci_hp_register(struct hotplug_slot *, struct pci_bus *, int nr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1363: FILE: include/linux/pci_hotplug.h:169:
+extern int pci_hp_deregister(struct hotplug_slot *slot);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353877.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 17 checks, 1116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353877.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
