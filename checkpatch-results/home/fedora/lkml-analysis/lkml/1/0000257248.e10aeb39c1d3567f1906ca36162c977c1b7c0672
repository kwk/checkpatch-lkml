WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: include/linux/memdirtylimitcgroup.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#73: FILE: include/linux/memdirtylimitcgroup.h:13:
+void memdirtylimitcgroup_dirty_limit(struct task_struct *, long *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#73: FILE: include/linux/memdirtylimitcgroup.h:13:
+void memdirtylimitcgroup_dirty_limit(struct task_struct *, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#74: FILE: include/linux/memdirtylimitcgroup.h:14:
+void memdirtylimitcgroup_change_shift(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#75: FILE: include/linux/memdirtylimitcgroup.h:15:
+void memdirtylimitcgroup_init(int);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#82: FILE: include/linux/memdirtylimitcgroup.h:22:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#89: FILE: include/linux/memdirtylimitcgroup.h:29:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#96: FILE: include/linux/memdirtylimitcgroup.h:36:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#103: FILE: include/linux/memdirtylimitcgroup.h:43:
+{
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#116: FILE: init/Kconfig:421:
+config CGROUP_MEMDIRTYLIMIT_CTLR
+	bool "Memory Dirty Limit Controller for Control Groups"
+	depends on CGROUPS && RESOURCE_COUNTERS
+	help
+	  XXX TBD
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#141: FILE: mm/memdirtylimitcgroup.c:1:
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#160: FILE: mm/memdirtylimitcgroup.c:20:
+	spinlock_t dlcg_lock;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#167: FILE: mm/memdirtylimitcgroup.c:27:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#174: FILE: mm/memdirtylimitcgroup.c:34:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#181: FILE: mm/memdirtylimitcgroup.c:41:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#188: FILE: mm/memdirtylimitcgroup.c:48:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: mm/memdirtylimitcgroup.c:56:
+getfraction(struct memdirtylimit_cgroup *dlcg, long *numeratorp,
+    long *denominatorp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: mm/memdirtylimitcgroup.c:56:
+    long *denominatorp)$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#198: FILE: mm/memdirtylimitcgroup.c:58:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: mm/memdirtylimitcgroup.c:61:
+	prop_fraction_single(&vm_cgroup_dirties, &dlcg->dlcg_dirties,
+	   numeratorp, denominatorp);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#225: FILE: mm/memdirtylimitcgroup.c:85:
+	uint64_t tmp;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#229: FILE: mm/memdirtylimitcgroup.c:89:
+	BUG_ON(*dirtyp < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#244: FILE: mm/memdirtylimitcgroup.c:104:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#251: FILE: mm/memdirtylimitcgroup.c:111:
+{
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#261: FILE: mm/memdirtylimitcgroup.c:121:
+	uint64_t result;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#282: FILE: mm/memdirtylimitcgroup.c:142:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dlcg"
#293: FILE: mm/memdirtylimitcgroup.c:153:
+	if (dlcg == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257248.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 18 checks, 300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257248.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
