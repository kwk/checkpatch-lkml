WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
Subject: [PATCH 3/4] [Target_Core_Mod/PERSISTENT_RESERVATION]: Add support for PRIN SA READ_FULL_STATUS

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_portal_group_s *' should also have an identifier name
#100: FILE: drivers/lio-core/target_core_fabric_ops.h:4:
+	u16 (*tpg_get_tag)(struct se_portal_group_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#102: FILE: drivers/lio-core/target_core_fabric_ops.h:6:
+	u32 (*tpg_get_pr_transport_id)(struct se_portal_group_s *, struct se_node_acl_s *, int *, unsigned char *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_portal_group_s *' should also have an identifier name
#102: FILE: drivers/lio-core/target_core_fabric_ops.h:6:
+	u32 (*tpg_get_pr_transport_id)(struct se_portal_group_s *, struct se_node_acl_s *, int *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#102: FILE: drivers/lio-core/target_core_fabric_ops.h:6:
+	u32 (*tpg_get_pr_transport_id)(struct se_portal_group_s *, struct se_node_acl_s *, int *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#102: FILE: drivers/lio-core/target_core_fabric_ops.h:6:
+	u32 (*tpg_get_pr_transport_id)(struct se_portal_group_s *, struct se_node_acl_s *, int *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#102: FILE: drivers/lio-core/target_core_fabric_ops.h:6:
+	u32 (*tpg_get_pr_transport_id)(struct se_portal_group_s *, struct se_node_acl_s *, int *, unsigned char *);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#103: FILE: drivers/lio-core/target_core_fabric_ops.h:7:
+	u32 (*tpg_get_pr_transport_id_len)(struct se_portal_group_s *, struct se_node_acl_s *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_portal_group_s *' should also have an identifier name
#103: FILE: drivers/lio-core/target_core_fabric_ops.h:7:
+	u32 (*tpg_get_pr_transport_id_len)(struct se_portal_group_s *, struct se_node_acl_s *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#103: FILE: drivers/lio-core/target_core_fabric_ops.h:7:
+	u32 (*tpg_get_pr_transport_id_len)(struct se_portal_group_s *, struct se_node_acl_s *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#103: FILE: drivers/lio-core/target_core_fabric_ops.h:7:
+	u32 (*tpg_get_pr_transport_id_len)(struct se_portal_group_s *, struct se_node_acl_s *, int *);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#124: FILE: drivers/lio-core/target_core_pr.c:879:
+	pr_reg->pr_res_holder = pr_reg->pr_res_type = pr_reg->pr_res_scope = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: drivers/lio-core/target_core_pr.c:1183:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: drivers/lio-core/target_core_pr.c:1191:
+	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
+			&pr_tmpl->registration_list, pr_reg_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#158: FILE: drivers/lio-core/target_core_pr.c:1192:
+			&pr_tmpl->registration_list, pr_reg_list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#166: FILE: drivers/lio-core/target_core_pr.c:1200:
+		exp_desc_len = TPG_TFO(se_tpg)->tpg_get_pr_transport_id_len(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'exp_desc_len > add_desc_len'
#169: FILE: drivers/lio-core/target_core_pr.c:1203:
+		if (((exp_desc_len > add_desc_len) + add_len) > cmd->data_length) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#170: FILE: drivers/lio-core/target_core_pr.c:1204:
+			printk(KERN_WARNING "SPC-3 PRIN READ_FULL_STATUS ran"

WARNING:SPLIT_STRING: quoted string split across lines
#171: FILE: drivers/lio-core/target_core_pr.c:1205:
+			printk(KERN_WARNING "SPC-3 PRIN READ_FULL_STATUS ran"
+				" out of buffer: %d\n", cmd->data_length);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/lio-core/target_core_pr.c:1233:
+^I^Iif (pr_reg->pr_res_holder) {^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#199: FILE: drivers/lio-core/target_core_pr.c:1233:
+		if (pr_reg->pr_res_holder) {	
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#203: FILE: drivers/lio-core/target_core_pr.c:1237:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: drivers/lio-core/target_core_pr.c:1239:
+^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#217: FILE: drivers/lio-core/target_core_pr.c:1251:
+		if (!(pr_reg->pr_reg_all_tg_pt)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#222: FILE: drivers/lio-core/target_core_pr.c:1256:
+		} else

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#223: FILE: drivers/lio-core/target_core_pr.c:1257:
+			off += 2; /* Skip over RELATIVE TARGET PORT IDENTIFER */
 			                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: drivers/lio-core/target_core_pr.c:1263:
+		desc_len = TPG_TFO(se_tpg)->tpg_get_pr_transport_id(se_tpg,
+				se_nacl, &format_code, &buf[off+4]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#229: FILE: drivers/lio-core/target_core_pr.c:1263:
+				se_nacl, &format_code, &buf[off+4]);
 				                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: drivers/lio-core/target_core_pr.c:1275:
+^I^I * $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 14 warnings, 11 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
