WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
 - people who find it environmentally insane to toss out 99.99%-good hardware

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#116: FILE: arch/x86/mm/init_32.c:278:
+static void __meminit free_new_highpage(struct page *page, int* bad)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#121: FILE: arch/x86/mm/init_32.c:282:
+		*bad=1;
 		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: arch/x86/mm/init_32.c:289:
+void __init add_one_highpage_init(struct page *page, int pfn, int bad_ppro,
+		int* bad)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#129: FILE: arch/x86/mm/init_32.c:289:
+		int* bad)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: arch/x86/mm/init_32.c:291:
+	*bad=0;
 	    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: arch/x86/mm/init_32.c:302:
+	int dummy;
+	free_new_highpage(page, &dummy);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#153: FILE: arch/x86/mm/init_32.c:325:
+extern void set_highmem_pages_init(int bad_ppro, int* pbad);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#156: FILE: arch/x86/mm/init_32.c:327:
+static void __init set_highmem_pages_init(int bad_ppro, int* pbad)

ERROR:SPACING: space required before the open brace '{'
#166: FILE: arch/x86/mm/init_32.c:334:
+		if (pfn_valid(pfn)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: arch/x86/mm/init_32.c:336:
+			add_one_highpage_init(pfn_to_page(pfn), pfn, bad_ppro,
+			&bad);

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: arch/x86/mm/init_32.c:337:
+			if(bad)

ERROR:SPACING: space required before the open brace '{'
#199: FILE: arch/x86/mm/init_32.c:663:
+	for (tmp = 0; tmp < max_low_pfn; tmp++){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#220: FILE: arch/x86/mm/init_32.c:683:
+	printk(KERN_INFO "Memory: %luk/%luk available (%dk kernel code, %dk reserved, %dk data, %dk init, %ldk highmem, %dk BadRAM)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: arch/x86/mm/init_32.c:684:
+               (unsigned long) nr_free_pages() << (PAGE_SHIFT-10),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: arch/x86/mm/init_32.c:684:
+	printk(KERN_INFO "Memory: %luk/%luk available (%dk kernel code, %dk reserved, %dk data, %dk init, %ldk highmem, %dk BadRAM)\n",
+               (unsigned long) nr_free_pages() << (PAGE_SHIFT-10),

CHECK:SPACING: No space is necessary after a cast
#221: FILE: arch/x86/mm/init_32.c:684:
+               (unsigned long) nr_free_pages() << (PAGE_SHIFT-10),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: arch/x86/mm/init_32.c:684:
+               (unsigned long) nr_free_pages() << (PAGE_SHIFT-10),$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#221: FILE: arch/x86/mm/init_32.c:684:
+               (unsigned long) nr_free_pages() << (PAGE_SHIFT-10),
                                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: arch/x86/mm/init_32.c:685:
+               num_physpages << (PAGE_SHIFT-10),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/x86/mm/init_32.c:685:
+               num_physpages << (PAGE_SHIFT-10),$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#222: FILE: arch/x86/mm/init_32.c:685:
+               num_physpages << (PAGE_SHIFT-10),
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: arch/x86/mm/init_32.c:686:
+               codesize >> 10,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/x86/mm/init_32.c:686:
+               codesize >> 10,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: arch/x86/mm/init_32.c:687:
+               reservedpages << (PAGE_SHIFT-10),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/x86/mm/init_32.c:687:
+               reservedpages << (PAGE_SHIFT-10),$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#224: FILE: arch/x86/mm/init_32.c:687:
+               reservedpages << (PAGE_SHIFT-10),
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: arch/x86/mm/init_32.c:688:
+               datasize >> 10,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/x86/mm/init_32.c:688:
+               datasize >> 10,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: arch/x86/mm/init_32.c:689:
+               initsize >> 10,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/x86/mm/init_32.c:689:
+               initsize >> 10,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: arch/x86/mm/init_32.c:690:
+               (unsigned long) (totalhigh_pages << (PAGE_SHIFT-10)),$

CHECK:SPACING: No space is necessary after a cast
#227: FILE: arch/x86/mm/init_32.c:690:
+               (unsigned long) (totalhigh_pages << (PAGE_SHIFT-10)),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: arch/x86/mm/init_32.c:690:
+               (unsigned long) (totalhigh_pages << (PAGE_SHIFT-10)),$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#227: FILE: arch/x86/mm/init_32.c:690:
+               (unsigned long) (totalhigh_pages << (PAGE_SHIFT-10)),
                                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: arch/x86/mm/init_32.c:691:
+               badpages << (PAGE_SHIFT-10)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: arch/x86/mm/init_32.c:691:
+               badpages << (PAGE_SHIFT-10)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#228: FILE: arch/x86/mm/init_32.c:691:
+               badpages << (PAGE_SHIFT-10)
                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: arch/x86/mm/init_32.c:692:
+              );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/x86/mm/init_32.c:692:
+              );$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#250: FILE: arch/x86/mm/init_64.c:66:
+	long i, total = 0, reserved = 0, badram=0;
 	                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: arch/x86/mm/init_64.c:99:
+       printk(KERN_INFO "%lu pages of BadRAM\n",badram);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#268: FILE: arch/x86/mm/init_64.c:99:
+       printk(KERN_INFO "%lu pages of BadRAM\n",badram);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: arch/x86/mm/init_64.c:99:
+       printk(KERN_INFO "%lu pages of BadRAM\n",badram);
                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#300: FILE: arch/x86/mm/pgtable_32.c:64:
+	printk(KERN_INFO "%d pages of badRAM\n", badram);

WARNING:TYPO_SPELLING: 'challanged' may be misspelled - perhaps 'challenged'?
#315: FILE: CREDITS:2846:
+D: Memory, the BadRAM subsystem dealing with statically challanged RAM modules.
                                                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#679: FILE: include/linux/kernel.h:167:
+extern int get_longoption (char **str, long *plong);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#679: FILE: include/linux/kernel.h:167:
+extern int get_longoption (char **str, long *plong);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#680: FILE: include/linux/kernel.h:168:
+extern char *get_longoptions(const char *str, int nlongs, long *longs);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#693: FILE: include/linux/page-flags.h:98:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: include/linux/page-flags.h:122:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#733: FILE: lib/cmdline.c:130:
+int get_longoption (char **str, long *plong)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: lib/cmdline.c:132:
+       char *cur = *str;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: lib/cmdline.c:134:
+       if (!cur || !(*cur))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#737: FILE: lib/cmdline.c:134:
+       if (!cur || !(*cur))
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#738: FILE: lib/cmdline.c:135:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: lib/cmdline.c:135:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: lib/cmdline.c:136:
+       *plong = simple_strtol (cur, str, 0);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#739: FILE: lib/cmdline.c:136:
+       *plong = simple_strtol (cur, str, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#739: FILE: lib/cmdline.c:136:
+       *plong = simple_strtol (cur, str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: lib/cmdline.c:137:
+       if (cur == *str)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#740: FILE: lib/cmdline.c:137:
+       if (cur == *str)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#741: FILE: lib/cmdline.c:138:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: lib/cmdline.c:138:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: lib/cmdline.c:139:
+       if (**str == ',') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#742: FILE: lib/cmdline.c:139:
+       if (**str == ',') {
+               (*str)++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: lib/cmdline.c:140:
+               (*str)++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: lib/cmdline.c:140:
+               (*str)++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#744: FILE: lib/cmdline.c:141:
+               return 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: lib/cmdline.c:141:
+               return 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: lib/cmdline.c:142:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: lib/cmdline.c:144:
+       return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: lib/cmdline.c:165:
+       int res, i = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: lib/cmdline.c:167:
+       while (i < nlongs) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#770: FILE: lib/cmdline.c:167:
+       while (i < nlongs) {
+               res = get_longoption ((char **)&str, longs + i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: lib/cmdline.c:168:
+               res = get_longoption ((char **)&str, longs + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: lib/cmdline.c:168:
+               res = get_longoption ((char **)&str, longs + i);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#771: FILE: lib/cmdline.c:168:
+               res = get_longoption ((char **)&str, longs + i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#772: FILE: lib/cmdline.c:169:
+               if (res == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: lib/cmdline.c:169:
+               if (res == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#772: FILE: lib/cmdline.c:169:
+               if (res == 0)
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: lib/cmdline.c:170:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: lib/cmdline.c:170:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: lib/cmdline.c:171:
+               i++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: lib/cmdline.c:171:
+               i++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#775: FILE: lib/cmdline.c:172:
+               if (res == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#775: FILE: lib/cmdline.c:172:
+               if (res == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#775: FILE: lib/cmdline.c:172:
+               if (res == 1)
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: lib/cmdline.c:173:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: lib/cmdline.c:173:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: lib/cmdline.c:174:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: lib/cmdline.c:175:
+       longs[0] = i - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: lib/cmdline.c:176:
+       return (char *)str;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#782: FILE: lib/cmdline.c:179:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#792: FILE: lib/cmdline.c:219:
+EXPORT_SYMBOL(get_longoptions);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#824: FILE: mm/page_alloc.c:543:
		__ClearPageReserved(page);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: space required before the open brace '{'
#827: FILE: mm/page_alloc.c:544:
+		if(!PageBad(page)){

ERROR:SPACING: space required before the open parenthesis '('
#827: FILE: mm/page_alloc.c:544:
+		if(!PageBad(page)){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#838: FILE: mm/page_alloc.c:4384:
 
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#844: FILE: mm/page_alloc.c:4390:
+static int __init next_masked_address (unsigned long *addrp, unsigned long mask)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: mm/page_alloc.c:4392:
+       unsigned long inc=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#846: FILE: mm/page_alloc.c:4392:
+       unsigned long inc=1;
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: mm/page_alloc.c:4393:
+       unsigned long newval = *addrp;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#848: FILE: mm/page_alloc.c:4394:
+       unsigned long newval = *addrp;
+       while (inc & mask)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: mm/page_alloc.c:4394:
+       while (inc & mask)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#848: FILE: mm/page_alloc.c:4394:
+       while (inc & mask)
+               inc += inc;

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: mm/page_alloc.c:4395:
+               inc += inc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: mm/page_alloc.c:4395:
+               inc += inc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#850: FILE: mm/page_alloc.c:4396:
+       while (inc != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#850: FILE: mm/page_alloc.c:4396:
+       while (inc != 0) {
+               newval += inc;

ERROR:CODE_INDENT: code indent should use tabs where possible
#851: FILE: mm/page_alloc.c:4397:
+               newval += inc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: mm/page_alloc.c:4397:
+               newval += inc;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#852: FILE: mm/page_alloc.c:4398:
+               newval &= ~mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: mm/page_alloc.c:4398:
+               newval &= ~mask;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#853: FILE: mm/page_alloc.c:4399:
+               newval |= ((*addrp) & mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: mm/page_alloc.c:4399:
+               newval |= ((*addrp) & mask);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#854: FILE: mm/page_alloc.c:4400:
+               if (newval > *addrp) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: mm/page_alloc.c:4400:
+               if (newval > *addrp) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#854: FILE: mm/page_alloc.c:4400:
+               if (newval > *addrp) {
+                       *addrp = newval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#855: FILE: mm/page_alloc.c:4401:
+                       *addrp = newval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: mm/page_alloc.c:4401:
+                       *addrp = newval;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#856: FILE: mm/page_alloc.c:4402:
+                       return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: mm/page_alloc.c:4402:
+                       return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#857: FILE: mm/page_alloc.c:4403:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: mm/page_alloc.c:4403:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#858: FILE: mm/page_alloc.c:4404:
+               do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: mm/page_alloc.c:4404:
+               do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#858: FILE: mm/page_alloc.c:4404:
+               do {
+                       inc += inc;

ERROR:CODE_INDENT: code indent should use tabs where possible
#859: FILE: mm/page_alloc.c:4405:
+                       inc += inc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: mm/page_alloc.c:4405:
+                       inc += inc;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#860: FILE: mm/page_alloc.c:4406:
+               } while (inc & ~mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: mm/page_alloc.c:4406:
+               } while (inc & ~mask);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#861: FILE: mm/page_alloc.c:4407:
+               while (inc & mask)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: mm/page_alloc.c:4407:
+               while (inc & mask)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#861: FILE: mm/page_alloc.c:4407:
+               while (inc & mask)
+                       inc += inc;

ERROR:CODE_INDENT: code indent should use tabs where possible
#862: FILE: mm/page_alloc.c:4408:
+                       inc += inc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: mm/page_alloc.c:4408:
+                       inc += inc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: mm/page_alloc.c:4409:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: mm/page_alloc.c:4410:
+       return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#867: FILE: mm/page_alloc.c:4413:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#868: FILE: mm/page_alloc.c:4414:
+void __init badram_markpages (int argc, unsigned long *argv) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#868: FILE: mm/page_alloc.c:4414:
+void __init badram_markpages (int argc, unsigned long *argv) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: mm/page_alloc.c:4415:
+       unsigned long addr, mask;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#870: FILE: mm/page_alloc.c:4416:
+       unsigned long addr, mask;
+       while (argc-- > 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: mm/page_alloc.c:4416:
+       while (argc-- > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#870: FILE: mm/page_alloc.c:4416:
+       while (argc-- > 0) {
+               addr = *argv++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#871: FILE: mm/page_alloc.c:4417:
+               addr = *argv++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: mm/page_alloc.c:4417:
+               addr = *argv++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#872: FILE: mm/page_alloc.c:4418:
+               mask = (argc-- > 0) ? *argv++ : ~0L;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: mm/page_alloc.c:4418:
+               mask = (argc-- > 0) ? *argv++ : ~0L;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#873: FILE: mm/page_alloc.c:4419:
+               mask |= ~PAGE_MASK;     /* Optimalisation */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: mm/page_alloc.c:4419:
+               mask |= ~PAGE_MASK;     /* Optimalisation */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#874: FILE: mm/page_alloc.c:4420:
+               addr &= mask;           /* Normalisation */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: mm/page_alloc.c:4420:
+               addr &= mask;           /* Normalisation */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#875: FILE: mm/page_alloc.c:4421:
+               do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: mm/page_alloc.c:4421:
+               do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#875: FILE: mm/page_alloc.c:4421:
+               do {
+                       struct page *pg = phys_to_page(addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#876: FILE: mm/page_alloc.c:4422:
+                       struct page *pg = phys_to_page(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: mm/page_alloc.c:4422:
+                       struct page *pg = phys_to_page(addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#877: FILE: mm/page_alloc.c:4423:
+                       printk(KERN_DEBUG "%016lx =%016lx\n",$

WARNING:LINE_SPACING: Missing a blank line after declarations
#877: FILE: mm/page_alloc.c:4423:
+                       struct page *pg = phys_to_page(addr);
+                       printk(KERN_DEBUG "%016lx =%016lx\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: mm/page_alloc.c:4423:
+                       printk(KERN_DEBUG "%016lx =%016lx\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#877: FILE: mm/page_alloc.c:4423:
+                       printk(KERN_DEBUG "%016lx =%016lx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#878: FILE: mm/page_alloc.c:4424:
+                                       addr >> PAGE_SHIFT,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: mm/page_alloc.c:4424:
+                       printk(KERN_DEBUG "%016lx =%016lx\n",
+                                       addr >> PAGE_SHIFT,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: mm/page_alloc.c:4424:
+                                       addr >> PAGE_SHIFT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#879: FILE: mm/page_alloc.c:4425:
+                                       (unsigned long)(pg-mem_map));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: mm/page_alloc.c:4425:
+                                       (unsigned long)(pg-mem_map));$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#879: FILE: mm/page_alloc.c:4425:
+                                       (unsigned long)(pg-mem_map));
                                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#880: FILE: mm/page_alloc.c:4426:
+                       if (PageTestandSetBad (pg))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: mm/page_alloc.c:4426:
+                       if (PageTestandSetBad (pg))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#880: FILE: mm/page_alloc.c:4426:
+                       if (PageTestandSetBad (pg))
+                               reserve_bootmem (addr, PAGE_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#880: FILE: mm/page_alloc.c:4426:
+                       if (PageTestandSetBad (pg))

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: mm/page_alloc.c:4427:
+                               reserve_bootmem (addr, PAGE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: mm/page_alloc.c:4427:
+                               reserve_bootmem (addr, PAGE_SIZE);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#881: FILE: mm/page_alloc.c:4427:
+                               reserve_bootmem (addr, PAGE_SIZE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: mm/page_alloc.c:4428:
+               } while (next_masked_address (&addr,mask));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: mm/page_alloc.c:4428:
+               } while (next_masked_address (&addr,mask));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#882: FILE: mm/page_alloc.c:4428:
+               } while (next_masked_address (&addr,mask));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#882: FILE: mm/page_alloc.c:4428:
+               } while (next_masked_address (&addr,mask));
                                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: mm/page_alloc.c:4429:
+       }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#886: FILE: mm/page_alloc.c:4432:
+
+

WARNING:MISPLACED_INIT: __initdata should be placed after badram_custom[]
#891: FILE: mm/page_alloc.c:4437:
+static unsigned long __initdata badram_custom[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: mm/page_alloc.c:4438:
+       0,      /* Number of longwords that follow, as F/M pairs */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#895: FILE: mm/page_alloc.c:4441:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#898: FILE: mm/page_alloc.c:4444:
+static int __init badram_setup (char *str)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: mm/page_alloc.c:4446:
+       unsigned long opts[3];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#901: FILE: mm/page_alloc.c:4447:
+       unsigned long opts[3];
+       BUG_ON(!mem_map);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: mm/page_alloc.c:4447:
+       BUG_ON(!mem_map);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: mm/page_alloc.c:4447:
+       BUG_ON(!mem_map);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: mm/page_alloc.c:4448:
+       printk (KERN_INFO "PAGE_OFFSET=0x%08lx\n", PAGE_OFFSET);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#902: FILE: mm/page_alloc.c:4448:
+       printk (KERN_INFO "PAGE_OFFSET=0x%08lx\n", PAGE_OFFSET);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#902: FILE: mm/page_alloc.c:4448:
+       printk (KERN_INFO "PAGE_OFFSET=0x%08lx\n", PAGE_OFFSET);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: mm/page_alloc.c:4449:
+       printk (KERN_INFO "BadRAM option is %s\n", str);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#903: FILE: mm/page_alloc.c:4449:
+       printk (KERN_INFO "BadRAM option is %s\n", str);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#903: FILE: mm/page_alloc.c:4449:
+       printk (KERN_INFO "BadRAM option is %s\n", str);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: mm/page_alloc.c:4450:
+       if (*str++ == '=')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#904: FILE: mm/page_alloc.c:4450:
+       if (*str++ == '=')
+               while ((str = get_longoptions (str, 3, (long *) opts), *opts)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#905: FILE: mm/page_alloc.c:4451:
+               while ((str = get_longoptions (str, 3, (long *) opts), *opts)) {$

CHECK:SPACING: No space is necessary after a cast
#905: FILE: mm/page_alloc.c:4451:
+               while ((str = get_longoptions (str, 3, (long *) opts), *opts)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: mm/page_alloc.c:4451:
+               while ((str = get_longoptions (str, 3, (long *) opts), *opts)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#905: FILE: mm/page_alloc.c:4451:
+               while ((str = get_longoptions (str, 3, (long *) opts), *opts)) {
+                       printk (KERN_INFO "   --> marking 0x%08lx, 0x%08lx  [%ld]\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#905: FILE: mm/page_alloc.c:4451:
+               while ((str = get_longoptions (str, 3, (long *) opts), *opts)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: mm/page_alloc.c:4452:
+                       printk (KERN_INFO "   --> marking 0x%08lx, 0x%08lx  [%ld]\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: mm/page_alloc.c:4452:
+                       printk (KERN_INFO "   --> marking 0x%08lx, 0x%08lx  [%ld]\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#906: FILE: mm/page_alloc.c:4452:
+                       printk (KERN_INFO "   --> marking 0x%08lx, 0x%08lx  [%ld]\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#906: FILE: mm/page_alloc.c:4452:
+                       printk (KERN_INFO "   --> marking 0x%08lx, 0x%08lx  [%ld]\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: mm/page_alloc.c:4453:
+                                       opts[1], opts[2], opts[0]);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: mm/page_alloc.c:4453:
+                       printk (KERN_INFO "   --> marking 0x%08lx, 0x%08lx  [%ld]\n",
+                                       opts[1], opts[2], opts[0]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: mm/page_alloc.c:4453:
+                                       opts[1], opts[2], opts[0]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: mm/page_alloc.c:4454:
+                       badram_markpages (*opts, opts+1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: mm/page_alloc.c:4454:
+                       badram_markpages (*opts, opts+1);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#908: FILE: mm/page_alloc.c:4454:
+                       badram_markpages (*opts, opts+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#908: FILE: mm/page_alloc.c:4454:
+                       badram_markpages (*opts, opts+1);
                                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: mm/page_alloc.c:4455:
+                       if (*opts == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: mm/page_alloc.c:4455:
+                       if (*opts == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#909: FILE: mm/page_alloc.c:4455:
+                       if (*opts == 1)
+                               break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: mm/page_alloc.c:4456:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: mm/page_alloc.c:4456:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#911: FILE: mm/page_alloc.c:4457:
+               };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: mm/page_alloc.c:4457:
+               };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: mm/page_alloc.c:4458:
+       badram_markpages (*badram_custom, badram_custom+1);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#912: FILE: mm/page_alloc.c:4458:
+       badram_markpages (*badram_custom, badram_custom+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#912: FILE: mm/page_alloc.c:4458:
+       badram_markpages (*badram_custom, badram_custom+1);
                                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: mm/page_alloc.c:4459:
+       return 0;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#916: FILE: mm/page_alloc.c:4462:
+__setup("badram", badram_setup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#920: FILE: mm/page_alloc.c:4466:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#922: FILE: mm/page_alloc.c:4468:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312838.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 68 errors, 132 warnings, 28 checks, 785 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312838.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
