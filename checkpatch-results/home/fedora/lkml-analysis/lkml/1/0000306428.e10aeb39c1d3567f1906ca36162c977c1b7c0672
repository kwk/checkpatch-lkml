WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
- it can avoid unnecessary disk seeks because the blocks will be fetched in 

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: fs/binfmt_elf.c:543:
+		struct elf_phdr *ep = &phdr[i];
+		if (ep->p_type != PT_PRESENT_BITMAP)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#144: FILE: fs/binfmt_elf.c:549:
+			printk("%s: pbitmap load failed: %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#150: FILE: fs/binfmt_elf.c:555:
+		printk("%s: %d pages prefetched\n", current->comm, found);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#158: FILE: fs/binfmt_elf.c:563:
+	unsigned n;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#166: FILE: fs/binfmt_elf.c:571:
+		printk(KERN_WARNING "%s: unexpected shdr size %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#171: FILE: fs/binfmt_elf.c:576:
+		printk(KERN_WARNING "%s: too many shdrs (%u)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#181: FILE: fs/binfmt_elf.c:586:
+		printk(KERN_WARNING "%s: shdr read failed: %d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: fs/binfmt_elf.c:594:
+			struct elf_shdr *sh = &shdrs[n];
+			if (sh->sh_type != SHT_PRESENT_BITMAP)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: fs/binfmt_elf.c:600:
+				printk("%s: pbitmap load failed: %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#201: FILE: fs/binfmt_elf.c:606:
+			printk("%s: %d pages prefetched\n", current->comm,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#204: FILE: fs/binfmt_elf.c:609:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#271: FILE: include/linux/mm.h:1223:
+extern unsigned pbitmap_update_interval;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#293: FILE: mm/pbitmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#312: FILE: mm/pbitmap.c:20:
+#include <asm/uaccess.h>

CHECK:CAMELCASE: Avoid CamelCase: <Pprintk>
#314: FILE: mm/pbitmap.c:22:
+#define Pprintk(x...)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#333: FILE: mm/pbitmap.c:41:
+unsigned pbitmap_update_interval __read_mostly = 0; /* seconds */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: mm/pbitmap.c:45:
+alloc_pb(struct vm_area_struct *vma, unsigned long vaddr,
+	unsigned long file_offset, unsigned long filesz)

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: mm/pbitmap.c:48:
+	struct pbitmap *pb;
+	pb = kzalloc(sizeof(struct pbitmap), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pb)...) over kzalloc(sizeof(struct pbitmap)...)
#340: FILE: mm/pbitmap.c:48:
+	pb = kzalloc(sizeof(struct pbitmap), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_pb', this function's name, in a string
#344: FILE: mm/pbitmap.c:52:
+	Pprintk("alloc_pb vaddr %lx filesz %lu\n", vaddr, filesz);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#348: FILE: mm/pbitmap.c:56:
+	pb->npages = filesz*8;
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#359: FILE: mm/pbitmap.c:67:
+	if (pb->fh)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#361: FILE: mm/pbitmap.c:69:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: mm/pbitmap.c:86:
+		int n = left, k, bit;
+		if (n > PAGE_SIZE)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: mm/pbitmap.c:93:
+			printk("prefetch read failed: %d\n", n);

WARNING:LINE_SPACING: Missing a blank line after declarations
#405: FILE: mm/pbitmap.c:113:
+			int err, i;
+			for (i = 1; i < n - bit; i++)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#409: FILE: mm/pbitmap.c:117:
+					     pb->start + bit*PAGE_SIZE,
 					                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#410: FILE: mm/pbitmap.c:118:
+					     i*PAGE_SIZE,
 					      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#414: FILE: mm/pbitmap.c:122:
+			if (err < 0) {
[...]
+			} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#415: FILE: mm/pbitmap.c:123:
+				printk("prefetch gup failed %d %lx\n", err,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#416: FILE: mm/pbitmap.c:124:
+				       pb->start+bit*PAGE_SIZE);
 				                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#416: FILE: mm/pbitmap.c:124:
+				       pb->start+bit*PAGE_SIZE);
 				                    ^

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: mm/pbitmap.c:125:
+			} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#441: FILE: mm/pbitmap.c:149:
+	if (vma->vm_file == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#454: FILE: mm/pbitmap.c:162:
+	printk("%d prefetched\n", err);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#470: FILE: mm/pbitmap.c:178:
+	spinlock_t *ptl;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: mm/pbitmap.c:230:
+static void pbitmap_page_range(struct vm_area_struct *vma,
+			      unsigned long addr, unsigned long end,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#528: FILE: mm/pbitmap.c:236:
+	BUG_ON(addr >= end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#548: FILE: mm/pbitmap.c:256:
+	if (vma->vm_start >= pb->start + pb->npages*PAGE_SIZE)
 	                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#559: FILE: mm/pbitmap.c:267:
+		unsigned long end = pb->start + pb->npages*PAGE_SIZE;
 		                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#560: FILE: mm/pbitmap.c:268:
+		unsigned long end = pb->start + pb->npages*PAGE_SIZE;
+		if (addr < vma->vm_start)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: mm/pbitmap.c:273:
+		Pprintk("p_p_r	%lx %lx vma %lx-%lx pb start %lx pages %lu\n",
+		       addr, end,

WARNING:LINE_SPACING: Missing a blank line after declarations
#578: FILE: mm/pbitmap.c:286:
+	long x = 0;
+	for (i = 0; i < n; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: mm/pbitmap.c:288:
+		unsigned char v = buffer[i];
+		while (v) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#593: FILE: mm/pbitmap.c:301:
+	struct inode *i;
+	if (!pbitmap_update_interval)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#625: FILE: mm/pbitmap.c:333:
+	list_for_each_entry (pb, &mm->pbitmap_list, node) {
+		 long bytes = BITS_TO_BYTES(pb->npages);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#625: FILE: mm/pbitmap.c:333:
+	list_for_each_entry (pb, &mm->pbitmap_list, node) {

WARNING:TABSTOP: Statements should start on a tabstop
#626: FILE: mm/pbitmap.c:334:
+		 long bytes = BITS_TO_BYTES(pb->npages);

WARNING:TYPO_SPELLING: 'extremly' may be misspelled - perhaps 'extremely'?
#631: FILE: mm/pbitmap.c:339:
+		/* This is typically order 0; only extremly large VMAs
 		                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#632: FILE: mm/pbitmap.c:340:
+		/* This is typically order 0; only extremly large VMAs
+		   (> 128MB) would have order >0. Failing is also not fatal.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#633: FILE: mm/pbitmap.c:341:
+		   We don't want any swapping so use GFP_NOFS */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#639: FILE: mm/pbitmap.c:347:
+				__get_free_pages(GFP_NOFS|__GFP_NOWARN|
 				                         ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#639: FILE: mm/pbitmap.c:347:
+				__get_free_pages(GFP_NOFS|__GFP_NOWARN|
 				                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#642: FILE: mm/pbitmap.c:350:
+				printk("allocation %d failed\n", order);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#662: FILE: mm/pbitmap.c:370:
+					     O_WRONLY|O_FORCEWRITE);
 					             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#664: FILE: mm/pbitmap.c:372:
+				printk("dentry open of %s failed: %ld\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#672: FILE: mm/pbitmap.c:380:
+			int n;
+			pbitmap_walk_vmas(pb, vma);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#673: FILE: mm/pbitmap.c:381:
+			Pprintk("%s: %ld bytes end %ld bits [%lx] at %Lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#682: FILE: mm/pbitmap.c:390:
+				printk("%s: bitmap write %d of %ld\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#691: FILE: mm/pbitmap.c:399:
+	list_for_each_entry_safe (pb, prev, &mm->pbitmap_list, node)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 38 warnings, 22 checks, 580 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
