WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#59: FILE: arch/Kconfig:47:
+config OPTPROBES
+	bool "Kprobes jump optimization support (EXPERIMENTAL)"
+	depends on KPROBES
+	depends on !PREEMPT
+	depends on HAVE_OPTPROBES
+	help
+	  This option will allow kprobes to optimize breakpoint to
+	  a jump for reducing its overhead.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/kprobes.h:252:
+extern int aggr_pre_handler(struct kprobe *p, struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/kprobes.h:265:
+extern int arch_optimized_kprobe_address(struct optimized_kprobe *op,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/kprobes.h:267:
+extern int arch_prepare_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/kprobes.h:268:
+extern void arch_remove_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/kprobes.h:269:
+extern int  arch_optimize_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/kprobes.h:270:
+extern void arch_unoptimize_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/kprobes.h:271:
+extern int arch_detour_optimized_kprobe(struct optimized_kprobe *op,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: kernel/kprobes.c:396:
+static int __kprobes opt_pre_handler(struct kprobe *kp,
+					 struct pt_regs *regs)

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: kernel/kprobes.c:399:
+	struct optimized_kprobe *op;
+	op = container_of(kp, struct optimized_kprobe, kp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: kernel/kprobes.c:676:
+	struct optimized_kprobe *op, *tmp;
+	mutex_lock(&optimizing_lock);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#202: FILE: kernel/kprobes.c:678:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: kernel/kprobes.c:703:
+	int ret;
+	if (p->break_handler || p->post_handler)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*op)...) over kzalloc(sizeof(struct optimized_kprobe)...)
#230: FILE: kernel/kprobes.c:706:
+	op = kzalloc(sizeof(struct optimized_kprobe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: kernel/kprobes.c:737:
+	struct optimized_kprobe *op;
+	op = container_of(p, struct optimized_kprobe, kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: kernel/kprobes.c:751:
+	struct optimized_kprobe *op;
+	for (i = 0; i < MAX_OPTIMIZED_LENGTH; i++) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#286: FILE: kernel/kprobes.c:762:
+#define optimize_kprobe(p) (-ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: kernel/kprobes.c:977:
+			struct optimized_kprobe *op;
+			op = container_of(old_p, struct optimized_kprobe, kp);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000143506.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 9 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000143506.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
