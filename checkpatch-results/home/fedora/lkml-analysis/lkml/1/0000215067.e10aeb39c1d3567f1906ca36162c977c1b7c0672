WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#71: FILE: kernel/params.c:376:
+#define to_module_attr(n) container_of(n, struct module_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#72: FILE: kernel/params.c:377:
+#define to_module_kobject(n) container_of(n, struct module_kobject, kobj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: kernel/params.c:458:
+	BUG_ON(!kp->perm);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: kernel/params.c:470:
+		       sizeof(*mk->mp) + sizeof(mk->mp->attrs[0]) * (num+1),
 		                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#149: FILE: kernel/params.c:477:
+	attrs = krealloc(attrs, sizeof(new->grp.attrs[0])*(num+2), GFP_KERNEL);
 	                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#149: FILE: kernel/params.c:477:
+	attrs = krealloc(attrs, sizeof(new->grp.attrs[0])*(num+2), GFP_KERNEL);
 	                                                      ^

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#149: FILE: kernel/params.c:477:
+	attrs = krealloc(attrs, sizeof(new->grp.attrs[0])*(num+2), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#175: FILE: kernel/params.c:496:
+	new->num = num+1;
 	              ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mk)...) over kzalloc(sizeof(struct module_kobject)...)
#306: FILE: kernel/params.c:589:
+		mk = kzalloc(sizeof(struct module_kobject), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: kernel/params.c:590:
+		BUG_ON(!mk);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#324: FILE: kernel/params.c:598:
+			printk(KERN_ERR "Module '%s' failed add to sysfs, "

WARNING:SPLIT_STRING: quoted string split across lines
#325: FILE: kernel/params.c:599:
+			printk(KERN_ERR "Module '%s' failed add to sysfs, "
+			       "error number %d\n", name, err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#326: FILE: kernel/params.c:600:
+			printk(KERN_ERR	"The system will be unstable now.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: kernel/params.c:609:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: kernel/params.c:611:
+	BUG_ON(err);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: kernel/params.c:647:
+		kernel_add_sysfs_param(modname, kp, name_len+1);
 		                                            ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000215067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 6 checks, 350 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000215067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
