WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#149: FILE: MAINTAINERS:3836:
 P:	Liam Girdwood
+M:	lrg@slimlogic.co.uk

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#291: FILE: arch/mn10300/kernel/time.c:53:
+		unsigned l[2];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#294: FILE: arch/mn10300/kernel/time.c:56:
+	unsigned product[3]; /* 96-bit intermediate value */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#314: FILE: arch/mn10300/kernel/time.c:71:
+	asm("mulu	%2,%0,%3,%0	\n"	/* LSW * mult ->  0:%3:%0 */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#315: FILE: arch/mn10300/kernel/time.c:72:
+	    "mulu	%2,%1,%2,%1	\n"	/* MSW * mult -> %2:%1:0 */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#316: FILE: arch/mn10300/kernel/time.c:73:
+	    "add	%3,%1		\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#317: FILE: arch/mn10300/kernel/time.c:74:
+	    "addc	0,%2		\n"	/* result in %2:%1:%0 */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#521: FILE: arch/x86/kernel/process.c:275:
+			printk(KERN_INFO "System has AMD C1E enabled\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: arch/x86/kernel/vsmp_64.c:65:
+static unsigned __init_or_module vsmp_patch(u8 type, u16 clobbers, void *ibuf,
 				  unsigned long addr, unsigned len)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#892: FILE: drivers/ata/ata_piix.c:1276:
+static int __devinit piix_init_sidpr(struct ata_host *host)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1742: FILE: drivers/ata/libata-eh.c:2553:
+		ata_link_printk(failed_link, KERN_WARNING,
 			"reset failed (errno=%d), retrying in %u secs\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#1750: FILE: drivers/ata/libata-eh.c:2560:
+	if (try == max_tries - 1) {
[...]
+	} else if (rc == -EPIPE)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#1878: FILE: drivers/ata/libata-eh.c:2836:
+			ata_dev_printk(dev, KERN_WARNING, "TEST_UNIT_READY "
+				"failed (err_mask=0x%x)\n", err_mask);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1888: FILE: drivers/ata/libata-eh.c:2846:
+			ata_dev_printk(dev, KERN_WARNING, "failed to clear "
+				"UNIT ATTENTION (err_mask=0x%x)\n", err_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1894: FILE: drivers/ata/libata-eh.c:2852:
+	ata_dev_printk(dev, KERN_WARNING,
+		"UNIT ATTENTION persists after %d tries\n", ATA_EH_UA_TRIES);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2023: FILE: drivers/ata/libata-scsi.c:194:
+	unsigned long flags;
+	unsigned int uninitialized_var(msecs);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2023: FILE: drivers/ata/libata-scsi.c:194:
+	unsigned int uninitialized_var(msecs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'msecs' should also have an identifier name
#2023: FILE: drivers/ata/libata-scsi.c:194:
+	unsigned int uninitialized_var(msecs);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#2060: FILE: drivers/ata/libata-scsi.c:231:
+	long int input;

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2064: FILE: drivers/ata/libata-scsi.c:235:
+	rc = strict_strtol(buf, 10, &input);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ata_scsi_park_show' to 'unload_heads_show' 'ata_scsi_park_store' to 'unload_heads_store'
#2109: FILE: drivers/ata/libata-scsi.c:280:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2110: FILE: drivers/ata/libata-scsi.c:281:
+DEVICE_ATTR(unload_heads, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2148: FILE: drivers/ata/libata.h:73:
+extern struct ata_link *ata_dev_phys_link(struct ata_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2156: FILE: drivers/ata/libata.h:111:
+extern bool ata_phys_link_online(struct ata_link *link);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2157: FILE: drivers/ata/libata.h:112:
+extern bool ata_phys_link_offline(struct ata_link *link);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2191: FILE: drivers/ata/pata_bf54x.c:1664:
+	struct ata_host *host = dev_get_drvdata(&pdev->dev);
+	if (host)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2206: FILE: drivers/ata/pata_bf54x.c:1678:
+			printk(KERN_ERR DRV_NAME ": Error during HW init\n");

CHECK:CAMELCASE: Avoid CamelCase: <Serror>
#2300: FILE: drivers/ata/sata_fsl.c:871:
+		sata_fsl_scr_read(&ap->link, SCR_ERROR, &Serror);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SError>
#2309: FILE: drivers/ata/sata_fsl.c:975:
+	sata_fsl_scr_read(&ap->link, SCR_ERROR, &SError);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2334: FILE: drivers/ata/sata_inic162x.c:272:
+static int inic_scr_read(struct ata_link *link, unsigned sc_reg, u32 *val)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2346: FILE: drivers/ata/sata_inic162x.c:289:
+static int inic_scr_write(struct ata_link *link, unsigned sc_reg, u32 val)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2636: FILE: drivers/ata/sata_sil24.c:343:
+static int sil24_scr_read(struct ata_link *link, unsigned sc_reg, u32 *val);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2637: FILE: drivers/ata/sata_sil24.c:344:
+static int sil24_scr_write(struct ata_link *link, unsigned sc_reg, u32 val);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2646: FILE: drivers/ata/sata_sil24.c:507:
+static int sil24_scr_read(struct ata_link *link, unsigned sc_reg, u32 *val)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2658: FILE: drivers/ata/sata_sil24.c:520:
+static int sil24_scr_write(struct ata_link *link, unsigned sc_reg, u32 val)

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#3046: FILE: drivers/i2c/busses/i2c-powermac.c:183:
+static int __devexit i2c_powermac_remove(struct platform_device *dev)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#3055: FILE: drivers/i2c/busses/i2c-powermac.c:203:
+static int __devinit i2c_powermac_probe(struct platform_device *dev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3193: FILE: drivers/net/wireless/ath9k/core.c:802:
+	 * we can re-enable this interrupt. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3194: FILE: drivers/net/wireless/ath9k/core.c:803:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3399: FILE: drivers/scsi/libsas/sas_ata.c:298:
+static int sas_ata_scr_write(struct ata_link *link, unsigned int sc_reg_in,
 			      u32 val)

WARNING:LONG_LINE_COMMENT: line length of 119 exceeds 100 columns
#3428: FILE: drivers/serial/atmel_serial.c:134:
+	int			may_wakeup;	/* cached value of device_may_wakeup for times we need to disable it */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#3565: FILE: drivers/usb/core/hub.c:2730:
+			if (printk_ratelimit())

WARNING:SPLIT_STRING: quoted string split across lines
#3567: FILE: drivers/usb/core/hub.c:2732:
+				dev_err(hub_dev, "connect-debounce failed, "
+						"port %d disabled\n", port1);

WARNING:TYPO_SPELLING: 'handhake' may be misspelled - perhaps 'handshake'?
#3655: FILE: drivers/usb/host/ehci-hcd.c:175:
+		ehci_err(ehci, "force halt; handhake %p %08x %08x -> %d\n",
 		                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3656: FILE: drivers/usb/host/ehci-hcd.c:176:
+		ehci_err(ehci, "force halt; handhake %p %08x %08x -> %d\n",
+			ptr, mask, done, error);

CHECK:SPACING: No space is necessary after a cast
#3732: FILE: drivers/usb/host/ehci-sched.c:1644:
+	(void) disable_periodic(ehci);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#3752: FILE: drivers/usb/host/ehci-sched.c:2019:
+	(void) disable_periodic(ehci);

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#3988: FILE: drivers/usb/serial/usb-serial.c:736:
+	     (le16_to_cpu(dev->descriptor.idProduct) == ALCOR_PRODUCT_ID)) ||

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#3989: FILE: drivers/usb/serial/usb-serial.c:737:
+	    ((le16_to_cpu(dev->descriptor.idVendor) == SIEMENS_VENDOR_ID) &&

ERROR:SPACING: space prohibited after that open parenthesis '('
#4043: FILE: drivers/usb/storage/unusual_devs.h:164:
+UNUSUAL_DEV(  0x0421, 0x005d, 0x0001, 0x0600,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4044: FILE: drivers/usb/storage/unusual_devs.h:165:
+UNUSUAL_DEV(  0x0421, 0x005d, 0x0001, 0x0600,
+		"Nokia",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4047: FILE: drivers/usb/storage/unusual_devs.h:168:
+		US_FL_FIX_CAPACITY ),

ERROR:SPACING: space prohibited after that open parenthesis '('
#4057: FILE: drivers/usb/storage/unusual_devs.h:243:
+UNUSUAL_DEV(  0x0421, 0x04fa, 0x0601, 0x0601,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4058: FILE: drivers/usb/storage/unusual_devs.h:244:
+UNUSUAL_DEV(  0x0421, 0x04fa, 0x0601, 0x0601,
+		"Nokia",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4061: FILE: drivers/usb/storage/unusual_devs.h:247:
+		US_FL_FIX_CAPACITY ),

ERROR:SPACING: space prohibited after that open parenthesis '('
#4064: FILE: drivers/usb/storage/unusual_devs.h:250:
+UNUSUAL_DEV(  0x0421, 0x006a, 0x0000, 0x0591,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4065: FILE: drivers/usb/storage/unusual_devs.h:251:
+UNUSUAL_DEV(  0x0421, 0x006a, 0x0000, 0x0591,
+	"Nokia",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4068: FILE: drivers/usb/storage/unusual_devs.h:254:
+	US_FL_FIX_CAPACITY ),

ERROR:SPACING: space prohibited after that open parenthesis '('
#4078: FILE: drivers/usb/storage/unusual_devs.h:1012:
+UNUSUAL_DEV(  0x071b, 0x3203, 0x0000, 0x0000,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4079: FILE: drivers/usb/storage/unusual_devs.h:1013:
+UNUSUAL_DEV(  0x071b, 0x3203, 0x0000, 0x0000,
+		"RockChip",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4128: FILE: drivers/watchdog/geodewdt.c:134:
+static long geodewdt_ioctl(struct file *file, unsigned int cmd,
+				unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4164: FILE: drivers/watchdog/pnx4008_wdt.c:177:
+static long pnx4008_wdt_ioctl(struct file *file, unsigned int cmd,
+				unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4179: FILE: drivers/watchdog/rc32434_wdt.c:186:
+static long rc32434_wdt_ioctl(struct file *file, unsigned int cmd,
+				unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4203: FILE: drivers/watchdog/rdc321x_wdt.c:148:
+static long rdc321x_wdt_ioctl(struct file *file, unsigned int cmd,
+				unsigned long arg)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4323: FILE: include/asm-x86/cpufeature.h:84:
+#define X86_FEATURE_AMDC1E	(3*32+21) /* AMD C1E detected */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4323: FILE: include/asm-x86/cpufeature.h:84:
+#define X86_FEATURE_AMDC1E	(3*32+21) /* AMD C1E detected */
                           	     ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#4359: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4364: FILE: include/linux/cnt32_to_63.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4395: FILE: include/linux/cnt32_to_63.h:32:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4434: FILE: include/linux/cnt32_to_63.h:71:
+	static volatile u32 __m_cnt_hi; \

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4439: FILE: include/linux/cnt32_to_63.h:76:
+		__m_cnt_hi = __x.hi = (__x.hi ^ 0x80000000) + (__x.hi >> 31); \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4544: FILE: include/linux/libata.h:908:
+extern int ata_slave_link_init(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4554: FILE: include/linux/libata.h:934:
+extern bool ata_link_online(struct ata_link *link);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4555: FILE: include/linux/libata.h:935:
+extern bool ata_link_offline(struct ata_link *link);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4620: FILE: include/linux/libata.h:1281:
+extern struct ata_link *__ata_port_next_link(struct ata_port *ap,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'link' - possible side-effects?
#4626: FILE: include/linux/libata.h:1285:
+#define __ata_port_for_each_link(link, ap) \
+	for ((link) = __ata_port_next_link((ap), NULL, false); (link); \
+	     (link) = __ata_port_next_link((ap), (link), false))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ap' - possible side-effects?
#4626: FILE: include/linux/libata.h:1285:
+#define __ata_port_for_each_link(link, ap) \
+	for ((link) = __ata_port_next_link((ap), NULL, false); (link); \
+	     (link) = __ata_port_next_link((ap), (link), false))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4835: FILE: kernel/time/tick-common.c:304:
+		tick_do_timer_cpu = (cpu != NR_CPUS) ? cpu :

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4859: FILE: kernel/time/tick-internal.h:38:
+extern int tick_broadcast_oneshot_active(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4875: FILE: kernel/time/tick-internal.h:77:
 }
+static inline int tick_broadcast_oneshot_active(void) { return 0; }

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#4968: FILE: mm/tiny-shmem.c:74:
+	inode = ramfs_get_inode(root->d_sb, S_IFREG | S_IRWXUGO, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4976: FILE: mm/tiny-shmem.c:82:
+	init_file(file, shm_mnt, dentry, FMODE_WRITE | FMODE_READ,
+			&ramfs_file_operations);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#5043: FILE: net/9p/conv.c:454:
+	if (*pdata == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#5055: FILE: net/9p/conv.c:465:
+	if (*pdata == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5130: FILE: net/9p/mod.c:89:
+		if (strncmp(t->name, name->from, name->to-name->from) == 0 &&
 		                                         ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*m)...) over kzalloc(sizeof(struct p9_conn)...)
#5256: FILE: net/9p/trans_fd.c:398:
+	m = kzalloc(sizeof(struct p9_conn), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5434: FILE: net/9p/trans_fd.c:1612:
+		printk(KERN_WARNING "v9fs: mux: creating workqueue failed\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5538: FILE: net/socket.c:1514:
+#if 0

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221985.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 41 warnings, 40 checks, 4727 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221985.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
