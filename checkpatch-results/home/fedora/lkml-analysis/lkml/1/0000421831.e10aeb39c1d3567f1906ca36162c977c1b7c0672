WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/pci/dmar.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#96: FILE: drivers/pci/dmar.c:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#99: FILE: drivers/pci/dmar.c:17:
+ * ^ICopyright (C) Ashok Raj <ashok.raj@intel.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: drivers/pci/dmar.c:20:
+ * ^IThis file implements early detection/parsing of DMA Remapping Devices$

CHECK:SPACING: spaces preferred around that '/' (ctx:ExV)
#150: FILE: drivers/pci/dmar.c:68:
+		/sizeof(struct acpi_dmar_pci_path);
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#160: FILE: drivers/pci/dmar.c:78:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#167: FILE: drivers/pci/dmar.c:85:
+			printk(KERN_WARNING PREFIX

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#172: FILE: drivers/pci/dmar.c:90:
+		path ++;
 		     ^

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#173: FILE: drivers/pci/dmar.c:91:
+		count --;
 		      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#177: FILE: drivers/pci/dmar.c:95:
+		printk(KERN_WARNING PREFIX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#184: FILE: drivers/pci/dmar.c:102:
+	if ((scope->entry_type == ACPI_DMAR_SCOPE_TYPE_ENDPOINT && pdev->subordinate)
+	   || (scope->entry_type == ACPI_DMAR_SCOPE_TYPE_BRIDGE && !pdev->subordinate)) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#186: FILE: drivers/pci/dmar.c:104:
+		printk(KERN_WARNING PREFIX "Device scope type does not match for %s\n", pci_name(pdev));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#186: FILE: drivers/pci/dmar.c:104:
+		printk(KERN_WARNING PREFIX "Device scope type does not match for %s\n", pci_name(pdev));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: drivers/pci/dmar.c:115:
+	void * tmp = start;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#208: FILE: drivers/pci/dmar.c:126:
+			printk(KERN_WARNING PREFIX "Unsupported device scope\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: drivers/pci/dmar.c:143:
+			ret = dmar_parse_one_dev_scope(scope,
+				&(*devices)[index], segment);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#230: FILE: drivers/pci/dmar.c:148:
+			index ++;
 			      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: drivers/pci/dmar.c:164:
+	struct acpi_dmar_hardware_unit * drhd = (struct acpi_dmar_hardware_unit *)header;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: drivers/pci/dmar.c:178:
+		ret = dmar_parse_dev_scope((void *)(drhd + 1),
+				((void *)drhd) + header->length,

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: drivers/pci/dmar.c:181:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#266: FILE: drivers/pci/dmar.c:184:
+			printk(KERN_WARNING PREFIX "Only one INCLUDE_ALL "

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: drivers/pci/dmar.c:185:
+			printk(KERN_WARNING PREFIX "Only one INCLUDE_ALL "
+				"device scope is allowed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: drivers/pci/dmar.c:212:
+	ret = dmar_parse_dev_scope((void *)(rmrr + 1),
+		((void*)rmrr) + header->length,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#294: FILE: drivers/pci/dmar.c:212:
+		((void*)rmrr) + header->length,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rmrru->devices_cnt == 0'
#297: FILE: drivers/pci/dmar.c:215:
+	if (ret || (rmrru->devices_cnt == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#313: FILE: drivers/pci/dmar.c:231:
+		printk (KERN_INFO PREFIX

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#313: FILE: drivers/pci/dmar.c:231:
+		printk (KERN_INFO PREFIX

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#314: FILE: drivers/pci/dmar.c:232:
+			"DRHD (flags: 0x%08x)base: 0x%016Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#320: FILE: drivers/pci/dmar.c:238:
+		printk (KERN_INFO PREFIX

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: drivers/pci/dmar.c:238:
+		printk (KERN_INFO PREFIX

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#321: FILE: drivers/pci/dmar.c:239:
+			"RMRR base: 0x%016Lx end: 0x%016Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#340: FILE: drivers/pci/dmar.c:258:
+		printk (KERN_WARNING PREFIX "Zero: Invalid DMAR haw\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#340: FILE: drivers/pci/dmar.c:258:
+		printk (KERN_WARNING PREFIX "Zero: Invalid DMAR haw\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#344: FILE: drivers/pci/dmar.c:262:
+	printk (KERN_INFO PREFIX "Host address width %d\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#344: FILE: drivers/pci/dmar.c:262:
+	printk (KERN_INFO PREFIX "Host address width %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#359: FILE: drivers/pci/dmar.c:277:
+			printk(KERN_WARNING PREFIX "Unknown DMAR structure type\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#371: FILE: drivers/pci/dmar.c:289:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#374: FILE: drivers/pci/dmar.c:292:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#377: FILE: drivers/pci/dmar.c:295:
+		printk(KERN_ERR PREFIX "No DMAR devices found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#395: FILE: drivers/pci/dmar.c:313:
+		printk (KERN_WARNING PREFIX "Unable to map DMAR\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#395: FILE: drivers/pci/dmar.c:313:
+		printk (KERN_WARNING PREFIX "Unable to map DMAR\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#484: FILE: include/linux/dmar.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#497: FILE: include/linux/dmar.h:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: include/linux/dmar.h:27:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#511: FILE: include/linux/dmar.h:28:
+extern int dmar_table_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#512: FILE: include/linux/dmar.h:29:
+extern int early_dmar_detect(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#520: FILE: include/linux/dmar.h:37:
+^Istruct^Ipci_dev **devices; ^I/* target device array^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: include/linux/dmar.h:39:
+^Iu8^Iignored:1; ^I^I/* ignore drhd^I^I*/$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421831.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 28 warnings, 12 checks, 464 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421831.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
