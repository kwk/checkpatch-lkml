WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Thanks Russell's review, we update the serial core driver according to Russell's comments.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: drivers/serial/Kconfig:501:
+config SERIAL_BFIN
+	tristate "Blackfin serial port support (EXPERIMENTAL)"
+	depends on BFIN && EXPERIMENTAL
+	select SERIAL_CORE
+	select SERIAL_BFIN_UART0 if (BF531 || BF532 || BF533 || BF561)
+	help
+	  Add support for the built-in UARTs on the Blackfin.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called bfin_5xx.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: drivers/serial/Kconfig:512:
+config SERIAL_BFIN_CONSOLE
+	bool "Console on Blackfin serial port"
+	depends on SERIAL_BFIN
+	select SERIAL_CORE_CONSOLE
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#72: FILE: drivers/serial/Kconfig:517:
+choice
+	prompt  "Blackfin UART Mode"
+	depends on SERIAL_BFIN
+	default SERIAL_BFIN_DMA
+	help
+	  This driver supports the built-in serial ports of the Blackfin family
+	  of CPUs
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: drivers/serial/Kconfig:525:
+config SERIAL_BFIN_DMA
+	bool "Blackfin UART DMA mode"
+	depends on DMA_UNCACHED_1M
+	help
+	  This driver works under DMA mode. If this option is selected, the
+	  blackfin simple dma driver is also enabled.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#87: FILE: drivers/serial/Kconfig:532:
+config SERIAL_BFIN_PIO
+	bool "Blackfin UART PIO mode"
+	help
+	  This driver works under PIO mode.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#94: FILE: drivers/serial/Kconfig:539:
+config SERIAL_BFIN_UART0
+	bool "Enable UART0"
+	depends on SERIAL_BFIN
+	help
+	  Enable UART0
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#100: FILE: drivers/serial/Kconfig:545:
+config BFIN_UART0_CTSRTS
+	bool "Enable UART0 hardware flow control"
+	depends on SERIAL_BFIN_UART0
+	help
+	  Enable hardware flow control in the driver. Using GPIO emulate the CTS/RTS
+	  signal.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#123: FILE: drivers/serial/Kconfig:568:
+config SERIAL_BFIN_UART1
+	bool "Enable UART1"
+	depends on SERIAL_BFIN && BF537
+	help
+	  Enable UART1
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#129: FILE: drivers/serial/Kconfig:574:
+config BFIN_UART1_CTSRTS
+	bool "Enable UART1 hardware flow control"
+	depends on SERIAL_BFIN_UART1
+	help
+	  Enable hardware flow control in the driver. Using GPIO emulate the CTS/RTS
+	  signal.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#170: FILE: drivers/serial/bfin_5xx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#171: FILE: drivers/serial/bfin_5xx.c:2:
+ * File:         drivers/serial/bfin_5xx.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#178: FILE: drivers/serial/bfin_5xx.c:9:
+ * Rev:          $Id: bfin_5xx.c,v 1.19 2006/09/24 02:33:53 aubrey Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#198: FILE: drivers/serial/bfin_5xx.c:29:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/gpio.h> instead of <asm/gpio.h>
#215: FILE: drivers/serial/bfin_5xx.c:46:
+#include <asm/gpio.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#220: FILE: drivers/serial/bfin_5xx.c:51:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#222: FILE: drivers/serial/bfin_5xx.c:53:
+#include <asm/cacheflush.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: drivers/serial/bfin_5xx.c:87:
+        disable_dma(uart->tx_dma_channel);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: drivers/serial/bfin_5xx.c:87:
+        disable_dma(uart->tx_dma_channel);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: drivers/serial/bfin_5xx.c:108:
+	unsigned short ier;
+	ier = UART_GET_IER(uart);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#314: FILE: drivers/serial/bfin_5xx.c:145:
+	} while (!(status & THRE));
 	                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#323: FILE: drivers/serial/bfin_5xx.c:154:
+	struct tty_struct *tty = uart->port.info?uart->port.info->tty:0;
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#323: FILE: drivers/serial/bfin_5xx.c:154:
+	struct tty_struct *tty = uart->port.info?uart->port.info->tty:0;
 	                                                             ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#326: FILE: drivers/serial/bfin_5xx.c:157:
+	static int in_break = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: drivers/serial/bfin_5xx.c:161:
+ ^Ich = UART_GET_CHAR(uart);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: drivers/serial/bfin_5xx.c:161:
+ ^Ich = UART_GET_CHAR(uart);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: drivers/serial/bfin_5xx.c:161:
+ ^Ich = UART_GET_CHAR(uart);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: drivers/serial/bfin_5xx.c:162:
+ ^Iuart->port.icount.rx++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: drivers/serial/bfin_5xx.c:162:
+ ^Iuart->port.icount.rx++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: drivers/serial/bfin_5xx.c:162:
+ ^Iuart->port.icount.rx++;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#343: FILE: drivers/serial/bfin_5xx.c:174:
+	if (status & BI) {
[...]
+	} else if (status & PE) {
[...]
+	} else if (status & OE) {
[...]
+	} else if (status & FE) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#360: FILE: drivers/serial/bfin_5xx.c:191:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: drivers/serial/bfin_5xx.c:257:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#467: FILE: drivers/serial/bfin_5xx.c:298:
+	blackfin_dcache_flush_range((unsigned long)(xmit->buf+xmit->tail),
 	                                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: drivers/serial/bfin_5xx.c:299:
+	blackfin_dcache_flush_range((unsigned long)(xmit->buf+xmit->tail),
+					(unsigned long)(xmit->buf+xmit->tail+uart->tx_count));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#468: FILE: drivers/serial/bfin_5xx.c:299:
+					(unsigned long)(xmit->buf+xmit->tail+uart->tx_count));
 					                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#468: FILE: drivers/serial/bfin_5xx.c:299:
+					(unsigned long)(xmit->buf+xmit->tail+uart->tx_count));
 					                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: drivers/serial/bfin_5xx.c:301:
+	set_dma_config(uart->tx_dma_channel,
+		set_bfin_dma_config(DIR_READ, DMA_FLOW_STOP,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: drivers/serial/bfin_5xx.c:302:
+		set_bfin_dma_config(DIR_READ, DMA_FLOW_STOP,
+			INTR_ON_BUF,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#474: FILE: drivers/serial/bfin_5xx.c:305:
+	set_dma_start_addr(uart->tx_dma_channel, (unsigned long)(xmit->buf+xmit->tail));
 	                                                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#484: FILE: drivers/serial/bfin_5xx.c:315:
+static void bfin_serial_dma_rx_chars(struct bfin_serial_port * uart)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#490: FILE: drivers/serial/bfin_5xx.c:321:
+	uart->port.icount.rx += CIRC_CNT(uart->rx_dma_buf.head, uart->rx_dma_buf.tail, UART_XMIT_SIZE);;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#490: FILE: drivers/serial/bfin_5xx.c:321:
+	uart->port.icount.rx += CIRC_CNT(uart->rx_dma_buf.head, uart->rx_dma_buf.tail, UART_XMIT_SIZE);;

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: drivers/serial/bfin_5xx.c:323:
+        if (status & BI) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: drivers/serial/bfin_5xx.c:323:
+        if (status & BI) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#492: FILE: drivers/serial/bfin_5xx.c:323:
+        if (status & BI) {
[...]
+        } else if (status & PE) {
[...]
+        } else if (status & OE) {
[...]
+        } else if (status & FE) {
[...]
+        } else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: drivers/serial/bfin_5xx.c:324:
+                uart->port.icount.brk++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: drivers/serial/bfin_5xx.c:324:
+                uart->port.icount.brk++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: drivers/serial/bfin_5xx.c:325:
+                if (uart_handle_break(&uart->port))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: drivers/serial/bfin_5xx.c:325:
+                if (uart_handle_break(&uart->port))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: drivers/serial/bfin_5xx.c:326:
+                        goto dma_ignore_char;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: drivers/serial/bfin_5xx.c:326:
+                        goto dma_ignore_char;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: drivers/serial/bfin_5xx.c:327:
+                flg = TTY_BREAK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: drivers/serial/bfin_5xx.c:327:
+                flg = TTY_BREAK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: drivers/serial/bfin_5xx.c:328:
+        } else if (status & PE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: drivers/serial/bfin_5xx.c:328:
+        } else if (status & PE) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: drivers/serial/bfin_5xx.c:329:
+                flg = TTY_PARITY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: drivers/serial/bfin_5xx.c:329:
+                flg = TTY_PARITY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: drivers/serial/bfin_5xx.c:330:
+                uart->port.icount.parity++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: drivers/serial/bfin_5xx.c:330:
+                uart->port.icount.parity++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: drivers/serial/bfin_5xx.c:331:
+        } else if (status & OE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: drivers/serial/bfin_5xx.c:331:
+        } else if (status & OE) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: drivers/serial/bfin_5xx.c:332:
+                flg = TTY_OVERRUN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: drivers/serial/bfin_5xx.c:332:
+                flg = TTY_OVERRUN;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: drivers/serial/bfin_5xx.c:333:
+                uart->port.icount.overrun++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: drivers/serial/bfin_5xx.c:333:
+                uart->port.icount.overrun++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#503: FILE: drivers/serial/bfin_5xx.c:334:
+        } else if (status & FE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: drivers/serial/bfin_5xx.c:334:
+        } else if (status & FE) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: drivers/serial/bfin_5xx.c:335:
+                flg = TTY_FRAME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: drivers/serial/bfin_5xx.c:335:
+                flg = TTY_FRAME;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: drivers/serial/bfin_5xx.c:336:
+                uart->port.icount.frame++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: drivers/serial/bfin_5xx.c:336:
+                uart->port.icount.frame++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: drivers/serial/bfin_5xx.c:337:
+        } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: drivers/serial/bfin_5xx.c:337:
+        } else$

CHECK:BRACES: Unbalanced braces around else statement
#506: FILE: drivers/serial/bfin_5xx.c:337:
+        } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: drivers/serial/bfin_5xx.c:338:
+                flg = TTY_NORMAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: drivers/serial/bfin_5xx.c:338:
+                flg = TTY_NORMAL;$

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#532: FILE: drivers/serial/bfin_5xx.c:363:
+	if (pos>uart->rx_dma_buf.tail) {
 	       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart->rx_dma_timer
#539: FILE: drivers/serial/bfin_5xx.c:370:
+	add_timer(&(uart->rx_dma_timer));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#549: FILE: drivers/serial/bfin_5xx.c:380:
+	if (!(get_dma_curr_irqstat(uart->tx_dma_channel)&DMA_RUN)) {
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#555: FILE: drivers/serial/bfin_5xx.c:386:
+		xmit->tail = (xmit->tail+uart->tx_count) &(UART_XMIT_SIZE -1);
 		                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#555: FILE: drivers/serial/bfin_5xx.c:386:
+		xmit->tail = (xmit->tail+uart->tx_count) &(UART_XMIT_SIZE -1);
 		                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#555: FILE: drivers/serial/bfin_5xx.c:386:
+		xmit->tail = (xmit->tail+uart->tx_count) &(UART_XMIT_SIZE -1);
 		                                                          ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#556: FILE: drivers/serial/bfin_5xx.c:387:
+		uart->port.icount.tx+=uart->tx_count;
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#578: FILE: drivers/serial/bfin_5xx.c:409:
+		uart->rx_dma_buf.tail = DMA_RX_XCOUNT*DMA_RX_YCOUNT;
 		                                     ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#580: FILE: drivers/serial/bfin_5xx.c:411:
+		uart->rx_dma_buf.head = uart->rx_dma_buf.tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#600: FILE: drivers/serial/bfin_5xx.c:431:
+	if (lsr & THRE)
 	          ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#610: FILE: drivers/serial/bfin_5xx.c:441:
+	struct bfin_serial_port *uart = (struct bfin_serial_port *)port;
+	if (uart->cts_pin < 0)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#615: FILE: drivers/serial/bfin_5xx.c:446:
+		return TIOCM_DSR | TIOCM_CAR;
+	else

WARNING:LINE_SPACING: Missing a blank line after declarations
#624: FILE: drivers/serial/bfin_5xx.c:455:
+	struct bfin_serial_port *uart = (struct bfin_serial_port *)port;
+	if (uart->rts_pin < 0)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#646: FILE: drivers/serial/bfin_5xx.c:477:
+	if (!(status & TIOCM_CTS)) {
[...]
+	} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#675: FILE: drivers/serial/bfin_5xx.c:506:
+		printk(KERN_NOTICE "Unable to attach Blackfin UART RX DMA channel\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#680: FILE: drivers/serial/bfin_5xx.c:511:
+		printk(KERN_NOTICE "Unable to attach Blackfin UART TX DMA channel\n");

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#688: FILE: drivers/serial/bfin_5xx.c:519:
+	uart->rx_dma_buf.buf = (unsigned char *)dma_alloc_coherent(NULL, PAGE_SIZE, &dma_handle, GFP_DMA);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#688: FILE: drivers/serial/bfin_5xx.c:519:
+	uart->rx_dma_buf.buf = (unsigned char *)dma_alloc_coherent(NULL, PAGE_SIZE, &dma_handle, GFP_DMA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: drivers/serial/bfin_5xx.c:525:
+	set_dma_config(uart->rx_dma_channel,
+		set_bfin_dma_config(DIR_WRITE, DMA_FLOW_AUTO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: drivers/serial/bfin_5xx.c:526:
+		set_bfin_dma_config(DIR_WRITE, DMA_FLOW_AUTO,
+				INTR_ON_ROW, DIMENSION_2D,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart->rx_dma_timer
#707: FILE: drivers/serial/bfin_5xx.c:538:
+	add_timer(&(uart->rx_dma_timer));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#712: FILE: drivers/serial/bfin_5xx.c:543:
+		printk(KERN_NOTICE "Unable to attach BlackFin UART RX interrupt\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#717: FILE: drivers/serial/bfin_5xx.c:548:
+	    (uart->port.irq+1, bfin_serial_int, SA_INTERRUPT | SA_SHIRQ,
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#719: FILE: drivers/serial/bfin_5xx.c:550:
+		printk(KERN_NOTICE "Unable to attach BlackFin UART TX interrupt\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart->rx_dma_timer
#737: FILE: drivers/serial/bfin_5xx.c:568:
+	del_timer(&(uart->rx_dma_timer));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#740: FILE: drivers/serial/bfin_5xx.c:571:
+	free_irq(uart->port.irq+1, uart);
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: drivers/serial/bfin_5xx.c:577:
+bfin_serial_set_termios(struct uart_port *port, struct ktermios *termios,
+		   struct ktermios *old)

WARNING:TYPO_SPELLING: 'lengh' may be misspelled - perhaps 'length'?
#767: FILE: drivers/serial/bfin_5xx.c:598:
+		printk(KERN_ERR "%s: word lengh not supported\n", 
 		                          ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: drivers/serial/bfin_5xx.c:598:
+^I^Iprintk(KERN_ERR "%s: word lengh not supported\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#767: FILE: drivers/serial/bfin_5xx.c:598:
+		printk(KERN_ERR "%s: word lengh not supported\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: drivers/serial/bfin_5xx.c:599:
+		printk(KERN_ERR "%s: word lengh not supported\n", 
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#768: FILE: drivers/serial/bfin_5xx.c:599:
+			__FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: drivers/serial/bfin_5xx.c:601:
+^I$

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#771: FILE: drivers/serial/bfin_5xx.c:602:
+	if (termios->c_cflag & CSTOPB);
+		lcr |= STB;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#771: FILE: drivers/serial/bfin_5xx.c:602:
+	if (termios->c_cflag & CSTOPB);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#779: FILE: drivers/serial/bfin_5xx.c:610:
+	baud = uart_get_baud_rate(port, termios, old, 0, port->uartclk/16);
 	                                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: drivers/serial/bfin_5xx.c:628:
+^I$

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#856: FILE: drivers/serial/bfin_5xx.c:687:
+bfin_serial_verify_port(struct uart_port *port, struct serial_struct *ser)
                                                                       ^^^

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#861: FILE: drivers/serial/bfin_5xx.c:692:
+static struct uart_ops bfin_serial_pops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#894: FILE: drivers/serial/bfin_5xx.c:725:
+^I^Ibfin_serial_ports[i].port.membase   = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: drivers/serial/bfin_5xx.c:727:
+^I^Ibfin_serial_ports[i].port.mapbase   = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: drivers/serial/bfin_5xx.c:729:
+^I^Ibfin_serial_ports[i].port.irq       = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: drivers/serial/bfin_5xx.c:735:
+^I^Ibfin_serial_ports[i].tx_dma_channel = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#906: FILE: drivers/serial/bfin_5xx.c:737:
+^I^Ibfin_serial_ports[i].rx_dma_channel = $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bfin_serial_ports[i].rx_dma_timer
#908: FILE: drivers/serial/bfin_5xx.c:739:
+		init_timer(&(bfin_serial_ports[i].rx_dma_timer));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#910: FILE: drivers/serial/bfin_5xx.c:741:
+^I^IINIT_WORK(&bfin_serial_ports[i].cts_workqueue, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: drivers/serial/bfin_5xx.c:742:
+		INIT_WORK(&bfin_serial_ports[i].cts_workqueue, 
+				bfin_serial_do_work, &bfin_serial_ports[i]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#914: FILE: drivers/serial/bfin_5xx.c:745:
+^I^Ibfin_serial_ports[i].cts_pin^I    = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: drivers/serial/bfin_5xx.c:747:
+^I^Ibfin_serial_ports[i].rts_pin^I    = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#917: FILE: drivers/serial/bfin_5xx.c:748:
+^I^I^Ibfin_serial_resource[i].uart_rts_pin;^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#921: FILE: drivers/serial/bfin_5xx.c:752:
+
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#928: FILE: drivers/serial/bfin_5xx.c:759:
+	struct bfin_serial_port *uart = (struct bfin_serial_port *)port;
+	while (!(UART_GET_LSR(uart)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#931: FILE: drivers/serial/bfin_5xx.c:762:
+}^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#946: FILE: drivers/serial/bfin_5xx.c:777:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: drivers/serial/bfin_5xx.c:785:
+bfin_serial_console_get_options(struct bfin_serial_port *uart, int *baud,
+			   int *parity, int *bits)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#973: FILE: drivers/serial/bfin_5xx.c:804:
+		switch (lcr & 0x03) {
+			case 0:	*bits = 5; break;
+			case 1:	*bits = 6; break;
+			case 2:	*bits = 7; break;
+			case 3:	*bits = 8; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#974: FILE: drivers/serial/bfin_5xx.c:805:
+			case 0:	*bits = 5; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#975: FILE: drivers/serial/bfin_5xx.c:806:
+			case 1:	*bits = 6; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#976: FILE: drivers/serial/bfin_5xx.c:807:
+			case 2:	*bits = 7; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#977: FILE: drivers/serial/bfin_5xx.c:808:
+			case 3:	*bits = 8; break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#992: FILE: drivers/serial/bfin_5xx.c:823:
+		*baud = get_sclk() / (16*(dll | dlh << 8));
 		                        ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#994: FILE: drivers/serial/bfin_5xx.c:825:
+	pr_debug("%s:baud = %d, parity = %c, bits= %d\n", __FUNCTION__, *baud, *parity, *bits);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1046: FILE: drivers/serial/bfin_5xx.c:877:
+#define BFIN_SERIAL_CONSOLE	&bfin_serial_console

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000470230.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 45 errors, 60 warnings, 35 checks, 1108 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000470230.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
