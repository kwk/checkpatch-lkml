WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
fsnotify has a number of benefits, the first being actually shrinking the size

WARNING:TYPO_SPELLING: 'functionallity' may be misspelled - perhaps 'functionality'?
#46: 
But with fsnotify this same functionallity (and more) is done with just
                            ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dynamicly' may be misspelled - perhaps 'dynamically'?
#68: 
group.  So they can be profiling at boot time in order to dynamicly tune
                                                          ^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#101: FILE: fs/notify/Kconfig:1:
+config FSNOTIFY
+	bool "Filesystem notification backend"
+	default y
+	---help---
+	   fsnotify is a backend for filesystem notification.  fsnotify does
+	   not provide any userspace interface but does provide the basis
+	   needed for other notification schemes such as dnotify, inotify,
+	   and fanotify.
+
+	   Say Y here to enable fsnotify suport.
+
+	   If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'suport' may be misspelled - perhaps 'support'?
#110: FILE: fs/notify/Kconfig:10:
+	   Say Y here to enable fsnotify suport.
 	                                 ^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#126: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#131: FILE: fs/notify/fsnotify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#146: FILE: fs/notify/fsnotify.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#177: FILE: fs/notify/fsnotify.c:47:
+	 * SRCU!!  the groups list is very very much read only and the path is

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#188: FILE: fs/notify/fsnotify.c:58:
+				 * here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#216: FILE: fs/notify/fsnotify.h:1:
+#ifndef _LINUX_FSNOTIFY_PRIVATE_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#227: FILE: fs/notify/fsnotify.h:12:
+#include <asm/atomic.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#239: FILE: fs/notify/group.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#254: FILE: fs/notify/group.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#267: FILE: fs/notify/group.c:29:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#269: FILE: fs/notify/group.c:31:
+DEFINE_MUTEX(fsnotify_grp_mutex);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#309: FILE: fs/notify/group.c:71:
+	BUG_ON(!mutex_is_locked(&fsnotify_grp_mutex));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#329: FILE: fs/notify/group.c:91:
+	 * so no new references will appear */

WARNING:TYPO_SPELLING: 'acces' may be misspelled - perhaps 'access'?
#333: FILE: fs/notify/group.c:95:
+	 * srcu acces.... */
 	        ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#333: FILE: fs/notify/group.c:95:
+	 * srcu acces.... */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: fs/notify/group.c:110:
+	BUG_ON(!mutex_is_locked(&fsnotify_grp_mutex));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'group_iter->mask == mask'
#352: FILE: fs/notify/group.c:114:
+			if ((group_iter->mask == mask) &&
+			    (group_iter->ops == ops)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'group_iter->ops == ops'
#352: FILE: fs/notify/group.c:114:
+			if ((group_iter->mask == mask) &&
+			    (group_iter->ops == ops)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#352: FILE: fs/notify/group.c:114:
+			if ((group_iter->mask == mask) &&
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#356: FILE: fs/notify/group.c:118:
+			} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*group)...) over kmalloc(sizeof(struct fsnotify_group)...)
#377: FILE: fs/notify/group.c:139:
+	group = kmalloc(sizeof(struct fsnotify_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#413: FILE: fs/notify/notification.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#428: FILE: fs/notify/notification.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#442: FILE: fs/notify/notification.c:30:
+#include <asm/atomic.h>

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#472: FILE: fs/notify/notification.c:60:
+struct fsnotify_event *fsnotify_create_event(struct inode *to_tell, __u32 mask, void *data, int data_type)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: fs/notify/notification.c:82:
+		struct path *path = &file->f_path;
+		event->path.dentry = path->dentry;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#502: FILE: fs/notify/notification.c:90:
+		struct path *path = data;
+		event->path.dentry = path->dentry;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#513: FILE: fs/notify/notification.c:101:
+		BUG();

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#523: FILE: fs/notify/notification.c:111:
+	event_kmem_cache = kmem_cache_create("fsnotify_event", sizeof(struct fsnotify_event), 0, SLAB_PANIC, NULL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#855: FILE: include/linux/fsnotify_backend.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#872: FILE: include/linux/fsnotify_backend.h:18:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#968: FILE: include/linux/fsnotify_backend.h:114:
+extern void fsnotify(struct inode *to_tell, __u32 mask, void *data, int data_is);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#971: FILE: include/linux/fsnotify_backend.h:117:
+extern void fsnotify_recalc_global_mask(void);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#972: FILE: include/linux/fsnotify_backend.h:118:
+extern struct fsnotify_group *fsnotify_obtain_group(unsigned int group_num, __u32 mask, const struct fsnotify_ops *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#972: FILE: include/linux/fsnotify_backend.h:118:
+extern struct fsnotify_group *fsnotify_obtain_group(unsigned int group_num, __u32 mask, const struct fsnotify_ops *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#973: FILE: include/linux/fsnotify_backend.h:119:
+extern void fsnotify_put_group(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: include/linux/fsnotify_backend.h:121:
+extern void fsnotify_get_event(struct fsnotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#976: FILE: include/linux/fsnotify_backend.h:122:
+extern void fsnotify_put_event(struct fsnotify_event *event);

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#977: FILE: include/linux/fsnotify_backend.h:123:
+extern struct fsnotify_event_private_data *fsnotify_get_priv_from_event(struct fsnotify_group *group, struct fsnotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#977: FILE: include/linux/fsnotify_backend.h:123:
+extern struct fsnotify_event_private_data *fsnotify_get_priv_from_event(struct fsnotify_group *group, struct fsnotify_event *event);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#980: FILE: include/linux/fsnotify_backend.h:126:
+extern struct fsnotify_event *fsnotify_create_event(struct inode *to_tell, __u32 mask, void *data, int data_is);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#980: FILE: include/linux/fsnotify_backend.h:126:
+extern struct fsnotify_event *fsnotify_create_event(struct inode *to_tell, __u32 mask, void *data, int data_is);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148368.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 30 warnings, 14 checks, 835 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148368.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
