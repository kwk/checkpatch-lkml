WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#64: FILE: arch/x86/kernel/process_32.c:605:
+		 * is not in use when we change it */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: arch/x86/kernel/process_32.c:641:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#97: FILE: include/asm-x86/ptrace-abi.h:84:
+/* Return maximal BTS buffer size in number of records,
+   if successuf; -1, otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#98: FILE: include/asm-x86/ptrace-abi.h:85:
+   EOPNOTSUPP...processor does not support bts tracing */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#102: FILE: include/asm-x86/ptrace-abi.h:89:
+/* Allocate new bts buffer (free old one, if exists) of size DATA bts records;
+   parameter ADDR is ignored.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#106: FILE: include/asm-x86/ptrace-abi.h:93:
+   ENOMEM.......out of memory */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#110: FILE: include/asm-x86/ptrace-abi.h:97:
+/* Return the size of the bts buffer in number of bts records,
+   if successful; -1, otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#112: FILE: include/asm-x86/ptrace-abi.h:99:
+   ENXIO........no buffer allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#116: FILE: include/asm-x86/ptrace-abi.h:103:
+/* Return the index of the next bts record to be written,
+   if successful; -1, otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#119: FILE: include/asm-x86/ptrace-abi.h:106:
+   After the first warp-around, this is the start of the circular bts buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#123: FILE: include/asm-x86/ptrace-abi.h:110:
+/* Read the DATA'th bts record into a ptrace_bts_record buffer provided in ADDR.
+   Return 0, if successful; -1, otherwise

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: include/asm-x86/ptrace-abi.h:113:
+   EINVAL.......invalid index */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#130: FILE: include/asm-x86/ptrace-abi.h:117:
+/* Configure last branch trace; the configuration is given as a bit-mask of
+   PTRACE_BTS_O_* options in DATA; parameter ADDR is ignored.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#133: FILE: include/asm-x86/ptrace-abi.h:120:
+   ENXIO........no buffer allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#137: FILE: include/asm-x86/ptrace-abi.h:124:
+/* Return the configuration as bit-mask of PTRACE_BTS_O_* options
+   if successful; -1, otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#139: FILE: include/asm-x86/ptrace-abi.h:126:
+   ENXIO........no buffer allocated */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: include/asm-x86/ptrace.h:7:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/asm-x86/ptrace.h:15:
+extern void ptrace_bts_take_timestamp(struct task_struct *, enum bts_qualifier);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#165: FILE: include/asm-x86/ptrace.h:15:
+extern void ptrace_bts_take_timestamp(struct task_struct *, enum bts_qualifier);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#169: FILE: include/asm-x86/ptrace.h:19:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: include/asm-x86/thread_info_32.h:142:
+#define TIF_DS_AREA_MSR ^I23      /* uses thread_struct.ds_area_msr */$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#202: FILE: include/asm-x86/thread_info_32.h:160:
+#define _TIF_DS_AREA_MSR	(1<<TIF_DS_AREA_MSR)
                         	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#202: FILE: include/asm-x86/thread_info_32.h:160:
+#define _TIF_DS_AREA_MSR	(1<<TIF_DS_AREA_MSR)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#203: FILE: include/asm-x86/thread_info_32.h:161:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#203: FILE: include/asm-x86/thread_info_32.h:161:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: include/asm-x86/thread_info_32.h:172:
+    (_TIF_IO_BITMAP | _TIF_NOTSC | _TIF_DEBUGCTLMSR | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: include/asm-x86/thread_info_32.h:173:
+     _TIF_DS_AREA_MSR | _TIF_BTS_TRACE_TS)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#231: FILE: include/asm-x86/processor_32.h:364:
+ *               goes into MSR_IA32_DS_AREA */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#253: FILE: arch/x86/kernel/process_64.c:561:
+		 * is not in use when we change it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#300: FILE: include/asm-x86/processor_64.h:244:
+ *               goes into MSR_IA32_DS_AREA */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#313: FILE: include/asm-x86/thread_info_64.h:124:
+#define TIF_DS_AREA_MSR ^I25      /* uses thread_struct.ds_area_msr */$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#322: FILE: include/asm-x86/thread_info_64.h:144:
+#define _TIF_DS_AREA_MSR	(1<<TIF_DS_AREA_MSR)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#322: FILE: include/asm-x86/thread_info_64.h:144:
+#define _TIF_DS_AREA_MSR	(1<<TIF_DS_AREA_MSR)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#323: FILE: include/asm-x86/thread_info_64.h:145:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#323: FILE: include/asm-x86/thread_info_64.h:145:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: include/asm-x86/thread_info_64.h:155:
+    (_TIF_IO_BITMAP|_TIF_DEBUGCTLMSR|_TIF_DS_AREA_MSR|_TIF_BTS_TRACE_TS)$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#333: FILE: include/asm-x86/thread_info_64.h:155:
+    (_TIF_IO_BITMAP|_TIF_DEBUGCTLMSR|_TIF_DS_AREA_MSR|_TIF_BTS_TRACE_TS)
                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#333: FILE: include/asm-x86/thread_info_64.h:155:
+    (_TIF_IO_BITMAP|_TIF_DEBUGCTLMSR|_TIF_DS_AREA_MSR|_TIF_BTS_TRACE_TS)
                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#333: FILE: include/asm-x86/thread_info_64.h:155:
+    (_TIF_IO_BITMAP|_TIF_DEBUGCTLMSR|_TIF_DS_AREA_MSR|_TIF_BTS_TRACE_TS)
                                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#335: FILE: include/asm-x86/thread_info_64.h:157:
+#define _TIF_WORK_CTXSW_NEXT (_TIF_WORK_CTXSW|_TIF_DEBUG)
                                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#378: FILE: arch/x86/kernel/setup_64.c:854:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#405: FILE: arch/x86/kernel/ptrace.c:34:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#493: FILE: arch/x86/kernel/ptrace.c:544:
+		 * about to clear */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#585: FILE: arch/x86/kernel/ptrace.c:640:
+	if (child->thread.ds_area_msr) {
+	    ds_free((void **)&child->thread.ds_area_msr);

CHECK:SPACING: No space is necessary after a cast
#615: FILE: arch/x86/kernel/ptrace.c:823:
+			 (struct bts_struct __user *) addr);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#668: FILE: arch/x86/kernel/step.c:174:
+	} else {
+	    write_debugctlmsr(child,

WARNING:TABSTOP: Statements should start on a tabstop
#672: FILE: arch/x86/kernel/step.c:178:
+	    if (!child->thread.debugctlmsr)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#672: FILE: arch/x86/kernel/step.c:178:
+	    if (!child->thread.debugctlmsr)
+		    clear_tsk_thread_flag(child, TIF_DEBUGCTLMSR);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#696: FILE: arch/x86/kernel/ds.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#721: FILE: arch/x86/kernel/ds.c:26:
+
+

WARNING:TYPO_SPELLING: 'architetures' may be misspelled - perhaps 'architectures'?
#727: FILE: arch/x86/kernel/ds.c:32:
+ * architetures vary in the size of those fields.
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'suppor' may be misspelled - perhaps 'support'?
#752: FILE: arch/x86/kernel/ds.c:57:
+ * architectures. We do not suppor it.
                             ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#794: FILE: arch/x86/kernel/ds.c:99:
+	/* BTS variants used to store additional information like
+	   timestamps */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#794: FILE: arch/x86/kernel/ds.c:99:
+	   timestamps */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#813: FILE: arch/x86/kernel/ds.c:118:
+}
+static inline void set_bts_buffer_base(char *base, void *value)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#817: FILE: arch/x86/kernel/ds.c:122:
+}
+static inline void *get_bts_index(char *base)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#821: FILE: arch/x86/kernel/ds.c:126:
+}
+static inline void set_bts_index(char *base, void *value)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#825: FILE: arch/x86/kernel/ds.c:130:
+}
+static inline void *get_bts_absolute_maximum(char *base)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#829: FILE: arch/x86/kernel/ds.c:134:
+}
+static inline void set_bts_absolute_maximum(char *base, void *value)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#833: FILE: arch/x86/kernel/ds.c:138:
+}
+static inline void *get_bts_interrupt_threshold(char *base)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#837: FILE: arch/x86/kernel/ds.c:142:
+}
+static inline void set_bts_interrupt_threshold(char *base, void *value)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#841: FILE: arch/x86/kernel/ds.c:146:
+}
+static inline long get_from_ip(char *base)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#845: FILE: arch/x86/kernel/ds.c:150:
+}
+static inline void set_from_ip(char *base, long value)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#849: FILE: arch/x86/kernel/ds.c:154:
+}
+static inline long get_to_ip(char *base)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#853: FILE: arch/x86/kernel/ds.c:158:
+}
+static inline void set_to_ip(char *base, long value)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#857: FILE: arch/x86/kernel/ds.c:162:
+}
+static inline unsigned char get_info_type(char *base)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#861: FILE: arch/x86/kernel/ds.c:166:
+}
+static inline void set_info_type(char *base, unsigned char value)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#865: FILE: arch/x86/kernel/ds.c:170:
+}
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#872: FILE: arch/x86/kernel/ds.c:177:
+	unsigned long long value = 0;
+	memcpy(&value,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#877: FILE: arch/x86/kernel/ds.c:182:
+}
+static inline void set_info_data(char *base, unsigned long long value)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#884: FILE: arch/x86/kernel/ds.c:189:
+
+

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1037: FILE: arch/x86/kernel/ds.c:342:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1049: FILE: arch/x86/kernel/ds.c:354:
+	.debugctl_mask = (1<<2)|(1<<3)
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1049: FILE: arch/x86/kernel/ds.c:354:
+	.debugctl_mask = (1<<2)|(1<<3)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1049: FILE: arch/x86/kernel/ds.c:354:
+	.debugctl_mask = (1<<2)|(1<<3)
 	                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1063: FILE: arch/x86/kernel/ds.c:368:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1063: FILE: arch/x86/kernel/ds.c:368:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1063: FILE: arch/x86/kernel/ds.c:368:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1078: FILE: arch/x86/kernel/ds.c:383:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1078: FILE: arch/x86/kernel/ds.c:383:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1078: FILE: arch/x86/kernel/ds.c:383:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1078: FILE: arch/x86/kernel/ds.c:383:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1078: FILE: arch/x86/kernel/ds.c:383:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                                 ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1092: FILE: arch/x86/kernel/ds.c:397:
+#ifdef __i386__

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1108: FILE: arch/x86/kernel/ds.c:413:
+#ifdef __i386__

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1130: FILE: include/asm-x86/ds.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1157: FILE: include/asm-x86/ds.h:28:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1179: FILE: include/asm-x86/ds.h:50:
+		/* BTS_TASK_ARRIVES or
+		   BTS_TASK_DEPARTS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1179: FILE: include/asm-x86/ds.h:50:
+		   BTS_TASK_DEPARTS */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1184: FILE: include/asm-x86/ds.h:55:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1185: FILE: include/asm-x86/ds.h:56:
+extern int ds_allocate(void **, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#1185: FILE: include/asm-x86/ds.h:56:
+extern int ds_allocate(void **, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1185: FILE: include/asm-x86/ds.h:56:
+extern int ds_allocate(void **, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1186: FILE: include/asm-x86/ds.h:57:
+extern int ds_free(void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#1186: FILE: include/asm-x86/ds.h:57:
+extern int ds_free(void **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1187: FILE: include/asm-x86/ds.h:58:
+extern int ds_get_bts_size(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1187: FILE: include/asm-x86/ds.h:58:
+extern int ds_get_bts_size(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1188: FILE: include/asm-x86/ds.h:59:
+extern int ds_get_bts_index(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1188: FILE: include/asm-x86/ds.h:59:
+extern int ds_get_bts_index(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1189: FILE: include/asm-x86/ds.h:60:
+extern int ds_read_bts(void *, size_t, struct bts_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1189: FILE: include/asm-x86/ds.h:60:
+extern int ds_read_bts(void *, size_t, struct bts_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1189: FILE: include/asm-x86/ds.h:60:
+extern int ds_read_bts(void *, size_t, struct bts_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bts_struct *' should also have an identifier name
#1189: FILE: include/asm-x86/ds.h:60:
+extern int ds_read_bts(void *, size_t, struct bts_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1190: FILE: include/asm-x86/ds.h:61:
+extern int ds_write_bts(void *, const struct bts_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1190: FILE: include/asm-x86/ds.h:61:
+extern int ds_write_bts(void *, const struct bts_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct bts_struct *' should also have an identifier name
#1190: FILE: include/asm-x86/ds.h:61:
+extern int ds_write_bts(void *, const struct bts_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1191: FILE: include/asm-x86/ds.h:62:
+extern unsigned long ds_debugctl_mask(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1192: FILE: include/asm-x86/ds.h:63:
+extern void __cpuinit ds_init_intel(struct cpuinfo_x86 *c);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350587.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 48 warnings, 60 checks, 1053 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350587.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
