WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Implement a cgroup to track and enforce open and mknod restrictions on device

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#151: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: include/linux/device_cgroup.h:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/device_cgroup.h:5:
+extern int devcgroup_inode_permission(struct inode *inode, int mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/device_cgroup.h:6:
+extern int devcgroup_inode_mknod(int mode, dev_t dev);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#176: FILE: init/Kconfig:301:
+config CGROUP_DEVICE
+	bool "Device controller for cgroups"
+	depends on CGROUPS && EXPERIMENTAL
+	help
+	  Provides a cgroup implementing whitelists for devices which
+	  a process in the cgroup can mknod or open.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#201: FILE: security/device_cgroup.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#211: FILE: security/device_cgroup.c:11:
+#include <asm/uaccess.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#248: FILE: security/device_cgroup.c:48:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#251: FILE: security/device_cgroup.c:51:
+static inline struct dev_cgroup *cgroup_to_devcgroup(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: security/device_cgroup.c:58:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: security/device_cgroup.c:62:
+static int devcgroup_can_attach(struct cgroup_subsys *ss,
+		struct cgroup *new_cgroup, struct task_struct *task)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#264: FILE: security/device_cgroup.c:64:
+	if (current != task && !capable(CAP_SYS_ADMIN))
+			return -EPERM;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: security/device_cgroup.c:104:
+static int dev_whitelist_add(struct dev_cgroup *dev_cgroup,
+			struct dev_whitelist_item *wh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: security/device_cgroup.c:124:
+static void dev_whitelist_rm(struct dev_cgroup *dev_cgroup,
+			struct dev_whitelist_item *wh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: security/device_cgroup.c:153:
+static struct cgroup_subsys_state *devcgroup_create(struct cgroup_subsys *ss,
+						struct cgroup *cgroup)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent_cgroup"
#365: FILE: security/device_cgroup.c:165:
+	if (parent_cgroup == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: security/device_cgroup.c:167:
+		struct dev_whitelist_item *wh;
+		wh = kmalloc(sizeof(*wh), GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#372: FILE: security/device_cgroup.c:172:
+		wh->minor = wh->major = ~0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: security/device_cgroup.c:179:
+		ret = dev_whitelist_copy(&dev_cgroup->whitelist,
+				&parent_dev_cgroup->whitelist);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: security/device_cgroup.c:191:
+static void devcgroup_destroy(struct cgroup_subsys *ss,
+			struct cgroup *cgroup)

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: security/device_cgroup.c:210:
+	int idx = 0;
+	memset(acc, 0, 4);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#430: FILE: security/device_cgroup.c:230:
+static void set_majmin(char *str, int len, unsigned m)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#459: FILE: security/device_cgroup.c:259:
+		ret = snprintf(s, 4095-(s-buf), "%c %s:%s %s\n",
 		                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#459: FILE: security/device_cgroup.c:259:
+		ret = snprintf(s, 4095-(s-buf), "%c %s:%s %s\n",
 		                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: security/device_cgroup.c:260:
+		ret = snprintf(s, 4095-(s-buf), "%c %s:%s %s\n",
+			type_to_char(wh->type), maj, min, acc);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#461: FILE: security/device_cgroup.c:261:
+		if (s+ret >= buf+4095) {
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#461: FILE: security/device_cgroup.c:261:
+		if (s+ret >= buf+4095) {
 		                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: security/device_cgroup.c:276:
+static ssize_t devcgroup_access_read(struct cgroup *cgroup,
+			struct cftype *cft, struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: security/device_cgroup.c:303:
+static int may_access_whitelist(struct dev_cgroup *c,
+				       struct dev_whitelist_item *refwh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: security/device_cgroup.c:331:
+static int parent_has_perm(struct cgroup *childcg,
+				  struct dev_whitelist_item *wh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: security/device_cgroup.c:360:
+static ssize_t devcgroup_access_write(struct cgroup *cgroup, struct cftype *cft,
+				struct file *file, const char __user *userbuf,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#577: FILE: security/device_cgroup.c:377:
+	buffer = kmalloc(nbytes+1, GFP_KERNEL);
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#623: FILE: security/device_cgroup.c:423:
+			wh.major = wh.major*10+(*b-'0');
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#623: FILE: security/device_cgroup.c:423:
+			wh.major = wh.major*10+(*b-'0');
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#623: FILE: security/device_cgroup.c:423:
+			wh.major = wh.major*10+(*b-'0');
 			                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#643: FILE: security/device_cgroup.c:443:
+			wh.minor = wh.minor*10+(*b-'0');
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#643: FILE: security/device_cgroup.c:443:
+			wh.minor = wh.minor*10+(*b-'0');
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#643: FILE: security/device_cgroup.c:443:
+			wh.minor = wh.minor*10+(*b-'0');
 			                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#667: FILE: security/device_cgroup.c:467:
+			count=3;
 			     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: security/device_cgroup.c:517:
+static int devcgroup_populate(struct cgroup_subsys *ss,
+				struct cgroup *cgroup)

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: security/device_cgroup.c:539:
+	dev_t device = inode->i_rdev;
+	if (!device)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 30 checks, 669 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
