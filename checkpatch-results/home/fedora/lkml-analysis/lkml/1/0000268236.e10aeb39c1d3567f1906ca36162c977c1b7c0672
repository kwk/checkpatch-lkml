WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#146: 
      x86: fix SMP alternatives: use mutex instead of spinlock, text_poke is sleepable

WARNING:TYPO_SPELLING: 'againt' may be misspelled - perhaps 'against'?
#238: 
      ftrace: selftest protect againt max flip
                               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#410: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:REPEATED_WORD: Possible repeated word: 'debugfs'
#449: FILE: Documentation/tracers/mmiotrace.txt:35:
+$ mount -t debugfs debugfs /debug

WARNING:REPEATED_WORD: Possible repeated word: 'debugfs'
#462: FILE: Documentation/tracers/mmiotrace.txt:48:
+$ mount -t debugfs debugfs /debug

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#541: FILE: Documentation/tracers/mmiotrace.txt:127:
+dependant arguments. Arguments are separated by a space, or continue until the
 ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#727: FILE: arch/arm/kernel/ftrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#741: FILE: arch/arm/kernel/ftrace.c:15:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#783: FILE: arch/arm/kernel/ftrace.c:57:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#784: FILE: arch/arm/kernel/ftrace.c:58:
+		"1:  ldr    %1, [%2]  \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#785: FILE: arch/arm/kernel/ftrace.c:59:
+		"    cmp    %1, %4    \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#786: FILE: arch/arm/kernel/ftrace.c:60:
+		"2:  streq  %3, [%2]  \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#787: FILE: arch/arm/kernel/ftrace.c:61:
+		"    cmpne  %1, %3    \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#788: FILE: arch/arm/kernel/ftrace.c:62:
+		"    movne  %0, #2    \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#792: FILE: arch/arm/kernel/ftrace.c:66:
+		"4:  mov  %0, #1  \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#793: FILE: arch/arm/kernel/ftrace.c:67:
+		"    b    3b      \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#797: FILE: arch/arm/kernel/ftrace.c:71:
+		"    .long 1b, 4b \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#798: FILE: arch/arm/kernel/ftrace.c:72:
+		"    .long 2b, 4b \n"

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'replaced == old'
#805: FILE: arch/arm/kernel/ftrace.c:79:
+	if (!err && (replaced == old))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1116: FILE: arch/powerpc/kernel/ftrace.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1132: FILE: arch/powerpc/kernel/ftrace.c:17:
+#include <asm/cacheflush.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1142: FILE: arch/powerpc/kernel/ftrace.c:27:
+# define GET_ADDR(addr) *(unsigned long *)addr

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1189: FILE: arch/powerpc/kernel/ftrace.c:74:
+	unsigned replaced;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1190: FILE: arch/powerpc/kernel/ftrace.c:75:
+	unsigned old = *(unsigned *)old_code;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1190: FILE: arch/powerpc/kernel/ftrace.c:75:
+	unsigned old = *(unsigned *)old_code;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1191: FILE: arch/powerpc/kernel/ftrace.c:76:
+	unsigned new = *(unsigned *)new_code;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1191: FILE: arch/powerpc/kernel/ftrace.c:76:
+	unsigned new = *(unsigned *)new_code;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1205: FILE: arch/powerpc/kernel/ftrace.c:90:
+	asm volatile (

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1287: FILE: arch/powerpc/kernel/io.c:124:
+_memset_io(volatile void __iomem *addr, int c, unsigned long n)

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/ftrace.h> instead of <asm/ftrace.h>
#1328: FILE: arch/powerpc/kernel/ppc_ksyms.c:46:
+#include <asm/ftrace.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1433: FILE: arch/sparc64/kernel/ftrace.c:1:
+#include <linux/spinlock.h>

CHECK:SPACING: No space is necessary after a cast
#1455: FILE: arch/sparc64/kernel/ftrace.c:23:
+	return (unsigned char *) &call;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1467: FILE: arch/sparc64/kernel/ftrace.c:35:
+	__asm__ __volatile__(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1519: FILE: arch/sparc64/kernel/ftrace.c:87:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1970: FILE: arch/x86/kernel/ftrace.c:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2000: FILE: arch/x86/kernel/ftrace.c:31:
+	} __attribute__((packed));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2031: FILE: arch/x86/kernel/ftrace.c:62:
+	unsigned replaced;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2032: FILE: arch/x86/kernel/ftrace.c:63:
+	unsigned old = *(unsigned *)old_code; /* 4 bytes */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#2032: FILE: arch/x86/kernel/ftrace.c:63:
+	unsigned old = *(unsigned *)old_code; /* 4 bytes */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2033: FILE: arch/x86/kernel/ftrace.c:64:
+	unsigned new = *(unsigned *)new_code; /* 4 bytes */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#2033: FILE: arch/x86/kernel/ftrace.c:64:
+	unsigned new = *(unsigned *)new_code; /* 4 bytes */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2048: FILE: arch/x86/kernel/ftrace.c:79:
+	asm volatile (

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2124: FILE: arch/x86/kernel/i386_ksyms_32.c:1:
+#include <linux/ftrace.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2222: FILE: arch/x86/kernel/vsyscall_64.c:45:
+#define __vsyscall(nr) \
+		__attribute__ ((unused, __section__(".vsyscall_" #nr))) notrace

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_" #nr) over __attribute__((__section__(".vsyscall_" #nr)))
#2223: FILE: arch/x86/kernel/vsyscall_64.c:46:
+		__attribute__ ((unused, __section__(".vsyscall_" #nr))) notrace

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#2223: FILE: arch/x86/kernel/vsyscall_64.c:46:
+		__attribute__ ((unused, __section__(".vsyscall_" #nr))) notrace

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2245: FILE: arch/x86/kernel/x8664_ksyms_64.c:12:
+#include <asm/uaccess.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2274: FILE: arch/x86/lib/thunk_32.S:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#2493: FILE: arch/x86/mm/ioremap.c:240:
+	ret_addr = (void __iomem *) (vaddr + offset);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2515: FILE: arch/x86/mm/kmmio.c:1:
+/* Support for MMIO probes.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#2535: FILE: arch/x86/mm/kmmio.c:21:
+#include <asm/cacheflush.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#2542: FILE: arch/x86/mm/kmmio.c:28:
+#define KMMIO_PAGE_TABLE_SIZE (1 << KMMIO_PAGE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2599: FILE: arch/x86/mm/kmmio.c:85:
+	struct kmmio_probe *p;
+	list_for_each_entry_rcu(p, &kmmio_probes, list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2622: FILE: arch/x86/mm/kmmio.c:108:
+static void set_page_present(unsigned long addr, bool present,
+							unsigned int *pglevel)

WARNING:SPLIT_STRING: quoted string split across lines
#2725: FILE: arch/x86/mm/kmmio.c:211:
+			pr_debug("kmmio: duplicate probe hit on CPU %d, for "
+						"address 0x%08lx.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#2736: FILE: arch/x86/mm/kmmio.c:222:
+		pr_emerg("kmmio: recursive probe hit on CPU %d, "
+					"for address 0x%08lx. Ignoring.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2739: FILE: arch/x86/mm/kmmio.c:225:
+		pr_emerg("kmmio: previous hit was at 0x%08lx.\n",
+					ctx->addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2792: FILE: arch/x86/mm/kmmio.c:278:
+		pr_debug("kmmio: spurious debug trap on CPU %d.\n",
+							smp_processor_id());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2806: FILE: arch/x86/mm/kmmio.c:292:
+	BUG_ON(ctx->active);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2851: FILE: arch/x86/mm/kmmio.c:337:
+static void release_kmmio_fault_page(unsigned long page,
+				struct kmmio_fault_page **release_list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2861: FILE: arch/x86/mm/kmmio.c:347:
+	BUG_ON(f->count < 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2908: FILE: arch/x86/mm/kmmio.c:394:
+	struct kmmio_delayed_release *dr = container_of(

WARNING:LINE_SPACING: Missing a blank line after declarations
#2913: FILE: arch/x86/mm/kmmio.c:399:
+	struct kmmio_fault_page *p = dr->release_list;
+	while (p) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2915: FILE: arch/x86/mm/kmmio.c:401:
+		struct kmmio_fault_page *next = p->release_next;
+		BUG_ON(p->count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2915: FILE: arch/x86/mm/kmmio.c:401:
+		BUG_ON(p->count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2924: FILE: arch/x86/mm/kmmio.c:410:
+	struct kmmio_delayed_release *dr = container_of(

WARNING:LINE_SPACING: Missing a blank line after declarations
#2931: FILE: arch/x86/mm/kmmio.c:417:
+	unsigned long flags;
+	spin_lock_irqsave(&kmmio_lock, flags);

WARNING:TYPO_SPELLING: 'Actally' may be misspelled - perhaps 'Actually'?
#2956: FILE: arch/x86/mm/kmmio.c:442:
+ *    Actally free the kmmio_fault_page structs as with RCU.
       ^^^^^^^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2977: FILE: arch/x86/mm/kmmio.c:463:
+	if (!drelease) {
+		pr_crit("kmmio: leaking kmmio_fault_page objects.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3001: FILE: arch/x86/mm/kmmio.c:487:
+static int kmmio_die_notifier(struct notifier_block *nb, unsigned long val,
+								void *args)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3019: FILE: arch/x86/mm/kmmio.c:505:
+	int i;
+	for (i = 0; i < KMMIO_PAGE_TABLE_SIZE; i++)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3030: FILE: arch/x86/mm/mmio-mod.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3042: FILE: arch/x86/mm/mmio-mod.c:13:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3043: FILE: arch/x86/mm/mmio-mod.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#3059: FILE: arch/x86/mm/mmio-mod.c:30:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#3062: FILE: arch/x86/mm/mmio-mod.c:33:
+#include <asm/atomic.h>

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3088: FILE: arch/x86/mm/mmio-mod.c:59:
+#if 0 /* XXX: no way gather this info anymore */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3129: FILE: arch/x86/mm/mmio-mod.c:100:
+#if 0 /* XXX: needs rewrite */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3135: FILE: arch/x86/mm/mmio-mod.c:106:
+static ssize_t write_marker(struct file *file, const char __user *buffer,
+						size_t count, loff_t *ppos)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3155: FILE: arch/x86/mm/mmio-mod.c:126:
+#if 0 /* XXX: convert this to use tracing */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3174: FILE: arch/x86/mm/mmio-mod.c:145:
+		pr_err(NAME "Error in %s: no pte for page 0x%08lx\n",
+							__func__, address);

WARNING:SPLIT_STRING: quoted string split across lines
#3180: FILE: arch/x86/mm/mmio-mod.c:151:
+		pr_emerg(NAME "4MB pages are not currently supported: "
+							"0x%08lx\n", address);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3181: FILE: arch/x86/mm/mmio-mod.c:152:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#3195: FILE: arch/x86/mm/mmio-mod.c:166:
+	const struct trap_reason *my_reason = &get_cpu_var(pf_reason);
+	pr_emerg(NAME "unexpected fault for address: 0x%08lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#3196: FILE: arch/x86/mm/mmio-mod.c:167:
+	pr_emerg(NAME "unexpected fault for address: 0x%08lx, "
+					"last fault for address: 0x%08lx\n",

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#3201: FILE: arch/x86/mm/mmio-mod.c:172:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3203: FILE: arch/x86/mm/mmio-mod.c:174:
+	pr_emerg("eax: %08lx   ebx: %08lx   ecx: %08lx   edx: %08lx\n",
+			regs->ax, regs->bx, regs->cx, regs->dx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3205: FILE: arch/x86/mm/mmio-mod.c:176:
+	pr_emerg("esi: %08lx   edi: %08lx   ebp: %08lx   esp: %08lx\n",
+			regs->si, regs->di, regs->bp, regs->sp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3208: FILE: arch/x86/mm/mmio-mod.c:179:
+	pr_emerg("rax: %016lx   rcx: %016lx   rdx: %016lx\n",
+					regs->ax, regs->cx, regs->dx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3210: FILE: arch/x86/mm/mmio-mod.c:181:
+	pr_emerg("rsi: %016lx   rdi: %016lx   rbp: %016lx   rsp: %016lx\n",
+				regs->si, regs->di, regs->bp, regs->sp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3213: FILE: arch/x86/mm/mmio-mod.c:184:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3217: FILE: arch/x86/mm/mmio-mod.c:188:
+static void pre(struct kmmio_probe *p, struct pt_regs *regs,
+						unsigned long addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3271: FILE: arch/x86/mm/mmio-mod.c:242:
+			unsigned char *ip = (unsigned char *)instptr;
+			my_trace->opcode = MMIO_UNKNOWN_OP;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3282: FILE: arch/x86/mm/mmio-mod.c:253:
+static void post(struct kmmio_probe *p, unsigned long condition,
+							struct pt_regs *regs)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'post', this function's name, in a string
#3290: FILE: arch/x86/mm/mmio-mod.c:261:
+		pr_emerg(NAME "unexpected post handler");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3291: FILE: arch/x86/mm/mmio-mod.c:262:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3308: FILE: arch/x86/mm/mmio-mod.c:279:
+static void ioremap_trace_core(resource_size_t offset, unsigned long size,
+							void __iomem *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3352: FILE: arch/x86/mm/mmio-mod.c:323:
+void mmiotrace_ioremap(resource_size_t offset, unsigned long size,
+						void __iomem *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3358: FILE: arch/x86/mm/mmio-mod.c:329:
+	pr_debug(NAME "ioremap_*(0x%llx, 0x%lx) = %p\n",
+				(unsigned long long)offset, size, addr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset != filter_offset'
#3359: FILE: arch/x86/mm/mmio-mod.c:330:
+	if ((filter_offset) && (offset != filter_offset))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3364: FILE: arch/x86/mm/mmio-mod.c:335:
+static void iounmap_trace_core(volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3402: FILE: arch/x86/mm/mmio-mod.c:373:
+void mmiotrace_iounmap(volatile void __iomem *addr)

WARNING:SPLIT_STRING: quoted string split across lines
#3422: FILE: arch/x86/mm/mmio-mod.c:393:
+		pr_notice(NAME "purging non-iounmapped "
+					"trace @0x%08lx, size 0x%lx.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3459: FILE: arch/x86/mm/mmio-mod.c:430:
+		pr_warning(NAME "multiple CPUs still online, "
+						"may miss events.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#3484: FILE: arch/x86/mm/mmio-mod.c:455:
+		pr_warning(NAME "multiple CPUs are online, may miss events. "
+			"Suggest booting with maxcpus=1 kernel argument.\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3492: FILE: arch/x86/mm/mmio-mod.c:463:
+#if 0 /* XXX: out of order */

WARNING:CONST_STRUCT: struct file_operations should normally be const
#3493: FILE: arch/x86/mm/mmio-mod.c:464:
+static struct file_operations fops_marker = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3505: FILE: arch/x86/mm/mmio-mod.c:476:
+#if 0 /* XXX: tracing does not support text entries */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3507: FILE: arch/x86/mm/mmio-mod.c:478:
+	marker_file = debugfs_create_file("marker", 0660, dir, NULL,
+								&fops_marker);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3531: FILE: arch/x86/mm/mmio-mod.c:502:
+	BUG_ON(is_enabled());

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#3537: FILE: arch/x86/mm/mmio-mod.c:508:
+	if (marker_file) {
+		debugfs_remove(marker_file);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3563: FILE: arch/x86/mm/pf_in.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3578: FILE: arch/x86/mm/pf_in.c:16:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3579: FILE: arch/x86/mm/pf_in.c:17:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,$

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#3595: FILE: arch/x86/mm/pf_in.c:33:
+#ifdef __i386__

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3601: FILE: arch/x86/mm/pf_in.c:39:
+};
+/* IA32 Manual 3, 3-432*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3605: FILE: arch/x86/mm/pf_in.c:43:
+};
+static unsigned int reg_wop[] = { 0x88, 0x89 };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3612: FILE: arch/x86/mm/pf_in.c:50:
+};
+static unsigned int mw8[] = { 0x88, 0x8A, 0xC6, 0xB60F, 0xBE0F };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3624: FILE: arch/x86/mm/pf_in.c:62:
+};
+/* AMD64 Manual 3, Appendix A*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3628: FILE: arch/x86/mm/pf_in.c:66:
+};
+static unsigned int reg_wop[] = { 0x88, 0x89 };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3634: FILE: arch/x86/mm/pf_in.c:72:
+};
+/* 8 bit only */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3645: FILE: arch/x86/mm/pf_in.c:83:
+static int skip_prefix(unsigned char *addr, int *shorted, int *enlarged,
+								int *rexr)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'opcode' may be better as '(opcode)' to avoid precedence issues
#3688: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array' - possible side-effects?
#3688: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3688: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3715: FILE: arch/x86/mm/pf_in.c:153:
+}
+#undef CHECK_OP_TYPE

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3735: FILE: arch/x86/mm/pf_in.c:173:
+	printk(KERN_ERR "mmiotrace: Unknown opcode 0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3765: FILE: arch/x86/mm/pf_in.c:203:
+	printk(KERN_ERR "mmiotrace: Unknown opcode 0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3859: FILE: arch/x86/mm/pf_in.c:297:
+		printk(KERN_ERR "mmiotrace: Error reg no# %d\n", no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3921: FILE: arch/x86/mm/pf_in.c:359:
+		printk(KERN_ERR "mmiotrace: Error reg no# %d\n", no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3951: FILE: arch/x86/mm/pf_in.c:389:
+	printk(KERN_ERR "mmiotrace: Not a register instruction, opcode "

WARNING:SPLIT_STRING: quoted string split across lines
#3952: FILE: arch/x86/mm/pf_in.c:390:
+	printk(KERN_ERR "mmiotrace: Not a register instruction, opcode "
+							"0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3974: FILE: arch/x86/mm/pf_in.c:412:
+		printk(KERN_ERR "mmiotrace: Error width# %d\n", reg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3999: FILE: arch/x86/mm/pf_in.c:437:
+	printk(KERN_ERR "mmiotrace: Not an immediate instruction, opcode "

WARNING:SPLIT_STRING: quoted string split across lines
#4000: FILE: arch/x86/mm/pf_in.c:438:
+	printk(KERN_ERR "mmiotrace: Not an immediate instruction, opcode "
+							"0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4025: FILE: arch/x86/mm/pf_in.c:463:
+		printk(KERN_ERR "mmiotrace: not a memory access instruction "

WARNING:SPLIT_STRING: quoted string split across lines
#4026: FILE: arch/x86/mm/pf_in.c:464:
+		printk(KERN_ERR "mmiotrace: not a memory access instruction "
+						"at 0x%lx, rm_mod=0x%02x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4046: FILE: arch/x86/mm/pf_in.c:484:
+		printk(KERN_ERR "mmiotrace: Error: width.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4058: FILE: arch/x86/mm/pf_in.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4073: FILE: arch/x86/mm/pf_in.h:16:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4074: FILE: arch/x86/mm/pf_in.h:17:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4103: FILE: arch/x86/mm/testmmiotrace.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#4118: FILE: arch/x86/mm/testmmiotrace.c:16:
+	unsigned int i;
+	for (i = 0; i < 256; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4129: FILE: arch/x86/mm/testmmiotrace.c:27:
+	unsigned int i;
+	for (i = 0; i < 256; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4140: FILE: arch/x86/mm/testmmiotrace.c:38:
+	void __iomem *p = ioremap_nocache(mmio_address, 0x4000);
+	if (!p) {

WARNING:SPLIT_STRING: quoted string split across lines
#4153: FILE: arch/x86/mm/testmmiotrace.c:51:
+		pr_err(MODULE_NAME ": you have to use the module argument "
+							"mmio_address.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#4155: FILE: arch/x86/mm/testmmiotrace.c:53:
+		pr_err(MODULE_NAME ": DO NOT LOAD THIS MODULE UNLESS"
+				" YOU REALLY KNOW WHAT YOU ARE DOING!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#4160: FILE: arch/x86/mm/testmmiotrace.c:58:
+	pr_warning(MODULE_NAME ": WARNING: mapping 16 kB @ 0x%08lx "
+					"in PCI address space, and writing "

WARNING:SPLIT_STRING: quoted string split across lines
#4161: FILE: arch/x86/mm/testmmiotrace.c:59:
+					"in PCI address space, and writing "
+					"rubbish in there.\n", mmio_address);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4252: FILE: arch/x86/vdso/vgetcpu.c:17:
+__vdso_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *unused)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4252: FILE: arch/x86/vdso/vgetcpu.c:17:
+__vdso_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *unused)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4274: FILE: include/asm-powerpc/ftrace.h:1:
+#ifndef _ASM_POWERPC_FTRACE

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4277: FILE: include/asm-powerpc/ftrace.h:4:
+extern void _mcount(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4365: FILE: include/asm-x86/irqflags.h:206:
+#  define TRACE_IRQS_ON		call trace_hardirqs_on_thunk;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4365: FILE: include/asm-x86/irqflags.h:206:
+#  define TRACE_IRQS_ON		call trace_hardirqs_on_thunk;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4366: FILE: include/asm-x86/irqflags.h:207:
+#  define TRACE_IRQS_OFF	call trace_hardirqs_off_thunk;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4366: FILE: include/asm-x86/irqflags.h:207:
+#  define TRACE_IRQS_OFF	call trace_hardirqs_off_thunk;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4379: FILE: include/asm-x86/vsyscall.h:27:
+#define __vsyscall_fn \
+	__attribute__ ((unused, __section__(".vsyscall_fn"))) notrace

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_fn") over __attribute__((__section__(".vsyscall_fn")))
#4380: FILE: include/asm-x86/vsyscall.h:28:
+	__attribute__ ((unused, __section__(".vsyscall_fn"))) notrace

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#4380: FILE: include/asm-x86/vsyscall.h:28:
+	__attribute__ ((unused, __section__(".vsyscall_fn"))) notrace

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4390: FILE: include/linux/ftrace.h:1:
+#ifndef _LINUX_FTRACE_H

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4401: FILE: include/linux/ftrace.h:12:
+		     struct file *filp, void __user *buffer, size_t *lenp,
 		                  ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4422: FILE: include/linux/ftrace.h:33:
+extern void ftrace_stub(unsigned long a0, unsigned long a1);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4423: FILE: include/linux/ftrace.h:34:
+extern void mcount(void);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#4433: FILE: include/linux/ftrace.h:44:
+# define FTRACE_HASHSIZE	(1<<FTRACE_HASHBITS)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#4433: FILE: include/linux/ftrace.h:44:
+# define FTRACE_HASHSIZE	(1<<FTRACE_HASHBITS)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4454: FILE: include/linux/ftrace.h:65:
+extern int ftrace_ip_converted(unsigned long ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4455: FILE: include/linux/ftrace.h:66:
+extern unsigned char *ftrace_nop_replace(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4456: FILE: include/linux/ftrace.h:67:
+extern unsigned char *ftrace_call_replace(unsigned long ip, unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4457: FILE: include/linux/ftrace.h:68:
+extern int ftrace_dyn_arch_init(void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4458: FILE: include/linux/ftrace.h:69:
+extern int ftrace_mcount_set(unsigned long *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4459: FILE: include/linux/ftrace.h:70:
+extern int ftrace_modify_code(unsigned long ip, unsigned char *old_code,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4461: FILE: include/linux/ftrace.h:72:
+extern int ftrace_update_ftrace_func(ftrace_func_t func);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4462: FILE: include/linux/ftrace.h:73:
+extern void ftrace_caller(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4463: FILE: include/linux/ftrace.h:74:
+extern void ftrace_call(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4464: FILE: include/linux/ftrace.h:75:
+extern void mcount_call(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4506: FILE: include/linux/ftrace.h:117:
+  extern void time_hardirqs_on(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4506: FILE: include/linux/ftrace.h:117:
+  extern void time_hardirqs_on(unsigned long a0, unsigned long a1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4507: FILE: include/linux/ftrace.h:118:
+  extern void time_hardirqs_off(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4507: FILE: include/linux/ftrace.h:118:
+  extern void time_hardirqs_off(unsigned long a0, unsigned long a1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4514: FILE: include/linux/ftrace.h:125:
+  extern void trace_preempt_on(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4514: FILE: include/linux/ftrace.h:125:
+  extern void trace_preempt_on(unsigned long a0, unsigned long a1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4515: FILE: include/linux/ftrace.h:126:
+  extern void trace_preempt_off(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4515: FILE: include/linux/ftrace.h:126:
+  extern void trace_preempt_off(unsigned long a0, unsigned long a1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4542: FILE: include/linux/irqflags.h:17:
+  extern void trace_hardirqs_on(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4542: FILE: include/linux/irqflags.h:17:
+  extern void trace_hardirqs_on(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4543: FILE: include/linux/irqflags.h:18:
+  extern void trace_hardirqs_off(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4543: FILE: include/linux/irqflags.h:18:
+  extern void trace_hardirqs_off(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4553: FILE: include/linux/irqflags.h:46:
+ extern void stop_critical_timings(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4553: FILE: include/linux/irqflags.h:46:
+ extern void stop_critical_timings(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4554: FILE: include/linux/irqflags.h:47:
+ extern void start_critical_timings(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4554: FILE: include/linux/irqflags.h:47:
+ extern void start_critical_timings(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4675: FILE: include/linux/mmiotrace.h:1:
+#ifndef MMIOTRACE_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4705: FILE: include/linux/mmiotrace.h:31:
+extern int register_kmmio_probe(struct kmmio_probe *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4706: FILE: include/linux/mmiotrace.h:32:
+extern void unregister_kmmio_probe(struct kmmio_probe *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4709: FILE: include/linux/mmiotrace.h:35:
+extern int kmmio_handler(struct pt_regs *regs, unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4713: FILE: include/linux/mmiotrace.h:39:
+extern void mmiotrace_ioremap(resource_size_t offset, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4714: FILE: include/linux/mmiotrace.h:40:
+extern void mmiotrace_ioremap(resource_size_t offset, unsigned long size,
+							void __iomem *addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4715: FILE: include/linux/mmiotrace.h:41:
+extern void mmiotrace_iounmap(volatile void __iomem *addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4715: FILE: include/linux/mmiotrace.h:41:
+extern void mmiotrace_iounmap(volatile void __iomem *addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4718: FILE: include/linux/mmiotrace.h:44:
+static inline void mmiotrace_ioremap(resource_size_t offset,
+					unsigned long size, void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4722: FILE: include/linux/mmiotrace.h:48:
+static inline void mmiotrace_iounmap(volatile void __iomem *addr)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4754: FILE: include/linux/mmiotrace.h:80:
+extern void enable_mmiotrace(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4755: FILE: include/linux/mmiotrace.h:81:
+extern void disable_mmiotrace(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4756: FILE: include/linux/mmiotrace.h:82:
+extern void mmio_trace_rw(struct mmiotrace_rw *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4757: FILE: include/linux/mmiotrace.h:83:
+extern void mmio_trace_mapping(struct mmiotrace_map *map);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#4778: FILE: include/linux/preempt.h:56:
+#define add_preempt_count_notrace(val)			\
+	do { preempt_count() += (val); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#4780: FILE: include/linux/preempt.h:58:
+#define sub_preempt_count_notrace(val)			\
+	do { preempt_count() -= (val); } while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4827: FILE: include/linux/sched.h:249:
+extern int runqueue_is_locked(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4868: FILE: include/linux/writeback.h:108:
+extern unsigned long determine_dirtyable_memory(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5042: FILE: kernel/lockdep.c:2730:
+void lock_release(struct lockdep_map *lock, int nested,
+			  unsigned long ip)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5086: FILE: kernel/marker.c:123:
+		func(mdata->single.probe_private, call_private, mdata->format,
+			&args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5124: FILE: kernel/marker.c:173:
+		func(mdata->single.probe_private, call_private, mdata->format,
+			&args);

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#5191: FILE: kernel/sched.c:623:
+	ret = spin_is_locked(&rq->lock);

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5321: FILE: kernel/sched_trace.h:1:
+#include <linux/marker.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5326: FILE: kernel/sched_trace.h:6:
+	trace_mark(kernel_sched_wait_task, "pid %d state %ld",
+			p->pid, p->state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5333: FILE: kernel/sched_trace.h:13:
+	trace_mark(kernel_sched_wakeup,
+			"pid %d state %ld ## rq %p task %p rq->curr %p",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5341: FILE: kernel/sched_trace.h:21:
+	trace_mark(kernel_sched_wakeup_new,
+			"pid %d state %ld ## rq %p task %p rq->curr %p",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5346: FILE: kernel/sched_trace.h:26:
+static inline void trace_kernel_sched_switch(struct rq *rq,
+		struct task_struct *prev, struct task_struct *next)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5349: FILE: kernel/sched_trace.h:29:
+	trace_mark(kernel_sched_schedule,
+			"prev_pid %d next_pid %d prev_state %ld "

WARNING:SPLIT_STRING: quoted string split across lines
#5350: FILE: kernel/sched_trace.h:30:
+			"prev_pid %d next_pid %d prev_state %ld "
+			"## rq %p prev %p next %p",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5359: FILE: kernel/sched_trace.h:39:
+	trace_mark(kernel_sched_migrate_task,
+			"pid %d state %ld dest_cpu %d",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5601: FILE: kernel/trace/ftrace.c:1:
+/*

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5646: FILE: kernel/trace/ftrace.c:46:
+static struct ftrace_ops ftrace_list_end __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5780: FILE: kernel/trace/ftrace.c:180:
+  ((PAGE_SIZE - sizeof(struct ftrace_page)) / sizeof(struct dyn_ftrace))$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#5882: FILE: kernel/trace/ftrace.c:282:
+	 * Use the the raw version of smp_processor_id and not

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fl == 0'
#5963: FILE: kernel/trace/ftrace.c:363:
+		if ((fl ==  (FTRACE_FL_FILTER | FTRACE_FL_ENABLED)) ||
+		    (fl == 0) || (rec->flags & FTRACE_FL_NOTRACE))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5981: FILE: kernel/trace/ftrace.c:381:
+	} else {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#5982: FILE: kernel/trace/ftrace.c:382:
+		if (enable) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5992: FILE: kernel/trace/ftrace.c:392:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'system_state == SYSTEM_BOOTING'
#6032: FILE: kernel/trace/ftrace.c:432:
+				if ((system_state == SYSTEM_BOOTING) ||
+				    !core_kernel_text(rec->ip)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#6078: FILE: kernel/trace/ftrace.c:478:
+	if (*command & FTRACE_ENABLE_CALLS) {
[...]
+	} else if (*command & FTRACE_DISABLE_CALLS)
[...]

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6104: FILE: kernel/trace/ftrace.c:504:
+	stop_machine_run(__ftrace_modify_code, &command, NR_CPUS);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6237: FILE: kernel/trace/ftrace.c:637:
+			 * freed. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6245: FILE: kernel/trace/ftrace.c:645:
+			 * global warming :-p ). */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'system_state == SYSTEM_BOOTING'
#6253: FILE: kernel/trace/ftrace.c:653:
+				if ((system_state == SYSTEM_BOOTING) ||
+				    !core_kernel_text(p->ip)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6279: FILE: kernel/trace/ftrace.c:679:
+	stop_machine_run(__ftrace_update_code, NULL, NR_CPUS);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6289: FILE: kernel/trace/ftrace.c:689:
+	while (!kthread_should_stop()) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#6306: FILE: kernel/trace/ftrace.c:706:
+				pr_info("hm, dftrace overflow: %lu change%s"
+					" (%lu total) in %lu usec%s\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#6349: FILE: kernel/trace/ftrace.c:749:
+	pg = ftrace_pages = ftrace_pages_start;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6373: FILE: kernel/trace/ftrace.c:773:
+#define FTRACE_BUFF_MAX (KSYM_SYMBOL_LEN+4) /* room for wildcards */
                                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6378: FILE: kernel/trace/ftrace.c:778:
+	unsigned		idx;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6379: FILE: kernel/trace/ftrace.c:779:
+	unsigned		flags;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6380: FILE: kernel/trace/ftrace.c:780:
+	unsigned char		buffer[FTRACE_BUFF_MAX+1];
 	             		                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6381: FILE: kernel/trace/ftrace.c:781:
+	unsigned		buffer_idx;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6382: FILE: kernel/trace/ftrace.c:782:
+	unsigned		filtered;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#6460: FILE: kernel/trace/ftrace.c:860:
+static struct seq_operations show_ftrace_seq_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6523: FILE: kernel/trace/ftrace.c:923:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6529: FILE: kernel/trace/ftrace.c:929:
+	unsigned i;

CHECK:BRACES: braces {} should be used on all arms of this statement
#6566: FILE: kernel/trace/ftrace.c:966:
+	if (file->f_mode & FMODE_READ) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#6573: FILE: kernel/trace/ftrace.c:973:
+		if (!ret) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#6575: FILE: kernel/trace/ftrace.c:975:
+			struct seq_file *m = file->private_data;
+			m->private = iter;

CHECK:BRACES: Unbalanced braces around else statement
#6576: FILE: kernel/trace/ftrace.c:976:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#6578: FILE: kernel/trace/ftrace.c:978:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6599: FILE: kernel/trace/ftrace.c:999:
+ftrace_regex_read(struct file *file, char __user *ubuf,
+		       size_t cnt, loff_t *ppos)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#6615: FILE: kernel/trace/ftrace.c:1015:
+		file->f_pos = ret = 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6636: FILE: kernel/trace/ftrace.c:1036:
+	unsigned i, match = 0, search_len = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr[search_len] == 0'
#6686: FILE: kernel/trace/ftrace.c:1086:
+				if (ptr && (ptr[search_len] == 0))

CHECK:BRACES: braces {} should be used on all arms of this statement
#6712: FILE: kernel/trace/ftrace.c:1112:
+	if (file->f_mode & FMODE_READ) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#6714: FILE: kernel/trace/ftrace.c:1114:
+		struct seq_file *m = file->private_data;
+		iter = m->private;

CHECK:BRACES: Unbalanced braces around else statement
#6715: FILE: kernel/trace/ftrace.c:1115:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#6749: FILE: kernel/trace/ftrace.c:1149:
+		if (iter->buffer_idx < FTRACE_BUFF_MAX)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6751: FILE: kernel/trace/ftrace.c:1151:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#6762: FILE: kernel/trace/ftrace.c:1162:
+	if (isspace(ch)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6767: FILE: kernel/trace/ftrace.c:1167:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6770: FILE: kernel/trace/ftrace.c:1170:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#6844: FILE: kernel/trace/ftrace.c:1244:
+	if (file->f_mode & FMODE_READ) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6848: FILE: kernel/trace/ftrace.c:1248:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6882: FILE: kernel/trace/ftrace.c:1282:
+ftraced_read(struct file *filp, char __user *ubuf,
                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6883: FILE: kernel/trace/ftrace.c:1283:
+ftraced_read(struct file *filp, char __user *ubuf,
+		     size_t cnt, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6893: FILE: kernel/trace/ftrace.c:1293:
+ftraced_write(struct file *filp, const char __user *ubuf,
                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6894: FILE: kernel/trace/ftrace.c:1294:
+ftraced_write(struct file *filp, const char __user *ubuf,
+		      size_t cnt, loff_t *ppos)

CHECK:BRACES: braces {} should be used on all arms of this statement
#6906: FILE: kernel/trace/ftrace.c:1306:
+	if (strncmp(buf, "enable", 6) == 0)
[...]
+	else if (strncmp(buf, "disable", 7) == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6910: FILE: kernel/trace/ftrace.c:1310:
+	else {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#6913: FILE: kernel/trace/ftrace.c:1313:
+		ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#6930: FILE: kernel/trace/ftrace.c:1330:
+static struct file_operations ftrace_avail_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#6937: FILE: kernel/trace/ftrace.c:1337:
+static struct file_operations ftrace_failures_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#6944: FILE: kernel/trace/ftrace.c:1344:
+static struct file_operations ftrace_filter_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#6952: FILE: kernel/trace/ftrace.c:1352:
+static struct file_operations ftrace_notrace_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#6960: FILE: kernel/trace/ftrace.c:1360:
+static struct file_operations ftraced_fops = {

WARNING:SPLIT_STRING: quoted string split across lines
#7019: FILE: kernel/trace/ftrace.c:1419:
+		pr_warning("Could not create debugfs "
+			   "'available_filter_functions' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7030: FILE: kernel/trace/ftrace.c:1430:
+		pr_warning("Could not create debugfs "
+			   "'set_ftrace_filter' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7036: FILE: kernel/trace/ftrace.c:1436:
+		pr_warning("Could not create debugfs "
+			   "'set_ftrace_notrace' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7042: FILE: kernel/trace/ftrace.c:1442:
+		pr_warning("Could not create debugfs "
+			   "'ftraced_enabled' entry\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#7056: FILE: kernel/trace/ftrace.c:1456:
+	stop_machine_run(ftrace_dyn_arch_init, &addr, NR_CPUS);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7074: FILE: kernel/trace/ftrace.c:1474:
+	last_ftrace_enabled = ftrace_enabled = 1;

WARNING:TYPO_SPELLING: 'unresgister' may be misspelled - perhaps 'unregister'?
#7141: FILE: kernel/trace/ftrace.c:1541:
+ * unregister_ftrace_function - unresgister a function for profiling.
                                 ^^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last_ftrace_enabled == ftrace_enabled'
#7172: FILE: kernel/trace/ftrace.c:1572:
+	if (ret || !write || (last_ftrace_enabled == ftrace_enabled))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#7178: FILE: kernel/trace/ftrace.c:1578:
+	if (ftrace_enabled) {
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7206: FILE: kernel/trace/trace.c:1:
+/*

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#7242: FILE: kernel/trace/trace.c:37:
+unsigned long __read_mostly	tracing_max_latency = (cycle_t)ULONG_MAX;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#7243: FILE: kernel/trace/trace.c:38:
+unsigned long __read_mostly	tracing_thresh;

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#7245: FILE: kernel/trace/trace.c:40:
+static unsigned long __read_mostly	tracing_nr_buffers;

ERROR:POINTER_LOCATION: "foo __read_mostly		bar" should be "foo __read_mostly bar"
#7246: FILE: kernel/trace/trace.c:41:
+static cpumask_t __read_mostly		tracing_buffer_mask;

ERROR:SPACING: space required before the open parenthesis '('
#7342: FILE: kernel/trace/trace.c:137:
+	if(tr->ctrl)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7354: FILE: kernel/trace/trace.c:149:
+
+

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#7380: FILE: kernel/trace/trace.c:175:
+	ret = strict_strtoul(str, 0, &nr_entries);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#7387: FILE: kernel/trace/trace.c:182:
+__setup("trace_entries=", set_nr_entries);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#7414: FILE: kernel/trace/trace.c:209:
+	(TRACE_ITER_PRINT_PARENT|TRACE_ITER_SYM_OFFSET|TRACE_ITER_SYM_ADDR)
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#7414: FILE: kernel/trace/trace.c:209:
+	(TRACE_ITER_PRINT_PARENT|TRACE_ITER_SYM_OFFSET|TRACE_ITER_SYM_ADDR)
 	                                              ^

WARNING:TYPO_SPELLING: 'postions' may be misspelled - perhaps 'positions'?
#7416: FILE: kernel/trace/trace.c:211:
+/* These must match the bit postions in trace_iterator_flags */
                             ^^^^^^^^

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#7417: FILE: kernel/trace/trace.c:212:
+static const char *trace_options[] = {

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#7470: FILE: kernel/trace/trace.c:265:
+#define CHECK_COND(cond)			\
+	if (unlikely(cond)) {			\
+		tracing_disabled = 1;		\
+		WARN_ON(1);			\
+		return -1;			\
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#7470: FILE: kernel/trace/trace.c:265:
+#define CHECK_COND(cond)			\
+	if (unlikely(cond)) {			\
+		tracing_disabled = 1;		\
+		WARN_ON(1);			\
+		return -1;			\
+	}

WARNING:TYPO_SPELLING: 'safty' may be misspelled - perhaps 'safety'?
#7480: FILE: kernel/trace/trace.c:275:
+ * As a safty measure we check to make sure the data pages have not
         ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7513: FILE: kernel/trace/trace.c:308:
+	BUG_ON(&page->lru == &data->trace_pages);

WARNING:TYPO_SPELLING: 'formating' may be misspelled - perhaps 'formatting'?
#7524: FILE: kernel/trace/trace.c:319:
+ * copy to user routines. To simplify formating of a trace
                                       ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7610: FILE: kernel/trace/trace.c:405:
+	BUG_ON(len >= HEX_CHARS);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7615: FILE: kernel/trace/trace.c:410:
+	for (i = len-1, j = 0; i >= 0; i--) {
 	            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7679: FILE: kernel/trace/trace.c:474:
+	memcpy(&tr1->trace_head_idx, &tr2->trace_head_idx,
+		sizeof(struct trace_array_cpu) -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7687: FILE: kernel/trace/trace.c:482:
+	BUG_ON(!list_empty(&flip_pages));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#7803: FILE: kernel/trace/trace.c:598:
+			printk(KERN_CONT "FAILED!\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#7803: FILE: kernel/trace/trace.c:598:
+			printk(KERN_CONT "FAILED!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#7813: FILE: kernel/trace/trace.c:608:
+		printk(KERN_CONT "PASSED\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#7813: FILE: kernel/trace/trace.c:608:
+		printk(KERN_CONT "PASSED\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7861: FILE: kernel/trace/trace.c:656:
+	data->trace_head = data->trace_tail = head_page(data);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7867: FILE: kernel/trace/trace.c:662:
+static unsigned map_pid_to_cmdline[PID_MAX_DEFAULT+1];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7867: FILE: kernel/trace/trace.c:662:
+static unsigned map_pid_to_cmdline[PID_MAX_DEFAULT+1];
                                                   ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7868: FILE: kernel/trace/trace.c:663:
+static unsigned map_cmdline_to_pid[SAVED_CMDLINES];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7887: FILE: kernel/trace/trace.c:682:
+	unsigned map;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7888: FILE: kernel/trace/trace.c:683:
+	unsigned idx;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7908: FILE: kernel/trace/trace.c:703:
+			map_pid_to_cmdline[map] = (unsigned)-1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7923: FILE: kernel/trace/trace.c:718:
+	unsigned map;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7958: FILE: kernel/trace/trace.c:753:
+	BUG_ON(next == &data->trace_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7987: FILE: kernel/trace/trace.c:782:
+	BUG_ON(idx * TRACE_ENTRY_SIZE >= PAGE_SIZE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#8050: FILE: kernel/trace/trace.c:845:
+       unsigned long ip, unsigned long parent_ip, unsigned long flags)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8058: FILE: kernel/trace/trace.c:853:
+void __trace_mmiotrace_rw(struct trace_array *tr, struct trace_array_cpu *data,
+						struct mmiotrace_rw *rw)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8078: FILE: kernel/trace/trace.c:873:
+void __trace_mmiotrace_map(struct trace_array *tr, struct trace_array_cpu *data,
+						struct mmiotrace_map *map)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#8251: FILE: kernel/trace/trace.c:1046:
+static struct ftrace_ops trace_ops __read_mostly =
+{

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8292: FILE: kernel/trace/trace.c:1087:
+	BUG_ON(&data->trace_pages == &page->lru);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8531: FILE: kernel/trace/trace.c:1326:
+	seq_puts(m, "#                _------=> CPU#            \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8532: FILE: kernel/trace/trace.c:1327:
+	seq_puts(m, "#               / _-----=> irqs-off        \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8533: FILE: kernel/trace/trace.c:1328:
+	seq_puts(m, "#              | / _----=> need-resched    \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8534: FILE: kernel/trace/trace.c:1329:
+	seq_puts(m, "#              || / _---=> hardirq/softirq \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8535: FILE: kernel/trace/trace.c:1330:
+	seq_puts(m, "#              ||| / _--=> preempt-depth   \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8536: FILE: kernel/trace/trace.c:1331:
+	seq_puts(m, "#              |||| /                      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8537: FILE: kernel/trace/trace.c:1332:
+	seq_puts(m, "#              |||||     delay             \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8538: FILE: kernel/trace/trace.c:1333:
+	seq_puts(m, "#  cmd     pid ||||| time  |   caller      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#8539: FILE: kernel/trace/trace.c:1334:
+	seq_puts(m, "#     \\   /    |||||   \\   |   /           \n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8548: FILE: kernel/trace/trace.c:1343:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#8577: FILE: kernel/trace/trace.c:1372:
+	seq_puts(m, "-----------------------------------"
+		 "---------------------------------\n");

WARNING:SPLIT_STRING: quoted string split across lines
#8579: FILE: kernel/trace/trace.c:1374:
+	seq_printf(m, " latency: %lu us, #%lu/%lu, CPU#%d |"
+		   " (M:%s VP:%d, KP:%d, SP:%d HP:%d",

WARNING:SPLIT_STRING: quoted string split across lines
#8602: FILE: kernel/trace/trace.c:1397:
+	seq_printf(m, "    | task: %.16s-%d "
+		   "(uid:%d nice:%ld policy:%ld rt_prio:%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8631: FILE: kernel/trace/trace.c:1426:
+	trace_seq_printf(s, "%c%c",
+			(entry->flags & TRACE_FLAG_IRQS_OFF) ? 'd' : '.',

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8685: FILE: kernel/trace/trace.c:1480:
+	unsigned state;

WARNING:SPLIT_STRING: quoted string split across lines
#8695: FILE: kernel/trace/trace.c:1490:
+		trace_seq_printf(s, "%16s %5d %d %d %08x %08x [%08lx]"
+				 " %ld.%03ldms (+%ld.%03ldms): ",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#8700: FILE: kernel/trace/trace.c:1495:
+				 abs_usecs/1000,
 				          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#8701: FILE: kernel/trace/trace.c:1496:
+				 abs_usecs % 1000, rel_usecs/1000,
 				                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8790: FILE: kernel/trace/trace.c:1585:
+		if ((sym_flags & TRACE_ITER_PRINT_PARENT) &&
+						entry->fn.parent_ip) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8825: FILE: kernel/trace/trace.c:1620:
+		ret = trace_seq_printf(s, "# %ld %ld %ld\n",
+				 entry->special.arg1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8861: FILE: kernel/trace/trace.c:1656:
+	ret = trace_seq_printf(s, "%d %d %llu ",
+		entry->pid, iter->cpu, entry->t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8868: FILE: kernel/trace/trace.c:1663:
+		ret = trace_seq_printf(s, "%x %x\n",
+					entry->fn.ip, entry->fn.parent_ip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8893: FILE: kernel/trace/trace.c:1688:
+		ret = trace_seq_printf(s, "# %ld %ld %ld\n",
+				 entry->special.arg1,

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#8903: FILE: kernel/trace/trace.c:1698:
+#define SEQ_PUT_FIELD_RET(s, x)				\
+do {							\
+	if (!trace_seq_putmem(s, &(x), sizeof(x)))	\
+		return 0;				\
+} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#8909: FILE: kernel/trace/trace.c:1704:
+#define SEQ_PUT_HEX_FIELD_RET(s, x)			\
+do {							\
+	if (!trace_seq_putmem_hex(s, &(x), sizeof(x)))	\
+		return 0;				\
+} while (0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter->ent"
#9035: FILE: kernel/trace/trace.c:1830:
+	if (iter->ent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#9059: FILE: kernel/trace/trace.c:1854:
+static struct seq_operations tracer_seq_ops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#9094: FILE: kernel/trace/trace.c:1889:
+		struct seq_file *m = file->private_data;
+		m->private = iter;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9112: FILE: kernel/trace/trace.c:1907:
+int tracing_open_generic(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#9130: FILE: kernel/trace/trace.c:1925:
+	/* reenable tracing if it was previously enabled */
 	   ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#9162: FILE: kernel/trace/trace.c:1957:
+
+

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#9211: FILE: kernel/trace/trace.c:2006:
+static struct seq_operations show_traces_seq_ops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#9228: FILE: kernel/trace/trace.c:2023:
+		struct seq_file *m = file->private_data;
+		m->private = trace_types;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9234: FILE: kernel/trace/trace.c:2029:
+static struct file_operations tracing_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9241: FILE: kernel/trace/trace.c:2036:
+static struct file_operations tracing_lt_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9248: FILE: kernel/trace/trace.c:2043:
+static struct file_operations show_traces_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9278: FILE: kernel/trace/trace.c:2073:
+tracing_cpumask_read(struct file *filp, char __user *ubuf,
                                   ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9291: FILE: kernel/trace/trace.c:2086:
+	count = simple_read_from_buffer(ubuf, count, ppos, mask_str, NR_CPUS+1);
 	                                                                    ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#9291: FILE: kernel/trace/trace.c:2086:
+	count = simple_read_from_buffer(ubuf, count, ppos, mask_str, NR_CPUS+1);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9300: FILE: kernel/trace/trace.c:2095:
+tracing_cpumask_write(struct file *filp, const char __user *ubuf,
                                    ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9318: FILE: kernel/trace/trace.c:2113:
+		if (cpu_isset(cpu, tracing_cpumask) &&
+				!cpu_isset(cpu, tracing_cpumask_new)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9322: FILE: kernel/trace/trace.c:2117:
+		if (!cpu_isset(cpu, tracing_cpumask) &&
+				cpu_isset(cpu, tracing_cpumask_new)) {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9341: FILE: kernel/trace/trace.c:2136:
+static struct file_operations tracing_cpumask_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9348: FILE: kernel/trace/trace.c:2143:
+tracing_iter_ctrl_read(struct file *filp, char __user *ubuf,
                                     ^^^^

WARNING:TYPO_SPELLING: 'calulate' may be misspelled - perhaps 'calculate'?
#9356: FILE: kernel/trace/trace.c:2151:
+	/* calulate max size */
 	   ^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9385: FILE: kernel/trace/trace.c:2180:
+tracing_iter_ctrl_write(struct file *filp, const char __user *ubuf,
                                      ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9428: FILE: kernel/trace/trace.c:2223:
+static struct file_operations tracing_iter_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9454: FILE: kernel/trace/trace.c:2249:
+tracing_readme_read(struct file *filp, char __user *ubuf,
                                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9455: FILE: kernel/trace/trace.c:2250:
+tracing_readme_read(struct file *filp, char __user *ubuf,
+		       size_t cnt, loff_t *ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9461: FILE: kernel/trace/trace.c:2256:
+static struct file_operations tracing_readme_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9467: FILE: kernel/trace/trace.c:2262:
+tracing_ctrl_read(struct file *filp, char __user *ubuf,
                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9479: FILE: kernel/trace/trace.c:2274:
+tracing_ctrl_write(struct file *filp, const char __user *ubuf,
                                 ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#9495: FILE: kernel/trace/trace.c:2290:
+	ret = strict_strtoul(buf, 10, &val);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9521: FILE: kernel/trace/trace.c:2316:
+tracing_set_trace_read(struct file *filp, char __user *ubuf,
                                     ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9524: FILE: kernel/trace/trace.c:2319:
+	char buf[max_tracer_type_len+2];
 	                            ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9538: FILE: kernel/trace/trace.c:2333:
+tracing_set_trace_write(struct file *filp, const char __user *ubuf,
                                      ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9543: FILE: kernel/trace/trace.c:2338:
+	char buf[max_tracer_type_len+1];
 	                            ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9582: FILE: kernel/trace/trace.c:2377:
+tracing_max_lat_read(struct file *filp, char __user *ubuf,
                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9597: FILE: kernel/trace/trace.c:2392:
+tracing_max_lat_write(struct file *filp, const char __user *ubuf,
                                    ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#9613: FILE: kernel/trace/trace.c:2408:
+	ret = strict_strtoul(buf, 10, &val);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9624: FILE: kernel/trace/trace.c:2419:
+static int tracing_open_pipe(struct inode *inode, struct file *filp)
                                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9665: FILE: kernel/trace/trace.c:2460:
+tracing_poll_pipe(struct file *filp, poll_table *poll_table)
                                ^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#9674: FILE: kernel/trace/trace.c:2469:
+		return POLLIN | POLLRDNORM;
+	} else {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9677: FILE: kernel/trace/trace.c:2472:
+		poll_wait(filp, &trace_wait, poll_table);
 		          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9689: FILE: kernel/trace/trace.c:2484:
+tracing_read_pipe(struct file *filp, char __user *ubuf,
                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9712: FILE: kernel/trace/trace.c:2507:
+		sret = iter->trace->read(iter, filp, ubuf, cnt, ppos);
 		                               ^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#9718: FILE: kernel/trace/trace.c:2513:
+	while (trace_empty(iter)) {
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#9739: FILE: kernel/trace/trace.c:2534:
+		schedule_timeout(HZ/10);
 		                   ^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#9783: FILE: kernel/trace/trace.c:2578:
+	 * We need to stop all tracing on all CPUS to read the
+	 * the next buffer. This is a bit expensive, but is

WARNING:MEMORY_BARRIER: memory barrier without comment
#9794: FILE: kernel/trace/trace.c:2589:
+	smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "find_next_entry_inc"
#9815: FILE: kernel/trace/trace.c:2610:
+	while (find_next_entry_inc(iter) != NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9860: FILE: kernel/trace/trace.c:2655:
+tracing_entries_read(struct file *filp, char __user *ubuf,
                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9872: FILE: kernel/trace/trace.c:2667:
+tracing_entries_write(struct file *filp, const char __user *ubuf,
                                    ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#9887: FILE: kernel/trace/trace.c:2682:
+	ret = strict_strtoul(buf, 10, &val);

WARNING:SPLIT_STRING: quoted string split across lines
#9900: FILE: kernel/trace/trace.c:2695:
+		pr_info("ftrace: set current_tracer to none"
+			" before modifying buffer size\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#9910: FILE: kernel/trace/trace.c:2705:
+			(val + (ENTRIES_PER_PAGE-1)) / ENTRIES_PER_PAGE;
 			                        ^

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#9923: FILE: kernel/trace/trace.c:2718:
+		/* we only allow to request 1/4 of useable memory */
 		                                   ^^^^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9962: FILE: kernel/trace/trace.c:2757:
+static struct file_operations tracing_max_lat_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9968: FILE: kernel/trace/trace.c:2763:
+static struct file_operations tracing_ctrl_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9974: FILE: kernel/trace/trace.c:2769:
+static struct file_operations set_tracer_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9980: FILE: kernel/trace/trace.c:2775:
+static struct file_operations tracing_pipe_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9987: FILE: kernel/trace/trace.c:2782:
+static struct file_operations tracing_entries_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9996: FILE: kernel/trace/trace.c:2791:
+tracing_read_long(struct file *filp, char __user *ubuf,
                                ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#10008: FILE: kernel/trace/trace.c:2803:
+static struct file_operations tracing_read_long_fops = {

WARNING:SPLIT_STRING: quoted string split across lines
#10086: FILE: kernel/trace/trace.c:2881:
+		pr_warning("Could not create debugfs "
+			   "'tracing_max_latency' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#10092: FILE: kernel/trace/trace.c:2887:
+		pr_warning("Could not create debugfs "
+			   "'tracing_threash' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#10102: FILE: kernel/trace/trace.c:2897:
+		pr_warning("Could not create debugfs "
+			   "'tracing_threash' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#10108: FILE: kernel/trace/trace.c:2903:
+		pr_warning("Could not create debugfs "
+			   "'tracing_threash' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#10116: FILE: kernel/trace/trace.c:2911:
+		pr_warning("Could not create debugfs "
+			   "'dyn_ftrace_total_info' entry\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#10129: FILE: kernel/trace/trace.c:2924:
+	unsigned pages_allocated = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#10135: FILE: kernel/trace/trace.c:2930:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10136: FILE: kernel/trace/trace.c:2931:
+			printk(KERN_ERR "tracer: failed to allocate page"

WARNING:SPLIT_STRING: quoted string split across lines
#10137: FILE: kernel/trace/trace.c:2932:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#10137: FILE: kernel/trace/trace.c:2932:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#10148: FILE: kernel/trace/trace.c:2943:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10149: FILE: kernel/trace/trace.c:2944:
+			printk(KERN_ERR "tracer: failed to allocate page"

WARNING:SPLIT_STRING: quoted string split across lines
#10150: FILE: kernel/trace/trace.c:2945:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#10150: FILE: kernel/trace/trace.c:2945:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#10254: FILE: kernel/trace/trace.c:3049:
+		data = global_trace.data[i] = &per_cpu(global_trace_cpu, i);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#10258: FILE: kernel/trace/trace.c:3053:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10259: FILE: kernel/trace/trace.c:3054:
+			printk(KERN_ERR "tracer: failed to allocate page"

WARNING:SPLIT_STRING: quoted string split across lines
#10260: FILE: kernel/trace/trace.c:3055:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#10260: FILE: kernel/trace/trace.c:3055:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#10277: FILE: kernel/trace/trace.c:3072:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10278: FILE: kernel/trace/trace.c:3073:
+			printk(KERN_ERR "tracer: failed to allocate page"

WARNING:SPLIT_STRING: quoted string split across lines
#10279: FILE: kernel/trace/trace.c:3074:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#10279: FILE: kernel/trace/trace.c:3074:
+			printk(KERN_ERR "tracer: failed to allocate page"
+			       "for trace buffer!\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10355: FILE: kernel/trace/trace.h:1:
+#ifndef _LINUX_KERNEL_TRACE_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#10359: FILE: kernel/trace/trace.h:5:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#10379: FILE: kernel/trace/trace.h:25:
+ * Function trace entry - function address and parent function addres:
                                                                ^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#10454: FILE: kernel/trace/trace.h:100:
+	unsigned		trace_head_idx;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#10455: FILE: kernel/trace/trace.h:101:
+	unsigned		trace_tail_idx;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#10502: FILE: kernel/trace/trace.h:148:
+					struct file *filp, char __user *ubuf,
 					             ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#10543: FILE: kernel/trace/trace.h:189:
+	unsigned		next_page_idx[NR_CPUS];

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#10548: FILE: kernel/trace/trace.h:194:
+int tracing_open_generic(struct inode *inode, struct file *filp);
                                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10553: FILE: kernel/trace/trace.h:199:
+void ftrace(struct trace_array *tr,
+			    struct trace_array_cpu *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10587: FILE: kernel/trace/trace.h:233:
+extern unsigned long nsecs_to_usecs(unsigned long nsecs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10596: FILE: kernel/trace/trace.h:242:
+extern cycle_t ftrace_now(int cpu);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10599: FILE: kernel/trace/trace.h:245:
+typedef void

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10616: FILE: kernel/trace/trace.h:262:
+extern int DYN_FTRACE_TEST_NAME(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10620: FILE: kernel/trace/trace.h:266:
+extern void __trace_mmiotrace_rw(struct trace_array *tr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10621: FILE: kernel/trace/trace.h:267:
+extern void __trace_mmiotrace_rw(struct trace_array *tr,
+				struct trace_array_cpu *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10623: FILE: kernel/trace/trace.h:269:
+extern void __trace_mmiotrace_map(struct trace_array *tr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10624: FILE: kernel/trace/trace.h:270:
+extern void __trace_mmiotrace_map(struct trace_array *tr,
+				struct trace_array_cpu *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10630: FILE: kernel/trace/trace.h:276:
+extern int trace_selftest_startup_function(struct tracer *trace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10634: FILE: kernel/trace/trace.h:280:
+extern int trace_selftest_startup_irqsoff(struct tracer *trace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10638: FILE: kernel/trace/trace.h:284:
+extern int trace_selftest_startup_preemptoff(struct tracer *trace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10642: FILE: kernel/trace/trace.h:288:
+extern int trace_selftest_startup_preemptirqsoff(struct tracer *trace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10646: FILE: kernel/trace/trace.h:292:
+extern int trace_selftest_startup_wakeup(struct tracer *trace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10650: FILE: kernel/trace/trace.h:296:
+extern int trace_selftest_startup_sched_switch(struct tracer *trace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10654: FILE: kernel/trace/trace.h:300:
+extern int trace_selftest_startup_sysprof(struct tracer *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10655: FILE: kernel/trace/trace.h:301:
+extern int trace_selftest_startup_sysprof(struct tracer *trace,
+					       struct trace_array *tr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10659: FILE: kernel/trace/trace.h:305:
+extern void *head_page(struct trace_array_cpu *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10660: FILE: kernel/trace/trace.h:306:
+extern int trace_seq_printf(struct trace_seq *s, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10661: FILE: kernel/trace/trace.h:307:
+extern ssize_t trace_seq_to_user(struct trace_seq *s, char __user *ubuf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10663: FILE: kernel/trace/trace.h:309:
+extern long ns2usecs(cycle_t nsec);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10694: FILE: kernel/trace/trace_functions.c:1:
+/*

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#10756: FILE: kernel/trace/trace_functions.c:63:
+static struct tracer function_trace __read_mostly =
+{

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10778: FILE: kernel/trace/trace_irqsoff.c:1:
+/*

WARNING:TYPO_SPELLING: 'criticall' may be misspelled - perhaps 'critical'?
#10779: FILE: kernel/trace/trace_irqsoff.c:2:
+ * trace irqs off criticall timings
                   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#10838: FILE: kernel/trace/trace_irqsoff.c:61:
+ * and what happens together happens separately as well, so this doesnt
                                                                  ^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#10881: FILE: kernel/trace/trace_irqsoff.c:104:
+static struct ftrace_ops trace_ops __read_mostly =
+{

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#10917: FILE: kernel/trace/trace_irqsoff.c:140:
+	delta = T1-T0;
 	          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11182: FILE: kernel/trace/trace_irqsoff.c:405:
+}
+static struct tracer irqsoff_tracer __read_mostly =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#11183: FILE: kernel/trace/trace_irqsoff.c:406:
+static struct tracer irqsoff_tracer __read_mostly =
+{

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11195: FILE: kernel/trace/trace_irqsoff.c:418:
+};
+# define register_irqsoff(trace) register_tracer(&trace)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'trace' may be better as '(trace)' to avoid precedence issues
#11195: FILE: kernel/trace/trace_irqsoff.c:418:
+# define register_irqsoff(trace) register_tracer(&trace)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#11209: FILE: kernel/trace/trace_irqsoff.c:432:
+static struct tracer preemptoff_tracer __read_mostly =
+{

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#11221: FILE: kernel/trace/trace_irqsoff.c:444:
+};
+# define register_preemptoff(trace) register_tracer(&trace)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'trace' may be better as '(trace)' to avoid precedence issues
#11221: FILE: kernel/trace/trace_irqsoff.c:444:
+# define register_preemptoff(trace) register_tracer(&trace)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#11237: FILE: kernel/trace/trace_irqsoff.c:460:
+static struct tracer preemptirqsoff_tracer __read_mostly =
+{

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'trace' may be better as '(trace)' to avoid precedence issues
#11250: FILE: kernel/trace/trace_irqsoff.c:473:
+# define register_preemptirqsoff(trace) register_tracer(&trace)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11270: FILE: kernel/trace/trace_mmiotrace.c:1:
+/*

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#11304: FILE: kernel/trace/trace_mmiotrace.c:35:
+	pr_debug("in %s\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#11314: FILE: kernel/trace/trace_mmiotrace.c:45:
+	pr_debug("in %s\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#11323: FILE: kernel/trace/trace_mmiotrace.c:54:
+	pr_debug("in %s\n", __func__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#11363: FILE: kernel/trace/trace_mmiotrace.c:94:
+		ret += trace_seq_printf(s, " \n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#11394: FILE: kernel/trace/trace_mmiotrace.c:125:
+	struct header_iter *hiter = iter->private;
+	destroy_header_iter(hiter);

WARNING:LINE_SPACING: Missing a blank line after declarations
#11402: FILE: kernel/trace/trace_mmiotrace.c:133:
+	unsigned long cnt = 0;
+	for_each_online_cpu(cpu) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#11409: FILE: kernel/trace/trace_mmiotrace.c:140:
+static ssize_t mmio_read(struct trace_iterator *iter, struct file *filp,
                                                                    ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11410: FILE: kernel/trace/trace_mmiotrace.c:141:
+static ssize_t mmio_read(struct trace_iterator *iter, struct file *filp,
+				char __user *ubuf, size_t cnt, loff_t *ppos)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11450: FILE: kernel/trace/trace_mmiotrace.c:181:
+	unsigned secs		= (unsigned long)t;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11456: FILE: kernel/trace/trace_mmiotrace.c:187:
+		ret = trace_seq_printf(s,
+			"R %d %lu.%06lu %d 0x%llx 0x%lx 0x%lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11463: FILE: kernel/trace/trace_mmiotrace.c:194:
+		ret = trace_seq_printf(s,
+			"W %d %lu.%06lu %d 0x%llx 0x%lx 0x%lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11470: FILE: kernel/trace/trace_mmiotrace.c:201:
+		ret = trace_seq_printf(s,
+			"UNKNOWN %lu.%06lu %d 0x%llx %02x,%02x,%02x 0x%lx %d\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11492: FILE: kernel/trace/trace_mmiotrace.c:223:
+	unsigned secs		= (unsigned long)t;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11498: FILE: kernel/trace/trace_mmiotrace.c:229:
+		ret = trace_seq_printf(s,
+			"MAP %lu.%06lu %d 0x%llx 0x%lx 0x%lx 0x%lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11505: FILE: kernel/trace/trace_mmiotrace.c:236:
+		ret = trace_seq_printf(s,
+			"UNMAP %lu.%06lu %d 0x%lx %d\n",

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#11531: FILE: kernel/trace/trace_mmiotrace.c:262:
+static struct tracer mmio_tracer __read_mostly =
+{

WARNING:LINE_SPACING: Missing a blank line after declarations
#11552: FILE: kernel/trace/trace_mmiotrace.c:283:
+	struct trace_array_cpu *data = tr->data[smp_processor_id()];
+	__trace_mmiotrace_rw(tr, data, rw);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11571: FILE: kernel/trace/trace_sched_switch.c:1:
+/*

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#11588: FILE: kernel/trace/trace_sched_switch.c:18:
+static int __read_mostly	tracer_enabled;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11593: FILE: kernel/trace/trace_sched_switch.c:23:
+sched_switch_func(void *private, void *__rq, struct task_struct *prev,
+			struct task_struct *next)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#11648: FILE: kernel/trace/trace_sched_switch.c:78:
+			task_struct *curr)
 			            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11714: FILE: kernel/trace/trace_sched_switch.c:144:
+	ret = marker_probe_register("kernel_sched_wakeup",
+			"pid %d state %ld ## rq %p task %p rq->curr %p",

WARNING:SPLIT_STRING: quoted string split across lines
#11719: FILE: kernel/trace/trace_sched_switch.c:149:
+		pr_info("wakeup trace: Couldn't add marker"
+			" probe to kernel_sched_wakeup\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11724: FILE: kernel/trace/trace_sched_switch.c:154:
+	ret = marker_probe_register("kernel_sched_wakeup_new",
+			"pid %d state %ld ## rq %p task %p rq->curr %p",

WARNING:SPLIT_STRING: quoted string split across lines
#11729: FILE: kernel/trace/trace_sched_switch.c:159:
+		pr_info("wakeup trace: Couldn't add marker"
+			" probe to kernel_sched_wakeup_new\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11734: FILE: kernel/trace/trace_sched_switch.c:164:
+	ret = marker_probe_register("kernel_sched_schedule",
+		"prev_pid %d next_pid %d prev_state %ld "

WARNING:SPLIT_STRING: quoted string split across lines
#11735: FILE: kernel/trace/trace_sched_switch.c:165:
+		"prev_pid %d next_pid %d prev_state %ld "
+		"## rq %p prev %p next %p",

WARNING:SPLIT_STRING: quoted string split across lines
#11740: FILE: kernel/trace/trace_sched_switch.c:170:
+		pr_info("sched trace: Couldn't add marker"
+			" probe to kernel_sched_schedule\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#11834: FILE: kernel/trace/trace_sched_switch.c:264:
+static struct tracer sched_switch_trace __read_mostly =
+{

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11863: FILE: kernel/trace/trace_sched_wakeup.c:1:
+/*

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#11885: FILE: kernel/trace/trace_sched_wakeup.c:23:
+static int __read_mostly	tracer_enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11889: FILE: kernel/trace/trace_sched_wakeup.c:27:
+static unsigned			wakeup_prio = -1;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#11953: FILE: kernel/trace/trace_sched_wakeup.c:91:
+static struct ftrace_ops trace_ops __read_mostly =
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11975: FILE: kernel/trace/trace_sched_wakeup.c:113:
+wakeup_sched_switch(void *private, void *rq, struct task_struct *prev,
+	struct task_struct *next)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#12024: FILE: kernel/trace/trace_sched_wakeup.c:162:
+	delta = T1-T0;
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12108: FILE: kernel/trace/trace_sched_wakeup.c:246:
+	if (likely(!rt_task(p)) ||
+			p->prio >= wakeup_prio ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12176: FILE: kernel/trace/trace_sched_wakeup.c:314:
+	ret = marker_probe_register("kernel_sched_wakeup",
+			"pid %d state %ld ## rq %p task %p rq->curr %p",

WARNING:SPLIT_STRING: quoted string split across lines
#12181: FILE: kernel/trace/trace_sched_wakeup.c:319:
+		pr_info("wakeup trace: Couldn't add marker"
+			" probe to kernel_sched_wakeup\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12186: FILE: kernel/trace/trace_sched_wakeup.c:324:
+	ret = marker_probe_register("kernel_sched_wakeup_new",
+			"pid %d state %ld ## rq %p task %p rq->curr %p",

WARNING:SPLIT_STRING: quoted string split across lines
#12191: FILE: kernel/trace/trace_sched_wakeup.c:329:
+		pr_info("wakeup trace: Couldn't add marker"
+			" probe to kernel_sched_wakeup_new\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12196: FILE: kernel/trace/trace_sched_wakeup.c:334:
+	ret = marker_probe_register("kernel_sched_schedule",
+		"prev_pid %d next_pid %d prev_state %ld "

WARNING:SPLIT_STRING: quoted string split across lines
#12197: FILE: kernel/trace/trace_sched_wakeup.c:335:
+		"prev_pid %d next_pid %d prev_state %ld "
+		"## rq %p prev %p next %p",

WARNING:SPLIT_STRING: quoted string split across lines
#12202: FILE: kernel/trace/trace_sched_wakeup.c:340:
+		pr_info("sched trace: Couldn't add marker"
+			" probe to kernel_sched_schedule\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#12286: FILE: kernel/trace/trace_sched_wakeup.c:424:
+static struct tracer wakeup_tracer __read_mostly =
+{

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12316: FILE: kernel/trace/trace_selftest.c:1:
+/* Include in trace.c */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#12342: FILE: kernel/trace/trace_selftest.c:27:
+	BUG_ON(list_empty(&data->trace_pages));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#12357: FILE: kernel/trace/trace_selftest.c:42:
+	for (i = 0; i < tr->entries; i++) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12359: FILE: kernel/trace/trace_selftest.c:44:
+			printk(KERN_CONT ".. invalid entry %d ",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12359: FILE: kernel/trace/trace_selftest.c:44:
+			printk(KERN_CONT ".. invalid entry %d ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12360: FILE: kernel/trace/trace_selftest.c:45:
+			printk(KERN_CONT ".. invalid entry %d ",
+				entries[idx].type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12369: FILE: kernel/trace/trace_selftest.c:54:
+					printk(KERN_CONT ".. entries buffer mismatch");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12369: FILE: kernel/trace/trace_selftest.c:54:
+					printk(KERN_CONT ".. entries buffer mismatch");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12382: FILE: kernel/trace/trace_selftest.c:67:
+		printk(KERN_CONT ".. too many entries");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12382: FILE: kernel/trace/trace_selftest.c:67:
+		printk(KERN_CONT ".. too many entries");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12391: FILE: kernel/trace/trace_selftest.c:76:
+	printk(KERN_CONT ".. corrupted trace buffer .. ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12391: FILE: kernel/trace/trace_selftest.c:76:
+	printk(KERN_CONT ".. corrupted trace buffer .. ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12445: FILE: kernel/trace/trace_selftest.c:130:
+	printk(KERN_CONT "PASSED\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12445: FILE: kernel/trace/trace_selftest.c:130:
+	printk(KERN_CONT "PASSED\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12458: FILE: kernel/trace/trace_selftest.c:143:
+		printk(KERN_CONT ".. ftraced failed .. ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12458: FILE: kernel/trace/trace_selftest.c:143:
+		printk(KERN_CONT ".. ftraced failed .. ");

WARNING:TYPO_SPELLING: 'charachters' may be misspelled - perhaps 'characters'?
#12463: FILE: kernel/trace/trace_selftest.c:148:
+	 * Some archs *cough*PowerPC*cough* add charachters to the
 	                                        ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#12465: FILE: kernel/trace/trace_selftest.c:150:
+	 * accomodate them.
 	   ^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12485: FILE: kernel/trace/trace_selftest.c:170:
+		printk(KERN_CONT ".. filter did not filter .. ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12485: FILE: kernel/trace/trace_selftest.c:170:
+		printk(KERN_CONT ".. filter did not filter .. ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12506: FILE: kernel/trace/trace_selftest.c:191:
+		printk(KERN_CONT ".. filter failed count=%ld ..", count);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12506: FILE: kernel/trace/trace_selftest.c:191:
+		printk(KERN_CONT ".. filter failed count=%ld ..", count);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#12536: FILE: kernel/trace/trace_selftest.c:221:
+	msleep(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12541: FILE: kernel/trace/trace_selftest.c:226:
+		printk(KERN_CONT ".. ftraced failed .. ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12541: FILE: kernel/trace/trace_selftest.c:226:
+		printk(KERN_CONT ".. ftraced failed .. ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12563: FILE: kernel/trace/trace_selftest.c:248:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12563: FILE: kernel/trace/trace_selftest.c:248:
+		printk(KERN_CONT ".. no entries found ..");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#12598: FILE: kernel/trace/trace_selftest.c:283:
+	udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12610: FILE: kernel/trace/trace_selftest.c:295:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12610: FILE: kernel/trace/trace_selftest.c:295:
+		printk(KERN_CONT ".. no entries found ..");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#12635: FILE: kernel/trace/trace_selftest.c:320:
+	udelay(100);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12647: FILE: kernel/trace/trace_selftest.c:332:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12647: FILE: kernel/trace/trace_selftest.c:332:
+		printk(KERN_CONT ".. no entries found ..");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#12675: FILE: kernel/trace/trace_selftest.c:360:
+	udelay(100);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12693: FILE: kernel/trace/trace_selftest.c:378:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12693: FILE: kernel/trace/trace_selftest.c:378:
+		printk(KERN_CONT ".. no entries found ..");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#12704: FILE: kernel/trace/trace_selftest.c:389:
+	udelay(100);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12720: FILE: kernel/trace/trace_selftest.c:405:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12720: FILE: kernel/trace/trace_selftest.c:405:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12775: FILE: kernel/trace/trace_selftest.c:460:
+		printk(KERN_CONT "Failed to create ftrace wakeup test thread ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12775: FILE: kernel/trace/trace_selftest.c:460:
+		printk(KERN_CONT "Failed to create ftrace wakeup test thread ");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#12812: FILE: kernel/trace/trace_selftest.c:497:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12821: FILE: kernel/trace/trace_selftest.c:506:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12821: FILE: kernel/trace/trace_selftest.c:506:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#12849: FILE: kernel/trace/trace_selftest.c:534:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#12849: FILE: kernel/trace/trace_selftest.c:534:
+		printk(KERN_CONT ".. no entries found ..");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12885: FILE: kernel/trace/trace_selftest_dynamic.c:1:
+#include "trace.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12898: FILE: kernel/trace/trace_sysprof.c:1:
+/*

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#12919: FILE: kernel/trace/trace_sysprof.c:22:
+static int __read_mostly	tracer_enabled;

WARNING:STATIC_CONST: Move const after static - use 'static const struct stacktrace_ops '
#12988: FILE: kernel/trace/trace_sysprof.c:91:
+const static struct stacktrace_ops backtrace_ops = {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#13075: FILE: kernel/trace/trace_sysprof.c:178:
+
+	}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#13185: FILE: kernel/trace/trace_sysprof.c:288:
+static struct tracer stack_trace __read_mostly =
+{

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#13204: FILE: kernel/trace/trace_sysprof.c:307:
+sysprof_sample_read(struct file *filp, char __user *ubuf,
                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#13216: FILE: kernel/trace/trace_sysprof.c:319:
+sysprof_sample_write(struct file *filp, const char __user *ubuf,
                                   ^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#13222: FILE: kernel/trace/trace_sysprof.c:325:
+	if (cnt > MAX_LONG_DIGITS-1)
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#13223: FILE: kernel/trace/trace_sysprof.c:326:
+		cnt = MAX_LONG_DIGITS-1;
 		                     ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#13230: FILE: kernel/trace/trace_sysprof.c:333:
+	val = simple_strtoul(buf, NULL, 10);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#13246: FILE: kernel/trace/trace_sysprof.c:349:
+static struct file_operations sysprof_sample_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#13256: FILE: kernel/trace/trace_sysprof.c:359:
+	entry = debugfs_create_file("sysprof_sample_period", 0644,
+			d_tracer, NULL, &sysprof_sample_fops);

WARNING:TYPO_SPELLING: 'numebr' may be misspelled - perhaps 'number'?
#13346: FILE: mm/page-writeback.c:351:
+ * Returns the numebr of pages that can currently be freed and used
                ^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268236.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 32 errors, 336 warnings, 219 checks, 12374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268236.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
