CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#79: FILE: arch/x86/kernel/apic_32.c:1387:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+0, call_function_interrupt0);
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#80: FILE: arch/x86/kernel/apic_32.c:1388:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+1, call_function_interrupt1);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#81: FILE: arch/x86/kernel/apic_32.c:1389:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+2, call_function_interrupt2);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#82: FILE: arch/x86/kernel/apic_32.c:1390:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+3, call_function_interrupt3);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#83: FILE: arch/x86/kernel/apic_32.c:1391:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+4, call_function_interrupt4);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#84: FILE: arch/x86/kernel/apic_32.c:1392:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+5, call_function_interrupt5);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#85: FILE: arch/x86/kernel/apic_32.c:1393:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+6, call_function_interrupt6);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#86: FILE: arch/x86/kernel/apic_32.c:1394:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+7, call_function_interrupt7);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: arch/x86/kernel/irqinit_64.c:193:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+0, call_function_interrupt0);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#167: FILE: arch/x86/kernel/irqinit_64.c:194:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+1, call_function_interrupt1);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#168: FILE: arch/x86/kernel/irqinit_64.c:195:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+2, call_function_interrupt2);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#169: FILE: arch/x86/kernel/irqinit_64.c:196:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+3, call_function_interrupt3);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#170: FILE: arch/x86/kernel/irqinit_64.c:197:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+4, call_function_interrupt4);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#171: FILE: arch/x86/kernel/irqinit_64.c:198:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+5, call_function_interrupt5);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#172: FILE: arch/x86/kernel/irqinit_64.c:199:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+6, call_function_interrupt6);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#173: FILE: arch/x86/kernel/irqinit_64.c:200:
+	alloc_intr_gate(CALL_FUNCTION_VECTOR_START+7, call_function_interrupt7);
 	                                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: arch/x86/kernel/smp.c:132:
+	unsigned queue = smp_processor_id() % CONFIG_GENERIC_SMP_QUEUES;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#203: FILE: arch/x86/kernel/smp.c:191:
+	unsigned queue;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: arch/x86/xen/smp.c:45:
+static DEFINE_PER_CPU(unsigned, callfunc_queue);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#229: FILE: arch/x86/xen/smp.c:386:
+	unsigned queue = smp_processor_id() % CONFIG_GENERIC_SMP_QUEUES;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#251: FILE: arch/x86/xen/smp.c:420:
+	unsigned start_queue = __get_cpu_var(callfunc_queue);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#252: FILE: arch/x86/xen/smp.c:421:
+	unsigned queue;

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: arch/x86/xen/smp.c:428:
+	} while(queue != start_queue);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/asm-x86/hw_irq.h:40:
+extern void call_function_interrupt0(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/asm-x86/hw_irq.h:41:
+extern void call_function_interrupt1(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: include/asm-x86/hw_irq.h:42:
+extern void call_function_interrupt2(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/asm-x86/hw_irq.h:43:
+extern void call_function_interrupt3(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/asm-x86/hw_irq.h:44:
+extern void call_function_interrupt4(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: include/asm-x86/hw_irq.h:45:
+extern void call_function_interrupt5(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/asm-x86/hw_irq.h:46:
+extern void call_function_interrupt6(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/asm-x86/hw_irq.h:47:
+extern void call_function_interrupt7(void);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#335: FILE: include/asm-x86/mach-default/entry_arch.h:16:
+#define BUILD_CALLFUNCTION(n)					\
+	__BUILD_INTERRUPT(call_function_interrupt##n,		\
+			  smp_call_function_interrupt,		\
+			  CALL_FUNCTION_VECTOR_START + n)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247819.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 25 checks, 253 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247819.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
