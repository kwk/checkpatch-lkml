WARNING:TYPO_SPELLING: 'noticable' may be misspelled - perhaps 'noticeable'?
#43: 
linked list. This may not add any noticable performance speedup
                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#44: 
in normal case as the number of entires in PAT memtype list tend
                                ^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#114: FILE: arch/x86/mm/pat.c:178:
+		if (data->start < start) {
[...]
+		} else if (data->start > start) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#119: FILE: arch/x86/mm/pat.c:183:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#129: FILE: arch/x86/mm/pat.c:193:
+	struct rb_node **new = &(root->rb_node);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#167: FILE: arch/x86/mm/pat.c:425:
+	if (likely(entry != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: arch/x86/mm/pat.c:427:
+		entry = list_entry(entry->nd.prev, struct memtype, nd);
 		                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: arch/x86/mm/pat.c:427:
+		entry = list_entry(entry->nd.prev, struct memtype, nd);
 		                                                   ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#232: FILE: arch/x86/mm/pat.c:516:
+	if (unlikely(entry == NULL))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#247: FILE: arch/x86/mm/pat.c:529:
+			list_del(&entry->nd);
 			                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#260: FILE: arch/x86/mm/pat.c:542:
+	list_for_each_entry_reverse(entry, &memtype_list, nd) {
 	                                                  ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000097764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 5 checks, 193 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000097764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
