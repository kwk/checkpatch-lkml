WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#148: FILE: fs/fs-writeback.c:73:
+	printk(KERN_DEBUG

WARNING:SPLIT_STRING: quoted string split across lines
#150: FILE: fs/fs-writeback.c:75:
+			"global dirty=%lu writeback=%lu nfs=%lu "
+			"flags=%c%c towrite=%ld skipped=%ld "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#151: FILE: fs/fs-writeback.c:76:
+			"flags=%c%c towrite=%ld skipped=%ld "
+			"file=%lu written=%lu\n",

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#155: FILE: fs/fs-writeback.c:80:
+			wbc->encountered_congestion ? 'C':'_',
 			                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#156: FILE: fs/fs-writeback.c:81:
+			wbc->more_io ? 'M':'_',
 			                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: fs/fs-writeback.c:89:
+void __writeback_debug_report(long n, struct writeback_control *wbc,
+		const char *file, int line, const char *func)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#166: FILE: fs/fs-writeback.c:91:
+	printk(KERN_DEBUG "%s +%d %s(): comm=%s pid=%d n=%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: fs/fs-writeback.c:92:
+	printk(KERN_DEBUG "%s +%d %s(): comm=%s pid=%d n=%ld\n",
+			file, line, func,

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#215: FILE: fs/fs-writeback.c:293:
+#define redirty_tail(inode)						\
+	do {								\
+		__redirty_tail(inode, __LINE__);			\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#220: FILE: fs/fs-writeback.c:298:
+#define requeue_io(inode)						\
+	do {								\
+		__requeue_io(inode, __LINE__);				\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#225: FILE: fs/fs-writeback.c:303:
+#define requeue_partial_io(wbc, inode)					\
+	do {								\
+		__requeue_partial_io(wbc, inode, __LINE__);		\
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#248: FILE: fs/fs-writeback.c:331:
+		printk(KERN_DEBUG "redirty_tail() +%d: inode=%lu\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'redirty_tail', this function's name, in a string
#248: FILE: fs/fs-writeback.c:331:
+		printk(KERN_DEBUG "redirty_tail() +%d: inode=%lu\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: fs/fs-writeback.c:332:
+		printk(KERN_DEBUG "redirty_tail() +%d: inode=%lu\n",
+				line, inode->i_ino);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#264: FILE: fs/fs-writeback.c:346:
+		printk(KERN_DEBUG "requeue_io() +%d: inode=%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: fs/fs-writeback.c:347:
+		printk(KERN_DEBUG "requeue_io() +%d: inode=%lu\n",
+				line, inode->i_ino);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#284: FILE: fs/fs-writeback.c:367:
+		printk(KERN_DEBUG "requeue_partial_io() +%d: inode=%lu\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'requeue_partial_io', this function's name, in a string
#284: FILE: fs/fs-writeback.c:367:
+		printk(KERN_DEBUG "requeue_partial_io() +%d: inode=%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: fs/fs-writeback.c:368:
+		printk(KERN_DEBUG "requeue_partial_io() +%d: inode=%lu\n",
+				line, inode->i_ino);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070237.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 7 checks, 130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070237.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
