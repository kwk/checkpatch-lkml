WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#28: 
Signed-Off-By: Daniel Walker <dwalker@mvista.com> 

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/timekeeping.h:1:
+#ifndef _LINUX_TIMEKEEPING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/timekeeping.h:6:
+extern void update_wall_time(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: kernel/time/timekeeping.c:1:
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: kernel/time/timekeeping.c:2:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#136: FILE: kernel/time/timekeeping.c:31:
+struct timespec xtime __attribute__ ((aligned (16)));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#136: FILE: kernel/time/timekeeping.c:31:
+struct timespec xtime __attribute__ ((aligned (16)));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#137: FILE: kernel/time/timekeeping.c:32:
+struct timespec wall_to_monotonic __attribute__ ((aligned (16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#137: FILE: kernel/time/timekeeping.c:32:
+struct timespec wall_to_monotonic __attribute__ ((aligned (16)));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#139: FILE: kernel/time/timekeeping.c:34:
+EXPORT_SYMBOL(xtime);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#200: FILE: kernel/time/timekeeping.c:95:
+EXPORT_SYMBOL(getnstimeofday);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#214: FILE: kernel/time/timekeeping.c:109:
+	tv->tv_usec = now.tv_nsec/1000;
 	                         ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#217: FILE: kernel/time/timekeeping.c:112:
+EXPORT_SYMBOL(do_gettimeofday);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#254: FILE: kernel/time/timekeeping.c:149:
+EXPORT_SYMBOL(do_settimeofday);

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: kernel/time/timekeeping.c:161:
+	u64 nsec;
+	new = clocksource_get_next();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#274: FILE: kernel/time/timekeeping.c:169:
+		printk(KERN_INFO "Time: %s clocksource has been installed.\n",

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#311: FILE: kernel/time/timekeeping.c:206:
+unsigned long __attribute__((weak)) read_persistent_clock(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: kernel/time/timekeeping.c:230:
+	set_normalized_timespec(&wall_to_monotonic,
+		-xtime.tv_sec, -xtime.tv_nsec);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#340: FILE: kernel/time/timekeeping.c:235:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'now > timekeeping_suspend_time'
#361: FILE: kernel/time/timekeeping.c:256:
+	if (now && (now > timekeeping_suspend_time)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#363: FILE: kernel/time/timekeeping.c:258:
+		unsigned long sleep_length = now - timekeeping_suspend_time;
+		xtime.tv_sec += sleep_length;

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: kernel/time/timekeeping.c:298:
+	int error = sysdev_class_register(&timekeeping_sysclass);
+	if (!error)

WARNING:TYPO_SPELLING: 'adusted' may be misspelled - perhaps 'adjusted'?
#427: FILE: kernel/time/timekeeping.c:322:
+	 * here.  This is tuned so that an error of about 1 msec is adusted
 	                                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#472: FILE: kernel/time/timekeeping.c:367:
+	if (error > interval) {
[...]
+	} else if (error < -interval) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#480: FILE: kernel/time/timekeeping.c:375:
+		if (likely(error >= -interval)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#484: FILE: kernel/time/timekeeping.c:379:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#486: FILE: kernel/time/timekeeping.c:381:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#567: FILE: kernel/time/timekeeping.c:462:
+	switch (src)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#573: FILE: kernel/time/timekeeping.c:468:
+		case TIME_SOURCE_MMIO64	:
 		                       	^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#576: FILE: kernel/time/timekeeping.c:471:
+		case TIME_SOURCE_MMIO32	:
 		                       	^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#587: FILE: kernel/time/timekeeping.c:482:
+	if (time_interpolator->jitter)
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#612: FILE: kernel/time/timekeeping.c:507:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#622: FILE: kernel/time/timekeeping.c:517:
+#define GET_TI_NSECS(count,i) (((((count) - i->last_counter) & (i)->mask) * (i)->nsec_per_cyc) >> (i)->shift)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#622: FILE: kernel/time/timekeeping.c:517:
+#define GET_TI_NSECS(count,i) (((((count) - i->last_counter) & (i)->mask) * (i)->nsec_per_cyc) >> (i)->shift)
                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#622: FILE: kernel/time/timekeeping.c:517:
+#define GET_TI_NSECS(count,i) (((((count) - i->last_counter) & (i)->mask) * (i)->nsec_per_cyc) >> (i)->shift)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#622: FILE: kernel/time/timekeeping.c:517:
+#define GET_TI_NSECS(count,i) (((((count) - i->last_counter) & (i)->mask) * (i)->nsec_per_cyc) >> (i)->shift)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#635: FILE: kernel/time/timekeeping.c:530:
+#define INTERPOLATOR_MAX_SKIP 10*INTERPOLATOR_ADJUST
                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#635: FILE: kernel/time/timekeeping.c:530:
+#define INTERPOLATOR_MAX_SKIP 10*INTERPOLATOR_ADJUST

CHECK:SPACING: No space is necessary after a cast
#659: FILE: kernel/time/timekeeping.c:554:
+	if (delta_nsec < 0 || (unsigned long) delta_nsec < offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#659: FILE: kernel/time/timekeeping.c:554:
+	if (delta_nsec < 0 || (unsigned long) delta_nsec < offset)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#661: FILE: kernel/time/timekeeping.c:556:
+	else {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#672: FILE: kernel/time/timekeeping.c:567:
+	if (jiffies % INTERPOLATOR_ADJUST == 0)
+	{

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#676: FILE: kernel/time/timekeeping.c:571:
+		if (time_interpolator->ns_skipped > INTERPOLATOR_MAX_SKIP && time_interpolator->offset == 0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#688: FILE: kernel/time/timekeeping.c:583:
+	return new->frequency > 2*time_interpolator->frequency ||
 	                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#698: FILE: kernel/time/timekeeping.c:593:
+	BUG_ON(ti->frequency == 0 || ti->mask == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475478.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 20 warnings, 17 checks, 1329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475478.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
