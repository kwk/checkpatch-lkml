WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: security/apparmor/match.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#68: FILE: security/apparmor/match.c:27:
+	th.td_id = be16_to_cpu(*(u16 *) (blob));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#69: FILE: security/apparmor/match.c:28:
+	th.td_flags = be16_to_cpu(*(u16 *) (blob + 2));

CHECK:SPACING: No space is necessary after a cast
#70: FILE: security/apparmor/match.c:29:
+	th.td_lolen = be32_to_cpu(*(u32 *) (blob + 8));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: security/apparmor/match.c:33:
+	if (!(th.td_flags == YYTD_DATA16 || th.td_flags == YYTD_DATA32 ||
+		th.td_flags == YYTD_DATA8))

WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: security/apparmor/match.c:80:
+		struct table_header *table;
+		table = unpack_table(blob, size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#125: FILE: security/apparmor/match.c:84:
+		switch(table->td_id) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#158: FILE: security/apparmor/match.c:117:
+		if (dfa->tables[i]) {
+			kfree(dfa->tables[i]);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#178: FILE: security/apparmor/match.c:137:
+	if (!(dfa->tables[YYTD_ID_ACCEPT -1 ] &&
 	                                 ^

ERROR:SPACING: space prohibited before that close square bracket ']'
#178: FILE: security/apparmor/match.c:137:
+	if (!(dfa->tables[YYTD_ID_ACCEPT -1 ] &&

WARNING:BRACES: braces {} are not necessary for single statement blocks
#219: FILE: security/apparmor/match.c:178:
+		if (mode & ~AA_VALID_PERM_MASK) {
+			goto out;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: security/apparmor/match.c:229:
+		u8 *equiv = EQUIV_TABLE(dfa);
+		while (*str) {

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#296: FILE: security/apparmor/match.c:255:
+ * used to seperate pairs.
            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#324: FILE: security/apparmor/match.c:283:
+ * state, the match occured in.
                     ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#330: FILE: security/apparmor/match.c:289:
+	unsigned int state;
+	if (dfa) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#344: FILE: security/apparmor/match.h:1:
+/*

WARNING:TYPO_SPELLING: 'insted' may be misspelled - perhaps 'instead'?
#364: FILE: security/apparmor/match.h:21:
+ * used in the header is 0x1B5E783D insted of 0xF13C57B1 though, because
                                     ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#387: FILE: security/apparmor/match.h:44:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'LEN' may be better as '(LEN)' to avoid precedence issues
#413: FILE: security/apparmor/match.h:70:
+#define UNPACK_ARRAY(TABLE, BLOB, LEN, TYPE, NTOHX) \
+	do { \
+		typeof(LEN) __i; \
+		TYPE *__t = (TYPE *) TABLE; \
+		TYPE *__b = (TYPE *) BLOB; \
+		for (__i = 0; __i < LEN; __i++) { \
+			__t[__i] = NTOHX(__b[__i]); \
+		} \
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#417: FILE: security/apparmor/match.h:74:
+		TYPE *__b = (TYPE *) BLOB; \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#432: FILE: security/apparmor/module_interface.c:1:
+/*

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#463: FILE: security/apparmor/module_interface.c:32:
+ * backwards compatability.
              ^^^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#532: FILE: security/apparmor/module_interface.c:101:
+	if (*(u8 *) e->pos != code)

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#550: FILE: security/apparmor/module_interface.c:119:
+ * returns %0 if either match failes, the read head does not move
                               ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#582: FILE: security/apparmor/module_interface.c:151:
+	void *pos = e->pos;
+	if (aa_is_nameX(e, AA_U16, name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#598: FILE: security/apparmor/module_interface.c:167:
+	void *pos = e->pos;
+	if (aa_is_nameX(e, AA_U32, name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#614: FILE: security/apparmor/module_interface.c:183:
+	void *pos = e->pos;
+	if (aa_is_nameX(e, AA_ARRAY, name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#616: FILE: security/apparmor/module_interface.c:185:
+		int size;
+		if (!aa_inbounds(e, sizeof(u16)))

CHECK:SPACING: No space is necessary after a cast
#618: FILE: security/apparmor/module_interface.c:187:
+		size = (int) le16_to_cpu(get_unaligned((u16 *)e->pos));

WARNING:LINE_SPACING: Missing a blank line after declarations
#630: FILE: security/apparmor/module_interface.c:199:
+	void *pos = e->pos;
+	if (aa_is_nameX(e, AA_BLOB, name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#632: FILE: security/apparmor/module_interface.c:201:
+		u32 size;
+		if (!aa_inbounds(e, sizeof(u32)))

CHECK:SPACING: No space is necessary after a cast
#636: FILE: security/apparmor/module_interface.c:205:
+		if (aa_inbounds(e, (size_t) size)) {

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#637: FILE: security/apparmor/module_interface.c:206:
+			* blob = e->pos;
 			^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#653: FILE: security/apparmor/module_interface.c:222:
+	if (aa_is_nameX(e, AA_STRING, name) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: security/apparmor/module_interface.c:225:
+		char *str;
+		if (!(str = kmalloc(size, GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#656: FILE: security/apparmor/module_interface.c:225:
+		if (!(str = kmalloc(size, GFP_KERNEL)))

CHECK:SPACING: No space is necessary after a cast
#689: FILE: security/apparmor/module_interface.c:258:
+			size_t sz = blob - (char *) e->start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#691: FILE: security/apparmor/module_interface.c:260:
+			size_t pad = ALIGN(sz, 8) - sz;
+			error = unpack_dfa(dfa, blob + pad, size - pad);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->flags.complain
#735: FILE: security/apparmor/module_interface.c:304:
+	if (!aa_is_u32(e, &(profile->flags.complain), NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->flags.audit
#737: FILE: security/apparmor/module_interface.c:306:
+	if (!aa_is_u32(e, &(profile->flags.audit), NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->capabilities
#742: FILE: security/apparmor/module_interface.c:311:
+	if (!aa_is_u32(e, &(profile->capabilities), NULL))

WARNING:LINE_SPACING: Missing a blank line after declarations
#785: FILE: security/apparmor/module_interface.c:354:
+		struct aa_audit sa;
+		memset(&sa, 0, sizeof(sa));

WARNING:LINE_SPACING: Missing a blank line after declarations
#796: FILE: security/apparmor/module_interface.c:365:
+		struct aa_audit sa;
+		memset(&sa, 0, sizeof(sa));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#805: FILE: security/apparmor/module_interface.c:374:
+	if (!aa_is_dynstring(e, &e->ns_name, "namespace")) {
+		e->ns_name = NULL;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#828: FILE: security/apparmor/module_interface.c:397:
+	ssize_t error = aa_verify_header(&e, "profile_load");
+	if (error)

WARNING:LINE_SPACING: Missing a blank line after declarations
#843: FILE: security/apparmor/module_interface.c:412:
+		struct aa_namespace *new_ns;
+		write_unlock(&profile_ns_list_lock);

CHECK:BRACES: braces {} should be used on all arms of this statement
#851: FILE: security/apparmor/module_interface.c:420:
+		if (!ns) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#854: FILE: security/apparmor/module_interface.c:423:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#890: FILE: security/apparmor/module_interface.c:459:
+	AA_DEBUG("%s: replacing profile for task %d "
+		 "profile=%s (%p)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#891: FILE: security/apparmor/module_interface.c:460:
+		 __FUNCTION__,

WARNING:LINE_SPACING: Missing a blank line after declarations
#921: FILE: security/apparmor/module_interface.c:490:
+	ssize_t error = aa_verify_header(&e, "profile_replace");
+	if (error)

WARNING:LINE_SPACING: Missing a blank line after declarations
#936: FILE: security/apparmor/module_interface.c:505:
+		struct aa_namespace *new_ns;
+		write_unlock(&profile_ns_list_lock);

CHECK:BRACES: braces {} should be used on all arms of this statement
#944: FILE: security/apparmor/module_interface.c:513:
+		if (!ns) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#947: FILE: security/apparmor/module_interface.c:516:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1021: FILE: security/apparmor/module_interface.c:590:
+		char *split = strchr(name, ':');
+		if (!split)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1069: FILE: security/apparmor/module_interface.c:638:
+	struct aa_namespace *ns=container_of(kref, struct aa_namespace, count);
 	                       ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1084: FILE: security/apparmor/module_interface.c:653:
+	AA_DEBUG("%s(%p)\n", __FUNCTION__, ns);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1126: FILE: security/apparmor/module_interface.c:695:
+	AA_DEBUG("%s(%p)\n", __FUNCTION__, ns);

WARNING:SPLIT_STRING: quoted string split across lines
#1134: FILE: security/apparmor/module_interface.c:703:
+		AA_ERROR("%s: internal error, "
+			 "namespace '%s' still contains profiles\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1135: FILE: security/apparmor/module_interface.c:704:
+			 __FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1137: FILE: security/apparmor/module_interface.c:706:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPLIT_STRING: quoted string split across lines
#1141: FILE: security/apparmor/module_interface.c:710:
+		AA_ERROR("%s: internal error, "
+			 "namespace '%s' still on list\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1142: FILE: security/apparmor/module_interface.c:711:
+			 __FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1144: FILE: security/apparmor/module_interface.c:713:
+		BUG();

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1159: FILE: security/apparmor/module_interface.c:728:
+	struct aa_profile *p=container_of(kref, struct aa_profile, count);
 	                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1173: FILE: security/apparmor/module_interface.c:742:
+	AA_DEBUG("%s(%p)\n", __FUNCTION__, profile);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1195: FILE: security/apparmor/module_interface.c:764:
+	AA_DEBUG("%s(%p)\n", __FUNCTION__, profile);

WARNING:SPLIT_STRING: quoted string split across lines
#1203: FILE: security/apparmor/module_interface.c:772:
+		AA_ERROR("%s: internal error, "
+			 "profile '%s' still on global list\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1204: FILE: security/apparmor/module_interface.c:773:
+			 __FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1206: FILE: security/apparmor/module_interface.c:775:
+		BUG();

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1213: FILE: security/apparmor/module_interface.c:782:
+		AA_DEBUG("%s: %s\n", __FUNCTION__, profile->name);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 45 warnings, 19 checks, 1189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
