WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
The marker activation functions sits in kernel/marker.c. A linked list is used

ERROR:CODE_INDENT: code indent should use tabs where possible
#49: FILE: include/asm-generic/vmlinux.lds.h:133:
+        __markers_strings : AT(ADDR(__markers_strings) - LOAD_OFFSET) {^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#49: FILE: include/asm-generic/vmlinux.lds.h:133:
+        __markers_strings : AT(ADDR(__markers_strings) - LOAD_OFFSET) {^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#51: FILE: include/asm-generic/vmlinux.lds.h:135:
+ ^I}^I^I^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#51: FILE: include/asm-generic/vmlinux.lds.h:135:
+ ^I}^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: include/asm-generic/vmlinux.lds.h:135:
+ ^I}^I^I^I^I^I^I^I^I\$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: include/linux/marker.h:1:
+#ifndef _LINUX_MARKER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'connexion' may be misspelled - perhaps 'connection'?
#110: FILE: include/linux/marker.h:37:
+				 * markers restrictions at connexion time. */
 				                           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#110: FILE: include/linux/marker.h:37:
+				 * markers restrictions at connexion time. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#119: FILE: include/linux/marker.h:46:
+ * "used" attribute to fix a gcc 4.1.x bug. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#120: FILE: include/linux/marker.h:47:
+#define _trace_mark(flags, name, format, args...)			\
+	do {								\
+		static const char __mstrtab_name_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= #name;						\
+		static const char __mstrtab_format_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= format;						\
+		static const char __mstrtab_args_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= #args;						\
+		static struct __mark_marker __mark_##name		\
+		__attribute__((section("__markers"))) =			\
+		{ __mstrtab_name_##name,  __mstrtab_format_##name,	\
+		__mstrtab_args_##name, { 0 }, (flags),			\
+		__mark_empty_function, NULL };				\
+		asm volatile ( "" : : "i" (&__mark_##name));		\
+		__mark_check_format(format, ## args);			\
+		if (unlikely(_immediate((flags), __mark_##name.state))) { \
+			preempt_disable();				\
+			(*__mark_##name.call)(&__mark_##name, format, ## args);\
+			preempt_enable();				\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#120: FILE: include/linux/marker.h:47:
+#define _trace_mark(flags, name, format, args...)			\
+	do {								\
+		static const char __mstrtab_name_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= #name;						\
+		static const char __mstrtab_format_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= format;						\
+		static const char __mstrtab_args_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= #args;						\
+		static struct __mark_marker __mark_##name		\
+		__attribute__((section("__markers"))) =			\
+		{ __mstrtab_name_##name,  __mstrtab_format_##name,	\
+		__mstrtab_args_##name, { 0 }, (flags),			\
+		__mark_empty_function, NULL };				\
+		asm volatile ( "" : : "i" (&__mark_##name));		\
+		__mark_check_format(format, ## args);			\
+		if (unlikely(_immediate((flags), __mark_##name.state))) { \
+			preempt_disable();				\
+			(*__mark_##name.call)(&__mark_##name, format, ## args);\
+			preempt_enable();				\
+		}							\
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__markers_strings") over __attribute__((section("__markers_strings")))
#123: FILE: include/linux/marker.h:50:
+		__attribute__((section("__markers_strings")))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#124: FILE: include/linux/marker.h:51:
+		__attribute__((section("__markers_strings")))		\
+		= #name;						\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__markers_strings") over __attribute__((section("__markers_strings")))
#126: FILE: include/linux/marker.h:53:
+		__attribute__((section("__markers_strings")))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#127: FILE: include/linux/marker.h:54:
+		__attribute__((section("__markers_strings")))		\
+		= format;						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__markers_strings") over __attribute__((section("__markers_strings")))
#129: FILE: include/linux/marker.h:56:
+		__attribute__((section("__markers_strings")))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#130: FILE: include/linux/marker.h:57:
+		__attribute__((section("__markers_strings")))		\
+		= #args;						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__markers") over __attribute__((section("__markers")))
#132: FILE: include/linux/marker.h:59:
+		__attribute__((section("__markers"))) =			\

ERROR:SPACING: space prohibited after that open parenthesis '('
#136: FILE: include/linux/marker.h:63:
+		asm volatile ( "" : : "i" (&__mark_##name));		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/marker.h:72:
+extern int module_marker_update(struct module *mod);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/marker.h:97:
+extern int _marker_arm_probe(int flags, const char *name, const char *format,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: include/linux/marker.h:98:
+extern int _marker_arm_probe(int flags, const char *name, const char *format,
+				marker_probe_func *probe, void *pdata);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/marker.h:103:
+extern void marker_disarm_probe(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/marker.h:104:
+extern int marker_list_probe(marker_probe_func *probe);

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: kernel/module.c:1686:
+ ^Imarkersstringsindex = find_sec(hdr, sechdrs, secstrings, "__markers_strings");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: kernel/module.c:1686:
+ ^Imarkersstringsindex = find_sec(hdr, sechdrs, secstrings, "__markers_strings");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: kernel/module.c:1686:
+ ^Imarkersstringsindex = find_sec(hdr, sechdrs, secstrings, "__markers_strings");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#261: FILE: kernel/marker.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#275: FILE: kernel/marker.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#276: FILE: kernel/marker.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#286: FILE: kernel/marker.c:26:
+extern struct __mark_marker __stop___markers[];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: kernel/marker.c:52:
+void __mark_empty_function(const struct __mark_marker *mdata,
+	const char *fmt, ...)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: kernel/marker.c:77:
+static int _add_marker(int flags, const char *name,
+	const char *format, marker_probe_func *probe, void *pdata)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#346: FILE: kernel/marker.c:86:
+			printk(KERN_NOTICE

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct marker_entry)...)
#356: FILE: kernel/marker.c:96:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + 1 + format_len + 1,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: kernel/marker.c:97:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + 1 + format_len + 1,
+			GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: kernel/marker.c:134:
+static int _set_marker(int flags, const char *name, const char *format,
+			marker_probe_func *probe, void *pdata,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: kernel/marker.c:137:
+	BUG_ON(strcmp(name, elem->name) != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#401: FILE: kernel/marker.c:141:
+			printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#403: FILE: kernel/marker.c:143:
+				"Format mismatch for probe %s "
+				"(%s), marker (%s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#411: FILE: kernel/marker.c:151:
+	if (flags & IF_LOCKDEP
+		&& !(elem->flags & IF_LOCKDEP)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#412: FILE: kernel/marker.c:152:
+		printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#414: FILE: kernel/marker.c:154:
+			"Incompatible lockdep flags for "
+			"probe %s\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#438: FILE: kernel/marker.c:178:
+static int _marker_update_probe_range(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: kernel/marker.c:192:
+			ret = _set_marker(mark_entry->flags,
+				mark_entry->name, mark_entry->format,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: kernel/marker.c:214:
+static inline int __marker_update_probes_modules(struct module *probe_module,
+	int *refcount)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: kernel/marker.c:222:
+			ret = _marker_update_probe_range(mod->markers,
+				mod->markers+mod->num_markers,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#482: FILE: kernel/marker.c:222:
+				mod->markers+mod->num_markers,
 				            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: kernel/marker.c:232:
+static inline int __marker_update_probes_modules(struct module *probe_module,
+	int *refcount)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: kernel/marker.c:251:
+	ret = _marker_update_probe_range(__start___markers,
+			__stop___markers, probe_module, &refcount);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#518: FILE: kernel/marker.c:258:
+		synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#532: FILE: kernel/marker.c:272:
+			mod->markers+mod->num_markers, NULL, NULL);
 			            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#537: FILE: kernel/marker.c:277:
+ * Update the system wide probes, with modules. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: kernel/marker.c:281:
+	int ret;
+	mutex_lock(&module_mutex);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: kernel/marker.c:299:
+int _marker_arm_probe(int flags, const char *name, const char *format,
+			marker_probe_func *probe, void *pdata)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: kernel/marker.c:305:
+	ret = _add_marker(flags, name,
+			format, probe, pdata);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: kernel/marker.c:312:
+		BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#610: FILE: kernel/marker.c:350:
+	BUG_ON(ret);

WARNING:TYPO_SPELLING: 'specificed' may be misspelled - perhaps 'specified'?
#616: FILE: kernel/marker.c:356:
+ * Looks up a marker by its name and instance number within the specificed
                                                                 ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: kernel/marker.c:360:
+static const struct __mark_marker *_marker_query_range(const char *name,
+	int instance,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: kernel/marker.c:379:
+static inline const struct __mark_marker *marker_query_modules(const char *name,
+			int instance)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: kernel/marker.c:389:
+			mdata = _marker_query_range(name, instance,
+				mod->markers,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#650: FILE: kernel/marker.c:390:
+				mod->markers+mod->num_markers);
 				            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: kernel/marker.c:400:
+static inline const struct __mark_marker *marker_query_modules(const char *name,
+			int instance)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: kernel/marker.c:417:
+	mdata = _marker_query_range(name, instance,
+			__start___markers, __stop___markers);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: kernel/marker.c:430:
+static int _marker_list_probe_range(marker_probe_func *probe,
+	const struct __mark_marker *begin,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#698: FILE: kernel/marker.c:438:
+			if (probe != iter->call) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#699: FILE: kernel/marker.c:439:
+		printk("name %s func 0x%p format \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: kernel/marker.c:440:
+		printk("name %s func 0x%p format \"%s\"\n",
+			iter->name,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#713: FILE: kernel/marker.c:453:
+	printk("Listing module markers\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#717: FILE: kernel/marker.c:457:
+			printk("Listing markers for module %s\n", mod->name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#719: FILE: kernel/marker.c:459:
+				mod->markers, mod->markers+mod->num_markers);
 				                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#743: FILE: kernel/marker.c:483:
+	printk("Listing kernel markers\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000417607.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 32 warnings, 35 checks, 689 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000417607.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
