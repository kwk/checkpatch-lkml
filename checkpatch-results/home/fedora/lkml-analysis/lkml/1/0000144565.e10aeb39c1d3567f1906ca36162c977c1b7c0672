WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Add the API for a generic facility (FS-Cache) by which caches may declare them

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#736: FILE: include/linux/fscache-cache.h:1:
+/* General filesystem caching backing cache interface

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#799: FILE: include/linux/fscache-cache.h:64:
+	spinlock_t		op_gc_list_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#835: FILE: include/linux/fscache-cache.h:100:
+	unsigned		debug_id;	/* debugging ID */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#839: FILE: include/linux/fscache-cache.h:104:
+	 *   the op in a non-pool thread */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#849: FILE: include/linux/fscache-cache.h:114:
+extern void fscache_enqueue_operation(struct fscache_operation *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_operation *' should also have an identifier name
#849: FILE: include/linux/fscache-cache.h:114:
+extern void fscache_enqueue_operation(struct fscache_operation *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#850: FILE: include/linux/fscache-cache.h:115:
+extern void fscache_put_operation(struct fscache_operation *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_operation *' should also have an identifier name
#850: FILE: include/linux/fscache-cache.h:115:
+extern void fscache_put_operation(struct fscache_operation *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#902: FILE: include/linux/fscache-cache.h:167:
+					      unsigned *nr_pages,

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#978: FILE: include/linux/fscache-cache.h:243:
+	/* store the updated auxilliary data on an object */
 	                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#982: FILE: include/linux/fscache-cache.h:247:
+	 * necessary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#992: FILE: include/linux/fscache-cache.h:257:
+	 * i_size) have changed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#999: FILE: include/linux/fscache-cache.h:264:
+	 * cache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1003: FILE: include/linux/fscache-cache.h:268:
+	 * the cache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1007: FILE: include/linux/fscache-cache.h:272:
+	 * it can be written directly */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1011: FILE: include/linux/fscache-cache.h:276:
+	 * they can be written directly */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1092: FILE: include/linux/fscache-cache.h:357:
+						 * (order is important - using fls) */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'obj' - possible side-effects?
#1120: FILE: include/linux/fscache-cache.h:385:
+#define fscache_object_is_active(obj)			      \
+	(!test_bit(FSCACHE_IOERROR, &(obj)->cache->flags) &&  \
+	 (obj)->state >= FSCACHE_OBJECT_AVAILABLE &&	      \
+	 (obj)->state < FSCACHE_OBJECT_DYING)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1152: FILE: include/linux/fscache-cache.h:417:
+	object->n_ops = object->n_in_progress = object->n_exclusive = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1153: FILE: include/linux/fscache-cache.h:418:
+	object->events = object->event_mask = 0;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1161: FILE: include/linux/fscache-cache.h:426:
+extern void fscache_object_lookup_negative(struct fscache_object *object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1162: FILE: include/linux/fscache-cache.h:427:
+extern void fscache_obtained_object(struct fscache_object *object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1225: FILE: include/linux/fscache-cache.h:490:
+extern void fscache_init_cache(struct fscache_cache *cache,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#1228: FILE: include/linux/fscache-cache.h:493:
+			       ...) __attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1230: FILE: include/linux/fscache-cache.h:495:
+extern int fscache_add_cache(struct fscache_cache *cache,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1233: FILE: include/linux/fscache-cache.h:498:
+extern void fscache_withdraw_cache(struct fscache_cache *cache);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1235: FILE: include/linux/fscache-cache.h:500:
+extern void fscache_io_error(struct fscache_cache *cache);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1237: FILE: include/linux/fscache-cache.h:502:
+extern void fscache_mark_pages_cached(struct fscache_retrieval *op,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1240: FILE: include/linux/fscache-cache.h:505:
+extern enum fscache_checkaux fscache_check_aux(struct fscache_object *object,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144565.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 14 checks, 1173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144565.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
