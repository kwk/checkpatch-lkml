CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#44: 
On Fri, 14 Dec 2007, Ilpo Järvinen wrote:
                           ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> that's currently in net-2.6.25 quite useless/duplicate effort. But thanks 

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#97: 
Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@helsinki.fi>
                     ^

CHECK:SPACING: No space is necessary after a cast
#260: FILE: include/net/tcp.h:1205:
+	if (skb == (struct sk_buff *) &sk->sk_write_queue)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: include/net/tcp.h:1205:
+	struct sk_buff *skb = sk->sk_write_queue.next;
+	if (skb == (struct sk_buff *) &sk->sk_write_queue)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#279: FILE: include/net/tcp.h:1213:
+	if (skb == (struct sk_buff *) &sk->sk_write_queue)

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: include/net/tcp.h:1213:
+	struct sk_buff *skb = sk->sk_write_queue.prev;
+	if (skb == (struct sk_buff *) &sk->sk_write_queue)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#303: FILE: include/net/tcp.h:1223:
+#define tcp_for_write_queue(skb, sk)					\
+		for (skb = (sk)->sk_write_queue.next;			\
+		     (skb != (struct sk_buff *)&(sk)->sk_write_queue);	\
 		     skb = skb->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sk' - possible side-effects?
#303: FILE: include/net/tcp.h:1223:
+#define tcp_for_write_queue(skb, sk)					\
+		for (skb = (sk)->sk_write_queue.next;			\
+		     (skb != (struct sk_buff *)&(sk)->sk_write_queue);	\
 		     skb = skb->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#310: FILE: include/net/tcp.h:1228:
+#define tcp_for_write_queue_from(skb, sk)				\
+		for (; (skb != (struct sk_buff *)&(sk)->sk_write_queue);\
 		     skb = skb->next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'skb' may be better as '(skb)' to avoid precedence issues
#310: FILE: include/net/tcp.h:1228:
+#define tcp_for_write_queue_from(skb, sk)				\
+		for (; (skb != (struct sk_buff *)&(sk)->sk_write_queue);\
 		     skb = skb->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#315: FILE: include/net/tcp.h:1232:
+#define tcp_for_write_queue_from_safe(skb, tmp, sk)			\
 		for (tmp = skb->next;					\
+		     (skb != (struct sk_buff *)&(sk)->sk_write_queue);	\
 		     skb = tmp, tmp = skb->next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'skb' may be better as '(skb)' to avoid precedence issues
#315: FILE: include/net/tcp.h:1232:
+#define tcp_for_write_queue_from_safe(skb, tmp, sk)			\
 		for (tmp = skb->next;					\
+		     (skb != (struct sk_buff *)&(sk)->sk_write_queue);	\
 		     skb = tmp, tmp = skb->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tmp' - possible side-effects?
#315: FILE: include/net/tcp.h:1232:
+#define tcp_for_write_queue_from_safe(skb, tmp, sk)			\
 		for (tmp = skb->next;					\
+		     (skb != (struct sk_buff *)&(sk)->sk_write_queue);	\
 		     skb = tmp, tmp = skb->next)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: include/net/tcp.h:1293:
+static inline void tcp_insert_write_queue_before(struct sk_buff *new,
+						  struct sk_buff *skb,

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#713: FILE: net/ipv4/tcp_input.c:1240:
+			   int *reord, int dup_sack, int fack_count)
 			        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#779: FILE: net/ipv4/tcp_input.c:1332:
+					int *reord, int *flag)
 					     ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next_dup != NULL'
#795: FILE: net/ipv4/tcp_input.c:1345:
+		if ((next_dup != NULL) &&
+		    before(TCP_SKB_CB(skb)->seq, next_dup->end_seq)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_dup"
#795: FILE: net/ipv4/tcp_input.c:1345:
+		if ((next_dup != NULL) &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#811: FILE: net/ipv4/tcp_input.c:1360:
+			*flag |= tcp_sacktag_one(skb, sk, reord, dup_sack, *fack_count);
 			                                  ^^^^^

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#846: FILE: net/ipv4/tcp_input.c:1387:
+						int *fack_count, int *reord,
 						                      ^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!next_dup"
#854: FILE: net/ipv4/tcp_input.c:1390:
+	if (next_dup == NULL)

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#894: FILE: net/ipv4/tcp_input.c:1397:
+				 1, fack_count, reord, flag);
 				                ^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#980: FILE: net/ipv4/tcp_input.c:1496:
+					first_sack_index = j+1;
 					                    ^

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#1021: FILE: net/ipv4/tcp_input.c:1543:
+						       &fack_count, &reord, &flag);
 						                     ^^^^^

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#1029: FILE: net/ipv4/tcp_input.c:1551:
+						       &fack_count, &reord, &flag);
 						                     ^^^^^

WARNING:TYPO_SPELLING: 'reord' may be misspelled - perhaps 'record'?
#1064: FILE: net/ipv4/tcp_input.c:1580:
+				       dup_sack, &fack_count, &reord, &flag);
 				                               ^^^^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1099: FILE: net/ipv4/tcp_input.c:1696:
+		if (!(TCP_SKB_CB(skb)->sacked&TCPCB_SACKED_ACKED))
 		                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1135: FILE: net/ipv4/tcp_input.c:1931:
+	if ((skb = tcp_write_queue_head(sk)) != NULL &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1253: FILE: net/ipv4/tcp_input.c:2508:
+	 * 1. Reno does not count dupacks (sacked_out) automatically. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 17 checks, 1170 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
