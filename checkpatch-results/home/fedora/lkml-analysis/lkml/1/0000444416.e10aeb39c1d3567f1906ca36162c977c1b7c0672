WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
parts of union stack don't go away from under us. Since dget() takes a mutex

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#98: FILE: fs/dcache.c:301:
+	BUG_ON(IS_UNION(dentry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#237: FILE: fs/namei.c:672:
+	mountpoint=__dget((*mnt)->mnt_mountpoint);
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#429: FILE: fs/union.c:23:
+			printk(KERN_ERR "%s: \"%s\" stale union reference\n" \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#429: FILE: fs/union.c:23:
+			printk(KERN_ERR "%s: \"%s\" stale union reference\n" \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#431: FILE: fs/union.c:25:
+			       __FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#442: FILE: fs/union.c:36:
+	BUG_ON(!dentry->d_union);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry == dentry->d_topmost'
#444: FILE: fs/union.c:38:
+	if ((dentry == dentry->d_topmost) || (dentry == dentry->d_overlaid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry == dentry->d_overlaid'
#444: FILE: fs/union.c:38:
+	if ((dentry == dentry->d_topmost) || (dentry == dentry->d_overlaid)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#445: FILE: fs/union.c:39:
+		printk(KERN_ERR "%s: \"%s\" loop in union stack\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#446: FILE: fs/union.c:40:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: fs/union.c:41:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#451: FILE: fs/union.c:45:
+		printk(KERN_ERR "%s: \"%s\" isn't a directory!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#452: FILE: fs/union.c:46:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#453: FILE: fs/union.c:47:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#457: FILE: fs/union.c:51:
+		printk(KERN_ERR "%s: \"%s\" has a negative topmost dentry!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#458: FILE: fs/union.c:52:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: fs/union.c:53:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#463: FILE: fs/union.c:57:
+		printk(KERN_ERR "%s: \"%s\" is a negative topmost dentry!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#464: FILE: fs/union.c:58:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: fs/union.c:59:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#536: FILE: fs/union.c:163:
+int __destroy_union(struct dentry * dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#553: FILE: fs/union.c:180:
+		struct dentry *tmp = next;
+		next = next->d_overlaid;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: fs/union.c:219:
+		struct dentry *tmp = next;
+		next = next->d_overlaid;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#604: FILE: fs/union.c:231:
+static void __destroy_stack_part(struct dentry * first, struct dentry * last)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#604: FILE: fs/union.c:231:
+static void __destroy_stack_part(struct dentry * first, struct dentry * last)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#606: FILE: fs/union.c:233:
+	struct dentry * next = first;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#609: FILE: fs/union.c:236:
+		struct dentry * tmp = next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#610: FILE: fs/union.c:237:
+		struct dentry * tmp = next;
+		next = next->d_overlaid;

CHECK:BRACES: braces {} should be used on all arms of this statement
#635: FILE: fs/union.c:262:
+	if (dentry->d_topmost) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#638: FILE: fs/union.c:265:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: fs/union.c:271:
+		struct dentry *tmp = next;	// the dentry we dput now
+		next = next->d_overlaid;	// the dentry we dput next

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#662: FILE: fs/union.c:289:
+		if (tmp->d_union
+		    && (atomic_read(&tmp->d_union->u_count) == 1)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#663: FILE: fs/union.c:290:
+			BUG_ON(next);

WARNING:RETURN_VOID: void function return statements are not generally useful
#675: FILE: fs/union.c:302:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: include/linux/dcache.h:334:
+extern void __dput_single(struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#701: FILE: include/linux/dcache.h:344:
+static inline struct dentry * __dget(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#709: FILE: include/linux/dcache.h:352:
+static inline struct dentry * dget(struct dentry *dentry)

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#716: FILE: include/linux/dcache.h:359:
+	 * in completly. This is symmetric to dput() which can sleep too.
 	      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#744: FILE: include/linux/dcache.h:387:
+	if (unlikely(IS_UNION(dentry))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#750: FILE: include/linux/dcache.h:393:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#780: FILE: include/linux/dcache_union.h:44:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#781: FILE: include/linux/dcache_union.h:45:
+extern void __union_check(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#781: FILE: include/linux/dcache_union.h:45:
+extern void __union_check(struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#826: FILE: include/linux/dcache_union.h:243:
+static inline struct dentry * __dget_union(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: include/linux/dcache_union.h:262:
+		struct dentry * tmp = dentry->d_overlaid;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#859: FILE: include/linux/dcache_union.h:276:
+extern void __dput_union(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#860: FILE: include/linux/dcache_union.h:277:
+extern int __destroy_union(struct dentry *dentry);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444416.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 26 warnings, 12 checks, 835 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444416.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
