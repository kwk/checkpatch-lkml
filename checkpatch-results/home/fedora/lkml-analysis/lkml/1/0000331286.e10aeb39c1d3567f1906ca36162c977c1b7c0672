WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#86: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: arch/microblaze/kernel/semaphore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#92: FILE: arch/microblaze/kernel/semaphore.c:2:
+ * arch/microblaze/kernel/semaphore.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BRACES: braces {} should be used on all arms of this statement
#182: FILE: arch/microblaze/kernel/semaphore.c:92:
+	if (sem->sleepers <= 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: arch/microblaze/kernel/semaphore.c:94:
+	else {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#192: FILE: arch/microblaze/kernel/semaphore.c:102:
+spinlock_t semaphore_wake_lock;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#249: FILE: arch/microblaze/kernel/semaphore.c:159:
+#define DOWN_VAR				\
+	struct task_struct *tsk = current;	\
+	wait_queue_t wait;			\
+	init_waitqueue_entry(&wait, tsk);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#254: FILE: arch/microblaze/kernel/semaphore.c:164:
+#define DOWN_HEAD(task_state)						\
+									\
+									\
+	tsk->state = (task_state);					\
+	add_wait_queue(&sem->wait, &wait);				\
+									\
+	/*								\

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#254: FILE: arch/microblaze/kernel/semaphore.c:164:
+#define DOWN_HEAD(task_state)						\
+									\
+									\
+	tsk->state = (task_state);					\
+	add_wait_queue(&sem->wait, &wait);				\
+									\
+	/*								\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#274: FILE: arch/microblaze/kernel/semaphore.c:184:
+	 */								\

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#276: FILE: arch/microblaze/kernel/semaphore.c:186:
+	for (;;) {
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#277: FILE: arch/microblaze/kernel/semaphore.c:187:
+#define DOWN_TAIL(task_state)			\
+		tsk->state = (task_state);	\
+	}					\
+	tsk->state = TASK_RUNNING;		\
+	remove_wait_queue(&sem->wait, &wait);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#277: FILE: arch/microblaze/kernel/semaphore.c:187:
+#define DOWN_TAIL(task_state)			\
+		tsk->state = (task_state);	\
+	}					\
+	tsk->state = TASK_RUNNING;		\
+	remove_wait_queue(&sem->wait, &wait);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#283: FILE: arch/microblaze/kernel/semaphore.c:193:
+void __sched __down(struct semaphore *sem) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#292: FILE: arch/microblaze/kernel/semaphore.c:202:
+int __sched __down_interruptible(struct semaphore *sem) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: arch/microblaze/kernel/semaphore.c:204:
+	int ret = 0;
+	DOWN_VAR

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'tsk' should also have an identifier name
#294: FILE: arch/microblaze/kernel/semaphore.c:204:
+	DOWN_VAR

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#319: FILE: include/asm-microblaze/semaphore.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#320: FILE: include/asm-microblaze/semaphore.h:2:
+ * include/asm-microblaze/semaphore.h

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#332: FILE: include/asm-microblaze/semaphore.h:14:
+#include <asm/atomic.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: include/asm-microblaze/semaphore.h:25:
+#define __SEMAPHORE_INITIALIZER(name,n)					\
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: include/asm-microblaze/semaphore.h:32:
+#define __DECLARE_SEMAPHORE_GENERIC(name,count)				\
                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#350: FILE: include/asm-microblaze/semaphore.h:32:
+#define __DECLARE_SEMAPHORE_GENERIC(name,count)				\
+	struct semaphore name = __SEMAPHORE_INITIALIZER(name, count)

WARNING:CONSIDER_COMPLETION: consider using a completion
#370: FILE: include/asm-microblaze/semaphore.h:52:
+	sema_init(sem, 0);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331286.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 13 warnings, 5 checks, 322 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331286.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
