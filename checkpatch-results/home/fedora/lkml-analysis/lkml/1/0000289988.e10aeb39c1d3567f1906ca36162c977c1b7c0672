WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
   git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-bigbox-gart.git for-linus

WARNING:TYPO_SPELLING: 'positon' may be misspelled - perhaps 'position'?
#111: FILE: arch/x86/kernel/aperture_64.c:84:
+	 * that positon with gart that is used.
 	        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#121: FILE: arch/x86/kernel/aperture_64.c:94:
+	p = __alloc_bootmem_nopanic(aper_size, aper_size, 512ULL<<20);
 	                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#141: FILE: arch/x86/kernel/aperture_64.c:126:
+		printk(KERN_ERR "Aperture too small (%d MB) than (%d MB)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: arch/x86/kernel/aperture_64.c:127:
+		printk(KERN_ERR "Aperture too small (%d MB) than (%d MB)\n",
+				 aper_size>>20, min_size>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#142: FILE: arch/x86/kernel/aperture_64.c:127:
+				 aper_size>>20, min_size>>20);
 				          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#142: FILE: arch/x86/kernel/aperture_64.c:127:
+				 aper_size>>20, min_size>>20);
 				                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#168: FILE: arch/x86/kernel/aperture_64.c:149:
+		id = read_pci_config_byte(bus, slot, func, pos+PCI_CAP_LIST_ID);
 		                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: arch/x86/kernel/aperture_64.c:155:
+		pos = read_pci_config_byte(bus, slot, func,
 						pos+PCI_CAP_LIST_NEXT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#193: FILE: arch/x86/kernel/aperture_64.c:170:
+	printk(KERN_INFO "AGP bridge at %02x:%02x:%02x\n", bus, slot, func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#220: FILE: arch/x86/kernel/aperture_64.c:197:
+	printk(KERN_INFO "Aperture from AGP @ %Lx old size %u MB\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#220: FILE: arch/x86/kernel/aperture_64.c:197:
+	printk(KERN_INFO "Aperture from AGP @ %Lx old size %u MB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: arch/x86/kernel/aperture_64.c:198:
+	printk(KERN_INFO "Aperture from AGP @ %Lx old size %u MB\n",
+			aper, 32 << old_order);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#222: FILE: arch/x86/kernel/aperture_64.c:199:
+	if (aper + (32ULL<<(20 + *order)) > 0x100000000ULL) {
 	                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#223: FILE: arch/x86/kernel/aperture_64.c:200:
+		printk(KERN_INFO "Aperture size %u MB (APSIZE %x) is not right, using settings from NB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: arch/x86/kernel/aperture_64.c:201:
+		printk(KERN_INFO "Aperture size %u MB (APSIZE %x) is not right, using settings from NB\n",
+				32 << *order, apsizereg);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: arch/x86/kernel/aperture_64.c:208:
+	if (!aperture_valid(aper, (32*1024*1024) << *order, 32<<20))
 	                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: arch/x86/kernel/aperture_64.c:208:
+	if (!aperture_valid(aper, (32*1024*1024) << *order, 32<<20))
 	                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#232: FILE: arch/x86/kernel/aperture_64.c:208:
+	if (!aperture_valid(aper, (32*1024*1024) << *order, 32<<20))
 	                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: arch/x86/kernel/aperture_64.c:246:
+					cap = find_cap(bus, slot, func,
 							PCI_CAP_ID_AGP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: arch/x86/kernel/aperture_64.c:256:
+				type = read_pci_config_byte(bus, slot, func,
 							       PCI_HEADER_TYPE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: arch/x86/kernel/aperture_64.c:346:
+		if (!e820_all_mapped(aper_base, aper_base + aper_size,
+				    E820_RESERVED)) {

WARNING:MISPLACED_INIT: __initdata should be placed after printed_gart_size_msg
#387: FILE: arch/x86/kernel/aperture_64.c:376:
+static int __initdata printed_gart_size_msg;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#445: FILE: arch/x86/kernel/aperture_64.c:412:
+			aper_order = (read_pci_config(bus, slot, 3, AMD64_GARTAPERTURECTL) >> 1) & 7;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#450: FILE: arch/x86/kernel/aperture_64.c:417:
+			printk(KERN_INFO "Node %d: aperture @ %Lx size %u MB\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#450: FILE: arch/x86/kernel/aperture_64.c:417:
+			printk(KERN_INFO "Node %d: aperture @ %Lx size %u MB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: arch/x86/kernel/aperture_64.c:418:
+			printk(KERN_INFO "Node %d: aperture @ %Lx size %u MB\n",
+					node, aper_base, aper_size >> 20);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#454: FILE: arch/x86/kernel/aperture_64.c:421:
+			if (!aperture_valid(aper_base, aper_size, 64<<20)) {
 			                                            ^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#459: FILE: arch/x86/kernel/aperture_64.c:426:
+					if (!no_iommu && end_pfn > MAX_DMA32_PFN && !printed_gart_size_msg) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#460: FILE: arch/x86/kernel/aperture_64.c:427:
+						printk(KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#461: FILE: arch/x86/kernel/aperture_64.c:428:
+						printk(KERN_ERR "please increase GART size in your BIOS setup\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#462: FILE: arch/x86/kernel/aperture_64.c:429:
+						printk(KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#531: FILE: arch/x86/kernel/aperture_64.c:509:
+			/* Don't enable translation yet. That is done later.
+			   Assume this BIOS didn't initialise the GART so

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#532: FILE: arch/x86/kernel/aperture_64.c:510:
+			   just overwrite all previous bits */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#554: FILE: arch/x86/kernel/pci-dma.c:87:
+				 512ULL<<20);
 				       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#669: FILE: drivers/char/agp/amd64-agp.c:256:
+	if (size < 32*1024*1024) {
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#669: FILE: drivers/char/agp/amd64-agp.c:256:
+	if (size < 32*1024*1024) {
 	                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#670: FILE: drivers/char/agp/amd64-agp.c:257:
+		printk(KERN_ERR PFX "Aperture too small (%d MB)\n", size>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#670: FILE: drivers/char/agp/amd64-agp.c:257:
+		printk(KERN_ERR PFX "Aperture too small (%d MB)\n", size>>20);
 		                                                        ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#685: FILE: drivers/char/agp/amd64-agp.c:320:
+	if (order >=0 && aper + (32ULL<<(20 + order)) > 0x100000000ULL) {
 	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#685: FILE: drivers/char/agp/amd64-agp.c:320:
+	if (order >=0 && aper + (32ULL<<(20 + order)) > 0x100000000ULL) {
 	                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#686: FILE: drivers/char/agp/amd64-agp.c:321:
+		printk(KERN_INFO "Aperture size %u MB is not right, using settings from NB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: drivers/char/agp/amd64-agp.c:322:
+		printk(KERN_INFO "Aperture size %u MB is not right, using settings from NB\n",
+				  32 << order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#702: FILE: include/asm-x86/gart.h:8:
+extern int agp_amd64_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#715: FILE: include/asm-x86/gart.h:40:
+#define GARTEN		(1<<0)
               		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#715: FILE: include/asm-x86/gart.h:40:
+#define GARTEN		(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#716: FILE: include/asm-x86/gart.h:41:
+#define DISGARTCPU	(1<<4)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#716: FILE: include/asm-x86/gart.h:41:
+#define DISGARTCPU	(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#717: FILE: include/asm-x86/gart.h:42:
+#define DISGARTIO	(1<<5)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#717: FILE: include/asm-x86/gart.h:42:
+#define DISGARTIO	(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#720: FILE: include/asm-x86/gart.h:45:
+#define INVGART		(1<<0)
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#720: FILE: include/asm-x86/gart.h:45:
+#define INVGART		(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#721: FILE: include/asm-x86/gart.h:46:
+#define GARTPTEERR	(1<<1)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#721: FILE: include/asm-x86/gart.h:46:
+#define GARTPTEERR	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#728: FILE: include/asm-x86/gart.h:53:
+#define AMD64_GARTEN		(1<<0)
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#728: FILE: include/asm-x86/gart.h:53:
+#define AMD64_GARTEN		(1<<0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289988.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 19 warnings, 36 checks, 616 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289988.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
