WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: perfmon/perfmon_sysfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: perfmon/perfmon_sysfs.c:22:
+ * ^Ihttp://perfmon2.sf.net$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#87: FILE: perfmon/perfmon_sysfs.c:34:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#88: FILE: perfmon/perfmon_sysfs.c:35:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#98: FILE: perfmon/perfmon_sysfs.c:45:
+	ssize_t (*show)(void *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#98: FILE: perfmon/perfmon_sysfs.c:45:
+	ssize_t (*show)(void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#99: FILE: perfmon/perfmon_sysfs.c:46:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#99: FILE: perfmon/perfmon_sysfs.c:46:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#99: FILE: perfmon/perfmon_sysfs.c:46:
+	ssize_t (*store)(void *, const char *, size_t);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#101: FILE: perfmon/perfmon_sysfs.c:48:
+};
+#define to_attr(n) container_of(n, struct pfm_attribute, attr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#101: FILE: perfmon/perfmon_sysfs.c:48:
+#define to_attr(n) container_of(n, struct pfm_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#106: FILE: perfmon/perfmon_sysfs.c:53:
+#define PFM_RW_ATTR(_name, _mode, _show,_store) ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: perfmon/perfmon_sysfs.c:53:
+#define PFM_RW_ATTR(_name, _mode, _show,_store) 			\
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#106: FILE: perfmon/perfmon_sysfs.c:53:
+#define PFM_RW_ATTR(_name, _mode, _show,_store) 			\
+struct pfm_attribute attr_##_name = __ATTR(_name, _mode, _show, _store);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: perfmon/perfmon_sysfs.c:56:
+int pfm_sysfs_add_pmu(struct pfm_pmu_config *pmu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: perfmon/perfmon_sysfs.c:61:
+static ssize_t pfm_pmu_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#118: FILE: perfmon/perfmon_sysfs.c:65:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(pmu, buf) : -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: perfmon/perfmon_sysfs.c:69:
+static ssize_t pfm_regs_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: perfmon/perfmon_sysfs.c:73:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(reg, buf) : -EIO;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#129: FILE: perfmon/perfmon_sysfs.c:76:
+static struct sysfs_ops pfm_pmu_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#133: FILE: perfmon/perfmon_sysfs.c:80:
+static struct sysfs_ops pfm_regs_sysfs_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: perfmon/perfmon_sysfs.c:84:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: perfmon/perfmon_sysfs.c:103:
+
+

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#166: FILE: perfmon/perfmon_sysfs.c:113:
+	if (sscanf(buf, "%d", &d) != 1)
+		return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#182: FILE: perfmon/perfmon_sysfs.c:129:
+	if (sscanf(buf, "%d", &d) != 1)
+		return -EINVAL;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#222: FILE: perfmon/perfmon_sysfs.c:169:
+__setup("perfmon_debug", enable_debug);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#271: FILE: perfmon/perfmon_sysfs.c:218:
+static struct sysfs_ops pfm_kernel_sysfs_ops = {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#301: FILE: perfmon/perfmon_sysfs.c:248:
+#define PFM_DECL_STATS_ATTR(name) \
+static ssize_t name##_show(void *info, char *buf) \
+{ \
+	struct pfm_stats *st = info;\
+	return snprintf(buf, PAGE_SIZE, "%llu\n", \
+			(unsigned long long)st->name); \
+} \
+static PFM_RO_ATTR(name)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#301: FILE: perfmon/perfmon_sysfs.c:248:
+#define PFM_DECL_STATS_ATTR(name) \
+static ssize_t name##_show(void *info, char *buf) \
+{ \
+	struct pfm_stats *st = info;\
+	return snprintf(buf, PAGE_SIZE, "%llu\n", \
+			(unsigned long long)st->name); \
+} \
+static PFM_RO_ATTR(name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: perfmon/perfmon_sysfs.c:263:
+	struct pfm_regmap_desc *reg = info;
+	return snprintf(buf, PAGE_SIZE, "%s\n", reg->desc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: perfmon/perfmon_sysfs.c:270:
+	struct pfm_regmap_desc *reg = info;
+	return snprintf(buf, PAGE_SIZE, "0x%llx\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: perfmon/perfmon_sysfs.c:278:
+	struct pfm_regmap_desc *reg = info;
+	return snprintf(buf, PAGE_SIZE, "0x%llx\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#347: FILE: perfmon/perfmon_sysfs.c:294:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: perfmon/perfmon_sysfs.c:298:
+	struct pfm_regmap_desc *reg = info;
+	return snprintf(buf, PAGE_SIZE, "0x%lx\n", reg->hw_addr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#355: FILE: perfmon/perfmon_sysfs.c:302:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: perfmon/perfmon_sysfs.c:319:
+	struct pfm_pmu_config *p = info;
+	return snprintf(buf, PAGE_SIZE, "%s\n", p->pmu_name);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#393: FILE: perfmon/perfmon_sysfs.c:340:
+	for (i = 0; i < pmu->num_pmc_entries; i++, reg++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#412: FILE: perfmon/perfmon_sysfs.c:359:
+	for (i = 0; i < pmu->num_pmd_entries; i++, reg++) {
+

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#438: FILE: perfmon/perfmon_sysfs.c:385:
+	/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'currnt' may be misspelled - perhaps 'current'?
#499: FILE: perfmon/perfmon_res.c:193:
+ * pfm_sysfs_res_show - return currnt resourcde usage for sysfs
                                ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#518: FILE: perfmon/perfmon_res.c:212:
+	case 0: snprintf(buf, sz, "%u\n", pfm_res.thread_sessions);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#520: FILE: perfmon/perfmon_res.c:214:
+	case 1: snprintf(buf, sz, "%d\n", cpus_weight(pfm_res.sys_cpumask));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: perfmon/perfmon_res.c:218:
+		snprintf(buf, sz, "%s\n",
+			pfm_pmu_conf ?	pfm_pmu_conf->pmu_name

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000269362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 25 warnings, 13 checks, 491 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000269362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
