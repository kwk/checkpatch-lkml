WARNING:REPEATED_WORD: Possible repeated word: 'to'
#59: 
file_move to file_add.  The callers have been modified to to ensure

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#73: 
as inodes may have some influence on the the rw state of the

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#96: FILE: drivers/char/pty.c:665:
+	file_add(filp, &tty->tty_files);
 	         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#109: FILE: drivers/char/tty_io.c:1839:
+	file_add(filp, &tty->tty_files);
 	         ^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#130: FILE: fs/file_table.c:35:
+__cacheline_aligned_in_smp DEFINE_MUTEX(files_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'files_lock' should also have an identifier name
#130: FILE: fs/file_table.c:35:
+__cacheline_aligned_in_smp DEFINE_MUTEX(files_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: fs/super.c:608:
+			struct vfsmount *mnt;
+			if (!S_ISREG(f->f_path.dentry->d_inode->i_mode))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#305: FILE: include/linux/fs.h:882:
 };
+extern struct mutex files_lock;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#306: FILE: include/linux/fs.h:883:
+#define file_list_lock() mutex_lock(&files_lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#307: FILE: include/linux/fs.h:884:
+#define file_list_unlock() mutex_unlock(&files_lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/fs.h:2119:
+extern void file_add(struct file *f, struct list_head *list);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140742.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 2 checks, 199 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140742.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
