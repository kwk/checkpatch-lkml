WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/opts.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: fs/aufs/opts.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/opts.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#64: FILE: fs/aufs/opts.h:22:
+ * $Id: opts.h,v 1.2 2008/04/21 01:46:26 sfjro Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_XINO>
#81: FILE: fs/aufs/opts.h:39:
+#define AuOpt_XINO		1

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_TRUNC_XINO>
#82: FILE: fs/aufs/opts.h:40:
+#define AuOpt_TRUNC_XINO	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#82: FILE: fs/aufs/opts.h:40:
+#define AuOpt_TRUNC_XINO	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_LINO>
#83: FILE: fs/aufs/opts.h:41:
+#define AuOpt_LINO		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#83: FILE: fs/aufs/opts.h:41:
+#define AuOpt_LINO		(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_NONE>
#84: FILE: fs/aufs/opts.h:42:
+#define AuOpt_UDBA_NONE		(1 << 3)	/* users direct branch access */

CHECK:BIT_MACRO: Prefer using the BIT macro
#84: FILE: fs/aufs/opts.h:42:
+#define AuOpt_UDBA_NONE		(1 << 3)	/* users direct branch access */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_REVAL>
#85: FILE: fs/aufs/opts.h:43:
+#define AuOpt_UDBA_REVAL	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#85: FILE: fs/aufs/opts.h:43:
+#define AuOpt_UDBA_REVAL	(1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_INOTIFY>
#86: FILE: fs/aufs/opts.h:44:
+#define AuOpt_UDBA_INOTIFY	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#86: FILE: fs/aufs/opts.h:44:
+#define AuOpt_UDBA_INOTIFY	(1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_SHWH>
#87: FILE: fs/aufs/opts.h:45:
+#define AuOpt_SHWH		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: fs/aufs/opts.h:45:
+#define AuOpt_SHWH		(1 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_PLINK>
#88: FILE: fs/aufs/opts.h:46:
+#define AuOpt_PLINK		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#88: FILE: fs/aufs/opts.h:46:
+#define AuOpt_PLINK		(1 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_WARN_PERM>
#89: FILE: fs/aufs/opts.h:47:
+#define AuOpt_WARN_PERM		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#89: FILE: fs/aufs/opts.h:47:
+#define AuOpt_WARN_PERM		(1 << 8)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_DIRPERM1>
#90: FILE: fs/aufs/opts.h:48:
+#define AuOpt_DIRPERM1		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#90: FILE: fs/aufs/opts.h:48:
+#define AuOpt_DIRPERM1		(1 << 9)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_DLGT>
#91: FILE: fs/aufs/opts.h:49:
+#define AuOpt_DLGT		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#91: FILE: fs/aufs/opts.h:49:
+#define AuOpt_DLGT		(1 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_COO_NONE>
#92: FILE: fs/aufs/opts.h:50:
+#define AuOpt_COO_NONE		(1 << 11)	/* copyup on open */

CHECK:BIT_MACRO: Prefer using the BIT macro
#92: FILE: fs/aufs/opts.h:50:
+#define AuOpt_COO_NONE		(1 << 11)	/* copyup on open */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_COO_LEAF>
#93: FILE: fs/aufs/opts.h:51:
+#define AuOpt_COO_LEAF		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#93: FILE: fs/aufs/opts.h:51:
+#define AuOpt_COO_LEAF		(1 << 12)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_COO_ALL>
#94: FILE: fs/aufs/opts.h:52:
+#define AuOpt_COO_ALL		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#94: FILE: fs/aufs/opts.h:52:
+#define AuOpt_COO_ALL		(1 << 13)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_ALWAYS_DIROPQ>
#95: FILE: fs/aufs/opts.h:53:
+#define AuOpt_ALWAYS_DIROPQ	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#95: FILE: fs/aufs/opts.h:53:
+#define AuOpt_ALWAYS_DIROPQ	(1 << 14)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_REFROF>
#96: FILE: fs/aufs/opts.h:54:
+#define AuOpt_REFROF		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: fs/aufs/opts.h:54:
+#define AuOpt_REFROF		(1 << 15)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_VERBOSE>
#97: FILE: fs/aufs/opts.h:55:
+#define AuOpt_VERBOSE		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: fs/aufs/opts.h:55:
+#define AuOpt_VERBOSE		(1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_TDP>
#115: FILE: fs/aufs/opts.h:73:
+	AuWbrCreate_TDP,	/* top down parent */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_RR>
#116: FILE: fs/aufs/opts.h:74:
+	AuWbrCreate_RR,		/* round robin */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFS>
#117: FILE: fs/aufs/opts.h:75:
+	AuWbrCreate_MFS,	/* most free space */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSV>
#118: FILE: fs/aufs/opts.h:76:
+	AuWbrCreate_MFSV,	/* mfs with seconds */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRR>
#119: FILE: fs/aufs/opts.h:77:
+	AuWbrCreate_MFSRR,	/* mfs then rr */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRRV>
#120: FILE: fs/aufs/opts.h:78:
+	AuWbrCreate_MFSRRV,	/* mfs then rr with seconds */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFS>
#121: FILE: fs/aufs/opts.h:79:
+	AuWbrCreate_PMFS,	/* parent and mfs */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFSV>
#122: FILE: fs/aufs/opts.h:80:
+	AuWbrCreate_PMFSV,	/* parent and mfs with seconds */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_Def>
#124: FILE: fs/aufs/opts.h:82:
+	AuWbrCreate_Def = AuWbrCreate_TDP

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_TDP>
#128: FILE: fs/aufs/opts.h:86:
+	AuWbrCopyup_TDP,	/* top down parent */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BUP>
#129: FILE: fs/aufs/opts.h:87:
+	AuWbrCopyup_BUP,	/* bottom up parent */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BU>
#130: FILE: fs/aufs/opts.h:88:
+	AuWbrCopyup_BU,		/* bottom up */

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_Def>
#132: FILE: fs/aufs/opts.h:90:
+	AuWbrCopyup_Def = AuWbrCopyup_TDP

CHECK:CAMELCASE: Avoid CamelCase: <AuOptMask_COO>
#135: FILE: fs/aufs/opts.h:93:
+#define AuOptMask_COO		(AuOpt_COO_NONE \

CHECK:CAMELCASE: Avoid CamelCase: <AuOptMask_UDBA>
#138: FILE: fs/aufs/opts.h:96:
+#define AuOptMask_UDBA		(AuOpt_UDBA_NONE \

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_DefExtra1>
#143: FILE: fs/aufs/opts.h:101:
+#define AuOpt_DefExtra1	AuOpt_ALWAYS_DIROPQ

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_Def>
#148: FILE: fs/aufs/opts.h:106:
+#define AuOpt_Def	(AuOpt_XINO \

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#161: FILE: fs/aufs/opts.h:119:
+	struct nameidata	nd;
 	                	^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REMOUNT>
#215: FILE: fs/aufs/opts.h:173:
+#define AuOpts_REMOUNT		1

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REFRESH_DIR>
#216: FILE: fs/aufs/opts.h:174:
+#define AuOpts_REFRESH_DIR	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#216: FILE: fs/aufs/opts.h:174:
+#define AuOpts_REFRESH_DIR	(1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REFRESH_NONDIR>
#217: FILE: fs/aufs/opts.h:175:
+#define AuOpts_REFRESH_NONDIR	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#217: FILE: fs/aufs/opts.h:175:
+#define AuOpts_REFRESH_NONDIR	(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_TRUNC_XIB>
#218: FILE: fs/aufs/opts.h:176:
+#define AuOpts_TRUNC_XIB	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#218: FILE: fs/aufs/opts.h:176:
+#define AuOpts_TRUNC_XIB	(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_##name>
#219: FILE: fs/aufs/opts.h:177:
+#define au_ftest_opts(flags, name)	((flags) & AuOpts_##name)

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#249: FILE: fs/aufs/opts.h:207:
+	AuDebugOn(bit & (AuOpt_DLGT | AuOpt_DIRPERM1));

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_##name>
#253: FILE: fs/aufs/opts.h:211:
+#define au_opt_test(flags, name)	au_opt_do_test(flags, AuOpt_##name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#262: FILE: fs/aufs/opts.h:220:
+#define au_opt_set_coo(flags, name) do { \
+	(flags) &= ~AuOptMask_COO; \
+	((flags) |= AuOpt_##name); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#265: FILE: fs/aufs/opts.h:223:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#267: FILE: fs/aufs/opts.h:225:
+#define au_opt_set_udba(flags, name) do { \
+	(flags) &= ~AuOptMask_UDBA; \
+	((flags) |= AuOpt_##name); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#270: FILE: fs/aufs/opts.h:228:
+} while(0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279949.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 4 warnings, 62 checks, 245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279949.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
