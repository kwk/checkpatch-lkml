WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#207: FILE: arch/sh/kernel/kgdb-jmp.S:1:
+#include <linux/linkage.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#242: FILE: arch/sh/kernel/kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#243: FILE: arch/sh/kernel/kgdb.c:2:
+ * arch/sh/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Containes' may be misspelled - perhaps 'Contains'?
#247: FILE: arch/sh/kernel/kgdb.c:6:
+ * Containes extracts from code by Glenn Engel, Jim Kingdon,
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#275: FILE: arch/sh/kernel/kgdb.c:34:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#276: FILE: arch/sh/kernel/kgdb.c:35:
+#include <asm/mmu_context.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#279: FILE: arch/sh/kernel/kgdb.c:38:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#297: FILE: arch/sh/kernel/kgdb.c:56:
+#define OPCODE_BTF_DISP(op)   (((op) & 0x80) ? (((op) | 0xffffff80) << 1) : \
+			      (((op) & 0x7f) << 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#302: FILE: arch/sh/kernel/kgdb.c:61:
+#define OPCODE_BRA_DISP(op)   (((op) & 0x800) ? (((op) | 0xfffff800) << 1) : \
+			      (((op) & 0x7ff) << 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#307: FILE: arch/sh/kernel/kgdb.c:66:
+#define OPCODE_BSR_DISP(op)   (((op) & 0x800) ? (((op) | 0xfffff800) << 1) : \
+			      (((op) & 0x7ff) << 1))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: arch/sh/kernel/kgdb.c:260:
+			 * us to */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#503: FILE: arch/sh/kernel/kgdb.c:262:
+			unsigned short *next_addr = get_step_address();
+			stepped_address = (int)next_addr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#522: FILE: arch/sh/kernel/kgdb.c:281:
+ * When an exception has occured, we are called.  We need to set things
                          ^^^^^^^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#541: FILE: arch/sh/kernel/kgdb.c:300:
+	__asm__ __volatile__("stc vbr, %0":"=r"(vbr_val));
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'execption' may be misspelled - perhaps 'exception'?
#544: FILE: arch/sh/kernel/kgdb.c:303:
+	/* Get the execption code. */
 	           ^^^^^^^^^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#545: FILE: arch/sh/kernel/kgdb.c:304:
+	__asm__ __volatile__("stc r2_bank, %0":"=r"(excep_code));
 	                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#550: FILE: arch/sh/kernel/kgdb.c:309:
+	 * breakpoint() to try and initialize everything for us. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#561: FILE: arch/sh/kernel/kgdb.c:320:
+	 * will not be replaced (and we would retake the trap forever) */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#563: FILE: arch/sh/kernel/kgdb.c:322:
+	    (*(volatile unsigned long *)TRA != (0xff << 2)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#569: FILE: arch/sh/kernel/kgdb.c:328:
+	 * instruction away. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#577: FILE: arch/sh/kernel/kgdb.c:336:
+	 * need to send back and forth lives in pt_regs. */

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#591: FILE: arch/sh/kernel/kgdb.c:350:
+	__asm__ __volatile__("ldc %0, vbr": :"r"(vbr_val));
 	                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#591: FILE: arch/sh/kernel/kgdb.c:350:
+	__asm__ __volatile__("ldc %0, vbr": :"r"(vbr_val));
 	                                    ^

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#601: FILE: arch/sh/kernel/kgdb.c:360:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR>
#1843: FILE: drivers/serial/sh-sci.c:124:
+			sci_out(port, SCxSR, SCxSR_ERROR_CLEAR(port));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_ERROR_CLEAR>
#1843: FILE: drivers/serial/sh-sci.c:124:
+			sci_out(port, SCxSR, SCxSR_ERROR_CLEAR(port));

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1851: FILE: drivers/serial/sh-sci.c:166:
+	const char hexchars[] = "0123456789abcdef";

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1909: FILE: include/asm-sh/kgdb.h:20:
+/* Based on sh-gdb.c from gdb-6.1, Glenn
+     Engel at HP  Ben Lee and Steve Chamberlain */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1909: FILE: include/asm-sh/kgdb.h:20:
+     Engel at HP  Ben Lee and Steve Chamberlain */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1985: FILE: include/asm-sh/kgdb.h:37:
+#define BREAKPOINT()		asm("trapa #0xff");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2024: FILE: lib/Kconfig.kgdb:109:
+config KGDB_SH_SCI
+	bool "KGDB: On SH SCI(F) serial port"
+	depends on SUPERH && SERIAL_SH_SCI
+	help
+	  Uses the SH SCI(F) serial port to communicate with the host GDB.

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369974.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 20 warnings, 9 checks, 815 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369974.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
