WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#75: FILE: kernel/sysctl.c:2059:
+ * proc_get_ulong - reads an ASCII formated integer from a user buffer
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#104: FILE: kernel/sysctl.c:2088:
+	if (len > TMPBUFLEN-1)
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#105: FILE: kernel/sysctl.c:2089:
+		len = TMPBUFLEN-1;
 		               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#112: FILE: kernel/sysctl.c:2096:
+	if (*p == '-' && *size > 1) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#115: FILE: kernel/sysctl.c:2099:
+	} else

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#120: FILE: kernel/sysctl.c:2104:
+	*val = simple_strtoul(p, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < *size'
#123: FILE: kernel/sysctl.c:2107:
+	if (((len < *size) && *p && !isspace(*p) &&
+	     perm_tr && !strchr(perm_tr, *p)) ||
+	    /* We don't know if the next char is whitespace thus we may accept
+	     * invalid integers (e.g. 1234...a) or two integers instead of one
+	     * (e.g. 123...1). So lets not allow such large numbers. */
+	    len == TMPBUFLEN - 1)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#127: FILE: kernel/sysctl.c:2111:
+	     * (e.g. 123...1). So lets not allow such large numbers. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < *size'
#132: FILE: kernel/sysctl.c:2115:
+	if (tr && (len < *size))

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#141: FILE: kernel/sysctl.c:2124:
+ * proc_put_ulong - coverts an integer to a decimal ASCII formated string
                                                           ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#171: FILE: kernel/sysctl.c:2154:
+}
+#undef TMPBUFLEN

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#217: FILE: kernel/sysctl.c:2194:
+	char __user *buffer = (char __user *) _buffer;

CHECK:SPACING: No space is necessary after a cast
#371: FILE: kernel/sysctl.c:2375:
+	char __user *buffer = (char __user *) _buffer;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010129.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 9 checks, 461 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010129.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
