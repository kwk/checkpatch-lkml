WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
change the reference to the cpumask object but not the cpumask object itself

WARNING:BAD_SIGN_OFF: Non-standard signature: 'Signed-of-by:' - perhaps 'Signed-off-by:'?
#71: 
Signed-of-by: Mike Travis <travis@sgi.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#174: FILE: include/linux/cpumask.h:104:
+struct __cpumask_data_s { DECLARE_BITMAP(bits, NR_CPUS); };

WARNING:NEW_TYPEDEFS: do not add new typedefs
#177: FILE: include/linux/cpumask.h:107:
+typedef struct __cpumask_data_s cpumask_map_t[1];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#180: FILE: include/linux/cpumask.h:110:
+typedef struct __cpumask_data_s *cpumask_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#181: FILE: include/linux/cpumask.h:111:
+typedef const struct __cpumask_data_s *const_cpumask_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#188: FILE: include/linux/cpumask.h:118:
+typedef struct __cpumask_data_s	cpumask_var_t[1];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#195: FILE: include/linux/cpumask.h:125:
+#define for_each_cpu(cpu, mask)	\
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#197: FILE: include/linux/cpumask.h:127:
+#define for_each_cpu_in(cpu, mask, andmask) \
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask, (void)andmask)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#216: FILE: include/linux/cpumask.h:146:
+typedef struct __cpumask_data_s	cpumask_var_t[1];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#230: FILE: include/linux/cpumask.h:158:
+typedef struct __cpumask_data_s	*cpumask_var_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/cpumask.h:166:
+extern int cpus_first(const_cpumask_t srcp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/cpumask.h:167:
+extern int cpus_next(int n, const_cpumask_t srcp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/cpumask.h:168:
+extern int cpus_next_in(int n, const_cpumask_t srcp, const_cpumask_t andsrc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: include/linux/cpumask.h:169:
+extern int any_cpu_in(const_cpumask_t mask, const_cpumask_t andmask);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#246: FILE: include/linux/cpumask.h:174:
+#define for_each_cpu(cpu, mask)				\
+	for ((cpu) = -1;				\
+		(cpu) = cpus_next((cpu), (mask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#249: FILE: include/linux/cpumask.h:177:
+		(cpu) < nr_cpu_ids; )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#251: FILE: include/linux/cpumask.h:179:
+#define for_each_cpu_in(cpu, mask, andmask)			\
+	for ((cpu) = -1;					\
+		(cpu) = cpus_next_in((cpu), (mask), (andmask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#254: FILE: include/linux/cpumask.h:182:
+		(cpu) < nr_cpu_ids; )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#256: FILE: include/linux/cpumask.h:184:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#287: FILE: include/linux/cpumask.h:215:
+static inline void __cpu_set(int cpu, volatile cpumask_t dstp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#295: FILE: include/linux/cpumask.h:221:
+static inline void __cpu_clear(int cpu, volatile cpumask_t dstp)

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: include/linux/cpumask.h:256:
+^I^I          (const_cpumask_t)(src2), nr_cpu_ids)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: include/linux/cpumask.h:258:
+static inline void __cpus_and(cpumask_t dstp, const_cpumask_t src1p,
+					      const_cpumask_t src2p, int nbits)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#350: FILE: include/linux/cpumask.h:263:
+#define cpus_or(dst, src1, src2) ^I^I^I\$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: include/linux/cpumask.h:267:
+static inline void __cpus_or(cpumask_t dstp, const_cpumask_t src1p,
+					     const_cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: include/linux/cpumask.h:276:
+static inline void __cpus_xor(cpumask_t dstp, const_cpumask_t src1p,
+					      const_cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: include/linux/cpumask.h:285:
+static inline void __cpus_andnot(cpumask_t dstp, const_cpumask_t src1p,
+					const_cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: include/linux/cpumask.h:293:
+static inline void __cpus_complement(cpumask_t dstp,
+					const_cpumask_t srcp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: include/linux/cpumask.h:302:
+static inline int __cpus_equal(const_cpumask_t src1p,
+					const_cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: include/linux/cpumask.h:311:
+static inline int __cpus_intersects(const_cpumask_t src1p,
+					const_cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: include/linux/cpumask.h:320:
+static inline int __cpus_subset(const_cpumask_t src1p,
+					const_cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: include/linux/cpumask.h:347:
+static inline void __cpus_shift_right(cpumask_t dstp,
+					const_cpumask_t srcp, int n, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: include/linux/cpumask.h:355:
+static inline void __cpus_shift_left(cpumask_t dstp,
+					const_cpumask_t srcp, int n, int nbits)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#503: FILE: include/linux/cpumask.h:386:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-1] =  value			\
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: include/linux/cpumask.h:453:
+static inline void __cpus_remap(cpumask_t dstp, const_cpumask_t srcp,
+		const_cpumask_t oldp, const_cpumask_t newp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: include/linux/cpumask.h:461:
+static inline void __cpus_onto(cpumask_t dstp, const_cpumask_t origp,
+		const_cpumask_t relmapp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: include/linux/cpumask.h:469:
+static inline void __cpus_fold(cpumask_t dstp, const_cpumask_t origp,
 		int sz, int nbits)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "d"
#769: FILE: include/linux/cpumask_alloc.h:31:
+	return (d != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#839: FILE: include/linux/cpumask_alloc.h:127:
+#define^ICPUMASK_PTR(v, m) ^Icpumask_t v = (m->v)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#839: FILE: include/linux/cpumask_alloc.h:127:
+#define	CPUMASK_PTR(v, m) 	cpumask_t v = (m->v)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#839: FILE: include/linux/cpumask_alloc.h:127:
+#define	CPUMASK_PTR(v, m) 	cpumask_t v = (m->v)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#844: FILE: include/linux/cpumask_alloc.h:131:
+#define^ICPUMASK_PTR(v, m) ^Icpumask_t v = (m->v)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#844: FILE: include/linux/cpumask_alloc.h:131:
+#define	CPUMASK_PTR(v, m) 	cpumask_t v = (m->v)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#844: FILE: include/linux/cpumask_alloc.h:131:
+#define	CPUMASK_PTR(v, m) 	cpumask_t v = (m->v)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223047.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 14 warnings, 28 checks, 752 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223047.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
