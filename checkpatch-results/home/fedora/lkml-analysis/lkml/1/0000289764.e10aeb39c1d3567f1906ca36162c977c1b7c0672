WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
integrated into some Notebooks with Ricoh Co Ltd RL5c476 II Cardbus bridges. 

WARNING:TYPO_SPELLING: 'insterted' may be misspelled - perhaps 'inserted'?
#38: 
Whenever a MMC or SD card is insterted in the cardslot of one of these 
                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: mmc/host/sdricoh_cs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#104: FILE: mmc/host/sdricoh_cs.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: mmc/host/sdricoh_cs.c:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#119: FILE: mmc/host/sdricoh_cs.c:33:
+#include <asm/io.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#129: FILE: mmc/host/sdricoh_cs.c:43:
+static unsigned int debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#130: FILE: mmc/host/sdricoh_cs.c:44:
+static unsigned int switchlocked = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: mmc/host/sdricoh_cs.c:52:
+        if (debug > 1) \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: mmc/host/sdricoh_cs.c:52:
+        if (debug > 1) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: mmc/host/sdricoh_cs.c:53:
+                printk(KERN_INFO "sdricoh_cs: "fmt, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: mmc/host/sdricoh_cs.c:53:
+                printk(KERN_INFO "sdricoh_cs: "fmt, \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#139: FILE: mmc/host/sdricoh_cs.c:53:
+                printk(KERN_INFO "sdricoh_cs: "fmt, \

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: mmc/host/sdricoh_cs.c:54:
+                         ##arg); } while (0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: mmc/host/sdricoh_cs.c:60:
+        if (debug > 0) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: mmc/host/sdricoh_cs.c:60:
+        if (debug > 0) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: mmc/host/sdricoh_cs.c:61:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: mmc/host/sdricoh_cs.c:61:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#147: FILE: mmc/host/sdricoh_cs.c:61:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: mmc/host/sdricoh_cs.c:62:
+                         ##arg); } while (0)$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#150: FILE: mmc/host/sdricoh_cs.c:64:
+#define ERR(fmt, arg...) do {\
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \
+                         ##arg); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: mmc/host/sdricoh_cs.c:65:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: mmc/host/sdricoh_cs.c:65:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#151: FILE: mmc/host/sdricoh_cs.c:65:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: mmc/host/sdricoh_cs.c:66:
+                         ##arg); } while (0)$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#154: FILE: mmc/host/sdricoh_cs.c:68:
+#define INFO(fmt, arg...) do {\
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \
+                         ##arg); } while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: mmc/host/sdricoh_cs.c:69:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: mmc/host/sdricoh_cs.c:69:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#155: FILE: mmc/host/sdricoh_cs.c:69:
+                printk(KERN_INFO DRIVER_NAME ": "fmt, \

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: mmc/host/sdricoh_cs.c:70:
+                         ##arg); } while (0)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#219: FILE: mmc/host/sdricoh_cs.c:133:
+	unsigned int value = readl(host->iobase + reg);
+	REGDBG("rl %x 0x%x\n", reg, value);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#229: FILE: mmc/host/sdricoh_cs.c:143:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: mmc/host/sdricoh_cs.c:149:
+	unsigned int value = readw(host->iobase + reg);
+	REGDBG("rb %x 0x%x\n", reg, value);

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: mmc/host/sdricoh_cs.c:157:
+	unsigned int value = readb(host->iobase + reg);
+	REGDBG("rb %x 0x%x\n", reg, value);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#247: FILE: mmc/host/sdricoh_cs.c:161:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: mmc/host/sdricoh_cs.c:162:
+static int sdricoh_query_status(struct sdricoh_host *host,unsigned int wanted,
                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#248: FILE: mmc/host/sdricoh_cs.c:162:
+static int sdricoh_query_status(struct sdricoh_host *host,unsigned int wanted,
+				unsigned int timeout){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: mmc/host/sdricoh_cs.c:166:
+	unsigned int status = 0;
+	for (loop = 0; loop < timeout; loop++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: mmc/host/sdricoh_cs.c:173:
+        if (loop == timeout) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: mmc/host/sdricoh_cs.c:173:
+        if (loop == timeout) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: mmc/host/sdricoh_cs.c:174:
+                ERR("query_status: timeout waiting for data\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: mmc/host/sdricoh_cs.c:174:
+                ERR("query_status: timeout waiting for data\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: mmc/host/sdricoh_cs.c:175:
+                return -ETIMEDOUT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: mmc/host/sdricoh_cs.c:175:
+                return -ETIMEDOUT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: mmc/host/sdricoh_cs.c:176:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: mmc/host/sdricoh_cs.c:176:
+        }$

ERROR:SPACING: space required before the open brace '{'
#265: FILE: mmc/host/sdricoh_cs.c:179:
+	if(status & 0x7F0000){

ERROR:SPACING: space required before the open parenthesis '('
#265: FILE: mmc/host/sdricoh_cs.c:179:
+	if(status & 0x7F0000){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: mmc/host/sdricoh_cs.c:180:
+		ERR("waiting for status bit %x failed\n",wanted);
 		                                        ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#271: FILE: mmc/host/sdricoh_cs.c:185:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: mmc/host/sdricoh_cs.c:187:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#275: FILE: mmc/host/sdricoh_cs.c:189:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#299: FILE: mmc/host/sdricoh_cs.c:213:
+
+	}

ERROR:SPACING: space required before the open brace '{'
#303: FILE: mmc/host/sdricoh_cs.c:217:
+	if(result == 0){

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: mmc/host/sdricoh_cs.c:217:
+	if(result == 0){

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: mmc/host/sdricoh_cs.c:219:
+                if(opcode == SD_SEND_IF_COND){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: mmc/host/sdricoh_cs.c:219:
+                if(opcode == SD_SEND_IF_COND){$

ERROR:SPACING: space required before the open brace '{'
#305: FILE: mmc/host/sdricoh_cs.c:219:
+                if(opcode == SD_SEND_IF_COND){

ERROR:SPACING: space required before the open parenthesis '('
#305: FILE: mmc/host/sdricoh_cs.c:219:
+                if(opcode == SD_SEND_IF_COND){

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: mmc/host/sdricoh_cs.c:220:
+                        if(host->mode != MODE_SDHC){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: mmc/host/sdricoh_cs.c:220:
+                        if(host->mode != MODE_SDHC){$

ERROR:SPACING: space required before the open brace '{'
#306: FILE: mmc/host/sdricoh_cs.c:220:
+                        if(host->mode != MODE_SDHC){

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: mmc/host/sdricoh_cs.c:220:
+                        if(host->mode != MODE_SDHC){

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: mmc/host/sdricoh_cs.c:221:
+                                INFO("switching to SDHC mode\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: mmc/host/sdricoh_cs.c:221:
+                                INFO("switching to SDHC mode\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: mmc/host/sdricoh_cs.c:222:
+                                host->mode = MODE_SDHC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: mmc/host/sdricoh_cs.c:222:
+                                host->mode = MODE_SDHC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: mmc/host/sdricoh_cs.c:223:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: mmc/host/sdricoh_cs.c:223:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: mmc/host/sdricoh_cs.c:224:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: mmc/host/sdricoh_cs.c:224:
+                }$

ERROR:SPACING: space required before the open brace '{'
#313: FILE: mmc/host/sdricoh_cs.c:227:
+		if(opcode == MMC_APP_CMD){

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: mmc/host/sdricoh_cs.c:227:
+		if(opcode == MMC_APP_CMD){

ERROR:SPACING: space required before the open brace '{'
#314: FILE: mmc/host/sdricoh_cs.c:228:
+			if(host->mode == MODE_MMC){

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: mmc/host/sdricoh_cs.c:228:
+			if(host->mode == MODE_MMC){

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#323: FILE: mmc/host/sdricoh_cs.c:237:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#337: FILE: mmc/host/sdricoh_cs.c:251:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: mmc/host/sdricoh_cs.c:259:
+static int sdricoh_blockio(struct sdricoh_host *host, int read,
+				unsigned int* buf)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#345: FILE: mmc/host/sdricoh_cs.c:259:
+				unsigned int* buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#349: FILE: mmc/host/sdricoh_cs.c:263:
+	if(read){

ERROR:SPACING: space required before the open parenthesis '('
#349: FILE: mmc/host/sdricoh_cs.c:263:
+	if(read){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: mmc/host/sdricoh_cs.c:264:
+		if(sdricoh_query_status(host,STATUS_READY_TO_READ,
 		                            ^

ERROR:SPACING: space required before the open parenthesis '('
#350: FILE: mmc/host/sdricoh_cs.c:264:
+		if(sdricoh_query_status(host,STATUS_READY_TO_READ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: mmc/host/sdricoh_cs.c:265:
+		if(sdricoh_query_status(host,STATUS_READY_TO_READ,
+						TRANSFER_TIMEOUT))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: mmc/host/sdricoh_cs.c:269:
+		for (i = 0; i < 512 / 4; i++) {
+			buf[i] = sdricoh_readl(host, R230_DATA);
+		}

ERROR:SPACING: space required before the open brace '{'
#358: FILE: mmc/host/sdricoh_cs.c:272:
+	}else{

ERROR:SPACING: space required after that close brace '}'
#358: FILE: mmc/host/sdricoh_cs.c:272:
+	}else{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: mmc/host/sdricoh_cs.c:273:
+		if(sdricoh_query_status(host,STATUS_READY_TO_WRITE,
 		                            ^

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: mmc/host/sdricoh_cs.c:273:
+		if(sdricoh_query_status(host,STATUS_READY_TO_WRITE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: mmc/host/sdricoh_cs.c:274:
+		if(sdricoh_query_status(host,STATUS_READY_TO_WRITE,
+						TRANSFER_TIMEOUT))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#364: FILE: mmc/host/sdricoh_cs.c:278:
+		for (i = 0; i < 512 / 4; i++) {
+			sdricoh_writel(host, R230_DATA, buf[i]);
+		}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#372: FILE: mmc/host/sdricoh_cs.c:286:
+static int sdricoh_busy(struct sdricoh_host* host){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#372: FILE: mmc/host/sdricoh_cs.c:286:
+static int sdricoh_busy(struct sdricoh_host* host){

ERROR:SPACING: space required before the open brace '{'
#372: FILE: mmc/host/sdricoh_cs.c:286:
+static int sdricoh_busy(struct sdricoh_host* host){

WARNING:TYPO_SPELLING: 'tranfer' may be misspelled - perhaps 'transfer'?
#375: FILE: mmc/host/sdricoh_cs.c:289:
+	/* wait until the tranfer is finished */
 	                  ^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#379: FILE: mmc/host/sdricoh_cs.c:293:
+		if (!(status & STATUS_BUSY))
+		break;

ERROR:SPACING: space required before the open parenthesis '('
#382: FILE: mmc/host/sdricoh_cs.c:296:
+	if(status & 0x7F0000)

ERROR:SPACING: space required before the open parenthesis '('
#384: FILE: mmc/host/sdricoh_cs.c:298:
+	if(i == BUSY_TIMEOUT)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: mmc/host/sdricoh_cs.c:303:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sdricoh_request', this function's name, in a string
#398: FILE: mmc/host/sdricoh_cs.c:312:
+	DBG("sdricoh_request opcode=%i\n", cmd->opcode);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#403: FILE: mmc/host/sdricoh_cs.c:317:
+	/* we cannot handle all commands that require a block transfer
+	   therefore do some ugly special handling here

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open brace '{'
#405: FILE: mmc/host/sdricoh_cs.c:319:
+	if(cmd->data){

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: mmc/host/sdricoh_cs.c:319:
+	if(cmd->data){

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#406: FILE: mmc/host/sdricoh_cs.c:320:
+		switch(cmd->opcode){
[...]
+			case MMC_READ_SINGLE_BLOCK:
+			case MMC_READ_MULTIPLE_BLOCK:
+			case MMC_WRITE_BLOCK:
[...]
+	               	case SD_APP_SEND_SCR: /* required for SDHC */
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open brace '{'
#406: FILE: mmc/host/sdricoh_cs.c:320:
+		switch(cmd->opcode){

ERROR:SPACING: space required before the open parenthesis '('
#406: FILE: mmc/host/sdricoh_cs.c:320:
+		switch(cmd->opcode){

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: mmc/host/sdricoh_cs.c:326:
+^I               ^Icase SD_APP_SEND_SCR: /* required for SDHC */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: mmc/host/sdricoh_cs.c:326:
+^I               ^Icase SD_APP_SEND_SCR: /* required for SDHC */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: mmc/host/sdricoh_cs.c:328:
+				cmd->error = sdricoh_mmc_cmd(host,
+						       cmd->opcode,cmd->arg);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: mmc/host/sdricoh_cs.c:328:
+						       cmd->opcode,cmd->arg);
 						                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: mmc/host/sdricoh_cs.c:329:
+                       ^I^Immc_request_done(mmc, mrq);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#415: FILE: mmc/host/sdricoh_cs.c:329:
+                       ^I^Immc_request_done(mmc, mrq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: mmc/host/sdricoh_cs.c:329:
+                       ^I^Immc_request_done(mmc, mrq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: mmc/host/sdricoh_cs.c:330:
+                       ^I^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#416: FILE: mmc/host/sdricoh_cs.c:330:
+                       ^I^Ireturn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: mmc/host/sdricoh_cs.c:330:
+                       ^I^Ireturn;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#418: FILE: mmc/host/sdricoh_cs.c:332:
+				DBG("unsupported command %i\n",cmd->opcode);
 				                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#425: FILE: mmc/host/sdricoh_cs.c:339:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#428: FILE: mmc/host/sdricoh_cs.c:342:
+		if((cmd->error = sdricoh_busy(host)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: mmc/host/sdricoh_cs.c:342:
+		if((cmd->error = sdricoh_busy(host)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sdricoh_request', this function's name, in a string
#429: FILE: mmc/host/sdricoh_cs.c:343:
+			ERR("sdricoh_request: unable to prepare transfer %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: mmc/host/sdricoh_cs.c:344:
+			ERR("sdricoh_request: unable to prepare transfer %x\n",
+				cmd->error);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: mmc/host/sdricoh_cs.c:348:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#448: FILE: mmc/host/sdricoh_cs.c:362:
+							  (3 - i) *4 - 1);
 							          ^

ERROR:SPACING: space required before the open brace '{'
#463: FILE: mmc/host/sdricoh_cs.c:377:
+		if(host->mode != MODE_MMC){

ERROR:SPACING: space required before the open parenthesis '('
#463: FILE: mmc/host/sdricoh_cs.c:377:
+		if(host->mode != MODE_MMC){

ERROR:SPACING: space required before the open brace '{'
#466: FILE: mmc/host/sdricoh_cs.c:380:
+		}else{

ERROR:SPACING: space required after that close brace '}'
#466: FILE: mmc/host/sdricoh_cs.c:380:
+		}else{

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: mmc/host/sdricoh_cs.c:389:
+                    data->blksz, data->blocks, data->sg_len, data->sg->length);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: mmc/host/sdricoh_cs.c:389:
+		DBG("transfer: blksz %i blocks %i sg_len %i sg length %i\n",
+                    data->blksz, data->blocks, data->sg_len, data->sg->length);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: mmc/host/sdricoh_cs.c:389:
+                    data->blksz, data->blocks, data->sg_len, data->sg->length);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#481: FILE: mmc/host/sdricoh_cs.c:395:
+			struct page* page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#483: FILE: mmc/host/sdricoh_cs.c:397:
+			size_t xfered;
+			page = sg_page(data->sg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: mmc/host/sdricoh_cs.c:399:
+        ^I^Ibuf = kmap(page) + data->sg->offset + (512 * i);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#485: FILE: mmc/host/sdricoh_cs.c:399:
+        ^I^Ibuf = kmap(page) + data->sg->offset + (512 * i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: mmc/host/sdricoh_cs.c:399:
+        ^I^Ibuf = kmap(page) + data->sg->offset + (512 * i);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: mmc/host/sdricoh_cs.c:401:
+			  sdricoh_blockio(host,data->flags & MMC_DATA_READ,buf);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: mmc/host/sdricoh_cs.c:401:
+			  sdricoh_blockio(host,data->flags & MMC_DATA_READ,buf);
 			                                                  ^

ERROR:SPACING: space required before the open brace '{'
#489: FILE: mmc/host/sdricoh_cs.c:403:
+			if(!xfered){

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: mmc/host/sdricoh_cs.c:403:
+			if(!xfered){

CHECK:BRACES: braces {} should be used on all arms of this statement
#489: FILE: mmc/host/sdricoh_cs.c:403:
+			if(!xfered){
[...]
+			}else
[...]

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sdricoh_request', this function's name, in a string
#490: FILE: mmc/host/sdricoh_cs.c:404:
+				ERR("sdricoh_request: block transfer failed\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#493: FILE: mmc/host/sdricoh_cs.c:407:
+				break;
+			}else

ERROR:SPACING: space required after that close brace '}'
#493: FILE: mmc/host/sdricoh_cs.c:407:
+			}else

CHECK:BRACES: Unbalanced braces around else statement
#493: FILE: mmc/host/sdricoh_cs.c:407:
+			}else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#499: FILE: mmc/host/sdricoh_cs.c:413:
+		if(sdricoh_query_status(host,STATUS_TRANSFER_FINISHED,
 		                            ^

ERROR:SPACING: space required before the open parenthesis '('
#499: FILE: mmc/host/sdricoh_cs.c:413:
+		if(sdricoh_query_status(host,STATUS_TRANSFER_FINISHED,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sdricoh_request', this function's name, in a string
#501: FILE: mmc/host/sdricoh_cs.c:415:
+			ERR("sdricoh_request: transfer end error\n");

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: mmc/host/sdricoh_cs.c:419:
+		if(!cmd->error && (cmd->error = sdricoh_busy(host)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#505: FILE: mmc/host/sdricoh_cs.c:419:
+		if(!cmd->error && (cmd->error = sdricoh_busy(host)))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sdricoh_request', this function's name, in a string
#506: FILE: mmc/host/sdricoh_cs.c:420:
+			ERR("sdricoh_request: transfer not finished %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: mmc/host/sdricoh_cs.c:421:
+			ERR("sdricoh_request: transfer not finished %x\n",
+				cmd->error);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#509: FILE: mmc/host/sdricoh_cs.c:423:
+
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#518: FILE: mmc/host/sdricoh_cs.c:432:
+	struct sdricoh_host *host = mmc_priv(mmc);
+	DBG("set_ios\n");

ERROR:SPACING: space required before the open brace '{'
#523: FILE: mmc/host/sdricoh_cs.c:437:
+		if(host->mode != MODE_MMC){

ERROR:SPACING: space required before the open parenthesis '('
#523: FILE: mmc/host/sdricoh_cs.c:437:
+		if(host->mode != MODE_MMC){

ERROR:SPACING: space required before the open brace '{'
#526: FILE: mmc/host/sdricoh_cs.c:440:
+		}else{

ERROR:SPACING: space required after that close brace '}'
#526: FILE: mmc/host/sdricoh_cs.c:440:
+		}else{

ERROR:SPACING: space required after that close brace '}'
#529: FILE: mmc/host/sdricoh_cs.c:443:
+	}else if(ios->power_mode == MMC_POWER_UP) {

ERROR:SPACING: space required before the open parenthesis '('
#529: FILE: mmc/host/sdricoh_cs.c:443:
+	}else if(ios->power_mode == MMC_POWER_UP) {

ERROR:SPACING: space required before the open parenthesis '('
#544: FILE: mmc/host/sdricoh_cs.c:458:
+	if(switchlocked)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#583: FILE: mmc/host/sdricoh_cs.c:497:
+	mmc = pcmcia_dev->priv =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'controler' may be misspelled - perhaps 'controller'?
#604: FILE: mmc/host/sdricoh_cs.c:518:
+	/* reset the controler */
 	             ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#610: FILE: mmc/host/sdricoh_cs.c:524:
+
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#619: FILE: mmc/host/sdricoh_cs.c:533:
+      err:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: mmc/host/sdricoh_cs.c:548:
+	INFO("Searching MMC controller for pcmcia device %s %s ...\n",
+		pcmcia_dev->prod_id[0],pcmcia_dev->prod_id[1] );

ERROR:SPACING: space required after that ',' (ctx:VxV)
#634: FILE: mmc/host/sdricoh_cs.c:548:
+		pcmcia_dev->prod_id[0],pcmcia_dev->prod_id[1] );
 		                      ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#634: FILE: mmc/host/sdricoh_cs.c:548:
+		pcmcia_dev->prod_id[0],pcmcia_dev->prod_id[1] );

WARNING:TYPO_SPELLING: 'controler' may be misspelled - perhaps 'controller'?
#636: FILE: mmc/host/sdricoh_cs.c:550:
+	/* search pci cardbus bridge that contains the mmc controler */
 	                                                   ^^^^^^^^^

ERROR:SPACING: space required before the open brace '{'
#642: FILE: mmc/host/sdricoh_cs.c:556:
+		if (!sdricoh_init_mmc(pci_dev, pcmcia_dev)){

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#647: FILE: mmc/host/sdricoh_cs.c:561:
+
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#663: FILE: mmc/host/sdricoh_cs.c:577:
+		struct sdricoh_host *host = mmc_priv(mmc);
+		mmc_remove_host(mmc);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#670: FILE: mmc/host/sdricoh_cs.c:584:
+
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#674: FILE: mmc/host/sdricoh_cs.c:588:
+        struct mmc_host *mmc = link->priv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: mmc/host/sdricoh_cs.c:588:
+        struct mmc_host *mmc = link->priv;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: mmc/host/sdricoh_cs.c:596:
+        struct mmc_host *mmc = link->priv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: mmc/host/sdricoh_cs.c:596:
+        struct mmc_host *mmc = link->priv;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#718: FILE: mmc/host/sdricoh_cs.c:632:
+
+}

WARNING:SPLIT_STRING: quoted string split across lines
#733: FILE: mmc/host/sdricoh_cs.c:647:
+MODULE_PARM_DESC(switchlocked, "Switch the cards locked status."
+		"Use this when unlocked cards are shown readonly (default 0)");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 93 errors, 61 warnings, 28 checks, 665 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
