CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/jump_label.h:26:
+extern int jump_label_update(const char *name, enum jump_label_type type,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/jump_label.h:28:
+extern void jump_label_transform(struct jump_entry *entry,

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#83: FILE: include/linux/jump_label.h:31:
+#define enable_jump_label_locked(name) \
+	jump_label_update(name, JUMP_LABEL_ENABLE, 1);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#88: FILE: include/linux/jump_label.h:34:
+#define disable_jump_label_locked(name) \
+	jump_label_update(name, JUMP_LABEL_DISABLE, 1);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#91: FILE: include/linux/jump_label.h:37:
+#define enable_jump_label_unlocked(name) \
+	jump_label_update(name, JUMP_LABEL_ENABLE, 0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#94: FILE: include/linux/jump_label.h:40:
+#define disable_jump_label_unlocked(name) \
+	jump_label_update(name, JUMP_LABEL_DISABLE, 0);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/module.h:564:
+extern void jump_label_update_modules(const char *name, enum jump_label_type type, int module_lock);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#161: FILE: include/linux/module.h:690:
+static inline void jump_label_update_modules(const char *name, enum jump_label_type type, int module_lock)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: kernel/module.c:2253:
+	mod->jump_entries = section_objs(hdr, sechdrs, secstrings,
+					"__jump_table",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#211: FILE: kernel/module.c:3040:
+		for(entry = iter_mod->jump_entries;
[...]
+				if (!strcmp(name, entry->name))

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: kernel/module.c:3040:
+		for(entry = iter_mod->jump_entries;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067651.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 4 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067651.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
