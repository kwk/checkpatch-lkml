WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#65: FILE: acpi/toshiba_acpi.c:213:
 }
+static acpi_status hci_write2(u32 reg, u32 in1, u32 in2, u32* result)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#65: FILE: acpi/toshiba_acpi.c:213:
+static acpi_status hci_write2(u32 reg, u32 in1, u32 in2, u32* result)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: acpi/toshiba_acpi.c:215:
+    u32 in[HCI_WORDS] = { HCI_SET, reg, in1, in2, 0, 0 };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: acpi/toshiba_acpi.c:216:
+    u32 out[HCI_WORDS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: acpi/toshiba_acpi.c:217:
+    acpi_status status = hci_raw(in, out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: acpi/toshiba_acpi.c:218:
+    *result = (status == AE_OK) ? out[0] : HCI_FAILURE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: acpi/toshiba_acpi.c:219:
+    return status;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#74: FILE: acpi/toshiba_acpi.c:222:
+static acpi_status hci_read2(u32 reg, u32* out1, u32* out2, u32* result)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#74: FILE: acpi/toshiba_acpi.c:222:
+static acpi_status hci_read2(u32 reg, u32* out1, u32* out2, u32* result)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#74: FILE: acpi/toshiba_acpi.c:222:
+static acpi_status hci_read2(u32 reg, u32* out1, u32* out2, u32* result)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: acpi/toshiba_acpi.c:224:
+    u32 in[HCI_WORDS] = { HCI_GET, reg, *out1, *out2, 0, 0 };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: acpi/toshiba_acpi.c:225:
+    u32 out[HCI_WORDS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: acpi/toshiba_acpi.c:226:
+    acpi_status status = hci_raw(in, out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: acpi/toshiba_acpi.c:227:
+    *out1 = out[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: acpi/toshiba_acpi.c:228:
+    *out2 = out[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: acpi/toshiba_acpi.c:229:
+    *result = (status == AE_OK) ? out[0] : HCI_FAILURE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: acpi/toshiba_acpi.c:230:
+    return status;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#92: FILE: acpi/toshiba_acpi.c:505:
+static char* read_wk(char* p)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#92: FILE: acpi/toshiba_acpi.c:505:
+static char* read_wk(char* p)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: acpi/toshiba_acpi.c:507:
+    u32 hci_result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: acpi/toshiba_acpi.c:508:
+    u32 value, value2;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#96: FILE: acpi/toshiba_acpi.c:509:
+    u32 value, value2;
+    value = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: acpi/toshiba_acpi.c:509:
+    value = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: acpi/toshiba_acpi.c:510:
+    value2 = 0x0001;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: acpi/toshiba_acpi.c:511:
+    hci_read2(0x0056, &value, &value2, &hci_result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: acpi/toshiba_acpi.c:512:
+    if (hci_result == HCI_SUCCESS) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#99: FILE: acpi/toshiba_acpi.c:512:
+    if (hci_result == HCI_SUCCESS) {
[...]
+    } else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: acpi/toshiba_acpi.c:513:
+        p += sprintf(p,"wireless key:                  %d\n", value );$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: acpi/toshiba_acpi.c:513:
+        p += sprintf(p,"wireless key:                  %d\n", value );$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: acpi/toshiba_acpi.c:513:
+        p += sprintf(p,"wireless key:                  %d\n", value );
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#100: FILE: acpi/toshiba_acpi.c:513:
+        p += sprintf(p,"wireless key:                  %d\n", value );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: acpi/toshiba_acpi.c:514:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: acpi/toshiba_acpi.c:515:
+        p += sprintf(p, "ERROR\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: acpi/toshiba_acpi.c:515:
+        p += sprintf(p, "ERROR\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: acpi/toshiba_acpi.c:516:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: acpi/toshiba_acpi.c:518:
+    return p;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#108: FILE: acpi/toshiba_acpi.c:521:
+static char* read_bt(char* p)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#108: FILE: acpi/toshiba_acpi.c:521:
+static char* read_bt(char* p)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: acpi/toshiba_acpi.c:523:
+    u32 hci_result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: acpi/toshiba_acpi.c:524:
+    u32 value, value2;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: acpi/toshiba_acpi.c:525:
+    u32 value, value2;
+    value = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: acpi/toshiba_acpi.c:525:
+    value = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: acpi/toshiba_acpi.c:526:
+    value2 = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: acpi/toshiba_acpi.c:527:
+    hci_read2(0x0056, &value, &value2, &hci_result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: acpi/toshiba_acpi.c:528:
+    if (hci_result == HCI_SUCCESS) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: acpi/toshiba_acpi.c:530:
+        p += sprintf(p,"present:                  %d\n", (value &$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: acpi/toshiba_acpi.c:530:
+        p += sprintf(p,"present:                  %d\n", (value &$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: acpi/toshiba_acpi.c:530:
+        p += sprintf(p,"present:                  %d\n", (value &
                       ^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#118: FILE: acpi/toshiba_acpi.c:530:
0x0f)?1:0);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: acpi/toshiba_acpi.c:531:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: acpi/toshiba_acpi.c:532:
+        p += sprintf(p, "ERROR\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: acpi/toshiba_acpi.c:532:
+        p += sprintf(p, "ERROR\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: acpi/toshiba_acpi.c:533:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: acpi/toshiba_acpi.c:534:
+    value = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: acpi/toshiba_acpi.c:535:
+    value2 = 0x0001;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: acpi/toshiba_acpi.c:536:
+    hci_read2(0x0056, &value, &value2, &hci_result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: acpi/toshiba_acpi.c:537:
+    if (hci_result == HCI_SUCCESS) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: acpi/toshiba_acpi.c:538:
+        p += sprintf(p,"power:                    %d\n", (value & 128)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: acpi/toshiba_acpi.c:538:
+        p += sprintf(p,"power:                    %d\n", (value & 128)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: acpi/toshiba_acpi.c:538:
+        p += sprintf(p,"power:                    %d\n", (value & 128)
                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: acpi/toshiba_acpi.c:539:
+        p += sprintf(p,"attach:                   %d\n", (value &  64)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: acpi/toshiba_acpi.c:539:
+        p += sprintf(p,"attach:                   %d\n", (value &  64)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: acpi/toshiba_acpi.c:539:
+        p += sprintf(p,"attach:                   %d\n", (value &  64)
                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: acpi/toshiba_acpi.c:540:
+        p += sprintf(p,"wireless:                 %d\n", (value & 512)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: acpi/toshiba_acpi.c:540:
+        p += sprintf(p,"wireless:                 %d\n", (value & 512)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: acpi/toshiba_acpi.c:540:
+        p += sprintf(p,"wireless:                 %d\n", (value & 512)
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: acpi/toshiba_acpi.c:541:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: acpi/toshiba_acpi.c:542:
+        p += sprintf(p, "ERROR\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: acpi/toshiba_acpi.c:542:
+        p += sprintf(p, "ERROR\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: acpi/toshiba_acpi.c:543:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: acpi/toshiba_acpi.c:545:
+    return p;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#139: FILE: acpi/toshiba_acpi.c:548:
+static unsigned long write_bt(const char* buffer, unsigned long count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: acpi/toshiba_acpi.c:550:
+    int value, value2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: acpi/toshiba_acpi.c:551:
+    u32 hci_result;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: acpi/toshiba_acpi.c:552:
+    u32 hci_result;
+    value2 = 0x0080;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: acpi/toshiba_acpi.c:552:
+    value2 = 0x0080;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: acpi/toshiba_acpi.c:554:
+    if (sscanf(buffer, " power : %i", &value) == 1 &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: acpi/toshiba_acpi.c:555:
+               value >= 0 && value <= 1) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: acpi/toshiba_acpi.c:555:
+    if (sscanf(buffer, " power : %i", &value) == 1 &&
+               value >= 0 && value <= 1) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: acpi/toshiba_acpi.c:555:
+               value >= 0 && value <= 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: acpi/toshiba_acpi.c:556:
+        hci_write2(0x0056, value, value2, &hci_result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: acpi/toshiba_acpi.c:556:
+        hci_write2(0x0056, value, value2, &hci_result);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: acpi/toshiba_acpi.c:557:
+        if (hci_result != HCI_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: acpi/toshiba_acpi.c:557:
+        if (hci_result != HCI_SUCCESS)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#148: FILE: acpi/toshiba_acpi.c:557:
+        if (hci_result != HCI_SUCCESS)
+            return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: acpi/toshiba_acpi.c:558:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: acpi/toshiba_acpi.c:558:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: acpi/toshiba_acpi.c:559:
+    } else if (sscanf(buffer, " attach : %i", &value) == 1 &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: acpi/toshiba_acpi.c:560:
+                    value >= 0 && value <= 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: acpi/toshiba_acpi.c:560:
+                    value >= 0 && value <= 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: acpi/toshiba_acpi.c:561:
+        value2 = 0x0040;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: acpi/toshiba_acpi.c:561:
+        value2 = 0x0040;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: acpi/toshiba_acpi.c:562:
+        hci_write2(0x0056, value, value2, &hci_result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: acpi/toshiba_acpi.c:562:
+        hci_write2(0x0056, value, value2, &hci_result);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: acpi/toshiba_acpi.c:563:
+        if (hci_result != HCI_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: acpi/toshiba_acpi.c:563:
+        if (hci_result != HCI_SUCCESS)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#154: FILE: acpi/toshiba_acpi.c:563:
+        if (hci_result != HCI_SUCCESS)
+            return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: acpi/toshiba_acpi.c:564:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: acpi/toshiba_acpi.c:564:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: acpi/toshiba_acpi.c:565:
+    } else if (sscanf(buffer, " orinoco : %i", &value) == 1 &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: acpi/toshiba_acpi.c:566:
+                    value >= 0 && value <= 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: acpi/toshiba_acpi.c:566:
+                    value >= 0 && value <= 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: acpi/toshiba_acpi.c:567:
+        value2 = 0x0200;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: acpi/toshiba_acpi.c:567:
+        value2 = 0x0200;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: acpi/toshiba_acpi.c:568:
+        hci_write2(0x0056, value, value2, &hci_result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: acpi/toshiba_acpi.c:568:
+        hci_write2(0x0056, value, value2, &hci_result);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: acpi/toshiba_acpi.c:569:
+        if (hci_result != HCI_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: acpi/toshiba_acpi.c:569:
+        if (hci_result != HCI_SUCCESS)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#160: FILE: acpi/toshiba_acpi.c:569:
+        if (hci_result != HCI_SUCCESS)
+            return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: acpi/toshiba_acpi.c:570:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: acpi/toshiba_acpi.c:570:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: acpi/toshiba_acpi.c:571:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: acpi/toshiba_acpi.c:572:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: acpi/toshiba_acpi.c:572:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: acpi/toshiba_acpi.c:573:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: acpi/toshiba_acpi.c:575:
+    return count;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#168: FILE: acpi/toshiba_acpi.c:577:
+}
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#169: FILE: acpi/toshiba_acpi.c:578:
+/*
+static char* read_arb(char* p)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: acpi/toshiba_acpi.c:584:
+   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: acpi/toshiba_acpi.c:590:
+        p += sprintf(p,"arbitrary call:           %d\n", arbitrary);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: acpi/toshiba_acpi.c:591:
+        p += sprintf(p,"return1:                  %x\n", value);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: acpi/toshiba_acpi.c:592:
+        p += sprintf(p,"return2:                  %x\n",value2);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: acpi/toshiba_acpi.c:594:
+        p += sprintf(p, "ERROR\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: acpi/toshiba_acpi.c:605:
+        arbitrary=value;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: acpi/toshiba_acpi.c:607:
+    while(buffer[i]!=';')i++; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: acpi/toshiba_acpi.c:609:
+        arbitrary2=value;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: acpi/toshiba_acpi.c:610:
+    else     $

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: acpi/toshiba_acpi.c:611:
+            return -EINVAL;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#207: FILE: acpi/toshiba_acpi.c:616:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: acpi/toshiba_acpi.c:629:
+        p += sprintf(p,"arbitrary call:                  %d\n", arbitrary);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: acpi/toshiba_acpi.c:630:
+        p += sprintf(p,"return1:                  %d\n", value);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: acpi/toshiba_acpi.c:631:
+        p += sprintf(p,"return2:                  %d\n",value2);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: acpi/toshiba_acpi.c:633:
+        p += sprintf(p, "ERROR\n");$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: acpi/toshiba_acpi.c:649:
+    i++; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: acpi/toshiba_acpi.c:650:
+    while(buffer[i]!=';')i++; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: acpi/toshiba_acpi.c:652:
+        arbitrary1=value;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: acpi/toshiba_acpi.c:653:
+    else     $

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: acpi/toshiba_acpi.c:654:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: acpi/toshiba_acpi.c:679:
+    {"wireless_key",read_wk,0},$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#258: FILE: acpi/toshiba_acpi.c:679:
+    {"wireless_key",read_wk,0},
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#258: FILE: acpi/toshiba_acpi.c:679:
+    {"wireless_key",read_wk,0},
                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: acpi/toshiba_acpi.c:680:
+    {"bluetooth",read_bt,write_bt},$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: acpi/toshiba_acpi.c:680:
+    {"bluetooth",read_bt,write_bt},
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: acpi/toshiba_acpi.c:680:
+    {"bluetooth",read_bt,write_bt},
                         ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262840.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 62 errors, 79 warnings, 4 checks, 208 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262840.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
