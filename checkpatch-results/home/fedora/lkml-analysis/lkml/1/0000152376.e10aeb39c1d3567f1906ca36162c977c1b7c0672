WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
infrastructure. Instead of Tracepoint, this tracer is based on kprobes(kprobe

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#121: FILE: kernel/trace/Kconfig:356:
+config KPROBE_TRACER
+	depends on KPROBES
+	depends on X86
+	bool "Trace kprobes"
+	select TRACING
+	help
+	  This tracer probes everywhere where kprobes can probe it, and
+	  records various registers and memories specified by user.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#145: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: kernel/trace/trace_kprobe.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#165: FILE: kernel/trace/trace_kprobe.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#166: FILE: kernel/trace/trace_kprobe.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: kernel/trace/trace_kprobe.c:88:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tp)...) over kzalloc(sizeof(struct trace_probe)...)
#245: FILE: kernel/trace/trace_kprobe.c:96:
+	tp = kzalloc(sizeof(struct trace_probe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#330: FILE: kernel/trace/trace_kprobe.c:181:
+		ret = strict_strtoul(&argv[0][2], 0, (unsigned long *)&addr);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#342: FILE: kernel/trace/trace_kprobe.c:193:
+			ret = strict_strtol(tmp, 0, &offset);

CHECK:BRACES: braces {} should be used on all arms of this statement
#364: FILE: kernel/trace/trace_kprobe.c:215:
+	if (tp->symbol) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#368: FILE: kernel/trace/trace_kprobe.c:219:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: kernel/trace/trace_kprobe.c:235:
+	struct trace_probe *tp;
+	mutex_lock(&probe_lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#394: FILE: kernel/trace/trace_kprobe.c:245:
+
+

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#404: FILE: kernel/trace/trace_kprobe.c:255:
+			if (0 == n--)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp"
#431: FILE: kernel/trace/trace_kprobe.c:282:
+	if (tp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: kernel/trace/trace_kprobe.c:287:
+		seq_printf(m, "%c %s%+ld\n",
+			probe_is_return(tp) ? 'r' : 'p',

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: kernel/trace/trace_kprobe.c:291:
+		seq_printf(m, "%c 0x%p\n",
+			probe_is_return(tp) ? 'r' : 'p',

CHECK:LINE_SPACING: Please don't use multiple blank lines
#461: FILE: kernel/trace/trace_kprobe.c:312:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#481: FILE: kernel/trace/trace_kprobe.c:332:
+	ret = done = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#494: FILE: kernel/trace/trace_kprobe.c:345:
+			pr_warning("Line length is too long: "
+				   "Should be less than %d.", WRITE_BUFSIZE);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: kernel/trace/trace_kprobe.c:387:
+	__trace_printk(ip, "%s%s%+ld\n",
+			probe_is_return(tp) ? "<-" : "@",

WARNING:TYPO_SPELLING: 'controling' may be misspelled - perhaps 'controlling'?
#540: FILE: kernel/trace/trace_kprobe.c:391:
+/* Make a debugfs interface for controling probe points */
                                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#555: FILE: kernel/trace/trace_kprobe.c:406:
+		pr_warning("Could not create debugfs "
+			   "'kprobe_probess' entry\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 11 checks, 492 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
