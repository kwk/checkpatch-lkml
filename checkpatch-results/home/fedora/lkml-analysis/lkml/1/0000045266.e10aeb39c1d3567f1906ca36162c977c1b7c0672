WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#29: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: fs/logfs/logfs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#35: FILE: fs/logfs/logfs.h:2:
+ * fs/logfs/logfs.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#82: FILE: fs/logfs/logfs.h:49:
+		printk(KERN_DEBUG fmt, ##arg);	\

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#114: FILE: fs/logfs/logfs.h:81:
+#define LOGFS_LINK_MAX		(1<<30)
                       		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#114: FILE: fs/logfs/logfs.h:81:
+#define LOGFS_LINK_MAX		(1<<30)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:SPACING: space prohibited after that open parenthesis '('
#133: FILE: fs/logfs/logfs.h:100:
+#define SUBLEVEL(level) ( (void)((level) == LEVEL(1)),	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#133: FILE: fs/logfs/logfs.h:100:
+#define SUBLEVEL(level) ( (void)((level) == LEVEL(1)),	\
+		(__force level_t)((__force u8)(level) - 1) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#134: FILE: fs/logfs/logfs.h:101:
+		(__force level_t)((__force u8)(level) - 1) )

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#341: FILE: fs/logfs/logfs.h:308:
+	void	(*free_block)(struct super_block *sb, struct logfs_block*block);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: fs/logfs/logfs.h:310:
+	int	(*write_alias)(struct super_block *sb,
+			struct logfs_block *block,

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#370: FILE: fs/logfs/logfs.h:337:
+	struct mutex s_dirop_mutex;		/* for creat/unlink/rename */
 	                           		       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__i' - possible side-effects?
#485: FILE: fs/logfs/logfs.h:452:
+#define journal_for_each(__i) for (__i = 0; __i < LOGFS_JOURNAL_SEGS; __i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__i' - possible side-effects?
#486: FILE: fs/logfs/logfs.h:453:
+#define for_each_area(__i) for (__i = 0; __i < LOGFS_NO_AREAS; __i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__i' - possible side-effects?
#487: FILE: fs/logfs/logfs.h:454:
+#define for_each_area_down(__i) for (__i = LOGFS_NO_AREAS - 1; __i >= 0; __i--)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: fs/logfs/logfs.h:465:
+int logfs_get_sb_bdev(struct file_system_type *type, int flags,
+		const char *devname, struct vfsmount *mnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: fs/logfs/logfs.h:468:
+static inline int logfs_get_sb_bdev(struct file_system_type *type, int flags,
+		const char *devname, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: fs/logfs/logfs.h:477:
+int logfs_get_sb_mtd(struct file_system_type *type, int flags,
+		int mtdnr, struct vfsmount *mnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: fs/logfs/logfs.h:480:
+static inline int logfs_get_sb_mtd(struct file_system_type *type, int flags,
+		int mtdnr, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: fs/logfs/logfs.h:531:
+int write_alias_journal(struct super_block *sb, u64 ino, u64 bix,
+		level_t level, int child_no, __be64 val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: fs/logfs/logfs.h:538:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t count,
+		loff_t bix, long flags, struct shadow_tree *shadow_tree);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: fs/logfs/logfs.h:542:
+int logfs_delete(struct inode *inode, pgoff_t index,
+		struct shadow_tree *shadow_tree);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: fs/logfs/logfs.h:544:
+int logfs_rewrite_block(struct inode *inode, u64 bix, u64 ofs,
+		gc_level_t gc_level, long flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: fs/logfs/logfs.h:546:
+int logfs_is_valid_block(struct super_block *sb, u64 ofs, u64 ino, u64 bix,
+		gc_level_t gc_level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: fs/logfs/logfs.h:558:
+void logfs_get_segment_entry(struct super_block *sb, u32 segno,
+		struct logfs_segment_entry *se);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: fs/logfs/logfs.h:561:
+void logfs_set_segment_erased(struct super_block *sb, u32 segno, u32 ec,
+		gc_level_t gc_level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: fs/logfs/logfs.h:565:
+struct logfs_block *__alloc_block(struct super_block *sb,
+		u64 ino, u64 bix, level_t level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: fs/logfs/logfs.h:569:
+void initialize_block_counters(struct page *page, struct logfs_block *block,
+		__be64 *array, int page_is_empty);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: fs/logfs/logfs.h:578:
+int logfs_segment_read(struct inode *inode, struct page *page, u64 ofs, u64 bix,
+		level_t level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: fs/logfs/logfs.h:580:
+int logfs_segment_write(struct inode *inode, struct page *page,
+		struct logfs_shadow *shadow);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: fs/logfs/logfs.h:583:
+int logfs_load_object_aliases(struct super_block *sb,
+		struct logfs_obj_alias *oa, int count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: fs/logfs/logfs.h:594:
+void __logfs_buf_write(struct logfs_area *area, u64 ofs, void *buf, size_t len,
+		int use_filler);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: fs/logfs/logfs.h:597:
+static inline void logfs_buf_write(struct logfs_area *area, u64 ofs,
+		void *buf, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: fs/logfs/logfs.h:603:
+static inline void logfs_buf_recover(struct logfs_area *area, u64 ofs,
+		void *buf, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: fs/logfs/logfs.h:615:
+int logfs_get_sb_device(struct file_system_type *type, int flags,
+		struct mtd_info *mtd, struct block_device *bdev,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#672: FILE: fs/logfs/logfs.h:639:
+	BUG();							\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#680: FILE: fs/logfs/logfs.h:647:
+	return cpu_to_be32(crc32(~0, data+skip, len-skip));
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#680: FILE: fs/logfs/logfs.h:647:
+	return cpu_to_be32(crc32(~0, data+skip, len-skip));
 	                                           ^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#732: FILE: fs/logfs/logfs.h:699:
+		/* ifile has seperate areas */
 		             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: fs/logfs/logfs.h:717:
+static inline struct logfs_area *get_area(struct super_block *sb,
+		gc_level_t gc_level)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045266.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 8 warnings, 30 checks, 722 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045266.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
