WARNING:TYPO_SPELLING: 'Formt' may be misspelled - perhaps 'Format'?
#73: FILE: Documentation/kernel-parameters.txt:910:
+			Formt: { "sha1" | "md5" }
 			^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/ima.h:16:
+extern int ima_bprm_check(struct linux_binprm *bprm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/ima.h:17:
+extern int ima_inode_alloc(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/ima.h:18:
+extern void ima_inode_free(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/ima.h:19:
+extern int ima_path_check(struct path *path, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/ima.h:20:
+extern void ima_file_free(struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/ima.h:21:
+extern int ima_file_mmap(struct file *file, unsigned long prot);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#156: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#231: FILE: security/integrity/ima/ima.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#265: FILE: security/integrity/ima/ima.h:35:
+#define IMA_MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#291: FILE: security/integrity/ima/ima.h:61:
+};
+extern struct list_head ima_measurements;	/* list of all measurements */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#319: FILE: security/integrity/ima/ima.h:89:
+};
+extern struct ima_h_table ima_htable;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#373: FILE: security/integrity/ima/ima_api.c:1:
+/*

WARNING:TYPO_SPELLING: 'keypairs' may be misspelled - perhaps 'key pairs'?
#476: FILE: security/integrity/ima/ima_api.c:104:
+ * The policy is defined in terms of keypairs:
                                      ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#477: FILE: security/integrity/ima/ima_api.c:105:
+ * ^I^Isubj=, obj=, type=, func=, mask=, fsmagic=$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: security/integrity/ima/ima_api.c:107:
+ * ^Ifunc: PATH_CHECK | BPRM_CHECK | FILE_MMAP$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: security/integrity/ima/ima_api.c:108:
+ * ^Imask: contains the permission mask$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#488: FILE: security/integrity/ima/ima_api.c:116:
+ * error, return an error code.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#534: FILE: security/integrity/ima/ima_api.c:162:
+ * ^I- multiple copies of the same file on either the same or$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#544: FILE: security/integrity/ima/ima_api.c:172:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#564: FILE: security/integrity/ima/ima_audit.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: security/integrity/ima/ima_audit.c:10:
+ * ^IAudit calls for the integrity subsystem$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#591: FILE: security/integrity/ima/ima_audit.c:28:
+	rc = strict_strtoul(str, 0, &audit);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#593: FILE: security/integrity/ima/ima_audit.c:30:
+		printk(KERN_INFO "ima: invalid ima_audit value\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#600: FILE: security/integrity/ima/ima_audit.c:37:
+__setup("ima_audit=", ima_audit_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#648: FILE: security/integrity/ima/ima_crypto.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#660: FILE: security/integrity/ima/ima_crypto.c:13:
+ * ^ICalculates md5/sha1 file hash, template hash, boot-aggreate hash$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#794: FILE: security/integrity/ima/ima_iint.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#806: FILE: security/integrity/ima/ima_iint.c:13:
+ * ^I- implements the IMA hooks: ima_inode_alloc, ima_inode_free$

CHECK:BRACES: braces {} should be used on all arms of this statement
#868: FILE: security/integrity/ima/ima_iint.c:75:
+		if (rc == -EEXIST) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#871: FILE: security/integrity/ima/ima_iint.c:78:
+		} else

WARNING:SIZEOF_PARENTHESIS: sizeof *iint should be sizeof(*iint)
#964: FILE: security/integrity/ima/ima_iint.c:171:
+	memset(iint, 0, sizeof *iint);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#985: FILE: security/integrity/ima/ima_init.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1064: FILE: security/integrity/ima/ima_main.c:1:
+/*

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1111: FILE: security/integrity/ima/ima_main.c:48:
+__setup("ima_hash=", hash_setup);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1203: FILE: security/integrity/ima/ima_main.c:140:
+ * ^I- Opening a file for write when already open for read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1206: FILE: security/integrity/ima/ima_main.c:143:
+ * ^I  could result in a file measurement error.$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == 0'
#1225: FILE: security/integrity/ima/ima_main.c:162:
+	if ((mask & MAY_WRITE) || (mask == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == 0'
#1234: FILE: security/integrity/ima/ima_main.c:171:
+	if ((mask & MAY_WRITE) || (mask == 0))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1350: FILE: security/integrity/ima/ima_policy.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1359: FILE: security/integrity/ima/ima_policy.c:10:
+ * ^I- initialize default measure policy rules$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1371: FILE: security/integrity/ima/ima_policy.c:22:
+#define IMA_FUNC ^I0x0001$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1372: FILE: security/integrity/ima/ima_policy.c:23:
+#define IMA_MASK ^I0x0002$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1389: FILE: security/integrity/ima/ima_policy.c:40:
+	{.action = DONT_MEASURE,.fsmagic = PROC_SUPER_MAGIC,
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1391: FILE: security/integrity/ima/ima_policy.c:42:
+	{.action = DONT_MEASURE,.fsmagic = SYSFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1391: FILE: security/integrity/ima/ima_policy.c:42:
+	{.action = DONT_MEASURE,.fsmagic = SYSFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1392: FILE: security/integrity/ima/ima_policy.c:43:
+	{.action = DONT_MEASURE,.fsmagic = DEBUGFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1392: FILE: security/integrity/ima/ima_policy.c:43:
+	{.action = DONT_MEASURE,.fsmagic = DEBUGFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1393: FILE: security/integrity/ima/ima_policy.c:44:
+	{.action = DONT_MEASURE,.fsmagic = TMPFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1393: FILE: security/integrity/ima/ima_policy.c:44:
+	{.action = DONT_MEASURE,.fsmagic = TMPFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1394: FILE: security/integrity/ima/ima_policy.c:45:
+	{.action = DONT_MEASURE,.fsmagic = SECURITYFS_MAGIC,
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1396: FILE: security/integrity/ima/ima_policy.c:47:
+	{.action = DONT_MEASURE,.fsmagic = 0xF97CFF8C,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1396: FILE: security/integrity/ima/ima_policy.c:47:
+	{.action = DONT_MEASURE,.fsmagic = 0xF97CFF8C,.flags = IMA_FSMAGIC},
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1397: FILE: security/integrity/ima/ima_policy.c:48:
+	{.action = MEASURE,.func = FILE_MMAP,.mask = MAY_EXEC,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1397: FILE: security/integrity/ima/ima_policy.c:48:
+	{.action = MEASURE,.func = FILE_MMAP,.mask = MAY_EXEC,
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1399: FILE: security/integrity/ima/ima_policy.c:50:
+	{.action = MEASURE,.func = BPRM_CHECK,.mask = MAY_EXEC,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1399: FILE: security/integrity/ima/ima_policy.c:50:
+	{.action = MEASURE,.func = BPRM_CHECK,.mask = MAY_EXEC,
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1401: FILE: security/integrity/ima/ima_policy.c:52:
+	{.action = MEASURE,.func = PATH_CHECK,.mask = MAY_READ,.uid = 0,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1401: FILE: security/integrity/ima/ima_policy.c:52:
+	{.action = MEASURE,.func = PATH_CHECK,.mask = MAY_READ,.uid = 0,
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1401: FILE: security/integrity/ima/ima_policy.c:52:
+	{.action = MEASURE,.func = PATH_CHECK,.mask = MAY_READ,.uid = 0,
 	                                                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1427: FILE: security/integrity/ima/ima_policy.c:78:
+	if ((rule->flags & IMA_FSMAGIC)
+	    && rule->fsmagic != inode->i_sb->s_magic)

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1466: FILE: security/integrity/ima/ima_policy.c:117:
+ * ima_measure points to either the measure_default_rules or the
+ * the new measure_policy_rules.)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1482: FILE: security/integrity/ima/ima_queue.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#1551: FILE: security/integrity/ima/ima_queue.c:70:
+	if (qe == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1552: FILE: security/integrity/ima/ima_queue.c:71:
+	if (qe == NULL) {
+		pr_err("OUT OF MEMORY ERROR creating queue entry.\n");

WARNING:SIZEOF_PARENTHESIS: sizeof digest should be sizeof(digest)
#1592: FILE: security/integrity/ima/ima_queue.c:111:
+		memcpy(digest, entry->digest, sizeof digest);

WARNING:SIZEOF_PARENTHESIS: sizeof digest should be sizeof(digest)
#1607: FILE: security/integrity/ima/ima_queue.c:126:
+		memset(digest, 0xff, sizeof digest);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 32 warnings, 18 checks, 1468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
