WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#365: FILE: mm/page_alloc.c:1574:
+	printk("Active_anon:%lu active_file:%lu inactive_anon%lu\n"

WARNING:SPLIT_STRING: quoted string split across lines
#383: FILE: mm/page_alloc.c:1603:
 			" high:%lukB"
+			" active_anon:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#384: FILE: mm/page_alloc.c:1604:
+			" active_anon:%lukB"
+			" inactive_anon:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#385: FILE: mm/page_alloc.c:1605:
+			" inactive_anon:%lukB"
+			" active_file:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#386: FILE: mm/page_alloc.c:1606:
+			" active_file:%lukB"
+			" inactive_file:%lukB"

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#441: FILE: mm/swap.c:148:
 	if (PageLRU(page) && !PageActive(page)) {
+	if (page_anon(page)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#444: FILE: mm/swap.c:150:
+		del_page_from_inactive_anon_list(zone,page);
 		                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#561: FILE: mm/swap.c:413:
+EXPORT_SYMBOL(__pagevec_lru_add_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#638: FILE: mm/migrate.c:56:
+			if (PageActive(page)) {
+			    if (page_anon(page)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: mm/migrate.c:57:
+^I^I^I    if (page_anon(page)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#639: FILE: mm/migrate.c:57:
+			    if (page_anon(page)) 

WARNING:TABSTOP: Statements should start on a tabstop
#641: FILE: mm/migrate.c:59:
+			    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#643: FILE: mm/migrate.c:61:
+			} else {
+			    if (page_anon(page)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: mm/migrate.c:62:
+^I^I^I    if (page_anon(page)) $

WARNING:TABSTOP: Statements should start on a tabstop
#644: FILE: mm/migrate.c:62:
+			    if (page_anon(page)) 

WARNING:TABSTOP: Statements should start on a tabstop
#646: FILE: mm/migrate.c:64:
+			    else

WARNING:SPLIT_STRING: quoted string split across lines
#760: FILE: mm/vmstat.c:514:
 			   "\n        high     %lu"
+			   "\n        scanned  %lu (ao: %lu io: %lu af: %lu if: %lu)"

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#901: FILE: mm/vmscan.c:700:
+			if (file) {
+			    zone->recent_rotated_file += sc->activated;

WARNING:TABSTOP: Statements should start on a tabstop
#904: FILE: mm/vmscan.c:703:
+			    if (PageActive(page))

WARNING:TABSTOP: Statements should start on a tabstop
#906: FILE: mm/vmscan.c:705:
+			    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#908: FILE: mm/vmscan.c:707:
+			} else {
+			    zone->recent_rotated_anon += sc->activated;

WARNING:TABSTOP: Statements should start on a tabstop
#911: FILE: mm/vmscan.c:710:
+			    if (PageActive(page))

WARNING:TABSTOP: Statements should start on a tabstop
#913: FILE: mm/vmscan.c:712:
+			    else

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#928: FILE: mm/vmscan.c:748:
+				+ zone_page_state(zone, NR_INACTIVE_FILE))*3;
 				                                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1111: FILE: mm/vmscan.c:903:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1112: FILE: mm/vmscan.c:904:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,
+		unsigned long *anon_percent, unsigned long *file_percent)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1146: FILE: mm/vmscan.c:938:
+ ^I *                 anon      recent_rotated_anon$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1146: FILE: mm/vmscan.c:938:
+ ^I *                 anon      recent_rotated_anon$

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)100' could be '100UL'
#1157: FILE: mm/vmscan.c:949:
+	*anon_percent = (unsigned long)100 * anon_l / (anon_l + file_l);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: mm/vmscan.c:1011:
+	while (nr_active_file || nr_inactive_file ||
+				nr_active_anon || nr_inactive_anon) {

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_active_file, sc->swap_cluster_max)
#1236: FILE: mm/vmscan.c:1013:
+			nr_to_scan = min(nr_active_file,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: mm/vmscan.c:1014:
+			nr_to_scan = min(nr_active_file,
+					(unsigned long)sc->swap_cluster_max);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_inactive_file, sc->swap_cluster_max)
#1243: FILE: mm/vmscan.c:1020:
+			nr_to_scan = min(nr_inactive_file,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1244: FILE: mm/vmscan.c:1021:
+			nr_to_scan = min(nr_inactive_file,
+					(unsigned long)sc->swap_cluster_max);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_active_anon, sc->swap_cluster_max)
#1254: FILE: mm/vmscan.c:1028:
+			nr_to_scan = min(nr_active_anon,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: mm/vmscan.c:1029:
+			nr_to_scan = min(nr_active_anon,
 					(unsigned long)sc->swap_cluster_max);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_inactive_anon, sc->swap_cluster_max)
#1265: FILE: mm/vmscan.c:1035:
+			nr_to_scan = min(nr_inactive_anon,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1266: FILE: mm/vmscan.c:1036:
+			nr_to_scan = min(nr_inactive_anon,
 					(unsigned long)sc->swap_cluster_max);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1295: FILE: mm/vmscan.c:1280:
+^I^I^I^I   + zone_page_state(zone, NR_ACTIVE_FILE) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1296: FILE: mm/vmscan.c:1281:
+^I^I^I^I   + zone_page_state(zone, NR_INACTIVE_ANON) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1327: FILE: mm/vmscan.c:1493:
+				nr_to_scan = min(nr_pages,
+					zone_page_state(zone, NR_ACTIVE_FILE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1352: FILE: mm/vmscan.c:1512:
+			nr_to_scan = min(nr_pages,
+				zone_page_state(zone, NR_INACTIVE_FILE));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping->a_ops->writepage"
#1459: FILE: include/linux/mm.h:608:
+	if ((unlikely(mapping->a_ops->writepage == NULL && PageDirty(page))))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1599: FILE: include/linux/swap.h:181:
+extern void FASTCALL(lru_cache_add_file(struct page *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1599: FILE: include/linux/swap.h:181:
+extern void FASTCALL(lru_cache_add_file(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1600: FILE: include/linux/swap.h:182:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1600: FILE: include/linux/swap.h:182:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1601: FILE: include/linux/swap.h:183:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1601: FILE: include/linux/swap.h:183:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1602: FILE: include/linux/swap.h:184:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1602: FILE: include/linux/swap.h:184:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000454214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 30 warnings, 14 checks, 1411 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000454214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
