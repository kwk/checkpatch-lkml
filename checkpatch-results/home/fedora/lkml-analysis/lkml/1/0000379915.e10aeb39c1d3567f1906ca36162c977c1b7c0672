WARNING:REPEATED_WORD: Possible repeated word: 'the'
#41: 
it belongs to and the the page has a page_cgroup associated with it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/memcontrol.h:28:
+extern void mm_init_cgroup(struct mm_struct *mm, struct task_struct *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/memcontrol.h:29:
+extern void mm_free_cgroup(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/memcontrol.h:30:
+extern void page_assign_page_cgroup(struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/memcontrol.h:31:
+extern void page_assign_page_cgroup(struct page *page,
+					struct page_cgroup *pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/memcontrol.h:32:
+extern struct page_cgroup *page_get_page_cgroup(struct page *page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: include/linux/memcontrol.h:36:
+static inline void mm_init_cgroup(struct mm_struct *mm,
+					struct task_struct *p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: include/linux/memcontrol.h:45:
+static inline void page_assign_page_cgroup(struct page *page,
+						struct page_cgroup *pc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: kernel/fork.c:333:
+static struct mm_struct * mm_init(struct mm_struct * mm, struct task_struct *p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: kernel/fork.c:333:
+static struct mm_struct * mm_init(struct mm_struct * mm, struct task_struct *p)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cont->parent'
#289: FILE: mm/memcontrol.c:143:
+	if (unlikely((cont->parent) == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#289: FILE: mm/memcontrol.c:143:
+	if (unlikely((cont->parent) == NULL)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#292: FILE: mm/memcontrol.c:146:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mem)...) over kzalloc(sizeof(struct mem_cgroup)...)
#293: FILE: mm/memcontrol.c:147:
+		mem = kzalloc(sizeof(struct mem_cgroup), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#295: FILE: mm/memcontrol.c:149:
+	if (mem == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379915.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 1 warnings, 12 checks, 220 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379915.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
