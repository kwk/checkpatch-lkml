WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#140: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2085: FILE: fs/notify/dnotify/dnotify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dn"
#2119: FILE: fs/notify/dnotify/dnotify.c:35:
+	for (dn = inode->i_dnotify; dn != NULL; dn = dn->dn_next)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2124: FILE: fs/notify/dnotify/dnotify.c:40:
+void dnotify_flush(struct file *filp, fl_owner_t id)
                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2136: FILE: fs/notify/dnotify/dnotify.c:52:
+		if ((dn->dn_owner == id) && (dn->dn_filp == filp)) {
 		                                            ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dn->dn_owner == id'
#2136: FILE: fs/notify/dnotify/dnotify.c:52:
+		if ((dn->dn_owner == id) && (dn->dn_filp == filp)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dn->dn_filp == filp'
#2136: FILE: fs/notify/dnotify/dnotify.c:52:
+		if ((dn->dn_owner == id) && (dn->dn_filp == filp)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2147: FILE: fs/notify/dnotify/dnotify.c:63:
+int fcntl_dirnotify(int fd, struct file *filp, unsigned long arg)
                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2158: FILE: fs/notify/dnotify/dnotify.c:74:
+		dnotify_flush(filp, id);
 		              ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn"
#2167: FILE: fs/notify/dnotify/dnotify.c:83:
+	if (dn == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2172: FILE: fs/notify/dnotify/dnotify.c:88:
+		if ((odn->dn_owner == id) && (odn->dn_filp == filp)) {
 		                                              ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'odn->dn_owner == id'
#2172: FILE: fs/notify/dnotify/dnotify.c:88:
+		if ((odn->dn_owner == id) && (odn->dn_filp == filp)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'odn->dn_filp == filp'
#2172: FILE: fs/notify/dnotify/dnotify.c:88:
+		if ((odn->dn_owner == id) && (odn->dn_filp == filp)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2186: FILE: fs/notify/dnotify/dnotify.c:102:
+	 * between accesses to descriptor table and ->i_dnotify */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2187: FILE: fs/notify/dnotify/dnotify.c:103:
+	if (f != filp)
 	         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2190: FILE: fs/notify/dnotify/dnotify.c:106:
+	error = __f_setown(filp, task_pid(current), PIDTYPE_PID, 0);
 	                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2196: FILE: fs/notify/dnotify/dnotify.c:112:
+	dn->dn_filp = filp;
 	              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2204: FILE: fs/notify/dnotify/dnotify.c:120:
+		return filp->f_op->dir_notify(filp, arg);
 		                              ^^^^

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#2215: FILE: fs/notify/dnotify/dnotify.c:131:
+	struct dnotify_struct *	dn;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#2217: FILE: fs/notify/dnotify/dnotify.c:133:
+	struct fown_struct *	fown;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2229: FILE: fs/notify/dnotify/dnotify.c:145:
+		if (dn->dn_mask & DN_MULTISHOT)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2231: FILE: fs/notify/dnotify/dnotify.c:147:
+		else {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2242: FILE: fs/notify/dnotify/dnotify.c:158:
+EXPORT_SYMBOL(__inode_dir_notify);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2274: FILE: fs/notify/dnotify/dnotify.c:190:
+	dn_cache = kmem_cache_create("dnotify_cache",
+		sizeof(struct dnotify_struct), 0, SLAB_PANIC, NULL);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2285: FILE: fs/notify/inotify/Kconfig:1:
+config INOTIFY
+	bool "Inotify file change notification support"
+	default y
+	---help---
+	  Say Y here to enable inotify support.  Inotify is a file change
+	  notification system and a replacement for dnotify.  Inotify fixes
+	  numerous shortcomings in dnotify and introduces several new features
+	  including multiple file events, one-shot support, and unmount
+	  notification.
+
+	  For more information, see <file:Documentation/filesystems/inotify.txt>
+
+	  If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2299: FILE: fs/notify/inotify/Kconfig:15:
+config INOTIFY_USER
+	bool "Inotify support for userspace"
+	depends on INOTIFY
+	default y
+	---help---
+	  Say Y here to enable inotify support for userspace, including the
+	  associated system calls.  Inotify allows monitoring of both files and
+	  directories via a single open fd.  Events are read from the file
+	  descriptor, which is also select()- and poll()-able.
+
+	  For more information, see <file:Documentation/filesystems/inotify.txt>
+
+	  If unsure, say Y.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2326: FILE: fs/notify/inotify/inotify.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2368: FILE: fs/notify/inotify/inotify.c:43:
+ * ^Iinode_lock (protects the super_block->s_inodes list)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2369: FILE: fs/notify/inotify/inotify.c:44:
+ * ^Iinode->inotify_mutex (protects inode->inotify_watches and watches->i_list)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2370: FILE: fs/notify/inotify/inotify.c:45:
+ * ^I^Iinotify_handle->mutex (protects inotify_handle and watches->h_list)$

WARNING:TYPO_SPELLING: 'reponsible' may be misspelled - perhaps 'responsible'?
#2389: FILE: fs/notify/inotify/inotify.c:64:
+ * is reponsible for the final put after receiving IN_IGNORED, or when using
       ^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2437: FILE: fs/notify/inotify/inotify.c:112:
+	struct super_block *sb = watch->inode->i_sb;
+	spin_lock(&sb_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2459: FILE: fs/notify/inotify/inotify.c:134:
+		iput(watch->inode);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2469: FILE: fs/notify/inotify/inotify.c:144:
+	struct super_block *sb = watch->inode->i_sb;
+	put_inotify_watch(watch);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2486: FILE: fs/notify/inotify/inotify.c:161:
+		ret = idr_get_new_above(&ih->idr, watch, ih->last_wd+1, &watch->wd);
 		                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '&=' (ctx:WxO)
#2524: FILE: fs/notify/inotify/inotify.c:199:
+				child->d_flags &=~DCACHE_INOTIFY_PARENT_WATCHED;
 				               ^

ERROR:SPACING: space required before that '~' (ctx:OxV)
#2524: FILE: fs/notify/inotify/inotify.c:199:
+				child->d_flags &=~DCACHE_INOTIFY_PARENT_WATCHED;
 				                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2636: FILE: fs/notify/inotify/inotify.c:311:
+		u32 watch_mask = watch->mask;
+		if (watch_mask & mask) {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2637: FILE: fs/notify/inotify/inotify.c:312:
+			struct inotify_handle *ih= watch->ih;
 			                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2638: FILE: fs/notify/inotify/inotify.c:313:
+			struct inotify_handle *ih= watch->ih;
+			mutex_lock(&ih->mutex);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2670: FILE: fs/notify/inotify/inotify.c:345:
+	if (inotify_inode_watched(inode)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2676: FILE: fs/notify/inotify/inotify.c:351:
+	} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2709: FILE: fs/notify/inotify/inotify.c:384:
+		 * doing an __iget/iput with MS_ACTIVE clear would actually
 		                   ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&next_i->i_sb_list != list'
#2732: FILE: fs/notify/inotify/inotify.c:407:
+		if ((&next_i->i_sb_list != list) &&
+				atomic_read(&next_i->i_count) &&
+				!(next_i->i_state & (I_CLEAR | I_FREEING |
+					I_WILL_FREE))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2733: FILE: fs/notify/inotify/inotify.c:408:
+		if ((&next_i->i_sb_list != list) &&
+				atomic_read(&next_i->i_count) &&

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2749: FILE: fs/notify/inotify/inotify.c:424:
+			iput(need_iput_tmp);
 			^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2755: FILE: fs/notify/inotify/inotify.c:430:
+			struct inotify_handle *ih= watch->ih;
 			                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2756: FILE: fs/notify/inotify/inotify.c:431:
+			struct inotify_handle *ih= watch->ih;
+			mutex_lock(&ih->mutex);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2763: FILE: fs/notify/inotify/inotify.c:438:
+		iput(inode);		
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2763: FILE: fs/notify/inotify/inotify.c:438:
+^I^Iiput(inode);^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#2781: FILE: fs/notify/inotify/inotify.c:456:
+		struct inotify_handle *ih = watch->ih;
+		mutex_lock(&ih->mutex);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ih)...) over kmalloc(sizeof(struct inotify_handle)...)
#2799: FILE: fs/notify/inotify/inotify.c:474:
+	ih = kmalloc(sizeof(struct inotify_handle), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#2924: FILE: fs/notify/inotify/inotify.c:599:
+	struct super_block *sb = watch->inode->i_sb;
+	put_inotify_watch(watch);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3243: FILE: fs/notify/inotify/inotify_user.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3294: FILE: fs/notify/inotify/inotify_user.c:52:
+ * ^Iinode->inotify_mutex (protects inode's watch list)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3295: FILE: fs/notify/inotify/inotify_user.c:53:
+ * ^I^Iinotify_handle->mutex (protects inotify_handle's watch list)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3296: FILE: fs/notify/inotify/inotify_user.c:54:
+ * ^I^I^Iinotify_dev->ev_mutex (protects device's event queue)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3317: FILE: fs/notify/inotify/inotify_user.c:75:
+^Iwait_queue_head_t ^Iwq;^I^I/* wait queue for i/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3320: FILE: fs/notify/inotify/inotify_user.c:78:
+^Istruct list_head ^Ievents;^I^I/* list of queued events */$

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#3368: FILE: fs/notify/inotify/inotify_user.c:126:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#3378: FILE: fs/notify/inotify/inotify_user.c:136:
+		.extra1		= &zero,

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#3388: FILE: fs/notify/inotify/inotify_user.c:146:
+		.extra1		= &zero

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3429: FILE: fs/notify/inotify/inotify_user.c:187:
+static struct inotify_kernel_event * kernel_event(s32 wd, u32 mask, u32 cookie,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3534: FILE: fs/notify/inotify/inotify_user.c:292:
+	if (last && last->event.mask == mask && last->event.wd == wd &&
+			last->event.cookie == cookie) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3599: FILE: fs/notify/inotify/inotify_user.c:357:
+		struct inotify_kernel_event *kevent;
+		kevent = inotify_dev_get_event(dev);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3609: FILE: fs/notify/inotify/inotify_user.c:367:
+		      unsigned flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3675: FILE: fs/notify/inotify/inotify_user.c:433:
+	size_t event_size = sizeof (struct inotify_event);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3685: FILE: fs/notify/inotify/inotify_user.c:443:
+	while (1) {
+

ERROR:SPACING: space required before the open brace '{'
#3746: FILE: fs/notify/inotify/inotify_user.c:504:
+			if (copy_to_user(buf, kevent->name, kevent->event.len)){

CHECK:SPACING: No space is necessary after a cast
#3796: FILE: fs/notify/inotify/inotify_user.c:554:
+	p = (void __user *) arg;

CHECK:SPACING: No space is necessary after a cast
#3800: FILE: fs/notify/inotify/inotify_user.c:558:
+		ret = put_user(dev->queue_size, (int __user *) p);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3826: FILE: fs/notify/inotify/inotify_user.c:584:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3840: FILE: fs/notify/inotify/inotify_user.c:598:
+	filp = get_empty_filp();
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3841: FILE: fs/notify/inotify/inotify_user.c:599:
+	if (!filp) {
 	     ^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct inotify_device)...)
#3853: FILE: fs/notify/inotify/inotify_user.c:611:
+	dev = kmalloc(sizeof(struct inotify_device), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3887: FILE: fs/notify/inotify/inotify_user.c:645:
+	fd_install(fd, filp);
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3894: FILE: fs/notify/inotify/inotify_user.c:652:
+	put_filp(filp);
 	         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3910: FILE: fs/notify/inotify/inotify_user.c:668:
+	struct file *filp;
 	             ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3912: FILE: fs/notify/inotify/inotify_user.c:670:
+	unsigned flags = 0;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3914: FILE: fs/notify/inotify/inotify_user.c:672:
+	filp = fget_light(fd, &fput_needed);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3915: FILE: fs/notify/inotify/inotify_user.c:673:
+	if (unlikely(!filp))
 	              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3945: FILE: fs/notify/inotify/inotify_user.c:703:
+	fput_light(filp, fput_needed);
 	           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3951: FILE: fs/notify/inotify/inotify_user.c:709:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3955: FILE: fs/notify/inotify/inotify_user.c:713:
+	filp = fget_light(fd, &fput_needed);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3956: FILE: fs/notify/inotify/inotify_user.c:714:
+	if (unlikely(!filp))
 	              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3971: FILE: fs/notify/inotify/inotify_user.c:729:
+	fput_light(filp, fput_needed);
 	           ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3984: FILE: fs/notify/inotify/inotify_user.c:742:
+    .name           = "inotifyfs",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3985: FILE: fs/notify/inotify/inotify_user.c:743:
+    .get_sb         = inotify_get_sb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3986: FILE: fs/notify/inotify/inotify_user.c:744:
+    .kill_sb        = kill_anon_super,$

WARNING:TYPO_SPELLING: 'cannnot' may be misspelled - perhaps 'cannot'?
#3990: FILE: fs/notify/inotify/inotify_user.c:748:
+ * inotify_user_setup - Our initialization function.  Note that we cannnot return
                                                                    ^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199675.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 61 warnings, 20 checks, 1989 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199675.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
