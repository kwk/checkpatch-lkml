CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#44: FILE: include/linux/kernel.h:211:
+extern int parse_shell_args(const char *in, char *out, size_t out_size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: lib/parse_shell_args.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#69: FILE: lib/parse_shell_args.c:2:
+ * lib/parse_shell_args.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#117: FILE: lib/parse_shell_args.c:50:
+		switch (state) {
+			case S_START:
[...]
+			case S_NORMAL:
[...]
+			case S_QUOTE:
[...]
+			case S_DQUOTE:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#119: FILE: lib/parse_shell_args.c:52:
+				switch (*in_p) {
+					case '\n':
+					case '\0':
[...]
+					case ' ':
+					case '\t':
[...]
+					case '\'':
[...]
+					case '"':
[...]
+					default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#147: FILE: lib/parse_shell_args.c:80:
+				switch (*in_p) {
+					case '\n':
+					case '\0':
[...]
+					case ' ':
+					case '\t':
[...]
+					case '\'':
[...]
+					case '\"':
[...]
+					case '\\':
[...]
+					default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#177: FILE: lib/parse_shell_args.c:110:
+				switch (*in_p) {
+					case '\'':
[...]
+					case '\n':
+					case '\0':
[...]
+					default:

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#185: FILE: lib/parse_shell_args.c:118:
+						return 0;
+						break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#192: FILE: lib/parse_shell_args.c:125:
+				switch (*in_p) {
+					case '\"':
[...]
+					case '\n':
+					case '\0':
[...]
+					case '\\':
[...]
+					default:

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#200: FILE: lib/parse_shell_args.c:133:
+						return 0;
+						break;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#202: FILE: lib/parse_shell_args.c:135:
+						if (*(in_p+1) == '$' ||

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: lib/parse_shell_args.c:135:
+						if (*(in_p+1) == '$' ||
 						          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#202: FILE: lib/parse_shell_args.c:135:
+						if (*(in_p+1) == '$' ||
[...]
+						} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: lib/parse_shell_args.c:136:
+						if (*(in_p+1) == '$' ||
+								*(in_p+1) == '`' ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#203: FILE: lib/parse_shell_args.c:136:
+								*(in_p+1) == '`' ||
 								      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#204: FILE: lib/parse_shell_args.c:137:
+								*(in_p+1) == '"' ||
 								      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#205: FILE: lib/parse_shell_args.c:138:
+								*(in_p+1) == '\\' ||
 								      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: lib/parse_shell_args.c:139:
+								*(in_p+1) == '\n') {
 								      ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#209: FILE: lib/parse_shell_args.c:142:
+						} else

CHECK:BRACES: Unbalanced braces around else statement
#209: FILE: lib/parse_shell_args.c:142:
+						} else

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#219: FILE: lib/parse_shell_args.c:152:
+				return 0;
+				break;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#249: FILE: lib/parse_shell_args.c:182:
+	for(i=0; i < argc; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: lib/parse_shell_args.c:182:
+	for(i=0; i < argc; i++) {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#253: FILE: lib/parse_shell_args.c:186:
+			printf("%s: %s, but expected %s\n", in , out_p, expected_out);
 			                                       ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164770.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 8 warnings, 9 checks, 254 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164770.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
