WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#485: FILE: Documentation/DocBook/utrace.tmpl:400:
+!Iinclude/linux/utrace.h
  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MEMORY_BARRIER: memory barrier without comment
#786: FILE: include/linux/tracehook.h:367:
+	smp_mb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "task_utrace_struct"
#787: FILE: include/linux/tracehook.h:368:
+	if (task_utrace_struct(task) != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#798: FILE: include/linux/tracehook.h:385:
+	BUG_ON(task->exit_state != EXIT_DEAD);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "task_utrace_struct"
#799: FILE: include/linux/tracehook.h:386:
+	if (unlikely(task_utrace_struct(task) != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "task_utrace_struct"
#807: FILE: include/linux/tracehook.h:394:
+		bad = unlikely(task_utrace_struct(task) != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#810: FILE: include/linux/tracehook.h:397:
+	BUG_ON(bad);

WARNING:MEMORY_BARRIER: memory barrier without comment
#882: FILE: include/linux/tracehook.h:597:
+	smp_mb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#900: FILE: include/linux/tracehook.h:636:
+	struct task_struct *task = current;
+	if (task_utrace_flags(task))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#911: FILE: include/linux/utrace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#965: FILE: include/linux/utrace.h:55:
+^I_UTRACE_EVENT_REAP,  ^I/* Zombie reaped, no more tracing possible.  */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#980: FILE: include/linux/utrace.h:70:
+};
+#define UTRACE_EVENT(type)	(1UL << _UTRACE_EVENT_##type)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1004: FILE: include/linux/utrace.h:94:
+void utrace_release_task(struct task_struct *)

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1005: FILE: include/linux/utrace.h:95:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1006: FILE: include/linux/utrace.h:96:
+bool utrace_interrupt_pending(void)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1007: FILE: include/linux/utrace.h:97:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1008: FILE: include/linux/utrace.h:98:
+void utrace_resume(struct task_struct *, struct pt_regs *)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1008: FILE: include/linux/utrace.h:98:
+void utrace_resume(struct task_struct *, struct pt_regs *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1009: FILE: include/linux/utrace.h:99:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1010: FILE: include/linux/utrace.h:100:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1010: FILE: include/linux/utrace.h:100:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'siginfo_t *' should also have an identifier name
#1010: FILE: include/linux/utrace.h:100:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_sigaction *' should also have an identifier name
#1010: FILE: include/linux/utrace.h:100:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1012: FILE: include/linux/utrace.h:102:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1013: FILE: include/linux/utrace.h:103:
+void utrace_report_clone(unsigned long, struct task_struct *)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1013: FILE: include/linux/utrace.h:103:
+void utrace_report_clone(unsigned long, struct task_struct *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1014: FILE: include/linux/utrace.h:104:
+	__attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1016: FILE: include/linux/utrace.h:106:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1017: FILE: include/linux/utrace.h:107:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace *' should also have an identifier name
#1017: FILE: include/linux/utrace.h:107:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#1017: FILE: include/linux/utrace.h:107:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1017: FILE: include/linux/utrace.h:107:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1018: FILE: include/linux/utrace.h:108:
+	__attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1020: FILE: include/linux/utrace.h:110:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binfmt *' should also have an identifier name
#1021: FILE: include/linux/utrace.h:111:
+void utrace_report_exec(struct linux_binfmt *, struct linux_binprm *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binprm *' should also have an identifier name
#1021: FILE: include/linux/utrace.h:111:
+void utrace_report_exec(struct linux_binfmt *, struct linux_binprm *,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1023: FILE: include/linux/utrace.h:113:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1024: FILE: include/linux/utrace.h:114:
+bool utrace_report_syscall_entry(struct pt_regs *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1025: FILE: include/linux/utrace.h:115:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1026: FILE: include/linux/utrace.h:116:
+void utrace_report_syscall_exit(struct pt_regs *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1027: FILE: include/linux/utrace.h:117:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1028: FILE: include/linux/utrace.h:118:
+struct task_struct *utrace_tracer_task(struct task_struct *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1029: FILE: include/linux/utrace.h:119:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1030: FILE: include/linux/utrace.h:120:
+int utrace_unsafe_exec(struct task_struct *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1031: FILE: include/linux/utrace.h:121:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1032: FILE: include/linux/utrace.h:122:
+void utrace_signal_handler(struct task_struct *, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1032: FILE: include/linux/utrace.h:122:
+void utrace_signal_handler(struct task_struct *, int)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1033: FILE: include/linux/utrace.h:123:
+	__attribute__((weak));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1044: FILE: include/linux/utrace.h:134:
+}
+static inline struct utrace *task_utrace_struct(struct task_struct *task)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1048: FILE: include/linux/utrace.h:138:
+}
+static inline void utrace_init_task(struct task_struct *child)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1081: FILE: include/linux/utrace.h:171:
+struct utrace_attached_engine *utrace_attach_task(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1081: FILE: include/linux/utrace.h:171:
+struct utrace_attached_engine *utrace_attach_task(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1081: FILE: include/linux/utrace.h:171:
+struct utrace_attached_engine *utrace_attach_task(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct utrace_engine_ops *' should also have an identifier name
#1081: FILE: include/linux/utrace.h:171:
+struct utrace_attached_engine *utrace_attach_task(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1081: FILE: include/linux/utrace.h:171:
+struct utrace_attached_engine *utrace_attach_task(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1083: FILE: include/linux/utrace.h:173:
+struct utrace_attached_engine *utrace_attach_pid(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pid *' should also have an identifier name
#1083: FILE: include/linux/utrace.h:173:
+struct utrace_attached_engine *utrace_attach_pid(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1083: FILE: include/linux/utrace.h:173:
+struct utrace_attached_engine *utrace_attach_pid(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct utrace_engine_ops *' should also have an identifier name
#1083: FILE: include/linux/utrace.h:173:
+struct utrace_attached_engine *utrace_attach_pid(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1083: FILE: include/linux/utrace.h:173:
+struct utrace_attached_engine *utrace_attach_pid(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1085: FILE: include/linux/utrace.h:175:
+int __must_check utrace_control(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_attached_engine *' should also have an identifier name
#1085: FILE: include/linux/utrace.h:175:
+int __must_check utrace_control(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1088: FILE: include/linux/utrace.h:178:
+int __must_check utrace_set_events(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_attached_engine *' should also have an identifier name
#1088: FILE: include/linux/utrace.h:178:
+int __must_check utrace_set_events(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1091: FILE: include/linux/utrace.h:181:
+int __must_check utrace_barrier(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_attached_engine *' should also have an identifier name
#1091: FILE: include/linux/utrace.h:181:
+int __must_check utrace_barrier(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1093: FILE: include/linux/utrace.h:183:
+int __must_check utrace_prepare_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_attached_engine *' should also have an identifier name
#1093: FILE: include/linux/utrace.h:183:
+int __must_check utrace_prepare_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_examiner *' should also have an identifier name
#1093: FILE: include/linux/utrace.h:183:
+int __must_check utrace_prepare_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1096: FILE: include/linux/utrace.h:186:
+int __must_check utrace_finish_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_attached_engine *' should also have an identifier name
#1096: FILE: include/linux/utrace.h:186:
+int __must_check utrace_finish_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_examiner *' should also have an identifier name
#1096: FILE: include/linux/utrace.h:186:
+int __must_check utrace_finish_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kref *' should also have an identifier name
#1099: FILE: include/linux/utrace.h:189:
+void __utrace_engine_release(struct kref *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1127: FILE: include/linux/utrace.h:217:
+};
+#define	UTRACE_RESUME_MASK	0x0f

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1174: FILE: include/linux/utrace.h:264:
+};
+#define	UTRACE_SIGNAL_MASK	0xf0

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1202: FILE: include/linux/utrace.h:292:
+};
+#define	UTRACE_SYSCALL_MASK	0xf0

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1360: FILE: include/linux/utrace.h:450:
+ *	action seen by the the following engine's callback.  The @info data

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1532: FILE: include/linux/utrace.h:622:
+	struct task_struct *(*tracer_task)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1565: FILE: include/linux/utrace.h:655:
+static inline __must_check int utrace_control_pid(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1577: FILE: include/linux/utrace.h:667:
+	struct task_struct *task = pid_task(pid, PIDTYPE_PID);
+	return unlikely(!task) ? -ESRCH : utrace_control(task, engine, action);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1592: FILE: include/linux/utrace.h:682:
+static inline __must_check int utrace_set_events_pid(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1597: FILE: include/linux/utrace.h:687:
+	struct task_struct *task = pid_task(pid, PIDTYPE_PID);
+	return unlikely(!task) ? -ESRCH :

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1612: FILE: include/linux/utrace.h:702:
+static inline __must_check int utrace_barrier_pid(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1616: FILE: include/linux/utrace.h:706:
+	struct task_struct *task = pid_task(pid, PIDTYPE_PID);
+	return unlikely(!task) ? -ESRCH : utrace_barrier(task, engine);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1630: FILE: init/Kconfig:901:
+menuconfig UTRACE
+	bool "Infrastructure for tracing and debugging user processes"
+	depends on EXPERIMENTAL
+	depends on HAVE_ARCH_TRACEHOOK
+	depends on MODULES
+	help
+	  Enable the utrace process tracing interface.  This is an internal
+	  kernel interface exported to kernel modules, to track events in
+	  user threads, extract and change user thread state.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1661: FILE: kernel/utrace.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1686: FILE: kernel/utrace.c:26:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1690: FILE: kernel/utrace.c:30:
+#define CHECK_DEAD(p)	BUG_ON(!atomic_dec_and_test(&(p)->check_dead))

WARNING:TYPO_SPELLING: 'Noone' may be misspelled - perhaps 'No one'?
#1717: FILE: kernel/utrace.c:57:
+ * @attached list without taking any lock.  Noone may modify the list
                                             ^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1738: FILE: kernel/utrace.c:78:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1765: FILE: kernel/utrace.c:105:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1786: FILE: kernel/utrace.c:126:
+		if (utrace == NULL || utrace->u.live.cloning != target) {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1787: FILE: kernel/utrace.c:127:
+			yield();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1795: FILE: kernel/utrace.c:135:
+	if (unlikely(utrace == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!target->utrace"
#1806: FILE: kernel/utrace.c:146:
+	if (likely(target->utrace == NULL)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1847: FILE: kernel/utrace.c:187:
+	struct utrace *utrace = container_of(rhead, struct utrace, u.dead);
+	kmem_cache_free(utrace_cachep, utrace);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1869: FILE: kernel/utrace.c:209:
+	BUG_ON(!list_empty(&engine->entry));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1884: FILE: kernel/utrace.c:224:
+static struct utrace_attached_engine *matching_engine(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1889: FILE: kernel/utrace.c:229:
+	struct utrace_attached_engine *engine;
+	list_for_each_entry(engine, &utrace->attached, entry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1905: FILE: kernel/utrace.c:245:
+	struct utrace_attached_engine *engine;
+	engine = kmem_cache_alloc(utrace_engine_cachep, GFP_KERNEL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1935: FILE: kernel/utrace.c:275:
+struct utrace_attached_engine *utrace_attach_task(

WARNING:MEMORY_BARRIER: memory barrier without comment
#1945: FILE: kernel/utrace.c:285:
+	smp_rmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1957: FILE: kernel/utrace.c:297:
+	if (utrace == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1996: FILE: kernel/utrace.c:336:
+	if (unlikely(utrace == NULL)) { /* Race with detach.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2004: FILE: kernel/utrace.c:344:
+		struct utrace_attached_engine *old;
+		old = matching_engine(utrace, flags, ops, data);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#2031: FILE: kernel/utrace.c:371:
+	if (IS_ERR(utrace) || unlikely(utrace == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#2033: FILE: kernel/utrace.c:373:
+		if (unlikely(utrace == NULL)) /* Race condition.  */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2061: FILE: kernel/utrace.c:401:
+struct utrace_attached_engine *utrace_attach_pid(

WARNING:LINE_SPACING: Missing a blank line after declarations
#2067: FILE: kernel/utrace.c:407:
+	struct task_struct *task = get_pid_task(pid, PIDTYPE_PID);
+	if (task) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2135: FILE: kernel/utrace.c:475:
+	BUG_ON(utrace->stopped);

WARNING:MEMORY_BARRIER: memory barrier without comment
#2245: FILE: kernel/utrace.c:585:
+	smp_rmb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#2282: FILE: kernel/utrace.c:622:
+	struct utrace_attached_engine *engine, *next;
+	list_for_each_entry_safe(engine, next, list, entry) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#2345: FILE: kernel/utrace.c:685:
+	if (unlikely(utrace == NULL))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2378: FILE: kernel/utrace.c:718:
+#define ENGINE_STOP		(1UL << _UTRACE_NEVENTS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#2438: FILE: kernel/utrace.c:778:
+	if (unlikely(IS_ERR(utrace)))

WARNING:MEMORY_BARRIER: memory barrier without comment
#2500: FILE: kernel/utrace.c:840:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#2527: FILE: kernel/utrace.c:867:
+	smp_wmb();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2563: FILE: kernel/utrace.c:903:
+			utrace->stopped = stopped = true;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2566: FILE: kernel/utrace.c:906:
+			utrace->stopped = stopped = true;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2640: FILE: kernel/utrace.c:980:
+		BUG_ON(utrace->death);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#2810: FILE: kernel/utrace.c:1150:
+	if (unlikely(IS_ERR(utrace)))

WARNING:MEMORY_BARRIER: memory barrier without comment
#2857: FILE: kernel/utrace.c:1197:
+			smp_mb();

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2862: FILE: kernel/utrace.c:1202:
+		/* Fall through.  */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LINE_SPACING: Missing a blank line after declarations
#2914: FILE: kernel/utrace.c:1254:
+			unsigned long irqflags;
+			sighand = lock_task_sighand(target, &irqflags);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2928: FILE: kernel/utrace.c:1268:
+			/* Fall through to treat it as SINGLESTEP.  */

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#3000: FILE: kernel/utrace.c:1340:
+		if (unlikely(IS_ERR(utrace))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3037: FILE: kernel/utrace.c:1377:
+	BUG_ON(utrace->stopped);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3069: FILE: kernel/utrace.c:1409:
+		return;
+	} else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3135: FILE: kernel/utrace.c:1475:
+static const struct utrace_engine_ops *start_callback(

WARNING:MEMORY_BARRIER: memory barrier without comment
#3144: FILE: kernel/utrace.c:1484:
+	smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3152: FILE: kernel/utrace.c:1492:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3163: FILE: kernel/utrace.c:1503:
+		smp_mb();

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#3185: FILE: kernel/utrace.c:1525:
+#define REPORT(task, utrace, report, event, callback, ...)		      \
+	do {								      \
+		start_report(utrace);					      \
+		REPORT_CALLBACKS(task, utrace, report, event, callback,	      \
+				 (report)->action, engine, current,	      \
+				 ## __VA_ARGS__);  	   		      \
+		finish_report(report, task, utrace);			      \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'utrace' - possible side-effects?
#3185: FILE: kernel/utrace.c:1525:
+#define REPORT(task, utrace, report, event, callback, ...)		      \
+	do {								      \
+		start_report(utrace);					      \
+		REPORT_CALLBACKS(task, utrace, report, event, callback,	      \
+				 (report)->action, engine, current,	      \
+				 ## __VA_ARGS__);  	   		      \
+		finish_report(report, task, utrace);			      \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'report' - possible side-effects?
#3185: FILE: kernel/utrace.c:1525:
+#define REPORT(task, utrace, report, event, callback, ...)		      \
+	do {								      \
+		start_report(utrace);					      \
+		REPORT_CALLBACKS(task, utrace, report, event, callback,	      \
+				 (report)->action, engine, current,	      \
+				 ## __VA_ARGS__);  	   		      \
+		finish_report(report, task, utrace);			      \
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3190: FILE: kernel/utrace.c:1530:
+^I^I^I^I ## __VA_ARGS__);  ^I   ^I^I      \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'utrace' - possible side-effects?
#3193: FILE: kernel/utrace.c:1533:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_attached_engine *engine, *next;		      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry_safe(engine, next,			      \
+					 &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'utrace' may be better as '(utrace)' to avoid precedence issues
#3193: FILE: kernel/utrace.c:1533:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_attached_engine *engine, *next;		      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry_safe(engine, next,			      \
+					 &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'report' - possible side-effects?
#3193: FILE: kernel/utrace.c:1533:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_attached_engine *engine, *next;		      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry_safe(engine, next,			      \
+					 &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'callback' may be better as '(callback)' to avoid precedence issues
#3193: FILE: kernel/utrace.c:1533:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_attached_engine *engine, *next;		      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry_safe(engine, next,			      \
+					 &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3216: FILE: kernel/utrace.c:1556:
+	struct utrace *utrace = task->utrace;
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3230: FILE: kernel/utrace.c:1570:
+	struct utrace *utrace = task->utrace;
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3273: FILE: kernel/utrace.c:1613:
+	struct utrace *utrace = task->utrace;
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3289: FILE: kernel/utrace.c:1629:
+	struct utrace *utrace = task->utrace;
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3306: FILE: kernel/utrace.c:1646:
+	struct utrace *utrace = task->utrace;
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3374: FILE: kernel/utrace.c:1714:
+	struct utrace *utrace = task->utrace;
+	INIT_REPORT(report);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3396: FILE: kernel/utrace.c:1736:
+	BUG_ON(!task->exit_state);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3410: FILE: kernel/utrace.c:1750:
+	BUG_ON(utrace->death);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3490: FILE: kernel/utrace.c:1830:
+	struct utrace *utrace = task->utrace;
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3507: FILE: kernel/utrace.c:1847:
+		int skip;
+		spin_lock(&utrace->lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3520: FILE: kernel/utrace.c:1860:
+		BUG_ON(!signal_pending(task));

WARNING:LINE_SPACING: Missing a blank line after declarations
#3597: FILE: kernel/utrace.c:1937:
+	struct k_sigaction *ka;
+	INIT_REPORT(report);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#3613: FILE: kernel/utrace.c:1953:
+	if (unlikely(utrace == NULL)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3655: FILE: kernel/utrace.c:1995:
+		utrace->interrupt = utrace->report = utrace->signal_handler = 0;

WARNING:SIZEOF_PARENTHESIS: sizeof *return_ka should be sizeof(*return_ka)
#3683: FILE: kernel/utrace.c:2023:
+		memset(return_ka, 0, sizeof *return_ka);

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#3686: FILE: kernel/utrace.c:2026:
+		 * If noone is interested in intercepting signals,
 		      ^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3691: FILE: kernel/utrace.c:2031:
+		return 0;
+	} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3731: FILE: kernel/utrace.c:2071:
+		BUG_ON(signr != info->si_signo);

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#3768: FILE: kernel/utrace.c:2108:
+		 * we can short-circuit if noone cares about those.
 		                           ^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#3785: FILE: kernel/utrace.c:2125:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3792: FILE: kernel/utrace.c:2132:
+		smp_rmb();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3801: FILE: kernel/utrace.c:2141:
+			ret = (*ops->report_signal)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3805: FILE: kernel/utrace.c:2145:
+			ret = (report.result | (*ops->report_quiesce)(

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3853: FILE: kernel/utrace.c:2193:
+			 * For ignore, we'll fall through below.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3892: FILE: kernel/utrace.c:2232:
+		/* Fall through for an ignored signal.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#3917: FILE: kernel/utrace.c:2257:
+			sigset_t sigkill_only;
+			siginitsetinv(&sigkill_only, sigmask(SIGKILL));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3920: FILE: kernel/utrace.c:2260:
+			BUG_ON(signr != SIGKILL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4008: FILE: kernel/utrace.c:2348:
+	if (unlikely(!engine_wants_stop(engine)))
[...]
+	else if (unlikely(target->exit_state))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#4012: FILE: kernel/utrace.c:2352:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4071: FILE: kernel/utrace.c:2411:
+		unsigned long ncsw = wait_task_inactive(target, exam->state);
+		if (unlikely(ncsw != exam->ncsw))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "utrace"
#4105: FILE: kernel/utrace.c:2445:
+	if (utrace != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4109: FILE: kernel/utrace.c:2449:
+		const struct utrace_engine_ops *ops;
+		list_for_each_safe(pos, next, &utrace->attached) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tracer"
#4115: FILE: kernel/utrace.c:2455:
+				if (tracer != NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4150: FILE: kernel/utrace.c:2490:
+	struct utrace *utrace = rcu_dereference(p->utrace);
+	if (unlikely(utrace))

WARNING:BAD_SIGN_OFF: Duplicate signature
#4177: 
Signed-off-by: Roland McGrath <roland@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4220: FILE: include/linux/ptrace.h:174:
+extern void ptrace_utrace_exit(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4235: FILE: include/linux/sched.h:1776:
+extern void do_notify_parent_cldstop(struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#4235: FILE: include/linux/sched.h:1776:
+extern void do_notify_parent_cldstop(struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4235: FILE: include/linux/sched.h:1776:
+extern void do_notify_parent_cldstop(struct task_struct *, int);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4339: FILE: kernel/ptrace.c:87:
+	struct utrace_attached_engine *engine;
+	engine = utrace_attach_task(child, UTRACE_ATTACH_MATCH_OPS,

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#4341: FILE: kernel/ptrace.c:89:
+	if (likely(!IS_ERR(engine))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4343: FILE: kernel/ptrace.c:91:
+		int ret = utrace_control(child, engine, UTRACE_DETACH);
+		WARN_ON(ret && ret != -ESRCH);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4351: FILE: kernel/ptrace.c:99:
+	struct task_struct *child;
+	read_lock(&tasklist_lock);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4384: FILE: kernel/ptrace.c:167:
+static struct utrace_attached_engine *ptrace_attach_utrace(

WARNING:LINE_SPACING: Missing a blank line after declarations
#4431: FILE: kernel/ptrace.c:214:
+		int ret;
+		engine = utrace_attach_task(task, UTRACE_ATTACH_MATCH_OPS,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4452: FILE: kernel/ptrace.c:235:
+static struct task_struct *ptrace_tracer_task(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4471: FILE: kernel/ptrace.c:254:
+static enum utrace_syscall_action ptrace_syscall_action(

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#4576: FILE: kernel/ptrace.c:359:
+	if (unlikely(IS_ERR(child_engine))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4580: FILE: kernel/ptrace.c:363:
+		/* XXX already set by old ptrace code
+		task_lock(child);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4592: FILE: kernel/ptrace.c:375:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#4596: FILE: kernel/ptrace.c:379:
+	int code = SIGTRAP;
+	if (task->ptrace & PT_TRACESYSGOOD)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4626: FILE: kernel/ptrace.c:409:
+		int ret = utrace_set_events(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4678: FILE: kernel/ptrace.c:461:
+	/* Update the siginfo structure if the signal has
+	   changed.  If the debugger wanted something

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4680: FILE: kernel/ptrace.c:463:
+	   have updated *info via PTRACE_SETSIGINFO.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#4718: FILE: kernel/ptrace.c:501:
+			int x = utrace_control(task, engine, UTRACE_INTERRUPT);
+			WARN_ON(x);

WARNING:SIZEOF_PARENTHESIS: sizeof *info should be sizeof(*info)
#4734: FILE: kernel/ptrace.c:517:
+			memset(info, 0, sizeof *info);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#4741: FILE: kernel/ptrace.c:524:
+		/* Fall through.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#4784: FILE: kernel/ptrace.c:567:
+	int ret = utrace_control(task, engine, UTRACE_DETACH);
+	WARN_ON(ret && ret != -ESRCH);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4791: FILE: kernel/ptrace.c:574:
+static struct utrace_attached_engine *ptrace_attach_utrace(

WARNING:LINE_SPACING: Missing a blank line after declarations
#4795: FILE: kernel/ptrace.c:578:
+	struct utrace_attached_engine *engine;
+	engine = utrace_attach_task(child, UTRACE_ATTACH_CREATE |

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#4851: FILE: kernel/ptrace.c:670:
+	if (unlikely(IS_ERR(engine))) {

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#4984: FILE: kernel/ptrace.c:1072:
+	if (unlikely(IS_ERR(engine)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000235086.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 147 warnings, 56 checks, 4857 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000235086.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
