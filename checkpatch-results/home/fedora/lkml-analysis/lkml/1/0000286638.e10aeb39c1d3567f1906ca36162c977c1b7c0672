WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
if optimal value is not found, print out all list to help select less optimal

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#136: FILE: arch/x86/kernel/cpu/mtrr/main.c:751:
+	printk(KERN_DEBUG "After WB checking\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#138: FILE: arch/x86/kernel/cpu/mtrr/main.c:753:
+		printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: arch/x86/kernel/cpu/mtrr/main.c:754:
+		printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",
+				 range[i].start, range[i].end + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: arch/x86/kernel/cpu/mtrr/main.c:769:
+		subtract_range(range, extra_remove_base,
+				 extra_remove_base + extra_remove_size  - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#163: FILE: arch/x86/kernel/cpu/mtrr/main.c:778:
+	printk(KERN_DEBUG "After UC checking\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#165: FILE: arch/x86/kernel/cpu/mtrr/main.c:780:
+		printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: arch/x86/kernel/cpu/mtrr/main.c:781:
+		printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",
+			 range[i].start, range[i].end + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#170: FILE: arch/x86/kernel/cpu/mtrr/main.c:785:
+	printk(KERN_DEBUG "After sorting\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#172: FILE: arch/x86/kernel/cpu/mtrr/main.c:787:
+		printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: arch/x86/kernel/cpu/mtrr/main.c:788:
+		printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",
+				 range[i].start, range[i].end + 1);

WARNING:MISPLACED_INIT: __initdata should be placed after range[RANGE_NUM]
#182: FILE: arch/x86/kernel/cpu/mtrr/main.c:797:
+static struct res_range __initdata range[RANGE_NUM];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#207: FILE: arch/x86/kernel/cpu/mtrr/main.c:822:
+}
+early_param("disable_mtrr_cleanup", disable_mtrr_cleanup_setup);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#215: FILE: arch/x86/kernel/cpu/mtrr/main.c:830:
+}
+early_param("enble_mtrr_cleanup", enable_mtrr_cleanup_setup);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: arch/x86/kernel/cpu/mtrr/main.c:871:
+save_var_mtrr(unsigned int reg, unsigned long basek, unsigned long sizek,
+		unsigned char type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#275: FILE: arch/x86/kernel/cpu/mtrr/main.c:915:
+		printk(KERN_DEBUG "Setting variable MTRR %d, base: %ldMB, range: %ldMB, type %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: arch/x86/kernel/cpu/mtrr/main.c:916:
+		printk(KERN_DEBUG "Setting variable MTRR %d, base: %ldMB, range: %ldMB, type %s\n",
 			reg, range_startk >> 10, sizek >> 10,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#338: FILE: arch/x86/kernel/cpu/mtrr/main.c:965:
+		printk(KERN_DEBUG "rangeX: %016lx - %016lx\n", range0_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#338: FILE: arch/x86/kernel/cpu/mtrr/main.c:965:
+		printk(KERN_DEBUG "rangeX: %016lx - %016lx\n", range0_basek<<10,
 		                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: arch/x86/kernel/cpu/mtrr/main.c:966:
+		printk(KERN_DEBUG "rangeX: %016lx - %016lx\n", range0_basek<<10,
+				(range0_basek + state->range_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#339: FILE: arch/x86/kernel/cpu/mtrr/main.c:966:
+				(range0_basek + state->range_sizek)<<10);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: arch/x86/kernel/cpu/mtrr/main.c:968:
+		state->reg = range_to_mtrr(state->reg, range0_basek,
+				state->range_sizek, MTRR_TYPE_WRBACK);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#346: FILE: arch/x86/kernel/cpu/mtrr/main.c:973:
+	if (range0_sizek && sizek) {
+	    while (range0_basek + range0_sizek > (basek + sizek)) {

WARNING:TABSTOP: Statements should start on a tabstop
#347: FILE: arch/x86/kernel/cpu/mtrr/main.c:974:
+	    while (range0_basek + range0_sizek > (basek + sizek)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#355: FILE: arch/x86/kernel/cpu/mtrr/main.c:982:
+		printk(KERN_DEBUG "range0: %016lx - %016lx\n", range0_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#355: FILE: arch/x86/kernel/cpu/mtrr/main.c:982:
+		printk(KERN_DEBUG "range0: %016lx - %016lx\n", range0_basek<<10,
 		                                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: arch/x86/kernel/cpu/mtrr/main.c:983:
+		printk(KERN_DEBUG "range0: %016lx - %016lx\n", range0_basek<<10,
+				(range0_basek + range0_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#356: FILE: arch/x86/kernel/cpu/mtrr/main.c:983:
+				(range0_basek + range0_sizek)<<10);
 				                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: arch/x86/kernel/cpu/mtrr/main.c:985:
+		state->reg = range_to_mtrr(state->reg, range0_basek,
+				range0_sizek, MTRR_TYPE_WRBACK);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#365: FILE: arch/x86/kernel/cpu/mtrr/main.c:987:
 
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#400: FILE: arch/x86/kernel/cpu/mtrr/main.c:1014:
+	printk(KERN_DEBUG "range: %016lx - %016lx\n", range_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#400: FILE: arch/x86/kernel/cpu/mtrr/main.c:1014:
+	printk(KERN_DEBUG "range: %016lx - %016lx\n", range_basek<<10,
 	                                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: arch/x86/kernel/cpu/mtrr/main.c:1015:
+	printk(KERN_DEBUG "range: %016lx - %016lx\n", range_basek<<10,
+			 (range_basek + range_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#401: FILE: arch/x86/kernel/cpu/mtrr/main.c:1015:
+			 (range_basek + range_sizek)<<10);
 			                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: arch/x86/kernel/cpu/mtrr/main.c:1017:
+	state->reg = range_to_mtrr(state->reg, range_basek, range_sizek,
+					 MTRR_TYPE_WRBACK);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#408: FILE: arch/x86/kernel/cpu/mtrr/main.c:1019:
+		printk(KERN_DEBUG "hole: %016lx - %016lx\n", hole_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#408: FILE: arch/x86/kernel/cpu/mtrr/main.c:1019:
+		printk(KERN_DEBUG "hole: %016lx - %016lx\n", hole_basek<<10,
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: arch/x86/kernel/cpu/mtrr/main.c:1020:
+		printk(KERN_DEBUG "hole: %016lx - %016lx\n", hole_basek<<10,
+				 (hole_basek + hole_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#409: FILE: arch/x86/kernel/cpu/mtrr/main.c:1020:
+				 (hole_basek + hole_sizek)<<10);
 				                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: arch/x86/kernel/cpu/mtrr/main.c:1022:
+		state->reg = range_to_mtrr(state->reg, hole_basek, hole_sizek,
+						 MTRR_TYPE_UNCACHABLE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'basek <= 1024'
#432: FILE: arch/x86/kernel/cpu/mtrr/main.c:1043:
+	if ((basek <= 1024) ||
+	    (state->range_startk + state->range_sizek == basek)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#475: FILE: arch/x86/kernel/cpu/mtrr/main.c:1088:
+		nr_mtrr_spare_reg = simple_strtoul(arg, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#512: FILE: arch/x86/kernel/cpu/mtrr/main.c:1118:
+	printk(KERN_DEBUG "DONE variable MTRRs\n");

WARNING:MISPLACED_INIT: __initdata should be placed after result[NUM_RESULT]
#583: FILE: arch/x86/kernel/cpu/mtrr/main.c:1141:
+static struct mtrr_cleanup_result __initdata result[NUM_RESULT];

WARNING:MISPLACED_INIT: __initdata should be placed after range_new[RANGE_NUM]
#584: FILE: arch/x86/kernel/cpu/mtrr/main.c:1142:
+static struct res_range __initdata range_new[RANGE_NUM];

WARNING:MISPLACED_INIT: __initdata should be placed after min_loss_pfn[RANGE_NUM]
#585: FILE: arch/x86/kernel/cpu/mtrr/main.c:1143:
+static unsigned long __initdata min_loss_pfn[RANGE_NUM];

WARNING:TYPO_SPELLING: 'coverred' may be misspelled - perhaps 'covered'?
#632: FILE: arch/x86/kernel/cpu/mtrr/main.c:1205:
+	printk(KERN_INFO "total RAM coverred: %ldM\n",
 	                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#632: FILE: arch/x86/kernel/cpu/mtrr/main.c:1205:
+	printk(KERN_INFO "total RAM coverred: %ldM\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: arch/x86/kernel/cpu/mtrr/main.c:1206:
+	printk(KERN_INFO "total RAM coverred: %ldM\n",
+			 range_sums >> (20 - PAGE_SHIFT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: arch/x86/kernel/cpu/mtrr/main.c:1213:
+		num_reg = x86_setup_var_mtrrs(range, nr_range, mtrr_chunk_size,
+						 mtrr_gran_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: arch/x86/kernel/cpu/mtrr/main.c:1218:
+		nr_range_new = x86_get_mtrr_mem_range(range_new, 0,
+					 extra_remove_base, extra_remove_size);

CHECK:BRACES: braces {} should be used on all arms of this statement
#652: FILE: arch/x86/kernel/cpu/mtrr/main.c:1225:
+		if (range_sums < range_sums_new) {
[...]
+		} else
[...]

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#653: FILE: arch/x86/kernel/cpu/mtrr/main.c:1226:
+			result[i].lose_cover_sizek = (range_sums_new - range_sums) << (PAGE_SHIFT - 10);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: Unbalanced braces around else statement
#655: FILE: arch/x86/kernel/cpu/mtrr/main.c:1228:
+		} else

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#656: FILE: arch/x86/kernel/cpu/mtrr/main.c:1229:
+			result[i].lose_cover_sizek = (range_sums - range_sums_new) << (PAGE_SHIFT - 10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#658: FILE: arch/x86/kernel/cpu/mtrr/main.c:1231:
+		printk(KERN_INFO " %sgran_size: %ldM  \tchunk_size: %ldM  \t",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: arch/x86/kernel/cpu/mtrr/main.c:1232:
+		printk(KERN_INFO " %sgran_size: %ldM  \tchunk_size: %ldM  \t",
+			 result[i].bad?" BAD ":"", result[i].gran_sizek >> 10,

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#659: FILE: arch/x86/kernel/cpu/mtrr/main.c:1232:
+			 result[i].bad?" BAD ":"", result[i].gran_sizek >> 10,
 			              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#659: FILE: arch/x86/kernel/cpu/mtrr/main.c:1232:
+			 result[i].bad?" BAD ":"", result[i].gran_sizek >> 10,
 			                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#661: FILE: arch/x86/kernel/cpu/mtrr/main.c:1234:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#661: FILE: arch/x86/kernel/cpu/mtrr/main.c:1234:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#661: FILE: arch/x86/kernel/cpu/mtrr/main.c:1234:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: arch/x86/kernel/cpu/mtrr/main.c:1235:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",
+			 result[i].num_reg, result[i].bad?"-":"",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#662: FILE: arch/x86/kernel/cpu/mtrr/main.c:1235:
+			 result[i].num_reg, result[i].bad?"-":"",
 			                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#662: FILE: arch/x86/kernel/cpu/mtrr/main.c:1235:
+			 result[i].num_reg, result[i].bad?"-":"",
 			                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#668: FILE: arch/x86/kernel/cpu/mtrr/main.c:1241:
+		printk(KERN_INFO "invalid mtrr_gran_size or mtrr_chunk_size, will find optimal one\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#675: FILE: arch/x86/kernel/cpu/mtrr/main.c:1248:
+	for (gran_size = (1ULL<<20); gran_size < (1ULL<<32); gran_size <<= 1) {
 	                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#675: FILE: arch/x86/kernel/cpu/mtrr/main.c:1248:
+	for (gran_size = (1ULL<<20); gran_size < (1ULL<<32); gran_size <<= 1) {
 	                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#676: FILE: arch/x86/kernel/cpu/mtrr/main.c:1249:
+		for (chunk_size = gran_size; chunk_size < (1ULL<<33);
 		                                               ^

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#680: FILE: arch/x86/kernel/cpu/mtrr/main.c:1253:
+			printk(KERN_INFO "\ngran_size: %lldM   chunk_size_size: %lldM\n", gran_size >> 20, chunk_size >> 20);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#680: FILE: arch/x86/kernel/cpu/mtrr/main.c:1253:
+			printk(KERN_INFO "\ngran_size: %lldM   chunk_size_size: %lldM\n", gran_size >> 20, chunk_size >> 20);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: arch/x86/kernel/cpu/mtrr/main.c:1259:
+			num_reg = x86_setup_var_mtrrs(range, nr_range,
+							 chunk_size, gran_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: arch/x86/kernel/cpu/mtrr/main.c:1264:
+			nr_range_new = x86_get_mtrr_mem_range(range_new, 0,
+					 extra_remove_base, extra_remove_size);

CHECK:BRACES: braces {} should be used on all arms of this statement
#697: FILE: arch/x86/kernel/cpu/mtrr/main.c:1270:
+			if (range_sums < range_sums_new) {
[...]
+			} else
[...]

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#698: FILE: arch/x86/kernel/cpu/mtrr/main.c:1271:
+				result[i].lose_cover_sizek = (range_sums_new - range_sums) << (PAGE_SHIFT - 10);

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: arch/x86/kernel/cpu/mtrr/main.c:1273:
+			} else

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#701: FILE: arch/x86/kernel/cpu/mtrr/main.c:1274:
+				result[i].lose_cover_sizek = (range_sums - range_sums_new) << (PAGE_SHIFT - 10);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 48)
#705: FILE: arch/x86/kernel/cpu/mtrr/main.c:1278:
+				if (nr_range_new != nr_range ||
[...]
+						result[i].bad = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: arch/x86/kernel/cpu/mtrr/main.c:1279:
+				if (nr_range_new != nr_range ||
+					memcmp(range, range_new, sizeof(range)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#710: FILE: arch/x86/kernel/cpu/mtrr/main.c:1283:
+			if (!result[i].bad && (range_sums - range_sums_new <
[...]
+					min_loss_pfn[num_reg] = range_sums - range_sums_new;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#721: FILE: arch/x86/kernel/cpu/mtrr/main.c:1292:
+		printk(KERN_INFO "%sgran_size: %ldM  \tchunk_size: %ldM  \t",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: arch/x86/kernel/cpu/mtrr/main.c:1293:
+		printk(KERN_INFO "%sgran_size: %ldM  \tchunk_size: %ldM  \t",
+			 result[i].bad?"*BAD* ":" ", result[i].gran_sizek >> 10,

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#722: FILE: arch/x86/kernel/cpu/mtrr/main.c:1293:
+			 result[i].bad?"*BAD* ":" ", result[i].gran_sizek >> 10,
 			              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#722: FILE: arch/x86/kernel/cpu/mtrr/main.c:1293:
+			 result[i].bad?"*BAD* ":" ", result[i].gran_sizek >> 10,
 			                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#724: FILE: arch/x86/kernel/cpu/mtrr/main.c:1295:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#724: FILE: arch/x86/kernel/cpu/mtrr/main.c:1295:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#724: FILE: arch/x86/kernel/cpu/mtrr/main.c:1295:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: arch/x86/kernel/cpu/mtrr/main.c:1296:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ldM \n",
+			 result[i].num_reg, result[i].bad?"-":"",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#725: FILE: arch/x86/kernel/cpu/mtrr/main.c:1296:
+			 result[i].num_reg, result[i].bad?"-":"",
 			                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#725: FILE: arch/x86/kernel/cpu/mtrr/main.c:1296:
+			 result[i].num_reg, result[i].bad?"-":"",
 			                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#754: FILE: arch/x86/kernel/cpu/mtrr/main.c:1324:
+		printk(KERN_INFO "Found optimal setting for mtrr clean up\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#756: FILE: arch/x86/kernel/cpu/mtrr/main.c:1326:
+		printk(KERN_INFO "gran_size: %ldM  \tchunk_size: %ldM  \t",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: arch/x86/kernel/cpu/mtrr/main.c:1327:
+		printk(KERN_INFO "gran_size: %ldM  \tchunk_size: %ldM  \t",
+				result[i].gran_sizek >> 10,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#759: FILE: arch/x86/kernel/cpu/mtrr/main.c:1329:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %ldM \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#759: FILE: arch/x86/kernel/cpu/mtrr/main.c:1329:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %ldM \n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#759: FILE: arch/x86/kernel/cpu/mtrr/main.c:1329:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %ldM \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: arch/x86/kernel/cpu/mtrr/main.c:1330:
+		printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %ldM \n",
+				result[i].num_reg,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#772: FILE: arch/x86/kernel/cpu/mtrr/main.c:1342:
+	printk(KERN_INFO "mtrr_cleanup: can not find optimal value\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mtrr_cleanup', this function's name, in a string
#772: FILE: arch/x86/kernel/cpu/mtrr/main.c:1342:
+	printk(KERN_INFO "mtrr_cleanup: can not find optimal value\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#773: FILE: arch/x86/kernel/cpu/mtrr/main.c:1343:
+	printk(KERN_INFO "please specify mtrr_gran_size/mtrr_chunk_size\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#778: FILE: arch/x86/kernel/cpu/mtrr/main.c:1348:
+static int __init mtrr_cleanup(unsigned address_bits)

WARNING:MISPLACED_INIT: __initdata should be placed after changed_by_mtrr_cleanup
#784: FILE: arch/x86/kernel/cpu/mtrr/main.c:1354:
+static int __initdata changed_by_mtrr_cleanup;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#860: FILE: arch/x86/kernel/cpu/mtrr/main.c:1509:
+							    range[i+1].start);
 							           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286638.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 49 warnings, 54 checks, 856 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286638.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
