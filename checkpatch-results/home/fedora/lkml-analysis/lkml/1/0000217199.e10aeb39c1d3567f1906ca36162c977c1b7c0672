WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git tracing-v28-for-linus

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#76: 
Frédéric Weisbecker (11):
  ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#325: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#498: FILE: arch/x86/kernel/cpu/perfctr-watchdog.c:342:
+single_msr_rearm(struct nmi_watchdog_ctlblk *wd, unsigned nmi_hz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#507: FILE: arch/x86/kernel/cpu/perfctr-watchdog.c:407:
+static void __kprobes p6_rearm(struct nmi_watchdog_ctlblk *wd, unsigned nmi_hz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#516: FILE: arch/x86/kernel/cpu/perfctr-watchdog.c:611:
+static void __kprobes p4_rearm(struct nmi_watchdog_ctlblk *wd, unsigned nmi_hz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#525: FILE: arch/x86/kernel/cpu/perfctr-watchdog.c:790:
+int __kprobes lapic_wd_event(unsigned nmi_hz)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: arch/x86/kernel/ftrace.c:81:
+	WARN_ON_ONCE(__copy_to_user_inatomic((char __user *)ip, new_code,
+				    MCOUNT_INSN_SIZE));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#698: FILE: arch/x86/kernel/ftrace.c:110:
+	extern const unsigned char ftrace_test_p6nop[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#699: FILE: arch/x86/kernel/ftrace.c:111:
+	extern const unsigned char ftrace_test_nop5[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#700: FILE: arch/x86/kernel/ftrace.c:112:
+	extern const unsigned char ftrace_test_jmp[];

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#718: FILE: arch/x86/kernel/ftrace.c:129:
+	asm volatile (

WARNING:SPLIT_STRING: quoted string split across lines
#723: FILE: arch/x86/kernel/ftrace.c:134:
+		"ftrace_test_jmp:"
+		"jmp ftrace_test_p6nop\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#731: FILE: arch/x86/kernel/ftrace.c:142:
+		"ftrace_test_nop5:"
+		".byte 0x66,0x66,0x66,0x66,0x90\n"

WARNING:SPLIT_STRING: quoted string split across lines
#735: FILE: arch/x86/kernel/ftrace.c:146:
+		"1:"
+		".section .fixup, \"ax\"\n"

WARNING:TYPO_SPELLING: 'retured' may be misspelled - perhaps 'returned'?
#760: FILE: arch/x86/kernel/ftrace.c:171:
+	/* The return code is retured via data */
 	                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#858: FILE: arch/x86/mm/mmio-mod.c:342:
+	unsigned long flags;
+	va_start(args, fmt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1105: FILE: arch/x86/mm/pf_in.c:343:
+		printk(KERN_ERR "mmiotrace: Error reg no# %d\n", no);

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1223: FILE: include/asm-generic/vmlinux.lds.h:74:
+		*(__tracepoints_strings)/* Tracepoints: strings */	\
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1304: FILE: include/linux/ftrace.h:84:
+extern void ftrace_release(void *start, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1306: FILE: include/linux/ftrace.h:86:
+extern void ftrace_disable_daemon(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1307: FILE: include/linux/ftrace.h:87:
+extern void ftrace_enable_daemon(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1357: FILE: include/linux/ftrace.h:190:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1358: FILE: include/linux/ftrace.h:191:
+extern void ftrace_dump(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#1363: FILE: include/linux/ftrace.h:196:
+ftrace_printk(const char *fmt, ...) __attribute__ ((format (printf, 1, 0)));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1370: FILE: include/linux/ftrace.h:203:
+}
+static inline void ftrace_dump(void) { }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1374: FILE: include/linux/ftrace.h:207:
+extern void ftrace_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1375: FILE: include/linux/ftrace.h:208:
+extern void ftrace_init_module(unsigned long *start, unsigned long *end);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1382: FILE: include/linux/ftrace.h:215:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1393: FILE: include/linux/ftrace.h:226:
+extern void trace_boot(struct boot_trace *it, initcall_t fn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1394: FILE: include/linux/ftrace.h:227:
+extern void start_boot_trace(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1395: FILE: include/linux/ftrace.h:228:
+extern void stop_boot_trace(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1402: FILE: include/linux/ftrace.h:235:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1414: FILE: include/linux/init.h:43:
+#define __init		__section(.init.text) __cold notrace

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1449: FILE: include/linux/kprobes.h:51:
+#define __kprobes	__attribute__((__section__(".kprobes.text"))) notrace

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".kprobes.text") over __attribute__((__section__(".kprobes.text")))
#1449: FILE: include/linux/kprobes.h:51:
+#define __kprobes	__attribute__((__section__(".kprobes.text"))) notrace

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1488: FILE: include/linux/marker.h:168:
+#define marker_synchronize_unregister() synchronize_sched()

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1507: FILE: include/linux/mmiotrace.h:44:
+extern int mmiotrace_printk(const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#1508: FILE: include/linux/mmiotrace.h:45:
+				__attribute__ ((format (printf, 1, 2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#1519: FILE: include/linux/mmiotrace.h:57:
+				__attribute__ ((format (printf, 1, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1542: FILE: include/linux/mmiotrace.h:95:
+extern int mmio_trace_printk(const char *fmt, va_list args);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1572: FILE: include/linux/module.h:462:
+extern void module_update_tracepoints(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1573: FILE: include/linux/module.h:463:
+extern int module_get_iter_tracepoints(struct tracepoint_iter *iter);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1600: FILE: include/linux/ring_buffer.h:1:
+#ifndef _LINUX_RING_BUFFER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1650: FILE: include/linux/ring_buffer.h:51:
+unsigned ring_buffer_event_length(struct ring_buffer_event *event);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1669: FILE: include/linux/ring_buffer.h:70:
+ring_buffer_alloc(unsigned long size, unsigned flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1733: FILE: include/linux/tracepoint.h:1:
+#ifndef _LINUX_TRACEPOINT_H

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1759: FILE: include/linux/tracepoint.h:27:
+} __attribute__((aligned(8)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1761: FILE: include/linux/tracepoint.h:29:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'proto' - possible side-effects?
#1790: FILE: include/linux/tracepoint.h:58:
+#define DEFINE_TRACE(name, proto, args)					\
+	static inline void trace_##name(proto)				\
+	{								\
+		static const char __tpstrtab_##name[]			\
+		__attribute__((section("__tracepoints_strings")))	\
+		= #name ":" #proto;					\
+		static struct tracepoint __tracepoint_##name		\
+		__attribute__((section("__tracepoints"), aligned(8))) =	\
+		{ __tpstrtab_##name, 0, NULL };				\
+		if (unlikely(__tracepoint_##name.state))		\
+			__DO_TRACE(&__tracepoint_##name,		\
+				TPPROTO(proto), TPARGS(args));		\
+	}								\
+	static inline int register_trace_##name(void (*probe)(proto))	\
+	{								\
+		return tracepoint_probe_register(#name ":" #proto,	\
+			(void *)probe);					\
+	}								\
+	static inline void unregister_trace_##name(void (*probe)(proto))\
+	{								\
+		tracepoint_probe_unregister(#name ":" #proto,		\
+			(void *)probe);					\
+	}

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__tracepoints_strings") over __attribute__((section("__tracepoints_strings")))
#1794: FILE: include/linux/tracepoint.h:62:
+		__attribute__((section("__tracepoints_strings")))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1795: FILE: include/linux/tracepoint.h:63:
+		__attribute__((section("__tracepoints_strings")))	\
+		= #name ":" #proto;					\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__tracepoints") over __attribute__((section("__tracepoints")))
#1797: FILE: include/linux/tracepoint.h:65:
+		__attribute__((section("__tracepoints"), aligned(8))) =	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1797: FILE: include/linux/tracepoint.h:65:
+		__attribute__((section("__tracepoints"), aligned(8))) =	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1814: FILE: include/linux/tracepoint.h:82:
+extern void tracepoint_update_probe_range(struct tracepoint *begin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1815: FILE: include/linux/tracepoint.h:83:
+extern void tracepoint_update_probe_range(struct tracepoint *begin,
+	struct tracepoint *end);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'proto' - possible side-effects?
#1818: FILE: include/linux/tracepoint.h:86:
+#define DEFINE_TRACE(name, proto, args)			\
+	static inline void _do_trace_##name(struct tracepoint *tp, proto) \
+	{ }								\
+	static inline void trace_##name(proto)				\
+	{ }								\
+	static inline int register_trace_##name(void (*probe)(proto))	\
+	{								\
+		return -ENOSYS;						\
+	}								\
+	static inline void unregister_trace_##name(void (*probe)(proto))\
+	{ }

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1825: FILE: include/linux/tracepoint.h:93:
+		return -ENOSYS;						\

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1831: FILE: include/linux/tracepoint.h:99:
+static inline void tracepoint_update_probe_range(struct tracepoint *begin,
+	struct tracepoint *end)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1839: FILE: include/linux/tracepoint.h:107:
+extern int tracepoint_probe_register(const char *name, void *probe);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1845: FILE: include/linux/tracepoint.h:113:
+extern int tracepoint_probe_unregister(const char *name, void *probe);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1852: FILE: include/linux/tracepoint.h:120:
+extern void tracepoint_iter_start(struct tracepoint_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1853: FILE: include/linux/tracepoint.h:121:
+extern void tracepoint_iter_next(struct tracepoint_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1854: FILE: include/linux/tracepoint.h:122:
+extern void tracepoint_iter_stop(struct tracepoint_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1855: FILE: include/linux/tracepoint.h:123:
+extern void tracepoint_iter_reset(struct tracepoint_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1856: FILE: include/linux/tracepoint.h:124:
+extern int tracepoint_get_iter_range(struct tracepoint **tracepoint,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1857: FILE: include/linux/tracepoint.h:125:
+extern int tracepoint_get_iter_range(struct tracepoint **tracepoint,
+	struct tracepoint *begin, struct tracepoint *end);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1866: FILE: include/linux/tracepoint.h:134:
+	synchronize_sched();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1876: FILE: include/trace/sched.h:1:
+#ifndef _TRACE_SCHED_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1883: FILE: include/trace/sched.h:8:
+DEFINE_TRACE(sched_kthread_stop,
+	TPPROTO(struct task_struct *t),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1887: FILE: include/trace/sched.h:12:
+DEFINE_TRACE(sched_kthread_stop_ret,
+	TPPROTO(int ret),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1891: FILE: include/trace/sched.h:16:
+DEFINE_TRACE(sched_wait_task,
+	TPPROTO(struct rq *rq, struct task_struct *p),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1895: FILE: include/trace/sched.h:20:
+DEFINE_TRACE(sched_wakeup,
+	TPPROTO(struct rq *rq, struct task_struct *p),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1899: FILE: include/trace/sched.h:24:
+DEFINE_TRACE(sched_wakeup_new,
+	TPPROTO(struct rq *rq, struct task_struct *p),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1903: FILE: include/trace/sched.h:28:
+DEFINE_TRACE(sched_switch,
+	TPPROTO(struct rq *rq, struct task_struct *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1908: FILE: include/trace/sched.h:33:
+DEFINE_TRACE(sched_migrate_task,
+	TPPROTO(struct rq *rq, struct task_struct *p, int dest_cpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1912: FILE: include/trace/sched.h:37:
+DEFINE_TRACE(sched_process_free,
+	TPPROTO(struct task_struct *p),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1916: FILE: include/trace/sched.h:41:
+DEFINE_TRACE(sched_process_exit,
+	TPPROTO(struct task_struct *p),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1920: FILE: include/trace/sched.h:45:
+DEFINE_TRACE(sched_process_wait,
+	TPPROTO(struct pid *pid),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1924: FILE: include/trace/sched.h:49:
+DEFINE_TRACE(sched_process_fork,
+	TPPROTO(struct task_struct *parent, struct task_struct *child),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1928: FILE: include/trace/sched.h:53:
+DEFINE_TRACE(sched_signal_send,
+	TPPROTO(int sig, struct task_struct *p),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1985: FILE: init/main.c:715:
+		printk("calling  %pF @ %i\n", fn, it.caller);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#1985: FILE: init/main.c:715:
+		printk("calling  %pF @ %i\n", fn, it.caller);

CHECK:SPACING: No space is necessary after a cast
#2001: FILE: init/main.c:724:
+		it.duration = (unsigned long long) delta.tv64 >> 10;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2002: FILE: init/main.c:725:
+		printk("initcall %pF returned %d after %Ld usecs\n", fn,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2002: FILE: init/main.c:725:
+		printk("initcall %pF returned %d after %Ld usecs\n", fn,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#2002: FILE: init/main.c:725:
+		printk("initcall %pF returned %d after %Ld usecs\n", fn,
+			it.result, it.duration);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2003: FILE: init/main.c:726:
+		printk("initcall %pF returned %d after %Ld usecs\n", fn,
+			it.result, it.duration);

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#2237: FILE: kernel/marker.c:684:
+		rcu_barrier_sched();

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#2246: FILE: kernel/marker.c:729:
+		rcu_barrier_sched();

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#2255: FILE: kernel/marker.c:809:
+		rcu_barrier_sched();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2302: FILE: kernel/module.c:2131:
+	tracepointsstringsindex = find_sec(hdr, sechdrs, secstrings,
+					"__tracepoints_strings");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2334: FILE: kernel/module.c:2193:
+		tracepoint_update_probe_range(mod->tracepoints,
+			mod->tracepoints + mod->num_tracepoints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2367: FILE: kernel/module.c:2762:
+			tracepoint_update_probe_range(mod->tracepoints,
+				mod->tracepoints + mod->num_tracepoints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2391: FILE: kernel/module.c:2786:
+			found = tracepoint_get_iter_range(&iter->tracepoint,
+				iter_mod->tracepoints,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2414: FILE: kernel/notifier.c:554:
+int notrace notify_die(enum die_val val, const char *str,
 	       struct pt_regs *regs, long err, int trap, int sig)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2702: FILE: kernel/trace/ftrace.c:169:
+#define ftrace_hash_lock(flags)   do { (void)(flags); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#2703: FILE: kernel/trace/ftrace.c:170:
+#define ftrace_hash_unlock(flags) do { } while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rec->ip >= s'
#2754: FILE: kernel/trace/ftrace.c:344:
+			if ((rec->ip >= s) && (rec->ip < e))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rec->ip < e'
#2754: FILE: kernel/trace/ftrace.c:344:
+			if ((rec->ip >= s) && (rec->ip < e))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2760: FILE: kernel/trace/ftrace.c:350:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2801: FILE: kernel/trace/ftrace.c:583:
+	printk(KERN_CONT "%s", fmt);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2801: FILE: kernel/trace/ftrace.c:583:
+	printk(KERN_CONT "%s", fmt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2804: FILE: kernel/trace/ftrace.c:586:
+		printk(KERN_CONT "%s%02x", i ? ":" : "", p[i]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2804: FILE: kernel/trace/ftrace.c:586:
+		printk(KERN_CONT "%s%02x", i ? ":" : "", p[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2832: FILE: kernel/trace/ftrace.c:616:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2832: FILE: kernel/trace/ftrace.c:616:
+			printk(KERN_CONT "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2914: FILE: kernel/trace/ftrace.c:950:
+		if ((rec->flags & FTRACE_FL_FREE) ||
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3014: FILE: kernel/trace/ftrace.c:1628:
+extern unsigned long __stop_mcount_loc[];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3038: FILE: kernel/trace/ftrace.c:1652:
+	last_ftrace_enabled = ftrace_enabled = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3053: FILE: kernel/trace/ftrace.c:1667:
+	while (!kthread_should_stop()) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#3070: FILE: kernel/trace/ftrace.c:1684:
+				pr_info("hm, dftrace overflow: %lu change%s"
+					" (%lu total) in %lu usec%s\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3115: FILE: kernel/trace/ring_buffer.c:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#3151: FILE: kernel/trace/ring_buffer.c:37:
+#define RB_ALIGNMENT		(1 << RB_ALIGNMENT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3163: FILE: kernel/trace/ring_buffer.c:49:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3183: FILE: kernel/trace/ring_buffer.c:69:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3193: FILE: kernel/trace/ring_buffer.c:79:
+unsigned ring_buffer_event_length(struct ring_buffer_event *event)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3202: FILE: kernel/trace/ring_buffer.c:88:
+	BUG_ON(event->type != RINGBUF_TYPE_DATA);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#3219: FILE: kernel/trace/ring_buffer.c:105:
+#define for_each_buffer_cpu(buffer, cpu)		\
+	for_each_cpu_mask(cpu, buffer->cpumask)

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#3234: FILE: kernel/trace/ring_buffer.c:120:
+	local_t		 commit;	/* write commited index */
 	       		        	         ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3235: FILE: kernel/trace/ring_buffer.c:121:
+	unsigned	 read;		/* index for next read */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3269: FILE: kernel/trace/ring_buffer.c:155:
+	spinlock_t			lock;

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#3274: FILE: kernel/trace/ring_buffer.c:160:
+	struct buffer_page		*commit_page;	/* commited pages */
 	                  		             	   ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3285: FILE: kernel/trace/ring_buffer.c:171:
+	unsigned			pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3286: FILE: kernel/trace/ring_buffer.c:172:
+	unsigned			flags;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#3291: FILE: kernel/trace/ring_buffer.c:177:
+	struct mutex			mutex;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#3303: FILE: kernel/trace/ring_buffer.c:189:
+#define RB_WARN_ON(buffer, cond)				\
+	do {							\
+		if (unlikely(cond)) {				\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#3311: FILE: kernel/trace/ring_buffer.c:197:
+#define RB_WARN_ON_RET(buffer, cond)				\
+	do {							\
+		if (unlikely(cond)) {				\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+			return -1;				\
+		}						\
+	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3311: FILE: kernel/trace/ring_buffer.c:197:
+#define RB_WARN_ON_RET(buffer, cond)				\
+	do {							\
+		if (unlikely(cond)) {				\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+			return -1;				\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#3320: FILE: kernel/trace/ring_buffer.c:206:
+#define RB_WARN_ON_ONCE(buffer, cond)				\
+	do {							\
+		static int once;				\
+		if (unlikely(cond) && !once) {			\
+			once++;					\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+		}						\
+	} while (0)

WARNING:TYPO_SPELLING: 'safty' may be misspelled - perhaps 'safety'?
#3334: FILE: kernel/trace/ring_buffer.c:220:
+ * As a safty measure we check to make sure the data pages have not
         ^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3356: FILE: kernel/trace/ring_buffer.c:242:
+			     unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3362: FILE: kernel/trace/ring_buffer.c:248:
+	unsigned i;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#3427: FILE: kernel/trace/ring_buffer.c:313:
+	cpu_buffer->head_page
+		= list_entry(cpu_buffer->pages.next, struct buffer_page, list);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3428: FILE: kernel/trace/ring_buffer.c:314:
+	cpu_buffer->tail_page = cpu_buffer->commit_page = cpu_buffer->head_page;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3471: FILE: kernel/trace/ring_buffer.c:357:
+struct ring_buffer *ring_buffer_alloc(unsigned long size, unsigned flags)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3481: FILE: kernel/trace/ring_buffer.c:367:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3545: FILE: kernel/trace/ring_buffer.c:431:
+rb_remove_pages(struct ring_buffer_per_cpu *cpu_buffer, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3549: FILE: kernel/trace/ring_buffer.c:435:
+	unsigned i;

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#3552: FILE: kernel/trace/ring_buffer.c:438:
+	synchronize_sched();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3555: FILE: kernel/trace/ring_buffer.c:441:
+		BUG_ON(list_empty(&cpu_buffer->pages));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3561: FILE: kernel/trace/ring_buffer.c:447:
+	BUG_ON(list_empty(&cpu_buffer->pages));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3569: FILE: kernel/trace/ring_buffer.c:455:
+
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3573: FILE: kernel/trace/ring_buffer.c:459:
+		struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3577: FILE: kernel/trace/ring_buffer.c:463:
+	unsigned i;

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#3580: FILE: kernel/trace/ring_buffer.c:466:
+	synchronize_sched();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3583: FILE: kernel/trace/ring_buffer.c:469:
+		BUG_ON(list_empty(pages));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3613: FILE: kernel/trace/ring_buffer.c:499:
+	unsigned nr_pages, rm_pages, new_pages;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3636: FILE: kernel/trace/ring_buffer.c:522:
+	if (size < buffer_size) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3638: FILE: kernel/trace/ring_buffer.c:524:
+		BUG_ON(nr_pages >= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3657: FILE: kernel/trace/ring_buffer.c:543:
+	BUG_ON(nr_pages <= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3680: FILE: kernel/trace/ring_buffer.c:566:
+	BUG_ON(!list_empty(&pages));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3701: FILE: kernel/trace/ring_buffer.c:587:
+static inline void *__rb_page_index(struct buffer_page *page, unsigned index)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3726: FILE: kernel/trace/ring_buffer.c:612:
+static inline unsigned rb_page_write(struct buffer_page *bpage)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3731: FILE: kernel/trace/ring_buffer.c:617:
+static inline unsigned rb_page_commit(struct buffer_page *bpage)

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#3736: FILE: kernel/trace/ring_buffer.c:622:
+/* Size is determined by what has been commited */
                                        ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3737: FILE: kernel/trace/ring_buffer.c:623:
+static inline unsigned rb_page_size(struct buffer_page *bpage)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3748: FILE: kernel/trace/ring_buffer.c:634:
+static inline unsigned rb_head_size(struct ring_buffer_per_cpu *cpu_buffer)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3766: FILE: kernel/trace/ring_buffer.c:652:
+	     head += rb_event_length(event)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3768: FILE: kernel/trace/ring_buffer.c:654:
+		BUG_ON(rb_null_event(event));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3898: FILE: kernel/trace/ring_buffer.c:784:
+rb_update_event(struct ring_buffer_event *event,
+			 unsigned type, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3898: FILE: kernel/trace/ring_buffer.c:784:
+			 unsigned type, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3898: FILE: kernel/trace/ring_buffer.c:784:
+			 unsigned type, unsigned length)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3903: FILE: kernel/trace/ring_buffer.c:789:
+	switch (type) {
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3909: FILE: kernel/trace/ring_buffer.c:795:
+			(RB_LEN_TIME_EXTEND + (RB_ALIGNMENT-1))
 			                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3915: FILE: kernel/trace/ring_buffer.c:801:
+			(RB_LEN_TIME_STAMP + (RB_ALIGNMENT-1))
 			                                  ^

CHECK:BRACES: Unbalanced braces around else statement
#3924: FILE: kernel/trace/ring_buffer.c:810:
+		} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3926: FILE: kernel/trace/ring_buffer.c:812:
+				(length + (RB_ALIGNMENT-1))
 				                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3930: FILE: kernel/trace/ring_buffer.c:816:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3934: FILE: kernel/trace/ring_buffer.c:820:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3934: FILE: kernel/trace/ring_buffer.c:820:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3953: FILE: kernel/trace/ring_buffer.c:839:
+		  unsigned type, unsigned long length, u64 *ts)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4053: FILE: kernel/trace/ring_buffer.c:939:
+	BUG_ON(write > BUF_PAGE_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4081: FILE: kernel/trace/ring_buffer.c:967:
+		printk(KERN_WARNING "Delta way too big! %llu"

WARNING:SPLIT_STRING: quoted string split across lines
#4082: FILE: kernel/trace/ring_buffer.c:968:
+		printk(KERN_WARNING "Delta way too big! %llu"
+		       " ts=%llu write stamp = %llu\n",

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#4101: FILE: kernel/trace/ring_buffer.c:987:
+	/* Only a commited time event can update the write stamp */
 	          ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4132: FILE: kernel/trace/ring_buffer.c:1018:
+		      unsigned type, unsigned long length)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4152: FILE: kernel/trace/ring_buffer.c:1038:
+	    rb_commit_index(cpu_buffer)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4163: FILE: kernel/trace/ring_buffer.c:1049:
+		if (test_time_stamp(delta)) {
+

CHECK:BRACES: Unbalanced braces around else statement
#4174: FILE: kernel/trace/ring_buffer.c:1060:
+	} else

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#4185: FILE: kernel/trace/ring_buffer.c:1071:
+			 * Ouch! We needed a timestamp and it was commited. But
 			                                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#4193: FILE: kernel/trace/ring_buffer.c:1079:
+	 * If the timestamp was commited, make the commit our entry
 	                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'reseverd' may be misspelled - perhaps 'reserved'?
#4214: FILE: kernel/trace/ring_buffer.c:1100:
+ * Returns a reseverd event on the ring buffer to copy directly to.
              ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#4314: FILE: kernel/trace/ring_buffer.c:1200:
+	if (preempt_count() == 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4319: FILE: kernel/trace/ring_buffer.c:1205:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4339: FILE: kernel/trace/ring_buffer.c:1225:
+int ring_buffer_write(struct ring_buffer *buffer,
+			unsigned long length,

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#4418: FILE: kernel/trace/ring_buffer.c:1304:
+ * to truely enable the writing (much like preempt_disable).
       ^^^^^^

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#4452: FILE: kernel/trace/ring_buffer.c:1338:
+ * to truely enable the writing (much like preempt_disable).
       ^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4606: FILE: kernel/trace/ring_buffer.c:1492:
+		BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#4609: FILE: kernel/trace/ring_buffer.c:1495:
+	return;
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4637: FILE: kernel/trace/ring_buffer.c:1523:
+		BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#4640: FILE: kernel/trace/ring_buffer.c:1526:
+	return;
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4707: FILE: kernel/trace/ring_buffer.c:1593:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4712: FILE: kernel/trace/ring_buffer.c:1598:
+	BUG_ON(!reader);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4730: FILE: kernel/trace/ring_buffer.c:1616:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4739: FILE: kernel/trace/ring_buffer.c:1625:
+		BUG_ON(iter->head_page == cpu_buffer->commit_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4752: FILE: kernel/trace/ring_buffer.c:1638:
+	BUG_ON((iter->head_page == cpu_buffer->commit_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iter->head >= rb_page_size(iter->head_page)'
#4760: FILE: kernel/trace/ring_buffer.c:1646:
+	if ((iter->head >= rb_page_size(iter->head_page)) &&
+	    (iter->head_page != cpu_buffer->commit_page))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iter->head_page != cpu_buffer->commit_page'
#4760: FILE: kernel/trace/ring_buffer.c:1646:
+	if ((iter->head >= rb_page_size(iter->head_page)) &&
+	    (iter->head_page != cpu_buffer->commit_page))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4817: FILE: kernel/trace/ring_buffer.c:1703:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4873: FILE: kernel/trace/ring_buffer.c:1759:
+		BUG();

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#4937: FILE: kernel/trace/ring_buffer.c:1823:
+	synchronize_sched();

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#4996: FILE: kernel/trace/ring_buffer.c:1882:
+	cpu_buffer->head_page
+		= list_entry(cpu_buffer->pages.next, struct buffer_page, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#5198: FILE: kernel/trace/trace.c:77:
+	u64 ts = ring_buffer_time_stamp(cpu);
+	ring_buffer_normalize_time_stamp(cpu, &ts);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#5267: FILE: kernel/trace/trace.c:181:
+	ret = strict_strtoul(str, 0, &buf_size);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#5277: FILE: kernel/trace/trace.c:188:
+__setup("trace_buf_size=", set_buf_size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5373: FILE: kernel/trace/trace.c:339:
+#define HEX_CHARS		(MAX_MEMHEX_BYTES*2 + 1)
                  		                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5667: FILE: kernel/trace/trace.c:691:
+       unsigned long ip, unsigned long parent_ip, unsigned long flags,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5668: FILE: kernel/trace/trace.c:692:
+       int pc)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5843: FILE: kernel/trace/trace.c:784:
+	event = ring_buffer_lock_reserve(tr->buffer, sizeof(*entry),
+					   &irq_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5888: FILE: kernel/trace/trace.c:813:
+	event = ring_buffer_lock_reserve(tr->buffer, sizeof(*entry),
+					   &irq_flags);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6043: FILE: kernel/trace/trace.c:954:
 	for_each_tracing_cpu(cpu) {
+

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6179: FILE: kernel/trace/trace.c:1156:
+	seq_puts(m, "#                  _------=> CPU#            \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6180: FILE: kernel/trace/trace.c:1157:
+	seq_puts(m, "#                 / _-----=> irqs-off        \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6181: FILE: kernel/trace/trace.c:1158:
+	seq_puts(m, "#                | / _----=> need-resched    \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6182: FILE: kernel/trace/trace.c:1159:
+	seq_puts(m, "#                || / _---=> hardirq/softirq \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6183: FILE: kernel/trace/trace.c:1160:
+	seq_puts(m, "#                ||| / _--=> preempt-depth   \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6184: FILE: kernel/trace/trace.c:1161:
+	seq_puts(m, "#                |||| /                      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6185: FILE: kernel/trace/trace.c:1162:
+	seq_puts(m, "#                |||||     delay             \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6186: FILE: kernel/trace/trace.c:1163:
+	seq_puts(m, "#  cmd     pid   ||||| time  |   caller      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6187: FILE: kernel/trace/trace.c:1164:
+	seq_puts(m, "#     \\   /      |||||   \\   |   /           \n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6916: FILE: kernel/trace/trace.c:1895:
+	for_each_tracing_cpu(cpu) {
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#6951: FILE: kernel/trace/trace.c:1917:
+	if (iter->trace && iter->trace->open)
+			iter->trace->open(iter);

WARNING:TYPO_SPELLING: 'inspite' may be misspelled - perhaps 'in spite'?
#7126: FILE: kernel/trace/trace.c:2640:
+	 * If there was nothing to send to user, inspite of consuming trace
 	                                         ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#7195: FILE: kernel/trace/trace.c:2708:
+			int r;
+			cnt = ret;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#7200: FILE: kernel/trace/trace.c:2713:
+				 * size max buffer!!!! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#7232: FILE: kernel/trace/trace.c:2739:
+	va_list args;
+	va_start(args, fmt);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#7239: FILE: kernel/trace/trace.c:2746:
+tracing_mark_write(struct file *filp, const char __user *ubuf,
                                 ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7240: FILE: kernel/trace/trace.c:2747:
+tracing_mark_write(struct file *filp, const char __user *ubuf,
+					size_t cnt, loff_t *fpos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#7253: FILE: kernel/trace/trace.c:2760:
+	if (buf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct file_operations should normally be const
#7281: FILE: kernel/trace/trace.c:2812:
+static struct file_operations tracing_mark_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPLIT_STRING: quoted string split across lines
#7318: FILE: kernel/trace/trace.c:2916:
 		pr_warning("Could not create debugfs "
+			   "'tracing_thresh' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7327: FILE: kernel/trace/trace.c:2926:
 		pr_warning("Could not create debugfs "
+			   "'trace_pipe' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7334: FILE: kernel/trace/trace.c:2932:
 		pr_warning("Could not create debugfs "
+			   "'trace_entries' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7340: FILE: kernel/trace/trace.c:2938:
+		pr_warning("Could not create debugfs "
+			   "'trace_marker' entry\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7424: FILE: kernel/trace/trace.c:2980:
+	len = min(len, TRACE_BUF_SIZE-1);
 	                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_trace([subsystem]dev, ... then dev_trace(dev, ... then pr_trace(...  to printk(KERN_TRACE ...
#7584: FILE: kernel/trace/trace.c:3076:
+	printk(KERN_TRACE "%s", s->buffer);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7595: FILE: kernel/trace/trace.c:3081:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_trace([subsystem]dev, ... then dev_trace(dev, ... then pr_trace(...  to printk(KERN_TRACE ...
#7641: FILE: kernel/trace/trace.c:3106:
+	printk(KERN_TRACE "Dumping ftrace buffer:\n");

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#7650: FILE: kernel/trace/trace.c:3113:
+	 * We need to stop all tracing on all CPUS to read the
+	 * the next buffer. This is a bit expensive, but is

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#7664: FILE: kernel/trace/trace.c:3121:
+	while (!trace_empty(&iter)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_trace([subsystem]dev, ... then dev_trace(dev, ... then pr_trace(...  to printk(KERN_TRACE ...
#7666: FILE: kernel/trace/trace.c:3123:
+			printk(KERN_TRACE "---------------------------------\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "find_next_entry_inc"
#7677: FILE: kernel/trace/trace.c:3134:
+		if (find_next_entry_inc(&iter) != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_trace([subsystem]dev, ... then dev_trace(dev, ... then pr_trace(...  to printk(KERN_TRACE ...
#7690: FILE: kernel/trace/trace.c:3143:
+		printk(KERN_TRACE "   (ftrace buffer empty)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_trace([subsystem]dev, ... then dev_trace(dev, ... then pr_trace(...  to printk(KERN_TRACE ...
#7692: FILE: kernel/trace/trace.c:3145:
+		printk(KERN_TRACE "---------------------------------\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7707: FILE: kernel/trace/trace.c:3160:
+	global_trace.buffer = ring_buffer_alloc(trace_buf_size,
+						   TRACE_BUFFER_FLAGS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7709: FILE: kernel/trace/trace.c:3162:
+		printk(KERN_ERR "tracer: failed to allocate ring buffer!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7718: FILE: kernel/trace/trace.c:3170:
+	max_tr.buffer = ring_buffer_alloc(trace_buf_size,
+					     TRACE_BUFFER_FLAGS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7720: FILE: kernel/trace/trace.c:3172:
+		printk(KERN_ERR "tracer: failed to allocate max ring buffer!\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7731: FILE: kernel/trace/trace.c:3183:
+		data = global_trace.data[i] = &per_cpu(global_trace_cpu, i);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#7838: FILE: kernel/trace/trace.h:51:
 };
+extern struct tracer boot_tracer;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#7976: FILE: kernel/trace/trace.h:184:
+#define IF_ASSIGN(var, entry, etype, id)		\
+	if (FTRACE_CMP_TYPE(var, etype)) {		\
+		var = (typeof(var))(entry);		\
+		WARN_ON(id && (entry)->type != id);	\
+		break;					\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#7976: FILE: kernel/trace/trace.h:184:
+#define IF_ASSIGN(var, entry, etype, id)		\
+	if (FTRACE_CMP_TYPE(var, etype)) {		\
+		var = (typeof(var))(entry);		\
+		WARN_ON(id && (entry)->type != id);	\
+		break;					\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#7976: FILE: kernel/trace/trace.h:184:
+#define IF_ASSIGN(var, entry, etype, id)		\
+	if (FTRACE_CMP_TYPE(var, etype)) {		\
+		var = (typeof(var))(entry);		\
+		WARN_ON(id && (entry)->type != id);	\
+		break;					\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#7976: FILE: kernel/trace/trace.h:184:
+#define IF_ASSIGN(var, entry, etype, id)		\
+	if (FTRACE_CMP_TYPE(var, etype)) {		\
+		var = (typeof(var))(entry);		\
+		WARN_ON(id && (entry)->type != id);	\
+		break;					\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'id' may be better as '(id)' to avoid precedence issues
#7976: FILE: kernel/trace/trace.h:184:
+#define IF_ASSIGN(var, entry, etype, id)		\
+	if (FTRACE_CMP_TYPE(var, etype)) {		\
+		var = (typeof(var))(entry);		\
+		WARN_ON(id && (entry)->type != id);	\
+		break;					\
+	}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7984: FILE: kernel/trace/trace.h:192:
+extern void __ftrace_bad_type(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#7999: FILE: kernel/trace/trace.h:207:
+#define trace_assign_type(var, ent)					\
+	do {								\
+		IF_ASSIGN(var, ent, struct ftrace_entry, TRACE_FN);	\
+		IF_ASSIGN(var, ent, struct ctx_switch_entry, 0);	\
+		IF_ASSIGN(var, ent, struct trace_field_cont, TRACE_CONT); \
+		IF_ASSIGN(var, ent, struct stack_entry, TRACE_STACK);	\
+		IF_ASSIGN(var, ent, struct print_entry, TRACE_PRINT);	\
+		IF_ASSIGN(var, ent, struct special_entry, 0);		\
+		IF_ASSIGN(var, ent, struct trace_mmiotrace_rw,		\
+			  TRACE_MMIO_RW);				\
+		IF_ASSIGN(var, ent, struct trace_mmiotrace_map,		\
+			  TRACE_MMIO_MAP);				\
+		IF_ASSIGN(var, ent, struct trace_boot, TRACE_BOOT);	\
+		__ftrace_bad_type();					\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ent' - possible side-effects?
#7999: FILE: kernel/trace/trace.h:207:
+#define trace_assign_type(var, ent)					\
+	do {								\
+		IF_ASSIGN(var, ent, struct ftrace_entry, TRACE_FN);	\
+		IF_ASSIGN(var, ent, struct ctx_switch_entry, 0);	\
+		IF_ASSIGN(var, ent, struct trace_field_cont, TRACE_CONT); \
+		IF_ASSIGN(var, ent, struct stack_entry, TRACE_STACK);	\
+		IF_ASSIGN(var, ent, struct print_entry, TRACE_PRINT);	\
+		IF_ASSIGN(var, ent, struct special_entry, 0);		\
+		IF_ASSIGN(var, ent, struct trace_mmiotrace_rw,		\
+			  TRACE_MMIO_RW);				\
+		IF_ASSIGN(var, ent, struct trace_mmiotrace_map,		\
+			  TRACE_MMIO_MAP);				\
+		IF_ASSIGN(var, ent, struct trace_boot, TRACE_BOOT);	\
+		__ftrace_bad_type();					\
+	} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8067: FILE: kernel/trace/trace.h:289:
+struct trace_entry *tracing_get_trace_entry(struct trace_array *tr,
+						struct trace_array_cpu *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8142: FILE: kernel/trace/trace.h:378:
+extern int trace_selftest_startup_nop(struct tracer *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8143: FILE: kernel/trace/trace.h:379:
+extern int trace_selftest_startup_nop(struct tracer *trace,
+					 struct trace_array *tr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8155: FILE: kernel/trace/trace.h:388:
+extern void trace_seq_print_cont(struct trace_seq *s,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8160: FILE: kernel/trace/trace.h:393:
+extern int trace_vprintk(unsigned long ip, const char *fmt, va_list args);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8180: FILE: kernel/trace/trace_boot.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8197: FILE: kernel/trace/trace_boot.c:18:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#8217: FILE: kernel/trace/trace_boot.c:38:
+	int cpu;
+	boot_trace = tr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8245: FILE: kernel/trace/trace_boot.c:66:
+		ret = trace_seq_printf(s, "[%5ld.%09ld] calling  %s @ %i\n",
+					  calltime.tv_sec,

WARNING:SPLIT_STRING: quoted string split across lines
#8252: FILE: kernel/trace/trace_boot.c:73:
+		ret = trace_seq_printf(s, "[%5ld.%09ld] initcall %s "
+					  "returned %d after %lld msecs\n",

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#8265: FILE: kernel/trace/trace_boot.c:86:
+struct tracer boot_tracer __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#8418: FILE: kernel/trace/trace_mmiotrace.c:134:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8505: FILE: kernel/trace/trace_mmiotrace.c:268:
+	unsigned secs		= (unsigned long)t;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8541: FILE: kernel/trace/trace_mmiotrace.c:315:
+static void __trace_mmiotrace_rw(struct trace_array *tr,
+				struct trace_array_cpu *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8569: FILE: kernel/trace/trace_mmiotrace.c:343:
+static void __trace_mmiotrace_map(struct trace_array *tr,
+				struct trace_array_cpu *data,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8607: FILE: kernel/trace/trace_nop.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#8636: FILE: kernel/trace/trace_nop.c:30:
+	int cpu;
+	ctx_trace = tr;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#8661: FILE: kernel/trace/trace_nop.c:55:
+struct tracer nop_trace __read_mostly =
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8691: FILE: kernel/trace/trace_sched_switch.c:23:
+probe_sched_switch(struct rq *__rq, struct task_struct *prev,
 			struct task_struct *next)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8938: FILE: kernel/trace/trace_sched_wakeup.c:118:
+probe_wakeup_sched_switch(struct rq *rq, struct task_struct *prev,
 	struct task_struct *next)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#9354: FILE: kernel/trace/trace_stack.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9372: FILE: kernel/trace/trace_stack.c:19:
+static unsigned long stack_dump_trace[STACK_TRACE_ENTRIES+1] =
                                                          ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#9373: FILE: kernel/trace/trace_stack.c:20:
+static unsigned long stack_dump_trace[STACK_TRACE_ENTRIES+1] =
+	 { [0 ... (STACK_TRACE_ENTRIES)] = ULONG_MAX };

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9374: FILE: kernel/trace/trace_stack.c:21:
+static unsigned stack_dump_index[STACK_TRACE_ENTRIES];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#9394: FILE: kernel/trace/trace_stack.c:41:
+	this_size = ((unsigned long)&this_size) & (THREAD_SIZE-1);
 	                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#9420: FILE: kernel/trace/trace_stack.c:67:
+		(((unsigned long)start & ~(THREAD_SIZE-1)) + THREAD_SIZE);
 		                                      ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#9430: FILE: kernel/trace/trace_stack.c:77:
+	while (i < max_stack_trace.nr_entries) {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#9436: FILE: kernel/trace/trace_stack.c:83:
+				this_size = stack_dump_index[i++] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#9479: FILE: kernel/trace/trace_stack.c:126:
+static struct ftrace_ops trace_ops __read_mostly =
+{

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9484: FILE: kernel/trace/trace_stack.c:131:
+stack_max_size_read(struct file *filp, char __user *ubuf,
                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#9498: FILE: kernel/trace/trace_stack.c:145:
+stack_max_size_write(struct file *filp, const char __user *ubuf,
                                   ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#9514: FILE: kernel/trace/trace_stack.c:161:
+	ret = strict_strtoul(buf, 10, &val);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9527: FILE: kernel/trace/trace_stack.c:174:
+static struct file_operations stack_max_size_fops = {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#9581: FILE: kernel/trace/trace_stack.c:228:
+	return seq_printf(m, "%p\n", (void*)addr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#9592: FILE: kernel/trace/trace_stack.c:239:
+		seq_printf(m, "        Depth   Size      Location"
+			   "    (%d entries)\n"

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9602: FILE: kernel/trace/trace_stack.c:249:
+	if (i+1 == max_stack_trace.nr_entries ||
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9603: FILE: kernel/trace/trace_stack.c:250:
+	    stack_dump_trace[i+1] == ULONG_MAX)
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9606: FILE: kernel/trace/trace_stack.c:253:
+		size = stack_dump_index[i] - stack_dump_index[i+1];
 		                                               ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#9615: FILE: kernel/trace/trace_stack.c:262:
+static struct seq_operations stack_trace_seq_ops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#9629: FILE: kernel/trace/trace_stack.c:276:
+		struct seq_file *m = file->private_data;
+		m->private = (void *)-1;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#9635: FILE: kernel/trace/trace_stack.c:282:
+static struct file_operations stack_trace_fops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#9683: FILE: kernel/tracepoint.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#9697: FILE: kernel/tracepoint.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#9698: FILE: kernel/tracepoint.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#9711: FILE: kernel/tracepoint.c:29:
+extern struct tracepoint __stop___tracepoints[];

CHECK:BIT_MACRO: Prefer using the BIT macro
#9727: FILE: kernel/tracepoint.c:45:
+#define TRACEPOINT_TABLE_SIZE (1 << TRACEPOINT_HASH_BITS)

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#9731: FILE: kernel/tracepoint.c:49:
+ * It is used to to delay the free of multiple probes array until a quiescent

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#9765: FILE: kernel/tracepoint.c:83:
+	call_rcu_sched(&entry->rcu, free_old_closure);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#9776: FILE: kernel/tracepoint.c:94:
+		printk(KERN_DEBUG "Probe %d : %p\n", i, entry->funcs[i]);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#9797: FILE: kernel/tracepoint.c:115:
+	if (new == NULL)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#9829: FILE: kernel/tracepoint.c:147:
+		return old;
+	} else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#9835: FILE: kernel/tracepoint.c:153:
+		if (new == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#9877: FILE: kernel/tracepoint.c:195:
+	u32 hash = jhash(name, name_len-1, 0);
 	                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#9882: FILE: kernel/tracepoint.c:200:
+			printk(KERN_NOTICE

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct tracepoint_entry)...)
#9891: FILE: kernel/tracepoint.c:209:
+	e = kmalloc(sizeof(struct tracepoint_entry) + name_len, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#9913: FILE: kernel/tracepoint.c:231:
+	u32 hash = jhash(name, len-1, 0);
 	                          ^

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#9929: FILE: kernel/tracepoint.c:247:
+		rcu_barrier_sched();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9938: FILE: kernel/tracepoint.c:256:
+static void set_tracepoint(struct tracepoint_entry **entry,
+	struct tracepoint *elem, int active)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9972: FILE: kernel/tracepoint.c:290:
+void tracepoint_update_probe_range(struct tracepoint *begin,
+	struct tracepoint *end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9982: FILE: kernel/tracepoint.c:300:
+			set_tracepoint(&mark_entry, iter,
+					!!mark_entry->refcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9997: FILE: kernel/tracepoint.c:315:
+	tracepoint_update_probe_range(__start___tracepoints,
+		__stop___tracepoints);

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#10030: FILE: kernel/tracepoint.c:348:
+		rcu_barrier_sched();

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#10042: FILE: kernel/tracepoint.c:360:
+		rcu_barrier_sched();

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#10071: FILE: kernel/tracepoint.c:389:
+		rcu_barrier_sched();

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#10080: FILE: kernel/tracepoint.c:398:
+		rcu_barrier_sched();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10101: FILE: kernel/tracepoint.c:419:
+int tracepoint_get_iter_range(struct tracepoint **tracepoint,
+	struct tracepoint *begin, struct tracepoint *end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10120: FILE: kernel/tracepoint.c:438:
+		found = tracepoint_get_iter_range(&iter->tracepoint,
+				__start___tracepoints, __stop___tracepoints);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#10168: FILE: samples/Kconfig:16:
+config SAMPLE_TRACEPOINTS
+	tristate "Build tracepoints examples -- loadable modules only"
+	depends on TRACEPOINTS && m
+	help
+	  This build tracepoints example modules.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10216: FILE: samples/tracepoints/tp-samples-trace.h:1:
+#ifndef _TP_SAMPLES_TRACE_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10223: FILE: samples/tracepoints/tp-samples-trace.h:8:
+DEFINE_TRACE(subsys_event,
+	TPPROTO(struct inode *inode, struct file *file),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10226: FILE: samples/tracepoints/tp-samples-trace.h:11:
+DEFINE_TRACE(subsys_eventb,
+	TPPROTO(void),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10235: FILE: samples/tracepoints/tracepoint-probe-sample.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#10254: FILE: samples/tracepoints/tracepoint-probe-sample.c:20:
+	printk(KERN_INFO "Event is encountered with filename %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10255: FILE: samples/tracepoints/tracepoint-probe-sample.c:21:
+	printk(KERN_INFO "Event is encountered with filename %s\n",
+		file->f_path.dentry->d_name.name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#10262: FILE: samples/tracepoints/tracepoint-probe-sample.c:28:
+	printk(KERN_INFO "Event B is encountered\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10296: FILE: samples/tracepoints/tracepoint-probe-sample2.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#10312: FILE: samples/tracepoints/tracepoint-probe-sample2.c:17:
+	printk(KERN_INFO "Event is encountered with inode number %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10313: FILE: samples/tracepoints/tracepoint-probe-sample2.c:18:
+	printk(KERN_INFO "Event is encountered with inode number %lu\n",
+		inode->i_ino);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10344: FILE: samples/tracepoints/tracepoint-sample.c:1:
+/* tracepoint-sample.c

WARNING:CONST_STRUCT: struct file_operations should normally be const
#10371: FILE: samples/tracepoints/tracepoint-sample.c:28:
+static struct file_operations mark_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#10377: FILE: samples/tracepoints/tracepoint-sample.c:34:
+	printk(KERN_ALERT "example init\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10379: FILE: samples/tracepoints/tracepoint-sample.c:36:
+	pentry_example = proc_create("tracepoint-example", 0444, NULL,
+		&mark_ops);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#10387: FILE: samples/tracepoints/tracepoint-sample.c:44:
+	printk(KERN_ALERT "example exit\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#10426: FILE: scripts/bootgraph.pl:2:
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#10443: FILE: scripts/bootgraph.pl:19:
+# 51 Franklin Street, Fifth Floor,$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#10461: FILE: scripts/bootgraph.pl:37:
+# 	dmesg | perl scripts/bootgraph.pl > output.svg

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#10505: FILE: scripts/bootgraph.pl:81:
+	print "      dmesg | perl scripts/bootgraph.pl > output.svg\n\n";

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#10581: FILE: scripts/recordmcount.pl:2:
+# (c) 2008, Steven Rostedt <srostedt@redhat.com>

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217199.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 188 warnings, 147 checks, 10131 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217199.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
