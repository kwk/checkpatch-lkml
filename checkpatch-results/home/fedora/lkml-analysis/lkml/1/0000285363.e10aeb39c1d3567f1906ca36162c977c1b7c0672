WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: include/linux/bootmem2.h:1:
+#ifndef _LINUX_BOOTMEM2_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#50: FILE: include/linux/bootmem2.h:7:
+extern void bootmem_register_block(int bid, unsigned long start,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#51: FILE: include/linux/bootmem2.h:8:
+extern void bootmem_register_block(int bid, unsigned long start,
+				unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#53: FILE: include/linux/bootmem2.h:10:
+extern unsigned long bootmem_map_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/bootmem2.h:12:
+extern void bootmem_setup(unsigned long mapstart);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/bootmem2.h:14:
+extern unsigned long bootmem_release_block(int bid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/bootmem2.h:16:
+extern void bootmem_free(unsigned long addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/bootmem2.h:17:
+extern int bootmem_reserve(unsigned long addr, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: include/linux/bootmem2.h:18:
+extern int bootmem_reserve(unsigned long addr, unsigned long size,
+			int exclusive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/bootmem2.h:20:
+extern void *bootmem_alloc_block(int bid, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: include/linux/bootmem2.h:21:
+extern void *bootmem_alloc_block(int bid, unsigned long size,
+				unsigned long align, unsigned long goal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: include/linux/bootmem2.h:41:
+static inline void bootmem_register_node(int nid, unsigned long start,
+					unsigned long end)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/bootmem2.h:44:
+	extern void __multiple_memblocks_per_node(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: include/linux/bootmem2.h:50:
+extern unsigned long bootmem_release_node(int nid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/bootmem2.h:52:
+extern void *bootmem_alloc_node(int nid, unsigned long size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/bootmem2.h:56:
+extern void *bootmem_alloc_low_node(int nid, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: include/linux/bootmem2.h:57:
+extern void *bootmem_alloc_low_node(int nid, unsigned long size,
+				unsigned long align, unsigned long goal);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#102: FILE: include/linux/bootmem2.h:59:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/bootmem2.h:61:
+extern void *bootmem_alloc_section(unsigned long size, unsigned long sec_nr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#115: FILE: include/linux/bootmem2.h:72:
+}
+static inline unsigned long bootmem_release(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#130: FILE: include/linux/bootmem2.h:87:
+}
+static inline void *bootmem_alloc_low(unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#134: FILE: include/linux/bootmem2.h:91:
+}
+static inline void *bootmem_alloc_pages(unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#139: FILE: include/linux/bootmem2.h:96:
+}
+static inline void *bootmem_alloc_low_pages(unsigned long size)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#155: FILE: include/linux/bootmem2.h:112:
+typedef void *bootmem_data_t;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#165: FILE: include/linux/bootmem2.h:122:
+}
+static inline void free_bootmem(unsigned long addr, unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#169: FILE: include/linux/bootmem2.h:126:
+}
+static inline void free_bootmem_node(pg_data_t *pgdat, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: include/linux/bootmem2.h:127:
+static inline void free_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+				unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#174: FILE: include/linux/bootmem2.h:131:
+}
+static inline int reserve_bootmem_node(pg_data_t *pgdat, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: include/linux/bootmem2.h:132:
+static inline int reserve_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+				unsigned long size, int flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#179: FILE: include/linux/bootmem2.h:136:
+}
+static inline void *__alloc_bootmem_low(unsigned long size, unsigned long align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: include/linux/bootmem2.h:144:
+static inline int reserve_bootmem(unsigned long addr, unsigned long size,
+				int flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#191: FILE: include/linux/bootmem2.h:148:
+}
+static inline void *alloc_bootmem(unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#195: FILE: include/linux/bootmem2.h:152:
+}
+static inline void *alloc_bootmem_low(unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#199: FILE: include/linux/bootmem2.h:156:
+}
+static inline void *alloc_bootmem_pages(unsigned long nr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#203: FILE: include/linux/bootmem2.h:160:
+}
+static inline void *alloc_bootmem_low_pages(unsigned long nr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#207: FILE: include/linux/bootmem2.h:164:
+}
+static inline void *alloc_bootmem_node(pg_data_t *pgdat, unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#212: FILE: include/linux/bootmem2.h:169:
+}
+static inline void *alloc_bootmem_pages_node(pg_data_t *pgdat,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: include/linux/bootmem2.h:170:
+static inline void *alloc_bootmem_pages_node(pg_data_t *pgdat,
+						unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#218: FILE: include/linux/bootmem2.h:175:
+}
+static inline void *alloc_bootmem_low_pages_node(pg_data_t *pgdat,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: include/linux/bootmem2.h:176:
+static inline void *alloc_bootmem_low_pages_node(pg_data_t *pgdat,
+						unsigned long size)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/bootmem2.h:186:
+extern void *alloc_remap(int nid, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/linux/bootmem2.h:192:
+extern void *alloc_large_system_hash(const char *tablename,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: include/linux/bootmem2.h:193:
+extern void *alloc_large_system_hash(const char *tablename,
+				unsigned long bucketsize,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#256: FILE: mm/bootmem2.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: mm/bootmem2.c:57:
+void __init bootmem_register_block(int bid, unsigned long start,
+				unsigned long end)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: mm/bootmem2.c:59:
+	BUG_ON(bootmem_functional);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#365: FILE: mm/bootmem2.c:110:
+	printk(KERN_INFO "bootmem: %lu pages on %d block(s) - map @ pfn %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: mm/bootmem2.c:111:
+	printk(KERN_INFO "bootmem: %lu pages on %d block(s) - map @ pfn %lx\n",
+		bootmem_max_pfn - bootmem_min_pfn, bootmem_nr_blocks,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#402: FILE: mm/bootmem2.c:147:
+	BUG_ON(!bootmem_nr_blocks);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#459: FILE: mm/bootmem2.c:204:
+	printk(KERN_INFO "bootmem: %lu pages released on block %i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: mm/bootmem2.c:205:
+	printk(KERN_INFO "bootmem: %lu pages released on block %i\n",
+		count, bid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: mm/bootmem2.c:239:
+	BUG_ON(!bootmem_functional);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#497: FILE: mm/bootmem2.c:242:
+		printk(KERN_ERR "bootmem request out of range: %lx-%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#498: FILE: mm/bootmem2.c:243:
+		printk(KERN_ERR "bootmem request out of range: %lx-%lx, "
+			"usable: %lx-%lx\n", start, end, bootmem_min_pfn,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#500: FILE: mm/bootmem2.c:245:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#511: FILE: mm/bootmem2.c:256:
+			printk(KERN_ERR "bootmem: double free of pfn %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: mm/bootmem2.c:257:
+			printk(KERN_ERR "bootmem: double free of pfn %lx\n",
+				pfn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#513: FILE: mm/bootmem2.c:258:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: mm/bootmem2.c:263:
+static int __init __bootmem_reserve(unsigned long start, unsigned long end,
+				int exclusive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: mm/bootmem2.c:308:
+int __init bootmem_reserve(unsigned long addr, unsigned long size,
+			int exclusive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: mm/bootmem2.c:318:
+static void * __init __bootmem_alloc_block(int bid, int align,
+				unsigned long start_pfn, unsigned long bytes)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#606: FILE: mm/bootmem2.c:351:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: mm/bootmem2.c:367:
+void * __init bootmem_alloc_block(int bid, unsigned long size,
+				unsigned long align, unsigned long goal,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#640: FILE: mm/bootmem2.c:385:
+	BUG_ON(align & (align - 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: mm/bootmem2.c:386:
+	BUG_ON(limit && goal + size > limit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: mm/bootmem2.c:456:
+void * __init bootmem_alloc_node(int nid, unsigned long size,
+				unsigned long align, unsigned long goal,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#742: FILE: mm/bootmem2.c:487:
+		goal = goal_block = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: mm/bootmem2.c:506:
+void * __init bootmem_alloc_low_node(int nid, unsigned long size,
+				unsigned long align, unsigned long goal)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#786: FILE: mm/bootmem2.c:531:
+		printk(KERN_WARNING "bootmem_alloc_section(%lu, %lu)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bootmem_alloc_section', this function's name, in a string
#786: FILE: mm/bootmem2.c:531:
+		printk(KERN_WARNING "bootmem_alloc_section(%lu, %lu)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: mm/bootmem2.c:532:
+		printk(KERN_WARNING "bootmem_alloc_section(%lu, %lu)\n",
+			section_nr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285363.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 53 checks, 796 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285363.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
