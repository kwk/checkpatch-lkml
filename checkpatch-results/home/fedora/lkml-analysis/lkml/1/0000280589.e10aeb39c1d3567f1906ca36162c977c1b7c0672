WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
 * A page is charged only when !page_mapped() && no page_cgroup is assigned.

WARNING:TYPO_SPELLING: 'mangement' may be misspelled - perhaps 'management'?
#52: 
refcnt mangement.
       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: mm/memcontrol.c:656:
+  ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#141: FILE: mm/memcontrol.c:656:
+  ^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED'
#197: FILE: mm/memcontrol.c:698:
+	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED)
+	    && ((pc->flags & PAGE_CGROUP_FLAG_CACHE)
+		|| page_mapped(page)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#198: FILE: mm/memcontrol.c:699:
+	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED)
+	    && ((pc->flags & PAGE_CGROUP_FLAG_CACHE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#199: FILE: mm/memcontrol.c:700:
+	    && ((pc->flags & PAGE_CGROUP_FLAG_CACHE)
+		|| page_mapped(page)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: mm/memcontrol.c:768:
+		__mem_cgroup_uncharge_common(newpage,
+					 MEM_CGROUP_CHARGE_TYPE_FORCE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: mm/memcontrol.c:803:
+			__mem_cgroup_uncharge_common(page,
+					MEM_CGROUP_CHARGE_TYPE_FORCE);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/linux/memcontrol.h:38:
+extern void mem_cgroup_uncharge_cache_page(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: mm/shmem.c:944:
+		error = add_to_page_cache(page, inode->i_mapping, idx,
+					GFP_NOWAIT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: mm/shmem.c:1403:
+				ret = add_to_page_cache_lru(filepage, mapping,
+						idx, GFP_NOWAIT);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000280589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 8 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000280589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
