WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#113: FILE: drivers/s390/char/sclp_async.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#153: FILE: drivers/s390/char/sclp_async.c:41:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#158: FILE: drivers/s390/char/sclp_async.c:46:
+} __attribute__((packed));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#177: FILE: drivers/s390/char/sclp_async.c:65:
+static int proc_handler_callhome(ctl_table *ctl, int write, struct file *filp,
                                                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#200: FILE: drivers/s390/char/sclp_async.c:88:
+		if (strict_strtoul(buf, 0, &val) != 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#263: FILE: drivers/s390/char/sclp_async.c:151:
+	while (request->status != SCLP_REQ_DONE &&
[...]
+		 sclp_sync_wait();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: drivers/s390/char/sclp_async.c:152:
+	while (request->status != SCLP_REQ_DONE &&
+		request->status != SCLP_REQ_FAILED) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*request)...) over kzalloc(sizeof(struct sclp_req)...)
#296: FILE: drivers/s390/char/sclp_async.c:184:
+	request = kzalloc(sizeof(struct sclp_req), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#299: FILE: drivers/s390/char/sclp_async.c:187:
+	sccb = (struct sclp_async_sccb *) get_zeroed_page(GFP_KERNEL | GFP_DMA);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/s390/char/sclp_async.c:200:
+	free_page((unsigned long) sccb);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#319: FILE: drivers/s390/char/sclp_async.c:207:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#328: FILE: drivers/s390/char/sclp_async.c:216:
+	free_page((unsigned long) sccb);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: drivers/s390/char/sclp.h:95:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084518.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 7 checks, 302 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084518.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
