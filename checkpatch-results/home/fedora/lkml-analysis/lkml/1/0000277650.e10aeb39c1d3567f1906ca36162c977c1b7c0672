CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: mm/bootmem.c:104:
+unsigned long __init init_bootmem_node(pg_data_t *pgdat, unsigned long mappfn,
+				unsigned long startpfn, unsigned long endpfn)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: mm/bootmem.c:109:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#381: FILE: mm/bootmem.c:217:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: mm/bootmem.c:221:
+static int __init __reserve(void *map, unsigned long start,
+				unsigned long end, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: mm/bootmem.c:236:
+static int __init mark_bootmem(unsigned long start, unsigned long end,
+				int reserve, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: mm/bootmem.c:253:
+			BUG_ON(pos != start);

CHECK:BRACES: braces {} should be used on all arms of this statement
#448: FILE: mm/bootmem.c:261:
+		if (reserve) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#458: FILE: mm/bootmem.c:271:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: mm/bootmem.c:278:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: mm/bootmem.c:288:
+void __init free_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+			unsigned long size)

WARNING:TYPO_SPELLING: 'contigous' may be misspelled - perhaps 'contiguous'?
#533: FILE: mm/bootmem.c:305:
+ * The specified range must be contigous and can even span subsequent nodes.
                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: mm/bootmem.c:388:
+	if (__reserve(bdata->node_bootmem_map,
+			PFN_DOWN(new_start) + merge,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#716: FILE: mm/bootmem.c:391:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: mm/bootmem.c:399:
+static void * __init do_alloc(bootmem_data_t *bdata, unsigned long size,
+				unsigned long align, unsigned long goal,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#752: FILE: mm/bootmem.c:407:
+	BUG_ON(align & (align - 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#753: FILE: mm/bootmem.c:408:
+	BUG_ON(limit && goal + size > limit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#880: FILE: mm/bootmem.c:466:
+static void * __init ___alloc_bootmem_nopanic(unsigned long size,
+					unsigned long align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: mm/bootmem.c:503:
+void * __init __alloc_bootmem_nopanic(unsigned long size,
+				unsigned long align, unsigned long goal)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#956: FILE: mm/bootmem.c:517:
+	printk(KERN_ALERT "bootmem alloc of %lu bytes failed!\n", size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#992: FILE: mm/bootmem.c:539:
+static void * __init ___alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,
+					unsigned long align, unsigned long goal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: mm/bootmem.c:565:
+void * __init __alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,
+				unsigned long align, unsigned long goal)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1182: FILE: include/linux/bootmem.h:28:
+extern unsigned long init_bootmem_node(pg_data_t *pgdat, unsigned long mappfn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: include/linux/bootmem.h:29:
+extern unsigned long init_bootmem_node(pg_data_t *pgdat, unsigned long mappfn,
+				unsigned long startpfn, unsigned long endpfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1186: FILE: include/linux/bootmem.h:32:
+extern unsigned long free_all_bootmem_node(pg_data_t *pgdat);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1187: FILE: include/linux/bootmem.h:33:
+extern unsigned long free_all_bootmem(void);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1194: FILE: include/linux/bootmem.h:40:
+#define BOOTMEM_EXCLUSIVE	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1196: FILE: include/linux/bootmem.h:42:
+extern int reserve_bootmem_node(pg_data_t *pgdat, unsigned long addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1198: FILE: include/linux/bootmem.h:44:
+extern int reserve_bootmem(unsigned long addr, unsigned long size, int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1200: FILE: include/linux/bootmem.h:46:
+extern void free_bootmem_node(pg_data_t *pgdat,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1201: FILE: include/linux/bootmem.h:47:
+extern void free_bootmem_node(pg_data_t *pgdat,
+			unsigned long addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1210: FILE: include/linux/bootmem.h:53:
+extern void *__alloc_bootmem(unsigned long size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1213: FILE: include/linux/bootmem.h:56:
+extern void *__alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1214: FILE: include/linux/bootmem.h:57:
+extern void *__alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,
+				unsigned long align, unsigned long goal);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1236: FILE: include/linux/bootmem.h:67:
+extern void *alloc_bootmem_section(unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: include/linux/bootmem.h:68:
+extern void *alloc_bootmem_section(unsigned long size,
+				unsigned long section_nr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277650.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 27 checks, 1235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277650.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
