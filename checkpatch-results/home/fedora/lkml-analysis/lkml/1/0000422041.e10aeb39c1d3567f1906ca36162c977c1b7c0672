WARNING:SPACING: space prohibited between function name and open parenthesis '('
#114: FILE: drivers/char/n_tty.c:98:
+	buf = kmalloc(sizeof (*buf), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#170: FILE: drivers/char/n_tty.c:154:
+		audit_log_format(ab, "tty pid=%u uid=%u auid=%u major=%d "
+				 "minor=%d comm=", tsk->pid, tsk->uid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf2"
#269: FILE: drivers/char/n_tty.c:253:
+	if (buf2 == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#284: FILE: drivers/char/n_tty.c:268:
+	/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#314: FILE: drivers/char/n_tty.c:298:
+	if (buf->major != major || buf->minor != minor
+	    || buf->icanon != tty->icanon) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#320: FILE: drivers/char/n_tty.c:304:
+	do {
+	  size_t run;

WARNING:TABSTOP: Statements should start on a tabstop
#321: FILE: drivers/char/n_tty.c:305:
+	  size_t run;

WARNING:TABSTOP: Statements should start on a tabstop
#324: FILE: drivers/char/n_tty.c:308:
+	  if (run > size)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#324: FILE: drivers/char/n_tty.c:308:
+	  if (run > size)
+	    run = size;

WARNING:TABSTOP: Statements should start on a tabstop
#330: FILE: drivers/char/n_tty.c:314:
+	  if (buf->valid == N_TTY_BUF_SIZE)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 18)
#330: FILE: drivers/char/n_tty.c:314:
+	  if (buf->valid == N_TTY_BUF_SIZE)
+		  tty_audit_buf_push_current(buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: drivers/char/n_tty.c:355:
+extern ssize_t tty_read(struct file * file, char __user * buf, size_t count,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: drivers/char/n_tty.c:355:
+extern ssize_t tty_read(struct file * file, char __user * buf, size_t count,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#397: FILE: drivers/char/n_tty.c:381:
+		unsigned i;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#406: FILE: drivers/char/n_tty.c:390:
+			struct file *filp;
 			             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#408: FILE: drivers/char/n_tty.c:392:
+			filp = fcheck_files(current->files, i);
 			^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#409: FILE: drivers/char/n_tty.c:393:
+			if (!filp)
 			     ^^^^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#427: FILE: drivers/char/n_tty.c:411:
+inline static void

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#503: FILE: drivers/char/tty_io.c:146:
+ssize_t tty_read(struct file *, char __user *, size_t, loff_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#503: FILE: drivers/char/tty_io.c:146:
+ssize_t tty_read(struct file *, char __user *, size_t, loff_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#503: FILE: drivers/char/tty_io.c:146:
+ssize_t tty_read(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#503: FILE: drivers/char/tty_io.c:146:
+ssize_t tty_read(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#503: FILE: drivers/char/tty_io.c:146:
+ssize_t tty_read(struct file *, char __user *, size_t, loff_t *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#513: FILE: drivers/char/tty_io.c:1693:
+ssize_t tty_read(struct file * file, char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#513: FILE: drivers/char/tty_io.c:1693:
+ssize_t tty_read(struct file * file, char __user * buf, size_t count,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#578: FILE: include/linux/audit.h:466:
 }
+extern int audit_enabled;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#594: FILE: include/linux/audit.h:528:
+extern void		    audit_log_lost(const char *message);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#620: FILE: include/linux/tty.h:344:
+extern void tty_audit_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#621: FILE: include/linux/tty.h:345:
+extern void tty_audit_push_task(struct task_struct *tsk, uid_t loginuid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#622: FILE: include/linux/tty.h:346:
+extern void tty_audit_opening(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#627: FILE: include/linux/tty.h:351:
+}
+static inline void tty_audit_push_task(struct task_struct *tsk, uid_t loginuid)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#630: FILE: include/linux/tty.h:354:
+}
+static inline void tty_audit_opening(void)

CHECK:BRACES: Unbalanced braces around else statement
#712: FILE: kernel/audit.c:678:
+				else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#733: FILE: kernel/audit.c:782:
+		if (!tsk)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#735: FILE: kernel/audit.c:784:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#756: FILE: kernel/audit.c:805:
+		if (!tsk)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#758: FILE: kernel/audit.c:807:
+		else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000422041.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 18 warnings, 14 checks, 719 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000422041.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
