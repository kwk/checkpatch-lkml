WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/hin_or_dlgt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/hin_or_dlgt.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/hin_or_dlgt.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#65: FILE: fs/aufs/hin_or_dlgt.c:22:
+ * $Id: hin_or_dlgt.c,v 1.2 2008/04/21 02:00:37 sfjro Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#82: FILE: fs/aufs/hin_or_dlgt.c:39:
+	struct nameidata *nd;
 	                  ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#88: FILE: fs/aufs/hin_or_dlgt.c:45:
+	*a->errp = do_vfsub_permission(a->inode, a->mask, a->nd);
 	                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#91: FILE: fs/aufs/hin_or_dlgt.c:48:
+int vfsub_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                       ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#94: FILE: fs/aufs/hin_or_dlgt.c:51:
+	if (!dlgt)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#95: FILE: fs/aufs/hin_or_dlgt.c:52:
+		return do_vfsub_permission(inode, mask, nd);
 		                                        ^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#96: FILE: fs/aufs/hin_or_dlgt.c:53:
+		return do_vfsub_permission(inode, mask, nd);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#96: FILE: fs/aufs/hin_or_dlgt.c:53:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#102: FILE: fs/aufs/hin_or_dlgt.c:59:
+			.nd	= nd
 			 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#102: FILE: fs/aufs/hin_or_dlgt.c:59:
+			.nd	= nd
 			   	  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#118: FILE: fs/aufs/hin_or_dlgt.c:75:
+	struct nameidata *nd;
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#124: FILE: fs/aufs/hin_or_dlgt.c:81:
+	*a->errp = do_vfsub_create(a->dir, a->dentry, a->mode, a->nd);
 	                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#128: FILE: fs/aufs/hin_or_dlgt.c:85:
+		 struct nameidata *nd, int dlgt)
 		                   ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#130: FILE: fs/aufs/hin_or_dlgt.c:87:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#131: FILE: fs/aufs/hin_or_dlgt.c:88:
+		return do_vfsub_create(dir, dentry, mode, nd);
 		                                          ^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#132: FILE: fs/aufs/hin_or_dlgt.c:89:
+		return do_vfsub_create(dir, dentry, mode, nd);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#132: FILE: fs/aufs/hin_or_dlgt.c:89:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#139: FILE: fs/aufs/hin_or_dlgt.c:96:
+			.nd	= nd
 			 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#139: FILE: fs/aufs/hin_or_dlgt.c:96:
+			.nd	= nd
 			   	  ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#165: FILE: fs/aufs/hin_or_dlgt.c:122:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#167: FILE: fs/aufs/hin_or_dlgt.c:124:
+		return do_vfsub_symlink(dir, dentry, symname, mode);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: fs/aufs/hin_or_dlgt.c:124:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#200: FILE: fs/aufs/hin_or_dlgt.c:157:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#202: FILE: fs/aufs/hin_or_dlgt.c:159:
+		return do_vfsub_mknod(dir, dentry, mode, dev);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#202: FILE: fs/aufs/hin_or_dlgt.c:159:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: fs/aufs/hin_or_dlgt.c:190:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#235: FILE: fs/aufs/hin_or_dlgt.c:192:
+		return do_vfsub_mkdir(dir, dentry, mode);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#235: FILE: fs/aufs/hin_or_dlgt.c:192:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#267: FILE: fs/aufs/hin_or_dlgt.c:224:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#269: FILE: fs/aufs/hin_or_dlgt.c:226:
+		return do_vfsub_link(src_dentry, dir, dentry);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#269: FILE: fs/aufs/hin_or_dlgt.c:226:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: fs/aufs/hin_or_dlgt.c:251:
+	struct rename_args *a = args;
+	vfsub_ignore(a->vargs);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: fs/aufs/hin_or_dlgt.c:296:
+	struct rmdir_args *a = args;
+	vfsub_ignore(a->vargs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: fs/aufs/hin_or_dlgt.c:343:
+	struct read_args *a = args;
+	LKTRTrace("%.*s, cnt %lu, pos %Ld\n",

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#386: FILE: fs/aufs/hin_or_dlgt.c:343:
+	LKTRTrace("%.*s, cnt %lu, pos %Ld\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#386: FILE: fs/aufs/hin_or_dlgt.c:343:
+	LKTRTrace("%.*s, cnt %lu, pos %Ld\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#387: FILE: fs/aufs/hin_or_dlgt.c:344:
+		  AuDLNPair(a->file->f_dentry), (unsigned long)a->count,

CHECK:BRACES: braces {} should be used on all arms of this statement
#395: FILE: fs/aufs/hin_or_dlgt.c:352:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#397: FILE: fs/aufs/hin_or_dlgt.c:354:
+		return do_vfsub_read_u(file, ubuf, count, ppos);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#397: FILE: fs/aufs/hin_or_dlgt.c:354:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#428: FILE: fs/aufs/hin_or_dlgt.c:385:
+			if (unlikely(err > 0
[...]
+			} else if (!err)
[...]
+			else if (unlikely(err < 0))
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#429: FILE: fs/aufs/hin_or_dlgt.c:386:
+			if (unlikely(err > 0
+				     && copy_to_user(ubuf, args.kbuf, err))) {

WARNING:INDENTED_LABEL: labels should not be indented
#446: FILE: fs/aufs/hin_or_dlgt.c:403:
+	out_free:

WARNING:INDENTED_LABEL: labels should not be indented
#448: FILE: fs/aufs/hin_or_dlgt.c:405:
+	out:

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: fs/aufs/hin_or_dlgt.c:413:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#458: FILE: fs/aufs/hin_or_dlgt.c:415:
+		return do_vfsub_read_k(file, kbuf, count, ppos);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#458: FILE: fs/aufs/hin_or_dlgt.c:415:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#491: FILE: fs/aufs/hin_or_dlgt.c:448:
+	struct write_args *a = args;
+	LKTRTrace("%.*s, cnt %lu, pos %Ld\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#491: FILE: fs/aufs/hin_or_dlgt.c:448:
+	LKTRTrace("%.*s, cnt %lu, pos %Ld\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#548: FILE: fs/aufs/hin_or_dlgt.c:505:
+			if (err > 0) {
[...]
+			} else if (!err)
[...]
+			else if (unlikely(err < 0))
[...]

WARNING:INDENTED_LABEL: labels should not be indented
#561: FILE: fs/aufs/hin_or_dlgt.c:518:
+	out_free:

CHECK:BRACES: braces {} should be used on all arms of this statement
#610: FILE: fs/aufs/hin_or_dlgt.c:567:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#612: FILE: fs/aufs/hin_or_dlgt.c:569:
+		return do_vfsub_readdir(file, filldir, arg);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#612: FILE: fs/aufs/hin_or_dlgt.c:569:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#649: FILE: fs/aufs/hin_or_dlgt.c:606:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#651: FILE: fs/aufs/hin_or_dlgt.c:608:
+		return do_vfsub_splice_to(in, ppos, pipe, len, flags);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#651: FILE: fs/aufs/hin_or_dlgt.c:608:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#682: FILE: fs/aufs/hin_or_dlgt.c:639:
+	struct splice_from_args *a = args;
+	vfsub_ignore(a->vargs);

CHECK:BRACES: braces {} should be used on all arms of this statement
#736: FILE: fs/aufs/hin_or_dlgt.c:693:
+	if (!dlgt)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#738: FILE: fs/aufs/hin_or_dlgt.c:695:
+		return do_vfsub_getattr(mnt, dentry, st);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#738: FILE: fs/aufs/hin_or_dlgt.c:695:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279927.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 36 warnings, 27 checks, 708 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279927.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
