CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->buffer"
#91: FILE: arch/um/drivers/line.c:103:
+	if (line->buffer == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#96: FILE: arch/um/drivers/line.c:106:
+			printk(KERN_ERR "buffer_data - atomic allocation "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'buffer_data', this function's name, in a string
#96: FILE: arch/um/drivers/line.c:106:
+			printk(KERN_ERR "buffer_data - atomic allocation "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#97: FILE: arch/um/drivers/line.c:107:
+			printk(KERN_ERR "buffer_data - atomic allocation "
+			       "failed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty"
#246: FILE: arch/um/drivers/line.c:376:
+	if (tty == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line"
#302: FILE: arch/um/drivers/line.c:480:
+	if (line == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "line->tty"
#336: FILE: arch/um/drivers/line.c:525:
+	if (line->tty != NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#382: FILE: arch/um/drivers/line.c:579:
 	}
+	else if (n >= 0) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#390: FILE: arch/um/drivers/line.c:585:
+		for(i = 0; i < num; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#410: FILE: arch/um/drivers/line.c:608:
+	if (new == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end == name'
#425: FILE: arch/um/drivers/line.c:628:
+	if ((*end != '\0') || (end == name)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev < 0'
#431: FILE: arch/um/drivers/line.c:633:
+	if ((dev < 0) || (dev >= num)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev >= num'
#431: FILE: arch/um/drivers/line.c:633:
+	if ((dev < 0) || (dev >= num)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->tty"
#443: FILE: arch/um/drivers/line.c:643:
+	else if (line->tty == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end == *str'
#457: FILE: arch/um/drivers/line.c:657:
+	if ((*end != '\0') || (end == *str))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#486: FILE: arch/um/drivers/line.c:699:
+		printk(KERN_ERR "register_lines : can't register %s driver\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_lines', this function's name, in a string
#486: FILE: arch/um/drivers/line.c:699:
+		printk(KERN_ERR "register_lines : can't register %s driver\n",

ERROR:SPACING: space required before the open parenthesis '('
#494: FILE: arch/um/drivers/line.c:705:
+	for(i = 0; i < nlines; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#504: FILE: arch/um/drivers/line.c:723:
+	for(i = 0; i < nlines; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->init_str"
#509: FILE: arch/um/drivers/line.c:727:
+		if (line->init_str == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->init_str"
#515: FILE: arch/um/drivers/line.c:731:
+		if (line->init_str == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#516: FILE: arch/um/drivers/line.c:732:
+			printk(KERN_ERR "lines_init - kstrdup returned NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lines_init', this function's name, in a string
#516: FILE: arch/um/drivers/line.c:732:
+			printk(KERN_ERR "lines_init - kstrdup returned NULL\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#522: FILE: arch/um/drivers/line.c:735:
+			printk(KERN_ERR "parse_chan_pair failed for "

WARNING:SPLIT_STRING: quoted string split across lines
#523: FILE: arch/um/drivers/line.c:736:
+			printk(KERN_ERR "parse_chan_pair failed for "
+			       "device %d : %s\n", i, error);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#542: FILE: arch/um/drivers/line.c:778:
+				printk(KERN_ERR "winch_interrupt : "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'winch_interrupt', this function's name, in a string
#542: FILE: arch/um/drivers/line.c:778:
+				printk(KERN_ERR "winch_interrupt : "

WARNING:SPLIT_STRING: quoted string split across lines
#543: FILE: arch/um/drivers/line.c:779:
+				printk(KERN_ERR "winch_interrupt : "
+				       "read failed, errno = %d\n", -err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#544: FILE: arch/um/drivers/line.c:780:
+				printk(KERN_ERR "fd %d is losing SIGWINCH "

WARNING:SPLIT_STRING: quoted string split across lines
#545: FILE: arch/um/drivers/line.c:781:
+				printk(KERN_ERR "fd %d is losing SIGWINCH "
+				       "support\n", winch->tty_fd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#563: FILE: arch/um/drivers/line.c:808:
+		printk(KERN_ERR "register_winch_irq - kmalloc failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_winch_irq', this function's name, in a string
#563: FILE: arch/um/drivers/line.c:808:
+		printk(KERN_ERR "register_winch_irq - kmalloc failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#563: FILE: arch/um/drivers/line.c:808:
 	if (winch == NULL) {
+		printk(KERN_ERR "register_winch_irq - kmalloc failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#572: FILE: arch/um/drivers/line.c:822:
+		printk(KERN_ERR "register_winch_irq - failed to register "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_winch_irq', this function's name, in a string
#572: FILE: arch/um/drivers/line.c:822:
+		printk(KERN_ERR "register_winch_irq - failed to register "

WARNING:SPLIT_STRING: quoted string split across lines
#573: FILE: arch/um/drivers/line.c:823:
+		printk(KERN_ERR "register_winch_irq - failed to register "
+		       "IRQ\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!title"
#616: FILE: arch/um/drivers/line.c:886:
+	if (title == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#617: FILE: arch/um/drivers/line.c:887:
+		printk(KERN_ERR "Failed to allocate buffer for xterm title\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000396412.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 21 warnings, 13 checks, 542 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000396412.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
