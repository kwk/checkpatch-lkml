WARNING:TYPO_SPELLING: 'funtions' may be misspelled - perhaps 'functions'?
#32: 
This patch adds support for the dm_path_event dm_send_event funtions which
                                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: drivers/md/dm-netlink.c:44:
+        struct dm_event_cache *cdata;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: drivers/md/dm-netlink.c:44:
+        struct dm_event_cache *cdata;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#58: FILE: drivers/md/dm-netlink.c:45:
+        struct mapped_device *md;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: drivers/md/dm-netlink.c:45:
+        struct mapped_device *md;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: drivers/md/dm-netlink.c:46:
+        struct sk_buff *skb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: drivers/md/dm-netlink.c:46:
+        struct sk_buff *skb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: drivers/md/dm-netlink.c:47:
+        struct list_head elist;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: drivers/md/dm-netlink.c:47:
+        struct list_head elist;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#64: FILE: drivers/md/dm-netlink.c:51:
+static uint32_t _dm_netlink_daemon_pid;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#86: FILE: drivers/md/dm-netlink.c:112:
+		DMERR("%s: dme_cache_event_get() failed", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#94: FILE: drivers/md/dm-netlink.c:120:
+		DMERR("%s: nlmsg_put() failed", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#113: FILE: drivers/md/dm-netlink.c:139:
+	DMERR("%s: nla_put_failure", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#123: FILE: drivers/md/dm-netlink.c:149:
+	struct nlmsghdr *nlh = (struct nlmsghdr *) evt->skb->data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#138: FILE: drivers/md/dm-netlink.c:164:
+		DMERR("%s: nlmsg_unicast() failed: %d", __FUNCTION__, r);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#142: FILE: drivers/md/dm-netlink.c:168:
+	DMERR("%s: nla_put_failure", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: drivers/md/dm-netlink.c:177:
+        struct dm_event *evt, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/md/dm-netlink.c:177:
+        struct dm_event *evt, *next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: drivers/md/dm-netlink.c:179:
+        list_for_each_entry_safe(evt, next, events, elist) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/md/dm-netlink.c:179:
+        list_for_each_entry_safe(evt, next, events, elist) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: drivers/md/dm-netlink.c:180:
+                list_del_init(&evt->elist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/md/dm-netlink.c:180:
+                list_del_init(&evt->elist);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: drivers/md/dm-netlink.c:181:
+                dm_send_event(evt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/md/dm-netlink.c:181:
+                dm_send_event(evt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: drivers/md/dm-netlink.c:182:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/md/dm-netlink.c:182:
+        }$

CHECK:BRACES: braces {} should be used on all arms of this statement
#193: FILE: drivers/md/dm-netlink.c:219:
+	if (_dm_netlink_daemon_pid) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#196: FILE: drivers/md/dm-netlink.c:222:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: drivers/md/dm-netlink.c:231:
+	unsigned qlen = 0;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#211: FILE: drivers/md/dm-netlink.c:237:
+
+}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#263: FILE: drivers/md/dm-netlink.c:287:
+	DMERR("%s: dme_cache_init failed: %d", __FUNCTION__, r);

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: drivers/md/dm-netlink.h:39:
+                   const char *path, int nr_valid_paths);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: drivers/md/dm-netlink.h:39:
+                   const char *path, int nr_valid_paths);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#312: FILE: drivers/md/dm-netlink.h:50:
 }
+static void inline dm_netlink_send_events(struct list_head *events)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#312: FILE: drivers/md/dm-netlink.h:50:
+static void inline dm_netlink_send_events(struct list_head *events)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#315: FILE: drivers/md/dm-netlink.h:53:
+}
+static void inline dm_path_event(enum dm_netlink_event_type evt_type,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#315: FILE: drivers/md/dm-netlink.h:53:
+static void inline dm_path_event(enum dm_netlink_event_type evt_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: drivers/md/dm-netlink.h:54:
+static void inline dm_path_event(enum dm_netlink_event_type evt_type,
+			  struct dm_table *t, const char *path,

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#335: FILE: drivers/md/dm.c:118:
+	spinlock_t event_lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#421: FILE: include/linux/dm-netlink-if.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#435: FILE: include/linux/dm-netlink-if.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#436: FILE: include/linux/dm-netlink-if.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#439: FILE: include/linux/dm-netlink-if.h:19:
+ * ^IAuthor: Mike Anderson <andmike@us.ibm.com>$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#449: FILE: include/linux/dm-netlink-if.h:29:
+#define DM_EVENT_MSG NLMSG_MIN_TYPE + 1

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#471: FILE: include/linux/dm-netlink-if.h:51:
+	uint16_t type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#472: FILE: include/linux/dm-netlink-if.h:52:
+	uint16_t version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#473: FILE: include/linux/dm-netlink-if.h:53:
+	uint16_t reserved1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#474: FILE: include/linux/dm-netlink-if.h:54:
+	uint16_t reserved2;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(sizeof(uint64_t)) over __attribute__((aligned(sizeof(uint64_t))))
#475: FILE: include/linux/dm-netlink-if.h:55:
+} __attribute__((aligned(sizeof(uint64_t))));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 21 warnings, 13 checks, 393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
