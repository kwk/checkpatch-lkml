CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#56: 
In function ‘memset’,
            ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#57: 
inlined from ‘ir_input_init’ at drivers/media/common/ir-functions.c:67:
             ^

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#58: 
/home/edwin/builds/linux-2.6/arch/x86/include/asm/string_64.h:61:

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#59: 
warning: call to ‘__warn_memset_zero_len’ declared with attribute
                 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#66: 
In function ‘memset’,
            ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#67: 
inlined from ‘erasecrosstest’ at drivers/mtd/tests/mtd_pagetest.c:345:
             ^

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#68: 
/home/edwin/builds/linux-2.6/arch/x86/include/asm/string_64.h:61:

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#69: 
warning: call to ‘__warn_memset_zero_len’ declared with attribute
                 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#73: 
In function ‘memset’,
            ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#74: 
inlined from ‘erasecrosstest’ at drivers/mtd/tests/mtd_pagetest.c:384:
             ^

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#75: 
/home/edwin/builds/linux-2.6/arch/x86/include/asm/string_64.h:61:

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#76: 
warning: call to ‘__warn_memset_zero_len’ declared with attribute
                 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#79: 
In function ‘memset’,
            ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#80: 
inlined from ‘crosstest’ at drivers/mtd/tests/mtd_pagetest.c:219:
             ^

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#81: 
/home/edwin/builds/linux-2.6/arch/x86/include/asm/string_64.h:61:

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#82: 
warning: call to ‘__warn_memset_zero_len’ declared with attribute
                 ^

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#111: FILE: arch/x86/include/asm/string_64.h:55:
+extern void __warn_memset_zero_len (void) __attribute__((__warning__ ("memset used with constant zero length parameter; this could be due to transposed parameters")));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#111: FILE: arch/x86/include/asm/string_64.h:55:
+extern void __warn_memset_zero_len (void) __attribute__((__warning__ ("memset used with constant zero length parameter; this could be due to transposed parameters")));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#111: FILE: arch/x86/include/asm/string_64.h:55:
+extern void __warn_memset_zero_len (void) __attribute__((__warning__ ("memset used with constant zero length parameter; this could be due to transposed parameters")));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: arch/x86/include/asm/string_64.h:55:
+extern void __warn_memset_zero_len (void) __attribute__((__warning__ ("memset used with constant zero length parameter; this could be due to transposed parameters")));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#111: FILE: arch/x86/include/asm/string_64.h:55:
+extern void __warn_memset_zero_len (void) __attribute__((__warning__ ("memset used with constant zero length parameter; this could be due to transposed parameters")));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:INLINE: plain inline is preferred over __inline
#112: FILE: arch/x86/include/asm/string_64.h:56:
+extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) void *

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((__always_inline__))
#112: FILE: arch/x86/include/asm/string_64.h:56:
+extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) void *

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: arch/x86/include/asm/string_64.h:56:
+extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) void *

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#113: FILE: arch/x86/include/asm/string_64.h:57:
+__attribute__ ((__nothrow__)) memset (void *__dest, int __ch, size_t __len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/x86/include/asm/string_64.h:59:
+  if (__builtin_constant_p (__len) && __len == 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#115: FILE: arch/x86/include/asm/string_64.h:59:
+  if (__builtin_constant_p (__len) && __len == 0)
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#115: FILE: arch/x86/include/asm/string_64.h:59:
+  if (__builtin_constant_p (__len) && __len == 0)
+    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#115: FILE: arch/x86/include/asm/string_64.h:59:
+  if (__builtin_constant_p (__len) && __len == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: arch/x86/include/asm/string_64.h:60:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/x86/include/asm/string_64.h:61:
+      __warn_memset_zero_len ();$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: arch/x86/include/asm/string_64.h:61:
+      __warn_memset_zero_len ();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: arch/x86/include/asm/string_64.h:62:
+      return __dest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/x86/include/asm/string_64.h:63:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: arch/x86/include/asm/string_64.h:64:
+  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: arch/x86/include/asm/string_64.h:64:
+  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: arch/x86/include/asm/string_64.h:64:
+  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 22 warnings, 14 checks, 18 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
