WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Infrastructure to account dirty pages per cgroup + add memory.dirty_bytes limit

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/memcontrol.h:61:
+extern void mem_cgroup_charge_dirty(struct page *page,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: include/linux/memcontrol.h:62:
+extern void mem_cgroup_charge_dirty(struct page *page,
+			enum zone_stat_item idx, int charge);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/memcontrol.h:132:
+extern unsigned long mem_cgroup_dirty_bytes(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/memcontrol.h:134:
+extern u64 mem_cgroup_page_state(enum memcg_page_stat_item item);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: include/linux/memcontrol.h:164:
+static inline void mem_cgroup_charge_dirty(struct page *page,
+			enum zone_stat_item idx, int charge)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#125: FILE: mm/memcontrol.c:77:
+	MEM_CGROUP_STAT_WRITEBACK_TEMP,   /* # of pages under writeback using
+						temporary buffers */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: mm/memcontrol.c:77:
+						temporary buffers */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: mm/memcontrol.c:549:
+void mem_cgroup_charge_dirty(struct page *page,
+			enum zone_stat_item idx, int charge)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#218: FILE: mm/memcontrol.c:1070:
+	if (cgrp->parent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!memcg"
#238: FILE: mm/memcontrol.c:1090:
+	if (memcg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!memcg"
#258: FILE: mm/memcontrol.c:1110:
+	if (memcg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#262: FILE: mm/memcontrol.c:1114:
+	if (cgrp->parent == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: mm/memcontrol.c:1133:
+		ret = mem_cgroup_read_stat(&memcg->stat,
+				MEM_CGROUP_STAT_FILE_DIRTY);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: mm/memcontrol.c:1137:
+		ret = mem_cgroup_read_stat(&memcg->stat,
+				MEM_CGROUP_STAT_WRITEBACK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: mm/memcontrol.c:1141:
+		ret = mem_cgroup_read_stat(&memcg->stat,
+				MEM_CGROUP_STAT_WRITEBACK_TEMP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: mm/memcontrol.c:1145:
+		ret = mem_cgroup_read_stat(&memcg->stat,
+				MEM_CGROUP_STAT_UNSTABLE_NFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: mm/memcontrol.c:3236:
+static int mem_cgroup_dirty_bytes_write(struct cgroup *cgrp, struct cftype *cft,
+				       u64 val)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#360: FILE: mm/memcontrol.c:3241:
+	if (cgrp->parent == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent->use_hierarchy'
#368: FILE: mm/memcontrol.c:3249:
+	if ((parent->use_hierarchy) ||
+	    (memcg->use_hierarchy && !list_empty(&cgrp->children))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009270.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 17 checks, 339 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009270.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
