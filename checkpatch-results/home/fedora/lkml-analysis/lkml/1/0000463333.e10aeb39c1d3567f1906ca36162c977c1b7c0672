WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#65: 
There remains a few section mismatch warnigns for x86_64 for areas where I did

WARNING:TYPO_SPELLING: 'warnigns' may be misspelled - perhaps 'warnings'?
#65: 
There remains a few section mismatch warnigns for x86_64 for areas where I did
                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:MISPLACED_INIT: __initdata should be placed after early_qrk[]
#154: FILE: arch/x86_64/kernel/early-quirks.c:98:
+static struct __initdata chipset early_qrk[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#167: FILE: arch/x86_64/kernel/mpparse.c:63:
+unsigned int num_processors __cpuinitdata = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/asm-x86_64/proto.h:102:
+extern void __init gart_parse_options(char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#196: FILE: include/asm-x86_64/proto.h:102:
+extern void __init gart_parse_options(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463333.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 3 warnings, 1 checks, 98 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463333.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
