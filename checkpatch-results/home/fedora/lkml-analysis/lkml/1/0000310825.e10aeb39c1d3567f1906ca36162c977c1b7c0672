WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#64: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: fs/ocfs2/stack_o2cb.c:1:
+/* -*- mode: c; c-basic-offset: 8; -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: fs/ocfs2/stack_o2cb.c:60:
+	BUG_ON(mode > LKM_MAXMODE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#133: FILE: fs/ocfs2/stack_o2cb.c:65:
+#define map_flag(_generic, _o2dlm)		\
+	if (flags & (_generic)) {		\
+		flags &= ~(_generic);		\
+		o2dlm_flags |= (_o2dlm);	\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_generic' - possible side-effects?
#133: FILE: fs/ocfs2/stack_o2cb.c:65:
+#define map_flag(_generic, _o2dlm)		\
+	if (flags & (_generic)) {		\
+		flags &= ~(_generic);		\
+		o2dlm_flags |= (_o2dlm);	\
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: fs/ocfs2/stack_o2cb.c:85:
+	BUG_ON(flags != 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#157: FILE: fs/ocfs2/stack_o2cb.c:89:
+}
+#undef map_flag

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(status_map)
#222: FILE: fs/ocfs2/stack_o2cb.c:154:
+	BUG_ON(status > (sizeof(status_map) / sizeof(status_map[0])));

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#222: FILE: fs/ocfs2/stack_o2cb.c:154:
+	BUG_ON(status > (sizeof(status_map) / sizeof(status_map[0])));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#229: FILE: fs/ocfs2/stack_o2cb.c:161:
+	BUG_ON(stack_glue_lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack_glue_lproto"
#229: FILE: fs/ocfs2/stack_o2cb.c:161:
+	BUG_ON(stack_glue_lproto == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: fs/ocfs2/stack_o2cb.c:168:
+	BUG_ON(stack_glue_lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack_glue_lproto"
#236: FILE: fs/ocfs2/stack_o2cb.c:168:
+	BUG_ON(stack_glue_lproto == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#245: FILE: fs/ocfs2/stack_o2cb.c:177:
+	BUG_ON(stack_glue_lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack_glue_lproto"
#245: FILE: fs/ocfs2/stack_o2cb.c:177:
+	BUG_ON(stack_glue_lproto == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: fs/ocfs2/stack_o2cb.c:269:
+	BUG_ON(conn == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn"
#337: FILE: fs/ocfs2/stack_o2cb.c:269:
+	BUG_ON(conn == NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#340: FILE: fs/ocfs2/stack_o2cb.c:272:
+	 * in the heartbeat universe */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv)...) over kzalloc(sizeof(struct o2dlm_private)...)
#346: FILE: fs/ocfs2/stack_o2cb.c:278:
+	priv = kzalloc(sizeof(struct o2dlm_private), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#359: FILE: fs/ocfs2/stack_o2cb.c:291:
+	 * node in this domain must agree on this. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#692: FILE: fs/ocfs2/stackglue.c:42:
+	BUG_ON(stack_glue_lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack_glue_lproto"
#692: FILE: fs/ocfs2/stackglue.c:42:
+	BUG_ON(stack_glue_lproto == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#708: FILE: fs/ocfs2/stackglue.c:53:
+	BUG_ON(stack_glue_lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack_glue_lproto"
#708: FILE: fs/ocfs2/stackglue.c:53:
+	BUG_ON(stack_glue_lproto == NULL);

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#1023: FILE: fs/ocfs2/stackglue.h:106:
+	 *  - Node down notifications for the filesystem will be recieved
 	                                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 9 checks, 1032 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
