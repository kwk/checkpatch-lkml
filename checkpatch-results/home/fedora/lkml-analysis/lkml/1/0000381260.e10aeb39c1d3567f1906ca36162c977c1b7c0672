WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
compiles and links for x86_64 with EXT3, (V)FAT, NFS, AFS, SELinux and keyrings

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: fs/exec.c:1788:
+ ^I^I^Igoto fail_restore_cred;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: fs/exec.c:1788:
+ ^I^I^Igoto fail_restore_cred;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: fs/exec.c:1788:
+ ^I^I^Igoto fail_restore_cred;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current_fsuid != inode->i_uid'
#399: FILE: fs/locks.c:1344:
+	if ((current_fsuid != inode->i_uid) && !capable(CAP_LEASE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: fs/posix_acl.c:220:
+                                if (inode->i_uid == current_fsuid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: fs/posix_acl.c:220:
+                                if (inode->i_uid == current_fsuid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: fs/posix_acl.c:224:
+                                if (pa->e_id == current_fsuid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: fs/posix_acl.c:224:
+                                if (pa->e_id == current_fsuid)$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#600: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#605: FILE: include/linux/cred.h:1:
+/* Credentials management

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: include/linux/cred.h:46:
+extern struct cred *__current_cred(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#661: FILE: include/linux/cred.h:57:
+extern void put_cred(struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#661: FILE: include/linux/cred.h:57:
+extern void put_cred(struct cred *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#662: FILE: include/linux/cred.h:58:
+extern void change_fsuid(struct cred *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#662: FILE: include/linux/cred.h:58:
+extern void change_fsuid(struct cred *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#662: FILE: include/linux/cred.h:58:
+extern void change_fsuid(struct cred *, uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#663: FILE: include/linux/cred.h:59:
+extern void change_fsgid(struct cred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#663: FILE: include/linux/cred.h:59:
+extern void change_fsgid(struct cred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#663: FILE: include/linux/cred.h:59:
+extern void change_fsgid(struct cred *, gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#664: FILE: include/linux/cred.h:60:
+extern void change_group_info(struct cred *, struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#664: FILE: include/linux/cred.h:60:
+extern void change_group_info(struct cred *, struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct group_info *' should also have an identifier name
#664: FILE: include/linux/cred.h:60:
+extern void change_group_info(struct cred *, struct group_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#665: FILE: include/linux/cred.h:61:
+extern struct cred *dup_cred(const struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cred *' should also have an identifier name
#665: FILE: include/linux/cred.h:61:
+extern struct cred *dup_cred(const struct cred *);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#772: FILE: include/linux/cred.h:168:
+#define set_current_cred(CRED)				\
+do {							\
+	put_cred(__set_current_cred(CRED));		\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#775: FILE: include/linux/cred.h:171:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#853: FILE: include/linux/sched.h:1038:
+	uid_t uid,euid,suid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#853: FILE: include/linux/sched.h:1038:
+	uid_t uid,euid,suid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#854: FILE: include/linux/sched.h:1039:
+	gid_t gid,egid,sgid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#854: FILE: include/linux/sched.h:1039:
+	gid_t gid,egid,sgid;
 	              ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#882: FILE: include/linux/sunrpc/auth.h:99:
+	struct rpc_cred *	(*lookup_cred)(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#882: FILE: include/linux/sunrpc/auth.h:99:
+	struct rpc_cred *	(*lookup_cred)(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#882: FILE: include/linux/sunrpc/auth.h:99:
+	struct rpc_cred *	(*lookup_cred)(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth*' should also have an identifier name
#883: FILE: include/linux/sunrpc/auth.h:100:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#883: FILE: include/linux/sunrpc/auth.h:100:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#883: FILE: include/linux/sunrpc/auth.h:100:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#892: FILE: include/linux/sunrpc/auth.h:108:
+	int			(*crmatch)(struct cred *, struct rpc_cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_cred *' should also have an identifier name
#892: FILE: include/linux/sunrpc/auth.h:108:
+	int			(*crmatch)(struct cred *, struct rpc_cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#892: FILE: include/linux/sunrpc/auth.h:108:
+	int			(*crmatch)(struct cred *, struct rpc_cred *, int);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#902: FILE: include/linux/sunrpc/auth.h:129:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#902: FILE: include/linux/sunrpc/auth.h:129:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#902: FILE: include/linux/sunrpc/auth.h:129:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#902: FILE: include/linux/sunrpc/auth.h:129:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#903: FILE: include/linux/sunrpc/auth.h:130:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_cred *' should also have an identifier name
#903: FILE: include/linux/sunrpc/auth.h:130:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cred *' should also have an identifier name
#903: FILE: include/linux/sunrpc/auth.h:130:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#903: FILE: include/linux/sunrpc/auth.h:130:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rpc_credops *' should also have an identifier name
#903: FILE: include/linux/sunrpc/auth.h:130:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#968: FILE: kernel/cred.c:1:
+/* Credential caching/management

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#998: FILE: kernel/cred.c:31:
+	if (

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cred)...) over kmalloc(sizeof(struct cred)...)
#1006: FILE: kernel/cred.c:39:
+		cred = kmalloc(sizeof(struct cred), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1037: FILE: kernel/cred.c:70:
+EXPORT_SYMBOL(__current_cred);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cred)...) over kmalloc(sizeof(struct cred)...)
#1051: FILE: kernel/cred.c:84:
+	cred = kmalloc(sizeof(struct cred), GFP_KERNEL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1063: FILE: kernel/cred.c:96:
+EXPORT_SYMBOL(dup_cred);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1093: FILE: kernel/cred.c:126:
+EXPORT_SYMBOL(put_cred);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1161: FILE: kernel/fork.c:962:
+	if (

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cred)...) over kmalloc(sizeof(struct cred)...)
#1169: FILE: kernel/fork.c:970:
+		cred = kmalloc(sizeof(struct cred), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: kernel/fork.c:977:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1209: FILE: kernel/fork.c:1063:
+	if ((retval = copy_cred(p) < 0))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1296: FILE: kernel/sys.c:1087:
+		current->gid = current->egid = current->sgid = gid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: kernel/sys.c:1098:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: kernel/sys.c:1098:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1493: FILE: kernel/sys.c:1406:
+^I    uid == current->suid || uid == current_fsuid || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1529: FILE: kernel/sys.c:1443:
+^I    gid == current->sgid || gid == current_fsgid || $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1707: FILE: net/sunrpc/auth.c:270:
+rpcauth_lookup_credcache(struct rpc_auth *auth, struct cred * acred,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1708: FILE: net/sunrpc/auth.c:271:
+rpcauth_lookup_credcache(struct rpc_auth *auth, struct cred * acred,
 		int flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1868: FILE: security/dummy.c:143:
+	current->suid = current->euid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1869: FILE: security/dummy.c:144:
+	current->sgid = current->egid = bprm->e_gid;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000381260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 38 warnings, 16 checks, 1723 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000381260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
