ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#39: FILE: fs/debugfs/inode.c:471:
*old_dir, struct dentry *old_dentry, int error;

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: fs/debugfs/inode.c:500:
+	fsnotify_move(old_dir->d_inode, old_name, old_len,
+		new_dir->d_inode, old_dentry->d_name.name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: fs/debugfs/inode.c:500:
+	fsnotify_move(old_dir->d_inode, old_name, old_len,
old_dentry->d_name.len,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: fs/namei.c:2663:
+2665,10 @@ int vfs_rename(struct inode *old_dir, struct dentry
     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#117: FILE: fs/notify/fsnotify.c:81:
+static void fsnotify_update_descents(struct dentry *dentry, bool
watched) {
+	struct dentry *child;
+
+	list_for_each_entry(child, &dentry->d_subdirs, d_u.d_child) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#137: FILE: fs/notify/fsnotify.c:94:
+		if (!fsnotify_inode_watches_descents(child->d_inode)) {
+			fsnotify_update_descents(child, watched);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#149: FILE: fs/notify/fsnotify.c:103:
+/* do something equivalent to __fsnotify_update_child_dentry_flags,
+	bool should_be =

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#151: FILE: fs/notify/fsnotify.c:104:
+	bool should_be =
+			 || (dentry->d_flags &

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 0)
#200: FILE: fs/notify/fsnotify.c:145:
+		} else {
[...]
it's children but

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 0)
#237: FILE: fs/notify/fsnotify.c:158:
+		if (send) {
[...]
the new mask which

CHECK:LINE_SPACING: Please don't use multiple blank lines
#298: FILE: fs/notify/fsnotify.c:202:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#342: FILE: fs/notify/fsnotify.c:234:
+	/* global tests shouldn't care about events on child/descent
+	__u32 test_mask = mask & ~FS_EVENT_ON_TREE;

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#362: FILE: fs/notify/fsnotify.h:272:
+++ b/fs/notify/fsnotify.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: fs/notify/fsnotify.h:129:
+static void fsnotify_update_descents_as_needed(struct inode *inode,
+	if (tree) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: fs/notify/fsnotify.h:131:
+		struct dentry *dentry;
+		list_for_each_entry(dentry, &inode->i_dentry, d_alias)

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: fs/notify/fsnotify.h:200:
+		struct dentry *dentry;
+		list_for_each_entry(dentry, &inode->i_dentry, d_alias)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: fs/notify/fsnotify.h:369:
+			list_for_each_entry(dentry, &inode->i_dentry,
+				__fsnotify_update_dcache_flags(dentry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#512: FILE: include/linux/dcache.h:23:
+	const int len = dentry->d_name.len;
+	fsnotify_far_ancestors(dentry->d_parent, name, len, mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: include/linux/dcache.h:101:
+		fsnotify_far_ancestors(alias, new_name, new_len,
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: include/linux/dcache.h:105:
+		fsnotify_far_ancestors(alias, old_name, old_len,
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#689: FILE: include/linux/fsnotify_backend.h:50:
+ * dnotify. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#693: FILE: include/linux/fsnotify_backend.h:53:
+/* This inode cares about things that happen to some of its descents.
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#704: FILE: include/linux/fsnotify_backend.h:260:
+extern void __fsnotify_ancestors(struct dentry *dentry, __u32 mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#705: FILE: include/linux/fsnotify_backend.h:261:
+extern void fsnotify_far_ancestors(struct dentry *dentry, const

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: include/linux/fsnotify_backend.h:299:
+		if (fsnotify_inode_watches_descents(p_inode) ||
+			dentry->d_flags |=

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: include/linux/fsnotify_backend.h:299:
+		if (fsnotify_inode_watches_descents(p_inode) ||
DCACHE_FSNOTIFY_ANCESTOR_WATCHED;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000012469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 11 warnings, 12 checks, 696 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000012469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
