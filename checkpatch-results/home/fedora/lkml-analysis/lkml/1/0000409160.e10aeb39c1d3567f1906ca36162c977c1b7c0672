ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#70: FILE: security/selinux/selinuxfs.c:71:
+static struct dentry *class_dir = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: security/selinux/selinuxfs.c:1339:
+static ssize_t sel_read_class(struct file * file, char __user *buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: security/selinux/selinuxfs.c:1340:
+static ssize_t sel_read_class(struct file * file, char __user *buf,
+				size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: security/selinux/selinuxfs.c:1363:
+static ssize_t sel_read_perm(struct file * file, char __user *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: security/selinux/selinuxfs.c:1364:
+static ssize_t sel_read_perm(struct file * file, char __user *buf,
+				size_t count, loff_t *ppos)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: security/selinux/selinuxfs.c:1376:
+	len = snprintf(page, PAGE_SIZE,"%d", sel_ino_to_perm(ino));
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: security/selinux/selinuxfs.c:1388:
+static int sel_make_perm_files(char *objclass, int classvalue,
+				struct dentry *dir)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#212: FILE: security/selinux/selinuxfs.c:1407:
+		inode = sel_make_inode(dir->d_sb, S_IFREG|S_IRUGO);
 		                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#212: FILE: security/selinux/selinuxfs.c:1407:
+		inode = sel_make_inode(dir->d_sb, S_IFREG|S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: security/selinux/selinuxfs.c:1414:
+		inode->i_ino = sel_perm_to_ino(classvalue, i+1);
 		                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: security/selinux/selinuxfs.c:1427:
+static int sel_make_class_dir_entries(char *classname, int index,
+					struct dentry *dir)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#244: FILE: security/selinux/selinuxfs.c:1439:
+	inode = sel_make_inode(dir->d_sb, S_IFREG|S_IRUGO);
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#244: FILE: security/selinux/selinuxfs.c:1439:
+	inode = sel_make_inode(dir->d_sb, S_IFREG|S_IRUGO);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#307: FILE: security/selinux/selinuxfs.c:1502:
+	last_class_ino = sel_class_to_ino(nclasses+2);
 	                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: security/selinux/selinuxfs.c:1514:
+		rc = sel_make_dir(class_dir->d_inode, class_name_dir,
+				&last_class_ino);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#324: FILE: security/selinux/selinuxfs.c:1519:
+		rc = sel_make_class_dir_entries(classes[i], i+1,
 		                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: security/selinux/selinuxfs.c:1520:
+		rc = sel_make_class_dir_entries(classes[i], i+1,
+				class_name_dir);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409160.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 2 warnings, 11 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409160.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
