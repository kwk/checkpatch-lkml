WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
nameidata.  This is unfortunate because in nfsd and the mqueue filesystem we

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#63: FILE: include/linux/namei.h:22:
+#define __NAMEIDATA2				\
+	struct dentry	*dentry;		\
+	struct vfsmount *mnt;			\
+	unsigned int	flags;			\
+						\
+	union {					\
+		struct open_intent open;	\
+	} intent;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#93: FILE: include/linux/namei.h:45:
+static inline struct nameidata2 *ND2(struct nameidata *nd)
                                                        ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#107: FILE: include/linux/namei.h:97:
+extern struct file *lookup_instantiate_filp(struct nameidata2 *nd, struct dentry *dentry, int (*open)(struct inode *, struct file *));
                                                                ^^

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#107: FILE: include/linux/namei.h:97:
+extern struct file *lookup_instantiate_filp(struct nameidata2 *nd, struct dentry *dentry, int (*open)(struct inode *, struct file *));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/namei.h:97:
+extern struct file *lookup_instantiate_filp(struct nameidata2 *nd, struct dentry *dentry, int (*open)(struct inode *, struct file *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/namei.h:99:
+extern void release_open_intent(struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#110: FILE: include/linux/namei.h:99:
+extern void release_open_intent(struct nameidata2 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#121: FILE: fs/namei.c:228:
+int permission(struct inode *inode, int mask, struct nameidata2 *nd)
                                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#130: FILE: fs/namei.c:281:
+int vfs_permission(struct nameidata2 *nd, int mask)
                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#139: FILE: fs/namei.c:369:
+void release_open_intent(struct nameidata2 *nd)
                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#148: FILE: fs/namei.c:380:
+	int status = dentry->d_op->d_revalidate(dentry, ND2(nd));
 	                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#157: FILE: fs/namei.c:458:
+	return security_inode_permission(inode, MAY_EXEC, ND2(nd));
 	                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#166: FILE: fs/namei.c:494:
+			result = dir->i_op->lookup(dir, dentry, ND2(nd));
 			                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#175: FILE: fs/namei.c:835:
+			err = vfs_permission(ND2(nd), MAY_EXEC);
 			                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#185: FILE: fs/namei.c:982:
+							    ND2(nd)))
 							        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#194: FILE: fs/namei.c:1198:
+		release_open_intent(ND2(nd));
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: fs/namei.c:1259:
+	err = permission(inode, MAY_EXEC, ND2(nd));
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#212: FILE: fs/namei.c:1281:
+		dentry = inode->i_op->lookup(inode, new, ND2(nd));
 		                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#221: FILE: fs/namei.c:1426:
+			     struct nameidata2 *nd)
 			                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#230: FILE: fs/namei.c:1496:
+		struct nameidata2 *nd)
 		                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#239: FILE: fs/namei.c:1532:
+	error = vfs_permission(ND2(nd), acc_mode);
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#248: FILE: fs/namei.c:1605:
+	error = vfs_create(dir->d_inode, path->dentry, mode, ND2(nd));
 	                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#257: FILE: fs/namei.c:1738:
+		release_open_intent(ND2(nd));
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#266: FILE: fs/namei.c:1766:
+		release_open_intent(ND2(nd));
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#275: FILE: fs/namei.c:1892:
+					   ND2(&nd));
 					        ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: include/linux/fs.h:985:
+extern int vfs_permission(struct nameidata2 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#295: FILE: include/linux/fs.h:985:
+extern int vfs_permission(struct nameidata2 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#295: FILE: include/linux/fs.h:985:
+extern int vfs_permission(struct nameidata2 *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/fs.h:986:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#296: FILE: include/linux/fs.h:986:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#296: FILE: include/linux/fs.h:986:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#296: FILE: include/linux/fs.h:986:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#296: FILE: include/linux/fs.h:986:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata2 *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#306: FILE: include/linux/fs.h:1110:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata2 *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#306: FILE: include/linux/fs.h:1110:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata2 *);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#306: FILE: include/linux/fs.h:1110:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata2 *);
 	                                             ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#306: FILE: include/linux/fs.h:1110:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#306: FILE: include/linux/fs.h:1110:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#306: FILE: include/linux/fs.h:1110:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#306: FILE: include/linux/fs.h:1110:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata2 *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#307: FILE: include/linux/fs.h:1111:
+	struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata2 *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#307: FILE: include/linux/fs.h:1111:
+	struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata2 *);
 	                                         ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#307: FILE: include/linux/fs.h:1111:
+	struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#307: FILE: include/linux/fs.h:1111:
+	struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#307: FILE: include/linux/fs.h:1111:
+	struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata2 *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#316: FILE: include/linux/fs.h:1124:
+	int (*permission) (struct inode *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#316: FILE: include/linux/fs.h:1124:
+	int (*permission) (struct inode *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#316: FILE: include/linux/fs.h:1124:
+	int (*permission) (struct inode *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#316: FILE: include/linux/fs.h:1124:
+	int (*permission) (struct inode *, int, struct nameidata2 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: include/linux/fs.h:1620:
+extern int permission(struct inode *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#325: FILE: include/linux/fs.h:1620:
+extern int permission(struct inode *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#325: FILE: include/linux/fs.h:1620:
+extern int permission(struct inode *, int, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#325: FILE: include/linux/fs.h:1620:
+extern int permission(struct inode *, int, struct nameidata2 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: include/linux/fs.h:1877:
+extern struct dentry *simple_lookup(struct inode *, struct dentry *, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#334: FILE: include/linux/fs.h:1877:
+extern struct dentry *simple_lookup(struct inode *, struct dentry *, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#334: FILE: include/linux/fs.h:1877:
+extern struct dentry *simple_lookup(struct inode *, struct dentry *, struct nameidata2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata2 *' should also have an identifier name
#334: FILE: include/linux/fs.h:1877:
+extern struct dentry *simple_lookup(struct inode *, struct dentry *, struct nameidata2 *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444737.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 49 warnings, 6 checks, 254 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444737.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
