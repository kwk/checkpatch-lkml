WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
This patch adds the ability to encode and decode file labels on the server for

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "open->op_label"
#78: FILE: fs/nfsd/nfs4proc.c:111:
+		if (!status && open->op_label != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: fs/nfsd/nfs4proc.c:117:
+			status = security_inode_setsecctx(resfh.fh_dentry,
+				open->op_label->label, open->op_label->len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "create->cr_label"
#97: FILE: fs/nfsd/nfs4proc.c:452:
+	if (!status && create->cr_label != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: fs/nfsd/nfs4proc.c:458:
+		status = security_inode_setsecctx(resfh.fh_dentry,
+				create->cr_label->label, create->cr_label->len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "setattr->sa_label"
#115: FILE: fs/nfsd/nfs4proc.c:701:
+	if (setattr->sa_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: fs/nfsd/nfs4proc.c:703:
+		status = nfsd4_set_nfs4_label(rqstp, &cstate->current_fh,
+					    setattr->sa_label);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#128: FILE: fs/nfsd/nfs4proc.c:1000:
+static struct nfsd4_operation nfsd4_ops[LAST_NFS4_OP+1] = {
                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: fs/nfsd/nfs4xdr.c:256:
+    struct nfs4_acl **acl, struct nfs4_label **label)$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*label)...) over kzalloc(sizeof(struct nfs4_label)...)
#172: FILE: fs/nfsd/nfs4xdr.c:421:
+		*label = kzalloc(sizeof(struct nfs4_label), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!label"
#173: FILE: fs/nfsd/nfs4xdr.c:422:
+		if (*label == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!label"
#179: FILE: fs/nfsd/nfs4xdr.c:428:
+		if ((*label)->label == NULL) {

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#201: FILE: fs/nfsd/nfs4xdr.c:535:
+	if ((status = nfsd4_decode_fattr(argp, create->cr_bmval, &create->cr_iattr, &create->cr_acl, &create->cr_label)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#201: FILE: fs/nfsd/nfs4xdr.c:535:
+	if ((status = nfsd4_decode_fattr(argp, create->cr_bmval, &create->cr_iattr, &create->cr_acl, &create->cr_label)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#210: FILE: fs/nfsd/nfs4xdr.c:694:
+			if ((status = nfsd4_decode_fattr(argp, open->op_bmval, &open->op_iattr, &open->op_acl, &open->op_label)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#210: FILE: fs/nfsd/nfs4xdr.c:694:
+			if ((status = nfsd4_decode_fattr(argp, open->op_bmval, &open->op_iattr, &open->op_acl, &open->op_label)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: fs/nfsd/nfs4xdr.c:1440:
+	BUG_ON(*buflen < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: fs/nfsd/nfs4xdr.c:1891:
+		status = nfsd4_encode_security_label(rqstp, dentry,
+				&p, &buflen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: fs/nfsd/vfs.c:561:
+__be32 nfsd4_set_nfs4_label(struct svc_rqst *rqstp, struct svc_fh *fhp,
+    struct nfs4_label *label)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: fs/nfsd/vfs.c:561:
+    struct nfs4_label *label)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: fs/nfsd/vfs.c:582:
+__be32 nfsd4_set_nfs4_label(struct svc_rqst *rqstp, struct svc_fh *fhp,
+    struct nfs4_label *label)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: fs/nfsd/vfs.c:582:
+    struct nfs4_label *label)$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct svc_rqst *' should also have an identifier name
#374: FILE: include/linux/nfsd/nfsd.h:90:
+__be32          nfsd4_set_nfs4_label(struct svc_rqst *, struct svc_fh *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct svc_fh *' should also have an identifier name
#374: FILE: include/linux/nfsd/nfsd.h:90:
+__be32          nfsd4_set_nfs4_label(struct svc_rqst *, struct svc_fh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4_label *' should also have an identifier name
#374: FILE: include/linux/nfsd/nfsd.h:90:
+__be32          nfsd4_set_nfs4_label(struct svc_rqst *, struct svc_fh *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: include/linux/nfsd/nfsd.h:91:
+                    struct nfs4_label *);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: include/linux/nfsd/nfsd.h:91:
+__be32          nfsd4_set_nfs4_label(struct svc_rqst *, struct svc_fh *,
+                    struct nfs4_label *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: include/linux/nfsd/nfsd.h:91:
+                    struct nfs4_label *);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197826.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 11 warnings, 14 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197826.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
