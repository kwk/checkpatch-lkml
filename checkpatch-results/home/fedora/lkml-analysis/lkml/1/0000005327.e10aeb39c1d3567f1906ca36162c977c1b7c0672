WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
This patch introduces a hastable 'event_hash' and operations (add/remove/search..)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: security/snet/snet_event.c:1:
+#include <linux/spinlock.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->se.protocol == protocol'
#82: FILE: security/snet/snet_event.c:32:
+		if ((s->se.protocol == protocol) &&
+		    (s->se.syscall == syscall)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->se.syscall == syscall'
#82: FILE: security/snet/snet_event.c:32:
+		if ((s->se.protocol == protocol) &&
+		    (s->se.syscall == syscall)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#94: FILE: security/snet/snet_event.c:44:
+	unsigned hashs_to_skip = cb->args[0];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#95: FILE: security/snet/snet_event.c:45:
+	unsigned events_to_skip = cb->args[1];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "__snet_event_lookup"
#137: FILE: security/snet/snet_event.c:87:
+	if (__snet_event_lookup(syscall, protocol) != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*data)...) over kzalloc(sizeof(struct snet_event_entry)...)
#150: FILE: security/snet/snet_event.c:100:
+	data = kzalloc(sizeof(struct snet_event_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "__snet_event_lookup"
#158: FILE: security/snet/snet_event.c:108:
+	if (__snet_event_lookup(syscall, protocol) != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around data->list
#167: FILE: security/snet/snet_event.c:117:
+	INIT_LIST_HEAD(&(data->list));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#184: FILE: security/snet/snet_event.c:134:
+	if (data == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: security/snet/snet_event.c:154:
+		struct snet_event_entry *data, *tmp;
+		list_for_each_entry_safe(data, tmp, &snet_evh[i], list) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#211: FILE: security/snet/snet_event.c:161:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*snet_evh)...) over kzalloc(sizeof(struct list_head)...)
#218: FILE: security/snet/snet_event.c:168:
+	snet_evh = kzalloc(sizeof(struct list_head) * snet_evh_size,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#218: FILE: security/snet/snet_event.c:168:
+	snet_evh = kzalloc(sizeof(struct list_head) * snet_evh_size,
+			     GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: security/snet/snet_event.c:169:
+	snet_evh = kzalloc(sizeof(struct list_head) * snet_evh_size,
+			     GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#221: FILE: security/snet/snet_event.c:171:
+		printk(KERN_WARNING

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#221: FILE: security/snet/snet_event.c:171:
+	if (!snet_evh) {
+		printk(KERN_WARNING

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#246: FILE: security/snet/snet_event.h:1:
+#ifndef _SNET_EVENT_H

WARNING:TYPO_SPELLING: 'funtion' may be misspelled - perhaps 'function'?
#263: FILE: security/snet/snet_event.h:18:
+/* exit funtion */
         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005327.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 9 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005327.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
