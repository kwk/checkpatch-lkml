WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#184: FILE: fs/dlm/lock.c:3721:
+/* If the lockspace is in recovery mode (locking stopped), then normal
+   messages are saved on the requestqueue for processing after recovery is

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: fs/dlm/lock.c:3726:
+   messages as they arrive. */

CHECK:SPACING: No space is necessary after a cast
#198: FILE: fs/dlm/lock.c:3732:
+		dlm_add_requestqueue(ls, nodeid, (struct dlm_header *) ms);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#206: FILE: fs/dlm/lock.c:3740:
+/* This is called by dlm_recoverd to process messages that were saved on
+   the requestqueue. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#206: FILE: fs/dlm/lock.c:3740:
+   the requestqueue. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#214: FILE: fs/dlm/lock.c:3748:
+/* This is called by the midcomms layer when something is received for
+   the lockspace.  It could be either a MSG (normal message sent as part of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#216: FILE: fs/dlm/lock.c:3750:
+   lockspace recovery). */

CHECK:SPACING: No space is necessary after a cast
#220: FILE: fs/dlm/lock.c:3754:
+	struct dlm_message *ms = (struct dlm_message *) hd;

CHECK:SPACING: No space is necessary after a cast
#221: FILE: fs/dlm/lock.c:3755:
+	struct dlm_rcom *rc = (struct dlm_rcom *) hd;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#256: FILE: fs/dlm/lock.c:3790:
+	/* this rwsem allows dlm_ls_stop() to wait for all dlm_recv threads to
+	   be inactive (in this ls) before transitioning to recovery mode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#256: FILE: fs/dlm/lock.c:3790:
+	   be inactive (in this ls) before transitioning to recovery mode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#319: FILE: fs/dlm/member.c:250:
+/* Userspace guarantees that dlm_ls_stop() has completed on all nodes before
+   dlm_ls_start() is called on any of them to start the new recovery. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#319: FILE: fs/dlm/member.c:250:
+   dlm_ls_start() is called on any of them to start the new recovery. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#437: FILE: fs/dlm/rcom.c:390:
+/* If the lockspace doesn't exist then still send a status message
+   back; it's possible that it just doesn't have its global_id yet. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#437: FILE: fs/dlm/rcom.c:390:
+   back; it's possible that it just doesn't have its global_id yet. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#531: FILE: fs/dlm/recoverd.c:31:
+   enables locking and clears the requestqueue between a and b. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_add_requestqueue', this function's name, in a string
#589: FILE: fs/dlm/requestqueue.c:40:
+		log_print("dlm_add_requestqueue: out of memory len %d", length);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373464.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 3 checks, 525 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373464.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
