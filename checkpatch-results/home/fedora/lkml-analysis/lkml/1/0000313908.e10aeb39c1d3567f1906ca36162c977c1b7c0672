WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#85: 
Signed-off-by:  Lee Schermerhorn <lee.schermerhorn@hp.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageNoreclaim>
#134: FILE: include/linux/page-flags.h:307:
+#define __ClearPageNoreclaim(page) __clear_bit(PG_noreclaim, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#159: FILE: include/linux/mmzone.h:90:
+	NR_NORECLAIM=NR_ACTIVE_FILE, /* avoid compiler errors in dead code */
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#172: FILE: include/linux/mmzone.h:133:
+	LRU_NORECLAIM=LRU_ACTIVE_FILE,	/* avoid compiler errors in dead code */
 	             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#179: FILE: include/linux/mmzone.h:140:
+#define for_each_reclaimable_lru(l) for (l = 0; l <= LRU_ACTIVE_FILE; l++)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#274: FILE: include/linux/mm_inline.h:113:
+	} else {
+		 if (PageActive(page)) {

WARNING:TABSTOP: Statements should start on a tabstop
#275: FILE: include/linux/mm_inline.h:114:
+		 if (PageActive(page)) {

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageActive>
#276: FILE: include/linux/mm_inline.h:115:
+			__ClearPageActive(page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/swap.h:176:
+extern void lru_cache_add_active_or_noreclaim(struct page *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#293: FILE: include/linux/swap.h:176:
+extern void lru_cache_add_active_or_noreclaim(struct page *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#293: FILE: include/linux/swap.h:176:
+extern void lru_cache_add_active_or_noreclaim(struct page *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/swap.h:177:
+extern void lru_cache_add_active_or_noreclaim(struct page *,
+					struct vm_area_struct *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#310: FILE: include/linux/swap.h:217:
+	BUG("Noreclaim not configured, but page added anyway?!");

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/linux/swap.h:246:
+extern int page_reclaimable(struct page *page, struct vm_area_struct *vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: include/linux/swap.h:249:
+static inline int page_reclaimable(struct page *page,
+						struct vm_area_struct *vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#362: FILE: mm/swap.c:106:
+	if (PageNoreclaim(page))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#364: FILE: mm/swap.c:108:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: mm/swap.c:137:
+^I ^Iif (PageLRU(page) && !PageActive(page) &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: mm/swap.c:137:
+^I ^Iif (PageLRU(page) && !PageActive(page) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: mm/swap.c:138:
+	 	if (PageLRU(page) && !PageActive(page) &&
+					!PageNoreclaim(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: mm/swap.c:231:
+	if (!PageActive(page) && !PageNoreclaim(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: mm/swap.c:266:
+void lru_cache_add_active_or_noreclaim(struct page *page,
+					struct vm_area_struct *vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#429: FILE: mm/swap.c:268:
+	if (page_reclaimable(page, vma)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#434: FILE: mm/swap.c:273:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageLRU>
#459: FILE: mm/swap.c:386:
+				__ClearPageLRU(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#486: FILE: mm/migrate.c:329:
+	if (TestClearPageActive(page)) {
[...]
+	} else if (TestClearPageNoreclaim(page))
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#716: FILE: mm/vmscan.c:2291:
+{
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000313908.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 7 warnings, 17 checks, 575 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000313908.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
