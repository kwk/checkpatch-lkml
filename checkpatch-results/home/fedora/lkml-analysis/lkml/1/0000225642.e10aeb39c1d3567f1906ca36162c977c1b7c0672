ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#85: FILE: arch/x86/kernel/bios_uv.c:15:
  *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#86: FILE: arch/x86/kernel/bios_uv.c:16:
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: arch/x86/kernel/bios_uv.c:67:
+x86_bios_freq_base(unsigned long clock_type, unsigned long *ticks_per_second,
+					unsigned long *drift_info)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#163: FILE: arch/x86/kernel/bios_uv.c:74:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efi.sal_systab == EFI_INVALID_TABLE_ADDR'
#169: FILE: arch/x86/kernel/bios_uv.c:80:
+	if ((efi.sal_systab == EFI_INVALID_TABLE_ADDR) ||
+	    (efi.sal_systab == (unsigned long)NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efi.sal_systab == (unsigned long)NULL'
#169: FILE: arch/x86/kernel/bios_uv.c:80:
+	if ((efi.sal_systab == EFI_INVALID_TABLE_ADDR) ||
+	    (efi.sal_systab == (unsigned long)NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#171: FILE: arch/x86/kernel/bios_uv.c:82:
+		printk(KERN_CRIT "No EFI SAL System Table.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#179: FILE: arch/x86/kernel/bios_uv.c:90:
+		printk(KERN_ERR "bad signature in SAL system table!");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#187: FILE: arch/x86/kernel/bios_uv.c:98:
+	printk(KERN_INFO "EFI SAL System Table Revision %d\n", tab->revision);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: arch/x86/kernel/bios_uv.c:105:
+u64 efi_call6(void *fp, u64 arg1, u64 arg2, u64 arg3,
+			u64 arg4, u64 arg5, u64 arg6)

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#231: FILE: include/asm-x86/uv/bios.h:18:
  *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#232: FILE: include/asm-x86/uv/bios.h:19:
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#259: FILE: include/asm-x86/uv/bios.h:40:
+	BIOS_STATUS_UNIMPLEMENTED	= -ENOSYS,

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#283: FILE: include/asm-x86/uv/bios.h:52:
+^Iu64 function; ^I^I/* BIOS runtime callback function ptr */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/asm-x86/uv/bios.h:58:
+extern s64 uv_bios_call(int, u64, u64, u64, u64, u64);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#289: FILE: include/asm-x86/uv/bios.h:58:
+extern s64 uv_bios_call(int, u64, u64, u64, u64, u64);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#289: FILE: include/asm-x86/uv/bios.h:58:
+extern s64 uv_bios_call(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#289: FILE: include/asm-x86/uv/bios.h:58:
+extern s64 uv_bios_call(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#289: FILE: include/asm-x86/uv/bios.h:58:
+extern s64 uv_bios_call(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#289: FILE: include/asm-x86/uv/bios.h:58:
+extern s64 uv_bios_call(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#289: FILE: include/asm-x86/uv/bios.h:58:
+extern s64 uv_bios_call(int, u64, u64, u64, u64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/asm-x86/uv/bios.h:59:
+extern s64 uv_bios_call_irqsave(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#290: FILE: include/asm-x86/uv/bios.h:59:
+extern s64 uv_bios_call_irqsave(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#290: FILE: include/asm-x86/uv/bios.h:59:
+extern s64 uv_bios_call_irqsave(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#290: FILE: include/asm-x86/uv/bios.h:59:
+extern s64 uv_bios_call_irqsave(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#290: FILE: include/asm-x86/uv/bios.h:59:
+extern s64 uv_bios_call_irqsave(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#290: FILE: include/asm-x86/uv/bios.h:59:
+extern s64 uv_bios_call_irqsave(int, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#290: FILE: include/asm-x86/uv/bios.h:59:
+extern s64 uv_bios_call_irqsave(int, u64, u64, u64, u64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: include/asm-x86/uv/bios.h:60:
+extern s64 uv_bios_call_reentrant(int which, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#291: FILE: include/asm-x86/uv/bios.h:60:
+extern s64 uv_bios_call_reentrant(int which, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#291: FILE: include/asm-x86/uv/bios.h:60:
+extern s64 uv_bios_call_reentrant(int which, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#291: FILE: include/asm-x86/uv/bios.h:60:
+extern s64 uv_bios_call_reentrant(int which, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#291: FILE: include/asm-x86/uv/bios.h:60:
+extern s64 uv_bios_call_reentrant(int which, u64, u64, u64, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#291: FILE: include/asm-x86/uv/bios.h:60:
+extern s64 uv_bios_call_reentrant(int which, u64, u64, u64, u64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/asm-x86/uv/bios.h:62:
+extern void uv_bios_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/asm-x86/uv/bios.h:69:
+extern u64 efi_call6(void *, u64, u64, u64, u64, u64, u64);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 22 warnings, 10 checks, 217 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
