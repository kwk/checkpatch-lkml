WARNING:TYPO_SPELLING: 'approachs' may be misspelled - perhaps 'approaches'?
#40: 
When we want to migrate pages by some kernel codes, we have 2 approachs.
                                                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
Maybe more check will be needed. At least, this patch's migration_nocntext()

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/migrate.h:33:
+extern int migrate_pages_nocontext(struct list_head *l, new_page_t x,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#73: FILE: include/linux/migrate.h:33:
+extern int migrate_pages_nocontext(struct list_head *l, new_page_t x,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: include/linux/migrate.h:34:
+extern int migrate_pages_nocontext(struct list_head *l, new_page_t x,
+					unsigned long);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#102: FILE: include/linux/rmap.h:48:
 }
+#define anon_vma_hold(page)	do{}while(0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#102: FILE: include/linux/rmap.h:48:
+#define anon_vma_hold(page)	do{}while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that close brace '}'
#102: FILE: include/linux/rmap.h:48:
+#define anon_vma_hold(page)	do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: include/linux/rmap.h:48:
+#define anon_vma_hold(page)	do{}while(0)

ERROR:SPACING: space required before the open brace '{'
#103: FILE: include/linux/rmap.h:49:
+#define anon_vma_release(anon)	do{}while(0)

ERROR:SPACING: space required after that close brace '}'
#103: FILE: include/linux/rmap.h:49:
+#define anon_vma_release(anon)	do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#103: FILE: include/linux/rmap.h:49:
+#define anon_vma_release(anon)	do{}while(0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#109: FILE: include/linux/rmap.h:55:
+	struct anon_vma *ret = kmem_cache_alloc(anon_vma_cachep, GFP_KERNEL);
+	if (ret)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#113: FILE: include/linux/rmap.h:59:
+}
+static inline void anon_vma_free(struct anon_vma *anon_vma)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#118: FILE: include/linux/rmap.h:64:
+}
+extern struct anon_vma *anon_vma_hold(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/rmap.h:64:
+extern struct anon_vma *anon_vma_hold(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/rmap.h:65:
+extern void anon_vma_release(struct anon_vma *anon_vma);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#161: FILE: mm/migrate.c:647:
+	if (rc) {
 		remove_migration_ptes(page, page);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: mm/migrate.c:698:
+int __migrate_pages(struct list_head *from,
+		new_page_t get_new_page, unsigned long private, int context)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: mm/migrate.c:749:
+int migrate_pages(struct list_head *from,
+	new_page_t get_new_page, unsigned long private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: mm/migrate.c:759:
+int migrate_pages_nocontext(struct list_head *from,
+	new_page_t get_new_page, unsigned long private)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#221: FILE: mm/rmap.c:208:
+struct anon_vma *anon_vma_hold(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#223: FILE: mm/rmap.c:210:
+	struct anon_vma *anon_vma;
+	anon_vma = page_lock_anon_vma(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: mm/rmap.c:221:
+	int empty;
+	spin_lock(&anon_vma->lock);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 7 warnings, 10 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
