WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Every server type is represented as a directory in /sys/fs/9p/srv. Initially

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#75: FILE: include/net/9p/srv.h:100:
+	spinlock_t		lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv *' should also have an identifier name
#107: FILE: include/net/9p/srv.h:186:
+int p9srv_listener_add(struct p9srv *, char *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#107: FILE: include/net/9p/srv.h:186:
+int p9srv_listener_add(struct p9srv *, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#107: FILE: include/net/9p/srv.h:186:
+int p9srv_listener_add(struct p9srv *, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv *' should also have an identifier name
#108: FILE: include/net/9p/srv.h:187:
+int p9srv_listener_del(struct p9srv *, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#108: FILE: include/net/9p/srv.h:187:
+int p9srv_listener_del(struct p9srv *, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#108: FILE: include/net/9p/srv.h:187:
+int p9srv_listener_del(struct p9srv *, char *, char *);

CHECK:CAMELCASE: Avoid CamelCase: <Shutdown>
#128: FILE: net/9p/srv.c:49:
+	Shutdown = 1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#148: FILE: net/9p/srv.c:96:
+EXPORT_SYMBOL(p9srv_subsys);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: net/9p/srv.c:132:
+static ssize_t p9srv_type_store(struct kobject *, struct attribute *,
+	const char *, size_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: net/9p/srv.c:136:
+static ssize_t p9srv_srv_store(struct kobject *, struct attribute *,
+	const char *, size_t);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#175: FILE: net/9p/srv.c:172:
+static struct sysfs_ops p9srv_type_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#190: FILE: net/9p/srv.c:187:
+static struct sysfs_ops p9srv_srv_ops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: net/9p/srv.c:457:
+struct p9srv_type *p9srv_type_register(char *name,
+	struct p9srv *(*create)(void))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: net/9p/srv.c:530:
+static ssize_t p9srv_type_show(struct kobject *kobj, struct attribute *attr,
+	char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: net/9p/srv.c:570:
+static ssize_t p9srv_type_store(struct kobject *kobj, struct attribute *attr,
+	const char *buf, size_t buflen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: net/9p/srv.c:580:
+static ssize_t p9srv_srv_show(struct kobject *kobj, struct attribute *attr,
+	char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: net/9p/srv.c:589:
+static ssize_t p9srv_srv_store(struct kobject *kobj, struct attribute *attr,
+	const char *buf, size_t buflen)

CHECK:SPACING: No space is necessary after a cast
#422: FILE: net/9p/srv.c:600:
+	p = (char *) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#423: FILE: net/9p/srv.c:601:
+	ep = (char *) buf + buflen - 1;

ERROR:SPACING: space required before the open parenthesis '('
#430: FILE: net/9p/srv.c:608:
+	for(n = 0; n < ARRAY_SIZE(args) && p < ep; n++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#467: FILE: net/9p/srv.c:645:
+		/* we can't call p9srv_shutdown directly because
+		   kobject_unregister will wait for the kobject

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#468: FILE: net/9p/srv.c:646:
+		   that we hold to be freed (and that won't happen) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: net/9p/srv.c:673:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: net/9p/srv.c:682:
+	P9_DPRINTK(P9SRV_DEBUG_SRV, "listener '%s' options '%s'\n",
+		lname, options);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: net/9p/srv.c:697:
+	slis = kmalloc(sizeof(*slis) + strlen(lname) + strlen(options) + 2,
+		GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#526: FILE: net/9p/srv.c:704:
+	slis->name = (char *) slis + sizeof(*slis);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: net/9p/srv.c:722:
+	P9_DPRINTK(P9SRV_DEBUG_SRV, "listener '%s' options '%s'\n",
+		lname, options);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: net/9p/srv.c:726:
+		if (!strcmp(lname, slis->name) &&
+					!strcmp(options, slis->options)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361774.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 17 checks, 522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361774.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
