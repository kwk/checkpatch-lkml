WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: fs/anon_inodes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#50: FILE: fs/anon_inodes.c:2:
+ *  fs/anon_inodes.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#67: FILE: fs/anon_inodes.c:19:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#69: FILE: fs/anon_inodes.c:21:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#77: FILE: fs/anon_inodes.c:29:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#81: FILE: fs/anon_inodes.c:33:
+static struct file_operations aino_fops = { };

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#87: FILE: fs/anon_inodes.c:39:
+};
+static struct dentry_operations ainofs_dentry_operations = {

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#87: FILE: fs/anon_inodes.c:39:
+static struct dentry_operations ainofs_dentry_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: fs/anon_inodes.c:43:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#155: FILE: fs/anon_inodes.c:107:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#162: FILE: fs/anon_inodes.c:114:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: fs/anon_inodes.c:125:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: fs/anon_inodes.c:131:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#202: FILE: fs/anon_inodes.c:154:
+	inode->i_mode = S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#205: FILE: fs/anon_inodes.c:157:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: fs/anon_inodes.c:164:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: fs/anon_inodes.c:171:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#222: FILE: fs/anon_inodes.c:174:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aino_init', this function's name, in a string
#237: FILE: fs/anon_inodes.c:189:
+	panic("aino_init() failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#240: FILE: fs/anon_inodes.c:192:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#243: FILE: fs/anon_inodes.c:195:
+	iput(aino_inode);
 	^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#257: FILE: include/linux/anon_inodes.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#258: FILE: include/linux/anon_inodes.h:2:
+ *  include/linux/anon_inodes.h

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 12 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
