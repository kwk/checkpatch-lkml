WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: arch/x86/kvm/mmu.c:625:
+		BUG_ON(!spte);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#220: FILE: arch/x86/kvm/mmu.c:626:
+		BUG_ON(!(*spte & PT_PRESENT_MASK));

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#221: FILE: arch/x86/kvm/mmu.c:627:
+		BUG_ON((*spte & (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK)) != (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#221: FILE: arch/x86/kvm/mmu.c:627:
+		BUG_ON((*spte & (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK)) != (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#221: FILE: arch/x86/kvm/mmu.c:627:
+		BUG_ON((*spte & (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK)) != (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK));
 		                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#221: FILE: arch/x86/kvm/mmu.c:627:
+		BUG_ON((*spte & (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK)) != (PT_PAGE_SIZE_MASK|PT_PRESENT_MASK));
 		                                                                          ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rmap_write_protect', this function's name, in a string
#222: FILE: arch/x86/kvm/mmu.c:628:
+		pgprintk("rmap_write_protect(large): spte %p %llx %lld\n", spte, *spte, gfn);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#309: FILE: arch/x86/kvm/mmu.c:1050:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: arch/x86/kvm/mmu.c:1082:
+		if (shadow ||
+		   (largepage && has_wrprotected_page(vcpu->kvm, gfn))) {

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#337: FILE: arch/x86/kvm/mmu.c:1102:
+		 (spte&PT_PAGE_SIZE_MASK)? "2MB" : "4kB",
 		      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#337: FILE: arch/x86/kvm/mmu.c:1102:
+		 (spte&PT_PAGE_SIZE_MASK)? "2MB" : "4kB",
 		                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#338: FILE: arch/x86/kvm/mmu.c:1103:
+		 (spte&PT_WRITABLE_MASK)?"RW":"R", gfn, spte, shadow_pte);
 		      ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#338: FILE: arch/x86/kvm/mmu.c:1103:
+		 (spte&PT_WRITABLE_MASK)?"RW":"R", gfn, spte, shadow_pte);
 		                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#338: FILE: arch/x86/kvm/mmu.c:1103:
+		 (spte&PT_WRITABLE_MASK)?"RW":"R", gfn, spte, shadow_pte);
 		                             ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#341: FILE: arch/x86/kvm/mmu.c:1106:
+	if (!was_rmapped && (spte & PT_PAGE_SIZE_MASK)
+	    && (spte & PT_PRESENT_MASK))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: arch/x86/kvm/mmu.c:1150:
+			mmu_set_spte(vcpu, &table[index], ACC_ALL, ACC_ALL,
+				    0, write, 1, &pt_write, 1, gfn, page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#387: FILE: arch/x86/kvm/mmu.c:1186:
+	if (is_largepage_backed(vcpu, gfn & ~(KVM_PAGES_PER_HPAGE-1))) {
 	                                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#388: FILE: arch/x86/kvm/mmu.c:1187:
+		gfn &= ~(KVM_PAGES_PER_HPAGE-1);
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#419: FILE: arch/x86/kvm/mmu.c:1350:
+	if (is_largepage_backed(vcpu, gfn & ~(KVM_PAGES_PER_HPAGE-1))) {
 	                                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#420: FILE: arch/x86/kvm/mmu.c:1351:
+		gfn &= ~(KVM_PAGES_PER_HPAGE-1);
 		                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sp->role.level != PT_PAGE_TABLE_LEVEL'
#460: FILE: arch/x86/kvm/mmu.c:1580:
+	if ((sp->role.level != PT_PAGE_TABLE_LEVEL)
+	    && !vcpu->arch.update_pte.largepage) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#461: FILE: arch/x86/kvm/mmu.c:1581:
+	if ((sp->role.level != PT_PAGE_TABLE_LEVEL)
+	    && !vcpu->arch.update_pte.largepage) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#481: FILE: arch/x86/kvm/mmu.c:1660:
+		gfn &= ~(KVM_PAGES_PER_HPAGE-1);
 		                            ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#533: FILE: arch/x86/kvm/paging_tmpl.h:311:
+		if (is_shadow_present_pte(*shadow_ent)
+		    && !is_large_pte(*shadow_ent)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: arch/x86/kvm/paging_tmpl.h:412:
+		gfn_t large_gfn;
+		large_gfn = walker.gfn & ~(KVM_PAGES_PER_HPAGE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#567: FILE: arch/x86/kvm/paging_tmpl.h:412:
+		large_gfn = walker.gfn & ~(KVM_PAGES_PER_HPAGE-1);
 		                                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#608: FILE: include/asm-x86/kvm_host.h:43:
+#define KVM_HPAGE_SIZE (1UL << KVM_HPAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#679: FILE: virt/kvm/kvm_main.c:333:
+		int largepages = npages / KVM_PAGES_PER_HPAGE;
+		if (npages % KVM_PAGES_PER_HPAGE)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#690: FILE: virt/kvm/kvm_main.c:344:
+		if ((base_gfn+npages) % KVM_PAGES_PER_HPAGE)
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#691: FILE: virt/kvm/kvm_main.c:345:
+			new.lpage_info[largepages-1].write_count = 1;
 			                         ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 22 checks, 589 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
