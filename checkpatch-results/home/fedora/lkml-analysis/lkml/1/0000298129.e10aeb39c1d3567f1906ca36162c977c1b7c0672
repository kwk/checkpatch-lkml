WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
# HG changeset patch

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# User Andrea Arcangeli <andrea@qumranet.com>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# Date 1207666462 -7200

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# Node ID ec6d8f91b299cf26cce5c3d49bb25d35ee33c137

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# Parent  d4c25404de6376297ed34fada14cd6b894410eb0

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#53: FILE: include/linux/mm.h:1054:
+	spinlock_t **i_mmap_locks;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#54: FILE: include/linux/mm.h:1055:
+	spinlock_t **anon_vma_locks;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#58: FILE: include/linux/mm.h:1059:
+};
+extern struct mm_lock_data *mm_lock(struct mm_struct * mm);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: include/linux/mm.h:1059:
+extern struct mm_lock_data *mm_lock(struct mm_struct * mm);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: include/linux/mm.h:1059:
+extern struct mm_lock_data *mm_lock(struct mm_struct * mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/mm.h:1060:
+extern void mm_unlock(struct mm_struct *mm, struct mm_lock_data *data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: mm/mmap.c:2254:
+struct mm_lock_data *mm_lock(struct mm_struct * mm)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#98: FILE: mm/mmap.c:2265:
+	nr_i_mmap_locks = nr_anon_vma_locks = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct mm_lock_data)...)
#111: FILE: mm/mmap.c:2278:
+	data = kmalloc(sizeof(struct mm_lock_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#115: FILE: mm/mmap.c:2282:
+	if (nr_i_mmap_locks) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#120: FILE: mm/mmap.c:2287:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#123: FILE: mm/mmap.c:2290:
+	if (nr_anon_vma_locks) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#128: FILE: mm/mmap.c:2295:
+	} else

CHECK:SPACING: No space is necessary after a cast
#135: FILE: mm/mmap.c:2302:
+		spinlock_t *i_mmap_lock = (spinlock_t *) -1UL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: mm/mmap.c:2303:
+		spinlock_t *i_mmap_lock = (spinlock_t *) -1UL;
+		for (vma = mm->mmap; vma; vma = vma->vm_next) {

CHECK:SPACING: No space is necessary after a cast
#143: FILE: mm/mmap.c:2310:
+			if ((unsigned long) i_mmap_lock >

CHECK:SPACING: No space is necessary after a cast
#148: FILE: mm/mmap.c:2315:
+			    (unsigned long) i_mmap_lock_last)

CHECK:SPACING: No space is necessary after a cast
#152: FILE: mm/mmap.c:2319:
+		if (i_mmap_lock == (spinlock_t *) -1UL)

CHECK:SPACING: No space is necessary after a cast
#162: FILE: mm/mmap.c:2329:
+		spinlock_t *anon_vma_lock = (spinlock_t *) -1UL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: mm/mmap.c:2330:
+		spinlock_t *anon_vma_lock = (spinlock_t *) -1UL;
+		for (vma = mm->mmap; vma; vma = vma->vm_next) {

CHECK:SPACING: No space is necessary after a cast
#170: FILE: mm/mmap.c:2337:
+			if ((unsigned long) anon_vma_lock >

CHECK:SPACING: No space is necessary after a cast
#171: FILE: mm/mmap.c:2338:
+			    (unsigned long) &vma->anon_vma->lock &&

CHECK:SPACING: No space is necessary after a cast
#172: FILE: mm/mmap.c:2339:
+			    (unsigned long) &vma->anon_vma->lock >

CHECK:SPACING: No space is necessary after a cast
#173: FILE: mm/mmap.c:2340:
+			    (unsigned long) anon_vma_lock_last)

CHECK:SPACING: No space is necessary after a cast
#176: FILE: mm/mmap.c:2343:
+		if (anon_vma_lock == (spinlock_t *) -1UL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: mm/mmap.c:2378:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298129.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 7 warnings, 21 checks, 162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298129.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
