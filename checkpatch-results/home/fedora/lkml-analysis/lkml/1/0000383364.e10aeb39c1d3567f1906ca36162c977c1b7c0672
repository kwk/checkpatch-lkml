WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: include/asm-powerpc/immediate.h:1:
+#ifndef _ASM_POWERPC_IMMEDIATE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#81: FILE: include/asm-powerpc/immediate.h:40:
+#define immediate_read(var)						\
+	({								\
+		__typeof__((var)->value) value;				\
+		switch (sizeof(value)) {				\
+		case 1:							\
+			asm (	".section __immediate, \"a\", @progbits;\n\t" \
+					PPC_LONG "%1, ((0f)+3), 1;\n\t"	\
+					".previous;\n\t"		\
+					"0:\n\t"			\
+					"li %0,%2;\n\t"			\
+				: "=r" (value)				\
+				: "i" (&(var)->value),			\
+				  "i" (0));				\
+			break;						\
+		case 2:							\
+			asm (	".section __immediate, \"a\", @progbits;\n\t" \
+					PPC_LONG "%1, ((0f)+2), 2;\n\t"	\
+					".previous;\n\t"		\
+					".align 2\n\t"			\
+					"0:\n\t"			\
+					"li %0,%2;\n\t"			\
+				: "=r" (value)				\
+				: "i" (&(var)->value),			\
+				  "i" (0));				\
+			break;						\
+		default:						\
+			value = (var)->value;				\
+			break;						\
+		};							\
+		value;							\
+	})

ERROR:SPACING: space prohibited after that open parenthesis '('
#86: FILE: include/asm-powerpc/immediate.h:45:
+			asm (	".section __immediate, \"a\", @progbits;\n\t" \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#96: FILE: include/asm-powerpc/immediate.h:55:
+			asm (	".section __immediate, \"a\", @progbits;\n\t" \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#121: FILE: include/asm-powerpc/immediate.h:80:
+#define immediate_set(var, i) \
+	(var)->value = (i); \
+	immediate_update(1);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#121: FILE: include/asm-powerpc/immediate.h:80:
+#define immediate_set(var, i) \
+	(var)->value = (i); \
+	immediate_update(1);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#132: FILE: include/asm-powerpc/immediate.h:91:
+#define _immediate_set(var, i) \
+	(var)->value = (i); \
+	immediate_update(0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#132: FILE: include/asm-powerpc/immediate.h:91:
+#define _immediate_set(var, i) \
+	(var)->value = (i); \
+	immediate_update(0);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#143: FILE: include/asm-powerpc/immediate.h:102:
+#define immediate_set_early(var, i) \
+	(var)->value = (i); \
+	immediate_update_early();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#143: FILE: include/asm-powerpc/immediate.h:102:
+#define immediate_set_early(var, i) \
+	(var)->value = (i); \
+	immediate_update_early();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#157: FILE: include/asm-powerpc/immediate.h:116:
+#define immediate_if(var)	if (unlikely(immediate_read(var)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/asm-powerpc/immediate.h:121:
+extern void immediate_update(int lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/asm-powerpc/immediate.h:122:
+extern void module_immediate_setup(struct module *mod);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/asm-powerpc/immediate.h:123:
+extern void immediate_update_early(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/asm-powerpc/immediate.h:124:
+extern int arch_immediate_update(const struct __immediate *immediate);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/asm-powerpc/immediate.h:125:
+extern void arch_immediate_update_early(const struct __immediate *immediate);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#183: FILE: arch/powerpc/kernel/immediate.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#193: FILE: arch/powerpc/kernel/immediate.c:11:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#213: FILE: arch/powerpc/kernel/immediate.c:31:
+	switch (immediate->size) {
+		case 1:	/* The uint8_t points to the 3rd byte of the
[...]
+		case 2:	insn = (void*)(immediate->immediate - LI_OPCODE_LEN);
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#215: FILE: arch/powerpc/kernel/immediate.c:33:
+			 * instruction */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#216: FILE: arch/powerpc/kernel/immediate.c:34:
+			insn = (void*)(immediate->immediate - 1 - LI_OPCODE_LEN);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#218: FILE: arch/powerpc/kernel/immediate.c:36:
+		case 2:	insn = (void*)(immediate->immediate - LI_OPCODE_LEN);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#218: FILE: arch/powerpc/kernel/immediate.c:36:
+		case 2:	insn = (void*)(immediate->immediate - LI_OPCODE_LEN);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#225: FILE: arch/powerpc/kernel/immediate.c:43:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "

WARNING:SPLIT_STRING: quoted string split across lines
#226: FILE: arch/powerpc/kernel/immediate.c:44:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "
+				    "Variable at %p, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#227: FILE: arch/powerpc/kernel/immediate.c:45:
+				    "Variable at %p, "
+				    "instruction at %p, size %lu\n",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#228: FILE: arch/powerpc/kernel/immediate.c:46:
+				    (void*)immediate->immediate,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#229: FILE: arch/powerpc/kernel/immediate.c:47:
+				    (void*)immediate->var, immediate->size);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#238: FILE: arch/powerpc/kernel/immediate.c:56:
+	switch (immediate->size) {
+		case 1:	if (*(uint8_t*)immediate->immediate
[...]
+		case 2:	if (*(uint16_t*)immediate->immediate
[...]
+		default:return -EINVAL;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#239: FILE: arch/powerpc/kernel/immediate.c:57:
+		case 1:	if (*(uint8_t*)immediate->immediate
[...]
+				return 0;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#239: FILE: arch/powerpc/kernel/immediate.c:57:
+		case 1:	if (*(uint8_t*)immediate->immediate

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#239: FILE: arch/powerpc/kernel/immediate.c:57:
+		case 1:	if (*(uint8_t*)immediate->immediate

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#240: FILE: arch/powerpc/kernel/immediate.c:58:
+					== *(uint8_t*)immediate->var)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#243: FILE: arch/powerpc/kernel/immediate.c:61:
+		case 2:	if (*(uint16_t*)immediate->immediate
[...]
+				return 0;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#243: FILE: arch/powerpc/kernel/immediate.c:61:
+		case 2:	if (*(uint16_t*)immediate->immediate

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#243: FILE: arch/powerpc/kernel/immediate.c:61:
+		case 2:	if (*(uint16_t*)immediate->immediate

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#244: FILE: arch/powerpc/kernel/immediate.c:62:
+					== *(uint16_t*)immediate->var)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#249: FILE: arch/powerpc/kernel/immediate.c:67:
+	memcpy((void*)immediate->immediate, (void*)immediate->var,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#249: FILE: arch/powerpc/kernel/immediate.c:67:
+	memcpy((void*)immediate->immediate, (void*)immediate->var,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: arch/powerpc/kernel/immediate.c:68:
+	memcpy((void*)immediate->immediate, (void*)immediate->var,
+			immediate->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: arch/powerpc/kernel/immediate.c:70:
+	flush_icache_range((unsigned long)immediate->immediate,
+				immediate->size);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#270: FILE: arch/powerpc/kernel/immediate.c:88:
+	switch (immediate->size) {
+		case 1:	if (*(uint8_t*)immediate->immediate
[...]
+		case 2:	if (*(uint16_t*)immediate->immediate
[...]
+		default:return;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#271: FILE: arch/powerpc/kernel/immediate.c:89:
+		case 1:	if (*(uint8_t*)immediate->immediate
[...]
+				return;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#271: FILE: arch/powerpc/kernel/immediate.c:89:
+		case 1:	if (*(uint8_t*)immediate->immediate

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: arch/powerpc/kernel/immediate.c:89:
+		case 1:	if (*(uint8_t*)immediate->immediate

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#272: FILE: arch/powerpc/kernel/immediate.c:90:
+					== *(uint8_t*)immediate->var)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#275: FILE: arch/powerpc/kernel/immediate.c:93:
+		case 2:	if (*(uint16_t*)immediate->immediate
[...]
+				return;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#275: FILE: arch/powerpc/kernel/immediate.c:93:
+		case 2:	if (*(uint16_t*)immediate->immediate

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#275: FILE: arch/powerpc/kernel/immediate.c:93:
+		case 2:	if (*(uint16_t*)immediate->immediate

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#276: FILE: arch/powerpc/kernel/immediate.c:94:
+					== *(uint16_t*)immediate->var)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#279: FILE: arch/powerpc/kernel/immediate.c:97:
+		default:return;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#281: FILE: arch/powerpc/kernel/immediate.c:99:
+	memcpy((void*)immediate->immediate, (void*)immediate->var,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#281: FILE: arch/powerpc/kernel/immediate.c:99:
+	memcpy((void*)immediate->immediate, (void*)immediate->var,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: arch/powerpc/kernel/immediate.c:100:
+	memcpy((void*)immediate->immediate, (void*)immediate->var,
+			immediate->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: arch/powerpc/kernel/immediate.c:102:
+	flush_icache_range((unsigned long)immediate->immediate,
+				immediate->size);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000383364.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 13 warnings, 11 checks, 234 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000383364.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
