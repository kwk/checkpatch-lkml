WARNING:TYPO_SPELLING: 'documenation' may be misspelled - perhaps 'documentation'?
#39: 
It's bigger than the last driver, as I've added lots of documenation
                                                        ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#44: 
Soeren and Jérémie, I took out support for both of your laptops, as I
            ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#76: 
Cc: Jérémie Huchet <jeremie@lamah.info>
     ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#93: FILE: drivers/platform/x86/Kconfig:429:
+config SAMSUNG_LAPTOP
+	tristate "Samsung Laptop driver"
+	depends on BACKLIGHT_CLASS_DEVICE
+	depends on DMI
+	---help---
+	  This driver adds support to control the backlight on a number of
+	  Samsung laptops, like the N130, and control for some of the LEDs
+
+	  It will only be loaded on laptops that properly need it, so it is
+	  safe to say Y here.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: drivers/platform/x86/samsung-laptop.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#141: FILE: drivers/platform/x86/samsung-laptop.c:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'degress' may be misspelled - perhaps 'degrees'?
#160: FILE: drivers/platform/x86/samsung-laptop.c:46:
+/* Temperature is returned in degress Celsius from what I can guess. */
                               ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: drivers/platform/x86/samsung-laptop.c:76:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <portNo>
#197: FILE: drivers/platform/x86/samsung-laptop.c:83:
+	u16 portNo;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ifaceFunc>
#198: FILE: drivers/platform/x86/samsung-laptop.c:84:
+	u8 ifaceFunc;

CHECK:CAMELCASE: Avoid CamelCase: <enMem>
#199: FILE: drivers/platform/x86/samsung-laptop.c:85:
+	u8 enMem;

CHECK:CAMELCASE: Avoid CamelCase: <reMem>
#200: FILE: drivers/platform/x86/samsung-laptop.c:86:
+	u8 reMem;

CHECK:CAMELCASE: Avoid CamelCase: <dataOffset>
#201: FILE: drivers/platform/x86/samsung-laptop.c:87:
+	u16 dataOffset;

CHECK:CAMELCASE: Avoid CamelCase: <dataSegment>
#202: FILE: drivers/platform/x86/samsung-laptop.c:88:
+	u16 dataSegment;

CHECK:CAMELCASE: Avoid CamelCase: <BIOSifver>
#203: FILE: drivers/platform/x86/samsung-laptop.c:89:
+	u8 BIOSifver;

CHECK:CAMELCASE: Avoid CamelCase: <LauncherString>
#204: FILE: drivers/platform/x86/samsung-laptop.c:90:
+	u8 LauncherString;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#205: FILE: drivers/platform/x86/samsung-laptop.c:91:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#217: FILE: drivers/platform/x86/samsung-laptop.c:103:
+} __attribute__((packed));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#236: FILE: drivers/platform/x86/samsung-laptop.c:122:
+module_param(debug, bool, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#278: FILE: drivers/platform/x86/samsung-laptop.c:164:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: drivers/platform/x86/samsung-laptop.c:165:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",
+		command, readb(&sabi_iface->complete),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#286: FILE: drivers/platform/x86/samsung-laptop.c:172:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#318: FILE: drivers/platform/x86/samsung-laptop.c:204:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/platform/x86/samsung-laptop.c:205:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",
+		command, readb(&sabi_iface->complete),

WARNING:CONST_STRUCT: struct backlight_ops should normally be const
#357: FILE: drivers/platform/x86/samsung-laptop.c:243:
+static struct backlight_ops backlight_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#364: FILE: drivers/platform/x86/samsung-laptop.c:250:
+	printk(KERN_INFO KBUILD_MODNAME ": found laptop model '%s'\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: drivers/platform/x86/samsung-laptop.c:251:
+	printk(KERN_INFO KBUILD_MODNAME ": found laptop model '%s'\n",
+		id->ident);

WARNING:MISPLACED_INIT: __initdata should be placed after samsung_dmi_table[]
#369: FILE: drivers/platform/x86/samsung-laptop.c:255:
+static struct dmi_system_id __initdata samsung_dmi_table[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#391: FILE: drivers/platform/x86/samsung-laptop.c:277:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <testStr>
#395: FILE: drivers/platform/x86/samsung-laptop.c:281:
+	const char *testStr = "SwSmi@";

CHECK:CAMELCASE: Avoid CamelCase: <pStr>
#398: FILE: drivers/platform/x86/samsung-laptop.c:284:
+	int pStr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#409: FILE: drivers/platform/x86/samsung-laptop.c:295:
+		printk(KERN_ERR "Can't map the segment at 0xf0000\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#428: FILE: drivers/platform/x86/samsung-laptop.c:314:
+		printk(KERN_INFO "This computer does not support SABI\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#436: FILE: drivers/platform/x86/samsung-laptop.c:322:
+		printk(KERN_ERR "Can't remap %p\n", loca + memcheck);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#440: FILE: drivers/platform/x86/samsung-laptop.c:326:
+	printk(KERN_INFO "This computer supports SABI==%x\n", loca + 0xf0000 - 6);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#441: FILE: drivers/platform/x86/samsung-laptop.c:327:
+	printk(KERN_INFO "SABI header:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#442: FILE: drivers/platform/x86/samsung-laptop.c:328:
+	printk(KERN_INFO " SMI Port Number = 0x%04x\n", readw(&sabi->portNo));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#443: FILE: drivers/platform/x86/samsung-laptop.c:329:
+	printk(KERN_INFO " SMI Interface Function = 0x%02x\n", readb(&sabi->ifaceFunc));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#444: FILE: drivers/platform/x86/samsung-laptop.c:330:
+	printk(KERN_INFO " SMI enable memory buffer = 0x%02x\n", readb(&sabi->enMem));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#445: FILE: drivers/platform/x86/samsung-laptop.c:331:
+	printk(KERN_INFO " SMI restore memory buffer = 0x%02x\n", readb(&sabi->reMem));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#446: FILE: drivers/platform/x86/samsung-laptop.c:332:
+	printk(KERN_INFO " SABI data offset = 0x%04x\n", readw(&sabi->dataOffset));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#447: FILE: drivers/platform/x86/samsung-laptop.c:333:
+	printk(KERN_INFO " SABI data segment = 0x%04x\n", readw(&sabi->dataSegment));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#448: FILE: drivers/platform/x86/samsung-laptop.c:334:
+	printk(KERN_INFO " BIOS interface version = 0x%02x\n", readb(&sabi->BIOSifver));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#449: FILE: drivers/platform/x86/samsung-laptop.c:335:
+	printk(KERN_INFO " KBD Launcher string = 0x%02x\n", readb(&sabi->LauncherString));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#456: FILE: drivers/platform/x86/samsung-laptop.c:342:
+		printk(KERN_ERR "Can't remap %x\n", ifaceP);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#459: FILE: drivers/platform/x86/samsung-laptop.c:345:
+	printk(KERN_INFO "SABI Interface = %p\n", sabi_iface);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#463: FILE: drivers/platform/x86/samsung-laptop.c:349:
+		printk(KERN_INFO "Model Name %c%c%c%c\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: drivers/platform/x86/samsung-laptop.c:350:
+		printk(KERN_INFO "Model Name %c%c%c%c\n",
+			sretval.retval[0],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#472: FILE: drivers/platform/x86/samsung-laptop.c:358:
+		printk("backlight = 0x%02x\n", sretval.retval[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#476: FILE: drivers/platform/x86/samsung-laptop.c:362:
+		printk("wireless button = 0x%02x\n", sretval.retval[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#480: FILE: drivers/platform/x86/samsung-laptop.c:366:
+		printk("brightness = 0x%02x\n", sretval.retval[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#484: FILE: drivers/platform/x86/samsung-laptop.c:370:
+		printk("etiquette mode = 0x%02x\n", sretval.retval[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#487: FILE: drivers/platform/x86/samsung-laptop.c:373:
+		printk("cpu temp = 0x%02x\n", sretval.retval[0]);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 33 warnings, 20 checks, 440 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
