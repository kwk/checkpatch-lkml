WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
it is getting some big now..., may split it to two patch: one only have sparse irq but don't move irq_desc 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# echo 10 > /proc/irq/134483967/smp_affinity

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# echo 100 > /proc/irq/134483967/smp_affinity

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# echo 1000 > /proc/irq/134483967/smp_affinity

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#178: FILE: arch/x86/kernel/io_apic.c:134:
+	printk(KERN_DEBUG "  alloc irq_2_pin on cpu %d node %d\n", cpu, node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: arch/x86/kernel/io_apic.c:190:
+	BUG_ON(count > count_desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#287: FILE: arch/x86/kernel/io_apic.c:221:
+	printk(KERN_DEBUG "  alloc irq_cfg on cpu %d node %d\n", cpu, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: arch/x86/kernel/io_apic.c:241:
+static void init_copy_irq_2_pin(struct irq_cfg *old_cfg, struct irq_cfg *cfg,
+				 int cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: arch/x86/kernel/io_apic.c:244:
+void arch_init_copy_chip_data(struct irq_desc *old_desc,
+				 struct irq_desc *desc, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: arch/x86/kernel/io_apic.c:276:
+static void init_copy_irq_2_pin(struct irq_cfg *old_cfg, struct irq_cfg *cfg,
+				 int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#417: FILE: arch/x86/kernel/io_apic.c:320:
+}
+static inline void set_extra_move_desc(struct irq_desc *desc, cpumask_t mask)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: arch/x86/kernel/io_apic.c:571:
+static void __init replace_pin_at_irq_cpu(struct irq_cfg *cfg, int cpu,
 				      int oldapic, int oldpin,

WARNING:LINE_SPACING: Missing a blank line after declarations
#646: FILE: arch/x86/kernel/io_apic.c:1663:
+		struct irq_pin_list *entry;
+		cfg = desc->chip_data;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#852: FILE: arch/x86/kernel/io_apic.c:2643:
+static void ack_lapic_irq (unsigned int irq, struct irq_desc **descp)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#1031: FILE: arch/x86/kernel/io_apic.c:3389:
+	dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for MSI/MSI-X\n", irq, irq);

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#1152: FILE: arch/x86/kernel/io_apic.c:3729:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1153: FILE: arch/x86/kernel/io_apic.c:3730:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",
+				 irq, irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1388: FILE: drivers/pci/intr_remapping.c:33:
+	printk(KERN_DEBUG "alloc irq_2_iommu on cpu %d node %d\n", cpu, node);

CHECK:CAMELCASE: Avoid CamelCase: <irq_2_iommuX>
#1431: FILE: drivers/pci/intr_remapping.c:75:
+static struct irq_2_iommu irq_2_iommuX[NR_IRQS];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1440: FILE: drivers/pci/intr_remapping.c:84:
+}
+static struct irq_2_iommu *irq_2_iommu_alloc_cpu(unsigned int irq, int cpu)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1657: FILE: include/linux/irq.h:202:
+extern struct irq_desc *irq_to_desc(unsigned int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1658: FILE: include/linux/irq.h:203:
+extern struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1659: FILE: include/linux/irq.h:204:
+extern struct irq_desc *irq_to_desc_alloc(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1660: FILE: include/linux/irq.h:205:
+extern struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1661: FILE: include/linux/irq.h:206:
+extern void arch_early_irq_init_work(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1662: FILE: include/linux/irq.h:207:
+extern void arch_init_chip_data(struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1663: FILE: include/linux/irq.h:208:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1664: FILE: include/linux/irq.h:209:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,
+					struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1665: FILE: include/linux/irq.h:210:
+extern void arch_free_chip_data(struct irq_desc *desc);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1674: FILE: include/linux/irq.h:218:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1674: FILE: include/linux/irq.h:218:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1676: FILE: include/linux/irq.h:220:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1676: FILE: include/linux/irq.h:220:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1693: FILE: include/linux/irq.h:236:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#1693: FILE: include/linux/irq.h:236:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1693: FILE: include/linux/irq.h:236:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1695: FILE: include/linux/irq.h:238:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1697: FILE: include/linux/irq.h:240:
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1699: FILE: include/linux/irq.h:242:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#1699: FILE: include/linux/irq.h:242:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1699: FILE: include/linux/irq.h:242:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1701: FILE: include/linux/irq.h:244:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1703: FILE: include/linux/irq.h:246:
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1726: FILE: include/linux/kernel_stat.h:32:
+       unsigned int irqs[NR_IRQS];$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1755: FILE: include/linux/kernel_stat.h:64:
+extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1927: FILE: kernel/irq/chip.c:600:
+		if (desc->chip != &no_irq_chip) {
+			mask_ack_irq(&desc, irq);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1985: FILE: kernel/irq/handle.c:86:
+	printk(KERN_DEBUG "  alloc kstat_irqs on cpu %d node %d\n", cpu, node);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2011: FILE: kernel/irq/handle.c:112:
+void __attribute__((weak)) arch_init_chip_data(struct irq_desc *desc, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2029: FILE: kernel/irq/handle.c:130:
+static void init_copy_one_irq_desc(int irq, struct irq_desc *old_desc,
+		 struct irq_desc *desc, int cpu)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2054: FILE: kernel/irq/handle.c:155:
+#define SPARSEIRQHASH_SIZE          (1UL << SPARSEIRQHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2061: FILE: kernel/irq/handle.c:162:
+	[0 ... NR_IRQS_LEGACY-1] = {
 	                     ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2077: FILE: kernel/irq/handle.c:178:
+void __init __attribute__((weak)) arch_early_irq_init_work(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2154: FILE: kernel/irq/handle.c:255:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2155: FILE: kernel/irq/handle.c:256:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",
+		 irq, irq, cpu, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2181: FILE: kernel/irq/handle.c:282:
+static struct irq_desc *__real_move_irq_desc(struct irq_desc *old_desc,
+						int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2207: FILE: kernel/irq/handle.c:308:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2208: FILE: kernel/irq/handle.c:309:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",
+		 irq, irq, cpu, node);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2265: FILE: kernel/irq/handle.c:372:
+}
+struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2269: FILE: kernel/irq/handle.c:376:
+}
+struct irq_desc *irq_to_desc_alloc(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2273: FILE: kernel/irq/handle.c:380:
+}
+struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2398: FILE: kernel/irq/handle.c:631:
+	struct irq_desc *desc = irq_to_desc(irq);
+	return desc->kstat_irqs[cpu];

CHECK:SPACING: No space is necessary after a cast
#2423: FILE: arch/x86/kernel/irq.c:113:
+	i = *(loff_t *) v;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 24 warnings, 36 checks, 2326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
