WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
This provides an optimization, already used for (normal) futexes, to be used for

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#120: FILE: kernel/futex.c:247:
+		uaddr = (void*)((key->shared.pgoff << PAGE_SHIFT)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#124: FILE: kernel/futex.c:251:
+		uaddr = (void*)(key->private.address + key->private.offset);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#234: FILE: kernel/futex.c:742:
+	if (!(curval & FUTEX_TID_MASK)
+	    || lookup_pi_state(curval, hb, key, pi_state)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#236: FILE: kernel/futex.c:744:
+		/* the futex has no owner (yet) or the lookup failed:
+		   allocate one pi_state without owner */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#236: FILE: kernel/futex.c:744:
+		   allocate one pi_state without owner */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmpval"
#288: FILE: kernel/futex.c:796:
+	if (likely(cmpval != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#319: FILE: kernel/futex.c:827:
+		if (!match_futex (&this->key, &key1))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#327: FILE: kernel/futex.c:835:
+			if (!pi_state2) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#343: FILE: kernel/futex.c:851:
+			} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: kernel/futex.c:854:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#369: FILE: kernel/futex.c:877:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#389: FILE: kernel/futex.c:897:
+	/* If we've requeued some tasks and the top_waiter of the rt_mutex
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#389: FILE: kernel/futex.c:897:
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: kernel/futex.c:900:
+		struct task_struct *owner = rt_mutex_owner(lock2);
+		if (owner &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#392: FILE: kernel/futex.c:900:
+		if (owner &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: kernel/futex.c:1300:
+	if (pi_state->owner != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pi_state->owner"
#483: FILE: kernel/futex.c:1300:
+	if (pi_state->owner != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#488: FILE: kernel/futex.c:1305:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: kernel/futex.c:1330:
+ ^I^I^Iret = -EFAULT;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#513: FILE: kernel/futex.c:1330:
+ ^I^I^Iret = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: kernel/futex.c:1330:
+ ^I^I^Iret = -EFAULT;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#570: FILE: kernel/futex.c:1476:
+		if (unlikely(q.waiter.task)) {
+			remove_waiter(lock, &q.waiter);
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#596: FILE: kernel/futex.c:1502:
+			/* mmap_sem and hash_bucket lock are unlocked at
+			   return of this function */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#596: FILE: kernel/futex.c:1502:
+			   return of this function */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#640: FILE: kernel/futex.c:1558:
+		if (match_futex (&this->key, key)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#646: FILE: kernel/futex.c:1564:
+	BUG_ON(!pi_state);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#657: FILE: kernel/futex.c:1575:
+
+

CHECK:BRACES: Unbalanced braces around else statement
#724: FILE: kernel/futex.c:1676:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#726: FILE: kernel/futex.c:1678:
+		/* Set the WAITERS flag, so the owner will know it has someone
+		   to wake at next unlock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#726: FILE: kernel/futex.c:1678:
+		   to wake at next unlock */

CHECK:BRACES: Unbalanced braces around else statement
#795: FILE: kernel/futex.c:1765:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#833: FILE: kernel/futex.c:2305:
+	if (op == FUTEX_REQUEUE || op == FUTEX_CMP_REQUEUE
+	    || op == FUTEX_CMP_REQUEUE_PI)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#929: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#929: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#929: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#929: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:SPACING: No space is necessary after a cast
#932: FILE: kernel/rtmutex_common.h:123:
+	unsigned long owner, *p = (unsigned long *) &lock->owner;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#939: FILE: kernel/rtmutex_common.h:130:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#939: FILE: kernel/rtmutex_common.h:130:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: kernel/rtmutex_common.h:147:
+extern void rt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#958: FILE: kernel/rtmutex_common.h:149:
+extern void __rt_mutex_adjust_prio(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#959: FILE: kernel/rtmutex_common.h:150:
+extern int rt_mutex_adjust_prio_chain(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: kernel/rtmutex_common.h:155:
+extern void remove_waiter(struct rt_mutex *lock,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#977: FILE: kernel/futex_compat.c:155:
+	if (op == FUTEX_REQUEUE || op == FUTEX_CMP_REQUEUE
+	    || op == FUTEX_CMP_REQUEUE_PI)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456715.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 16 warnings, 21 checks, 874 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456715.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
