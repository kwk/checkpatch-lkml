WARNING:LEADING_SPACE: please, no spaces at the start of a line
#44: FILE: drivers/cdrom/cdrom.c:66:
+  copy_*_user does not return EFAULT on error, but instead returns the number$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#44: FILE: drivers/cdrom/cdrom.c:66:
+  copy_*_user does not return EFAULT on error, but instead returns the number
        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#45: FILE: drivers/cdrom/cdrom.c:67:
+  of bytes not copied.  I was returning whatever non-zero stuff came back from$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#45: FILE: drivers/cdrom/cdrom.c:67:
+  of bytes not copied.  I was returning whatever non-zero stuff came back from
                                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: drivers/cdrom/cdrom.c:81:
+  the media had changed for devices that _don't_ implement media_changed.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: drivers/cdrom/cdrom.c:351:
+static void sanitize_format(union cdrom_addr *addr,
 		u_char * curr, u_char requested);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_cdrom', this function's name, in a string
#177: FILE: drivers/cdrom/cdrom.c:393:
+	cdinfo(CD_OPEN, "entering register_cdrom\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cdrom_open', this function's name, in a string
#213: FILE: drivers/cdrom/cdrom.c:980:
+	cdinfo(CD_OPEN, "entering cdrom_open\n");

WARNING:LONG_LINE_STRING: line length of 105 exceeds 100 columns
#234: FILE: drivers/cdrom/cdrom.c:1043:
+					cdinfo(CD_OPEN, "bummer. tried to close the tray but failed.\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#266: FILE: drivers/cdrom/cdrom.c:1083:
 		if (cdi->options & CDO_CHECK_TYPE) {
[...]
+		    cdinfo(CD_OPEN, "bummer. wrong media type.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#309: FILE: drivers/cdrom/cdrom.c:1120:
+	is a goto to avoid bloating the driver with redundant code. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE_STRING: line length of 101 exceeds 100 columns
#333: FILE: drivers/cdrom/cdrom.c:1152:
+					cdinfo(CD_OPEN, "bummer. tried to close tray but failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cdrom_slot_status', this function's name, in a string
#387: FILE: drivers/cdrom/cdrom.c:1261:
+	cdinfo(CD_CHANGER, "entering cdrom_slot_status()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cdrom_number_of_slots', this function's name, in a string
#412: FILE: drivers/cdrom/cdrom.c:1291:
+	cdinfo(CD_CHANGER, "entering cdrom_number_of_slots()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cdrom_load_unload', this function's name, in a string
#429: FILE: drivers/cdrom/cdrom.c:1312:
+	cdinfo(CD_CHANGER, "entering cdrom_load_unload()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cdrom_select_disc', this function's name, in a string
#447: FILE: drivers/cdrom/cdrom.c:1341:
+	cdinfo(CD_CHANGER, "entering cdrom_select_disc()\n");

WARNING:TYPO_SPELLING: 'dosn't' may be misspelled - perhaps 'doesn't'?
#469: FILE: drivers/cdrom/cdrom.c:1417:
+	 * if the low-level cdrom driver dosn't support media changed. */
 	                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#469: FILE: drivers/cdrom/cdrom.c:1417:
+	 * if the low-level cdrom driver dosn't support media changed. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cdrom_count_tracks', this function's name, in a string
#478: FILE: drivers/cdrom/cdrom.c:1436:
+	cdinfo(CD_COUNT_TRACKS, "entering cdrom_count_tracks\n");

WARNING:TABSTOP: Statements should start on a tabstop
#501: FILE: drivers/cdrom/cdrom.c:1456:
+		    else if (entry.cdte_format == 0x20)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/cdrom/cdrom.c:1466:
+	cdinfo(CD_COUNT_TRACKS, "disc has %d tracks: %d=audio %d=data %d=Cd-I %d=XA\n",
+		header.cdth_trk1, tracks->audio, tracks->data,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#687: FILE: drivers/cdrom/cdrom.c:3536:
 	if (write) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009021.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 5 checks, 610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009021.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
