WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: arch/h8300/kernel/irq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#84: FILE: arch/h8300/kernel/irq.c:2:
+ * linux/arch/h8300/kernel/irq.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#102: FILE: arch/h8300/kernel/irq.c:20:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: arch/h8300/kernel/irq.c:27:
+extern const int h8300_saved_vectors[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#110: FILE: arch/h8300/kernel/irq.c:28:
+extern const unsigned long h8300_trap_table[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#111: FILE: arch/h8300/kernel/irq.c:29:
+int h8300_enable_irq_pin(unsigned int irq);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#112: FILE: arch/h8300/kernel/irq.c:30:
+void h8300_disable_irq_pin(unsigned int irq);

WARNING:TYPO_SPELLING: 'controler' may be misspelled - perhaps 'controller'?
#153: FILE: arch/h8300/kernel/irq.c:71:
+ * h8300 interrupt controler implementation
                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#167: FILE: arch/h8300/kernel/irq.c:85:
+	printk("unexpected IRQ trap at vector %02x\n", irq);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: arch/h8300/kernel/irq.c:92:
+	unsigned long base,tmp;
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: arch/h8300/kernel/irq.c:96:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#180: FILE: arch/h8300/kernel/irq.c:98:
+	for (vec_no = EXT_IRQ1; vec_no <= EXT_IRQ0+EXT_IRQS; vec_no++) {
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#181: FILE: arch/h8300/kernel/irq.c:99:
+		if ((base+(vec_no - EXT_IRQ0)*4) != (rom_vector[vec_no] & ADDR_MASK))
 		         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#181: FILE: arch/h8300/kernel/irq.c:99:
+		if ((base+(vec_no - EXT_IRQ0)*4) != (rom_vector[vec_no] & ADDR_MASK))
 		                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#186: FILE: arch/h8300/kernel/irq.c:104:
+	base -= EXT_IRQ0*4;
 	                ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#189: FILE: arch/h8300/kernel/irq.c:107:
+	tmp = ~(*(volatile unsigned long *)base);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#190: FILE: arch/h8300/kernel/irq.c:108:
+	(*(volatile unsigned long *)base) = tmp;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#191: FILE: arch/h8300/kernel/irq.c:109:
+	if ((*(volatile unsigned long *)base) != tmp)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#199: FILE: arch/h8300/kernel/irq.c:117:
+	unsigned long *ramvec,*ramvec_p;
 	                     ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#199: FILE: arch/h8300/kernel/irq.c:117:
+	unsigned long *ramvec,*ramvec_p;
 	                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ramvec"
#204: FILE: arch/h8300/kernel/irq.c:122:
+	if (ramvec == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#207: FILE: arch/h8300/kernel/irq.c:125:
+		printk(KERN_INFO "virtual vector at 0x%08lx\n",(unsigned long)ramvec);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: arch/h8300/kernel/irq.c:125:
+		printk(KERN_INFO "virtual vector at 0x%08lx\n",(unsigned long)ramvec);
 		                                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#213: FILE: arch/h8300/kernel/irq.c:131:
+	for ( i = 0; i < NR_IRQS; i++) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#218: FILE: arch/h8300/kernel/irq.c:136:
+			if ( i < NR_TRAPS ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#218: FILE: arch/h8300/kernel/irq.c:136:
+			if ( i < NR_TRAPS ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#218: FILE: arch/h8300/kernel/irq.c:136:
+			if ( i < NR_TRAPS ) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#223: FILE: arch/h8300/kernel/irq.c:141:
+			} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#232: FILE: arch/h8300/kernel/irq.c:150:
+			printk(KERN_DEBUG "\n%p: ",ramvec_p);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: arch/h8300/kernel/irq.c:150:
+			printk(KERN_DEBUG "\n%p: ",ramvec_p);
 			                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#233: FILE: arch/h8300/kernel/irq.c:151:
+		printk(KERN_DEBUG "%p ",*ramvec_p);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#233: FILE: arch/h8300/kernel/irq.c:151:
+		printk(KERN_DEBUG "%p ",*ramvec_p);
 		                       ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#233: FILE: arch/h8300/kernel/irq.c:151:
+		printk(KERN_DEBUG "%p ",*ramvec_p);
 		                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#236: FILE: arch/h8300/kernel/irq.c:154:
+	printk(KERN_DEBUG "\n");

ERROR:SPACING: space required before the open parenthesis '('
#240: FILE: arch/h8300/kernel/irq.c:158:
+#define setup_vector() do { } while(0)

CHECK:SPACING: No space is necessary after a cast
#267: FILE: arch/h8300/kernel/irq.c:185:
+	int i = *(loff_t *) v, j;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#268: FILE: arch/h8300/kernel/irq.c:186:
+	struct irqaction * action;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: arch/h8300/kernel/irq.c:197:
+		seq_printf(p, "%3d: ",i);
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#285: FILE: arch/h8300/kernel/irq.c:203:
+		for (action=action->next; action; action = action->next)
 		           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#557: FILE: include/asm-h8300/irq_regs.h:1:
+#include <asm-generic/irq_regs.h>

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440786.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 17 warnings, 9 checks, 367 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440786.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
