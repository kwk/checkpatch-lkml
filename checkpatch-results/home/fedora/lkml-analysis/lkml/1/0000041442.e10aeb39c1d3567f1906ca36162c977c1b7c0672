WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
Reading symbols from /bin/zsh...Reading symbols from /usr/lib/debug/bin/zsh.debug...done.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#0  0x0000003f1dec5f00 in __read_nocancel () from /lib64/libc.so.6

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
#1  0x00007f43b858a39f in raw_getkey (keytmout=0) at /usr/include/bits/unistd.h:35

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
#2  getkey (keytmout=0) at zle_main.c:610

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
#3  0x00007f43b8584bf1 in getkeybuf (km=0x0, funcp=0x7fff507ad718, strp=0x7fff507ad710) at zle_keymap.c:1313

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
#4  getkeymapcmd (km=0x0, funcp=0x7fff507ad718, strp=0x7fff507ad710) at zle_keymap.c:1275

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
#5  0x00007f43b8584ef0 in getkeycmd () at zle_keymap.c:1349

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
#6  0x00007f43b8588281 in zlecore () at zle_main.c:695

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
#7  0x00007f43b85888f8 in zleread (lp=<value optimized out>, rp=<value optimized out>, flags=<value optimized out>, 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
#8  0x00000000004388a0 in inputline () at input.c:278

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
#9  ingetc () at input.c:214

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#10 0x000000000043339d in ihgetc () at hist.c:241

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
#11 0x000000000044126b in gettok () at lex.c:631

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#118: 
#12 0x0000000000441a88 in yylex () at lex.c:347

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
#13 0x000000000045cec7 in parse_event () at parse.c:449

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
#14 0x0000000000437328 in loop (toplevel=1, justonce=0) at init.c:128

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
#15 0x0000000000438021 in zsh_main (argc=<value optimized out>, argv=0x7fff507ae048) at init.c:1280

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
#16 0x0000003f1de1d994 in __libc_start_main (main=<value optimized out>, argc=<value optimized out>, 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#126: 
#17 0x000000000040cc09 in _start ()

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
#0  0x0000003f1dec5f00 in __read_nocancel () from /lib64/libc.so.6

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
#1  0x00007f43b858a39f in raw_getkey (keytmout=0) at /usr/include/bits/unistd.h:35

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
#2  getkey (keytmout=0) at zle_main.c:610

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
#3  0x00007f43b8584bf1 in getkeybuf (km=0x0, funcp=0x7fff507ad718, strp=0x7fff507ad710) at zle_keymap.c:1313

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
#4  getkeymapcmd (km=0x0, funcp=0x7fff507ad718, strp=0x7fff507ad710) at zle_keymap.c:1275

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
#5  0x00007f43b8584ef0 in getkeycmd () at zle_keymap.c:1349

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
#6  0x00007f43b8588281 in zlecore () at zle_main.c:695

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
#7  0x00007f43b85888f8 in zleread (lp=<value optimized out>, rp=<value optimized out>, flags=<value optimized out>, 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
#8  0x00000000004388a0 in inputline () at input.c:278

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#143: 
#9  ingetc () at input.c:214

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
#10 0x000000000043339d in ihgetc () at hist.c:241

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#145: 
#11 0x000000000044126b in gettok () at lex.c:631

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#146: 
#12 0x0000000000441a88 in yylex () at lex.c:347

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#147: 
#13 0x000000000045cec7 in parse_event () at parse.c:449

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#148: 
#14 0x0000000000437328 in loop (toplevel=1, justonce=0) at init.c:128

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#149: 
#15 0x0000000000438021 in zsh_main (argc=<value optimized out>, argv=0x7fff507ae048) at init.c:1280

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#150: 
#16 0x0000003f1de1d994 in __libc_start_main (main=<value optimized out>, argc=<value optimized out>, 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#154: 
#17 0x000000000040cc09 in _start ()

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#157: 
### Note: This is 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#166: 
#### HERE breakpoint is still pending because, gdbstub needs more support for

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#167: 
#### breakpointing.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#208: FILE: fs/proc/base.c:2567:
+	REG("gdb",	S_IRUSR|S_IWUSR, proc_gdb_operations),
 	          	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#208: FILE: fs/proc/base.c:2567:
+	REG("gdb",	S_IRUSR|S_IWUSR, proc_gdb_operations),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#250: FILE: init/Kconfig:1208:
+menuconfig UTRACE
+	bool "Infrastructure for tracing and debugging user processes"
+	depends on EXPERIMENTAL
+	depends on HAVE_ARCH_TRACEHOOK
+	help
+	  Enable the utrace process tracing interface.  This is an internal
+	  kernel interface exported to kernel modules, to track events in
+	  user threads, extract and change user thread state.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#259: FILE: init/Kconfig:1217:
+config UTRACE_GDB
+	bool "/proc/<pid>/gdb file for gdb remote connection"
+	select UTRACE
+        default y
+	help
+	  Enable the utrace-based /proc/<pid>/gdb process debugging
+	  interface, for connection using the gdb remote protocol.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#283: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#288: FILE: kernel/utrace-gdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#374: FILE: kernel/utrace-gdb.c:87:
+unsigned gdb_signal_map[] = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#411: FILE: kernel/utrace-gdb.c:124:
+static unsigned map_signal_kern2gdb(unsigned kernel_signo)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#411: FILE: kernel/utrace-gdb.c:124:
+static unsigned map_signal_kern2gdb(unsigned kernel_signo)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#413: FILE: kernel/utrace-gdb.c:126:
+	if (kernel_signo < sizeof(gdb_signal_map) / sizeof(unsigned))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#418: FILE: kernel/utrace-gdb.c:131:
+static unsigned map_signal_gdb2kern(unsigned gdb_signo)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#418: FILE: kernel/utrace-gdb.c:131:
+static unsigned map_signal_gdb2kern(unsigned gdb_signo)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#420: FILE: kernel/utrace-gdb.c:133:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: kernel/utrace-gdb.c:134:
+	unsigned i;
+	for (i = 0; i < sizeof(gdb_signal_map) / sizeof(unsigned); i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#421: FILE: kernel/utrace-gdb.c:134:
+	for (i = 0; i < sizeof(gdb_signal_map) / sizeof(unsigned); i++)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#429: FILE: kernel/utrace-gdb.c:142:
+static unsigned byteme(unsigned char hex1, unsigned char hex2)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: kernel/utrace-gdb.c:158:
+	BUG_ON(p->output_buf_size + 1 >= GDB_BUFMAX);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#457: FILE: kernel/utrace-gdb.c:170:
+	BUG_ON(p->output_buf_size >= GDB_BUFMAX);

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#462: FILE: kernel/utrace-gdb.c:175:
+static char hex[] = "0123456789abcdef";

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: kernel/utrace-gdb.c:184:
+	BUG_ON(p->output_buf_size >= GDB_BUFMAX);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: kernel/utrace-gdb.c:198:
+	BUG_ON(p->output_buf_size + 3 >= GDB_BUFMAX);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: kernel/utrace-gdb.c:199:
+	BUG_ON(p->output_buf[start] != '$');

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#509: FILE: kernel/utrace-gdb.c:222:
+static inline struct gdb_connection *find_gdb_connection(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: kernel/utrace-gdb.c:241:
+u32 gdb_utrace_report_quiesce(enum utrace_resume_action action,
+				struct utrace_engine *engine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: kernel/utrace-gdb.c:247:
+	pr_debug("report_quiesce %d event 0x%lx 0x%x->0x%x\n", task->pid,
+				event, action, p->at_quiesce_do);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: kernel/utrace-gdb.c:253:
+u32 gdb_utrace_report_clone(enum utrace_resume_action action,
+				struct utrace_engine *engine,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#548: FILE: kernel/utrace-gdb.c:261:
+		printk(KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: kernel/utrace-gdb.c:270:
+u32 gdb_utrace_report_exec(enum utrace_resume_action action,
+					struct utrace_engine *engine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: kernel/utrace-gdb.c:298:
+u32 gdb_utrace_report_signal(u32 action,
+				struct utrace_engine *engine,

CHECK:BRACES: Unbalanced braces around else statement
#648: FILE: kernel/utrace-gdb.c:361:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: kernel/utrace-gdb.c:390:
+u32 gdb_utrace_report_exit(enum utrace_resume_action action,
+					struct utrace_engine *engine,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#689: FILE: kernel/utrace-gdb.c:402:
+		 "W%02x", (unsigned)(orig_code & 0xFF));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: kernel/utrace-gdb.c:416:
+u32 gdb_utrace_report_death(struct utrace_engine *engine,
+			struct task_struct *task, bool group_dead, int signal)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#712: FILE: kernel/utrace-gdb.c:425:
+	snprintf(p->stopcode, GDB_BUFMAX, "X%2x", (unsigned)(signal & 0xFF));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#739: FILE: kernel/utrace-gdb.c:452:
+	unsigned pos;		/* regset offset */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#740: FILE: kernel/utrace-gdb.c:453:
+	unsigned count;		/* regset byte count */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#741: FILE: kernel/utrace-gdb.c:454:
+	unsigned rsn;		/* regset number */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: kernel/utrace-gdb.c:455:
+	unsigned bytes;		/* gdb's view of register width; <= count */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: kernel/utrace-gdb.c:565:
+static int gdb_remote_register_info(struct gdb_connection *p,
+					struct task_struct *task,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#853: FILE: kernel/utrace-gdb.c:566:
+					unsigned number,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#854: FILE: kernel/utrace-gdb.c:567:
+					unsigned *pos, unsigned *count,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#854: FILE: kernel/utrace-gdb.c:567:
+					unsigned *pos, unsigned *count,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#855: FILE: kernel/utrace-gdb.c:568:
+					unsigned *bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#888: FILE: kernel/utrace-gdb.c:601:
+		unsigned j;

WARNING:LINE_SPACING: Missing a blank line after declarations
#889: FILE: kernel/utrace-gdb.c:602:
+		unsigned j;
+		for (j = 0; j < rs->n; j++) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#897: FILE: kernel/utrace-gdb.c:610:
+	 * fall through here.

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: kernel/utrace-gdb.c:616:
+static inline int fetch_remote_register_info(struct gdb_connection *p,
+					struct task_struct *task,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#905: FILE: kernel/utrace-gdb.c:618:
+					unsigned *pos,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#906: FILE: kernel/utrace-gdb.c:619:
+					unsigned *count,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#907: FILE: kernel/utrace-gdb.c:620:
+					unsigned *bytes)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: kernel/utrace-gdb.c:626:
+	pr_debug("gdb register %u => rsn %d p%u c%u b%u\n", index, rsn,
+							*pos, *count, *bytes);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#919: FILE: kernel/utrace-gdb.c:632:
+		BUG_ON(*count > 0 && *count < *bytes);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#921: FILE: kernel/utrace-gdb.c:634:
+		BUG_ON(MAX_REG_WIDTH < *bytes || MAX_REG_WIDTH < *count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#927: FILE: kernel/utrace-gdb.c:640:
+static inline int get_set_regset_view(struct task_struct *task,
+			unsigned pos, unsigned count,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#927: FILE: kernel/utrace-gdb.c:640:
+			unsigned pos, unsigned count,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#927: FILE: kernel/utrace-gdb.c:640:
+			unsigned pos, unsigned count,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#943: FILE: kernel/utrace-gdb.c:656:
+		BUG_ON(count > MAX_REG_WIDTH);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#946: FILE: kernel/utrace-gdb.c:659:
+	BUG_ON(rsn >= rsv->n);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (rs->set)
#951: FILE: kernel/utrace-gdb.c:664:
+		rc = (rs->set)(task, rs, pos, count, reg_contents, NULL);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (rs->get)
#953: FILE: kernel/utrace-gdb.c:666:
+		rc = (rs->get)(task, rs, pos, count, reg_contents, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: kernel/utrace-gdb.c:672:
+static inline void prepare_regset_set(struct gdb_connection *p,
+				unsigned char *reg_contents,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#960: FILE: kernel/utrace-gdb.c:673:
+				size_t *start, unsigned bytes)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#976: FILE: kernel/utrace-gdb.c:689:
+		reg_contents[j] = byteme(p->input_buf[*start + 2 * j],
+					   p->input_buf[*start + 2 * j + 1]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: kernel/utrace-gdb.c:698:
+static void handle_gdb_command_packet(struct gdb_connection *p,
+						struct task_struct *task)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1064: FILE: kernel/utrace-gdb.c:777:
+			unsigned rs_count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1065: FILE: kernel/utrace-gdb.c:778:
+			unsigned rs_pos;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1066: FILE: kernel/utrace-gdb.c:779:
+			unsigned bytes;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1071: FILE: kernel/utrace-gdb.c:784:
+			rsn = fetch_remote_register_info(p, task, i,
+					   &rs_pos, &rs_count, &bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: kernel/utrace-gdb.c:789:
+			rc = get_set_regset_view(task, rs_pos, rs_count,
+						reg_contents, rsn, false);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1090: FILE: kernel/utrace-gdb.c:803:
+
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: kernel/utrace-gdb.c:810:
+		while (p->input_buf[op_start] != '#' &&
+				       op_start < p->input_buf_size) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1098: FILE: kernel/utrace-gdb.c:811:
+			unsigned rs_count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1099: FILE: kernel/utrace-gdb.c:812:
+			unsigned rs_pos;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1100: FILE: kernel/utrace-gdb.c:813:
+			unsigned bytes;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: kernel/utrace-gdb.c:818:
+			rsn = fetch_remote_register_info(p, task, i,
+					   &rs_pos, &rs_count, &bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: kernel/utrace-gdb.c:828:
+			rc = get_set_regset_view(task, rs_pos, rs_count,
+						reg_contents, rsn, true);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1135: FILE: kernel/utrace-gdb.c:848:
+			unsigned rs_count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1136: FILE: kernel/utrace-gdb.c:849:
+			unsigned rs_pos;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1137: FILE: kernel/utrace-gdb.c:850:
+			unsigned bytes;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: kernel/utrace-gdb.c:855:
+			rsn = fetch_remote_register_info(p, task, arg1,
+					   &rs_pos, &rs_count, &bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: kernel/utrace-gdb.c:865:
+			rc = get_set_regset_view(task, rs_pos, rs_count,
+						reg_contents, rsn, true);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1162: FILE: kernel/utrace-gdb.c:875:
+		if (rc != 2)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1164: FILE: kernel/utrace-gdb.c:877:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1166: FILE: kernel/utrace-gdb.c:879:
+			size_t o = push_output_packet_start(p);
+			while (arg2 > 0) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1181: FILE: kernel/utrace-gdb.c:894:
+					break;	/* EFAULT */
+				else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1243: FILE: kernel/utrace-gdb.c:956:
+static int proc_gdb_open(struct inode *inode, struct file *filp)
                                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct gdb_connection)...)
#1277: FILE: kernel/utrace-gdb.c:990:
+	p = kzalloc(sizeof(struct gdb_connection), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: kernel/utrace-gdb.c:1013:
+	p->engine = utrace_attach_task(task,
+					UTRACE_ATTACH_CREATE |

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->engine"
#1304: FILE: kernel/utrace-gdb.c:1017:
+	if (IS_ERR(p->engine) || p->engine == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1337: FILE: kernel/utrace-gdb.c:1050:
+static int proc_gdb_release(struct inode *inode, struct file *filp)
                                                               ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1344: FILE: kernel/utrace-gdb.c:1057:
+	if (task == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: kernel/utrace-gdb.c:1084:
+static int proc_gdb_ioctl(struct inode *inode, struct file *file,
+				unsigned int cmd, unsigned long arg)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1381: FILE: kernel/utrace-gdb.c:1094:
+static ssize_t proc_gdb_read(struct file *filp, char __user * buf,
                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1381: FILE: kernel/utrace-gdb.c:1094:
+static ssize_t proc_gdb_read(struct file *filp, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1382: FILE: kernel/utrace-gdb.c:1095:
+static ssize_t proc_gdb_read(struct file *filp, char __user * buf,
+					size_t count, loff_t *ppos)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->output_buf_size <= p->output_buf_read'
#1393: FILE: kernel/utrace-gdb.c:1106:
+	if ((p->output_buf_size <= p->output_buf_read) &&
+	    filp->f_flags & O_NONBLOCK)

CHECK:SPACING: No space is necessary after a cast
#1410: FILE: kernel/utrace-gdb.c:1123:
+	len = min(count, (size_t) (p->output_buf_size - p->output_buf_read));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1417: FILE: kernel/utrace-gdb.c:1130:
+	pr_debug("sent %u bytes (%ld left) data (%.*s)\n",
+		(unsigned)len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1417: FILE: kernel/utrace-gdb.c:1130:
+		(unsigned)len,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1425: FILE: kernel/utrace-gdb.c:1138:
+	BUG_ON(p->output_buf_read > p->output_buf_size);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1438: FILE: kernel/utrace-gdb.c:1151:
+static ssize_t proc_gdb_write(struct file *filp, const char __user * buf,
                                            ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1438: FILE: kernel/utrace-gdb.c:1151:
+static ssize_t proc_gdb_write(struct file *filp, const char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1439: FILE: kernel/utrace-gdb.c:1152:
+static ssize_t proc_gdb_write(struct file *filp, const char __user * buf,
+					size_t count, loff_t *ppos)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1465: FILE: kernel/utrace-gdb.c:1178:
+	/* We now know there is some room in the input buffer.  Upon
+	   entry, the input_buf will either be empty, or contain a

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1466: FILE: kernel/utrace-gdb.c:1179:
+	   partial gdb request packet. */

CHECK:SPACING: No space is necessary after a cast
#1469: FILE: kernel/utrace-gdb.c:1182:
+	len = min(count, (size_t) (GDB_BUFMAX - p->input_buf_size));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1516: FILE: kernel/utrace-gdb.c:1229:
+			printk(KERN_WARNING "Unexpected NAK received"

WARNING:SPLIT_STRING: quoted string split across lines
#1517: FILE: kernel/utrace-gdb.c:1230:
+			printk(KERN_WARNING "Unexpected NAK received"
+			       "on /proc/%d/gdb connection.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#1517: FILE: kernel/utrace-gdb.c:1230:
+			printk(KERN_WARNING "Unexpected NAK received"
+			       "on /proc/%d/gdb connection.\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1523: FILE: kernel/utrace-gdb.c:1236:
+			int rc;	/* NB: don't overwrite 'ret'. */
+			pr_debug("received gdb interrupt\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1540: FILE: kernel/utrace-gdb.c:1253:
+			unsigned char checksum2;
+			for (j = 1; j < p->input_buf_size - 2; j++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1548: FILE: kernel/utrace-gdb.c:1261:
+				pr_debug("received gdb packet %.*s\n",
+						 j + 3, &p->input_buf[0]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1549: FILE: kernel/utrace-gdb.c:1262:
+				if (checksum == checksum2) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1552: FILE: kernel/utrace-gdb.c:1265:
+				} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1558: FILE: kernel/utrace-gdb.c:1271:
+				memmove(&p->input_buf[0], &p->input_buf[j + 3],
+							p->input_buf_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1574: FILE: kernel/utrace-gdb.c:1287:
+			printk(KERN_WARNING "Unexpected character (%x) "

WARNING:SPLIT_STRING: quoted string split across lines
#1575: FILE: kernel/utrace-gdb.c:1288:
+			printk(KERN_WARNING "Unexpected character (%x) "
+			       "received on /proc/%d/gdb connection.\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041442.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 111 warnings, 44 checks, 1383 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041442.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
