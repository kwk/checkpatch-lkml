CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#53: FILE: fs/notify/fsnotify.h:17:
+extern void fsnotify_flush_notify(struct fsnotify_group *group);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: fs/notify/fsnotify.h:31:
+extern struct fsnotify_event_holder *fsnotify_alloc_event_holder(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: fs/notify/fsnotify.h:32:
+extern void fsnotify_destroy_event_holder(struct fsnotify_event_holder *holder);

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: fs/notify/notification.c:16:
  *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'asyncronously' may be misspelled - perhaps 'asynchronously'?
#108: FILE: fs/notify/notification.c:21:
+ * sends the userspace notification about events asyncronously some time after
                                                  ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#140: FILE: fs/notify/notification.c:63:
+	BUG_ON(!mutex_is_locked(&group->notification_mutex));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->mask == new->mask'
#165: FILE: fs/notify/notification.c:100:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->data_type == new->data_type)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->to_tell == new->to_tell'
#165: FILE: fs/notify/notification.c:100:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->data_type == new->data_type)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->data_type == new->data_type'
#165: FILE: fs/notify/notification.c:100:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->data_type == new->data_type)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->path.mnt == new->path.mnt'
#174: FILE: fs/notify/notification.c:109:
+			if ((old->path.mnt == new->path.mnt) &&
+			    (old->path.dentry == new->path.dentry))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->path.dentry == new->path.dentry'
#174: FILE: fs/notify/notification.c:109:
+			if ((old->path.mnt == new->path.mnt) &&
+			    (old->path.dentry == new->path.dentry))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#228: FILE: fs/notify/notification.c:159:
+		 * event holder was used, go back and get a new one */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: fs/notify/notification.c:199:
+	BUG_ON(!mutex_is_locked(&group->notification_mutex));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#273: FILE: fs/notify/notification.c:201:
+	holder = list_first_entry(&group->notification_list, struct fsnotify_event_holder, event_list);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#299: FILE: fs/notify/notification.c:227:
+	BUG_ON(!mutex_is_locked(&group->notification_mutex));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#301: FILE: fs/notify/notification.c:229:
+	holder = list_first_entry(&group->notification_list, struct fsnotify_event_holder, event_list);

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#384: FILE: include/linux/fsnotify_backend.h:124:
+	struct list_head notification_list;	/* list of event_holder this group needs to send to userspace */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#385: FILE: include/linux/fsnotify_backend.h:125:
+	wait_queue_head_t notification_waitq;	/* read() on the notification file blocks on this waitq */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#430: FILE: include/linux/fsnotify_backend.h:296:
+extern int fsnotify_add_notify_event(struct fsnotify_group *group, struct fsnotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#432: FILE: include/linux/fsnotify_backend.h:298:
+extern bool fsnotify_notify_queue_is_empty(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: include/linux/fsnotify_backend.h:300:
+extern struct fsnotify_event *fsnotify_peek_notify_event(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/linux/fsnotify_backend.h:302:
+extern struct fsnotify_event *fsnotify_remove_notify_event(struct fsnotify_group *group);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000133628.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 9 warnings, 12 checks, 369 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000133628.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
