ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: fs/gfs2/glock.c:1699:
+	switch(state) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Blktrace_running>
#181: FILE: fs/gfs2/glock.c:1726:
+	if (unlikely(bt->trace_state != Blktrace_running))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: fs/gfs2/glock.c:1732:
+	switch(gl->gl_name.ln_type) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/gfs2/glock.c:1738:
+        ^I        return;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: fs/gfs2/glock.c:1738:
+        ^I        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/gfs2/glock.c:1738:
+        ^I        return;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid != bt->pid'
#197: FILE: fs/gfs2/glock.c:1742:
+	if (bt->pid && (pid != bt->pid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: fs/gfs2/glock.c:1780:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: fs/gfs2/glock.c:1780:
+        }$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#272: FILE: fs/gfs2/glock.c:1824:
+	WARN_ON(rv && rv != -ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#274: FILE: fs/gfs2/glock.c:1826:
+	WARN_ON(rv && rv != -ENOSYS);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#276: FILE: fs/gfs2/glock.c:1828:
+	WARN_ON(rv && rv != -ENOSYS);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#328: FILE: include/linux/blktrace_api.h:126:
+^IBLK_GLS_NONE = 1, ^I/* i.e. invalid */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#357: FILE: include/linux/blktrace_api.h:219:
+extern void blk_trace_note_tsk(struct blk_trace *bt, struct task_struct *tsk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 7 warnings, 3 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
