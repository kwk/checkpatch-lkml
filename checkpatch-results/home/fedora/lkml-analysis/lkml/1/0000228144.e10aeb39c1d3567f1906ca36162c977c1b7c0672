WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: fs/nilfs2/btree.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#70: FILE: fs/nilfs2/btree.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#71: FILE: fs/nilfs2/btree.c:18:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree *' should also have an identifier name
#102: FILE: fs/nilfs2/btree.c:49:
+	void (*bp_op)(struct nilfs_btree *, struct nilfs_btree_path *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree_path *' should also have an identifier name
#102: FILE: fs/nilfs2/btree.c:49:
+	void (*bp_op)(struct nilfs_btree *, struct nilfs_btree_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#102: FILE: fs/nilfs2/btree.c:49:
+	void (*bp_op)(struct nilfs_btree *, struct nilfs_btree_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64 *' should also have an identifier name
#102: FILE: fs/nilfs2/btree.c:49:
+	void (*bp_op)(struct nilfs_btree *, struct nilfs_btree_path *,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64 *' should also have an identifier name
#102: FILE: fs/nilfs2/btree.c:49:
+	void (*bp_op)(struct nilfs_btree *, struct nilfs_btree_path *,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nilfs_btree_path_cache"
#118: FILE: fs/nilfs2/btree.c:65:
+	return (nilfs_btree_path_cache != NULL) ? 0 : -ENOMEM;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "path[level].bp_bh"
#164: FILE: fs/nilfs2/btree.c:111:
+		if (path[level].bp_bh != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#170: FILE: fs/nilfs2/btree.c:117:
+		 * operations. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: fs/nilfs2/btree.c:126:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "keyp"
#430: FILE: fs/nilfs2/btree.c:377:
+	if (keyp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptrp"
#432: FILE: fs/nilfs2/btree.c:379:
+	if (ptrp != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#473: FILE: fs/nilfs2/btree.c:420:
+	if (nilfs_btree_node_get_level(btree, node) >
[...]
+	} else if (s < 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's > 0'
#475: FILE: fs/nilfs2/btree.c:422:
+		if ((s > 0) && (index > 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index > 0'
#475: FILE: fs/nilfs2/btree.c:422:
+		if ((s > 0) && (index > 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: fs/nilfs2/btree.c:428:
+	BUG_ON(indexp == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!indexp"
#481: FILE: fs/nilfs2/btree.c:428:
+	BUG_ON(indexp == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: fs/nilfs2/btree.c:480:
+	BUG_ON(minlevel <= NILFS_BTREE_LEVEL_DATA);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level < minlevel'
#537: FILE: fs/nilfs2/btree.c:484:
+	if ((level < minlevel) ||
+	    (nilfs_btree_node_get_nchildren(btree, node) <= 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: fs/nilfs2/btree.c:499:
+		BUG_ON(level != nilfs_btree_node_get_level(btree, node));

CHECK:BRACES: braces {} should be used on all arms of this statement
#558: FILE: fs/nilfs2/btree.c:505:
+		if (index < nilfs_btree_node_nchildren_max(btree, node))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: fs/nilfs2/btree.c:507:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#561: FILE: fs/nilfs2/btree.c:508:
+			BUG_ON(found || level != NILFS_BTREE_LEVEL_NODE_MIN);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptrp"
#570: FILE: fs/nilfs2/btree.c:517:
+	if (ptrp != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: fs/nilfs2/btree.c:546:
+		BUG_ON(level != nilfs_btree_node_get_level(btree, node));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "keyp"
#605: FILE: fs/nilfs2/btree.c:552:
+	if (keyp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptrp"
#607: FILE: fs/nilfs2/btree.c:554:
+	if (ptrp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#623: FILE: fs/nilfs2/btree.c:570:
+	if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptrp"
#629: FILE: fs/nilfs2/btree.c:576:
+	if (ptrp != NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#645: FILE: fs/nilfs2/btree.c:592:
+			nilfs_btree_node_set_key(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#647: FILE: fs/nilfs2/btree.c:594:
+				nilfs_btree_get_nonroot_node(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#682: FILE: fs/nilfs2/btree.c:629:
+						nilfs_btree_node_get_key(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#893: FILE: fs/nilfs2/btree.c:840:
+	if (path == NULL)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#925: FILE: fs/nilfs2/btree.c:872:
+		return ptr;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#925: FILE: fs/nilfs2/btree.c:872:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_ops->btop_find_target"
#956: FILE: fs/nilfs2/btree.c:903:
+	if (btree->bt_ops->btop_find_target != NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#960: FILE: fs/nilfs2/btree.c:907:
+	ret = (*btree->bt_bmap.b_pops->bpop_prepare_alloc_ptr)(

CHECK:BRACES: braces {} should be used on all arms of this statement
#988: FILE: fs/nilfs2/btree.c:935:
+			if (nilfs_btree_node_get_nchildren(btree, sib) <
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#994: FILE: fs/nilfs2/btree.c:941:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1008: FILE: fs/nilfs2/btree.c:955:
+			if (nilfs_btree_node_get_nchildren(btree, sib) <
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1014: FILE: fs/nilfs2/btree.c:961:
+			} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1021: FILE: fs/nilfs2/btree.c:968:
+		ret = (*btree->bt_bmap.b_pops->bpop_prepare_alloc_ptr)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1053: FILE: fs/nilfs2/btree.c:1000:
+	ret = (*btree->bt_bmap.b_pops->bpop_prepare_alloc_ptr)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1087: FILE: fs/nilfs2/btree.c:1034:
+		(*btree->bt_bmap.b_pops->bpop_abort_alloc_ptr)(

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1090: FILE: fs/nilfs2/btree.c:1037:
+
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_ops->btop_set_target"
#1108: FILE: fs/nilfs2/btree.c:1055:
+	if (btree->bt_ops->btop_set_target != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_bmap.b_pops->bpop_commit_alloc_ptr"
#1112: FILE: fs/nilfs2/btree.c:1059:
+		if (btree->bt_bmap.b_pops->bpop_commit_alloc_ptr != NULL) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1113: FILE: fs/nilfs2/btree.c:1060:
+			(*btree->bt_bmap.b_pops->bpop_commit_alloc_ptr)(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#1132: FILE: fs/nilfs2/btree.c:1079:
+	if (path == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: fs/nilfs2/btree.c:1119:
+			nilfs_btree_promote_key(btree, path, level + 1,
+				nilfs_btree_node_get_key(btree, node, 0));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1339: FILE: fs/nilfs2/btree.c:1286:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_bmap.b_pops->bpop_prepare_end_ptr"
#1359: FILE: fs/nilfs2/btree.c:1306:
+		if (btree->bt_bmap.b_pops->bpop_prepare_end_ptr != NULL) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1360: FILE: fs/nilfs2/btree.c:1307:
+			ret = (*btree->bt_bmap.b_pops->bpop_prepare_end_ptr)(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1422: FILE: fs/nilfs2/btree.c:1369:
+			BUG_ON(level != nilfs_btree_height(btree) - 2);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1434: FILE: fs/nilfs2/btree.c:1381:
+
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_bmap.b_pops->bpop_prepare_end_ptr"
#1440: FILE: fs/nilfs2/btree.c:1387:
+	if (btree->bt_bmap.b_pops->bpop_prepare_end_ptr != NULL) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1441: FILE: fs/nilfs2/btree.c:1388:
+		ret = (*btree->bt_bmap.b_pops->bpop_prepare_end_ptr)(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_bmap.b_pops->bpop_abort_end_ptr"
#1457: FILE: fs/nilfs2/btree.c:1404:
+	if (btree->bt_bmap.b_pops->bpop_abort_end_ptr != NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1458: FILE: fs/nilfs2/btree.c:1405:
+		(*btree->bt_bmap.b_pops->bpop_abort_end_ptr)(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_bmap.b_pops->bpop_abort_end_ptr"
#1463: FILE: fs/nilfs2/btree.c:1410:
+		if (btree->bt_bmap.b_pops->bpop_abort_end_ptr != NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1464: FILE: fs/nilfs2/btree.c:1411:
+			(*btree->bt_bmap.b_pops->bpop_abort_end_ptr)(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_bmap.b_pops->bpop_commit_end_ptr"
#1479: FILE: fs/nilfs2/btree.c:1426:
+		if (btree->bt_bmap.b_pops->bpop_commit_end_ptr != NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1480: FILE: fs/nilfs2/btree.c:1427:
+			(*btree->bt_bmap.b_pops->bpop_commit_end_ptr)(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#1499: FILE: fs/nilfs2/btree.c:1446:
+	if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#1527: FILE: fs/nilfs2/btree.c:1474:
+	if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bh"
#1573: FILE: fs/nilfs2/btree.c:1520:
+	if (bh != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1599: FILE: fs/nilfs2/btree.c:1546:
+		BUG_ON(nchildren > 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1608: FILE: fs/nilfs2/btree.c:1555:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bh"
#1621: FILE: fs/nilfs2/btree.c:1568:
+	if (bh != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_ops->btop_find_target"
#1643: FILE: fs/nilfs2/btree.c:1590:
+	if (btree->bt_ops->btop_find_target != NULL)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1645: FILE: fs/nilfs2/btree.c:1592:
+		dreq->bpr_ptr
+			= (*btree->bt_ops->btop_find_target)(btree, NULL, key);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nreq"
#1652: FILE: fs/nilfs2/btree.c:1599:
+	if (nreq != NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1677: FILE: fs/nilfs2/btree.c:1624:
+
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bmap->b_ops->bop_clear"
#1693: FILE: fs/nilfs2/btree.c:1640:
+	if (bmap->b_ops->bop_clear != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nreq"
#1702: FILE: fs/nilfs2/btree.c:1649:
+	if (nreq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bmap->b_pops->bpop_commit_alloc_ptr"
#1703: FILE: fs/nilfs2/btree.c:1650:
+		if (bmap->b_pops->bpop_commit_alloc_ptr != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bmap->b_pops->bpop_commit_alloc_ptr"
#1728: FILE: fs/nilfs2/btree.c:1675:
+		if (bmap->b_pops->bpop_commit_alloc_ptr != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "btree->bt_ops->btop_set_target"
#1741: FILE: fs/nilfs2/btree.c:1688:
+	if (btree->bt_ops->btop_set_target != NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1769: FILE: fs/nilfs2/btree.c:1716:
+	} else if ((n + 1) <= NILFS_BTREE_NODE_NCHILDREN_MAX(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1776: FILE: fs/nilfs2/btree.c:1723:
+		BUG();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1823: FILE: fs/nilfs2/btree.c:1770:
+		ret = nilfs_btnode_prepare_change_key(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1848: FILE: fs/nilfs2/btree.c:1795:
+		nilfs_btnode_commit_change_key(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1868: FILE: fs/nilfs2/btree.c:1815:
+		nilfs_btnode_abort_change_key(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1888: FILE: fs/nilfs2/btree.c:1835:
+	       !buffer_dirty(path[level].bp_bh)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1889: FILE: fs/nilfs2/btree.c:1836:
+		BUG_ON(buffer_nilfs_volatile(path[level].bp_bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1896: FILE: fs/nilfs2/btree.c:1843:
+	BUG_ON(maxlevelp == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!maxlevelp"
#1896: FILE: fs/nilfs2/btree.c:1843:
+	BUG_ON(maxlevelp == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1965: FILE: fs/nilfs2/btree.c:1912:
+	BUG_ON(!buffer_dirty(bh));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#1969: FILE: fs/nilfs2/btree.c:1916:
+	if (path == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1986: FILE: fs/nilfs2/btree.c:1933:
+			printk(KERN_CRIT "%s: key = %llu, level == %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1988: FILE: fs/nilfs2/btree.c:1935:
+			BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2053: FILE: fs/nilfs2/btree.c:2000:
+			bh = head = page_buffers(pvec.pages[i]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2089: FILE: fs/nilfs2/btree.c:2036:
+		ret = nilfs_btnode_prepare_change_key(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2094: FILE: fs/nilfs2/btree.c:2041:
+		nilfs_btnode_commit_change_key(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#2158: FILE: fs/nilfs2/btree.c:2105:
+	if (path == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2173: FILE: fs/nilfs2/btree.c:2120:
+		BUG_ON(ret == -ENOENT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2202: FILE: fs/nilfs2/btree.c:2149:
+	if (buffer_nilfs_node(*bh)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2205: FILE: fs/nilfs2/btree.c:2152:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#2225: FILE: fs/nilfs2/btree.c:2172:
+	if (path == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2231: FILE: fs/nilfs2/btree.c:2178:
+		BUG_ON(ret == -ENOENT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2236: FILE: fs/nilfs2/btree.c:2183:
+		BUG_ON(ret == -ENOENT);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2336: FILE: fs/nilfs2/btree.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2352: FILE: fs/nilfs2/btree.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2353: FILE: fs/nilfs2/btree.h:18:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct nilfs_btree *' should also have an identifier name
#2375: FILE: fs/nilfs2/btree.h:40:
+	__u64 (*btop_find_target)(const struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct nilfs_btree_path *' should also have an identifier name
#2375: FILE: fs/nilfs2/btree.h:40:
+	__u64 (*btop_find_target)(const struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2375: FILE: fs/nilfs2/btree.h:40:
+	__u64 (*btop_find_target)(const struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree *' should also have an identifier name
#2377: FILE: fs/nilfs2/btree.h:42:
+	void (*btop_set_target)(struct nilfs_btree *, __u64, __u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2377: FILE: fs/nilfs2/btree.h:42:
+	void (*btop_set_target)(struct nilfs_btree *, __u64, __u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2377: FILE: fs/nilfs2/btree.h:42:
+	void (*btop_set_target)(struct nilfs_btree *, __u64, __u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree *' should also have an identifier name
#2379: FILE: fs/nilfs2/btree.h:44:
+	struct the_nilfs *(*btop_get_nilfs)(struct nilfs_btree *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree *' should also have an identifier name
#2381: FILE: fs/nilfs2/btree.h:46:
+	int (*btop_propagate)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree_path *' should also have an identifier name
#2381: FILE: fs/nilfs2/btree.h:46:
+	int (*btop_propagate)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2381: FILE: fs/nilfs2/btree.h:46:
+	int (*btop_propagate)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#2381: FILE: fs/nilfs2/btree.h:46:
+	int (*btop_propagate)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree *' should also have an identifier name
#2385: FILE: fs/nilfs2/btree.h:50:
+	int (*btop_assign)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_btree_path *' should also have an identifier name
#2385: FILE: fs/nilfs2/btree.h:50:
+	int (*btop_assign)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2385: FILE: fs/nilfs2/btree.h:50:
+	int (*btop_assign)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head **' should also have an identifier name
#2385: FILE: fs/nilfs2/btree.h:50:
+	int (*btop_assign)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#2385: FILE: fs/nilfs2/btree.h:50:
+	int (*btop_assign)(struct nilfs_btree *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union nilfs_binfo *' should also have an identifier name
#2385: FILE: fs/nilfs2/btree.h:50:
+	int (*btop_assign)(struct nilfs_btree *,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2427: FILE: fs/nilfs2/btree.h:92:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2443: FILE: fs/nilfs2/btree.h:108:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_bmap *' should also have an identifier name
#2446: FILE: fs/nilfs2/btree.h:111:
+int nilfs_btree_init(struct nilfs_bmap *, __u64, __u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2446: FILE: fs/nilfs2/btree.h:111:
+int nilfs_btree_init(struct nilfs_bmap *, __u64, __u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2446: FILE: fs/nilfs2/btree.h:111:
+int nilfs_btree_init(struct nilfs_bmap *, __u64, __u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_bmap *' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const __u64 *' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const __u64 *' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64' should also have an identifier name
#2447: FILE: fs/nilfs2/btree.h:112:
+int nilfs_btree_convert_and_insert(struct nilfs_bmap *, __u64, __u64,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_bmap *' should also have an identifier name
#2450: FILE: fs/nilfs2/btree.h:115:
+void nilfs_btree_init_gc(struct nilfs_bmap *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228144.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 56 warnings, 78 checks, 2393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228144.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
