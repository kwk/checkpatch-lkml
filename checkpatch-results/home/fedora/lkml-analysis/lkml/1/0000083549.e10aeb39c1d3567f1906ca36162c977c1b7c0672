WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
Gitweb:     http://git.kernel.org/tip/ea4010d1363699770a9894493bafe556a59a144c

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: tools/perf/util/trace-event-parse.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#122: FILE: tools/perf/util/trace-event-parse.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#123: FILE: tools/perf/util/trace-event-parse.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#197: FILE: tools/perf/util/trace-event-parse.c:91:
+		sscanf(line, "%d %as", &item->pid,
+		       (float *)&item->comm); /* workaround gcc warning */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#271: FILE: tools/perf/util/trace-event-parse.c:165:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fa->addr == fb->addr'
#310: FILE: tools/perf/util/trace-event-parse.c:204:
+	if ((fa->addr == fb->addr) ||
+
+	    (fa->addr > fb->addr &&
+	     fa->addr < (fb+1)->addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: tools/perf/util/trace-event-parse.c:205:
+	if ((fa->addr == fb->addr) ||
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#313: FILE: tools/perf/util/trace-event-parse.c:207:
+	     fa->addr < (fb+1)->addr))
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#543: FILE: tools/perf/util/trace-event-parse.c:437:
+
+

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#570: FILE: tools/perf/util/trace-event-parse.c:464:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:BRACES: braces {} should be used on all arms of this statement
#614: FILE: tools/perf/util/trace-event-parse.c:508:
+				if (*tok) {
[...]
+				} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#619: FILE: tools/perf/util/trace-event-parse.c:513:
+				} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#644: FILE: tools/perf/util/trace-event-parse.c:538:
+			if (*tok) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#649: FILE: tools/perf/util/trace-event-parse.c:543:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#663: FILE: tools/perf/util/trace-event-parse.c:557:
+	if (*tok) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#668: FILE: tools/perf/util/trace-event-parse.c:562:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: tools/perf/util/trace-event-parse.c:620:
+static int test_type_token(enum event_type type, char *token,
+		    enum event_type expect, char *expect_tok)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#883: FILE: tools/perf/util/trace-event-parse.c:777:
+			     type == EVENT_OP && strcmp(token, ".") == 0)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#887: FILE: tools/perf/util/trace-event-parse.c:781:
+				if (field->type) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#893: FILE: tools/perf/util/trace-event-parse.c:787:
+				} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: tools/perf/util/trace-event-parse.c:813:
+^I^I        while (strcmp(token, "]") != 0) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1157: FILE: tools/perf/util/trace-event-parse.c:1051:
+			return 15;
+		} else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1166: FILE: tools/perf/util/trace-event-parse.c:1060:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1213: FILE: tools/perf/util/trace-event-parse.c:1107:
+	} else if (strcmp(token, "?") == 0) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1238: FILE: tools/perf/util/trace-event-parse.c:1132:
+		   strcmp(token, "!=") == 0) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1262: FILE: tools/perf/util/trace-event-parse.c:1156:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1306: FILE: tools/perf/util/trace-event-parse.c:1200:
+static char *arg_eval (struct print_arg *arg);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1404: FILE: tools/perf/util/trace-event-parse.c:1298:
+
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1408: FILE: tools/perf/util/trace-event-parse.c:1302:
+static char *arg_eval (struct print_arg *arg)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1598: FILE: tools/perf/util/trace-event-parse.c:1492:
+	    (type == EVENT_DELIM && strcmp(token, "(") == 0)) {
+

WARNING:TYPO_SPELLING: 'contine' may be misspelled - perhaps 'continue'?
#1599: FILE: tools/perf/util/trace-event-parse.c:1493:
+		/* make this a typecast and contine */
 		                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'prevous' may be misspelled - perhaps 'previous'?
#1601: FILE: tools/perf/util/trace-event-parse.c:1495:
+		/* prevous must be an atom */
 		   ^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1612: FILE: tools/perf/util/trace-event-parse.c:1506:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1618: FILE: tools/perf/util/trace-event-parse.c:1512:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1928: FILE: tools/perf/util/trace-event-parse.c:1822:
+static unsigned long long eval_num_arg(void *data, int size,
+				   struct event *event, struct print_arg *arg)

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1956: FILE: tools/perf/util/trace-event-parse.c:1850:
+		return 0;
+		break;

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(flags)
#2050: FILE: tools/perf/util/trace-event-parse.c:1944:
+	for (i = 0; i < (int)(sizeof(flags)/sizeof(flags[0])); i++)

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2050: FILE: tools/perf/util/trace-event-parse.c:1944:
+	for (i = 0; i < (int)(sizeof(flags)/sizeof(flags[0])); i++)
 	                                   ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2188: FILE: tools/perf/util/trace-event-parse.c:2082:
+				/* fall through */

CHECK:BRACES: braces {} should be used on all arms of this statement
#2318: FILE: tools/perf/util/trace-event-parse.c:2212:
+		if (*ptr == '%') {
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2343: FILE: tools/perf/util/trace-event-parse.c:2237:
+				if (*(ptr+1) == 'F' ||
 				         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2344: FILE: tools/perf/util/trace-event-parse.c:2238:
+				    *(ptr+1) == 'f') {
 				         ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2349: FILE: tools/perf/util/trace-event-parse.c:2243:
+				/* fall through */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2375: FILE: tools/perf/util/trace-event-parse.c:2269:
+						if (show_func == 'F')

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2405: FILE: tools/perf/util/trace-event-parse.c:2299:
+
+			}

CHECK:BRACES: Unbalanced braces around else statement
#2406: FILE: tools/perf/util/trace-event-parse.c:2300:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2432: FILE: tools/perf/util/trace-event-parse.c:2326:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2756: FILE: tools/perf/util/trace-event-parse.c:2650:
+void print_event(int cpu, void *data, int size, unsigned long long nsecs,
+		  char *comm)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000083549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 15 warnings, 32 checks, 2905 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000083549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
