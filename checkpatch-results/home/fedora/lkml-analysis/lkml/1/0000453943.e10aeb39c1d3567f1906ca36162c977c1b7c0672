WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
And the empty cpuset should be removed (if it is flagged notify_on_release).

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: kernel/cpuset.c:2067:
+	int moved=0;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 178 exceeds 100 columns
#156: FILE: kernel/cpuset.c:2106:
+static void remove_tasks_in_empty_cpusets_in_subtree(const struct cpuset *cur, struct list_head *empty_list, struct path_list_element **ple_array, int *ple_availp, int ple_count)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#158: FILE: kernel/cpuset.c:2108:
+	int npids, ple_used=0;
 	                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: kernel/cpuset.c:2115:
+		remove_tasks_in_empty_cpusets_in_subtree(c, empty_list,
+					ple_array, ple_availp, ple_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: kernel/cpuset.c:2125:
+		if (cpus_empty(c->cpus_allowed) ||
+		   nodes_empty(c->mems_allowed)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: kernel/cpuset.c:2149:
+			if (cpuset_path(c, path,
+				PAGE_SIZE-sizeof(struct path_list_element)) < 0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#199: FILE: kernel/cpuset.c:2149:
+				PAGE_SIZE-sizeof(struct path_list_element)) < 0)
 				         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "path"
#201: FILE: kernel/cpuset.c:2151:
+			if (path != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: kernel/cpuset.c:2192:
+		if (cpus_empty(c->cpus_allowed) ||
+		   nodes_empty(c->mems_allowed))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#266: FILE: kernel/cpuset.c:2215:
+	int i, empty_count=0, ple_avail=0;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#266: FILE: kernel/cpuset.c:2215:
+	int i, empty_count=0, ple_avail=0;
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#268: FILE: kernel/cpuset.c:2217:
+	struct path_list_element *ple, **ple_array=NULL;
 	                                          ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#287: FILE: kernel/cpuset.c:2233:
+		ple_array = (struct path_list_element **)kmalloc

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#287: FILE: kernel/cpuset.c:2233:
+		ple_array = (struct path_list_element **)kmalloc
+		   (empty_count*sizeof(struct empty_cpuset_list *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#288: FILE: kernel/cpuset.c:2234:
+		   (empty_count*sizeof(struct empty_cpuset_list *), GFP_KERNEL);
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#291: FILE: kernel/cpuset.c:2237:
+		for (i=0; i<empty_count; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#291: FILE: kernel/cpuset.c:2237:
+		for (i=0; i<empty_count; i++) {
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#299: FILE: kernel/cpuset.c:2245:
+			ple_array[i]= ple;
 			            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: kernel/cpuset.c:2251:
+		remove_tasks_in_empty_cpusets_in_subtree(&top_cpuset,
+			&empty_cpuset_list, ple_array, &ple_avail, empty_count);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#325: FILE: kernel/cpuset.c:2271:
+		for (i=0; i<empty_count; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#325: FILE: kernel/cpuset.c:2271:
+		for (i=0; i<empty_count; i++) {
 		           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#325: FILE: kernel/cpuset.c:2271:
+		for (i=0; i<empty_count; i++) {
+			kfree(ple_array[i]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 5 warnings, 8 checks, 276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
