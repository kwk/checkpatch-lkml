WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#53: FILE: include/linux/net.h:169:
+^Issize_t ^I(*splice_read)(struct socket *sock,  loff_t *ppos,$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#54: FILE: include/linux/net.h:170:
+				       struct pipe_inode_info *pipe, size_t len, unsigned int flags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/linux/skbuff.h:1507:
+extern int             skb_splice_bits(struct sk_buff *skb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: include/linux/skbuff.h:1508:
+extern int             skb_splice_bits(struct sk_buff *skb,
+						unsigned int offset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/net/tcp.h:311:
+extern ssize_t			tcp_splice_read(struct socket *sk, loff_t *ppos,

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#83: FILE: include/net/tcp.h:312:
+					        struct pipe_inode_info *pipe, size_t len, unsigned int flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: include/net/tcp.h:312:
+^I^I^I^I^I        struct pipe_inode_info *pipe, size_t len, unsigned int flags);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/net/tcp.h:312:
+extern ssize_t			tcp_splice_read(struct socket *sk, loff_t *ppos,
+					        struct pipe_inode_info *pipe, size_t len, unsigned int flags);

CHECK:SPACING: No space is necessary after a cast
#107: FILE: net/core/skbuff.c:78:
+	struct sk_buff *skb = (struct sk_buff *) buf->private;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: net/core/skbuff.c:84:
+static void sock_pipe_buf_get(struct pipe_inode_info *pipe,
+				struct pipe_buffer *buf)

CHECK:SPACING: No space is necessary after a cast
#115: FILE: net/core/skbuff.c:86:
+	struct sk_buff *skb = (struct sk_buff *) buf->private;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#126: FILE: net/core/skbuff.c:97:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct pipe_buf_operations should normally be const
#128: FILE: net/core/skbuff.c:99:
+static struct pipe_buf_operations sock_pipe_buf_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#146: FILE: net/core/skbuff.c:1155:
+/*
+ * Callback from splice_to_pipe(), if we need to release some pages

CHECK:SPACING: No space is necessary after a cast
#151: FILE: net/core/skbuff.c:1160:
+	struct sk_buff *skb = (struct sk_buff *) spd->partial[i].private;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#157: FILE: net/core/skbuff.c:1166:
+/*
+ * Fill page/offset/length into spd, if it can hold more pages.

CHECK:SPACING: No space is necessary after a cast
#169: FILE: net/core/skbuff.c:1178:
+	spd->partial[spd->nr_pages].private = (unsigned long) skb_get(skb);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#175: FILE: net/core/skbuff.c:1184:
+/*
+ * Map linear and fragment data from the skb to spd. Returns number of

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#192: FILE: net/core/skbuff.c:1201:
+	/*
+	 * if the offset is greater than the linear part, go directly to

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#202: FILE: net/core/skbuff.c:1211:
+	/*
+	 * first map the linear region into the pages/partial map, skipping

CHECK:SPACING: No space is necessary after a cast
#209: FILE: net/core/skbuff.c:1218:
+		poff = (unsigned long) p & (PAGE_SIZE - 1);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#228: FILE: net/core/skbuff.c:1237:
+		/*
+		 * just jump directly to update and return, no point

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#238: FILE: net/core/skbuff.c:1247:
+	/*
+	 * then map the fragments

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#278: FILE: net/core/skbuff.c:1287:
+/*
+ * Map data from the skb to a pipe. Should handle both the linear part,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#299: FILE: net/core/skbuff.c:1308:
+	/*
+	 * I'd love to avoid the clone here, but tcp_read_sock()

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#308: FILE: net/core/skbuff.c:1317:
+	/*
+	 * __skb_splice_bits() only fails if the output has no room left,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#317: FILE: net/core/skbuff.c:1326:
+	/*
+	 * now see if we have a frag_list to map

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#330: FILE: net/core/skbuff.c:1339:
+	/*
+	 * drop our reference to the clone, the pipe consumption will

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#444: FILE: net/ipv4/tcp.c:562:
+	/*
+	 * We can't seek on a socket input

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#449: FILE: net/ipv4/tcp.c:567:
+	ret = spliced = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: net/ipv4/tcp.c:574:
+		if (ret < 0)
[...]
+		else if (!ret) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#475: FILE: net/ipv4/tcp.c:593:
+				/*
+				 * This occurs when user tries to read

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: net/socket.c:115:
+^I^I^I        struct pipe_inode_info *pipe, size_t len,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: net/socket.c:115:
+static ssize_t sock_splice_read(struct file *file, loff_t *ppos,
+			        struct pipe_inode_info *pipe, size_t len,

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: net/socket.c:699:
+^I^I^I        struct pipe_inode_info *pipe, size_t len,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: net/socket.c:699:
+static ssize_t sock_splice_read(struct file *file, loff_t *ppos,
+			        struct pipe_inode_info *pipe, size_t len,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 18 warnings, 15 checks, 481 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
