WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
Indeed.  I didn't say you shouldn't include one header file from another, just

WARNING:TYPO_SPELLING: 'hiearchy' may be misspelled - perhaps 'hierarchy'?
#52: 
> method include file hiearchy: for example mm_types.h and 
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#264: FILE: arch/x86/kernel/cpu/vmware.c:27:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1159: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1164: FILE: arch/x86/include/asm/apic-defs.h:1:
+#ifndef _ASM_X86_APIC_DEFS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1244: FILE: arch/x86/include/asm/mm_types.h:1:
+#ifndef _ASM_X86_MM_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1249: FILE: arch/x86/include/asm/mm_types.h:6:
+typedef struct {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1262: FILE: arch/x86/include/asm/percpu-defs.h:1:
+#ifndef _ASM_X86_PERCPU_DEFS_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1280: FILE: arch/x86/include/asm/percpu-defs.h:19:
+#define DECLARE_INIT_PER_CPU(var) \
+       extern typeof(per_cpu_var(var)) init_per_cpu_var(var)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#1280: FILE: arch/x86/include/asm/percpu-defs.h:19:
+#define DECLARE_INIT_PER_CPU(var) \
+       extern typeof(per_cpu_var(var)) init_per_cpu_var(var)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1281: FILE: arch/x86/include/asm/percpu-defs.h:20:
+       extern typeof(per_cpu_var(var)) init_per_cpu_var(var)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_initvalue' - possible side-effects?
#1291: FILE: arch/x86/include/asm/percpu-defs.h:30:
+#define	DEFINE_EARLY_PER_CPU(_type, _name, _initvalue)			\
+	DEFINE_PER_CPU(_type, _name) = _initvalue;			\
+	__typeof__(_type) _name##_early_map[NR_CPUS] __initdata =	\
+				{ [0 ... NR_CPUS-1] = _initvalue };	\
+	__typeof__(_type) *_name##_early_ptr __refdata = _name##_early_map

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1294: FILE: arch/x86/include/asm/percpu-defs.h:33:
+				{ [0 ... NR_CPUS-1] = _initvalue };	\
 				                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1307: FILE: arch/x86/include/asm/percpu-defs.h:46:
+#define^Iearly_per_cpu(_name, _cpu) ^I^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1307: FILE: arch/x86/include/asm/percpu-defs.h:46:
+#define	early_per_cpu(_name, _cpu) 				\
+	*(early_per_cpu_ptr(_name) ?				\
+		&early_per_cpu_ptr(_name)[_cpu] :		\
+		&per_cpu(_name, _cpu))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#1307: FILE: arch/x86/include/asm/percpu-defs.h:46:
+#define	early_per_cpu(_name, _cpu) 				\
+	*(early_per_cpu_ptr(_name) ?				\
+		&early_per_cpu_ptr(_name)[_cpu] :		\
+		&per_cpu(_name, _cpu))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_cpu' - possible side-effects?
#1307: FILE: arch/x86/include/asm/percpu-defs.h:46:
+#define	early_per_cpu(_name, _cpu) 				\
+	*(early_per_cpu_ptr(_name) ?				\
+		&early_per_cpu_ptr(_name)[_cpu] :		\
+		&per_cpu(_name, _cpu))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1347: FILE: arch/x86/include/asm/percpu.h:41:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1431: FILE: arch/x86/include/asm/prefetch.h:1:
+#ifndef _ASM_X86_PREFETCH_H

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_PREFETCHW' is wrong - use Kconfig variables or standard guards instead
#1436: FILE: arch/x86/include/asm/prefetch.h:6:
+#define ARCH_HAS_PREFETCHW

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SPINLOCK_PREFETCH' is wrong - use Kconfig variables or standard guards instead
#1437: FILE: arch/x86/include/asm/prefetch.h:7:
+#define ARCH_HAS_SPINLOCK_PREFETCH

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_PREFETCH' is wrong - use Kconfig variables or standard guards instead
#1441: FILE: arch/x86/include/asm/prefetch.h:11:
+# define ARCH_HAS_PREFETCH

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prefetchw', this function's name, in a string
#1468: FILE: arch/x86/include/asm/prefetch.h:38:
+			  "prefetchw (%1)",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1478: FILE: arch/x86/include/asm/prefetch.h:48:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1629: FILE: arch/x86/include/asm/thread_info-defs.h:1:
+/* thread_info.h: low-level thread information

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1657: FILE: arch/x86/include/asm/thread_info-defs.h:29:
+	int			preempt_count;	/* 0 => preemptable,
 	   			              	        ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1658: FILE: arch/x86/include/asm/thread_info-defs.h:30:
+	int			preempt_count;	/* 0 => preemptable,
+						   <0 => BUG */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1658: FILE: arch/x86/include/asm/thread_info-defs.h:30:
+						   <0 => BUG */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1664: FILE: arch/x86/include/asm/thread_info-defs.h:36:
+	unsigned long           previous_esp;   /* ESP of the previous stack in
+						   case of nested (IRQ) stacks

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#1671: FILE: arch/x86/include/asm/thread_info-defs.h:43:
+#define INIT_THREAD_INFO(tsk)			\
+{						\
+	.task		= &tsk,			\
+	.exec_domain	= &default_exec_domain,	\
+	.flags		= 0,			\
+	.cpu		= 0,			\
+	.preempt_count	= 1,			\
+	.addr_limit	= KERNEL_DS,		\
+	.restart_block = {			\
+		.fn = do_no_restart_syscall,	\
+	},					\
+}

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1705: FILE: arch/x86/include/asm/thread_info-defs.h:77:
+#define TIF_SINGLESTEP		4	/* reenable singlestep on user return*/
                       		 	   ^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1724: FILE: arch/x86/include/asm/thread_info-defs.h:96:
+#define _TIF_SYSCALL_TRACE	(1 << TIF_SYSCALL_TRACE)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1725: FILE: arch/x86/include/asm/thread_info-defs.h:97:
+#define _TIF_NOTIFY_RESUME	(1 << TIF_NOTIFY_RESUME)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1726: FILE: arch/x86/include/asm/thread_info-defs.h:98:
+#define _TIF_SIGPENDING		(1 << TIF_SIGPENDING)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1727: FILE: arch/x86/include/asm/thread_info-defs.h:99:
+#define _TIF_SINGLESTEP		(1 << TIF_SINGLESTEP)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1728: FILE: arch/x86/include/asm/thread_info-defs.h:100:
+#define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1729: FILE: arch/x86/include/asm/thread_info-defs.h:101:
+#define _TIF_IRET		(1 << TIF_IRET)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1730: FILE: arch/x86/include/asm/thread_info-defs.h:102:
+#define _TIF_SYSCALL_EMU	(1 << TIF_SYSCALL_EMU)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1731: FILE: arch/x86/include/asm/thread_info-defs.h:103:
+#define _TIF_SYSCALL_AUDIT	(1 << TIF_SYSCALL_AUDIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1732: FILE: arch/x86/include/asm/thread_info-defs.h:104:
+#define _TIF_SECCOMP		(1 << TIF_SECCOMP)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1733: FILE: arch/x86/include/asm/thread_info-defs.h:105:
+#define _TIF_MCE_NOTIFY		(1 << TIF_MCE_NOTIFY)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1734: FILE: arch/x86/include/asm/thread_info-defs.h:106:
+#define _TIF_NOTSC		(1 << TIF_NOTSC)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1735: FILE: arch/x86/include/asm/thread_info-defs.h:107:
+#define _TIF_IA32		(1 << TIF_IA32)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1736: FILE: arch/x86/include/asm/thread_info-defs.h:108:
+#define _TIF_FORK		(1 << TIF_FORK)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1737: FILE: arch/x86/include/asm/thread_info-defs.h:109:
+#define _TIF_ABI_PENDING	(1 << TIF_ABI_PENDING)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1738: FILE: arch/x86/include/asm/thread_info-defs.h:110:
+#define _TIF_DEBUG		(1 << TIF_DEBUG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1739: FILE: arch/x86/include/asm/thread_info-defs.h:111:
+#define _TIF_IO_BITMAP		(1 << TIF_IO_BITMAP)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1740: FILE: arch/x86/include/asm/thread_info-defs.h:112:
+#define _TIF_FREEZE		(1 << TIF_FREEZE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1741: FILE: arch/x86/include/asm/thread_info-defs.h:113:
+#define _TIF_FORCED_TF		(1 << TIF_FORCED_TF)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1742: FILE: arch/x86/include/asm/thread_info-defs.h:114:
+#define _TIF_DEBUGCTLMSR	(1 << TIF_DEBUGCTLMSR)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1743: FILE: arch/x86/include/asm/thread_info-defs.h:115:
+#define _TIF_DS_AREA_MSR	(1 << TIF_DS_AREA_MSR)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1744: FILE: arch/x86/include/asm/thread_info-defs.h:116:
+#define _TIF_SYSCALL_FTRACE	(1 << TIF_SYSCALL_FTRACE)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1759: FILE: arch/x86/include/asm/thread_info-defs.h:131:
+	 ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|			\
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1759: FILE: arch/x86/include/asm/thread_info-defs.h:131:
+	 ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|			\
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1760: FILE: arch/x86/include/asm/thread_info-defs.h:132:
+	   _TIF_SINGLESTEP|_TIF_SECCOMP|_TIF_SYSCALL_EMU))
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1760: FILE: arch/x86/include/asm/thread_info-defs.h:132:
+	   _TIF_SINGLESTEP|_TIF_SECCOMP|_TIF_SYSCALL_EMU))
 	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1767: FILE: arch/x86/include/asm/thread_info-defs.h:139:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_NOTIFY_RESUME)
 	                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1767: FILE: arch/x86/include/asm/thread_info-defs.h:139:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_NOTIFY_RESUME)
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1771: FILE: arch/x86/include/asm/thread_info-defs.h:143:
+	(_TIF_IO_BITMAP|_TIF_DEBUGCTLMSR|_TIF_DS_AREA_MSR|_TIF_NOTSC)
 	               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1771: FILE: arch/x86/include/asm/thread_info-defs.h:143:
+	(_TIF_IO_BITMAP|_TIF_DEBUGCTLMSR|_TIF_DS_AREA_MSR|_TIF_NOTSC)
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1771: FILE: arch/x86/include/asm/thread_info-defs.h:143:
+	(_TIF_IO_BITMAP|_TIF_DEBUGCTLMSR|_TIF_DS_AREA_MSR|_TIF_NOTSC)
 	                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1774: FILE: arch/x86/include/asm/thread_info-defs.h:146:
+#define _TIF_WORK_CTXSW_NEXT (_TIF_WORK_CTXSW|_TIF_DEBUG)
                                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1786: FILE: arch/x86/include/asm/thread_info-defs.h:158:
+#define TS_USEDFPU		0x0001	/* FPU was used by this task
+					   this quantum (SMP) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1786: FILE: arch/x86/include/asm/thread_info-defs.h:158:
+					   this quantum (SMP) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1789: FILE: arch/x86/include/asm/thread_info-defs.h:161:
+#define TS_POLLING		0x0004	/* true if in idle loop
+					   and not sleeping */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1789: FILE: arch/x86/include/asm/thread_info-defs.h:161:
+					   and not sleeping */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2067: FILE: include/asm-generic/percpu-defs.h:1:
+#ifndef _ASM_GENERIC_PERCPU_DEFS_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2070: FILE: include/asm-generic/percpu-defs.h:4:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2161: FILE: include/linux/completion-defs.h:1:
+#ifndef __LINUX_COMPLETION_DEFS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2304: FILE: include/linux/percpu-alloc.h:1:
+#ifndef __LINUX_PERCPU_ALLOC_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2314: FILE: include/linux/percpu-alloc.h:11:
+extern void *__alloc_reserved_percpu(size_t size, size_t align);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2318: FILE: include/linux/percpu-alloc.h:15:
+extern void *__alloc_percpu(size_t size, size_t align);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2319: FILE: include/linux/percpu-alloc.h:16:
+extern void free_percpu(void *__pdata);

CHECK:SPACING: No space is necessary after a cast
#2341: FILE: include/linux/percpu-alloc.h:38:
+#define alloc_percpu(type)	(type *)__alloc_percpu(sizeof(type), \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2341: FILE: include/linux/percpu-alloc.h:38:
+#define alloc_percpu(type)	(type *)__alloc_percpu(sizeof(type), \
+						       __alignof__(type))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2344: FILE: include/linux/percpu-alloc.h:41:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2352: FILE: include/linux/percpu-defs.h:1:
+#ifndef _LINUX_PERCPU_DEFS_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2373: FILE: include/linux/percpu-defs.h:22:
+#define DECLARE_PER_CPU_SECTION(type, name, section)			\
+	extern								\
+	__attribute__((__section__(PER_CPU_BASE_SECTION section)))	\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(PER_CPU_BASE_SECTION section) over __attribute__((__section__(PER_CPU_BASE_SECTION section)))
#2375: FILE: include/linux/percpu-defs.h:24:
+	__attribute__((__section__(PER_CPU_BASE_SECTION section)))	\

CHECK:SPACING: No space is necessary after a cast
#2376: FILE: include/linux/percpu-defs.h:25:
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2378: FILE: include/linux/percpu-defs.h:27:
+#define DEFINE_PER_CPU_SECTION(type, name, section)			\
+	__attribute__((__section__(PER_CPU_BASE_SECTION section)))	\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(PER_CPU_BASE_SECTION section) over __attribute__((__section__(PER_CPU_BASE_SECTION section)))
#2379: FILE: include/linux/percpu-defs.h:28:
+	__attribute__((__section__(PER_CPU_BASE_SECTION section)))	\

CHECK:SPACING: No space is necessary after a cast
#2380: FILE: include/linux/percpu-defs.h:29:
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2427: FILE: include/linux/percpu-defs.h:76:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2429: FILE: include/linux/percpu-defs.h:78:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2570: FILE: include/linux/seqlock-defs.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2582: FILE: include/linux/seqlock-defs.h:13:
+ * ^Ido {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2584: FILE: include/linux/seqlock-defs.h:15:
+ * ^I...$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2601: FILE: include/linux/seqlock-defs.h:32:
+typedef struct {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2602: FILE: include/linux/seqlock-defs.h:33:
+	unsigned sequence;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2603: FILE: include/linux/seqlock-defs.h:34:
+	spinlock_t lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2676: FILE: include/linux/thread_info-defs.h:1:
+/* Common low-level thread information definitions

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct restart_block *' should also have an identifier name
#2694: FILE: include/linux/thread_info-defs.h:19:
+	long (*fn)(struct restart_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2795: FILE: include/linux/wait-defs.h:1:
+#ifndef _LINUX_WAIT_DEFS_H

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2802: FILE: include/linux/wait-defs.h:8:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2805: FILE: include/linux/wait-defs.h:11:
+};
+typedef struct __wait_queue_head wait_queue_head_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2805: FILE: include/linux/wait-defs.h:11:
+typedef struct __wait_queue_head wait_queue_head_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2807: FILE: include/linux/wait-defs.h:13:
+typedef struct __wait_queue wait_queue_t;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2809: FILE: include/linux/wait-defs.h:15:
+typedef int (*wait_queue_func_t)(wait_queue_t *wait, unsigned mode, int sync, void *key);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2863: FILE: include/linux/wait.h:43:
+extern int default_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2863: FILE: include/linux/wait.h:43:
+extern int default_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139007.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 40 warnings, 53 checks, 2070 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139007.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
