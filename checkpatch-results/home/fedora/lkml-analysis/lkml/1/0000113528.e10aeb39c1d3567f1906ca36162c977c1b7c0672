WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: arch/score/include/asm/elf.h:1:
+#ifndef _ASM_SCORE_ELF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#84: FILE: arch/score/include/asm/elf.h:33:
+typedef unsigned long elf_greg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#85: FILE: arch/score/include/asm/elf.h:34:
+typedef elf_greg_t elf_gregset_t[ELF_NGREG];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#87: FILE: arch/score/include/asm/elf.h:36:
+typedef double elf_fpreg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#88: FILE: arch/score/include/asm/elf.h:37:
+typedef elf_fpreg_t elf_fpregset_t[ELF_NFPREG];

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#103: FILE: arch/score/include/asm/elf.h:52:
+#define SET_PERSONALITY(ex)                                    \
+do {                                                           \
+       set_personality(PER_LINUX);                             \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 7)
#104: FILE: arch/score/include/asm/elf.h:53:
+do {                                                           \
+       set_personality(PER_LINUX);                             \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: arch/score/include/asm/elf.h:54:
+       set_personality(PER_LINUX);                             \$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#115: FILE: arch/score/include/asm/elf.h:64:
+/* This yields a mask that user programs can use to figure out what
+   instruction set this cpu supports.  This could be done in userspace,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#116: FILE: arch/score/include/asm/elf.h:65:
+   but it's not easy, and we've already done it here.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#121: FILE: arch/score/include/asm/elf.h:70:
+/* This yields a string that ld.so will use to load implementation
+   specific libraries for optimization.  This is more specific in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: arch/score/include/asm/elf.h:74:
+   but that could change... */

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#129: FILE: arch/score/include/asm/elf.h:78:
+#define ELF_PLAT_INIT(_r, load_addr)                                   \
+do {                                                                   \
+       _r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;      \
+       _r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;      \
+       _r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;   \
+       _r->regs[13] = _r->regs[14] = _r->regs[15] = _r->regs[16] = 0;  \
+       _r->regs[17] = _r->regs[18] = _r->regs[19] = _r->regs[20] = 0;  \
+       _r->regs[21] = _r->regs[22] = _r->regs[23] = _r->regs[24] = 0;  \
+       _r->regs[25] = _r->regs[26] = _r->regs[27] = _r->regs[28] = 0;  \
+       _r->regs[30] = _r->regs[31] = 0;                                \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#129: FILE: arch/score/include/asm/elf.h:78:
+#define ELF_PLAT_INIT(_r, load_addr)                                   \
+do {                                                                   \
+       _r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;      \
+       _r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;      \
+       _r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;   \
+       _r->regs[13] = _r->regs[14] = _r->regs[15] = _r->regs[16] = 0;  \
+       _r->regs[17] = _r->regs[18] = _r->regs[19] = _r->regs[20] = 0;  \
+       _r->regs[21] = _r->regs[22] = _r->regs[23] = _r->regs[24] = 0;  \
+       _r->regs[25] = _r->regs[26] = _r->regs[27] = _r->regs[28] = 0;  \
+       _r->regs[30] = _r->regs[31] = 0;                                \
+} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 7)
#130: FILE: arch/score/include/asm/elf.h:79:
+do {                                                                   \
+       _r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: arch/score/include/asm/elf.h:80:
+       _r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;      \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#131: FILE: arch/score/include/asm/elf.h:80:
+       _r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;      \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/score/include/asm/elf.h:81:
+       _r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;      \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#132: FILE: arch/score/include/asm/elf.h:81:
+       _r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/score/include/asm/elf.h:82:
+       _r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;   \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#133: FILE: arch/score/include/asm/elf.h:82:
+       _r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;   \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/score/include/asm/elf.h:83:
+       _r->regs[13] = _r->regs[14] = _r->regs[15] = _r->regs[16] = 0;  \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#134: FILE: arch/score/include/asm/elf.h:83:
+       _r->regs[13] = _r->regs[14] = _r->regs[15] = _r->regs[16] = 0;  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/score/include/asm/elf.h:84:
+       _r->regs[17] = _r->regs[18] = _r->regs[19] = _r->regs[20] = 0;  \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#135: FILE: arch/score/include/asm/elf.h:84:
+       _r->regs[17] = _r->regs[18] = _r->regs[19] = _r->regs[20] = 0;  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/score/include/asm/elf.h:85:
+       _r->regs[21] = _r->regs[22] = _r->regs[23] = _r->regs[24] = 0;  \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#136: FILE: arch/score/include/asm/elf.h:85:
+       _r->regs[21] = _r->regs[22] = _r->regs[23] = _r->regs[24] = 0;  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: arch/score/include/asm/elf.h:86:
+       _r->regs[25] = _r->regs[26] = _r->regs[27] = _r->regs[28] = 0;  \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#137: FILE: arch/score/include/asm/elf.h:86:
+       _r->regs[25] = _r->regs[26] = _r->regs[27] = _r->regs[28] = 0;  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: arch/score/include/asm/elf.h:87:
+       _r->regs[30] = _r->regs[31] = 0;                                \$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#138: FILE: arch/score/include/asm/elf.h:87:
+       _r->regs[30] = _r->regs[31] = 0;                                \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: arch/score/include/asm/elf.h:90:
+/* This is the location that an ET_DYN program is loaded if exec'ed. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#142: FILE: arch/score/include/asm/elf.h:90:
Typical

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: arch/score/include/asm/elf.h:91:
+   use of this is to invoke "./ld.so someprog" to test out a new version $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#143: FILE: arch/score/include/asm/elf.h:91:
+/* This is the location that an ET_DYN program is loaded if exec'ed. 
+   use of this is to invoke "./ld.so someprog" to test out a new version 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: arch/score/include/asm/elf.h:92:
+   the loader.  We need to make sure that it is out of the way of the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#147: FILE: arch/score/include/asm/elf.h:93:
+   that it will "exec", and that there is sufficient room for the brk. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: arch/score/include/asm/emergency-restart.h:1:
+#ifndef _ASM_SCORE_EMERGENCY_RESTART_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#174: FILE: arch/score/include/asm/errno.h:1:
+#ifndef _ASM_SCORE_ERRNO_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 26 warnings, 10 checks, 115 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
