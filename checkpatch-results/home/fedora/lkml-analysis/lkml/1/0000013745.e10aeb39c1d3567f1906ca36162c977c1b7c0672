WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: arch/x86/Kconfig:571:
+config NO_BOOTMEM
+	default y
+	bool "Disable Bootmem code"
+	depends on X86_64
+	---help---
+	  use early_res directly instead of bootmem before slab is ready.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: arch/x86/include/asm/e820.h:122:
+u64 find_early_area(u64 ei_start, u64 ei_last, u64 start, u64 end,
+			 u64 size, u64 align);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#140: FILE: arch/x86/kernel/e820.c:1028:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#141: FILE: arch/x86/kernel/e820.c:1029:
+	printk(KERN_INFO "Subtract (%d early reservations)\n", count);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#145: FILE: arch/x86/kernel/e820.c:1033:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#146: FILE: arch/x86/kernel/e820.c:1034:
+		printk(KERN_INFO "  #%d [%010llx - %010llx] %15s", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: arch/x86/kernel/e820.c:1035:
+		printk(KERN_INFO "  #%d [%010llx - %010llx] %15s", i,
+			r->start, r->end, r->name);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#152: FILE: arch/x86/kernel/e820.c:1040:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#153: FILE: arch/x86/kernel/e820.c:1041:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#153: FILE: arch/x86/kernel/e820.c:1041:
+			printk(KERN_CONT "\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#157: FILE: arch/x86/kernel/e820.c:1045:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#158: FILE: arch/x86/kernel/e820.c:1046:
+		printk(KERN_CONT " subtract pfn [%010llx - %010llx]\n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#158: FILE: arch/x86/kernel/e820.c:1046:
+		printk(KERN_CONT " subtract pfn [%010llx - %010llx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: arch/x86/kernel/e820.c:1047:
+		printk(KERN_CONT " subtract pfn [%010llx - %010llx]\n",
+			final_start, final_end);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#164: FILE: arch/x86/kernel/e820.c:1052:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: arch/x86/kernel/e820.c:1092:
+		memset(&early_res[0], 0,
+			 sizeof(struct early_res) * max_early_res);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: arch/x86/kernel/e820.c:1198:
+u64 __init find_early_area(u64 ei_start, u64 ei_last, u64 start, u64 end,
+			 u64 size, u64 align)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#241: FILE: arch/x86/kernel/e820.c:1207:
+	while (bad_addr(&addr, size, align) && addr+size <= ei_last)
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: arch/x86/kernel/e820.c:1239:
+		addr = find_early_area(ei_start, ei_last, start, end,
+					 size, align);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#358: FILE: arch/x86/mm/numa_64.c:221:
+	printk(KERN_INFO "Initmem setup node %d %016lx-%016lx\n", nodeid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: include/linux/bootmem.h:91:
+void *__alloc_bootmem_node_high(pg_data_t *pgdat,
+				  unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: include/linux/mm.h:1054:
+int add_from_early_node_map(struct range *range, int az,
+				   int nr_range, int nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: include/linux/mm.h:1056:
+void *__alloc_memory_core_early(int nodeid, u64 size, u64 align,
+				 u64 goal, u64 limit);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#516: FILE: mm/bootmem.c:183:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#517: FILE: mm/bootmem.c:184:
+		printk(KERN_DEBUG " %lx - %lx\n", start, end);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#525: FILE: mm/bootmem.c:192:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#526: FILE: mm/bootmem.c:193:
+	printk(KERN_DEBUG " %lx %lx - %lx %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: mm/bootmem.c:194:
+	printk(KERN_DEBUG " %lx %lx - %lx %lx\n",
+		 start, start_aligned, end_aligned, end);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#612: FILE: mm/bootmem.c:431:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#613: FILE: mm/bootmem.c:432:
+	printk(KERN_DEBUG "free %lx %lx\n", physaddr, size);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#633: FILE: mm/bootmem.c:459:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#634: FILE: mm/bootmem.c:460:
+	printk(KERN_DEBUG "free %lx %lx\n", addr, size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: mm/bootmem.c:847:
+void * __init __alloc_bootmem_node_high(pg_data_t *pgdat, unsigned long size,
+				   unsigned long align, unsigned long goal)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: mm/bootmem.c:869:
+		ptr = alloc_bootmem_core(pgdat->bdata, size, align,
+						 new_goal, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: mm/bootmem.c:924:
+	ptr =  __alloc_memory_core_early(pgdat->node_id, size, align,
+						 goal, -1ULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: mm/page_alloc.c:3469:
+		addr = find_early_area(ei_start, ei_last,
+					 goal, limit, size, align);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#915: FILE: mm/page_alloc.c:3474:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#916: FILE: mm/page_alloc.c:3475:
+		printk(KERN_DEBUG "alloc (nid=%d %llx - %llx) (%llx - %llx) %llx %llx => %llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: mm/page_alloc.c:3476:
+		printk(KERN_DEBUG "alloc (nid=%d %llx - %llx) (%llx - %llx) %llx %llx => %llx\n",
+				nid,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#931: FILE: mm/page_alloc.c:3490:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: mm/page_alloc.c:4525:
+ .bdata = &bootmem_node_data[0]$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: mm/page_alloc.c:4527:
+ };$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013745.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 18 checks, 818 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013745.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
