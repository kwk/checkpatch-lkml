WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: block/kiothrottled.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#101: FILE: block/kiothrottled.c:16:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#146: FILE: block/kiothrottled.c:61:
+	struct rb_node **new = &(root->rb_node), *parent = NULL;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: block/kiothrottled.c:65:
+		struct iot_bio *this = container_of(*new, struct iot_bio, node);
+		parent = *new;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: block/kiothrottled.c:89:
+		pr_debug("%s: dispatching element: %p (%lu)\n",
+				__func__, data->bio, data->deadline);

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#186: FILE: block/kiothrottled.c:101:
+ * @bio:	the bio structure that contains the IO request's informations
         	                                                 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: block/kiothrottled.c:112:
+	BUG_ON(!iot);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: block/kiothrottled.c:198:
+			pr_debug("%s: dispatching request: %p (%lu)\n",
+					__func__, data->bio, data->deadline);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#302: FILE: block/kiothrottled.c:217:
+	printk(KERN_INFO "%s: stopping kiothrottled\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#304: FILE: block/kiothrottled.c:219:
+	printk(KERN_INFO "%s: flushing pending requests\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#316: FILE: block/kiothrottled.c:231:
+	printk(KERN_INFO "%s: starting kiothrottled\n", __func__);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#338: FILE: block/kiothrottled.c:253:
+static ssize_t kiothrottle_write(struct file *filp, const char __user *buffer,
                                               ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: block/kiothrottled.c:254:
+static ssize_t kiothrottle_write(struct file *filp, const char __user *buffer,
+				size_t count, loff_t *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: block/kiothrottled.c:282:
+		seq_printf(m, "%p %lu %lu %li\n", data->bio,
+				data->deadline, now, delta_t);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#375: FILE: block/kiothrottled.c:290:
+static int kiothrottle_open(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#377: FILE: block/kiothrottled.c:292:
+	return single_open(filp, kiothrottle_show, NULL);
 	                   ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#412: FILE: block/kiothrottled.c:327:
+	printk(KERN_INFO "%s: initialized\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#421: FILE: block/kiothrottled.c:336:
+	printk(KERN_INFO "%s: unloaded\n", __func__);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000130523.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 5 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000130523.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
