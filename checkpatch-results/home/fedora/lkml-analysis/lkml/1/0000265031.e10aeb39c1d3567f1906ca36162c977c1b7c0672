WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#25: 
Subject: [PATCH] x86: seperate funcs from setup_64 to cpu common_64.c
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#513: FILE: arch/x86/kernel/cpu/common_64.c:1:
+#include <linux/init.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#520: FILE: arch/x86/kernel/cpu/common_64.c:8:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#523: FILE: arch/x86/kernel/cpu/common_64.c:11:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#524: FILE: arch/x86/kernel/cpu/common_64.c:12:
+#include <asm/mmu_context.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#542: FILE: arch/x86/kernel/cpu/common_64.c:30:
+/* The TLS descriptors are currently at a different place compared to i386.
+   Hopefully nobody expects them at a fixed place (Wine?) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#542: FILE: arch/x86/kernel/cpu/common_64.c:30:
+   Hopefully nobody expects them at a fixed place (Wine?) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#556: FILE: arch/x86/kernel/cpu/common_64.c:44:
+ *  * it's on the real one. */

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after default_cpu
#573: FILE: arch/x86/kernel/cpu/common_64.c:61:
+static struct cpu_dev __cpuinitdata default_cpu = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#577: FILE: arch/x86/kernel/cpu/common_64.c:65:
+};
+static struct cpu_dev *this_cpu __cpuinitdata = &default_cpu;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#586: FILE: arch/x86/kernel/cpu/common_64.c:74:
+	v = (unsigned int *) c->x86_model_id;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#594: FILE: arch/x86/kernel/cpu/common_64.c:82:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#603: FILE: arch/x86/kernel/cpu/common_64.c:91:
+		printk(KERN_INFO "CPU: L1 I Cache: %dK (%d bytes/line), "

WARNING:SPLIT_STRING: quoted string split across lines
#604: FILE: arch/x86/kernel/cpu/common_64.c:92:
+		printk(KERN_INFO "CPU: L1 I Cache: %dK (%d bytes/line), "
+		       "D cache %dK (%d bytes/line)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#605: FILE: arch/x86/kernel/cpu/common_64.c:93:
+		       edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 		          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#605: FILE: arch/x86/kernel/cpu/common_64.c:93:
+		       edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 		                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#605: FILE: arch/x86/kernel/cpu/common_64.c:93:
+		       edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 		                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#605: FILE: arch/x86/kernel/cpu/common_64.c:93:
+		       edx>>24, edx&0xFF, ecx>>24, ecx&0xFF);
 		                                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#606: FILE: arch/x86/kernel/cpu/common_64.c:94:
+		c->x86_cache_size = (ecx>>24) + (edx>>24);
 		                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#606: FILE: arch/x86/kernel/cpu/common_64.c:94:
+		c->x86_cache_size = (ecx>>24) + (edx>>24);
 		                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#617: FILE: arch/x86/kernel/cpu/common_64.c:105:
+		printk(KERN_INFO "CPU: L2 Cache: %dK (%d bytes/line)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: arch/x86/kernel/cpu/common_64.c:106:
+		printk(KERN_INFO "CPU: L2 Cache: %dK (%d bytes/line)\n",
+		c->x86_cache_size, ecx & 0xFF);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#635: FILE: arch/x86/kernel/cpu/common_64.c:123:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#644: FILE: arch/x86/kernel/cpu/common_64.c:132:
+		printk(KERN_INFO  "CPU: Hyper-Threading is disabled\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#646: FILE: arch/x86/kernel/cpu/common_64.c:134:
+	} else if (smp_num_siblings > 1) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#647: FILE: arch/x86/kernel/cpu/common_64.c:135:
+		if (smp_num_siblings > NR_CPUS) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#648: FILE: arch/x86/kernel/cpu/common_64.c:136:
+			printk(KERN_WARNING "CPU: Unsupported number of "

WARNING:SPLIT_STRING: quoted string split across lines
#649: FILE: arch/x86/kernel/cpu/common_64.c:137:
+			printk(KERN_WARNING "CPU: Unsupported number of "
+			       "siblings %d", smp_num_siblings);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#668: FILE: arch/x86/kernel/cpu/common_64.c:156:
+		printk(KERN_INFO  "CPU: Physical Processor ID: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#670: FILE: arch/x86/kernel/cpu/common_64.c:158:
+		printk(KERN_INFO  "CPU: Processor Core ID: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#696: FILE: arch/x86/kernel/cpu/common_64.c:184:
+		printk(KERN_ERR "CPU: Vendor unknown, using generic init.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#697: FILE: arch/x86/kernel/cpu/common_64.c:185:
+		printk(KERN_ERR "CPU: Your system may be unstable.\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: arch/x86/kernel/cpu/common_64.c:192:
+	int i,j;
 	     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#707: FILE: arch/x86/kernel/cpu/common_64.c:195:
+	printk("KERNEL supported cpus:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#715: FILE: arch/x86/kernel/cpu/common_64.c:203:
+			printk("  %s %s\n", cpu_devx->c_vendor,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: arch/x86/kernel/cpu/common_64.c:204:
+			printk("  %s %s\n", cpu_devx->c_vendor,
+				cpu_devx->c_ident[j]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#725: FILE: arch/x86/kernel/cpu/common_64.c:213:
+        struct cpu_vendor_dev *cvdev;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: arch/x86/kernel/cpu/common_64.c:213:
+        struct cpu_vendor_dev *cvdev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: arch/x86/kernel/cpu/common_64.c:215:
+        for (cvdev = __x86cpuvendor_start ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: arch/x86/kernel/cpu/common_64.c:215:
+        for (cvdev = __x86cpuvendor_start ;$

WARNING:SPACING: space prohibited before semicolon
#727: FILE: arch/x86/kernel/cpu/common_64.c:215:
+        for (cvdev = __x86cpuvendor_start ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#728: FILE: arch/x86/kernel/cpu/common_64.c:216:
+             cvdev < __x86cpuvendor_end   ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: arch/x86/kernel/cpu/common_64.c:216:
+             cvdev < __x86cpuvendor_end   ;$

WARNING:SPACING: space prohibited before semicolon
#728: FILE: arch/x86/kernel/cpu/common_64.c:216:
+             cvdev < __x86cpuvendor_end   ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#729: FILE: arch/x86/kernel/cpu/common_64.c:217:
+             cvdev++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: arch/x86/kernel/cpu/common_64.c:217:
+             cvdev++)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: arch/x86/kernel/cpu/common_64.c:218:
+                cpu_devs[cvdev->vendor] = cvdev->cpu_dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: arch/x86/kernel/cpu/common_64.c:218:
+                cpu_devs[cvdev->vendor] = cvdev->cpu_dev;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#736: FILE: arch/x86/kernel/cpu/common_64.c:224:
+/* Do some early cpuid on the boot CPU to get some parameter that are
+   needed before check_bugs. Everything advanced is in identify_cpu

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#737: FILE: arch/x86/kernel/cpu/common_64.c:225:
+   below. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#745: FILE: arch/x86/kernel/cpu/common_64.c:233:
+	c->x86_model = c->x86_mask = 0;	/* So far unknown... */

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SIZEOF_PARENTHESIS: sizeof c->x86_capability should be sizeof(c->x86_capability)
#753: FILE: arch/x86/kernel/cpu/common_64.c:241:
+	memset(&c->x86_capability, 0, sizeof c->x86_capability);

WARNING:LINE_SPACING: Missing a blank line after declarations
#769: FILE: arch/x86/kernel/cpu/common_64.c:257:
+		__u32 misc;
+		cpuid(0x00000001, &tfms, &misc, &c->x86_capability[4],

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#864: FILE: arch/x86/kernel/cpu/common_64.c:352:
+	/* Clear all flags overriden by options */
 	                   ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#877: FILE: arch/x86/kernel/cpu/common_64.c:365:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#886: FILE: arch/x86/kernel/cpu/common_64.c:374:
+	BUG_ON(c == &boot_cpu_data);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#896: FILE: arch/x86/kernel/cpu/common_64.c:384:
+__setup("noclflush", setup_noclflush);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#901: FILE: arch/x86/kernel/cpu/common_64.c:389:
+		printk(KERN_CONT "%s", c->x86_model_id);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#901: FILE: arch/x86/kernel/cpu/common_64.c:389:
+		printk(KERN_CONT "%s", c->x86_model_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#904: FILE: arch/x86/kernel/cpu/common_64.c:392:
+		printk(KERN_CONT " stepping %02x\n", c->x86_mask);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#904: FILE: arch/x86/kernel/cpu/common_64.c:392:
+		printk(KERN_CONT " stepping %02x\n", c->x86_mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#906: FILE: arch/x86/kernel/cpu/common_64.c:394:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#906: FILE: arch/x86/kernel/cpu/common_64.c:394:
+		printk(KERN_CONT "\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#912: FILE: arch/x86/kernel/cpu/common_64.c:400:
+	int bit;
+	if (get_option(&arg, &bit) && bit < NCAPINTS*32)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#912: FILE: arch/x86/kernel/cpu/common_64.c:400:
+	if (get_option(&arg, &bit) && bit < NCAPINTS*32)
 	                                            ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#918: FILE: arch/x86/kernel/cpu/common_64.c:406:
+__setup("clearcpuid=", setup_disablecpuid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#940: FILE: include/asm-x86/processor.h:157:
+extern void early_cpu_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265031.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 40 warnings, 22 checks, 514 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265031.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
