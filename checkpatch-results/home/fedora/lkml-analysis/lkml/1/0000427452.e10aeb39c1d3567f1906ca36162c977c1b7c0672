WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#36: FILE: Makefile:4:
+EXTRAVERSION = .2
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#155: FILE: arch/i386/kernel/cpu/cpufreq/powernow-k7.c:348:
+		pc.val = (unsigned long) state->control;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#162: FILE: arch/i386/kernel/cpu/cpufreq/powernow-k7.c:351:
+			 (u32) state->core_frequency,

CHECK:SPACING: No space is necessary after a cast
#163: FILE: arch/i386/kernel/cpu/cpufreq/powernow-k7.c:352:
+			 (u32) state->power,

CHECK:SPACING: No space is necessary after a cast
#164: FILE: arch/i386/kernel/cpu/cpufreq/powernow-k7.c:353:
+			 (u32) state->transition_latency,

CHECK:SPACING: No space is necessary after a cast
#165: FILE: arch/i386/kernel/cpu/cpufreq/powernow-k7.c:354:
+			 (u32) state->control,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#211: FILE: arch/i386/kernel/cpu/cpufreq/powernow-k7.c:625:
+				printk (KERN_INFO PFX "See http://www.codemonkey.org.uk/projects/cpufreq/powernow-k7.html\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#211: FILE: arch/i386/kernel/cpu/cpufreq/powernow-k7.c:625:
+				printk (KERN_INFO PFX "See http://www.codemonkey.org.uk/projects/cpufreq/powernow-k7.html\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#359: FILE: drivers/acpi/tables/tbfadt.c:356:
+	if ((acpi_gbl_FADT.header.revision < 3) &&
[...]
+			ACPI_WARNING((AE_INFO,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'acpi_gbl_FADT.header.revision < 3'
#359: FILE: drivers/acpi/tables/tbfadt.c:356:
+	if ((acpi_gbl_FADT.header.revision < 3) &&
+		(acpi_gbl_FADT.cst_control != 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'acpi_gbl_FADT.cst_control != 0'
#359: FILE: drivers/acpi/tables/tbfadt.c:356:
+	if ((acpi_gbl_FADT.header.revision < 3) &&
+		(acpi_gbl_FADT.cst_control != 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: drivers/acpi/tables/tbfadt.c:357:
+	if ((acpi_gbl_FADT.header.revision < 3) &&
+		(acpi_gbl_FADT.cst_control != 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: drivers/acpi/tables/tbfadt.c:359:
+			ACPI_WARNING((AE_INFO,
+				"Ignoring BIOS FADT r%u C-state control",

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: drivers/acpi/tables/tbfadt.c:361:
+^I^I ^Iacpi_gbl_FADT.cst_control = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#364: FILE: drivers/acpi/tables/tbfadt.c:361:
+^I^I ^Iacpi_gbl_FADT.cst_control = 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#379: FILE: drivers/ata/libata-sff.c:561:
+	/* Discard disabled ports. Some controllers show their
+	   unused channels this way */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#379: FILE: drivers/ata/libata-sff.c:561:
+	   unused channels this way */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pcim_iomap"
#393: FILE: drivers/ata/libata-sff.c:570:
+			if (pcim_iomap(pdev, i, 0) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#394: FILE: drivers/ata/libata-sff.c:571:
+				dev_printk(KERN_ERR, &pdev->dev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pcim_iomap"
#402: FILE: drivers/ata/libata-sff.c:579:
+			if (pcim_iomap(pdev, i, 0) == NULL) {

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#403: FILE: drivers/ata/libata-sff.c:580:
+				dev_printk(KERN_ERR, &pdev->dev,

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#510: FILE: drivers/md/raid1.c:274:
+	if (uptodate)
 	    ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#510: FILE: drivers/md/raid1.c:274:
+	if (uptodate)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <R1BIO_Uptodate>
#511: FILE: drivers/md/raid1.c:275:
+		set_bit(R1BIO_Uptodate, &r1_bio->state);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: drivers/md/raid1.c:276:
+	else {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#515: FILE: drivers/md/raid1.c:279:
+		 * Here we redefine "uptodate" to mean "Don't want to retry"
 		                     ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: drivers/md/raid1.c:282:
+		unsigned long flags;
+		spin_lock_irqsave(&conf->device_lock, flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#522: FILE: drivers/md/raid1.c:284:
+		    (r1_bio->mddev->degraded == conf->raid_disks-1 &&
 		                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Faulty>
#523: FILE: drivers/md/raid1.c:285:
+		     !test_bit(Faulty, &conf->mirrors[mirror].rdev->flags)))

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#524: FILE: drivers/md/raid1.c:286:
+			uptodate = 1;
 			^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#528: FILE: drivers/md/raid1.c:290:
+	if (uptodate)
 	    ^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#531: FILE: drivers/md/raid1.c:292:
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#547: FILE: drivers/md/raid1.c:1005:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <mptspi_initTarget>
#563: FILE: drivers/message/fusion/mptspi.c:731:
+	mptspi_initTarget(hd, vtarget, sdev);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#612: FILE: drivers/net/bnx2.c:4513:
+	if ((mss = skb_shinfo(skb)->gso_size)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#660: FILE: drivers/net/sis900.c:1757:
+			struct sk_buff * rx_skb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#835: FILE: drivers/net/tg3.c:3898:
+	if ((mss = skb_shinfo(skb)->gso_size) != 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#845: FILE: drivers/net/tg3.c:4055:
+	if ((mss = skb_shinfo(skb)->gso_size) != 0) {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#957: FILE: drivers/pci/quirks.c:1751:
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_SERVERWORKS, PCI_DEVICE_ID_SERVERWORKS_GCNB_LE, quirk_disable_all_msi);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#962: FILE: drivers/pci/quirks.c:1756:
 static void __devinit quirk_disable_msi(struct pci_dev *dev)

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "SUNW,sun4v-console" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#973: FILE: drivers/serial/sunhv.c:498:
+		.compatible = "SUNW,sun4v-console",

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#999: FILE: drivers/usb/atm/cxacru.c:168:
+	struct mutex poll_state_serialize;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1079: FILE: drivers/usb/input/hiddev.c:54:
+	spinlock_t list_lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dirent_type' - possible side-effects?
#1162: FILE: fs/fat/dir.c:650:
+#define FAT_IOCTL_FILLDIR_FUNC(func, dirent_type)			   \
+static int func(void *__buf, const char *name, int name_len,		   \
+			     loff_t offset, u64 ino, unsigned int d_type)  \
+{									   \
+	struct fat_ioctl_filldir_callback *buf = __buf;			   \
+	struct dirent_type __user *d1 = buf->dirent;			   \
+	struct dirent_type __user *d2 = d1 + 1;				   \
+									   \
+	if (buf->result)						   \
+		return -EINVAL;						   \
+	buf->result++;							   \
+									   \
+	if (name != NULL) {						   \
+		/* dirent has only short name */			   \
+		if (name_len >= sizeof(d1->d_name))			   \
+			name_len = sizeof(d1->d_name) - 1;		   \
+									   \
+		if (put_user(0, d2->d_name)			||	   \
+		    put_user(0, &d2->d_reclen)			||	   \
+		    copy_to_user(d1->d_name, name, name_len)	||	   \
+		    put_user(0, d1->d_name + name_len)		||	   \
+		    put_user(name_len, &d1->d_reclen))			   \
+			goto efault;					   \
+	} else {							   \
+		/* dirent has short and long name */			   \
+		const char *longname = buf->longname;			   \
+		int long_len = buf->long_len;				   \
+		const char *shortname = buf->shortname;			   \
+		int short_len = buf->short_len;				   \
+									   \
+		if (long_len >= sizeof(d1->d_name))			   \
+			long_len = sizeof(d1->d_name) - 1;		   \
+		if (short_len >= sizeof(d1->d_name))			   \
+			short_len = sizeof(d1->d_name) - 1;		   \
+									   \
+		if (copy_to_user(d2->d_name, longname, long_len)	|| \
+		    put_user(0, d2->d_name + long_len)			|| \
+		    put_user(long_len, &d2->d_reclen)			|| \
+		    put_user(ino, &d2->d_ino)				|| \
+		    put_user(offset, &d2->d_off)			|| \
+		    copy_to_user(d1->d_name, shortname, short_len)	|| \
+		    put_user(0, d1->d_name + short_len)			|| \
+		    put_user(short_len, &d1->d_reclen))			   \
+			goto efault;					   \
+	}								   \
+	return 0;							   \
+efault:									   \
+	buf->result = -EFAULT;						   \
+	return -EFAULT;							   \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1162: FILE: fs/fat/dir.c:650:
+#define FAT_IOCTL_FILLDIR_FUNC(func, dirent_type)			   \
+static int func(void *__buf, const char *name, int name_len,		   \
+			     loff_t offset, u64 ino, unsigned int d_type)  \
+{									   \
+	struct fat_ioctl_filldir_callback *buf = __buf;			   \
+	struct dirent_type __user *d1 = buf->dirent;			   \
+	struct dirent_type __user *d2 = d1 + 1;				   \
+									   \
+	if (buf->result)						   \
+		return -EINVAL;						   \
+	buf->result++;							   \
+									   \
+	if (name != NULL) {						   \
+		/* dirent has only short name */			   \
+		if (name_len >= sizeof(d1->d_name))			   \
+			name_len = sizeof(d1->d_name) - 1;		   \
+									   \
+		if (put_user(0, d2->d_name)			||	   \
+		    put_user(0, &d2->d_reclen)			||	   \
+		    copy_to_user(d1->d_name, name, name_len)	||	   \
+		    put_user(0, d1->d_name + name_len)		||	   \
+		    put_user(name_len, &d1->d_reclen))			   \
+			goto efault;					   \
+	} else {							   \
+		/* dirent has short and long name */			   \
+		const char *longname = buf->longname;			   \
+		int long_len = buf->long_len;				   \
+		const char *shortname = buf->shortname;			   \
+		int short_len = buf->short_len;				   \
+									   \
+		if (long_len >= sizeof(d1->d_name))			   \
+			long_len = sizeof(d1->d_name) - 1;		   \
+		if (short_len >= sizeof(d1->d_name))			   \
+			short_len = sizeof(d1->d_name) - 1;		   \
+									   \
+		if (copy_to_user(d2->d_name, longname, long_len)	|| \
+		    put_user(0, d2->d_name + long_len)			|| \
+		    put_user(long_len, &d2->d_reclen)			|| \
+		    put_user(ino, &d2->d_ino)				|| \
+		    put_user(offset, &d2->d_off)			|| \
+		    copy_to_user(d1->d_name, shortname, short_len)	|| \
+		    put_user(0, d1->d_name + short_len)			|| \
+		    put_user(short_len, &d1->d_reclen))			   \
+			goto efault;					   \
+	}								   \
+	return 0;							   \
+efault:									   \
+	buf->result = -EFAULT;						   \
+	return -EFAULT;							   \
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "name"
#1174: FILE: fs/fat/dir.c:662:
+	if (name != NULL) {						   \

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1215: FILE: fs/fat/dir.c:703:
+static int fat_ioctl_readdir(struct inode *inode, struct file *filp,
                                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1267: FILE: fs/fat/dir.c:715:
+		ret = __fat_readdir(inode, filp, &buf, filldir,
 		                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1282: FILE: fs/fat/dir.c:724:
+static int fat_dir_ioctl(struct inode *inode, struct file *filp,
                                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1317: FILE: fs/fat/dir.c:753:
+	return fat_ioctl_readdir(inode, filp, d1, fat_ioctl_filldir,
 	                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1342: FILE: fs/fat/dir.c:763:
+static long fat_compat_dir_ioctl(struct file *filp, unsigned cmd,
                                               ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1342: FILE: fs/fat/dir.c:763:
+static long fat_compat_dir_ioctl(struct file *filp, unsigned cmd,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1391: FILE: fs/fat/dir.c:793:
+	return fat_ioctl_readdir(inode, filp, d1, fat_compat_ioctl_filldir,
 	                                ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1488: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:34:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1513: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:73:
+#define IOP13XX_PCIE_LOWER_IO_BA      ^I 0x0UL  /* OIOTVR */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1563: FILE: include/linux/clocksource.h:203:
+extern void clocksource_resume(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1697: FILE: kernel/time/clocksource.c:152:
 }
+static void clocksource_resume_watchdog(void)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1763: FILE: kernel/time/tick-common.c:302:
+		tick_do_timer_cpu = (cpu != NR_CPUS) ? cpu : -1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1880: FILE: lib/zlib_inflate/inflate.c:748:
+            strm->avail_out != 0 && strm->avail_in == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1880: FILE: lib/zlib_inflate/inflate.c:748:
+            strm->avail_out != 0 && strm->avail_in == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1883: FILE: lib/zlib_inflate/inflate.c:751:
+    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1884: FILE: lib/zlib_inflate/inflate.c:752:
+        ret = Z_BUF_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1884: FILE: lib/zlib_inflate/inflate.c:752:
+        ret = Z_BUF_ERROR;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2025: FILE: net/ipv4/netfilter/ip_nat_proto_gre.c:74:
+	/* If there is no master conntrack we are not PPTP,
+	   do not change tuples */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2025: FILE: net/ipv4/netfilter/ip_nat_proto_gre.c:74:
+	   do not change tuples */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2028: FILE: net/ipv4/netfilter/ip_nat_proto_gre.c:77:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2050: FILE: net/ipv4/netfilter/ip_nat_proto_gre.c:132:
+			 * Try to behave like "ip_nat_proto_unknown" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2063: FILE: net/ipv4/netfilter/nf_nat_proto_gre.c:76:
+	/* If there is no master conntrack we are not PPTP,
+	   do not change tuples */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2063: FILE: net/ipv4/netfilter/nf_nat_proto_gre.c:76:
+	   do not change tuples */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2066: FILE: net/ipv4/netfilter/nf_nat_proto_gre.c:79:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2088: FILE: net/ipv4/netfilter/nf_nat_proto_gre.c:132:
+		 * Try to behave like "nf_nat_proto_unknown" */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2152: FILE: net/ipv6/exthdrs.c:656:
+/*
+ * Note: we cannot rely on skb->dst before we assign it in ip6_route_input().

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2201: FILE: net/ipv6/ip6_input.c:238:
+	deliver = unlikely(skb->dev->flags & (IFF_PROMISC|IFF_ALLMULTI)) ||
 	                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2220: FILE: net/ipv6/ip6_output.c:456:
+		if (addrtype & (IPV6_ADDR_MULTICAST|IPV6_ADDR_LOOPBACK))
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2224: FILE: net/ipv6/ip6_output.c:460:
+			icmpv6_send(skb, ICMPV6_DEST_UNREACH,
+				ICMPV6_NOT_NEIGHBOUR, 0, skb->dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2321: FILE: net/sctp/socket.c:3940:
+static int sctp_copy_laddrs_old(struct sock *sk, __u16 port,
+					int max_addrs, void *to,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2387: FILE: net/sctp/socket.c:4052:
+	addrs = kmalloc(sizeof(union sctp_addr) * getaddrs.addr_num,
+			GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2480: FILE: net/sctp/socket.c:4165:
+			cnt = sctp_copy_laddrs(sk, bp->port, addrs,
+						space_left, &bytes_copied);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2540: FILE: net/sctp/socket.c:4994:
+				printk(KERN_INFO

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!resbuf->tail[0].iov_base"
#2562: FILE: net/sunrpc/auth_gss/svcauth_gss.c:1199:
+	if (resbuf->tail[0].iov_base == NULL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2589: FILE: scripts/basic/fixdep.c:252:
+		if( (q-p-7) < 0 )
 		      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2589: FILE: scripts/basic/fixdep.c:252:
+		if( (q-p-7) < 0 )
 		        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2589: FILE: scripts/basic/fixdep.c:252:
+		if( (q-p-7) < 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2589: FILE: scripts/basic/fixdep.c:252:
+		if( (q-p-7) < 0 )

ERROR:SPACING: space required before the open parenthesis '('
#2589: FILE: scripts/basic/fixdep.c:252:
+		if( (q-p-7) < 0 )

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 40 warnings, 33 checks, 2159 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
