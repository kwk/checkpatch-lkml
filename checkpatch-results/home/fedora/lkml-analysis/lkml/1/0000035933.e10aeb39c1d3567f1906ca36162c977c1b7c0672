WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#43: 
kfifo_dma_..._finsh() function must be called to remove the transfered
                                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/kfifo.h:612:
+extern unsigned int kfifo_dma_in_prepare(struct kfifo *fifo,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: include/linux/kfifo.h:613:
+extern unsigned int kfifo_dma_in_prepare(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: include/linux/kfifo.h:614:
+extern void kfifo_dma_in_finish(struct kfifo *fifo, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/kfifo.h:616:
+extern __must_check unsigned int kfifo_dma_out_prepare(struct kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: include/linux/kfifo.h:617:
+extern __must_check unsigned int kfifo_dma_out_prepare(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/kfifo.h:618:
+extern void kfifo_dma_out_finish(struct kfifo *fifo, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/linux/kfifo.h:620:
+extern unsigned int kfifo_dma_in_prepare_rec(struct kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: include/linux/kfifo.h:621:
+extern unsigned int kfifo_dma_in_prepare_rec(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int recsize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/kfifo.h:622:
+extern void kfifo_dma_in_finish_rec(struct kfifo *fifo, unsigned int len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: include/linux/kfifo.h:623:
+extern void kfifo_dma_in_finish_rec(struct kfifo *fifo, unsigned int len,
+	unsigned int recsize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/kfifo.h:625:
+extern __must_check  unsigned int kfifo_dma_out_prepare_rec(struct kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: include/linux/kfifo.h:626:
+extern __must_check  unsigned int kfifo_dma_out_prepare_rec(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/kfifo.h:628:
+extern void kfifo_dma_out_finish_rec(struct kfifo *fifo, unsigned int len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: include/linux/kfifo.h:629:
+extern void kfifo_dma_out_finish_rec(struct kfifo *fifo, unsigned int len,
+	unsigned int recsize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: kernel/kfifo.c:415:
+unsigned int kfifo_dma_in_prepare(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents)

WARNING:REPEATED_WORD: Possible repeated word: 'number'
#141: FILE: kernel/kfifo.c:424:
+ * @len: number number of bytes to received.

WARNING:REPEATED_WORD: Possible repeated word: 'number'
#160: FILE: kernel/kfifo.c:443:
+ * @len: number number of bytes to transfer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: kernel/kfifo.c:453:
+unsigned int kfifo_dma_out_prepare(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len)

WARNING:TYPO_SPELLING: 'transferd' may be misspelled - perhaps 'transferred'?
#179: FILE: kernel/kfifo.c:462:
+ * @len: number number of bytes transferd.
                                 ^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'number'
#179: FILE: kernel/kfifo.c:462:
+ * @len: number number of bytes transferd.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: kernel/kfifo.c:490:
+unsigned int kfifo_dma_in_prepare_rec(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int recsize)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#215: FILE: kernel/kfifo.c:498:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#222: FILE: kernel/kfifo.c:505:
+	switch(recsize) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: kernel/kfifo.c:521:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n != len'
#244: FILE: kernel/kfifo.c:527:
+		if ((n != len) && (nents > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nents > 1'
#244: FILE: kernel/kfifo.c:527:
+		if ((n != len) && (nents > 1)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#244: FILE: kernel/kfifo.c:527:
+		if ((n != len) && (nents > 1)) {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#251: FILE: kernel/kfifo.c:534:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#254: FILE: kernel/kfifo.c:537:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#254: FILE: kernel/kfifo.c:537:
+	else {

WARNING:REPEATED_WORD: Possible repeated word: 'number'
#268: FILE: kernel/kfifo.c:551:
+ * @len: number number of bytes received.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: kernel/kfifo.c:561:
+void kfifo_dma_in_finish_rec(struct kfifo *fifo, unsigned int len,
+	unsigned int recsize)

WARNING:REPEATED_WORD: Possible repeated word: 'number'
#291: FILE: kernel/kfifo.c:574:
+ * @len: number number of bytes to transfer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: kernel/kfifo.c:588:
+unsigned int kfifo_dma_out_prepare_rec(struct kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: kernel/kfifo.c:596:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: kernel/kfifo.c:604:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n != len'
#327: FILE: kernel/kfifo.c:610:
+		if ((n != len) && (nents > 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nents > 1'
#327: FILE: kernel/kfifo.c:610:
+		if ((n != len) && (nents > 1)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#327: FILE: kernel/kfifo.c:610:
+		if ((n != len) && (nents > 1)) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#334: FILE: kernel/kfifo.c:617:
+		}
+		else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#337: FILE: kernel/kfifo.c:620:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#337: FILE: kernel/kfifo.c:620:
+	else {

WARNING:TYPO_SPELLING: 'transferd' may be misspelled - perhaps 'transferred'?
#351: FILE: kernel/kfifo.c:634:
+ * @len: number number of bytes transferd.
                                 ^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'number'
#351: FILE: kernel/kfifo.c:634:
+ * @len: number number of bytes transferd.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: kernel/kfifo.c:644:
+void kfifo_dma_out_finish_rec(struct kfifo *fifo, unsigned int len,
+	unsigned int recsize)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000035933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 11 warnings, 28 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000035933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
