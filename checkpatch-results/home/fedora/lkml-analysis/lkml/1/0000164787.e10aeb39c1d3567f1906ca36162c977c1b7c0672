WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: drivers/net/can/Kconfig:73:
+config CAN_MSCAN
+	depends on CAN_DEV && (PPC || M68K || M68KNOMMU)
+	tristate "Freescale MSCAN based chips"
+	---help---
+	  The Motorola Scalable Controller Area Network (MSCAN) definition
+	  is based on the MSCAN12 definition which is the specific
+	  implementation of the Motorola Scalable CAN concept targeted for
+	  the Motorola MC68HC12 Microcontroller Family.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#70: FILE: drivers/net/can/Kconfig:82:
+config CAN_MPC52XX
+	tristate "Freescale MPC5200 onboard CAN controller"
+	depends on CAN_MSCAN && PPC_MPC52xx
+	default N
+	---help---
+	  If you say yes here you get support for Freescale MPC5200
+	  onboard dualCAN controller.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called mpc52xx_can.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#96: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: drivers/net/can/mscan/mpc52xx_can.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#133: FILE: drivers/net/can/mscan/mpc52xx_can.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#134: FILE: drivers/net/can/mscan/mpc52xx_can.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: drivers/net/can/mscan/mpc52xx_can.c:36:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#154: FILE: drivers/net/can/mscan/mpc52xx_can.c:39:
+static struct of_device_id mpc52xx_cdm_ids[] __devinitdata = {

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#154: FILE: drivers/net/can/mscan/mpc52xx_can.c:39:
+static struct of_device_id mpc52xx_cdm_ids[] __devinitdata = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,mpc5200b-cdm" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#156: FILE: drivers/net/can/mscan/mpc52xx_can.c:41:
+	{ .compatible = "fsl,mpc5200b-cdm", },

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#161: FILE: drivers/net/can/mscan/mpc52xx_can.c:46:
+/*
+ * Get the frequency of the external oscillator clock connected

WARNING:TYPO_SPELLING: 'retrun' may be misspelled - perhaps 'return'?
#162: FILE: drivers/net/can/mscan/mpc52xx_can.c:47:
+ * to the SYS_XTAL_IN pin, or retrun 0 if it cannot be determined.
                               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#164: FILE: drivers/net/can/mscan/mpc52xx_can.c:49:
+static unsigned int  __devinit mpc52xx_can_xtal_freq(struct device_node *np)

WARNING:TYPO_SPELLING: 'Detemine' may be misspelled - perhaps 'Determine'?
#176: FILE: drivers/net/can/mscan/mpc52xx_can.c:61:
+	 * Detemine SYS_XTAL_IN frequency from the clock domain settings
 	   ^^^^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#176: FILE: drivers/net/can/mscan/mpc52xx_can.c:61:
+	/*
+	 * Detemine SYS_XTAL_IN frequency from the clock domain settings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#182: FILE: drivers/net/can/mscan/mpc52xx_can.c:67:
+		printk(KERN_ERR "%s() failed abnormally\n", __func__);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#204: FILE: drivers/net/can/mscan/mpc52xx_can.c:89:
+/*
+ * Get frequency of the MSCAN clock source

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#212: FILE: drivers/net/can/mscan/mpc52xx_can.c:97:
+static unsigned int  __devinit mpc52xx_can_clock_freq(struct device_node *np,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#225: FILE: drivers/net/can/mscan/mpc52xx_can.c:110:
+static int __devinit mpc52xx_can_probe(struct of_device *ofdev,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#276: FILE: drivers/net/can/mscan/mpc52xx_can.c:161:
+	/*
+	 * Either the oscillator clock (SYS_XTAL_IN) or the IP bus clock

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#321: FILE: drivers/net/can/mscan/mpc52xx_can.c:206:
+static int __devexit mpc52xx_can_remove(struct of_device *ofdev)

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#358: FILE: drivers/net/can/mscan/mpc52xx_can.c:243:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#378: FILE: drivers/net/can/mscan/mpc52xx_can.c:263:
+static struct of_device_id __devinitdata mpc52xx_can_table[] = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after mpc52xx_can_table[]
#378: FILE: drivers/net/can/mscan/mpc52xx_can.c:263:
+static struct of_device_id __devinitdata mpc52xx_can_table[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#378: FILE: drivers/net/can/mscan/mpc52xx_can.c:263:
+static struct of_device_id __devinitdata mpc52xx_can_table[] = {

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,mpc5200b-mscan" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#380: FILE: drivers/net/can/mscan/mpc52xx_can.c:265:
+	{.compatible = "fsl,mpc5200b-mscan"},

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#415: FILE: drivers/net/can/mscan/mscan.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#432: FILE: drivers/net/can/mscan/mscan.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#433: FILE: drivers/net/can/mscan/mscan.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: drivers/net/can/mscan/mscan.c:47:
+#define BTR1_TSEG1_MASK ^I0xf$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#463: FILE: drivers/net/can/mscan/mscan.c:49:
+#define BTR1_TSEG2_MASK ^I(0x7 << BTR1_TSEG2_SHIFT)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#464: FILE: drivers/net/can/mscan/mscan.c:50:
+#define BTR1_SAM_SHIFT  ^I7$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#534: FILE: drivers/net/can/mscan/mscan.c:120:
+	if (mode != MSCAN_NORMAL_MODE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#549: FILE: drivers/net/can/mscan/mscan.c:135:
+				udelay(100);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#558: FILE: drivers/net/can/mscan/mscan.c:144:
+		if (!ret && (mode & MSCAN_INITRQ)
+		    && (canctl1 & MSCAN_INITAK) == 0) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#648: FILE: drivers/net/can/mscan/mscan.c:234:
+		/* if buf_id < 3, then current frame will be send out of order,
+		   since  buffer with lower id have higher priority (hell..) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#648: FILE: drivers/net/can/mscan/mscan.c:234:
+		   since  buffer with lower id have higher priority (hell..) */

CHECK:SPACING: No space is necessary after a cast
#678: FILE: drivers/net/can/mscan/mscan.c:264:
+		u16 *payload = (u16 *) frame->data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#741: FILE: drivers/net/can/mscan/mscan.c:327:
+				    (MSCAN_RXF | MSCAN_ERR_IF))) {
+

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#744: FILE: drivers/net/can/mscan/mscan.c:330:
+			if (printk_ratelimit())

CHECK:SPACING: No space is necessary after a cast
#774: FILE: drivers/net/can/mscan/mscan.c:360:
+				u16 *payload = (u16 *) frame->data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#775: FILE: drivers/net/can/mscan/mscan.c:361:
+				u16 *payload = (u16 *) frame->data;
+				for (i = 0; i < (frame->can_dlc + 1) / 2; i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#790: FILE: drivers/net/can/mscan/mscan.c:376:
+			if (canrflg & MSCAN_OVRIF) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#794: FILE: drivers/net/can/mscan/mscan.c:380:
+			} else

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#832: FILE: drivers/net/can/mscan/mscan.c:418:
+		skb->protocol = __constant_htons(ETH_P_CAN);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#860: FILE: drivers/net/can/mscan/mscan.c:446:
+	if (cantier && cantflg) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#879: FILE: drivers/net/can/mscan/mscan.c:465:
+		if (list_empty(&priv->tx_head)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#883: FILE: drivers/net/can/mscan/mscan.c:469:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#896: FILE: drivers/net/can/mscan/mscan.c:482:
+		if (canrflg & ~MSCAN_STAT_MSK) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#901: FILE: drivers/net/can/mscan/mscan.c:487:
+		} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#909: FILE: drivers/net/can/mscan/mscan.c:495:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#978: FILE: drivers/net/can/mscan/mscan.c:564:
+		printk(KERN_ERR "%s - failed to attach interrupt\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: drivers/net/can/mscan/mscan.c:601:
+       .ndo_open               = mscan_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: drivers/net/can/mscan/mscan.c:602:
+       .ndo_stop               = mscan_close,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: drivers/net/can/mscan/mscan.c:603:
+       .ndo_start_xmit         = mscan_start_xmit,$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1033: FILE: drivers/net/can/mscan/mscan.c:619:
+	udelay(100);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1057: FILE: drivers/net/can/mscan/mscan.c:643:
+	struct mscan_regs *regs = (struct mscan_regs *)dev->base_addr;
+	mscan_set_mode(dev, MSCAN_INIT_MODE);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1102: FILE: drivers/net/can/mscan/mscan.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1118: FILE: drivers/net/can/mscan/mscan.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1119: FILE: drivers/net/can/mscan/mscan.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1168: FILE: drivers/net/can/mscan/mscan.h:67:
+#define MSCAN_ERR_IF ^I^I(MSCAN_OVRIF | MSCAN_CSCIF)$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1175: FILE: drivers/net/can/mscan/mscan.h:74:
+#define MSCAN_STATE_TX(canrflg)	(((canrflg)&MSCAN_TSTAT_MSK)>>2)
                                	           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1175: FILE: drivers/net/can/mscan/mscan.h:74:
+#define MSCAN_STATE_TX(canrflg)	(((canrflg)&MSCAN_TSTAT_MSK)>>2)
                                	                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1176: FILE: drivers/net/can/mscan/mscan.h:75:
+#define MSCAN_STATE_RX(canrflg)	(((canrflg)&MSCAN_RSTAT_MSK)>>4)
                                	           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1176: FILE: drivers/net/can/mscan/mscan.h:75:
+#define MSCAN_STATE_RX(canrflg)	(((canrflg)&MSCAN_RSTAT_MSK)>>4)
                                	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1229: FILE: drivers/net/can/mscan/mscan.h:128:
+#define MSCAN_AF_CLOSED		(MSCAN_IDAM0|MSCAN_IDAM1)
                        		            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1230: FILE: drivers/net/can/mscan/mscan.h:129:
+#define MSCAN_AF_MASK		(~(MSCAN_IDAM0|MSCAN_IDAM1))
                      		              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1248: FILE: drivers/net/can/mscan/mscan.h:147:
+	u8 canctl1;				/* + 0x01     0x01 */
+	_MSCAN_RESERVED_(1, 2);			/* + 0x02          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1251: FILE: drivers/net/can/mscan/mscan.h:150:
+	u8 canbtr1;				/* + 0x05     0x03 */
+	_MSCAN_RESERVED_(2, 2);			/* + 0x06          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1254: FILE: drivers/net/can/mscan/mscan.h:153:
+	u8 canrier;				/* + 0x09     0x05 */
+	_MSCAN_RESERVED_(3, 2);			/* + 0x0a          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1257: FILE: drivers/net/can/mscan/mscan.h:156:
+	u8 cantier;				/* + 0x0d     0x07 */
+	_MSCAN_RESERVED_(4, 2);			/* + 0x0e          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1260: FILE: drivers/net/can/mscan/mscan.h:159:
+	u8 cantaak;				/* + 0x11     0x09 */
+	_MSCAN_RESERVED_(5, 2);			/* + 0x12          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1264: FILE: drivers/net/can/mscan/mscan.h:163:
+	u8 reserved;				/* + 0x16     0x0c */
+	_MSCAN_RESERVED_(6, 5);			/* + 0x17          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1270: FILE: drivers/net/can/mscan/mscan.h:169:
+	u8 cantxerr;				/* + 0x1d     0x0f */
+	_MSCAN_RESERVED_(7, 2);			/* + 0x1e          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1272: FILE: drivers/net/can/mscan/mscan.h:171:
+	u16 canidar1_0;				/* + 0x20     0x10 */
+	_MSCAN_RESERVED_(8, 2);			/* + 0x22          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1274: FILE: drivers/net/can/mscan/mscan.h:173:
+	u16 canidar3_2;				/* + 0x24     0x12 */
+	_MSCAN_RESERVED_(9, 2);			/* + 0x26          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1276: FILE: drivers/net/can/mscan/mscan.h:175:
+	u16 canidmr1_0;				/* + 0x28     0x14 */
+	_MSCAN_RESERVED_(10, 2);		/* + 0x2a          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1278: FILE: drivers/net/can/mscan/mscan.h:177:
+	u16 canidmr3_2;				/* + 0x2c     0x16 */
+	_MSCAN_RESERVED_(11, 2);		/* + 0x2e          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1280: FILE: drivers/net/can/mscan/mscan.h:179:
+	u16 canidar5_4;				/* + 0x30     0x18 */
+	_MSCAN_RESERVED_(12, 2);		/* + 0x32          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1282: FILE: drivers/net/can/mscan/mscan.h:181:
+	u16 canidar7_6;				/* + 0x34     0x1a */
+	_MSCAN_RESERVED_(13, 2);		/* + 0x36          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1284: FILE: drivers/net/can/mscan/mscan.h:183:
+	u16 canidmr5_4;				/* + 0x38     0x1c */
+	_MSCAN_RESERVED_(14, 2);		/* + 0x3a          */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1286: FILE: drivers/net/can/mscan/mscan.h:185:
+	u16 canidmr7_6;				/* + 0x3c     0x1e */
+	_MSCAN_RESERVED_(15, 2);		/* + 0x3e          */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1325: FILE: drivers/net/can/mscan/mscan.h:224:
+} __attribute__ ((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1328: FILE: drivers/net/can/mscan/mscan.h:227:
+#define MSCAN_REGION ^Isizeof(struct mscan)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1335: FILE: drivers/net/can/mscan/mscan.h:234:
+extern int register_mscandev(struct net_device *dev, int clock_src);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1336: FILE: drivers/net/can/mscan/mscan.h:235:
+extern void unregister_mscandev(struct net_device *dev);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164787.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 55 warnings, 25 checks, 1252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164787.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
