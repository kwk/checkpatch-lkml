WARNING:TYPO_SPELLING: 'poitner' may be misspelled - perhaps 'pointer'?
#33: 
Allocate all page_cgroup at boot and remove page_cgroup poitner
                                                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
  - we can know what amount of memory will be used for this extra-lru handling.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: mm/page_cgroup.c:1:
+#include <linux/mm.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#105: FILE: mm/page_cgroup.c:16:
+}
+static unsigned long total_usage;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#109: FILE: mm/page_cgroup.c:20:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: mm/page_cgroup.c:52:
+	base = __alloc_bootmem_node_nopanic(NODE_DATA(nid),
+			table_size, PAGE_SIZE, __pa(MAX_DMA_ADDRESS));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#155: FILE: mm/page_cgroup.c:66:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#163: FILE: mm/page_cgroup.c:74:
+	printk(KERN_INFO "allocated %ld bytes of page_cgroup\n", total_usage);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#164: FILE: mm/page_cgroup.c:75:
+	printk(KERN_INFO "please try cgroup_disable=memory option if you"

WARNING:SPLIT_STRING: quoted string split across lines
#165: FILE: mm/page_cgroup.c:76:
+	printk(KERN_INFO "please try cgroup_disable=memory option if you"
+	" don't want\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#168: FILE: mm/page_cgroup.c:79:
+	printk(KERN_CRIT "allocation of page_cgroup was failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#169: FILE: mm/page_cgroup.c:80:
+	printk(KERN_CRIT "please try cgroup_disable=memory boot option\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#203: FILE: mm/page_cgroup.c:114:
+		printk(KERN_ERR "page cgroup allocation failure\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#203: FILE: mm/page_cgroup.c:114:
+	if (!base) {
+		printk(KERN_ERR "page cgroup allocation failure\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#217: FILE: mm/page_cgroup.c:128:
+}
+#ifdef CONFIG_MEMORY_HOTPLUG

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: mm/page_cgroup.c:146:
+int online_page_cgroup(unsigned long start_pfn,
+			unsigned long nr_pages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: mm/page_cgroup.c:171:
+int offline_page_cgroup(unsigned long start_pfn,
+		unsigned long nr_pages, int nid)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#271: FILE: mm/page_cgroup.c:182:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: mm/page_cgroup.c:185:
+static int page_cgroup_callback(struct notifier_block *self,
+			       unsigned long action, void *arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: mm/page_cgroup.c:189:
+	int ret = 0;
+	switch (action) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: mm/page_cgroup.c:192:
+		ret = online_page_cgroup(mn->start_pfn,
+				   mn->nr_pages, mn->status_change_nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: mm/page_cgroup.c:197:
+		offline_page_cgroup(mn->start_pfn,
+				mn->nr_pages, mn->status_change_nid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#311: FILE: mm/page_cgroup.c:222:
+		printk(KERN_CRIT "try cgroup_disable=memory boot option\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#316: FILE: mm/page_cgroup.c:227:
+	printk(KERN_INFO "allocated %ld bytes of page_cgroup\n", total_usage);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#317: FILE: mm/page_cgroup.c:228:
+	printk(KERN_INFO "please try cgroup_disable=memory option if you don't"

WARNING:SPLIT_STRING: quoted string split across lines
#318: FILE: mm/page_cgroup.c:229:
+	printk(KERN_INFO "please try cgroup_disable=memory option if you don't"
+	" want\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#324: FILE: mm/page_cgroup.c:235:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#359: FILE: include/linux/page_cgroup.h:1:
+#ifndef __LINUX_PAGE_CGROUP_H

CHECK:CAMELCASE: Avoid CamelCase: <Cache>
#404: FILE: include/linux/page_cgroup.h:46:
+TESTPCGFLAG(Cache, CACHE)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Used>
#406: FILE: include/linux/page_cgroup.h:48:
+TESTPCGFLAG(Used, USED)

CHECK:CAMELCASE: Avoid CamelCase: <File>
#410: FILE: include/linux/page_cgroup.h:52:
+TESTPCGFLAG(File, FILE)

CHECK:CAMELCASE: Avoid CamelCase: <Active>
#414: FILE: include/linux/page_cgroup.h:56:
+TESTPCGFLAG(Active, ACTIVE)

CHECK:CAMELCASE: Avoid CamelCase: <Unevictable>
#418: FILE: include/linux/page_cgroup.h:60:
+TESTPCGFLAG(Unevictable, UNEVICTABLE)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#447: FILE: include/linux/page_cgroup.h:89:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#551: FILE: mm/memcontrol.c:147:
+#define PCGF_CACHE	(1UL << PCG_CACHE)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#552: FILE: mm/memcontrol.c:148:
+#define PCGF_USED	(1UL << PCG_USED)

CHECK:BIT_MACRO: Prefer using the BIT macro
#553: FILE: mm/memcontrol.c:149:
+#define PCGF_ACTIVE	(1UL << PCG_ACTIVE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#554: FILE: mm/memcontrol.c:150:
+#define PCGF_LOCK	(1UL << PCG_LOCK)

CHECK:BIT_MACRO: Prefer using the BIT macro
#555: FILE: mm/memcontrol.c:151:
+#define PCGF_FILE	(1UL << PCG_FILE)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#676: FILE: mm/memcontrol.c:538:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#751: FILE: mm/memcontrol.c:609:
 
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#784: FILE: mm/memcontrol.c:655:
+	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED && page_mapped(page))
+	     || !PageCgroupUsed(pc)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 25 checks, 868 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
