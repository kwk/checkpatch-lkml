WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: include/scst/scst_debug.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'macroses' may be misspelled - perhaps 'macros'?
#60: FILE: include/scst/scst_debug.h:8:
+ *  Contains macroses for execution tracing and error reporting
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#80: FILE: include/scst/scst_debug.h:28:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#83: FILE: include/scst/scst_debug.h:31:
+#define EXTRACHECKS_BUG_ON(a)		BUG_ON(a)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#131: FILE: include/scst/scst_debug.h:79:
+		printk(KERN_CONT "%s" format "\n", log_flag, ## args)

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#131: FILE: include/scst/scst_debug.h:79:
+		printk(KERN_CONT "%s" format "\n", log_flag, ## args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#133: FILE: include/scst/scst_debug.h:81:
+		printk(KERN_CONT "%s" format, log_flag, ## args)

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#133: FILE: include/scst/scst_debug.h:81:
+		printk(KERN_CONT "%s" format, log_flag, ## args)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/scst/scst_debug.h:97:
+extern int debug_print_prefix(unsigned long trace_flag, const char *log_level,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/scst/scst_debug.h:98:
+extern int debug_print_prefix(unsigned long trace_flag, const char *log_level,
+	const char *prefix, const char *func, int line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/scst/scst_debug.h:99:
+extern void debug_print_buffer(const char *log_level, const void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: include/scst/scst_debug.h:100:
+extern void debug_print_buffer(const char *log_level, const void *data,
+	int len);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#210: FILE: include/scst/scst_debug.h:158:
+#define TRACE_DBG_SPECIAL(args...)	__TRACE(TRACE_DEBUG|TRACE_SPECIAL, args)
                                   	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#213: FILE: include/scst/scst_debug.h:161:
+		__TRACE(TRACE_MGMT_DEBUG|TRACE_SPECIAL, args)
 		                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#251: FILE: include/scst/scst_debug.h:199:
+#define PRINT_WARNING(format, args...)					\
+do {									\
+	if (strcmp(INFO_FLAG, LOG_FLAG)) {				\
+		PRINT_LOG_FLAG(LOG_FLAG, "***WARNING*** " format, args); \
+	}								\
+	PRINT_LOG_FLAG(INFO_FLAG, "***WARNING*** " format, args);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#259: FILE: include/scst/scst_debug.h:207:
+#define PRINT_ERROR(format, args...)					\
+do {									\
+	if (strcmp(ERROR_FLAG, LOG_FLAG)) {				\
+		PRINT_LOG_FLAG(LOG_FLAG, "***ERROR*** " format, args);	\
+	}								\
+	PRINT_LOG_FLAG(ERROR_FLAG, "***ERROR*** " format, args);	\
+} while (0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#270: FILE: include/scst/scst_debug.h:218:
+	/*  if (strcmp(CRIT_FLAG, LOG_FLAG))				\
+	    {								\

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#272: FILE: include/scst/scst_debug.h:220:
+	    }*/								\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#276: FILE: include/scst/scst_debug.h:224:
+#define PRINT_INFO(format, args...)			\
+do {							\
+	if (strcmp(INFO_FLAG, LOG_FLAG)) {		\
+		PRINT_LOG_FLAG(LOG_FLAG, format, args);	\
+	}						\
+	PRINT_LOG_FLAG(INFO_FLAG, format, args);	\
+} while (0)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#292: FILE: include/scst/scst_debug.h:240:
+			PRINT(LOG_FLAG, "ENTRY %s", __func__);		\

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#305: FILE: include/scst/scst_debug.h:253:
+			PRINT(LOG_FLAG, "EXIT %s", __func__);		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#310: FILE: include/scst/scst_debug.h:258:
+#define TRACE_EXIT_RES(res)						\
+do {									\
+	if (trace_flag & TRACE_ENTRYEXIT) {				\
+		if (trace_flag & TRACE_PID) {				\
+			PRINT(LOG_FLAG, "[%d]: EXIT %s: %ld", current->pid, \
+			      __func__, (long)(res));			\
+		}							\
+		else {							\
+			PRINT(LOG_FLAG, "EXIT %s: %ld",			\
+				__func__, (long)(res));			\
+		}							\
+	}                                                               \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#324: FILE: include/scst/scst_debug.h:272:
+#define TRACE_EXIT_HRES(res)						\
+do {									\
+	if (trace_flag & TRACE_ENTRYEXIT) {				\
+		if (trace_flag & TRACE_PID) {				\
+			PRINT(LOG_FLAG, "[%d]: EXIT %s: 0x%lx", current->pid, \
+			      __func__, (long)(res));			\
+		}							\
+		else {							\
+			PRINT(LOG_FLAG, "EXIT %s: %lx",			\
+					__func__, (long)(res));		\
+		}							\
+	}                                                               \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#355: FILE: include/scst/scst_debug.h:303:
+#define PRINT_INFO(format, args...)				\
+do {								\
+	PRINT(INFO_FLAG, "%s: " format, LOG_PREFIX, args);	\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#360: FILE: include/scst/scst_debug.h:308:
+#define PRINT_WARNING(format, args...)          \
+do {                                            \
+	PRINT(INFO_FLAG, "%s: ***WARNING*** "	\
+	      format, LOG_PREFIX, args);	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#366: FILE: include/scst/scst_debug.h:314:
+#define PRINT_ERROR(format, args...)            \
+do {                                            \
+	PRINT(ERROR_FLAG, "%s: ***ERROR*** "	\
+	      format, LOG_PREFIX, args);	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#372: FILE: include/scst/scst_debug.h:320:
+#define PRINT_CRIT_ERROR(format, args...)       \
+do {                                            \
+	PRINT(CRIT_FLAG, "%s: ***CRITICAL ERROR*** "	\
+		format, LOG_PREFIX, args);		\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: include/scst/scst_debug.h:328:
+#define PRINT_INFO(format, args...)           ^I\$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#380: FILE: include/scst/scst_debug.h:328:
+#define PRINT_INFO(format, args...)           	\
+do {                                            \
+	PRINT(INFO_FLAG, format, args);		\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#385: FILE: include/scst/scst_debug.h:333:
+#define PRINT_WARNING(format, args...)          \
+do {                                            \
+	PRINT(INFO_FLAG, "***WARNING*** "	\
+		format, args);			\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: include/scst/scst_debug.h:339:
+#define PRINT_ERROR(format, args...)          ^I\$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#391: FILE: include/scst/scst_debug.h:339:
+#define PRINT_ERROR(format, args...)          	\
+do {                                            \
+	PRINT(ERROR_FLAG, "***ERROR*** "	\
+		format, args);			\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#397: FILE: include/scst/scst_debug.h:345:
+#define PRINT_CRIT_ERROR(format, args...)		\
+do {							\
+	PRINT(CRIT_FLAG, "***CRITICAL ERROR*** "	\
+		format, args);				\
+} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#418: FILE: drivers/scst/scst_debug.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/scst/scst_debug.c:46:
+int debug_print_prefix(unsigned long trace_flag, const char *log_level,
+	const char *prefix, const char *func, int line)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prefix"
#473: FILE: drivers/scst/scst_debug.c:56:
+	if (prefix != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#493: FILE: drivers/scst/scst_debug.c:76:
+	const unsigned char *buf = (const unsigned char *) data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#497: FILE: drivers/scst/scst_debug.c:80:
+	if (buf == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[z1] >= 0x20'
#510: FILE: drivers/scst/scst_debug.c:93:
+					if ((buf[z1] >= 0x20) &&
+					    (buf[z1] < 0x80))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[z1] < 0x80'
#510: FILE: drivers/scst/scst_debug.c:93:
+					if ((buf[z1] >= 0x20) &&
+					    (buf[z1] < 0x80))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[z1] > 0x20'
#529: FILE: drivers/scst/scst_debug.c:112:
+		if ((buf[z1] > 0x20) && (buf[z1] < 0x80))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[z1] < 0x80'
#529: FILE: drivers/scst/scst_debug.c:112:
+		if ((buf[z1] > 0x20) && (buf[z1] < 0x80))

WARNING:RETURN_VOID: void function return statements are not generally useful
#542: FILE: drivers/scst/scst_debug.c:125:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000193992.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 20 checks, 489 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000193992.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
