WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#89: FILE: drivers/ata/ahci.c:227:
+^Iu32 ^I^I^Iem_loc; /* enclosure management location */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: drivers/ata/ahci.c:589:
+MODULE_PARM_DESC(ahci_em_messages,
+	"Set AHCI Enclosure Management Message type (0 = disabled, 1 = LED");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: drivers/ata/ahci.c:1115:
+static int ahci_transmit_led_message(struct ata_port *ap, int led_num,
+			int state)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#159: FILE: drivers/ata/ahci.c:1142:
+	pp->led_state &= ~(9 << (3*led_num));
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#168: FILE: drivers/ata/ahci.c:1151:
+	message[1] |= (state << (16 + (3*led_num)));
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#172: FILE: drivers/ata/ahci.c:1155:
+	writel(message[1], mmio + hpriv->em_loc+4);
 	                                       ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#197: FILE: drivers/ata/ahci.c:1180:
+	state = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: drivers/ata/ahci.c:1191:
+static ssize_t ahci_led_locate_store(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ahci_led_locate_store' to 'locate_store'
#211: FILE: drivers/ata/ahci.c:1194:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#212: FILE: drivers/ata/ahci.c:1195:
+static DEVICE_ATTR(locate, S_IWUSR | S_IRUGO, NULL, ahci_led_locate_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/ata/ahci.c:1198:
+static ssize_t ahci_led_fault_store(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#218: FILE: drivers/ata/ahci.c:1201:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#219: FILE: drivers/ata/ahci.c:1202:
+static DEVICE_ATTR(fault, S_IWUGO, NULL, ahci_led_fault_store);

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#219: FILE: drivers/ata/ahci.c:1202:
+static DEVICE_ATTR(fault, S_IWUGO, NULL, ahci_led_fault_store);

WARNING:SPLIT_STRING: quoted string split across lines
#235: FILE: drivers/ata/ahci.c:2306:
 		"%s%s%s%s%s%s%s"
+		"%s%s%s%s%s%s%s"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#236: FILE: drivers/ata/ahci.c:2307:
+		"%s%s%s%s%s%s%s"
+		"%s\n"

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#246: FILE: drivers/ata/ahci.c:2325:
+		cap & (1 << 6) ? "ems ": ""
 		                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ahci_em_messages == 1'
#263: FILE: drivers/ata/ahci.c:2470:
+		if ((messages & 0x01) && (ahci_em_messages == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: drivers/ata/libata-scsi.c:59:
+struct ata_device *ata_scsi_find_dev(struct ata_port *ap,
 					    const struct scsi_device *scsidev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: include/linux/libata.h:904:
+struct ata_device *ata_scsi_find_dev(struct ata_port *ap,
+				      const struct scsi_device *scsidev);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 9 warnings, 10 checks, 249 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
