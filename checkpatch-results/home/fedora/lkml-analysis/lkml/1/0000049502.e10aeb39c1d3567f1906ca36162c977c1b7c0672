WARNING:TYPO_SPELLING: 'encoutered' may be misspelled - perhaps 'encountered'?
#94: 
  - XADD (never encoutered but cheap)
                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'guaranted' may be misspelled - perhaps 'guaranteed'?
#137: FILE: Documentation/Configure.help:5297:
+  atomicity can't be guaranted !
                      ^^^^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#139: FILE: Documentation/Configure.help:5299:
+  Although it's highly preferable that you only execute programs targetted
                                                                  ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: Documentation/Configure.help:5307:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#149: FILE: Documentation/Configure.help:5309:
+  you execute a program not targetted for your CPU. You should recompile
                             ^^^^^^^^^

WARNING:TYPO_SPELLING: 'conditionnal' may be misspelled - perhaps 'conditional'?
#157: FILE: Documentation/Configure.help:5317:
+  from RISC processors, which permit to write many simple conditionnal
                                                           ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#165: FILE: Documentation/Configure.help:5325:
+  Although it's highly preferable that you only execute programs targetted
                                                                  ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: Documentation/Configure.help:5335:
+  $

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#177: FILE: Documentation/Configure.help:5337:
+  you execute a program not targetted for your CPU. You should recompile
                             ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#293: FILE: arch/i386/kernel/traps.c:89:
+asmlinkage void do_general_protection(struct pt_regs * regs, long error_code);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: arch/i386/kernel/traps.c:452:
+                           int bit32, int modrm)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: arch/i386/kernel/traps.c:452:
+                           int bit32, int modrm)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#357: FILE: arch/i386/kernel/traps.c:465:
+			return (void *)*((u32*)*from)++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: arch/i386/kernel/traps.c:466:
+^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#369: FILE: arch/i386/kernel/traps.c:477:
+				return (void *)offset + *((u32*)*from)++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: arch/i386/kernel/traps.c:482:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#377: FILE: arch/i386/kernel/traps.c:485:
+				offset += *((u32*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#379: FILE: arch/i386/kernel/traps.c:487:
+				offset += *((s8*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#387: FILE: arch/i386/kernel/traps.c:495:
+			return (void *)(u32)*((u16*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#401: FILE: arch/i386/kernel/traps.c:509:
+				offset += *((u16*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#403: FILE: arch/i386/kernel/traps.c:511:
+				offset += *((s8*)*from)++;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: arch/i386/kernel/traps.c:517:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: arch/i386/kernel/traps.c:526:
+    ^Iu8 mod,rm;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: arch/i386/kernel/traps.c:526:
+    ^Iu8 mod,rm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: arch/i386/kernel/traps.c:526:
+    ^Iu8 mod,rm;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#418: FILE: arch/i386/kernel/traps.c:526:
+    	u8 mod,rm;
     	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#440: FILE: arch/i386/kernel/traps.c:548:
+	}
+	else { /* 16 bits mode */

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#440: FILE: arch/i386/kernel/traps.c:548:
+	else { /* 16 bits mode */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#455: FILE: arch/i386/kernel/traps.c:563:
+
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#466: FILE: arch/i386/kernel/traps.c:574:
+		return REG_PTR(regs, reg & 7);
+	else

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#468: FILE: arch/i386/kernel/traps.c:576:
+		return ((reg & 4) >> 2) + (u8*)REG_PTR(regs, reg & 3);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#483: FILE: arch/i386/kernel/traps.c:591:
+asmlinkage void do_invalid_op(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#499: FILE: arch/i386/kernel/traps.c:607:
+	u8 *eip = (u8*)regs->eip;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#506: FILE: arch/i386/kernel/traps.c:614:
+	/* we'll first read all known opcode prefixes, and discard obviously
+	   invalid combinations.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#506: FILE: arch/i386/kernel/traps.c:614:
+	   invalid combinations.*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: arch/i386/kernel/traps.c:628:
+^I^I^I^I$

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#521: FILE: arch/i386/kernel/traps.c:629:
+				/* to optimize processing, we'll associate a flag mask to each opcode.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#522: FILE: arch/i386/kernel/traps.c:630:
+				 * If the EFLAGS value ANDed with this mask is not null, then the cond

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#523: FILE: arch/i386/kernel/traps.c:631:
+				 * is met. One exception is CMOVL which is true if SF != OF. For this

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#524: FILE: arch/i386/kernel/traps.c:632:
+				 * purpose, we'll make a fake flag 'SFOF' (unused bit 3) which equals

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: arch/i386/kernel/traps.c:647:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: arch/i386/kernel/traps.c:656:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: arch/i386/kernel/traps.c:659:
+^I^I^I^I$

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#553: FILE: arch/i386/kernel/traps.c:661:
+					/* condition is not valid, skip the instruction and do nothing */

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#554: FILE: arch/i386/kernel/traps.c:662:
+					regs->eip = (u32)skip_modrm(eip, !(prefixes & PREFIX_A32), modrm);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#565: FILE: arch/i386/kernel/traps.c:673:
+				}
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#565: FILE: arch/i386/kernel/traps.c:673:
+				else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#566: FILE: arch/i386/kernel/traps.c:674:
+					src = modrm_address(regs, &eip, !(prefixes & PREFIX_A32), modrm);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#569: FILE: arch/i386/kernel/traps.c:677:
+					    verify_area(VERIFY_WRITE, (void *)src, ((prefixes & PREFIX_D32) ? 2 : 4))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: arch/i386/kernel/traps.c:682:
+^I^I^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#576: FILE: arch/i386/kernel/traps.c:684:
+					*(u32*)dst = *(u32*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#576: FILE: arch/i386/kernel/traps.c:684:
+					*(u32*)dst = *(u32*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#578: FILE: arch/i386/kernel/traps.c:686:
+					*(u16*)dst = *(u16*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#578: FILE: arch/i386/kernel/traps.c:686:
+					*(u16*)dst = *(u16*)src;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: arch/i386/kernel/traps.c:687:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: arch/i386/kernel/traps.c:697:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: arch/i386/kernel/traps.c:700:
+^I^I^I^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#593: FILE: arch/i386/kernel/traps.c:701:
+				__asm__ __volatile__ (

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#597: FILE: arch/i386/kernel/traps.c:705:
+						      : "=a" (*(u32*)src)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#598: FILE: arch/i386/kernel/traps.c:706:
+						      : "a" (*(u32*)src));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#603: FILE: arch/i386/kernel/traps.c:711:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#605: FILE: arch/i386/kernel/traps.c:713:
+			/* we'll also try to emulate the CMPXCHG instruction (used in mutex locks).
+			   This instruction is often locked, but it's not possible to put a lock

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: arch/i386/kernel/traps.c:725:
+^I^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#621: FILE: arch/i386/kernel/traps.c:729:
+				else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#622: FILE: arch/i386/kernel/traps.c:730:
+					src = modrm_address(regs, &eip, !(prefixes & PREFIX_A32), modrm);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#625: FILE: arch/i386/kernel/traps.c:733:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#625: FILE: arch/i386/kernel/traps.c:733:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#625: FILE: arch/i386/kernel/traps.c:733:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#625: FILE: arch/i386/kernel/traps.c:733:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#625: FILE: arch/i386/kernel/traps.c:733:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                           ^

WARNING:TABSTOP: Statements should start on a tabstop
#627: FILE: arch/i386/kernel/traps.c:735:
+					    return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: arch/i386/kernel/traps.c:738:
+^I^I^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#632: FILE: arch/i386/kernel/traps.c:740:
+					if ((u8)regs->eax == *(u8*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#633: FILE: arch/i386/kernel/traps.c:741:
+						*(u8*)src = *(u8*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#633: FILE: arch/i386/kernel/traps.c:741:
+						*(u8*)src = *(u8*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#636: FILE: arch/i386/kernel/traps.c:744:
+					}
+					else {

CHECK:BRACES: Unbalanced braces around else statement
#636: FILE: arch/i386/kernel/traps.c:744:
+					else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#637: FILE: arch/i386/kernel/traps.c:745:
+						*(u8*)&(regs->eax) = *(u8*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#637: FILE: arch/i386/kernel/traps.c:745:
+						*(u8*)&(regs->eax) = *(u8*)src;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->eax
#637: FILE: arch/i386/kernel/traps.c:745:
+						*(u8*)&(regs->eax) = *(u8*)src;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#638: FILE: arch/i386/kernel/traps.c:746:
+						regs->eflags &= ~X86_EFLAGS_ZF;  /* clear Zero Flag */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#641: FILE: arch/i386/kernel/traps.c:749:
+				}
+				else if (!(prefixes & PREFIX_D32)) { /* 32 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#642: FILE: arch/i386/kernel/traps.c:750:
+					if ((u32)regs->eax == *(u32*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#643: FILE: arch/i386/kernel/traps.c:751:
+						*(u32*)src = *(u32*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#643: FILE: arch/i386/kernel/traps.c:751:
+						*(u32*)src = *(u32*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#646: FILE: arch/i386/kernel/traps.c:754:
+					}
+					else {

CHECK:BRACES: Unbalanced braces around else statement
#646: FILE: arch/i386/kernel/traps.c:754:
+					else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#647: FILE: arch/i386/kernel/traps.c:755:
+						regs->eax = *(u32*)src;

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#648: FILE: arch/i386/kernel/traps.c:756:
+						regs->eflags &= ~X86_EFLAGS_ZF;  /* clear Zero Flag */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#651: FILE: arch/i386/kernel/traps.c:759:
+				}
+				else { /* 16 bits operands */

CHECK:BRACES: Unbalanced braces around else statement
#651: FILE: arch/i386/kernel/traps.c:759:
+				else { /* 16 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#652: FILE: arch/i386/kernel/traps.c:760:
+					if ((u16)regs->eax == *(u16*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#653: FILE: arch/i386/kernel/traps.c:761:
+						*(u16*)src = *(u16*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#653: FILE: arch/i386/kernel/traps.c:761:
+						*(u16*)src = *(u16*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#656: FILE: arch/i386/kernel/traps.c:764:
+					}
+					else {

CHECK:BRACES: Unbalanced braces around else statement
#656: FILE: arch/i386/kernel/traps.c:764:
+					else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#657: FILE: arch/i386/kernel/traps.c:765:
+						*(u16*)&regs->eax = *(u16*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#657: FILE: arch/i386/kernel/traps.c:765:
+						*(u16*)&regs->eax = *(u16*)src;

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#658: FILE: arch/i386/kernel/traps.c:766:
+						regs->eflags &= ~X86_EFLAGS_ZF;  /* clear Zero Flag */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: arch/i386/kernel/traps.c:783:
+^I^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#679: FILE: arch/i386/kernel/traps.c:787:
+				else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#680: FILE: arch/i386/kernel/traps.c:788:
+					src = modrm_address(regs, &eip, !(prefixes & PREFIX_A32), modrm);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#683: FILE: arch/i386/kernel/traps.c:791:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#683: FILE: arch/i386/kernel/traps.c:791:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#683: FILE: arch/i386/kernel/traps.c:791:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#683: FILE: arch/i386/kernel/traps.c:791:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#683: FILE: arch/i386/kernel/traps.c:791:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#688: FILE: arch/i386/kernel/traps.c:796:
+^I^I^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#690: FILE: arch/i386/kernel/traps.c:798:
+					op1 = *(u8*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#691: FILE: arch/i386/kernel/traps.c:799:
+					op2 = *(u8*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#692: FILE: arch/i386/kernel/traps.c:800:
+					*(u8*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#693: FILE: arch/i386/kernel/traps.c:801:
+					*(u8*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#695: FILE: arch/i386/kernel/traps.c:803:
+				}
+				else if (!(prefixes & PREFIX_D32)) { /* 32 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#696: FILE: arch/i386/kernel/traps.c:804:
+					op1 = *(u32*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#697: FILE: arch/i386/kernel/traps.c:805:
+					op2 = *(u32*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#698: FILE: arch/i386/kernel/traps.c:806:
+					*(u32*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#699: FILE: arch/i386/kernel/traps.c:807:
+					*(u32*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#701: FILE: arch/i386/kernel/traps.c:809:
+				}
+				else { /* 16 bits operands */

CHECK:BRACES: Unbalanced braces around else statement
#701: FILE: arch/i386/kernel/traps.c:809:
+				else { /* 16 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#702: FILE: arch/i386/kernel/traps.c:810:
+					op1 = *(u16*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#703: FILE: arch/i386/kernel/traps.c:811:
+					op2 = *(u16*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#704: FILE: arch/i386/kernel/traps.c:812:
+					*(u16*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#705: FILE: arch/i386/kernel/traps.c:813:
+					*(u16*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#742: FILE: arch/i386/kernel/traps.c:850:
+		}
+		else if (*eip == 0xf0) { /* lock */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#751: FILE: arch/i386/kernel/traps.c:859:
+				printk(KERN_WARNING "Warning ! LOCK prefix found at EIP=0x%08x in"

WARNING:SPLIT_STRING: quoted string split across lines
#752: FILE: arch/i386/kernel/traps.c:860:
+				printk(KERN_WARNING "Warning ! LOCK prefix found at EIP=0x%08x in"
+				       "process %d(%s), has no effect before a software-emulated"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#752: FILE: arch/i386/kernel/traps.c:860:
+				printk(KERN_WARNING "Warning ! LOCK prefix found at EIP=0x%08x in"
+				       "process %d(%s), has no effect before a software-emulated"

WARNING:SPLIT_STRING: quoted string split across lines
#753: FILE: arch/i386/kernel/traps.c:861:
+				       "process %d(%s), has no effect before a software-emulated"
+				       "instruction\n", regs->eip, current->pid, current->comm);

WARNING:MISSING_SPACE: break quoted strings at a space character
#753: FILE: arch/i386/kernel/traps.c:861:
+				       "process %d(%s), has no effect before a software-emulated"
+				       "instruction\n", regs->eip, current->pid, current->comm);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#758: FILE: arch/i386/kernel/traps.c:866:
+		}
+		else if ((*eip & 0xe7) == 0x26) {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#793: FILE: arch/i386/kernel/traps.c:901:
+	printk(KERN_DEBUG "do_invalid_op() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#793: FILE: arch/i386/kernel/traps.c:901:
+	printk(KERN_DEBUG "do_invalid_op() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_invalid_op', this function's name, in a string
#793: FILE: arch/i386/kernel/traps.c:901:
+	printk(KERN_DEBUG "do_invalid_op() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#798: FILE: arch/i386/kernel/traps.c:906:
+	die_if_kernel("invalid operand",regs,error_code);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#798: FILE: arch/i386/kernel/traps.c:906:
+	die_if_kernel("invalid operand",regs,error_code);
 	                                    ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000049502.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 75 errors, 38 warnings, 22 checks, 676 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000049502.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
