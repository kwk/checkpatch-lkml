WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perf-nmi-for-linus

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#129: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: arch/x86/kernel/apic/hw_nmi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#158: FILE: arch/x86/kernel/apic/hw_nmi.c:25:
+static DECLARE_BITMAP(backtrace_mask, NR_CPUS) __read_mostly;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: arch/x86/kernel/apic/hw_nmi.c:27:
+static DEFINE_PER_CPU(unsigned, last_irq_sum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#197: FILE: arch/x86/kernel/apic/hw_nmi.c:64:
+		printk(KERN_WARNING "NMI backtrace for cpu %d\n", cpu);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#217: FILE: arch/x86/kernel/apic/hw_nmi.c:84:
+		return 1;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#235: FILE: arch/x86/kernel/apic/hw_nmi.c:102:
+	printk(KERN_INFO "sending NMI to all CPUs:\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/nmi.h:29:
+extern void touch_nmi_watchdog(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#333: FILE: include/linux/nmi.h:59:
+extern int proc_nmi_enabled(struct ctl_table *, int ,
                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/linux/nmi.h:59:
+extern int proc_nmi_enabled(struct ctl_table *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#333: FILE: include/linux/nmi.h:59:
+extern int proc_nmi_enabled(struct ctl_table *, int ,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#333: FILE: include/linux/nmi.h:59:
+extern int proc_nmi_enabled(struct ctl_table *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#333: FILE: include/linux/nmi.h:59:
+extern int proc_nmi_enabled(struct ctl_table *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#333: FILE: include/linux/nmi.h:59:
+extern int proc_nmi_enabled(struct ctl_table *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#333: FILE: include/linux/nmi.h:59:
+extern int proc_nmi_enabled(struct ctl_table *, int ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: include/linux/nmi.h:60:
+extern int proc_nmi_enabled(struct ctl_table *, int ,
+			void __user *, size_t *, loff_t *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#372: FILE: kernel/nmi_watchdog.c:1:
+/*

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#433: FILE: kernel/nmi_watchdog.c:62:
+__setup("nmi_watchdog=", setup_nmi_watchdog);

WARNING:RETURN_VOID: void function return statements are not generally useful
#481: FILE: kernel/nmi_watchdog.c:110:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!event"
#492: FILE: kernel/nmi_watchdog.c:121:
+	if (event == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#499: FILE: kernel/nmi_watchdog.c:128:
+			printk(KERN_INFO "nmi_watchdog: hardware not available, trying software events\n");

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#504: FILE: kernel/nmi_watchdog.c:133:
+				printk(KERN_ERR "nmi watchdog failed to create perf event on %i: %p\n", cpu, event);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#504: FILE: kernel/nmi_watchdog.c:133:
+				printk(KERN_ERR "nmi watchdog failed to create perf event on %i: %p\n", cpu, event);

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: kernel/nmi_watchdog.c:168:
+		struct perf_event *event;
+		for_each_online_cpu(cpu) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#555: FILE: kernel/nmi_watchdog.c:184:
+				printk(KERN_ERR "NMI watchdog failed configuration, "

WARNING:SPLIT_STRING: quoted string split across lines
#556: FILE: kernel/nmi_watchdog.c:185:
+				printk(KERN_ERR "NMI watchdog failed configuration, "
+					" can not be enabled\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after cpu_nfb
#597: FILE: kernel/nmi_watchdog.c:226:
+static struct notifier_block __cpuinitdata cpu_nfb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after nonmi_watchdog
#601: FILE: kernel/nmi_watchdog.c:230:
+static int __initdata nonmi_watchdog;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#608: FILE: kernel/nmi_watchdog.c:237:
+__setup("nonmi_watchdog", nonmi_watchdog_setup);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#620: FILE: kernel/nmi_watchdog.c:249:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#653: FILE: kernel/sysctl.c:703:
+		.maxlen         = sizeof (int),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 25 warnings, 6 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
