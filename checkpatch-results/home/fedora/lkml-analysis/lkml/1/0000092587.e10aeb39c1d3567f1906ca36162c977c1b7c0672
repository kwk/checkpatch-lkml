WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#48: FILE: drivers/isdn/hardware/mISDN/Kconfig:68:
+config MISDN_W6692
+	tristate "Support for cards with Winbond 6692"
+	depends on MISDN
+	depends on PCI
+	help
+	  Enable support for Winbond 6692 PCI chip based cards.
+
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#71: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: drivers/isdn/hardware/mISDN/w6692.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: drivers/isdn/hardware/mISDN/w6692.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#95: FILE: drivers/isdn/hardware/mISDN/w6692.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#122: FILE: drivers/isdn/hardware/mISDN/w6692.c:47:
+static const struct w6692map  w6692_map[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Cards>
#160: FILE: drivers/isdn/hardware/mISDN/w6692.c:85:
+static LIST_HEAD(Cards);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#195: FILE: drivers/isdn/hardware/mISDN/w6692.c:120:
+module_param_call(debug, set_debug, param_get_uint, &debug, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#197: FILE: drivers/isdn/hardware/mISDN/w6692.c:122:
+module_param(led, uint, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#199: FILE: drivers/isdn/hardware/mISDN/w6692.c:124:
+module_param(pots, uint, S_IRUGO | S_IWUSR);

CHECK:CAMELCASE: Avoid CamelCase: <ReadW6692>
#203: FILE: drivers/isdn/hardware/mISDN/w6692.c:128:
+ReadW6692(struct w6692_hw *card, u8 offset)

CHECK:CAMELCASE: Avoid CamelCase: <WriteW6692>
#209: FILE: drivers/isdn/hardware/mISDN/w6692.c:134:
+WriteW6692(struct w6692_hw *card, u8 offset, u8 value)

CHECK:CAMELCASE: Avoid CamelCase: <ReadW6692B>
#215: FILE: drivers/isdn/hardware/mISDN/w6692.c:140:
+ReadW6692B(struct w6692_ch *bc, u8 offset)

CHECK:CAMELCASE: Avoid CamelCase: <WriteW6692B>
#221: FILE: drivers/isdn/hardware/mISDN/w6692.c:146:
+WriteW6692B(struct w6692_ch *bc, u8 offset, u8 value)

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#238: FILE: drivers/isdn/hardware/mISDN/w6692.c:163:
+static const char *W6692Ver[] = {"V00", "V01", "V10", "V11"};

CHECK:CAMELCASE: Avoid CamelCase: <W6692Ver>
#238: FILE: drivers/isdn/hardware/mISDN/w6692.c:163:
+static const char *W6692Ver[] = {"V00", "V01", "V10", "V11"};

CHECK:CAMELCASE: Avoid CamelCase: <W6692Version>
#241: FILE: drivers/isdn/hardware/mISDN/w6692.c:166:
+W6692Version(struct w6692_hw *card)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: drivers/isdn/hardware/mISDN/w6692.c:172:
+	pr_notice("%s: Winbond W6692 version: %s\n", card->name,
+		W6692Ver[(val >> 6) & 3]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ph_command', this function's name, in a string
#267: FILE: drivers/isdn/hardware/mISDN/w6692.c:192:
+	pr_debug("%s: ph_command %x\n", card->name, cmd);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#323: FILE: drivers/isdn/hardware/mISDN/w6692.c:248:
+		pr_debug("%s: TE unknown state %02x dch state %02x\n",
 		              ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: drivers/isdn/hardware/mISDN/w6692.c:249:
+		pr_debug("%s: TE unknown state %02x dch state %02x\n",
+			card->name, card->state, dch->state);

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#327: FILE: drivers/isdn/hardware/mISDN/w6692.c:252:
+	pr_debug("%s: TE newstate %02x\n", card->name, dch->state);
 	              ^^

CHECK:CAMELCASE: Avoid CamelCase: <W6692_empty_Dfifo>
#331: FILE: drivers/isdn/hardware/mISDN/w6692.c:256:
+W6692_empty_Dfifo(struct w6692_hw *card, int count)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#340: FILE: drivers/isdn/hardware/mISDN/w6692.c:265:
+		if (!dch->rx_skb) {
+			pr_info("%s: D receive out of memory\n", card->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: drivers/isdn/hardware/mISDN/w6692.c:272:
+		pr_debug("%s: empty_Dfifo overrun %d\n", card->name,
+			dch->rx_skb->len + count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: drivers/isdn/hardware/mISDN/w6692.c:281:
+		snprintf(card->log, 63, "D-recv %s %d ",
+			card->name, count);

CHECK:CAMELCASE: Avoid CamelCase: <W6692_fill_Dfifo>
#362: FILE: drivers/isdn/hardware/mISDN/w6692.c:287:
+W6692_fill_Dfifo(struct w6692_hw *card)

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#383: FILE: drivers/isdn/hardware/mISDN/w6692.c:308:
+	if (test_and_set_bit(FLG_BUSY_TIMER, &dch->Flags)) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#388: FILE: drivers/isdn/hardware/mISDN/w6692.c:313:
+	dch->timer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ)/1000);
 	                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: drivers/isdn/hardware/mISDN/w6692.c:317:
+		snprintf(card->log, 63, "D-send %s %d ",
+			card->name, count);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#424: FILE: drivers/isdn/hardware/mISDN/w6692.c:349:
+static void
+handle_rxD(struct w6692_hw *card) {

CHECK:CAMELCASE: Avoid CamelCase: <recv_Dchannel>
#458: FILE: drivers/isdn/hardware/mISDN/w6692.c:383:
+		recv_Dchannel(&card->dch);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#462: FILE: drivers/isdn/hardware/mISDN/w6692.c:387:
+static void
+handle_txD(struct w6692_hw *card) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: drivers/isdn/hardware/mISDN/w6692.c:427:
+		pr_debug("%s: spurious MOC interrupt MOSR %02x\n",
+			card->name, v1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: drivers/isdn/hardware/mISDN/w6692.c:435:
+			pr_debug("%s: ph_state_change %x -> %x\n", card->name,
+				dch->state, v1);

CHECK:CAMELCASE: Avoid CamelCase: <W6692_empty_Bfifo>
#537: FILE: drivers/isdn/hardware/mISDN/w6692.c:462:
+W6692_empty_Bfifo(struct w6692_ch *wch, int count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/isdn/hardware/mISDN/w6692.c:486:
+		pr_debug("%s: empty_Bfifo incoming packet too large\n",
+			card->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/isdn/hardware/mISDN/w6692.c:496:
+		snprintf(card->log, 63, "B%1d-recv %s %d ",
+			wch->bch.nr, card->name, count);

CHECK:CAMELCASE: Avoid CamelCase: <W6692_fill_Bfifo>
#577: FILE: drivers/isdn/hardware/mISDN/w6692.c:502:
+W6692_fill_Bfifo(struct w6692_ch *wch)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: drivers/isdn/hardware/mISDN/w6692.c:521:
+	pr_debug("%s: fill Bfifo%d/%d\n", card->name,
+			count, wch->bch.tx_idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/isdn/hardware/mISDN/w6692.c:527:
+		snprintf(card->log, 63, "B%1d-send %s %d ",
+			wch->bch.nr, card->name, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: drivers/isdn/hardware/mISDN/w6692.c:596:
+	pr_debug("%s: B%d protocol %x-->%x\n", card->name,
+		wch->bch.nr, wch->bch.state, pr);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_clear_bchannel>
#677: FILE: drivers/isdn/hardware/mISDN/w6692.c:602:
+		mISDN_clear_bchannel(&wch->bch);

CHECK:BRACES: braces {} should be used on all arms of this statement
#712: FILE: drivers/isdn/hardware/mISDN/w6692.c:637:
+	if (wch->bch.tx_skb && wch->bch.tx_idx < wch->bch.tx_skb->len)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#714: FILE: drivers/isdn/hardware/mISDN/w6692.c:639:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <confirm_Bsend>
#718: FILE: drivers/isdn/hardware/mISDN/w6692.c:643:
+				confirm_Bsend(&wch->bch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/isdn/hardware/mISDN/w6692.c:666:
+				pr_debug("%s: B%d RDOV proto=%x\n", card->name,
+					wch->bch.nr, wch->bch.state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: drivers/isdn/hardware/mISDN/w6692.c:674:
+					pr_debug("%s: B%d CRC error\n",
+						card->name, wch->bch.nr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: drivers/isdn/hardware/mISDN/w6692.c:681:
+					pr_debug("%s: B%d message abort\n",
+						card->name, wch->bch.nr);

CHECK:CAMELCASE: Avoid CamelCase: <recv_Bchannel>
#772: FILE: drivers/isdn/hardware/mISDN/w6692.c:697:
+			recv_Bchannel(&wch->bch, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: drivers/isdn/hardware/mISDN/w6692.c:705:
+			pr_debug("%s: B%d RDOV proto=%x\n", card->name,
+				wch->bch.nr, wch->bch.state);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wch->bch.rx_skb->len > 0'
#788: FILE: drivers/isdn/hardware/mISDN/w6692.c:713:
+			if (test_bit(FLG_TRANSPARENT, &wch->bch.Flags) &&
+			    wch->bch.rx_skb && (wch->bch.rx_skb->len > 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: drivers/isdn/hardware/mISDN/w6692.c:722:
+			pr_debug("%s: B%d RDOV IRQ proto=%x\n", card->name,
+				wch->bch.nr, wch->bch.state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: drivers/isdn/hardware/mISDN/w6692.c:734:
+			pr_debug("%s: B%d star %02x\n", card->name,
+				wch->bch.nr, star);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: drivers/isdn/hardware/mISDN/w6692.c:738:
+			pr_debug("%s: B%d XDOW proto=%x\n", card->name,
+				wch->bch.nr, wch->bch.state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: drivers/isdn/hardware/mISDN/w6692.c:756:
+		pr_debug("%s: B%d XDUN proto=%x\n", card->name,
+			wch->bch.nr, wch->bch.state);

WARNING:TYPO_SPELLING: 'reqest' may be misspelled - perhaps 'request'?
#854: FILE: drivers/isdn/hardware/mISDN/w6692.c:779:
+		/* possible a shared  IRQ reqest */
 		                          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: drivers/isdn/hardware/mISDN/w6692.c:817:
+		pr_debug("%s: D-Channel Busy RBCH %02x STAR %02x\n",
+			card->name, rbch, star);

CHECK:BRACES: Unbalanced braces around else statement
#895: FILE: drivers/isdn/hardware/mISDN/w6692.c:820:
+		else {

CHECK:CAMELCASE: Avoid CamelCase: <initW6692>
#910: FILE: drivers/isdn/hardware/mISDN/w6692.c:835:
+void initW6692(struct w6692_hw *card)

WARNING:TYPO_SPELLING: 'oscilator' may be misspelled - perhaps 'oscillator'?
#940: FILE: drivers/isdn/hardware/mISDN/w6692.c:865:
+		 * Pin 79 is connected to the oscilator circuit so we
 		                              ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: drivers/isdn/hardware/mISDN/w6692.c:887:
+				pr_notice("%s: W_XADDR=%02x\n",
+					card->name, val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: drivers/isdn/hardware/mISDN/w6692.c:923:
+			pr_notice("%s: IRQ %d count %d\n", card->name,
+				card->irq, card->irqcnt);

CHECK:BRACES: braces {} should be used on all arms of this statement
#999: FILE: drivers/isdn/hardware/mISDN/w6692.c:924:
+		if (!card->irqcnt) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1003: FILE: drivers/isdn/hardware/mISDN/w6692.c:928:
+		} else

CHECK:CAMELCASE: Avoid CamelCase: <mISDNchannel>
#1011: FILE: drivers/isdn/hardware/mISDN/w6692.c:936:
+w6692_l2l1B(struct mISDNchannel *ch, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <mISDNhead>
#1017: FILE: drivers/isdn/hardware/mISDN/w6692.c:942:
+	struct mISDNhead *hh = mISDN_HEAD_P(skb);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_HEAD_P>
#1017: FILE: drivers/isdn/hardware/mISDN/w6692.c:942:
+	struct mISDNhead *hh = mISDN_HEAD_P(skb);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1025: FILE: drivers/isdn/hardware/mISDN/w6692.c:950:
+		if (ret > 0) { /* direct TX */
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1032: FILE: drivers/isdn/hardware/mISDN/w6692.c:957:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1044: FILE: drivers/isdn/hardware/mISDN/w6692.c:969:
+			_queue_data(ch, PH_ACTIVATE_IND, MISDN_ID_ANY, 0,
+				NULL, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: drivers/isdn/hardware/mISDN/w6692.c:977:
+		_queue_data(ch, PH_DEACTIVATE_IND, MISDN_ID_ANY, 0,
+			NULL, GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_ctrl_req>
#1066: FILE: drivers/isdn/hardware/mISDN/w6692.c:991:
+channel_bctrl(struct bchannel *bch, struct mISDN_ctrl_req *cq)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freebchannel>
#1134: FILE: drivers/isdn/hardware/mISDN/w6692.c:1059:
+			mISDN_freebchannel(bch);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNdevice>
#1159: FILE: drivers/isdn/hardware/mISDN/w6692.c:1084:
+	struct mISDNdevice	*dev = container_of(ch, struct mISDNdevice, D);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1171: FILE: drivers/isdn/hardware/mISDN/w6692.c:1096:
+		if (ret > 0) { /* direct TX */
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1177: FILE: drivers/isdn/hardware/mISDN/w6692.c:1102:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1242: FILE: drivers/isdn/hardware/mISDN/w6692.c:1167:
+		_queue_data(&dch->dev.D, cmd, MISDN_ID_ANY, 0, NULL,
+			GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: drivers/isdn/hardware/mISDN/w6692.c:1172:
+		_queue_data(&dch->dev.D, cmd, MISDN_ID_ANY, 0, NULL,
+			GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1251: FILE: drivers/isdn/hardware/mISDN/w6692.c:1176:
+		pr_debug("%s: %s unknown command %x\n", card->name,
+			__func__, cmd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1261: FILE: drivers/isdn/hardware/mISDN/w6692.c:1186:
+	pr_debug("%s: %s dev(%d) open from %p\n", card->name, __func__,
+		card->dch.dev.id, __builtin_return_address(1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: drivers/isdn/hardware/mISDN/w6692.c:1196:
+		_queue_data(rq->ch, PH_ACTIVATE_IND, MISDN_ID_ANY,
+		    0, NULL, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: drivers/isdn/hardware/mISDN/w6692.c:1224:
+		pr_debug("%s: dev(%d) close from %p\n", card->name,
+			dch->dev.id, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1319: FILE: drivers/isdn/hardware/mISDN/w6692.c:1244:
+		pr_info("%s: config port %x-%x already in use\n", card->name,
+		       card->addr, card->addr + 255);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_unregister_device>
#1359: FILE: drivers/isdn/hardware/mISDN/w6692.c:1284:
+	mISDN_unregister_device(&card->dch.dev);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freedchannel>
#1363: FILE: drivers/isdn/hardware/mISDN/w6692.c:1288:
+	mISDN_freedchannel(&card->dch);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initdchannel>
#1385: FILE: drivers/isdn/hardware/mISDN/w6692.c:1310:
+	mISDN_initdchannel(&card->dch, MAX_DFRAME_LEN_L1, W6692_ph_bh);

CHECK:CAMELCASE: Avoid CamelCase: <Dprotocols>
#1386: FILE: drivers/isdn/hardware/mISDN/w6692.c:1311:
+	card->dch.dev.Dprotocols = (1 << ISDN_P_TE_S0);

CHECK:CAMELCASE: Avoid CamelCase: <Bprotocols>
#1389: FILE: drivers/isdn/hardware/mISDN/w6692.c:1314:
+	card->dch.dev.Bprotocols = (1 << (ISDN_P_B_RAW & ISDN_P_B_MASK)) |

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initbchannel>
#1394: FILE: drivers/isdn/hardware/mISDN/w6692.c:1319:
+		mISDN_initbchannel(&card->bc[i].bch, MAX_DATA_MEM);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_register_device>
#1406: FILE: drivers/isdn/hardware/mISDN/w6692.c:1331:
+	err = mISDN_register_device(&card->dch.dev, &card->pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: drivers/isdn/hardware/mISDN/w6692.c:1332:
+	err = mISDN_register_device(&card->dch.dev, &card->pdev->dev,
+		card->name);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1436: FILE: drivers/isdn/hardware/mISDN/w6692.c:1361:
+static int __devinit

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*card)...) over kzalloc(sizeof(struct w6692_hw)...)
#1443: FILE: drivers/isdn/hardware/mISDN/w6692.c:1368:
+	card = kzalloc(sizeof(struct w6692_hw), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1445: FILE: drivers/isdn/hardware/mISDN/w6692.c:1370:
+	if (!card) {
+		pr_info("No kmem for w6692 card\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1456: FILE: drivers/isdn/hardware/mISDN/w6692.c:1381:
+	printk(KERN_INFO "mISDN_w6692: found adapter %s at %s\n",

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1468: FILE: drivers/isdn/hardware/mISDN/w6692.c:1393:
+static void __devexit

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#1477: FILE: drivers/isdn/hardware/mISDN/w6692.c:1402:
+			pr_notice("%s: drvdata allready removed\n", __func__);
 			                       ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1522: FILE: drivers/isdn/hardware/mISDN/w6692.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1540: FILE: drivers/isdn/hardware/mISDN/w6692.h:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1541: FILE: drivers/isdn/hardware/mISDN/w6692.h:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092587.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 19 warnings, 75 checks, 1650 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092587.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
