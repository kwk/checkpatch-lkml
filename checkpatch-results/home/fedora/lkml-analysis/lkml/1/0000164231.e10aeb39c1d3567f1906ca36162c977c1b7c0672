WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#38: FILE: Makefile:4:
+EXTRAVERSION = .19
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#57: FILE: arch/powerpc/kernel/align.c:655:
+		ptr = (char *) &current->thread.TS_FPR(reg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#59: FILE: arch/powerpc/kernel/align.c:657:
+		ptr = (char *) &current->thread.vr[reg - 32];

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#105: FILE: drivers/ata/pata_via.c:114:
+	{ "vt6410",	PCI_DEVICE_ID_VIA_6410,     0x00, 0x2f, VIA_UDMA_133 | VIA_BAD_AST | VIA_NO_ENABLES },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#106: FILE: drivers/ata/pata_via.c:115:
+	{ "vt6415",	PCI_DEVICE_ID_VIA_6415,     0x00, 0x2f, VIA_UDMA_133 | VIA_BAD_AST | VIA_NO_ENABLES },

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#221: FILE: drivers/pci/intel-iommu.c:75:
+static int rwbf_quirk = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#239: FILE: drivers/pci/intel-iommu.c:2458:
+static void __devinit quirk_iommu_rwbf(struct pci_dev *dev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#242: FILE: drivers/pci/intel-iommu.c:2461:
+	/* Mobile 4 Series Chipset neglects to set RWBF capability,
+	   but needs it */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#242: FILE: drivers/pci/intel-iommu.c:2461:
+	   but needs it */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#243: FILE: drivers/pci/intel-iommu.c:2462:
+	printk(KERN_INFO "DMAR: Forcing write-buffer flush capability\n");

WARNING:SPLIT_STRING: quoted string split across lines
#273: FILE: fs/ext2/super.c:1182:
+		ext2_warning(sb, __func__, "refusing change of xip flag "
+			     "with busy inodes while remounting");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#318: FILE: fs/ext4/balloc.c:343:
+		 * if not uninit if bh is uptodate,
 		                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#319: FILE: fs/ext4/balloc.c:344:
+		 * bitmap is also uptodate
 		                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#327: FILE: fs/ext4/balloc.c:352:
+	 * safely mark the bitmap as uptodate now.
 	                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#328: FILE: fs/ext4/balloc.c:353:
+	 * We do it here so the bitmap uptodate bit
 	                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'physcial' may be misspelled - perhaps 'physical'?
#342: FILE: fs/ext4/balloc.c:867:
+ * @block:			start physcial block to add to the block group
           			      ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: fs/ext4/balloc.c:875:
+void ext4_add_groupblocks(handle_t *handle, struct super_block *sb,
+			 ext4_fsblk_t block, unsigned long count)

WARNING:SPLIT_STRING: quoted string split across lines
#391: FILE: fs/ext4/balloc.c:916:
+			   "Adding blocks in system zones - "
+			    "Block = %llu, count = %lu",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: fs/ext4/balloc.c:947:
+		if (!ext4_clear_bit_atomic(sb_bgl_lock(sbi, block_group),
+						bit + i, bitmap_bh->b_data)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: fs/ext4/balloc.c:964:
+		ext4_group_t flex_group = ext4_flex_group(sbi, block_group);
+		spin_lock(sb_bgl_lock(sbi, flex_group));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around grp->bb_state
#447: FILE: fs/ext4/balloc.c:972:
+	set_bit(EXT4_GROUP_INFO_NEED_INIT_BIT, &(grp->bb_state));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:RETURN_VOID: void function return statements are not generally useful
#466: FILE: fs/ext4/balloc.c:991:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: fs/ext4/ext4.h:995:
+extern void ext4_free_blocks_sb(handle_t *handle, struct super_block *sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: fs/ext4/ext4.h:998:
+extern void ext4_add_groupblocks(handle_t *handle, struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: fs/ext4/ext4.h:999:
+extern void ext4_add_groupblocks(handle_t *handle, struct super_block *sb,
+				ext4_fsblk_t block, unsigned long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: fs/ext4/ext4.h:1047:
+extern int ext4_mb_add_groupinfo(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: fs/ext4/ext4.h:1048:
+extern int ext4_mb_add_groupinfo(struct super_block *sb,
 		ext4_group_t i, struct ext4_group_desc *desc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#519: FILE: fs/ext4/ext4.h:1051:
+extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#519: FILE: fs/ext4/ext4.h:1051:
+extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_group_t' should also have an identifier name
#519: FILE: fs/ext4/ext4.h:1051:
+extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: fs/ext4/ext4.h:1052:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#520: FILE: fs/ext4/ext4.h:1052:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_group_t' should also have an identifier name
#520: FILE: fs/ext4/ext4.h:1052:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#520: FILE: fs/ext4/ext4.h:1052:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: fs/ext4/ext4.h:1053:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,
+						ext4_group_t, int);

CHECK:SPACING: No space is necessary after a cast
#535: FILE: fs/ext4/ext4.h:1181:
+		return (loff_t) le32_to_cpu(raw_inode->i_size_lo);

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#544: FILE: fs/ext4/ext4.h:1258:
+ * Add new method to test wether block and inode bitmaps are properly
                           ^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#546: FILE: fs/ext4/ext4.h:1260:
+ * to mark the bitmap uptodate. We need to also zero-out the bitmap
                       ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <BH_JBDPrivateStart>
#548: FILE: fs/ext4/ext4.h:1262:
+#define BH_BITMAP_UPTODATE BH_JBDPrivateStart

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#555: FILE: fs/ext4/ext4.h:1269:
+}
+static inline void set_bitmap_uptodate(struct buffer_head *bh)

CHECK:SPACING: No space is necessary after a cast
#598: FILE: fs/ext4/hash.c:41:
+	const unsigned char *ucp = (const unsigned char *) name;

CHECK:SPACING: No space is necessary after a cast
#601: FILE: fs/ext4/hash.c:44:
+		hash = hash1 + (hash0 ^ (((int) *ucp++) * 7152373));

CHECK:SPACING: No space is necessary after a cast
#614: FILE: fs/ext4/hash.c:57:
+	const signed char *scp = (const signed char *) name;

CHECK:SPACING: No space is necessary after a cast
#618: FILE: fs/ext4/hash.c:60:
+		hash = hash1 + (hash0 ^ (((int) *scp++) * 7152373));

CHECK:SPACING: No space is necessary after a cast
#635: FILE: fs/ext4/hash.c:74:
+	const signed char *scp = (const signed char *) msg;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#641: FILE: fs/ext4/hash.c:80:
+	if (len > num*4)
 	             ^

CHECK:SPACING: No space is necessary after a cast
#646: FILE: fs/ext4/hash.c:85:
+		val = ((int) scp[i]) + (val << 8);

CHECK:SPACING: No space is necessary after a cast
#663: FILE: fs/ext4/hash.c:102:
+	const unsigned char *ucp = (const unsigned char *) msg;

CHECK:SPACING: No space is necessary after a cast
#672: FILE: fs/ext4/hash.c:113:
+		val = ((int) ucp[i]) + (val << 8);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#758: FILE: fs/ext4/ialloc.c:138:
+		 * if not uninit if bh is uptodate,
 		                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#759: FILE: fs/ext4/ialloc.c:139:
+		 * bitmap is also uptodate
 		                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#767: FILE: fs/ext4/ialloc.c:147:
+	 * safely mark the bitmap as uptodate now.
 	                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#768: FILE: fs/ext4/ialloc.c:148:
+	 * We do it here so the bitmap uptodate bit
 	                               ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: fs/ext4/ialloc.c:600:
+static int ext4_claim_inode(struct super_block *sb,
+			struct buffer_head *inode_bitmap_bh,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: fs/ext4/ialloc.c:615:
+	if ((group == 0 && ino < EXT4_FIRST_INO(sb)) ||
+			ino > EXT4_INODES_PER_GROUP(sb)) {

WARNING:SPLIT_STRING: quoted string split across lines
#806: FILE: fs/ext4/ialloc.c:619:
+			   "reserved inode or inode > inodes count - "
+			   "block_group = %lu, inode=%lu", group,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#811: FILE: fs/ext4/ialloc.c:624:
+	 * table then we need to initialize up to this inode. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#813: FILE: fs/ext4/ialloc.c:626:
+	if (EXT4_HAS_RO_COMPAT_FEATURE(sb, EXT4_FEATURE_RO_COMPAT_GDT_CSUM)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#840: FILE: fs/ext4/ialloc.c:653:
+	if (S_ISDIR(mode)) {
+		le16_add_cpu(&gdp->bg_used_dirs_count, 1);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: fs/ext4/ialloc.c:750:
+			if (!ext4_claim_inode(sb, bitmap_bh,
+						ino, group, mode)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1006: FILE: fs/ext4/inode.c:1681:
+			BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1007: FILE: fs/ext4/inode.c:1682:
+			BUG_ON(PageWriteback(page));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1069: FILE: fs/ext4/inode.c:2382:
+			printk(KERN_CRIT "%s: jbd2_start: "

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1094: FILE: fs/ext4/mballoc.c:337:
+static void ext4_mb_generate_from_pa(struct super_block *sb, void *bitmap,
+					ext4_group_t group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: fs/ext4/mballoc.c:339:
+static void ext4_mb_generate_from_freelist(struct super_block *sb, void *bitmap,
+						ext4_group_t group);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1122: FILE: fs/ext4/mballoc.c:802:
+ ^I^Ilock_buffer(bh[i]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1122: FILE: fs/ext4/mballoc.c:802:
+ ^I^Ilock_buffer(bh[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: fs/ext4/mballoc.c:802:
+ ^I^Ilock_buffer(bh[i]);$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1140: FILE: fs/ext4/mballoc.c:820:
+			 * if not uninit if bh is uptodate,
 			                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1141: FILE: fs/ext4/mballoc.c:821:
+			 * bitmap is also uptodate
 			                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1150: FILE: fs/ext4/mballoc.c:830:
+		 * safely mark the bitmap as uptodate now.
 		                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1151: FILE: fs/ext4/mballoc.c:831:
+		 * We do it here so the bitmap uptodate bit
 		                               ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1205: FILE: fs/ext4/mballoc.c:933:
+ ^Istruct ext4_group_info *grp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1205: FILE: fs/ext4/mballoc.c:933:
+ ^Istruct ext4_group_info *grp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: fs/ext4/mballoc.c:933:
+ ^Istruct ext4_group_info *grp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1206: FILE: fs/ext4/mballoc.c:934:
+ ^Istruct ext4_sb_info *sbi = EXT4_SB(sb);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1206: FILE: fs/ext4/mballoc.c:934:
+ ^Istruct ext4_sb_info *sbi = EXT4_SB(sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: fs/ext4/mballoc.c:934:
+ ^Istruct ext4_sb_info *sbi = EXT4_SB(sb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1207: FILE: fs/ext4/mballoc.c:935:
+ ^Istruct inode *inode = sbi->s_buddy_cache;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1207: FILE: fs/ext4/mballoc.c:935:
+ ^Istruct inode *inode = sbi->s_buddy_cache;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1207: FILE: fs/ext4/mballoc.c:935:
+ ^Istruct inode *inode = sbi->s_buddy_cache;$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1239: FILE: fs/ext4/mballoc.c:975:
+			 * are not uptodate that implies
 			           ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1359: FILE: fs/ext4/mballoc.c:1804:
+	for (i = 0; i < groups_per_page; i++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1374: FILE: fs/ext4/mballoc.c:1819:
+void ext4_mb_put_buddy_cache_lock(struct super_block *sb,
+					ext4_group_t group, int locked_group)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1393: FILE: fs/ext4/mballoc.c:1838:
+	for (i = 0; i < locked_group; i++) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1403: FILE: fs/ext4/mballoc.c:1848:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1407: FILE: fs/ext4/mballoc.c:1852:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1444: FILE: fs/ext4/mballoc.c:1889:
+		BUG_ON(page->mapping != inode->i_mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1452: FILE: fs/ext4/mballoc.c:1897:
+	if (page == NULL || !PageUptodate(page)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1473: FILE: fs/ext4/mballoc.c:1918:
+		BUG_ON(page->mapping != inode->i_mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1481: FILE: fs/ext4/mballoc.c:1926:
+	if (page == NULL || !PageUptodate(page)) {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1524: FILE: fs/ext4/mballoc.c:2547:
+	meta_group_info[i]->bb_free_root.rb_node = NULL;;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1622: FILE: fs/ext4/mballoc.c:2877:
+			entry = list_entry(sbi->s_committed_transaction.next,
+					struct ext4_free_data, list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1628: FILE: fs/ext4/mballoc.c:2882:
+		if (entry == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around db->bb_free_root
#1651: FILE: fs/ext4/mballoc.c:2898:
+		rb_erase(&entry->node, &(db->bb_free_root));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1685: FILE: fs/ext4/mballoc.c:3070:
+		kmem_cache_create("ext4_free_block_extents",
+				     sizeof(struct ext4_free_data),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ext4_free_ext_cachep"
#1687: FILE: fs/ext4/mballoc.c:3072:
+	if (ext4_free_ext_cachep == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1723: FILE: fs/ext4/mballoc.c:3180:
+	mb_set_bits(NULL, bitmap_bh->b_data,
+				ac->ac_b_ex.fe_start, ac->ac_b_ex.fe_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1742: FILE: fs/ext4/mballoc.c:3624:
+static void ext4_mb_generate_from_freelist(struct super_block *sb, void *bitmap,
+						ext4_group_t group)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around grp->bb_free_root
#1749: FILE: fs/ext4/mballoc.c:3631:
+	n = rb_first(&(grp->bb_free_root));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1754: FILE: fs/ext4/mballoc.c:3636:
+		mb_set_bits(sb_bgl_lock(EXT4_SB(sb), group),
+				bitmap, entry->start_blk,

WARNING:RETURN_VOID: void function return statements are not generally useful
#1759: FILE: fs/ext4/mballoc.c:3641:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1808: FILE: fs/ext4/mballoc.c:4770:
+static int can_merge(struct ext4_free_data *entry1,
+			struct ext4_free_data *entry2)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry1->t_tid == entry2->t_tid'
#1810: FILE: fs/ext4/mballoc.c:4772:
+	if ((entry1->t_tid == entry2->t_tid) &&
+	    (entry1->group == entry2->group) &&
+	    ((entry1->start_blk + entry1->count) == entry2->start_blk))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry1->group == entry2->group'
#1810: FILE: fs/ext4/mballoc.c:4772:
+	if ((entry1->t_tid == entry2->t_tid) &&
+	    (entry1->group == entry2->group) &&
+	    ((entry1->start_blk + entry1->count) == entry2->start_blk))

WARNING:TYPO_SPELLING: 'exent' may be misspelled - perhaps 'extent'?
#1845: FILE: fs/ext4/mballoc.c:4798:
+		/* first free block exent. We need to
 		                    ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1846: FILE: fs/ext4/mballoc.c:4799:
+		/* first free block exent. We need to
+		   protect buddy cache from being freed,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1849: FILE: fs/ext4/mballoc.c:4802:
+		 * blocks */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1856: FILE: fs/ext4/mballoc.c:4809:
+		if (block < entry->start_blk)
[...]
+		else if (block >= (entry->start_blk + entry->count))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1860: FILE: fs/ext4/mballoc.c:4813:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1862: FILE: fs/ext4/mballoc.c:4815:
+			ext4_error(sb, __func__,
+			    "Double free of blocks %d (%d %d)\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around db->bb_free_root
#1905: FILE: fs/ext4/mballoc.c:4831:
+			rb_erase(node, &(db->bb_free_root));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around db->bb_free_root
#1924: FILE: fs/ext4/mballoc.c:4844:
+			rb_erase(node, &(db->bb_free_root));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1988: FILE: fs/ext4/mballoc.c:4984:
+		mb_clear_bits(sb_bgl_lock(sbi, block_group), bitmap_bh->b_data,
+				bit, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1998: FILE: fs/ext4/mballoc.c:4994:
+		mb_clear_bits(sb_bgl_lock(sbi, block_group), bitmap_bh->b_data,
+				bit, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2128: FILE: fs/ext4/mballoc.h:296:
+static inline ext4_fsblk_t ext4_grp_offs_to_block(struct super_block *sb,
 					struct ext4_free_extent *fex)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2159: FILE: fs/ext4/namei.c:1385:
+	dxtrace(printk(KERN_DEBUG "Creating index: inode %lu\n", dir->i_ino));

CHECK:SPACING: No space is necessary after a cast
#2171: FILE: fs/ext4/namei.c:1398:
+	if ((char *) de >= (((char *) root) + blocksize)) {

CHECK:SPACING: No space is necessary after a cast
#2178: FILE: fs/ext4/namei.c:1405:
+	len = ((char *) root) + blocksize - (char *) de;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2243: FILE: fs/ext4/resize.c:789:
 
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#2389: FILE: fs/ext4/super.c:2172:
+	if (i & EXT2_FLAGS_UNSIGNED_HASH)
[...]
+	else if ((i & EXT2_FLAGS_SIGNED_HASH) == 0) {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2420: FILE: fs/ext4/super.c:2215:
+		printk(KERN_WARNING "EXT4-fs: bad geometry: first data"

WARNING:SPLIT_STRING: quoted string split across lines
#2421: FILE: fs/ext4/super.c:2216:
+		printk(KERN_WARNING "EXT4-fs: bad geometry: first data"
+		       "block %u is beyond end of filesystem (%llu)\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2421: FILE: fs/ext4/super.c:2216:
+		printk(KERN_WARNING "EXT4-fs: bad geometry: first data"
+		       "block %u is beyond end of filesystem (%llu)\n",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2430: FILE: fs/ext4/super.c:2225:
+	if (blocks_count > ((uint64_t)1<<32) - EXT4_DESC_PER_BLOCK(sb)) {
 	                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2431: FILE: fs/ext4/super.c:2226:
+		printk(KERN_WARNING "EXT4-fs: groups count too large: %u "

WARNING:SPLIT_STRING: quoted string split across lines
#2432: FILE: fs/ext4/super.c:2227:
+		printk(KERN_WARNING "EXT4-fs: groups count too large: %u "
+		       "(block count %llu, first data block %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#2433: FILE: fs/ext4/super.c:2228:
+		       "(block count %llu, first data block %u, "
+		       "blocks per group %lu)\n", sbi->s_groups_count,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2468: FILE: fs/jbd2/commit.c:183:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#2470: FILE: fs/jbd2/commit.c:185:
+		       "JBD2: wait_on_commit_record: sync failed on %s - "
+		       "disabling barriers\n", journal->j_devname);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2545: FILE: include/linux/pid.h:130:
+ * ^Ins_of_pid() is expected to be called for a process (task) that has$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2546: FILE: include/linux/pid.h:131:
+ * ^Ian attached 'struct pid' (see attach_pid(), detach_pid()) i.e @pid$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2547: FILE: include/linux/pid.h:132:
+ * ^Iis expected to be non-NULL. If @pid is NULL, caller should handle$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2548: FILE: include/linux/pid.h:133:
+ * ^Ithe resulting NULL pid-ns.$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2553: FILE: include/linux/pid.h:138:
+	struct pid_namespace *ns = NULL;
+	if (pid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2572: FILE: ipc/mqueue.c:502:
+			sig_i.si_pid = task_tgid_nr_ns(current,
+						ns_of_pid(info->notify_owner));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164231.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 68 warnings, 64 checks, 2325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164231.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
