ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: arch/i386/kernel/vmi.c:581:
+#define BUILDIO(bwl,type) \
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#127: FILE: arch/i386/kernel/vmi.c:582:
+static void vmi_out##bwl(type value, int port) { \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#131: FILE: arch/i386/kernel/vmi.c:586:
+static type vmi_in##bwl(int port) { \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#138: FILE: arch/i386/kernel/vmi.c:593:
+static void vmi_outs##bwl(int port, const void *addr, unsigned long count) { \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#143: FILE: arch/i386/kernel/vmi.c:598:
+static void vmi_ins##bwl(int port, void *addr, unsigned long count) { \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: arch/i386/kernel/vmi.c:602:
+} $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: arch/i386/kernel/vmi.c:604:
+BUILDIO(b,unsigned char)
          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: arch/i386/kernel/vmi.c:605:
+BUILDIO(w,unsigned short)
          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: arch/i386/kernel/vmi.c:606:
+BUILDIO(l,unsigned int)
          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/asm-i386/io.h:275:
+#define	__BUILDOUTINST(bwl,bw,value,port); \
        	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/asm-i386/io.h:275:
+#define	__BUILDOUTINST(bwl,bw,value,port); \
        	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/asm-i386/io.h:275:
+#define	__BUILDOUTINST(bwl,bw,value,port); \
        	                           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#195: FILE: include/asm-i386/io.h:275:
+#define	__BUILDOUTINST(bwl,bw,value,port); \
+	__asm__ __volatile__("out" #bwl " %" #bw "0, %w1" : : "a"(value), "Nd"(port));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#195: FILE: include/asm-i386/io.h:275:
+#define	__BUILDOUTINST(bwl,bw,value,port); \
+	__asm__ __volatile__("out" #bwl " %" #bw "0, %w1" : : "a"(value), "Nd"(port));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#196: FILE: include/asm-i386/io.h:276:
+	__asm__ __volatile__("out" #bwl " %" #bw "0, %w1" : : "a"(value), "Nd"(port));
 	                                                                   ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/io.h:278:
+#define	__BUILDININST(bwl,bw,value,port); \
        	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/io.h:278:
+#define	__BUILDININST(bwl,bw,value,port); \
        	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/asm-i386/io.h:278:
+#define	__BUILDININST(bwl,bw,value,port); \
        	                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#198: FILE: include/asm-i386/io.h:278:
+#define	__BUILDININST(bwl,bw,value,port); \
+	__asm__ __volatile__("in" #bwl " %w1, %" #bw "0" : "=a"(value) : "Nd"(port));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#198: FILE: include/asm-i386/io.h:278:
+#define	__BUILDININST(bwl,bw,value,port); \
+	__asm__ __volatile__("in" #bwl " %w1, %" #bw "0" : "=a"(value) : "Nd"(port));

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#199: FILE: include/asm-i386/io.h:279:
+	__asm__ __volatile__("in" #bwl " %w1, %" #bw "0" : "=a"(value) : "Nd"(port));
 	                                                                  ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/asm-i386/io.h:281:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/asm-i386/io.h:281:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/asm-i386/io.h:281:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
                                       ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#201: FILE: include/asm-i386/io.h:281:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
+	__asm__ __volatile__("rep; outs" #bwl : "+S"(addr), "+c"(count) : "d"(port));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#201: FILE: include/asm-i386/io.h:281:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
+	__asm__ __volatile__("rep; outs" #bwl : "+S"(addr), "+c"(count) : "d"(port));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/asm-i386/io.h:284:
+#define __BUILDINSINST(bwl,addr,count,port) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/asm-i386/io.h:284:
+#define __BUILDINSINST(bwl,addr,count,port) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/asm-i386/io.h:284:
+#define __BUILDINSINST(bwl,addr,count,port) \
                                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#204: FILE: include/asm-i386/io.h:284:
+#define __BUILDINSINST(bwl,addr,count,port) \
+	__asm__ __volatile__("rep; ins" #bwl : "+D"(addr), "+c"(count) : "d"(port));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#204: FILE: include/asm-i386/io.h:284:
+#define __BUILDINSINST(bwl,addr,count,port) \
+	__asm__ __volatile__("rep; ins" #bwl : "+D"(addr), "+c"(count) : "d"(port));

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#214: FILE: include/asm-i386/io.h:322:
+static inline void native_out##bwl(unsigned type value, int port) { \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#218: FILE: include/asm-i386/io.h:325:
+static inline void out##bwl##_local(unsigned type value, int port) { \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#219: FILE: include/asm-i386/io.h:326:
+	__BUILDOUTINST(bwl,bw,value,port); \
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#219: FILE: include/asm-i386/io.h:326:
+	__BUILDOUTINST(bwl,bw,value,port); \
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#219: FILE: include/asm-i386/io.h:326:
+	__BUILDOUTINST(bwl,bw,value,port); \
 	                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#221: FILE: include/asm-i386/io.h:328:
+static inline unsigned type native_in##bwl(int port) { \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#226: FILE: include/asm-i386/io.h:333:
+static inline unsigned type in##bwl##_local(int port) { \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#228: FILE: include/asm-i386/io.h:335:
+	__BUILDININST(bwl,bw,value,port); \
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#228: FILE: include/asm-i386/io.h:335:
+	__BUILDININST(bwl,bw,value,port); \
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#228: FILE: include/asm-i386/io.h:335:
+	__BUILDININST(bwl,bw,value,port); \
 	                          ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#239: FILE: include/asm-i386/io.h:357:
+static inline void native_outs##bwl(int port, const void *addr, unsigned long count) { \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#243: FILE: include/asm-i386/io.h:360:
+static inline void native_ins##bwl(int port, void *addr, unsigned long count) { \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#246: FILE: include/asm-i386/io.h:363:
+static inline void outs##bwl(int port, const void *addr, unsigned long count) { \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/asm-i386/io.h:364:
+	__BUILDOUTSINST(bwl,addr,count,port); \
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/asm-i386/io.h:364:
+	__BUILDOUTSINST(bwl,addr,count,port); \
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/asm-i386/io.h:364:
+	__BUILDOUTSINST(bwl,addr,count,port); \
 	                              ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#249: FILE: include/asm-i386/io.h:366:
+static inline void ins##bwl(int port, void *addr, unsigned long count) { \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: include/asm-i386/io.h:367:
+	__BUILDINSINST(bwl,addr,count,port); \
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: include/asm-i386/io.h:367:
+	__BUILDINSINST(bwl,addr,count,port); \
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: include/asm-i386/io.h:367:
+	__BUILDINSINST(bwl,addr,count,port); \
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: include/asm-i386/paravirt.h:155:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: include/asm-i386/paravirt.h:664:
+#define __BUILDOUTINST(bwl,bw,value,port) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: include/asm-i386/paravirt.h:664:
+#define __BUILDOUTINST(bwl,bw,value,port) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: include/asm-i386/paravirt.h:664:
+#define __BUILDOUTINST(bwl,bw,value,port) \
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: include/asm-i386/paravirt.h:665:
+        paravirt_ops.out##bwl(value, port)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: include/asm-i386/paravirt.h:665:
+        paravirt_ops.out##bwl(value, port)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: include/asm-i386/paravirt.h:666:
+#define __BUILDININST(bwl,bw,value,port) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: include/asm-i386/paravirt.h:666:
+#define __BUILDININST(bwl,bw,value,port) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: include/asm-i386/paravirt.h:666:
+#define __BUILDININST(bwl,bw,value,port) \
                                   ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#293: FILE: include/asm-i386/paravirt.h:666:
+#define __BUILDININST(bwl,bw,value,port) \
+        do { value = paravirt_ops.in##bwl(port); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: include/asm-i386/paravirt.h:667:
+        do { value = paravirt_ops.in##bwl(port); } while (0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: include/asm-i386/paravirt.h:667:
+        do { value = paravirt_ops.in##bwl(port); } while (0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-i386/paravirt.h:668:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-i386/paravirt.h:668:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-i386/paravirt.h:668:
+#define __BUILDOUTSINST(bwl,addr,count,port) \
                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: include/asm-i386/paravirt.h:669:
+        paravirt_ops.outs##bwl(port, addr, count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: include/asm-i386/paravirt.h:669:
+        paravirt_ops.outs##bwl(port, addr, count)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: include/asm-i386/paravirt.h:670:
+#define __BUILDINSINST(bwl,addr,count,port) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: include/asm-i386/paravirt.h:670:
+#define __BUILDINSINST(bwl,addr,count,port) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: include/asm-i386/paravirt.h:670:
+#define __BUILDINSINST(bwl,addr,count,port) \
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: include/asm-i386/paravirt.h:671:
+        paravirt_ops.ins##bwl(port, addr, count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: include/asm-i386/paravirt.h:671:
+        paravirt_ops.ins##bwl(port, addr, count)$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388392.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 62 errors, 11 warnings, 0 checks, 227 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388392.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
