WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Subject: [PATCH 2/4] [Target_Core_Mod]: Update core code for new reservations infrastructure

WARNING:NEW_TYPEDEFS: do not add new typedefs
#85: FILE: drivers/lio-core/target_core_base.h:258:
+typedef enum {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#93: FILE: drivers/lio-core/target_core_base.h:266:
+typedef struct t10_reservation_template_s {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#95: FILE: drivers/lio-core/target_core_base.h:268:
+	int (*t10_reservation_check)(struct se_cmd_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#96: FILE: drivers/lio-core/target_core_base.h:269:
+	int (*t10_reserve)(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#97: FILE: drivers/lio-core/target_core_base.h:270:
+	int (*t10_release)(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#98: FILE: drivers/lio-core/target_core_base.h:271:
+	int (*t10_seq_non_holder)(struct se_cmd_s *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#98: FILE: drivers/lio-core/target_core_base.h:271:
+	int (*t10_seq_non_holder)(struct se_cmd_s *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#99: FILE: drivers/lio-core/target_core_base.h:272:
+	int (*t10_pr_register)(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#100: FILE: drivers/lio-core/target_core_base.h:273:
+	int (*t10_pr_clear)(struct se_cmd_s *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#133: FILE: drivers/lio-core/target_core_base.h:597:
+	spinlock_t		dev_reservation_lock;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: drivers/lio-core/target_core_transport.c:214:
+static char *transport_passthrough_get_fabric_name (void)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#245: FILE: drivers/lio-core/target_core_transport.c:216:
+	return("PT");

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#255: FILE: drivers/lio-core/target_core_transport.c:236:
+	get_fabric_name:	transport_passthrough_get_fabric_name,	\
 	               ^

WARNING:INDENTED_LABEL: labels should not be indented
#255: FILE: drivers/lio-core/target_core_transport.c:236:
+	get_fabric_name:	transport_passthrough_get_fabric_name,	\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: drivers/lio-core/target_core_transport.c:2092:
+^I */^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#290: FILE: drivers/lio-core/target_core_transport.c:4314:
+#define SET_GENERIC_TRANSPORT_FUNCTIONS(cmd)						\
 	cmd->transport_allocate_iovecs = &transport_generic_allocate_iovecs;		\
 	cmd->transport_get_task = &transport_generic_get_task;				\
 	cmd->transport_map_buffers_to_tasks = &transport_generic_map_buffers_to_tasks;	\

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cmd' - possible side-effects?
#290: FILE: drivers/lio-core/target_core_transport.c:4314:
+#define SET_GENERIC_TRANSPORT_FUNCTIONS(cmd)						\
 	cmd->transport_allocate_iovecs = &transport_generic_allocate_iovecs;		\
 	cmd->transport_get_task = &transport_generic_get_task;				\
 	cmd->transport_map_buffers_to_tasks = &transport_generic_map_buffers_to_tasks;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cmd' may be better as '(cmd)' to avoid precedence issues
#290: FILE: drivers/lio-core/target_core_transport.c:4314:
+#define SET_GENERIC_TRANSPORT_FUNCTIONS(cmd)						\
 	cmd->transport_allocate_iovecs = &transport_generic_allocate_iovecs;		\
 	cmd->transport_get_task = &transport_generic_get_task;				\
 	cmd->transport_map_buffers_to_tasks = &transport_generic_map_buffers_to_tasks;	\

WARNING:TYPO_SPELLING: 'CONFLIT' may be misspelled - perhaps 'CONFLICT'?
#336: FILE: drivers/lio-core/target_core_transport.c:4341:
+			return(5); // RESERVATION CONFLIT
 			                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#336: FILE: drivers/lio-core/target_core_transport.c:4341:
+			return(5); // RESERVATION CONFLIT

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: drivers/lio-core/target_core_transport.c:4642:
+^I^I^Isize = (cdb[7] << 8) | cdb[8];^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#656: FILE: drivers/lio-core/target_core_transport.c:4650:
+		if ((ret = T10_RES(su_dev)->t10_reserve(cmd)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: drivers/lio-core/target_core_transport.c:4655:
+^I^I}^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#670: FILE: drivers/lio-core/target_core_transport.c:4663:
+		 * Assume the passthrough or $FABRIC_MOD will tell us about it.
+		*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPLIT_STRING: quoted string split across lines
#708: FILE: drivers/lio-core/target_core_transport.c:4706:
+		TRACE_ERROR("TARGET_CORE[%s]: Unsupported SCSI Opcode 0x%02x,"
+			" sending CHECK_CONDITION.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#721: FILE: drivers/lio-core/target_core_transport.c:4715:
+		TRACE_ERROR("TARGET_CORE[%s]: Expected Transfer Length: %u"
+			" does not match SCSI CDB Length: %u for SAM Opcode:"

WARNING:SPLIT_STRING: quoted string split across lines
#722: FILE: drivers/lio-core/target_core_transport.c:4716:
+			" does not match SCSI CDB Length: %u for SAM Opcode:"
+			" 0x%02x\n", CMD_TFO(cmd)->get_fabric_name(),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 17 warnings, 3 checks, 721 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
