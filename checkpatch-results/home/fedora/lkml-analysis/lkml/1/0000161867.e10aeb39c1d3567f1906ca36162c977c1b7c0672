WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#209: FILE: fs/signalfd.c:186:
+		if (unlikely(IS_ERR(info))) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/linux/sched.h:1861:
+extern struct sigqueue *dequeue_signal(struct task_struct *tsk, sigset_t *mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: include/linux/sched.h:1864:
+static inline struct sigqueue *dequeue_signal_lock(struct task_struct *tsk,
+	sigset_t *mask)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#252: FILE: include/linux/sched.h:1895:
+extern void __sigqueue_free(struct sigqueue *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sigqueue *' should also have an identifier name
#252: FILE: include/linux/sched.h:1895:
+extern void __sigqueue_free(struct sigqueue *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/linux/signal.h:243:
+extern struct sigqueue *get_signal_to_deliver(struct k_sigaction *return_ka,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: include/linux/signal.h:244:
+extern struct sigqueue *get_signal_to_deliver(struct k_sigaction *return_ka,
+	struct pt_regs *regs, void *cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: include/linux/tracehook.h:463:
+static inline struct sigqueue *tracehook_get_signal(struct task_struct *task,
+	struct pt_regs *regs, struct k_sigaction *return_ka)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: kernel/signal.c:386:
+static struct sigqueue *__dequeue_signal(struct sigpending *pending,
+	sigset_t *mask)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (current->notifier)
#349: FILE: kernel/signal.c:395:
+			if (!(current->notifier)(current->notifier_data)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->notifier_data'
#349: FILE: kernel/signal.c:395:
+			if (!(current->notifier)(current->notifier_data)) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#414: FILE: kernel/signal.c:465:
+	if ((signal->info.si_code & __SI_MASK) == __SI_TIMER
+		&& signal->info.si_sys_private)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#415: FILE: kernel/signal.c:466:
+	if ((signal->info.si_code & __SI_MASK) == __SI_TIMER
+		&& signal->info.si_sys_private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: kernel/signal.c:1700:
+static struct sigqueue *ptrace_signal(int signr, struct sigqueue *signal,
 			 struct pt_regs *regs, void *cookie)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: kernel/signal.c:1741:
+struct sigqueue *get_signal_to_deliver(struct k_sigaction *return_ka,
+	struct pt_regs *regs, void *cookie)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: kernel/signal.c:1802:
+				info = ptrace_signal(info->info.si_signo,
+					info, regs, cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: kernel/signal.c:1888:
+			do_coredump(info->info.si_signo, info->info.si_signo,
+				regs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161867.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 14 checks, 513 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161867.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
