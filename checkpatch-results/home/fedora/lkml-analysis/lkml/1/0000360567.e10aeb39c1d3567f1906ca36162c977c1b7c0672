WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: mm/cpu_alloc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: mm/cpu_alloc.c:5:
+ * ^IBasic implementation with allocation and free from a dedicated per$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#61: FILE: mm/cpu_alloc.c:6:
+ * ^Icpu area.$

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#79: FILE: mm/cpu_alloc.c:24:
+#include <asm/pgtable.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#112: FILE: mm/cpu_alloc.c:57:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#113: FILE: mm/cpu_alloc.c:58:
+static unsigned long *cpu_alloc_map = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: mm/cpu_alloc.c:78:
+pte_t *cpu_area_pte_populate(pmd_t *pmd, unsigned long addr,
+						gfp_t flags, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: mm/cpu_alloc.c:81:
+	pte_t *pte = pte_offset_kernel(pmd, addr);
+	if (pte_none(*pte)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#139: FILE: mm/cpu_alloc.c:84:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: mm/cpu_alloc.c:93:
+pmd_t *cpu_area_pmd_populate(pud_t *pud, unsigned long addr,
+						gfp_t flags, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: mm/cpu_alloc.c:96:
+	pmd_t *pmd = pmd_offset(pud, addr);
+	if (pmd_none(*pmd)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#153: FILE: mm/cpu_alloc.c:98:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: mm/cpu_alloc.c:106:
+pud_t *cpu_area_pud_populate(pgd_t *pgd, unsigned long addr,
+						gfp_t flags, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: mm/cpu_alloc.c:109:
+	pud_t *pud = pud_offset(pgd, addr);
+	if (pud_none(*pud)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: mm/cpu_alloc.c:111:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: mm/cpu_alloc.c:121:
+	pgd_t *pgd = pgd_offset_k(addr);
+	if (pgd_none(*pgd)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: mm/cpu_alloc.c:123:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: mm/cpu_alloc.c:131:
+int cpu_area_populate_basepages(void *start, unsigned long size,
+						gfp_t flags, int node)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#217: FILE: mm/cpu_alloc.c:162:
+int __attribute__((weak)) cpu_area_populate(void *start, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: mm/cpu_alloc.c:163:
+int __attribute__((weak)) cpu_area_populate(void *start, unsigned long size,
+					gfp_t flags, int node)

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#225: FILE: mm/cpu_alloc.c:170:
+ * until we have enough space to accomodate a newly allocated object.
                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#250: FILE: mm/cpu_alloc.c:195:
+	start = cpu_area + \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: mm/cpu_alloc.c:200:
+		err = cpu_area_populate(CPU_PTR(start, cpu), ALLOC_SIZE,
+			flags, cpu_to_node(cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: mm/cpu_alloc.c:210:
+		new_map = cpu_area_alloc_block(PAGE_SIZE << map_order,
+						flags | __GFP_ZERO, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: mm/cpu_alloc.c:224:
+			free_pages((unsigned long)new_map,
+						map_order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: mm/cpu_alloc.c:235:
+			memcpy(new_map, cpu_alloc_map,
+				PAGE_SIZE << cpu_alloc_map_order);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#321: FILE: mm/cpu_alloc.c:266:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: mm/cpu_alloc.c:316:
+	BUG_ON(gfpflags & ~(GFP_RECLAIM_MASK | __GFP_ZERO));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#381: FILE: mm/cpu_alloc.c:326:
+	for ( ; ; ) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#396: FILE: mm/cpu_alloc.c:341:
+		if (start % (align / UNIT_SIZE) == 0 &&
[...]
+				break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: mm/cpu_alloc.c:342:
+		if (start % (align / UNIT_SIZE) == 0 &&
+			find_next_bit(cpu_alloc_map, map_size, start + 1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: mm/cpu_alloc.c:390:
+	BUG_ON(p < cpu_area);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: mm/cpu_alloc.c:392:
+	BUG_ON(!test_bit(index, cpu_alloc_map) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: mm/cpu_alloc.c:393:
+	BUG_ON(!test_bit(index, cpu_alloc_map) ||
+			index >= units_total);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: mm/cpu_alloc.c:407:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#511: FILE: include/linux/cpu_alloc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#512: FILE: include/linux/cpu_alloc.h:2:
+ * include/linux/cpu_alloc.h - cpu allocator definitions

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pointer' - possible side-effects?
#554: FILE: include/linux/cpu_alloc.h:44:
+#define CPU_FREE(pointer)	cpu_free(pointer, sizeof(*(pointer)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: include/linux/mm.h:1146:
+pud_t *cpu_area_pud_populate(pgd_t *pgd, unsigned long addr,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: include/linux/mm.h:1148:
+pmd_t *cpu_area_pmd_populate(pud_t *pud, unsigned long addr,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: include/linux/mm.h:1150:
+pte_t *cpu_area_pte_populate(pmd_t *pmd, unsigned long addr,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: include/linux/mm.h:1153:
+int cpu_area_populate_basepages(void *start, unsigned long size,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: include/linux/mm.h:1155:
+int cpu_area_populate(void *start, unsigned long size,
+						gfp_t flags, int node);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000360567.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 22 warnings, 20 checks, 522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000360567.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
