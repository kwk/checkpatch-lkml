CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#63: FILE: arch/x86/mm/pat.c:12:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#77: FILE: arch/x86/mm/pat.c:68:
+^Icase 0: ^Ireturn "default";$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: arch/x86/mm/pat.c:69:
+^Idefault: ^Ireturn "broken";$

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#90: FILE: arch/x86/mm/pat.c:121:
+	KERN_ERR "%s:%d conflicting cache attribute %Lx-%Lx %s<->%s\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#104: FILE: arch/x86/mm/pat.c:151:
+	"%s:%d conflicting cache attributes on free %Lx-%Lx %s<->%s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#116: FILE: arch/x86/mm/pat.c:162:
+		printk(KERN_ERR "%s:%d freeing invalid mattr %Lx-%Lx %s\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#116: FILE: arch/x86/mm/pat.c:162:
+		printk(KERN_ERR "%s:%d freeing invalid mattr %Lx-%Lx %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: arch/x86/mm/pat.c:163:
+		printk(KERN_ERR "%s:%d freeing invalid mattr %Lx-%Lx %s\n",
 			current->comm, current->pid,

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: arch/x86/mm/pat.c:176:
+	unsigned long want_flags = 0;
+	if ((file->f_flags & O_SYNC) || (offset >= __pa(high_memory)))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset >= __pa(high_memory)'
#131: FILE: arch/x86/mm/pat.c:176:
+	if ((file->f_flags & O_SYNC) || (offset >= __pa(high_memory)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#135: FILE: arch/x86/mm/pat.c:180:
+	reserve_mattr(offset, offset+size, want_flags, &flags);
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#137: FILE: arch/x86/mm/pat.c:182:
+		printk(KERN_INFO

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#138: FILE: arch/x86/mm/pat.c:183:
+	"%s:%d /dev/mem expected mapping type %s for %Lx-%Lx, got %s\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#141: FILE: arch/x86/mm/pat.c:186:
+			offset, offset+size,
 			              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#147: FILE: arch/x86/mm/pat.c:192:
+		/* RED-PEN when the kernel memory was write protected
+		   or similar before we'll destroy that here. need a pgprot

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#148: FILE: arch/x86/mm/pat.c:193:
+		   mask in cpa? */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: arch/x86/mm/pat.c:195:
+		change_page_attr_addr(offset, size >> PAGE_SHIFT,
+				     __pgprot(__PAGE_KERNEL | flags));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#152: FILE: arch/x86/mm/pat.c:197:
+	return __pgprot((pgprot_val(vma_prot) & ~_PAGE_CACHE_MASK)|flags);
 	                                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: arch/x86/mm/pat.c:203:
+	u64 addr = (u64)pfn << PAGE_SHIFT;
+	free_mattr(addr, size, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: arch/x86/mm/pat.c:205:
+	if (addr < __pa(high_memory) &&
+	   (pgprot_val(vma_prot) & _PAGE_CACHE_MASK))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#209: FILE: drivers/char/mem.c:245:
+void __attribute__((weak))

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#221: FILE: drivers/char/mem.c:257:
+static struct vm_operations_struct mmap_mem_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: include/asm-x86/pgtable_64.h:459:
+                              unsigned long size, pgprot_t vma_prot);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: include/asm-x86/pgtable_64.h:459:
+                              unsigned long size, pgprot_t vma_prot);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 8 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
