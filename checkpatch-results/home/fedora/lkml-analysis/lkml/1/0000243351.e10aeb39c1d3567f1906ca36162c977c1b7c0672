CHECK:BIT_MACRO: Prefer using the BIT macro
#120: FILE: drivers/net/wireless/iwlwifi/iwl-debug.h:117:
+#define IWL_DL_MACDUMP		(1 << 4)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le16 should be cpu_to_le16
#189: FILE: drivers/net/wireless/iwlwifi/iwl-tx.c:849:
+				__constant_cpu_to_le16(IEEE80211_SCTL_FRAG);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#320: FILE: drivers/net/wireless/rt2x00/rt2x00mac.c:209:
+		/*
+		 * We don't support mixed combinations of

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#327: FILE: drivers/net/wireless/rt2x00/rt2x00mac.c:216:
+		/*
+		 * Check if we exceeded the maximum amount

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#337: FILE: drivers/net/wireless/rt2x00/rt2x00mac.c:226:
+		/*
+		 * We don't support mixed combinations of

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#344: FILE: drivers/net/wireless/rt2x00/rt2x00mac.c:233:
+		/*
+		 * Check if we exceeded the maximum amount

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#382: FILE: net/mac80211/main.c:503:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#433: FILE: net/mac80211/mesh_hwmp.c:775:
+	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *) skb->data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#454: FILE: net/mac80211/mesh_hwmp.c:796:
 			msecs_to_jiffies(sdata->u.sta.mshcfg.path_refresh_time))
+				&& !memcmp(dev->dev_addr, hdr->addr4, ETH_ALEN)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: net/mac80211/mesh_hwmp.c:803:
+		memcpy(hdr->addr1, mpath->next_hop->addr,
 				ETH_ALEN);

CHECK:SPACING: No space is necessary after a cast
#473: FILE: net/mac80211/mesh_pathtbl.c:391:
+	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *) skb->data;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#503: FILE: net/mac80211/rx.c:1113:
+		hdrlen += ieee80211_get_mesh_hdrlen(

CHECK:SPACING: No space is necessary after a cast
#569: FILE: net/mac80211/rx.c:1398:
+	hdr = (struct ieee80211_hdr *) skb->data;

CHECK:SPACING: No space is necessary after a cast
#571: FILE: net/mac80211/rx.c:1400:
+	mesh_hdr = (struct ieee80211s_hdr *) (skb->data + hdrlen);

CHECK:BRACES: Unbalanced braces around else statement
#589: FILE: net/mac80211/rx.c:1418:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: net/mac80211/rx.c:1420:
+			struct ieee80211_hdr *fwd_hdr;
+			fwd_skb = skb_copy(skb, GFP_ATOMIC);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#594: FILE: net/mac80211/rx.c:1423:
+				printk(KERN_DEBUG "%s: failed to clone mesh frame\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: net/mac80211/rx.c:1424:
+				printk(KERN_DEBUG "%s: failed to clone mesh frame\n",
+						   rx->dev->name);

CHECK:SPACING: No space is necessary after a cast
#597: FILE: net/mac80211/rx.c:1426:
+			fwd_hdr =  (struct ieee80211_hdr *) fwd_skb->data;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#599: FILE: net/mac80211/rx.c:1428:
+			/*
+			 * Save TA to addr1 to send TA a path error if a

WARNING:TYPO_SPELLING: 'iif' may be misspelled - perhaps 'if'?
#605: FILE: net/mac80211/rx.c:1434:
+			fwd_skb->iif = rx->dev->ifindex;
 			         ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#617: FILE: net/mac80211/rx.c:1446:
+
+

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#630: FILE: net/mac80211/rx.c:1680:
+#define CALL_RXH(rxh)			\
+	do {				\
+		res = rxh(rx);		\
+		if (res != RX_CONTINUE)	\
+			goto rxh_done;  \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#630: FILE: net/mac80211/rx.c:1680:
+#define CALL_RXH(rxh)			\
+	do {				\
+		res = rxh(rx);		\
+		if (res != RX_CONTINUE)	\
+			goto rxh_done;  \
+	} while (0);

do {} while(0) macros should not have a trailing semicolon.

CHECK:SPACING: No space is necessary after a cast
#656: FILE: net/mac80211/tx.c:1304:
+	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *) skb->data;

CHECK:CAMELCASE: Avoid CamelCase: <dot11MeshTTL>
#709: FILE: net/mac80211/tx.c:1494:
+		if (!sdata->u.sta.mshcfg.dot11MeshTTL) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: net/mac80211/tx.c:1549:
+	if (!ieee80211_vif_is_mesh(&sdata->vif) &&
+		unlikely(!is_multicast_ether_addr(hdr.addr1) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: net/mac80211/tx.c:1550:
+		unlikely(!is_multicast_ether_addr(hdr.addr1) &&
 		      !(sta_flags & WLAN_STA_AUTHORIZED) &&

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243351.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 16 checks, 560 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243351.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
