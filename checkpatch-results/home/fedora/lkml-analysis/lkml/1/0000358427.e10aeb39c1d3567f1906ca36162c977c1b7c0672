WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Common case (one probe) is still fast and does not require dynamic allocation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/marker.h:116:
+extern void marker_probe_cb(const struct marker *mdata, void *private,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: include/linux/marker.h:117:
+extern void marker_probe_cb(const struct marker *mdata, void *private,
+	const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/marker.h:118:
+extern void marker_probe_cb_noarg(const struct marker *mdata,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: include/linux/marker.h:119:
+extern void marker_probe_cb_noarg(const struct marker *mdata,
+	void *private, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/marker.h:131:
+extern int marker_probe_unregister(const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/linux/marker.h:132:
+extern int marker_probe_unregister(const char *name,
+	marker_probe_func *probe, void *private);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/marker.h:136:
+extern int marker_probe_unregister_private_data(marker_probe_func *probe,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: include/linux/marker.h:137:
+extern int marker_probe_unregister_private_data(marker_probe_func *probe,
+	void *private);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/linux/marker.h:139:
+extern void *marker_get_private_data(const char *name, marker_probe_func *probe,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: include/linux/marker.h:140:
+extern void *marker_get_private_data(const char *name, marker_probe_func *probe,
+	int num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: kernel/marker.c:83:
+void __mark_empty_function(void *probe_data, void *call_data,
+	const char *fmt, va_list *args)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: kernel/marker.c:100:
+void marker_probe_cb(const struct marker *mdata, void *private,
+	const char *fmt, ...)

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#271: FILE: kernel/marker.c:109:
+		/* Must read the ptype before ptr. They are not data dependant,
 		                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#272: FILE: kernel/marker.c:110:
+		 * so we put an explicit smp_rmb() here. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#276: FILE: kernel/marker.c:114:
+		 * dependant, so we put an explicit smp_rmb() here. */
 		   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#276: FILE: kernel/marker.c:114:
+		 * dependant, so we put an explicit smp_rmb() here. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: kernel/marker.c:152:
+void marker_probe_cb_noarg(const struct marker *mdata,
+	void *private, const char *fmt, ...)

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#323: FILE: kernel/marker.c:161:
+		/* Must read the ptype before ptr. They are not data dependant,
 		                                                     ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: kernel/marker.c:162:
+		 * so we put an explicit smp_rmb() here. */

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#328: FILE: kernel/marker.c:166:
+		 * dependant, so we put an explicit smp_rmb() here. */
 		   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#328: FILE: kernel/marker.c:166:
+		 * dependant, so we put an explicit smp_rmb() here. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#368: FILE: kernel/marker.c:206:
+		printk(KERN_DEBUG "Single probe : %p %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: kernel/marker.c:207:
+		printk(KERN_DEBUG "Single probe : %p %p\n",
+			entry->single.func,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#373: FILE: kernel/marker.c:211:
+			printk(KERN_DEBUG "Multi probe %d : %p %p\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: kernel/marker.c:212:
+			printk(KERN_DEBUG "Multi probe %d : %p %p\n", i,
+				entry->multi[i].func, entry->multi[i].private);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: kernel/marker.c:218:
+marker_entry_add_probe(struct marker_entry *entry,
+		marker_probe_func *probe, void *private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: kernel/marker.c:229:
+		if (entry->single.func == probe &&
+				entry->single.private == private)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#401: FILE: kernel/marker.c:239:
+			return NULL;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: kernel/marker.c:248:
+			if (old[nr_probes].func == probe &&
+					old[nr_probes].private == private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: kernel/marker.c:253:
+	new = kzalloc((nr_probes + 2) * sizeof(struct marker_probe_closure),
+			GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#416: FILE: kernel/marker.c:254:
+	if (new == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: kernel/marker.c:260:
+		memcpy(new, old,
+			nr_probes * sizeof(struct marker_probe_closure));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: kernel/marker.c:272:
+marker_entry_remove_probe(struct marker_entry *entry,
+		marker_probe_func *probe, void *private)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#453: FILE: kernel/marker.c:291:
+		return NULL;
+	} else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#457: FILE: kernel/marker.c:295:
+			if ((!probe || old[nr_probes].func == probe)
+					&& old[nr_probes].private == private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: kernel/marker.c:309:
+			if ((probe && old[i].func != probe) ||
+					old[i].private != private)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#481: FILE: kernel/marker.c:319:
+		if (new == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: kernel/marker.c:323:
+			if ((probe && old[i].func != probe) ||
+					old[i].private != private)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#598: FILE: kernel/marker.c:449:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: kernel/marker.c:482:
+static int set_marker(struct marker_entry **entry, struct marker *elem,
+		int active)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#656: FILE: kernel/marker.c:516:
+	WARN_ON(elem->single.func != __mark_empty_function
+		&& elem->single.private

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: kernel/marker.c:581:
+			set_marker(&mark_entry, iter,
+					!!mark_entry->refcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: kernel/marker.c:687:
+int marker_probe_unregister(const char *name,
+	marker_probe_func *probe, void *private)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#912: FILE: kernel/marker.c:731:
+				if (entry->single.func == probe
+						&& entry->single.private

WARNING:LINE_SPACING: Missing a blank line after declarations
#917: FILE: kernel/marker.c:736:
+				struct marker_probe_closure *closure;
+				closure = entry->multi;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: kernel/marker.c:739:
+					if (closure[i].func == probe &&
+							closure[i].private

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: kernel/marker.c:763:
+int marker_probe_unregister_private_data(marker_probe_func *probe,
+		void *private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: kernel/marker.c:809:
+void *marker_get_private_data(const char *name, marker_probe_func *probe,
+		int num)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1075: FILE: kernel/marker.c:824:
+					return e->single.private;
+				else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1080: FILE: kernel/marker.c:829:
+				int match = 0;
+				closure = e->multi;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1132: FILE: include/linux/module.h:470:
+extern void module_update_markers(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(2) over __attribute__((__aligned__(2)))
#1146: FILE: samples/markers/probe-example.c:23:
+void __attribute__((__aligned__(2)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: samples/markers/probe-example.c:25:
+probe_subsystem_event(void *probe_data, void *call_data,
+	const char *format, va_list *args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: samples/markers/probe-example.c:28:
+probe_subsystem_event(void *probe_data, void *call_data,
+	const char *format, va_list *args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1167: FILE: samples/markers/probe-example.c:39:
+	printk(KERN_INFO "Value %u, string %s\n", value, mystr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: samples/markers/probe-example.c:48:
+probe_subsystem_eventb(void *probe_data, void *call_data,
+	const char *format, va_list *args) __attribute__((aligned(2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(2) over __attribute__((aligned(2)))
#1180: FILE: samples/markers/probe-example.c:48:
+	const char *format, va_list *args) __attribute__((aligned(2)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: samples/markers/probe-example.c:51:
+probe_subsystem_eventb(void *probe_data, void *call_data,
+	const char *format, va_list *args)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: samples/markers/probe-example.c:89:
+		marker_probe_unregister(probe_array[i].name,
+			probe_array[i].probe_func, &probe_array[i]);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000358427.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 41 checks, 1107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000358427.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
