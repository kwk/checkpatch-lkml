WARNING:TYPO_SPELLING: 'genralization' may be misspelled - perhaps 'generalization'?
#31: 
The following is the qos_param patch that implements a genralization of
                                                       ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: include/linux/qos_params.h:1:
+/* interface for the qos_power infrastructure of the linux kernel.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: kernel/qos_params.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: kernel/qos_params.c:3:
+ * QoS dependencies.  It provides infrastructure for registration of: $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: kernel/qos_params.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: kernel/qos_params.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: kernel/qos_params.c:18:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#134: FILE: kernel/qos_params.c:42:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: kernel/qos_params.c:44:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: kernel/qos_params.c:47:
+ * with _irqsave.  One lock to rule them all $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: kernel/qos_params.c:54:
+	char * name;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#149: FILE: kernel/qos_params.c:57:
+	s32 (* comparitor)(s32,s32);
 	       ^^^^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer name
#149: FILE: kernel/qos_params.c:57:
+	s32 (* comparitor)(s32,s32);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#149: FILE: kernel/qos_params.c:57:
+	s32 (* comparitor)(s32,s32);
 	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: kernel/qos_params.c:57:
+	s32 (* comparitor)(s32,s32);
 	                      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 's32' should also have an identifier name
#149: FILE: kernel/qos_params.c:57:
+	s32 (* comparitor)(s32,s32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 's32' should also have an identifier name
#149: FILE: kernel/qos_params.c:57:
+	s32 (* comparitor)(s32,s32);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#151: FILE: kernel/qos_params.c:59:
+};
+static struct qos_object qos_array[QOS_NUM_CLASSES];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#154: FILE: kernel/qos_params.c:62:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: kernel/qos_params.c:63:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *f_pos);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#156: FILE: kernel/qos_params.c:64:
+static int qos_power_open(struct inode *inode, struct file *filp);
                                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#157: FILE: kernel/qos_params.c:65:
+static int qos_power_release(struct inode *inode, struct file *filp);
                                                                ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: kernel/qos_params.c:95:
+^I$

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#190: FILE: kernel/qos_params.c:98:
+		extreme_value = qos_array[i].comparitor(
 		                             ^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#190: FILE: kernel/qos_params.c:98:
+		extreme_value = qos_array[i].comparitor(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: kernel/qos_params.c:103:
+^I^Iprintk(KERN_ERR "new target for qos %d is %d\n",i, $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#195: FILE: kernel/qos_params.c:103:
+		printk(KERN_ERR "new target for qos %d is %d\n",i, 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: kernel/qos_params.c:103:
+		printk(KERN_ERR "new target for qos %d is %d\n",i, 
 		                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: kernel/qos_params.c:104:
+		printk(KERN_ERR "new target for qos %d is %d\n",i, 
+			qos_array[i].target_value);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: kernel/qos_params.c:105:
+^I^Isrcu_notifier_call_chain(&qos_array[i].notifiers, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: kernel/qos_params.c:106:
+		srcu_notifier_call_chain(&qos_array[i].notifiers, 
+				(unsigned long) qos_array[i].target_value, NULL);

CHECK:SPACING: No space is necessary after a cast
#198: FILE: kernel/qos_params.c:106:
+				(unsigned long) qos_array[i].target_value, NULL);

ERROR:SPACING: space prohibited after that '&' (ctx:BxW)
#210: FILE: kernel/qos_params.c:118:
+	ret = misc_register(& qos->qos_power_miscdev);
 	                    ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#211: FILE: kernel/qos_params.c:119:
+	if (ret < 0 )

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#212: FILE: kernel/qos_params.c:120:
+		printk(KERN_ERR "qos_power: misc_register returns %d.\n", ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#217: FILE: kernel/qos_params.c:125:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: kernel/qos_params.c:127:
+static void init_qos_object(int i, const char * name, s32 default_value,

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#220: FILE: kernel/qos_params.c:128:
+	s32 (* comparitor)(s32,s32))
 	       ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: kernel/qos_params.c:128:
+static void init_qos_object(int i, const char * name, s32 default_value,
+	s32 (* comparitor)(s32,s32))

WARNING:SPACING: Unnecessary space before function pointer name
#220: FILE: kernel/qos_params.c:128:
+	s32 (* comparitor)(s32,s32))

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#220: FILE: kernel/qos_params.c:128:
+	s32 (* comparitor)(s32,s32))
 	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: kernel/qos_params.c:128:
+	s32 (* comparitor)(s32,s32))
 	                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#224: FILE: kernel/qos_params.c:132:
+	if( i < QOS_NUM_CLASSES) {

ERROR:SPACING: space required before the open parenthesis '('
#224: FILE: kernel/qos_params.c:132:
+	if( i < QOS_NUM_CLASSES) {

ERROR:SPACING: space required before the open parenthesis '('
#227: FILE: kernel/qos_params.c:135:
+		if(!qos->name)

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#232: FILE: kernel/qos_params.c:140:
+		qos->comparitor = comparitor;
 		     ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#232: FILE: kernel/qos_params.c:140:
+		qos->comparitor = comparitor;
 		                  ^^^^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#235: FILE: kernel/qos_params.c:143:
+		if (register_new_qos_misc(qos) < 0 )

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#247: FILE: kernel/qos_params.c:155:
+	for (i=0;i<QOS_NUM_CLASSES; i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#247: FILE: kernel/qos_params.c:155:
+	for (i=0;i<QOS_NUM_CLASSES; i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#247: FILE: kernel/qos_params.c:155:
+	for (i=0;i<QOS_NUM_CLASSES; i++) {
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: kernel/qos_params.c:164:
+^Iinit_qos_object(i, name, 2000 * USEC_PER_SEC, min_compare); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: kernel/qos_params.c:179:
+	unsigned long flags;
+	spin_lock_irqsave(&qos_lock, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: kernel/qos_params.c:180:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: kernel/qos_params.c:183:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: kernel/qos_params.c:188:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: kernel/qos_params.c:191:
+	struct requirement_list * dep;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dep)...) over kzalloc(sizeof(struct requirement_list)...)
#287: FILE: kernel/qos_params.c:195:
+	dep = kzalloc(sizeof(struct requirement_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#294: FILE: kernel/qos_params.c:202:
+		if(!dep->name)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: kernel/qos_params.c:212:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: kernel/qos_params.c:214:
+	if(dep)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#307: FILE: kernel/qos_params.c:215:
+	if(dep)
+		kfree(dep);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#312: FILE: kernel/qos_params.c:220:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#321: FILE: kernel/qos_params.c:229:
+		if( strcmp(node->name, name) == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#321: FILE: kernel/qos_params.c:229:
+		if( strcmp(node->name, name) == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#330: FILE: kernel/qos_params.c:238:
+	if(pending_update)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: kernel/qos_params.c:240:
+^I^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#347: FILE: kernel/qos_params.c:255:
+		if( strcmp(node->name, name) == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#347: FILE: kernel/qos_params.c:255:
+		if( strcmp(node->name, name) == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: kernel/qos_params.c:263:
+	if(pending_update)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: kernel/qos_params.c:282:
+int qos_remove_notifier(int i, struct notifier_block *notifier) $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#390: FILE: kernel/qos_params.c:298:
+static int qos_power_open(struct inode *inode, struct file *filp)
                                                             ^^^^

CHECK:SPACING: No space is necessary after a cast
#397: FILE: kernel/qos_params.c:305:
+		filp->private_data = (void *) i;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#407: FILE: kernel/qos_params.c:315:
+static int qos_power_release(struct inode *inode, struct file *filp)
                                                                ^^^^

CHECK:SPACING: No space is necessary after a cast
#411: FILE: kernel/qos_params.c:319:
+	qos = (int) filp->private_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: kernel/qos_params.c:321:
+^Iqos_remove_requirement(qos, name);^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#418: FILE: kernel/qos_params.c:326:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: kernel/qos_params.c:327:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *f_pos)

CHECK:SPACING: No space is necessary after a cast
#424: FILE: kernel/qos_params.c:332:
+	qos = (int) filp->private_data;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#427: FILE: kernel/qos_params.c:335:
+	if (copy_from_user(&value, buf, sizeof(s32))) {
+		return -EFAULT;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#436: FILE: kernel/qos_params.c:344:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376015.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 41 errors, 24 warnings, 16 checks, 397 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376015.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
