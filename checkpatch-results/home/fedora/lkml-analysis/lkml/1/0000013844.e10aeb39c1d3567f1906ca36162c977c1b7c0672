WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: drivers/hid/Kconfig:186:
+config HID_MAGICMOUSE
+	tristate "Apple" if EMBEDDED
+	depends on BT_HIDP
+	default !EMBEDDED
+	---help---
+	Support for the Apple Magic Mouse.
+
+	Say Y here if you want support for the multi-touch features of the
+	Apple Wireless "Magic" Mouse.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#106: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#111: FILE: drivers/hid/hid-magicmouse.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#136: FILE: drivers/hid/hid-magicmouse.c:26:
+static int middle_button_stop = +350;
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#146: FILE: drivers/hid/hid-magicmouse.c:36:
+static bool report_undeciphered = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: drivers/hid/hid-magicmouse.c:96:
+		int idx = msc->tracking_ids[ii];
+		if (msc->touches[idx].size < 8) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#211: FILE: drivers/hid/hid-magicmouse.c:101:
+			break;
+		} else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: drivers/hid/hid-magicmouse.c:111:
+        int last_state = test_bit(BTN_LEFT, msc->input->key) << 0 |$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: drivers/hid/hid-magicmouse.c:111:
+        int last_state = test_bit(BTN_LEFT, msc->input->key) << 0 |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: drivers/hid/hid-magicmouse.c:112:
+                test_bit(BTN_RIGHT, msc->input->key) << 1 |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: drivers/hid/hid-magicmouse.c:112:
+                test_bit(BTN_RIGHT, msc->input->key) << 1 |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: drivers/hid/hid-magicmouse.c:113:
+                test_bit(BTN_MIDDLE, msc->input->key) << 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/hid/hid-magicmouse.c:113:
+                test_bit(BTN_MIDDLE, msc->input->key) << 2;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#236: FILE: drivers/hid/hid-magicmouse.c:126:
+		} else if ((id = magicmouse_firm_touch(msc)) >= 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: drivers/hid/hid-magicmouse.c:128:
+			int x = msc->touches[id].x;
+			if (x < middle_button_start)

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: drivers/hid/hid-magicmouse.c:180:
+                        msc->scroll_accel = min_t(int, msc->scroll_accel + 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: drivers/hid/hid-magicmouse.c:180:
+                        msc->scroll_accel = min_t(int, msc->scroll_accel + 1,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/hid/hid-magicmouse.c:181:
+                        msc->scroll_accel = min_t(int, msc->scroll_accel + 1,
+						ARRAY_SIZE(accel_profile) - 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: drivers/hid/hid-magicmouse.c:196:
+                int orientation = (misc >> 10) - 32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: drivers/hid/hid-magicmouse.c:196:
+                int orientation = (misc >> 10) - 32;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#315: FILE: drivers/hid/hid-magicmouse.c:205:
+		if (report_undeciphered) {
+			input_event(input, EV_MSC, MSC_RAW, tdata[7]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: drivers/hid/hid-magicmouse.c:214:
+static int magicmouse_raw_event(struct hid_device *hdev,
+		struct hid_report *report, u8 *data, int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: drivers/hid/hid-magicmouse.c:354:
+static int magicmouse_probe(struct hid_device *hdev,
+	const struct hid_device_id *id)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msc"
#474: FILE: drivers/hid/hid-magicmouse.c:364:
+	if (msc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#475: FILE: drivers/hid/hid-magicmouse.c:365:
+	if (msc == NULL) {
+		dev_err(&hdev->dev, "can't alloc magicmouse descriptor\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/hid/hid-magicmouse.c:396:
+		dev_err(&hdev->dev, "unable to request touch data (1:%d)\n",
+				ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/hid/hid-magicmouse.c:403:
+		dev_err(&hdev->dev, "unable to request touch data (2:%d)\n",
+				ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#567: FILE: drivers/hid/hid-magicmouse.c:457:
+		printk(KERN_ERR "can't register magicmouse driver\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013844.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 14 warnings, 7 checks, 506 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013844.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
