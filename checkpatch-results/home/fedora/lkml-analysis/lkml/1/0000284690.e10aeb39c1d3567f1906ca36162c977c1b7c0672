WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: fs/ubifs/lpt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: fs/ubifs/lpt.c:16:
+ * this program; if not, write to the Free Software Foundation, Inc., 51$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#188: FILE: fs/ubifs/lpt.c:137:
+	uint64_t sz;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#227: FILE: fs/ubifs/lpt.c:176:
+	uint64_t sz;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#284: FILE: fs/ubifs/lpt.c:233:
+static void pack_bits(uint8_t **addr, int *pos, uint32_t val, int nrbits)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#286: FILE: fs/ubifs/lpt.c:235:
+	uint8_t *p = *addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#334: FILE: fs/ubifs/lpt.c:283:
+uint32_t ubifs_unpack_bits(uint8_t **addr, int *pos, int nrbits)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#337: FILE: fs/ubifs/lpt.c:286:
+	uint8_t *p = *addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#339: FILE: fs/ubifs/lpt.c:288:
+	uint32_t val;

CHECK:BRACES: Unbalanced braces around else statement
#351: FILE: fs/ubifs/lpt.c:300:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#373: FILE: fs/ubifs/lpt.c:322:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#375: FILE: fs/ubifs/lpt.c:324:
+	uint16_t crc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#406: FILE: fs/ubifs/lpt.c:355:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#408: FILE: fs/ubifs/lpt.c:357:
+	uint16_t crc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#438: FILE: fs/ubifs/lpt.c:387:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#440: FILE: fs/ubifs/lpt.c:389:
+	uint16_t crc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#462: FILE: fs/ubifs/lpt.c:411:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#464: FILE: fs/ubifs/lpt.c:413:
+	uint16_t crc;

CHECK:BRACES: Unbalanced braces around else statement
#521: FILE: fs/ubifs/lpt.c:470:
+	else {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#651: FILE: fs/ubifs/lpt.c:600:
+	lsave = kmalloc(sizeof(int) * c->lsave_cnt, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pnode)...) over kzalloc(sizeof(struct ubifs_pnode)...)
#652: FILE: fs/ubifs/lpt.c:601:
+	pnode = kzalloc(sizeof(struct ubifs_pnode), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nnode)...) over kzalloc(sizeof(struct ubifs_nnode)...)
#653: FILE: fs/ubifs/lpt.c:602:
+	nnode = kzalloc(sizeof(struct ubifs_nnode), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*ltab)...) over vmalloc(sizeof(struct ubifs_lpt_lprops)...)
#655: FILE: fs/ubifs/lpt.c:604:
+	ltab = vmalloc(sizeof(struct ubifs_lpt_lprops) * c->lpt_lebs);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c->ltab"
#661: FILE: fs/ubifs/lpt.c:610:
+	ubifs_assert(c->ltab == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#753: FILE: fs/ubifs/lpt.c:702:
+				set_ltab(c, lnum, c->leb_size - alen,
+					    alen - len);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#940: FILE: fs/ubifs/lpt.c:889:
+	uint8_t *addr = buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#941: FILE: fs/ubifs/lpt.c:890:
+	uint16_t crc, calc_crc;

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#947: FILE: fs/ubifs/lpt.c:896:
+		ubifs_err("invalid crc in LPT node: crc %hx calc %hx", crc,
+			  calc_crc);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#947: FILE: fs/ubifs/lpt.c:896:
+		ubifs_err("invalid crc in LPT node: crc %hx calc %hx", crc,
+			  calc_crc);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#964: FILE: fs/ubifs/lpt.c:913:
+static int check_lpt_type(uint8_t **addr, int *pos, int type)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#989: FILE: fs/ubifs/lpt.c:938:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1026: FILE: fs/ubifs/lpt.c:975:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1043: FILE: fs/ubifs/lpt.c:992:
+		nnode->nbranch[i].offs = ubifs_unpack_bits(&addr, &pos,
+						     c->lpt_offs_bits);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1058: FILE: fs/ubifs/lpt.c:1007:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1090: FILE: fs/ubifs/lpt.c:1039:
+	uint8_t *addr = buf + UBIFS_LPT_CRC_BYTES;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nnode)...) over kzalloc(sizeof(struct ubifs_nnode)...)
#1229: FILE: fs/ubifs/lpt.c:1178:
+	nnode = kzalloc(sizeof(struct ubifs_nnode), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pnode)...) over kzalloc(sizeof(struct ubifs_pnode)...)
#1291: FILE: fs/ubifs/lpt.c:1240:
+	pnode = kzalloc(sizeof(struct ubifs_pnode), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*n)...) over kzalloc(sizeof(struct ubifs_nnode)...)
#1516: FILE: fs/ubifs/lpt.c:1465:
+	n = kzalloc(sizeof(struct ubifs_nnode), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct ubifs_pnode)...)
#1568: FILE: fs/ubifs/lpt.c:1517:
+	p = kzalloc(sizeof(struct ubifs_pnode), GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*c->ltab)...) over vmalloc(sizeof(struct ubifs_lpt_lprops)...)
#1649: FILE: fs/ubifs/lpt.c:1598:
+	c->ltab = vmalloc(sizeof(struct ubifs_lpt_lprops) * c->lpt_lebs);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*c->ltab_cmt)...) over vmalloc(sizeof(struct ubifs_lpt_lprops)...)
#1711: FILE: fs/ubifs/lpt.c:1660:
+	c->ltab_cmt = vmalloc(sizeof(struct ubifs_lpt_lprops) * c->lpt_lebs);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1720: FILE: fs/ubifs/lpt.c:1669:
+		c->lsave = kmalloc(sizeof(int) * c->lsave_cnt, GFP_NOFS);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*path)...) over kmalloc(sizeof(struct lpt_scan_node)...)
#1955: FILE: fs/ubifs/lpt.c:1904:
+	path = kmalloc(sizeof(struct lpt_scan_node) * (c->lpt_hght + 1),

CHECK:BRACES: braces {} should be used on all arms of this statement
#2015: FILE: fs/ubifs/lpt.c:1964:
+			if (path[h].in_tree)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2017: FILE: fs/ubifs/lpt.c:1966:
+			else {

WARNING:SPLIT_STRING: quoted string split across lines
#2255: FILE: fs/ubifs/lpt.c:2204:
+				dbg_err("nnode num %d expected %d "
+					"parent num %d iip %d", cnode->num, num,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000284690.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 39 checks, 2243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000284690.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
