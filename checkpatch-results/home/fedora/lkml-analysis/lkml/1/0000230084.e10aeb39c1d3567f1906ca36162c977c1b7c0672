WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: drivers/input/lirc/Kconfig:43:
+config LIRC_IMON
+	tristate "Soundgraph IMON Receiver"
+	default n
+	depends on LIRC_DEV
+	help
+	  Driver for the Soundgraph IMON IR Receiver
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: drivers/input/lirc/lirc_imon.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: drivers/input/lirc/lirc_imon.c:40:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#122: FILE: drivers/input/lirc/lirc_imon.c:41:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#139: FILE: drivers/input/lirc/lirc_imon.c:58:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: drivers/input/lirc/lirc_imon.c:76:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#233: FILE: drivers/input/lirc/lirc_imon.c:152:
+static struct file_operations vfd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#264: FILE: drivers/input/lirc/lirc_imon.c:183:
+};
+static unsigned char vfd_packet6[] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#302: FILE: drivers/input/lirc/lirc_imon.c:221:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#316: FILE: drivers/input/lirc/lirc_imon.c:235:
+MODULE_PARM_DESC(is_lcd, "The device is an LCD: 0=no (it's a VFD), "
+		 "1=yes (default: no)");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: drivers/input/lirc/lirc_imon.c:259:
+		err("%s: unable to deregister from lirc(%d)",
+			__func__, retval);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#344: FILE: drivers/input/lirc/lirc_imon.c:263:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: drivers/input/lirc/lirc_imon.c:291:
+		err("%s: no context found for minor %d",
+					__func__, subminor);

CHECK:SPACING: No space is necessary after a cast
#407: FILE: drivers/input/lirc/lirc_imon.c:326:
+	context = (struct imon_context *) file->private_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#428: FILE: drivers/input/lirc/lirc_imon.c:347:
+			 * ir_close. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#452: FILE: drivers/input/lirc/lirc_imon.c:371:
+				      context->tx_endpoint->bEndpointAddress);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#453: FILE: drivers/input/lirc/lirc_imon.c:372:
+		interval = context->tx_endpoint->bInterval;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*control_req)...) over kmalloc(sizeof(struct usb_ctrlrequest)...)
#463: FILE: drivers/input/lirc/lirc_imon.c:382:
+		control_req = kmalloc(sizeof(struct usb_ctrlrequest), GFP_NOIO);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!control_req"
#464: FILE: drivers/input/lirc/lirc_imon.c:383:
+		if (control_req == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#468: FILE: drivers/input/lirc/lirc_imon.c:387:
+		control_req->bRequestType = 0x21;

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#469: FILE: drivers/input/lirc/lirc_imon.c:388:
+		control_req->bRequest = 0x09;

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#470: FILE: drivers/input/lirc/lirc_imon.c:389:
+		control_req->wValue = cpu_to_le16(0x0002);

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#471: FILE: drivers/input/lirc/lirc_imon.c:390:
+		control_req->wIndex = cpu_to_le16(0x0100);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#472: FILE: drivers/input/lirc/lirc_imon.c:391:
+		control_req->wLength = cpu_to_le16(0x0800);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->tx.busy
#487: FILE: drivers/input/lirc/lirc_imon.c:406:
+	atomic_set(&(context->tx.busy), 1);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->tx.busy
#491: FILE: drivers/input/lirc/lirc_imon.c:410:
+		atomic_set(&(context->tx.busy), 0);

WARNING:TYPO_SPELLING: 'tranmission' may be misspelled - perhaps 'transmission'?
#494: FILE: drivers/input/lirc/lirc_imon.c:413:
+		/* Wait for tranmission to complete(or abort) */
 		            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#563: FILE: drivers/input/lirc/lirc_imon.c:482:
+		strcpy(buf, "The device it associating press some button "
+			    "on the remote.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#567: FILE: drivers/input/lirc/lirc_imon.c:486:
+			    "Echo something into this file to start "
+			    "the process.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#570: FILE: drivers/input/lirc/lirc_imon.c:489:
+		strcpy(buf, "Device is closed, you need to open it to "
+			    "associate the remote(you can use irw).\n");

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_associate_remote' to 'associate_remote_show' 'store_associate_remote' to 'associate_remote_store'
#595: FILE: drivers/input/lirc/lirc_imon.c:514:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#597: FILE: drivers/input/lirc/lirc_imon.c:516:
+static DEVICE_ATTR(associate_remote, S_IWUSR | S_IRUGO, show_associate_remote,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#609: FILE: drivers/input/lirc/lirc_imon.c:528:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#611: FILE: drivers/input/lirc/lirc_imon.c:530:
+
+

CHECK:SPACING: No space is necessary after a cast
#632: FILE: drivers/input/lirc/lirc_imon.c:551:
+	context = (struct imon_context *) file->private_data;

CHECK:SPACING: No space is necessary after a cast
#669: FILE: drivers/input/lirc/lirc_imon.c:588:
+		context->usb_tx_buf[7] = (unsigned char) seq;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/input/lirc/lirc_imon.c:593:
+			err("%s: send packet failed for packet #%d",
+					__func__, seq/2);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#674: FILE: drivers/input/lirc/lirc_imon.c:593:
+					__func__, seq/2);
 					             ^

CHECK:SPACING: No space is necessary after a cast
#686: FILE: drivers/input/lirc/lirc_imon.c:605:
+		context->usb_tx_buf[7] = (unsigned char) seq;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: drivers/input/lirc/lirc_imon.c:609:
+			err("%s: send packet failed for packet #%d",
+					__func__, seq/2);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#690: FILE: drivers/input/lirc/lirc_imon.c:609:
+					__func__, seq/2);
 					             ^

CHECK:SPACING: No space is necessary after a cast
#718: FILE: drivers/input/lirc/lirc_imon.c:637:
+	context = (struct imon_context *) file->private_data;

CHECK:SPACING: No space is necessary after a cast
#734: FILE: drivers/input/lirc/lirc_imon.c:653:
+		    __func__, (int) n_bytes);

CHECK:SPACING: No space is necessary after a cast
#749: FILE: drivers/input/lirc/lirc_imon.c:668:
+		info("%s: write %d bytes to LCD", __func__, (int) n_bytes);

CHECK:SPACING: No space is necessary after a cast
#765: FILE: drivers/input/lirc/lirc_imon.c:684:
+	context = (struct imon_context *) urb->context;

WARNING:RETURN_VOID: void function return statements are not generally useful
#776: FILE: drivers/input/lirc/lirc_imon.c:695:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#789: FILE: drivers/input/lirc/lirc_imon.c:708:
+	context = (struct imon_context *) data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: drivers/input/lirc/lirc_imon.c:724:
+	usb_fill_int_urb(context->rx_urb, context->dev,
+		usb_rcvintpipe(context->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: drivers/input/lirc/lirc_imon.c:725:
+		usb_rcvintpipe(context->dev,
+				context->rx_endpoint->bEndpointAddress),

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_open', this function's name, in a string
#813: FILE: drivers/input/lirc/lirc_imon.c:732:
+		err("%s: usb_submit_urb failed for ir_open(%d)",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Unbalanced braces around else statement
#815: FILE: drivers/input/lirc/lirc_imon.c:734:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#850: FILE: drivers/input/lirc/lirc_imon.c:769:
+		 * at disconnect time, so do it now. */

WARNING:RETURN_VOID: void function return statements are not generally useful
#863: FILE: drivers/input/lirc/lirc_imon.c:782:
+	return;
+}

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#884: FILE: drivers/input/lirc/lirc_imon.c:803:
+		buf[i] = value>>(i*8);
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#884: FILE: drivers/input/lirc/lirc_imon.c:803:
+		buf[i] = value>>(i*8);
 		                  ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#889: FILE: drivers/input/lirc/lirc_imon.c:808:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#941: FILE: drivers/input/lirc/lirc_imon.c:860:
+		printk(KERN_INFO "%02x ", buf[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#942: FILE: drivers/input/lirc/lirc_imon.c:861:
+	printk(KERN_INFO "\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#962: FILE: drivers/input/lirc/lirc_imon.c:881:
+	 * I've decided to adopt his algorithm. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#976: FILE: drivers/input/lirc/lirc_imon.c:895:
+			int curr_bit = !(buf[octet] & mask);
+			if (curr_bit != context->rx.prev_bit) {

CHECK:SPACING: No space is necessary after a cast
#1006: FILE: drivers/input/lirc/lirc_imon.c:925:
+	context = (struct imon_context *) urb->context;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1024: FILE: drivers/input/lirc/lirc_imon.c:943:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1026: FILE: drivers/input/lirc/lirc_imon.c:945:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#1065: FILE: drivers/input/lirc/lirc_imon.c:984:
+	num_endpoints = iface_desc->desc.bNumEndpoints;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1080: FILE: drivers/input/lirc/lirc_imon.c:999:
+		int ep_type;
+		ep = &iface_desc->endpoint[i].desc;

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#1082: FILE: drivers/input/lirc/lirc_imon.c:1001:
+		ep_type = ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1085: FILE: drivers/input/lirc/lirc_imon.c:1004:
+		if (!ir_ep_found &&
+			ep_dir == USB_DIR_IN &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1087: FILE: drivers/input/lirc/lirc_imon.c:1006:
+			ep_type == USB_ENDPOINT_XFER_INT) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1113: FILE: drivers/input/lirc/lirc_imon.c:1032:
+				info("%s: LCD device uses control endpoint, "
+				     "not interface OUT endpoint", __func__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1140: FILE: drivers/input/lirc/lirc_imon.c:1059:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*context)...) over kmalloc(sizeof(struct imon_context)...)
#1145: FILE: drivers/input/lirc/lirc_imon.c:1064:
+	context = kmalloc(sizeof(struct imon_context), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*plugin)...) over kmalloc(sizeof(struct lirc_plugin)...)
#1151: FILE: drivers/input/lirc/lirc_imon.c:1070:
+	plugin = kmalloc(sizeof(struct lirc_plugin), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rbuf)...) over kmalloc(sizeof(struct lirc_buffer)...)
#1157: FILE: drivers/input/lirc/lirc_imon.c:1076:
+	rbuf = kmalloc(sizeof(struct lirc_buffer), GFP_KERNEL);

CHECK:BRACES: Unbalanced braces around else statement
#1214: FILE: drivers/input/lirc/lirc_imon.c:1133:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#1235: FILE: drivers/input/lirc/lirc_imon.c:1154:
+	if (cpu_to_le16(dev->descriptor.idProduct) == 0xffdc) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1251: FILE: drivers/input/lirc/lirc_imon.c:1170:
+			info("%s: could not get a minor number for VFD",
+				__func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1256: FILE: drivers/input/lirc/lirc_imon.c:1175:
+	info("%s: iMON device on usb<%d:%d> initialized",
+			__func__, dev->bus->busnum, dev->devnum);

WARNING:TYPO_SPELLING: 'disonnect' may be misspelled - perhaps 'disconnect'?
#1288: FILE: drivers/input/lirc/lirc_imon.c:1207:
+ * Callback function for USB core API: disonnect
                                        ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1303: FILE: drivers/input/lirc/lirc_imon.c:1222:
+	 * hasn't been called */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230084.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 26 warnings, 52 checks, 1300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230084.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
