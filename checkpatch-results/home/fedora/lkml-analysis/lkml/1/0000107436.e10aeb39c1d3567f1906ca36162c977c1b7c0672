WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
o Reads of iocg->group_data are not always iocg->lock; so all the operations

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#137: FILE: block/elevator-fq.c:40:
+void elv_release_ioq(struct elevator_queue *eq, struct io_queue **ioq_ptr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#146: FILE: block/elevator-fq.c:60:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#146: FILE: block/elevator-fq.c:60:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#147: FILE: block/elevator-fq.c:61:
+	for (; entity != NULL; entity = entity->parent)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#149: FILE: block/elevator-fq.c:63:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#149: FILE: block/elevator-fq.c:63:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#149: FILE: block/elevator-fq.c:63:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#152: FILE: block/elevator-fq.c:66:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: block/elevator-fq.c:68:
+struct io_entity *bfq_lookup_next_entity(struct io_sched_data *sd,
+						 int extract);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#155: FILE: block/elevator-fq.c:69:
+void elv_del_ioq_busy(struct elevator_queue *e, struct io_queue *ioq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: block/elevator-fq.c:70:
+void elv_del_ioq_busy(struct elevator_queue *e, struct io_queue *ioq,
+					int requeue);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#157: FILE: block/elevator-fq.c:71:
+void elv_activate_ioq(struct io_queue *ioq, int add_front);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#158: FILE: block/elevator-fq.c:72:
+void elv_deactivate_ioq(struct elv_fq_data *efqd, struct io_queue *ioq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: block/elevator-fq.c:73:
+void elv_deactivate_ioq(struct elv_fq_data *efqd, struct io_queue *ioq,
+					int requeue);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#166: FILE: block/elevator-fq.c:80:
+	if (sd->active_entity != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_active"
#180: FILE: block/elevator-fq.c:94:
+	if (next_active != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#183: FILE: block/elevator-fq.c:97:
+		if (entity != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#193: FILE: block/elevator-fq.c:107:
+	BUG_ON(sd->next_active != entity);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: block/elevator-fq.c:142:
+static void bfq_find_matching_entity(struct io_entity **entity,
+			struct io_entity **new_entity)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#260: FILE: block/elevator-fq.c:174:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#260: FILE: block/elevator-fq.c:174:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#261: FILE: block/elevator-fq.c:175:
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#263: FILE: block/elevator-fq.c:177:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#263: FILE: block/elevator-fq.c:177:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#263: FILE: block/elevator-fq.c:177:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#264: FILE: block/elevator-fq.c:178:
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: block/elevator-fq.c:197:
+static void bfq_find_matching_entity(struct io_entity **entity,
+					struct io_entity **new_entity)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#415: FILE: block/elevator-fq.c:774:
+	BUG_ON(sd->next_active == entity);

WARNING:TYPO_SPELLING: 'hiearchy' may be misspelled - perhaps 'hierarchy'?
#433: FILE: block/elevator-fq.c:795:
+	 * while we are traversing the hiearchy. It is possible that this
 	                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'hierarhcy' may be misspelled - perhaps 'hierarchy'?
#439: FILE: block/elevator-fq.c:801:
+	 * Hence, hold a reference, deactivate the hierarhcy of entities and
 	                                           ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->next_active"
#456: FILE: block/elevator-fq.c:818:
+		if (sd->next_active != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: block/elevator-fq.c:837:
+		__iog = container_of(entity->sched_data, struct io_group,
+						sched_data);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#519: FILE: block/elevator-fq.c:988:
+		BUG_ON(st->wsum == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#545: FILE: block/elevator-fq.c:1021:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#592: FILE: block/elevator-fq.c:1068:
+	entity->weight = entity->new_weight = iocg->weight;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#593: FILE: block/elevator-fq.c:1069:
+	entity->ioprio_class = entity->new_ioprio_class = iocg->ioprio_class;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#602: FILE: block/elevator-fq.c:1078:
+	BUG_ON(parent == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#602: FILE: block/elevator-fq.c:1078:
+	BUG_ON(parent == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#603: FILE: block/elevator-fq.c:1079:
+	BUG_ON(iog == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#603: FILE: block/elevator-fq.c:1079:
+	BUG_ON(iog == NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#613: FILE: block/elevator-fq.c:1089:
+#define SHOW_FUNCTION(__VAR)						\
+static u64 io_cgroup_##__VAR##_read(struct cgroup *cgroup,		\
+				       struct cftype *cftype)		\
+{									\
+	struct io_cgroup *iocg;					\
+	u64 ret;							\
+									\
+	if (!cgroup_lock_live_group(cgroup))				\
+		return -ENODEV;						\
+									\
+	iocg = cgroup_to_io_cgroup(cgroup);				\
+	spin_lock_irq(&iocg->lock);					\
+	ret = iocg->__VAR;						\
+	spin_unlock_irq(&iocg->lock);					\
+									\
+	cgroup_unlock();						\
+									\
+	return ret;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#637: FILE: block/elevator-fq.c:1113:
+#define STORE_FUNCTION(__VAR, __MIN, __MAX)				\
+static int io_cgroup_##__VAR##_write(struct cgroup *cgroup,		\
+					struct cftype *cftype,		\
+					u64 val)			\
+{									\
+	struct io_cgroup *iocg;					\
+	struct io_group *iog;						\
+	struct hlist_node *n;						\
+									\
+	if (val < (__MIN) || val > (__MAX))				\
+		return -EINVAL;						\
+									\
+	if (!cgroup_lock_live_group(cgroup))				\
+		return -ENODEV;						\
+									\
+	iocg = cgroup_to_io_cgroup(cgroup);				\
+									\
+	spin_lock_irq(&iocg->lock);					\
+	iocg->__VAR = (unsigned long)val;				\
+	hlist_for_each_entry(iog, n, &iocg->group_data, group_node) {	\
+		iog->entity.new_##__VAR = (unsigned long)val;		\
+		smp_wmb();						\
+		iog->entity.ioprio_changed = 1;				\
+	}								\
+	spin_unlock_irq(&iocg->lock);					\
+									\
+	cgroup_unlock();						\
+									\
+	return 0;							\
+}

WARNING:MEMORY_BARRIER: memory barrier without comment
#658: FILE: block/elevator-fq.c:1134:
+		smp_wmb();						\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: block/elevator-fq.c:1158:
+struct io_group *io_group_chain_alloc(struct request_queue *q, void *key,
+					struct cgroup *cgroup)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#688: FILE: block/elevator-fq.c:1164:
+	for (; cgroup != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#692: FILE: block/elevator-fq.c:1168:
+		if (iog != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!leaf"
#721: FILE: block/elevator-fq.c:1197:
+		if (leaf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#739: FILE: block/elevator-fq.c:1215:
+	while (leaf != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: block/elevator-fq.c:1240:
+void io_group_chain_link(struct request_queue *q, void *key,
+				struct cgroup *cgroup,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#774: FILE: block/elevator-fq.c:1250:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#774: FILE: block/elevator-fq.c:1250:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#779: FILE: block/elevator-fq.c:1255:
+		BUG_ON(iog != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#779: FILE: block/elevator-fq.c:1255:
+		BUG_ON(iog != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#793: FILE: block/elevator-fq.c:1269:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgroup"
#793: FILE: block/elevator-fq.c:1269:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#793: FILE: block/elevator-fq.c:1269:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#795: FILE: block/elevator-fq.c:1271:
+	if (cgroup != NULL && prev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#795: FILE: block/elevator-fq.c:1271:
+	if (cgroup != NULL && prev != NULL) {

WARNING:TYPO_SPELLING: 'becames' may be misspelled - perhaps 'becomes'?
#813: FILE: block/elevator-fq.c:1289:
+ * but is a safe fallbak.  If this loss becames a problem it can be
                                         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: block/elevator-fq.c:1299:
+struct io_group *io_find_alloc_group(struct request_queue *q,
+			struct cgroup *cgroup, struct elv_fq_data *efqd,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#840: FILE: block/elevator-fq.c:1316:
+	if (iog != NULL || !create)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#844: FILE: block/elevator-fq.c:1320:
+	if (iog != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#897: FILE: block/elevator-fq.c:1373:
+	BUG_ON(!iog);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: block/elevator-fq.c:1388:
+struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#919: FILE: block/elevator-fq.c:1395:
+	if (iog == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: block/elevator-fq.c:1433:
+struct cgroup_subsys_state *iocg_create(struct cgroup_subsys *subsys,
+						struct cgroup *cgroup)

CHECK:BRACES: braces {} should be used on all arms of this statement
#961: FILE: block/elevator-fq.c:1437:
+	if (cgroup->parent != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup->parent"
#961: FILE: block/elevator-fq.c:1437:
+	if (cgroup->parent != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iocg"
#963: FILE: block/elevator-fq.c:1439:
+		if (iocg == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#965: FILE: block/elevator-fq.c:1441:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: block/elevator-fq.c:1461:
+int iocg_can_attach(struct cgroup_subsys *subsys, struct cgroup *cgroup,
+			    struct task_struct *tsk)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioc"
#993: FILE: block/elevator-fq.c:1469:
+	if (ioc != NULL && atomic_read(&ioc->nr_tasks) > 1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: block/elevator-fq.c:1483:
+void iocg_attach(struct cgroup_subsys *subsys, struct cgroup *cgroup,
+			 struct cgroup *prev, struct task_struct *tsk)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioc"
#1013: FILE: block/elevator-fq.c:1489:
+	if (ioc != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1031: FILE: block/elevator-fq.c:1507:
+		BUG_ON(!RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1032: FILE: block/elevator-fq.c:1508:
+		BUG_ON(!RB_EMPTY_ROOT(&st->idle));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1033: FILE: block/elevator-fq.c:1509:
+		BUG_ON(st->wsum != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1036: FILE: block/elevator-fq.c:1512:
+	BUG_ON(iog->sched_data.next_active != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.next_active"
#1036: FILE: block/elevator-fq.c:1512:
+	BUG_ON(iog->sched_data.next_active != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1037: FILE: block/elevator-fq.c:1513:
+	BUG_ON(iog->sched_data.active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.active_entity"
#1037: FILE: block/elevator-fq.c:1513:
+	BUG_ON(iog->sched_data.active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1038: FILE: block/elevator-fq.c:1514:
+	BUG_ON(entity != NULL && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#1038: FILE: block/elevator-fq.c:1514:
+	BUG_ON(entity != NULL && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#1038: FILE: block/elevator-fq.c:1514:
+	BUG_ON(entity != NULL && entity->tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1049: FILE: block/elevator-fq.c:1525:
+	BUG_ON(!iog);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1053: FILE: block/elevator-fq.c:1529:
+	BUG_ON(atomic_read(&iog->ref) <= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: block/elevator-fq.c:1535:
+		parent = container_of(iog->my_entity->parent,
+					struct io_group, entity);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1107: FILE: block/elevator-fq.c:1583:
+	BUG_ON(iog->my_entity == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog->my_entity"
#1107: FILE: block/elevator-fq.c:1583:
+	BUG_ON(iog->my_entity == NULL);

WARNING:TYPO_SPELLING: 'entites' may be misspelled - perhaps 'entities'?
#1139: FILE: block/elevator-fq.c:1615:
+		 * io group does not have any active entites. Because this
 		                                     ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1160: FILE: block/elevator-fq.c:1636:
+	struct elv_fq_data *efqd;
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1160: FILE: block/elevator-fq.c:1636:
+	unsigned long uninitialized_var(flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#1160: FILE: block/elevator-fq.c:1636:
+	unsigned long uninitialized_var(flags);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1201: FILE: block/elevator-fq.c:1677:
+	BUG_ON(!hlist_empty(&iocg->group_data));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1221: FILE: block/elevator-fq.c:1697:
+	BUG_ON(!id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1225: FILE: block/elevator-fq.c:1701:
+	BUG_ON(!css);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1252: FILE: block/elevator-fq.c:1728:
+	hlist_for_each_entry_safe(iog, pos, n, &efqd->group_list,
+					elv_data_node) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1284: FILE: block/elevator-fq.c:1760:
+		 * group has not been setup yet. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1304: FILE: block/elevator-fq.c:1780:
+struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#1310: FILE: block/elevator-fq.c:1786:
+	if (iog == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd"
#1386: FILE: block/elevator-fq.c:2206:
+	for (; sd != NULL; sd = entity->my_sched_data) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1395: FILE: block/elevator-fq.c:2215:
+		BUG_ON(!entity && extract);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1416: FILE: block/elevator-fq.c:2239:
+		struct io_group *iog = ioq_to_io_group(ioq);
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d ioprio=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#1417: FILE: block/elevator-fq.c:2240:
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d ioprio=%d"
+				" weight=%ld group_weight=%ld",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1470: FILE: block/elevator-fq.c:2524:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1588: FILE: block/elevator-fq.h:20:
+#define WEIGHT_MAX ^I^I1000$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1707: FILE: block/elevator-fq.h:264:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'pre-empt' may be misspelled - perhaps 'preempt'?
#1719: FILE: block/elevator-fq.h:276:
+	 * Used to track any pending rt requests so we can pre-empt current
 	                                                   ^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1746: FILE: block/elevator-fq.h:457:
+	return ((IOPRIO_BE_NR - ioprio) * WEIGHT_MAX)/IOPRIO_BE_NR;
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1761: FILE: block/elevator-fq.h:481:
+extern int io_group_allow_merge(struct request *rq, struct bio *bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1762: FILE: block/elevator-fq.h:482:
+extern void elv_put_iog(struct io_group *iog);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1788: FILE: block/elevator-fq.h:508:
+}
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1832: FILE: block/elevator-fq.h:582:
+extern struct io_group *io_get_io_group(struct request_queue *q, int create);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1915: FILE: init/Kconfig:609:
+config GROUP_IOSCHED
+	bool "Group IO Scheduler"
+	depends on CGROUPS && ELV_FAIR_QUEUING
+	default n
+	---help---
+	  This feature lets IO scheduler recognize task groups and control
+	  disk bandwidth allocation to such task groups.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 40 warnings, 75 checks, 1752 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
