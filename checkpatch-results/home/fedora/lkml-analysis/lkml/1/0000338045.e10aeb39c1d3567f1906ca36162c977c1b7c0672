WARNING:BRACES: braces {} are not necessary for single statement blocks
#67: FILE: block/ll_rw_blk.c:3194:
+	if (!current->io_throttle) {
+		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#71: FILE: block/ll_rw_blk.c:3198:
+	if (!current->io_throttle_timestamp) {
+		current->io_throttle_timestamp = jiffies;
+	}

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#80: FILE: block/ll_rw_blk.c:3207:
+		current->io_throttle * max(delta, (unsigned long)1);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#81: FILE: block/ll_rw_blk.c:3208:
+	if (sleep > 0) {
+		schedule_timeout_uninterruptible(sleep);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/proc/base.c:887:
+static ssize_t io_throttle_write(struct file *file, const char __user *buf,
+				size_t count, loff_t *ppos)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#146: FILE: fs/proc/base.c:898:
+	io_throttle = simple_strtoul(buffer, &end, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: fs/proc/base.c:2304:
+	REG("io_throttle",    S_IRUGO|S_IWUSR, io_throttle),
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#173: FILE: fs/proc/base.c:2304:
+	REG("io_throttle",    S_IRUGO|S_IWUSR, io_throttle),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#204: FILE: init/Kconfig:209:
+config TASK_IO_THROTTLE
+	bool "Enable per-task I/O throttling (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	help
+	  Allow to limit the maximum I/O rate for specific process(es).
+
+	  Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338045.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 2 checks, 150 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338045.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
