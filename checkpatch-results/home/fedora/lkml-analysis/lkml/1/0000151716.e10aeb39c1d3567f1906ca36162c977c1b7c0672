WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#84: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#493: FILE: Documentation/DocBook/utrace.tmpl:405:
+!Iinclude/linux/utrace.h
  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#814: FILE: include/linux/tracehook.h:381:
+	BUG_ON(task->exit_state != EXIT_DEAD);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MEMORY_BARRIER: memory barrier without comment
#886: FILE: include/linux/tracehook.h:588:
+	smp_mb();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#920: FILE: include/linux/utrace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#970: FILE: include/linux/utrace.h:51:
+^I_UTRACE_EVENT_REAP,  ^I/* Zombie reaped, no more tracing possible.  */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#985: FILE: include/linux/utrace.h:66:
+};
+#define UTRACE_EVENT(type)	(1UL << _UTRACE_EVENT_##type)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1014: FILE: include/linux/utrace.h:95:
+bool utrace_interrupt_pending(void)

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1015: FILE: include/linux/utrace.h:96:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1016: FILE: include/linux/utrace.h:97:
+void utrace_resume(struct task_struct *, struct pt_regs *)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1016: FILE: include/linux/utrace.h:97:
+void utrace_resume(struct task_struct *, struct pt_regs *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1017: FILE: include/linux/utrace.h:98:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1018: FILE: include/linux/utrace.h:99:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1018: FILE: include/linux/utrace.h:99:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'siginfo_t *' should also have an identifier name
#1018: FILE: include/linux/utrace.h:99:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_sigaction *' should also have an identifier name
#1018: FILE: include/linux/utrace.h:99:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1020: FILE: include/linux/utrace.h:101:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1021: FILE: include/linux/utrace.h:102:
+void utrace_report_clone(unsigned long, struct task_struct *)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1021: FILE: include/linux/utrace.h:102:
+void utrace_report_clone(unsigned long, struct task_struct *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1022: FILE: include/linux/utrace.h:103:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1023: FILE: include/linux/utrace.h:104:
+void utrace_finish_vfork(struct task_struct *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1024: FILE: include/linux/utrace.h:105:
+	__attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1026: FILE: include/linux/utrace.h:107:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1027: FILE: include/linux/utrace.h:108:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace *' should also have an identifier name
#1027: FILE: include/linux/utrace.h:108:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#1027: FILE: include/linux/utrace.h:108:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1027: FILE: include/linux/utrace.h:108:
+void utrace_report_death(struct task_struct *, struct utrace *, bool, int)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1028: FILE: include/linux/utrace.h:109:
+	__attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1030: FILE: include/linux/utrace.h:111:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binfmt *' should also have an identifier name
#1031: FILE: include/linux/utrace.h:112:
+void utrace_report_exec(struct linux_binfmt *, struct linux_binprm *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binprm *' should also have an identifier name
#1031: FILE: include/linux/utrace.h:112:
+void utrace_report_exec(struct linux_binfmt *, struct linux_binprm *,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1033: FILE: include/linux/utrace.h:114:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1034: FILE: include/linux/utrace.h:115:
+bool utrace_report_syscall_entry(struct pt_regs *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1035: FILE: include/linux/utrace.h:116:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1036: FILE: include/linux/utrace.h:117:
+void utrace_report_syscall_exit(struct pt_regs *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1037: FILE: include/linux/utrace.h:118:
+	__attribute__((weak));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1038: FILE: include/linux/utrace.h:119:
+void utrace_signal_handler(struct task_struct *, int)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1038: FILE: include/linux/utrace.h:119:
+void utrace_signal_handler(struct task_struct *, int)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1039: FILE: include/linux/utrace.h:120:
+	__attribute__((weak));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1050: FILE: include/linux/utrace.h:131:
+}
+static inline struct utrace *task_utrace_struct(struct task_struct *task)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1054: FILE: include/linux/utrace.h:135:
+}
+static inline void utrace_init_task(struct task_struct *child)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1057: FILE: include/linux/utrace.h:138:
+}
+static inline void utrace_release_task(struct task_struct *task)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1090: FILE: include/linux/utrace.h:171:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1126: FILE: include/linux/utrace.h:207:
+};
+#define	UTRACE_RESUME_MASK	0x0f

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1173: FILE: include/linux/utrace.h:254:
+};
+#define	UTRACE_SIGNAL_MASK	0xf0

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1201: FILE: include/linux/utrace.h:282:
+};
+#define	UTRACE_SYSCALL_MASK	0xf0

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1356: FILE: include/linux/utrace.h:437:
+ *	action seen by the the following engine's callback.  The @info data

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1523: FILE: include/linux/utrace.h:604:
+struct utrace_engine *utrace_attach_task(struct task_struct *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1523: FILE: include/linux/utrace.h:604:
+struct utrace_engine *utrace_attach_task(struct task_struct *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct utrace_engine_ops *' should also have an identifier name
#1523: FILE: include/linux/utrace.h:604:
+struct utrace_engine *utrace_attach_task(struct task_struct *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1523: FILE: include/linux/utrace.h:604:
+struct utrace_engine *utrace_attach_task(struct task_struct *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pid *' should also have an identifier name
#1526: FILE: include/linux/utrace.h:607:
+struct utrace_engine *utrace_attach_pid(struct pid *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1526: FILE: include/linux/utrace.h:607:
+struct utrace_engine *utrace_attach_pid(struct pid *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct utrace_engine_ops *' should also have an identifier name
#1526: FILE: include/linux/utrace.h:607:
+struct utrace_engine *utrace_attach_pid(struct pid *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1526: FILE: include/linux/utrace.h:607:
+struct utrace_engine *utrace_attach_pid(struct pid *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1529: FILE: include/linux/utrace.h:610:
+int __must_check utrace_control(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_engine *' should also have an identifier name
#1529: FILE: include/linux/utrace.h:610:
+int __must_check utrace_control(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1532: FILE: include/linux/utrace.h:613:
+int __must_check utrace_set_events(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_engine *' should also have an identifier name
#1532: FILE: include/linux/utrace.h:613:
+int __must_check utrace_set_events(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1535: FILE: include/linux/utrace.h:616:
+int __must_check utrace_barrier(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_engine *' should also have an identifier name
#1535: FILE: include/linux/utrace.h:616:
+int __must_check utrace_barrier(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1537: FILE: include/linux/utrace.h:618:
+int __must_check utrace_prepare_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_engine *' should also have an identifier name
#1537: FILE: include/linux/utrace.h:618:
+int __must_check utrace_prepare_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_examiner *' should also have an identifier name
#1537: FILE: include/linux/utrace.h:618:
+int __must_check utrace_prepare_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1540: FILE: include/linux/utrace.h:621:
+int __must_check utrace_finish_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_engine *' should also have an identifier name
#1540: FILE: include/linux/utrace.h:621:
+int __must_check utrace_finish_examine(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_examiner *' should also have an identifier name
#1540: FILE: include/linux/utrace.h:621:
+int __must_check utrace_finish_examine(struct task_struct *,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1556: FILE: include/linux/utrace.h:637:
+static inline __must_check int utrace_control_pid(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1568: FILE: include/linux/utrace.h:649:
+	struct task_struct *task = pid_task(pid, PIDTYPE_PID);
+	return unlikely(!task) ? -ESRCH : utrace_control(task, engine, action);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1583: FILE: include/linux/utrace.h:664:
+static inline __must_check int utrace_set_events_pid(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1587: FILE: include/linux/utrace.h:668:
+	struct task_struct *task = pid_task(pid, PIDTYPE_PID);
+	return unlikely(!task) ? -ESRCH :

WARNING:LINE_SPACING: Missing a blank line after declarations
#1606: FILE: include/linux/utrace.h:687:
+	struct task_struct *task = pid_task(pid, PIDTYPE_PID);
+	return unlikely(!task) ? -ESRCH : utrace_barrier(task, engine);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1618: FILE: include/linux/utrace_struct.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1648: FILE: include/linux/utrace_struct.h:31:
+	spinlock_t lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#1661: FILE: include/linux/utrace_struct.h:44:
+# define INIT_UTRACE(tsk)						      \
+	.utrace_flags = 0,						      \
+	.utrace = {							      \
+		.lock = __SPIN_LOCK_UNLOCKED(tsk.utrace.lock),		      \
+		.attached = LIST_HEAD_INIT(tsk.utrace.attached),	      \
+		.attaching = LIST_HEAD_INIT(tsk.utrace.attaching),	      \
+	},

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1684: FILE: init/Kconfig:1063:
+menuconfig UTRACE
+	bool "Infrastructure for tracing and debugging user processes"
+	depends on EXPERIMENTAL
+	depends on HAVE_ARCH_TRACEHOOK
+	help
+	  Enable the utrace process tracing interface.  This is an internal
+	  kernel interface exported to kernel modules, to track events in
+	  user threads, extract and change user thread state.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1764: FILE: kernel/utrace.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1789: FILE: kernel/utrace.c:26:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1844: FILE: kernel/utrace.c:81:
+	BUG_ON(!list_empty(&engine->entry));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1859: FILE: kernel/utrace.c:96:
+static struct utrace_engine *matching_engine(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1864: FILE: kernel/utrace.c:101:
+	struct utrace_engine *engine;
+	list_for_each_entry(engine, &utrace->attached, entry)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1981: FILE: kernel/utrace.c:218:
+struct utrace_engine *utrace_attach_task(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2060: FILE: kernel/utrace.c:297:
+struct utrace_engine *utrace_attach_pid(

WARNING:LINE_SPACING: Missing a blank line after declarations
#2066: FILE: kernel/utrace.c:303:
+	struct task_struct *task = get_pid_task(pid, PIDTYPE_PID);
+	if (task) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2146: FILE: kernel/utrace.c:383:
+	BUG_ON(utrace->stopped);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2288: FILE: kernel/utrace.c:525:
+	struct utrace_engine *engine, *next;
+	list_for_each_entry_safe(engine, next, list, entry) {

CHECK:BIT_MACRO: Prefer using the BIT macro
#2377: FILE: kernel/utrace.c:614:
+#define ENGINE_STOP		(1UL << _UTRACE_NEVENTS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#2441: FILE: kernel/utrace.c:678:
+	if (unlikely(IS_ERR(utrace)))

WARNING:MEMORY_BARRIER: memory barrier without comment
#2522: FILE: kernel/utrace.c:759:
+	smp_wmb();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2543: FILE: kernel/utrace.c:780:
+			utrace->stopped = stopped = true;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2549: FILE: kernel/utrace.c:786:
+		utrace->stopped = stopped = true;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2606: FILE: kernel/utrace.c:843:
+	bool wake = !action;
+	BUG_ON(wake != (task != current));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2606: FILE: kernel/utrace.c:843:
+	BUG_ON(wake != (task != current));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2634: FILE: kernel/utrace.c:871:
+		BUG_ON(utrace->death);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#2817: FILE: kernel/utrace.c:1054:
+	if (unlikely(IS_ERR(utrace)))

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2857: FILE: kernel/utrace.c:1094:
+		/* Fall through.  */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LINE_SPACING: Missing a blank line after declarations
#2908: FILE: kernel/utrace.c:1145:
+			unsigned long irqflags;
+			sighand = lock_task_sighand(target, &irqflags);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2922: FILE: kernel/utrace.c:1159:
+			/* Fall through to treat it as SINGLESTEP.  */

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#2994: FILE: kernel/utrace.c:1231:
+		if (unlikely(IS_ERR(utrace))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3045: FILE: kernel/utrace.c:1282:
+	BUG_ON(utrace->stopped);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3077: FILE: kernel/utrace.c:1314:
+		return;
+	} else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3158: FILE: kernel/utrace.c:1395:
+static const struct utrace_engine_ops *start_callback(

WARNING:MEMORY_BARRIER: memory barrier without comment
#3174: FILE: kernel/utrace.c:1411:
+	smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3182: FILE: kernel/utrace.c:1419:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3200: FILE: kernel/utrace.c:1437:
+		smp_mb();

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#3220: FILE: kernel/utrace.c:1457:
+#define REPORT(task, utrace, report, event, callback, ...)		      \
+	do {								      \
+		start_report(utrace);					      \
+		REPORT_CALLBACKS(task, utrace, report, event, callback,	      \
+				 (report)->action, engine, current,	      \
+				 ## __VA_ARGS__);  	   		      \
+		finish_report(report, task, utrace);			      \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'utrace' - possible side-effects?
#3220: FILE: kernel/utrace.c:1457:
+#define REPORT(task, utrace, report, event, callback, ...)		      \
+	do {								      \
+		start_report(utrace);					      \
+		REPORT_CALLBACKS(task, utrace, report, event, callback,	      \
+				 (report)->action, engine, current,	      \
+				 ## __VA_ARGS__);  	   		      \
+		finish_report(report, task, utrace);			      \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'report' - possible side-effects?
#3220: FILE: kernel/utrace.c:1457:
+#define REPORT(task, utrace, report, event, callback, ...)		      \
+	do {								      \
+		start_report(utrace);					      \
+		REPORT_CALLBACKS(task, utrace, report, event, callback,	      \
+				 (report)->action, engine, current,	      \
+				 ## __VA_ARGS__);  	   		      \
+		finish_report(report, task, utrace);			      \
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3225: FILE: kernel/utrace.c:1462:
+^I^I^I^I ## __VA_ARGS__);  ^I   ^I^I      \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'utrace' - possible side-effects?
#3228: FILE: kernel/utrace.c:1465:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_engine *engine;				      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry(engine, &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'utrace' may be better as '(utrace)' to avoid precedence issues
#3228: FILE: kernel/utrace.c:1465:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_engine *engine;				      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry(engine, &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'report' - possible side-effects?
#3228: FILE: kernel/utrace.c:1465:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_engine *engine;				      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry(engine, &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'callback' may be better as '(callback)' to avoid precedence issues
#3228: FILE: kernel/utrace.c:1465:
+#define REPORT_CALLBACKS(task, utrace, report, event, callback, ...)	      \
+	do {								      \
+		struct utrace_engine *engine;				      \
+		const struct utrace_engine_ops *ops;			      \
+		list_for_each_entry(engine, &utrace->attached, entry) {	      \
+			ops = start_callback(utrace, report, engine, task,    \
+					     event);			      \
+			if (!ops)					      \
+				continue;				      \
+			finish_callback(utrace, report, engine,		      \
+					(*ops->callback)(__VA_ARGS__));	      \
+		}							      \
+	} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3250: FILE: kernel/utrace.c:1487:
+	struct utrace *utrace = task_utrace_struct(task);
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3264: FILE: kernel/utrace.c:1501:
+	struct utrace *utrace = task_utrace_struct(task);
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3308: FILE: kernel/utrace.c:1545:
+	struct utrace *utrace = task_utrace_struct(task);
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3324: FILE: kernel/utrace.c:1561:
+	struct utrace *utrace = task_utrace_struct(task);
+	INIT_REPORT(report);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3365: FILE: kernel/utrace.c:1602:
+	if (!utrace->vfork_stop)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3367: FILE: kernel/utrace.c:1604:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3383: FILE: kernel/utrace.c:1620:
+	struct utrace *utrace = task_utrace_struct(task);
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3443: FILE: kernel/utrace.c:1680:
+	struct utrace *utrace = task_utrace_struct(task);
+	INIT_REPORT(report);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3465: FILE: kernel/utrace.c:1702:
+	BUG_ON(!task->exit_state);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3479: FILE: kernel/utrace.c:1716:
+	BUG_ON(utrace->death);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3553: FILE: kernel/utrace.c:1790:
+	struct utrace *utrace = task_utrace_struct(task);
+	INIT_REPORT(report);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3570: FILE: kernel/utrace.c:1807:
+		int skip;
+		spin_lock(&utrace->lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3651: FILE: kernel/utrace.c:1888:
+	struct k_sigaction *ka;
+	INIT_REPORT(report);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3682: FILE: kernel/utrace.c:1919:
+		utrace->interrupt = utrace->report = utrace->signal_handler = 0;

WARNING:SIZEOF_PARENTHESIS: sizeof *return_ka should be sizeof(*return_ka)
#3711: FILE: kernel/utrace.c:1948:
+		memset(return_ka, 0, sizeof *return_ka);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3719: FILE: kernel/utrace.c:1956:
+		return 0;
+	} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3738: FILE: kernel/utrace.c:1975:
+		BUG_ON(signr != info->si_signo);

WARNING:MEMORY_BARRIER: memory barrier without comment
#3795: FILE: kernel/utrace.c:2032:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3802: FILE: kernel/utrace.c:2039:
+		smp_rmb();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3811: FILE: kernel/utrace.c:2048:
+			ret = (*ops->report_signal)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3815: FILE: kernel/utrace.c:2052:
+			ret = (report.result | (*ops->report_quiesce)(

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3863: FILE: kernel/utrace.c:2100:
+			 * For ignore, we'll fall through below.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3900: FILE: kernel/utrace.c:2137:
+		/* Fall through for an ignored signal.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#3925: FILE: kernel/utrace.c:2162:
+			sigset_t sigkill_only;
+			siginitsetinv(&sigkill_only, sigmask(SIGKILL));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3928: FILE: kernel/utrace.c:2165:
+			BUG_ON(signr != SIGKILL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4022: FILE: kernel/utrace.c:2259:
+	if (unlikely(!engine_wants_stop(engine)))
[...]
+	else if (unlikely(target->exit_state))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4026: FILE: kernel/utrace.c:2263:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4085: FILE: kernel/utrace.c:2322:
+		unsigned long ncsw = wait_task_inactive(target, exam->state);
+		if (unlikely(ncsw != exam->ncsw))

WARNING:LINE_SPACING: Missing a blank line after declarations
#4106: FILE: kernel/utrace.c:2343:
+	struct utrace *utrace = &p->utrace;
+	seq_printf(m, "Utrace: %lx%s%s%s\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151716.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 108 warnings, 34 checks, 3954 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151716.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
