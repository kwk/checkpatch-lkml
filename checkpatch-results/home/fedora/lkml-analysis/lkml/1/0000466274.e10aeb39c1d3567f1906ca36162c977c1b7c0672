WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#37: FILE: drivers/mtd/ubi/debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#51: FILE: drivers/mtd/ubi/debug.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#52: FILE: drivers/mtd/ubi/debug.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: drivers/mtd/ubi/debug.c:196:
+	debugfs_vb_err_prints = debugfs_create_bool("vb_err_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &vb_err_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#232: FILE: drivers/mtd/ubi/debug.c:196:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &vb_err_prints);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/mtd/ubi/debug.c:201:
+	debugfs_uif_prints = debugfs_create_bool("uif_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &uif_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#237: FILE: drivers/mtd/ubi/debug.c:201:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &uif_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: drivers/mtd/ubi/debug.c:206:
+	debugfs_cdev_prints = debugfs_create_bool("cdev_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &cdev_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#242: FILE: drivers/mtd/ubi/debug.c:206:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &cdev_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: drivers/mtd/ubi/debug.c:211:
+	debugfs_gluebi_prints = debugfs_create_bool("gluebi_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &gluebi_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#247: FILE: drivers/mtd/ubi/debug.c:211:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &gluebi_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: drivers/mtd/ubi/debug.c:216:
+	debugfs_vmt_prints = debugfs_create_bool("vmt_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &vmt_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#252: FILE: drivers/mtd/ubi/debug.c:216:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &vmt_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: drivers/mtd/ubi/debug.c:221:
+	debugfs_upd_prints = debugfs_create_bool("upd_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &upd_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#257: FILE: drivers/mtd/ubi/debug.c:221:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &upd_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: drivers/mtd/ubi/debug.c:226:
+	debugfs_vtbl_prints = debugfs_create_bool("vtbl_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &vtbl_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#262: FILE: drivers/mtd/ubi/debug.c:226:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &vtbl_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: drivers/mtd/ubi/debug.c:231:
+	debugfs_acc_prints = debugfs_create_bool("acc_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &acc_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#267: FILE: drivers/mtd/ubi/debug.c:231:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &acc_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: drivers/mtd/ubi/debug.c:236:
+	debugfs_eba_prints = debugfs_create_bool("eba_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &eba_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#272: FILE: drivers/mtd/ubi/debug.c:236:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &eba_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: drivers/mtd/ubi/debug.c:241:
+	debugfs_wl_prints = debugfs_create_bool("wl_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &wl_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#277: FILE: drivers/mtd/ubi/debug.c:241:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &wl_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: drivers/mtd/ubi/debug.c:246:
+	debugfs_bgt_prints = debugfs_create_bool("bgt_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &bgt_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#282: FILE: drivers/mtd/ubi/debug.c:246:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &bgt_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: drivers/mtd/ubi/debug.c:251:
+	debugfs_io_prints = debugfs_create_bool("io_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &io_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#287: FILE: drivers/mtd/ubi/debug.c:251:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &io_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/mtd/ubi/debug.c:256:
+	debugfs_bld_prints = debugfs_create_bool("bld_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &bld_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#292: FILE: drivers/mtd/ubi/debug.c:256:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &bld_prints);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/mtd/ubi/debug.c:261:
+	debugfs_scan_prints = debugfs_create_bool("scan_prints",
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &scan_prints);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#297: FILE: drivers/mtd/ubi/debug.c:261:
+		S_IFREG | S_IRUGO | S_IWUGO, debugfs_root, &scan_prints);

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: drivers/mtd/ubi/debug.c:294:
+        debugfs_remove(debugfs_root);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: drivers/mtd/ubi/debug.c:294:
+        debugfs_remove(debugfs_root);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: drivers/mtd/ubi/debug.c:409:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#449: FILE: drivers/mtd/ubi/debug.c:413:
+	printk(UBI_DBG_LEVEL "%s (pid:%d) ", prefix, current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#451: FILE: drivers/mtd/ubi/debug.c:415:
+		printk("%s: ", func);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: drivers/mtd/ubi/debug.c:417:
+	printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vtr->name"
#502: FILE: drivers/mtd/ubi/debug.c:466:
+	if (vtr->name == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#577: FILE: drivers/mtd/ubi/debug.c:541:
+	switch (type) {
+		case 0:
[...]
+		case 1:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#598: FILE: drivers/mtd/ubi/debug.c:562:
+	if (name == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: drivers/mtd/ubi/debug.c:578:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#619: FILE: drivers/mtd/ubi/debug.c:583:
+	const uint8_t *p = ptr;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#622: FILE: drivers/mtd/ubi/debug.c:586:
+	rows = size/BYTES_PER_LINE + size % BYTES_PER_LINE;
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#633: FILE: drivers/mtd/ubi/debug.c:597:
+		printk(UBI_DBG_LEVEL "%5d:  ", i * BYTES_PER_LINE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#640: FILE: drivers/mtd/ubi/debug.c:604:
+				printk("%02x", p[k++]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#641: FILE: drivers/mtd/ubi/debug.c:605:
+			printk(" ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#643: FILE: drivers/mtd/ubi/debug.c:607:
+		printk("\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000466274.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 24 warnings, 19 checks, 634 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000466274.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
