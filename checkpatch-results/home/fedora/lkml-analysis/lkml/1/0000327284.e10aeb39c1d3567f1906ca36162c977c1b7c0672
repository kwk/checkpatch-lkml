WARNING:BAD_SIGN_OFF: Use a single space after To:
#45: 
to:

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: ''
#45: 
to:

WARNING:BAD_SIGN_OFF: Use a single space after To:
#68: 
to:

ERROR:BAD_SIGN_OFF: Unrecognized email address: ''
#68: 
to:

WARNING:BAD_SIGN_OFF: Duplicate signature
#68: 
to:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: fs/udf/super.c:804:
+		bh = udf_read_tagged(sb, sbi->s_anchor[i],
+					sbi->s_anchor[i], &ident);

CHECK:BRACES: braces {} should be used on all arms of this statement
#102: FILE: fs/udf/super.c:805:
+		if (!bh)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#104: FILE: fs/udf/super.c:807:
+		else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ident != TAG_IDENT_AVDP'
#106: FILE: fs/udf/super.c:809:
+			if ((ident != TAG_IDENT_AVDP) &&
+				(i || (ident != TAG_IDENT_FE &&
+					ident != TAG_IDENT_EFE)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: fs/udf/super.c:810:
+			if ((ident != TAG_IDENT_AVDP) &&
+				(i || (ident != TAG_IDENT_FE &&

CHECK:CAMELCASE: Avoid CamelCase: <partitionHeaderDesc>
#124: FILE: fs/udf/super.c:1004:
+		struct partitionHeaderDesc *phd;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <partitionNumber>
#147: FILE: fs/udf/super.c:1011:
+				le16_to_cpu(p->partitionNumber))

CHECK:CAMELCASE: Avoid CamelCase: <partitionLength>
#151: FILE: fs/udf/super.c:1015:
+			le32_to_cpu(p->partitionLength); /* blocks */

CHECK:CAMELCASE: Avoid CamelCase: <partitionStartingLocation>
#153: FILE: fs/udf/super.c:1017:
+			le32_to_cpu(p->partitionStartingLocation);

CHECK:CAMELCASE: Avoid CamelCase: <accessType>
#154: FILE: fs/udf/super.c:1018:
+		if (p->accessType == cpu_to_le32(PD_ACCESS_TYPE_READ_ONLY))

CHECK:CAMELCASE: Avoid CamelCase: <partitionContents>
#163: FILE: fs/udf/super.c:1027:
+		if (strcmp(p->partitionContents.ident,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: fs/udf/super.c:1028:
+		if (strcmp(p->partitionContents.ident,
+				PD_PARTITION_CONTENTS_NSR02) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: fs/udf/super.c:1030:
+			strcmp(p->partitionContents.ident,
+				PD_PARTITION_CONTENTS_NSR03))

CHECK:CAMELCASE: Avoid CamelCase: <partitionContentsUse>
#170: FILE: fs/udf/super.c:1034:
+				(p->partitionContentsUse);

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceTable>
#171: FILE: fs/udf/super.c:1035:
+		if (phd->unallocSpaceTable.extLength) {

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#171: FILE: fs/udf/super.c:1035:
+		if (phd->unallocSpaceTable.extLength) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#173: FILE: fs/udf/super.c:1037:
+				.logicalBlockNum = le32_to_cpu(

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#173: FILE: fs/udf/super.c:1037:
+				.logicalBlockNum = le32_to_cpu(

CHECK:CAMELCASE: Avoid CamelCase: <extPosition>
#174: FILE: fs/udf/super.c:1038:
+					phd->unallocSpaceTable.extPosition),

CHECK:CAMELCASE: Avoid CamelCase: <partitionReferenceNum>
#175: FILE: fs/udf/super.c:1039:
+				.partitionReferenceNum = i,

WARNING:SPLIT_STRING: quoted string split across lines
#182: FILE: fs/udf/super.c:1046:
+				udf_debug("cannot load unallocSpaceTable "
+					  "(part %d)\n", i);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: fs/udf/super.c:1052:
+			udf_debug("unallocSpaceTable (part %d) @ %ld\n",
+					i, map->s_uspace.s_table->i_ino);

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceBitmap>
#190: FILE: fs/udf/super.c:1054:
+		if (phd->unallocSpaceBitmap.extLength) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bitmap"
#194: FILE: fs/udf/super.c:1058:
+			if (bitmap != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#195: FILE: fs/udf/super.c:1059:
+				bitmap->s_extLength = le32_to_cpu(

CHECK:CAMELCASE: Avoid CamelCase: <s_extLength>
#195: FILE: fs/udf/super.c:1059:
+				bitmap->s_extLength = le32_to_cpu(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#197: FILE: fs/udf/super.c:1061:
+				bitmap->s_extPosition = le32_to_cpu(

CHECK:CAMELCASE: Avoid CamelCase: <s_extPosition>
#197: FILE: fs/udf/super.c:1061:
+				bitmap->s_extPosition = le32_to_cpu(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/udf/super.c:1066:
+				udf_debug("unallocSpaceBitmap (part %d) @ %d\n",
+						i, bitmap->s_extPosition);

CHECK:CAMELCASE: Avoid CamelCase: <partitionIntegrityTable>
#208: FILE: fs/udf/super.c:1069:
+		if (phd->partitionIntegrityTable.extLength)

CHECK:CAMELCASE: Avoid CamelCase: <freedSpaceTable>
#210: FILE: fs/udf/super.c:1071:
+		if (phd->freedSpaceTable.extLength) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#212: FILE: fs/udf/super.c:1073:
+				.logicalBlockNum = le32_to_cpu(

WARNING:SPLIT_STRING: quoted string split across lines
#221: FILE: fs/udf/super.c:1082:
+				udf_debug("cannot load freedSpaceTable "
+					  "(part %d)\n", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: fs/udf/super.c:1088:
+			udf_debug("freedSpaceTable (part %d) @ %ld\n",
+					i, map->s_fspace.s_table->i_ino);

CHECK:CAMELCASE: Avoid CamelCase: <freedSpaceBitmap>
#229: FILE: fs/udf/super.c:1090:
+		if (phd->freedSpaceBitmap.extLength) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bitmap"
#233: FILE: fs/udf/super.c:1094:
+			if (bitmap != NULL) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#234: FILE: fs/udf/super.c:1095:
+				bitmap->s_extLength = le32_to_cpu(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#236: FILE: fs/udf/super.c:1097:
+				bitmap->s_extPosition = le32_to_cpu(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: fs/udf/super.c:1102:
+				udf_debug("freedSpaceBitmap (part %d) @ %d\n",
+						i, bitmap->s_extPosition);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh2"
#340: FILE: fs/udf/super.c:1190:
+					if (bh2 == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <sparingTable>
#343: FILE: fs/udf/super.c:1193:
+					st = (struct sparingTable *)bh2->b_data;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#344: FILE: fs/udf/super.c:1194:
+					if (ident != 0 || strncmp(

CHECK:CAMELCASE: Avoid CamelCase: <sparingIdent>
#345: FILE: fs/udf/super.c:1195:
+						st->sparingIdent.ident,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'map->s_type_specific.s_sparing.s_spar_map[j]'
#350: FILE: fs/udf/super.c:1200:
+						map->s_type_specific.s_sparing.
+							s_spar_map[j] = NULL;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: fs/udf/super.c:1369:
+		bh = udf_read_tagged(sb, vds[i].block, vds[i].block,
+					&ident);

CHECK:BRACES: braces {} should be used on all arms of this statement
#395: FILE: fs/udf/super.c:1371:
+		if (i == VDS_POS_PRIMARY_VOL_DESC)
[...]
+		else if (i == VDS_POS_LOGICAL_VOL_DESC) {
[...]
+		} else if (i == VDS_POS_PARTITION_DESC) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: fs/udf/super.c:1380:
+			struct buffer_head *bh2 = NULL;
+			if (udf_load_partdesc(sb, bh)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#457: FILE: fs/udf/super.c:1424:
+	udf_debug("Failed to read byte 32768. Assuming open "
+			"disc. Skipping validity check\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: fs/udf/super.c:1490:
+		if (map->s_partition_type != UDF_VIRTUAL_MAP15 &&
+			map->s_partition_type != UDF_VIRTUAL_MAP20)

WARNING:SPLIT_STRING: quoted string split across lines
#513: FILE: fs/udf/super.c:1500:
+			udf_debug("Unable to determine Lastblock (For "
+					"Virtual Partition)\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#519: FILE: fs/udf/super.c:1506:
+			struct udf_part_map *map2 = &sbi->s_partmaps[j];
+			if (j != i &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/udf/super.c:1507:
+			if (j != i &&
+				map->s_volumeseqnum ==

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#579: FILE: fs/udf/super.c:1532:
+			uint32_t pos;

CHECK:CAMELCASE: Avoid CamelCase: <virtualAllocationTable20>
#580: FILE: fs/udf/super.c:1533:
+			struct virtualAllocationTable20 *vat20;

CHECK:CAMELCASE: Avoid CamelCase: <lengthHeader>
#590: FILE: fs/udf/super.c:1543:
+				le16_to_cpu(vat20->lengthHeader) +

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'map->s_type_specific.s_virtual.s_start_offset'
#595: FILE: fs/udf/super.c:1548:
+					map->s_type_specific.s_virtual.
+						s_start_offset) >> 2;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sbi->s_partmaps[ino.partitionReferenceNum].s_partition_len'
#601: FILE: fs/udf/super.c:1554:
+			sbi->s_partmaps[ino.partitionReferenceNum].
+							s_partition_len;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIntegrityDesc>
#614: FILE: fs/udf/super.c:1563:
+	struct logicalVolIntegrityDesc *lvid;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIntegrityDescImpUse>
#615: FILE: fs/udf/super.c:1564:
+	struct logicalVolIntegrityDescImpUse *lvidiu;

WARNING:LINE_SPACING: Missing a blank line after declarations
#616: FILE: fs/udf/super.c:1565:
+	struct logicalVolIntegrityDescImpUse *lvidiu;
+	if (!bh)

CHECK:CAMELCASE: Avoid CamelCase: <impIdent>
#630: FILE: fs/udf/super.c:1571:
+	lvidiu->impIdent.identSuffix[0] = UDF_OS_CLASS_UNIX;

CHECK:CAMELCASE: Avoid CamelCase: <identSuffix>
#630: FILE: fs/udf/super.c:1571:
+	lvidiu->impIdent.identSuffix[0] = UDF_OS_CLASS_UNIX;

CHECK:CAMELCASE: Avoid CamelCase: <recordingDateAndTime>
#632: FILE: fs/udf/super.c:1573:
+	udf_time_to_stamp(&lvid->recordingDateAndTime, CURRENT_TIME);

CHECK:CAMELCASE: Avoid CamelCase: <integrityType>
#633: FILE: fs/udf/super.c:1574:
+	lvid->integrityType = LVID_INTEGRITY_TYPE_OPEN;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#638: FILE: fs/udf/super.c:1576:
+	lvid->descTag.descCRC = cpu_to_le16(

CHECK:CAMELCASE: Avoid CamelCase: <descTag>
#638: FILE: fs/udf/super.c:1576:
+	lvid->descTag.descCRC = cpu_to_le16(

CHECK:CAMELCASE: Avoid CamelCase: <descCRC>
#638: FILE: fs/udf/super.c:1576:
+	lvid->descTag.descCRC = cpu_to_le16(

CHECK:CAMELCASE: Avoid CamelCase: <descCRCLength>
#640: FILE: fs/udf/super.c:1578:
+			le16_to_cpu(lvid->descTag.descCRCLength), 0));

CHECK:CAMELCASE: Avoid CamelCase: <tagChecksum>
#642: FILE: fs/udf/super.c:1580:
+	lvid->descTag.tagChecksum = udf_tag_checksum(&lvid->descTag);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#688: FILE: fs/udf/super.c:1603:
+	if (UDF_MAX_WRITE_VERSION > le16_to_cpu(lvidiu->maxUDFWriteRev))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:CAMELCASE: Avoid CamelCase: <maxUDFWriteRev>
#688: FILE: fs/udf/super.c:1603:
+	if (UDF_MAX_WRITE_VERSION > le16_to_cpu(lvidiu->maxUDFWriteRev))

CHECK:CAMELCASE: Avoid CamelCase: <minUDFReadRev>
#690: FILE: fs/udf/super.c:1605:
+	if (sbi->s_udfrev > le16_to_cpu(lvidiu->minUDFReadRev))

CHECK:CAMELCASE: Avoid CamelCase: <minUDFWriteRev>
#692: FILE: fs/udf/super.c:1607:
+	if (sbi->s_udfrev > le16_to_cpu(lvidiu->minUDFWriteRev))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#696: FILE: fs/udf/super.c:1611:
+	lvid->descTag.descCRC = cpu_to_le16(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000327284.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 63 checks, 606 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000327284.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
