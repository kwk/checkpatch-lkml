WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Remove the temporarily embedded task security record from task_struct.  Instead

WARNING:TYPO_SPELLING: 'appopriate' may be misspelled - perhaps 'appropriate'?
#54: 
security struct directly rather than going via the task_struct as appopriate.
                                                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/key-ui.h:52:
+extern key_ref_t lookup_user_key(struct task_security *sec,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/key.h:282:
+extern int copy_thread_group_keys(struct thread_group_security *tgsec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/key.h:285:
+extern void key_fsuid_changed(struct task_security *sec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/key.h:286:
+extern void key_fsgid_changed(struct task_security *sec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/linux/key.h:288:
+extern void __install_session_keyring(struct task_struct *tsk,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: include/linux/sched.h:672:
+extern struct task_security *dup_task_security(struct task_security *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_security *' should also have an identifier name
#397: FILE: include/linux/sched.h:672:
+extern struct task_security *dup_task_security(struct task_security *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#398: FILE: include/linux/sched.h:673:
+extern int copy_task_security(struct task_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#398: FILE: include/linux/sched.h:673:
+extern int copy_task_security(struct task_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#398: FILE: include/linux/sched.h:673:
+extern int copy_task_security(struct task_struct *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#399: FILE: include/linux/sched.h:674:
+extern void put_task_security(struct task_security *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_security *' should also have an identifier name
#399: FILE: include/linux/sched.h:674:
+extern void put_task_security(struct task_security *);

WARNING:TYPO_SPELLING: 'recored' may be misspelled - perhaps 'recorded'?
#463: FILE: include/linux/security.h:993:
+ *	@sec points to the process's security recored to provide the context
   	                                      ^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#474: FILE: include/linux/security.h:1360:
+	int (*task_alloc_security) (struct task_struct *p);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#475: FILE: include/linux/security.h:1361:
+	void (*task_free_security) (struct task_security *p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#476: FILE: include/linux/security.h:1362:
+	int (*task_dup_security) (struct task_security *p);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#570: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#575: FILE: kernel/cred.c:1:
+/* Tasks security and credentials management

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#683: FILE: kernel/cred.c:109:
+	p->act_as = p->sec = sec;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1063: FILE: security/keys/internal.h:111:
+extern int install_thread_keyring(struct task_security *sec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1064: FILE: security/keys/internal.h:112:
+extern int install_process_keyring(struct task_security *sec);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1461: FILE: security/keys/process_keys.c:275:
+	 * on it if it didn't previously point to anything */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#2233: FILE: security/selinux/hooks.c:173:
+	struct task_security_struct *tsec = sec->security;
+	sec->security = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!context->security"
#2388: FILE: security/smack/smack_lsm.c:2391:
+	if (context->security == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 12 checks, 2065 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
