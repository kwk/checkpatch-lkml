CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#44: FILE: drivers/net/smc91x.c:537:
+#define smc_special_trylock(lock, flags)	(flags == flags)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#44: FILE: drivers/net/smc91x.c:537:
+#define smc_special_trylock(lock, flags)	(flags == flags)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#45: FILE: drivers/net/smc91x.c:538:
+#define smc_special_lock(lock, flags)   ^Ido { flags = 0; } while (0)$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#45: FILE: drivers/net/smc91x.c:538:
+#define smc_special_lock(lock, flags)   	do { flags = 0; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#46: FILE: drivers/net/smc91x.c:539:
+#define smc_special_unlock(lock, flags)	do { flags = 0; } while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037082.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 2 checks, 12 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037082.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
