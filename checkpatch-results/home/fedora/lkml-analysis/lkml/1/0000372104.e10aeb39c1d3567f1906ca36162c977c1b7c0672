WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#176: FILE: arch/i386/kernel/paravirt.c:57:
+	extern const char start_##ops##_##name[], end_##ops##_##name[];	\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#211: FILE: arch/i386/kernel/paravirt.c:81:
+#define SITE(ops, x)						\
+	case PARAVIRT_PATCH(ops.x):				\
+		start = start_##ops##_##x;			\
+		end = end_##ops##_##x;				\
+		goto patch_site

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#253: FILE: arch/i386/kernel/paravirt.c:147:
+unsigned paravirt_patch_jmp(void *insnbuf, const void *target,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#545: FILE: arch/i386/kernel/paravirt.c:413:
+#define substructure(inner)						\
+	asm volatile(".data; .globl " #inner "; "			\
+		     #inner " = paravirt_ops+%c0; .previous"		\
+		     : : "i" (offsetof(struct paravirt_ops, inner)))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#562: FILE: arch/i386/kernel/paravirt.c:430:
+EXPORT_SYMBOL_GPL(pv_time_ops);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#563: FILE: arch/i386/kernel/paravirt.c:431:
+EXPORT_SYMBOL_GPL(pv_cpu_ops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#564: FILE: arch/i386/kernel/paravirt.c:432:
+EXPORT_SYMBOL_GPL(pv_mmu_ops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#565: FILE: arch/i386/kernel/paravirt.c:433:
+EXPORT_SYMBOL_GPL(pv_apic_ops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#566: FILE: arch/i386/kernel/paravirt.c:434:
+EXPORT_SYMBOL    (pv_irq_ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#566: FILE: arch/i386/kernel/paravirt.c:434:
+EXPORT_SYMBOL    (pv_irq_ops);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#573: FILE: arch/i386/kernel/vmi.c:136:
 	switch (type) {
+		case PARAVIRT_PATCH(pv_irq_ops.irq_disable):
[...]
+		case PARAVIRT_PATCH(pv_irq_ops.irq_enable):
[...]
+		case PARAVIRT_PATCH(pv_irq_ops.restore_fl):
[...]
+		case PARAVIRT_PATCH(pv_irq_ops.save_fl):
[...]
+		case PARAVIRT_PATCH(pv_cpu_ops.iret):
[...]
+		case PARAVIRT_PATCH(pv_cpu_ops.irq_enable_sysexit):

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:CAMELCASE: Avoid CamelCase: <GetDR>
#663: FILE: arch/i386/kernel/vmi.c:760:
+	para_fill(pv_cpu_ops.get_debugreg, GetDR);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SetDR>
#664: FILE: arch/i386/kernel/vmi.c:761:
+	para_fill(pv_cpu_ops.set_debugreg, SetDR);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR0>
#665: FILE: arch/i386/kernel/vmi.c:762:
+	para_fill(pv_cpu_ops.read_cr0, GetCR0);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR2>
#666: FILE: arch/i386/kernel/vmi.c:763:
+	para_fill(pv_mmu_ops.read_cr2, GetCR2);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR3>
#667: FILE: arch/i386/kernel/vmi.c:764:
+	para_fill(pv_mmu_ops.read_cr3, GetCR3);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR4>
#668: FILE: arch/i386/kernel/vmi.c:765:
+	para_fill(pv_cpu_ops.read_cr4, GetCR4);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR0>
#669: FILE: arch/i386/kernel/vmi.c:766:
+	para_fill(pv_cpu_ops.write_cr0, SetCR0);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR2>
#670: FILE: arch/i386/kernel/vmi.c:767:
+	para_fill(pv_mmu_ops.write_cr2, SetCR2);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR3>
#671: FILE: arch/i386/kernel/vmi.c:768:
+	para_fill(pv_mmu_ops.write_cr3, SetCR3);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR4>
#672: FILE: arch/i386/kernel/vmi.c:769:
+	para_fill(pv_cpu_ops.write_cr4, SetCR4);

CHECK:CAMELCASE: Avoid CamelCase: <GetInterruptMask>
#673: FILE: arch/i386/kernel/vmi.c:770:
+	para_fill(pv_irq_ops.save_fl, GetInterruptMask);

CHECK:CAMELCASE: Avoid CamelCase: <SetInterruptMask>
#674: FILE: arch/i386/kernel/vmi.c:771:
+	para_fill(pv_irq_ops.restore_fl, SetInterruptMask);

CHECK:CAMELCASE: Avoid CamelCase: <DisableInterrupts>
#675: FILE: arch/i386/kernel/vmi.c:772:
+	para_fill(pv_irq_ops.irq_disable, DisableInterrupts);

CHECK:CAMELCASE: Avoid CamelCase: <EnableInterrupts>
#676: FILE: arch/i386/kernel/vmi.c:773:
+	para_fill(pv_irq_ops.irq_enable, EnableInterrupts);

CHECK:CAMELCASE: Avoid CamelCase: <SetTR>
#688: FILE: arch/i386/kernel/vmi.c:784:
+	para_wrap(pv_cpu_ops.load_tr_desc, vmi_set_tr, set_tr, SetTR);

CHECK:CAMELCASE: Avoid CamelCase: <SetLDT>
#706: FILE: arch/i386/kernel/vmi.c:787:
+	para_wrap(pv_cpu_ops.set_ldt, vmi_set_ldt, _set_ldt, SetLDT);

CHECK:CAMELCASE: Avoid CamelCase: <SetGDT>
#708: FILE: arch/i386/kernel/vmi.c:789:
+	para_fill(pv_cpu_ops.load_gdt, SetGDT);

CHECK:CAMELCASE: Avoid CamelCase: <SetIDT>
#709: FILE: arch/i386/kernel/vmi.c:790:
+	para_fill(pv_cpu_ops.load_idt, SetIDT);

CHECK:CAMELCASE: Avoid CamelCase: <GetGDT>
#710: FILE: arch/i386/kernel/vmi.c:791:
+	para_fill(pv_cpu_ops.store_gdt, GetGDT);

CHECK:CAMELCASE: Avoid CamelCase: <GetIDT>
#711: FILE: arch/i386/kernel/vmi.c:792:
+	para_fill(pv_cpu_ops.store_idt, GetIDT);

CHECK:CAMELCASE: Avoid CamelCase: <GetTR>
#712: FILE: arch/i386/kernel/vmi.c:793:
+	para_fill(pv_cpu_ops.store_tr, GetTR);

CHECK:CAMELCASE: Avoid CamelCase: <WriteLDTEntry>
#714: FILE: arch/i386/kernel/vmi.c:795:
+	para_fill(pv_cpu_ops.write_ldt_entry, WriteLDTEntry);

CHECK:CAMELCASE: Avoid CamelCase: <WriteGDTEntry>
#715: FILE: arch/i386/kernel/vmi.c:796:
+	para_fill(pv_cpu_ops.write_gdt_entry, WriteGDTEntry);

CHECK:CAMELCASE: Avoid CamelCase: <WriteIDTEntry>
#716: FILE: arch/i386/kernel/vmi.c:797:
+	para_fill(pv_cpu_ops.write_idt_entry, WriteIDTEntry);

CHECK:CAMELCASE: Avoid CamelCase: <UpdateKernelStack>
#717: FILE: arch/i386/kernel/vmi.c:798:
+	para_wrap(pv_cpu_ops.load_esp0, vmi_load_esp0, set_kernel_stack, UpdateKernelStack);

CHECK:CAMELCASE: Avoid CamelCase: <SetIOPLMask>
#718: FILE: arch/i386/kernel/vmi.c:799:
+	para_fill(pv_cpu_ops.set_iopl_mask, SetIOPLMask);

CHECK:CAMELCASE: Avoid CamelCase: <IODelay>
#719: FILE: arch/i386/kernel/vmi.c:800:
+	para_fill(pv_cpu_ops.io_delay, IODelay);

CHECK:CAMELCASE: Avoid CamelCase: <SetLazyMode>
#720: FILE: arch/i386/kernel/vmi.c:801:
+	para_wrap(pv_misc_ops.set_lazy_mode, vmi_set_lazy_mode, set_lazy_mode, SetLazyMode);

CHECK:CAMELCASE: Avoid CamelCase: <FlushTLB>
#726: FILE: arch/i386/kernel/vmi.c:804:
+	para_wrap(pv_mmu_ops.flush_tlb_user, vmi_flush_tlb_user, _flush_tlb, FlushTLB);

CHECK:CAMELCASE: Avoid CamelCase: <InvalPage>
#728: FILE: arch/i386/kernel/vmi.c:806:
+	para_fill(pv_mmu_ops.flush_tlb_single, InvalPage);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#801: FILE: arch/i386/kernel/vmi.c:870:
+	para_wrap(pv_apic_ops.startup_ipi_hook, vmi_startup_ipi_hook, set_initial_ap_state, SetInitialAPState);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <SetInitialAPState>
#801: FILE: arch/i386/kernel/vmi.c:870:
+	para_wrap(pv_apic_ops.startup_ipi_hook, vmi_startup_ipi_hook, set_initial_ap_state, SetInitialAPState);

CHECK:CAMELCASE: Avoid CamelCase: <APICRead>
#808: FILE: arch/i386/kernel/vmi.c:874:
+	para_fill(pv_apic_ops.apic_read, APICRead);

CHECK:CAMELCASE: Avoid CamelCase: <APICWrite>
#809: FILE: arch/i386/kernel/vmi.c:875:
+	para_fill(pv_apic_ops.apic_write, APICWrite);

ERROR:CODE_INDENT: code indent should use tabs where possible
#834: FILE: arch/i386/kernel/vmi.c:902:
+ ^I^Ipv_time_ops.get_cpu_khz = vmi_cpu_khz;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#834: FILE: arch/i386/kernel/vmi.c:902:
+ ^I^Ipv_time_ops.get_cpu_khz = vmi_cpu_khz;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: arch/i386/kernel/vmi.c:902:
+ ^I^Ipv_time_ops.get_cpu_khz = vmi_cpu_khz;$

CHECK:CAMELCASE: Avoid CamelCase: <Halt>
#843: FILE: arch/i386/kernel/vmi.c:911:
+	para_fill(pv_irq_ops.safe_halt, Halt);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#904: FILE: arch/i386/xen/enlighten.c:852:
+#define SITE(op, x)							\
+	case PARAVIRT_PATCH(op.x):					\
 	if (have_vcpu_info_placement) {					\
 		start = (char *)xen_##x##_direct;			\
 		end = xen_##x##_direct_end;				\

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#929: FILE: arch/i386/xen/enlighten.c:897:
+static const struct pv_info xen_info __initdata = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#936: FILE: arch/i386/xen/enlighten.c:904:
+static const struct pv_init_ops xen_init_ops __initdata = {

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#950: FILE: arch/i386/xen/enlighten.c:913:
+static const struct pv_time_ops xen_time_ops __initdata = {

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#960: FILE: arch/i386/xen/enlighten.c:922:
+static const struct pv_cpu_ops xen_cpu_ops __initdata = {

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#1008: FILE: arch/i386/xen/enlighten.c:966:
+static const struct pv_irq_ops xen_irq_ops __initdata = {

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#1046: FILE: arch/i386/xen/enlighten.c:976:
+static const struct pv_apic_ops xen_apic_ops __initdata = {

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#1056: FILE: arch/i386/xen/enlighten.c:987:
+static const struct pv_mmu_ops xen_mmu_ops __initdata = {

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#1085: FILE: arch/i386/xen/enlighten.c:1041:
+static const struct pv_misc_ops xen_misc_ops __initdata = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1127: FILE: include/asm-i386/paravirt.h:36:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1174: FILE: include/asm-i386/paravirt.h:66:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1253: FILE: include/asm-i386/paravirt.h:124:
+	/* MSR, PMC and TSR operations.
+	   err = 0/-EFAULT.  wrmsr returns 0/-EFAULT. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1253: FILE: include/asm-i386/paravirt.h:124:
+	   err = 0/-EFAULT.  wrmsr returns 0/-EFAULT. */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1283: FILE: include/asm-i386/paravirt.h:146:
+	void (*restore_fl)(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1311: FILE: include/asm-i386/paravirt.h:182:
+	void (*write_cr2)(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1314: FILE: include/asm-i386/paravirt.h:185:
+	void (*write_cr3)(unsigned long);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1365: FILE: include/asm-i386/paravirt.h:250:
+struct paravirt_ops
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#1390: FILE: include/asm-i386/paravirt.h:273:
+#define paravirt_type(op)				\
+	[paravirt_typenum] "i" (PARAVIRT_PATCH(op)),	\
+	[paravirt_opptr] "m" (op)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1401: FILE: include/asm-i386/paravirt.h:302:
+unsigned paravirt_patch_jmp(void *insnbuf, const void *target,

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1432: FILE: include/asm-i386/paravirt.h:462:
+#define ARCH_SETUP			pv_init_ops.arch_setup();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1432: FILE: include/asm-i386/paravirt.h:462:
+#define ARCH_SETUP			pv_init_ops.arch_setup();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1586: FILE: include/asm-i386/paravirt.h:618:
+}
+#define calculate_cpu_khz() (pv_time_ops.get_cpu_khz())

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000372104.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 18 warnings, 38 checks, 1932 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000372104.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
