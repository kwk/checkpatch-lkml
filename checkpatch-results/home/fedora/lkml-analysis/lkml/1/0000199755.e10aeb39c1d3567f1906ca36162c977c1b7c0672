WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#33: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: drivers/block/dst/export.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: drivers/block/dst/export.c:81:
+		if (memcmp(s->addr.sa_data + 2, sa->sa_data + 2,
+					sa->sa_data_len - 2))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: drivers/block/dst/export.c:145:
+			dprintk("%s: revents: %x, socket: %p, err: %d.\n",
+					__func__, revents, st->socket, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: drivers/block/dst/export.c:170:
+	err = kernel_getpeername(sock, (struct sockaddr *)&new->ctl.addr,
+			(int *)&new->ctl.addr.sa_data_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/block/dst/export.c:178:
+		dst_dump_addr(sock, (struct sockaddr *)&new->ctl.addr,
+				"Client is not allowed to connect");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: drivers/block/dst/export.c:187:
+	dst_dump_addr(sock, (struct sockaddr *)&new->ctl.addr,
+			"Connected client");

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#242: FILE: drivers/block/dst/export.c:205:
+ * request), or sends back reply that writing succesfully completed.
                                               ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: drivers/block/dst/export.c:218:
+			p = list_first_entry(&st->request_list,
+				struct dst_export_priv, request_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/block/dst/export.c:255:
+		dprintk("%s: st: %p, refcnt: %d, list_empty: %d.\n",
+				__func__, st, atomic_read(&st->refcnt),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: drivers/block/dst/export.c:258:
+		wait_event_timeout(st->thread_wait,
+				(atomic_read(&st->refcnt) == 1) ||

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#297: FILE: drivers/block/dst/export.c:260:
+				HZ/2);
 				  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/block/dst/export.c:267:
+				p = list_first_entry(&st->request_list,
+					struct dst_export_priv, request_entry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: drivers/block/dst/export.c:274:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: drivers/block/dst/export.c:280:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: drivers/block/dst/export.c:306:
+				err = wait_event_interruptible_timeout(st->thread_wait,
+						!list_empty(&st->request_list) ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: drivers/block/dst/export.c:330:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#381: FILE: drivers/block/dst/export.c:344:
+		printk(KERN_ERR "You are trying to export node '%s' without security attributes.\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: drivers/block/dst/export.c:376:
+	err = kernel_bind(st->socket, (struct sockaddr *)&ctl->addr,
+			ctl->addr.sa_data_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: drivers/block/dst/export.c:392:
+	err = thread_pool_schedule(n->pool, dst_thread_setup,
+			dst_accept, st, MAX_SCHEDULE_TIMEOUT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: drivers/block/dst/export.c:472:
+		dprintk("%s: bio: %llu/%u, size: %u, err: %d.\n",
+				__func__, (u64)bio->bi_sector, bio->bi_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: drivers/block/dst/export.c:493:
+static int dst_export_write_request(struct dst_state *st,
+		struct bio *bio, unsigned int total_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: drivers/block/dst/export.c:554:
+	bio = bio_alloc_bioset(GFP_KERNEL,
+			PAGE_ALIGN(cmd->size) >> PAGE_SHIFT,

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#611: FILE: drivers/block/dst/export.c:574:
+	 * uptodate (set by itself actually) and rw block
 	   ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: drivers/block/dst/export.c:605:
+	dprintk("%s: bio: %llu/%u, rw: %lu, dir: %lu, flags: %lx, phys: %d.\n",
+			__func__, (u64)bio->bi_sector, bio->bi_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: drivers/block/dst/export.c:630:
+	dprintk("%s: id: %llu, bio: %llu/%u, csize: %u, flags: %lu, rw: %lu.\n",
+			__func__, cmd->id, (u64)bio->bi_sector, bio->bi_size,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#680: FILE: drivers/block/dst/export.c:643:
+		cmd->size = cmd->csize = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: drivers/block/dst/export.c:645:
+		err = dst_data_send_header(st->socket, cmd,
+				sizeof(struct dst_cmd), 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#708: FILE: drivers/block/dst/state.c:1:
+/*

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#741: FILE: drivers/block/dst/state.c:34:
+struct dst_poll_helper
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#742: FILE: drivers/block/dst/state.c:35:
+^Ipoll_table ^I^Ipt;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#746: FILE: drivers/block/dst/state.c:39:
+static int dst_queue_wake(wait_queue_t *wait, unsigned mode, int sync, void *key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: drivers/block/dst/state.c:48:
+static void dst_queue_func(struct file *file, wait_queue_head_t *whead,
+				 poll_table *pt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: drivers/block/dst/state.c:80:
+static int dst_data_recv_header(struct socket *sock,
+		void *data, unsigned int size, int block)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#802: FILE: drivers/block/dst/state.c:95:
+	msg.msg_flags = (block)?MSG_WAITALL:MSG_DONTWAIT;
 	                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#802: FILE: drivers/block/dst/state.c:95:
+	msg.msg_flags = (block)?MSG_WAITALL:MSG_DONTWAIT;
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: drivers/block/dst/state.c:98:
+	err = kernel_recvmsg(sock, &msg, &iov, 1, iov.iov_len,
+			msg.msg_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/block/dst/state.c:109:
+int dst_data_send_header(struct socket *sock,
+		void *data, unsigned int size, int more)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#831: FILE: drivers/block/dst/state.c:124:
+	msg.msg_flags = MSG_WAITALL | (more)?MSG_MORE:0;
 	                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#831: FILE: drivers/block/dst/state.c:124:
+	msg.msg_flags = MSG_WAITALL | (more)?MSG_MORE:0;
 	                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/block/dst/state.c:129:
+		dprintk("%s: size: %u, more: %d, err: %d.\n",
+				__func__, size, more, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: drivers/block/dst/state.c:177:
+	dprintk("%s: n: %p, err: %d, size: %llu, permission: %x.\n",
+			__func__, n, err, n->size, st->permissions);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#904: FILE: drivers/block/dst/state.c:197:
+	sock->sk->sk_sndtimeo = sock->sk->sk_rcvtimeo =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#908: FILE: drivers/block/dst/state.c:201:
+	st->socket = st->read_socket = sock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: drivers/block/dst/state.c:208:
+	dprintk("%s: st: %p, socket: %p, n: %p.\n",
+			__func__, st, st->socket, st->node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#927: FILE: drivers/block/dst/state.c:220:
+		struct sockaddr_in *sin = (struct sockaddr_in *)sa;
+		printk(KERN_INFO "%s %u.%u.%u.%u:%d.\n",

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#927: FILE: drivers/block/dst/state.c:220:
+		printk(KERN_INFO "%s %u.%u.%u.%u:%d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: drivers/block/dst/state.c:221:
+		printk(KERN_INFO "%s %u.%u.%u.%u:%d.\n",
+			str, NIPQUAD(sin->sin_addr.s_addr), ntohs(sin->sin_port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#931: FILE: drivers/block/dst/state.c:224:
+		struct sockaddr_in6 *sin = (struct sockaddr_in6 *)sa;
+		printk(KERN_INFO "%s %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#931: FILE: drivers/block/dst/state.c:224:
+		printk(KERN_INFO "%s %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#932: FILE: drivers/block/dst/state.c:225:
+		printk(KERN_INFO "%s %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",
+			str, NIP6(sin->sin6_addr), ntohs(sin->sin6_port));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: drivers/block/dst/state.c:236:
+		dst_dump_addr(st->socket, (struct sockaddr *)&st->ctl.addr,
+				"Disconnected peer");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: drivers/block/dst/state.c:251:
+	err = kernel_connect(st->socket, (struct sockaddr *)&st->ctl.addr,
+			st->ctl.addr.sa_data_len, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: drivers/block/dst/state.c:260:
+	dst_dump_addr(st->socket, (struct sockaddr *)&ctl->addr,
+			"Connected to peer");

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#981: FILE: drivers/block/dst/state.c:274:
+static void inline dst_state_reset_nolock(struct dst_state *st)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#987: FILE: drivers/block/dst/state.c:280:
+static void inline dst_state_reset(struct dst_state *st)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1004: FILE: drivers/block/dst/state.c:297:
+	BUG_ON(!size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1018: FILE: drivers/block/dst/state.c:311:
+	err = kernel_recvmsg(st->socket, &msg, &iov, 1, iov.iov_len,
+			msg.msg_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: drivers/block/dst/state.c:314:
+		dprintk("%s: failed to recv data: size: %llu, err: %d.\n",
+				__func__, size, err);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1100: FILE: drivers/block/dst/state.c:393:
+		if (		st->socket &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->read_socket == st->socket'
#1100: FILE: drivers/block/dst/state.c:393:
+		if (		st->socket &&
+				(st->read_socket == st->socket) &&
+				(revents & POLLIN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: drivers/block/dst/state.c:394:
+		if (		st->socket &&
+				(st->read_socket == st->socket) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: drivers/block/dst/state.c:406:
+			dprintk("%s: revents: %x, socket: %p, size: %u, err: %d.\n",
+					__func__, revents, st->socket, size, err);

WARNING:SPLIT_STRING: quoted string split across lines
#1248: FILE: drivers/block/dst/state.c:541:
+		dprintk("%s: cmd: cmd: %u, sector: %llu, size: %u, "
+				"csize: %u != digest size %u.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1294: FILE: drivers/block/dst/state.c:587:
+	dprintk("%s: cmd: %u, size: %u, csize: %u, id: %llu, "
+			"sector: %llu, flags: %llx, rw: %llx.\n",

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1308: FILE: drivers/block/dst/state.c:601:
+	switch (cmd->cmd) {
+		case DST_IO_RESPONSE:
[...]
+		case DST_IO:
[...]
+		case DST_CFG:
[...]
+		case DST_PING:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1340: FILE: drivers/block/dst/state.c:633:
+	dprintk("%s: start st: %p, n: %p, scan: %lu, need_exit: %d.\n",
+			__func__, st, n, n->trans_scan_timeout, st->need_exit);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct dst_state)...)
#1390: FILE: drivers/block/dst/state.c:683:
+	st = kzalloc(sizeof(struct dst_state), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1472: FILE: drivers/block/dst/state.c:765:
+	dprintk("%s: st: %p, refcnt: %d.\n",
+			__func__, st, atomic_read(&st->refcnt));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1488: FILE: drivers/block/dst/state.c:781:
+	err = dst_data_send_header(st->socket, cmd,
+		sizeof(struct dst_cmd) + c->crypto_attached_size, bio->bi_vcnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1497: FILE: drivers/block/dst/state.c:790:
+		err = kernel_sendpage(st->socket, bv->bv_page, bv->bv_offset,
+				bv->bv_len, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1506: FILE: drivers/block/dst/state.c:799:
+	dprintk("%s: %d/%d, flags: %x, err: %d.\n",
+			__func__, i, bio->bi_vcnt, flags, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1532: FILE: drivers/block/dst/state.c:825:
+		err = dst_data_send_header(st->socket, &t->cmd,
+				sizeof(struct dst_cmd), 0);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 16 warnings, 50 checks, 1503 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
