WARNING:TYPO_SPELLING: 'priveleges' may be misspelled - perhaps 'privileges'?
#45: FILE: testcases/kernel/security/integrity/ima/README:8:
+	- The testsuite must be executed with root priveleges so that it
 	                                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#112: FILE: testcases/kernel/security/integrity/ima/ima_test.sh:2:
+# Copyright (C) 2008 IBM Corporation

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:REPEATED_WORD: Possible repeated word: 'securityfs'
#152: FILE: testcases/kernel/security/integrity/ima/ima_test.sh:42:
+	`mount -t securityfs securityfs $SECURITYFS`

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#292: FILE: testcases/kernel/security/integrity/ima/loadpolicy/load_policy.sh:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#380: FILE: testcases/kernel/security/integrity/ima/measure/re-measure.sh:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#428: FILE: testcases/kernel/security/integrity/ima/measure/read_measure.sh:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#489: FILE: testcases/kernel/security/integrity/ima/tools/hex2bin.c:1:
+/*

WARNING:NAKED_SSCANF: unchecked sscanf return value
#511: FILE: testcases/kernel/security/integrity/ima/tools/hex2bin.c:23:
+		sscanf(line + i, "%2x", &h);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#535: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#564: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:30:
+static int failed_count = 0;	/* number of template verifications failed */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#566: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:32:
+static int verbose = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#567: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:33:
+static int validate = 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#569: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:35:
+#define print_info(format, arg...) \
+	if (verbose) \
+		printf(format, ##arg)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#573: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:39:
+static u_int8_t pcr[SHA_DIGEST_LENGTH];	/* simulates the PCR aggregate */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#574: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:40:
+static u_int8_t zero[SHA_DIGEST_LENGTH];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#575: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:41:
+static u_int8_t fox[SHA_DIGEST_LENGTH];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#577: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:43:
+	u_int32_t pcr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#578: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:44:
+	u_int8_t tdigest[SHA_DIGEST_LENGTH];	/* template digest */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#579: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:45:
+	u_int32_t tlen;				/* template name size */

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:49:
+        u_int8_t digest[SHA_DIGEST_LENGTH];^I/* sha1 measurement hash */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:49:
+        u_int8_t digest[SHA_DIGEST_LENGTH];^I/* sha1 measurement hash */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#583: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:49:
+        u_int8_t digest[SHA_DIGEST_LENGTH];	/* sha1 measurement hash */

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:50:
+       ^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];^I/*name + \0*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#584: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:50:
+       ^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];^I/*name + \0*/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:50:
+       ^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];^I/*name + \0*/$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - int display_pcr() should probably be int display_pcr(void)
#588: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:54:
+static int display_pcr()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:77:
+static int verify_ima_tdigest(struct template *tdata,
+			struct ima_inode_measure_entry *ima)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#615: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:81:
+	u_int8_t digest[SHA_DIGEST_LENGTH];

CHECK:CAMELCASE: Avoid CamelCase: <SHA1_Init>
#618: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:84:
+	SHA1_Init(&tmp);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SHA1_Update>
#619: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:85:
+	SHA1_Update(&tmp, ima, sizeof *ima);

WARNING:SIZEOF_PARENTHESIS: sizeof *ima should be sizeof(*ima)
#619: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:85:
+	SHA1_Update(&tmp, ima, sizeof *ima);

CHECK:CAMELCASE: Avoid CamelCase: <SHA1_Final>
#620: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:86:
+	SHA1_Final(digest, &tmp);

WARNING:SIZEOF_PARENTHESIS: sizeof digest should be sizeof(digest)
#622: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:88:
+	rc = memcmp(digest, tdata->tdigest, sizeof digest);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#640: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:106:
+	u_int32_t tname_len;	/* template name length */

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#651: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:117:
+	memcpy(&tname, &tdata->tlen +1, tdata->tlen);
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#657: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:123:
+		return (sizeof *tdata + tdata->tlen + 2) /* separator */ ;

WARNING:SIZEOF_PARENTHESIS: sizeof *tdata should be sizeof(*tdata)
#657: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:123:
+		return (sizeof *tdata + tdata->tlen + 2) /* separator */ ;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#660: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:126:
+			u_int8_t digest[SHA_DIGEST_LENGTH];

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:128:
+        ^I^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];/*name + \0*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#662: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:128:
+        ^I^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];/*name + \0*/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:128:
+        ^I^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];/*name + \0*/$

WARNING:SIZEOF_PARENTHESIS: sizeof *tdata should be sizeof(*tdata)
#666: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:132:
+				+ sizeof *tdata + tdata->tlen);

ERROR:SPACING: space required before the open brace '{'
#671: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:137:
+		if (validate && (memcmp(fox, tdata->tdigest, sizeof fox) != 0)){

WARNING:SIZEOF_PARENTHESIS: sizeof fox should be sizeof(fox)
#671: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:137:
+		if (validate && (memcmp(fox, tdata->tdigest, sizeof fox) != 0)){

WARNING:SIZEOF_PARENTHESIS: sizeof entry should be sizeof(entry)
#674: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:140:
+			memset(&entry, 0, sizeof entry);

WARNING:SIZEOF_PARENTHESIS: sizeof *tdata should be sizeof(*tdata)
#679: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:145:
+		return (sizeof *tdata  + tdata->tlen + sizeof data->digest

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#683: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:149:
+			u_int8_t digest[SHA_DIGEST_LENGTH];

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:151:
+        ^I^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];/*name + \0*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#685: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:151:
+        ^I^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];/*name + \0*/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:151:
+        ^I^Ichar file_name[TCG_EVENT_NAME_LEN_MAX + 1];/*name + \0*/$

WARNING:SIZEOF_PARENTHESIS: sizeof *tdata should be sizeof(*tdata)
#689: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:155:
+				+ sizeof *tdata + tdata->tlen);

WARNING:SIZEOF_PARENTHESIS: sizeof *tdata should be sizeof(*tdata)
#691: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:157:
+		return (sizeof *tdata  + tdata->tlen + sizeof data->digest

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#696: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:162:
+int simulate_extend_pcr(u_int8_t digest[SHA_DIGEST_LENGTH])

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#718: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:184:
+ * ^I     for an invalidated PCR. Replace all entries in the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#719: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:185:
+ * ^I     runtime binary measurement list with 0x00 hash values,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#720: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:186:
+ * ^I     which indicate the PCR was invalidated, either for$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#721: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:187:
+ * ^I     "a time of measure, time of use"(ToMToU) error, or a$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#723: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:189:
+ * ^I     0xFF's hash value, when calculating the aggregate$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#727: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:193:
+ * ^I     measurement list, calculate the template hash value$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#728: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:194:
+ * ^I     and compare it with the actual template hash value.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#733: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:199:
+ * ^I     addition, for IMA and KMEM templates, display template$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#734: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:200:
+ * ^I     specific information.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#738: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:204:
+ * ^IKMEM info: memory hash, reference name$

WARNING:TYPO_SPELLING: 'Ouput' may be misspelled - perhaps 'Output'?
#740: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:206:
+ * Ouput: displays the aggregate-pcr value
    ^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#742: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:208:
+ * ^I^Ierrors.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#765: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:231:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#772: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:238:
+	print_info( "### PCR HASH                                  " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#772: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:238:
+	print_info( "### PCR HASH                                  " \

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:239:
+^I^I ^I"TEMPLATE-NAME\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#773: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:239:
+^I^I ^I"TEMPLATE-NAME\n");$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#776: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:242:
+	while ((len = read(fd, event + remaining, MAX_EVENT_SIZE - remaining))
+			|| remaining) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#790: FILE: testcases/kernel/security/integrity/ima/tpm/ima_measure.c:256:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#806: FILE: testcases/kernel/security/integrity/ima/kmem/Makefile:6:
+EXTRA_CFLAGS += -I$(PWD) -O

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#832: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#841: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:10:
+ * ^I- defines a kernel memory template$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#842: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:11:
+ * ^I- reads from security/kmem-template "name length address"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#843: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:12:
+ * ^I- collects and stores measurement from address for length bytes$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#847: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:16:
+#include <asm/uaccess.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#889: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:58:
+		printk(KERN_INFO "%s: failed to load %s transform: %ld\n",

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#891: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:60:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SIZEOF_PARENTHESIS: sizeof data->digest should be sizeof(data->digest)
#918: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:87:
+	memset(data->digest, 0, sizeof data->digest);

WARNING:SIZEOF_PARENTHESIS: sizeof *data should be sizeof(*data)
#932: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:101:
+	template->len = sizeof *data;

WARNING:RETURN_VOID: void function return statements are not generally useful
#937: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:106:
+	return;
+}

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#961: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:130:
+		seq_printf(m, " %s %d \n", data->name, data->buflen);

WARNING:SIZEOF_PARENTHESIS: sizeof data.name should be sizeof(data.name)
#986: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:155:
+	strncpy(data.name, name, sizeof data.name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1024: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:193:
+	if (rc == 3)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1026: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:195:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1027: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:196:
+		printk(KERN_INFO "kmem: error parsing request."

WARNING:SPLIT_STRING: quoted string split across lines
#1028: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:197:
+		printk(KERN_INFO "kmem: error parsing request."
+		       "(format: name length address)\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1037: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:206:
+static ssize_t kmem_read_template(struct file *filp, char __user *buf,
                                                ^^^^

WARNING:STATIC_CONST: Move const after static - use 'static const struct file_operations '
#1055: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:224:
+const static struct file_operations kmem_template_ops = {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1064: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:233:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1065: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:234:
+	printk(KERN_INFO "%s: \n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1065: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:234:
+	printk(KERN_INFO "%s: \n", __func__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1065: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:234:
+	printk(KERN_INFO "%s: \n", __func__);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IWUSR' are not preferred. Consider using octal permissions '0640'.
#1069: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:238:
+					       S_IRUSR | S_IRGRP | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1076: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:245:
+	printk(KERN_INFO "%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1076: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-template.c:245:
+	printk(KERN_INFO "%s\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#1092: FILE: testcases/kernel/security/integrity/ima/kmem/kmem-test.sh:2:
+# Copyright (C) 2008 IBM Corporation

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257802.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 64 warnings, 23 checks, 1017 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257802.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
