WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: instrumentation/profile.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#90: FILE: instrumentation/profile.c:34:
+};
+#define PROFILE_GRPSHIFT	3

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#91: FILE: instrumentation/profile.c:35:
+#define PROFILE_GRPSZ		(1 << PROFILE_GRPSHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#92: FILE: instrumentation/profile.c:36:
+#define NR_PROFILE_HIT		(PAGE_SIZE/sizeof(struct profile_hit))
                       		          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#93: FILE: instrumentation/profile.c:37:
+#define NR_PROFILE_GRP		(NR_PROFILE_HIT/PROFILE_GRPSZ)
                       		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#106: FILE: instrumentation/profile.c:50:
+static DEFINE_PER_CPU(struct profile_hit *[2], cpu_profile_hits);
                                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: instrumentation/profile.c:55:
+static int __init profile_setup(char * str)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __initdata should be placed after schedstr[]
#113: FILE: instrumentation/profile.c:57:
+	static char __initdata schedstr[] = "schedule";

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after sleepstr[]
#114: FILE: instrumentation/profile.c:58:
+	static char __initdata sleepstr[] = "sleep";

WARNING:MISPLACED_INIT: __initdata should be placed after kvmstr[]
#115: FILE: instrumentation/profile.c:59:
+	static char __initdata kvmstr[] = "kvm";

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#124: FILE: instrumentation/profile.c:68:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#133: FILE: instrumentation/profile.c:77:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#142: FILE: instrumentation/profile.c:86:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#148: FILE: instrumentation/profile.c:92:
+		printk(KERN_INFO "kernel profiling enabled (shift: %ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: instrumentation/profile.c:93:
+		printk(KERN_INFO "kernel profiling enabled (shift: %ld)\n",
+			prof_shift);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#153: FILE: instrumentation/profile.c:97:
+__setup("profile=", profile_setup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: instrumentation/profile.c:99:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: instrumentation/profile.c:102:
+^Iif (!prof_on) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: instrumentation/profile.c:104:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: instrumentation/profile.c:104:
+ $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#163: FILE: instrumentation/profile.c:107:
+	prof_buffer = alloc_bootmem(prof_len*sizeof(atomic_t));
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: instrumentation/profile.c:111:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: instrumentation/profile.c:111:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: instrumentation/profile.c:113:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: instrumentation/profile.c:113:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: instrumentation/profile.c:117:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: instrumentation/profile.c:117:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: instrumentation/profile.c:118:
+void profile_task_exit(struct task_struct * task)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: instrumentation/profile.c:122:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: instrumentation/profile.c:122:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: instrumentation/profile.c:123:
+int profile_handoff_task(struct task_struct * task)

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: instrumentation/profile.c:126:
+	int ret;
+	ret = atomic_notifier_call_chain(&task_free_notifier, 0, task);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#191: FILE: instrumentation/profile.c:135:
+int task_handoff_register(struct notifier_block * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#196: FILE: instrumentation/profile.c:140:
+int task_handoff_unregister(struct notifier_block * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#201: FILE: instrumentation/profile.c:145:
+int profile_event_register(enum profile_type type, struct notifier_block * n)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: instrumentation/profile.c:148:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: instrumentation/profile.c:148:
+ $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#205: FILE: instrumentation/profile.c:149:
+	switch (type) {
+		case PROFILE_TASK_EXIT:
[...]
+		case PROFILE_MUNMAP:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#207: FILE: instrumentation/profile.c:151:
+			err = blocking_notifier_chain_register(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#211: FILE: instrumentation/profile.c:155:
+			err = blocking_notifier_chain_register(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: instrumentation/profile.c:159:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: instrumentation/profile.c:159:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: instrumentation/profile.c:163:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: instrumentation/profile.c:163:
+
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: instrumentation/profile.c:163:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: instrumentation/profile.c:164:
+int profile_event_unregister(enum profile_type type, struct notifier_block * n)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: instrumentation/profile.c:167:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: instrumentation/profile.c:167:
+ $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#224: FILE: instrumentation/profile.c:168:
+	switch (type) {
+		case PROFILE_TASK_EXIT:
[...]
+		case PROFILE_MUNMAP:

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#226: FILE: instrumentation/profile.c:170:
+			err = blocking_notifier_chain_unregister(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#230: FILE: instrumentation/profile.c:174:
+			err = blocking_notifier_chain_unregister(

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#251: FILE: instrumentation/profile.c:195:
+	synchronize_sched();  /* Allow ongoing interrupts to complete. */

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#254: FILE: instrumentation/profile.c:198:
+EXPORT_SYMBOL_GPL(register_timer_hook);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#255: FILE: instrumentation/profile.c:199:
+EXPORT_SYMBOL_GPL(unregister_timer_hook);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#256: FILE: instrumentation/profile.c:200:
+EXPORT_SYMBOL_GPL(task_handoff_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#257: FILE: instrumentation/profile.c:201:
+EXPORT_SYMBOL_GPL(task_handoff_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#258: FILE: instrumentation/profile.c:202:
+EXPORT_SYMBOL_GPL(profile_event_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#259: FILE: instrumentation/profile.c:203:
+EXPORT_SYMBOL_GPL(profile_event_unregister);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#263: FILE: instrumentation/profile.c:207:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: instrumentation/profile.c:257:
+		struct profile_hit *hits = per_cpu(cpu_profile_hits, cpu)[j];
+		for (i = 0; i < NR_PROFILE_HIT; ++i) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#320: FILE: instrumentation/profile.c:264:
+			hits[i].hits = hits[i].pc = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: instrumentation/profile.c:280:
+		struct profile_hit *hits = per_cpu(cpu_profile_hits, cpu)[i];
+		memset(hits, 0, NR_PROFILE_HIT*sizeof(struct profile_hit));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#336: FILE: instrumentation/profile.c:280:
+		memset(hits, 0, NR_PROFILE_HIT*sizeof(struct profile_hit));
 		                              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#350: FILE: instrumentation/profile.c:294:
+	i = primary = (pc & (NR_PROFILE_GRP - 1)) << PROFILE_GRPSHIFT;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#385: FILE: instrumentation/profile.c:329:
+		hits[i].pc = hits[i].hits = 0;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#392: FILE: instrumentation/profile.c:336:
+static int __devinit profile_cpu_callback(struct notifier_block *info,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: instrumentation/profile.c:337:
+static int __devinit profile_cpu_callback(struct notifier_block *info,
+					unsigned long action, void *__cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: instrumentation/profile.c:349:
+			page = alloc_pages_node(node,
+					GFP_KERNEL | __GFP_ZERO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: instrumentation/profile.c:357:
+			page = alloc_pages_node(node,
+					GFP_KERNEL | __GFP_ZERO,

WARNING:INDENTED_LABEL: labels should not be indented
#420: FILE: instrumentation/profile.c:364:
+	out_free:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#464: FILE: instrumentation/profile.c:408:
+EXPORT_SYMBOL_GPL(profile_hits);

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#478: FILE: instrumentation/profile.c:422:
+#include <asm/uaccess.h>

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#481: FILE: instrumentation/profile.c:425:
+static int prof_cpu_mask_read_proc (char *page, char **start, off_t off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: instrumentation/profile.c:426:
+static int prof_cpu_mask_read_proc (char *page, char **start, off_t off,
+			int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: instrumentation/profile.c:429:
+	int len = cpumask_scnprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#491: FILE: instrumentation/profile.c:435:
+static int prof_cpu_mask_write_proc (struct file *file, const char __user *buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: instrumentation/profile.c:436:
+static int prof_cpu_mask_write_proc (struct file *file, const char __user *buffer,
+					unsigned long count, void *data)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#511: FILE: instrumentation/profile.c:455:
+	if (!(entry = create_proc_entry("prof_cpu_mask", 0600, root_irq_dir)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#529: FILE: instrumentation/profile.c:473:
+	char * pnt;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#533: FILE: instrumentation/profile.c:477:
+	if (p >= (prof_len+1)*sizeof(unsigned int))
 	                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#533: FILE: instrumentation/profile.c:477:
+	if (p >= (prof_len+1)*sizeof(unsigned int))
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#535: FILE: instrumentation/profile.c:479:
+	if (count > (prof_len+1)*sizeof(unsigned int) - p)
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#535: FILE: instrumentation/profile.c:479:
+	if (count > (prof_len+1)*sizeof(unsigned int) - p)
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#536: FILE: instrumentation/profile.c:480:
+		count = (prof_len+1)*sizeof(unsigned int) - p;
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#536: FILE: instrumentation/profile.c:480:
+		count = (prof_len+1)*sizeof(unsigned int) - p;
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#540: FILE: instrumentation/profile.c:484:
+		if (put_user(*((char *)(&sample_step)+p),buf))
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#540: FILE: instrumentation/profile.c:484:
+		if (put_user(*((char *)(&sample_step)+p),buf))
 		                                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&sample_step'
#540: FILE: instrumentation/profile.c:484:
+		if (put_user(*((char *)(&sample_step)+p),buf))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#545: FILE: instrumentation/profile.c:489:
+	if (copy_to_user(buf,(void *)pnt,count))
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#545: FILE: instrumentation/profile.c:489:
+	if (copy_to_user(buf,(void *)pnt,count))
 	                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#562: FILE: instrumentation/profile.c:506:
+	extern int setup_profiling_timer (unsigned int multiplier);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: instrumentation/profile.c:542:
+		page = alloc_pages_node(node,
+				GFP_KERNEL | __GFP_ZERO | GFP_THISNODE,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#603: FILE: instrumentation/profile.c:547:
+		per_cpu(cpu_profile_hits, cpu)[1]
+				= (struct profile_hit *)page_address(page);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: instrumentation/profile.c:549:
+		page = alloc_pages_node(node,
+				GFP_KERNEL | __GFP_ZERO | GFP_THISNODE,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#610: FILE: instrumentation/profile.c:554:
+		per_cpu(cpu_profile_hits, cpu)[0]
+				= (struct profile_hit *)page_address(page);

WARNING:MEMORY_BARRIER: memory barrier without comment
#615: FILE: instrumentation/profile.c:559:
+	smp_mb();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#645: FILE: instrumentation/profile.c:589:
+	if (!(entry = create_proc_entry("profile", S_IWUSR | S_IRUGO, NULL)))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#645: FILE: instrumentation/profile.c:589:
+	if (!(entry = create_proc_entry("profile", S_IWUSR | S_IRUGO, NULL)))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#648: FILE: instrumentation/profile.c:592:
+	entry->size = (1+prof_len) * sizeof(atomic_t);
 	                ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363816.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 37 warnings, 37 checks, 612 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363816.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
