WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#30: 
    Signed-off-by: Bob Copeland <me@bobcopeland.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: fs/omfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: fs/omfs/inode.c:34:
+	err = omfs_allocate_range(dir->i_sb, sbi->s_mirrors, sbi->s_mirrors,
+			&new_block, &len);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#85: FILE: fs/omfs/inode.c:45:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#105: FILE: fs/omfs/inode.c:65:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#118: FILE: fs/omfs/inode.c:78:
+	unsigned char *ptr = (unsigned char *) oi;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#150: FILE: fs/omfs/inode.c:110:
+	oi = (struct omfs_inode *) bh->b_data;

CHECK:BRACES: braces {} should be used on all arms of this statement
#153: FILE: fs/omfs/inode.c:113:
+	if (S_ISDIR(inode->i_mode))
[...]
+	else if (S_ISREG(inode->i_mode))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#157: FILE: fs/omfs/inode.c:117:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#158: FILE: fs/omfs/inode.c:118:
+		printk(KERN_WARNING "omfs: unknown file type: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: fs/omfs/inode.c:119:
+		printk(KERN_WARNING "omfs: unknown file type: %d\n",
+			inode->i_mode);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#171: FILE: fs/omfs/inode.c:131:
+		((inode->i_ctime.tv_nsec + 999)/1000);
 		                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#272: FILE: fs/omfs/inode.c:232:
+		inode->i_mode = S_IFDIR | (S_IRWXUGO & ~sbi->s_dmask);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#280: FILE: fs/omfs/inode.c:240:
+		inode->i_mode = S_IFREG | (S_IRWXUGO & ~sbi->s_fmask);

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: fs/omfs/inode.c:258:
+	struct omfs_sb_info *sbi = OMFS_SB(sb);
+	kfree(sbi->s_imap);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#307: FILE: fs/omfs/inode.c:267:
+	struct omfs_sb_info *sbi = OMFS_SB(s);
+	buf->f_type = OMFS_MAGIC;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#313: FILE: fs/omfs/inode.c:273:
+	buf->f_bfree = buf->f_bavail = buf->f_ffree =

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#350: FILE: fs/omfs/inode.c:310:
+	sbi->s_imap = kzalloc(array_size * sizeof(unsigned long *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: fs/omfs/inode.c:328:
+			memset((void *)*ptr + count, 0xff,
+				sb->s_blocksize - count);

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#387: FILE: fs/omfs/inode.c:347:
+	Opt_uid, Opt_gid, Opt_umask, Opt_dmask, Opt_fmask

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#387: FILE: fs/omfs/inode.c:347:
+	Opt_uid, Opt_gid, Opt_umask, Opt_dmask, Opt_fmask

CHECK:CAMELCASE: Avoid CamelCase: <Opt_umask>
#387: FILE: fs/omfs/inode.c:347:
+	Opt_uid, Opt_gid, Opt_umask, Opt_dmask, Opt_fmask

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dmask>
#387: FILE: fs/omfs/inode.c:347:
+	Opt_uid, Opt_gid, Opt_umask, Opt_dmask, Opt_fmask

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fmask>
#387: FILE: fs/omfs/inode.c:347:
+	Opt_uid, Opt_gid, Opt_umask, Opt_dmask, Opt_fmask

WARNING:LINE_SPACING: Missing a blank line after declarations
#409: FILE: fs/omfs/inode.c:369:
+		int token;
+		if (!*p)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#427: FILE: fs/omfs/inode.c:387:
+			sbi->s_fmask = sbi->s_dmask = option;

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: fs/omfs/inode.c:409:
+	unsigned int scale = sbi->s_blocksize / sbi->s_sys_blocksize;
+	sbi->s_block_shift = 0;

CHECK:SPACING: No space is necessary after a cast
#464: FILE: fs/omfs/inode.c:424:
+	save_mount_options(sb, (char *) data);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct omfs_sb_info)...)
#466: FILE: fs/omfs/inode.c:426:
+	sbi = kzalloc(sizeof(struct omfs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#474: FILE: fs/omfs/inode.c:434:
+	sbi->s_dmask = sbi->s_fmask = current->fs->umask;

CHECK:SPACING: No space is necessary after a cast
#476: FILE: fs/omfs/inode.c:436:
+	if (!parse_options((char *) data, sbi))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: fs/omfs/inode.c:451:
+			printk(KERN_ERR "omfs: Invalid superblock (%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: fs/omfs/inode.c:452:
+			printk(KERN_ERR "omfs: Invalid superblock (%x)\n",
+				   omfs_sb->s_magic);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#505: FILE: fs/omfs/inode.c:465:
+		printk(KERN_ERR "omfs: sysblock size (%d) is out of range\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: fs/omfs/inode.c:466:
+		printk(KERN_ERR "omfs: sysblock size (%d) is out of range\n",
+			sbi->s_sys_blocksize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#512: FILE: fs/omfs/inode.c:472:
+		printk(KERN_ERR "omfs: block size (%d) is out of range\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: fs/omfs/inode.c:473:
+		printk(KERN_ERR "omfs: block size (%d) is out of range\n",
+			sbi->s_blocksize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#540: FILE: fs/omfs/inode.c:500:
+		printk(KERN_ERR "omfs: block count discrepancy between "

WARNING:SPLIT_STRING: quoted string split across lines
#541: FILE: fs/omfs/inode.c:501:
+		printk(KERN_ERR "omfs: block count discrepancy between "
+			"super and root blocks (%llx, %llx)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#560: FILE: fs/omfs/inode.c:520:
+		iput(root);
 		^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#563: FILE: fs/omfs/inode.c:523:
+	printk(KERN_DEBUG "omfs: Mounted volume %s\n", omfs_rb->r_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: fs/omfs/inode.c:535:
+static int omfs_get_sb(struct file_system_type *fs_type,
+			int flags, const char *dev_name,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293393.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 24 checks, 560 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293393.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
