WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
The MPOL_BIND policy creates a zonelist that is used for allocations belonging

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#88: FILE: include/linux/gfp.h:187:
+extern struct page *

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#88: FILE: include/linux/gfp.h:187:
+extern struct page *

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zonelist *' should also have an identifier name
#88: FILE: include/linux/gfp.h:187:
+extern struct page *

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nodes"
#136: FILE: include/linux/mmzone.h:779:
+	if (likely(nodes == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: include/linux/mmzone.h:784:
+		while (zonelist_zone_idx(z) > highest_zoneidx ||
+				(z->zone && !zref_in_nodemask(z, nodes)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nodes"
#159: FILE: include/linux/mmzone.h:799:
+	if (likely(nodes == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: include/linux/mmzone.h:804:
+		while (zonelist_zone_idx(z) > highest_zoneidx ||
+				(z->zone && !zref_in_nodemask(z, nodes)))

WARNING:LONG_LINE_COMMENT: line length of 144 exceeds 100 columns
#172: FILE: include/linux/mmzone.h:811:
+ * for_each_zone_zonelist_nodemask - helper macro to iterate over valid zones in a zonelist at or below a given zone index and within a nodemask

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#185: FILE: include/linux/mmzone.h:821:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx),	\
 					zone = zonelist_zone(z++);	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx),		\
 					zone = zonelist_zone(z++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#185: FILE: include/linux/mmzone.h:821:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx),	\
 					zone = zonelist_zone(z++);	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx),		\
 					zone = zonelist_zone(z++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'highidx' - possible side-effects?
#185: FILE: include/linux/mmzone.h:821:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx),	\
 					zone = zonelist_zone(z++);	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx),		\
 					zone = zonelist_zone(z++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nodemask' - possible side-effects?
#185: FILE: include/linux/mmzone.h:821:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx),	\
 					zone = zonelist_zone(z++);	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx),		\
 					zone = zonelist_zone(z++))

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#194: FILE: include/linux/mmzone.h:829:
+ * for_each_zone_zonelist - helper macro to iterate over valid zones in a zonelist at or below a given zone index

WARNING:TYPO_SPELLING: 'curremt' may be misspelled - perhaps 'current'?
#217: FILE: kernel/cpuset.c:1519:
+ * cpuset_nodemask_valid_mems_allowed - check nodemask vs. curremt mems_allowed
                                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: mm/mempolicy.c:140:
+	int nd, k;
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#284: FILE: mm/mempolicy.c:145:
+	for_each_node_mask(nd, *nodemask) {
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#285: FILE: mm/mempolicy.c:146:
+		struct zone *z = &NODE_DATA(nd)->node_zones[k];
 		                            ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: mm/mempolicy.c:147:
+		struct zone *z = &NODE_DATA(nd)->node_zones[k];
+		if (z->present_pages > 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#330: FILE: mm/mempolicy.c:471:
+		/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: mm/mempolicy.c:1111:
+	if (unlikely(policy->policy == MPOL_BIND &&
+			gfp_zone(gfp) >= policy_zone &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: mm/mempolicy.c:1176:
+		enum zone_type highest_zoneidx = gfp_zone(GFP_KERNEL);
+		zonelist = &NODE_DATA(numa_node_id())->node_zonelists[0];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: mm/mempolicy.c:1178:
+		z = first_zones_zonelist(zonelist, &policy->v.nodes,
+							highest_zoneidx);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#409: FILE: mm/mempolicy.c:1408:
+		/* Fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#442: FILE: mm/mempolicy.c:1715:
+		/* Fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#486: FILE: mm/mempolicy.c:1790:
+		/* Fall through */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: mm/page_alloc.c:1424:
+get_page_from_freelist(gfp_t gfp_mask, nodemask_t *nodemask, unsigned int order,
 		struct zonelist *zonelist, int high_zoneidx, int alloc_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: mm/page_alloc.c:1443:
+	for_each_zone_zonelist_nodemask(zone, z, zonelist,
+						high_zoneidx, nodemask) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: mm/page_alloc.c:1551:
+__alloc_pages_internal(gfp_t gfp_mask, unsigned int order,
+			struct zonelist *zonelist, nodemask_t *nodemask)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#539: FILE: mm/page_alloc.c:1580:
+	page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask, order,
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: mm/page_alloc.c:1581:
+	page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask, order,
 			zonelist, high_zoneidx, ALLOC_WMARK_LOW|ALLOC_CPUSET);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: mm/page_alloc.c:1626:
+	page = get_page_from_freelist(gfp_mask, nodemask, order, zonelist,
 						high_zoneidx, alloc_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#558: FILE: mm/page_alloc.c:1639:
+			page = get_page_from_freelist(gfp_mask, nodemask, order,
 				zonelist, high_zoneidx, ALLOC_NO_WATERMARKS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: mm/page_alloc.c:1674:
+		page = get_page_from_freelist(gfp_mask, nodemask, order,
 					zonelist, high_zoneidx, alloc_flags);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#576: FILE: mm/page_alloc.c:1689:
+		page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask,
 		                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: mm/page_alloc.c:1690:
+		page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask,
+			order, zonelist, high_zoneidx,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#578: FILE: mm/page_alloc.c:1691:
+			ALLOC_WMARK_HIGH|ALLOC_CPUSET);
 			                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: mm/page_alloc.c:1746:
+__alloc_pages(gfp_t gfp_mask, unsigned int order,
+		struct zonelist *zonelist)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: mm/page_alloc.c:1753:
+__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,
+		struct zonelist *zonelist, nodemask_t *nodemask)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375442.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 23 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375442.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
