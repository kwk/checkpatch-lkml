WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
It can add another dimension to the parameters controlling a particular cgroup.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: block/as-iosched.c:267:
+static inline struct rb_root *rq_rb_root(struct as_data *ad,
+						struct request *rq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: block/as-iosched.c:288:
+static inline struct request *ad_fifo_next(struct as_data *ad,
+						unsigned short ioprio,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ad->prio_q[rq_prio_level(rq)].serviced <
 			ad->prio_q[rq_prio_level(rq)].ioprio_wt'
#213: FILE: block/as-iosched.c:716:
+		if ((ad->prio_q[rq_prio_level(rq)].serviced <
+			ad->prio_q[rq_prio_level(rq)].ioprio_wt)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#217: FILE: block/as-iosched.c:720:
+			return 1;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: block/as-iosched.c:727:
+	if (rq && cioprio != rioprio &&
+			ioprio_best(cioprio, rioprio) == cioprio) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#230: FILE: block/as-iosched.c:733:
+		unsigned short clevel = IOPRIO_PRIO_DATA(cioprio);
+		if ((ad->prio_q[clevel].serviced <

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ad->prio_q[clevel].serviced <
 				ad->prio_q[clevel].ioprio_wt'
#230: FILE: block/as-iosched.c:733:
+		if ((ad->prio_q[clevel].serviced <
+				ad->prio_q[clevel].ioprio_wt)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#234: FILE: block/as-iosched.c:737:
+			return 0;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: block/as-iosched.c:840:
+		as_choose_req(ad, rq,
+			 ad->prio_q[rq_prio_level(rq)].next_rq[data_dir]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: block/as-iosched.c:1017:
+static int as_has_request_at_priority(struct as_data *ad,
+					unsigned int priority)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#332: FILE: block/as-iosched.c:1082:
+		if (!as_has_request_at_priority(ad, ioprio)) {
+			continue;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: block/as-iosched.c:1132:
+				as_move_to_dispatch(ad,
+				    ad->prio_q[ioprio].next_rq[REQ_SYNC]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: block/as-iosched.c:1139:
+				as_move_to_dispatch(ad,
+				    ad->prio_q[ioprio].next_rq[REQ_ASYNC]);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#415: FILE: block/as-iosched.c:1167:
+	changed_ioprio = (ad->batch_ioprio != ioprio)?1:0;
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#415: FILE: block/as-iosched.c:1167:
+	changed_ioprio = (ad->batch_ioprio != ioprio)?1:0;
 	                                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: block/as-iosched.c:1200:
+		BUG_ON(RB_EMPTY_ROOT(&ad->prio_q[ioprio].sort_list[REQ_SYNC]));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: block/as-iosched.c:1203:
+		if (!changed_ioprio && writes &&
+				 ad->batch_data_dir == REQ_SYNC)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#472: FILE: block/as-iosched.c:1228:
+		BUG_ON(RB_EMPTY_ROOT(&ad->prio_q[ioprio].sort_list[REQ_ASYNC]));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: block/as-iosched.c:1313:
+	list_add_tail(&rq->queuelist,
+			&ad->prio_q[rq_prio_level(rq)].fifo_list[data_dir]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#535: FILE: block/as-iosched.c:1358:
+	if (class == IOPRIO_CLASS_BE)
[...]
+	else if (class == IOPRIO_CLASS_LATENCY)
[...]
+	else if (class == IOPRIO_CLASS_RT)
[...]
+	else if (class == IOPRIO_CLASS_IDLE)
[...]
+	else if (class == IOPRIO_CLASS_NONE) {
[...]
+	} else {
[...]

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#536: FILE: block/as-iosched.c:1359:
+		return ((data < IOPRIO_AS_MAX)? ioprio:
 		                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#536: FILE: block/as-iosched.c:1359:
+		return ((data < IOPRIO_AS_MAX)? ioprio:
 		                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: block/as-iosched.c:1361:
+			IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE,
+						(IOPRIO_AS_MAX - 1)));

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#540: FILE: block/as-iosched.c:1363:
+		return ((data < IOPRIO_AS_MAX)?
 		                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#541: FILE: block/as-iosched.c:1364:
+			IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE, data):
 			                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: block/as-iosched.c:1366:
+			IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE,
+						(IOPRIO_AS_MAX - 1)));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#550: FILE: block/as-iosched.c:1373:
+		return IOPRIO_AS_DEFAULT;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: block/as-iosched.c:1393:
+	__rq = elv_rb_find(&ad->prio_q[ioprio].sort_list[bio_data_dir(bio)],
+								 rb_key);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#586: FILE: block/as-iosched.c:1489:
+		BUG_ON(as_has_request_at_priority(ad, ioprio));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: block/as-iosched.c:1593:
+static ssize_t as_priority_weights_store(elevator_t *e, const char *page,
+							size_t count)

ERROR:SPACING: space required before the open parenthesis '('
#649: FILE: block/as-iosched.c:1601:
+	while(tcount && i < IOPRIO_AS_MAX) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#652: FILE: block/as-iosched.c:1604:
+		val = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == 0'
#655: FILE: block/as-iosched.c:1607:
+		if ((p - prev_p) && (val == 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: block/as-iosched.c:1678:
+static int as_allow_merge(struct request_queue *q, struct request *rq,
+				struct bio *bio)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#749: FILE: block/blk-core.c:1483:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 10 warnings, 21 checks, 640 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
