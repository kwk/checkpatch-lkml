WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
2.6.26-stable review patch.  If anyone has any objections, please let us know.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '4f70f7a91bffdcc39f088748dc678953eb9a3fbd', maybe rebased or not pulled?
#43: 
[ Upstream commit 4f70f7a91bffdcc39f088748dc678953eb9a3fbd ]

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#68: FILE: arch/sparc64/kernel/irq.c:688:
+static __attribute__((always_inline)) void *set_hardirq_stack(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#81: FILE: arch/sparc64/kernel/irq.c:701:
+}
+static __attribute__((always_inline)) void restore_hardirq_stack(void *orig_sp)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((always_inline))
#81: FILE: arch/sparc64/kernel/irq.c:701:
+static __attribute__((always_inline)) void restore_hardirq_stack(void *orig_sp)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#145: FILE: arch/sparc64/kernel/kstack.h:1:
+#ifndef _KSTACK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#156: FILE: arch/sparc64/kernel/kstack.h:12:
+	unsigned long base = (unsigned long) tp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#162: FILE: arch/sparc64/kernel/kstack.h:18:
+	base = (unsigned long) hardirq_stack[tp->cpu];

CHECK:SPACING: No space is necessary after a cast
#166: FILE: arch/sparc64/kernel/kstack.h:22:
+	base = (unsigned long) softirq_stack[tp->cpu];

CHECK:SPACING: No space is necessary after a cast
#177: FILE: arch/sparc64/kernel/kstack.h:33:
+	unsigned long base = (unsigned long) tp;

CHECK:SPACING: No space is necessary after a cast
#178: FILE: arch/sparc64/kernel/kstack.h:34:
+	unsigned long addr = (unsigned long) regs;

CHECK:SPACING: No space is necessary after a cast
#184: FILE: arch/sparc64/kernel/kstack.h:40:
+	base = (unsigned long) hardirq_stack[tp->cpu];

CHECK:SPACING: No space is necessary after a cast
#188: FILE: arch/sparc64/kernel/kstack.h:44:
+	base = (unsigned long) softirq_stack[tp->cpu];

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#200: FILE: arch/sparc64/kernel/kstack.h:56:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#239: FILE: arch/sparc64/kernel/process.c:326:
+		if (kstack_valid(tp, (unsigned long) rw)) {

CHECK:SPACING: No space is necessary after a cast
#244: FILE: arch/sparc64/kernel/process.c:330:
+			if (kstack_valid(tp, (unsigned long) rw))

ERROR:DEFINE_ARCH_HAS: #define of '__ARCH_HAS_DO_SOFTIRQ' is wrong - use Kconfig variables or standard guards instead
#398: FILE: include/asm-sparc64/irq.h:95:
+#define __ARCH_HAS_DO_SOFTIRQ

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000238662.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 5 warnings, 11 checks, 309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000238662.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
