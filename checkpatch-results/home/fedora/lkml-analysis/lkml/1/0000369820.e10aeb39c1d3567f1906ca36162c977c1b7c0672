WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgd_t *' should also have an identifier name
#40: FILE: include/linux/mm.h:778:
+	int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#40: FILE: include/linux/mm.h:778:
+	int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#40: FILE: include/linux/mm.h:778:
+	int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#40: FILE: include/linux/mm.h:778:
+	int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pud_t *' should also have an identifier name
#41: FILE: include/linux/mm.h:779:
+	int (*pud_entry)(pud_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#41: FILE: include/linux/mm.h:779:
+	int (*pud_entry)(pud_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#41: FILE: include/linux/mm.h:779:
+	int (*pud_entry)(pud_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#41: FILE: include/linux/mm.h:779:
+	int (*pud_entry)(pud_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pmd_t *' should also have an identifier name
#42: FILE: include/linux/mm.h:780:
+	int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#42: FILE: include/linux/mm.h:780:
+	int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#42: FILE: include/linux/mm.h:780:
+	int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#42: FILE: include/linux/mm.h:780:
+	int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#43: FILE: include/linux/mm.h:781:
+	int (*pte_entry)(pte_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#43: FILE: include/linux/mm.h:781:
+	int (*pte_entry)(pte_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#43: FILE: include/linux/mm.h:781:
+	int (*pte_entry)(pte_t *, unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#43: FILE: include/linux/mm.h:781:
+	int (*pte_entry)(pte_t *, unsigned long, unsigned long, void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#44: FILE: include/linux/mm.h:782:
+	int (*pte_hole) (unsigned long, unsigned long, void *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#44: FILE: include/linux/mm.h:782:
+	int (*pte_hole) (unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#44: FILE: include/linux/mm.h:782:
+	int (*pte_hole) (unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#44: FILE: include/linux/mm.h:782:
+	int (*pte_hole) (unsigned long, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#47: FILE: include/linux/mm.h:785:
+int walk_page_range(struct mm_struct *, unsigned long addr, unsigned long end,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: mm/pagewalk.c:1:
+#include <linux/mm.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#83: FILE: mm/pagewalk.c:14:
+		if (err)
+		       break;

WARNING:TABSTOP: Statements should start on a tabstop
#84: FILE: mm/pagewalk.c:15:
+		       break;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 0 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
