WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#57: FILE: arch/x86/xen/Kconfig:32:
+config XEN_DEBUG_FS
+	bool "Enable Xen debug and tuning parameters in debugfs"
+	depends on XEN && DEBUG_FS
+	default n
+	help
+	  Enable statistics output and various tuning options in debugfs.
+	  Enabling this option may incur a significant performance overhead.

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: arch/x86/xen/debugfs.c:1:
+#include <linux/init.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#102: FILE: arch/x86/xen/debugfs.c:22:
+struct array_data
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#104: FILE: arch/x86/xen/debugfs.c:24:
+	unsigned elements;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: arch/x86/xen/debugfs.c:34:
+			   u32 *array, unsigned array_size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#117: FILE: arch/x86/xen/debugfs.c:37:
+	unsigned i;

ERROR:SPACING: space required before the open parenthesis '('
#119: FILE: arch/x86/xen/debugfs.c:39:
+	for(i = 0; i < array_size; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#129: FILE: arch/x86/xen/debugfs.c:49:
+			buf[-1] = (i == array_size-1) ? '\n' : ' ';
 			                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#140: FILE: arch/x86/xen/debugfs.c:60:
+static char *format_array_alloc(const char *fmt, u32 *array, unsigned array_size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ret"
#146: FILE: arch/x86/xen/debugfs.c:66:
+	if (ret == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#162: FILE: arch/x86/xen/debugfs.c:82:
+		if (file->private_data) {
+			kfree(file->private_data);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#183: FILE: arch/x86/xen/debugfs.c:103:
+static struct file_operations u32_array_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#186: FILE: arch/x86/xen/debugfs.c:106:
+	.release= xen_array_release,
 	        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#192: FILE: arch/x86/xen/debugfs.c:112:
+					    u32 *array, unsigned elements)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#196: FILE: arch/x86/xen/debugfs.c:116:
+	if (data == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#209: FILE: arch/x86/xen/debugfs.h:1:
+#ifndef _XEN_DEBUGFS_H

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#216: FILE: arch/x86/xen/debugfs.h:8:
+					    u32 *array, unsigned elements);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'elem' may be better as '(elem)' to avoid precedence issues
#281: FILE: arch/x86/xen/mmu.c:108:
+#define ADD_STATS(elem, val)			\
+	do { check_zero(); mmu_stats.elem += (val); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#282: FILE: arch/x86/xen/mmu.c:109:
+	do { check_zero(); mmu_stats.elem += (val); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#286: FILE: arch/x86/xen/mmu.c:113:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#286: FILE: arch/x86/xen/mmu.c:113:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mcs.mc"
#297: FILE: arch/x86/xen/mmu.c:302:
+	if (mcs.mc != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d_xen"
#439: FILE: arch/x86/xen/mmu.c:1111:
+	if (d_xen == NULL)

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#523: FILE: arch/x86/xen/multicalls.c:56:
+enum flush_reasons
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#535: FILE: arch/x86/xen/multicalls.c:68:
+	unsigned histo[MC_BATCH+1];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#535: FILE: arch/x86/xen/multicalls.c:68:
+	unsigned histo[MC_BATCH+1];
 	                       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#537: FILE: arch/x86/xen/multicalls.c:70:
+	unsigned issued;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#538: FILE: arch/x86/xen/multicalls.c:71:
+	unsigned arg_total;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#539: FILE: arch/x86/xen/multicalls.c:72:
+	unsigned hypercalls;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#540: FILE: arch/x86/xen/multicalls.c:73:
+	unsigned histo_hypercalls[NHYPERCALLS];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#542: FILE: arch/x86/xen/multicalls.c:75:
+	unsigned flush[FL_N_REASONS];

ERROR:SPACING: space required before the open parenthesis '('
#566: FILE: arch/x86/xen/multicalls.c:99:
+	for(i = 0; i < mc->mcidx; i++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#567: FILE: arch/x86/xen/multicalls.c:100:
+		unsigned op = mc->entries[i].op;

WARNING:LINE_SPACING: Missing a blank line after declarations
#568: FILE: arch/x86/xen/multicalls.c:101:
+		unsigned op = mc->entries[i].op;
+		if (op < NHYPERCALLS)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d_xen"
#634: FILE: arch/x86/xen/multicalls.c:256:
+	if (d_xen == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#689: FILE: arch/x86/xen/spinlock.c:32:
+	u32 histo_spin_fast[HISTO_BUCKETS+1];
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#690: FILE: arch/x86/xen/spinlock.c:33:
+	u32 histo_spin[HISTO_BUCKETS+1];
 	                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#698: FILE: arch/x86/xen/spinlock.c:41:
+static unsigned lock_timeout = 1 << 10;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'elem' may be better as '(elem)' to avoid precedence issues
#709: FILE: arch/x86/xen/spinlock.c:52:
+#define ADD_STATS(elem, val)			\
+	do { check_zero(); spinlock_stats.elem += (val); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#710: FILE: arch/x86/xen/spinlock.c:53:
+	do { check_zero(); spinlock_stats.elem += (val); } while(0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#719: FILE: arch/x86/xen/spinlock.c:62:
+	unsigned index = ilog2(delta);

CHECK:BIT_MACRO: Prefer using the BIT macro
#745: FILE: arch/x86/xen/spinlock.c:88:
+#define TIMEOUT			(1 << 10)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:SPACING: space required before the open parenthesis '('
#746: FILE: arch/x86/xen/spinlock.c:89:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#746: FILE: arch/x86/xen/spinlock.c:89:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#756: FILE: arch/x86/xen/spinlock.c:99:
+}
+static inline void spin_time_accum(u64 start)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#768: FILE: arch/x86/xen/spinlock.c:185:
+	ADD_STATS(taken_slow_nested, prev != NULL);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#795: FILE: arch/x86/xen/spinlock.c:230:
+	unsigned timeout;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d_xen"
#857: FILE: arch/x86/xen/spinlock.c:338:
+	if (d_xen == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237322.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 25 warnings, 15 checks, 795 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237322.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
