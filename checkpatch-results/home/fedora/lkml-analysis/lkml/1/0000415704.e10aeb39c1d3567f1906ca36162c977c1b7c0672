CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: fs/namespace.c:60:
+static struct union_mount *find_union_mount(struct vfsmount *mnt,
+		struct dentry *dentry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: fs/namespace.c:81:
+struct union_mount *alloc_union_mount(struct vfsmount *src_mnt,
+	struct dentry *src_dentry, struct vfsmount *dst_mnt,

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: fs/namespace.c:85:
+	struct union_mount *u;
+	u = kmalloc(sizeof(struct union_mount), GFP_ATOMIC);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*u)...) over kmalloc(sizeof(struct union_mount)...)
#87: FILE: fs/namespace.c:85:
+	u = kmalloc(sizeof(struct union_mount), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#112: FILE: fs/namespace.c:110:
+ * it via @nd and returns true. Else doesn't modify @nd, but returns false.
            ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#112: FILE: fs/namespace.c:110:
+ * it via @nd and returns true. Else doesn't modify @nd, but returns false.
                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#114: FILE: fs/namespace.c:112:
+int next_union_mount(struct nameidata *nd)
                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#129: FILE: fs/namespace.c:127:
+/* Check if next element of the union stack exists. @nd isn't modified. */
                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#159: FILE: fs/namespace.c:261:
+static void attach_mnt(struct vfsmount *mnt, struct nameidata *nd,
                                                                ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: fs/namespace.c:262:
+static void attach_mnt(struct vfsmount *mnt, struct nameidata *nd,
+		struct union_mount *u)

WARNING:REPEATED_WORD: Possible repeated word: 'be'
#212: FILE: fs/namespace.c:457:
+		 * union_mount_hashtable. This needs to be be done with

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#239: FILE: fs/namespace.c:956:
+			attach_mnt(q, &nd, NULL);
 			               ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#253: FILE: fs/namespace.c:1048:
+		if (!(u = alloc_union_mount(source_mnt, source_mnt->mnt_root,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: fs/namespace.c:1049:
+		if (!(u = alloc_union_mount(source_mnt, source_mnt->mnt_root,
+					dest_mnt, dest_dentry)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#265: FILE: fs/namespace.c:1060:
+		attach_mnt(source_mnt, nd, u);
 		                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: fs/namespace.c:1071:
+			u = alloc_union_mount(child, child->mnt_root,
+				child->mnt_parent, child->mnt_mountpoint);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#281: FILE: fs/namespace.c:1074:
+				printk(KERN_ERR "attach_recursive_mnt: ENOMEM\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'attach_recursive_mnt', this function's name, in a string
#281: FILE: fs/namespace.c:1074:
+				printk(KERN_ERR "attach_recursive_mnt: ENOMEM\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#382: FILE: include/linux/mount.h:112:
+#define IS_MNT_UNION(mnt) (mnt->mnt_flags & MNT_UNION)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: include/linux/mount.h:120:
+extern void attach_mnt_union(struct union_mount *u);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: include/linux/mount.h:121:
+extern struct union_mount *alloc_union_mount(struct vfsmount *src_mnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: include/linux/mount.h:122:
+extern struct union_mount *alloc_union_mount(struct vfsmount *src_mnt,
+	struct dentry *src_dentry, struct vfsmount *dst_mnt,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#394: FILE: include/linux/mount.h:124:
+extern int next_union_mount(struct nameidata *nd);
                                               ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#394: FILE: include/linux/mount.h:124:
+extern int next_union_mount(struct nameidata *nd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#395: FILE: include/linux/mount.h:125:
+extern int next_union_mount_exists(struct vfsmount *mnt, struct dentry *dentry);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000415704.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 12 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000415704.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
