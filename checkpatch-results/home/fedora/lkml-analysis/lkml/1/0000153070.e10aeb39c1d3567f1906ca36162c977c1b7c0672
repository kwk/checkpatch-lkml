WARNING:REPEATED_WORD: Possible repeated word: 'the'
#50: 
same patch that I've been posting on and off the the last three months

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#291: FILE: fs/gfs2/glock.c:700:
+	snprintf(gl->gl_strname, GDLM_STRNAME_BYTES, "%8x%16llx", name.ln_type, (unsigned long long)number);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#458: FILE: fs/gfs2/glock.c:1230:
+	struct lm_lockstruct *ls = &gl->gl_sbd->sd_lockstruct;
+	down_read(&gfs2_umount_flush_sem);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#462: FILE: fs/gfs2/glock.c:1234:
+		struct gfs2_holder *gh;
+		spin_lock(&gl->gl_spin);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gl->gl_target != LM_ST_UNLOCKED'
#464: FILE: fs/gfs2/glock.c:1236:
+		if ((!(gh && (gh->gh_flags & LM_FLAG_NOEXP)) &&
+		     (gl->gl_target != LM_ST_UNLOCKED)) ||
+		    ((ret & ~LM_OUT_ST_MASK) != 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: fs/gfs2/glock.c:1381:
 
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#538: FILE: fs/gfs2/glock.c:1434:
+	unsigned x;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: fs/gfs2/glock.c:1623:
+	gfs2_print_dbg(seq, "G:  s:%s n:%u/%llu f:%s t:%s d:%s/%llu a:%d r:%d\n",
 		  state2str(gl->gl_state),

CHECK:CAMELCASE: Avoid CamelCase: <Opt_jid>
#600: FILE: fs/gfs2/glock.h:20:
+	Opt_jid,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_id>
#601: FILE: fs/gfs2/glock.h:21:
+	Opt_id,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_first>
#602: FILE: fs/gfs2/glock.h:22:
+	Opt_first,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodir>
#603: FILE: fs/gfs2/glock.h:23:
+	Opt_nodir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#604: FILE: fs/gfs2/glock.h:24:
+	Opt_err,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: fs/gfs2/glock.h:92:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: fs/gfs2/glock.h:92:
+  $

WARNING:SPACING: Unnecessary space before function pointer arguments
#704: FILE: fs/gfs2/glock.h:123:
+	int (*lm_mount) (struct gfs2_sbd *sdp, const char *fsname);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#705: FILE: fs/gfs2/glock.h:124:
+ ^Ivoid (*lm_unmount) (struct gfs2_sbd *sdp);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#705: FILE: fs/gfs2/glock.h:124:
+ ^Ivoid (*lm_unmount) (struct gfs2_sbd *sdp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: fs/gfs2/glock.h:124:
+ ^Ivoid (*lm_unmount) (struct gfs2_sbd *sdp);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#705: FILE: fs/gfs2/glock.h:124:
+ 	void (*lm_unmount) (struct gfs2_sbd *sdp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#706: FILE: fs/gfs2/glock.h:125:
+	void (*lm_withdraw) (struct gfs2_sbd *sdp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#707: FILE: fs/gfs2/glock.h:126:
+	void (*lm_put_lock) (struct kmem_cache *cachep, void *gl);

WARNING:SPACING: Unnecessary space before function pointer arguments
#708: FILE: fs/gfs2/glock.h:127:
+	unsigned int (*lm_lock) (struct gfs2_glock *gl,

WARNING:SPACING: Unnecessary space before function pointer arguments
#710: FILE: fs/gfs2/glock.h:129:
+	void (*lm_cancel) (struct gfs2_glock *gl);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name1' - possible side-effects?
#824: FILE: fs/gfs2/incore.h:144:
+#define lm_name_equal(name1, name2) \
+        (((name1)->ln_number == (name2)->ln_number) && \
+         ((name1)->ln_type == (name2)->ln_type))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name2' - possible side-effects?
#824: FILE: fs/gfs2/incore.h:144:
+#define lm_name_equal(name1, name2) \
+        (((name1)->ln_number == (name2)->ln_number) && \
+         ((name1)->ln_type == (name2)->ln_type))

ERROR:CODE_INDENT: code indent should use tabs where possible
#825: FILE: fs/gfs2/incore.h:145:
+        (((name1)->ln_number == (name2)->ln_number) && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: fs/gfs2/incore.h:145:
+        (((name1)->ln_number == (name2)->ln_number) && \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#826: FILE: fs/gfs2/incore.h:146:
+         ((name1)->ln_type == (name2)->ln_type))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: fs/gfs2/incore.h:146:
+         ((name1)->ln_type == (name2)->ln_type))$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#828: FILE: fs/gfs2/incore.h:148:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#945: FILE: fs/gfs2/inode.h:108:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: fs/gfs2/inode.h:108:
+ $

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#965: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#970: FILE: fs/gfs2/lock_dlm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#988: FILE: fs/gfs2/lock_dlm.c:19:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#992: FILE: fs/gfs2/lock_dlm.c:23:
+	unsigned ret = gl->gl_state;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#994: FILE: fs/gfs2/lock_dlm.c:25:
+	BUG_ON(gl->gl_lksb.sb_flags & DLM_SBF_DEMOTED);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1015: FILE: fs/gfs2/lock_dlm.c:46:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1025: FILE: fs/gfs2/lock_dlm.c:56:
+			BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1052: FILE: fs/gfs2/lock_dlm.c:83:
+		printk(KERN_ERR "unknown bast mode %d", mode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1053: FILE: fs/gfs2/lock_dlm.c:84:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1071: FILE: fs/gfs2/lock_dlm.c:102:
+	printk(KERN_ERR "unknown LM state %d", lmstate);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1072: FILE: fs/gfs2/lock_dlm.c:103:
+	BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1100: FILE: fs/gfs2/lock_dlm.c:131:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: fs/gfs2/lock_dlm.c:134:
+^Iif (lkid != 0) $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1149: FILE: fs/gfs2/lock_dlm.c:180:
+		printk(KERN_ERR "gdlm_unlock %x,%llx err=%d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1159: FILE: fs/gfs2/lock_dlm.c:190:
+	struct lm_lockstruct *ls = &gl->gl_sbd->sd_lockstruct;
+	dlm_unlock(ls->ls_dlm, gl->gl_lksb.sb_lkid, DLM_LKF_CANCEL, NULL, gl);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fsname"
#1167: FILE: fs/gfs2/lock_dlm.c:198:
+	if (fsname == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1177: FILE: fs/gfs2/lock_dlm.c:208:
+		printk(KERN_ERR "dlm_new_lockspace error %d", error);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#3349: FILE: fs/gfs2/ops_fstype.c:632:
+	char *envp[] = { message, NULL };

WARNING:LINE_SPACING: Missing a blank line after declarations
#3351: FILE: fs/gfs2/ops_fstype.c:634:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	ls->ls_first_done = 1;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3419: FILE: fs/gfs2/ops_fstype.c:1071:
+		printk(KERN_INFO "GFS2: can't find protocol %s\n", proto);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3454: FILE: fs/gfs2/ops_fstype.c:1092:
+^I^I^Iif (ret || option < 0) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lm->lm_mount"
#3498: FILE: fs/gfs2/ops_fstype.c:1131:
+	if (lm->lm_mount == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3516: FILE: fs/gfs2/ops_fstype.c:1144:
+	const struct lm_lockops *lm = sdp->sd_lockstruct.ls_ops;
+	if (likely(!test_bit(SDF_SHUTDOWN, &sdp->sd_flags)) &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#3616: FILE: fs/gfs2/recovery.c:430:
+                               unsigned int message)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3616: FILE: fs/gfs2/recovery.c:430:
+                               unsigned int message)$

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#3626: FILE: fs/gfs2/recovery.c:434:
+	char *envp[] = { env_jid, env_status, NULL };

ERROR:CODE_INDENT: code indent should use tabs where possible
#3628: FILE: fs/gfs2/recovery.c:436:
+        ls->ls_recover_jid_done = jid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3628: FILE: fs/gfs2/recovery.c:436:
+        ls->ls_recover_jid_done = jid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3629: FILE: fs/gfs2/recovery.c:437:
+        ls->ls_recover_jid_status = message;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3629: FILE: fs/gfs2/recovery.c:437:
+        ls->ls_recover_jid_status = message;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3633: FILE: fs/gfs2/recovery.c:441:
+        kobject_uevent_env(&sdp->sd_kobj, KOBJ_CHANGE, envp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3633: FILE: fs/gfs2/recovery.c:441:
+        kobject_uevent_env(&sdp->sd_kobj, KOBJ_CHANGE, envp);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#3722: FILE: fs/gfs2/sys.c:240:
+	const struct lm_lockops *ops = sdp->sd_lockstruct.ls_ops;
+	return sprintf(buf, "%s\n", ops->lm_proto_name);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#3743: FILE: fs/gfs2/sys.c:261:
+	val = simple_strtol(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#3745: FILE: fs/gfs2/sys.c:263:
+	if (val == 1)
[...]
+	else if (val == 0) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#3760: FILE: fs/gfs2/sys.c:278:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	return sprintf(buf, "%u\n", ls->ls_id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3766: FILE: fs/gfs2/sys.c:284:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	return sprintf(buf, "%d\n", ls->ls_first);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3772: FILE: fs/gfs2/sys.c:290:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	return sprintf(buf, "%d\n", ls->ls_first_done);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3778: FILE: fs/gfs2/sys.c:296:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	return sprintf(buf, "%d\n", ls->ls_recover_jid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3798: FILE: fs/gfs2/sys.c:316:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	ls->ls_recover_jid = simple_strtol(buf, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#3798: FILE: fs/gfs2/sys.c:316:
+	ls->ls_recover_jid = simple_strtol(buf, NULL, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3808: FILE: fs/gfs2/sys.c:326:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	return sprintf(buf, "%d\n", ls->ls_recover_jid_done);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3814: FILE: fs/gfs2/sys.c:332:
+	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+	return sprintf(buf, "%d\n", ls->ls_recover_jid_status);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3819: FILE: fs/gfs2/sys.c:337:
+	ssize_t (*show)(struct gfs2_sbd *sdp, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#3820: FILE: fs/gfs2/sys.c:338:
+	ssize_t (*store)(struct gfs2_sbd *sdp, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3820: FILE: fs/gfs2/sys.c:338:
+	ssize_t (*store)(struct gfs2_sbd *sdp, const char *, size_t);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3823: FILE: fs/gfs2/sys.c:341:
+#define GDLM_ATTR(_name,_mode,_show,_store) \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3823: FILE: fs/gfs2/sys.c:341:
+#define GDLM_ATTR(_name,_mode,_show,_store) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3823: FILE: fs/gfs2/sys.c:341:
+#define GDLM_ATTR(_name,_mode,_show,_store) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3824: FILE: fs/gfs2/sys.c:342:
+static struct gdlm_attr gdlm_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3824: FILE: fs/gfs2/sys.c:342:
+static struct gdlm_attr gdlm_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3824: FILE: fs/gfs2/sys.c:342:
+static struct gdlm_attr gdlm_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                                     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000153070.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 53 warnings, 15 checks, 1801 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000153070.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
