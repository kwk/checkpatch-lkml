WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
It is a bit peculiar in that we have one task with two mm's, one of which is

CHECK:LINE_SPACING: Please don't use multiple blank lines
#158: FILE: fs/binfmt_elf.c:238:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: fs/binfmt_elf.c:1061:
+	retval = create_elf_tables(bprm, &loc->elf_ex,
 			  (interpreter_type == INTERPRETER_AOUT),

WARNING:TYPO_SPELLING: 'backwords' may be misspelled - perhaps 'backwards'?
#304: FILE: fs/compat.c:1279:
+		/* We're going to work our way backwords. */
 		                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: fs/compat.c:1330:
+			if (copy_from_user(kaddr+offset, compat_ptr(str),
 			                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: fs/compat.c:1331:
+			if (copy_from_user(kaddr+offset, compat_ptr(str),
+						bytes_to_copy)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: fs/exec.c:185:
+static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
+		int write)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: fs/exec.c:198:
+	ret = get_user_pages(current, bprm->mm, pos,
+			1, write, 1, &page, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: fs/exec.c:219:
+static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,
+		struct page *page)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#557: FILE: fs/exec.c:230:
+	bprm->vma = vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#581: FILE: fs/exec.c:254:
+	mm->stack_vm = mm->total_vm = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: fs/exec.c:278:
+static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
+		int write)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#611: FILE: fs/exec.c:284:
+		page = alloc_page(GFP_HIGHUSER|__GFP_ZERO);
 		                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: fs/exec.c:314:
+static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,
+		struct page *page)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#669: FILE: fs/exec.c:342:
+	bprm->mm = mm = mm_alloc();

WARNING:TYPO_SPELLING: 'backwords' may be misspelled - perhaps 'backwards'?
#735: FILE: fs/exec.c:420:
+		/* We're going to work our way backwords. */
 		                               ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#799: FILE: fs/exec.c:460:
+			if (copy_from_user(kaddr+offset, str, bytes_to_copy)) {
 			                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: fs/exec.c:514:
+	BUG_ON(new_start > new_end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: fs/exec.c:543:
+		free_pgd_range(&tlb, new_end, old_end, new_end,
+			vma->vm_next ? vma->vm_next->vm_start : 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: fs/exec.c:552:
+		free_pgd_range(&tlb, old_start, old_end, new_end,
+			vma->vm_next ? vma->vm_next->vm_start : 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: fs/exec.c:625:
+	ret = mprotect_fixup(vma, &prev, vma->vm_start, vma->vm_end,
+			vm_flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1065: FILE: fs/exec.c:628:
+	BUG_ON(prev != vma);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1275: FILE: fs/exec.c:1405:
+		mmput (bprm->mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1326: FILE: include/linux/binfmts.h:79:
+extern int __must_check remove_arg_zero(struct linux_binprm *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binprm *' should also have an identifier name
#1326: FILE: include/linux/binfmts.h:79:
+extern int __must_check remove_arg_zero(struct linux_binprm *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1334: FILE: include/linux/binfmts.h:96:
+extern int bprm_mm_init(struct linux_binprm *bprm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1354: FILE: include/linux/mm.h:834:
+extern unsigned long move_page_tables(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1355: FILE: include/linux/mm.h:835:
+extern unsigned long move_page_tables(struct vm_area_struct *vma,
+		unsigned long old_addr, struct vm_area_struct *new_vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1360: FILE: include/linux/mm.h:840:
+extern int mprotect_fixup(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1370: FILE: include/linux/mm.h:1167:
+extern int expand_stack_downwards(struct vm_area_struct *vma,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= addr'
#1437: FILE: mm/mmap.c:1643:
+	if (vma && (vma->vm_start <= addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1596: FILE: mm/mremap.c:124:
+unsigned long move_page_tables(struct vm_area_struct *vma,
 		unsigned long old_addr, struct vm_area_struct *new_vma,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 25 checks, 1429 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
