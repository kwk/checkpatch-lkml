WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Hardware can send and recieve at all common IR frequencies - 36K, 38K, 40K, 56K

WARNING:TYPO_SPELLING: 'recieve' may be misspelled - perhaps 'receive'?
#37: 
Hardware can send and recieve at all common IR frequencies - 36K, 38K, 40K, 56K
                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: drivers/input/ir/Kconfig:20:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: drivers/input/ir/Kconfig:21:
+config IR_MCEUSB2
+	tristate "Microsoft Media Center Ed. Receiver, v2"
+	default m
+	help
+	  Driver for the Microsoft Media Center Ed. Receiver, v2
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#72: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: drivers/input/ir/ir-mceusb2.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#107: FILE: drivers/input/ir/ir-mceusb2.c:31:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#108: FILE: drivers/input/ir/ir-mceusb2.c:32:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#141: FILE: drivers/input/ir/ir-mceusb2.c:65:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#245: FILE: drivers/input/ir/ir-mceusb2.c:169:
+struct irctl {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#288: FILE: drivers/input/ir/ir-mceusb2.c:212:
+	int len= urb->actual_length;
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usb_send_callback', this function's name, in a string
#290: FILE: drivers/input/ir/ir-mceusb2.c:214:
+	dev_dbg(&ir->usbdev->dev, "usb_send_callback (status=%d len=%d)\n", urb->status, len);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#296: FILE: drivers/input/ir/ir-mceusb2.c:220:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#300: FILE: drivers/input/ir/ir-mceusb2.c:224:
+	int len= urb->actual_length;
 	       ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usb_receive_callback', this function's name, in a string
#302: FILE: drivers/input/ir/ir-mceusb2.c:226:
+	dev_dbg(&ir->usbdev->dev, "usb_receive_callback (status=%d len=%d)\n", urb->status, len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: drivers/input/ir/ir-mceusb2.c:232:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/input/ir/ir-mceusb2.c:235:
+static int request_packet_async(struct irctl *ir, struct usb_endpoint_descriptor *ep,
+				 unsigned char *data, int size, int urb_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: drivers/input/ir/ir-mceusb2.c:260:
+			usb_fill_int_urb(async_urb, ir->usbdev,
+				usb_sndintpipe(ir->usbdev, ep->bEndpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#336: FILE: drivers/input/ir/ir-mceusb2.c:260:
+				usb_sndintpipe(ir->usbdev, ep->bEndpointAddress),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#337: FILE: drivers/input/ir/ir-mceusb2.c:261:
+				async_buf, size, (usb_complete_t) usb_send_callback,

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#338: FILE: drivers/input/ir/ir-mceusb2.c:262:
+				ir, ep->bInterval);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#341: FILE: drivers/input/ir/ir-mceusb2.c:265:
+			dev_dbg(&ir->usbdev->dev, "request_packet_async called (size=%#x, send)\n", size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_packet_async', this function's name, in a string
#341: FILE: drivers/input/ir/ir-mceusb2.c:265:
+			dev_dbg(&ir->usbdev->dev, "request_packet_async called (size=%#x, send)\n", size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: drivers/input/ir/ir-mceusb2.c:269:
+			usb_fill_int_urb(async_urb, ir->usbdev,
+				usb_rcvintpipe(ir->usbdev, ep->bEndpointAddress),

CHECK:SPACING: No space is necessary after a cast
#346: FILE: drivers/input/ir/ir-mceusb2.c:270:
+				async_buf, size, (usb_complete_t) usb_receive_callback,

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#348: FILE: drivers/input/ir/ir-mceusb2.c:272:
+			dev_dbg(&ir->usbdev->dev, "request_packet_async called (size=%#x, receive)\n", size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_packet_async', this function's name, in a string
#348: FILE: drivers/input/ir/ir-mceusb2.c:272:
+			dev_dbg(&ir->usbdev->dev, "request_packet_async called (size=%#x, receive)\n", size);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#356: FILE: drivers/input/ir/ir-mceusb2.c:280:
+		dev_dbg(&ir->usbdev->dev, "request_packet_async called (size=%#x, standard)\n", size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_packet_async', this function's name, in a string
#356: FILE: drivers/input/ir/ir-mceusb2.c:280:
+		dev_dbg(&ir->usbdev->dev, "request_packet_async called (size=%#x, standard)\n", size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_packet_async', this function's name, in a string
#365: FILE: drivers/input/ir/ir-mceusb2.c:289:
+		dev_dbg(&ir->usbdev->dev, "request_packet_async (res=%d)\n", res);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#412: FILE: drivers/input/ir/ir-mceusb2.c:336:
+						if (ir->last.bit == bit)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: braces {} should be used on all arms of this statement
#412: FILE: drivers/input/ir/ir-mceusb2.c:336:
+						if (ir->last.bit == bit)
[...]
+						else {
[...]

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#414: FILE: drivers/input/ir/ir-mceusb2.c:338:
+						else {

CHECK:BRACES: Unbalanced braces around else statement
#414: FILE: drivers/input/ir/ir-mceusb2.c:338:
+						else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#447: FILE: drivers/input/ir/ir-mceusb2.c:371:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#457: FILE: drivers/input/ir/ir-mceusb2.c:381:
+	if (ir->carrier != carrier) {
+

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#472: FILE: drivers/input/ir/ir-mceusb2.c:396:
+				dev_dbg(&ir->usbdev->dev, "SET_CARRIER requesting %d Hz\n", carrier);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#475: FILE: drivers/input/ir/ir-mceusb2.c:399:
+				/* Transmit the new carrier to the mce
+				   device */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#475: FILE: drivers/input/ir/ir-mceusb2.c:399:
+				   device */

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#513: FILE: drivers/input/ir/ir-mceusb2.c:437:
+			if ((cmdcount < MCE_CMDBUF_SIZE) && (cmdcount - MCE_TX_HEADER_LENGTH) % MCE_CODE_LENGTH == 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmdcount < MCE_CMDBUF_SIZE'
#513: FILE: drivers/input/ir/ir-mceusb2.c:437:
+			if ((cmdcount < MCE_CMDBUF_SIZE) && (cmdcount - MCE_TX_HEADER_LENGTH) % MCE_CODE_LENGTH == 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/input/ir/ir-mceusb2.c:467:
+static int usb_remote_probe(struct usb_interface *intf,
+				const struct usb_device_id *id)

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#565: FILE: drivers/input/ir/ir-mceusb2.c:489:
+	for (i = 0; i < idesc->desc.bNumEndpoints; ++i) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ep_in == NULL'
#568: FILE: drivers/input/ir/ir-mceusb2.c:492:
+		if ((ep_in == NULL)
+				&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_IN)
+				&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)
+					|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_in"
#568: FILE: drivers/input/ir/ir-mceusb2.c:492:
+		if ((ep_in == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#569: FILE: drivers/input/ir/ir-mceusb2.c:493:
+		if ((ep_in == NULL)
+				&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_IN)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#570: FILE: drivers/input/ir/ir-mceusb2.c:494:
+				&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#570: FILE: drivers/input/ir/ir-mceusb2.c:494:
+				&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_IN)
+				&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#570: FILE: drivers/input/ir/ir-mceusb2.c:494:
+				&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#571: FILE: drivers/input/ir/ir-mceusb2.c:495:
+					|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#571: FILE: drivers/input/ir/ir-mceusb2.c:495:
+				&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)
+					|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#572: FILE: drivers/input/ir/ir-mceusb2.c:496:
+					|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ep_out == NULL'
#586: FILE: drivers/input/ir/ir-mceusb2.c:510:
+		if ((ep_out == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_OUT)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)
+				|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_out"
#586: FILE: drivers/input/ir/ir-mceusb2.c:510:
+		if ((ep_out == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#587: FILE: drivers/input/ir/ir-mceusb2.c:511:
+		if ((ep_out == NULL)
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_OUT)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#588: FILE: drivers/input/ir/ir-mceusb2.c:512:
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#588: FILE: drivers/input/ir/ir-mceusb2.c:512:
+			&& ((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_OUT)
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#589: FILE: drivers/input/ir/ir-mceusb2.c:513:
+				|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#589: FILE: drivers/input/ir/ir-mceusb2.c:513:
+			&& (((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_BULK)
+				|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#590: FILE: drivers/input/ir/ir-mceusb2.c:514:
+				|| ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == USB_ENDPOINT_XFER_INT))) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep_in"
#605: FILE: drivers/input/ir/ir-mceusb2.c:529:
+	if (ep_in == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ir)...) over kzalloc(sizeof(struct irctl)...)
#614: FILE: drivers/input/ir/ir-mceusb2.c:538:
+	ir = kzalloc(sizeof(struct irctl), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: drivers/input/ir/ir-mceusb2.c:566:
+	usb_fill_int_urb(ir->urb_in, dev, pipe, ir->buf_in,
+		maxp, (usb_complete_t) usb_remote_recv, ir, ep_in->bInterval);

CHECK:SPACING: No space is necessary after a cast
#642: FILE: drivers/input/ir/ir-mceusb2.c:566:
+		maxp, (usb_complete_t) usb_remote_recv, ir, ep_in->bInterval);

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#675: FILE: drivers/input/ir/ir-mceusb2.c:599:
+		 * they start with 0x9f - but the async callback doesnt handle
 		                                                 ^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <iManufacturer>
#698: FILE: drivers/input/ir/ir-mceusb2.c:622:
+	if (dev->descriptor.iManufacturer)

CHECK:CAMELCASE: Avoid CamelCase: <iProduct>
#702: FILE: drivers/input/ir/ir-mceusb2.c:626:
+	if (dev->descriptor.iProduct)

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#707: FILE: drivers/input/ir/ir-mceusb2.c:631:
+	ir->input->id.vendor = le16_to_cpu(dev->descriptor.idVendor);

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#708: FILE: drivers/input/ir/ir-mceusb2.c:632:
+	ir->input->id.product = le16_to_cpu(dev->descriptor.idProduct);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#751: FILE: drivers/input/ir/ir-mceusb2.c:675:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#774: FILE: drivers/input/ir/ir-mceusb2.c:698:
+	struct irctl *ir = usb_get_intfdata(intf);
+	dev_dbg(&ir->usbdev->dev, "suspend\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#782: FILE: drivers/input/ir/ir-mceusb2.c:706:
+	struct irctl *ir = usb_get_intfdata(intf);
+	dev_dbg(&ir->usbdev->dev, "resume\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#803: FILE: drivers/input/ir/ir-mceusb2.c:727:
+		printk(DRIVER_NAME ": usb register failed, result = %d\n", ret);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207901.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 28 warnings, 40 checks, 760 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207901.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
