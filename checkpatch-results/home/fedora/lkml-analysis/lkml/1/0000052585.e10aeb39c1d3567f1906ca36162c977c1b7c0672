WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: security/apparmor/lsm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#94: FILE: security/apparmor/lsm.c:53:
+	struct aa_task_context *cxt = aa_dup_task_context(old->security, gfp);
+	if (!cxt)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: security/apparmor/lsm.c:65:
+	struct aa_task_context *cxt = cred->security;
+	cred->security = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: security/apparmor/lsm.c:145:
+			struct path_cond cond = { 0, S_IFREG };
+			name -= 5;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#325: FILE: security/apparmor/lsm.c:284:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#362: FILE: security/apparmor/lsm.c:321:
+
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fprofile != profile'
#391: FILE: security/apparmor/lsm.c:350:
+	if (profile && ((fprofile != profile) || (mask & ~fcxt->allowed)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fprofile != profile'
#409: FILE: security/apparmor/lsm.c:368:
+	if (profile && ((fprofile != profile) || (mask & ~fcxt->allowed)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: security/apparmor/lsm.c:459:
+	struct aa_task_context *cxt = cred->security;
+	ns = cxt->sys.profile->ns;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#794: FILE: security/apparmor/lsm.c:753:
+		  &aa_g_profile_mode, S_IRUSR | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#798: FILE: security/apparmor/lsm.c:757:
+module_param_named(debug, aa_g_debug, aabool, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#803: FILE: security/apparmor/lsm.c:762:
+		  &aa_g_audit, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#810: FILE: security/apparmor/lsm.c:769:
+		   S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#818: FILE: security/apparmor/lsm.c:777:
+		   S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#823: FILE: security/apparmor/lsm.c:782:
+		   S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#827: FILE: security/apparmor/lsm.c:786:
+module_param_named(path_max, aa_g_path_max, aauint, S_IRUSR | S_IWUSR);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#843: FILE: security/apparmor/lsm.c:802:
+	int error = strict_strtoul(str, 0, &enabled);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#844: FILE: security/apparmor/lsm.c:803:
+	int error = strict_strtoul(str, 0, &enabled);
+	if (!error)

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#849: FILE: security/apparmor/lsm.c:808:
+__setup("apparmor=", apparmor_enabled_setup);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#914: FILE: security/apparmor/lsm.c:873:
+	if (strict_strtoul(val, 0, &l) || l != 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#936: FILE: security/apparmor/lsm.c:895:
+	int i;
+	if (__aa_task_is_confined(current))

WARNING:LINE_SPACING: Missing a blank line after declarations
#969: FILE: security/apparmor/lsm.c:928:
+	int i;
+	if (__aa_task_is_confined(current))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1054: FILE: security/apparmor/lsm.c:1013:
+
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052585.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 6 checks, 1029 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052585.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
