ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: arch/alpha/include/asm/spinlock.h:103:
+static inline int __raw_read_trylock(arch_rwlock_t * lock)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: arch/alpha/include/asm/spinlock.h:125:
+static inline int __raw_write_trylock(arch_rwlock_t * lock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: arch/alpha/include/asm/spinlock.h:147:
+static inline void __raw_read_unlock(arch_rwlock_t * lock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: arch/alpha/include/asm/spinlock.h:163:
+static inline void __raw_write_unlock(arch_rwlock_t * lock)

WARNING:INLINE: plain inline is preferred over __inline__
#610: FILE: arch/parisc/include/asm/spinlock.h:72:
+static  __inline__ void __raw_read_lock(arch_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#619: FILE: arch/parisc/include/asm/spinlock.h:84:
+static  __inline__ void __raw_read_unlock(arch_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#628: FILE: arch/parisc/include/asm/spinlock.h:96:
+static __inline__ int __raw_read_trylock(arch_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#637: FILE: arch/parisc/include/asm/spinlock.h:122:
+static __inline__ void __raw_write_lock(arch_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#646: FILE: arch/parisc/include/asm/spinlock.h:144:
+static __inline__ void __raw_write_unlock(arch_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#655: FILE: arch/parisc/include/asm/spinlock.h:152:
+static __inline__ int __raw_write_trylock(arch_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#664: FILE: arch/parisc/include/asm/spinlock.h:176:
+static __inline__ int __raw_read_can_lock(arch_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#673: FILE: arch/parisc/include/asm/spinlock.h:185:
+static __inline__ int __raw_write_can_lock(arch_rwlock_t *rw)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#701: FILE: arch/powerpc/include/asm/spinlock.h:100:
+extern void __rw_yield(arch_rwlock_t *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: arch/s390/include/asm/spinlock.h:124:
+extern void _raw_read_lock_wait(arch_rwlock_t *lp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#814: FILE: arch/s390/include/asm/spinlock.h:125:
+extern void _raw_read_lock_wait_flags(arch_rwlock_t *lp, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#815: FILE: arch/s390/include/asm/spinlock.h:126:
+extern int _raw_read_trylock_retry(arch_rwlock_t *lp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#816: FILE: arch/s390/include/asm/spinlock.h:127:
+extern void _raw_write_lock_wait(arch_rwlock_t *lp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#817: FILE: arch/s390/include/asm/spinlock.h:128:
+extern void _raw_write_lock_wait_flags(arch_rwlock_t *lp, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#818: FILE: arch/s390/include/asm/spinlock.h:129:
+extern int _raw_write_trylock_retry(arch_rwlock_t *lp);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1107: FILE: arch/sparc/include/asm/spinlock_64.h:95:
+static void inline arch_read_lock(arch_rwlock_t *lock)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1116: FILE: arch/sparc/include/asm/spinlock_64.h:118:
+static int inline arch_read_trylock(arch_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1125: FILE: arch/sparc/include/asm/spinlock_64.h:139:
+static void inline arch_read_unlock(arch_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1134: FILE: arch/sparc/include/asm/spinlock_64.h:155:
+static void inline arch_write_lock(arch_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1143: FILE: arch/sparc/include/asm/spinlock_64.h:180:
+static void inline arch_write_unlock(arch_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1152: FILE: arch/sparc/include/asm/spinlock_64.h:189:
+static int inline arch_write_trylock(arch_rwlock_t *lock)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1265: FILE: include/linux/rwlock.h:17:
+extern int __lockfunc generic__raw_read_trylock(arch_rwlock_t *lock);

CHECK:SPACING: No space is necessary after a cast
#1345: FILE: lib/spinlock_debug.c:44:
+	lock->raw_lock = (arch_rwlock_t) __ARCH_RW_LOCK_UNLOCKED;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038709.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 8 warnings, 9 checks, 1041 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038709.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
