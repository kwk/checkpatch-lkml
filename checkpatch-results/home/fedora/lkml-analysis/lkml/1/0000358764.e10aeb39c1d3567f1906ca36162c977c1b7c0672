CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: drivers/pci/hotplug/acpiphp_core.c:347:
+	retval = pci_hp_register(slot->hotplug_slot,
+					acpiphp_slot->bridge->pci_bus,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: drivers/pci/hotplug/ibmphp_ebda.c:1004:
+		pci_hp_register(tmp_slot->hotplug_slot,
+			pci_find_bus(0, tmp_slot->bus), tmp_slot->device);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: drivers/pci/hotplug/pci_hotplug_core.c:135:
+static ssize_t power_write_file(struct pci_slot *pci_slot, const char *buf,
 		size_t count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: drivers/pci/hotplug/pci_hotplug_core.c:194:
+static ssize_t attention_write_file(struct pci_slot *slot, const char *buf,
 		size_t count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: drivers/pci/hotplug/pci_hotplug_core.c:318:
+static ssize_t test_write_file(struct pci_slot *pci_slot, const char *buf,
 		size_t count)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#559: FILE: drivers/pci/hotplug/pci_hotplug_core.c:371:
+static int has_latch_file (struct pci_slot *pci_slot)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#570: FILE: drivers/pci/hotplug/pci_hotplug_core.c:381:
+static int has_adapter_file (struct pci_slot *pci_slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#590: FILE: drivers/pci/hotplug/pci_hotplug_core.c:391:
+static int has_max_bus_speed_file (struct pci_slot *pci_slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#601: FILE: drivers/pci/hotplug/pci_hotplug_core.c:401:
+static int has_cur_bus_speed_file (struct pci_slot *pci_slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#612: FILE: drivers/pci/hotplug/pci_hotplug_core.c:411:
+static int has_test_file (struct pci_slot *pci_slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#657: FILE: drivers/pci/hotplug/pci_hotplug_core.c:503:
+static void fs_remove_slot (struct pci_slot *slot)

WARNING:LINE_SPACING: Missing a blank line after declarations
#678: FILE: drivers/pci/hotplug/pci_hotplug_core.c:543:
+	struct hotplug_slot *hotplug = slot->hotplug;
+	hotplug->release(hotplug);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#751: FILE: drivers/pci/hotplug/pci_hotplug_core.c:609:
+	dbg ("Removed slot %s from the list\n", hotplug->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#765: FILE: drivers/pci/hotplug/pci_hotplug_core.c:627:
+	struct pci_slot *slot;
+	if (!hotplug || !info)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#770: FILE: drivers/pci/hotplug/pci_hotplug_core.c:631:
+	memcpy (hotplug->info, info, sizeof (struct hotplug_slot_info));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#770: FILE: drivers/pci/hotplug/pci_hotplug_core.c:631:
+	memcpy (hotplug->info, info, sizeof (struct hotplug_slot_info));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: drivers/pci/hotplug/pciehp_core.c:256:
+			retval = sysfs_create_file(&hotplug_slot->pci_slot->kobj,
 				&hotplug_slot_attr_lock.attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: drivers/pci/hotplug/pciehp_core.c:289:
+			sysfs_remove_file(&slot->hotplug_slot->pci_slot->kobj,
 				&hotplug_slot_attr_lock.attr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#892: FILE: drivers/pci/hotplug/rpadlpar_sysfs.c:26:
+extern struct kset pci_slots_subsys;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#950: FILE: drivers/pci/hotplug/shpchp_core.c:154:
+		retval = pci_hp_register(slot->hotplug_slot,
+				ctrl->pci_dev->subordinate, slot->device);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_slot *' should also have an identifier name
#989: FILE: drivers/pci/pci.h:102:
+	ssize_t (*show)(struct pci_slot *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#989: FILE: drivers/pci/pci.h:102:
+	ssize_t (*show)(struct pci_slot *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_slot *' should also have an identifier name
#990: FILE: drivers/pci/pci.h:103:
+	ssize_t (*store)(struct pci_slot *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#990: FILE: drivers/pci/pci.h:103:
+	ssize_t (*store)(struct pci_slot *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#990: FILE: drivers/pci/pci.h:103:
+	ssize_t (*store)(struct pci_slot *, const char *, size_t);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#992: FILE: drivers/pci/pci.h:105:
+};
+#define to_pci_slot_attr(s) container_of(s, struct pci_slot_attribute, attr)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#995: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1000: FILE: drivers/pci/slot.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1001: FILE: drivers/pci/slot.c:2:
+ * drivers/pci/slot.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'wil' may be misspelled - perhaps 'will'?
#1002: FILE: drivers/pci/slot.c:3:
+ * Copyright (c) 2006 Matthew Wilcox <matthew@wil.cx>
                                               ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: drivers/pci/slot.c:14:
+static ssize_t pci_slot_attr_show(struct kobject *kobj,
+					struct attribute *attr, char *buf)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1015: FILE: drivers/pci/slot.c:16:
+        struct pci_slot *slot = to_pci_slot(kobj);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: drivers/pci/slot.c:16:
+        struct pci_slot *slot = to_pci_slot(kobj);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1016: FILE: drivers/pci/slot.c:17:
+        struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: drivers/pci/slot.c:17:
+        struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1017: FILE: drivers/pci/slot.c:18:
+        return attribute->show ? attribute->show(slot, buf) : -EIO;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1017: FILE: drivers/pci/slot.c:18:
+        struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);
+        return attribute->show ? attribute->show(slot, buf) : -EIO;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: drivers/pci/slot.c:18:
+        return attribute->show ? attribute->show(slot, buf) : -EIO;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: drivers/pci/slot.c:22:
+static ssize_t pci_slot_attr_store(struct kobject *kobj,
+			struct attribute *attr, const char *buf, size_t len)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1023: FILE: drivers/pci/slot.c:24:
+        struct pci_slot *slot = to_pci_slot(kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: drivers/pci/slot.c:24:
+        struct pci_slot *slot = to_pci_slot(kobj);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1024: FILE: drivers/pci/slot.c:25:
+        struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: drivers/pci/slot.c:25:
+        struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: drivers/pci/slot.c:26:
+        return attribute->store ? attribute->store(slot, buf, len) : -EIO;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1025: FILE: drivers/pci/slot.c:26:
+        struct pci_slot_attribute *attribute = to_pci_slot_attr(attr);
+        return attribute->store ? attribute->store(slot, buf, len) : -EIO;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1025: FILE: drivers/pci/slot.c:26:
+        return attribute->store ? attribute->store(slot, buf, len) : -EIO;$

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1028: FILE: drivers/pci/slot.c:29:
+static struct sysfs_ops pci_slot_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1036: FILE: drivers/pci/slot.c:37:
+	struct pci_slot *slot = to_pci_slot(kobj);
+	slot->release(slot);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1054: FILE: drivers/pci/slot.c:55:
+	.attr = { .name = "address", .mode = S_IFREG | S_IRUGO },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: drivers/pci/slot.c:74:
+struct pci_slot *pci_create_slot(struct pci_bus *parent, int slot_nr,
+			const char *name, void (*release)(struct pci_slot *))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1081: FILE: drivers/pci/slot.c:82:
+	 * may be described twice (eg, by ACPI and PCIe) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1102: FILE: drivers/pci/slot.c:103:
+		printk(KERN_ERR "Unable to register kobject %s", name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1150: FILE: drivers/pci/slot.c:151:
+		printk(KERN_ERR "PCI: Slot initialisation failure (%d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: drivers/pci/slot.c:152:
+		printk(KERN_ERR "PCI: Slot initialisation failure (%d)",
+			result);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1156: FILE: drivers/pci/slot.c:157:
+EXPORT_SYMBOL_GPL(pci_slots_subsys);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_slot *' should also have an identifier name
#1172: FILE: include/linux/pci.h:139:
+	void (*release)(struct pci_slot *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: include/linux/pci.h:486:
+struct pci_slot *pci_create_slot(struct pci_bus *parent, int slot_nr,
+		const char *name, void (*release)(struct pci_slot *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1244: FILE: include/linux/pci_hotplug.h:168:
+extern int pci_hp_register(struct hotplug_slot *, struct pci_bus *, int nr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hotplug_slot *' should also have an identifier name
#1244: FILE: include/linux/pci_hotplug.h:168:
+extern int pci_hp_register(struct hotplug_slot *, struct pci_bus *, int nr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#1244: FILE: include/linux/pci_hotplug.h:168:
+extern int pci_hp_register(struct hotplug_slot *, struct pci_bus *, int nr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1245: FILE: include/linux/pci_hotplug.h:169:
+extern int pci_hp_deregister(struct hotplug_slot *slot);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000358764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 39 warnings, 16 checks, 1030 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000358764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
