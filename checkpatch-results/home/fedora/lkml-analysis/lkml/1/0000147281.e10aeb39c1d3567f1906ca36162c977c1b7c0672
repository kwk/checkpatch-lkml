CHECK:CAMELCASE: Avoid CamelCase: <Sh>
#120: FILE: fs/reiserfs/fix_node.c:784:
+	    *Sh = PATH_H_PBUFFER(tb->tb_path, h);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#146: FILE: fs/reiserfs/fix_node.c:804:
+	   by all of the levels of the tree below h. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#241: FILE: fs/reiserfs/fix_node.c:928:
+	if ((left = sb_find_get_block(sb, left_neighbor_blocknr))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#270: FILE: fs/reiserfs/fix_node.c:972:
+	/* Starting from F[h] go upwards in the tree, and look for the common
+	   ancestor of F[h], and its neighbor l/r, that should be obtained. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#270: FILE: fs/reiserfs/fix_node.c:972:
+	   ancestor of F[h], and its neighbor l/r, that should be obtained. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#288: FILE: fs/reiserfs/fix_node.c:985:
+		if ((position =

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#362: FILE: fs/reiserfs/fix_node.c:1075:
+ * Calculate numbers of left and right delimiting keys position: lkey[path_offset], rkey[path_offset].

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#423: FILE: fs/reiserfs/fix_node.c:1112:
+		/* Calculate current parent of L[path_offset], which is the left neighbor of the current node.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#424: FILE: fs/reiserfs/fix_node.c:1113:
+		/* Calculate current parent of L[path_offset], which is the left neighbor of the current node.
+		   Calculate current common parent of L[path_offset] and the current node. Note that

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#425: FILE: fs/reiserfs/fix_node.c:1114:
+		   CFL[path_offset] not equal FL[path_offset] and CFL[path_offset] not equal F[path_offset].

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#426: FILE: fs/reiserfs/fix_node.c:1115:
+		   Calculate lkey[path_offset]. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#427: FILE: fs/reiserfs/fix_node.c:1116:
+		if ((ret = get_far_parent(tb, h + 1, &curf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: fs/reiserfs/fix_node.c:1117:
+		if ((ret = get_far_parent(tb, h + 1, &curf,
 						  &curcf,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#460: FILE: fs/reiserfs/fix_node.c:1136:
+/* Calculate current parent of R[h], which is the right neighbor of F[h].
+   Calculate current common parent of R[h] and current node. Note that CFR[h]

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#461: FILE: fs/reiserfs/fix_node.c:1137:
+   not equal FR[path_offset] and CFR[h] not equal F[h]. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#462: FILE: fs/reiserfs/fix_node.c:1138:
+		if ((ret =

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#527: FILE: fs/reiserfs/fix_node.c:1279:
+	if ((ret = get_parents(tb, h)) != CARRY_ON)	/* get parents of S[h] neighbors. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#547: FILE: fs/reiserfs/fix_node.c:1592:
+	if ((ret = get_parents(tb, h)) != CARRY_ON)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#567: FILE: fs/reiserfs/fix_node.c:1772:
+	if ((ret = get_parents(tb, h)) != CARRY_ON)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#612: FILE: fs/reiserfs/fix_node.c:1919:
+	if ((position =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tb->FL[h]'
#676: FILE: fs/reiserfs/fix_node.c:1966:
+		     tb->FL[h]) ? tb->lkey[h] : B_NR_ITEMS(tb->
+								       FL[h]);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <tbS0>
#790: FILE: fs/reiserfs/fix_node.c:2367:
+			       tbS0, tbS0, op_mode);

WARNING:SPLIT_STRING: quoted string split across lines
#801: FILE: fs/reiserfs/fix_node.c:2375:
 				       "item number %d (in S0 - %d) in case "
+				       "of insert", item_num,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#887: FILE: fs/reiserfs/fix_node.c:2442:
+			if (tb->blknum[h] > 1) {
[...]
 				    (DC_SIZE +
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#960: FILE: fs/reiserfs/stree.c:181:
+/* For those not familiar with binary search: lbound is the leftmost item that it
+ could be, rbound the rightmost item that it could be.  We examine the item

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1039: FILE: fs/reiserfs/stree.c:266:
+		if ((position =

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1088: FILE: fs/reiserfs/stree.c:309:
+		if ((position =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1231: FILE: fs/reiserfs/stree.c:703:
+		retval = bin_search(key, B_N_PITEM_HEAD(bh, 0),
 				      B_NR_ITEMS(bh),

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1239: FILE: fs/reiserfs/stree.c:708:
+		if (node_level == stop_level) {
+			return retval;
 		}

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#1309: FILE: fs/reiserfs/stree.c:953:
+				      int *cut_size, unsigned long long new_file_length	/* MAX_KEY_OFFSET in case of delete. */

WARNING:TABSTOP: Statements should start on a tabstop
#1343: FILE: fs/reiserfs/stree.c:992:
+	    if ( new_file_length == max_reiserfs_offset (inode) ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1343: FILE: fs/reiserfs/stree.c:992:
+	    if ( new_file_length == max_reiserfs_offset (inode) ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#1343: FILE: fs/reiserfs/stree.c:992:
+	    if ( new_file_length == max_reiserfs_offset (inode) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1343: FILE: fs/reiserfs/stree.c:992:
+	    if ( new_file_length == max_reiserfs_offset (inode) ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1356: FILE: fs/reiserfs/stree.c:1006:
+		while (le_ih_k_offset (&s_ih) + (pos - 1) * blk_size > new_file_length) {
 		    __le32 *unfm;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1356: FILE: fs/reiserfs/stree.c:1006:
+		while (le_ih_k_offset (&s_ih) + (pos - 1) * blk_size > new_file_length) {

WARNING:TYPO_SPELLING: 'emty' may be misspelled - perhaps 'empty'?
#1385: FILE: fs/reiserfs/stree.c:1074:
+		/* return EMPTY_DIR_SIZE; We delete emty directoris only.
 		                                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1387: FILE: fs/reiserfs/stree.c:1076:
+		 * empty size.  ick. FIXME, is this right? */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1524: FILE: fs/reiserfs/stree.c:1437:
+	BUG_ON(new_file_size != inode->i_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1540: FILE: fs/reiserfs/stree.c:1455:
+				  new_file_size, mode); */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1809: FILE: fs/reiserfs/stree.c:1799:
+	if (file_size == 0 || file_size < new_file_size) {
 		goto update_and_out;
 	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1938: FILE: fs/reiserfs/tail_conversion.c:73:
+		retval = reiserfs_paste_into_item(th, path, &end_key, inode,
 						    (char *)&unfm_ptr,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1943: FILE: fs/reiserfs/tail_conversion.c:76:
+	if (retval) {
+		return retval;
 	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1963: FILE: fs/reiserfs/tail_conversion.c:117:
+		retval = reiserfs_delete_item(th, path, &end_key, inode,
 						up_to_date_bh);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 25 warnings, 7 checks, 1878 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
