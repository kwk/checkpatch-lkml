WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#29: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: fs/logfs/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#35: FILE: fs/logfs/file.c:2:
+ * fs/logfs/file.c	- prepare_write, commit_write and friends

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#46: FILE: fs/logfs/file.c:13:
+static int logfs_write_begin(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#46: FILE: fs/logfs/file.c:13:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#46: FILE: fs/logfs/file.c:13:
+		loff_t pos, unsigned len, unsigned flags,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len == PAGE_CACHE_SIZE'
#58: FILE: fs/logfs/file.c:25:
+	if ((len == PAGE_CACHE_SIZE) || PageUptodate(page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#61: FILE: fs/logfs/file.c:28:
+		unsigned start = pos & (PAGE_CACHE_SIZE - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#62: FILE: fs/logfs/file.c:29:
+		unsigned end = start + len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: fs/logfs/file.c:39:
+static int logfs_write_end(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned copied, struct page *page,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#72: FILE: fs/logfs/file.c:39:
+		loff_t pos, unsigned len, unsigned copied, struct page *page,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#72: FILE: fs/logfs/file.c:39:
+		loff_t pos, unsigned len, unsigned copied, struct page *page,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#77: FILE: fs/logfs/file.c:44:
+	unsigned start = pos & (PAGE_CACHE_SIZE - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#78: FILE: fs/logfs/file.c:45:
+	unsigned end = start + copied;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#81: FILE: fs/logfs/file.c:48:
+	BUG_ON(PAGE_CACHE_SIZE != inode->i_sb->s_blocksize);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#81: FILE: fs/logfs/file.c:48:
+	BUG_ON(PAGE_CACHE_SIZE != inode->i_sb->s_blocksize);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#82: FILE: fs/logfs/file.c:49:
+	BUG_ON(page->index > I3_BLOCKS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#131: FILE: fs/logfs/file.c:98:
+	BUG_ON(PagePrivate(page) || page->private);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#155: FILE: fs/logfs/file.c:122:
+	unsigned offset;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'logfs_writepage', this function's name, in a string
#159: FILE: fs/logfs/file.c:126:
+	log_file("logfs_writepage(%lx, %lx, %p)\n", inode->i_ino, page->index,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: fs/logfs/file.c:127:
+	log_file("logfs_writepage(%lx, %lx, %p)\n", inode->i_ino, page->index,
+			page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: fs/logfs/file.c:145:
+	offset = i_size & (PAGE_CACHE_SIZE-1);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'invokation' may be misspelled - perhaps 'invocation'?
#186: FILE: fs/logfs/file.c:153:
+	 * writepage invokation because it may be mmapped.  "A file is mapped
 	             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#198: FILE: fs/logfs/file.c:165:
+	BUG_ON(PagePrivate(page) || page->private);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: fs/logfs/file.c:173:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045270.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 6 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045270.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
