WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#206: FILE: arch/s390/mm/hugetlbpage.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: arch/s390/mm/hugetlbpage.c:11:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: arch/s390/mm/hugetlbpage.c:13:
+void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,
+				   pte_t *pteptr, pte_t pteval)

CHECK:SPACING: No space is necessary after a cast
#220: FILE: arch/s390/mm/hugetlbpage.c:15:
+	pmd_t *pmdp = (pmd_t *) pteptr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#225: FILE: arch/s390/mm/hugetlbpage.c:20:
+		pteptr = (pte_t *) pte_page(pteval)[1].index;

CHECK:SPACING: No space is necessary after a cast
#253: FILE: arch/s390/mm/hugetlbpage.c:48:
+	ptep = (pte_t *) pte_alloc_one(&init_mm, address);

CHECK:SPACING: No space is necessary after a cast
#262: FILE: arch/s390/mm/hugetlbpage.c:57:
+	page[1].index = (unsigned long) ptep;

CHECK:SPACING: No space is necessary after a cast
#273: FILE: arch/s390/mm/hugetlbpage.c:68:
+	ptep = (pte_t *) page[1].index;

CHECK:SPACING: No space is necessary after a cast
#290: FILE: arch/s390/mm/hugetlbpage.c:85:
+	return (pte_t *) pmdp;

CHECK:SPACING: No space is necessary after a cast
#305: FILE: arch/s390/mm/hugetlbpage.c:100:
+	return (pte_t *) pmdp;

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#424: FILE: arch/s390/mm/vmem.c:149:
+#ifdef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address >= HPAGE_SIZE'
#425: FILE: arch/s390/mm/vmem.c:150:
+		if (MACHINE_HAS_HPAGE && !(address & ~HPAGE_MASK) &&
+		    (address + HPAGE_SIZE <= start + size) &&
+		    (address >= HPAGE_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#504: FILE: arch/s390/mm/vmem.c:411:
+		if (start >= ro_end || end <= ro_start)
[...]
+		else if (start >= ro_start && end <= ro_end)
[...]
+		else if (start >= ro_start) {
[...]
+		} else if (end < ro_end) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#546: FILE: include/asm-s390/page.h:23:
+#define HPAGE_SIZE	(1UL << HPAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SETCLEAR_HUGE_PTE' is wrong - use Kconfig variables or standard guards instead
#550: FILE: include/asm-s390/page.h:27:
+#define ARCH_HAS_SETCLEAR_HUGE_PTE

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_HUGE_PTE_TYPE' is wrong - use Kconfig variables or standard guards instead
#551: FILE: include/asm-s390/page.h:28:
+#define ARCH_HAS_HUGE_PTE_TYPE

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_PREPARE_HUGEPAGE' is wrong - use Kconfig variables or standard guards instead
#552: FILE: include/asm-s390/page.h:29:
+#define ARCH_HAS_PREPARE_HUGEPAGE

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_HUGEPAGE_CLEAR_FLUSH' is wrong - use Kconfig variables or standard guards instead
#553: FILE: include/asm-s390/page.h:30:
+#define ARCH_HAS_HUGEPAGE_CLEAR_FLUSH

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#567: FILE: include/asm-s390/page.h:38:
+		asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#574: FILE: include/asm-s390/page.h:45:
+		asm volatile(

CHECK:SPACING: No space is necessary after a cast
#661: FILE: include/asm-s390/pgtable.h:951:
+		ptep = (pte_t *) (pte_val(pte) & _SEGMENT_ENTRY_ORIGIN);

CHECK:SPACING: No space is necessary after a cast
#677: FILE: include/asm-s390/pgtable.h:967:
+	pmd_clear((pmd_t *) ptep);

CHECK:SPACING: No space is necessary after a cast
#686: FILE: include/asm-s390/pgtable.h:976:
+	register unsigned long reg4 asm("4") = ((unsigned long) pmdp) + 5;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#688: FILE: include/asm-s390/pgtable.h:978:
+	asm volatile(

CHECK:SPACING: No space is necessary after a cast
#697: FILE: include/asm-s390/pgtable.h:987:
+	unsigned long sto = (unsigned long) pmdp -

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#701: FILE: include/asm-s390/pgtable.h:991:
+		asm volatile(

CHECK:SPACING: No space is necessary after a cast
#714: FILE: include/asm-s390/pgtable.h:1004:
+	pmd_t *pmdp = (pmd_t *) ptep;

WARNING:RETURN_VOID: void function return statements are not generally useful
#731: FILE: include/asm-s390/pgtable.h:1021:
+	return;
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#733: FILE: include/asm-s390/pgtable.h:1023:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__addr' - possible side-effects?
#733: FILE: include/asm-s390/pgtable.h:1023:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#733: FILE: include/asm-s390/pgtable.h:1023:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__entry' - possible side-effects?
#733: FILE: include/asm-s390/pgtable.h:1023:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#743: FILE: include/asm-s390/pgtable.h:1033:
+#define huge_ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = huge_ptep_get(__ptep);				\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1 ||		\
+		    (__mm) != current->active_mm)			\
+			huge_ptep_invalidate(__mm, __addr, __ptep);	\
+		set_huge_pte_at(__mm, __addr, __ptep,			\
+				huge_pte_wrprotect(__pte));		\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__addr' - possible side-effects?
#743: FILE: include/asm-s390/pgtable.h:1033:
+#define huge_ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = huge_ptep_get(__ptep);				\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1 ||		\
+		    (__mm) != current->active_mm)			\
+			huge_ptep_invalidate(__mm, __addr, __ptep);	\
+		set_huge_pte_at(__mm, __addr, __ptep,			\
+				huge_pte_wrprotect(__pte));		\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#743: FILE: include/asm-s390/pgtable.h:1033:
+#define huge_ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = huge_ptep_get(__ptep);				\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1 ||		\
+		    (__mm) != current->active_mm)			\
+			huge_ptep_invalidate(__mm, __addr, __ptep);	\
+		set_huge_pte_at(__mm, __addr, __ptep,			\
+				huge_pte_wrprotect(__pte));		\
+	}								\
+})

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#803: FILE: include/asm-s390/system.h:429:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#806: FILE: include/asm-s390/system.h:432:
+		EX_TABLE(0b,0b));
 		           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308227.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 2 warnings, 30 checks, 678 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308227.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
