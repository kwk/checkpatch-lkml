WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: net/9p/srv/conn.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: net/9p/srv/conn.c:2:
+ * net/9p/srv/conn.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#62: FILE: net/9p/srv/conn.c:20:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#111: FILE: net/9p/srv/conn.c:69:
+		printk(KERN_WARNING "9psrv: creating workqueue failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: net/9p/srv/conn.c:83:
+struct p9srv_conn *p9srv_conn_create(struct p9srv *srv,
+	struct p9_trans *trans)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*conn)...) over kmalloc(sizeof(struct p9srv_conn)...)
#130: FILE: net/9p/srv/conn.c:88:
+	conn = kmalloc(sizeof(struct p9srv_conn), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <Rpending>
#170: FILE: net/9p/srv/conn.c:128:
+		set_bit(Rpending, &conn->status);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Wpending>
#173: FILE: net/9p/srv/conn.c:131:
+		set_bit(Wpending, &conn->status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: net/9p/srv/conn.c:148:
+	if (test_bit(Rpending, &conn->status) &&
+				!test_and_set_bit(Rworksched, &conn->status))

CHECK:CAMELCASE: Avoid CamelCase: <Rworksched>
#190: FILE: net/9p/srv/conn.c:148:
+				!test_and_set_bit(Rworksched, &conn->status))

CHECK:CAMELCASE: Avoid CamelCase: <Destroy>
#205: FILE: net/9p/srv/conn.c:163:
+	if (!test_and_set_bit(Destroy, &conn->status))

CHECK:CAMELCASE: Avoid CamelCase: <Wworksched>
#208: FILE: net/9p/srv/conn.c:166:
+	if (test_bit(Wworksched, &conn->status) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: net/9p/srv/conn.c:167:
+	if (test_bit(Wworksched, &conn->status) ||
+		test_bit(Rworksched, &conn->status))

CHECK:CAMELCASE: Avoid CamelCase: <Reset>
#235: FILE: net/9p/srv/conn.c:193:
+	if (test_and_set_bit(Reset, &conn->status))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: net/9p/srv/conn.c:209:
+		if (req->conn == conn && req != vreq &&
+			!test_and_set_bit(Flush, &req->status)) {

CHECK:CAMELCASE: Avoid CamelCase: <Flush>
#251: FILE: net/9p/srv/conn.c:209:
+			!test_and_set_bit(Flush, &req->status)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#252: FILE: net/9p/srv/conn.c:210:
+			!test_and_set_bit(Flush, &req->status)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wreqs[i]'
#264: FILE: net/9p/srv/conn.c:222:
+			if ((*srv->flush)(wreqs[i]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: net/9p/srv/conn.c:240:
+	wait_event_interruptible(conn->reset_wqueue,
+		!atomic_read(&conn->reset_wcount));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#283: FILE: net/9p/srv/conn.c:241:
+	BUG_ON(!list_empty(&conn->oreq_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: net/9p/srv/conn.c:276:
+		list_for_each_entry_safe(req, rptr, &conn->oreq_list,
+								req_list) {

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#341: FILE: net/9p/srv/conn.c:299:
+	if (n&POLLOUT && !test_and_set_bit(Wworksched, &conn->status)) {
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: net/9p/srv/conn.c:334:
+	P9_DPRINTK(P9SRV_DEBUG_CONN, "conn %p connum %d procnum %d\n", c,
+		p9srv_num, p9srv_poll_task_num);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p9srv_poll_tasks[i].task"
#382: FILE: net/9p/srv/conn.c:340:
+			if (p9srv_poll_tasks[i].task == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#397: FILE: net/9p/srv/conn.c:355:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: net/9p/srv/conn.c:357:
+			P9_DPRINTK(P9_DEBUG_ERROR,
+					"warning: no free poll slots\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vpt->task"
#408: FILE: net/9p/srv/conn.c:366:
+		if (vpt->task != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vptlast"
#415: FILE: net/9p/srv/conn.c:373:
+	if (vptlast == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "c->poll_waddr[i]"
#440: FILE: net/9p/srv/conn.c:398:
+		if (c->poll_waddr[i] != NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#458: FILE: net/9p/srv/conn.c:416:
+ * ^Ito files wait queue$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#460: FILE: net/9p/srv/conn.c:418:
+static void p9srv_pollwait(struct file *filp, wait_queue_head_t *wait_address,
                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: net/9p/srv/conn.c:419:
+static void p9srv_pollwait(struct file *filp, wait_queue_head_t *wait_address,
+	      poll_table * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#461: FILE: net/9p/srv/conn.c:419:
+	      poll_table * p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c->poll_waddr[i]"
#468: FILE: net/9p/srv/conn.c:426:
+		if (c->poll_waddr[i] == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#521: FILE: net/9p/srv/conn.c:479:
+		if ((c->osize || !list_empty(&c->oreq_list))
+		    && !test_and_set_bit(Wworksched, &c->status)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: net/9p/srv/conn.c:481:
+			P9_DPRINTK(P9SRV_DEBUG_CONN,
+				"queue write work %p\n", c);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#531: FILE: net/9p/srv/conn.c:489:
+ * ^Ithe appropriate work to the work queue$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: net/9p/srv/conn.c:502:
+		list_for_each_entry_safe(c, ctmp, &vpt->conn_list,
+							vpt_conn_list) {

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#565: FILE: net/9p/srv/conn.c:523:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#576: FILE: net/9p/srv/conn.c:534:
+	rcall = NULL;
 	^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*conn->icall)...) over kmalloc(sizeof(struct p9_fcall)...)
#579: FILE: net/9p/srv/conn.c:537:
+		conn->icall = kmalloc(sizeof(struct p9_fcall) + conn->msize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: net/9p/srv/conn.c:538:
+		conn->icall = kmalloc(sizeof(struct p9_fcall) + conn->msize,
+			GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#586: FILE: net/9p/srv/conn.c:544:
+		conn->icall->sdata = (char *) conn->icall +

CHECK:SPACING: No space is necessary after a cast
#606: FILE: net/9p/srv/conn.c:564:
+		n = le32_to_cpu(*(__le32 *) conn->ibuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: net/9p/srv/conn.c:567:
+			P9_DPRINTK(P9_DEBUG_ERROR,
+				"requested packet size too big: %d\n", n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: net/9p/srv/conn.c:576:
+		err = p9_deserialize_fcall(conn->ibuf, n, conn->icall,
+			conn->dotu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: net/9p/srv/conn.c:585:
+			p9_printfcall(buf, sizeof(buf), conn->icall,
+				conn->dotu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#628: FILE: net/9p/srv/conn.c:586:
+			printk(KERN_NOTICE ">]> %s\n", buf);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#632: FILE: net/9p/srv/conn.c:590:
+		rcall = conn->icall;
 		^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*conn->icall)...) over kmalloc(sizeof(struct p9_fcall)...)
#635: FILE: net/9p/srv/conn.c:593:
+			conn->icall = kmalloc(sizeof(struct p9_fcall) +

CHECK:SPACING: No space is necessary after a cast
#642: FILE: net/9p/srv/conn.c:600:
+			conn->icall->sdata = (char *) conn->icall +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: net/9p/srv/conn.c:612:
+		P9_DPRINTK(P9SRV_DEBUG_CONN, "conn %p fcall id %d tag %d\n",
+			conn, rcall->id, rcall->tag);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#663: FILE: net/9p/srv/conn.c:621:
+		req->tcall = rcall;
 		             ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Worksched>
#668: FILE: net/9p/srv/conn.c:626:
+		if (!test_and_set_bit(Worksched, &conn->srv->status)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#679: FILE: net/9p/srv/conn.c:637:
+	if (n & POLLIN) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#682: FILE: net/9p/srv/conn.c:640:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: net/9p/srv/conn.c:675:
+		req = list_entry(conn->oreq_list.next, struct p9srv_req,
+			       req_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: net/9p/srv/conn.c:678:
+		P9_DPRINTK(P9SRV_DEBUG_CONN, "next req %p tag %d size %d\n",
+			req, req->tag, req->rcall->size);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#730: FILE: net/9p/srv/conn.c:688:
+			p9_printfcall(buf, sizeof(buf), req->rcall, conn->dotu);
 			                                     ^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#731: FILE: net/9p/srv/conn.c:689:
+			printk(KERN_NOTICE "<[< %s\n", buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: net/9p/srv/conn.c:695:
+	P9_DPRINTK(P9SRV_DEBUG_CONN, "conn %p pos %d size %d\n", conn,
+		conn->opos, conn->osize);

CHECK:BRACES: braces {} should be used on all arms of this statement
#747: FILE: net/9p/srv/conn.c:705:
+	if (err < 0)
[...]
+	else if (err == 0) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: net/9p/srv/conn.c:718:
+		req = list_first_entry(&conn->oreq_list, struct p9srv_req,
+			req_list);

CHECK:BRACES: braces {} should be used on all arms of this statement
#765: FILE: net/9p/srv/conn.c:723:
+		if (!list_empty(&conn->oreq_list)) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#771: FILE: net/9p/srv/conn.c:729:
+			if (n & POLLOUT) {
[...]
+			} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#773: FILE: net/9p/srv/conn.c:731:
+				P9_DPRINTK(P9SRV_DEBUG_CONN,
+					"schedule write work %p\n", conn);

CHECK:BRACES: Unbalanced braces around else statement
#775: FILE: net/9p/srv/conn.c:733:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#777: FILE: net/9p/srv/conn.c:735:
+		} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000374806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 52 checks, 743 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000374806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
