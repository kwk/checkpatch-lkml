WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/x86/math-emu/errors.c:46:
+  if (FPU_CS == __USER_CS) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#73: FILE: arch/x86/math-emu/errors.c:46:
+  if (FPU_CS == __USER_CS) {
+      while (1) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: arch/x86/math-emu/errors.c:47:
+      while (1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#74: FILE: arch/x86/math-emu/errors.c:47:
+      while (1) {
 	  FPU_get_user(byte1, (u_char __user *) address);

WARNING:TABSTOP: Statements should start on a tabstop
#77: FILE: arch/x86/math-emu/errors.c:49:
+	  if ((byte1 & 0xf8) == 0xd8)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#77: FILE: arch/x86/math-emu/errors.c:49:
+	  if ((byte1 & 0xf8) == 0xd8)
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#78: FILE: arch/x86/math-emu/errors.c:50:
+	    break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: arch/x86/math-emu/errors.c:62:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#93: FILE: arch/x86/math-emu/errors.c:62:
+  else {
       printk("cs selector = %04x\n", FPU_CS);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#93: FILE: arch/x86/math-emu/errors.c:62:
+  else {
       printk("cs selector = %04x\n", FPU_CS);
     }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#93: FILE: arch/x86/math-emu/errors.c:62:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/x86/math-emu/errors.c:80:
+  math_abort(FPU_info , SIGILL);$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#106: FILE: arch/x86/math-emu/errors.c:80:
+  math_abort(FPU_info , SIGILL);
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/x86/math-emu/errors.c:96:
+  if (FPU_CS == __USER_CS) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#124: FILE: arch/x86/math-emu/errors.c:96:
+  if (FPU_CS == __USER_CS) {
[...]
+      for (i = 0; i < MAX_PRINTED_BYTES; i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#124: FILE: arch/x86/math-emu/errors.c:96:
+  if (FPU_CS == __USER_CS) {
[...]
 	  if (FPU_modrm >= 0300)
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: arch/x86/math-emu/errors.c:98:
+      for (i = 0; i < MAX_PRINTED_BYTES; i++) {$

WARNING:TABSTOP: Statements should start on a tabstop
#132: FILE: arch/x86/math-emu/errors.c:100:
+	  if ((byte1 & 0xf8) == 0xd8) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#132: FILE: arch/x86/math-emu/errors.c:100:
+	  if ((byte1 & 0xf8) == 0xd8) {
 	      printk(" %02x", byte1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: arch/x86/math-emu/errors.c:107:
+      if (i == MAX_PRINTED_BYTES)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#140: FILE: arch/x86/math-emu/errors.c:107:
+      if (i == MAX_PRINTED_BYTES)
[...]
-      else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: arch/x86/math-emu/errors.c:109:
+      else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#144: FILE: arch/x86/math-emu/errors.c:109:
+      else {
 	  FPU_get_user(FPU_modrm, 1 + (u_char __user *) address);

CHECK:BRACES: Unbalanced braces around else statement
#144: FILE: arch/x86/math-emu/errors.c:109:
+      else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#148: FILE: arch/x86/math-emu/errors.c:112:
 	  if (FPU_modrm >= 0300)
+	    printk(" %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#150: FILE: arch/x86/math-emu/errors.c:113:
+	    printk(" %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: arch/x86/math-emu/errors.c:114:
+	    printk(" %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8,
+			FPU_modrm & 7);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#178: FILE: arch/x86/math-emu/errors.c:126:
+if (partial_status & SW_Backward)
+  printk("SW: backward compatibility\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: arch/x86/math-emu/errors.c:127:
+  printk("SW: backward compatibility\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/x86/math-emu/errors.c:127:
+  printk("SW: backward compatibility\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#180: FILE: arch/x86/math-emu/errors.c:128:
+if (partial_status & SW_C3)
+  printk("SW: condition bit 3\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: arch/x86/math-emu/errors.c:129:
+  printk("SW: condition bit 3\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#181: FILE: arch/x86/math-emu/errors.c:129:
+  printk("SW: condition bit 3\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#182: FILE: arch/x86/math-emu/errors.c:130:
+if (partial_status & SW_C2)
+  printk("SW: condition bit 2\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/x86/math-emu/errors.c:131:
+  printk("SW: condition bit 2\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#183: FILE: arch/x86/math-emu/errors.c:131:
+  printk("SW: condition bit 2\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#184: FILE: arch/x86/math-emu/errors.c:132:
+if (partial_status & SW_C1)
+  printk("SW: condition bit 1\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: arch/x86/math-emu/errors.c:133:
+  printk("SW: condition bit 1\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: arch/x86/math-emu/errors.c:133:
+  printk("SW: condition bit 1\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#186: FILE: arch/x86/math-emu/errors.c:134:
+if (partial_status & SW_C0)
+  printk("SW: condition bit 0\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: arch/x86/math-emu/errors.c:135:
+  printk("SW: condition bit 0\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#187: FILE: arch/x86/math-emu/errors.c:135:
+  printk("SW: condition bit 0\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#188: FILE: arch/x86/math-emu/errors.c:136:
+if (partial_status & SW_Summary)
+  printk("SW: exception summary\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: arch/x86/math-emu/errors.c:137:
+  printk("SW: exception summary\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: arch/x86/math-emu/errors.c:137:
+  printk("SW: exception summary\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#190: FILE: arch/x86/math-emu/errors.c:138:
+if (partial_status & SW_Stack_Fault)
+  printk("SW: stack fault\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: arch/x86/math-emu/errors.c:139:
+  printk("SW: stack fault\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#191: FILE: arch/x86/math-emu/errors.c:139:
+  printk("SW: stack fault\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#192: FILE: arch/x86/math-emu/errors.c:140:
+if (partial_status & SW_Precision)
+  printk("SW: loss of precision\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/x86/math-emu/errors.c:141:
+  printk("SW: loss of precision\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: arch/x86/math-emu/errors.c:141:
+  printk("SW: loss of precision\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#194: FILE: arch/x86/math-emu/errors.c:142:
+if (partial_status & SW_Underflow)
+  printk("SW: underflow\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: arch/x86/math-emu/errors.c:143:
+  printk("SW: underflow\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: arch/x86/math-emu/errors.c:143:
+  printk("SW: underflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#196: FILE: arch/x86/math-emu/errors.c:144:
+if (partial_status & SW_Overflow)
+  printk("SW: overflow\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: arch/x86/math-emu/errors.c:145:
+  printk("SW: overflow\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#197: FILE: arch/x86/math-emu/errors.c:145:
+  printk("SW: overflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#198: FILE: arch/x86/math-emu/errors.c:146:
+if (partial_status & SW_Zero_Div)
+  printk("SW: divide by zero\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: arch/x86/math-emu/errors.c:147:
+  printk("SW: divide by zero\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#199: FILE: arch/x86/math-emu/errors.c:147:
+  printk("SW: divide by zero\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#200: FILE: arch/x86/math-emu/errors.c:148:
+if (partial_status & SW_Denorm_Op)
+  printk("SW: denormalized operand\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: arch/x86/math-emu/errors.c:149:
+  printk("SW: denormalized operand\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#201: FILE: arch/x86/math-emu/errors.c:149:
+  printk("SW: denormalized operand\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#202: FILE: arch/x86/math-emu/errors.c:150:
+if (partial_status & SW_Invalid)
+  printk("SW: invalid operation\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: arch/x86/math-emu/errors.c:151:
+  printk("SW: invalid operation\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#203: FILE: arch/x86/math-emu/errors.c:151:
+  printk("SW: invalid operation\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/x86/math-emu/errors.c:174:
+  for (i = 0; i < 8; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#222: FILE: arch/x86/math-emu/errors.c:174:
+  for (i = 0; i < 8; i++) {
       FPU_REG *r = &st(i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: arch/x86/math-emu/errors.c:305:
+  if (n & EX_INTERNAL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#388: FILE: arch/x86/math-emu/errors.c:305:
+  if (n & EX_INTERNAL) {
       int_type = n - EX_INTERNAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: arch/x86/math-emu/errors.c:311:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#396: FILE: arch/x86/math-emu/errors.c:311:
+  else {
[...]
       n &= (SW_Exc_Mask);

CHECK:BRACES: Unbalanced braces around else statement
#396: FILE: arch/x86/math-emu/errors.c:311:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: arch/x86/math-emu/errors.c:317:
+      if (partial_status & ~control_word & CW_Exceptions)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: arch/x86/math-emu/errors.c:319:
+      if (n & (SW_Stack_Fault | EX_Precision)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#408: FILE: arch/x86/math-emu/errors.c:319:
+      if (n & (SW_Stack_Fault | EX_Precision)) {
+	  if (!(n & SW_C1))

WARNING:TABSTOP: Statements should start on a tabstop
#409: FILE: arch/x86/math-emu/errors.c:320:
+	  if (!(n & SW_C1))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#409: FILE: arch/x86/math-emu/errors.c:320:
+	  if (!(n & SW_C1))
[...]
 	    partial_status &= ~SW_C1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: arch/x86/math-emu/errors.c:328:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#419: FILE: arch/x86/math-emu/errors.c:328:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {
[...]
       printk(FPU_VERSION" "__DATE__" (C) W. Metzenthen.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n == EX_INTERNAL'
#419: FILE: arch/x86/math-emu/errors.c:328:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: arch/x86/math-emu/errors.c:335:
+      for (i = 0; exception_names[i].type; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#430: FILE: arch/x86/math-emu/errors.c:336:
+	if ((exception_names[i].type & n) == exception_names[i].type)
 	  break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: arch/x86/math-emu/errors.c:339:
+      if (exception_names[i].type) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#436: FILE: arch/x86/math-emu/errors.c:339:
+      if (exception_names[i].type) {
[...]
 	  printk("FP Exception: %s!\n", exception_names[i].name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#436: FILE: arch/x86/math-emu/errors.c:339:
+      if (exception_names[i].type) {
[...]
       else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: arch/x86/math-emu/errors.c:347:
+      if (n == EX_INTERNAL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#447: FILE: arch/x86/math-emu/errors.c:347:
+      if (n == EX_INTERNAL) {
 	  printk("FPU emulator: Internal error type 0x%04x\n", int_type);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: arch/x86/math-emu/errors.c:365:
+  math_abort(FPU_info , SIGFPE);$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#456: FILE: arch/x86/math-emu/errors.c:365:
+  math_abort(FPU_info , SIGFPE);
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: arch/x86/math-emu/errors.c:383:
+  if (!signalling) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 14)
#470: FILE: arch/x86/math-emu/errors.c:383:
+  if (!signalling) {
+	      if (!isNaN) {

WARNING:TABSTOP: Statements should start on a tabstop
#471: FILE: arch/x86/math-emu/errors.c:384:
+	      if (!isNaN) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 10)
#471: FILE: arch/x86/math-emu/errors.c:384:
+	      if (!isNaN) {
[...]
+	  if (control_word & CW_Invalid) {

CHECK:CAMELCASE: Avoid CamelCase: <isNaN>
#471: FILE: arch/x86/math-emu/errors.c:384:
+	      if (!isNaN) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TABSTOP: Statements should start on a tabstop
#473: FILE: arch/x86/math-emu/errors.c:386:
+	  if (control_word & CW_Invalid) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#473: FILE: arch/x86/math-emu/errors.c:386:
+	  if (control_word & CW_Invalid) {
[...]
 	      reg_copy(&CONST_QNaN, a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: arch/x86/math-emu/errors.c:396:
+  if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#483: FILE: arch/x86/math-emu/errors.c:396:
+  if (control_word & CW_Invalid) {
[...]
+      if (!(a->sigh & 0x80000000)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: arch/x86/math-emu/errors.c:398:
+      if (!(a->sigh & 0x80000000)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#487: FILE: arch/x86/math-emu/errors.c:398:
+      if (!(a->sigh & 0x80000000)) {
[...]
 	  reg_copy(&CONST_QNaN, a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: arch/x86/math-emu/errors.c:424:
+  if (taga == TAG_Special)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#497: FILE: arch/x86/math-emu/errors.c:424:
+  if (taga == TAG_Special)
     taga = FPU_Special(a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: arch/x86/math-emu/errors.c:426:
+  if (tagb == TAG_Special)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#500: FILE: arch/x86/math-emu/errors.c:426:
+  if (tagb == TAG_Special)
     tagb = FPU_Special(b);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: arch/x86/math-emu/errors.c:434:
+  if (unsupported) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#512: FILE: arch/x86/math-emu/errors.c:434:
+  if (unsupported) {
+      if (control_word & CW_Invalid) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: arch/x86/math-emu/errors.c:435:
+      if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#513: FILE: arch/x86/math-emu/errors.c:435:
+      if (control_word & CW_Invalid) {
[...]
 	  FPU_copy_to_regi(&CONST_QNaN, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: arch/x86/math-emu/errors.c:443:
+  if (taga == TW_NaN) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#523: FILE: arch/x86/math-emu/errors.c:443:
+  if (taga == TW_NaN) {
       x = a;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: arch/x86/math-emu/errors.c:445:
+      if (tagb == TW_NaN) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#527: FILE: arch/x86/math-emu/errors.c:445:
+      if (tagb == TW_NaN) {
 	  signalling = !(a->sigh & b->sigh & 0x40000000);

WARNING:TABSTOP: Statements should start on a tabstop
#530: FILE: arch/x86/math-emu/errors.c:447:
+	  if (significand(b) > significand(a))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#530: FILE: arch/x86/math-emu/errors.c:447:
+	  if (significand(b) > significand(a))
 	    x = b;

CHECK:BRACES: braces {} should be used on all arms of this statement
#530: FILE: arch/x86/math-emu/errors.c:447:
+	  if (significand(b) > significand(a))
[...]
-	  else if ( significand(b) == significand(a) )
[...]

WARNING:TABSTOP: Statements should start on a tabstop
#534: FILE: arch/x86/math-emu/errors.c:449:
+	  else if (significand(b) == significand(a)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#534: FILE: arch/x86/math-emu/errors.c:449:
+	  else if (significand(b) == significand(a)) {
[...]
 	      x = defaultNaN;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: arch/x86/math-emu/errors.c:455:
+      else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#542: FILE: arch/x86/math-emu/errors.c:455:
+      else {
[...]
 	  signalling = !(a->sigh & 0x40000000);

CHECK:BRACES: Unbalanced braces around else statement
#542: FILE: arch/x86/math-emu/errors.c:455:
+      else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: arch/x86/math-emu/errors.c:469:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#552: FILE: arch/x86/math-emu/errors.c:469:
+  else {
       signalling = 0;

CHECK:BRACES: Unbalanced braces around else statement
#552: FILE: arch/x86/math-emu/errors.c:469:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: arch/x86/math-emu/errors.c:476:
+  if ((!signalling) || (control_word & CW_Invalid)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#562: FILE: arch/x86/math-emu/errors.c:476:
+  if ((!signalling) || (control_word & CW_Invalid)) {
+      if (!x)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!signalling'
#562: FILE: arch/x86/math-emu/errors.c:476:
+  if ((!signalling) || (control_word & CW_Invalid)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: arch/x86/math-emu/errors.c:477:
+      if (!x)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: arch/x86/math-emu/errors.c:480:
+      if (!(x->sigh & 0x80000000))  /* pseudo-NaN ? */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: arch/x86/math-emu/errors.c:485:
+      if (!signalling)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: arch/x86/math-emu/errors.c:505:
+  if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#585: FILE: arch/x86/math-emu/errors.c:505:
+  if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: arch/x86/math-emu/errors.c:521:
+  if (control_word & CW_ZeroDiv) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#600: FILE: arch/x86/math-emu/errors.c:521:
+  if (control_word & CW_ZeroDiv) {
[...]
       FPU_copy_to_regi(&CONST_INF, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: arch/x86/math-emu/errors.c:538:
+  if (control_word & CW_Precision) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#617: FILE: arch/x86/math-emu/errors.c:538:
+  if (control_word & CW_Precision) {
       partial_status &= ~(SW_C1 & flags);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: arch/x86/math-emu/errors.c:543:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#624: FILE: arch/x86/math-emu/errors.c:543:
+  else {
       EXCEPTION(flags);

CHECK:BRACES: Unbalanced braces around else statement
#624: FILE: arch/x86/math-emu/errors.c:543:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: arch/x86/math-emu/errors.c:553:
+  if (control_word & CW_Precision)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#633: FILE: arch/x86/math-emu/errors.c:553:
+  if (control_word & CW_Precision)
     partial_status |= (SW_Precision | SW_C1);   /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: arch/x86/math-emu/errors.c:563:
+  if (control_word & CW_Precision) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#643: FILE: arch/x86/math-emu/errors.c:563:
+  if (control_word & CW_Precision) {
[...]
       partial_status &= ~SW_C1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: arch/x86/math-emu/errors.c:575:
+  if (control_word & CW_Denormal) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#657: FILE: arch/x86/math-emu/errors.c:575:
+  if (control_word & CW_Denormal) {
[...]
       partial_status |= SW_Denorm_Op;

WARNING:TABSTOP: Statements should start on a tabstop
#664: FILE: arch/x86/math-emu/errors.c:580:
+	  else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 6)
#664: FILE: arch/x86/math-emu/errors.c:580:
+	  else {
       EXCEPTION(EX_Denormal);

CHECK:BRACES: Unbalanced braces around else statement
#664: FILE: arch/x86/math-emu/errors.c:580:
+	  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: arch/x86/math-emu/errors.c:591:
+  if (control_word & CW_Overflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#674: FILE: arch/x86/math-emu/errors.c:591:
+  if (control_word & CW_Overflow) {
[...]
       reg_copy(&CONST_INF, dest);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: arch/x86/math-emu/errors.c:597:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#682: FILE: arch/x86/math-emu/errors.c:597:
+  else {
[...]
       addexponent(dest, (-3 * (1 << 13)));

CHECK:BRACES: Unbalanced braces around else statement
#682: FILE: arch/x86/math-emu/errors.c:597:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: arch/x86/math-emu/errors.c:603:
+  if (control_word & CW_Overflow) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: arch/x86/math-emu/errors.c:621:
+  if (control_word & CW_Underflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#700: FILE: arch/x86/math-emu/errors.c:621:
+  if (control_word & CW_Underflow) {
[...]
+      if (exponent16(dest) <= EXP_UNDER - 63) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: arch/x86/math-emu/errors.c:623:
+      if (exponent16(dest) <= EXP_UNDER - 63) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#704: FILE: arch/x86/math-emu/errors.c:623:
+      if (exponent16(dest) <= EXP_UNDER - 63) {
 	  reg_copy(&CONST_Z, dest);

CHECK:BRACES: braces {} should be used on all arms of this statement
#704: FILE: arch/x86/math-emu/errors.c:623:
+      if (exponent16(dest) <= EXP_UNDER - 63) {
[...]
       else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: arch/x86/math-emu/errors.c:631:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#716: FILE: arch/x86/math-emu/errors.c:631:
+  else {
[...]
       addexponent(dest, (3 * (1 << 13)) + EXTENDED_Ebias);

CHECK:BRACES: Unbalanced braces around else statement
#716: FILE: arch/x86/math-emu/errors.c:631:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: arch/x86/math-emu/errors.c:637:
+  if (control_word & CW_Underflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#724: FILE: arch/x86/math-emu/errors.c:637:
+  if (control_word & CW_Underflow) {
[...]
       EXCEPTION(EX_Precision);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: arch/x86/math-emu/errors.c:641:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: arch/x86/math-emu/errors.c:651:
+ if (control_word & CW_Invalid) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: arch/x86/math-emu/errors.c:655:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: arch/x86/math-emu/errors.c:667:
+ if (control_word & CW_Invalid) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: arch/x86/math-emu/errors.c:670:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: arch/x86/math-emu/errors.c:682:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#772: FILE: arch/x86/math-emu/errors.c:682:
+ if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: arch/x86/math-emu/errors.c:685:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: arch/x86/math-emu/errors.c:697:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#786: FILE: arch/x86/math-emu/errors.c:697:
+ if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: arch/x86/math-emu/errors.c:701:
+ }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330942.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 155 warnings, 18 checks, 703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330942.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
