WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Rewrite the vmap allocator to use rbtrees and lazy tlb flushing, and provide a

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#171: FILE: mm/vmalloc.c:27:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: mm/vmalloc.c:115:
+static int vmap_pmd_range(pud_t *pud, unsigned long addr,
+		unsigned long end, pgprot_t prot, struct page **pages, int *nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: mm/vmalloc.c:132:
+static int vmap_pud_range(pgd_t *pgd, unsigned long addr,
+		unsigned long end, pgprot_t prot, struct page **pages, int *nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/vmalloc.c:149:
+static int vmap_page_range(unsigned long addr, unsigned long end,
+				pgprot_t prot, struct page **pages)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: mm/vmalloc.c:205:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: mm/vmalloc.c:226:
+        struct rb_node *n = vmap_area_root.rb_node;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: mm/vmalloc.c:226:
+        struct rb_node *n = vmap_area_root.rb_node;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: mm/vmalloc.c:228:
+        while (n) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: mm/vmalloc.c:228:
+        while (n) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: mm/vmalloc.c:231:
+                va = rb_entry(n, struct vmap_area, rb_node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: mm/vmalloc.c:231:
+                va = rb_entry(n, struct vmap_area, rb_node);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: mm/vmalloc.c:232:
+                if (addr < va->va_start)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: mm/vmalloc.c:232:
+                if (addr < va->va_start)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: mm/vmalloc.c:233:
+                        n = n->rb_left;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: mm/vmalloc.c:233:
+                        n = n->rb_left;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: mm/vmalloc.c:234:
+                else if (addr > va->va_start)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: mm/vmalloc.c:234:
+                else if (addr > va->va_start)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: mm/vmalloc.c:235:
+                        n = n->rb_right;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: mm/vmalloc.c:235:
+                        n = n->rb_right;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: mm/vmalloc.c:236:
+                else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: mm/vmalloc.c:236:
+                else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: mm/vmalloc.c:237:
+                        return va;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: mm/vmalloc.c:237:
+                        return va;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: mm/vmalloc.c:238:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: mm/vmalloc.c:238:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: mm/vmalloc.c:240:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: mm/vmalloc.c:240:
+        return NULL;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: mm/vmalloc.c:259:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#421: FILE: mm/vmalloc.c:267:
+	if (tmp) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#423: FILE: mm/vmalloc.c:269:
+		struct vmap_area *prev;
+		prev = rb_entry(tmp, struct vmap_area, rb_node);

CHECK:BRACES: Unbalanced braces around else statement
#425: FILE: mm/vmalloc.c:271:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: mm/vmalloc.c:278:
+static struct vmap_area *alloc_vmap_area(unsigned long size, unsigned long align,
+				unsigned long vstart, unsigned long vend,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#440: FILE: mm/vmalloc.c:286:
+	BUG_ON(size & ~PAGE_MASK);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*va)...) over kmalloc_node(sizeof(struct vmap_area)...)
#444: FILE: mm/vmalloc.c:290:
+	va = kmalloc_node(sizeof(struct vmap_area),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: mm/vmalloc.c:291:
+	va = kmalloc_node(sizeof(struct vmap_area),
+			gfp_mask & GFP_RECLAIM_MASK, node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#458: FILE: mm/vmalloc.c:304:
+			struct vmap_area *tmp;
+			tmp = rb_entry(n, struct vmap_area, rb_node);

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#498: FILE: mm/vmalloc.c:344:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#499: FILE: mm/vmalloc.c:345:
+			printk(KERN_WARNING "vmap allocation failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#500: FILE: mm/vmalloc.c:346:
+			printk(KERN_WARNING "vmap allocation failed: "
+				 "use vmalloc=<size> to increase size.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: mm/vmalloc.c:361:
+	BUG_ON(RB_EMPTY_NODE(&va->rb_node));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#533: FILE: mm/vmalloc.c:379:
+#define LAZY_MAX (16*1024*1024 / PAGE_SIZE)
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#533: FILE: mm/vmalloc.c:379:
+#define LAZY_MAX (16*1024*1024 / PAGE_SIZE)
                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#554: FILE: mm/vmalloc.c:400:
+	BUG_ON(nr > atomic_read(&vmap_lazy_nr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: mm/vmalloc.c:445:
+	BUG_ON(!va);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#603: FILE: mm/vmalloc.c:449:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#606: FILE: mm/vmalloc.c:452:
+#define ULONG_BITS		(8*sizeof(unsigned long))
                   		  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#612: FILE: mm/vmalloc.c:458:
+#define VMAP_BBMAP_BITS		min(1024, (128*1024*1024 / PAGE_SIZE / NR_CPUS / 16))
                        		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#612: FILE: mm/vmalloc.c:458:
+#define VMAP_BBMAP_BITS		min(1024, (128*1024*1024 / PAGE_SIZE / NR_CPUS / 16))
                        		                   ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#618: FILE: mm/vmalloc.c:464:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#625: FILE: mm/vmalloc.c:471:
+	spinlock_t lock;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*vb)...) over kmalloc_node(sizeof(struct vmap_block)...)
#662: FILE: mm/vmalloc.c:508:
+	vb = kmalloc_node(sizeof(struct vmap_block),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: mm/vmalloc.c:509:
+	vb = kmalloc_node(sizeof(struct vmap_block),
+			gfp_mask & GFP_RECLAIM_MASK, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: mm/vmalloc.c:514:
+	va = alloc_vmap_area(VMAP_BLOCK_SIZE, VMAP_BLOCK_SIZE,
+					VMALLOC_START, VMALLOC_END,

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#670: FILE: mm/vmalloc.c:516:
+	if (unlikely(IS_ERR(va))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: mm/vmalloc.c:539:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#727: FILE: mm/vmalloc.c:573:
+	BUG_ON(tmp != vb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: mm/vmalloc.c:581:
+static void *vb_alloc(unsigned long size,
+			gfp_t gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#742: FILE: mm/vmalloc.c:588:
+	BUG_ON(size & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#743: FILE: mm/vmalloc.c:589:
+	BUG_ON(size > PAGE_SIZE*ULONG_BITS);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#743: FILE: mm/vmalloc.c:589:
+	BUG_ON(size > PAGE_SIZE*ULONG_BITS);
 	                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: mm/vmalloc.c:603:
+			BUG_ON(addr_to_vb_idx(addr) != addr_to_vb_idx(vb->va->va_start));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: mm/vmalloc.c:634:
+	BUG_ON(size & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#789: FILE: mm/vmalloc.c:635:
+	BUG_ON(size > PAGE_SIZE*ULONG_BITS);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#789: FILE: mm/vmalloc.c:635:
+	BUG_ON(size > PAGE_SIZE*ULONG_BITS);
 	                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#796: FILE: mm/vmalloc.c:642:
+	BUG_ON(!vb);

CHECK:BRACES: braces {} should be used on all arms of this statement
#807: FILE: mm/vmalloc.c:653:
+	if (vb->dirty == VMAP_BBMAP_BITS) {
[...]
+	} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#808: FILE: mm/vmalloc.c:654:
+		BUG_ON(vb->free || !list_empty(&vb->free_list));

CHECK:BRACES: Unbalanced braces around else statement
#811: FILE: mm/vmalloc.c:657:
+	} else

ERROR:SPACING: space required before the open brace '{'
#831: FILE: mm/vmalloc.c:677:
+			  i = find_next_bit(vb->dirty_map, VMAP_BBMAP_BITS, i)){

WARNING:LINE_SPACING: Missing a blank line after declarations
#834: FILE: mm/vmalloc.c:680:
+				int j;
+				j = find_next_zero_bit(vb->dirty_map,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: mm/vmalloc.c:681:
+				j = find_next_zero_bit(vb->dirty_map,
+					VMAP_BBMAP_BITS, i);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#861: FILE: mm/vmalloc.c:707:
+	BUG_ON(!addr || addr < VMALLOC_START || addr > VMALLOC_END || (addr & (PAGE_SIZE-1)));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#861: FILE: mm/vmalloc.c:707:
+	BUG_ON(!addr || addr < VMALLOC_START || addr > VMALLOC_END || (addr & (PAGE_SIZE-1)));
 	                                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#884: FILE: mm/vmalloc.c:730:
+		struct vmap_area *va;
+		va = alloc_vmap_area(size, PAGE_SIZE, VMALLOC_START, VMALLOC_END, node, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#916: FILE: mm/vmalloc.c:762:
+	unsigned long end = addr + size;
+	vunmap_page_range(addr, end);

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: mm/vmalloc.c:770:
+	int err;
+	err = vmap_page_range(addr, addr + area->size- PAGE_SIZE, prot, *pages);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxW)
#924: FILE: mm/vmalloc.c:770:
+	err = vmap_page_range(addr, addr + area->size- PAGE_SIZE, prot, *pages);
 	                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: mm/vmalloc.c:783:
+static struct vm_struct *__get_vm_area_node(unsigned long size,
+		unsigned long flags, unsigned long start, unsigned long end,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1078: FILE: mm/vmalloc.c:897:
+		struct vm_struct *vm = va->private;
+		free_unmap_vmap_area(va);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1099: FILE: mm/vmalloc.c:933:
+			struct page *page;
+			page = list_entry(area->page_list.next, struct page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: mm/vmalloc.c:934:
+			page = list_entry(area->page_list.next, struct page,
+									lru);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1110: FILE: mm/vmalloc.c:939:
+		BUG_ON(i != area->nr_pages);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1182: FILE: mm/vmalloc.c:1062:
+		struct page *page;
+		page = list_entry(area->page_list.next, struct page, lru);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1343: FILE: mm/vmalloc.c:1349:
 
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1347: FILE: mm/vmalloc.c:1353:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1363: FILE: mm/vmalloc.c:1372:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1375: FILE: mm/vmalloc.c:1384:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1382: FILE: mm/vmalloc.c:1391:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1424: FILE: include/linux/vmalloc.h:40:
+extern void vm_unmap_ram(const void *mem, unsigned int count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1425: FILE: include/linux/vmalloc.h:41:
+extern void *vm_map_ram(struct page **pages, unsigned int count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1426: FILE: include/linux/vmalloc.h:42:
+extern void *vm_map_ram(struct page **pages, unsigned int count,
+				int node, pgprot_t prot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1427: FILE: include/linux/vmalloc.h:43:
+extern void vm_unmap_aliases(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1572: FILE: init/main.c:93:
+extern void vmalloc_init(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000271135.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 47 warnings, 35 checks, 1400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000271135.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
