WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
o This patch introduces the similar concept at group level. Idle on the group

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#102: FILE: block/elevator-fq.c:2221:
 }
+SHOW_FUNCTION(elv_group_idle_show, efqd->elv_group_idle, 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#111: FILE: block/elevator-fq.c:2245:
 }
+STORE_FUNCTION(elv_group_idle_store, &efqd->elv_group_idle, 0, UINT_MAX, 1);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#137: FILE: block/elevator-fq.c:2650:
+	if (elv_ioq_wait_request(ioq) || elv_iog_wait_request(iog)
+	    || elv_iog_wait_busy(iog))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: block/elevator-fq.c:2940:
+static void elv_iog_arm_slice_timer(struct request_queue *q,
+				struct io_group *iog, int wait_for_busy)

WARNING:TYPO_SPELLING: 'onece' may be misspelled - perhaps 'once'?
#280: FILE: block/elevator-fq.c:3028:
+		 * after the queue expiry, then make sure we have onece
 		                                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'delte' may be misspelled - perhaps 'delete'?
#294: FILE: block/elevator-fq.c:3042:
+		 * In similar situations cfq lets delte the queue even if
 		                                  ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#301: FILE: block/elevator-fq.c:3049:
+		if ((elv_iog_nr_active(iog) <= 1) && !ioq->nr_queued
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#302: FILE: block/elevator-fq.c:3050:
+		if ((elv_iog_nr_active(iog) <= 1) && !ioq->nr_queued
+		   && !elv_iog_wait_busy_done(iog) && efqd->elv_group_idle

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#303: FILE: block/elevator-fq.c:3051:
+		   && !elv_iog_wait_busy_done(iog) && efqd->elv_group_idle
+		   && elv_iog_idle_window(iog)) {

CHECK:BRACES: Unbalanced braces around else statement
#306: FILE: block/elevator-fq.c:3054:
+		} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#318: FILE: block/elevator-fq.c:3090:
+	if (elv_iog_idle_window(iog) && (elv_iog_nr_active(iog) <= 1)
+	    && elv_ioq_nr_dispatched(ioq)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#375: FILE: block/elevator-fq.c:3222:
+		} else if (!ioq->nr_queued && !elv_close_cooperator(q, ioq)
+			   && sync && !rq_noidle(rq))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#385: FILE: block/elevator-fq.c:3231:
+		    !ioq->dispatched && !timer_pending(&efqd->idle_slice_timer)
+		    && (elv_iog_nr_active(iog) <= 1)) {

WARNING:TYPO_SPELLING: 'loosing' may be misspelled - perhaps 'losing'?
#389: FILE: block/elevator-fq.c:3235:
+			 * backlogged again. This is to avoid a group loosing
 			                                              ^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: block/elevator-fq.h:405:
+static inline int elv_iog_##name(struct io_group *iog)         ^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: block/elevator-fq.h:522:
+extern ssize_t elv_group_idle_show(struct elevator_queue *q, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: block/elevator-fq.h:523:
+extern ssize_t elv_group_idle_store(struct elevator_queue *q, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: block/elevator-fq.h:524:
+extern ssize_t elv_group_idle_store(struct elevator_queue *q, const char *name,
+					size_t count);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092818.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 14 checks, 391 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092818.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
