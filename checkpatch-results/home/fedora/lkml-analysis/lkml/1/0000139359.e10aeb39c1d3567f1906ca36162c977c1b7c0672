WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#34: 
store the data intead of dynamically allocating and pointing
               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#102: FILE: include/linux/percpu.h:146:
+#define __fill_percpu(pptr, size, align) do {	\
+	*(pptr) = __alloc_percpu(size, align);	\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#104: FILE: include/linux/percpu.h:148:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: include/linux/percpu.h:155:
+	void **pptr = ptr;
+	if (size <= sizeof(void *))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#116: FILE: include/linux/percpu.h:159:
+}
+#define per_cpu_ptr(ptr, cpu) ((__typeof__(ptr))__per_cpu_ptr(&ptr, cpu, sizeof(*ptr)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#116: FILE: include/linux/percpu.h:159:
+#define per_cpu_ptr(ptr, cpu) ((__typeof__(ptr))__per_cpu_ptr(&ptr, cpu, sizeof(*ptr)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#116: FILE: include/linux/percpu.h:159:
+#define per_cpu_ptr(ptr, cpu) ((__typeof__(ptr))__per_cpu_ptr(&ptr, cpu, sizeof(*ptr)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#122: FILE: include/linux/percpu.h:164:
+	void **pptr = (void **)ptr;
+	if (sizeof(ptr) >= size) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#140: FILE: include/linux/percpu.h:177:
+#define free_percpu(ptr) do {			\
+	if (sizeof(*ptr) > sizeof(ptr))		\
+		kfree(ptr);			\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#140: FILE: include/linux/percpu.h:177:
+#define free_percpu(ptr) do {			\
+	if (sizeof(*ptr) > sizeof(ptr))		\
+		kfree(ptr);			\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: include/linux/percpu.h:180:
+} while(0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139359.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 4 warnings, 5 checks, 344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139359.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
