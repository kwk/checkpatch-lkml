WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#59: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: arch/x86/pci/numaq_32.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: arch/x86/pci/numaq_32.c:19:
+#define QUADLOCAL2BUS(quad,local) (quad_local_to_mp_bus_id[quad][local])
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#272: FILE: arch/x86/pci/numaq_32.c:25:
+#define XQUAD_PORT_ADDR(port, quad) (xquad_portio + (XQUAD_PORTIO_QUAD*quad) + port)
                                                                       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'port' may be better as '(port)' to avoid precedence issues
#272: FILE: arch/x86/pci/numaq_32.c:25:
+#define XQUAD_PORT_ADDR(port, quad) (xquad_portio + (XQUAD_PORTIO_QUAD*quad) + port)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'quad' may be better as '(quad)' to avoid precedence issues
#272: FILE: arch/x86/pci/numaq_32.c:25:
+#define XQUAD_PORT_ADDR(port, quad) (xquad_portio + (XQUAD_PORTIO_QUAD*quad) + port)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'devfn' may be better as '(devfn)' to avoid precedence issues
#274: FILE: arch/x86/pci/numaq_32.c:27:
+#define PCI_CONF1_MQ_ADDRESS(bus, devfn, reg) \
+	(0x80000000 | (BUS2LOCAL(bus) << 16) | (devfn << 8) | (reg & ~3))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#274: FILE: arch/x86/pci/numaq_32.c:27:
+#define PCI_CONF1_MQ_ADDRESS(bus, devfn, reg) \
+	(0x80000000 | (BUS2LOCAL(bus) << 16) | (devfn << 8) | (reg & ~3))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: arch/x86/pci/numaq_32.c:30:
+static void write_cf8(unsigned bus, unsigned devfn, unsigned reg)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: arch/x86/pci/numaq_32.c:30:
+static void write_cf8(unsigned bus, unsigned devfn, unsigned reg)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: arch/x86/pci/numaq_32.c:30:
+static void write_cf8(unsigned bus, unsigned devfn, unsigned reg)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: arch/x86/pci/numaq_32.c:32:
+	unsigned val = PCI_CONF1_MQ_ADDRESS(bus, devfn, reg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#280: FILE: arch/x86/pci/numaq_32.c:33:
+	unsigned val = PCI_CONF1_MQ_ADDRESS(bus, devfn, reg);
+	if (xquad_portio)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus >= MAX_MP_BUSSES'
#292: FILE: arch/x86/pci/numaq_32.c:45:
+	if (!value || (bus >= MAX_MP_BUSSES) || (devfn > 255) || (reg > 255))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#292: FILE: arch/x86/pci/numaq_32.c:45:
+	if (!value || (bus >= MAX_MP_BUSSES) || (devfn > 255) || (reg > 255))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 255'
#292: FILE: arch/x86/pci/numaq_32.c:45:
+	if (!value || (bus >= MAX_MP_BUSSES) || (devfn > 255) || (reg > 255))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: arch/x86/pci/numaq_32.c:84:
+^Iif ((bus >= MAX_MP_BUSSES) || (devfn > 255) || (reg > 255)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus >= MAX_MP_BUSSES'
#331: FILE: arch/x86/pci/numaq_32.c:84:
+	if ((bus >= MAX_MP_BUSSES) || (devfn > 255) || (reg > 255)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#331: FILE: arch/x86/pci/numaq_32.c:84:
+	if ((bus >= MAX_MP_BUSSES) || (devfn > 255) || (reg > 255)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 255'
#331: FILE: arch/x86/pci/numaq_32.c:84:
+	if ((bus >= MAX_MP_BUSSES) || (devfn > 255) || (reg > 255)) 

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#366: FILE: arch/x86/pci/numaq_32.c:119:
+static struct pci_raw_ops pci_direct_conf1_mq = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#371: FILE: arch/x86/pci/numaq_32.c:124:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#372: FILE: arch/x86/pci/numaq_32.c:125:
+static void __devinit pci_fixup_i450nx(struct pci_dev *d)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: arch/x86/pci/numaq_32.c:134:
+	printk("PCI: Searching for i450NX host bridges on %s\n", pci_name(d));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#383: FILE: arch/x86/pci/numaq_32.c:136:
+	for(pxb=0; pxb<2; pxb++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#383: FILE: arch/x86/pci/numaq_32.c:136:
+	for(pxb=0; pxb<2; pxb++) {
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#383: FILE: arch/x86/pci/numaq_32.c:136:
+	for(pxb=0; pxb<2; pxb++) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#394: FILE: arch/x86/pci/numaq_32.c:147:
+			pci_scan_bus_with_sysdata(QUADLOCAL2BUS(quad, suba+1));
 			                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: arch/x86/pci/numaq_32.c:173:
+^I^I^Iprintk("Scanning PCI bus %d for quad %d\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#420: FILE: arch/x86/pci/numaq_32.c:173:
+			printk("Scanning PCI bus %d for quad %d\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: arch/x86/pci/numaq_32.c:174:
+			printk("Scanning PCI bus %d for quad %d\n", 
+				QUADLOCAL2BUS(quad,0), quad);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: arch/x86/pci/numaq_32.c:174:
+				QUADLOCAL2BUS(quad,0), quad);
 				                  ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256039.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 11 warnings, 14 checks, 186 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256039.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
