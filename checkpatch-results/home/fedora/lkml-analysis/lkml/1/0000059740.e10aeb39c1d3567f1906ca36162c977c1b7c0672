WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#58: FILE: arch/x86/include/asm/hw_irq.h:97:
+	unsigned move_cleanup_count;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: arch/x86/include/asm/hw_irq.h:102:
+extern struct irq_cfg *irq_cfg(unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#63: FILE: arch/x86/include/asm/hw_irq.h:102:
+extern struct irq_cfg *irq_cfg(unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: arch/x86/include/asm/hw_irq.h:103:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#64: FILE: arch/x86/include/asm/hw_irq.h:103:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irq_cfg *' should also have an identifier name
#64: FILE: arch/x86/include/asm/hw_irq.h:103:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cpumask *' should also have an identifier name
#64: FILE: arch/x86/include/asm/hw_irq.h:103:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: arch/x86/include/asm/hw_irq.h:104:
+extern void send_cleanup_vector(struct irq_cfg *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irq_cfg *' should also have an identifier name
#65: FILE: arch/x86/include/asm/hw_irq.h:104:
+extern void send_cleanup_vector(struct irq_cfg *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: arch/x86/include/asm/hw_irq.h:105:
+extern unsigned int set_desc_affinity(struct irq_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irq_desc *' should also have an identifier name
#66: FILE: arch/x86/include/asm/hw_irq.h:105:
+extern unsigned int set_desc_affinity(struct irq_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cpumask *' should also have an identifier name
#66: FILE: arch/x86/include/asm/hw_irq.h:105:
+extern unsigned int set_desc_affinity(struct irq_desc *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: arch/x86/include/asm/hw_irq.h:106:
+extern unsigned int set_desc_affinity(struct irq_desc *,
+					const struct cpumask *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: arch/x86/kernel/uv_irq.c:141:
+arch_enable_uv_irq(char *irq_name, unsigned int irq, int cpu, int mmr_blade,
+		       unsigned long mmr_offset, int restrict)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#388: FILE: arch/x86/kernel/uv_irq.c:214:
+	unsigned mmr_pnode;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 6 checks, 352 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
