WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#70: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#77: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:3:
+ *                Thanks to AVM, Berlin for informations
                                             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#104: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:30:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#189: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:115:
+} __attribute__((packed));

CHECK:CAMELCASE: Avoid CamelCase: <Cards>
#215: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:141:
+static LIST_HEAD(Cards);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#245: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:171:
+module_param_call(debug, set_debug, param_get_uint, &debug, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <ReadISAC_V1>
#251: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:177:
+ReadISAC_V1(void *p, u8 offset)

CHECK:CAMELCASE: Avoid CamelCase: <WriteISAC_V1>
#261: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:187:
+WriteISAC_V1(void *p, u8 offset, u8 value)

CHECK:CAMELCASE: Avoid CamelCase: <ReadFiFoISAC_V1>
#271: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:197:
+ReadFiFoISAC_V1(void *p, u8 off, u8 *data, int size)

CHECK:CAMELCASE: Avoid CamelCase: <WriteFiFoISAC_V1>
#280: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:206:
+WriteFiFoISAC_V1(void *p, u8 off, u8 *data, int size)

CHECK:CAMELCASE: Avoid CamelCase: <ReadISAC_V2>
#289: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:215:
+ReadISAC_V2(void *p, u8 offset)

CHECK:CAMELCASE: Avoid CamelCase: <WriteISAC_V2>
#298: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:224:
+WriteISAC_V2(void *p, u8 offset, u8 value)

CHECK:CAMELCASE: Avoid CamelCase: <ReadFiFoISAC_V2>
#307: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:233:
+ReadFiFoISAC_V2(void *p, u8 off, u8 *data, int size)

CHECK:CAMELCASE: Avoid CamelCase: <WriteFiFoISAC_V2>
#318: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:244:
+WriteFiFoISAC_V2(void *p, u8 off, u8 *data, int size)

CHECK:CAMELCASE: Avoid CamelCase: <Sel_BCS>
#329: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:255:
+Sel_BCS(struct fritzcard *fc, u32 channel)

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#331: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:257:
+	if (test_bit(FLG_ACTIVE, &fc->bch[0].Flags) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:258:
+	if (test_bit(FLG_ACTIVE, &fc->bch[0].Flags) &&
+		(fc->bch[0].nr & channel))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:261:
+	else if (test_bit(FLG_ACTIVE, &fc->bch[1].Flags) &&
+		(fc->bch[1].nr & channel))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#355: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:281:
+void
+write_ctrl(struct bchannel *bch, int which) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:288:
+	pr_debug("%s: hdlc %c wr%x ctrl %x\n", fc->name, '@' + bch->nr,
+		which, hdlc->ctrl.ctrl);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#373: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:299:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#388: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:314:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:350:
+	pr_debug("%s: hdlc %c protocol %x-->%x ch %d\n", fc->name,
+		'@' + bch->nr, bch->state, protocol, bch->nr);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#479: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:405:
+		if (!bch->rx_skb) {
+			pr_info("%s: B receive out of memory\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:412:
+		pr_debug("%s: overrun %d\n", fc->name,
+			bch->rx_skb->len + count);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#491: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:417:
+	if (AVM_FRITZ_PCIV2 == fc->type)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:420:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:432:
+		snprintf(fc->log, LOG_SIZE, "B%1d-recv %s %d ",
+			bch->nr, fc->name, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:461:
+	pr_debug("%s: %s %d/%d/%d", fc->name, __func__, count,
+		bch->tx_idx, bch->tx_skb->len);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#539: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:465:
+	if (AVM_FRITZ_PCIV2 == fc->type) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:481:
+		snprintf(fc->log, LOG_SIZE, "B%1d-send %s %d ",
+			bch->nr, fc->name, count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#563: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:489:
+	if (bch->tx_skb && bch->tx_idx < bch->tx_skb->len)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#565: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:491:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <confirm_Bsend>
#569: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:495:
+				confirm_Bsend(bch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:529:
+			if ((stat & HDLC_STAT_RME) || test_bit(FLG_TRANSPARENT,
+			    &bch->Flags)) {

CHECK:CAMELCASE: Avoid CamelCase: <recv_Bchannel>
#607: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:533:
+					recv_Bchannel(bch, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:536:
+					pr_debug("%s: got invalid frame\n",
+						fc->name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#617: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:543:
+	if (stat & HDLC_INT_XDU) {
[...]
+	} else if (stat & HDLC_INT_XPR)
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:550:
+			pr_debug("%s: ch%d XDU len(%d) idx(%d) Flags(%lx)\n",
+				fc->name, bch->nr, bch->tx_skb->len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:554:
+			pr_debug("%s: ch%d XDU no tx_skb Flags(%lx)\n",
+				fc->name, bch->nr, bch->Flags);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNisac_irq>
#686: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:612:
+		mISDNisac_irq(&fc->isac, val);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNchannel>
#728: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:654:
+avm_l2l1B(struct mISDNchannel *ch, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <mISDNhead>
#733: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:659:
+	struct mISDNhead *hh = mISDN_HEAD_P(skb);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_HEAD_P>
#733: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:659:
+	struct mISDNhead *hh = mISDN_HEAD_P(skb);

CHECK:BRACES: braces {} should be used on all arms of this statement
#741: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:667:
+		if (ret > 0) { /* direct TX */
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#748: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:674:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:686:
+			_queue_data(ch, PH_ACTIVATE_IND, MISDN_ID_ANY, 0,
+				NULL, GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_clear_bchannel>
#764: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:690:
+		mISDN_clear_bchannel(bch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:694:
+		_queue_data(ch, PH_DEACTIVATE_IND, MISDN_ID_ANY, 0,
+			NULL, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:750:
+		pr_notice("%s: S0/S1 %x/%x\n", fc->name,
+			inb(fc->addr + 2), inb(fc->addr + 3));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:762:
+		ret = request_irq(fc->irq, avm_fritzv2_interrupt,
+			IRQF_SHARED, fc->name, fc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#839: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:765:
+		ret = request_irq(fc->irq, avm_fritz_interrupt,
+			IRQF_SHARED, fc->name, fc);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#858: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:784:
+		if (AVM_FRITZ_PCIV2 == fc->type) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:796:
+			pr_notice("%s: IRQ %d count %d\n", fc->name,
+				fc->irq, fc->irqcnt);

CHECK:BRACES: braces {} should be used on all arms of this statement
#871: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:797:
+		if (!fc->irqcnt) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#875: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:801:
+		} else

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_ctrl_req>
#883: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:809:
+channel_bctrl(struct bchannel *bch, struct mISDN_ctrl_req *cq)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freebchannel>
#916: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:842:
+			mISDN_freebchannel(bch);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNdevice>
#985: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:911:
+	struct mISDNdevice	*dev = container_of(ch, struct mISDNdevice, D);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:932:
+		pr_debug("%s: dev(%d) close from %p\n", fc->name, dch->dev.id,
+			__builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:940:
+		pr_debug("%s: %s unknown command %x\n",
+			fc->name, __func__, cmd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:964:
+			pr_notice("%s: PCI Class %X Rev %d\n", fc->name,
+				val & 0xff, (val >> 8) & 0xff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1050: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:976:
+			pr_notice("%s: PCI V2 Class %X Rev %d\n", fc->name,
+				val & 0xff, (val>>8) & 0xff);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1050: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:976:
+				val & 0xff, (val>>8) & 0xff);
 				                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:988:
+	pr_notice("%s: %s config irq:%d base:0x%X\n", fc->name,
+		(fc->type == AVM_FRITZ_PCI) ? "AVM Fritz!CARD PCI" :

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_unregister_device>
#1081: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1007:
+	mISDN_unregister_device(&card->isac.dch.dev);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1092: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1018:
+static int __devinit

CHECK:CAMELCASE: Avoid CamelCase: <mISDNisac_init>
#1107: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1033:
+	mISDNisac_init(&card->isac, card);

CHECK:CAMELCASE: Avoid CamelCase: <Bprotocols>
#1109: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1035:
+	card->isac.dch.dev.Bprotocols = (1 << (ISDN_P_B_RAW & ISDN_P_B_MASK)) |

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initbchannel>
#1115: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1041:
+		mISDN_initbchannel(&card->bch[i], MAX_DATA_MEM);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_register_device>
#1125: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1051:
+	err = mISDN_register_device(&card->isac.dch.dev, &card->pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1126: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1052:
+	err = mISDN_register_device(&card->isac.dch.dev, &card->pdev->dev,
+		card->name);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1149: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1075:
+static int __devinit

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*card)...) over kzalloc(sizeof(struct fritzcard)...)
#1155: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1081:
+	card = kzalloc(sizeof(struct fritzcard), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1157: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1083:
+	if (!card) {
+		pr_info("No kmem for fritzcard\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1098:
+	pr_notice("mISDN: found adapter %s at %s\n",
+	       (char *) ent->driver_data, pci_name(pdev));

CHECK:SPACING: No space is necessary after a cast
#1172: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1098:
+	       (char *) ent->driver_data, pci_name(pdev));

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1183: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1109:
+static void __devexit

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#1192: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1118:
+			pr_info("%s: drvdata allready removed\n", __func__);
 			                     ^^^^^^^^

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1195: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1121:
+static struct pci_device_id fcpci_ids[] __devinitdata = {

CHECK:SPACING: No space is necessary after a cast
#1197: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1123:
+	  0, 0, (unsigned long) "Fritz!Card PCI"},

CHECK:SPACING: No space is necessary after a cast
#1199: FILE: drivers/isdn/hardware/mISDN/avmfritz.c:1125:
+	  0, 0, (unsigned long) "Fritz!Card PCI v2" },

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092584.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 15 warnings, 67 checks, 1173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092584.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
