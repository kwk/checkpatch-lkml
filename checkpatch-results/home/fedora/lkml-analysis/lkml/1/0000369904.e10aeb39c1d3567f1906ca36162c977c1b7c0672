WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-linus

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '09f75cd7bf13720738e6a196cc0107ce9a5bd5a0', maybe rebased or not pulled?
#100: 
      ucc_geth: Fix build break introduced by commit 09f75cd7bf13720738e6a196cc0107ce9a5bd5a0

WARNING:TYPO_SPELLING: 'structue' may be misspelled - perhaps 'structure'?
#131: 
      IB/ipoib: Bound the net device to the ipoib_neigh structue
                                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'conjuction' may be misspelled - perhaps 'conjunction'?
#177: FILE: Documentation/networking/bonding.txt:303:
+	When fail over MAC is used in conjuction with the mii monitor,
 	                              ^^^^^^^^^^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#200: FILE: arch/mips/au1000/common/prom.c:34:
  *  675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'neigh->dev != dev'
#669: FILE: drivers/infiniband/ulp/ipoib/ipoib_main.c:695:
+			if (unlikely((memcmp(&neigh->dgid.raw,
 					    skb->dst->neighbour->ha + 4,
+					    sizeof(union ib_gid))) ||
+					 (neigh->dev != dev))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: drivers/infiniband/ulp/ipoib/ipoib_main.c:696:
+			if (unlikely((memcmp(&neigh->dgid.raw,
 					    skb->dst->neighbour->ha + 4,

CHECK:BRACES: Unbalanced braces around else statement
#686: FILE: drivers/infiniband/ulp/ipoib/ipoib_main.c:826:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#749: FILE: drivers/net/Kconfig:1783:
+config CPMAC
+	tristate "TI AR7 CPMAC Ethernet support (EXPERIMENTAL)"
+	depends on NET_ETHERNET && EXPERIMENTAL && AR7
+	select PHYLIB
+	select FIXED_PHY
+	select FIXED_MII_100_FDX
+	help
+	  TI AR7 CPMAC Ethernet support
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:BRACES: braces {} should be used on all arms of this statement
#822: FILE: drivers/net/au1000_eth.c:677:
+		if (prom_get_ethernet_addr(ethaddr) == 0)
[...]
 		else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#830: FILE: drivers/net/au1000_eth.c:680:
+			printk(KERN_INFO "%s: No MAC address found\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: drivers/net/au1000_eth.c:681:
+			printk(KERN_INFO "%s: No MAC address found\n",
+					 dev->name);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#849: FILE: drivers/net/bonding/bond_main.c:101:
+static int fail_over_mac = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: drivers/net/bonding/bond_main.c:1108:
+			memcpy(bond->dev->dev_addr,  new_active->dev->dev_addr,
+				new_active->dev->addr_len);

CHECK:BRACES: braces {} should be used on all arms of this statement
#874: FILE: drivers/net/bonding/bond_main.c:1109:
+		if (bond->curr_active_slave &&
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: drivers/net/bonding/bond_main.c:1110:
+		if (bond->curr_active_slave &&
+			test_bit(__LINK_STATE_LINKWATCH_PENDING,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: drivers/net/bonding/bond_main.c:1111:
+			test_bit(__LINK_STATE_LINKWATCH_PENDING,
+					&bond->curr_active_slave->dev->state)) {

CHECK:BRACES: Unbalanced braces around else statement
#880: FILE: drivers/net/bonding/bond_main.c:1115:
+		} else

WARNING:MINMAX: max() should probably be max_t(u16, ETH_HLEN, bond_dev->hard_header_len)
#890: FILE: drivers/net/bonding/bond_main.c:1237:
+	unsigned short max_hard_header_len = max((u16)ETH_HLEN,
 						bond_dev->hard_header_len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#899: FILE: drivers/net/bonding/bond_main.c:1259:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: drivers/net/bonding/bond_main.c:1272:
+	memcpy(bond_dev->broadcast, slave_dev->broadcast,
+		slave_dev->addr_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#925: FILE: drivers/net/bonding/bond_main.c:1296:
+		printk(KERN_WARNING DRV_NAME

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bond_enslave', this function's name, in a string
#926: FILE: drivers/net/bonding/bond_main.c:1297:
+			" %s: master_dev is not up in bond_enslave\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#946: FILE: drivers/net/bonding/bond_main.c:1362:
+		printk(KERN_ERR DRV_NAME ": %s ether type (%d) is different "

WARNING:SPLIT_STRING: quoted string split across lines
#947: FILE: drivers/net/bonding/bond_main.c:1363:
+		printk(KERN_ERR DRV_NAME ": %s ether type (%d) is different "
+			"from other slaves (%d), can not enslave it.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#963: FILE: drivers/net/bonding/bond_main.c:1372:
+			printk(KERN_WARNING DRV_NAME

WARNING:SPLIT_STRING: quoted string split across lines
#965: FILE: drivers/net/bonding/bond_main.c:1374:
+			       ": %s: Warning: The first slave device "
+			       "specified does not support setting the MAC "

WARNING:SPLIT_STRING: quoted string split across lines
#966: FILE: drivers/net/bonding/bond_main.c:1375:
+			       "specified does not support setting the MAC "
+			       "address. Enabling the fail_over_mac option.",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#970: FILE: drivers/net/bonding/bond_main.c:1379:
+			printk(KERN_ERR DRV_NAME

WARNING:SPLIT_STRING: quoted string split across lines
#972: FILE: drivers/net/bonding/bond_main.c:1381:
+				": %s: Error: The slave device specified "
+				"does not support setting the MAC address, "

WARNING:SPLIT_STRING: quoted string split across lines
#973: FILE: drivers/net/bonding/bond_main.c:1382:
+				"does not support setting the MAC address, "
+				"but fail_over_mac is not enabled.\n"

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#997: FILE: drivers/net/bonding/bond_main.c:1409:
+		/*
+		 * Set slave to master's mac address.  The application already

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1057: FILE: drivers/net/bonding/bond_main.c:1848:
+/*
+* First release a slave and than destroy the bond if no more slaves iare left.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1057: FILE: drivers/net/bonding/bond_main.c:1848:
+/*
+* First release a slave and than destroy the bond if no more slaves iare left.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#1066: FILE: drivers/net/bonding/bond_main.c:1857:
+	if ((ret == 0) && (bond->slave_cnt == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bond->slave_cnt == 0'
#1066: FILE: drivers/net/bonding/bond_main.c:1857:
+	if ((ret == 0) && (bond->slave_cnt == 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1067: FILE: drivers/net/bonding/bond_main.c:1858:
+		printk(KERN_INFO DRV_NAME ": %s: destroying bond %s.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: drivers/net/bonding/bond_main.c:2119:
+		if (bond->curr_active_slave && test_bit(__LINK_STATE_LINKWATCH_PENDING,
+				&bond->curr_active_slave->dev->state))

CHECK:BRACES: Unbalanced braces around else statement
#1103: FILE: drivers/net/bonding/bond_main.c:2121:
+		else {

WARNING:REPEATED_WORD: Possible repeated word: 'on'
#1104: FILE: drivers/net/bonding/bond_main.c:2122:
+			dprintk("sending delayed gratuitous arp on on %s\n",

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1132: FILE: drivers/net/bonding/bond_main.c:3071:
+		seq_printf(seq, " (fail_over_mac)");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1134: FILE: drivers/net/bonding/bond_main.c:3073:
+	seq_printf(seq, "\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1156: FILE: drivers/net/bonding/bond_main.c:4007:
+	/*
+	 * If fail_over_mac is enabled, do nothing and return success.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bond_mode != BOND_MODE_ACTIVEBACKUP'
#1186: FILE: drivers/net/bonding/bond_main.c:4733:
+	if (fail_over_mac && (bond_mode != BOND_MODE_ACTIVEBACKUP))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1187: FILE: drivers/net/bonding/bond_main.c:4734:
+		printk(KERN_WARNING DRV_NAME

WARNING:SPLIT_STRING: quoted string split across lines
#1189: FILE: drivers/net/bonding/bond_main.c:4736:
+		       ": Warning: fail_over_mac only affects "
+		       "active-backup mode.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1230: FILE: drivers/net/bonding/bond_sysfs.c:268:
+		printk(KERN_WARNING DRV_NAME

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1294: FILE: drivers/net/bonding/bond_sysfs.c:574:
+static ssize_t bonding_show_fail_over_mac(struct device *d, struct device_attribute *attr, char *buf)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1301: FILE: drivers/net/bonding/bond_sysfs.c:581:
+static ssize_t bonding_store_fail_over_mac(struct device *d, struct device_attribute *attr, const char *buf, size_t count)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1308: FILE: drivers/net/bonding/bond_sysfs.c:588:
+		printk(KERN_ERR DRV_NAME

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1315: FILE: drivers/net/bonding/bond_sysfs.c:595:
+	if (sscanf(buf, "%d", &new_value) != 1) {
+		printk(KERN_ERR DRV_NAME
+		       ": %s: no fail_over_mac value specified.\n",
+		       bond->dev->name);
+		ret = -EINVAL;
+		goto out;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1316: FILE: drivers/net/bonding/bond_sysfs.c:596:
+		printk(KERN_ERR DRV_NAME

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_value == 0'
#1323: FILE: drivers/net/bonding/bond_sysfs.c:603:
+	if ((new_value == 0) || (new_value == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_value == 1'
#1323: FILE: drivers/net/bonding/bond_sysfs.c:603:
+	if ((new_value == 0) || (new_value == 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1325: FILE: drivers/net/bonding/bond_sysfs.c:605:
+		printk(KERN_INFO DRV_NAME ": %s: Setting fail_over_mac to %d.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1328: FILE: drivers/net/bonding/bond_sysfs.c:608:
+		printk(KERN_INFO DRV_NAME

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'bonding_show_fail_over_mac' to 'fail_over_mac_show' 'bonding_store_fail_over_mac' to 'fail_over_mac_store'
#1334: FILE: drivers/net/bonding/bond_sysfs.c:614:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1336: FILE: drivers/net/bonding/bond_sysfs.c:616:
+static DEVICE_ATTR(fail_over_mac, S_IRUGO | S_IWUSR, bonding_show_fail_over_mac, bonding_store_fail_over_mac);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1336: FILE: drivers/net/bonding/bond_sysfs.c:616:
+static DEVICE_ATTR(fail_over_mac, S_IRUGO | S_IWUSR, bonding_show_fail_over_mac, bonding_store_fail_over_mac);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1408: FILE: drivers/net/cassini.c:4446:
+#define CAS_REG_LEN ^IARRAY_SIZE(ethtool_register_table)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1408: FILE: drivers/net/cassini.c:4446:
 };
+#define CAS_REG_LEN 	ARRAY_SIZE(ethtool_register_table)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1413: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1418: FILE: drivers/net/cpmac.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1432: FILE: drivers/net/cpmac.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1433: FILE: drivers/net/cpmac.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/gpio.h> instead of <asm/gpio.h>
#1456: FILE: drivers/net/cpmac.c:39:
+#include <asm/gpio.h>

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1476: FILE: drivers/net/cpmac.c:59:
+#define MAC_ARG(x) ((u8*)(x))[0], ((u8*)(x))[1], ((u8*)(x))[2], \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1476: FILE: drivers/net/cpmac.c:59:
+#define MAC_ARG(x) ((u8*)(x))[0], ((u8*)(x))[1], ((u8*)(x))[2], \

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1476: FILE: drivers/net/cpmac.c:59:
+#define MAC_ARG(x) ((u8*)(x))[0], ((u8*)(x))[1], ((u8*)(x))[2], \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1476: FILE: drivers/net/cpmac.c:59:
+#define MAC_ARG(x) ((u8*)(x))[0], ((u8*)(x))[1], ((u8*)(x))[2], \
+		   ((u8*)(x))[3], ((u8*)(x))[4], ((u8*)(x))[5]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1476: FILE: drivers/net/cpmac.c:59:
+#define MAC_ARG(x) ((u8*)(x))[0], ((u8*)(x))[1], ((u8*)(x))[2], \
+		   ((u8*)(x))[3], ((u8*)(x))[4], ((u8*)(x))[5]

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1477: FILE: drivers/net/cpmac.c:60:
+		   ((u8*)(x))[3], ((u8*)(x))[4], ((u8*)(x))[5]

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1477: FILE: drivers/net/cpmac.c:60:
+		   ((u8*)(x))[3], ((u8*)(x))[4], ((u8*)(x))[5]

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1477: FILE: drivers/net/cpmac.c:60:
+		   ((u8*)(x))[3], ((u8*)(x))[4], ((u8*)(x))[5]

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1530: FILE: drivers/net/cpmac.c:113:
+#define CPMAC_MAC_ADDR_LO(channel) ^I(0x01b0 + (channel) * 4)$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1541: FILE: drivers/net/cpmac.c:124:
+/*
+ * Rx/Tx statistics

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1616: FILE: drivers/net/cpmac.c:199:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1617: FILE: drivers/net/cpmac.c:200:
+	spinlock_t rx_lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1643: FILE: drivers/net/cpmac.c:226:
+	struct cpmac_priv *priv = netdev_priv(dev);
+	for (i = 0; i < CPMAC_REG_END; i += 4) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1646: FILE: drivers/net/cpmac.c:229:
+				printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1647: FILE: drivers/net/cpmac.c:230:
+			printk(KERN_DEBUG "%s: reg[%p]:", dev->name,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1650: FILE: drivers/net/cpmac.c:233:
+		printk(" %08x", cpmac_read(priv->regs, i));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1652: FILE: drivers/net/cpmac.c:235:
+	printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1658: FILE: drivers/net/cpmac.c:241:
+	int i;
+	printk(KERN_DEBUG "%s: desc[%p]:", dev->name, desc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1658: FILE: drivers/net/cpmac.c:241:
+	printk(KERN_DEBUG "%s: desc[%p]:", dev->name, desc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1660: FILE: drivers/net/cpmac.c:243:
+		printk(" %08x", ((u32 *)desc)[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1661: FILE: drivers/net/cpmac.c:244:
+	printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1667: FILE: drivers/net/cpmac.c:250:
+	int i;
+	printk(KERN_DEBUG "%s: skb 0x%p, len=%d\n", dev->name, skb, skb->len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1667: FILE: drivers/net/cpmac.c:250:
+	printk(KERN_DEBUG "%s: skb 0x%p, len=%d\n", dev->name, skb, skb->len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1671: FILE: drivers/net/cpmac.c:254:
+				printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1672: FILE: drivers/net/cpmac.c:255:
+			printk(KERN_DEBUG "%s: data[%p]:", dev->name,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1675: FILE: drivers/net/cpmac.c:258:
+		printk(" %02x", ((u8 *)skb->data)[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1677: FILE: drivers/net/cpmac.c:260:
+	printk("\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1754: FILE: drivers/net/cpmac.c:337:
+			/*
+			 * cpmac uses some strange mac address hashing

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1793: FILE: drivers/net/cpmac.c:376:
+			printk(KERN_WARNING "%s: rx: spurious interrupt\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1815: FILE: drivers/net/cpmac.c:398:
+			printk(KERN_DEBUG "%s: received packet:\n", dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1820: FILE: drivers/net/cpmac.c:403:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1841: FILE: drivers/net/cpmac.c:424:
+			printk(KERN_WARNING "%s: rx: polling, but no queue\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1862: FILE: drivers/net/cpmac.c:445:
+		printk(KERN_DEBUG "%s: poll processed %d packets\n", dev->name,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1882: FILE: drivers/net/cpmac.c:465:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1901: FILE: drivers/net/cpmac.c:484:
+			printk(KERN_WARNING "%s: tx dma ring full, dropping\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1921: FILE: drivers/net/cpmac.c:504:
+		printk(KERN_DEBUG "%s: sending 0x%p, len=%d\n", dev->name, skb,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1948: FILE: drivers/net/cpmac.c:531:
+			printk(KERN_DEBUG "%s: sent 0x%p, len=%d\n", dev->name,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1962: FILE: drivers/net/cpmac.c:545:
+			printk(KERN_WARNING

WARNING:LINE_SPACING: Missing a blank line after declarations
#2043: FILE: drivers/net/cpmac.c:626:
+	int i;
+	if (unlikely(!priv->rx_head))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2049: FILE: drivers/net/cpmac.c:632:
+				printk(KERN_WARNING "%s: packet dropped\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2064: FILE: drivers/net/cpmac.c:647:
+	int i;
+	if (unlikely(!priv->desc_ring))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#2069: FILE: drivers/net/cpmac.c:652:
+			if (netif_subqueue_stopped(dev, i))
+			    netif_wake_subqueue(dev, i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2102: FILE: drivers/net/cpmac.c:685:
+		printk(KERN_DEBUG "%s: interrupt status: 0x%08x\n", dev->name,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2118: FILE: drivers/net/cpmac.c:701:
+			printk(KERN_ERR "%s: hw error, resetting...\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2139: FILE: drivers/net/cpmac.c:722:
+		printk(KERN_WARNING "%s: transmit timeout\n", dev->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2140: FILE: drivers/net/cpmac.c:723:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2141: FILE: drivers/net/cpmac.c:724:
+	/* 
+	 * FIXME: waking up random queue is not the best thing to

WARNING:LINE_SPACING: Missing a blank line after declarations
#2161: FILE: drivers/net/cpmac.c:744:
+	struct cpmac_priv *priv = netdev_priv(dev);
+	if (!(netif_running(dev)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == SIOCGMIIPHY'
#2165: FILE: drivers/net/cpmac.c:748:
+	if ((cmd == SIOCGMIIPHY) || (cmd == SIOCGMIIREG) ||
+	    (cmd == SIOCSMIIREG))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == SIOCGMIIREG'
#2165: FILE: drivers/net/cpmac.c:748:
+	if ((cmd == SIOCGMIIPHY) || (cmd == SIOCGMIIREG) ||
+	    (cmd == SIOCSMIIREG))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == SIOCSMIIREG'
#2165: FILE: drivers/net/cpmac.c:748:
+	if ((cmd == SIOCGMIIPHY) || (cmd == SIOCGMIIREG) ||
+	    (cmd == SIOCSMIIREG))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2195: FILE: drivers/net/cpmac.c:778:
+static void cpmac_get_ringparam(struct net_device *dev, struct ethtool_ringparam* ring)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2210: FILE: drivers/net/cpmac.c:793:
+static int cpmac_set_ringparam(struct net_device *dev, struct ethtool_ringparam* ring)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2288: FILE: drivers/net/cpmac.c:871:
+			printk(KERN_ERR "%s: Could not attach to PHY\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2296: FILE: drivers/net/cpmac.c:879:
+			printk(KERN_ERR "%s: failed to request registers\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2305: FILE: drivers/net/cpmac.c:888:
+			printk(KERN_ERR "%s: failed to remap registers\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2343: FILE: drivers/net/cpmac.c:926:
+	if ((res = request_irq(dev->irq, cpmac_irq, IRQF_SHARED,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2346: FILE: drivers/net/cpmac.c:929:
+			printk(KERN_ERR "%s: failed to obtain irq\n",

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2426: FILE: drivers/net/cpmac.c:1009:
+static int __devinit cpmac_probe(struct platform_device *pdev)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2445: FILE: drivers/net/cpmac.c:1028:
+		if (external_switch || dumb_switch)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2447: FILE: drivers/net/cpmac.c:1030:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2448: FILE: drivers/net/cpmac.c:1031:
+			printk(KERN_ERR "cpmac: no PHY present\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2456: FILE: drivers/net/cpmac.c:1039:
+		printk(KERN_ERR "cpmac: Unable to allocate net_device\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#2490: FILE: drivers/net/cpmac.c:1073:
+	if (phy_id == 31) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2493: FILE: drivers/net/cpmac.c:1076:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2496: FILE: drivers/net/cpmac.c:1079:
+	if ((rc = register_netdev(dev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2497: FILE: drivers/net/cpmac.c:1080:
+		printk(KERN_ERR "cpmac: error %i registering device %s\n", rc,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2503: FILE: drivers/net/cpmac.c:1086:
+		printk(KERN_INFO

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#2515: FILE: drivers/net/cpmac.c:1098:
+static int __devexit cpmac_remove(struct platform_device *pdev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2518: FILE: drivers/net/cpmac.c:1101:
+	struct net_device *dev = platform_get_drvdata(pdev);
+	unregister_netdev(dev);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2529: FILE: drivers/net/cpmac.c:1112:
+int __devinit cpmac_init(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2537: FILE: drivers/net/cpmac.c:1120:
+		printk(KERN_ERR "Can't ioremap mdio registers\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2551: FILE: drivers/net/cpmac.c:1134:
+		if ((mask = cpmac_read(cpmac_mii.priv, CPMAC_MDIO_ALIVE)))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2553: FILE: drivers/net/cpmac.c:1136:
+			break;
+		else

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#2583: FILE: drivers/net/cpmac.c:1166:
+void __devexit cpmac_exit(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2775: FILE: drivers/net/irda/donauboe.c:843:
+  for (j = 0; j < ARRAY_SIZE(bauds); ++j)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2775: FILE: drivers/net/irda/donauboe.c:843:
+  for (j = 0; j < ARRAY_SIZE(bauds); ++j)
     {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2825: FILE: drivers/net/mipsnet.c:49:
+		 dev->name, __FUNCTION__, skb->len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2831: FILE: drivers/net/mipsnet.c:54:
+		 dev->name, __FUNCTION__, skb->len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2845: FILE: drivers/net/mipsnet.c:68:
+		 dev->name, __FUNCTION__, skb->len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2864: FILE: drivers/net/mipsnet.c:98:
+		 dev->name, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2873: FILE: drivers/net/mipsnet.c:116:
+			 dev->name, __FUNCTION__, irq);

CHECK:CAMELCASE: Avoid CamelCase: <interruptFlags>
#2881: FILE: drivers/net/mipsnet.c:123:
+			 __FUNCTION__, interruptFlags);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2881: FILE: drivers/net/mipsnet.c:123:
+			 __FUNCTION__, interruptFlags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2886: FILE: drivers/net/mipsnet.c:127:
+				 dev->name, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2895: FILE: drivers/net/mipsnet.c:134:
+				 dev->name, __FUNCTION__);

CHECK:CAMELCASE: Avoid CamelCase: <rxDataCount>
#2898: FILE: drivers/net/mipsnet.c:136:
+				    inl(mipsnet_reg_address(dev, rxDataCount)));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2901: FILE: drivers/net/mipsnet.c:138:
+				 dev->name, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2910: FILE: drivers/net/mipsnet.c:144:
+				 dev->name, __FUNCTION__);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2912: FILE: drivers/net/mipsnet.c:146:
+			/*
+			 * TESTBIT is cleared on read.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2920: FILE: drivers/net/mipsnet.c:152:
+				 dev->name, __FUNCTION__, interruptFlags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2939: FILE: drivers/net/mipsnet.c:175:
+			 dev->name, __FUNCTION__, dev->irq);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2946: FILE: drivers/net/mipsnet.c:181:
+		 dev->name, __FUNCTION__, dev->base_addr, dev->irq);

CHECK:CAMELCASE: Avoid CamelCase: <interruptInfo>
#2970: FILE: drivers/net/mipsnet.c:228:
+		      inl(mipsnet_reg_address(netdev, interruptInfo));

WARNING:TYPO_SPELLING: 'availble' may be misspelled - perhaps 'available'?
#2978: FILE: drivers/net/mipsnet.c:233:
+			 "for dev is not availble.\n", netdev->name,
 			                 ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#2978: FILE: drivers/net/mipsnet.c:233:
 		pr_debug("%s: %s(): IO region {start: 0x%04lux, len: %d} "
+			 "for dev is not availble.\n", netdev->name,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2979: FILE: drivers/net/mipsnet.c:234:
+			 __FUNCTION__, netdev->base_addr, MIPSNET_IO_EXTENT);

CHECK:SPACING: No space is necessary after a cast
#3001: FILE: drivers/net/mipsnet.h:13:
+			     ((uint64_t) 'M' <<  0)| \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3001: FILE: drivers/net/mipsnet.h:13:
+			     ((uint64_t) 'M' <<  0)| \
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#3002: FILE: drivers/net/mipsnet.h:14:
+			     ((uint64_t) 'I' <<  8)| \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3002: FILE: drivers/net/mipsnet.h:14:
+			     ((uint64_t) 'I' <<  8)| \
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#3003: FILE: drivers/net/mipsnet.h:15:
+			     ((uint64_t) 'P' << 16)| \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3003: FILE: drivers/net/mipsnet.h:15:
+			     ((uint64_t) 'P' << 16)| \
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#3004: FILE: drivers/net/mipsnet.h:16:
+			     ((uint64_t) 'S' << 24)| \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3004: FILE: drivers/net/mipsnet.h:16:
+			     ((uint64_t) 'S' << 24)| \
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#3005: FILE: drivers/net/mipsnet.h:17:
+			     ((uint64_t) 'N' << 32)| \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3005: FILE: drivers/net/mipsnet.h:17:
+			     ((uint64_t) 'N' << 32)| \
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#3006: FILE: drivers/net/mipsnet.h:18:
+			     ((uint64_t) 'E' << 40)| \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3006: FILE: drivers/net/mipsnet.h:18:
+			     ((uint64_t) 'E' << 40)| \
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#3007: FILE: drivers/net/mipsnet.h:19:
+			     ((uint64_t) 'T' << 48)| \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3007: FILE: drivers/net/mipsnet.h:19:
+			     ((uint64_t) 'T' << 48)| \
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#3008: FILE: drivers/net/mipsnet.h:20:
+			     ((uint64_t) '0' << 56))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#3021: FILE: drivers/net/mipsnet.h:29:
+	/*
+	 * dev info for probing

CHECK:CAMELCASE: Avoid CamelCase: <devId>
#3024: FILE: drivers/net/mipsnet.h:32:
+	uint64_t devId;		/* 0x00 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3024: FILE: drivers/net/mipsnet.h:32:
+	uint64_t devId;		/* 0x00 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3032: FILE: drivers/net/mipsnet.h:39:
+	uint32_t busy;		/* 0x08 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3041: FILE: drivers/net/mipsnet.h:48:
+	uint32_t rxDataCount;	/* 0x0c */

CHECK:CAMELCASE: Avoid CamelCase: <txDataCount>
#3055: FILE: drivers/net/mipsnet.h:57:
+	uint32_t txDataCount;	/* 0x10 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3055: FILE: drivers/net/mipsnet.h:57:
+	uint32_t txDataCount;	/* 0x10 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3092: FILE: drivers/net/mipsnet.h:91:
+	uint32_t interruptInfo;	/* 0x18 */

CHECK:CAMELCASE: Avoid CamelCase: <rxDataBuffer>
#3100: FILE: drivers/net/mipsnet.h:98:
+	uint32_t rxDataBuffer;	/* 0x1c */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3100: FILE: drivers/net/mipsnet.h:98:
+	uint32_t rxDataBuffer;	/* 0x1c */

CHECK:CAMELCASE: Avoid CamelCase: <txDataBuffer>
#3112: FILE: drivers/net/mipsnet.h:105:
+	uint32_t txDataBuffer;	/* 0x20 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3112: FILE: drivers/net/mipsnet.h:105:
+	uint32_t txDataBuffer;	/* 0x20 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3180: FILE: drivers/net/myri10ge/myri10ge.c:1063:
+	 * after trying LRO, so as to avoid skb allocation overheads */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3237: FILE: drivers/net/myri10ge/myri10ge.c:2214:
+		 * TSO header can be at most 1KB long */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3242: FILE: drivers/net/myri10ge/myri10ge.c:2219:
+		 * the need to parse the headers */

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#3280: FILE: drivers/net/myri10ge/myri10ge.c:2435:
+	if (unlikely(IS_ERR(segs)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "segs"
#3290: FILE: drivers/net/myri10ge/myri10ge.c:2445:
+			if (segs != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3513: FILE: drivers/net/natsemi.c:3344:
+		mod_timer(&np->timer, round_jiffies(jiffies + 1*HZ));
 		                                               ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3645: FILE: drivers/net/tulip/de4x5.c:1044:
 };
+#define INFOLEAF_SIZE ARRAY_SIZE(infoleaf_array)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3675: FILE: drivers/net/ucc_geth.c:3457:
+	struct net_device * dev;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3693: FILE: drivers/net/wan/sdla.c:1345:
+	for(i=0; i < ARRAY_SIZE(valid_port); i++)
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#3693: FILE: drivers/net/wan/sdla.c:1345:
+	for(i=0; i < ARRAY_SIZE(valid_port); i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3707: FILE: drivers/net/wan/sdla.c:1490:
+	for(i=0; i < ARRAY_SIZE(valid_mem); i++)
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#3707: FILE: drivers/net/wan/sdla.c:1490:
+	for(i=0; i < ARRAY_SIZE(valid_mem); i++)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3742: FILE: drivers/net/xen-netfront.c:80:
+	spinlock_t   tx_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3760: FILE: drivers/net/xen-netfront.c:109:
+	unsigned rx_min_target, rx_max_target, rx_target;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3782: FILE: include/asm-mips/mach-au1x00/prom.h:1:
+#ifndef __AU1X00_PROM_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3789: FILE: include/asm-mips/mach-au1x00/prom.h:8:
+extern void prom_init_cmdline(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3790: FILE: include/asm-mips/mach-au1x00/prom.h:9:
+extern char *prom_getcmdline(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3791: FILE: include/asm-mips/mach-au1x00/prom.h:10:
+extern char *prom_getenv(char *envname);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3792: FILE: include/asm-mips/mach-au1x00/prom.h:11:
+extern int prom_get_ethernet_addr(char *ethernet_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3804: FILE: include/asm-powerpc/dcr-mmio.h:36:
+extern void dcr_unmap(dcr_host_t host, unsigned int dcr_c);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#3831: FILE: include/asm-powerpc/dcr-native.h:33:
+#define dcr_read(host, dcr_n)		mfdcr(dcr_n + host.base)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dcr_n' may be better as '(dcr_n)' to avoid precedence issues
#3831: FILE: include/asm-powerpc/dcr-native.h:33:
+#define dcr_read(host, dcr_n)		mfdcr(dcr_n + host.base)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#3832: FILE: include/asm-powerpc/dcr-native.h:34:
+#define dcr_write(host, dcr_n, value)	mtdcr(dcr_n + host.base, value)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dcr_n' may be better as '(dcr_n)' to avoid precedence issues
#3832: FILE: include/asm-powerpc/dcr-native.h:34:
+#define dcr_write(host, dcr_n, value)	mtdcr(dcr_n + host.base, value)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 120 warnings, 72 checks, 3344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
