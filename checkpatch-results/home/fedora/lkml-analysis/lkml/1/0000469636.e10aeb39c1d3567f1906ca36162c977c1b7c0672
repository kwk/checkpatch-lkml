WARNING:TYPO_SPELLING: 'independantly' may be misspelled - perhaps 'independently'?
#34: 
independantly.  Changes to the PRIO Qdisc also allow a user to map
^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#61: FILE: include/linux/netdevice.h:112:
+struct net_device_subqueue
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: include/linux/netdevice.h:553:
+	struct net_device_stats* (*get_subqueue_stats)(struct net_device *dev,
+							int queue_index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: include/linux/netdevice.h:559:
+	int			(*hard_start_subqueue_xmit)(struct sk_buff *skb,
+							struct net_device *dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: include/linux/netdevice.h:726:
+                                         int queue_index)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: include/linux/netdevice.h:726:
+                                         int queue_index)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: include/linux/netdevice.h:729:
+^I                &dev->egress_subqueue[queue_index].state);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: include/linux/netdevice.h:739:
+^I                       &dev->egress_subqueue[queue_index].state))$

CHECK:CAMELCASE: Avoid CamelCase: <Qdisc>
#164: FILE: include/net/sch_generic.h:106:
+	int			(*map_queue)(struct sk_buff *, struct Qdisc *);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#211: FILE: net/core/dev.c:1483:
+		if (netif_is_multiqueue(dev))
+		{

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#219: FILE: net/core/dev.c:1491:
+				/*
+				 * Unlock because the underlying qdisc

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: net/core/dev.c:1498:
+^I^I^I^I           ? NET_XMIT_SUCCESS : rc;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#229: FILE: net/core/dev.c:1501:
+				printk(KERN_CRIT "Device %s is "

WARNING:SPLIT_STRING: quoted string split across lines
#230: FILE: net/core/dev.c:1502:
+				printk(KERN_CRIT "Device %s is "
+					"multiqueue, but map_queue is "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: net/core/dev.c:1503:
+					"multiqueue, but map_queue is "
+					"undefined in the qdisc!!\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: net/core/dev.c:1516:
+^I^I^I^I           ? NET_XMIT_SUCCESS : rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: net/sched/sch_generic.c:45:
+   For single-queue devices:$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#291: FILE: net/sched/sch_generic.c:45:
+   For single-queue devices:
              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#291: FILE: net/sched/sch_generic.c:45:
+   For single-queue devices:
                            ^

CHECK:CAMELCASE: Avoid CamelCase: <For>
#291: FILE: net/sched/sch_generic.c:45:
+   For single-queue devices:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#327: FILE: net/sched/sch_generic.c:148:
+					printk(KERN_CRIT "Device %s is "

WARNING:SPLIT_STRING: quoted string split across lines
#328: FILE: net/sched/sch_generic.c:149:
+					printk(KERN_CRIT "Device %s is "
+						"multiqueue, but map_queue is "

WARNING:SPLIT_STRING: quoted string split across lines
#329: FILE: net/sched/sch_generic.c:150:
+						"multiqueue, but map_queue is "
+						"undefined in the qdisc!!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: net/sched/sch_generic.c:157:
+				if ((!netif_queue_stopped(dev)) &&
+				  (!netif_subqueue_stopped(dev, queue_index))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: net/sched/sch_generic.c:159:
+					int ret;
+					ret = dev->hard_start_subqueue_xmit(skb, dev, queue_index);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#340: FILE: net/sched/sch_generic.c:161:
+						if (!nolock) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#340: FILE: net/sched/sch_generic.c:161:
+						if (!nolock) {
+							netif_tx_unlock(dev);
+						}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#346: FILE: net/sched/sch_generic.c:167:
+						spin_lock(&dev->egress_subqueue[queue_index].queue_lock);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for single statement blocks
#352: FILE: net/sched/sch_generic.c:173:
+				if (!nolock) {
+					netif_tx_unlock(dev);
+				}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#358: FILE: net/sched/sch_generic.c:179:
+			else
+			{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#358: FILE: net/sched/sch_generic.c:179:
+			}
+			else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#368: FILE: net/sched/sch_generic.c:189:
+						if (!nolock) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#368: FILE: net/sched/sch_generic.c:189:
+						if (!nolock) {
+							netif_tx_unlock(dev);
+						}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#381: FILE: net/sched/sch_generic.c:202:
+				if (!nolock) {
+					netif_tx_unlock(dev);
+				}

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#545: FILE: net/sched/sch_prio.c:98:
+	/*
+	 * NOTE: if a device is multiqueue, then it is imperative the

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#564: FILE: net/sched/sch_prio.c:129:
+	/*
+	 * We'll classify the skb here, so return the Qdisc back through

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#601: FILE: net/sched/sch_prio.c:183:
+	/*
+	 * If we're multiqueue, the basic approach is try the lock on each

ERROR:SPACING: space prohibited after that open parenthesis '('
#672: FILE: net/sched/sch_prio.c:333:
+			if ( (((i + 1) - queue) == qmapoffset) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: net/sched/sch_prio.c:334:
+			if ( (((i + 1) - queue) == qmapoffset) &&
+			     (queue < (sch->dev->egress_subqueue_count - 1))) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 21 warnings, 7 checks, 590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
