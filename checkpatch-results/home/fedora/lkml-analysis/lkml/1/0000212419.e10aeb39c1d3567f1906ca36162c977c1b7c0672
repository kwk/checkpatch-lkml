WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#  check if "hypervisor present bit" is set, if so read the 0x40000000

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#  if the above fails, check the DMI vendors name for "VMware" string

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#91: FILE: arch/x86/include/asm/cpufeature.h:120:
+#define X86_FEATURE_HYPERVISOR	(4*32+31) /* Running on a hypervisor */
                               	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: arch/x86/include/asm/cpufeature.h:120:
+#define X86_FEATURE_HYPERVISOR	(4*32+31) /* Running on a hypervisor */
                               	     ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#104: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: arch/x86/include/asm/hypervisor.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#124: FILE: arch/x86/include/asm/hypervisor.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#125: FILE: arch/x86/include/asm/hypervisor.h:17:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: arch/x86/include/asm/hypervisor.h:23:
+extern unsigned long get_hypervisor_tsc_freq(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: arch/x86/include/asm/hypervisor.h:24:
+extern void init_hypervisor(struct cpuinfo_x86 *c);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#163: FILE: arch/x86/include/asm/vmware.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#178: FILE: arch/x86/include/asm/vmware.h:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#179: FILE: arch/x86/include/asm/vmware.h:17:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: arch/x86/include/asm/vmware.h:23:
+extern unsigned long vmware_get_tsc_khz(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: arch/x86/include/asm/vmware.h:24:
+extern int vmware_platform(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#227: FILE: arch/x86/kernel/cpu/hypervisor.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#245: FILE: arch/x86/kernel/cpu/hypervisor.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#246: FILE: arch/x86/kernel/cpu/hypervisor.c:20:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#250: FILE: arch/x86/kernel/cpu/hypervisor.c:24:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#256: FILE: arch/x86/kernel/cpu/hypervisor.c:30:
+	if (vmware_platform()) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#281: FILE: arch/x86/kernel/cpu/vmware.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#299: FILE: arch/x86/kernel/cpu/vmware.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#300: FILE: arch/x86/kernel/cpu/vmware.c:20:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#314: FILE: arch/x86/kernel/cpu/vmware.c:34:
+#define VMWARE_BDOOR(cmd, eax, ebx, ecx, edx)                         \
+	__asm__("inl (%%dx)" :                                        \
+			"=a"(eax), "=c"(ecx), "=d"(edx), "=b"(ebx) :          \
+			"0"(VMWARE_BDOOR_MAGIC), "1"(VMWARE_BDOOR_CMD_##cmd), \
+			"2"(VMWARE_BDOOR_PORT), "3"(0) :                      \
+			"memory");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#323: FILE: arch/x86/kernel/cpu/vmware.c:43:
+	uint32_t eax, ebx, ecx, edx;

WARNING:LINE_SPACING: Missing a blank line after declarations
#324: FILE: arch/x86/kernel/cpu/vmware.c:44:
+	uint32_t eax, ebx, ecx, edx;
+	VMWARE_BDOOR(GETVERSION, eax, ebx, ecx, edx);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: arch/x86/kernel/cpu/vmware.c:50:
+        uint64_t tsc_hz;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: arch/x86/kernel/cpu/vmware.c:50:
+        uint64_t tsc_hz;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#330: FILE: arch/x86/kernel/cpu/vmware.c:50:
+        uint64_t tsc_hz;

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: arch/x86/kernel/cpu/vmware.c:51:
+        uint32_t eax, ebx, ecx, edx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: arch/x86/kernel/cpu/vmware.c:51:
+        uint32_t eax, ebx, ecx, edx;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#331: FILE: arch/x86/kernel/cpu/vmware.c:51:
+        uint32_t eax, ebx, ecx, edx;

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: arch/x86/kernel/cpu/vmware.c:53:
+        VMWARE_BDOOR(GETHZ, eax, ebx, ecx, edx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: arch/x86/kernel/cpu/vmware.c:53:
+        VMWARE_BDOOR(GETHZ, eax, ebx, ecx, edx);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: arch/x86/kernel/cpu/vmware.c:55:
+        if (eax == (uint32_t)-1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: arch/x86/kernel/cpu/vmware.c:55:
+        if (eax == (uint32_t)-1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: arch/x86/kernel/cpu/vmware.c:56:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: arch/x86/kernel/cpu/vmware.c:56:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: arch/x86/kernel/cpu/vmware.c:57:
+        tsc_hz = eax | (((uint64_t)ebx) << 32);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: arch/x86/kernel/cpu/vmware.c:57:
+        tsc_hz = eax | (((uint64_t)ebx) << 32);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: arch/x86/kernel/cpu/vmware.c:58:
+        do_div(tsc_hz, 1000);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: arch/x86/kernel/cpu/vmware.c:58:
+        do_div(tsc_hz, 1000);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: arch/x86/kernel/cpu/vmware.c:59:
+        BUG_ON(tsc_hz >> 32);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: arch/x86/kernel/cpu/vmware.c:59:
+        BUG_ON(tsc_hz >> 32);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#339: FILE: arch/x86/kernel/cpu/vmware.c:59:
+        BUG_ON(tsc_hz >> 32);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: arch/x86/kernel/cpu/vmware.c:60:
+        return tsc_hz;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: arch/x86/kernel/cpu/vmware.c:60:
+        return tsc_hz;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#365: FILE: arch/x86/kernel/cpu/vmware.c:85:
+	BUG_ON(!vmware_platform());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#415: FILE: arch/x86/kernel/tsc.c:361:
+		printk(KERN_INFO "TSC: Frequency read from the hypervisor\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212419.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 22 warnings, 10 checks, 280 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212419.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
