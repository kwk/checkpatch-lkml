WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
cause delays in A. E.g. C should block if A is in a read-lock and C is <= A.

CHECK:SPACING: No space is necessary after a cast
#136: FILE: include/linux/seqlock.h:76:
+		do { *(x) = (seqlock_t) __SEQLOCK_UNLOCKED(x); rwlock_init(&(x)->lock); } while (0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: include/linux/seqlock.h:116:
+static __always_inline unsigned __read_seqbegin(seqlock_t *sl)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: include/linux/seqlock.h:133:
+	BUG_ON(ret & 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: include/linux/seqlock.h:175:
+static __always_inline unsigned __read_seqbegin_raw(raw_seqlock_t *sl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#230: FILE: include/linux/seqlock.h:190:
+static __always_inline int __read_seqretry_raw(raw_seqlock_t *sl, unsigned start)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#239: FILE: include/linux/seqlock.h:220:
+#define PICK_SEQOP_RET(op, lock)				\
 ({								\
 	unsigned long __ret;					\
 								\
 	if (TYPE_EQUAL((lock), raw_seqlock_t))			\
+		__ret = op##_raw((raw_seqlock_t *)(lock));\
 	else if (TYPE_EQUAL((lock), seqlock_t))			\
 		__ret = op((seqlock_t *)(lock));		\
 	else __ret = __bad_seqlock_type();			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#254: FILE: include/linux/seqlock.h:233:
+#define PICK_SEQOP2_RET(op, lock, arg)					\
  ({									\
 	unsigned long __ret;						\
 									\
 	if (TYPE_EQUAL((lock), raw_seqlock_t))				\
+		__ret = op##_raw((raw_seqlock_t *)(lock), (arg));	\
 	else if (TYPE_EQUAL((lock), seqlock_t))				\
 		__ret = op((seqlock_t *)(lock), (arg));			\
 	else __ret = __bad_seqlock_type();				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#254: FILE: include/linux/seqlock.h:233:
+#define PICK_SEQOP2_RET(op, lock, arg)					\
  ({									\
 	unsigned long __ret;						\
 									\
 	if (TYPE_EQUAL((lock), raw_seqlock_t))				\
+		__ret = op##_raw((raw_seqlock_t *)(lock), (arg));	\
 	else if (TYPE_EQUAL((lock), seqlock_t))				\
 		__ret = op((seqlock_t *)(lock), (arg));			\
 	else __ret = __bad_seqlock_type();				\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000232582.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 4 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000232582.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
