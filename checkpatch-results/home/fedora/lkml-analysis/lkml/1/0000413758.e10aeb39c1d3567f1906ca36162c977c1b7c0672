WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'f8822f42019eceed19cc6c0f985a489e17796ed8', maybe rebased or not pulled?
#66: 
 commit f8822f42019eceed19cc6c0f985a489e17796ed8

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
    [PATCH] i386: PARAVIRT: Consistently wrap paravirt ops callsites to make them patchable

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'f8822f42019eceed19cc6c0f985a489e17796ed8', maybe rebased or not pulled?
#120: 
 commit f8822f42019eceed19cc6c0f985a489e17796ed8

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#257: FILE: arch/i386/kernel/paravirt.c:76:
+static unsigned native_patch(u8 type, u16 clobbers, void *insns, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#257: FILE: arch/i386/kernel/paravirt.c:76:
+static unsigned native_patch(u8 type, u16 clobbers, void *insns, unsigned len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: arch/i386/kernel/smp.c:217:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#447: FILE: arch/i386/kernel/smp.c:217:
 		if (cpu_isset(query_cpu, mask)) {
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: arch/i386/kernel/smp.c:222:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: arch/i386/kernel/smp.c:228:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: arch/i386/kernel/smp.c:230:
+^I^I^I * program the ICR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: arch/i386/kernel/smp.c:233:
+^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: arch/i386/kernel/smp.c:357:
+static void flush_tlb_others(cpumask_t cpumask, struct mm_struct *mm,
+						unsigned long va)

WARNING:LINE_SPACING: Missing a blank line after declarations
#528: FILE: arch/i386/kernel/smp.c:390:
+		unsigned long *cpu_mask = (unsigned long *)&cpumask;
+		for (k = 0; k < BITS_TO_LONGS(NR_CPUS); ++k)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#528: FILE: arch/i386/kernel/smp.c:390:
+		for (k = 0; k < BITS_TO_LONGS(NR_CPUS); ++k)

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: include/asm-i386/paravirt.h:143:
+ ^Ipte_t (*ptep_get_and_clear)(pte_t *ptep);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#746: FILE: include/asm-i386/paravirt.h:143:
+ ^Ipte_t (*ptep_get_and_clear)(pte_t *ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: include/asm-i386/paravirt.h:143:
+ ^Ipte_t (*ptep_get_and_clear)(pte_t *ptep);$

CHECK:SPACING: No space is necessary after a cast
#767: FILE: include/asm-i386/paravirt.h:178:
+ static asmlinkage void (*__paravirtprobe_##fn)(void) __attribute_used__ \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: include/asm-i386/paravirt.h:178:
+ static asmlinkage void (*__paravirtprobe_##fn)(void) __attribute_used__ \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".paravirtprobe") over __attribute__((__section__(".paravirtprobe")))
#768: FILE: include/asm-i386/paravirt.h:179:
+		__attribute__((__section__(".paravirtprobe"))) = fn

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#993: FILE: include/asm-i386/paravirt.h:239:
+#define get_debugreg(var, reg) var = paravirt_ops.get_debugreg(reg)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1072: FILE: include/asm-i386/paravirt.h:268:
 }
+#define wbinvd() paravirt_ops.wbinvd()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1091: FILE: include/asm-i386/paravirt.h:273:
+#define rdmsr(msr,val1,val2) do {				\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1091: FILE: include/asm-i386/paravirt.h:273:
+#define rdmsr(msr,val1,val2) do {				\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1093: FILE: include/asm-i386/paravirt.h:275:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1093: FILE: include/asm-i386/paravirt.h:275:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1100: FILE: include/asm-i386/paravirt.h:280:
+#define wrmsr(msr,val1,val2) do {				\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1100: FILE: include/asm-i386/paravirt.h:280:
+#define wrmsr(msr,val1,val2) do {				\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1108: FILE: include/asm-i386/paravirt.h:285:
+#define rdmsrl(msr,val) do {					\
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1110: FILE: include/asm-i386/paravirt.h:287:
+	val = paravirt_ops.read_msr((msr),&_err);		\
 	                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1110: FILE: include/asm-i386/paravirt.h:287:
+	val = paravirt_ops.read_msr((msr),&_err);		\
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1115: FILE: include/asm-i386/paravirt.h:290:
+#define wrmsrl(msr,val) (paravirt_ops.write_msr((msr),(val)))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1115: FILE: include/asm-i386/paravirt.h:290:
+#define wrmsrl(msr,val) (paravirt_ops.write_msr((msr),(val)))
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1116: FILE: include/asm-i386/paravirt.h:291:
+#define wrmsr_safe(msr,a,b) ({					\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1116: FILE: include/asm-i386/paravirt.h:291:
+#define wrmsr_safe(msr,a,b) ({					\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1118: FILE: include/asm-i386/paravirt.h:293:
+	paravirt_ops.write_msr((msr),_l);			\
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1127: FILE: include/asm-i386/paravirt.h:297:
+#define rdmsr_safe(msr,a,b) ({					\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1127: FILE: include/asm-i386/paravirt.h:297:
+#define rdmsr_safe(msr,a,b) ({					\
                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#1127: FILE: include/asm-i386/paravirt.h:297:
+#define rdmsr_safe(msr,a,b) ({					\
+	int _err;						\
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
+	(*a) = (u32)_l;						\
+	(*b) = _l >> 32;					\
 	_err; })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#1127: FILE: include/asm-i386/paravirt.h:297:
+#define rdmsr_safe(msr,a,b) ({					\
+	int _err;						\
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
+	(*a) = (u32)_l;						\
+	(*b) = _l >> 32;					\
 	_err; })

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1129: FILE: include/asm-i386/paravirt.h:299:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1129: FILE: include/asm-i386/paravirt.h:299:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1134: FILE: include/asm-i386/paravirt.h:304:
+#define rdtsc(low,high) do {					\
                  ^

ERROR:SPACING: space required before the open parenthesis '('
#1138: FILE: include/asm-i386/paravirt.h:308:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1170: FILE: include/asm-i386/paravirt.h:322:
+#define rdpmc(counter,low,high) do {				\
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1170: FILE: include/asm-i386/paravirt.h:322:
+#define rdpmc(counter,low,high) do {				\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1232: FILE: include/asm-i386/paravirt.h:335:
+#define load_TLS(t,cpu) (paravirt_ops.load_tls((t),(cpu)))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1232: FILE: include/asm-i386/paravirt.h:335:
+#define load_TLS(t,cpu) (paravirt_ops.load_tls((t),(cpu)))
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1259: FILE: include/asm-i386/paravirt.h:371:
+	paravirt_ops.apic_write(reg,v);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1265: FILE: include/asm-i386/paravirt.h:376:
+	paravirt_ops.apic_write_atomic(reg,v);
 	                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1649: FILE: include/asm-i386/tlbflush.h:145:
 
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413758.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 11 warnings, 7 checks, 1463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413758.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
