WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
manner, it also adds a more scalable variant called smp_call_function_single()

WARNING:SPACING: Unnecessary space before function pointer arguments
#57: FILE: include/linux/smp.h:18:
+	void (*func) (void *info);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: include/linux/smp.h:74:
+int generic_smp_call_function_single(int cpuid, void (*func) (void *info),
+					void *info, int wait,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: include/linux/smp.h:77:
+int generic_smp_call_function(void (*func) (void *info), void *info, int wait,
+				cpumask_t mask, void (*send_ipi)(cpumask_t));

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#117: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: kernel/smp.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#136: FILE: kernel/smp.c:15:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(call_function_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'call_function_lock' should also have an identifier name
#136: FILE: kernel/smp.c:15:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(call_function_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#146: FILE: kernel/smp.c:25:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#154: FILE: kernel/smp.c:33:
+	spinlock_t lock;

WARNING:MEMORY_BARRIER: memory barrier without comment
#196: FILE: kernel/smp.c:75:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#212: FILE: kernel/smp.c:91:
+			smp_rmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#282: FILE: kernel/smp.c:161:
+	if (likely(data))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#284: FILE: kernel/smp.c:163:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: kernel/smp.c:182:
+int generic_smp_call_function(void (*func)(void *info), void *info, int wait,
+				cpumask_t mask,

WARNING:MEMORY_BARRIER: memory barrier without comment
#343: FILE: kernel/smp.c:222:
+		smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#346: FILE: kernel/smp.c:225:
+			smp_rmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#387: FILE: kernel/smp.c:266:
+		if (data->csd.flags & CSD_FLAG_WAIT) {
[...]
+		} else
[...]

WARNING:MEMORY_BARRIER: memory barrier without comment
#388: FILE: kernel/smp.c:267:
+			smp_wmb();

CHECK:BRACES: Unbalanced braces around else statement
#390: FILE: kernel/smp.c:269:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: kernel/smp.c:297:
+			data = list_entry(list.next, struct call_single_data,
+						list);

CHECK:BRACES: braces {} should be used on all arms of this statement
#422: FILE: kernel/smp.c:301:
+			if (data->flags & CSD_FLAG_WAIT) {
[...]
+			} else if (data->flags & CSD_FLAG_ALLOC)
[...]

WARNING:MEMORY_BARRIER: memory barrier without comment
#423: FILE: kernel/smp.c:302:
+				smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#435: FILE: kernel/smp.c:314:
+	smp_wmb();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306080.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 11 checks, 379 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306080.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
