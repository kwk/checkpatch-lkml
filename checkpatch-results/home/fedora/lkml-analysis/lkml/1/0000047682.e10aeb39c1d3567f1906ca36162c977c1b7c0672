WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#83: FILE: drivers/char/raw.c:125:
+raw_ioctl(struct file *filp, unsigned int command, unsigned long arg)
                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#93: FILE: drivers/char/raw.c:143:
+static int do_raw_ctl_ioctl(struct file *filp,
                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: drivers/char/raw.c:144:
+static int do_raw_ctl_ioctl(struct file *filp,
+			unsigned int command, struct raw_config_request *rq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: drivers/char/raw.c:181:
+			if ((rq->block_major == 0 && rq->block_minor != 0) ||
+					MAJOR(dev) != rq->block_major ||

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#167: FILE: drivers/char/raw.c:221:
+				rq->block_major = rq->block_minor = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: drivers/char/raw.c:234:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: drivers/char/raw.c:240:
+        switch (cmd) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: drivers/char/raw.c:240:
+        switch (cmd) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: drivers/char/raw.c:241:
+        case RAW_SETBIND:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: drivers/char/raw.c:241:
+        case RAW_SETBIND:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: drivers/char/raw.c:242:
+        case RAW_GETBIND:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: drivers/char/raw.c:242:
+        case RAW_GETBIND:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: drivers/char/raw.c:249:
+                err = do_raw_ctl_ioctl(file, cmd, &rq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/char/raw.c:249:
+                err = do_raw_ctl_ioctl(file, cmd, &rq);$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#200: FILE: drivers/char/raw.c:253:
+			if (copy_to_user((void __user *)arg, &rq, sizeof(rq))) {
+				err = -EFAULT;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: drivers/char/raw.c:257:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: drivers/char/raw.c:257:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: drivers/char/raw.c:258:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: drivers/char/raw.c:258:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: drivers/char/raw.c:259:
+        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: drivers/char/raw.c:259:
+        return err;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: drivers/char/raw.c:270:
+			     struct compat_raw_config_request __user * user_req)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#221: FILE: drivers/char/raw.c:274:
+	if (!access_ok (VERIFY_READ, user_req,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#233: FILE: drivers/char/raw.c:286:
+			     struct compat_raw_config_request __user * user_req)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: drivers/char/raw.c:291:
+	if (!access_ok(VERIFY_WRITE, user_req,
+			sizeof(struct compat_raw_config_request)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#248: FILE: drivers/char/raw.c:301:
+static long raw_ctl_compat_ioctl(struct file *file, unsigned cmd, unsigned long arg)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#258: FILE: drivers/char/raw.c:311:
+		if ((err = get_raw32_request(&req, user_req)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!err'
#265: FILE: drivers/char/raw.c:318:
+		if ((!err) && (cmd == RAW_GETBIND)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == RAW_GETBIND'
#265: FILE: drivers/char/raw.c:318:
+		if ((!err) && (cmd == RAW_GETBIND)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#265: FILE: drivers/char/raw.c:318:
+		if ((!err) && (cmd == RAW_GETBIND)) {
+			err = set_raw32_request(&req, user_req);
+		}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#274: FILE: drivers/char/raw.c:327:
+raw_compat_ioctl(struct file *filp, unsigned int command, unsigned long arg)
                               ^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047682.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 14 warnings, 7 checks, 311 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047682.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
