WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/net/usb/hso.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#86: FILE: drivers/net/usb/hso.c:7:
+ *  ^I^I^I<ajb@spheresystems.co.uk>$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#100: FILE: drivers/net/usb/hso.c:21:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#101: FILE: drivers/net/usb/hso.c:22:
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#146: FILE: drivers/net/usb/hso.c:67:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: drivers/net/usb/hso.c:93:
+#define	HSO_NET_TX_TIMEOUT		(HZ*10)
        	                  		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#184: FILE: drivers/net/usb/hso.c:105:
+#define get_serial_by_tty(x)	\
+	(x ? (struct hso_serial *)x->driver_data : NULL)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#190: FILE: drivers/net/usb/hso.c:111:
+#define D__(lvl_, fmt, arg...)				\
+	do {						\
+		printk(lvl_ "[%d:%s]: " fmt "\n",	\
+		       __LINE__, __func__, ## arg);	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#192: FILE: drivers/net/usb/hso.c:113:
+		printk(lvl_ "[%d:%s]: " fmt "\n",	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lvl' may be better as '(lvl)' to avoid precedence issues
#196: FILE: drivers/net/usb/hso.c:117:
+#define D_(lvl, args...)				\
+	do {						\
+		if (lvl & debug)			\
+			D__(KERN_INFO, args);		\
+	} while (0)

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#228: FILE: drivers/net/usb/hso.c:149:
+	struct mutex shared_int_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#248: FILE: drivers/net/usb/hso.c:169:
+	spinlock_t net_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#265: FILE: drivers/net/usb/hso.c:186:
+	/* rx/tx urb could be either a bulk urb or a control urb depending
+	   on which serial port it is used on. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#265: FILE: drivers/net/usb/hso.c:186:
+	   on which serial port it is used on. */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#291: FILE: drivers/net/usb/hso.c:212:
+	spinlock_t serial_lock;

WARNING:SPACING: Unnecessary space before function pointer arguments
#293: FILE: drivers/net/usb/hso.c:214:
+	int (*write_data) (struct hso_serial *serial);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#314: FILE: drivers/net/usb/hso.c:235:
+	struct mutex mutex;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: drivers/net/usb/hso.c:241:
+#define^IHSO_INTF_BULK   ^I0x0200$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#376: FILE: drivers/net/usb/hso.c:297:
+#define dev2net(x) (x->port_data.dev_net)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#377: FILE: drivers/net/usb/hso.c:298:
+#define dev2ser(x) (x->port_data.dev_serial)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#386: FILE: drivers/net/usb/hso.c:307:
+	printk(KERN_DEBUG "[%d:%s]: len %d", line_count, func_name, len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#390: FILE: drivers/net/usb/hso.c:311:
+			printk("\n    0x%03x:  ", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#391: FILE: drivers/net/usb/hso.c:312:
+		printk("%02x ", (unsigned char)buf[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: drivers/net/usb/hso.c:314:
+	printk("\n");

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'hso_sysfs_show_porttype' to 'hsotype_show'
#532: FILE: drivers/net/usb/hso.c:453:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#533: FILE: drivers/net/usb/hso.c:454:
+static DEVICE_ATTR(hsotype, S_IRUGO, hso_sysfs_show_porttype, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#589: FILE: drivers/net/usb/hso.c:510:
+static struct hso_serial *get_serial_by_shared_int_and_type(

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#599: FILE: drivers/net/usb/hso.c:520:
+		if (serial_table[i]
+		    && (dev2ser(serial_table[i])->shared_int == shared_int)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#600: FILE: drivers/net/usb/hso.c:521:
+		    && (dev2ser(serial_table[i])->shared_int == shared_int)
+		    && ((serial_table[i]->port_spec & HSO_PORT_MASK) == port)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#608: FILE: drivers/net/usb/hso.c:529:
+static struct hso_serial *get_serial_by_index(unsigned index)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!serial_table[index]"
#629: FILE: drivers/net/usb/hso.c:550:
+		if (serial_table[index] == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#636: FILE: drivers/net/usb/hso.c:557:
+	printk(KERN_ERR "%s: no free serial devices in table\n", __func__);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#640: FILE: drivers/net/usb/hso.c:561:
+static void set_serial_by_index(unsigned index, struct hso_serial *serial)

WARNING:LINE_SPACING: Missing a blank line after declarations
#643: FILE: drivers/net/usb/hso.c:564:
+	unsigned long flags;
+	spin_lock_irqsave(&serial_table_lock, flags);

WARNING:TYPO_SPELLING: 'meaningfull' may be misspelled - perhaps 'meaningful'?
#651: FILE: drivers/net/usb/hso.c:572:
+/* log a meaningfull explanation of an USB status */
          ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#757: FILE: drivers/net/usb/hso.c:678:
+	 * anyhow */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'odev->out_endp->bEndpointAddress'
#791: FILE: drivers/net/usb/hso.c:712:
+					  odev->out_endp->
+					  bEndpointAddress & 0x7F),

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#791: FILE: drivers/net/usb/hso.c:712:
+					  bEndpointAddress & 0x7F),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: drivers/net/usb/hso.c:723:
+		dev_warn(&odev->parent->interface->dev,
+			"failed mux_bulk_tx_urb %d", result);

WARNING:SIZEOF_PARENTHESIS: sizeof info->bus_info should be sizeof(info->bus_info)
#822: FILE: drivers/net/usb/hso.c:743:
+	usb_make_path(odev->parent->usb, info->bus_info, sizeof info->bus_info);

WARNING:CONST_STRUCT: struct ethtool_ops should normally be const
#825: FILE: drivers/net/usb/hso.c:746:
+static struct ethtool_ops ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#843: FILE: drivers/net/usb/hso.c:764:
+	if (odev->mux_bulk_tx_urb
+	    && (odev->mux_bulk_tx_urb->status == -EINPROGRESS))

CHECK:CAMELCASE: Avoid CamelCase: <packetizeRx>
#851: FILE: drivers/net/usb/hso.c:772:
+static void packetizeRx(struct hso_net *odev, unsigned char *ip_pkt,

WARNING:MINMAX: min() should probably be min_t(int, 128, count)
#861: FILE: drivers/net/usb/hso.c:782:
+	DUMP(ip_pkt, min(128, (int)count));

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'odev->rx_buf_missing'
#871: FILE: drivers/net/usb/hso.c:792:
+			     odev->rx_buf_missing) ? count : odev->
+			    rx_buf_missing;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#884: FILE: drivers/net/usb/hso.c:805:
+				 * continue to WAIT_DATA */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'frame_len > DEFAULT_MRU'
#887: FILE: drivers/net/usb/hso.c:808:
+				if ((frame_len > DEFAULT_MRU) ||
+				    (frame_len < sizeof(struct iphdr))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'frame_len < sizeof(struct iphdr)'
#887: FILE: drivers/net/usb/hso.c:808:
+				if ((frame_len > DEFAULT_MRU) ||
+				    (frame_len < sizeof(struct iphdr))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#907: FILE: drivers/net/usb/hso.c:828:
+				 * after tail. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around odev->rx_ip_hdr
#911: FILE: drivers/net/usb/hso.c:832:
+				memcpy(tmp_rx_buf, (char *)&(odev->rx_ip_hdr),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#929: FILE: drivers/net/usb/hso.c:850:
+			 * buffer into the waiting sk_buf. */

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#942: FILE: drivers/net/usb/hso.c:863:
+						__constant_htons(ETH_P_IP);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1017: FILE: drivers/net/usb/hso.c:938:
+		u8 crc_check[4] = { 0xDE, 0xAD, 0xBE, 0xEF };
+		rest = urb->actual_length % odev->in_endp->wMaxPacketSize;

CHECK:CAMELCASE: Avoid CamelCase: <wMaxPacketSize>
#1017: FILE: drivers/net/usb/hso.c:938:
+		rest = urb->actual_length % odev->in_endp->wMaxPacketSize;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rest == 5'
#1018: FILE: drivers/net/usb/hso.c:939:
+		if (((rest == 5) || (rest == 6))
+		    && !memcmp(((u8 *) urb->transfer_buffer) +
+			       urb->actual_length - 4, crc_check, 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rest == 6'
#1018: FILE: drivers/net/usb/hso.c:939:
+		if (((rest == 5) || (rest == 6))
+		    && !memcmp(((u8 *) urb->transfer_buffer) +
+			       urb->actual_length - 4, crc_check, 4)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1019: FILE: drivers/net/usb/hso.c:940:
+		if (((rest == 5) || (rest == 6))
+		    && !memcmp(((u8 *) urb->transfer_buffer) +

CHECK:SPACING: No space is necessary after a cast
#1019: FILE: drivers/net/usb/hso.c:940:
+		    && !memcmp(((u8 *) urb->transfer_buffer) +

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1028: FILE: drivers/net/usb/hso.c:949:
+		 * stack if the packet is complete. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1037: FILE: drivers/net/usb/hso.c:958:
+	 * another frame. Reuse same as received. */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'odev->in_endp->bEndpointAddress'
#1042: FILE: drivers/net/usb/hso.c:963:
+					  odev->in_endp->
+					  bEndpointAddress & 0x7F),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1047: FILE: drivers/net/usb/hso.c:968:
+	 * arrives. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!tty'
#1063: FILE: drivers/net/usb/hso.c:984:
+	if ((!tty) || (!tty->termios) || (!serial)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!tty->termios'
#1063: FILE: drivers/net/usb/hso.c:984:
+	if ((!tty) || (!tty->termios) || (!serial)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!serial'
#1063: FILE: drivers/net/usb/hso.c:984:
+	if ((!tty) || (!tty->termios) || (!serial)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1064: FILE: drivers/net/usb/hso.c:985:
+		printk(KERN_ERR "%s: no tty structures", __func__);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1071: FILE: drivers/net/usb/hso.c:992:
+	/*
+	 * The default requirements for this device are:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1091: FILE: drivers/net/usb/hso.c:1012:
+		| ICANON	/* disable erase, kill, werase, and rprnt
+				   special characters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1091: FILE: drivers/net/usb/hso.c:1012:
+				   special characters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1093: FILE: drivers/net/usb/hso.c:1014:
+		| ISIG		/* disable interrupt, quit, and suspend special
+				   characters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1093: FILE: drivers/net/usb/hso.c:1014:
+				   characters */

WARNING:TYPO_SPELLING: 'buad' may be misspelled - perhaps 'baud'?
#1100: FILE: drivers/net/usb/hso.c:1021:
+		| CBAUDEX);	/* clear current buad rate */
 		           	                 ^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1108: FILE: drivers/net/usb/hso.c:1029:
+	/*
+	 * Force low_latency on; otherwise the pushes are scheduled;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1114: FILE: drivers/net/usb/hso.c:1035:
+	return;
+}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1117: FILE: drivers/net/usb/hso.c:1038:
+static int hso_serial_open(struct tty_struct *tty, struct file *filp)
                                                                 ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!serial"
#1123: FILE: drivers/net/usb/hso.c:1044:
+	if (serial == NULL || serial->magic != HSO_SERIAL_MAGIC) {

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#1141: FILE: drivers/net/usb/hso.c:1062:
+	/* check for port allready opened, if not set the termios */
 	                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1169: FILE: drivers/net/usb/hso.c:1090:
+static void hso_serial_close(struct tty_struct *tty, struct file *filp)
                                                                   ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!serial"
#1209: FILE: drivers/net/usb/hso.c:1130:
+	if (serial == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1210: FILE: drivers/net/usb/hso.c:1131:
+		printk(KERN_ERR "%s: serial is NULL\n", __func__);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1268: FILE: drivers/net/usb/hso.c:1189:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!serial"
#1278: FILE: drivers/net/usb/hso.c:1199:
+	if (serial == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#1321: FILE: drivers/net/usb/hso.c:1242:
+	if_num = serial->parent->interface->altsetting->desc.bInterfaceNumber;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1393: FILE: drivers/net/usb/hso.c:1314:
+		printk(KERN_ERR "%s: Wrong arguments\n", __func__);

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#1398: FILE: drivers/net/usb/hso.c:1319:
+	ctrl_req->wValue = 0;

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#1399: FILE: drivers/net/usb/hso.c:1320:
+	ctrl_req->wIndex = hso_port_to_mux(port);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#1400: FILE: drivers/net/usb/hso.c:1321:
+	ctrl_req->wLength = size;

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#1404: FILE: drivers/net/usb/hso.c:1325:
+		ctrl_req->bRequestType = USB_DIR_IN |

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#1407: FILE: drivers/net/usb/hso.c:1328:
+		ctrl_req->bRequest = USB_CDC_GET_ENCAPSULATED_RESPONSE;

CHECK:SPACING: No space is necessary after a cast
#1427: FILE: drivers/net/usb/hso.c:1348:
+			     (u8 *) ctrl_req,

WARNING:SPLIT_STRING: quoted string split across lines
#1455: FILE: drivers/net/usb/hso.c:1376:
+			"ERROR: mux'd reads with multiple buffers "
+			"not possible\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "serial"
#1497: FILE: drivers/net/usb/hso.c:1418:
+			if (serial != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1502: FILE: drivers/net/usb/hso.c:1423:
+					 * port i */

WARNING:SPLIT_STRING: quoted string split across lines
#1506: FILE: drivers/net/usb/hso.c:1427:
+					D1("Already pending a read on "
+					   "port %d\n", i);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1518: FILE: drivers/net/usb/hso.c:1439:
+	if (NULL == serial)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:RETURN_VOID: void function return statements are not generally useful
#1554: FILE: drivers/net/usb/hso.c:1475:
+	return;
+}

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'serial->out_endp->bEndpointAddress'
#1566: FILE: drivers/net/usb/hso.c:1487:
+					  serial->out_endp->
+					  bEndpointAddress & 0x7F),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!urb"
#1632: FILE: drivers/net/usb/hso.c:1553:
+	if (urb == NULL || serial == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!serial"
#1632: FILE: drivers/net/usb/hso.c:1553:
+	if (urb == NULL || serial == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1674: FILE: drivers/net/usb/hso.c:1595:
+			u8 crc_check[4] = { 0xDE, 0xAD, 0xBE, 0xEF };
+			rest =

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rest == 5'
#1677: FILE: drivers/net/usb/hso.c:1598:
+			if (((rest == 5) || (rest == 6))
+			    && !memcmp(((u8 *) urb->transfer_buffer) +
+				       urb->actual_length - 4, crc_check, 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rest == 6'
#1677: FILE: drivers/net/usb/hso.c:1598:
+			if (((rest == 5) || (rest == 6))
+			    && !memcmp(((u8 *) urb->transfer_buffer) +
+				       urb->actual_length - 4, crc_check, 4)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1678: FILE: drivers/net/usb/hso.c:1599:
+			if (((rest == 5) || (rest == 6))
+			    && !memcmp(((u8 *) urb->transfer_buffer) +

CHECK:SPACING: No space is necessary after a cast
#1678: FILE: drivers/net/usb/hso.c:1599:
+			    && !memcmp(((u8 *) urb->transfer_buffer) +

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1696: FILE: drivers/net/usb/hso.c:1617:
+	 * another frame */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'serial->in_endp->bEndpointAddress'
#1700: FILE: drivers/net/usb/hso.c:1621:
+					  serial->in_endp->
+					  bEndpointAddress & 0x7F),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1704: FILE: drivers/net/usb/hso.c:1625:
+	 * arrives. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1754: FILE: drivers/net/usb/hso.c:1675:
+	if ((hso_dev->port_spec & HSO_PORT_MASK) == HSO_PORT_NETWORK) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1756: FILE: drivers/net/usb/hso.c:1677:
+	} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1774: FILE: drivers/net/usb/hso.c:1695:
+	for (i = 0; i < MUX_BULK_RX_BUF_COUNT; i++) {
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'hso_net->in_endp->bEndpointAddress'
#1780: FILE: drivers/net/usb/hso.c:1701:
+						  hso_net->in_endp->
+						  bEndpointAddress & 0x7F),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1790: FILE: drivers/net/usb/hso.c:1711:
+			dev_warn(&hso_dev->usb->dev,
+				"%s failed mux_bulk_rx_urb[%d] %d\n", __func__,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1809: FILE: drivers/net/usb/hso.c:1730:
+
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1825: FILE: drivers/net/usb/hso.c:1746:
+	 * allocated in hso_serial_start) */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'serial->in_endp->bEndpointAddress'
#1832: FILE: drivers/net/usb/hso.c:1753:
+							  serial->in_endp->
+							  bEndpointAddress &

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1869: FILE: drivers/net/usb/hso.c:1790:
+		if (serial->rx_urb[i])
+				usb_kill_urb(serial->rx_urb[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1926: FILE: drivers/net/usb/hso.c:1847:
+	serial->parent->dev = tty_register_device(tty_drv, minor,
+					&serial->parent->interface->dev);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1952: FILE: drivers/net/usb/hso.c:1873:
+		if (!serial->rx_data[i]) {
+			dev_err(dev, "%s - Out of memory\n", __func__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1976: FILE: drivers/net/usb/hso.c:1897:
+	if (!serial->tx_buffer) {
+		dev_err(dev, "%s - Out of memory", __func__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!network_table[i]"
#2086: FILE: drivers/net/usb/hso.c:2007:
+		if (network_table[i] == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2107: FILE: drivers/net/usb/hso.c:2028:
+		rv = usb_control_msg(hso_dev->usb, usb_rcvctrlpipe(hso_dev->usb, 0),
+				       enabled ? 0x82 : 0x81, 0x40, 0, 0, NULL, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2115: FILE: drivers/net/usb/hso.c:2036:
+static void hso_create_rfkill(struct hso_device *hso_dev,
+			     struct usb_interface *interface)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2122: FILE: drivers/net/usb/hso.c:2043:
+	hso_net->rfkill = rfkill_allocate(&interface_to_usbdev(interface)->dev,
+				 RFKILL_TYPE_WLAN);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2205: FILE: drivers/net/usb/hso.c:2126:
+		if (!hso_net->mux_bulk_rx_buf_pool[i]) {
+			dev_err(&interface->dev, "Could not allocate rx buf\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2216: FILE: drivers/net/usb/hso.c:2137:
+	if (!hso_net->mux_bulk_tx_buf) {
+		dev_err(&interface->dev, "Could not allocate tx buf\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2255: FILE: drivers/net/usb/hso.c:2176:
+static struct hso_device *hso_create_bulk_serial_device(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2289: FILE: drivers/net/usb/hso.c:2210:
+	if (!

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2372: FILE: drivers/net/usb/hso.c:2293:
+
+}

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2405: FILE: drivers/net/usb/hso.c:2326:
+	if (!mux->shared_intr_buf) {
+		dev_err(&interface->dev, "Could not allocate intr buf?");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2497: FILE: drivers/net/usb/hso.c:2418:
+	 * the device itself */

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#2503: FILE: drivers/net/usb/hso.c:2424:
+	if (interface->cur_altsetting->desc.bInterfaceClass != 0xFF) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2508: FILE: drivers/net/usb/hso.c:2429:
+	 * configuration */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2536: FILE: drivers/net/usb/hso.c:2457:
+				hso_dev = hso_create_mux_serial_device(

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2550: FILE: drivers/net/usb/hso.c:2471:
+		if (((port_spec & HSO_PORT_MASK) == HSO_PORT_NETWORK)
+		    && !disable_net)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'serial_table[i]->interface == iface'
#2636: FILE: drivers/net/usb/hso.c:2557:
+		if (serial_table[i] && (serial_table[i]->interface == iface)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'network_table[i]->interface == iface'
#2645: FILE: drivers/net/usb/hso.c:2566:
+		if (network_table[i] &&
+		    (network_table[i]->interface == iface)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'serial_table[i]->interface == iface'
#2665: FILE: drivers/net/usb/hso.c:2586:
+		if (serial_table[i] && (serial_table[i]->interface == iface)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'network_table[i]->interface == iface'
#2678: FILE: drivers/net/usb/hso.c:2599:
+		if (network_table[i] &&
+		    (network_table[i]->interface == iface)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2682: FILE: drivers/net/usb/hso.c:2603:
+			 * device. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'serial_table[i]->interface == interface'
#2712: FILE: drivers/net/usb/hso.c:2633:
+		if (serial_table[i]
+		    && (serial_table[i]->interface == interface)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2713: FILE: drivers/net/usb/hso.c:2634:
+		if (serial_table[i]
+		    && (serial_table[i]->interface == interface)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'network_table[i]->interface == interface'
#2725: FILE: drivers/net/usb/hso.c:2646:
+		if (network_table[i]
+		    && (network_table[i]->interface == interface)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2726: FILE: drivers/net/usb/hso.c:2647:
+		if (network_table[i]
+		    && (network_table[i]->interface == interface)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2729: FILE: drivers/net/usb/hso.c:2650:
+			 * traffic needs to start it again when suspended */

ERROR:SPACING: space required before the open parenthesis '('
#2734: FILE: drivers/net/usb/hso.c:2655:
+			if(rfk)

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#2751: FILE: drivers/net/usb/hso.c:2672:
+	for (i = 0; i < iface->desc.bNumEndpoints; i++) {

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#2754: FILE: drivers/net/usb/hso.c:2675:
+		    ((endp->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) == type))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2790: FILE: drivers/net/usb/hso.c:2711:
+			 usb_rcvintpipe(usb,
+				shared_int->intr_endp->bEndpointAddress & 0x7F),

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#2794: FILE: drivers/net/usb/hso.c:2715:
+			 shared_int->intr_endp->bInterval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2799: FILE: drivers/net/usb/hso.c:2720:
+		dev_warn(&usb->dev, "%s failed mux_intr_urb %d", __func__,
+			result);

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#2805: FILE: drivers/net/usb/hso.c:2726:
+static struct tty_operations hso_serial_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2832: FILE: drivers/net/usb/hso.c:2753:
+	printk(KERN_INFO "hso: %s\n", version);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2868: FILE: drivers/net/usb/hso.c:2789:
+		printk(KERN_ERR "%s - tty_register_driver failed(%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2869: FILE: drivers/net/usb/hso.c:2790:
+		printk(KERN_ERR "%s - tty_register_driver failed(%d)\n",
+			__func__, result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2876: FILE: drivers/net/usb/hso.c:2797:
+		printk(KERN_ERR "Could not register hso driver? error: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2877: FILE: drivers/net/usb/hso.c:2798:
+		printk(KERN_ERR "Could not register hso driver? error: %d\n",
+			result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2889: FILE: drivers/net/usb/hso.c:2810:
+	printk(KERN_INFO "hso: unloaded\n");

CHECK:CAMELCASE: Avoid CamelCase: <Version>
#2903: FILE: drivers/net/usb/hso.c:2824:
+MODULE_INFO(Version, DRIVER_VERSION);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2907: FILE: drivers/net/usb/hso.c:2828:
+module_param(debug, int, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2911: FILE: drivers/net/usb/hso.c:2832:
+module_param(tty_major, int, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2915: FILE: drivers/net/usb/hso.c:2836:
+module_param(disable_net, int, S_IRUGO | S_IWUSR);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 80 warnings, 77 checks, 2866 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
