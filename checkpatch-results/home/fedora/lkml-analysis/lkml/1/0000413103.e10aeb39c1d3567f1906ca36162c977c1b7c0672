CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#44: FILE: drivers/block/aoe/aoe.h:88:
+	DEVFL_KICKME = (1<<5),	/* slow polling network card catch */
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#84: FILE: drivers/block/aoe/aoe.h:132:
+	struct net_device *nd;
 	                   ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct aoedev *' should also have an identifier name
#147: FILE: drivers/block/aoe/aoe.h:195:
+void aoecmd_cleanslate(struct aoedev *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct aoedev *' should also have an identifier name
#148: FILE: drivers/block/aoe/aoe.h:196:
+struct sk_buff *aoecmd_ata_id(struct aoedev *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t"
#176: FILE: drivers/block/aoe/aoeblk.c:33:
+	if (t == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#185: FILE: drivers/block/aoe/aoeblk.c:41:
+	struct net_device *nds[8], **nd, **nnd, **ne;
 	                             ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#186: FILE: drivers/block/aoe/aoeblk.c:42:
+	struct aoetgt **t, **te;
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#191: FILE: drivers/block/aoe/aoeblk.c:47:
+	nd = nds;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#192: FILE: drivers/block/aoe/aoeblk.c:48:
+	ne = nd + ARRAY_SIZE(nds);
 	     ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#194: FILE: drivers/block/aoe/aoeblk.c:50:
+	te = t + NTARGETS;
 	^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#195: FILE: drivers/block/aoe/aoeblk.c:51:
+	for (; t<te && *t; t++) {
 	         ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#195: FILE: drivers/block/aoe/aoeblk.c:51:
+	for (; t<te && *t; t++) {
 	        ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: drivers/block/aoe/aoeblk.c:54:
+		for (; ifp<e && ifp->nd; ifp++) {
 		                     ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#198: FILE: drivers/block/aoe/aoeblk.c:54:
+		for (; ifp<e && ifp->nd; ifp++) {
 		          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#199: FILE: drivers/block/aoe/aoeblk.c:55:
+			for (nnd=nds; nnd<nd; nnd++)
 			                  ^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#199: FILE: drivers/block/aoe/aoeblk.c:55:
+			for (nnd=nds; nnd<nd; nnd++)
 			        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#199: FILE: drivers/block/aoe/aoeblk.c:55:
+			for (nnd=nds; nnd<nd; nnd++)
 			                 ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#200: FILE: drivers/block/aoe/aoeblk.c:56:
+				if (*nnd == ifp->nd)
 				                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#202: FILE: drivers/block/aoe/aoeblk.c:58:
+			if (nnd == nd)
 			           ^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#202: FILE: drivers/block/aoe/aoeblk.c:58:
+			if (nnd == nd)
+			if (nd != ne)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: drivers/block/aoe/aoeblk.c:59:
+			if (nd != ne)
 			    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#204: FILE: drivers/block/aoe/aoeblk.c:60:
+				*nd++ = ifp->nd;
 				 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#204: FILE: drivers/block/aoe/aoeblk.c:60:
+				*nd++ = ifp->nd;
 				             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#209: FILE: drivers/block/aoe/aoeblk.c:64:
+	ne = nd;
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#210: FILE: drivers/block/aoe/aoeblk.c:65:
+	nd = nds;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: drivers/block/aoe/aoeblk.c:66:
+	if (*nd == NULL)
 	     ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd"
#211: FILE: drivers/block/aoe/aoeblk.c:66:
+	if (*nd == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#213: FILE: drivers/block/aoe/aoeblk.c:68:
+	for (p=page; nd<ne; nd++)
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#213: FILE: drivers/block/aoe/aoeblk.c:68:
+	for (p=page; nd<ne; nd++)
 	                    ^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#213: FILE: drivers/block/aoe/aoeblk.c:68:
+	for (p=page; nd<ne; nd++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#213: FILE: drivers/block/aoe/aoeblk.c:68:
+	for (p=page; nd<ne; nd++)
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#214: FILE: drivers/block/aoe/aoeblk.c:69:
+		p += snprintf(p, PAGE_SIZE - (p-page), "%s%s",
 		                               ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#215: FILE: drivers/block/aoe/aoeblk.c:70:
+			p == page ? "" : ",", (*nd)->name);
 			                        ^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#216: FILE: drivers/block/aoe/aoeblk.c:71:
+	p += snprintf(p, PAGE_SIZE - (p-page), "\n");
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#217: FILE: drivers/block/aoe/aoeblk.c:72:
+	return p-page;
 	        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#225: FILE: drivers/block/aoe/aoeblk.c:170:
+	if (bio == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#226: FILE: drivers/block/aoe/aoeblk.c:171:
+		printk(KERN_ERR "aoe: bio is NULL\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: drivers/block/aoe/aoeblk.c:172:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d"
#231: FILE: drivers/block/aoe/aoeblk.c:176:
+	if (d == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#232: FILE: drivers/block/aoe/aoeblk.c:177:
+		printk(KERN_ERR "aoe: bd_disk->private_data is NULL\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#233: FILE: drivers/block/aoe/aoeblk.c:178:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio->bi_io_vec"
#236: FILE: drivers/block/aoe/aoeblk.c:181:
+	} else if (bio->bi_io_vec == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#237: FILE: drivers/block/aoe/aoeblk.c:182:
+		printk(KERN_ERR "aoe: bi_io_vec is NULL\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: drivers/block/aoe/aoeblk.c:183:
+		BUG();

WARNING:SIZEOF_PARENTHESIS: sizeof gd->disk_name should be sizeof(gd->disk_name)
#268: FILE: drivers/block/aoe/aoeblk.c:286:
+	snprintf(gd->disk_name, sizeof gd->disk_name, "etherd/e%ld.%d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: drivers/block/aoe/aoeblk.c:287:
+	snprintf(gd->disk_name, sizeof gd->disk_name, "etherd/e%ld.%d",
 		d->aoemajor, d->aoeminor);

WARNING:SIZEOF_PARENTHESIS: sizeof h->src should be sizeof(h->src)
#378: FILE: drivers/block/aoe/aoecmd.c:73:
+	memcpy(h->src, t->ifp->nd->dev_addr, sizeof h->src);

WARNING:SIZEOF_PARENTHESIS: sizeof h->dst should be sizeof(h->dst)
#379: FILE: drivers/block/aoe/aoecmd.c:74:
+	memcpy(h->dst, t->addr, sizeof h->dst);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#391: FILE: drivers/block/aoe/aoecmd.c:100:
+	if (t->ifp >= &t->ifs[NAOEIFS] || t->ifp->nd == NULL)
 	                                          ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t->ifp->nd"
#391: FILE: drivers/block/aoe/aoecmd.c:100:
+	if (t->ifp >= &t->ifs[NAOEIFS] || t->ifp->nd == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#393: FILE: drivers/block/aoe/aoecmd.c:102:
+	if (t->ifp->nd == NULL) {
 	            ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t->ifp->nd"
#393: FILE: drivers/block/aoe/aoecmd.c:102:
+	if (t->ifp->nd == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#394: FILE: drivers/block/aoe/aoecmd.c:103:
+		printk(KERN_INFO "aoe: no interface to rotate to\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: drivers/block/aoe/aoecmd.c:104:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d->targets[0]"
#406: FILE: drivers/block/aoe/aoecmd.c:115:
+	if (d->targets[0] == NULL) {	/* shouldn't happen, but I'm paranoid */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#407: FILE: drivers/block/aoe/aoecmd.c:116:
+		printk(KERN_ERR "aoe: NULL TARGETS!\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#412: FILE: drivers/block/aoe/aoecmd.c:121:
+		if (t != d->htgt)
+		if ((*t)->ifp->nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#413: FILE: drivers/block/aoe/aoecmd.c:122:
+		if ((*t)->ifp->nd)
 		               ^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#413: FILE: drivers/block/aoe/aoecmd.c:122:
+		if ((*t)->ifp->nd)
+		if ((*t)->nout < (*t)->maxout) {

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#418: FILE: drivers/block/aoe/aoecmd.c:127:
+			for (; f<e; f++) {
 			        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#457: FILE: drivers/block/aoe/aoecmd.c:165:
+	if (f == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#539: FILE: drivers/block/aoe/aoecmd.c:227:
+	skb->dev = t->ifp->nd;
 	                   ^^

CHECK:SPACING: No space is necessary after a cast
#632: FILE: drivers/block/aoe/aoecmd.c:303:
+	ah = (struct aoe_atahdr *) (h+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#632: FILE: drivers/block/aoe/aoecmd.c:303:
+	ah = (struct aoe_atahdr *) (h+1);
 	                             ^

WARNING:SIZEOF_PARENTHESIS: sizeof h->dst should be sizeof(h->dst)
#654: FILE: drivers/block/aoe/aoecmd.c:313:
+	memcpy(h->dst, t->addr, sizeof h->dst);

WARNING:SIZEOF_PARENTHESIS: sizeof h->src should be sizeof(h->src)
#655: FILE: drivers/block/aoe/aoecmd.c:314:
+	memcpy(h->src, t->ifp->nd->dev_addr, sizeof h->src);

WARNING:SIZEOF_PARENTHESIS: sizeof *h should be sizeof(*h)
#683: FILE: drivers/block/aoe/aoecmd.c:332:
+			skb->len = sizeof *h + sizeof *ah + n;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#689: FILE: drivers/block/aoe/aoecmd.c:336:
+	skb->dev = t->ifp->nd;
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#698: FILE: drivers/block/aoe/aoecmd.c:360:
+getif(struct aoetgt *t, struct net_device *nd)
                                            ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#704: FILE: drivers/block/aoe/aoecmd.c:366:
+	for (; p<e; p++)
 	        ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#705: FILE: drivers/block/aoe/aoecmd.c:367:
+		if (p->nd == nd)
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#705: FILE: drivers/block/aoe/aoecmd.c:367:
+		if (p->nd == nd)
 		             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#711: FILE: drivers/block/aoe/aoecmd.c:373:
+addif(struct aoetgt *t, struct net_device *nd)
                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#718: FILE: drivers/block/aoe/aoecmd.c:380:
+	p->nd = nd;
 	   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#718: FILE: drivers/block/aoe/aoecmd.c:380:
+	p->nd = nd;
 	        ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#720: FILE: drivers/block/aoe/aoecmd.c:382:
+	p->lost = p->lostjumbo = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SIZEOF_PARENTHESIS: sizeof *ifp should be sizeof(*ifp)
#731: FILE: drivers/block/aoe/aoecmd.c:393:
+	n = (e - ifp) * sizeof *ifp;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#732: FILE: drivers/block/aoe/aoecmd.c:394:
+	memmove(ifp, ifp+1, n);
 	                ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#733: FILE: drivers/block/aoe/aoecmd.c:395:
+	e->nd = NULL;
 	   ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#745: FILE: drivers/block/aoe/aoecmd.c:407:
+	for (; f<e; f++) {
 	        ^

WARNING:SIZEOF_PARENTHESIS: sizeof ht->ifs should be sizeof(ht->ifs)
#761: FILE: drivers/block/aoe/aoecmd.c:423:
+	memset(ht->ifs, 0, sizeof ht->ifs);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#766: FILE: drivers/block/aoe/aoecmd.c:428:
+#define ATASCNT(raw) (((struct aoe_atahdr *)(((struct aoe_hdr *)raw)+1))->scnt)
                                                                     ^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#772: FILE: drivers/block/aoe/aoecmd.c:434:
+	struct aoetgt *t, **tt, **te;
 	                          ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#786: FILE: drivers/block/aoe/aoecmd.c:455:
+	te = tt + NTARGETS;
 	^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#787: FILE: drivers/block/aoe/aoecmd.c:456:
+	for (; tt<te && *tt; tt++) {
 	          ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#787: FILE: drivers/block/aoe/aoecmd.c:456:
+	for (; tt<te && *tt; tt++) {
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#791: FILE: drivers/block/aoe/aoecmd.c:460:
+		for (; f<e; f++) {
 		        ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#793: FILE: drivers/block/aoe/aoecmd.c:462:
+			if (f->tag == FREETAG
+			|| tsince(f->tag) < timeout)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#804: FILE: drivers/block/aoe/aoecmd.c:471:
+			if (n > HELPWAIT) /* see if another target can help */
+			if (tt != d->targets || d->targets[1])

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#815: FILE: drivers/block/aoe/aoecmd.c:482:
+			if (ifp && ++ifp->lost > (t->nframes << 1))
+			if (ifp != t->ifs || t->ifs[1].nd) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#816: FILE: drivers/block/aoe/aoecmd.c:483:
+			if (ifp != t->ifs || t->ifs[1].nd) {
 			                               ^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#821: FILE: drivers/block/aoe/aoecmd.c:488:
+			if (ATASCNT(aoe_hdr(f->skb)) > DEFAULTBCNT / 512)
+			if (ifp && ++ifp->lostjumbo > (t->nframes << 1))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#822: FILE: drivers/block/aoe/aoecmd.c:489:
+			if (ifp && ++ifp->lostjumbo > (t->nframes << 1))
+			if (ifp->maxbcnt != DEFAULTBCNT) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#824: FILE: drivers/block/aoe/aoecmd.c:491:
+				printk(KERN_INFO "aoe: e%ld.%d: too many lost jumbo on %s:%012llx - "

WARNING:SPLIT_STRING: quoted string split across lines
#825: FILE: drivers/block/aoe/aoecmd.c:492:
+				printk(KERN_INFO "aoe: e%ld.%d: too many lost jumbo on %s:%012llx - "
+					"falling back to %d frames.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#835: FILE: drivers/block/aoe/aoecmd.c:502:
+		if (t->nout == t->maxout)
+		if (t->maxout < t->nframes)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#836: FILE: drivers/block/aoe/aoecmd.c:503:
+		if (t->maxout < t->nframes)
+		if ((jiffies - t->lastwadj)/HZ > 10) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#837: FILE: drivers/block/aoe/aoecmd.c:504:
+		if ((jiffies - t->lastwadj)/HZ > 10) {
 		                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d->inprocess"
#877: FILE: drivers/block/aoe/aoecmd.c:540:
+	if (d->inprocess == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#920: FILE: drivers/block/aoe/aoecmd.c:627:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#937: FILE: drivers/block/aoe/aoecmd.c:662:
+	for(; t<e && *t; t++)
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#937: FILE: drivers/block/aoe/aoecmd.c:662:
+	for(; t<e && *t; t++)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#938: FILE: drivers/block/aoe/aoecmd.c:663:
+		if (memcmp((*t)->addr, addr, sizeof (*t)->addr) == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t"
#973: FILE: drivers/block/aoe/aoecmd.c:711:
+	if (t == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#974: FILE: drivers/block/aoe/aoecmd.c:712:
+		printk(KERN_INFO "aoe: can't find target e%ld.%d:%012llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#975: FILE: drivers/block/aoe/aoecmd.c:713:
+		printk(KERN_INFO "aoe: can't find target e%ld.%d:%012llx\n",
+			d->aoemajor, d->aoeminor,

CHECK:SPACING: No space is necessary after a cast
#976: FILE: drivers/block/aoe/aoecmd.c:714:
+			(unsigned long long) mac_addr(hin->src));

CHECK:SPACING: No space is necessary after a cast
#1059: FILE: drivers/block/aoe/aoecmd.c:786:
+			ataid_complete(d, t, (char *) (ahin+1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1059: FILE: drivers/block/aoe/aoecmd.c:786:
+			ataid_complete(d, t, (char *) (ahin+1));
 			                                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#1120: FILE: drivers/block/aoe/aoecmd.c:837:
+	if (f == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1143: FILE: drivers/block/aoe/aoecmd.c:857:
+	skb->dev = t->ifp->nd;
 	                   ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1154: FILE: drivers/block/aoe/aoecmd.c:868:
+	struct aoetgt *t, **tt, **te;
 	                          ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1158: FILE: drivers/block/aoe/aoecmd.c:872:
+	te = tt + NTARGETS;
 	^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1159: FILE: drivers/block/aoe/aoecmd.c:873:
+	for (; tt<te; tt++) {
 	          ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1159: FILE: drivers/block/aoe/aoecmd.c:873:
+	for (; tt<te; tt++) {
 	         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1160: FILE: drivers/block/aoe/aoecmd.c:874:
+		if (*tt == NULL)
[...]
+		else if (memcmp((*tt)->addr, addr, 6) > 0) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tt"
#1160: FILE: drivers/block/aoe/aoecmd.c:874:
+		if (*tt == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1163: FILE: drivers/block/aoe/aoecmd.c:877:
+			memmove(tt+1, tt, (void *)te-(void *)(tt+1));
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1163: FILE: drivers/block/aoe/aoecmd.c:877:
+			memmove(tt+1, tt, (void *)te-(void *)(tt+1));
 			                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1163: FILE: drivers/block/aoe/aoecmd.c:877:
+			memmove(tt+1, tt, (void *)te-(void *)(tt+1));
 			                                        ^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1167: FILE: drivers/block/aoe/aoecmd.c:881:
+	if (tt == te)
 	          ^^

WARNING:SIZEOF_PARENTHESIS: sizeof *t should be sizeof(*t)
#1170: FILE: drivers/block/aoe/aoecmd.c:884:
+	t = kcalloc(1, sizeof *t, GFP_ATOMIC);

WARNING:SIZEOF_PARENTHESIS: sizeof *f should be sizeof(*f)
#1171: FILE: drivers/block/aoe/aoecmd.c:885:
+	f = kcalloc(nframes, sizeof *f, GFP_ATOMIC);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1177: FILE: drivers/block/aoe/aoecmd.c:891:
+		for (; f<e; f++) {
 		        ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1191: FILE: drivers/block/aoe/aoecmd.c:905:
+		if (f)
+			kfree(f);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1193: FILE: drivers/block/aoe/aoecmd.c:907:
+		if (t)
+			kfree(t);

WARNING:SIZEOF_PARENTHESIS: sizeof t->addr should be sizeof(t->addr)
#1197: FILE: drivers/block/aoe/aoecmd.c:911:
+	memcpy(t->addr, addr, sizeof t->addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1236: FILE: drivers/block/aoe/aoecmd.c:967:
+			printk(KERN_INFO "aoe: device addtgt failure; too many targets?\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1243: FILE: drivers/block/aoe/aoecmd.c:974:
+		if (!(ifp = addif(t, skb->dev))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1244: FILE: drivers/block/aoe/aoecmd.c:975:
+			printk(KERN_INFO "aoe: device addif failure; too many interfaces?\n");

CHECK:SPACING: No space is necessary after a cast
#1264: FILE: drivers/block/aoe/aoecmd.c:991:
+				(unsigned long long) mac_addr(t->addr));

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1291: FILE: drivers/block/aoe/aoecmd.c:1013:
+	struct aoetgt **t, **te;
 	                     ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1297: FILE: drivers/block/aoe/aoecmd.c:1019:
+	te = t + NTARGETS;
 	^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1298: FILE: drivers/block/aoe/aoecmd.c:1020:
+	for (; t<te && *t; t++) {
 	         ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1298: FILE: drivers/block/aoe/aoecmd.c:1020:
+	for (; t<te && *t; t++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1302: FILE: drivers/block/aoe/aoecmd.c:1024:
+		for (; p<e; p++) {
 		        ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1303: FILE: drivers/block/aoe/aoecmd.c:1025:
+			p->lostjumbo = p->lost = 0;

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1316: FILE: drivers/block/aoe/aoedev.c:18:
+	struct aoetgt **t, **te;
 	                     ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1327: FILE: drivers/block/aoe/aoedev.c:22:
+	te = t + NTARGETS;
 	^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1328: FILE: drivers/block/aoe/aoedev.c:23:
+	for (; t<te && *t; t++) {
 	         ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1328: FILE: drivers/block/aoe/aoedev.c:23:
+	for (; t<te && *t; t++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1331: FILE: drivers/block/aoe/aoedev.c:26:
+		for (; f<e; f++)
 		        ^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1393: FILE: drivers/block/aoe/aoedev.c:64:
+	struct aoetgt **t, **te;
 	                     ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1409: FILE: drivers/block/aoe/aoedev.c:70:
+	te = t + NTARGETS;
 	^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#1410: FILE: drivers/block/aoe/aoedev.c:71:
+	for (; t<te && *t; t++) {
 	         ^^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1410: FILE: drivers/block/aoe/aoedev.c:71:
+	for (; t<te && *t; t++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1413: FILE: drivers/block/aoe/aoedev.c:74:
+		for (; f<e; f->tag = FREETAG, f->buf = NULL, f++) {
 		        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f->buf"
#1414: FILE: drivers/block/aoe/aoedev.c:75:
+			if (f->tag == FREETAG || f->buf == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#1418: FILE: drivers/block/aoe/aoedev.c:79:
+			if (--buf->nframesout == 0)
+			if (buf != d->inprocess) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1469: FILE: drivers/block/aoe/aoedev.c:123:
+	if (d || !(d = kcalloc(1, sizeof *d, GFP_ATOMIC))) {

WARNING:SIZEOF_PARENTHESIS: sizeof *d should be sizeof(*d)
#1469: FILE: drivers/block/aoe/aoedev.c:123:
+	if (d || !(d = kcalloc(1, sizeof *d, GFP_ATOMIC))) {

CHECK:SPACING: No space is necessary after a cast
#1476: FILE: drivers/block/aoe/aoedev.c:130:
+	d->timer.data = (ulong) d;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1502: FILE: drivers/block/aoe/aoedev.c:155:
+	for (; f<e; f++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1529: FILE: drivers/block/aoe/aoedev.c:175:
+	for (; t<e && *t; t++)
 	        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1544: FILE: drivers/block/aoe/aoenet.c:136:
+			printk(KERN_ERR "aoe: error packet from %d.%d@%s; ecode=%d '%s'\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413103.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 92 warnings, 38 checks, 1445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413103.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
