WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: include/linux/rootmem.h:1:
+#ifndef _LINUX_ROOTMEM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#48: FILE: include/linux/rootmem.h:7:
+extern void rootmem_register_node(int nid, unsigned long start,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#49: FILE: include/linux/rootmem.h:8:
+extern void rootmem_register_node(int nid, unsigned long start,
+				unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: include/linux/rootmem.h:10:
+extern unsigned long rootmem_map_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#53: FILE: include/linux/rootmem.h:12:
+extern void rootmem_setup(unsigned long mapstart);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/rootmem.h:14:
+extern unsigned long rootmem_release_node(int nid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/rootmem.h:16:
+extern void rootmem_free(unsigned long addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: include/linux/rootmem.h:17:
+extern int rootmem_reserve(unsigned long addr, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: include/linux/rootmem.h:18:
+extern int rootmem_reserve(unsigned long addr, unsigned long size,
+			int exclusive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/rootmem.h:20:
+extern void *__rootmem_alloc_node(int nid, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: include/linux/rootmem.h:21:
+extern void *__rootmem_alloc_node(int nid, unsigned long size,
+			unsigned long align, unsigned long goal,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#94: FILE: include/linux/rootmem.h:53:
+typedef void *bootmem_data_t;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#104: FILE: include/linux/rootmem.h:63:
+}
+static inline void free_bootmem_node(pg_data_t *pgdat, unsigned long addr,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: include/linux/rootmem.h:64:
+static inline void free_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+				unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#109: FILE: include/linux/rootmem.h:68:
+}
+static inline int reserve_bootmem_node(pg_data_t *pgdat, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: include/linux/rootmem.h:69:
+static inline int reserve_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+				unsigned long size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/rootmem.h:76:
+static inline int reserve_bootmem(unsigned long addr, unsigned long size,
+				int flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#121: FILE: include/linux/rootmem.h:80:
+}
+static inline void *alloc_bootmem(unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#125: FILE: include/linux/rootmem.h:84:
+}
+static inline void *alloc_bootmem_low(unsigned long size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#129: FILE: include/linux/rootmem.h:88:
+}
+static inline void *alloc_bootmem_pages(unsigned long nr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#133: FILE: include/linux/rootmem.h:92:
+}
+static inline void *alloc_bootmem_low_pages(unsigned long nr)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/rootmem.h:107:
+extern void *alloc_remap(int nid, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/rootmem.h:113:
+extern void *alloc_large_system_hash(const char *tablename,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/linux/rootmem.h:114:
+extern void *alloc_large_system_hash(const char *tablename,
+				unsigned long bucketsize,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#175: FILE: mm/rootmem.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: mm/rootmem.c:54:
+void __init rootmem_register_node(int nid, unsigned long start,
+			unsigned long end)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: mm/rootmem.c:56:
+	BUG_ON(rootmem_functional);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#281: FILE: mm/rootmem.c:107:
+	printk(KERN_INFO "rootmem: %lu pages on %d node(s) - map @ pfn %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: mm/rootmem.c:108:
+	printk(KERN_INFO "rootmem: %lu pages on %d node(s) - map @ pfn %lx\n",
+		rootmem_max_pfn - rootmem_min_pfn, rootmem_nr_nodes,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#312: FILE: mm/rootmem.c:138:
+	BUG_ON(!rootmem_nr_nodes);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#369: FILE: mm/rootmem.c:195:
+	printk(KERN_INFO "rootmem: %lu pages released on node %i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: mm/rootmem.c:196:
+	printk(KERN_INFO "rootmem: %lu pages released on node %i\n",
+		count, nid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#377: FILE: mm/rootmem.c:203:
+	BUG_ON(!rootmem_functional);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#380: FILE: mm/rootmem.c:206:
+		printk(KERN_ERR "rootmem request out of range: %lx-%lx, usable: %lx-%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: mm/rootmem.c:207:
+		printk(KERN_ERR "rootmem request out of range: %lx-%lx, usable: %lx-%lx\n",
+			start, end, rootmem_min_pfn, rootmem_max_pfn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: mm/rootmem.c:208:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#393: FILE: mm/rootmem.c:219:
+			printk(KERN_ERR "rootmem: double free of pfn %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: mm/rootmem.c:220:
+			printk(KERN_ERR "rootmem: double free of pfn %lx\n",
+				pfn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: mm/rootmem.c:221:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: mm/rootmem.c:226:
+static int __init __rootmem_reserve(unsigned long start, unsigned long end,
+				int exclusive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: mm/rootmem.c:271:
+int __init rootmem_reserve(unsigned long addr, unsigned long size,
+			int exclusive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: mm/rootmem.c:281:
+static void * __init ___rootmem_alloc_node(int nid, int align,
+				unsigned long start_pfn, unsigned long bytes)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#488: FILE: mm/rootmem.c:314:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: mm/rootmem.c:330:
+void * __init __rootmem_alloc_node(int nid, unsigned long size,
+			unsigned long align, unsigned long goal,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#522: FILE: mm/rootmem.c:348:
+	BUG_ON(align & (align - 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#523: FILE: mm/rootmem.c:349:
+	BUG_ON(limit && goal + size > limit);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286042.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 31 checks, 583 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286042.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
