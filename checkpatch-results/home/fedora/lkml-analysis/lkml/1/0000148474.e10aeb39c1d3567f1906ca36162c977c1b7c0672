WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#77: 
 Pp: a potential volatile, preserved page. There are two cases for page out:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: arch/s390/include/asm/page-states.h:1:
+#ifndef _ASM_S390_PAGE_STATES_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: arch/s390/include/asm/page-states.h:28:
+#define page_essa(_page,_command) ({		       \
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#374: FILE: arch/s390/kernel/traps.c:60:
+extern pgm_check_handler_t do_discard_fault;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#405: FILE: arch/s390/lib/uaccess_mvcos.c:50:
+		"11:"SLR"  %0,%4\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: arch/s390/lib/uaccess_mvcos.c:65:
+		EX_TABLE(10b,8b) EX_TABLE(11b,8b)
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: arch/s390/lib/uaccess_mvcos.c:65:
+		EX_TABLE(10b,8b) EX_TABLE(11b,8b)
 		                             ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#431: FILE: arch/s390/lib/uaccess_mvcos.c:97:
+		"7:"SLR"  %0,%4\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: arch/s390/lib/uaccess_mvcos.c:102:
+		EX_TABLE(6b,5b) EX_TABLE(7b,5b)
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: arch/s390/lib/uaccess_mvcos.c:102:
+		EX_TABLE(6b,5b) EX_TABLE(7b,5b)
 		                           ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#464: FILE: arch/s390/lib/uaccess_std.c:53:
+		"12:"SLR"  %0,%4\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: arch/s390/lib/uaccess_std.c:68:
+		EX_TABLE(10b,9b) EX_TABLE(11b,9b) EX_TABLE(12b,9b)
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: arch/s390/lib/uaccess_std.c:68:
+		EX_TABLE(10b,9b) EX_TABLE(11b,9b) EX_TABLE(12b,9b)
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: arch/s390/lib/uaccess_std.c:68:
+		EX_TABLE(10b,9b) EX_TABLE(11b,9b) EX_TABLE(12b,9b)
 		                                              ^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#513: FILE: arch/s390/mm/page-states.c:21:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SPACING: space required after that ',' (ctx:OxV)
#515: FILE: arch/s390/mm/page-states.c:23:
+extern void die(const char *,struct pt_regs *,long);
                             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#515: FILE: arch/s390/mm/page-states.c:23:
+extern void die(const char *,struct pt_regs *,long);
                                              ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#531: FILE: arch/s390/mm/page-states.c:36:
+	register int rc asm("1") = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#534: FILE: arch/s390/mm/page-states.c:39:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#538: FILE: arch/s390/mm/page-states.c:43:
+		EX_TABLE(0b,1b)
 		           ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#555: FILE: arch/s390/mm/page-states.c:58:
+	if (strcmp(parm, "no") == 0 || strcmp(parm, "off") == 0) {
 	           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#555: FILE: arch/s390/mm/page-states.c:58:
+	if (strcmp(parm, "no") == 0 || strcmp(parm, "off") == 0) {
 	                                      ^^^^

CHECK:SPACING: No space is necessary after a cast
#575: FILE: arch/s390/mm/page-states.c:74:
+	if (virt_to_phys((void *) kaddr) != address)

CHECK:SPACING: No space is necessary after a cast
#626: FILE: arch/s390/mm/page-states.c:108:
+		switch (*(unsigned char *) regs->psw.addr) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#638: FILE: arch/s390/mm/page-states.c:120:
+						*(__u16*)(regs->psw.addr + 2));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#641: FILE: arch/s390/mm/page-states.c:123:
+						*(__u16*)(regs->psw.addr + 4));

WARNING:TYPO_SPELLING: 'acknoledged' may be misspelled - perhaps 'acknowledged'?
#689: FILE: arch/s390/mm/page-states.c:168:
+ * the pages after all cpus acknoledged the signoff. That prevents
                             ^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#699: FILE: arch/s390/mm/page-states.c:178:
+	int cpu = smp_processor_id();
+	if (list_empty(cpu_list) &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#717: FILE: arch/s390/mm/page-states.c:191:
+			smp_wmb();

CHECK:SPACING: No space is necessary after a cast
#736: FILE: arch/s390/mm/page-states.c:210:
+	int cpu = (unsigned long) hcpu;

WARNING:LINE_SPACING: Missing a blank line after declarations
#771: FILE: mm/rmap.c:748:
+			int stable = page_make_stable(page);
+			VM_BUG_ON(!stable);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148474.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 10 warnings, 8 checks, 561 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148474.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
