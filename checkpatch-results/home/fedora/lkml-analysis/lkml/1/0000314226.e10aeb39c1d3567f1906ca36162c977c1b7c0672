WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#67: FILE: arch/ia64/hp/common/hwsw_iommu.c:23:
+extern ia64_mv_dma_map_single_attrs	swiotlb_map_single_attrs;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#68: FILE: arch/ia64/hp/common/hwsw_iommu.c:24:
+extern ia64_mv_dma_unmap_single_attrs	swiotlb_unmap_single_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#69: FILE: arch/ia64/hp/common/hwsw_iommu.c:25:
+extern ia64_mv_dma_map_sg_attrs		swiotlb_map_sg_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#70: FILE: arch/ia64/hp/common/hwsw_iommu.c:26:
+extern ia64_mv_dma_unmap_sg_attrs	swiotlb_unmap_sg_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#82: FILE: arch/ia64/hp/common/hwsw_iommu.c:34:
+extern ia64_mv_dma_map_single_attrs	sba_map_single_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#83: FILE: arch/ia64/hp/common/hwsw_iommu.c:35:
+extern ia64_mv_dma_unmap_single_attrs	sba_unmap_single_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#84: FILE: arch/ia64/hp/common/hwsw_iommu.c:36:
+extern ia64_mv_dma_map_sg_attrs		sba_map_sg_attrs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: arch/ia64/hp/common/hwsw_iommu.c:37:
+extern ia64_mv_dma_unmap_sg_attrs	sba_unmap_sg_attrs;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: arch/ia64/hp/common/hwsw_iommu.c:102:
+hwsw_map_single_attrs(struct device *dev, void *addr, size_t size, int dir,
+		       struct dma_attrs *attrs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: arch/ia64/hp/common/hwsw_iommu.c:113:
+hwsw_unmap_single_attrs(struct device *dev, dma_addr_t iova, size_t size,
+			 int dir, struct dma_attrs *attrs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: arch/ia64/hp/common/hwsw_iommu.c:124:
+hwsw_map_sg_attrs(struct device *dev, struct scatterlist *sglist, int nents,
+		   int dir, struct dma_attrs *attrs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: arch/ia64/hp/common/hwsw_iommu.c:135:
+hwsw_unmap_sg_attrs(struct device *dev, struct scatterlist *sglist, int nents,
+		     int dir, struct dma_attrs *attrs)

WARNING:SPLIT_STRING: quoted string split across lines
#206: FILE: arch/ia64/hp/common/sba_iommu.c:916:
+		DBG_BYPASS("sba_map_single_attrs() bypass mask/addr: "
+			   "0x%lx/0x%lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: arch/ia64/hp/common/sba_iommu.c:937:
+	if (sba_check_pdir(ioc,"Check before sba_map_single_attrs()"))
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: arch/ia64/hp/common/sba_iommu.c:967:
+	sba_check_pdir(ioc,"Check after sba_map_single_attrs()");
 	                  ^

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#310: FILE: arch/ia64/hp/common/sba_iommu.c:1434:
+		sglist->dma_address = sba_map_single_attrs(dev, sba_sg_address(sglist), sglist->length, dir, attrs);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: arch/ia64/hp/common/sba_iommu.c:1440:
+	if (sba_check_pdir(ioc,"Check before sba_map_sg_attrs()"))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: arch/ia64/hp/common/sba_iommu.c:1472:
+	if (sba_check_pdir(ioc,"Check after sba_map_sg_attrs()"))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#367: FILE: arch/ia64/hp/common/sba_iommu.c:1513:
+	sba_check_pdir(ioc,"Check before sba_unmap_sg_attrs()");
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: arch/ia64/hp/common/sba_iommu.c:1529:
+	sba_check_pdir(ioc,"Check after sba_unmap_sg_attrs()");
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: arch/ia64/sn/pci/pci_dma.c:172:
+dma_addr_t sn_dma_map_single_attrs(struct device *dev, void *cpu_addr,
+				  size_t size, int direction,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#607: FILE: include/asm-ia64/dma-mapping.h:26:
 }
+#define dma_map_single_attrs	platform_dma_map_single_attrs

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#613: FILE: include/asm-ia64/dma-mapping.h:32:
+}
+#define dma_map_sg_attrs	platform_dma_map_sg_attrs

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#619: FILE: include/asm-ia64/dma-mapping.h:38:
+}
+#define dma_unmap_single_attrs	platform_dma_unmap_single_attrs

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#625: FILE: include/asm-ia64/dma-mapping.h:44:
+}
+#define dma_unmap_sg_attrs	platform_dma_unmap_sg_attrs

CHECK:LINE_SPACING: Please don't use multiple blank lines
#650: FILE: include/asm-ia64/machvec.h:60:
 
+

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#652: FILE: include/asm-ia64/machvec.h:62:
+typedef dma_addr_t ia64_mv_dma_map_single_attrs (struct device *, void *, size_t, int, struct dma_attrs *);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#653: FILE: include/asm-ia64/machvec.h:63:
+typedef void ia64_mv_dma_unmap_single_attrs (struct device *, dma_addr_t, size_t, int, struct dma_attrs *);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#654: FILE: include/asm-ia64/machvec.h:64:
+typedef int ia64_mv_dma_map_sg_attrs (struct device *, struct scatterlist *, int, int, struct dma_attrs *);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#655: FILE: include/asm-ia64/machvec.h:65:
+typedef void ia64_mv_dma_unmap_sg_attrs (struct device *, struct scatterlist *, int, int, struct dma_attrs *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#852: FILE: include/linux/dma-attrs.h:1:
+#ifndef _DMA_ATTR_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#861: FILE: include/linux/dma-attrs.h:10:
+	unsigned flags;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#868: FILE: include/linux/dma-attrs.h:17:
+#define INIT_DMA_ATTRS(x) (x)->flags = 0;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#868: FILE: include/linux/dma-attrs.h:17:
+#define INIT_DMA_ATTRS(x) (x)->flags = 0;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LINE_SPACING: Missing a blank line after declarations
#896: FILE: include/linux/dma-attrs.h:45:
+		int ret = attrs->flags & (1 << attr);
+		return !!ret;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000314226.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 18 warnings, 10 checks, 884 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000314226.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
