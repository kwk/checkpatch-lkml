WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch provides the function leads a task, corresponding to specified user-id,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/cgroup.h:33:
+extern int cgroup_attach_by_uid(struct task_struct *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#152: FILE: kernel/cgroup.c:1306:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: kernel/cgroup.c:1320:
+				list_entry(l,
+					struct leadopt_entry, leadopt_link);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#174: FILE: kernel/cgroup.c:1328:
+			ret = path_lookup(cgpath, LOOKUP_DIRECTORY, &nd);
 			                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#177: FILE: kernel/cgroup.c:1331:
+			if (nd.path.dentry->d_fsdata == NULL) {
 			    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd.path.dentry->d_fsdata"
#177: FILE: kernel/cgroup.c:1331:
+			if (nd.path.dentry->d_fsdata == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#181: FILE: kernel/cgroup.c:1335:
+			ret = cgroup_attach_task(

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#182: FILE: kernel/cgroup.c:1336:
+				(struct cgroup *)(nd.path.dentry->d_fsdata),
 				                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#186: FILE: kernel/cgroup.c:1340:
+			path_put(&nd.path);
 			          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#194: FILE: kernel/cgroup.c:1348:
+	path_put(&nd.path);
 	          ^^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#216: FILE: kernel/cgroup.c:1370:
+				if (sscanf(value, "%d", &uid) != 1)
+					return -EIO;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!link"
#240: FILE: kernel/cgroup.c:1394:
+				if (link == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: kernel/cgroup.c:1400:
+				link->pathname = kmalloc((strlen(dirto)+1),
 				                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: kernel/cgroup.c:1401:
+				link->pathname = kmalloc((strlen(dirto)+1),
+								GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: kernel/cgroup.c:1404:
+				list_add(&link->leadopt_link,
+							&root->leadopt_list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l == &root->leadopt_list'
#256: FILE: kernel/cgroup.c:1410:
+	if (!erase && (l == &root->leadopt_list)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!link"
#258: FILE: kernel/cgroup.c:1412:
+		if (link == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: kernel/cgroup.c:1418:
+		link->pathname = kmalloc((strlen(dirto)+1), GFP_KERNEL);
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: kernel/cgroup.c:1428:
+static ssize_t cgroup_leadopt_read(struct cgroup *cgrp,
+				    struct cftype *cft,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#347: FILE: kernel/cgroup.c:2397:
+		if ((err = cgroup_add_file(cgrp, NULL, &cft_lead_option)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311321.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 8 warnings, 12 checks, 291 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311321.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
