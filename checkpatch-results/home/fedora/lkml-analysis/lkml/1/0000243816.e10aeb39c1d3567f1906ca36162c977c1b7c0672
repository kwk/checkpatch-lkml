WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Inaugurate copy-on-write credentials management.  This uses RCU to manage the

CHECK:SPACING: No space is necessary after a cast
#487: FILE: fs/nfsd/auth.c:70:
+	if (new->fsuid == (uid_t) -1)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#489: FILE: fs/nfsd/auth.c:72:
+	if (new->fsgid == (gid_t) -1)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#661: FILE: fs/nfsd/nfs4recover.c:426:
+		printk("NFSD: Unable to change credentials to find recovery"

WARNING:SPLIT_STRING: quoted string split across lines
#662: FILE: fs/nfsd/nfs4recover.c:427:
+		printk("NFSD: Unable to change credentials to find recovery"
+		       " directory: error %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#690: FILE: fs/nfsd/nfsfh.c:190:
+		struct cred *new = prepare_creds();
+		if (!new)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#785: FILE: include/linux/cred.h:88:
+extern void put_tgcred(struct thread_group_cred *tgcred);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#798: FILE: include/linux/cred.h:146:
+extern struct cred *prepare_creds(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#799: FILE: include/linux/cred.h:147:
+extern struct cred *prepare_usermodehelper_creds(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#800: FILE: include/linux/cred.h:148:
+extern int commit_creds(struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#800: FILE: include/linux/cred.h:148:
+extern int commit_creds(struct cred *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#801: FILE: include/linux/cred.h:149:
+extern void abort_creds(struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#801: FILE: include/linux/cred.h:149:
+extern void abort_creds(struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#802: FILE: include/linux/cred.h:150:
+extern const struct cred *override_creds(const struct cred *) __deprecated;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#803: FILE: include/linux/cred.h:151:
+extern void revert_creds(const struct cred *) __deprecated;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#804: FILE: include/linux/cred.h:152:
+extern void __init cred_init(void);

CHECK:SPACING: No space is necessary after a cast
#830: FILE: include/linux/cred.h:176:
+	return get_new_cred((struct cred *) cred);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: include/linux/cred.h:190:
+	BUG_ON(atomic_read(&(cred)->usage) <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xxx' - possible side-effects?
#854: FILE: include/linux/cred.h:275:
+#define task_cred_xxx(task, xxx)			\
+({							\
+	__typeof__(((struct cred *)NULL)->xxx) ___val;	\
+	rcu_read_lock();				\
+	___val = __task_cred((task))->xxx;		\
+	rcu_read_unlock();				\
+	___val;						\
 })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xxx' may be better as '(xxx)' to avoid precedence issues
#854: FILE: include/linux/cred.h:275:
+#define task_cred_xxx(task, xxx)			\
+({							\
+	__typeof__(((struct cred *)NULL)->xxx) ___val;	\
+	rcu_read_lock();				\
+	___val = __task_cred((task))->xxx;		\
+	rcu_read_unlock();				\
+	___val;						\
 })

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#915: FILE: include/linux/key.h:280:
+extern int install_thread_keyring_to_cred(struct cred *cred);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#971: FILE: include/linux/sched.h:1842:
+extern bool is_single_threaded(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#971: FILE: include/linux/sched.h:1842:
+extern bool is_single_threaded(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#990: FILE: include/linux/security.h:52:
+extern int cap_capset(struct cred *new, const struct cred *old,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#996: FILE: include/linux/security.h:57:
+extern int cap_bprm_apply_creds(struct linux_binprm *bprm, int unsafe);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1005: FILE: include/linux/security.h:64:
+extern int cap_task_fix_setuid(struct cred *new, const struct cred *old, int flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1135: FILE: include/linux/security.h:1286:
+	int (*capset) (struct cred *new,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1148: FILE: include/linux/security.h:1302:
+	int (*bprm_apply_creds) (struct linux_binprm *bprm, int unsafe);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1164: FILE: include/linux/security.h:1398:
+	int (*task_fix_setuid) (struct cred *new, const struct cred *old,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1184: FILE: include/linux/security.h:1524:
+	int (*key_alloc) (struct key *key, const struct cred *cred, unsigned long flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1252: FILE: include/linux/security.h:1750:
+static inline int security_capset(struct cred *new,
+				   const struct cred *old,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1511: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1516: FILE: kernel/cred-internals.h:1:
+/* Internal credentials stuff

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1530: FILE: kernel/cred-internals.h:15:
+extern struct cred *alloc_creds(const struct cred *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cred *' should also have an identifier name
#1530: FILE: kernel/cred-internals.h:15:
+extern struct cred *alloc_creds(const struct cred *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#1530: FILE: kernel/cred-internals.h:15:
+extern struct cred *alloc_creds(const struct cred *, gfp_t);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'put_cred_rcu', this function's name, in a string
#1572: FILE: kernel/cred.c:87:
+		panic("CRED: put_cred_rcu() sees %p with usage %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1595: FILE: kernel/cred.c:107:
+	BUG_ON(atomic_read(&cred->usage) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1634: FILE: kernel/cred.c:146:
+	BUG_ON(atomic_read(&task->cred->usage) < 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1709: FILE: kernel/cred.c:221:
+	BUG_ON(atomic_read(&new->usage) != 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1751: FILE: kernel/cred.c:253:
+	 * had one */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1761: FILE: kernel/cred.c:263:
+	 * bit */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1813: FILE: kernel/cred.c:302:
+	BUG_ON(atomic_read(&new->usage) < 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1814: FILE: kernel/cred.c:303:
+	BUG_ON(atomic_read(&task->cred->usage) < 1);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1827: FILE: kernel/cred.c:316:
+		smp_wmb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1885: FILE: kernel/cred.c:366:
+	BUG_ON(atomic_read(&new->usage) < 1);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1929: FILE: kernel/cred.c:410:
+				     0, SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL);
 				                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2031: FILE: kernel/kmod.c:139:
+	BUG_ON(atomic_read(&sub_info->cred->usage) != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2061: FILE: kernel/kmod.c:246:
+	BUG_ON(atomic_read(&sub_info->cred->usage) != 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2083: FILE: kernel/kmod.c:397:
+	struct thread_group_cred *tgcred = info->cred->tgcred;
+	key_put(tgcred->session_keyring);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2086: FILE: kernel/kmod.c:400:
+	BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2095: FILE: kernel/kmod.c:469:
+	BUG_ON(atomic_read(&sub_info->cred->usage) != 1);

WARNING:TYPO_SPELLING: 'appopriate' may be misspelled - perhaps 'appropriate'?
#2136: FILE: kernel/signal.c:182:
+ *   appopriate lock must be held to stop the target task from exiting
      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#2175: FILE: kernel/sys.c:183:
+			user = (struct user_struct *) cred->user;

CHECK:SPACING: No space is necessary after a cast
#2243: FILE: kernel/sys.c:515:
+	    (egid != (gid_t) -1 && egid != old->gid))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2290: FILE: kernel/sys.c:548:
+		new->gid = new->egid = new->sgid = new->fsgid = gid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2292: FILE: kernel/sys.c:550:
+		new->egid = new->fsgid = gid;

CHECK:SPACING: No space is necessary after a cast
#2402: FILE: kernel/sys.c:637:
+	    (euid != (uid_t) -1 && euid != old->uid))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2460: FILE: kernel/sys.c:680:
+		new->suid = new->uid = uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2473: FILE: kernel/sys.c:689:
+	new->fsuid = new->euid = uid;

CHECK:SPACING: No space is necessary after a cast
#2521: FILE: kernel/sys.c:724:
+		if (ruid != (uid_t) -1 && ruid != old->uid &&

CHECK:SPACING: No space is necessary after a cast
#2524: FILE: kernel/sys.c:727:
+		if (euid != (uid_t) -1 && euid != old->uid &&

CHECK:SPACING: No space is necessary after a cast
#2527: FILE: kernel/sys.c:730:
+		if (suid != (uid_t) -1 && suid != old->uid &&

CHECK:SPACING: No space is necessary after a cast
#2549: FILE: kernel/sys.c:741:
+	if (euid != (uid_t) -1)

CHECK:SPACING: No space is necessary after a cast
#2608: FILE: kernel/sys.c:790:
+		if (rgid != (gid_t) -1 && rgid != old->gid &&

CHECK:SPACING: No space is necessary after a cast
#2611: FILE: kernel/sys.c:793:
+		if (egid != (gid_t) -1 && egid != old->gid &&

CHECK:SPACING: No space is necessary after a cast
#2614: FILE: kernel/sys.c:796:
+		if (sgid != (gid_t) -1 && sgid != old->gid &&

CHECK:SPACING: No space is necessary after a cast
#2623: FILE: kernel/sys.c:803:
+	if (egid != (gid_t) -1)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2817: FILE: kernel/sys.c:1719:
+	if (error != -ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2939: FILE: lib/is_single_threaded.c:1:
+/* Function to determine if a thread group is single threaded or not

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3201: FILE: security/commoncap.c:355:
+int cap_bprm_apply_creds (struct linux_binprm *bprm, int unsafe)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3237: FILE: security/commoncap.c:383:
+	new->suid = new->euid = new->fsuid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3238: FILE: security/commoncap.c:384:
+	new->sgid = new->egid = new->fsgid = bprm->e_gid;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3423: FILE: security/commoncap.c:648:
+		     & (new->securebits ^ arg2))			/*[1]*/
+		    || (new->securebits & SECURE_ALL_LOCKS & ~arg2)	/*[2]*/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3424: FILE: security/commoncap.c:649:
+		    || (new->securebits & SECURE_ALL_LOCKS & ~arg2)	/*[2]*/
+		    || (arg2 & ~(SECURE_ALL_LOCKS | SECURE_ALL_BITS))	/*[3]*/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3425: FILE: security/commoncap.c:650:
+		    || (arg2 & ~(SECURE_ALL_LOCKS | SECURE_ALL_BITS))	/*[3]*/
+		    || (cap_capable(current, CAP_SETPCAP) != 0)		/*[4]*/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#3481: FILE: security/commoncap.c:690:
+		error = -ENOSYS;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3526: FILE: security/keys/internal.h:29:
+	printk(KERN_DEBUG "   "FMT"\n", ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3526: FILE: security/keys/internal.h:29:
+	printk(KERN_DEBUG "   "FMT"\n", ##__VA_ARGS__)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3550: FILE: security/keys/internal.h:113:
+extern int install_thread_keyring_to_cred(struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#3550: FILE: security/keys/internal.h:113:
+extern int install_thread_keyring_to_cred(struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3551: FILE: security/keys/internal.h:114:
+extern int install_process_keyring_to_cred(struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#3551: FILE: security/keys/internal.h:114:
+extern int install_process_keyring_to_cred(struct cred *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3906: FILE: security/keys/keyring.c:307:
+        err = key_task_permission(keyring_ref, cred, KEY_SEARCH);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3906: FILE: security/keys/keyring.c:307:
+        err = key_task_permission(keyring_ref, cred, KEY_SEARCH);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4118: FILE: security/keys/process_keys.c:150:
+	BUG_ON(new->thread_keyring);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4172: FILE: security/keys/process_keys.c:194:
+ * - we $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4361: FILE: security/keys/process_keys.c:301:
+	 * share */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4521: FILE: security/keys/process_keys.c:743:
+	 * ENOMEM */

CHECK:SPACING: No space is necessary after a cast
#4961: FILE: security/selinux/hooks.c:163:
+	struct cred *cred = (struct cred *) current->cred;

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#4967: FILE: security/selinux/hooks.c:168:
 	if (!tsec)
+		panic("SELinux:  Failed to initialize initial task.\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4970: FILE: security/selinux/hooks.c:170:
+	tsec->osid = tsec->sid = SECINITSID_KERNEL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#5166: FILE: security/selinux/hooks.c:3281:
+	struct task_security_struct *tsec = cred->security;
+	cred->security = NULL;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5232: FILE: security/selinux/hooks.c:3400:
+	   upon context transitions.  See selinux_bprm_committing_creds. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred->security"
#5642: FILE: security/smack/smack_lsm.c:2416:
+	if (cred->security == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5657: FILE: security/smack/smack_lsm.c:2590:
+^I.capset = ^I^I^Icap_capset,$

CHECK:SPACING: No space is necessary after a cast
#5696: FILE: security/smack/smack_lsm.c:2740:
+	cred = (struct cred *) current->cred;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243816.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 47 warnings, 48 checks, 4982 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243816.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
