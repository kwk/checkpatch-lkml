WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This file defines prototypes and constants that are needed for internal use.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: include/linux/ccs_common.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#41: FILE: include/linux/ccs_common.h:2:
+ * include/linux/ccs_common.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#92: FILE: include/linux/ccs_common.h:53:
+#define LIST1_HEAD(name) struct list1_head name = LIST1_HEAD_INIT(name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#112: FILE: include/linux/ccs_common.h:73:
+#define list1_for_each(pos, head)					\
+	for (pos = (head)->next; prefetch(pos->next), pos != (head);	\
+	     pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#112: FILE: include/linux/ccs_common.h:73:
+#define list1_for_each(pos, head)					\
+	for (pos = (head)->next; prefetch(pos->next), pos != (head);	\
+	     pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#122: FILE: include/linux/ccs_common.h:83:
+#define list1_for_each_entry(pos, head, member)				\
+	for (pos = list1_entry((head)->next, typeof(*pos), member);	\
+	     prefetch(pos->member.next), &pos->member != (head);        \
+	     pos = list1_entry(pos->member.next, typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#122: FILE: include/linux/ccs_common.h:83:
+#define list1_for_each_entry(pos, head, member)				\
+	for (pos = list1_entry((head)->next, typeof(*pos), member);	\
+	     prefetch(pos->member.next), &pos->member != (head);        \
+	     pos = list1_entry(pos->member.next, typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#122: FILE: include/linux/ccs_common.h:83:
+#define list1_for_each_entry(pos, head, member)				\
+	for (pos = list1_entry((head)->next, typeof(*pos), member);	\
+	     prefetch(pos->member.next), &pos->member != (head);        \
+	     pos = list1_entry(pos->member.next, typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#136: FILE: include/linux/ccs_common.h:97:
+#define list1_for_each_cookie(pos, cookie, head)			\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cookie' - possible side-effects?
#136: FILE: include/linux/ccs_common.h:97:
+#define list1_for_each_cookie(pos, cookie, head)			\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cookie' may be better as '(cookie)' to avoid precedence issues
#136: FILE: include/linux/ccs_common.h:97:
+#define list1_for_each_cookie(pos, cookie, head)			\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#136: FILE: include/linux/ccs_common.h:97:
+#define list1_for_each_cookie(pos, cookie, head)			\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#137: FILE: include/linux/ccs_common.h:98:
+	for (({ if (!cookie)						\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: include/linux/ccs_common.h:116:
+	struct list1_head *pos = head;
+	new->next = head;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#269: FILE: include/linux/ccs_common.h:230:
+} __attribute__((__packed__));

WARNING:SPACING: Unnecessary space before function pointer arguments
#506: FILE: include/linux/ccs_common.h:467:
+	int (*read) (struct ccs_io_buffer *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccs_io_buffer *' should also have an identifier name
#506: FILE: include/linux/ccs_common.h:467:
+	int (*read) (struct ccs_io_buffer *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#507: FILE: include/linux/ccs_common.h:468:
+	int (*write) (struct ccs_io_buffer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccs_io_buffer *' should also have an identifier name
#507: FILE: include/linux/ccs_common.h:468:
+	int (*write) (struct ccs_io_buffer *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#508: FILE: include/linux/ccs_common.h:469:
+	int (*poll) (struct file *file, poll_table *wait);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#549: FILE: include/linux/ccs_common.h:510:
+	__attribute__ ((format(printf, 2, 3)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: include/linux/ccs_common.h:525:
+bool ccs_print_condition(struct ccs_io_buffer *head,
+			const struct condition_list *cond);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#629: FILE: include/linux/ccs_common.h:590:
+	__attribute__ ((format(printf, 1, 2)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299177.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 11 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299177.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
