WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: drivers/staging/vme/devices/vme_user.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#101: FILE: drivers/staging/vme/devices/vme_user.c:36:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#102: FILE: drivers/staging/vme/devices/vme_user.c:37:
+#include <asm/uaccess.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: drivers/staging/vme/devices/vme_user.c:45:
+ * ^I^I  0 = /dev/bus/vme/m0^I^IFirst master image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#111: FILE: drivers/staging/vme/devices/vme_user.c:46:
+ * ^I^I  1 = /dev/bus/vme/m1^I^ISecond master image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: drivers/staging/vme/devices/vme_user.c:47:
+ * ^I^I  2 = /dev/bus/vme/m2^I^IThird master image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: drivers/staging/vme/devices/vme_user.c:48:
+ * ^I^I  3 = /dev/bus/vme/m3^I^IFourth master image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#114: FILE: drivers/staging/vme/devices/vme_user.c:49:
+ * ^I^I  4 = /dev/bus/vme/s0^I^IFirst slave image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#115: FILE: drivers/staging/vme/devices/vme_user.c:50:
+ * ^I^I  5 = /dev/bus/vme/s1^I^ISecond slave image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: drivers/staging/vme/devices/vme_user.c:51:
+ * ^I^I  6 = /dev/bus/vme/s2^I^IThird slave image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#117: FILE: drivers/staging/vme/devices/vme_user.c:52:
+ * ^I^I  7 = /dev/bus/vme/s3^I^IFourth slave image$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: drivers/staging/vme/devices/vme_user.c:53:
+ * ^I^I  8 = /dev/bus/vme/ctl^I^IControl$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#120: FILE: drivers/staging/vme/devices/vme_user.c:55:
+ * ^I^IIt is expected that all VME bus drivers will use the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: drivers/staging/vme/devices/vme_user.c:56:
+ * ^I^Isame interface.  For interface documentation see$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: drivers/staging/vme/devices/vme_user.c:57:
+ * ^I^Ihttp://www.vmelinux.org/.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#148: FILE: drivers/staging/vme/devices/vme_user.c:83:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#159: FILE: drivers/staging/vme/devices/vme_user.c:94:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <dmaErrors>
#165: FILE: drivers/staging/vme/devices/vme_user.c:100:
+	unsigned long dmaErrors;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#175: FILE: drivers/staging/vme/devices/vme_user.c:110:
+static char driver_name[] = "vme_user";

CHECK:LINE_SPACING: Please don't use multiple blank lines
#184: FILE: drivers/staging/vme/devices/vme_user.c:119:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: drivers/staging/vme/devices/vme_user.c:126:
+static int vme_user_ioctl(struct inode *, struct file *, unsigned int,
+	unsigned long);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#195: FILE: drivers/staging/vme/devices/vme_user.c:130:
+static struct file_operations vme_user_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: drivers/staging/vme/devices/vme_user.c:131:
+        .open = vme_user_open,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/staging/vme/devices/vme_user.c:131:
+        .open = vme_user_open,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: drivers/staging/vme/devices/vme_user.c:132:
+        .release = vme_user_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/staging/vme/devices/vme_user.c:132:
+        .release = vme_user_release,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: drivers/staging/vme/devices/vme_user.c:133:
+        .read = vme_user_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/staging/vme/devices/vme_user.c:133:
+        .read = vme_user_read,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: drivers/staging/vme/devices/vme_user.c:134:
+        .write = vme_user_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: drivers/staging/vme/devices/vme_user.c:134:
+        .write = vme_user_write,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: drivers/staging/vme/devices/vme_user.c:135:
+        .llseek = vme_user_llseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: drivers/staging/vme/devices/vme_user.c:135:
+        .llseek = vme_user_llseek,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: drivers/staging/vme/devices/vme_user.c:136:
+        .ioctl = vme_user_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: drivers/staging/vme/devices/vme_user.c:136:
+        .ioctl = vme_user_ioctl,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: drivers/staging/vme/devices/vme_user.c:139:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: drivers/staging/vme/devices/vme_user.c:145:
+        statistics.reads = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: drivers/staging/vme/devices/vme_user.c:145:
+        statistics.reads = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: drivers/staging/vme/devices/vme_user.c:146:
+        statistics.writes = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/staging/vme/devices/vme_user.c:146:
+        statistics.writes = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: drivers/staging/vme/devices/vme_user.c:147:
+        statistics.ioctls = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: drivers/staging/vme/devices/vme_user.c:147:
+        statistics.ioctls = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: drivers/staging/vme/devices/vme_user.c:148:
+        statistics.irqs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: drivers/staging/vme/devices/vme_user.c:148:
+        statistics.irqs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: drivers/staging/vme/devices/vme_user.c:149:
+        statistics.berrs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: drivers/staging/vme/devices/vme_user.c:149:
+        statistics.berrs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: drivers/staging/vme/devices/vme_user.c:150:
+        statistics.dmaErrors = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: drivers/staging/vme/devices/vme_user.c:150:
+        statistics.dmaErrors = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: drivers/staging/vme/devices/vme_user.c:151:
+        statistics.timeouts = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: drivers/staging/vme/devices/vme_user.c:151:
+        statistics.timeouts = 0;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: drivers/staging/vme/devices/vme_user.c:156:
+	printk("Caught Location Monitor %d access\n", monitor);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: drivers/staging/vme/devices/vme_user.c:168:
+	printk("Running VME DMA test\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/staging/vme/devices/vme_user.c:172:
+	pattern_attr = vme_dma_pattern_attribute(0x0,
+		VME_DMA_PATTERN_WORD |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: drivers/staging/vme/devices/vme_user.c:175:
+	vme_attr = vme_dma_vme_attribute(0x10000, VME_A32,
+		VME_SCT, VME_D32);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: drivers/staging/vme/devices/vme_user.c:177:
+	retval = vme_dma_list_add(dma_list, pattern_attr,
+		vme_attr, 0x10000);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#243: FILE: drivers/staging/vme/devices/vme_user.c:178:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: drivers/staging/vme/devices/vme_user.c:181:
+	vme_attr = vme_dma_vme_attribute(0x20000, VME_A32,
+		VME_SCT, VME_D32);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: drivers/staging/vme/devices/vme_user.c:183:
+	retval = vme_dma_list_add(dma_list, pattern_attr,
+		vme_attr, 0x10000);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#254: FILE: drivers/staging/vme/devices/vme_user.c:189:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: drivers/staging/vme/devices/vme_user.c:190:
+	printk("Generating a VME interrupt\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: drivers/staging/vme/devices/vme_user.c:192:
+	printk("Interrupt returned\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: drivers/staging/vme/devices/vme_user.c:198:
+	data = vme_master_rmw(image[0].resource, 0x80000000, 0x00000000,
+		0x80000000, 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#264: FILE: drivers/staging/vme/devices/vme_user.c:199:
+	printk("RMW returned 0x%8.8x\n", data);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#266: FILE: drivers/staging/vme/devices/vme_user.c:201:
+
+

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#268: FILE: drivers/staging/vme/devices/vme_user.c:203:
+	printk("vme_lm_set:%d\n", vme_lm_set(vme_user_bridge, 0x60000, VME_A32, VME_SCT | VME_USER | VME_DATA));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#268: FILE: drivers/staging/vme/devices/vme_user.c:203:
+	printk("vme_lm_set:%d\n", vme_lm_set(vme_user_bridge, 0x60000, VME_A32, VME_SCT | VME_USER | VME_DATA));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#269: FILE: drivers/staging/vme/devices/vme_user.c:204:
+	printk("vme_lm_attach:%d\n", vme_lm_attach(vme_user_bridge, 0, lmcall));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#271: FILE: drivers/staging/vme/devices/vme_user.c:206:
+	printk("Board in VME slot:%d\n", vme_slot_get(vme_user_bridge));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!image[minor].resource"
#281: FILE: drivers/staging/vme/devices/vme_user.c:216:
+	if (image[minor].resource == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#282: FILE: drivers/staging/vme/devices/vme_user.c:217:
+		printk(KERN_ERR "No resources allocated for device\n");

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#315: FILE: drivers/staging/vme/devices/vme_user.c:250:
+ * We are going ot alloc a page during init per window for small transfers.
                 ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: drivers/staging/vme/devices/vme_user.c:256:
+static ssize_t resource_to_user(int minor, char __user *buf, size_t count,
+	loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: drivers/staging/vme/devices/vme_user.c:264:
+		copied = vme_master_read(image[minor].resource,
+			image[minor].kern_buf, count, *ppos);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#330: FILE: drivers/staging/vme/devices/vme_user.c:265:
+		if (copied < 0) {
+			return (int)copied;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/staging/vme/devices/vme_user.c:270:
+		retval = __copy_to_user(buf, image[minor].kern_buf,
+			(unsigned long)copied);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#338: FILE: drivers/staging/vme/devices/vme_user.c:273:
+			printk("User copy failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#344: FILE: drivers/staging/vme/devices/vme_user.c:279:
+		printk("Currently don't support large transfers\n");

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#355: FILE: drivers/staging/vme/devices/vme_user.c:290:
+ * We are going ot alloc a page during init per window for small transfers.
                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: drivers/staging/vme/devices/vme_user.c:296:
+static ssize_t resource_from_user(unsigned int minor, const char *buf,
+	size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: drivers/staging/vme/devices/vme_user.c:303:
+		retval = __copy_from_user(image[minor].kern_buf, buf,
+			(unsigned long)count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: drivers/staging/vme/devices/vme_user.c:310:
+		copied = vme_master_write(image[minor].resource,
+			image[minor].kern_buf, copied, *ppos);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#378: FILE: drivers/staging/vme/devices/vme_user.c:313:
+		printk("Currently don't support large transfers\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: drivers/staging/vme/devices/vme_user.c:324:
+static ssize_t buffer_to_user(unsigned int minor, char __user *buf,
+	size_t count, loff_t *ppos)

CHECK:BRACES: braces {} should be used on all arms of this statement
#397: FILE: drivers/staging/vme/devices/vme_user.c:332:
+	if (retval != 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#399: FILE: drivers/staging/vme/devices/vme_user.c:334:
+		printk(KERN_WARNING "Partial copy to userspace\n");

CHECK:BRACES: Unbalanced braces around else statement
#400: FILE: drivers/staging/vme/devices/vme_user.c:335:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: drivers/staging/vme/devices/vme_user.c:343:
+static ssize_t buffer_from_user(unsigned int minor, const char *buf,
+	size_t count, loff_t *ppos)

CHECK:BRACES: braces {} should be used on all arms of this statement
#416: FILE: drivers/staging/vme/devices/vme_user.c:351:
+	if (retval != 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#418: FILE: drivers/staging/vme/devices/vme_user.c:353:
+		printk(KERN_WARNING "Partial copy to userspace\n");

CHECK:BRACES: Unbalanced braces around else statement
#419: FILE: drivers/staging/vme/devices/vme_user.c:354:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: drivers/staging/vme/devices/vme_user.c:362:
+static ssize_t vme_user_read(struct file *file, char *buf, size_t count,
+			loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#427: FILE: drivers/staging/vme/devices/vme_user.c:362:
+			loff_t * ppos)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#451: FILE: drivers/staging/vme/devices/vme_user.c:386:
+	switch (type[minor]){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: drivers/staging/vme/devices/vme_user.c:406:
+static ssize_t vme_user_write(struct file *file, const char *buf, size_t count,
+			 loff_t *ppos)

ERROR:SPACING: space required before the open brace '{'
#494: FILE: drivers/staging/vme/devices/vme_user.c:429:
+	switch (type[minor]){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#515: FILE: drivers/staging/vme/devices/vme_user.c:450:
+	printk(KERN_ERR "Llseek currently incomplete\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: drivers/staging/vme/devices/vme_user.c:455:
+static int vme_user_ioctl(struct inode *inode, struct file *file,
+	unsigned int cmd, unsigned long arg)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#523: FILE: drivers/staging/vme/devices/vme_user.c:458:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <copyRet>
#526: FILE: drivers/staging/vme/devices/vme_user.c:461:
+	unsigned long copyRet;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: drivers/staging/vme/devices/vme_user.c:475:
+			copyRet = copy_from_user(&slave, (char *)arg,
+				sizeof(slave));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#542: FILE: drivers/staging/vme/devices/vme_user.c:477:
+				printk(KERN_WARNING "Partial copy from "

WARNING:SPLIT_STRING: quoted string split across lines
#543: FILE: drivers/staging/vme/devices/vme_user.c:478:
+				printk(KERN_WARNING "Partial copy from "
+					"userspace\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#553: FILE: drivers/staging/vme/devices/vme_user.c:488:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <iRegs>
#557: FILE: drivers/staging/vme/devices/vme_user.c:492:
+			ret_val = vme_slave_get(minor, &iRegs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: drivers/staging/vme/devices/vme_user.c:495:
+			copyRet = copy_to_user((char *)arg, &slave,
+				sizeof(slave));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#562: FILE: drivers/staging/vme/devices/vme_user.c:497:
+				printk(KERN_WARNING "Partial copy to "

WARNING:SPLIT_STRING: quoted string split across lines
#563: FILE: drivers/staging/vme/devices/vme_user.c:498:
+				printk(KERN_WARNING "Partial copy to "
+					"userspace\n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#568: FILE: drivers/staging/vme/devices/vme_user.c:503:
+			return ret_val;
+			break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#577: FILE: drivers/staging/vme/devices/vme_user.c:512:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#581: FILE: drivers/staging/vme/devices/vme_user.c:516:
+static void buf_unalloc (int num)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#585: FILE: drivers/staging/vme/devices/vme_user.c:520:
+		printk(KERN_DEBUG "UniverseII:Releasing buffer at %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: drivers/staging/vme/devices/vme_user.c:521:
+		printk(KERN_DEBUG "UniverseII:Releasing buffer at %p\n",
+			image[num].pci_buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: drivers/staging/vme/devices/vme_user.c:525:
+		vme_free_consistent(image[num].resource, image[num].size_buf,
+			image[num].kern_buf, image[num].pci_buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#598: FILE: drivers/staging/vme/devices/vme_user.c:533:
+		printk(KERN_DEBUG "UniverseII: Buffer not allocated\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: drivers/staging/vme/devices/vme_user.c:539:
+        .name = driver_name,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/staging/vme/devices/vme_user.c:539:
+        .name = driver_name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: drivers/staging/vme/devices/vme_user.c:540:
+        .probe = vme_user_probe,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: drivers/staging/vme/devices/vme_user.c:540:
+        .probe = vme_user_probe,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#608: FILE: drivers/staging/vme/devices/vme_user.c:543:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#617: FILE: drivers/staging/vme/devices/vme_user.c:552:
+	int retval;
+	printk(KERN_INFO "VME User Space Access Driver\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#617: FILE: drivers/staging/vme/devices/vme_user.c:552:
+	printk(KERN_INFO "VME User Space Access Driver\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#618: FILE: drivers/staging/vme/devices/vme_user.c:553:
+	printk("vme_user_driver:%p\n", &vme_user_driver);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#620: FILE: drivers/staging/vme/devices/vme_user.c:555:
+	printk("vme_register_driver returned %d\n", retval);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#633: FILE: drivers/staging/vme/devices/vme_user.c:568:
+	printk("Running vme_user_probe()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_user_probe', this function's name, in a string
#633: FILE: drivers/staging/vme/devices/vme_user.c:568:
+	printk("Running vme_user_probe()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around image[i].sem
#642: FILE: drivers/staging/vme/devices/vme_user.c:577:
+		init_MUTEX(&(image[i].sem));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: drivers/staging/vme/devices/vme_user.c:588:
+	err = register_chrdev_region(MKDEV(VME_MAJOR, 0), VME_DEVS,
+		driver_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#655: FILE: drivers/staging/vme/devices/vme_user.c:590:
+		printk(KERN_WARNING "%s: Error getting Major Number %d for "

WARNING:SPLIT_STRING: quoted string split across lines
#656: FILE: drivers/staging/vme/devices/vme_user.c:591:
+		printk(KERN_WARNING "%s: Error getting Major Number %d for "
+		"driver.\n", driver_name, VME_MAJOR);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#666: FILE: drivers/staging/vme/devices/vme_user.c:601:
+		printk(KERN_WARNING "%s: cdev_all failed\n", driver_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/staging/vme/devices/vme_user.c:609:
+		image[i].resource = vme_slave_request(vme_user_bridge,
+			VME_A16, VME_SCT);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!image[i].resource"
#675: FILE: drivers/staging/vme/devices/vme_user.c:610:
+		if (image[i].resource == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#676: FILE: drivers/staging/vme/devices/vme_user.c:611:
+			printk(KERN_WARNING "Unable to allocate slave "

WARNING:SPLIT_STRING: quoted string split across lines
#677: FILE: drivers/staging/vme/devices/vme_user.c:612:
+			printk(KERN_WARNING "Unable to allocate slave "
+				"resource\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: drivers/staging/vme/devices/vme_user.c:617:
+		image[i].kern_buf = vme_alloc_consistent(image[i].resource,
+			image[i].size_buf, &(image[i].pci_buf));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around image[i].pci_buf
#682: FILE: drivers/staging/vme/devices/vme_user.c:617:
+			image[i].size_buf, &(image[i].pci_buf));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!image[i].kern_buf"
#683: FILE: drivers/staging/vme/devices/vme_user.c:618:
+		if (image[i].kern_buf == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#684: FILE: drivers/staging/vme/devices/vme_user.c:619:
+			printk(KERN_WARNING "Unable to allocate memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#685: FILE: drivers/staging/vme/devices/vme_user.c:620:
+			printk(KERN_WARNING "Unable to allocate memory for "
+				"buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/staging/vme/devices/vme_user.c:635:
+		image[i].resource = vme_master_request(vme_user_bridge,
+			VME_A32, VME_SCT, VME_D32);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!image[i].resource"
#701: FILE: drivers/staging/vme/devices/vme_user.c:636:
+		if (image[i].resource == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#702: FILE: drivers/staging/vme/devices/vme_user.c:637:
+			printk(KERN_WARNING "Unable to allocate master "

WARNING:SPLIT_STRING: quoted string split across lines
#703: FILE: drivers/staging/vme/devices/vme_user.c:638:
+			printk(KERN_WARNING "Unable to allocate master "
+				"resource\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: drivers/staging/vme/devices/vme_user.c:643:
+		image[i].kern_buf = vme_alloc_consistent(image[i].resource,
+			image[i].size_buf, &(image[i].pci_buf));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around image[i].pci_buf
#708: FILE: drivers/staging/vme/devices/vme_user.c:643:
+			image[i].size_buf, &(image[i].pci_buf));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!image[i].kern_buf"
#709: FILE: drivers/staging/vme/devices/vme_user.c:644:
+		if (image[i].kern_buf == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#710: FILE: drivers/staging/vme/devices/vme_user.c:645:
+			printk(KERN_WARNING "Unable to allocate memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#711: FILE: drivers/staging/vme/devices/vme_user.c:646:
+			printk(KERN_WARNING "Unable to allocate memory for "
+				"buffer\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#721: FILE: drivers/staging/vme/devices/vme_user.c:656:
+		err = vme_slave_set(image[i].resource, 1, 0x4000*(i-4),
 		                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#721: FILE: drivers/staging/vme/devices/vme_user.c:656:
+		err = vme_slave_set(image[i].resource, 1, 0x4000*(i-4),
 		                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: drivers/staging/vme/devices/vme_user.c:657:
+		err = vme_slave_set(image[i].resource, 1, 0x4000*(i-4),
+			0x4000, image[i].pci_buf, VME_A16,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#725: FILE: drivers/staging/vme/devices/vme_user.c:660:
+			printk(KERN_WARNING "Failed to configure window\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: drivers/staging/vme/devices/vme_user.c:666:
+		err = vme_master_set(image[i].resource, 1,
+			(0x10000 + (0x10000*i)), 0x10000,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#731: FILE: drivers/staging/vme/devices/vme_user.c:666:
+			(0x10000 + (0x10000*i)), 0x10000,
 			                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#734: FILE: drivers/staging/vme/devices/vme_user.c:669:
+			printk(KERN_WARNING "Failed to configure window\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#742: FILE: drivers/staging/vme/devices/vme_user.c:677:
+		printk(KERN_ERR "Error creating vme_user class.\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#748: FILE: drivers/staging/vme/devices/vme_user.c:683:
+	for (i=0; i<VME_DEVS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#748: FILE: drivers/staging/vme/devices/vme_user.c:683:
+	for (i=0; i<VME_DEVS; i++) {
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#751: FILE: drivers/staging/vme/devices/vme_user.c:686:
+			sprintf(name,"bus/vme/m%%d");
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#754: FILE: drivers/staging/vme/devices/vme_user.c:689:
+			sprintf(name,"bus/vme/ctl");
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#757: FILE: drivers/staging/vme/devices/vme_user.c:692:
+			sprintf(name,"bus/vme/s%%d");
 			            ^

WARNING:UNNECESSARY_BREAK: break is not useful after a goto
#762: FILE: drivers/staging/vme/devices/vme_user.c:697:
+			goto err_sysfs;
+			break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: drivers/staging/vme/devices/vme_user.c:702:
+			device_create(vme_user_sysfs_class, NULL,
+				MKDEV(VME_MAJOR, i), NULL, name,

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#768: FILE: drivers/staging/vme/devices/vme_user.c:703:
+				(type[i] == SLAVE_MINOR)? i - (MASTER_MAX + 1) : i);
 				                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#770: FILE: drivers/staging/vme/devices/vme_user.c:705:
+			printk("%s: Error creating sysfs device\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: drivers/staging/vme/devices/vme_user.c:706:
+			printk("%s: Error creating sysfs device\n",
+				driver_name);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#779: FILE: drivers/staging/vme/devices/vme_user.c:714:
+	/*
+	tests();

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'correcty' may be misspelled - perhaps 'correctly'?
#784: FILE: drivers/staging/vme/devices/vme_user.c:719:
+	/* Ensure counter set correcty to destroy all sysfs devices */
 	                      ^^^^^^^^

ERROR:SPACING: space required before the open brace '{'
#787: FILE: drivers/staging/vme/devices/vme_user.c:722:
+	while (i > 0){

WARNING:TYPO_SPELLING: 'correcty' may be misspelled - perhaps 'correctly'?
#793: FILE: drivers/staging/vme/devices/vme_user.c:728:
+	/* Ensure counter set correcty to unalloc all slave buffers */
 	                      ^^^^^^^^

ERROR:SPACING: space required before the open brace '{'
#796: FILE: drivers/staging/vme/devices/vme_user.c:731:
+	while (i > SLAVE_MINOR){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#815: FILE: drivers/staging/vme/devices/vme_user.c:750:
+	for(i=0; i<VME_DEVS; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#815: FILE: drivers/staging/vme/devices/vme_user.c:750:
+	for(i=0; i<VME_DEVS; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#815: FILE: drivers/staging/vme/devices/vme_user.c:750:
+	for(i=0; i<VME_DEVS; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#815: FILE: drivers/staging/vme/devices/vme_user.c:750:
+	for(i=0; i<VME_DEVS; i++) {
+		device_destroy(vme_user_sysfs_class, MKDEV(VME_MAJOR, i));
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#820: FILE: drivers/staging/vme/devices/vme_user.c:755:
+	for (i = SLAVE_MINOR; i < (SLAVE_MAX + 1); i++) {
+		buf_unalloc(i);
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#840: FILE: drivers/staging/vme/devices/vme_user.h:1:
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#844: FILE: drivers/staging/vme/devices/vme_user.h:5:
+typedef struct {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#851: FILE: drivers/staging/vme/devices/vme_user.h:12:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <prefetchEnable>
#852: FILE: drivers/staging/vme/devices/vme_user.h:13:
+	char prefetchEnable;		/* Prefetch Read Enable State */

CHECK:CAMELCASE: Avoid CamelCase: <prefetchSize>
#853: FILE: drivers/staging/vme/devices/vme_user.h:14:
+	int prefetchSize;		/* Prefetch Read Size (Cache Lines) */

CHECK:CAMELCASE: Avoid CamelCase: <wrPostEnable>
#854: FILE: drivers/staging/vme/devices/vme_user.h:15:
+	char wrPostEnable;		/* Write Post State */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#858: FILE: drivers/staging/vme/devices/vme_user.h:19:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#866: FILE: drivers/staging/vme/devices/vme_user.h:27:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#868: FILE: drivers/staging/vme/devices/vme_user.h:29:
+typedef struct {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#874: FILE: drivers/staging/vme/devices/vme_user.h:35:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <rmwLock>
#876: FILE: drivers/staging/vme/devices/vme_user.h:37:
+	char rmwLock;			/* Lock PCI during RMW Cycles */

CHECK:CAMELCASE: Avoid CamelCase: <data64BitCapable>
#877: FILE: drivers/staging/vme/devices/vme_user.h:38:
+	char data64BitCapable;		/* non-VMEbus capable of 64-bit Data */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089198.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 29 errors, 97 warnings, 61 checks, 841 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089198.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
