ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#304: FILE: kernel/trace/trace.h:869:
+#define __common_field(type, item)					\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item));		\
+	if (ret)							\
+		return ret;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#304: FILE: kernel/trace/trace.h:869:
+#define __common_field(type, item)					\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item));		\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#304: FILE: kernel/trace/trace.h:869:
+#define __common_field(type, item)					\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item));		\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#304: FILE: kernel/trace/trace.h:869:
+#define __common_field(type, item)					\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item));		\
+	if (ret)							\
+		return ret;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#319: FILE: kernel/trace/trace.h:908:
+#define TRACE_EVENT_FORMAT(call, proto, args, fmt, tstruct, tpfmt)	\
+	extern struct ftrace_event_call event_##call;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#355: FILE: kernel/trace/trace_event_types.h:125:
+		TRACE_FIELD_SPECIAL(char func[TRACE_FUNC_SIZE+1], func,
 		                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#356: FILE: kernel/trace/trace_event_types.h:126:
+				    TRACE_FUNC_SIZE+1, func)
 				                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#357: FILE: kernel/trace/trace_event_types.h:127:
+		TRACE_FIELD_SPECIAL(char file[TRACE_FUNC_SIZE+1], file,
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#358: FILE: kernel/trace/trace_event_types.h:128:
+				    TRACE_FUNC_SIZE+1, file)
 				                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#382: FILE: kernel/trace/trace_events.c:716:
+		pr_warning("Could not create debugfs "
+			   "'%s/filter' entry\n", name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#436: FILE: kernel/trace/trace_export.c:33:
+#define TRACE_FIELD_SPECIAL(type_item, item, len, cmd)			\
 	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
 			       "offset:%u;\tsize:%u;\n",		\
 			       (unsigned int)offsetof(typeof(field), item), \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#445: FILE: kernel/trace/trace_export.c:88:
+#define TRACE_FIELD_SPECIAL(type_item, item, len, cmd)	\
 	cmd;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#450: FILE: kernel/trace/trace_export.c:93:
+int ftrace_define_fields_##call(void);					\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#473: FILE: kernel/trace/trace_export.c:115:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#473: FILE: kernel/trace/trace_export.c:115:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#473: FILE: kernel/trace/trace_export.c:115:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#473: FILE: kernel/trace/trace_export.c:115:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#481: FILE: kernel/trace/trace_export.c:123:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#481: FILE: kernel/trace/trace_export.c:123:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#481: FILE: kernel/trace/trace_export.c:123:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#481: FILE: kernel/trace/trace_export.c:123:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item));			\
+	if (ret)							\
+		return ret;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 7 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
