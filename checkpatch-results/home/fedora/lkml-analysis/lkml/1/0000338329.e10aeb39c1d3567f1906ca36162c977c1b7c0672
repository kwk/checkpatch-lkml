WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/commonfops.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp_dentry->d_inode"
#113: FILE: fs/unionfs/commonfops.c:71:
+	} while (tmp_dentry->d_inode != NULL);	/* need negative dentry */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#173: FILE: fs/unionfs/commonfops.c:131:
+			printk(KERN_ERR "unionfs: no superblock for "

WARNING:SPLIT_STRING: quoted string split across lines
#174: FILE: fs/unionfs/commonfops.c:132:
+			printk(KERN_ERR "unionfs: no superblock for "
+			       "file %p\n", file);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: fs/unionfs/commonfops.c:250:
+	BUG_ON(!S_ISREG(dentry->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bstart <= fbstart(file)'
#308: FILE: fs/unionfs/commonfops.c:266:
+	if (err || (bstart <= fbstart(file)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: fs/unionfs/commonfops.c:280:
+			BUG_ON(!dentry->d_inode);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#323: FILE: fs/unionfs/commonfops.c:281:
+			iput(unionfs_lower_inode_idx(dentry->d_inode, bindex));
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#379: FILE: fs/unionfs/commonfops.c:337:
+	BUG_ON(sbgen > dgen);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#440: FILE: fs/unionfs/commonfops.c:398:
+			   atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#530: FILE: fs/unionfs/commonfops.c:488:
+				err = copyup_file(

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#537: FILE: fs/unionfs/commonfops.c:495:
+			return err;
+		} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#671: FILE: fs/unionfs/commonfops.c:629:
+	BUG_ON(file->f_path.dentry->d_inode != inode);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#731: FILE: fs/unionfs/commonfops.c:689:
+		err = lower_file->f_op->ioctl(

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#779: FILE: fs/unionfs/commonfops.c:737:
+			iput(unionfs_lower_inode_idx(dentry->d_inode, bindex));
 			^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#820: FILE: fs/unionfs/commonfops.c:778:
+		err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#866: FILE: fs/unionfs/commonfops.c:824:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338329.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 6 checks, 835 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338329.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
