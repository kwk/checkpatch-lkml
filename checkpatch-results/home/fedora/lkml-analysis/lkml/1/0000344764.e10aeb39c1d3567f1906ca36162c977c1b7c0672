CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: fs/afs/inode.c:362:
+static int afs_do_setattr(struct dentry *dentry, struct iattr *attr,
+		   struct file *file)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: fs/afs/internal.h:553:
+extern int afs_fsetattr(struct file *, struct iattr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#135: FILE: fs/afs/internal.h:553:
+extern int afs_fsetattr(struct file *, struct iattr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#135: FILE: fs/afs/internal.h:553:
+extern int afs_fsetattr(struct file *, struct iattr *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#185: FILE: fs/fuse/dir.c:1066:
+static bool update_mtime(unsigned ivalid, bool have_file)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file"
#231: FILE: fs/fuse/dir.c:1156:
+	iattr_to_fattr(attr, &inarg, file != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: fs/fuse/fuse_i.h:508:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#299: FILE: fs/open.c:210:
+	if (filp)
 	    ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#308: FILE: fs/open.c:217:
+	err = fnotify_change(dentry, mnt, &newattrs, filp);
 	                                             ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#349: FILE: fs/open.c:693:
+	error = chown_common(nd.path.dentry, nd.path.mnt, user, group, NULL);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#349: FILE: fs/open.c:693:
+	error = chown_common(nd.path.dentry, nd.path.mnt, user, group, NULL);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#358: FILE: fs/open.c:718:
+	error = chown_common(nd.path.dentry, nd.path.mnt, user, group, NULL);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#358: FILE: fs/open.c:718:
+	error = chown_common(nd.path.dentry, nd.path.mnt, user, group, NULL);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#367: FILE: fs/open.c:737:
+	error = chown_common(nd.path.dentry, nd.path.mnt, user, group, NULL);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#367: FILE: fs/open.c:737:
+	error = chown_common(nd.path.dentry, nd.path.mnt, user, group, NULL);
 	                                     ^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#504: FILE: fs/reiser4/plugin/file/file.h:74:
+int fsetattr_unix_file(struct file *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#504: FILE: fs/reiser4/plugin/file/file.h:74:
+int fsetattr_unix_file(struct file *, struct iattr *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#524: FILE: fs/reiser4/plugin/file/file_conversion.c:607:
+	struct inode * inode = file->f_path.dentry->d_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: fs/reiser4/plugin/file/file_conversion.c:608:
+	struct inode * inode = file->f_path.dentry->d_inode;
+	return PROT_ACTIVE(int, fsetattr, (file, attr),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#566: FILE: fs/reiser4/plugin/plugin.h:240:
+	int (*fsetattr)(struct file *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#566: FILE: fs/reiser4/plugin/plugin.h:240:
+	int (*fsetattr)(struct file *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#601: FILE: include/linux/fs.h:1187:
+	int (*fsetattr)(struct file *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#601: FILE: include/linux/fs.h:1187:
+	int (*fsetattr)(struct file *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#609: FILE: include/linux/fs.h:1694:
+extern int fnotify_change(struct dentry *, struct vfsmount *, struct iattr *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#609: FILE: include/linux/fs.h:1694:
+extern int fnotify_change(struct dentry *, struct vfsmount *, struct iattr *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#609: FILE: include/linux/fs.h:1694:
+extern int fnotify_change(struct dentry *, struct vfsmount *, struct iattr *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#609: FILE: include/linux/fs.h:1694:
+extern int fnotify_change(struct dentry *, struct vfsmount *, struct iattr *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#609: FILE: include/linux/fs.h:1694:
+extern int fnotify_change(struct dentry *, struct vfsmount *, struct iattr *, struct file *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 22 warnings, 5 checks, 469 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
