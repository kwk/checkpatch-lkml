WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: fs/ccs_common.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#41: FILE: fs/ccs_common.c:2:
+ * fs/ccs_common.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to false
#72: FILE: fs/ccs_common.c:33:
+bool sbin_init_started = false;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#81: FILE: fs/ccs_common.c:42:
+};
+/* String table for functionality that takes 2 modes. */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#104: FILE: fs/ccs_common.c:65:
+	[CCS_TOMOYO_MAX_ACCEPT_ENTRY]
+	= { "MAX_ACCEPT_ENTRY",    MAX_ACCEPT_ENTRY, INT_MAX },

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#106: FILE: fs/ccs_common.c:67:
+	[CCS_TOMOYO_MAX_GRANT_LOG]
+	= { "MAX_GRANT_LOG",       MAX_GRANT_LOG, INT_MAX },

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#108: FILE: fs/ccs_common.c:69:
+	[CCS_TOMOYO_MAX_REJECT_LOG]
+	= { "MAX_REJECT_LOG",      MAX_REJECT_LOG, INT_MAX },

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#112: FILE: fs/ccs_common.c:73:
+	[CCS_SLEEP_PERIOD]
+	= { "SLEEP_PERIOD",        0, 3000 }, /* in 0.1 second */

ERROR:INITIALISED_STATIC: do not initialise statics to false
#162: FILE: fs/ccs_common.c:123:
+static bool manage_by_non_root = false;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#180: FILE: fs/ccs_common.c:141:
+__setup("TOMOYO_QUIET", tomoyo_quiet_setup);

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: fs/ccs_common.c:225:
+	char *tmp = *src;
+	if (strncmp(tmp, find, len))

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: fs/ccs_common.c:247:
+	bool first = true;
+	while (*sp && (*sp <= ' ' || *sp >= 127))

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: fs/ccs_common.c:284:
+	const char *original_filename = filename;
+	if (!filename)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#386: FILE: fs/ccs_common.c:347:
+	printk(KERN_DEBUG "%s: Invalid pathname '%s'\n", function,

WARNING:LINE_SPACING: Missing a blank line after declarations
#405: FILE: fs/ccs_common.c:366:
+	const char *org_domainname = domainname;
+	if (!domainname || strncmp(domainname, ROOT_NAME, ROOT_NAME_LEN))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#445: FILE: fs/ccs_common.c:406:
+	printk(KERN_DEBUG "%s: Invalid domainname '%s'\n", function,

WARNING:LINE_SPACING: Missing a blank line after declarations
#473: FILE: fs/ccs_common.c:434:
+	struct path_info name;
+	name.name = domainname;

WARNING:LINE_SPACING: Missing a blank line after declarations
#496: FILE: fs/ccs_common.c:457:
+	int i = 0;
+	if (pathname) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#498: FILE: fs/ccs_common.c:459:
+		char *ep = strchr(pathname, '\0');
+		if (pathname < ep--) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: fs/ccs_common.c:481:
+	int len = 0;
+	if (!filename)

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: fs/ccs_common.c:522:
+	const int len = strlen(name);
+	ptr->total_len = len;

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: fs/ccs_common.c:548:
+		char c;
+		if (*pattern != '\\') {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#632: FILE: fs/ccs_common.c:593:
+			if (c == '\\' && is_byte_range(filename + 1)
+			    && strncmp(filename + 1, pattern, 3) == 0) {

WARNING:REPEATED_WORD: Possible repeated word: 'without'
#691: FILE: fs/ccs_common.c:652:
+ * file_matches_to_pattern - Pattern matching without without '/' character.

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: fs/ccs_common.c:669:
+	bool result;
+	while (pattern < pattern_end - 1) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#751: FILE: fs/ccs_common.c:712:
+	/*
+	  if (!filename || !pattern)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#772: FILE: fs/ccs_common.c:733:
+		const char *p_delimiter = strchr(p, '/');
+		if (!f_delimiter)

WARNING:LINE_SPACING: Missing a blank line after declarations
#808: FILE: fs/ccs_common.c:769:
+	int size = head->readbuf_size - pos;
+	if (size <= 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#832: FILE: fs/ccs_common.c:793:
+	const char *cp = NULL;
+	if (!mm)

WARNING:LINE_SPACING: Missing a blank line after declarations
#871: FILE: fs/ccs_common.c:832:
+	const u8 profile = current->domain_info->profile;
+	return sbin_init_started && index < CCS_MAX_CONTROL_INDEX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#873: FILE: fs/ccs_common.c:834:
+#if MAX_PROFILES != 256
+		&& profile < MAX_PROFILES

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#875: FILE: fs/ccs_common.c:836:
+#endif
+		&& profile_ptr[profile] ?

WARNING:LINE_SPACING: Missing a blank line after declarations
#894: FILE: fs/ccs_common.c:855:
+	static u8 count = 20;
+	if (likely(!in_interrupt()))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#898: FILE: fs/ccs_common.c:859:
+		printk(KERN_ERR "BUG: sleeping function called "

WARNING:SPLIT_STRING: quoted string split across lines
#899: FILE: fs/ccs_common.c:860:
+		printk(KERN_ERR "BUG: sleeping function called "
+		       "from invalid context.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#928: FILE: fs/ccs_common.c:889:
+	const u8 profile = current->domain_info->profile;
+	return sbin_init_started && index < TOMOYO_MAX_CAPABILITY_INDEX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#930: FILE: fs/ccs_common.c:891:
+#if MAX_PROFILES != 256
+		&& profile < MAX_PROFILES

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#932: FILE: fs/ccs_common.c:893:
+#endif
+		&& sleep_check()

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#933: FILE: fs/ccs_common.c:894:
+		&& sleep_check()
+		&& profile_ptr[profile] ?

WARNING:LINE_SPACING: Missing a blank line after declarations
#974: FILE: fs/ccs_common.c:935:
+	struct acl_info *ptr;
+	if (!domain)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1035: FILE: fs/ccs_common.c:996:
+		printk(KERN_WARNING "TOMOYO-WARNING: "

WARNING:SPLIT_STRING: quoted string split across lines
#1036: FILE: fs/ccs_common.c:997:
+		printk(KERN_WARNING "TOMOYO-WARNING: "
+		       "Domain '%s' has so many ACLs to hold. "

WARNING:SPLIT_STRING: quoted string split across lines
#1037: FILE: fs/ccs_common.c:998:
+		       "Domain '%s' has so many ACLs to hold. "
+		       "Stopped learning mode.\n", domain->domainname->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1054: FILE: fs/ccs_common.c:1015:
+	struct profile *ptr = NULL;
+	mutex_lock(&profile_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1062: FILE: fs/ccs_common.c:1023:
+			int i;
+			for (i = 0; i < CCS_MAX_CONTROL_INDEX; i++)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1064: FILE: fs/ccs_common.c:1025:
+				ptr->value[i]
+					= ccs_control_array[i].current_value;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1092: FILE: fs/ccs_common.c:1053:
+	struct profile *profile;
+	i = simple_strtoul(data, &cp, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1092: FILE: fs/ccs_common.c:1053:
+	i = simple_strtoul(data, &cp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#1139: FILE: fs/ccs_common.c:1100:
+			const char **modes;
+			switch (i) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1182: FILE: fs/ccs_common.c:1143:
+	static const int total
+		= CCS_MAX_CONTROL_INDEX + TOMOYO_MAX_CAPABILITY_INDEX + 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1184: FILE: fs/ccs_common.c:1145:
+	int step;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1190: FILE: fs/ccs_common.c:1151:
+		const struct profile *profile = profile_ptr[index];
+		head->read_step = step;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1229: FILE: fs/ccs_common.c:1190:
+			const u8 value = profile->capability_value[i];
+			if (!ccs_io_printf(head,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1240: FILE: fs/ccs_common.c:1201:
+			const char *keyword = ccs_control_array[type].keyword;
+			switch (ccs_control_array[type].max_value) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1292: FILE: fs/ccs_common.c:1253:
+	bool is_domain = false;
+	if (ccs_is_domain_def(manager)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1340: FILE: fs/ccs_common.c:1301:
+	bool is_delete = str_starts(&data, KEYWORD_DELETE);
+	if (!strcmp(data, "manage_by_non_root")) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1357: FILE: fs/ccs_common.c:1318:
+	struct list1_head *pos;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1361: FILE: fs/ccs_common.c:1322:
+		struct policy_manager_entry *ptr;
+		ptr = list1_entry(pos, struct policy_manager_entry, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1384: FILE: fs/ccs_common.c:1345:
+	bool found = false;
+	if (!sbin_init_started)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1390: FILE: fs/ccs_common.c:1351:
+		if (!ptr->is_deleted && ptr->is_domain
+		    && !ccs_pathcmp(domainname, ptr->manager))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1398: FILE: fs/ccs_common.c:1359:
+		if (!ptr->is_deleted && !ptr->is_domain
+		    && !strcmp(exe, ptr->manager->name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1406: FILE: fs/ccs_common.c:1367:
+		const pid_t pid = current->pid;
+		if (last_pid != pid) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1407: FILE: fs/ccs_common.c:1368:
+			printk(KERN_WARNING "%s ( %s ) is not permitted to "

WARNING:SPLIT_STRING: quoted string split across lines
#1408: FILE: fs/ccs_common.c:1369:
+			printk(KERN_WARNING "%s ( %s ) is not permitted to "
+			       "update policies.\n", domainname->name, exe);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1429: FILE: fs/ccs_common.c:1390:
+	char *cp = strstr(data, " if ");
+	if (cp) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1431: FILE: fs/ccs_common.c:1392:
+		char *cp2;
+		while ((cp2 = strstr(cp + 3, " if ")) != NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1459: FILE: fs/ccs_common.c:1420:
+	char *cp;
+	if (str_starts(&data, KEYWORD_DELETE))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1483: FILE: fs/ccs_common.c:1444:
+	if (sscanf(data, KEYWORD_USE_PROFILE "%u", &profile) == 1
+	    && profile < MAX_PROFILES) {

CHECK:SPACING: No space is necessary after a cast
#1485: FILE: fs/ccs_common.c:1446:
+			domain->profile = (u8) profile;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1537: FILE: fs/ccs_common.c:1498:
+	const u16 perm = ptr->perm;
+	if (ptr->u_is_group) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1545: FILE: fs/ccs_common.c:1506:
+		const char *msg;
+		if (!(perm & (1 << bit)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1549: FILE: fs/ccs_common.c:1510:
+		if ((bit == TYPE_READ_ACL || bit == TYPE_WRITE_ACL)
+		    && (perm & (1 << TYPE_READ_WRITE_ACL)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1586: FILE: fs/ccs_common.c:1547:
+	u8 bit;
+	if (ptr->u1_is_group) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1600: FILE: fs/ccs_common.c:1561:
+		const char *msg;
+		if (!(perm & (1 << bit)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1631: FILE: fs/ccs_common.c:1592:
+	int pos = head->read_avail;
+	if (!ccs_io_printf(head, KEYWORD_ALLOW_ARGV0 "%s %s",

WARNING:TYPO_SPELLING: 'evironment' may be misspelled - perhaps 'environment'?
#1643: FILE: fs/ccs_common.c:1604:
+ * print_env_acl - Print an evironment variable name's ACL entry.
                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1656: FILE: fs/ccs_common.c:1617:
+	int pos = head->read_avail;
+	if (!ccs_io_printf(head, KEYWORD_ALLOW_ENV "%s", ptr->env->name))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1680: FILE: fs/ccs_common.c:1641:
+	int pos = head->read_avail;
+	if (!ccs_io_printf(head, KEYWORD_ALLOW_CAPABILITY "%s",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1704: FILE: fs/ccs_common.c:1665:
+	const u32 max_address = ptr->u.ipv4.max;
+	if (!ccs_io_printf(head, "%u.%u.%u.%u", HIPQUAD(min_address)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1707: FILE: fs/ccs_common.c:1668:
+	if (min_address != max_address
+	    && !ccs_io_printf(head, "-%u.%u.%u.%u", HIPQUAD(max_address)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1726: FILE: fs/ccs_common.c:1687:
+	const struct in6_addr *max_address = ptr->u.ipv6.max;
+	ccs_print_ipv6(buf, sizeof(buf), min_address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1749: FILE: fs/ccs_common.c:1710:
+	const u16 min_port = ptr->min_port, max_port = ptr->max_port;
+	if (!ccs_io_printf(head, " %u", min_port))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1770: FILE: fs/ccs_common.c:1731:
+	int pos = head->read_avail;
+	if (!ccs_io_printf(head, KEYWORD_ALLOW_NETWORK "%s ",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1811: FILE: fs/ccs_common.c:1772:
+	int pos = head->read_avail;
+	if (!ccs_io_printf(head, KEYWORD_ALLOW_SIGNAL "%u %s",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1850: FILE: fs/ccs_common.c:1811:
+	const u8 acl_type = ccs_acl_type2(ptr);
+	if (acl_type & ACL_DELETED)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1854: FILE: fs/ccs_common.c:1815:
+		struct single_path_acl_record *acl
+			= container_of(ptr, struct single_path_acl_record,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1860: FILE: fs/ccs_common.c:1821:
+		struct double_path_acl_record *acl
+			= container_of(ptr, struct double_path_acl_record,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1866: FILE: fs/ccs_common.c:1827:
+		struct argv0_acl_record *acl
+			= container_of(ptr, struct argv0_acl_record, head);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1871: FILE: fs/ccs_common.c:1832:
+		struct env_acl_record *acl
+			= container_of(ptr, struct env_acl_record, head);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1876: FILE: fs/ccs_common.c:1837:
+		struct capability_acl_record *acl
+			= container_of(ptr, struct capability_acl_record, head);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1881: FILE: fs/ccs_common.c:1842:
+		struct ip_network_acl_record *acl
+			= container_of(ptr, struct ip_network_acl_record, head);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1886: FILE: fs/ccs_common.c:1847:
+		struct signal_acl_record *acl
+			= container_of(ptr, struct signal_acl_record, head);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1891: FILE: fs/ccs_common.c:1852:
+		struct execute_handler_record *acl
+			= container_of(ptr, struct execute_handler_record,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1894: FILE: fs/ccs_common.c:1855:
+		const char *keyword = KEYWORD_EXECUTE_HANDLER;
+		return print_execute_handler_record(head, keyword, acl);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1898: FILE: fs/ccs_common.c:1859:
+		struct execute_handler_record *acl
+			= container_of(ptr, struct execute_handler_record,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1901: FILE: fs/ccs_common.c:1862:
+		const char *keyword = KEYWORD_DENIED_EXECUTE_HANDLER;
+		return print_execute_handler_record(head, keyword, acl);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1903: FILE: fs/ccs_common.c:1864:
+	BUG(); /* This must not happen. */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1918: FILE: fs/ccs_common.c:1879:
+	struct list1_head *apos;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1927: FILE: fs/ccs_common.c:1888:
+		const char *ignore_global_allow_env = "";
+		domain = list1_entry(dpos, struct domain_info, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1937: FILE: fs/ccs_common.c:1898:
+			ignore_global_allow_read
+				= KEYWORD_IGNORE_GLOBAL_ALLOW_READ "\n";

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1940: FILE: fs/ccs_common.c:1901:
+			ignore_global_allow_env
+				= KEYWORD_IGNORE_GLOBAL_ALLOW_ENV "\n";

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1955: FILE: fs/ccs_common.c:1916:
+			struct acl_info *ptr
+				= list1_entry(apos, struct acl_info, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1989: FILE: fs/ccs_common.c:1950:
+	unsigned int profile;
+	if (!cp)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1993: FILE: fs/ccs_common.c:1954:
+	profile = simple_strtoul(data, NULL, 10);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1995: FILE: fs/ccs_common.c:1956:
+	if (domain && profile < MAX_PROFILES
+	    && (profile_ptr[profile] || !sbin_init_started))

CHECK:SPACING: No space is necessary after a cast
#1996: FILE: fs/ccs_common.c:1957:
+		domain->profile = (u8) profile;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2018: FILE: fs/ccs_common.c:1979:
+	struct list1_head *pos;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2022: FILE: fs/ccs_common.c:1983:
+		struct domain_info *domain;
+		domain = list1_entry(pos, struct domain_info, list);

CHECK:SPACING: No space is necessary after a cast
#2042: FILE: fs/ccs_common.c:2003:
+	head->read_step = (int) simple_strtoul(head->write_buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2042: FILE: fs/ccs_common.c:2003:
+	head->read_step = (int) simple_strtoul(head->write_buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2091: FILE: fs/ccs_common.c:2052:
+	bool is_delete = str_starts(&data, KEYWORD_DELETE);
+	if (str_starts(&data, KEYWORD_KEEP_DOMAIN))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2207: FILE: fs/ccs_common.c:2168:
+	bool is_delete = false;
+	if (str_starts(&data, KEYWORD_DELETE))

ERROR:INITIALISED_STATIC: do not initialise statics to false
#2271: FILE: fs/ccs_common.c:2232:
+static bool profile_loaded = false;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2289: FILE: fs/ccs_common.c:2250:
+__setup("CCS_loader=", loader_setup);

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#2303: FILE: fs/ccs_common.c:2264:
+	 * Thus, let do_execve() call this function everytime.
 	                                            ^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2305: FILE: fs/ccs_common.c:2266:
+	struct nameidata nd;
 	                 ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2306: FILE: fs/ccs_common.c:2267:
+	struct nameidata nd;
+	if (!ccs_loader)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2308: FILE: fs/ccs_common.c:2269:
+	if (path_lookup(ccs_loader, LOOKUP_FOLLOW, &nd)) {
 	                                            ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2309: FILE: fs/ccs_common.c:2270:
+		printk(KERN_INFO "Not activating Mandatory Access Control now "

WARNING:SPLIT_STRING: quoted string split across lines
#2310: FILE: fs/ccs_common.c:2271:
+		printk(KERN_INFO "Not activating Mandatory Access Control now "
+		       "since %s doesn't exist.\n", ccs_loader);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2313: FILE: fs/ccs_common.c:2274:
+	path_put(&nd.path);
 	          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2348: FILE: fs/ccs_common.c:2309:
+		char *envp[3];
+		printk(KERN_INFO "Calling %s to load policy. Please wait.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2348: FILE: fs/ccs_common.c:2309:
+		printk(KERN_INFO "Calling %s to load policy. Please wait.\n",

CHECK:SPACING: No space is necessary after a cast
#2350: FILE: fs/ccs_common.c:2311:
+		argv[0] = (char *) ccs_loader;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2362: FILE: fs/ccs_common.c:2323:
+	printk(KERN_INFO "SAKURA: 1.6.0   2008/04/01\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2365: FILE: fs/ccs_common.c:2326:
+	printk(KERN_INFO "TOMOYO: 1.6.0   2008/04/01\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2367: FILE: fs/ccs_common.c:2328:
+	printk(KERN_INFO "Mandatory Access Control activated.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2372: FILE: fs/ccs_common.c:2333:
+		struct domain_info *domain;
+		list1_for_each_entry(domain, &domain_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2374: FILE: fs/ccs_common.c:2335:
+			const u8 profile = domain->profile;
+			if (profile_ptr[profile])

WARNING:LINE_SPACING: Missing a blank line after declarations
#2420: FILE: fs/ccs_common.c:2381:
+	struct query_entry *query_entry;
+	if (!ccs_check_flags(CCS_ALLOW_ENFORCE_GRACE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2421: FILE: fs/ccs_common.c:2382:
+	if (!ccs_check_flags(CCS_ALLOW_ENFORCE_GRACE)
+	    || !atomic_read(&queryd_watcher)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2423: FILE: fs/ccs_common.c:2384:
+		int i;
+		if (current->tomoyo_flags & CCS_DONT_SLEEP_ON_ENFORCE_ERROR)

CHECK:SPACING: No space is necessary after a cast
#2432: FILE: fs/ccs_common.c:2393:
+	len = vsnprintf((char *) &pos, sizeof(pos) - 1, fmt, args) + 32;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2460: FILE: fs/ccs_common.c:2421:
+	for (query_entry->timer = 0; atomic_read(&queryd_watcher)
+		     && ccs_check_flags(CCS_ALLOW_ENFORCE_GRACE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2461: FILE: fs/ccs_common.c:2422:
+		     && ccs_check_flags(CCS_ALLOW_ENFORCE_GRACE)
+		     && query_entry->timer < 100; query_entry->timer++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2537: FILE: fs/ccs_common.c:2498:
+	char *buf;
+	if (head->read_avail)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2548: FILE: fs/ccs_common.c:2509:
+		struct query_entry *ptr
+			= list_entry(tmp, struct query_entry, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2567: FILE: fs/ccs_common.c:2528:
+			struct query_entry *ptr
+				= list_entry(tmp, struct query_entry, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2609: FILE: fs/ccs_common.c:2570:
+		struct query_entry *ptr
+			= list_entry(tmp, struct query_entry, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2620: FILE: fs/ccs_common.c:2581:
+		struct query_entry *ptr
+			= list_entry(tmp, struct query_entry, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2723: FILE: fs/ccs_common.c:2684:
+		const int dynamic = ccs_get_memory_used_for_dynamic();
+		ccs_io_printf(head, "Shared:  %10u\nPrivate: %10u\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#2765: FILE: fs/ccs_common.c:2726:
+	struct ccs_io_buffer *head = ccs_alloc(sizeof(*head));
+	if (!head)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2835: FILE: fs/ccs_common.c:2796:
+	if (type != CCS_GRANTLOG && type != CCS_REJECTLOG
+	    && type != CCS_QUERY) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2885: FILE: fs/ccs_common.c:2846:
+	struct ccs_io_buffer *head = file->private_data;
+	if (!head->poll)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2886: FILE: fs/ccs_common.c:2847:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'Poiner' may be misspelled - perhaps 'Pointer'?
#2894: FILE: fs/ccs_common.c:2855:
+ * @buffer:     Poiner to buffer to write to.
                 ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2905: FILE: fs/ccs_common.c:2866:
+	char *cp;
+	if (!head->read)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2906: FILE: fs/ccs_common.c:2867:
+		return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2950: FILE: fs/ccs_common.c:2911:
+	char *cp0 = head->write_buf;
+	if (!head->write)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2951: FILE: fs/ccs_common.c:2912:
+		return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2962: FILE: fs/ccs_common.c:2923:
+		char c;
+		if (head->write_avail >= head->writebuf_size - 1) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3035: FILE: fs/ccs_common.c:2996:
+	struct acl_info *ptr;
+	switch (acl_type) {

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#3079: FILE: fs/ccs_common.c:3040:
+	 * Substract sizeof(struct condition_list *) because I eliminated
 	   ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#3083: FILE: fs/ccs_common.c:3044:
+	ptr = (void *) (((u8 *) ptr)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299170.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 104 warnings, 47 checks, 3061 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299170.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
