WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: arch/s390/Kconfig:522:
+config ZFCPDUMP
+	tristate "zfcpdump support"
+	select SMP
+	default n
+	help
+	  Select this option if you want to build an zfcpdump enabled kernel.
+	  Refer to "Documentation/s390/zfcpdump.txt" for more details on this.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#261: FILE: arch/s390/kernel/ipl.c:83:
+static u16 ipl_devno __attribute__((__section__(".data"))) = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data") over __attribute__((__section__(".data")))
#261: FILE: arch/s390/kernel/ipl.c:83:
+static u16 ipl_devno __attribute__((__section__(".data"))) = 0;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data") over __attribute__((__section__(".data")))
#262: FILE: arch/s390/kernel/ipl.c:84:
+u32 ipl_flags __attribute__((__section__(".data"))) = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#422: FILE: arch/s390/kernel/ipl.c:569:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!diag308_set_works'
#605: FILE: arch/s390/kernel/ipl.c:933:
+	if ((!diag308_set_works) && (ipl_info.type != IPL_TYPE_FCP))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ipl_info.type != IPL_TYPE_FCP'
#605: FILE: arch/s390/kernel/ipl.c:933:
+	if ((!diag308_set_works) && (ipl_info.type != IPL_TYPE_FCP))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!diag308_set_works'
#608: FILE: arch/s390/kernel/ipl.c:935:
+	if ((!diag308_set_works) && (ipl_info.type == IPL_TYPE_FCP))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ipl_info.type == IPL_TYPE_FCP'
#608: FILE: arch/s390/kernel/ipl.c:935:
+	if ((!diag308_set_works) && (ipl_info.type == IPL_TYPE_FCP))

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#665: FILE: arch/s390/kernel/setup.c:288:
+#if defined(CONFIG_ZFCPDUMP) || defined(CONFIG_ZFCPDUMP_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#703: FILE: arch/s390/kernel/setup.c:618:
+#if defined(CONFIG_ZFCPDUMP) || defined(CONFIG_ZFCPDUMP_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#763: FILE: arch/s390/kernel/smp.c:400:
+#if defined(CONFIG_ZFCPDUMP) || defined(CONFIG_ZFCPDUMP_MODULE)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#771: FILE: arch/s390/kernel/smp.c:408:
+unsigned int zfcpdump_prefix_array[NR_CPUS + 1] \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data") over __attribute__((__section__(".data")))
#772: FILE: arch/s390/kernel/smp.c:409:
+	__attribute__((__section__(".data")));

CHECK:SPACING: No space is necessary after a cast
#784: FILE: arch/s390/kernel/smp.c:421:
+		if ((u16) cpu == boot_cpu_addr)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#786: FILE: arch/s390/kernel/smp.c:423:
+		__cpu_logical_map[1] = (__u16) cpu;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#789: FILE: arch/s390/kernel/smp.c:426:
+		if (cpu_num >= NR_CPUS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#790: FILE: arch/s390/kernel/smp.c:427:
+			printk("WARNING: Registers for cpu %i are not "

WARNING:SPLIT_STRING: quoted string split across lines
#791: FILE: arch/s390/kernel/smp.c:428:
+			printk("WARNING: Registers for cpu %i are not "
+			       "saved, since dump kernel was compiled with"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#792: FILE: arch/s390/kernel/smp.c:429:
+			       "saved, since dump kernel was compiled with"
+			       "NR_CPUS=%i!\n", cpu_num, NR_CPUS);

WARNING:MISSING_SPACE: break quoted strings at a space character
#792: FILE: arch/s390/kernel/smp.c:429:
+			       "saved, since dump kernel was compiled with"
+			       "NR_CPUS=%i!\n", cpu_num, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#792: FILE: arch/s390/kernel/smp.c:429:
+			       "NR_CPUS=%i!\n", cpu_num, NR_CPUS);

CHECK:SPACING: No space is necessary after a cast
#804: FILE: arch/s390/kernel/smp.c:441:
+		       (void *)(unsigned long) store_prefix() +

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#806: FILE: arch/s390/kernel/smp.c:443:
+#ifdef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:CAMELCASE: Avoid CamelCase: <EvTyp_SDIAS>
#958: FILE: drivers/s390/char/sclp.h:31:
+#define EvTyp_SDIAS		0x1C

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <EvTyp_SDIAS_Mask>
#966: FILE: drivers/s390/char/sclp.h:42:
+#define EvTyp_SDIAS_Mask	0x00000010

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#975: FILE: drivers/s390/char/sclp_sdias.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'absolut' may be misspelled - perhaps 'absolute'?
#976: FILE: drivers/s390/char/sclp_sdias.c:2:
+ * Sclp "store data in absolut storage"
                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#990: FILE: drivers/s390/char/sclp_sdias.c:16:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "SDIAS: " x )

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#990: FILE: drivers/s390/char/sclp_sdias.c:16:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "SDIAS: " x )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#990: FILE: drivers/s390/char/sclp_sdias.c:16:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "SDIAS: " x )

ERROR:SPACING: space prohibited after that open parenthesis '('
#990: FILE: drivers/s390/char/sclp_sdias.c:16:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "SDIAS: " x )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#990: FILE: drivers/s390/char/sclp_sdias.c:16:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "SDIAS: " x )

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#990: FILE: drivers/s390/char/sclp_sdias.c:16:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "SDIAS: " x )

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1028: FILE: drivers/s390/char/sclp_sdias.c:54:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1033: FILE: drivers/s390/char/sclp_sdias.c:59:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4096) over __attribute__((aligned(4096)))
#1035: FILE: drivers/s390/char/sclp_sdias.c:61:
+static struct sdias_sccb sccb __attribute__((aligned(4096)));

CHECK:SPACING: No space is necessary after a cast
#1045: FILE: drivers/s390/char/sclp_sdias.c:71:
+	sccb = (struct sdias_sccb *) request->sccb;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1063: FILE: drivers/s390/char/sclp_sdias.c:89:
+			TRACE("add request failed: rc = %i\n",rc);
 			                                     ^

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1081: FILE: drivers/s390/char/sclp_sdias.c:107:
+ * Get number of blocks (4K) available in the HSA
                                               ^^^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1117: FILE: drivers/s390/char/sclp_sdias.c:143:
+	switch (sccb.evbuf.event_status) {
+		case 0:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1133: FILE: drivers/s390/char/sclp_sdias.c:159:
+ * Copy from HSA to absolute storage (not reentrant):
              ^^^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1159: FILE: drivers/s390/char/sclp_sdias.c:185:
+#ifdef __s390x__

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1187: FILE: drivers/s390/char/sclp_sdias.c:213:
+	switch (sccb.evbuf.event_status) {
+		case EVSTATE_ALL_STORED:
[...]
+		case EVSTATE_PART_STORED:
[...]
+		case EVSTATE_NO_DATA:
[...]
+		default:

WARNING:TYPO_SPELLING: 'hsa' may be misspelled - perhaps 'has'?
#1196: FILE: drivers/s390/char/sclp_sdias.c:222:
+			ERROR_MSG("Error from SCLP while copying hsa. "
 			                                         ^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1197: FILE: drivers/s390/char/sclp_sdias.c:223:
+			ERROR_MSG("Error from SCLP while copying hsa. "
+				  "Event status = %x\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1235: FILE: drivers/s390/char/zcore.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1254: FILE: drivers/s390/char/zcore.c:20:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#1256: FILE: drivers/s390/char/zcore.c:22:
+#include <asm/processor.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1260: FILE: drivers/s390/char/zcore.c:26:
+#define MSG(x...) printk( KERN_ALERT x )

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1260: FILE: drivers/s390/char/zcore.c:26:
+#define MSG(x...) printk( KERN_ALERT x )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1260: FILE: drivers/s390/char/zcore.c:26:
+#define MSG(x...) printk( KERN_ALERT x )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1260: FILE: drivers/s390/char/zcore.c:26:
+#define MSG(x...) printk( KERN_ALERT x )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1261: FILE: drivers/s390/char/zcore.c:27:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "DUMP: " x )

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1261: FILE: drivers/s390/char/zcore.c:27:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "DUMP: " x )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1261: FILE: drivers/s390/char/zcore.c:27:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "DUMP: " x )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1261: FILE: drivers/s390/char/zcore.c:27:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "DUMP: " x )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1261: FILE: drivers/s390/char/zcore.c:27:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "DUMP: " x )

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1261: FILE: drivers/s390/char/zcore.c:27:
+#define ERROR_MSG(x...) printk ( KERN_ALERT "DUMP: " x )

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1289: FILE: drivers/s390/char/zcore.c:55:
+ * Copy memory from HSA to kernel or user memory (not reentrant):
                     ^^^

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1292: FILE: drivers/s390/char/zcore.c:58:
+ * @src:   Start address within HSA where data should be copied
                                 ^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(PAGE_SIZE) over __attribute__((__aligned__(PAGE_SIZE)))
#1299: FILE: drivers/s390/char/zcore.c:65:
+	static char buf[PAGE_SIZE] __attribute__((__aligned__(PAGE_SIZE)));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1313: FILE: drivers/s390/char/zcore.c:79:
+		if (mode == TO_USER) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1314: FILE: drivers/s390/char/zcore.c:80:
+			if (copy_to_user((__force __user void*) dest,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1314: FILE: drivers/s390/char/zcore.c:80:
+			if (copy_to_user((__force __user void*) dest,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#1317: FILE: drivers/s390/char/zcore.c:83:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1330: FILE: drivers/s390/char/zcore.c:96:
+		if (mode == TO_USER) {
[...]
+		} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1331: FILE: drivers/s390/char/zcore.c:97:
+			if (copy_to_user((__force __user void*) dest + offs,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1331: FILE: drivers/s390/char/zcore.c:97:
+			if (copy_to_user((__force __user void*) dest + offs,

CHECK:BRACES: Unbalanced braces around else statement
#1334: FILE: drivers/s390/char/zcore.c:100:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1346: FILE: drivers/s390/char/zcore.c:112:
+	if (mode == TO_USER) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1347: FILE: drivers/s390/char/zcore.c:113:
+		if (copy_to_user((__force __user void*) dest + offs, buf,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1347: FILE: drivers/s390/char/zcore.c:113:
+		if (copy_to_user((__force __user void*) dest + offs, buf,

CHECK:BRACES: Unbalanced braces around else statement
#1350: FILE: drivers/s390/char/zcore.c:116:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1358: FILE: drivers/s390/char/zcore.c:124:
+	return memcpy_hsa((void __force *) dest, src, count, TO_USER);

CHECK:SPACING: No space is necessary after a cast
#1370: FILE: drivers/s390/char/zcore.c:136:
+	register unsigned long _dest asm("2") = (unsigned long) dest;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1370: FILE: drivers/s390/char/zcore.c:136:
+	int rc = -EFAULT;
+	register unsigned long _dest asm("2") = (unsigned long) dest;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1371: FILE: drivers/s390/char/zcore.c:137:
+	register unsigned long _len1 asm("3") = (unsigned long) count;

CHECK:SPACING: No space is necessary after a cast
#1373: FILE: drivers/s390/char/zcore.c:139:
+	register unsigned long _len2 asm("5") = (unsigned long) count;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1378: FILE: drivers/s390/char/zcore.c:144:
+	asm volatile (

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1383: FILE: drivers/s390/char/zcore.c:149:
+		EX_TABLE(1b,2b)
 		           ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1408: FILE: drivers/s390/char/zcore.c:174:
+#ifdef __s390x__

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around out->s390.psw[0]
#1428: FILE: drivers/s390/char/zcore.c:194:
+	memcpy(&(out->s390.psw[0]), &(in->s390x.psw[0]), 4);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around in->s390x.psw[0]
#1428: FILE: drivers/s390/char/zcore.c:194:
+	memcpy(&(out->s390.psw[0]), &(in->s390x.psw[0]), 4);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1430: FILE: drivers/s390/char/zcore.c:196:
+	memcpy(&(out->s390.psw[4]),&(in->s390x.psw[12]), 4);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1430: FILE: drivers/s390/char/zcore.c:196:
+	memcpy(&(out->s390.psw[4]),&(in->s390x.psw[12]), 4);
 	                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around out->s390.psw[4]
#1430: FILE: drivers/s390/char/zcore.c:196:
+	memcpy(&(out->s390.psw[4]),&(in->s390x.psw[12]), 4);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around in->s390x.psw[12]
#1430: FILE: drivers/s390/char/zcore.c:196:
+	memcpy(&(out->s390.psw[4]),&(in->s390x.psw[12]), 4);

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1455: FILE: drivers/s390/char/zcore.c:221:
+	/* get info for boot cpu from lowcore, stored in the HSA */
 	                                                     ^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1459: FILE: drivers/s390/char/zcore.c:225:
+		ERROR_MSG("kmalloc failed: %s: %i\n",__FUNCTION__, __LINE__);
 		                                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1459: FILE: drivers/s390/char/zcore.c:225:
+		ERROR_MSG("kmalloc failed: %s: %i\n",__FUNCTION__, __LINE__);

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1463: FILE: drivers/s390/char/zcore.c:229:
+		ERROR_MSG("could not copy from HSA\n");
 		                               ^^^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1469: FILE: drivers/s390/char/zcore.c:235:
+#ifdef __s390x__

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1505: FILE: drivers/s390/char/zcore.c:271:
+} __attribute__((packed,__aligned__(16)));
                        ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1505: FILE: drivers/s390/char/zcore.c:271:
+} __attribute__((packed,__aligned__(16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((__aligned__(16)))
#1505: FILE: drivers/s390/char/zcore.c:271:
+} __attribute__((packed,__aligned__(16)));

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1514: FILE: drivers/s390/char/zcore.c:280:
+#ifdef __s390x__

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1532: FILE: drivers/s390/char/zcore.c:298:
+	char *lc_mask = (char*)&sys_info.lc_mask;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end < sa_start'
#1573: FILE: drivers/s390/char/zcore.c:339:
+		if ((end < sa_start) || (start > sa_end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start > sa_end'
#1573: FILE: drivers/s390/char/zcore.c:339:
+		if ((end < sa_start) || (start > sa_end))

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1594: FILE: drivers/s390/char/zcore.c:360:
+ * Next 32MB are HSA Memory
                  ^^^

CHECK:SPACING: No space is necessary after a cast
#1613: FILE: drivers/s390/char/zcore.c:379:
+	count = min(count, (size_t) (sys_info.mem_size + HEADER_SIZE - *ppos));

CHECK:SPACING: No space is necessary after a cast
#1617: FILE: drivers/s390/char/zcore.c:383:
+		size = min(count, (size_t) (HEADER_SIZE - *ppos));

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1631: FILE: drivers/s390/char/zcore.c:397:
+	/* Copy from HSA data */
 	             ^^^

CHECK:SPACING: No space is necessary after a cast
#1633: FILE: drivers/s390/char/zcore.c:399:
+		size = min((count - hdr_count), (size_t) (ZFCPDUMP_HSA_SIZE

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1667: FILE: drivers/s390/char/zcore.c:433:
+static int zcore_open(struct inode *inode, struct file *filp)
                                                         ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1703: FILE: drivers/s390/char/zcore.c:469:
+static struct file_operations zcore_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1711: FILE: drivers/s390/char/zcore.c:477:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1758: FILE: drivers/s390/char/zcore.c:524:
+		ERROR_MSG("unknown architecture 0x%x.\n",arch);
 		                                        ^

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1777: FILE: drivers/s390/char/zcore.c:543:
+		ERROR_MSG("Could not determine HSA size\n");
 		                               ^^^

WARNING:TYPO_SPELLING: 'HSA' may be misspelled - perhaps 'HAS'?
#1782: FILE: drivers/s390/char/zcore.c:548:
+		ERROR_MSG("HSA size too small: %i\n", act_hsa_size);
 		           ^^^

CHECK:SPACING: No space is necessary after a cast
#1816: FILE: drivers/s390/char/zcore.c:582:
+	TRACE("wwpn:   %llx\n", (unsigned long long) ipl_info.data.fcp.wwpn);

CHECK:SPACING: No space is necessary after a cast
#1817: FILE: drivers/s390/char/zcore.c:583:
+	TRACE("lun:    %llx\n", (unsigned long long) ipl_info.data.fcp.lun);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1835: FILE: drivers/s390/char/zcore.c:601:
+#ifndef __s390x__

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1851: FILE: drivers/s390/char/zcore.c:617:
+	zcore_dir = debugfs_create_dir("zcore" , NULL);
 	                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1856: FILE: drivers/s390/char/zcore.c:622:
+	zcore_file = debugfs_create_file("mem", S_IRUSR, zcore_dir, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1920: FILE: include/asm-s390/ipl.h:103:
+struct ipl_info
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1938: FILE: include/asm-s390/ipl.h:121:
+extern void setup_ipl_info(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1963: FILE: include/asm-s390/lowcore.h:162:
+}  __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1979: FILE: include/asm-s390/lowcore.h:178:
+}  __attribute__((packed));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2008: FILE: include/asm-s390/sclp.h:47:
+extern int sclp_sdias_blk_count(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2009: FILE: include/asm-s390/sclp.h:48:
+extern int sclp_sdias_copy(void *dest, int blk_num, int nr_blks);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2029: FILE: include/asm-s390/setup.h:81:
+#define ZFCPDUMP_HSA_SIZE	(32UL<<20)
                          	     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000451909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 53 warnings, 46 checks, 1865 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000451909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
