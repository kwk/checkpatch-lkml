WARNING:LINE_SPACING: Missing a blank line after declarations
#66: FILE: arch/x86/kernel/e820_64.c:134:
+		struct early_res *r = &early_res[i];
+		if (last > r->start && addr < r->start) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#106: FILE: arch/x86/kernel/e820_64.c:249:
+unsigned long __init find_e820_area_size(unsigned long start, unsigned long *sizep, unsigned long align)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#119: FILE: arch/x86/kernel/e820_64.c:262:
+//		printk(KERN_DEBUG "find_e820_area_size : e820 %d [%llx, %lx]\n", i, ei->addr, ei_last);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#126: FILE: arch/x86/kernel/e820_64.c:269:
+		while (bad_addr_size(&addr, sizep, align) && addr+ *sizep <= ei_last)
 		                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#136: FILE: arch/x86/kernel/e820_64.c:279:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: arch/x86/kernel/e820_64.c:280:
+}
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#149: FILE: arch/x86/mm/init_64.c:430:
+static void __init memtest(unsigned long start_phys, unsigned long size, unsigned pattern)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#179: FILE: arch/x86/mm/init_64.c:460:
+	count = (size - (start_phys_aligned - start_phys))/incr;
 	                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#192: FILE: arch/x86/mm/init_64.c:473:
+					printk(KERN_INFO "  %016lxx bad mem addr %016lx - %016lx reserved\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: arch/x86/mm/init_64.c:474:
+					printk(KERN_INFO "  %016lxx bad mem addr %016lx - %016lx reserved\n",
+						val, start_bad, last_bad + incr);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#196: FILE: arch/x86/mm/init_64.c:477:
+				start_bad = last_bad = start_phys_aligned;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#201: FILE: arch/x86/mm/init_64.c:482:
+		printk(KERN_INFO "  %016lx bad mem addr %016lx - %016lx reserved\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: arch/x86/mm/init_64.c:483:
+		printk(KERN_INFO "  %016lx bad mem addr %016lx - %016lx reserved\n",
+			val, start_bad, last_bad + incr);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#206: FILE: arch/x86/mm/init_64.c:487:
+
+}

WARNING:MISPLACED_INIT: __initdata should be placed after memtest_pattern
#208: FILE: arch/x86/mm/init_64.c:489:
+static int __initdata memtest_pattern;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#212: FILE: arch/x86/mm/init_64.c:493:
+		memtest_pattern = simple_strtoul(arg, NULL, 0) + 1;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: arch/x86/mm/init_64.c:502:
+	unsigned pattern;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#224: FILE: arch/x86/mm/init_64.c:505:
+		printk(KERN_INFO "early_memtest: pattern num %d", memtest_pattern);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_memtest', this function's name, in a string
#224: FILE: arch/x86/mm/init_64.c:505:
+		printk(KERN_INFO "early_memtest: pattern num %d", memtest_pattern);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#237: FILE: arch/x86/mm/init_64.c:518:
+			printk(KERN_CONT "\n  %016lx - %016lx pattern %d",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#237: FILE: arch/x86/mm/init_64.c:518:
+			printk(KERN_CONT "\n  %016lx - %016lx pattern %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: arch/x86/mm/init_64.c:519:
+			printk(KERN_CONT "\n  %016lx - %016lx pattern %d",
+				t_start, t_start + t_size, pattern);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#246: FILE: arch/x86/mm/init_64.c:527:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#246: FILE: arch/x86/mm/init_64.c:527:
+		printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#259: FILE: arch/x86/mm/init_64.c:540:
+	printk(KERN_INFO "init_memory_mapping\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/asm-x86/e820_64.h:19:
+extern unsigned long find_e820_area_size(unsigned long start,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 10 checks, 222 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
