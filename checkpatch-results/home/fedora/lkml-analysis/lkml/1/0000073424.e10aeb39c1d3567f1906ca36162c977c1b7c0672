WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
objects in /sys/kernel/config/target/core.  It includes wrappers to logic for

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: drivers/target/target_core_configfs.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#111: FILE: drivers/target/target_core_configfs.c:54:
+struct mutex g_tf_lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#115: FILE: drivers/target/target_core_configfs.c:58:
+	ssize_t (*show)(void *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#115: FILE: drivers/target/target_core_configfs.c:58:
+	ssize_t (*show)(void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#116: FILE: drivers/target/target_core_configfs.c:59:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#116: FILE: drivers/target/target_core_configfs.c:59:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#116: FILE: drivers/target/target_core_configfs.c:59:
+	ssize_t (*store)(void *, const char *, size_t);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#119: FILE: drivers/target/target_core_configfs.c:62:
+se_hba_t *target_core_get_hba_from_item(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: drivers/target/target_core_configfs.c:80:
+static ssize_t target_core_attr_show(struct config_item *item,
+				      struct configfs_attribute *attr,

WARNING:SPLIT_STRING: quoted string split across lines
#141: FILE: drivers/target/target_core_configfs.c:84:
+	return sprintf(page, "Target Engine Core ConfigFS Infrastructure %s"
+		" on %s/%s on "UTS_RELEASE"\n", TARGET_CORE_CONFIGFS_VERSION,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#141: FILE: drivers/target/target_core_configfs.c:84:
+		" on %s/%s on "UTS_RELEASE"\n", TARGET_CORE_CONFIGFS_VERSION,

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#152: FILE: drivers/target/target_core_configfs.c:95:
+	.ca_mode	= S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#155: FILE: drivers/target/target_core_configfs.c:98:
+static struct target_fabric_configfs *target_core_get_fabric(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#179: FILE: drivers/target/target_core_configfs.c:122:
+static struct config_group *target_core_register_fabric(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#188: FILE: drivers/target/target_core_configfs.c:131:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> group: %p name:"

WARNING:SPLIT_STRING: quoted string split across lines
#189: FILE: drivers/target/target_core_configfs.c:132:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> group: %p name:"
+			" %s\n", group, name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fabric_cg)...) over kzalloc(sizeof(struct config_group)...)
#191: FILE: drivers/target/target_core_configfs.c:134:
+	fabric_cg = kzalloc(sizeof(struct config_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#201: FILE: drivers/target/target_core_configfs.c:144:
+			printk(KERN_ERR "request_module() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#202: FILE: drivers/target/target_core_configfs.c:145:
+			printk(KERN_ERR "request_module() failed for"
+				" iscsi_target_mod.ko: %d\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#207: FILE: drivers/target/target_core_configfs.c:150:
+		printk(KERN_ERR "Unsupported configfs target fabric %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: drivers/target/target_core_configfs.c:151:
+		printk(KERN_ERR "Unsupported configfs target fabric %s\n",
+			name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#215: FILE: drivers/target/target_core_configfs.c:158:
+		printk(KERN_ERR "target_core_get_fabric() failed for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: drivers/target/target_core_configfs.c:159:
+		printk(KERN_ERR "target_core_get_fabric() failed for %s\n",
+			name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#220: FILE: drivers/target/target_core_configfs.c:163:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> Located fabric:"

WARNING:SPLIT_STRING: quoted string split across lines
#221: FILE: drivers/target/target_core_configfs.c:164:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> Located fabric:"
+			" %s\n", tf->tf_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#226: FILE: drivers/target/target_core_configfs.c:169:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: drivers/target/target_core_configfs.c:170:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> %p\n",
+			tf->tf_fabric_cit);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tf->reg_default_groups_callback"
#233: FILE: drivers/target/target_core_configfs.c:176:
+	if (tf->reg_default_groups_callback != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#236: FILE: drivers/target/target_core_configfs.c:179:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> Allocated Fabric:"

WARNING:SPLIT_STRING: quoted string split across lines
#237: FILE: drivers/target/target_core_configfs.c:180:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> Allocated Fabric:"
+			" %s\n", tf->tf_group.cg_item.ci_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#243: FILE: drivers/target/target_core_configfs.c:186:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> Set tf->tf_fabric"

WARNING:SPLIT_STRING: quoted string split across lines
#244: FILE: drivers/target/target_core_configfs.c:187:
+	printk(KERN_INFO "Target_Core_ConfigFS: REGISTER -> Set tf->tf_fabric"
+			" for %s\n", name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#252: FILE: drivers/target/target_core_configfs.c:195:
+static void target_core_deregister_fabric(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#256: FILE: drivers/target/target_core_configfs.c:199:
+	struct target_fabric_configfs *tf = container_of(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#259: FILE: drivers/target/target_core_configfs.c:202:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Looking up %s in"

WARNING:SPLIT_STRING: quoted string split across lines
#260: FILE: drivers/target/target_core_configfs.c:203:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Looking up %s in"
+		" tf list\n", config_item_name(item));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#262: FILE: drivers/target/target_core_configfs.c:205:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> located fabric:"

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: drivers/target/target_core_configfs.c:206:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> located fabric:"
+			" %s\n", tf->tf_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#266: FILE: drivers/target/target_core_configfs.c:209:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Releasing"

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: drivers/target/target_core_configfs.c:210:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Releasing"
+			" tf->tf_fabric for %s\n", tf->tf_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#270: FILE: drivers/target/target_core_configfs.c:213:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Releasing ci"

WARNING:SPLIT_STRING: quoted string split across lines
#271: FILE: drivers/target/target_core_configfs.c:214:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Releasing ci"
+			" %s\n", config_item_name(item));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#313: FILE: drivers/target/target_core_configfs.c:256:
+/*##############################################################################
+// Start functions called by external Target Fabrics Modules

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#314: FILE: drivers/target/target_core_configfs.c:257:
+//############################################################################*/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#324: FILE: drivers/target/target_core_configfs.c:267:
+struct target_fabric_configfs *target_fabric_configfs_init(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#331: FILE: drivers/target/target_core_configfs.c:274:
+		printk(KERN_ERR "Missing struct config_item_type * pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#335: FILE: drivers/target/target_core_configfs.c:278:
+		printk(KERN_ERR "Unable to locate passed fabric name\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#339: FILE: drivers/target/target_core_configfs.c:282:
+		printk(KERN_ERR "Passed name: %s exceeds TARGET_FABRIC"

WARNING:SPLIT_STRING: quoted string split across lines
#340: FILE: drivers/target/target_core_configfs.c:283:
+		printk(KERN_ERR "Passed name: %s exceeds TARGET_FABRIC"
+			"_NAME_SIZE\n", name);

WARNING:MISSING_SPACE: break quoted strings at a space character
#340: FILE: drivers/target/target_core_configfs.c:283:
+		printk(KERN_ERR "Passed name: %s exceeds TARGET_FABRIC"
+			"_NAME_SIZE\n", name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tf)...) over kzalloc(sizeof(struct target_fabric_configfs)...)
#344: FILE: drivers/target/target_core_configfs.c:287:
+	tf = kzalloc(sizeof(struct target_fabric_configfs), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#358: FILE: drivers/target/target_core_configfs.c:301:
+	printk(KERN_INFO "<<<<<<<<<<<<<<<<<<<<<< BEGIN FABRIC API >>>>>>>>"

WARNING:SPLIT_STRING: quoted string split across lines
#359: FILE: drivers/target/target_core_configfs.c:302:
+	printk(KERN_INFO "<<<<<<<<<<<<<<<<<<<<<< BEGIN FABRIC API >>>>>>>>"
+			">>>>>>>>>>>>>>\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#360: FILE: drivers/target/target_core_configfs.c:303:
+	printk(KERN_INFO "Initialized struct target_fabric_configfs: %p for"

WARNING:SPLIT_STRING: quoted string split across lines
#361: FILE: drivers/target/target_core_configfs.c:304:
+	printk(KERN_INFO "Initialized struct target_fabric_configfs: %p for"
+			" %s\n", tf, tf->tf_name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#369: FILE: drivers/target/target_core_configfs.c:312:
+void target_fabric_configfs_free(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#387: FILE: drivers/target/target_core_configfs.c:330:
+struct config_item *target_fabric_configfs_find_by_name(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#408: FILE: drivers/target/target_core_configfs.c:351:
+int target_fabric_configfs_register(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#414: FILE: drivers/target/target_core_configfs.c:357:
+		printk(KERN_ERR "Unable to locate target_fabric_configfs"

WARNING:SPLIT_STRING: quoted string split across lines
#415: FILE: drivers/target/target_core_configfs.c:358:
+		printk(KERN_ERR "Unable to locate target_fabric_configfs"
+			" pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#419: FILE: drivers/target/target_core_configfs.c:362:
+		printk(KERN_ERR "Unable to target struct config_subsystem"

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: drivers/target/target_core_configfs.c:363:
+		printk(KERN_ERR "Unable to target struct config_subsystem"
+			" pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#425: FILE: drivers/target/target_core_configfs.c:368:
+		printk(KERN_ERR "Unable to locate target struct config_group"

WARNING:SPLIT_STRING: quoted string split across lines
#426: FILE: drivers/target/target_core_configfs.c:369:
+		printk(KERN_ERR "Unable to locate target struct config_group"
+			" pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#429: FILE: drivers/target/target_core_configfs.c:372:
+	printk(KERN_INFO "<<<<<<<<<<<<<<<<<<<<<< END FABRIC API >>>>>>>>>>>>"

WARNING:SPLIT_STRING: quoted string split across lines
#430: FILE: drivers/target/target_core_configfs.c:373:
+	printk(KERN_INFO "<<<<<<<<<<<<<<<<<<<<<< END FABRIC API >>>>>>>>>>>>"
+		">>>>>>>>>>\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#435: FILE: drivers/target/target_core_configfs.c:378:
+void target_fabric_configfs_deregister(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#442: FILE: drivers/target/target_core_configfs.c:385:
+		printk(KERN_ERR "Unable to locate passed target_fabric_"

WARNING:SPLIT_STRING: quoted string split across lines
#443: FILE: drivers/target/target_core_configfs.c:386:
+		printk(KERN_ERR "Unable to locate passed target_fabric_"
+			"configfs\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#443: FILE: drivers/target/target_core_configfs.c:386:
+		printk(KERN_ERR "Unable to locate passed target_fabric_"
+			"configfs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#448: FILE: drivers/target/target_core_configfs.c:391:
+		printk(KERN_ERR "Unable to locate passed tf->tf_subsys"

WARNING:SPLIT_STRING: quoted string split across lines
#449: FILE: drivers/target/target_core_configfs.c:392:
+		printk(KERN_ERR "Unable to locate passed tf->tf_subsys"
+			" pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#454: FILE: drivers/target/target_core_configfs.c:397:
+		printk(KERN_ERR "Unable to locate target struct config_group"

WARNING:SPLIT_STRING: quoted string split across lines
#455: FILE: drivers/target/target_core_configfs.c:398:
+		printk(KERN_ERR "Unable to locate target struct config_group"
+			" pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#459: FILE: drivers/target/target_core_configfs.c:402:
+	printk(KERN_INFO "<<<<<<<<<<<<<<<<<<<<<< BEGIN FABRIC API >>>>>>>>>>"

WARNING:SPLIT_STRING: quoted string split across lines
#460: FILE: drivers/target/target_core_configfs.c:403:
+	printk(KERN_INFO "<<<<<<<<<<<<<<<<<<<<<< BEGIN FABRIC API >>>>>>>>>>"
+			">>>>>>>>>>>>\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#464: FILE: drivers/target/target_core_configfs.c:407:
+		printk(KERN_ERR "Non zero tf->tf_access_cnt for fabric %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: drivers/target/target_core_configfs.c:408:
+		printk(KERN_ERR "Non zero tf->tf_access_cnt for fabric %s\n",
+			tf->tf_name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#466: FILE: drivers/target/target_core_configfs.c:409:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#471: FILE: drivers/target/target_core_configfs.c:414:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Releasing tf:"

WARNING:SPLIT_STRING: quoted string split across lines
#472: FILE: drivers/target/target_core_configfs.c:415:
+	printk(KERN_INFO "Target_Core_ConfigFS: DEREGISTER -> Releasing tf:"
+			" %s\n", tf->tf_name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#478: FILE: drivers/target/target_core_configfs.c:421:
+	printk("<<<<<<<<<<<<<<<<<<<<<< END FABRIC API >>>>>>>>>>>>>>>>>"

WARNING:SPLIT_STRING: quoted string split across lines
#479: FILE: drivers/target/target_core_configfs.c:422:
+	printk("<<<<<<<<<<<<<<<<<<<<<< END FABRIC API >>>>>>>>>>>>>>>>>"
+			">>>>>\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#481: FILE: drivers/target/target_core_configfs.c:424:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#485: FILE: drivers/target/target_core_configfs.c:428:
+/*##############################################################################
+// Stop functions called by external Target Fabrics Modules

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#486: FILE: drivers/target/target_core_configfs.c:429:
+//############################################################################*/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#490: FILE: drivers/target/target_core_configfs.c:433:
+#define DEF_DEV_ATTRIB_SHOW(_name)					\
+static ssize_t target_core_dev_show_attr_##_name(			\
+	struct se_dev_attrib_s *da,					\
+	char *page)							\
+{									\
+	se_device_t *dev;						\
+	se_subsystem_dev_t *se_dev = da->da_sub_dev;			\
+	ssize_t rb;							\
+									\
+	spin_lock(&se_dev->se_dev_lock);				\
+	dev = se_dev->se_dev_ptr;					\
+	if (!(dev)) {							\
+		spin_unlock(&se_dev->se_dev_lock); 			\
+		return -ENODEV;						\
+	}								\
+	rb = snprintf(page, PAGE_SIZE, "%u\n", (u32)DEV_ATTRIB(dev)->_name); \
+	spin_unlock(&se_dev->se_dev_lock);				\
+									\
+	return rb;							\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#502: FILE: drivers/target/target_core_configfs.c:445:
+^I^Ispin_unlock(&se_dev->se_dev_lock); ^I^I^I\$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#528: FILE: drivers/target/target_core_configfs.c:471:
+	ret = strict_strtoul(page, 0, &val);				\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#530: FILE: drivers/target/target_core_configfs.c:473:
+		printk(KERN_ERR "strict_strtoul() failed with"		\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#540: FILE: drivers/target/target_core_configfs.c:483:
+#define DEF_DEV_ATTRIB(_name)						\
+DEF_DEV_ATTRIB_SHOW(_name);						\
+DEF_DEV_ATTRIB_STORE(_name);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#540: FILE: drivers/target/target_core_configfs.c:483:
+#define DEF_DEV_ATTRIB(_name)						\
+DEF_DEV_ATTRIB_SHOW(_name);						\
+DEF_DEV_ATTRIB_STORE(_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#540: FILE: drivers/target/target_core_configfs.c:483:
+#define DEF_DEV_ATTRIB(_name)						\
+DEF_DEV_ATTRIB_SHOW(_name);						\
+DEF_DEV_ATTRIB_STORE(_name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#544: FILE: drivers/target/target_core_configfs.c:487:
+#define DEF_DEV_ATTRIB_RO(_name)					\
+DEF_DEV_ATTRIB_SHOW(_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#548: FILE: drivers/target/target_core_configfs.c:491:
+#define SE_DEV_ATTR(_name, _mode)					\
+static struct target_core_dev_attrib_attribute				\
+			target_core_dev_attrib_##_name =		\
+		__CONFIGFS_EATTR(_name, _mode,				\
+		target_core_dev_show_attr_##_name,			\
+		target_core_dev_store_attr_##_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#555: FILE: drivers/target/target_core_configfs.c:498:
+#define SE_DEV_ATTR_RO(_name);						\
+static struct target_core_dev_attrib_attribute				\
+			target_core_dev_attrib_##_name =		\
+	__CONFIGFS_EATTR_RO(_name,					\
+	target_core_dev_show_attr_##_name);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#562: FILE: drivers/target/target_core_configfs.c:505:
+SE_DEV_ATTR(emulate_ua_intlck_ctrl, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#565: FILE: drivers/target/target_core_configfs.c:508:
+SE_DEV_ATTR(emulate_tas, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#571: FILE: drivers/target/target_core_configfs.c:514:
+SE_DEV_ATTR(block_size, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#577: FILE: drivers/target/target_core_configfs.c:520:
+SE_DEV_ATTR(max_sectors, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#583: FILE: drivers/target/target_core_configfs.c:526:
+SE_DEV_ATTR(queue_depth, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#586: FILE: drivers/target/target_core_configfs.c:529:
+SE_DEV_ATTR(task_timeout, S_IRUGO | S_IWUSR);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#619: FILE: drivers/target/target_core_configfs.c:562:
+#define SE_DEV_WWN_ATTR(_name, _mode)					\
+static struct target_core_dev_wwn_attribute target_core_dev_wwn_##_name = \
+		__CONFIGFS_EATTR(_name, _mode,				\
+		target_core_dev_wwn_show_attr_##_name,			\
+		target_core_dev_wwn_store_attr_##_name);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#625: FILE: drivers/target/target_core_configfs.c:568:
+#define SE_DEV_WWN_ATTR_RO(_name);					\
+do {									\
+	static struct target_core_dev_wwn_attribute			\
+			target_core_dev_wwn_##_name =			\
+		__CONFIGFS_EATTR_RO(_name,				\
+		target_core_dev_wwn_show_attr_##_name);			\
+} while (0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#625: FILE: drivers/target/target_core_configfs.c:568:
+#define SE_DEV_WWN_ATTR_RO(_name);					\
+do {									\
+	static struct target_core_dev_wwn_attribute			\
+			target_core_dev_wwn_##_name =			\
+		__CONFIGFS_EATTR_RO(_name,				\
+		target_core_dev_wwn_show_attr_##_name);			\
+} while (0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#636: FILE: drivers/target/target_core_configfs.c:579:
+static ssize_t target_core_dev_wwn_show_attr_vpd_unit_serial(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#651: FILE: drivers/target/target_core_configfs.c:594:
+static ssize_t target_core_dev_wwn_store_attr_vpd_unit_serial(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#671: FILE: drivers/target/target_core_configfs.c:614:
+		printk(KERN_ERR "Underlying SCSI device firmware provided VPD"

WARNING:SPLIT_STRING: quoted string split across lines
#672: FILE: drivers/target/target_core_configfs.c:615:
+		printk(KERN_ERR "Underlying SCSI device firmware provided VPD"
+			" Unit Serial, ignoring request\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#677: FILE: drivers/target/target_core_configfs.c:620:
+		printk(KERN_ERR "Emulated VPD Unit Serial exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#678: FILE: drivers/target/target_core_configfs.c:621:
+		printk(KERN_ERR "Emulated VPD Unit Serial exceeds"
+		" INQUIRY_VPD_SERIAL_LEN: %d\n", INQUIRY_VPD_SERIAL_LEN);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#690: FILE: drivers/target/target_core_configfs.c:633:
+			printk(KERN_ERR "Unable to set VPD Unit Serial while"

WARNING:SPLIT_STRING: quoted string split across lines
#691: FILE: drivers/target/target_core_configfs.c:634:
+			printk(KERN_ERR "Unable to set VPD Unit Serial while"
+				" active %d $FABRIC_MOD exports exist\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#692: FILE: drivers/target/target_core_configfs.c:635:
+				DEV_OBJ_API(dev)->check_count(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: drivers/target/target_core_configfs.c:649:
+	snprintf(su_dev->t10_wwn.unit_serial, INQUIRY_VPD_SERIAL_LEN,
+			"%s", strstrip(buf));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#709: FILE: drivers/target/target_core_configfs.c:652:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set emulated VPD Unit Serial:"

WARNING:SPLIT_STRING: quoted string split across lines
#710: FILE: drivers/target/target_core_configfs.c:653:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set emulated VPD Unit Serial:"
+			" %s\n", su_dev->t10_wwn.unit_serial);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#717: FILE: drivers/target/target_core_configfs.c:660:
+SE_DEV_WWN_ATTR(vpd_unit_serial, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#722: FILE: drivers/target/target_core_configfs.c:665:
+static ssize_t target_core_dev_wwn_show_attr_vpd_protocol_identifier(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#748: FILE: drivers/target/target_core_configfs.c:691:
+		len += sprintf(page+len, "%s", buf);
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#755: FILE: drivers/target/target_core_configfs.c:698:
+static ssize_t target_core_dev_wwn_store_attr_vpd_protocol_identifier(

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#760: FILE: drivers/target/target_core_configfs.c:703:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#763: FILE: drivers/target/target_core_configfs.c:706:
+SE_DEV_WWN_ATTR(vpd_protocol_identifier, S_IRUGO | S_IWUSR);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_assoc' may be better as '(_assoc)' to avoid precedence issues
#768: FILE: drivers/target/target_core_configfs.c:711:
+#define DEF_DEV_WWN_ASSOC_SHOW(_name, _assoc)				\
+static ssize_t target_core_dev_wwn_show_attr_##_name(			\
+	struct t10_wwn_s *t10_wwn,					\
+	char *page)							\
+{									\
+	se_subsystem_dev_t *se_dev = t10_wwn->t10_sub_dev;		\
+	se_device_t *dev;						\
+	t10_vpd_t *vpd;							\
+	unsigned char buf[VPD_TMP_BUF_SIZE];				\
+	ssize_t len = 0;						\
+									\
+	dev = se_dev->se_dev_ptr;					\
+	if (!(dev))							\
+		return -ENODEV;						\
+									\
+	spin_lock(&t10_wwn->t10_vpd_lock);				\
+	list_for_each_entry(vpd, &t10_wwn->t10_vpd_list, vpd_list) {	\
+		if (vpd->association != _assoc)				\
+			continue;					\
+									\
+		memset(buf, 0, VPD_TMP_BUF_SIZE);			\
+		transport_dump_vpd_assoc(vpd, buf, VPD_TMP_BUF_SIZE);	\
+		if ((len + strlen(buf) > PAGE_SIZE))			\
+			break;						\
+		len += sprintf(page+len, "%s", buf);			\
+									\
+		memset(buf, 0, VPD_TMP_BUF_SIZE);			\
+		transport_dump_vpd_ident_type(vpd, buf, VPD_TMP_BUF_SIZE); \
+		if ((len + strlen(buf) > PAGE_SIZE))			\
+			break;						\
+		len += sprintf(page+len, "%s", buf);			\
+									\
+		memset(buf, 0, VPD_TMP_BUF_SIZE);			\
+		transport_dump_vpd_ident(vpd, buf, VPD_TMP_BUF_SIZE); \
+		if ((len + strlen(buf) > PAGE_SIZE))			\
+			break;						\
+		len += sprintf(page+len, "%s", buf);			\
+	}								\
+	spin_unlock(&t10_wwn->t10_vpd_lock);				\
+									\
+	return len;							\
+}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#792: FILE: drivers/target/target_core_configfs.c:735:
+		len += sprintf(page+len, "%s", buf);			\
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#798: FILE: drivers/target/target_core_configfs.c:741:
+		len += sprintf(page+len, "%s", buf);			\
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#804: FILE: drivers/target/target_core_configfs.c:747:
+		len += sprintf(page+len, "%s", buf);			\
 		                   ^

WARNING:TYPO_SPELLING: 'Assoication' may be misspelled - perhaps 'Association'?
#812: FILE: drivers/target/target_core_configfs.c:755:
+ * VPD page 0x83 Assoication: Logical Unit
                  ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#816: FILE: drivers/target/target_core_configfs.c:759:
+static ssize_t target_core_dev_wwn_store_attr_vpd_assoc_logical_unit(

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#821: FILE: drivers/target/target_core_configfs.c:764:
+	return -ENOSYS;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#824: FILE: drivers/target/target_core_configfs.c:767:
+SE_DEV_WWN_ATTR(vpd_assoc_logical_unit, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#831: FILE: drivers/target/target_core_configfs.c:774:
+static ssize_t target_core_dev_wwn_store_attr_vpd_assoc_target_port(

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#836: FILE: drivers/target/target_core_configfs.c:779:
+	return -ENOSYS;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#839: FILE: drivers/target/target_core_configfs.c:782:
+SE_DEV_WWN_ATTR(vpd_assoc_target_port, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#846: FILE: drivers/target/target_core_configfs.c:789:
+static ssize_t target_core_dev_wwn_store_attr_vpd_assoc_scsi_target_device(

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#851: FILE: drivers/target/target_core_configfs.c:794:
+	return -ENOSYS;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#854: FILE: drivers/target/target_core_configfs.c:797:
+SE_DEV_WWN_ATTR(vpd_assoc_scsi_target_device, S_IRUGO | S_IWUSR);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#883: FILE: drivers/target/target_core_configfs.c:826:
+#define SE_DEV_PR_ATTR(_name, _mode)					\
+static struct target_core_dev_pr_attribute target_core_dev_pr_##_name = \
+	__CONFIGFS_EATTR(_name, _mode,					\
+	target_core_dev_pr_show_attr_##_name,				\
+	target_core_dev_pr_store_attr_##_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#889: FILE: drivers/target/target_core_configfs.c:832:
+#define SE_DEV_PR_ATTR_RO(_name);					\
+static struct target_core_dev_pr_attribute target_core_dev_pr_##_name =	\
+	__CONFIGFS_EATTR_RO(_name,					\
+	target_core_dev_pr_show_attr_##_name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#897: FILE: drivers/target/target_core_configfs.c:840:
+static ssize_t target_core_dev_pr_show_spc3_res(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#921: FILE: drivers/target/target_core_configfs.c:864:
+static ssize_t target_core_dev_pr_show_spc2_res(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#943: FILE: drivers/target/target_core_configfs.c:886:
+static ssize_t target_core_dev_pr_show_attr_res_holder(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: drivers/target/target_core_configfs.c:898:
+		target_core_dev_pr_show_spc3_res(su_dev->se_dev_ptr,
+				page, &len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: drivers/target/target_core_configfs.c:902:
+		target_core_dev_pr_show_spc2_res(su_dev->se_dev_ptr,
+				page, &len);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#962: FILE: drivers/target/target_core_configfs.c:905:
+		len += sprintf(page+len, "Passthrough\n");
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#965: FILE: drivers/target/target_core_configfs.c:908:
+		len += sprintf(page+len, "Unknown\n");
 		                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#977: FILE: drivers/target/target_core_configfs.c:920:
+static ssize_t target_core_dev_pr_show_attr_res_pr_all_tgt_pts(

WARNING:SPLIT_STRING: quoted string split across lines
#1005: FILE: drivers/target/target_core_configfs.c:948:
+		len = sprintf(page, "SPC-3 Reservation: All Target"
+			" Ports registration\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1008: FILE: drivers/target/target_core_configfs.c:951:
+		len = sprintf(page, "SPC-3 Reservation: Single"
+			" Target Port registration\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1019: FILE: drivers/target/target_core_configfs.c:962:
+static ssize_t target_core_dev_pr_show_attr_res_pr_generation(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1037: FILE: drivers/target/target_core_configfs.c:980:
+static ssize_t target_core_dev_pr_show_attr_res_pr_holder_tg_port(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1068: FILE: drivers/target/target_core_configfs.c:1011:
+	len += sprintf(page+len, "SPC-3 Reservation: %s"
 	                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#1069: FILE: drivers/target/target_core_configfs.c:1012:
+	len += sprintf(page+len, "SPC-3 Reservation: %s"
+		" Target Node Endpoint: %s\n", tfo->get_fabric_name(),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1071: FILE: drivers/target/target_core_configfs.c:1014:
+	len += sprintf(page+len, "SPC-3 Reservation: Relative Port"
 	                   ^

WARNING:TYPO_SPELLING: 'Identifer' may be misspelled - perhaps 'Identifier'?
#1072: FILE: drivers/target/target_core_configfs.c:1015:
+		" Identifer Tag: %hu %s Portal Group Tag: %hu"
 		  ^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1072: FILE: drivers/target/target_core_configfs.c:1015:
+	len += sprintf(page+len, "SPC-3 Reservation: Relative Port"
+		" Identifer Tag: %hu %s Portal Group Tag: %hu"

WARNING:SPLIT_STRING: quoted string split across lines
#1073: FILE: drivers/target/target_core_configfs.c:1016:
+		" Identifer Tag: %hu %s Portal Group Tag: %hu"
+		" %s Logical Unit: %u\n", lun->lun_sep->sep_rtpi,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1086: FILE: drivers/target/target_core_configfs.c:1029:
+static ssize_t target_core_dev_pr_show_attr_res_pr_registered_i_pts(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1102: FILE: drivers/target/target_core_configfs.c:1045:
+	len += sprintf(page+len, "SPC-3 PR Registrations:\n");
 	                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: drivers/target/target_core_configfs.c:1049:
+	list_for_each_entry(pr_reg, &T10_RES(su_dev)->registration_list,
+			pr_reg_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1107: FILE: drivers/target/target_core_configfs.c:1050:
+			pr_reg_list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1110: FILE: drivers/target/target_core_configfs.c:1053:
+		sprintf(buf, "%s Node: %s Key: 0x%016Lx PRgen: 0x%08x\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1118: FILE: drivers/target/target_core_configfs.c:1061:
+		len += sprintf(page+len, "%s", buf);
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1124: FILE: drivers/target/target_core_configfs.c:1067:
+		len += sprintf(page+len, "None\n");
 		                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1134: FILE: drivers/target/target_core_configfs.c:1077:
+static ssize_t target_core_dev_pr_show_attr_res_pr_type(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1157: FILE: drivers/target/target_core_configfs.c:1100:
+	len = sprintf(page, "SPC-3 Reservation Type: %s\n",
+		core_scsi3_pr_dump_type(pr_reg->pr_res_type));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1168: FILE: drivers/target/target_core_configfs.c:1111:
+static ssize_t target_core_dev_pr_show_attr_res_type(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1201: FILE: drivers/target/target_core_configfs.c:1144:
+static ssize_t target_core_dev_pr_show_attr_res_aptpl_active(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1220: FILE: drivers/target/target_core_configfs.c:1163:
+static ssize_t target_core_dev_pr_show_attr_res_aptpl_metadata(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1233: FILE: drivers/target/target_core_configfs.c:1176:
+static ssize_t target_core_dev_pr_store_attr_res_aptpl_metadata(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1257: FILE: drivers/target/target_core_configfs.c:1200:
+		printk(KERN_INFO "Unable to process APTPL metadata while"

WARNING:SPLIT_STRING: quoted string split across lines
#1258: FILE: drivers/target/target_core_configfs.c:1201:
+		printk(KERN_INFO "Unable to process APTPL metadata while"
+			" active fabric exports exist\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1289: FILE: drivers/target/target_core_configfs.c:1232:
+				printk(KERN_ERR "APTPL metadata initiator_node="

WARNING:SPLIT_STRING: quoted string split across lines
#1290: FILE: drivers/target/target_core_configfs.c:1233:
+				printk(KERN_ERR "APTPL metadata initiator_node="
+					" exceeds PR_APTPL_MAX_IPORT_LEN: %d\n",

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#1301: FILE: drivers/target/target_core_configfs.c:1244:
+			ret = strict_strtoull(ptr, 0, &tmp_ll);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1303: FILE: drivers/target/target_core_configfs.c:1246:
+				printk(KERN_ERR "strict_strtoull() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1304: FILE: drivers/target/target_core_configfs.c:1247:
+				printk(KERN_ERR "strict_strtoull() failed for"
+					" sa_res_key=\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1316: FILE: drivers/target/target_core_configfs.c:1259:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1318: FILE: drivers/target/target_core_configfs.c:1261:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1319: FILE: drivers/target/target_core_configfs.c:1262:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" res_holder=\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1328: FILE: drivers/target/target_core_configfs.c:1271:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1330: FILE: drivers/target/target_core_configfs.c:1273:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1331: FILE: drivers/target/target_core_configfs.c:1274:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" res_type=\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1340: FILE: drivers/target/target_core_configfs.c:1283:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1342: FILE: drivers/target/target_core_configfs.c:1285:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1343: FILE: drivers/target/target_core_configfs.c:1286:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" res_scope=\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1352: FILE: drivers/target/target_core_configfs.c:1295:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1354: FILE: drivers/target/target_core_configfs.c:1297:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1355: FILE: drivers/target/target_core_configfs.c:1298:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" res_all_tg_pt=\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1364: FILE: drivers/target/target_core_configfs.c:1307:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1366: FILE: drivers/target/target_core_configfs.c:1309:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1367: FILE: drivers/target/target_core_configfs.c:1310:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" mapped_lun=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1386: FILE: drivers/target/target_core_configfs.c:1329:
+				printk(KERN_ERR "APTPL metadata target_node="

WARNING:SPLIT_STRING: quoted string split across lines
#1387: FILE: drivers/target/target_core_configfs.c:1330:
+				printk(KERN_ERR "APTPL metadata target_node="
+					" exceeds PR_APTPL_MAX_TPORT_LEN: %d\n",

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1398: FILE: drivers/target/target_core_configfs.c:1341:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1400: FILE: drivers/target/target_core_configfs.c:1343:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1401: FILE: drivers/target/target_core_configfs.c:1344:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" tpgt=\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1410: FILE: drivers/target/target_core_configfs.c:1353:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1412: FILE: drivers/target/target_core_configfs.c:1355:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1413: FILE: drivers/target/target_core_configfs.c:1356:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" port_rtpi=\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1420: FILE: drivers/target/target_core_configfs.c:1363:
+		if (ptr2) {
[...]
+		} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1422: FILE: drivers/target/target_core_configfs.c:1365:
+			ret = strict_strtoul(ptr, 0, &tmp_l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1424: FILE: drivers/target/target_core_configfs.c:1367:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1425: FILE: drivers/target/target_core_configfs.c:1368:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" target_lun=\n");

CHECK:BRACES: Unbalanced braces around else statement
#1430: FILE: drivers/target/target_core_configfs.c:1373:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1435: FILE: drivers/target/target_core_configfs.c:1378:
+		printk(KERN_ERR "Illegal parameters for APTPL registration\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1441: FILE: drivers/target/target_core_configfs.c:1384:
+		printk(KERN_ERR "Illegal PR type: 0x%02x for reservation"

WARNING:SPLIT_STRING: quoted string split across lines
#1442: FILE: drivers/target/target_core_configfs.c:1385:
+		printk(KERN_ERR "Illegal PR type: 0x%02x for reservation"
+				" holder\n", type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1448: FILE: drivers/target/target_core_configfs.c:1391:
+	ret = core_scsi3_alloc_aptpl_registration(T10_RES(su_dev), sa_res_key,
+			i_port, mapped_lun, t_port, tpgt, target_lun,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1455: FILE: drivers/target/target_core_configfs.c:1398:
+SE_DEV_PR_ATTR(res_aptpl_metadata, S_IRUGO | S_IWUSR);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1488: FILE: drivers/target/target_core_configfs.c:1431:
+#define SE_DEV_SNAP_ATTR(_name, _mode)					\
+static struct target_core_dev_snap_attribute				\
+			target_core_dev_snap_attr_##_name =		\
+	__CONFIGFS_EATTR(_name, _mode,					\
+	target_core_dev_snap_show_attr_##_name,				\
+	target_core_dev_snap_store_attr_##_name);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#1495: FILE: drivers/target/target_core_configfs.c:1438:
+#define DEF_SNAP_ATTRIB_STR_SHOW(_name)					\
+static ssize_t target_core_dev_snap_show_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	char *page)							\
+{									\
+	return snprintf(page, PAGE_SIZE, "%s\n", SE_DEV_SNAP(se_dev)->_name); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#1503: FILE: drivers/target/target_core_configfs.c:1446:
+#define DEF_SNAP_ATTRIB_STR_STORE(_name, _max)				\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	if (strlen(page) > _max) {					\
+		printk(KERN_ERR "String length for attrib: %s exceeds max:" \
+			" %d\n", __stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	snprintf(SE_DEV_SNAP(se_dev)->_name, PAGE_SIZE, "%s", page);	\
+	return count;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_max' - possible side-effects?
#1503: FILE: drivers/target/target_core_configfs.c:1446:
+#define DEF_SNAP_ATTRIB_STR_STORE(_name, _max)				\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	if (strlen(page) > _max) {					\
+		printk(KERN_ERR "String length for attrib: %s exceeds max:" \
+			" %d\n", __stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	snprintf(SE_DEV_SNAP(se_dev)->_name, PAGE_SIZE, "%s", page);	\
+	return count;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_max' may be better as '(_max)' to avoid precedence issues
#1503: FILE: drivers/target/target_core_configfs.c:1446:
+#define DEF_SNAP_ATTRIB_STR_STORE(_name, _max)				\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	if (strlen(page) > _max) {					\
+		printk(KERN_ERR "String length for attrib: %s exceeds max:" \
+			" %d\n", __stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	snprintf(SE_DEV_SNAP(se_dev)->_name, PAGE_SIZE, "%s", page);	\
+	return count;							\
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1510: FILE: drivers/target/target_core_configfs.c:1453:
+		printk(KERN_ERR "String length for attrib: %s exceeds max:" \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1518: FILE: drivers/target/target_core_configfs.c:1461:
+#define DEF_SNAP_ATTRIB_STR(_name, _max)				\
+DEF_SNAP_ATTRIB_STR_SHOW(_name)						\
+DEF_SNAP_ATTRIB_STR_STORE(_name, _max)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#1518: FILE: drivers/target/target_core_configfs.c:1461:
+#define DEF_SNAP_ATTRIB_STR(_name, _max)				\
+DEF_SNAP_ATTRIB_STR_SHOW(_name)						\
+DEF_SNAP_ATTRIB_STR_STORE(_name, _max)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#1522: FILE: drivers/target/target_core_configfs.c:1465:
+#define DEF_SNAP_ATTRIB_INT_SHOW(_name)					\
+static ssize_t target_core_dev_snap_show_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	char *page)							\
+{									\
+	return snprintf(page, PAGE_SIZE, "%d\n", SE_DEV_SNAP(se_dev)->_name); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#1530: FILE: drivers/target/target_core_configfs.c:1473:
+#define DEF_SNAP_ATTRIB_INT_STORE(_name, _max, _min)			\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	int ret;							\
+	unsigned long val;						\
+									\
+	ret = strict_strtoul(page, 0, &val);				\
+	if (ret < 0) {							\
+		printk(KERN_ERR "strict_strtoul() failed for %s with"	\
+			" ret: %d\n", __stringify(_name), ret);		\
+		return -EINVAL;						\
+	}								\
+	if ((_max != 0) && (val > _max)) {				\
+		printk(KERN_ERR "snap attribute: %s exceeds max: %d\n",	\
+				__stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	if (val < _min) {						\
+		printk(KERN_ERR "snap attribute: %s less than min: %d\n", \
+				__stringify(_name), _min);		\
+		return -EINVAL;						\
+	}								\
+	SE_DEV_SNAP(se_dev)->_name = (int)val;				\
+	return count;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_max' - possible side-effects?
#1530: FILE: drivers/target/target_core_configfs.c:1473:
+#define DEF_SNAP_ATTRIB_INT_STORE(_name, _max, _min)			\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	int ret;							\
+	unsigned long val;						\
+									\
+	ret = strict_strtoul(page, 0, &val);				\
+	if (ret < 0) {							\
+		printk(KERN_ERR "strict_strtoul() failed for %s with"	\
+			" ret: %d\n", __stringify(_name), ret);		\
+		return -EINVAL;						\
+	}								\
+	if ((_max != 0) && (val > _max)) {				\
+		printk(KERN_ERR "snap attribute: %s exceeds max: %d\n",	\
+				__stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	if (val < _min) {						\
+		printk(KERN_ERR "snap attribute: %s less than min: %d\n", \
+				__stringify(_name), _min);		\
+		return -EINVAL;						\
+	}								\
+	SE_DEV_SNAP(se_dev)->_name = (int)val;				\
+	return count;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_max' may be better as '(_max)' to avoid precedence issues
#1530: FILE: drivers/target/target_core_configfs.c:1473:
+#define DEF_SNAP_ATTRIB_INT_STORE(_name, _max, _min)			\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	int ret;							\
+	unsigned long val;						\
+									\
+	ret = strict_strtoul(page, 0, &val);				\
+	if (ret < 0) {							\
+		printk(KERN_ERR "strict_strtoul() failed for %s with"	\
+			" ret: %d\n", __stringify(_name), ret);		\
+		return -EINVAL;						\
+	}								\
+	if ((_max != 0) && (val > _max)) {				\
+		printk(KERN_ERR "snap attribute: %s exceeds max: %d\n",	\
+				__stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	if (val < _min) {						\
+		printk(KERN_ERR "snap attribute: %s less than min: %d\n", \
+				__stringify(_name), _min);		\
+		return -EINVAL;						\
+	}								\
+	SE_DEV_SNAP(se_dev)->_name = (int)val;				\
+	return count;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_min' - possible side-effects?
#1530: FILE: drivers/target/target_core_configfs.c:1473:
+#define DEF_SNAP_ATTRIB_INT_STORE(_name, _max, _min)			\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	int ret;							\
+	unsigned long val;						\
+									\
+	ret = strict_strtoul(page, 0, &val);				\
+	if (ret < 0) {							\
+		printk(KERN_ERR "strict_strtoul() failed for %s with"	\
+			" ret: %d\n", __stringify(_name), ret);		\
+		return -EINVAL;						\
+	}								\
+	if ((_max != 0) && (val > _max)) {				\
+		printk(KERN_ERR "snap attribute: %s exceeds max: %d\n",	\
+				__stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	if (val < _min) {						\
+		printk(KERN_ERR "snap attribute: %s less than min: %d\n", \
+				__stringify(_name), _min);		\
+		return -EINVAL;						\
+	}								\
+	SE_DEV_SNAP(se_dev)->_name = (int)val;				\
+	return count;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_min' may be better as '(_min)' to avoid precedence issues
#1530: FILE: drivers/target/target_core_configfs.c:1473:
+#define DEF_SNAP_ATTRIB_INT_STORE(_name, _max, _min)			\
+static ssize_t target_core_dev_snap_store_attr_##_name(			\
+	struct se_subsystem_dev_s *se_dev,				\
+	const char *page,						\
+	size_t count)							\
+{									\
+	int ret;							\
+	unsigned long val;						\
+									\
+	ret = strict_strtoul(page, 0, &val);				\
+	if (ret < 0) {							\
+		printk(KERN_ERR "strict_strtoul() failed for %s with"	\
+			" ret: %d\n", __stringify(_name), ret);		\
+		return -EINVAL;						\
+	}								\
+	if ((_max != 0) && (val > _max)) {				\
+		printk(KERN_ERR "snap attribute: %s exceeds max: %d\n",	\
+				__stringify(_name), _max);		\
+		return -EINVAL;						\
+	}								\
+	if (val < _min) {						\
+		printk(KERN_ERR "snap attribute: %s less than min: %d\n", \
+				__stringify(_name), _min);		\
+		return -EINVAL;						\
+	}								\
+	SE_DEV_SNAP(se_dev)->_name = (int)val;				\
+	return count;							\
+}

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1539: FILE: drivers/target/target_core_configfs.c:1482:
+	ret = strict_strtoul(page, 0, &val);				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1541: FILE: drivers/target/target_core_configfs.c:1484:
+		printk(KERN_ERR "strict_strtoul() failed for %s with"	\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '_max != 0'
#1545: FILE: drivers/target/target_core_configfs.c:1488:
+	if ((_max != 0) && (val > _max)) {				\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val > _max'
#1545: FILE: drivers/target/target_core_configfs.c:1488:
+	if ((_max != 0) && (val > _max)) {				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1546: FILE: drivers/target/target_core_configfs.c:1489:
+		printk(KERN_ERR "snap attribute: %s exceeds max: %d\n",	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1551: FILE: drivers/target/target_core_configfs.c:1494:
+		printk(KERN_ERR "snap attribute: %s less than min: %d\n", \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1559: FILE: drivers/target/target_core_configfs.c:1502:
+#define DEF_SNAP_ATTRIB_INT(_name, _max, _min)				\
+DEF_SNAP_ATTRIB_INT_SHOW(_name)						\
+DEF_SNAP_ATTRIB_INT_STORE(_name, _max, _min)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#1559: FILE: drivers/target/target_core_configfs.c:1502:
+#define DEF_SNAP_ATTRIB_INT(_name, _max, _min)				\
+DEF_SNAP_ATTRIB_INT_SHOW(_name)						\
+DEF_SNAP_ATTRIB_INT_STORE(_name, _max, _min)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1564: FILE: drivers/target/target_core_configfs.c:1507:
+SE_DEV_SNAP_ATTR(contact, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1567: FILE: drivers/target/target_core_configfs.c:1510:
+SE_DEV_SNAP_ATTR(lv_group, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1570: FILE: drivers/target/target_core_configfs.c:1513:
+SE_DEV_SNAP_ATTR(lvc_size, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1573: FILE: drivers/target/target_core_configfs.c:1516:
+SE_DEV_SNAP_ATTR(pid, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1576: FILE: drivers/target/target_core_configfs.c:1519:
+SE_DEV_SNAP_ATTR(enabled, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1579: FILE: drivers/target/target_core_configfs.c:1522:
+SE_DEV_SNAP_ATTR(permissions, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1583: FILE: drivers/target/target_core_configfs.c:1526:
+SE_DEV_SNAP_ATTR(max_snapshots, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1587: FILE: drivers/target/target_core_configfs.c:1530:
+SE_DEV_SNAP_ATTR(max_warn, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1591: FILE: drivers/target/target_core_configfs.c:1534:
+SE_DEV_SNAP_ATTR(check_interval, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1595: FILE: drivers/target/target_core_configfs.c:1538:
+SE_DEV_SNAP_ATTR(create_interval, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1599: FILE: drivers/target/target_core_configfs.c:1542:
+SE_DEV_SNAP_ATTR(usage, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1603: FILE: drivers/target/target_core_configfs.c:1546:
+SE_DEV_SNAP_ATTR(usage_warn, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1607: FILE: drivers/target/target_core_configfs.c:1550:
+SE_DEV_SNAP_ATTR(vgs_usage_warn, S_IRUGO | S_IWUSR);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != 0'
#1653: FILE: drivers/target/target_core_configfs.c:1596:
+	if (!t || (ret != 0))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1661: FILE: drivers/target/target_core_configfs.c:1604:
+	read_bytes += t->show_configfs_dev_params(hba, se_dev, page+read_bytes);
 	                                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1668: FILE: drivers/target/target_core_configfs.c:1611:
+		    .ca_mode = S_IRUGO },

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1673: FILE: drivers/target/target_core_configfs.c:1616:
+static ssize_t target_core_store_dev_control(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1684: FILE: drivers/target/target_core_configfs.c:1627:
+		printk(KERN_ERR "Unable to locate se_subsystem_dev_t>se"

WARNING:SPLIT_STRING: quoted string split across lines
#1685: FILE: drivers/target/target_core_configfs.c:1628:
+		printk(KERN_ERR "Unable to locate se_subsystem_dev_t>se"
+				"_dev_su_ptr\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#1685: FILE: drivers/target/target_core_configfs.c:1628:
+		printk(KERN_ERR "Unable to locate se_subsystem_dev_t>se"
+				"_dev_su_ptr\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != 0'
#1691: FILE: drivers/target/target_core_configfs.c:1634:
+	if (!t || (ret != 0))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#1700: FILE: drivers/target/target_core_configfs.c:1643:
+		    .ca_mode = S_IWUSR },

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1714: FILE: drivers/target/target_core_configfs.c:1657:
+		printk(KERN_ERR "se_dev->se_dev_ptr already set, ignoring"

WARNING:SPLIT_STRING: quoted string split across lines
#1715: FILE: drivers/target/target_core_configfs.c:1658:
+		printk(KERN_ERR "se_dev->se_dev_ptr already set, ignoring"
+			" fd request\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != 0'
#1721: FILE: drivers/target/target_core_configfs.c:1664:
+	if (!t || (ret != 0))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1725: FILE: drivers/target/target_core_configfs.c:1668:
+		printk(KERN_ERR "se_subsystem_api_t->create_virtdevice_from"

WARNING:SPLIT_STRING: quoted string split across lines
#1726: FILE: drivers/target/target_core_configfs.c:1669:
+		printk(KERN_ERR "se_subsystem_api_t->create_virtdevice_from"
+			"_fd() NULL for: %s\n", hba->transport->name);

WARNING:MISSING_SPACE: break quoted strings at a space character
#1726: FILE: drivers/target/target_core_configfs.c:1669:
+		printk(KERN_ERR "se_subsystem_api_t->create_virtdevice_from"
+			"_fd() NULL for: %s\n", hba->transport->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1738: FILE: drivers/target/target_core_configfs.c:1681:
+	printk(KERN_INFO "Target_Core_ConfigFS: Registered %s se_dev->se_dev"

WARNING:SPLIT_STRING: quoted string split across lines
#1739: FILE: drivers/target/target_core_configfs.c:1682:
+	printk(KERN_INFO "Target_Core_ConfigFS: Registered %s se_dev->se_dev"
+		"_ptr: %p from fd\n", hba->transport->name, se_dev->se_dev_ptr);

WARNING:MISSING_SPACE: break quoted strings at a space character
#1739: FILE: drivers/target/target_core_configfs.c:1682:
+	printk(KERN_INFO "Target_Core_ConfigFS: Registered %s se_dev->se_dev"
+		"_ptr: %p from fd\n", hba->transport->name, se_dev->se_dev_ptr);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#1748: FILE: drivers/target/target_core_configfs.c:1691:
+		    .ca_mode = S_IWUSR },

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1763: FILE: drivers/target/target_core_configfs.c:1706:
+static ssize_t target_core_store_dev_udev_path(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1772: FILE: drivers/target/target_core_configfs.c:1715:
+	if (count > (SE_UDEV_PATH_LEN-1)) {
 	                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1773: FILE: drivers/target/target_core_configfs.c:1716:
+		printk(KERN_ERR "udev_path count: %d exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#1774: FILE: drivers/target/target_core_configfs.c:1717:
+		printk(KERN_ERR "udev_path count: %d exceeds"
+			" SE_UDEV_PATH_LEN-1: %u\n", (int)count,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1775: FILE: drivers/target/target_core_configfs.c:1718:
+			SE_UDEV_PATH_LEN-1);
 			                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1781: FILE: drivers/target/target_core_configfs.c:1724:
+	read_bytes = snprintf(&se_dev->se_dev_udev_path[0], SE_UDEV_PATH_LEN,
+			"%s", page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1783: FILE: drivers/target/target_core_configfs.c:1726:
+	printk(KERN_INFO "Target_Core_ConfigFS: %s/%s set udev_path: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1784: FILE: drivers/target/target_core_configfs.c:1727:
+	printk(KERN_INFO "Target_Core_ConfigFS: %s/%s set udev_path: %s\n",
+		config_item_name(&hba->hba_group.cg_item),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1794: FILE: drivers/target/target_core_configfs.c:1737:
+		    .ca_mode =  S_IRUGO | S_IWUSR },

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1799: FILE: drivers/target/target_core_configfs.c:1742:
+static ssize_t target_core_store_dev_enable(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1813: FILE: drivers/target/target_core_configfs.c:1756:
+		printk(KERN_ERR "For dev_enable ops, only valid value"

WARNING:SPLIT_STRING: quoted string split across lines
#1814: FILE: drivers/target/target_core_configfs.c:1757:
+		printk(KERN_ERR "For dev_enable ops, only valid value"
+				" is \"1\"\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'se_dev->se_dev_ptr'
#1817: FILE: drivers/target/target_core_configfs.c:1760:
+	if ((se_dev->se_dev_ptr)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1818: FILE: drivers/target/target_core_configfs.c:1761:
+		printk(KERN_ERR "se_dev->se_dev_ptr already set for storage"

WARNING:SPLIT_STRING: quoted string split across lines
#1819: FILE: drivers/target/target_core_configfs.c:1762:
+		printk(KERN_ERR "se_dev->se_dev_ptr already set for storage"
+				" object\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != 0'
#1825: FILE: drivers/target/target_core_configfs.c:1768:
+	if (!t || (ret != 0))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1836: FILE: drivers/target/target_core_configfs.c:1779:
+	printk(KERN_INFO "Target_Core_ConfigFS: Registered se_dev->se_dev_ptr:"

WARNING:SPLIT_STRING: quoted string split across lines
#1837: FILE: drivers/target/target_core_configfs.c:1780:
+	printk(KERN_INFO "Target_Core_ConfigFS: Registered se_dev->se_dev_ptr:"
+		" %p\n", se_dev->se_dev_ptr);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#1845: FILE: drivers/target/target_core_configfs.c:1788:
+		    .ca_mode = S_IWUSR },

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1868: FILE: drivers/target/target_core_configfs.c:1811:
+		printk(KERN_ERR "NULL se_device_t->dev_alua_lu_gp_mem"

WARNING:SPLIT_STRING: quoted string split across lines
#1869: FILE: drivers/target/target_core_configfs.c:1812:
+		printk(KERN_ERR "NULL se_device_t->dev_alua_lu_gp_mem"
+				" pointer\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1885: FILE: drivers/target/target_core_configfs.c:1828:
+static ssize_t target_core_store_alua_lu_gp(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1903: FILE: drivers/target/target_core_configfs.c:1846:
+		printk(KERN_WARNING "SPC3_ALUA_EMULATED not enabled for %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1904: FILE: drivers/target/target_core_configfs.c:1847:
+		printk(KERN_WARNING "SPC3_ALUA_EMULATED not enabled for %s/%s\n",
+			config_item_name(&hba->hba_group.cg_item),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1909: FILE: drivers/target/target_core_configfs.c:1852:
+		printk(KERN_ERR "ALUA LU Group Alias too large!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1932: FILE: drivers/target/target_core_configfs.c:1875:
+		printk(KERN_ERR "NULL se_device_t->dev_alua_lu_gp_mem"

WARNING:SPLIT_STRING: quoted string split across lines
#1933: FILE: drivers/target/target_core_configfs.c:1876:
+		printk(KERN_ERR "NULL se_device_t->dev_alua_lu_gp_mem"
+				" pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1945: FILE: drivers/target/target_core_configfs.c:1888:
+			printk(KERN_INFO "Target_Core_ConfigFS: Releasing %s/%s"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1945: FILE: drivers/target/target_core_configfs.c:1888:
+			printk(KERN_INFO "Target_Core_ConfigFS: Releasing %s/%s"
+				" from ALUA LU Group: core/alua/lu_gps/%s, ID:"
+				" %hu\n",
+				config_item_name(&hba->hba_group.cg_item),
+				config_item_name(&su_dev->se_dev_group.cg_item),
+				config_item_name(&lu_gp->lu_gp_group.cg_item),
+				lu_gp->lu_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#1946: FILE: drivers/target/target_core_configfs.c:1889:
+			printk(KERN_INFO "Target_Core_ConfigFS: Releasing %s/%s"
+				" from ALUA LU Group: core/alua/lu_gps/%s, ID:"

WARNING:SPLIT_STRING: quoted string split across lines
#1947: FILE: drivers/target/target_core_configfs.c:1890:
+				" from ALUA LU Group: core/alua/lu_gps/%s, ID:"
+				" %hu\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1970: FILE: drivers/target/target_core_configfs.c:1913:
+	printk(KERN_INFO "Target_Core_ConfigFS: %s %s/%s to ALUA LU Group:"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1970: FILE: drivers/target/target_core_configfs.c:1913:
+	printk(KERN_INFO "Target_Core_ConfigFS: %s %s/%s to ALUA LU Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n",
+		(move) ? "Moving" : "Adding",
+		config_item_name(&hba->hba_group.cg_item),
+		config_item_name(&su_dev->se_dev_group.cg_item),
+		config_item_name(&lu_gp_new->lu_gp_group.cg_item),
+		lu_gp_new->lu_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#1971: FILE: drivers/target/target_core_configfs.c:1914:
+	printk(KERN_INFO "Target_Core_ConfigFS: %s %s/%s to ALUA LU Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1985: FILE: drivers/target/target_core_configfs.c:1928:
+		    .ca_mode = S_IRUGO | S_IWUSR },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2001: FILE: drivers/target/target_core_configfs.c:1944:
+static ssize_t target_core_dev_show(struct config_item *item,
+				     struct configfs_attribute *attr,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2004: FILE: drivers/target/target_core_configfs.c:1947:
+	se_subsystem_dev_t *se_dev = container_of(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2007: FILE: drivers/target/target_core_configfs.c:1950:
+	struct target_core_configfs_attribute *tc_attr = container_of(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2017: FILE: drivers/target/target_core_configfs.c:1960:
+static ssize_t target_core_dev_store(struct config_item *item,
+				      struct configfs_attribute *attr,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2020: FILE: drivers/target/target_core_configfs.c:1963:
+	se_subsystem_dev_t *se_dev = container_of(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2023: FILE: drivers/target/target_core_configfs.c:1966:
+	struct target_core_configfs_attribute *tc_attr = container_of(

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2049: FILE: drivers/target/target_core_configfs.c:1992:
+#define SE_DEV_ALUA_LU_ATTR(_name, _mode)				\
+static struct target_core_alua_lu_gp_attribute				\
+			target_core_alua_lu_gp_##_name =		\
+	__CONFIGFS_EATTR(_name, _mode,					\
+	target_core_alua_lu_gp_show_attr_##_name,			\
+	target_core_alua_lu_gp_store_attr_##_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2056: FILE: drivers/target/target_core_configfs.c:1999:
+#define SE_DEV_ALUA_LU_ATTR_RO(_name)					\
+static struct target_core_alua_lu_gp_attribute				\
+			target_core_alua_lu_gp_##_name =		\
+	__CONFIGFS_EATTR_RO(_name,					\
+	target_core_alua_lu_gp_show_attr_##_name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2065: FILE: drivers/target/target_core_configfs.c:2008:
+static ssize_t target_core_alua_lu_gp_show_attr_lu_gp_id(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2075: FILE: drivers/target/target_core_configfs.c:2018:
+static ssize_t target_core_alua_lu_gp_store_attr_lu_gp_id(

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2084: FILE: drivers/target/target_core_configfs.c:2027:
+	ret = strict_strtoul(page, 0, &lu_gp_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2086: FILE: drivers/target/target_core_configfs.c:2029:
+		printk(KERN_ERR "strict_strtoul() returned %d for"

WARNING:SPLIT_STRING: quoted string split across lines
#2087: FILE: drivers/target/target_core_configfs.c:2030:
+		printk(KERN_ERR "strict_strtoul() returned %d for"
+			" lu_gp_id\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2091: FILE: drivers/target/target_core_configfs.c:2034:
+		printk(KERN_ERR "ALUA lu_gp_id: %lu exceeds maximum:"

WARNING:SPLIT_STRING: quoted string split across lines
#2092: FILE: drivers/target/target_core_configfs.c:2035:
+		printk(KERN_ERR "ALUA lu_gp_id: %lu exceeds maximum:"
+			" 0x0000ffff\n", lu_gp_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2100: FILE: drivers/target/target_core_configfs.c:2043:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set ALUA Logical Unit"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#2100: FILE: drivers/target/target_core_configfs.c:2043:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set ALUA Logical Unit"
+		" Group: core/alua/lu_gps/%s to ID: %hu\n",
+		config_item_name(&alua_lu_gp_cg->cg_item),
+		lu_gp->lu_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#2101: FILE: drivers/target/target_core_configfs.c:2044:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set ALUA Logical Unit"
+		" Group: core/alua/lu_gps/%s to ID: %hu\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2108: FILE: drivers/target/target_core_configfs.c:2051:
+SE_DEV_ALUA_LU_ATTR(lu_gp_id, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2113: FILE: drivers/target/target_core_configfs.c:2056:
+static ssize_t target_core_alua_lu_gp_show_attr_members(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2133: FILE: drivers/target/target_core_configfs.c:2076:
+		cur_len = snprintf(buf, LU_GROUP_NAME_BUF, "%s/%s\n",
+			config_item_name(&hba->hba_group.cg_item),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2138: FILE: drivers/target/target_core_configfs.c:2081:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"

WARNING:SPLIT_STRING: quoted string split across lines
#2139: FILE: drivers/target/target_core_configfs.c:2082:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2139: FILE: drivers/target/target_core_configfs.c:2082:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2142: FILE: drivers/target/target_core_configfs.c:2085:
+		memcpy(page+len, buf, cur_len);
 		           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2175: FILE: drivers/target/target_core_configfs.c:2118:
+static struct config_group *target_core_alua_create_lu_gp(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2191: FILE: drivers/target/target_core_configfs.c:2134:
+	config_group_init_type_name(alua_lu_gp_cg, name,
+			&target_core_alua_lu_gp_cit);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2193: FILE: drivers/target/target_core_configfs.c:2136:
+	printk(KERN_INFO "Target_Core_ConfigFS: Allocated ALUA Logical Unit"

WARNING:SPLIT_STRING: quoted string split across lines
#2194: FILE: drivers/target/target_core_configfs.c:2137:
+	printk(KERN_INFO "Target_Core_ConfigFS: Allocated ALUA Logical Unit"
+		" Group: core/alua/lu_gps/%s\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2199: FILE: drivers/target/target_core_configfs.c:2142:
+
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2201: FILE: drivers/target/target_core_configfs.c:2144:
+static void target_core_alua_drop_lu_gp(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2208: FILE: drivers/target/target_core_configfs.c:2151:
+	printk(KERN_INFO "Target_Core_ConfigFS: Releasing ALUA Logical Unit"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#2208: FILE: drivers/target/target_core_configfs.c:2151:
+	printk(KERN_INFO "Target_Core_ConfigFS: Releasing ALUA Logical Unit"
+		" Group: core/alua/lu_gps/%s, ID: %hu\n",
+		config_item_name(item), lu_gp->lu_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#2209: FILE: drivers/target/target_core_configfs.c:2152:
+	printk(KERN_INFO "Target_Core_ConfigFS: Releasing ALUA Logical Unit"
+		" Group: core/alua/lu_gps/%s, ID: %hu\n",

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2231: FILE: drivers/target/target_core_configfs.c:2174:
+#define SE_DEV_ALUA_TG_PT_ATTR(_name, _mode)				\
+static struct target_core_alua_tg_pt_gp_attribute			\
+			target_core_alua_tg_pt_gp_##_name =		\
+	__CONFIGFS_EATTR(_name, _mode,					\
+	target_core_alua_tg_pt_gp_show_attr_##_name,			\
+	target_core_alua_tg_pt_gp_store_attr_##_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2238: FILE: drivers/target/target_core_configfs.c:2181:
+#define SE_DEV_ALUA_TG_PT_ATTR_RO(_name)				\
+static struct target_core_alua_tg_pt_gp_attribute			\
+			target_core_alua_tg_pt_gp_##_name =		\
+	__CONFIGFS_EATTR_RO(_name,					\
+	target_core_alua_tg_pt_gp_show_attr_##_name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2247: FILE: drivers/target/target_core_configfs.c:2190:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_access_state(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2255: FILE: drivers/target/target_core_configfs.c:2198:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_alua_access_state(

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#2265: FILE: drivers/target/target_core_configfs.c:2208:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"
 		                              ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2265: FILE: drivers/target/target_core_configfs.c:2208:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#2265: FILE: drivers/target/target_core_configfs.c:2208:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"
+			" tg_pt_gp ID: %hu\n", tg_pt_gp->tg_pt_gp_valid_id);

WARNING:SPLIT_STRING: quoted string split across lines
#2266: FILE: drivers/target/target_core_configfs.c:2209:
+		printk(KERN_ERR "Unable to do implict ALUA on non valid"
+			" tg_pt_gp ID: %hu\n", tg_pt_gp->tg_pt_gp_valid_id);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2270: FILE: drivers/target/target_core_configfs.c:2213:
+	ret = strict_strtoul(page, 0, &tmp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2272: FILE: drivers/target/target_core_configfs.c:2215:
+		printk("Unable to extract new ALUA access state from"

WARNING:SPLIT_STRING: quoted string split across lines
#2273: FILE: drivers/target/target_core_configfs.c:2216:
+		printk("Unable to extract new ALUA access state from"
+				" %s\n", page);

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#2279: FILE: drivers/target/target_core_configfs.c:2222:
+		printk(KERN_ERR "Unable to process implict configfs ALUA"
 		                                   ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2279: FILE: drivers/target/target_core_configfs.c:2222:
+		printk(KERN_ERR "Unable to process implict configfs ALUA"

WARNING:TYPO_SPELLING: 'diabled' may be misspelled - perhaps 'disabled'?
#2280: FILE: drivers/target/target_core_configfs.c:2223:
+			" transition while TPGS_IMPLICT_ALUA is diabled\n");
 			                                        ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#2280: FILE: drivers/target/target_core_configfs.c:2223:
+		printk(KERN_ERR "Unable to process implict configfs ALUA"
+			" transition while TPGS_IMPLICT_ALUA is diabled\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2285: FILE: drivers/target/target_core_configfs.c:2228:
+	ret = core_alua_do_port_transition(tg_pt_gp, su_dev->se_dev_ptr,
+					NULL, NULL, new_state, 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2289: FILE: drivers/target/target_core_configfs.c:2232:
+SE_DEV_ALUA_TG_PT_ATTR(alua_access_state, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2294: FILE: drivers/target/target_core_configfs.c:2237:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_access_status(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2302: FILE: drivers/target/target_core_configfs.c:2245:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_alua_access_status(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2311: FILE: drivers/target/target_core_configfs.c:2254:
+		printk(KERN_ERR "Unable to do set ALUA access status on non"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#2311: FILE: drivers/target/target_core_configfs.c:2254:
+		printk(KERN_ERR "Unable to do set ALUA access status on non"
+			" valid tg_pt_gp ID: %hu\n",
+			tg_pt_gp->tg_pt_gp_valid_id);

WARNING:SPLIT_STRING: quoted string split across lines
#2312: FILE: drivers/target/target_core_configfs.c:2255:
+		printk(KERN_ERR "Unable to do set ALUA access status on non"
+			" valid tg_pt_gp ID: %hu\n",

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2317: FILE: drivers/target/target_core_configfs.c:2260:
+	ret = strict_strtoul(page, 0, &tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2319: FILE: drivers/target/target_core_configfs.c:2262:
+		printk(KERN_ERR "Unable to extract new ALUA access status"

WARNING:SPLIT_STRING: quoted string split across lines
#2320: FILE: drivers/target/target_core_configfs.c:2263:
+		printk(KERN_ERR "Unable to extract new ALUA access status"
+				" from %s\n", page);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_status != ALUA_STATUS_NONE'
#2325: FILE: drivers/target/target_core_configfs.c:2268:
+	if ((new_status != ALUA_STATUS_NONE) &&
+	    (new_status != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG) &&
+	    (new_status != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_status != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG'
#2325: FILE: drivers/target/target_core_configfs.c:2268:
+	if ((new_status != ALUA_STATUS_NONE) &&
+	    (new_status != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG) &&
+	    (new_status != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_status != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA'
#2325: FILE: drivers/target/target_core_configfs.c:2268:
+	if ((new_status != ALUA_STATUS_NONE) &&
+	    (new_status != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG) &&
+	    (new_status != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2328: FILE: drivers/target/target_core_configfs.c:2271:
+		printk(KERN_ERR "Illegal ALUA access status: 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2329: FILE: drivers/target/target_core_configfs.c:2272:
+		printk(KERN_ERR "Illegal ALUA access status: 0x%02x\n",
+				new_status);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2337: FILE: drivers/target/target_core_configfs.c:2280:
+SE_DEV_ALUA_TG_PT_ATTR(alua_access_status, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2342: FILE: drivers/target/target_core_configfs.c:2285:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_access_type(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2349: FILE: drivers/target/target_core_configfs.c:2292:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_alua_access_type(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2357: FILE: drivers/target/target_core_configfs.c:2300:
+SE_DEV_ALUA_TG_PT_ATTR(alua_access_type, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2362: FILE: drivers/target/target_core_configfs.c:2305:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_write_metadata(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2369: FILE: drivers/target/target_core_configfs.c:2312:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_alua_write_metadata(

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2377: FILE: drivers/target/target_core_configfs.c:2320:
+	ret = strict_strtoul(page, 0, &tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2379: FILE: drivers/target/target_core_configfs.c:2322:
+		printk(KERN_ERR "Unable to extract alua_write_metadata\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 0'
#2383: FILE: drivers/target/target_core_configfs.c:2326:
+	if ((tmp != 0) && (tmp != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 1'
#2383: FILE: drivers/target/target_core_configfs.c:2326:
+	if ((tmp != 0) && (tmp != 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2384: FILE: drivers/target/target_core_configfs.c:2327:
+		printk(KERN_ERR "Illegal value for alua_write_metadata:"

WARNING:SPLIT_STRING: quoted string split across lines
#2385: FILE: drivers/target/target_core_configfs.c:2328:
+		printk(KERN_ERR "Illegal value for alua_write_metadata:"
+			" %lu\n", tmp);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2393: FILE: drivers/target/target_core_configfs.c:2336:
+SE_DEV_ALUA_TG_PT_ATTR(alua_write_metadata, S_IRUGO | S_IWUSR);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2395: FILE: drivers/target/target_core_configfs.c:2338:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2400: FILE: drivers/target/target_core_configfs.c:2343:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_nonop_delay_msecs(

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2406: FILE: drivers/target/target_core_configfs.c:2349:
+
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2408: FILE: drivers/target/target_core_configfs.c:2351:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_nonop_delay_msecs(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2416: FILE: drivers/target/target_core_configfs.c:2359:
+SE_DEV_ALUA_TG_PT_ATTR(nonop_delay_msecs, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2421: FILE: drivers/target/target_core_configfs.c:2364:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_trans_delay_msecs(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2428: FILE: drivers/target/target_core_configfs.c:2371:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_trans_delay_msecs(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2436: FILE: drivers/target/target_core_configfs.c:2379:
+SE_DEV_ALUA_TG_PT_ATTR(trans_delay_msecs, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2442: FILE: drivers/target/target_core_configfs.c:2385:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_preferred(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2449: FILE: drivers/target/target_core_configfs.c:2392:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_preferred(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2457: FILE: drivers/target/target_core_configfs.c:2400:
+SE_DEV_ALUA_TG_PT_ATTR(preferred, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2462: FILE: drivers/target/target_core_configfs.c:2405:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_tg_pt_gp_id(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2472: FILE: drivers/target/target_core_configfs.c:2415:
+static ssize_t target_core_alua_tg_pt_gp_store_attr_tg_pt_gp_id(

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2481: FILE: drivers/target/target_core_configfs.c:2424:
+	ret = strict_strtoul(page, 0, &tg_pt_gp_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2483: FILE: drivers/target/target_core_configfs.c:2426:
+		printk(KERN_ERR "strict_strtoul() returned %d for"

WARNING:SPLIT_STRING: quoted string split across lines
#2484: FILE: drivers/target/target_core_configfs.c:2427:
+		printk(KERN_ERR "strict_strtoul() returned %d for"
+			" tg_pt_gp_id\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2488: FILE: drivers/target/target_core_configfs.c:2431:
+		printk(KERN_ERR "ALUA tg_pt_gp_id: %lu exceeds maximum:"

WARNING:SPLIT_STRING: quoted string split across lines
#2489: FILE: drivers/target/target_core_configfs.c:2432:
+		printk(KERN_ERR "ALUA tg_pt_gp_id: %lu exceeds maximum:"
+			" 0x0000ffff\n", tg_pt_gp_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2497: FILE: drivers/target/target_core_configfs.c:2440:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set ALUA Target Port Group: "

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#2497: FILE: drivers/target/target_core_configfs.c:2440:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set ALUA Target Port Group: "
+		"core/alua/tg_pt_gps/%s to ID: %hu\n",
+		config_item_name(&alua_tg_pt_gp_cg->cg_item),
+		tg_pt_gp->tg_pt_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#2498: FILE: drivers/target/target_core_configfs.c:2441:
+	printk(KERN_INFO "Target_Core_ConfigFS: Set ALUA Target Port Group: "
+		"core/alua/tg_pt_gps/%s to ID: %hu\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2505: FILE: drivers/target/target_core_configfs.c:2448:
+SE_DEV_ALUA_TG_PT_ATTR(tg_pt_gp_id, S_IRUGO | S_IWUSR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2510: FILE: drivers/target/target_core_configfs.c:2453:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_members(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2525: FILE: drivers/target/target_core_configfs.c:2468:
+	list_for_each_entry(tg_pt_gp_mem, &tg_pt_gp->tg_pt_gp_mem_list,
+			tg_pt_gp_mem_list) {

WARNING:SPLIT_STRING: quoted string split across lines
#2531: FILE: drivers/target/target_core_configfs.c:2474:
+		cur_len = snprintf(buf, TG_PT_GROUP_NAME_BUF, "%s/%s/tpgt_%hu"
+			"/%s\n", TPG_TFO(tpg)->get_fabric_name(),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2538: FILE: drivers/target/target_core_configfs.c:2481:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"

WARNING:SPLIT_STRING: quoted string split across lines
#2539: FILE: drivers/target/target_core_configfs.c:2482:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2539: FILE: drivers/target/target_core_configfs.c:2482:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2542: FILE: drivers/target/target_core_configfs.c:2485:
+		memcpy(page+len, buf, cur_len);
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2553: FILE: drivers/target/target_core_configfs.c:2496:
+CONFIGFS_EATTR_OPS(target_core_alua_tg_pt_gp, t10_alua_tg_pt_gp_s,
+			tg_pt_gp_group);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2583: FILE: drivers/target/target_core_configfs.c:2526:
+static struct config_group *target_core_alua_create_tg_pt_gp(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2602: FILE: drivers/target/target_core_configfs.c:2545:
+	config_group_init_type_name(alua_tg_pt_gp_cg, name,
+			&target_core_alua_tg_pt_gp_cit);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2604: FILE: drivers/target/target_core_configfs.c:2547:
+	printk(KERN_INFO "Target_Core_ConfigFS: Allocated ALUA Target Port"

WARNING:SPLIT_STRING: quoted string split across lines
#2605: FILE: drivers/target/target_core_configfs.c:2548:
+	printk(KERN_INFO "Target_Core_ConfigFS: Allocated ALUA Target Port"
+		" Group: alua/tg_pt_gps/%s\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2611: FILE: drivers/target/target_core_configfs.c:2554:
+static void target_core_alua_drop_tg_pt_gp(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2618: FILE: drivers/target/target_core_configfs.c:2561:
+	printk(KERN_INFO "Target_Core_ConfigFS: Releasing ALUA Target Port"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#2618: FILE: drivers/target/target_core_configfs.c:2561:
+	printk(KERN_INFO "Target_Core_ConfigFS: Releasing ALUA Target Port"
+		" Group: alua/tg_pt_gps/%s, ID: %hu\n",
+		config_item_name(item), tg_pt_gp->tg_pt_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#2619: FILE: drivers/target/target_core_configfs.c:2562:
+	printk(KERN_INFO "Target_Core_ConfigFS: Releasing ALUA Target Port"
+		" Group: alua/tg_pt_gps/%s, ID: %hu\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2656: FILE: drivers/target/target_core_configfs.c:2599:
+static struct config_group *target_core_call_createdev(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2670: FILE: drivers/target/target_core_configfs.c:2613:
+		printk(KERN_ERR "Unable to locate config_item hba_ci\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2676: FILE: drivers/target/target_core_configfs.c:2619:
+		printk(KERN_ERR "Unable to locate se_hba_t from struct config_item\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != 0'
#2685: FILE: drivers/target/target_core_configfs.c:2628:
+	if (!t || (ret != 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2692: FILE: drivers/target/target_core_configfs.c:2635:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#2693: FILE: drivers/target/target_core_configfs.c:2636:
+		printk(KERN_ERR "Unable to allocate memory for"
+				" se_subsystem_dev_t\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#2714: FILE: drivers/target/target_core_configfs.c:2657:
+	dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 6,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2715: FILE: drivers/target/target_core_configfs.c:2658:
+	dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 6,
+			GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2731: FILE: drivers/target/target_core_configfs.c:2674:
+		printk(KERN_ERR "Unable to locate subsystem dependent pointer"

WARNING:SPLIT_STRING: quoted string split across lines
#2732: FILE: drivers/target/target_core_configfs.c:2675:
+		printk(KERN_ERR "Unable to locate subsystem dependent pointer"
+			" from allocate_virtdevice()\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2740: FILE: drivers/target/target_core_configfs.c:2683:
+	config_group_init_type_name(&se_dev->se_dev_group, name,
+			&target_core_dev_cit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2742: FILE: drivers/target/target_core_configfs.c:2685:
+	config_group_init_type_name(&se_dev->se_dev_attrib.da_group, "attrib",
+			&target_core_dev_attrib_cit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2744: FILE: drivers/target/target_core_configfs.c:2687:
+	config_group_init_type_name(&se_dev->se_dev_pr_group, "pr",
+			&target_core_dev_pr_cit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2746: FILE: drivers/target/target_core_configfs.c:2689:
+	config_group_init_type_name(&se_dev->se_dev_snap_group, "snap",
+			&target_core_dev_snap_cit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2748: FILE: drivers/target/target_core_configfs.c:2691:
+	config_group_init_type_name(&se_dev->t10_wwn.t10_wwn_group, "wwn",
+			&target_core_dev_wwn_cit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2750: FILE: drivers/target/target_core_configfs.c:2693:
+	config_group_init_type_name(&se_dev->t10_alua.alua_tg_pt_gps_group,
+			"alua", &target_core_alua_tg_pt_gps_cit);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tg_pt_gp_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#2765: FILE: drivers/target/target_core_configfs.c:2708:
+	tg_pt_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2766: FILE: drivers/target/target_core_configfs.c:2709:
+	tg_pt_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+				GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2768: FILE: drivers/target/target_core_configfs.c:2711:
+		printk(KERN_ERR "Unable to allocate tg_pt_gp_cg->"

WARNING:SPLIT_STRING: quoted string split across lines
#2769: FILE: drivers/target/target_core_configfs.c:2712:
+		printk(KERN_ERR "Unable to allocate tg_pt_gp_cg->"
+				"default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2774: FILE: drivers/target/target_core_configfs.c:2717:
+	config_group_init_type_name(&tg_pt_gp->tg_pt_gp_group,
+			"default_tg_pt_gp", &target_core_alua_tg_pt_gp_cit);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2779: FILE: drivers/target/target_core_configfs.c:2722:
+	printk(KERN_INFO "Target_Core_ConfigFS: Allocated se_subsystem_dev_t:"

WARNING:SPLIT_STRING: quoted string split across lines
#2780: FILE: drivers/target/target_core_configfs.c:2723:
+	printk(KERN_INFO "Target_Core_ConfigFS: Allocated se_subsystem_dev_t:"
+		" %p se_dev_su_ptr: %p\n", se_dev, se_dev->se_dev_su_ptr);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2800: FILE: drivers/target/target_core_configfs.c:2743:
+static void target_core_call_freedev(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2812: FILE: drivers/target/target_core_configfs.c:2755:
+	hba = target_core_get_hba_from_item(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != 0'
#2819: FILE: drivers/target/target_core_configfs.c:2762:
+	if (!t || (ret != 0))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2841: FILE: drivers/target/target_core_configfs.c:2784:
+		printk(KERN_INFO "Target_Core_ConfigFS: Calling se_free_"

WARNING:SPLIT_STRING: quoted string split across lines
#2842: FILE: drivers/target/target_core_configfs.c:2785:
+		printk(KERN_INFO "Target_Core_ConfigFS: Calling se_free_"
+			"virtual_device() for se_dev_ptr: %p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2842: FILE: drivers/target/target_core_configfs.c:2785:
+		printk(KERN_INFO "Target_Core_ConfigFS: Calling se_free_"
+			"virtual_device() for se_dev_ptr: %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2852: FILE: drivers/target/target_core_configfs.c:2795:
+		printk(KERN_INFO "Target_Core_ConfigFS: Calling t->free_"

WARNING:SPLIT_STRING: quoted string split across lines
#2853: FILE: drivers/target/target_core_configfs.c:2796:
+		printk(KERN_INFO "Target_Core_ConfigFS: Calling t->free_"
+			"device() for se_dev_su_ptr: %p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2853: FILE: drivers/target/target_core_configfs.c:2796:
+		printk(KERN_INFO "Target_Core_ConfigFS: Calling t->free_"
+			"device() for se_dev_su_ptr: %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2859: FILE: drivers/target/target_core_configfs.c:2802:
+	printk(KERN_INFO "Target_Core_ConfigFS: Deallocating se_subsystem"

WARNING:SPLIT_STRING: quoted string split across lines
#2860: FILE: drivers/target/target_core_configfs.c:2803:
+	printk(KERN_INFO "Target_Core_ConfigFS: Deallocating se_subsystem"
+		"_dev_t: %p\n", se_dev);

WARNING:MISSING_SPACE: break quoted strings at a space character
#2860: FILE: drivers/target/target_core_configfs.c:2803:
+	printk(KERN_INFO "Target_Core_ConfigFS: Deallocating se_subsystem"
+		"_dev_t: %p\n", se_dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2874: FILE: drivers/target/target_core_configfs.c:2817:
+static ssize_t target_core_hba_show(struct config_item *item,
+				struct configfs_attribute *attr,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2881: FILE: drivers/target/target_core_configfs.c:2824:
+		printk(KERN_ERR "Unable to locate se_hba_t\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2893: FILE: drivers/target/target_core_configfs.c:2836:
+	.ca_mode		= S_IRUGO,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2912: FILE: drivers/target/target_core_configfs.c:2855:
+static struct config_group *target_core_call_addhbatotarget(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2925: FILE: drivers/target/target_core_configfs.c:2868:
+		printk(KERN_ERR "Passed *name strlen(): %d exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#2926: FILE: drivers/target/target_core_configfs.c:2869:
+		printk(KERN_ERR "Passed *name strlen(): %d exceeds"
+			" TARGET_CORE_NAME_MAX_LEN: %d\n", (int)strlen(name),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2934: FILE: drivers/target/target_core_configfs.c:2877:
+		printk(KERN_ERR "Unable to locate \"_\" for $SUBSYSTEM_PLUGIN_$HOST_ID\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2942: FILE: drivers/target/target_core_configfs.c:2885:
+	str2 = strstr(str+1, "_");
 	                 ^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2957: FILE: drivers/target/target_core_configfs.c:2900:
+	ret = strict_strtoul(str, 0, &plugin_dep_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2959: FILE: drivers/target/target_core_configfs.c:2902:
+		printk(KERN_ERR "strict_strtoul() returned %d for"

WARNING:SPLIT_STRING: quoted string split across lines
#2960: FILE: drivers/target/target_core_configfs.c:2903:
+		printk(KERN_ERR "strict_strtoul() returned %d for"
+				" plugin_dep_id\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2963: FILE: drivers/target/target_core_configfs.c:2906:
+	printk(KERN_INFO "Target_Core_ConfigFS: Located se_plugin: %p"

WARNING:SPLIT_STRING: quoted string split across lines
#2964: FILE: drivers/target/target_core_configfs.c:2907:
+	printk(KERN_INFO "Target_Core_ConfigFS: Located se_plugin: %p"
+		" plugin_name: %s hba_type: %d plugin_dep_id: %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2976: FILE: drivers/target/target_core_configfs.c:2919:
+	config_group_init_type_name(&hba->hba_group, name,
+			&target_core_hba_cit);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2983: FILE: drivers/target/target_core_configfs.c:2926:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2984: FILE: drivers/target/target_core_configfs.c:2927:
+static void target_core_call_delhbafromtarget(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3020: FILE: drivers/target/target_core_configfs.c:2963:
+	printk(KERN_INFO "TARGET_CORE[0]: Loading Generic Kernel Storage"

WARNING:SPLIT_STRING: quoted string split across lines
#3021: FILE: drivers/target/target_core_configfs.c:2964:
+	printk(KERN_INFO "TARGET_CORE[0]: Loading Generic Kernel Storage"
+		" Engine: %s on %s/%s on "UTS_RELEASE"\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3021: FILE: drivers/target/target_core_configfs.c:2964:
+		" Engine: %s on %s/%s on "UTS_RELEASE"\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*target_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#3041: FILE: drivers/target/target_core_configfs.c:2984:
+	target_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3042: FILE: drivers/target/target_core_configfs.c:2985:
+	target_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+				GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3044: FILE: drivers/target/target_core_configfs.c:2987:
+		printk(KERN_ERR "Unable to allocate target_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3049: FILE: drivers/target/target_core_configfs.c:2992:
+	config_group_init_type_name(&se_global->target_core_hbagroup,
+			"core", &target_core_cit);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*hba_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#3056: FILE: drivers/target/target_core_configfs.c:2999:
+	hba_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3057: FILE: drivers/target/target_core_configfs.c:3000:
+	hba_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+				GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3059: FILE: drivers/target/target_core_configfs.c:3002:
+		printk(KERN_ERR "Unable to allocate hba_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3063: FILE: drivers/target/target_core_configfs.c:3006:
+	config_group_init_type_name(&se_global->alua_group,
+			"alua", &target_core_alua_cit);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*alua_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#3071: FILE: drivers/target/target_core_configfs.c:3014:
+	alua_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3072: FILE: drivers/target/target_core_configfs.c:3015:
+	alua_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+			GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3074: FILE: drivers/target/target_core_configfs.c:3017:
+		printk(KERN_ERR "Unable to allocate alua_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3079: FILE: drivers/target/target_core_configfs.c:3022:
+	config_group_init_type_name(&se_global->alua_lu_gps_group,
+			"lu_gps", &target_core_alua_lu_gps_cit);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*lu_gp_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#3090: FILE: drivers/target/target_core_configfs.c:3033:
+	lu_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3091: FILE: drivers/target/target_core_configfs.c:3034:
+	lu_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+			GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3093: FILE: drivers/target/target_core_configfs.c:3036:
+		printk(KERN_ERR "Unable to allocate lu_gp_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3098: FILE: drivers/target/target_core_configfs.c:3041:
+	config_group_init_type_name(&lu_gp->lu_gp_group, "default_lu_gp",
+				&target_core_alua_lu_gp_cit);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3107: FILE: drivers/target/target_core_configfs.c:3050:
+		printk(KERN_ERR "Error %d while registering subsystem %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3108: FILE: drivers/target/target_core_configfs.c:3051:
+		printk(KERN_ERR "Error %d while registering subsystem %s\n",
+			ret, subsys->su_group.cg_item.ci_namebuf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3111: FILE: drivers/target/target_core_configfs.c:3054:
+	printk(KERN_INFO "TARGET_CORE[0]: Initialized ConfigFS Fabric"

WARNING:SPLIT_STRING: quoted string split across lines
#3112: FILE: drivers/target/target_core_configfs.c:3055:
+	printk(KERN_INFO "TARGET_CORE[0]: Initialized ConfigFS Fabric"
+		" Infrastructure: "TARGET_CORE_CONFIGFS_VERSION" on %s/%s"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3112: FILE: drivers/target/target_core_configfs.c:3055:
+		" Infrastructure: "TARGET_CORE_CONFIGFS_VERSION" on %s/%s"

WARNING:SPLIT_STRING: quoted string split across lines
#3113: FILE: drivers/target/target_core_configfs.c:3056:
+		" Infrastructure: "TARGET_CORE_CONFIGFS_VERSION" on %s/%s"
+		" on "UTS_RELEASE"\n", utsname()->sysname, utsname()->machine);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3113: FILE: drivers/target/target_core_configfs.c:3056:
+		" on "UTS_RELEASE"\n", utsname()->sysname, utsname()->machine);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3119: FILE: drivers/target/target_core_configfs.c:3062:
+		printk(KERN_ERR "proc_mkdir(scsi_target, 0) failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3190: FILE: drivers/target/target_core_configfs.c:3133:
+	printk(KERN_INFO "TARGET_CORE[0]: Released ConfigFS Fabric"

WARNING:SPLIT_STRING: quoted string split across lines
#3191: FILE: drivers/target/target_core_configfs.c:3134:
+	printk(KERN_INFO "TARGET_CORE[0]: Released ConfigFS Fabric"
+			" Infrastructure\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#3200: FILE: drivers/target/target_core_configfs.c:3143:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3214: FILE: include/target/target_core_configfs.h:1:
+/***************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3236: FILE: include/target/target_core_configfs.h:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3237: FILE: include/target/target_core_configfs.h:24:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3250: FILE: include/target/target_core_configfs.h:37:
+extern struct se_hba_s *target_core_get_hba_from_item(struct config_item *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct config_item *' should also have an identifier name
#3250: FILE: include/target/target_core_configfs.h:37:
+extern struct se_hba_s *target_core_get_hba_from_item(struct config_item *);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3251: FILE: include/target/target_core_configfs.h:38:
+extern struct target_fabric_configfs *target_fabric_configfs_init(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3251: FILE: include/target/target_core_configfs.h:38:
+extern struct target_fabric_configfs *target_fabric_configfs_init(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct config_item_type *' should also have an identifier name
#3251: FILE: include/target/target_core_configfs.h:38:
+extern struct target_fabric_configfs *target_fabric_configfs_init(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3253: FILE: include/target/target_core_configfs.h:40:
+extern void target_fabric_configfs_free(struct target_fabric_configfs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct target_fabric_configfs *' should also have an identifier name
#3253: FILE: include/target/target_core_configfs.h:40:
+extern void target_fabric_configfs_free(struct target_fabric_configfs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3254: FILE: include/target/target_core_configfs.h:41:
+extern int target_fabric_configfs_register(struct target_fabric_configfs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct target_fabric_configfs *' should also have an identifier name
#3254: FILE: include/target/target_core_configfs.h:41:
+extern int target_fabric_configfs_register(struct target_fabric_configfs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3255: FILE: include/target/target_core_configfs.h:42:
+extern void target_fabric_configfs_deregister(struct target_fabric_configfs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct target_fabric_configfs *' should also have an identifier name
#3255: FILE: include/target/target_core_configfs.h:42:
+extern void target_fabric_configfs_deregister(struct target_fabric_configfs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3256: FILE: include/target/target_core_configfs.h:43:
+extern int target_core_init_configfs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3257: FILE: include/target/target_core_configfs.h:44:
+extern void target_core_exit_configfs(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct target_fabric_configfs *' should also have an identifier name
#3262: FILE: include/target/target_core_configfs.h:49:
+	void (*reg_default_groups_callback)(struct target_fabric_configfs *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073424.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 323 warnings, 185 checks, 3209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073424.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
