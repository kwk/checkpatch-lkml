CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#56: FILE: mm/dmapool.c:20:
+	spinlock_t lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#76: FILE: mm/dmapool.c:34:
+	unsigned in_use;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#110: FILE: mm/dmapool.c:81:
+static DEVICE_ATTR(pools, S_IRUGO, show_pools, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#139: FILE: mm/dmapool.c:129:
+	if (!

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SIZEOF_PARENTHESIS: sizeof *retval should be sizeof(*retval)
#141: FILE: mm/dmapool.c:131:
+	     kmalloc_node(sizeof *retval, GFP_KERNEL, dev_to_node(dev))))

WARNING:SIZEOF_PARENTHESIS: sizeof retval->name should be sizeof(retval->name)
#145: FILE: mm/dmapool.c:134:
+	strlcpy(retval->name, name, sizeof retval->name);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#145: FILE: mm/dmapool.c:134:
+	strlcpy(retval->name, name, sizeof retval->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: mm/dmapool.c:237:
+		struct dma_page *page;
+		page = list_entry(pool->page_list.next,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#289: FILE: mm/dmapool.c:239:
+		if (is_page_busy(pool->blocks_per_page, page->bitmap)) {
[...]
 			/* leak the still-in-use consistent memory */
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_destroy', this function's name, in a string
#293: FILE: mm/dmapool.c:242:
+					"dma_pool_destroy %s, %p busy\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#298: FILE: mm/dmapool.c:245:
+				printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_destroy', this function's name, in a string
#299: FILE: mm/dmapool.c:246:
+				       "dma_pool_destroy %s, %p busy\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_free', this function's name, in a string
#462: FILE: mm/dmapool.c:366:
+				"dma_pool_free %s, %p/%lx (bad dma)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#467: FILE: mm/dmapool.c:369:
+			printk(KERN_ERR "dma_pool_free %s, %p/%lx (bad dma)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_free', this function's name, in a string
#467: FILE: mm/dmapool.c:369:
+			printk(KERN_ERR "dma_pool_free %s, %p/%lx (bad dma)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_free', this function's name, in a string
#479: FILE: mm/dmapool.c:383:
+				"dma_pool_free %s, %p (bad vaddr)/%Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#479: FILE: mm/dmapool.c:383:
+				"dma_pool_free %s, %p (bad vaddr)/%Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#484: FILE: mm/dmapool.c:386:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_free', this function's name, in a string
#485: FILE: mm/dmapool.c:387:
+			       "dma_pool_free %s, %p (bad vaddr)/%Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#485: FILE: mm/dmapool.c:387:
+			       "dma_pool_free %s, %p (bad vaddr)/%Lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_free', this function's name, in a string
#494: FILE: mm/dmapool.c:394:
+				"dma_pool_free %s, dma %Lx already free\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#494: FILE: mm/dmapool.c:394:
+				"dma_pool_free %s, dma %Lx already free\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#499: FILE: mm/dmapool.c:397:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_pool_free', this function's name, in a string
#500: FILE: mm/dmapool.c:398:
+			       "dma_pool_free %s, dma %Lx already free\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#500: FILE: mm/dmapool.c:398:
+			       "dma_pool_free %s, dma %Lx already free\n",

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#515: FILE: mm/dmapool.c:408:
+	if (waitqueue_active(&pool->waitq))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350990.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 23 warnings, 2 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350990.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
