WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: include/linux/integrity.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: include/linux/integrity.h:20:
+void integrity_audit_msg(int audit_msgno, struct inode *inode,
+			const unsigned char *fname, char *op,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: include/linux/integrity.h:30:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: include/linux/integrity.h:36:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: include/linux/integrity.h:46:
+ * ^Idecision.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: include/linux/integrity.h:47:
+ * ^IReturn 0 if operation was successful.$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#139: FILE: include/linux/integrity.h:57:
+	int (*collect_measurement)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#140: FILE: include/linux/integrity.h:58:
+	int (*appraise_measurement)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#141: FILE: include/linux/integrity.h:59:
+	void (*store_measurement)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#142: FILE: include/linux/integrity.h:60:
+	int (*must_measure)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#143: FILE: include/linux/integrity.h:61:
+	void (*display_template)(struct seq_file *m, void *,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#146: FILE: include/linux/integrity.h:64:
+};
+extern int integrity_register_template(const char *template_name,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/integrity.h:64:
+extern int integrity_register_template(const char *template_name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: include/linux/integrity.h:65:
+extern int integrity_register_template(const char *template_name,
+					const struct template_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/integrity.h:66:
+extern int integrity_unregister_template(const char *template_name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/integrity.h:67:
+extern int integrity_find_template(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#149: FILE: include/linux/integrity.h:67:
+extern int integrity_find_template(const char *,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: include/linux/integrity.h:74:
+ * ^IThis hook mediates the point when a search for a binary handler^Iwill$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: include/linux/integrity.h:75:
+ * ^Ibegin.  At this point, the OS protects against an executable file,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: include/linux/integrity.h:76:
+ * ^Ialready open for write, from being executed; and an executable file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: include/linux/integrity.h:77:
+ * ^Ialready open for execute, from being modified. So we can be certain$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: include/linux/integrity.h:79:
+ * ^Ithe file being executed.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: include/linux/integrity.h:80:
+ * ^I@bprm contains the linux_binprm structure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: include/linux/integrity.h:85:
+ * ^Ii_integrity field is initialized to NULL when the inode structure is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: include/linux/integrity.h:86:
+ * ^Iallocated.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: include/linux/integrity.h:87:
+ * ^I@inode contains the inode structure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: include/linux/integrity.h:88:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: include/linux/integrity.h:92:
+ * ^IDeallocate the inode integrity structure and set @inode->i_integrity to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: include/linux/integrity.h:93:
+ * ^INULL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: include/linux/integrity.h:97:
+ * ^Ia file is opened (as well as many other operations).  At this point,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#181: FILE: include/linux/integrity.h:99:
+ * ^Ibe made.$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#184: FILE: include/linux/integrity.h:102:
+ *      @nd contains the nameidata (may be NULL).
          ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: include/linux/integrity.h:106:
+ * ^I*file contains the file structure being closed.$

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#191: FILE: include/linux/integrity.h:109:
+ *	Measurement(collect, appraise, store) of files mmaped for EXEC,
   	                                               ^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#203: FILE: include/linux/integrity.h:121:
+	int (*bprm_check_integrity) (struct linux_binprm *bprm);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#204: FILE: include/linux/integrity.h:122:
+	int (*inode_alloc_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#205: FILE: include/linux/integrity.h:123:
+	void (*inode_free_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#206: FILE: include/linux/integrity.h:124:
+	int (*inode_permission) (struct inode *inode, int mask,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: include/linux/integrity.h:125:
+				struct nameidata *nd);
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: include/linux/integrity.h:125:
+	int (*inode_permission) (struct inode *inode, int mask,
+				struct nameidata *nd);

WARNING:SPACING: Unnecessary space before function pointer arguments
#208: FILE: include/linux/integrity.h:126:
+	void (*file_free_integrity) (struct file *file);

WARNING:SPACING: Unnecessary space before function pointer arguments
#209: FILE: include/linux/integrity.h:127:
+	int (*file_mmap) (struct file *file,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#214: FILE: include/linux/integrity.h:132:
+};
+extern int register_integrity(const struct integrity_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/integrity.h:132:
+extern int register_integrity(const struct integrity_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: include/linux/integrity.h:133:
+extern int unregister_integrity(const struct integrity_operations *ops);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: include/linux/integrity.h:138:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#230: FILE: include/linux/integrity.h:148:
+				struct nameidata *nd);
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: include/linux/integrity.h:148:
+int integrity_inode_permission(struct inode *inode, int mask,
+				struct nameidata *nd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: include/linux/integrity.h:151:
+int integrity_file_mmap(struct file *file,
+			  unsigned long reqprot, unsigned long prot,

WARNING:RETURN_VOID: void function return statements are not generally useful
#251: FILE: include/linux/integrity.h:169:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: include/linux/integrity.h:172:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: include/linux/integrity.h:172:
+static inline int integrity_inode_permission(struct inode *inode, int mask,
+				struct nameidata *nd)

WARNING:RETURN_VOID: void function return statements are not generally useful
#267: FILE: include/linux/integrity.h:185:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: include/linux/integrity.h:188:
+static inline int integrity_file_mmap(struct file *file,
+			  unsigned long reqprot, unsigned long prot,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#283: FILE: security/integrity/integrity.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: security/integrity/integrity.c:10:
+ * ^Iregister integrity subsystem$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: security/integrity/integrity.c:11:
+ * ^Iregister integrity template$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#302: FILE: security/integrity/integrity.c:20:
+const struct integrity_operations *integrity_ops = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#311: FILE: security/integrity/integrity.c:29:
+};
+static int template_initialized;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "integrity_ops"
#328: FILE: security/integrity/integrity.c:46:
+	if (integrity_ops != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#334: FILE: security/integrity/integrity.c:52:
+EXPORT_SYMBOL_GPL(register_integrity);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#351: FILE: security/integrity/integrity.c:69:
+EXPORT_SYMBOL_GPL(unregister_integrity);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#393: FILE: security/integrity/integrity.c:111:
+EXPORT_SYMBOL_GPL(integrity_register_template);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#420: FILE: security/integrity/integrity.c:138:
+EXPORT_SYMBOL_GPL(integrity_unregister_template);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#445: FILE: security/integrity/integrity.c:163:
+EXPORT_SYMBOL_GPL(integrity_find_template);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#472: FILE: security/integrity/integrity.c:190:
+EXPORT_SYMBOL_GPL(integrity_collect_measurement);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#497: FILE: security/integrity/integrity.c:215:
+EXPORT_SYMBOL_GPL(integrity_appraise_measurement);

WARNING:RETURN_VOID: void function return statements are not generally useful
#517: FILE: security/integrity/integrity.c:235:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#519: FILE: security/integrity/integrity.c:237:
+EXPORT_SYMBOL_GPL(integrity_store_measurement);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#544: FILE: security/integrity/integrity.c:262:
+EXPORT_SYMBOL_GPL(integrity_must_measure);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#577: FILE: security/integrity/integrity.c:295:
+			       struct nameidata *nd)
 			                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#582: FILE: security/integrity/integrity.c:300:
+		rc = integrity_ops->inode_permission(inode, mask, nd);
 		                                                  ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#705: FILE: include/linux/audit.h:449:
+extern void audit_log_inode_context(struct audit_buffer *ab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: include/linux/audit.h:450:
+extern void audit_log_inode_context(struct audit_buffer *ab,
+					struct inode *inode);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#723: FILE: security/integrity/integrity_audit.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#732: FILE: security/integrity/integrity_audit.c:10:
+ * ^IAudit calls for the integrity subsystem$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#748: FILE: security/integrity/integrity_audit.c:26:
+	rc = strict_strtoul(str, 10, &audit);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#750: FILE: security/integrity/integrity_audit.c:28:
+		printk(KERN_INFO "integrity: invalid integrity_audit value\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#760: FILE: security/integrity/integrity_audit.c:38:
+__setup("integrity_audit=", integrity_audit_setup);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#848: FILE: security/integrity/Kconfig:7:
+config INTEGRITY
+	bool "Enable different integrity models"
+	help
+	  This allows you to choose different integrity modules to be
+	  configured into your kernel.
+
+	  If you are unsure how to answer this question, answer N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#918: FILE: fs/namei.c:290:
+	retval = security_inode_permission(inode, mask, nd);
 	                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#921: FILE: fs/namei.c:293:
+	return integrity_inode_permission(inode, mask, nd);
 	                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#938: FILE: fs/namei.c:494:
+	retval =  security_inode_permission(inode, MAY_EXEC, nd);
 	                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#941: FILE: fs/namei.c:497:
+	return integrity_inode_permission(inode, MAY_EXEC, nd);
 	                                                   ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262083.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 63 warnings, 20 checks, 814 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262083.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
