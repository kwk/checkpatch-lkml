WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '04b94b1dd5197bf737073ebbd4189ffdfdcea534', maybe rebased or not pulled?
#48: 
commit 04b94b1dd5197bf737073ebbd4189ffdfdcea534, updated shortlog, 

WARNING:TYPO_SPELLING: 'suported' may be misspelled - perhaps 'supported'?
#108: FILE: Documentation/kernel-parameters.txt:935:
+			(only serial suported for now)
 			             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#147: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: arch/x86/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#180: FILE: arch/x86/kernel/kgdb.c:29:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by
     ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#336: FILE: arch/x86/kernel/kgdb.c:185:
+	unsigned		enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#337: FILE: arch/x86/kernel/kgdb.c:186:
+	unsigned		type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#338: FILE: arch/x86/kernel/kgdb.c:187:
+	unsigned		len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#401: FILE: arch/x86/kernel/kgdb.c:250:
+	unsigned type;

CHECK:CAMELCASE: Avoid CamelCase: <remcomInBuffer>
#508: FILE: arch/x86/kernel/kgdb.c:357:
+			       char *remcomInBuffer, char *remcomOutBuffer,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <remcomOutBuffer>
#508: FILE: arch/x86/kernel/kgdb.c:357:
+			       char *remcomInBuffer, char *remcomOutBuffer,

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#514: FILE: arch/x86/kernel/kgdb.c:363:
+	int newPC;

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#519: FILE: arch/x86/kernel/kgdb.c:368:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#582: FILE: arch/x86/kernel/kgdb.c:431:
+		if (rsp >= init_tss[cpu].x86_tss.ist[i] &&
 		                                 ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#583: FILE: arch/x86/kernel/kgdb.c:432:
+		    rsp <= init_tss[cpu].x86_tss.ist[i] + EXCEPTION_STKSZ) {
 		                                 ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#584: FILE: arch/x86/kernel/kgdb.c:433:
+			regs = (void *) init_tss[cpu].x86_tss.ist[i] +\
 			                                      ^^^

CHECK:SPACING: No space is necessary after a cast
#584: FILE: arch/x86/kernel/kgdb.c:433:
+			regs = (void *) init_tss[cpu].x86_tss.ist[i] +\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#584: FILE: arch/x86/kernel/kgdb.c:433:
+			regs = (void *) init_tss[cpu].x86_tss.ist[i] +\

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#598: FILE: arch/x86/kernel/kgdb.c:447:
+void kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#600: FILE: arch/x86/kernel/kgdb.c:449:
+	static char intr_desc[] = "Stack at interrupt entrypoint";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#601: FILE: arch/x86/kernel/kgdb.c:450:
+	static char exc_desc[] = "Stack at exception entrypoint";

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#632: FILE: arch/x86/kernel/kgdb.c:481:
+		return current;
+	} else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#657: FILE: arch/x86/kernel/kgdb.c:506:
+		return stregs;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#675: FILE: arch/x86/kernel/kgdb.c:524:
+	printk(KERN_ERR "KGDB: trap/step from kernel to user space, "

WARNING:SPLIT_STRING: quoted string split across lines
#676: FILE: arch/x86/kernel/kgdb.c:525:
+	printk(KERN_ERR "KGDB: trap/step from kernel to user space, "
+			"resuming...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#721: FILE: arch/x86/kernel/kgdb.c:570:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#743: FILE: arch/x86/kernel/kgdb.c:592:
+ *	kgdb_arch_init - Perform any architecture specific initalization.
   	                                                   ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#745: FILE: arch/x86/kernel/kgdb.c:594:
+ *	This function will handle the initalization of any architecture
   	                              ^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#753: FILE: arch/x86/kernel/kgdb.c:602:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#767: FILE: arch/x86/kernel/kgdb.c:616:
+ *	kgdb_skipexception - Bail of of KGDB when we've been triggered.

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#794: FILE: arch/x86/kernel/kgdb.c:643:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#835: FILE: drivers/char/tty_io.c:1179:
+		tty_line = simple_strtoul(str, &str, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: drivers/char/tty_io.c:1186:
+		if (tty_line >= 0 && tty_line <= p->num && p->poll_init &&
+				!p->poll_init(p, tty_line, str)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#843: FILE: drivers/char/tty_io.c:1187:
+				!p->poll_init(p, tty_line, str)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#896: FILE: drivers/serial/8250.c:1760:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: drivers/serial/8250.c:1762:
+static void serial8250_put_poll_char(struct uart_port *port,
+			 unsigned char c)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#977: FILE: drivers/serial/kgdboc.c:1:
+/*

WARNING:TYPO_SPELLING: 'inteface' may be misspelled - perhaps 'interface'?
#979: FILE: drivers/serial/kgdboc.c:3:
+ * driver uses a console polling api to implement a gdb serial inteface
                                                                ^^^^^^^^

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#997: FILE: drivers/serial/kgdboc.c:21:
+static struct kgdb_io		kgdboc_io_ops;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1014: FILE: drivers/serial/kgdboc.c:38:
+		printk(KERN_ERR "kgdboc: config string too long\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1022: FILE: drivers/serial/kgdboc.c:46:
+__setup("kgdboc=", kgdboc_option_setup);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1086: FILE: drivers/serial/kgdboc.c:110:
+		printk(KERN_ERR "kgdboc: config string too long\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1097: FILE: drivers/serial/kgdboc.c:121:
+		printk(KERN_ERR

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1126: FILE: drivers/serial/kgdboc.c:150:
+static struct kgdb_io kgdboc_io_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1255: FILE: include/asm-x86/kgdb.h:1:
+#ifndef _ASM_KGDB_H_

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1325: FILE: include/asm-x86/kgdb.h:71:
+# define NUMREGBYTES		((GDB_PS+1)*8)
                     		        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1325: FILE: include/asm-x86/kgdb.h:71:
+# define NUMREGBYTES		((GDB_PS+1)*8)
                     		           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1332: FILE: include/asm-x86/kgdb.h:78:
+}
+#define BREAK_INSTR_SIZE	1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1342: FILE: include/linux/kgdb.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1361: FILE: include/linux/kgdb.h:20:
+#include <asm/atomic.h>

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#1367: FILE: include/linux/kgdb.h:26:
+ *	kgdb_skipexception - Bail of of KGDB when we've been triggered.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1374: FILE: include/linux/kgdb.h:33:
+extern int kgdb_skipexception(int exception, struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1386: FILE: include/linux/kgdb.h:45:
+extern void kgdb_post_master_code(struct pt_regs *regs, int e_vector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1397: FILE: include/linux/kgdb.h:56:
+extern void kgdb_disable_hw_debug(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1406: FILE: include/linux/kgdb.h:65:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1407: FILE: include/linux/kgdb.h:66:
+			    unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1418: FILE: include/linux/kgdb.h:77:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1429: FILE: include/linux/kgdb.h:88:
+extern struct pt_regs *kgdb_shadow_regs(struct pt_regs *regs, int threadid);

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#1484: FILE: include/linux/kgdb.h:143:
+ *	kgdb_arch_init - Perform any architecture specific initalization.
   	                                                   ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#1486: FILE: include/linux/kgdb.h:145:
+ *	This function will handle the initalization of any architecture
   	                              ^^^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1489: FILE: include/linux/kgdb.h:148:
+extern int kgdb_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1497: FILE: include/linux/kgdb.h:156:
+extern void kgdb_arch_uninit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1507: FILE: include/linux/kgdb.h:166:
+extern void pt_regs_to_gdb_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1532: FILE: include/linux/kgdb.h:191:
+extern void gdb_regs_to_pt_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1572: FILE: include/linux/kgdb.h:231:
+extern void kgdb_roundup_cpus(unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1575: FILE: include/linux/kgdb.h:234:
+extern int kgdb_validate_break_address(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1576: FILE: include/linux/kgdb.h:235:
+extern int kgdb_arch_set_breakpoint(unsigned long addr, char *saved_instr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1577: FILE: include/linux/kgdb.h:236:
+extern int kgdb_arch_remove_breakpoint(unsigned long addr, char *bundle);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1604: FILE: include/linux/kgdb.h:263:
+	unsigned		shadowth;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1606: FILE: include/linux/kgdb.h:265:
+	int	(*set_breakpoint)(unsigned long, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1606: FILE: include/linux/kgdb.h:265:
+	int	(*set_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1607: FILE: include/linux/kgdb.h:266:
+	int	(*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1607: FILE: include/linux/kgdb.h:266:
+	int	(*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1608: FILE: include/linux/kgdb.h:267:
+	int	(*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1608: FILE: include/linux/kgdb.h:267:
+	int	(*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1609: FILE: include/linux/kgdb.h:268:
+	int	(*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1609: FILE: include/linux/kgdb.h:268:
+	int	(*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1628: FILE: include/linux/kgdb.h:287:
+	int			(*read_char) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1629: FILE: include/linux/kgdb.h:288:
+	void			(*write_char) (u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#1629: FILE: include/linux/kgdb.h:288:
+	void			(*write_char) (u8);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1630: FILE: include/linux/kgdb.h:289:
+	void			(*flush) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1631: FILE: include/linux/kgdb.h:290:
+	int			(*init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1632: FILE: include/linux/kgdb.h:291:
+	void			(*pre_exception) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1633: FILE: include/linux/kgdb.h:292:
+	void			(*post_exception) (void);

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#1636: FILE: include/linux/kgdb.h:295:
+extern struct kgdb_arch		arch_kgdb_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1638: FILE: include/linux/kgdb.h:297:
+extern int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1638: FILE: include/linux/kgdb.h:297:
+extern int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1639: FILE: include/linux/kgdb.h:298:
+extern void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1639: FILE: include/linux/kgdb.h:298:
+extern void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1641: FILE: include/linux/kgdb.h:300:
+extern int kgdb_hex2long(char **ptr, long *long_val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1642: FILE: include/linux/kgdb.h:301:
+extern int kgdb_mem2hex(char *mem, char *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1643: FILE: include/linux/kgdb.h:302:
+extern int kgdb_hex2mem(char *buf, char *mem, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1645: FILE: include/linux/kgdb.h:304:
+extern int kgdb_isremovedbreak(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1650: FILE: include/linux/kgdb.h:309:
+extern int kgdb_nmicallback(int cpu, void *regs);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct uart_port *' should also have an identifier name
#1679: FILE: include/linux/serial_core.h:216:
+	int		(*poll_get_char)(struct uart_port *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1724: FILE: include/linux/tty_driver.h:244:
+extern struct tty_driver *tty_find_polling_driver(char *name, int *line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1745: FILE: include/linux/uaccess.h:96:
+extern long probe_kernel_read(void *dst, void *src, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1756: FILE: include/linux/uaccess.h:107:
+extern long probe_kernel_write(void *dst, void *src, size_t size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1777: FILE: kernel/kgdb.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1827: FILE: kernel/kgdb.c:51:
+#include <asm/cacheflush.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1829: FILE: kernel/kgdb.c:53:
+#include <asm/atomic.h>

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1849: FILE: kernel/kgdb.c:73:
+} kgdb_info[NR_CPUS];

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1863: FILE: kernel/kgdb.c:87:
+static struct kgdb_io		*kgdb_io_ops;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1871: FILE: kernel/kgdb.c:95:
+	[0 ... KGDB_MAX_BREAKPOINTS-1] = { .state = BP_UNDEFINED }
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1887: FILE: kernel/kgdb.c:111:
+	[0 ... NR_CPUS-1] = __SPIN_LOCK_UNLOCKED(slave_cpu_locks)
 	              ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1889: FILE: kernel/kgdb.c:113:
+};
+static atomic_t			cpu_in_kgdb[NR_CPUS];

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1926: FILE: kernel/kgdb.c:150:
+ * can be overriden by architectures when needed:
           ^^^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 37)
#1988: FILE: kernel/kgdb.c:212:
+		while ((ch = (kgdb_io_ops->read_char())) != '$')
+			/* nothing */;

WARNING:TYPO_SPELLING: 'gaurd' may be misspelled - perhaps 'guard'?
#2301: FILE: kernel/kgdb.c:525:
+	 * gaurd in case the master CPU had not been selected if
 	   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2364: FILE: kernel/kgdb.c:588:
+		error = kgdb_arch_set_breakpoint(addr,
+				kgdb_break[i].saved_instr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_SET'
#2384: FILE: kernel/kgdb.c:608:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#2384: FILE: kernel/kgdb.c:608:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2385: FILE: kernel/kgdb.c:609:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2390: FILE: kernel/kgdb.c:614:
+		if (kgdb_break[i].state == BP_REMOVED &&
+					kgdb_break[i].bpt_addr == addr) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2426: FILE: kernel/kgdb.c:650:
+		error = kgdb_arch_remove_breakpoint(addr,
+					kgdb_break[i].saved_instr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_SET'
#2441: FILE: kernel/kgdb.c:665:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#2441: FILE: kernel/kgdb.c:665:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2442: FILE: kernel/kgdb.c:666:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_REMOVED'
#2455: FILE: kernel/kgdb.c:679:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#2455: FILE: kernel/kgdb.c:679:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2456: FILE: kernel/kgdb.c:680:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2474: FILE: kernel/kgdb.c:698:
+		error = kgdb_arch_remove_breakpoint(addr,
+				kgdb_break[i].saved_instr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2548: FILE: kernel/kgdb.c:772:
+		printk(KERN_CRIT "KGDB: Waiting for remote debugger\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2595: FILE: kernel/kgdb.c:819:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2613: FILE: kernel/kgdb.c:837:
+	if (arch_kgdb_ops.shadowth &&
+			ks->kgdb_usethreadid >= pid_max + num_online_cpus()) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2614: FILE: kernel/kgdb.c:838:
+			ks->kgdb_usethreadid >= pid_max + num_online_cpus()) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2616: FILE: kernel/kgdb.c:840:
+		shadowregs = kgdb_shadow_regs(ks->linux_regs,
+					  ks->kgdb_usethreadid -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2663: FILE: kernel/kgdb.c:887:
+	if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
+					kgdb_hex2long(&ptr, &length) > 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2724: FILE: kernel/kgdb.c:948:
+		printk(KERN_CRIT "Executing reboot\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2777: FILE: kernel/kgdb.c:1001:
+							ks->threadid++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2811: FILE: kernel/kgdb.c:1035:
+			kgdb_mem2hex(getthread(ks->linux_regs,
+					ks->threadid)->comm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2816: FILE: kernel/kgdb.c:1040:
+				kgdb_shadowinfo(ks->linux_regs,
+					remcom_out_buffer,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2821: FILE: kernel/kgdb.c:1045:
+				static char tmpstr[23 + BUF_THREAD_ID_SIZE];
+				sprintf(tmpstr, "Shadow task %d for pid 0",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2822: FILE: kernel/kgdb.c:1046:
+				sprintf(tmpstr, "Shadow task %d for pid 0",
+						(int)(ks->threadid - pid_max));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2824: FILE: kernel/kgdb.c:1048:
+				kgdb_mem2hex(tmpstr, remcom_out_buffer,
+							 strlen(tmpstr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2922: FILE: kernel/kgdb.c:1146:
+	if (*(ptr++) != ',' ||
+		!kgdb_hex2long(&ptr, &length)) {

CHECK:SPACING: No space is necessary after a cast
#2936: FILE: kernel/kgdb.c:1160:
+			(int) length, *bpt_type);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2951: FILE: kernel/kgdb.c:1175:
+	if (remcom_in_buffer[1] == '0' && remcom_in_buffer[2] == '9') {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2956: FILE: kernel/kgdb.c:1180:
+	} else if (remcom_in_buffer[1] == '1' && remcom_in_buffer[2] == '5') {
+

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2968: FILE: kernel/kgdb.c:1192:
+	/* Indicate fall through */

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#2973: FILE: kernel/kgdb.c:1197:
+ * This function performs all gdbserial command procesing
                                                 ^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#2993: FILE: kernel/kgdb.c:1217:
+			kgdb_msg_write("Not all CPUs have been synced for "
+			       "KGDB\n", 39);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3067: FILE: kernel/kgdb.c:1291:
+			/* Fall through on tmp < 0 */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3076: FILE: kernel/kgdb.c:1300:
+			/* Fall through to default processing */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3080: FILE: kernel/kgdb.c:1304:
+			error = kgdb_arch_handle_exception(ks->ex_vector,
+						ks->signo,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3095: FILE: kernel/kgdb.c:1319:
+
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#3129: FILE: kernel/kgdb.c:1353:
+		printk(KERN_CRIT "KGDB: re-enter error: breakpoint removed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#3142: FILE: kernel/kgdb.c:1366:
+	printk(KERN_CRIT "KGDB: re-enter exception: ALL breakpoints killed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3199: FILE: kernel/kgdb.c:1423:
+		if (atomic_read(&kgdb_sync) < 0 &&
+			atomic_inc_and_test(&kgdb_sync)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3208: FILE: kernel/kgdb.c:1432:
+		if (atomic_read(&kgdb_cpu_doing_single_step) != -1 &&
+				atomic_read(&kgdb_cpu_doing_single_step) != cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3219: FILE: kernel/kgdb.c:1443:
+	    atomic_read(&kgdb_cpu_doing_single_step) != cpu) {
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3252: FILE: kernel/kgdb.c:1476:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3277: FILE: kernel/kgdb.c:1501:
+		for (n = 0; n < NR_CPUS; n++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3306: FILE: kernel/kgdb.c:1530:
+		for (i = NR_CPUS-1; i >= 0; i--)
 		                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3306: FILE: kernel/kgdb.c:1530:
+		for (i = NR_CPUS-1; i >= 0; i--)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3312: FILE: kernel/kgdb.c:1536:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3364: FILE: kernel/kgdb.c:1588:
+	if (!atomic_read(&cpu_in_kgdb[cpu]) &&
+		atomic_read(&kgdb_active) != (cpu + 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3380: FILE: kernel/kgdb.c:1604:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"

WARNING:SPLIT_STRING: quoted string split across lines
#3381: FILE: kernel/kgdb.c:1605:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"
+				"debugger active\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#3381: FILE: kernel/kgdb.c:1605:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"
+				"debugger active\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3385: FILE: kernel/kgdb.c:1609:
+	printk(KERN_ERR "kgdb panic point\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3397: FILE: kernel/kgdb.c:1621:
+void kgdb_console_write(struct console *co, const char *s, unsigned count)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3402: FILE: kernel/kgdb.c:1626:
+	 * and print. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3417: FILE: kernel/kgdb.c:1641:
+}
+;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#3424: FILE: kernel/kgdb.c:1648:
+		printk(KERN_CRIT "ERROR: No KGDB I/O module available\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#3428: FILE: kernel/kgdb.c:1652:
+		printk(KERN_CRIT "Entering KGDB\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3446: FILE: kernel/kgdb.c:1670:
+		atomic_notifier_chain_register(&panic_notifier_list,
+					&kgdb_panic_notifier);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3470: FILE: kernel/kgdb.c:1694:
+		atomic_notifier_chain_unregister(&panic_notifier_list,
+					  &kgdb_panic_notifier);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#3487: FILE: kernel/kgdb.c:1711:
+	printk(KERN_CRIT "kgdb: Waiting for connection from remote gdb...\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#3497: FILE: kernel/kgdb.c:1721:
+int kgdb_register_io_module(struct kgdb_io *new_kgdb_io_ops)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3506: FILE: kernel/kgdb.c:1730:
+		printk(KERN_ERR "kgdb: Another I/O driver is already "

WARNING:SPLIT_STRING: quoted string split across lines
#3507: FILE: kernel/kgdb.c:1731:
+		printk(KERN_ERR "kgdb: Another I/O driver is already "
+				"registered with KGDB.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3523: FILE: kernel/kgdb.c:1747:
+	printk(KERN_INFO "kgdb: Registered I/O driver %s.\n",

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#3542: FILE: kernel/kgdb.c:1766:
+void kgdb_unregister_io_module(struct kgdb_io *old_kgdb_io_ops)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3544: FILE: kernel/kgdb.c:1768:
+	BUG_ON(kgdb_connected);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3559: FILE: kernel/kgdb.c:1783:
+	printk(KERN_INFO

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3682: FILE: lib/Kconfig.kgdb:32:
+config KGDB_SERIAL_CONSOLE
+	tristate "KGDB: use kgdb over the serial console"
+	depends on KGDB
+	select CONSOLE_POLL
+	select MAGIC_SYSRQ
+	default y
+	help
+	  Share a serial console with kgdb. Sysrq-g must be used
+	  to break in initially.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3710: FILE: mm/maccess.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3732: FILE: mm/maccess.c:23:
+	ret = __copy_from_user_inatomic(dst,
+			(__force const void __user *)src, size);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323646.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 102 warnings, 77 checks, 3528 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323646.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
