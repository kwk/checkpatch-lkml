WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> > This patch adds a new field for hugepage-backed memory regions to show the

WARNING:LONG_LINE: line length of 183 exceeds 100 columns
#91: FILE: pmap.c:97:
+static const char *mapping_name(proc_t *p, unsigned KLONG addr, unsigned KLONG len, char *mapbuf, unsigned showpath, unsigned dev_major, unsigned dev_minor, unsigned long long inode){

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: pmap.c:97:
+static const char *mapping_name(proc_t *p, unsigned KLONG addr, unsigned KLONG len, char *mapbuf, unsigned showpath, unsigned dev_major, unsigned dev_minor, unsigned long long inode){

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: pmap.c:97:
+static const char *mapping_name(proc_t *p, unsigned KLONG addr, unsigned KLONG len, char *mapbuf, unsigned showpath, unsigned dev_major, unsigned dev_minor, unsigned long long inode){

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: pmap.c:97:
+static const char *mapping_name(proc_t *p, unsigned KLONG addr, unsigned KLONG len, char *mapbuf, unsigned showpath, unsigned dev_major, unsigned dev_minor, unsigned long long inode){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#91: FILE: pmap.c:97:
+static const char *mapping_name(proc_t *p, unsigned KLONG addr, unsigned KLONG len, char *mapbuf, unsigned showpath, unsigned dev_major, unsigned dev_minor, unsigned long long inode){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#91: FILE: pmap.c:97:
+static const char *mapping_name(proc_t *p, unsigned KLONG addr, unsigned KLONG len, char *mapbuf, unsigned showpath, unsigned dev_major, unsigned dev_minor, unsigned long long inode){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#92: FILE: pmap.c:98:
+static const char *mapping_name(proc_t *p, unsigned KLONG addr, unsigned KLONG len, char *mapbuf, unsigned showpath, unsigned dev_major, unsigned dev_minor, unsigned long long inode){
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: pmap.c:99:
+  char *cp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: pmap.c:100:
+  char *cpfull;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: pmap.c:101:
+  const char *anon_cp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: pmap.c:109:
+  cpfull = strchr(mapbuf,'/');$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: pmap.c:109:
+  cpfull = strchr(mapbuf,'/');
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: pmap.c:110:
+  if(cpfull){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#109: FILE: pmap.c:110:
+  if(cpfull){
+    struct stat statbuf;

ERROR:SPACING: space required before the open brace '{'
#109: FILE: pmap.c:110:
+  if(cpfull){

ERROR:SPACING: space required before the open parenthesis '('
#109: FILE: pmap.c:110:
+  if(cpfull){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: pmap.c:111:
+    struct stat statbuf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: pmap.c:119:
+    while (stat(cpfull, &statbuf) == -1 && errno == ENOENT){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#118: FILE: pmap.c:119:
+    while (stat(cpfull, &statbuf) == -1 && errno == ENOENT){
+      cp = strrchr(cpfull,'(');

ERROR:SPACING: space required before the open brace '{'
#118: FILE: pmap.c:119:
+    while (stat(cpfull, &statbuf) == -1 && errno == ENOENT){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: pmap.c:120:
+      cp = strrchr(cpfull,'(');$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: pmap.c:120:
+      cp = strrchr(cpfull,'(');
                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: pmap.c:123:
+      if (!cp || strchr(cp,')') == NULL)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: pmap.c:123:
+      if (!cp || strchr(cp,')') == NULL)
                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strchr"
#122: FILE: pmap.c:123:
+      if (!cp || strchr(cp,')') == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: pmap.c:124:
+        break;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: pmap.c:124:
+        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: pmap.c:127:
+      if (cp && !strncmp(cp+1, "deleted", 7))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: pmap.c:127:
+      if (cp && !strncmp(cp+1, "deleted", 7))
                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: pmap.c:131:
+      if (--cp <= cpfull)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: pmap.c:132:
+        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: pmap.c:132:
+        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: pmap.c:135:
+      if (cp[0] == ' ')$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: pmap.c:136:
+        *cp = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: pmap.c:136:
+        *cp = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: pmap.c:137:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: pmap.c:139:
+    if(showpath)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#138: FILE: pmap.c:139:
+    if(showpath)
+      return cpfull;

ERROR:SPACING: space required before the open parenthesis '('
#138: FILE: pmap.c:139:
+    if(showpath)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: pmap.c:140:
+      return cpfull;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: pmap.c:142:
+    cp = strrchr(cpfull,'/');$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: pmap.c:142:
+    cp = strrchr(cpfull,'/');
                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: pmap.c:143:
+    return cp[1] ? cp+1 : cp;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: pmap.c:143:
+    return cp[1] ? cp+1 : cp;
                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: pmap.c:146:
+  anon_cp = "  [ anon ]";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: pmap.c:147:
+  if( (p->start_stack >= addr) && (p->start_stack <= addr+len) ) anon_cp = "  [ stack ]";$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#153: FILE: pmap.c:147:
+  if( (p->start_stack >= addr) && (p->start_stack <= addr+len) ) anon_cp = "  [ stack ]";
                                                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#153: FILE: pmap.c:147:
+  if( (p->start_stack >= addr) && (p->start_stack <= addr+len) ) anon_cp = "  [ stack ]";

ERROR:SPACING: space prohibited before that close parenthesis ')'
#153: FILE: pmap.c:147:
+  if( (p->start_stack >= addr) && (p->start_stack <= addr+len) ) anon_cp = "  [ stack ]";

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->start_stack >= addr'
#153: FILE: pmap.c:147:
+  if( (p->start_stack >= addr) && (p->start_stack <= addr+len) ) anon_cp = "  [ stack ]";

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: pmap.c:147:
+  if( (p->start_stack >= addr) && (p->start_stack <= addr+len) ) anon_cp = "  [ stack ]";

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#153: FILE: pmap.c:147:
+  if( (p->start_stack >= addr) && (p->start_stack <= addr+len) ) anon_cp = "  [ stack ]";

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: pmap.c:148:
+  return anon_cp;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 31 warnings, 6 checks, 78 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
