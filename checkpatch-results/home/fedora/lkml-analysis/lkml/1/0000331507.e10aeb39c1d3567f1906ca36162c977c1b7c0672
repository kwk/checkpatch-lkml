WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#185: FILE: drivers/ata/Kconfig:462:
+config PATA_NINJA32
+	tristate "Ninja32/Delkin Cardbus ATA support (Experimental)"
+	depends on PCI && EXPERIMENTAL
+	help
+	  This option enables support for the Ninja32, Delkin and
+	  possibly other brands of Cardbus ATA adapter
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#410: FILE: drivers/ata/ata_generic.c:68:
+		/* We do need the right mode information for DMA or PIO
+		   and this comes from the current configuration flags */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#410: FILE: drivers/ata/ata_generic.c:68:
+		   and this comes from the current configuration flags */

CHECK:BRACES: braces {} should be used on all arms of this statement
#415: FILE: drivers/ata/ata_generic.c:73:
+			if (xfer_mask & (ATA_MASK_MWDMA | ATA_MASK_UDMA))
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: drivers/ata/ata_generic.c:75:
+			else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#441: FILE: drivers/ata/ata_generic.c:208:
+	{ PCI_DEVICE(PCI_VENDOR_ID_CENATEK,PCI_DEVICE_ID_CENATEK_IDE), },
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'perfomed' may be misspelled - perhaps 'performed'?
#743: FILE: drivers/ata/ata_piix.c:1033:
+ * SCR merging is perfomed in nibbles which is the unit contents in
                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INDENTED_LABEL: labels should not be indented
#811: FILE: drivers/ata/ata_piix.c:1101:
+	done:

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#939: FILE: drivers/ata/ata_piix.c:1458:
+static void __devinit piix_init_pcs(struct ata_host *host,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#953: FILE: drivers/ata/ata_piix.c:1475:
+static const int *__devinit piix_init_sata_map(struct pci_dev *pdev,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#977: FILE: drivers/ata/ata_piix.c:1522:
+static void __devinit piix_init_sidpr(struct ata_host *host)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: drivers/ata/ata_piix.c:1634:
+		hpriv->map = piix_init_sata_map(pdev, port_info,
+					piix_map_db_table[ent->driver_data]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1214: FILE: drivers/ata/libata-acpi.c:831:
+	/* channel first and then drives for power on and vica versa
+	   for power off */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1214: FILE: drivers/ata/libata-acpi.c:831:
+	   for power off */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1221: FILE: drivers/ata/libata-acpi.c:838:
+			acpi_bus_set_power(dev->acpi_handle,
+				state.event == PM_EVENT_ON ?

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1240: FILE: drivers/ata/libata-core.c:122:
+int libata_allow_tpm = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:TYPO_SPELLING: 'accessable' may be misspelled - perhaps 'accessible'?
#1463: FILE: drivers/ata/libata-core.c:2130:
+					       "not be fully accessable.\n");
 					                     ^^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1463: FILE: drivers/ata/libata-core.c:2130:
+					       "supports DRM functions and may "
+					       "not be fully accessable.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1486: FILE: drivers/ata/libata-core.c:2265:
+	/* Limit PATA drive on SATA cable bridge transfers to udma5,
+	   200 sectors */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1486: FILE: drivers/ata/libata-core.c:2265:
+	   200 sectors */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1496: FILE: drivers/ata/libata-core.c:2296:
+		/* Let the user know. We don't want to disallow opens for
+		   rescue purposes, or in case the vendor is just a blithering

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1499: FILE: drivers/ata/libata-core.c:2299:
+		   bugs */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1503: FILE: drivers/ata/libata-core.c:2303:
+			ata_dev_printk(dev, KERN_WARNING,
+"Drive reports diagnostics failure. This may indicate a drive\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: drivers/ata/libata-core.c:2305:
+			ata_dev_printk(dev, KERN_WARNING,
+"fault or invalid emulation. Contact drive vendor for information.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1770: FILE: drivers/ata/libata-core.c:4375:
+ ^Ielse if (ata_id_has_iordy(dev->id))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1770: FILE: drivers/ata/libata-core.c:4375:
+ ^Ielse if (ata_id_has_iordy(dev->id))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1770: FILE: drivers/ata/libata-core.c:4375:
+ ^Ielse if (ata_id_has_iordy(dev->id))$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1830: FILE: drivers/ata/libata-core.c:4500:
+		void *addr = kmap_atomic(sg_page(psg), KM_IRQ0);
+		memcpy(addr + psg->offset, pad_buf, qc->pad_len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#2059: FILE: drivers/ata/libata-core.c:4810:
+			void *addr = kmap_atomic(sg_page(psg), KM_IRQ0);
+			memcpy(pad_buf, addr + psg->offset, qc->pad_len);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2215: FILE: drivers/ata/libata-core.c:4892:
+	qc->n_elem = qc->mapped_n_elem = n_elem;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2475: FILE: drivers/ata/libata-core.c:5956:
+	BUG_ON(ata_is_data(prot) && (!qc->sg || !qc->n_elem || !qc->nbytes));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2620: FILE: drivers/ata/libata-core.c:7553:
+EXPORT_SYMBOL_GPL(ata_unpack_xfermask);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2621: FILE: drivers/ata/libata-core.c:7554:
+EXPORT_SYMBOL_GPL(ata_xfer_mask2mode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2622: FILE: drivers/ata/libata-core.c:7555:
+EXPORT_SYMBOL_GPL(ata_xfer_mode2mask);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2623: FILE: drivers/ata/libata-core.c:7556:
+EXPORT_SYMBOL_GPL(ata_xfer_mode2shift);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2624: FILE: drivers/ata/libata-core.c:7557:
+EXPORT_SYMBOL_GPL(ata_mode_string);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2625: FILE: drivers/ata/libata-core.c:7558:
+EXPORT_SYMBOL_GPL(ata_id_xfermask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2702: FILE: drivers/ata/libata-eh.c:234:
+		ata_port_desc(ap, "%s 0x%llx", name,
+				start + (unsigned long long)offset);

WARNING:TYPO_SPELLING: 'followings' may be misspelled - perhaps 'following'?
#2861: FILE: drivers/ata/libata-eh.c:1574:
+ *	The followings are speed down rules.  #1 and #2 deal with
   	    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'ocurred' may be misspelled - perhaps 'occurred'?
#2877: FILE: drivers/ata/libata-eh.c:1584:
+ *	   ocurred during last 5 mins, FALLBACK_TO_PIO
   	   ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2954: FILE: drivers/ata/libata-eh.c:1659:
+static unsigned int ata_eh_speed_down(struct ata_device *dev,
+				unsigned int eflags, unsigned int err_mask)

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#3075: FILE: drivers/ata/libata-eh.c:2433:
+ *	@r_failed_dev: out paramter for failed device
   	                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3405: FILE: drivers/ata/libata-sff.c:755:
+		/* Some platforms with PCI limits cannot address compat
+		   port space. In that case we punt if their firmware has

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3406: FILE: drivers/ata/libata-sff.c:756:
+		   left a device in compatibility mode */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3408: FILE: drivers/ata/libata-sff.c:758:
+			printk(KERN_ERR "ata: Compatibility mode ATA is not supported on this platform, skipping.\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3602: FILE: drivers/ata/libata.h:116:
+extern void ata_acpi_set_state(struct ata_port *ap, pm_message_t state);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3619: FILE: drivers/ata/libata.h:189:
+extern int ata_set_mode(struct ata_link *link, struct ata_device **r_failed_dev);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3775: FILE: drivers/ata/pata_amd.c:233:
+	static const unsigned int udma_mask_map[] =
+		{ ATA_UDMA2, ATA_UDMA1, ATA_UDMA0, 0,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3784: FILE: drivers/ata/pata_amd.c:242:
+	udma = saved_udma = (unsigned long)ap->host->private_data;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nv_mode_filter', this function's name, in a string
#3814: FILE: drivers/ata/pata_amd.c:272:
+	ata_port_printk(ap, KERN_DEBUG, "nv_mode_filter: 0x%lx&0x%lx->0x%lx, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#3815: FILE: drivers/ata/pata_amd.c:273:
+	ata_port_printk(ap, KERN_DEBUG, "nv_mode_filter: 0x%lx&0x%lx->0x%lx, "
+			"BIOS=0x%lx (0x%x) ACPI=0x%lx%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3923: FILE: drivers/ata/pata_amd.c:677:
+	if (type == 5 && pdev->subsystem_vendor == PCI_VENDOR_ID_AMD &&
+			 pdev->subsystem_device == PCI_DEVICE_ID_AMD_SERENADE)

CHECK:BRACES: Unbalanced braces around else statement
#4118: FILE: drivers/ata/pata_hpt37x.c:859:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4161: FILE: drivers/ata/pata_it821x.c:520:
+	/* This is a controller firmware triggered funny, don't
+	   report the drive faulty! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4161: FILE: drivers/ata/pata_it821x.c:520:
+	   report the drive faulty! */

WARNING:LINE_SPACING: Missing a blank line after declarations
#4183: FILE: drivers/ata/pata_it821x.c:542:
+	struct ata_device *adev;
+	ata_link_for_each_dev(adev, &ap->link) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4214: FILE: drivers/ata/pata_ixp4xx_cf.c:46:
+static unsigned int ixp4xx_mmio_data_xfer(struct ata_device *dev,
+				unsigned char *buf, unsigned int buflen, int rw)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4334: FILE: drivers/ata/pata_legacy.c:96:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct platform_device *' should also have an identifier name
#4349: FILE: drivers/ata/pata_legacy.c:111:
+	int (*setup)(struct platform_device *, struct legacy_probe *probe,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4350: FILE: drivers/ata/pata_legacy.c:112:
+	int (*setup)(struct platform_device *, struct legacy_probe *probe,
+		struct legacy_data *data);

WARNING:TYPO_SPELLING: 'stdanard' may be misspelled - perhaps 'standard'?
#4375: FILE: drivers/ata/pata_legacy.c:130:
+					give I/O port if non stdanard */
 					                     ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4375: FILE: drivers/ata/pata_legacy.c:130:
+static int winbond;		/* Set to probe Winbond controllers,
+					give I/O port if non stdanard */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4375: FILE: drivers/ata/pata_legacy.c:130:
+					give I/O port if non stdanard */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4396: FILE: drivers/ata/pata_legacy.c:151:
+static int legacy_probe_add(unsigned long port, unsigned int irq,
+				enum controller type, unsigned long private)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!free"
#4403: FILE: drivers/ata/pata_legacy.c:158:
+		if (lp->port == 0 && free == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!free"
#4412: FILE: drivers/ata/pata_legacy.c:167:
+	if (free == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4413: FILE: drivers/ata/pata_legacy.c:168:
+		printk(KERN_ERR "pata_legacy: Too many interfaces.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4424: FILE: drivers/ata/pata_legacy.c:179:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4435: FILE: drivers/ata/pata_legacy.c:200:
+			ata_dev_printk(dev, KERN_INFO,
+						"configured for PIO\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4484: FILE: drivers/ata/pata_legacy.c:318:
+	while ((inb(0x1F2) & 0x80) && --tries);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#4484: FILE: drivers/ata/pata_legacy.c:318:
 	}
+	while ((inb(0x1F2) & 0x80) && --tries);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4494: FILE: drivers/ata/pata_legacy.c:337:
+static unsigned int pdc_data_xfer_vlb(struct ata_device *dev,
+			unsigned char *buf, unsigned int buflen, int rw)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4528: FILE: drivers/ata/pata_legacy.c:359:
+			u32 pad;
+			if (rw == READ) {

CHECK:BRACES: Unbalanced braces around else statement
#4541: FILE: drivers/ata/pata_legacy.c:369:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4615: FILE: drivers/ata/pata_legacy.c:552:
+static void opti82c611a_set_piomode(struct ata_port *ap,
+						struct ata_device *adev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4802: FILE: drivers/ata/pata_legacy.c:895:
+static unsigned int vlb32_data_xfer(struct ata_device *adev, unsigned char *buf,
+					unsigned int buflen, int rw)

CHECK:BRACES: braces {} should be used on all arms of this statement
#4809: FILE: drivers/ata/pata_legacy.c:900:
+	if (ata_id_has_dword_io(adev->id)) {
[...]
+		return (buflen + 3) & ~3;
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#4818: FILE: drivers/ata/pata_legacy.c:908:
+			u32 pad;
+			if (rw == WRITE) {

CHECK:BRACES: Unbalanced braces around else statement
#4829: FILE: drivers/ata/pata_legacy.c:919:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4834: FILE: drivers/ata/pata_legacy.c:924:
+static int qdi_port(struct platform_device *dev,
+			struct legacy_probe *lp, struct legacy_data *ld)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devm_request_region"
#4836: FILE: drivers/ata/pata_legacy.c:926:
+	if (devm_request_region(&dev->dev, lp->private, 4, "qdi") == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4847: FILE: drivers/ata/pata_legacy.c:937:
+^I.check_status ^I= ata_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4849: FILE: drivers/ata/pata_legacy.c:939:
+^I.dev_select ^I= ata_std_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4857: FILE: drivers/ata/pata_legacy.c:947:
+^I.qc_prep ^I= ata_qc_prep,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4874: FILE: drivers/ata/pata_legacy.c:964:
+^I.check_status ^I= ata_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4876: FILE: drivers/ata/pata_legacy.c:966:
+^I.dev_select ^I= ata_std_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4884: FILE: drivers/ata/pata_legacy.c:974:
+^I.qc_prep ^I= ata_qc_prep,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4901: FILE: drivers/ata/pata_legacy.c:991:
+^I.check_status ^I= ata_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4903: FILE: drivers/ata/pata_legacy.c:993:
+^I.dev_select ^I= ata_std_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4911: FILE: drivers/ata/pata_legacy.c:1001:
+^I.qc_prep ^I= ata_qc_prep,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#4928: FILE: drivers/ata/pata_legacy.c:1018:
+	unsigned long flags;
+	spin_lock_irqsave(&winbond_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4939: FILE: drivers/ata/pata_legacy.c:1029:
+	unsigned long flags;
+	spin_lock_irqsave(&winbond_lock, flags);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devm_request_region"
#4982: FILE: drivers/ata/pata_legacy.c:1072:
+	if (devm_request_region(&dev->dev, lp->private, 4, "winbond") == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4993: FILE: drivers/ata/pata_legacy.c:1083:
+^I.check_status ^I= ata_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4995: FILE: drivers/ata/pata_legacy.c:1085:
+^I.dev_select ^I= ata_std_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5003: FILE: drivers/ata/pata_legacy.c:1093:
+^I.qc_prep ^I= ata_qc_prep,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5015: FILE: drivers/ata/pata_legacy.c:1105:
+^I{"BIOS",^I&legacy_port_ops, ^I0x1F,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5017: FILE: drivers/ata/pata_legacy.c:1107:
+^I{"Snooping", ^I&simple_port_ops, ^I0x1F,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5018: FILE: drivers/ata/pata_legacy.c:1108:
+						0	       ,	NULL },
 						 	       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5026: FILE: drivers/ata/pata_legacy.c:1116:
+						0	       ,	NULL },
 						 	       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5028: FILE: drivers/ata/pata_legacy.c:1118:
+						0	       ,	NULL },
 						 	       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5032: FILE: drivers/ata/pata_legacy.c:1122:
+					0	       ,	qdi_port },
 					 	       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5034: FILE: drivers/ata/pata_legacy.c:1124:
+					0	       ,	qdi_port },
 					 	       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5036: FILE: drivers/ata/pata_legacy.c:1126:
+					0	       ,	winbond_port }
 					 	       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#5053: FILE: drivers/ata/pata_legacy.c:1143:
+		u8 reg = winbond_readcfg(winbond, 0x81);
+		reg |= 0x80;	/* jumpered mode off */

WARNING:LINE_SPACING: Missing a blank line after declarations
#5069: FILE: drivers/ata/pata_legacy.c:1159:
+		unsigned long flags;
+		local_irq_save(flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5085: FILE: drivers/ata/pata_legacy.c:1171:
+			printk(KERN_INFO  "PDC20230-C/20630 VLB ATA controller"

WARNING:SPLIT_STRING: quoted string split across lines
#5086: FILE: drivers/ata/pata_legacy.c:1172:
+			printk(KERN_INFO  "PDC20230-C/20630 VLB ATA controller"
+							" detected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5099: FILE: drivers/ata/pata_legacy.c:1182:
+				printk(KERN_INFO "PDC20230-B VLB ATA "

WARNING:SPLIT_STRING: quoted string split across lines
#5100: FILE: drivers/ata/pata_legacy.c:1183:
+				printk(KERN_INFO "PDC20230-B VLB ATA "
+						     "controller detected.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5120: FILE: drivers/ata/pata_legacy.c:1203:
+
+

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#5142: FILE: drivers/ata/pata_legacy.c:1225:
+	u32 iordy = (iordy_mask & mask) ? 0: ATA_FLAG_NO_IORDY;
 	                                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devm_request_region"
#5155: FILE: drivers/ata/pata_legacy.c:1235:
+	if (devm_request_region(&pdev->dev, io, 8, "pata_legacy") == NULL ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5157: FILE: drivers/ata/pata_legacy.c:1237:
+	    devm_request_region(&pdev->dev, io + 0x0206, 1,
+							"pata_legacy") == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5183: FILE: drivers/ata/pata_legacy.c:1265:
+	ret = ata_host_activate(host, probe->irq, ata_interrupt, 0,
+								&legacy_sht);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5224: FILE: drivers/ata/pata_legacy.c:1301:
+static void __init legacy_check_special_cases(struct pci_dev *p, int *primary,
+								int *secondary)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5253: FILE: drivers/ata/pata_legacy.c:1339:
+	printk(KERN_INFO DRV_NAME ": Opti 82C46%s chipset support.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5254: FILE: drivers/ata/pata_legacy.c:1340:
+	printk(KERN_INFO DRV_NAME ": Opti 82C46%s chipset support.\n",
+								optis[ctrl]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5259: FILE: drivers/ata/pata_legacy.c:1345:
+	/* Check enabled and this port is the 465MV port. On the
+	   MVB we may have two channels */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5259: FILE: drivers/ata/pata_legacy.c:1345:
+	   MVB we may have two channels */

CHECK:BRACES: braces {} should be used on all arms of this statement
#5260: FILE: drivers/ata/pata_legacy.c:1346:
+	if (ctrl & 8) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5269: FILE: drivers/ata/pata_legacy.c:1355:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5283: FILE: drivers/ata/pata_legacy.c:1369:
+		legacy_probe_add(ide_port[r & 0x01], 14 + (r & 0x01),
+								QDI6500, port);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5287: FILE: drivers/ata/pata_legacy.c:1373:
+		if (!request_region(port + 2 , 2, "pata_qdi")) {
 		                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5295: FILE: drivers/ata/pata_legacy.c:1381:
+			legacy_probe_add(ide_port[r & 0x01], 14 + (r & 0x01),
+								QDI6580, port);

CHECK:BRACES: Unbalanced braces around else statement
#5296: FILE: drivers/ata/pata_legacy.c:1382:
+		else { /* Dual channel mode */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5319: FILE: drivers/ata/pata_legacy.c:1405:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5324: FILE: drivers/ata/pata_legacy.c:1410:
+			/* I have no h/w that needs this delay but it
+			   is present in the historic code */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5324: FILE: drivers/ata/pata_legacy.c:1410:
+			   is present in the historic code */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5370: FILE: drivers/ata/pata_legacy.c:1462:
+		/* Check for any overlap of the system ATA mappings. Native
+		   mode controllers stuck on these addresses or some devices

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5371: FILE: drivers/ata/pata_legacy.c:1463:
+		   in 'raid' mode won't be found by the storage class test */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5383: FILE: drivers/ata/pata_legacy.c:1474:
+		/* If PCI bus is present then don't probe for tertiary
+		   legacy ports */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5383: FILE: drivers/ata/pata_legacy.c:1474:
+		   legacy ports */

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#5490: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5495: FILE: drivers/ata/pata_ninja32.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5496: FILE: drivers/ata/pata_ninja32.c:2:
+ * pata_ninja32.c ^I- Ninja32 PATA for new ATA layer$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5543: FILE: drivers/ata/pata_ninja32.c:49:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5563: FILE: drivers/ata/pata_ninja32.c:69:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#5567: FILE: drivers/ata/pata_ninja32.c:73:
+	struct ata_device *adev = &ap->link.device[device];
+	if (ap->private_data != adev) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5598: FILE: drivers/ata/pata_ninja32.c:104:
+^I.check_status ^I= ata_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5600: FILE: drivers/ata/pata_ninja32.c:106:
+^I.dev_select ^I= ninja32_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5608: FILE: drivers/ata/pata_ninja32.c:114:
+^I.bmdma_setup ^I= ata_bmdma_setup,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5609: FILE: drivers/ata/pata_ninja32.c:115:
+^I.bmdma_start ^I= ata_bmdma_start,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5611: FILE: drivers/ata/pata_ninja32.c:117:
+^I.bmdma_status ^I= ata_bmdma_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5613: FILE: drivers/ata/pata_ninja32.c:119:
+^I.qc_prep ^I= ata_qc_prep,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5685: FILE: drivers/ata/pata_ninja32.c:191:
+^I.name ^I^I= DRV_NAME,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5687: FILE: drivers/ata/pata_ninja32.c:193:
+^I.probe ^I^I= ninja32_init_one,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5754: FILE: drivers/ata/pata_pcmcia.c:117:
+static unsigned int ata_data_xfer_8bit(struct ata_device *dev,
+				unsigned char *buf, unsigned int buflen, int rw)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5766: FILE: drivers/ata/pata_pcmcia.c:129:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5778: FILE: drivers/ata/pata_pcmcia.c:177:
+^I.check_status ^I= ata_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5780: FILE: drivers/ata/pata_pcmcia.c:179:
+^I.dev_select ^I= ata_std_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5788: FILE: drivers/ata/pata_pcmcia.c:187:
+^I.qc_prep ^I= ata_qc_prep,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5864: FILE: drivers/ata/pata_pcmcia.c:437:
+^IPCMCIA_DEVICE_MANF_CARD(0x0097, 0x1620), ^I/* TI emulated */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strstr"
#5877: FILE: drivers/ata/pata_pdc2027x.c:351:
+	if (strstr(model_num, "Maxtor") == NULL && pair->dma_mode == XFER_UDMA_6)

CHECK:BRACES: braces {} should be used on all arms of this statement
#5918: FILE: drivers/ata/pata_qdi.c:130:
+	if (ata_id_has_dword_io(dev->id)) {
[...]
+			if (rw == READ) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#5938: FILE: drivers/ata/pata_qdi.c:141:
+			u32 pad;
+			if (rw == READ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#5975: FILE: drivers/ata/pata_scc.c:779:
+static unsigned int scc_data_xfer (struct ata_device *dev, unsigned char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6093: FILE: drivers/ata/pata_winbond.c:96:
+static unsigned int winbond_data_xfer(struct ata_device *dev,
+			unsigned char *buf, unsigned int buflen, int rw)

CHECK:BRACES: braces {} should be used on all arms of this statement
#6103: FILE: drivers/ata/pata_winbond.c:101:
+	if (ata_id_has_dword_io(dev->id)) {
[...]
+				memcpy(&pad, buf + buflen - slop, slop);
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#6116: FILE: drivers/ata/pata_winbond.c:109:
+			u32 pad;
+			if (rw == READ) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6248: FILE: drivers/ata/sata_nv.c:1347:
+			       &pp->aprd[NV_ADMA_SGTBL_LEN * qc->tag + (si-5)];
 			                                                  ^

CHECK:SPACING: No space is necessary after a cast
#6512: FILE: drivers/ata/sata_promise.h:49:
+	__le32 *buf32 = (__le32 *) buf;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6543: FILE: drivers/ata/sata_qstor.c:306:
+		VPRINTK("PRD[%u] = (0x%llX, 0x%X)\n", si,
 					(unsigned long long)addr, len);

CHECK:SPACING: No space is necessary after a cast
#6678: FILE: drivers/ata/sata_sx4.c:337:
+	__le32 *buf32 = (__le32 *) buf;

CHECK:SPACING: No space is necessary after a cast
#6687: FILE: drivers/ata/sata_sx4.c:359:
+	__le32 *buf32 = (__le32 *) buf;

CHECK:SPACING: No space is necessary after a cast
#6696: FILE: drivers/ata/sata_sx4.c:380:
+	__le32 *buf32 = (__le32 *) buf;

CHECK:SPACING: No space is necessary after a cast
#6706: FILE: drivers/ata/sata_sx4.c:433:
+	__le32 *buf32 = (__le32 *) buf;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6955: FILE: include/linux/ata.h:482:
 
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#7176: FILE: include/linux/libata.h:703:
+	unsigned int (*data_xfer) (struct ata_device *dev, unsigned char *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7194: FILE: include/linux/libata.h:864:
+extern unsigned long ata_pack_xfermask(unsigned long pio_mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7195: FILE: include/linux/libata.h:865:
+extern unsigned long ata_pack_xfermask(unsigned long pio_mask,
+			unsigned long mwdma_mask, unsigned long udma_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7196: FILE: include/linux/libata.h:866:
+extern void ata_unpack_xfermask(unsigned long xfer_mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7197: FILE: include/linux/libata.h:867:
+extern void ata_unpack_xfermask(unsigned long xfer_mask,
+			unsigned long *pio_mask, unsigned long *mwdma_mask,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7199: FILE: include/linux/libata.h:869:
+extern u8 ata_xfer_mask2mode(unsigned long xfer_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7200: FILE: include/linux/libata.h:870:
+extern unsigned long ata_xfer_mode2mask(u8 xfer_mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7201: FILE: include/linux/libata.h:871:
+extern int ata_xfer_mode2shift(unsigned long xfer_mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7202: FILE: include/linux/libata.h:872:
+extern const char *ata_mode_string(unsigned long xfer_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7203: FILE: include/linux/libata.h:873:
+extern unsigned long ata_id_xfermask(const u16 *id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7215: FILE: include/linux/libata.h:882:
+extern unsigned int ata_data_xfer(struct ata_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7216: FILE: include/linux/libata.h:883:
+extern unsigned int ata_data_xfer(struct ata_device *dev,
+			unsigned char *buf, unsigned int buflen, int rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7217: FILE: include/linux/libata.h:884:
+extern unsigned int ata_data_xfer_noirq(struct ata_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7218: FILE: include/linux/libata.h:885:
+extern unsigned int ata_data_xfer_noirq(struct ata_device *dev,
+			unsigned char *buf, unsigned int buflen, int rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7241: FILE: include/linux/libata.h:933:
+extern int ata_cable_ignore(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7249: FILE: include/linux/libata.h:941:
+extern const struct ata_timing *ata_timing_find_mode(u8 xfer_mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7255: FILE: include/linux/libata.h:947:
+extern u8 ata_timing_cycle2mode(unsigned int xfer_shift, int cycle);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#7279: FILE: include/linux/libata.h:988:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#7285: FILE: include/linux/libata.h:994:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7289: FILE: include/linux/libata.h:998:
+static inline unsigned int ata_acpi_gtm_xfermask(struct ata_device *dev,
+					const struct ata_acpi_gtm *gtm)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7306: FILE: include/linux/libata.h:1036:
+extern int ata_pci_activate_sff_host(struct ata_host *host,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7311: FILE: include/linux/libata.h:1040:
+extern unsigned long ata_pci_default_filter(struct ata_device *dev,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7362: FILE: include/linux/libata.h:1367:
+	qc->nbytes = qc->raw_nbytes = qc->curbytes = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 99 warnings, 79 checks, 6725 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
