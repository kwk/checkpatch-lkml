ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#58: FILE: fs/minix/minix.h:41:
+	struct fsblock_meta ** s_imap;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#59: FILE: fs/minix/minix.h:42:
+	struct fsblock_meta ** s_zmap;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#60: FILE: fs/minix/minix.h:43:
+	struct fsblock_meta * s_smblock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: fs/minix/minix.h:49:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: fs/minix/minix.h:49:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#68: FILE: fs/minix/minix.h:49:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ino_t' should also have an identifier name
#68: FILE: fs/minix/minix.h:49:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsblock_meta **' should also have an identifier name
#68: FILE: fs/minix/minix.h:49:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#69: FILE: fs/minix/minix.h:50:
+extern void minix_put_raw_inode(struct super_block *sb, ino_t ino, struct fsblock_meta *mblock, struct minix_inode *p);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: fs/minix/minix.h:50:
+extern void minix_put_raw_inode(struct super_block *sb, ino_t ino, struct fsblock_meta *mblock, struct minix_inode *p);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#70: FILE: fs/minix/minix.h:51:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: fs/minix/minix.h:51:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: fs/minix/minix.h:51:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#70: FILE: fs/minix/minix.h:51:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ino_t' should also have an identifier name
#70: FILE: fs/minix/minix.h:51:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsblock_meta **' should also have an identifier name
#70: FILE: fs/minix/minix.h:51:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct fsblock_meta **);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#71: FILE: fs/minix/minix.h:52:
+extern void minix2_put_raw_inode(struct super_block *sb, ino_t ino, struct fsblock_meta *mblock, struct minix2_inode *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: fs/minix/minix.h:52:
+extern void minix2_put_raw_inode(struct super_block *sb, ino_t ino, struct fsblock_meta *mblock, struct minix2_inode *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: fs/minix/minix.h:66:
+extern int V1_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#81: FILE: fs/minix/minix.h:66:
+extern int V1_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#81: FILE: fs/minix/minix.h:66:
+extern int V1_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#81: FILE: fs/minix/minix.h:66:
+extern int V1_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#81: FILE: fs/minix/minix.h:66:
+extern int V1_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: fs/minix/minix.h:67:
+extern int V2_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#82: FILE: fs/minix/minix.h:67:
+extern int V2_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#82: FILE: fs/minix/minix.h:67:
+extern int V2_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#82: FILE: fs/minix/minix.h:67:
+extern int V2_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#82: FILE: fs/minix/minix.h:67:
+extern int V2_minix_insert_mapping(struct address_space *, loff_t, size_t, int);

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#105: FILE: fs/minix/itree_common.c:12:
+static inline void add_chain(Indirect *p, struct fsblock_meta *mblock, block_t *mem, int offset)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#141: FILE: fs/minix/itree_common.c:39:
+	add_chain (chain, NULL, i_data(inode), *offsets);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#270: FILE: fs/minix/itree_common.c:144:
+	if (!verify_chain(chain, where-1) || where->mem[where->offset])
 	                              ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#305: FILE: fs/minix/itree_common.c:173:
+static inline int insert_block(struct inode *inode, struct fsblock *block, sector_t blocknr, int create)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#328: FILE: fs/minix/itree_common.c:196:
+		map_fsblock(block, block_to_cpu(chain[depth-1].key));
 		                                           ^

WARNING:REPEATED_WORD: Possible repeated word: 'etc'
#339: FILE: fs/minix/itree_common.c:208:
+			/* XXX: balance puts and unmaps etc etc */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: fs/minix/itree_common.c:244:
+static inline int insert_mapping(struct address_space *mapping, loff_t pos,
+				size_t len, int create)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: fs/minix/itree_common.c:253:
+	BUG_ON(len != PAGE_CACHE_SIZE); /* XXX can't do this yet... */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: fs/minix/itree_common.c:255:
+        pgoff = pos >> PAGE_CACHE_SHIFT;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: fs/minix/itree_common.c:255:
+        pgoff = pos >> PAGE_CACHE_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: fs/minix/itree_common.c:256:
+        end = (pos + len) >> PAGE_CACHE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: fs/minix/itree_common.c:256:
+        end = (pos + len) >> PAGE_CACHE_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: fs/minix/itree_common.c:257:
+        blocknr = pos >> inode->i_blkbits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: fs/minix/itree_common.c:257:
+        blocknr = pos >> inode->i_blkbits;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#378: FILE: fs/minix/itree_common.c:260:
+	BUG_ON(!PageLocked(page));

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: fs/minix/itree_common.c:267:
+		struct fsblock *b;
+		ret = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: fs/minix/itree_common.c:410:
+		block_t *start, *end;
+		start = &partial->mem[partial->offset + 1];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: fs/minix/itree_common.c:412:
+		free_branches(inode, start, end, (chain+n-1) - partial);
 		                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#501: FILE: fs/minix/itree_common.c:412:
+		free_branches(inode, start, end, (chain+n-1) - partial);
 		                                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#514: FILE: fs/minix/itree_v1.c:1:
+#include <linux/fsblock.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#537: FILE: fs/minix/itree_v2.c:1:
+#include <linux/fsblock.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#570: FILE: fs/minix/bitmap.c:22:
+static unsigned long count_free(struct fsblock_meta *map[], unsigned numblocks, __u32 numbits)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#581: FILE: fs/minix/bitmap.c:30:
+		if (!(mblock = map[i]))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#590: FILE: fs/minix/bitmap.c:36:
+				+ nibblemap[(data[j]>>4) & 0xf];
 				                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#595: FILE: fs/minix/bitmap.c:40:
+	if (numblocks == 0 || !(mblock = map[numblocks-1]))
 	                                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#595: FILE: fs/minix/bitmap.c:40:
+	if (numblocks == 0 || !(mblock = map[numblocks-1]))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#599: FILE: fs/minix/bitmap.c:43:
+	i = ((numbits - (numblocks-1) * size * 8) / 16) * 2;
 	                          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#605: FILE: fs/minix/bitmap.c:47:
+			+ nibblemap[(data[j]>>4) & 0xf];
 			                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#611: FILE: fs/minix/bitmap.c:52:
+		i = *(__u16 *)(&data[j]) | ~((1<<i) - 1);
 		                               ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#713: FILE: fs/minix/bitmap.c:159:
+void minix_put_raw_inode(struct super_block *sb, ino_t ino, struct fsblock_meta *mblock, struct minix_inode *p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#716: FILE: fs/minix/bitmap.c:162:
+	unsigned int size = fsblock_size(mblock_block(mblock));
+	vunmap_block(mblock, 0, size, p - ino%MINIX_INODES_PER_BLOCK);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#716: FILE: fs/minix/bitmap.c:162:
+	vunmap_block(mblock, 0, size, p - ino%MINIX_INODES_PER_BLOCK);
 	                                     ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#751: FILE: fs/minix/bitmap.c:193:
+void minix2_put_raw_inode(struct super_block *sb, ino_t ino, struct fsblock_meta *mblock, struct minix2_inode *p)

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#757: FILE: fs/minix/bitmap.c:199:
+	vunmap_block(mblock, 0, size, p - ino%minix2_inodes_per_block);
 	                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#834: FILE: fs/minix/bitmap.c:274:
+	struct fsblock_meta * mblock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#836: FILE: fs/minix/bitmap.c:276:
+	char * data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#979: FILE: fs/minix/inode.c:175:
+	if (!(mblock = sb_mbread(s, blocknr)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#996: FILE: fs/minix/inode.c:212:
+	} else if ( *((__u16 *)ms + 12) == MINIX3_SUPER_MAGIC) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1015: FILE: fs/minix/inode.c:236:
+			if (!(mblock = sb_mbread(s, blocknr)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1039: FILE: fs/minix/inode.c:260:
+		if (!(sbi->s_imap[i] = sb_mbread(s, block)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1045: FILE: fs/minix/inode.c:265:
+		if (!(sbi->s_zmap[i] = sb_mbread(s, block)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1207: FILE: fs/minix/inode.c:513:
+static struct fsblock_meta * V1_minix_update_inode(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1207: FILE: fs/minix/inode.c:513:
+static struct fsblock_meta * V1_minix_update_inode(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1210: FILE: fs/minix/inode.c:515:
+	struct fsblock_meta * mblock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1236: FILE: fs/minix/inode.c:542:
+static struct fsblock_meta * V2_minix_update_inode(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1236: FILE: fs/minix/inode.c:542:
+static struct fsblock_meta * V2_minix_update_inode(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1239: FILE: fs/minix/inode.c:544:
+	struct fsblock_meta * mblock;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1287: FILE: fs/minix/inode.c:590:
+	if (mblock && test_bit(BL_dirty, &mblock_block(mblock)->flags)) {
[...]
-	else if (!bh)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1297: FILE: fs/minix/inode.c:599:
 	}
+	else if (!mblock)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414036.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 33 warnings, 20 checks, 1211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414036.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
