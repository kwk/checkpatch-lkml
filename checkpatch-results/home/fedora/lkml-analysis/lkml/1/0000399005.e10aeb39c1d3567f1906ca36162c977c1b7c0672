CHECK:CAMELCASE: Avoid CamelCase: <CyRIR>
#69: FILE: drivers/char/cyclades.c:995:
+	save_xir = readb(base_addr + (CyRIR << index));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <CyIRChannel>
#70: FILE: drivers/char/cyclades.c:996:
+	channel = save_xir & CyIRChannel;

CHECK:CAMELCASE: Avoid CamelCase: <CyRIVR>
#79: FILE: drivers/char/cyclades.c:1003:
+		if ((readb(base_addr + (CyRIVR << index)) & CyIVRMask) ==

CHECK:CAMELCASE: Avoid CamelCase: <CyIVRMask>
#79: FILE: drivers/char/cyclades.c:1003:
+		if ((readb(base_addr + (CyRIVR << index)) & CyIVRMask) ==

CHECK:CAMELCASE: Avoid CamelCase: <CyIVRRxEx>
#80: FILE: drivers/char/cyclades.c:1004:
+				CyIVRRxEx) {	/* exception */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: drivers/char/cyclades.c:1118:
+static void cyy_chip_tx(struct cyclades_card *cinfo, unsigned int chip,
 		void __iomem *base_addr)

CHECK:CAMELCASE: Avoid CamelCase: <CyTIR>
#118: FILE: drivers/char/cyclades.c:1132:
+	save_xir = readb(base_addr + (CyTIR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyMIR>
#135: FILE: drivers/char/cyclades.c:1246:
+	save_xir = readb(base_addr + (CyMIR << index));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: drivers/char/cyclades.c:1446:
+static void cyz_handle_rx(struct cyclades_port *info,
 		struct BUF_CTRL __iomem *buf_ctrl)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: drivers/char/cyclades.c:1524:
+			if (char_count >= readl(&buf_ctrl->rx_threshold) &&
 					!timer_pending(&cyz_rx_full_timer[

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/char/cyclades.c:1538:
+static void cyz_handle_tx(struct cyclades_port *info,
 		struct BUF_CTRL __iomem *buf_ctrl)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty->index < 0'
#242: FILE: drivers/char/cyclades.c:2383:
+	if ((tty->index < 0) || (NR_PORTS <= line)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'NR_PORTS <= line'
#242: FILE: drivers/char/cyclades.c:2383:
+	if ((tty->index < 0) || (NR_PORTS <= line)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#242: FILE: drivers/char/cyclades.c:2383:
+	if ((tty->index < 0) || (NR_PORTS <= line)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#242: FILE: drivers/char/cyclades.c:2383:
+	if ((tty->index < 0) || (NR_PORTS <= line)) {
 		return -ENODEV;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#254: FILE: drivers/char/cyclades.c:4355:
+	int uninitialized_var(index);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'index' should also have an identifier name
#254: FILE: drivers/char/cyclades.c:4355:
+	int uninitialized_var(index);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/linux/cyclades.h:515:
+    unsigned int num_chips;^I/* 0 if card absent, -1 if Z/PCI, else Y */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: include/linux/cyclades.h:516:
+    unsigned int first_line;^I/* minor number of first channel on card */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: include/linux/cyclades.h:517:
+    unsigned int nports;^I/* Number of ports in the card */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: include/linux/cyclades.h:518:
+    int bus_index;^I^I/* address shift - 0 for ISA, 1 for PCI */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: include/linux/cyclades.h:519:
+    int intr_enabled;^I^I/* FW Interrupt flag - 0 disabled, 1 enabled */$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399005.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 13 checks, 249 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399005.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
