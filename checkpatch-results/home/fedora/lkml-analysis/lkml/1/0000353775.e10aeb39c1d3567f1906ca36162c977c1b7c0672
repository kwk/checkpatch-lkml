WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
 * mem_cgroup_calc_reclaim_active() ... calculate the number of active pages to

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: mm/vmscan.c:958:
+static int calc_reclaim_mapped(struct scan_control *sc, struct zone *zone,
+				int priority)

CHECK:BRACES: braces {} should be used on all arms of this statement
#158: FILE: mm/vmscan.c:1019:
+	if (scan_global_lru(sc)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#161: FILE: mm/vmscan.c:1022:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#208: FILE: mm/vmscan.c:1078:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: mm/vmscan.c:1226:
+		nr_active = mem_cgroup_calc_reclaim_active(sc->mem_cgroup,
+					zone, priority);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/vmscan.c:1229:
+		nr_inactive = mem_cgroup_calc_reclaim_inactive(sc->mem_cgroup,
+					zone, priority);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#384: FILE: mm/vmscan.c:1276:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: mm/vmscan.c:1293:
+			if (zone_is_all_unreclaimable(zone) &&
+						priority != DEF_PRIORITY)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: mm/vmscan.c:1303:
+			mem_cgroup_note_reclaim_priority(sc->mem_cgroup,
+							priority);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zones[i]"
#437: FILE: mm/vmscan.c:1341:
+		for (i = 0; zones[i] != NULL; i++) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#465: FILE: mm/vmscan.c:1407:
+	if (scan_global_lru(sc)) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zones[i]"
#466: FILE: mm/vmscan.c:1408:
+		for (i = 0; zones[i] != NULL; i++) {

CHECK:BRACES: Unbalanced braces around else statement
#474: FILE: mm/vmscan.c:1416:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 13 checks, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
