WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
  (one for sync and one for async) per device and number of requests allocated

WARNING:TYPO_SPELLING: 'deivce' may be misspelled - perhaps 'device'?
#45: 
  Hence there is a need for new interface which can query deivce congestion
                                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'trun' may be misspelled - perhaps 'turn'?
#52: 
  block layer and in trun elevator to find out if the io group the page will
                     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: block/blk-core.c:95:
+int blk_queue_io_group_congested(struct backing_dev_info *bdi, int bdi_bits,
+					struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: block/elevator-fq.c:1243:
+void elv_io_group_congestion_threshold(struct request_queue *q,
+						struct io_group *iog)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: block/elevator-fq.c:1260:
+static inline int elv_is_iog_congested(struct request_queue *q,
+					struct io_group *iog, int sync)

WARNING:SPLIT_STRING: quoted string split across lines
#183: FILE: block/elevator-fq.c:1291:
+		elv_log_iog(&q->elevator->efqd, iog, "iog congested=%d sync=%d"
+			" rl.count[sync]=%d nr_group_requests=%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: block/elevator-fq.h:567:
+extern int elv_io_group_congested(struct request_queue *q, struct page *page,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: block/elevator-fq.h:568:
+extern int elv_io_group_congested(struct request_queue *q, struct page *page,
+					int sync);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: drivers/md/dm-table.c:1179:
+int dm_table_any_congested(struct dm_table *t, int bdi_bits, struct page *page,
+				int group)

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: drivers/md/dm-table.c:1191:
+			struct backing_dev_info *bdi = &q->backing_dev_info;
+			r |= group ? bdi_congested_group(bdi, bdi_bits, page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#268: FILE: drivers/md/dm-table.c:1193:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: drivers/md/dm.c:1612:
+static int dm_any_congested(void *congested_data, int bdi_bits,
+					struct page *page, int group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/md/dm.c:1630:
+				r = dm_table_any_congested(map, bdi_bits, page,
+								 group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: drivers/md/dm.h:61:
+int dm_table_any_congested(struct dm_table *t, int bdi_bits, struct page *page,
+				int group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/md/multipath.c:196:
+static int multipath_congested(void *data, int bits, struct page *page,
+					int group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: fs/btrfs/disk-io.c:1253:
+static int btrfs_congested_fn(void *congested_data, int bdi_bits,
+					struct page *page, int group)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#521: FILE: fs/btrfs/extent_io.c:2376:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#605: FILE: fs/gfs2/aops.c:379:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#683: FILE: include/linux/backing-dev.h:233:
+extern int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: include/linux/backing-dev.h:234:
+extern int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,
+				struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#686: FILE: include/linux/backing-dev.h:236:
+extern int bdi_read_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: include/linux/backing-dev.h:237:
+extern int bdi_read_congested_group(struct backing_dev_info *bdi,
+						struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: include/linux/backing-dev.h:239:
+extern int bdi_or_group_read_congested(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: include/linux/backing-dev.h:240:
+extern int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#692: FILE: include/linux/backing-dev.h:242:
+extern int bdi_write_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: include/linux/backing-dev.h:243:
+extern int bdi_write_congested_group(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#695: FILE: include/linux/backing-dev.h:245:
+extern int bdi_or_group_write_congested(struct backing_dev_info *bdi,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#698: FILE: include/linux/backing-dev.h:248:
+extern int bdi_rw_congested_group(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: include/linux/backing-dev.h:249:
+extern int bdi_rw_congested_group(struct backing_dev_info *bdi,
+					struct page *page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: include/linux/backing-dev.h:252:
+static inline int bdi_congested_group(struct backing_dev_info *bdi,
+					int bdi_bits, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: include/linux/backing-dev.h:258:
+static inline int bdi_read_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: include/linux/backing-dev.h:264:
+static inline int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: include/linux/backing-dev.h:270:
+static inline int bdi_write_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: include/linux/backing-dev.h:276:
+static inline int bdi_or_group_write_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: include/linux/backing-dev.h:282:
+static inline int bdi_rw_congested_group(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#751: FILE: include/linux/blkdev.h:890:
+extern int blk_queue_io_group_congested(struct backing_dev_info *bdi,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#790: FILE: mm/backing-dev.c:347:
+int bdi_congested_group(struct backing_dev_info *bdi, int bdi_bits,
+				struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: mm/backing-dev.c:364:
+int bdi_or_group_read_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: mm/backing-dev.c:378:
+int bdi_or_group_write_congested(struct backing_dev_info *bdi,
+						struct page *page)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#847: FILE: mm/page-writeback.c:992:
+		if (wbc->nonblocking
+		    && bdi_write_congested_group(bdi, pvec.pages[0])) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092809.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 36 checks, 625 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092809.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
