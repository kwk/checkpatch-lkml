WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
This patch adds the simple plugin infrastructure used by subsystem and seobj plugins.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: drivers/target/target_core_plugin.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#70: FILE: drivers/target/target_core_plugin.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#71: FILE: drivers/target/target_core_plugin.c:22:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#111: FILE: drivers/target/target_core_plugin.c:62:
+se_plugin_class_t *plugin_get_class(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#117: FILE: drivers/target/target_core_plugin.c:68:
+		printk(KERN_ERR "Passed plugin class type: %u exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#118: FILE: drivers/target/target_core_plugin.c:69:
+		printk(KERN_ERR "Passed plugin class type: %u exceeds"
+			" MAX_PLUGIN_CLASSES: %d\n", plugin_class_type,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#130: FILE: drivers/target/target_core_plugin.c:81:
+int plugin_register_class(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#140: FILE: drivers/target/target_core_plugin.c:91:
+		printk(KERN_ERR "plugin_class_name exceeds MAX_PLUGIN_CLASS"

WARNING:SPLIT_STRING: quoted string split across lines
#141: FILE: drivers/target/target_core_plugin.c:92:
+		printk(KERN_ERR "plugin_class_name exceeds MAX_PLUGIN_CLASS"
+				"_NAME: %u\n", MAX_PLUGIN_CLASS_NAME);

WARNING:MISSING_SPACE: break quoted strings at a space character
#141: FILE: drivers/target/target_core_plugin.c:92:
+		printk(KERN_ERR "plugin_class_name exceeds MAX_PLUGIN_CLASS"
+				"_NAME: %u\n", MAX_PLUGIN_CLASS_NAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#146: FILE: drivers/target/target_core_plugin.c:97:
+		printk(KERN_ERR "Passed plugin class type: %u exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#147: FILE: drivers/target/target_core_plugin.c:98:
+		printk(KERN_ERR "Passed plugin class type: %u exceeds"
+			" MAX_PLUGIN_CLASSES: %d\n", plugin_class_type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#154: FILE: drivers/target/target_core_plugin.c:105:
+		printk(KERN_ERR "Plugin Class Type: %u already exists\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: drivers/target/target_core_plugin.c:106:
+		printk(KERN_ERR "Plugin Class Type: %u already exists\n",
+			plugin_class_type);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#160: FILE: drivers/target/target_core_plugin.c:111:
+	pc->plugin_array = kzalloc(sizeof(se_plugin_t) * max_plugins,
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: drivers/target/target_core_plugin.c:112:
+	pc->plugin_array = kzalloc(sizeof(se_plugin_t) * max_plugins,
+				GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#163: FILE: drivers/target/target_core_plugin.c:114:
+		printk(KERN_ERR "Unable to locate pc->plugin_array\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: drivers/target/target_core_plugin.c:122:
+	snprintf(pc->plugin_class_name, MAX_PLUGIN_CLASS_NAME,
+		"%s", plugin_class_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#178: FILE: drivers/target/target_core_plugin.c:129:
+	printk(KERN_INFO "SE_PC[%u] - Registered Plugin Class: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/target/target_core_plugin.c:130:
+	printk(KERN_INFO "SE_PC[%u] - Registered Plugin Class: %s\n",
+			pc->plugin_class, pc->plugin_class_name);

WARNING:RETURN_VOID: void function return statements are not generally useful
#226: FILE: drivers/target/target_core_plugin.c:177:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#229: FILE: drivers/target/target_core_plugin.c:180:
+void *plugin_get_obj(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#243: FILE: drivers/target/target_core_plugin.c:194:
+		printk(KERN_ERR "Passed plugin_loc: %d exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#244: FILE: drivers/target/target_core_plugin.c:195:
+		printk(KERN_ERR "Passed plugin_loc: %d exceeds"
+			" pc->max_plugins: %d\n", plugin_loc, pc->max_plugins);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#250: FILE: drivers/target/target_core_plugin.c:201:
+		printk(KERN_ERR "Passed plugin_loc: %u does not exist!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: drivers/target/target_core_plugin.c:202:
+		printk(KERN_ERR "Passed plugin_loc: %u does not exist!\n",
+				plugin_loc);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#265: FILE: drivers/target/target_core_plugin.c:216:
+struct se_plugin_s *plugin_register(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#277: FILE: drivers/target/target_core_plugin.c:228:
+		printk(KERN_ERR "obj or plugin_class pointers are NULL!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#282: FILE: drivers/target/target_core_plugin.c:233:
+		printk(KERN_ERR "plugin_name exceeds MAX_PLUGIN_NAME: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: drivers/target/target_core_plugin.c:234:
+		printk(KERN_ERR "plugin_name exceeds MAX_PLUGIN_NAME: %u\n",
+				MAX_PLUGIN_NAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#293: FILE: drivers/target/target_core_plugin.c:244:
+		printk(KERN_ERR "Passed plugin_loc: %u exceeds pc->max_plugins:"

WARNING:SPLIT_STRING: quoted string split across lines
#294: FILE: drivers/target/target_core_plugin.c:245:
+		printk(KERN_ERR "Passed plugin_loc: %u exceeds pc->max_plugins:"
+			" %d\n", plugin_loc, pc->max_plugins);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#301: FILE: drivers/target/target_core_plugin.c:252:
+		printk(KERN_ERR "Passed plugin_loc: %u already registered\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: drivers/target/target_core_plugin.c:253:
+		printk(KERN_ERR "Passed plugin_loc: %u already registered\n",
+			plugin_loc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#313: FILE: drivers/target/target_core_plugin.c:264:
+	printk(KERN_INFO "PLUGIN_%s[%u] - %s registered\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: drivers/target/target_core_plugin.c:265:
+	printk(KERN_INFO "PLUGIN_%s[%u] - %s registered\n",
+			pc->plugin_class_name, plugin_loc, plugin_name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#325: FILE: drivers/target/target_core_plugin.c:276:
+int plugin_deregister(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#339: FILE: drivers/target/target_core_plugin.c:290:
+		printk(KERN_ERR "Passed plugin_loc: %u exceeds pc->max_plugins:"

WARNING:SPLIT_STRING: quoted string split across lines
#340: FILE: drivers/target/target_core_plugin.c:291:
+		printk(KERN_ERR "Passed plugin_loc: %u exceeds pc->max_plugins:"
+			" %d\n", plugin_loc, pc->max_plugins);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#347: FILE: drivers/target/target_core_plugin.c:298:
+		printk(KERN_ERR "Passed plugin_loc: %u not active!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/target/target_core_plugin.c:299:
+		printk(KERN_ERR "Passed plugin_loc: %u not active!\n",
+			plugin_loc);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#366: FILE: include/target/target_core_plugin.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#386: FILE: include/target/target_core_plugin.h:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#387: FILE: include/target/target_core_plugin.h:22:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#391: FILE: include/target/target_core_plugin.h:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: include/target/target_core_plugin.h:43:
+extern void plugin_load_all_classes(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: include/target/target_core_plugin.h:44:
+extern struct se_plugin_class_s *plugin_get_class(u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#409: FILE: include/target/target_core_plugin.h:44:
+extern struct se_plugin_class_s *plugin_get_class(u32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#410: FILE: include/target/target_core_plugin.h:45:
+extern int plugin_register_class(u32, unsigned char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#410: FILE: include/target/target_core_plugin.h:45:
+extern int plugin_register_class(u32, unsigned char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#410: FILE: include/target/target_core_plugin.h:45:
+extern int plugin_register_class(u32, unsigned char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#410: FILE: include/target/target_core_plugin.h:45:
+extern int plugin_register_class(u32, unsigned char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: include/target/target_core_plugin.h:46:
+extern int plugin_deregister_class(u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#411: FILE: include/target/target_core_plugin.h:46:
+extern int plugin_deregister_class(u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: include/target/target_core_plugin.h:47:
+extern void plugin_unload_all_classes(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: include/target/target_core_plugin.h:48:
+extern void *plugin_get_obj(u32, u32, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#413: FILE: include/target/target_core_plugin.h:48:
+extern void *plugin_get_obj(u32, u32, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#413: FILE: include/target/target_core_plugin.h:48:
+extern void *plugin_get_obj(u32, u32, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#413: FILE: include/target/target_core_plugin.h:48:
+extern void *plugin_get_obj(u32, u32, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#414: FILE: include/target/target_core_plugin.h:49:
+extern struct se_plugin_s *plugin_register(void *, u32, unsigned char *, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#414: FILE: include/target/target_core_plugin.h:49:
+extern struct se_plugin_s *plugin_register(void *, u32, unsigned char *, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#414: FILE: include/target/target_core_plugin.h:49:
+extern struct se_plugin_s *plugin_register(void *, u32, unsigned char *, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#414: FILE: include/target/target_core_plugin.h:49:
+extern struct se_plugin_s *plugin_register(void *, u32, unsigned char *, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#414: FILE: include/target/target_core_plugin.h:49:
+extern struct se_plugin_s *plugin_register(void *, u32, unsigned char *, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#414: FILE: include/target/target_core_plugin.h:49:
+extern struct se_plugin_s *plugin_register(void *, u32, unsigned char *, u32,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: include/target/target_core_plugin.h:50:
+extern struct se_plugin_s *plugin_register(void *, u32, unsigned char *, u32,
+				void (*get_plugin_info)(void *, char *, int *),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/target/target_core_plugin.h:52:
+extern int plugin_deregister(u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#417: FILE: include/target/target_core_plugin.h:52:
+extern int plugin_deregister(u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#417: FILE: include/target/target_core_plugin.h:52:
+extern int plugin_deregister(u32, u32);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#419: FILE: include/target/target_core_plugin.h:54:
+typedef struct se_plugin_class_s {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#424: FILE: include/target/target_core_plugin.h:59:
+	spinlock_t		plugin_lock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#427: FILE: include/target/target_core_plugin.h:62:
+typedef struct se_plugin_s	{

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#433: FILE: include/target/target_core_plugin.h:68:
+	void (*get_plugin_info)(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#433: FILE: include/target/target_core_plugin.h:68:
+	void (*get_plugin_info)(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#433: FILE: include/target/target_core_plugin.h:68:
+	void (*get_plugin_info)(void *, char *, int *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144110.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 48 warnings, 25 checks, 381 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144110.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
