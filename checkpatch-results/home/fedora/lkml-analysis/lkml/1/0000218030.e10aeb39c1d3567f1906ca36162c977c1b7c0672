WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Each time a down_read or down_write fails, a unique latency id is generated.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: kernel/trace/Kconfig:147:
+config SEMLAT_TRACER
+	bool "Semaphore latency tracer"
+	depends on HAVE_FTRACE
+	depends on DEBUG_KERNEL
+	select TRACING
+	select TRACEPOINTS
+	select TRACER_MAX_TRACE
+	help
+	  This tracer records the reason for semaphore contention, showing
+	  who is holding a lock for too long and causing other tasks to contend
+	  on the semaphore. Currently it instruments rwsem and rwsem-spinlock with tracepoints.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: kernel/trace/trace.c:756:
+static void ftrace_trace_userstack(struct trace_array *tr,
 		   struct trace_array_cpu *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: kernel/trace/trace.c:787:
+void __trace_userstack(struct trace_array *tr,
+		   struct trace_array_cpu *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: kernel/trace/trace.c:830:
+trace_semlat(struct trace_array *tr, struct trace_array_cpu *data,
+		const struct semlat_data *sdata, int samestack)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#164: FILE: kernel/trace/trace.c:844:
+^Ientry->data ^I^I^I= *sdata;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: kernel/trace/trace.c:1242:
+seq_print_userip_objs(const struct userstack_entry *entry, struct trace_seq *s,
 		unsigned long sym_flags)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#232: FILE: kernel/trace/trace.c:1598:
+			trace_seq_printf(s, " (%u) %s["IP_FMT"] %s %s\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: kernel/trace/trace.c:1599:
+			trace_seq_printf(s, " (%u) %s["IP_FMT"] %s %s\n",
+				field->data.latency_id,

CHECK:BRACES: Unbalanced braces around else statement
#238: FILE: kernel/trace/trace.c:1604:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#305: FILE: kernel/trace/trace.h:136:
+^Iunsigned int ^Ikind_read;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: kernel/trace/trace.h:138:
+^Icycle_t  ^It;/* start of latency - lock contention */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: kernel/trace/trace.h:139:
+^Iint      ^Icpu;$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#348: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#353: FILE: kernel/trace/trace_semlat.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#368: FILE: kernel/trace/trace_semlat.c:16:
+static int __read_mostly	tracer_enabled;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#370: FILE: kernel/trace/trace_semlat.c:18:
+static struct semlat_data map_pid_to_latency[PID_MAX_DEFAULT+1];
                                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#401: FILE: kernel/trace/trace_semlat.c:49:
+	delta = T1-T0;
 	          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#409: FILE: kernel/trace/trace_semlat.c:57:
+	 * we want to blame this task for their latency too */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#456: FILE: kernel/trace/trace_semlat.c:104:
+	int cpu;
+	cpu = raw_smp_processor_id();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: kernel/trace/trace_semlat.c:117:
+	int ret;
+	ret = register_trace_rwsem_wake(probe_rwsem_wake);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#477: FILE: kernel/trace/trace_semlat.c:125:
+	printk(KERN_INFO "registered semlat\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#486: FILE: kernel/trace/trace_semlat.c:134:
+	printk(KERN_INFO "unregistered semlat\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#509: FILE: kernel/trace/trace_semlat.c:157:
+{
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#524: FILE: kernel/trace/trace_semlat.c:172:
+static struct tracer semlat_trace __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218030.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 10 checks, 445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218030.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
