WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: drivers/haptic/Kconfig:16:
+config HAPTIC_SAMSUNG_PWM
+	tristate "Haptic Support for SAMSUNG PWM-controlled haptic (ISA1000)"
+	depends on HAPTIC_CLASS && (ARCH_S3C64XX || ARCH_S5PC1XX)
+	help
+	  This options enables support for haptic connected to GPIO lines
+	  controlled by a PWM timer on SAMSUNG CPUs.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#70: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: drivers/haptic/haptic-samsung-pwm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#76: FILE: drivers/haptic/haptic-samsung-pwm.c:2:
+ *  drivers/haptic/haptic-samsung-pwm.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#117: FILE: drivers/haptic/haptic-samsung-pwm.c:43:
+static inline struct samsung_pwm_haptic *cdev_to_samsung_pwm_haptic(

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: drivers/haptic/haptic-samsung-pwm.c:76:
+	int duty = haptic_levels[haptic->level];
+	return pwm_config(haptic->pwm, duty, PWM_HAPTIC_PERIOD);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/haptic/haptic-samsung-pwm.c:107:
+static void samsung_pwm_haptic_set(struct haptic_classdev *haptic_cdev,
+				enum haptic_value value)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#200: FILE: drivers/haptic/haptic-samsung-pwm.c:126:
+static enum haptic_value samsung_pwm_haptic_get(

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#212: FILE: drivers/haptic/haptic-samsung-pwm.c:138:
+#define ATTR_DEF_SHOW(name) \
+static ssize_t samsung_pwm_haptic_show_##name(struct device *dev, \
+		struct device_attribute *attr, char *buf) \
+{ \
+	struct haptic_classdev *haptic_cdev = dev_get_drvdata(dev); \
+	struct samsung_pwm_haptic *haptic =\
+		cdev_to_samsung_pwm_haptic(haptic_cdev); \
+ \
+	return sprintf(buf, "%u\n", haptic->name) + 1; \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: drivers/haptic/haptic-samsung-pwm.c:145:
+ \$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#223: FILE: drivers/haptic/haptic-samsung-pwm.c:149:
+#define ATTR_DEF_STORE(name) \
+static ssize_t samsung_pwm_haptic_store_##name(struct device *dev, \
+		struct device_attribute *attr, \
+		const char *buf, size_t size) \
+{ \
+	struct haptic_classdev *haptic_cdev = dev_get_drvdata(dev); \
+	struct samsung_pwm_haptic *haptic =\
+		 cdev_to_samsung_pwm_haptic(haptic_cdev); \
+	ssize_t ret = -EINVAL; \
+	unsigned long val; \
+ \
+	ret = strict_strtoul(buf, 10, &val); \
+	if (ret == 0) { \
+		ret = size; \
+		haptic->name = val; \
+		schedule_work(&haptic->work); \
+	} \
+ \
+	return ret; \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/haptic/haptic-samsung-pwm.c:159:
+ \$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#234: FILE: drivers/haptic/haptic-samsung-pwm.c:160:
+	ret = strict_strtoul(buf, 10, &val); \

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: drivers/haptic/haptic-samsung-pwm.c:166:
+ \$

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'samsung_pwm_haptic_show_enable' to 'enable_show' 'samsung_pwm_haptic_store_enable' to 'enable_store'
#246: FILE: drivers/haptic/haptic-samsung-pwm.c:172:
+static DEVICE_ATTR(enable, 0644, samsung_pwm_haptic_show_enable,

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: drivers/haptic/haptic-samsung-pwm.c:176:
+static ssize_t samsung_pwm_haptic_store_level(struct device *dev,
+		struct device_attribute *attr,

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#259: FILE: drivers/haptic/haptic-samsung-pwm.c:185:
+	ret = strict_strtoul(buf, 10, &val);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'samsung_pwm_haptic_show_level' to 'level_show' 'samsung_pwm_haptic_store_level' to 'level_store'
#271: FILE: drivers/haptic/haptic-samsung-pwm.c:197:
+static DEVICE_ATTR(level, 0644, samsung_pwm_haptic_show_level,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'samsung_pwm_haptic_show_level_max' to 'level_max_show'
#275: FILE: drivers/haptic/haptic-samsung-pwm.c:201:
+static DEVICE_ATTR(level_max, 0444, samsung_pwm_haptic_show_level_max, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/haptic/haptic-samsung-pwm.c:204:
+static ssize_t samsung_pwm_haptic_store_oneshot(struct device *dev,
+		struct device_attribute *attr,

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#287: FILE: drivers/haptic/haptic-samsung-pwm.c:213:
+	ret = strict_strtoul(buf, 10, &val);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'samsung_pwm_haptic_store_oneshot' to 'oneshot_store'
#296: FILE: drivers/haptic/haptic-samsung-pwm.c:222:
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#311: FILE: drivers/haptic/haptic-samsung-pwm.c:237:
+static int __devinit samsung_pwm_haptic_probe(struct platform_device *pdev)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*haptic)...) over kzalloc(sizeof(struct samsung_pwm_haptic)...)
#317: FILE: drivers/haptic/haptic-samsung-pwm.c:243:
+	haptic = kzalloc(sizeof(struct samsung_pwm_haptic), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#319: FILE: drivers/haptic/haptic-samsung-pwm.c:245:
+	if (!haptic) {
+		dev_err(&pdev->dev, "No memory for device\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#351: FILE: drivers/haptic/haptic-samsung-pwm.c:277:
+	if (IS_ERR(haptic->pwm)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#355: FILE: drivers/haptic/haptic-samsung-pwm.c:281:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#363: FILE: drivers/haptic/haptic-samsung-pwm.c:289:
+		printk(KERN_INFO "Motor enable gpio %d\n", pdata->gpio);

WARNING:TYPO_SPELLING: 'registed' may be misspelled - perhaps 'registered'?
#374: FILE: drivers/haptic/haptic-samsung-pwm.c:300:
+	printk(KERN_INFO "samsung %s registed\n", pdata->name);
 	                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#374: FILE: drivers/haptic/haptic-samsung-pwm.c:300:
+	printk(KERN_INFO "samsung %s registed\n", pdata->name);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#389: FILE: drivers/haptic/haptic-samsung-pwm.c:315:
+static int __devexit samsung_pwm_haptic_remove(struct platform_device *pdev)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#405: FILE: drivers/haptic/haptic-samsung-pwm.c:331:
+static int samsung_pwm_haptic_suspend(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062947.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 11 checks, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062947.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
