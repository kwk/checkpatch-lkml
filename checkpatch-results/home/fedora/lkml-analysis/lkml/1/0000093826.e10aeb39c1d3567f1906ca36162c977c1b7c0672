CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/elf.h> instead of <asm/elf.h>
#113: FILE: arch/x86/mm/checkpoint.c:16:
+#include <asm/elf.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: arch/x86/mm/checkpoint.c:579:
+	ckpt_debug("nldt %d vdso %#lx (%p)\n",
+		 h->nldt, (unsigned long) h->vdso, mm->context.vdso);

CHECK:SPACING: No space is necessary after a cast
#133: FILE: arch/x86/mm/checkpoint.c:579:
+		 h->nldt, (unsigned long) h->vdso, mm->context.vdso);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#136: FILE: arch/x86/mm/checkpoint.c:582:
+	if (h->vdso != (unsigned long) mm->context.vdso)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#169: FILE: arch/x86/mm/checkpoint.c:615:
+		info.useable = desc.avl;
 		     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#173: FILE: arch/x86/mm/checkpoint.c:619:
+		ret = sys_modify_ldt(1, (struct user_desc __user *) &info,

CHECK:SPACING: No space is necessary after a cast
#318: FILE: checkpoint/memory.c:808:
+		ckpt_debug("total pages %ld\n", (unsigned long) h->nr_pages);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#404: FILE: checkpoint/memory.c:894:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: checkpoint/memory.c:907:
+	ckpt_debug("size %#lx prot %#lx flag %#lx pgoff %#lx => %#lx\n",
+		 vm_size, vm_prot, vm_flags, vm_pgoff, addr);

CHECK:SPACING: No space is necessary after a cast
#438: FILE: checkpoint/memory.c:928:
+	if (IS_ERR((void *) addr))

CHECK:SPACING: No space is necessary after a cast
#439: FILE: checkpoint/memory.c:929:
+		return PTR_ERR((void *) addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: checkpoint/memory.c:941:
+static int anon_private_restore(struct ckpt_ctx *ctx,
+				     struct mm_struct *mm,

WARNING:SPACING: Unnecessary space before function pointer arguments
#467: FILE: checkpoint/memory.c:957:
+	int (*restore) (struct ckpt_ctx *ctx,

CHECK:SPACING: No space is necessary after a cast
#515: FILE: checkpoint/memory.c:1005:
+		   (unsigned long) h->vm_start, (unsigned long) h->vm_end,

CHECK:SPACING: No space is necessary after a cast
#516: FILE: checkpoint/memory.c:1006:
+		   (unsigned long) h->vm_flags, (int) h->vma_type,

CHECK:SPACING: No space is necessary after a cast
#517: FILE: checkpoint/memory.c:1007:
+		   (int) h->vma_objref);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: checkpoint/memory.c:1020:
+	BUG_ON(ops->vma_type != h->vma_type);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#553: FILE: checkpoint/memory.c:1043:
+		ret = do_munmap(mm, vma->vm_start, vma->vm_end-vma->vm_start);
 		                                              ^

CHECK:SPACING: No space is necessary after a cast
#572: FILE: checkpoint/memory.c:1062:
+		return (struct mm_struct *) h;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->start_code > h->end_code'
#579: FILE: checkpoint/memory.c:1069:
+	if ((h->start_code > h->end_code) ||
+	    (h->start_data > h->end_data))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->start_data > h->end_data'
#579: FILE: checkpoint/memory.c:1069:
+	if ((h->start_code > h->end_code) ||
+	    (h->start_data > h->end_data))

CHECK:SPACING: No space is necessary after a cast
#649: FILE: checkpoint/memory.c:1139:
+	return (void *) do_restore_mm(ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#738: FILE: include/linux/checkpoint.h:123:
+extern int restore_mm_context(struct ckpt_ctx *ctx, struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: include/linux/checkpoint.h:163:
+extern int restore_obj_mm(struct ckpt_ctx *ctx, int mm_objref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#750: FILE: include/linux/checkpoint.h:167:
+extern void *restore_mm(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#752: FILE: include/linux/checkpoint.h:169:
+extern int private_vma_restore(struct ckpt_ctx *ctx, struct mm_struct *mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#780: FILE: include/linux/mm.h:1167:
+extern int exec_mmap(struct mm_struct *mm);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#789: FILE: include/linux/mm.h:1182:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#793: FILE: include/linux/mm.h:1186:
+extern int filemap_restore(struct ckpt_ctx *ctx, struct mm_struct *mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#795: FILE: include/linux/mm.h:1188:
+extern int special_mapping_restore(struct ckpt_ctx *ctx, struct mm_struct *mm,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093826.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 26 checks, 725 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093826.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
