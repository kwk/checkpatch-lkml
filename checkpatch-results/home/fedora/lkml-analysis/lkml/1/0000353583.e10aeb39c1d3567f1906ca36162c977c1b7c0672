WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
General description: kmemcheck will trap every read and write to memory that was

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#112: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: arch/x86/kernel/kmemcheck_32.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#120: FILE: arch/x86/kernel/kmemcheck_32.c:4:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: arch/x86/kernel/kmemcheck_32.c:84:
+	for(i = 0; i < n; ++i) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#201: FILE: arch/x86/kernel/kmemcheck_32.c:85:
+		unsigned long address = (unsigned long) page_address(&p[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: arch/x86/kernel/kmemcheck_32.c:89:
+		change_page_attr(&p[i], 1,
+			__pgprot(pte->pte_low & ~_PAGE_VISIBLE));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#217: FILE: arch/x86/kernel/kmemcheck_32.c:101:
+		/* Group 2 */
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#218: FILE: arch/x86/kernel/kmemcheck_32.c:102:
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26
+		|| b == 0x64 || b == 0x65 || b == 0x2e || b == 0x3e

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#220: FILE: arch/x86/kernel/kmemcheck_32.c:104:
+		/* Group 3 */
+		|| b == 0x66

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#222: FILE: arch/x86/kernel/kmemcheck_32.c:106:
+		/* Group 4 */
+		|| b == 0x67;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#228: FILE: arch/x86/kernel/kmemcheck_32.c:112:
+ * should be shot. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#232: FILE: arch/x86/kernel/kmemcheck_32.c:116:
+	const uint8_t *i;

ERROR:SPACING: space required before the open parenthesis '('
#247: FILE: arch/x86/kernel/kmemcheck_32.c:131:
+		if(*i == 0xb6)

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: arch/x86/kernel/kmemcheck_32.c:133:
+		if(*i == 0xb7)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#259: FILE: arch/x86/kernel/kmemcheck_32.c:143:
+	const uint8_t *i;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#262: FILE: arch/x86/kernel/kmemcheck_32.c:146:
+	for (i = opcode; opcode_is_prefix(*i); ++i);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: arch/x86/kernel/kmemcheck_32.c:151:
+static void *address_get_shadow_slab(unsigned long address,
+	struct page *head)

CHECK:SPACING: No space is necessary after a cast
#275: FILE: arch/x86/kernel/kmemcheck_32.c:159:
+	return (void *) address + (PAGE_SIZE << head->slab->order);

CHECK:SPACING: No space is necessary after a cast
#297: FILE: arch/x86/kernel/kmemcheck_32.c:181:
+		return *(uint8_t *) shadow == 0xff;

CHECK:SPACING: No space is necessary after a cast
#299: FILE: arch/x86/kernel/kmemcheck_32.c:183:
+		return *(uint16_t *) shadow == 0xffff;

CHECK:SPACING: No space is necessary after a cast
#301: FILE: arch/x86/kernel/kmemcheck_32.c:185:
+		return *(uint32_t *) shadow == 0xffffffff;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#304: FILE: arch/x86/kernel/kmemcheck_32.c:188:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#313: FILE: arch/x86/kernel/kmemcheck_32.c:197:
+		*(uint8_t *) shadow = 0xff;

CHECK:SPACING: No space is necessary after a cast
#316: FILE: arch/x86/kernel/kmemcheck_32.c:200:
+		*(uint16_t *) shadow = 0xffff;

CHECK:SPACING: No space is necessary after a cast
#319: FILE: arch/x86/kernel/kmemcheck_32.c:203:
+		*(uint32_t *) shadow = 0xffffffff;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: arch/x86/kernel/kmemcheck_32.c:207:
+	BUG();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#327: FILE: arch/x86/kernel/kmemcheck_32.c:211:
+kmemcheck_read(uint32_t eip, uint32_t address, unsigned int size)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#329: FILE: arch/x86/kernel/kmemcheck_32.c:213:
+	static uint32_t prev_eip = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#329: FILE: arch/x86/kernel/kmemcheck_32.c:213:
+	static uint32_t prev_eip = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#342: FILE: arch/x86/kernel/kmemcheck_32.c:226:
+		printk(KERN_ALERT "kmemcheck: Caught uninitialized "

WARNING:SPLIT_STRING: quoted string split across lines
#343: FILE: arch/x86/kernel/kmemcheck_32.c:227:
+		printk(KERN_ALERT "kmemcheck: Caught uninitialized "
+			"read from EIP = %08x ", eip);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#345: FILE: arch/x86/kernel/kmemcheck_32.c:229:
+		printk("address %08x, size %d\n", address, size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#349: FILE: arch/x86/kernel/kmemcheck_32.c:233:
+		 * with new traces. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#358: FILE: arch/x86/kernel/kmemcheck_32.c:242:
+kmemcheck_write(uint32_t eip, uint32_t address, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: arch/x86/kernel/kmemcheck_32.c:257:
+kmemcheck_access(struct pt_regs *regs,
+	unsigned long fallback_address, enum kmemcheck_method fallback_method)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#375: FILE: arch/x86/kernel/kmemcheck_32.c:259:
+	const uint8_t *insn;

CHECK:SPACING: No space is necessary after a cast
#378: FILE: arch/x86/kernel/kmemcheck_32.c:262:
+	insn = (const uint8_t *) regs->eip;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#389: FILE: arch/x86/kernel/kmemcheck_32.c:273:
+		 * addresses, but we only take one page fault. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#397: FILE: arch/x86/kernel/kmemcheck_32.c:281:
+	 * access. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: arch/x86/mm/fault_32.c:262:
+static inline int vmalloc_fault(struct pt_regs *regs, unsigned long address,
+	unsigned long error_code)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#505: FILE: arch/x86/mm/fault_32.c:347:
+		if (!(error_code & 0x0000000d)
+			&& vmalloc_fault(regs, address, error_code) >= 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#515: FILE: include/asm-x86/kmemcheck.h:1:
+#ifdef CONFIG_X86_32

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#524: FILE: include/asm-x86/kmemcheck_32.h:1:
+#ifndef ASM_X86_KMEMCHECK_32_H

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#528: FILE: include/asm-x86/kmemcheck_32.h:5:
+#include <asm/pgtable.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: include/asm-x86/kmemcheck_32.h:22:
+void kmemcheck_access(struct pt_regs *regs,
+	unsigned long address, enum kmemcheck_method method);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#552: FILE: include/asm-x86/kmemcheck_32.h:29:
+static void kmemcheck_access(struct pt_regs *regs,
+	unsigned long address, enum kmemcheck_method method) { }

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: include/asm-x86/kmemcheck_32.h:30:
+static void kmemcheck_access(struct pt_regs *regs,
+	unsigned long address, enum kmemcheck_method method) { }

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#614: FILE: mm/slub.c:25:
+#include <asm/cacheflush.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#636: FILE: mm/slub.c:1059:
+	 * status of each byte within the allocation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#657: FILE: mm/slub.c:1078:
+		 * analyze the memory accesses. */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353583.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 18 warnings, 27 checks, 551 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000353583.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
