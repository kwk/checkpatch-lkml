WARNING:TYPO_SPELLING: 'Splitted' may be misspelled - perhaps 'Split'?
#50: 
 (3) Splitted single file into three files.
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'do'
#68: 
he/she wants do do. But this filesystem makes sense when used with

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
I want to use this filesystem in case where a process with root privilege was

CHECK:BRACES: Unbalanced braces around else statement
#196: FILE: fs/ramfs/inode.c:137:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#212: FILE: fs/ramfs/inode.c:177:
+		inode = syaoran_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#212: FILE: fs/ramfs/inode.c:177:
+		inode = syaoran_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: Unbalanced braces around else statement
#214: FILE: fs/ramfs/inode.c:179:
+	} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#216: FILE: fs/ramfs/inode.c:181:
+		inode = ramfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 		                                          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#216: FILE: fs/ramfs/inode.c:181:
+		inode = ramfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: fs/ramfs/inode.c:198:
+static int ramfs_link(struct dentry *old_dentry, struct inode *dir,
+			struct dentry *dentry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/ramfs/inode.c:202:
+	struct inode *inode;
+	if (dir->i_sb->s_op != &syaoran_ops)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: fs/ramfs/inode.c:230:
+static int ramfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+			  struct inode *new_dir, struct dentry *new_dentry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: fs/ramfs/inode.c:234:
+	struct inode *inode;
+	if (old_dir->i_sb->s_op != &syaoran_ops)

WARNING:LINE_SPACING: Missing a blank line after declarations
#307: FILE: fs/ramfs/inode.c:280:
+	unsigned int flags = 0;
+	if (inode->i_sb->s_op != &syaoran_ops)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#358: FILE: fs/ramfs/syaoran.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#359: FILE: fs/ramfs/syaoran.h:2:
+ * fs/ramfs/syaoran.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#463: FILE: fs/ramfs/syaoran_debug.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#464: FILE: fs/ramfs/syaoran_debug.c:2:
+ * fs/ramfs/syaoran_debug.c

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#477: FILE: fs/ramfs/syaoran_debug.c:15:
+#define list_for_each_cookie(pos, cookie, head) \
+	for ((cookie) || ((cookie) = (head)), pos = (cookie)->next; \
+		prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+		(cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cookie' - possible side-effects?
#477: FILE: fs/ramfs/syaoran_debug.c:15:
+#define list_for_each_cookie(pos, cookie, head) \
+	for ((cookie) || ((cookie) = (head)), pos = (cookie)->next; \
+		prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+		(cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#477: FILE: fs/ramfs/syaoran_debug.c:15:
+#define list_for_each_cookie(pos, cookie, head) \
+	for ((cookie) || ((cookie) = (head)), pos = (cookie)->next; \
+		prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+		(cookie) = pos, pos = pos->next)

CHECK:SPACING: No space is necessary after a cast
#496: FILE: fs/ramfs/syaoran_debug.c:34:
+		(struct syaoran_sb_info *) sb->s_fs_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: fs/ramfs/syaoran_debug.c:37:
+	const bool read_all = head->read_all;
+	if (!info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#513: FILE: fs/ramfs/syaoran_debug.c:51:
+		int len = 0;
+		switch (entry->mode & S_IFMT) {

CHECK:SPACING: No space is necessary after a cast
#574: FILE: fs/ramfs/syaoran_debug.c:112:
+	head->pos = &((struct syaoran_sb_info *) head->sb->s_fs_info)->list;

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: fs/ramfs/syaoran_debug.c:125:
+	struct syaoran_read_struct *head = file->private_data;
+	kfree(head->buf);

CHECK:SPACING: No space is necessary after a cast
#597: FILE: fs/ramfs/syaoran_debug.c:135:
+		(struct syaoran_read_struct *) file->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#600: FILE: fs/ramfs/syaoran_debug.c:138:
+	char *cp = head->buf;
+	if (!access_ok(VERIFY_WRITE, buf, count))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#615: FILE: fs/ramfs/syaoran_debug.c:153:
+static struct file_operations syaoran_trace_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: fs/ramfs/syaoran_debug.c:166:
+	int error = PTR_ERR(dentry);
+	if (IS_ERR(dentry))

CHECK:BRACES: braces {} should be used on all arms of this statement
#631: FILE: fs/ramfs/syaoran_debug.c:169:
+	if (!inode)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#633: FILE: fs/ramfs/syaoran_debug.c:171:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#649: FILE: fs/ramfs/syaoran_init.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#650: FILE: fs/ramfs/syaoran_init.c:2:
+ * fs/ramfs/syaoran_init.c

WARNING:LINE_SPACING: Missing a blank line after declarations
#670: FILE: fs/ramfs/syaoran_init.c:22:
+	const int len = name ? strlen(name) : 0;
+	mutex_lock(&base->d_inode->i_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: fs/ramfs/syaoran_init.c:41:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: fs/ramfs/syaoran_init.c:60:
+	int error;
+	switch (mode & S_IFMT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: fs/ramfs/syaoran_init.c:91:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: fs/ramfs/syaoran_init.c:116:
+	bool first = 1;
+	while (*sp && (*sp <= ' ' || *sp >= 127))

WARNING:LINE_SPACING: Missing a blank line after declarations
#783: FILE: fs/ramfs/syaoran_init.c:135:
+	char c, d, e;
+	if (!cp)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#790: FILE: fs/ramfs/syaoran_init.c:142:
+		if ((c = *filename++) == '\\') {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#802: FILE: fs/ramfs/syaoran_init.c:154:
+		*(unsigned char *) cp++ = (unsigned char)

CHECK:SPACING: No space is necessary after a cast
#803: FILE: fs/ramfs/syaoran_init.c:155:
+			(((unsigned char) (c - '0') << 6) +

CHECK:SPACING: No space is necessary after a cast
#804: FILE: fs/ramfs/syaoran_init.c:156:
+			 ((unsigned char) (d - '0') << 3) +

CHECK:SPACING: No space is necessary after a cast
#805: FILE: fs/ramfs/syaoran_init.c:157:
+			 (unsigned char) (e - '0'));

CHECK:SPACING: No space is necessary after a cast
#833: FILE: fs/ramfs/syaoran_init.c:185:
+	struct syaoran_sb_info *info = (struct syaoran_sb_info *) sb->s_fs_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#835: FILE: fs/ramfs/syaoran_init.c:187:
+	struct dev_entry *entry;
+	memset(args, 0, sizeof(args));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#844: FILE: fs/ramfs/syaoran_init.c:196:
+	/*
+	  printk("<%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>\n",

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#852: FILE: fs/ramfs/syaoran_init.c:204:
+	if (sscanf(args[ARG_PERMISSION], "%o", &perm) != 1 || !(perm <= 0777)
+	    || sscanf(args[ARG_UID], "%u", &uid) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#853: FILE: fs/ramfs/syaoran_init.c:205:
+	    || sscanf(args[ARG_UID], "%u", &uid) != 1
+	    || sscanf(args[ARG_GID], "%u", &gid) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#854: FILE: fs/ramfs/syaoran_init.c:206:
+	    || sscanf(args[ARG_GID], "%u", &gid) != 1
+	    || sscanf(args[ARG_FLAGS], "%u", &flags) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#855: FILE: fs/ramfs/syaoran_init.c:207:
+	    || sscanf(args[ARG_FLAGS], "%u", &flags) != 1
+	    || *(args[ARG_DEV_TYPE] + 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#861: FILE: fs/ramfs/syaoran_init.c:213:
+		if (!args[ARG_DEV_MAJOR]
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#862: FILE: fs/ramfs/syaoran_init.c:214:
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1
+		    || !args[ARG_DEV_MINOR]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#863: FILE: fs/ramfs/syaoran_init.c:215:
+		    || !args[ARG_DEV_MINOR]
+		    || sscanf(args[ARG_DEV_MINOR], "%u", &minor) != 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#869: FILE: fs/ramfs/syaoran_init.c:221:
+		if (!args[ARG_DEV_MAJOR]
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#870: FILE: fs/ramfs/syaoran_init.c:222:
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1
+		    || !args[ARG_DEV_MINOR]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#871: FILE: fs/ramfs/syaoran_init.c:223:
+		    || !args[ARG_DEV_MINOR]
+		    || sscanf(args[ARG_DEV_MINOR], "%u", &minor) != 1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#945: FILE: fs/ramfs/syaoran_init.c:297:
+	int error = -ENOMEM;
+	if (!file)

WARNING:LINE_SPACING: Missing a blank line after declarations
#952: FILE: fs/ramfs/syaoran_init.c:304:
+		unsigned long offset = 0;
+		while ((len = kernel_read(file, offset, buffer, PAGE_SIZE)) > 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#953: FILE: fs/ramfs/syaoran_init.c:305:
+		while ((len = kernel_read(file, offset, buffer, PAGE_SIZE)) > 0
+		       && (cp = memchr(buffer, '\n', len)) != NULL) {

CHECK:SPACING: No space is necessary after a cast
#977: FILE: fs/ramfs/syaoran_init.c:329:
+	while ((c = *(unsigned char *) filename) != '\0') {

CHECK:SPACING: No space is necessary after a cast
#1002: FILE: fs/ramfs/syaoran_init.c:354:
+	filename = (char *) name;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1003: FILE: fs/ramfs/syaoran_init.c:355:
+	if (S_ISLNK(perm)) {
[...]
+	} else if (S_ISDIR(perm)) {
[...]
+	} else if (S_ISSOCK(perm) || S_ISFIFO(perm) || S_ISREG(perm)) {
[...]
+	} else if (S_ISCHR(perm) || S_ISBLK(perm)) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1020: FILE: fs/ramfs/syaoran_init.c:372:
+	struct dev_entry *entry;
+	if (!sb)

CHECK:SPACING: No space is necessary after a cast
#1022: FILE: fs/ramfs/syaoran_init.c:374:
+	info = (struct syaoran_sb_info *) sb->s_fs_info;

CHECK:SPACING: No space is necessary after a cast
#1041: FILE: fs/ramfs/syaoran_init.c:393:
+	char *filename = (char *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1045: FILE: fs/ramfs/syaoran_init.c:397:
+	static bool first = 1;
+	if (first) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1047: FILE: fs/ramfs/syaoran_init.c:399:
+		printk(KERN_INFO "SYAORAN: 1.5.3-pre   2008/01/06\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1050: FILE: fs/ramfs/syaoran_init.c:402:
+		printk(KERN_INFO "SYAORAN: Missing config-file path.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1059: FILE: fs/ramfs/syaoran_init.c:411:
+		printk(KERN_INFO "SYAORAN: Missing 'accept=' or 'enforce='.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1064: FILE: fs/ramfs/syaoran_init.c:416:
+		printk(KERN_INFO "SYAORAN: Can't open '%s'\n", filename);

CHECK:SPACING: No space is necessary after a cast
#1074: FILE: fs/ramfs/syaoran_init.c:426:
+	INIT_LIST_HEAD(&((struct syaoran_sb_info *) sb->s_fs_info)->list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1075: FILE: fs/ramfs/syaoran_init.c:427:
+	printk(KERN_INFO "SYAORAN: Reading '%s'\n", filename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1079: FILE: fs/ramfs/syaoran_init.c:431:
+		printk(KERN_INFO "SYAORAN: Can't read '%s'\n", filename);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1105: FILE: fs/ramfs/syaoran_init.c:457:
+		iput(inode);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1125: FILE: fs/ramfs/syaoran_init.c:477:
+	struct dev_entry *tmp;
+	if (!sb)

CHECK:SPACING: No space is necessary after a cast
#1127: FILE: fs/ramfs/syaoran_init.c:479:
+	info = (struct syaoran_sb_info *) sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1141: FILE: fs/ramfs/syaoran_init.c:493:
+	printk(KERN_DEBUG "%s: Unused memory freed.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1141: FILE: fs/ramfs/syaoran_init.c:493:
+	printk(KERN_DEBUG "%s: Unused memory freed.\n", __FUNCTION__);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1150: FILE: fs/ramfs/syaoran_init.c:502:
+static struct file_operations wrapped_def_blk_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1151: FILE: fs/ramfs/syaoran_init.c:503:
+static struct file_operations wrapped_def_chr_fops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1152: FILE: fs/ramfs/syaoran_init.c:504:
+static struct inode_operations syaoran_file_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1153: FILE: fs/ramfs/syaoran_init.c:505:
+static struct inode_operations syaoran_symlink_inode_operations;

WARNING:TYPO_SPELLING: 'derectory' may be misspelled - perhaps 'directory'?
#1166: FILE: fs/ramfs/syaoran_init.c:518:
+	 * The setattr() hook of derectory is already set by
 	                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1175: FILE: fs/ramfs/syaoran_init.c:527:
+static int wrapped_blkdev_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1177: FILE: fs/ramfs/syaoran_init.c:529:
+	int error = def_blk_fops.open(inode, filp);
 	                                     ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1178: FILE: fs/ramfs/syaoran_init.c:530:
+	int error = def_blk_fops.open(inode, filp);
+	if (error != -ENXIO)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1183: FILE: fs/ramfs/syaoran_init.c:535:
+static int wrapped_chrdev_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1185: FILE: fs/ramfs/syaoran_init.c:537:
+	int error = def_chr_fops.open(inode, filp);
 	                                     ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1186: FILE: fs/ramfs/syaoran_init.c:538:
+	int error = def_chr_fops.open(inode, filp);
+	if (error != -ENXIO)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1220: FILE: fs/ramfs/syaoran_main.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1221: FILE: fs/ramfs/syaoran_main.c:2:
+ * fs/ramfs/syaoran_main.c

WARNING:LINE_SPACING: Missing a blank line after declarations
#1245: FILE: fs/ramfs/syaoran_main.c:26:
+		struct dentry *parent;
+		if (IS_ROOT(dentry))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1279: FILE: fs/ramfs/syaoran_main.c:60:
+	struct dentry *d_dentry;
+	if (!dentry || !newname || newname_len <= 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1304: FILE: fs/ramfs/syaoran_main.c:85:
+	static DEFINE_SPINLOCK(lock);
+	spin_lock(&lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1330: FILE: fs/ramfs/syaoran_main.c:111:
+		const mode_t perm = mode & 0777;
+		flags &= ~DEVICE_USED;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1334: FILE: fs/ramfs/syaoran_main.c:115:
+			const char *cp = strchr(filename, '\0') - 1;
+			while (cp > filename) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1336: FILE: fs/ramfs/syaoran_main.c:117:
+				const unsigned char c = *cp--;
+				if (c == '\\') {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1352: FILE: fs/ramfs/syaoran_main.c:133:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1358: FILE: fs/ramfs/syaoran_main.c:139:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1364: FILE: fs/ramfs/syaoran_main.c:145:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1369: FILE: fs/ramfs/syaoran_main.c:150:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1374: FILE: fs/ramfs/syaoran_main.c:155:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1379: FILE: fs/ramfs/syaoran_main.c:160:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1384: FILE: fs/ramfs/syaoran_main.c:165:
+			printk(KERN_DEBUG

CHECK:SPACING: No space is necessary after a cast
#1398: FILE: fs/ramfs/syaoran_main.c:179:
+		(struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1400: FILE: fs/ramfs/syaoran_main.c:181:
+		printk(KERN_DEBUG "%s: dentry->d_sb->s_fs_info == NULL\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1401: FILE: fs/ramfs/syaoran_main.c:182:
+		       __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#1413: FILE: fs/ramfs/syaoran_main.c:194:
+		(struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1415: FILE: fs/ramfs/syaoran_main.c:196:
+		printk(KERN_DEBUG "%s: dentry->d_sb->s_fs_info == NULL\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1416: FILE: fs/ramfs/syaoran_main.c:197:
+		       __FUNCTION__);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340374.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 73 warnings, 38 checks, 1288 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340374.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
