WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Introduces the kobjects associated to each tunable and the sysfs registration

CHECK:LINE_SPACING: Please don't use multiple blank lines
#57: FILE: include/linux/akt.h:58:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'susbsystem' may be misspelled - perhaps 'subsystem'?
#69: FILE: include/linux/akt.h:76:
+ *   . directly from inside the kernel susbsystem that uses it (during tunable
                                        ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/akt.h:214:
+extern void init_auto_tuning(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/akt.h:217:
+extern int tunable_sysfs_setup(struct auto_tune *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#100: FILE: include/linux/akt.h:217:
+extern int tunable_sysfs_setup(struct auto_tune *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/akt.h:218:
+extern ssize_t show_tuning_mode(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#101: FILE: include/linux/akt.h:218:
+extern ssize_t show_tuning_mode(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#101: FILE: include/linux/akt.h:218:
+extern ssize_t show_tuning_mode(struct auto_tune *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/akt.h:219:
+extern ssize_t store_tuning_mode(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#102: FILE: include/linux/akt.h:219:
+extern ssize_t store_tuning_mode(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#102: FILE: include/linux/akt.h:219:
+extern ssize_t store_tuning_mode(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#102: FILE: include/linux/akt.h:219:
+extern ssize_t store_tuning_mode(struct auto_tune *, const char *, size_t);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#176: FILE: kernel/autotune/akt.c:90:
+	if (!(rc = tunable_sysfs_setup(tun)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: kernel/autotune/akt.c:131:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#206: FILE: kernel/autotune/akt.c:149:
+	if (tun_addr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#207: FILE: kernel/autotune/akt.c:150:
+		printk(KERN_ERR "AKT: tunable address is invalid\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: kernel/autotune/akt.c:163:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: kernel/autotune/akt.c:179:
+ssize_t store_tuning_mode(struct auto_tune *tun_addr, const char *buffer,
+			size_t count)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#240: FILE: kernel/autotune/akt.c:183:
+	if (sscanf(buffer, "%d", &new_value) != 1)
+		return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#246: FILE: kernel/autotune/akt.c:189:
+	if (tun_addr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#247: FILE: kernel/autotune/akt.c:190:
+		printk(KERN_ERR "AKT: NULL pointer  passed in\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: kernel/autotune/akt_sysfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#272: FILE: kernel/autotune/akt_sysfs.c:2:
+ * linux/kernel/autotune/akt_sysfs.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#292: FILE: kernel/autotune/akt_sysfs.c:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#293: FILE: kernel/autotune/akt_sysfs.c:23:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: kernel/autotune/akt_sysfs.c:35:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#311: FILE: kernel/autotune/akt_sysfs.c:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#313: FILE: kernel/autotune/akt_sysfs.c:43:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#316: FILE: kernel/autotune/akt_sysfs.c:46:
+	ssize_t (*show)(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#316: FILE: kernel/autotune/akt_sysfs.c:46:
+	ssize_t (*show)(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#317: FILE: kernel/autotune/akt_sysfs.c:47:
+	ssize_t (*store)(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#317: FILE: kernel/autotune/akt_sysfs.c:47:
+	ssize_t (*store)(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#317: FILE: kernel/autotune/akt_sysfs.c:47:
+	ssize_t (*store)(struct auto_tune *, const char *, size_t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: kernel/autotune/akt_sysfs.c:53:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#324: FILE: kernel/autotune/akt_sysfs.c:54:
+static TUNABLE_ATTR(autotune, S_IWUSR | S_IRUGO, show_tuning_mode,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#332: FILE: kernel/autotune/akt_sysfs.c:62:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: kernel/autotune/akt_sysfs.c:69:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#342: FILE: kernel/autotune/akt_sysfs.c:72:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: kernel/autotune/akt_sysfs.c:86:
+static ssize_t tunable_attr_show(struct kobject *kobj,
+				struct attribute *attr,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#369: FILE: kernel/autotune/akt_sysfs.c:99:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: kernel/autotune/akt_sysfs.c:114:
+static ssize_t tunable_attr_store(struct kobject *kobj,
+				struct attribute *attr,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#398: FILE: kernel/autotune/akt_sysfs.c:128:
+
+

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#399: FILE: kernel/autotune/akt_sysfs.c:129:
+static struct sysfs_ops tunables_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#404: FILE: kernel/autotune/akt_sysfs.c:134:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: kernel/autotune/akt_sysfs.c:139:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#412: FILE: kernel/autotune/akt_sysfs.c:142:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#425: FILE: kernel/autotune/akt_sysfs.c:155:
+#define tunable_kobj(t) t->tun_kobj.kobj

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#432: FILE: kernel/autotune/akt_sysfs.c:162:
+	if ((err = kobject_set_name(&(tunable_kobj(tunable)), "%s",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: kernel/autotune/akt_sysfs.c:163:
+	if ((err = kobject_set_name(&(tunable_kobj(tunable)), "%s",
+							tunable->name)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tunable->tun_kobj
#436: FILE: kernel/autotune/akt_sysfs.c:166:
+	kobj_set_kset_s(&(tunable->tun_kobj), tunables_subsys);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#439: FILE: kernel/autotune/akt_sysfs.c:169:
+	if ((err = kobject_register(&(tunable_kobj(tunable)))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#442: FILE: kernel/autotune/akt_sysfs.c:172:
+	if ((err = add_tunable_attrs(tunable)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#448: FILE: kernel/autotune/akt_sysfs.c:178:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: kernel/autotune/akt_sysfs.c:197:
+		error = sysfs_create_file(&(tunable_kobj(tunable)),
+			&(attr->attr));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around attr->attr
#467: FILE: kernel/autotune/akt_sysfs.c:197:
+			&(attr->attr));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#473: FILE: kernel/autotune/akt_sysfs.c:203:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#482: FILE: kernel/autotune/akt_sysfs.c:212:
+		printk(KERN_ERR

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473234.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 21 warnings, 31 checks, 409 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473234.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
