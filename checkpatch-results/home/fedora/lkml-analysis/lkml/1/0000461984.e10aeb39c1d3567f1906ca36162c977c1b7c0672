WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#69: FILE: include/linux/init_task.h:76:
+#define INIT_RCFS(nsproxy) ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: include/linux/init_task.h:77:
+^I.list ^I^I= LIST_HEAD_INIT(nsproxy.list),^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#71: FILE: include/linux/init_task.h:78:
+^I.ctlr_data ^I= {[ 0 ... CONFIG_MAX_RC_SUBSYS-1 ] = NULL },$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#71: FILE: include/linux/init_task.h:78:
+	.ctlr_data 	= {[ 0 ... CONFIG_MAX_RC_SUBSYS-1 ] = NULL },
 	           	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open square bracket '['
#71: FILE: include/linux/init_task.h:78:
+	.ctlr_data 	= {[ 0 ... CONFIG_MAX_RC_SUBSYS-1 ] = NULL },

ERROR:SPACING: space prohibited before that close square bracket ']'
#71: FILE: include/linux/init_task.h:78:
+	.ctlr_data 	= {[ 0 ... CONFIG_MAX_RC_SUBSYS-1 ] = NULL },

CHECK:LINE_SPACING: Please don't use multiple blank lines
#76: FILE: include/linux/init_task.h:83:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#110: FILE: include/linux/nsproxy.h:46:
+static inline int namespaces_init(void) { return 0;}
                                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: include/linux/rcfs.h:1:
+#ifndef _LINUX_RCFS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#141: FILE: include/linux/rcfs.h:23:
+	 * subsystem, followed by a period */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: Unnecessary space before function pointer arguments
#144: FILE: include/linux/rcfs.h:26:
+	int (*open) (struct inode *inode, struct file *file);

WARNING:SPACING: Unnecessary space before function pointer arguments
#145: FILE: include/linux/rcfs.h:27:
+	ssize_t (*read) (struct nsproxy *ns, struct cftype *cft,

WARNING:SPACING: Unnecessary space before function pointer arguments
#148: FILE: include/linux/rcfs.h:30:
+	ssize_t (*write) (struct nsproxy *ns, struct cftype *cft,

WARNING:SPACING: Unnecessary space before function pointer arguments
#151: FILE: include/linux/rcfs.h:33:
+	int (*release) (struct inode *inode, struct file *file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: include/linux/rcfs.h:40:
+	int (*create)(struct rc_subsys *ss, struct nsproxy *ns,
+			 struct nsproxy *parent);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/linux/rcfs.h:43:
+	int (*can_attach)(struct rc_subsys *ss, struct nsproxy *ns,
+				 struct task_struct *tsk);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: include/linux/rcfs.h:45:
+	void (*attach)(struct rc_subsys *ss, void *new, void *old,
+				 struct task_struct *tsk);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: include/linux/rcfs.h:61:
+ * called by subsystems from within a populate() method */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/rcfs.h:63:
+extern int rcfs_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: include/linux/rcfs.h:71:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#309: FILE: kernel/nsproxy.c:175:
+		for (i= 0; i < CONFIG_MAX_RC_SUBSYS; ++i)
 		      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#338: FILE: kernel/rcfs.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#339: FILE: kernel/rcfs.c:2:
+ *  kernel/rcfs.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#397: FILE: kernel/rcfs.c:60:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#398: FILE: kernel/rcfs.c:61:
+#include <asm/atomic.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#405: FILE: kernel/rcfs.c:68:
+ * hierarchy */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#422: FILE: kernel/rcfs.c:85:
+static int subsys_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#425: FILE: kernel/rcfs.c:88:
+ * an active hierarchy */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'root' may be better as '(root)' to avoid precedence issues
#426: FILE: kernel/rcfs.c:89:
+#define for_each_subsys(root, _ss) \
+list_for_each_entry(_ss, &root->subsys_list, sibling)

WARNING:TYPO_SPELLING: 'erro' may be misspelled - perhaps 'error'?
#469: FILE: kernel/rcfs.c:132:
+	 * but involves complex erro r handling, so it's being left until
 	                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#470: FILE: kernel/rcfs.c:133:
+	 * later */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#472: FILE: kernel/rcfs.c:135:
+	/*
+	if (!dir_empty(root->sb->s_root))

WARNING:LINE_SPACING: Missing a blank line after declarations
#482: FILE: kernel/rcfs.c:145:
+		unsigned long bit = 1UL << i;
+		if (bit & added_bits) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#503: FILE: kernel/rcfs.c:166:
+static void rcfs_put_super(struct super_block *sb) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#504: FILE: kernel/rcfs.c:167:
+static void rcfs_put_super(struct super_block *sb) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#510: FILE: kernel/rcfs.c:173:
+	BUG_ON(!root->subsys_bits);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: kernel/rcfs.c:209:
+			int i;
+			for (i = 0; i < subsys_count; i++) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#579: FILE: kernel/rcfs.c:242:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#593: FILE: kernel/rcfs.c:256:
+static struct inode_operations rcfs_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: kernel/rcfs.c:258:
+static int rcfs_create_dir(struct nsproxy *ns, struct dentry *dentry,
+				int mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: kernel/rcfs.c:263:
+static int rcfs_fill_super(struct super_block *sb, void *options,
+				int unused_silent)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO | S_IWUSR' are not preferred. Consider using octal permissions '0755'.
#611: FILE: kernel/rcfs.c:274:
+	inode = rcfs_new_inode(S_IFDIR | S_IRUGO | S_IXUGO | S_IWUSR, sb);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#623: FILE: kernel/rcfs.c:286:
+		iput(inode);
 		^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#638: FILE: kernel/rcfs.c:301:
+ * that referenced it. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#725: FILE: kernel/rcfs.c:388:
+
+

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#759: FILE: kernel/rcfs.c:422:
+	pidarray = kmalloc(npids * sizeof(pid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: kernel/rcfs.c:449:
+static ssize_t rcfs_tasks_read(struct nsproxy *ns,
+				    struct cftype *cft,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#811: FILE: kernel/rcfs.c:474:
+}
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#827: FILE: kernel/rcfs.c:490:
+	printk ("attaching task %d to %p \n", tsk->pid, ns);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#827: FILE: kernel/rcfs.c:490:
+	printk ("attaching task %d to %p \n", tsk->pid, ns);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#827: FILE: kernel/rcfs.c:490:
+	printk ("attaching task %d to %p \n", tsk->pid, ns);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#844: FILE: kernel/rcfs.c:507:
+	 * based on its final set of containers */

ERROR:CODE_INDENT: code indent should use tabs where possible
#845: FILE: kernel/rcfs.c:508:
+ ^Iget_task_namespaces(tsk);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#845: FILE: kernel/rcfs.c:508:
+ ^Iget_task_namespaces(tsk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: kernel/rcfs.c:508:
+ ^Iget_task_namespaces(tsk);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#851: FILE: kernel/rcfs.c:514:
+	printk ("find_nsproxy returned %p \n", newns);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#851: FILE: kernel/rcfs.c:514:
+	printk ("find_nsproxy returned %p \n", newns);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#851: FILE: kernel/rcfs.c:514:
+	printk ("find_nsproxy returned %p \n", newns);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#872: FILE: kernel/rcfs.c:535:
+
+

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#885: FILE: kernel/rcfs.c:548:
+	if (sscanf(pidbuf, "%d", &pid) != 1)
+		return -EIO;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid'
#900: FILE: kernel/rcfs.c:563:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->uid'
#900: FILE: kernel/rcfs.c:563:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->suid'
#900: FILE: kernel/rcfs.c:563:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#901: FILE: kernel/rcfs.c:564:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#917: FILE: kernel/rcfs.c:580:
+typedef enum {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: kernel/rcfs.c:587:
+static ssize_t rcfs_common_file_write(struct nsproxy *ns, struct cftype *cft,
+					   struct file *file,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#936: FILE: kernel/rcfs.c:599:
+	if ((buffer = kmalloc(nbytes + 1, GFP_KERNEL)) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: kernel/rcfs.c:644:
+static ssize_t rcfs_file_write(struct file *file, const char __user *buf,
+						size_t nbytes, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#985: FILE: kernel/rcfs.c:648:
+	struct nsproxy *ns = __d_ns(file->f_dentry->d_parent);
+	if (!cft)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: kernel/rcfs.c:657:
+static ssize_t rcfs_file_read(struct file *file, char __user *buf,
+				   size_t nbytes, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#998: FILE: kernel/rcfs.c:661:
+	struct nsproxy *ns = __d_ns(file->f_dentry->d_parent);
+	if (!cft)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1029: FILE: kernel/rcfs.c:692:
+	struct cftype *cft = __d_cft(file->f_dentry);
+	if (cft->release)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1044: FILE: kernel/rcfs.c:707:
+static long rcfs_create(struct nsproxy *parent, struct dentry *dentry,
+			     int mode)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1056: FILE: kernel/rcfs.c:719:
+	printk ("rcfs_create: ns = %p \n", ns);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1056: FILE: kernel/rcfs.c:719:
+	printk ("rcfs_create: ns = %p \n", ns);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_create', this function's name, in a string
#1056: FILE: kernel/rcfs.c:719:
+	printk ("rcfs_create: ns = %p \n", ns);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1056: FILE: kernel/rcfs.c:719:
+	printk ("rcfs_create: ns = %p \n", ns);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1062: FILE: kernel/rcfs.c:725:
+	 * fs */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1070: FILE: kernel/rcfs.c:733:
+			printk ("%s create failed \n", ss->name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1070: FILE: kernel/rcfs.c:733:
+			printk ("%s create failed \n", ss->name);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1070: FILE: kernel/rcfs.c:733:
+			printk ("%s create failed \n", ss->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1080: FILE: kernel/rcfs.c:743:
+	BUG_ON(!mutex_is_locked(&dentry->d_inode->i_mutex));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1108: FILE: kernel/rcfs.c:771:
+	printk ("rcfs_mkdir : parent_nsproxy = %p (%p) \n", ns_parent, dentry->d_fsdata);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1108: FILE: kernel/rcfs.c:771:
+	printk ("rcfs_mkdir : parent_nsproxy = %p (%p) \n", ns_parent, dentry->d_fsdata);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_mkdir', this function's name, in a string
#1108: FILE: kernel/rcfs.c:771:
+	printk ("rcfs_mkdir : parent_nsproxy = %p (%p) \n", ns_parent, dentry->d_fsdata);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1108: FILE: kernel/rcfs.c:771:
+	printk ("rcfs_mkdir : parent_nsproxy = %p (%p) \n", ns_parent, dentry->d_fsdata);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1148: FILE: kernel/rcfs.c:811:
+	 * created the container */

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1153: FILE: kernel/rcfs.c:816:
+static struct file_operations rcfs_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1161: FILE: kernel/rcfs.c:824:
+static struct inode_operations rcfs_dir_inode_operations = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: kernel/rcfs.c:832:
+static int rcfs_create_file(struct dentry *dentry, int mode,
+				 struct super_block *sb)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1190: FILE: kernel/rcfs.c:853:
+		 * populate it without racing with another mkdir */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1212: FILE: kernel/rcfs.c:875:
+static int rcfs_create_dir(struct nsproxy *ns, struct dentry *dentry,
+				int mode)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1239: FILE: kernel/rcfs.c:902:
+	iput(inode);
 	^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1242: FILE: kernel/rcfs.c:905:
+static struct dentry_operations rcfs_dops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: kernel/rcfs.c:910:
+static struct dentry *rcfs_get_dentry(struct dentry *parent,
+					   const char *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1250: FILE: kernel/rcfs.c:913:
+	struct dentry *d = lookup_one_len(name, parent, strlen(name));
+	if (!IS_ERR(d))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1260: FILE: kernel/rcfs.c:923:
+	BUG_ON(!mutex_is_locked(&dir->d_inode->i_mutex));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1262: FILE: kernel/rcfs.c:925:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1267: FILE: kernel/rcfs.c:930:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1285: FILE: kernel/rcfs.c:948:
+	BUG_ON(!mutex_is_locked(&dentry->d_inode->i_mutex));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1290: FILE: kernel/rcfs.c:953:
+		struct dentry *d = list_entry(node, struct dentry, d_u.d_child);
+		list_del_init(node);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1293: FILE: kernel/rcfs.c:956:
+			 * directory with child containers */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1294: FILE: kernel/rcfs.c:957:
+			BUG_ON(d->d_inode->i_mode & S_IFDIR);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1329: FILE: kernel/rcfs.c:992:
+	if ((err = rcfs_add_file(d, &cft_tasks)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1333: FILE: kernel/rcfs.c:996:
+		if (ss->populate && (err = ss->populate(ss, d)) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1340: FILE: kernel/rcfs.c:1003:
+                         int flags, const char *unused_dev_name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1340: FILE: kernel/rcfs.c:1003:
+static int rcfs_get_sb(struct file_system_type *fs_type,
+                         int flags, const char *unused_dev_name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1340: FILE: kernel/rcfs.c:1003:
+                         int flags, const char *unused_dev_name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1341: FILE: kernel/rcfs.c:1004:
+                         void *data, struct vfsmount *mnt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1341: FILE: kernel/rcfs.c:1004:
+                         void *data, struct vfsmount *mnt)$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1360: FILE: kernel/rcfs.c:1023:
+		if (root->subsys_bits == subsys_bits) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1370: FILE: kernel/rcfs.c:1033:
+		 * know that all the subsystems are free */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1373: FILE: kernel/rcfs.c:1036:
+			if (!root->sb && !root->subsys_bits) break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1383: FILE: kernel/rcfs.c:1046:
+		BUG_ON(root->subsys_bits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1390: FILE: kernel/rcfs.c:1053:
+		BUG_ON(ret);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1394: FILE: kernel/rcfs.c:1057:
+		 * directory yet */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1421: FILE: kernel/rcfs.c:1084:
+	for (i=0; i < CONFIG_MAX_RC_HIERARCHIES; ++i)
 	      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1435: FILE: kernel/rcfs.c:1098:
+	BUG_ON(new_subsys->hierarchy);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1436: FILE: kernel/rcfs.c:1099:
+	BUG_ON(new_subsys->active);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1462: FILE: kernel/rcfs.c:1125:
+	ss_id = new_subsys->subsys_id = subsys_count;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1472: FILE: kernel/rcfs.c:1135:
+ ^Imutex_unlock(&manage_mutex);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1472: FILE: kernel/rcfs.c:1135:
+ ^Imutex_unlock(&manage_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1472: FILE: kernel/rcfs.c:1135:
+ ^Imutex_unlock(&manage_mutex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1473: FILE: kernel/rcfs.c:1136:
+ ^Ireturn retval;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1473: FILE: kernel/rcfs.c:1136:
+ ^Ireturn retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1473: FILE: kernel/rcfs.c:1136:
+ ^Ireturn retval;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461984.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 78 warnings, 31 checks, 1378 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461984.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
