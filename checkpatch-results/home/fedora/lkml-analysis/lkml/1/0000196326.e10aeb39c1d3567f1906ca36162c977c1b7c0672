WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Subject: [PATCH] [LIO-Target/ConfigFS]: Add Target Portal Group *_write_protect attributes and iSCSI LUN ACL write_protect bit

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#79: 
explictly defined ACLs, and demo mode (genreate_node_acls=1) with making dynamic ACLs into
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#80: 
explict ones with active iSCSI sessions.
^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: drivers/lio-core/iscsi_target_configfs.c:975:
+^I * which be will write protected (READ-ONLY) when $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#139: FILE: drivers/lio-core/iscsi_target_configfs.c:998:
 	printk("LIO_Target_ConfigFS: Created Initiator LUN ACL Symlink: %s TPG LUN: %s"
+		" Mapped LUN: %s Write Protect: %s\n", lacl->initiatorname,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#153: FILE: drivers/lio-core/iscsi_target_configfs.c:1065:
+#define LACL_ATTR(_name, _mode)					\
+static struct lio_target_lacl_attribute lacl_attrib_##_name =	\
+	__CONFIGFS_EATTR(_name, _mode,				\
+	lacl_show_attrib_##_name,				\
+	lacl_store_attrib_##_name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#159: FILE: drivers/lio-core/iscsi_target_configfs.c:1071:
+static ssize_t lacl_show_attrib_write_protect (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#159: FILE: drivers/lio-core/iscsi_target_configfs.c:1071:
+static ssize_t lacl_show_attrib_write_protect (

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: drivers/lio-core/iscsi_target_configfs.c:1085:
+^Ireturn(len);^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#173: FILE: drivers/lio-core/iscsi_target_configfs.c:1085:
+	return(len);	

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#176: FILE: drivers/lio-core/iscsi_target_configfs.c:1088:
+static ssize_t lacl_store_attrib_write_protect (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#176: FILE: drivers/lio-core/iscsi_target_configfs.c:1088:
+static ssize_t lacl_store_attrib_write_protect (

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#184: FILE: drivers/lio-core/iscsi_target_configfs.c:1096:
+	op = simple_strtoul(page, &endptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op != 1'
#185: FILE: drivers/lio-core/iscsi_target_configfs.c:1097:
+	if ((op != 1) && (op != 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op != 0'
#185: FILE: drivers/lio-core/iscsi_target_configfs.c:1097:
+	if ((op != 1) && (op != 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#186: FILE: drivers/lio-core/iscsi_target_configfs.c:1098:
+		printk(KERN_ERR "Illegal value for access: %u\n", op);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: drivers/lio-core/iscsi_target_configfs.c:1105:
+	printk("LIO_Target_ConfigFS: Changed Initiator ACL: %s Mapped LUN: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#194: FILE: drivers/lio-core/iscsi_target_configfs.c:1106:
+	printk("LIO_Target_ConfigFS: Changed Initiator ACL: %s Mapped LUN: %u"
+		" Write Protect bit to %s\n", lacl->initiatorname,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#197: FILE: drivers/lio-core/iscsi_target_configfs.c:1109:
+	return(count);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#200: FILE: drivers/lio-core/iscsi_target_configfs.c:1112:
+LACL_ATTR(write_protect, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#241: FILE: drivers/lio-core/iscsi_target_configfs.c:1718:
+TPG_ATTR(demo_mode_write_protect, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#246: FILE: drivers/lio-core/iscsi_target_configfs.c:1723:
+TPG_ATTR(prod_mode_write_protect, S_IRUGO | S_IWUSR);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000196326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 14 warnings, 4 checks, 190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000196326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
