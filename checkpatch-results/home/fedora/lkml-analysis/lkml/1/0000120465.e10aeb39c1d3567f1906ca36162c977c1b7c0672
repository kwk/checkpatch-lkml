WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
Gitweb:     http://git.kernel.org/tip/62eb93905b3b43cea407cfbc061cc7b40ae1c6e9

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'syms' - possible side-effects?
#99: FILE: Documentation/perf_counter/builtin-report.c:208:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr_syms' may be better as '(nr_syms)' to avoid precedence issues
#99: FILE: Documentation/perf_counter/builtin-report.c:208:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#99: FILE: Documentation/perf_counter/builtin-report.c:208:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#99: FILE: Documentation/perf_counter/builtin-report.c:208:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#99: FILE: Documentation/perf_counter/builtin-report.c:208:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Sym>
#104: FILE: Documentation/perf_counter/builtin-report.c:213:
+static inline uint8_t elf_sym__type(const GElf_Sym *sym)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Data>
#117: FILE: Documentation/perf_counter/builtin-report.c:226:
+					const Elf_Data *symstrs)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Scn>
#122: FILE: Documentation/perf_counter/builtin-report.c:231:
+static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,

CHECK:CAMELCASE: Avoid CamelCase: <Elf>
#122: FILE: Documentation/perf_counter/builtin-report.c:231:
+static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Ehdr>
#122: FILE: Documentation/perf_counter/builtin-report.c:231:
+static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Shdr>
#123: FILE: Documentation/perf_counter/builtin-report.c:232:
+				    GElf_Shdr *shp, const char *name,

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: Documentation/perf_counter/builtin-report.c:262:
+	Elf *elf = elf_begin(fd, ELF_C_READ_MMAP, NULL);
+	if (elf == NULL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!elf"
#155: FILE: Documentation/perf_counter/builtin-report.c:262:
+	if (elf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#162: FILE: Documentation/perf_counter/builtin-report.c:269:
+	GElf_Ehdr ehdr;
+	if (gelf_getehdr(elf, &ehdr) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gelf_getehdr"
#162: FILE: Documentation/perf_counter/builtin-report.c:269:
+	if (gelf_getehdr(elf, &ehdr) == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#169: FILE: Documentation/perf_counter/builtin-report.c:276:
+	Elf_Scn *sec = elf_section_by_name(elf, &ehdr, &shdr, ".symtab", NULL);
+	if (sec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec"
#169: FILE: Documentation/perf_counter/builtin-report.c:276:
+	if (sec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec"
#172: FILE: Documentation/perf_counter/builtin-report.c:279:
+	if (sec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gelf_getshdr"
#175: FILE: Documentation/perf_counter/builtin-report.c:282:
+	if (gelf_getshdr(sec, &shdr) == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#179: FILE: Documentation/perf_counter/builtin-report.c:286:
+	Elf_Data *syms = elf_getdata(sec, NULL);
+	if (syms == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!syms"
#179: FILE: Documentation/perf_counter/builtin-report.c:286:
+	if (syms == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec"
#183: FILE: Documentation/perf_counter/builtin-report.c:290:
+	if (sec == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: Documentation/perf_counter/builtin-report.c:294:
+	Elf_Data *symstrs = elf_getdata(sec, NULL);
+	if (symstrs == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symstrs"
#187: FILE: Documentation/perf_counter/builtin-report.c:294:
+	if (symstrs == NULL)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#190: FILE: Documentation/perf_counter/builtin-report.c:297:
+	const uint32_t nr_syms = shdr.sh_size / shdr.sh_entsize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#193: FILE: Documentation/perf_counter/builtin-report.c:300:
+	uint32_t index;

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: Documentation/perf_counter/builtin-report.c:301:
+	uint32_t index;
+	elf_symtab__for_each_symbol(syms, nr_syms, index, sym) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#199: FILE: Documentation/perf_counter/builtin-report.c:306:
+		if (f == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120465.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 22 checks, 150 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120465.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
