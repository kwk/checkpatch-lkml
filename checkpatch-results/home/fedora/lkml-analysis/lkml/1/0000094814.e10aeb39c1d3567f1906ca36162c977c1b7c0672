WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# cat /mnt/debugfs/ltt/ascii/trace/kernel

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
event:       irq_entry: cpu: 5 time:00000501376644750066 ip 18446744071564245255 handler (null) irq_id 239 kernel_mode 1

WARNING:TYPO_SPELLING: 'addesses' may be misspelled - perhaps 'addresses'?
#156: FILE: ltt/ltt-ascii.c:27:
+ * - Enhance pretty-printing to make sure all types used for addesses output in
                                                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: ltt/ltt-ascii.c:32:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#163: FILE: ltt/ltt-ascii.c:34:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#171: FILE: ltt/ltt-ascii.c:46:
+#if 0

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#174: FILE: ltt/ltt-ascii.c:49:
+#define DEBUGP(fmt , a...)
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <chID>
#201: FILE: ltt/ltt-ascii.c:70:
+	u16 chID;	/* channel ID, const */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#231: FILE: ltt/ltt-ascii.c:107:
+ * calculate payload offset */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <eID>
#232: FILE: ltt/ltt-ascii.c:108:
+static inline long calculate_payload_offset(long offset, u16 chID, u16 eID)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: ltt/ltt-ascii.c:130:
+	tmp_offset = ltt_read_event_header(citer->buf, hdr_offset,
 			&read_tsc, &citer->data_size, &citer->eID, &rflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: ltt/ltt-ascii.c:132:
+	citer->payload_offset = calculate_payload_offset(tmp_offset,
+			citer->chID, citer->eID);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!citer->sb_ref'
#295: FILE: ltt/ltt-ascii.c:155:
+	if (unlikely((!citer->sb_ref)
+		     || is_subbuffer_offset_end(citer, hdr_offset))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#296: FILE: ltt/ltt-ascii.c:156:
+	if (unlikely((!citer->sb_ref)
+		     || is_subbuffer_offset_end(citer, hdr_offset))) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#336: FILE: ltt/ltt-ascii.c:185:
+		return 0;
+	} else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#363: FILE: ltt/ltt-ascii.c:206:
+	ret = iter->ltt_channel->buf_access_ops->put_subbuf(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: ltt/ltt-ascii.c:223:
+		DEBUGP(KERN_DEBUG "LTT ASCII stop cpu %d offset %lX\n",
+			citer->buf->cpu, citer->read_sb_offset);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#397: FILE: ltt/ltt-ascii.c:232:
+				break;	/* got data, or finalized */
+			} else {	/* -EAGAIN */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: ltt/ltt-ascii.c:295:
+	BUG_ON(v != iter);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: ltt/ltt-ascii.c:380:
+static int ltt_relay_iter_open_channel(struct ltt_relay_iter *iter,
 		struct ltt_channel_struct *ltt_channel)

WARNING:SPLIT_STRING: quoted string split across lines
#636: FILE: ltt/ltt-ascii.c:412:
+				"LTT ASCII open start "
+				"cpu %d ret %d offset %lX\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#640: FILE: ltt/ltt-ascii.c:416:
+				break;	/* got data, or finalized */
+			} else {	/* -EAGAIN */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: ltt/ltt-ascii.c:454:
+			subbuffer_stop(&iter->iter_cpu[i],
+			       citer->read_sb_offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#793: FILE: include/linux/ltt-relay.h:171:
+extern void *ltt_relay_read_offset_address(struct rchan_buf *buf,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: include/linux/ltt-relay.h:172:
+extern void *ltt_relay_read_offset_address(struct rchan_buf *buf,
+	size_t offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#910: FILE: ltt/ltt-relay-irqoff.c:1005:
+		printk(KERN_WARNING "LTT : Unable to create ascii output file "

WARNING:SPLIT_STRING: quoted string split across lines
#911: FILE: ltt/ltt-relay-irqoff.c:1006:
+		printk(KERN_WARNING "LTT : Unable to create ascii output file "
+				    "for trace %s\n", new_trace->trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#980: FILE: ltt/ltt-relay-lockless.c:1010:
+		printk(KERN_WARNING "LTT : Unable to create ascii output file "

WARNING:SPLIT_STRING: quoted string split across lines
#981: FILE: ltt/ltt-relay-lockless.c:1011:
+		printk(KERN_WARNING "LTT : Unable to create ascii output file "
+				    "for trace %s\n", new_trace->trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1050: FILE: ltt/ltt-relay-locked.c:949:
+		printk(KERN_WARNING "LTT : Unable to create ascii output file "

WARNING:SPLIT_STRING: quoted string split across lines
#1051: FILE: ltt/ltt-relay-locked.c:950:
+		printk(KERN_WARNING "LTT : Unable to create ascii output file "
+				    "for trace %s\n", new_trace->trace_name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1092: FILE: include/linux/ltt-tracer.h:658:
+extern int ltt_ascii_create_dir(struct ltt_trace_struct *new_trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1093: FILE: include/linux/ltt-tracer.h:659:
+extern void ltt_ascii_remove_dir(struct ltt_trace_struct *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1094: FILE: include/linux/ltt-tracer.h:660:
+extern struct dentry *ltt_ascii_create(struct ltt_trace_struct *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: include/linux/ltt-tracer.h:661:
+extern struct dentry *ltt_ascii_create(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *ltt_channel);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1096: FILE: include/linux/ltt-tracer.h:662:
+extern void ltt_ascii_remove(struct ltt_channel_struct *ltt_channel,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: include/linux/ltt-tracer.h:663:
+extern void ltt_ascii_remove(struct ltt_channel_struct *ltt_channel,
+		struct dentry *ascii);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: include/linux/ltt-tracer.h:675:
+static inline struct dentry *ltt_ascii_create(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *ltt_channel)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: include/linux/ltt-tracer.h:681:
+static inline void ltt_ascii_remove(struct ltt_channel_struct *ltt_channel,
+		struct dentry *ascii)

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#1132: FILE: Documentation/lttng.txt:5:
+This guide contains quickstart information on how to to use LTTng. It currently

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 17 warnings, 22 checks, 986 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
