WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
This patch adds complete running support for Asymmetric Logical Unit Assignement

WARNING:TYPO_SPELLING: 'Assignement' may be misspelled - perhaps 'Assignment'?
#42: 
This patch adds complete running support for Asymmetric Logical Unit Assignement
                                                                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#43: 
(ALUA) for explict operation (via client side SET_TARGET_PORT_GROUPS in-band method) and via
           ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#44: 
implict operation (via local configfs method).  It supports all primary and secondary ALUA access
^^^^^^^

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#51: 
The fabric port/LUN can also then be explictly moved between ALUA tg_pt_gps in real-time with
                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'defalt' may be misspelled - perhaps 'default'?
#55: 
become of member of 'default_lu_gp' in /sys/kernel/config/target/core/alua/lu_gps/.  This defalt
                                                                                          ^^^^^^

WARNING:TYPO_SPELLING: 'Implict' may be misspelled - perhaps 'Implicit'?
#63: 
(Implict/Explict, Implict, Explict or None) on a per target port group basis.  It also adds PREF=1
 ^^^^^^^

WARNING:TYPO_SPELLING: 'Implict' may be misspelled - perhaps 'Implicit'?
#63: 
(Implict/Explict, Implict, Explict or None) on a per target port group basis.  It also adds PREF=1
                  ^^^^^^^

WARNING:TYPO_SPELLING: 'Explict' may be misspelled - perhaps 'Explicit'?
#63: 
(Implict/Explict, Implict, Explict or None) on a per target port group basis.  It also adds PREF=1
                           ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#68: 
via both explict and implict ALUA methods.
         ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#68: 
via both explict and implict ALUA methods.
                     ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: drivers/target/target_core_alua.c:64:
+	list_for_each_entry(tg_pt_gp, &T10_ALUA(su_dev)->tg_pt_gps_list,
 			tg_pt_gp_list) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#141: FILE: drivers/target/target_core_alua.c:78:
+		buf[off] = 0x80; // T_SUP */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#171: FILE: drivers/target/target_core_alua.c:137:
+ * SET_TARGET_PORT_GROUPS for explict ALUA operation.
                               ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#192: FILE: drivers/target/target_core_alua.c:158:
+	 * Determine if explict ALUA via SET_TARGET_PORT_GROUPS is allowed
 	                ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#197: FILE: drivers/target/target_core_alua.c:163:
+		printk(KERN_ERR "Unable to access *l_tg_pt_gp_mem\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#204: FILE: drivers/target/target_core_alua.c:170:
+		printk(KERN_ERR "Unable to access *l_l_tg_pt_gp\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#211: FILE: drivers/target/target_core_alua.c:177:
+		printk(KERN_INFO "Unable to process SET_TARGET_PORT_GROUPS"

WARNING:SPLIT_STRING: quoted string split across lines
#212: FILE: drivers/target/target_core_alua.c:178:
+		printk(KERN_INFO "Unable to process SET_TARGET_PORT_GROUPS"
+				" while TPGS_EXPLICT_ALUA is disabled\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: drivers/target/target_core_alua.c:226:
+			list_for_each_entry(tg_pt_gp,
+					&T10_ALUA(su_dev)->tg_pt_gps_list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: drivers/target/target_core_alua.c:239:
+				ret = core_alua_do_port_transition(tg_pt_gp,
+						dev, l_port, nacl,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: drivers/target/target_core_alua.c:244:
+^I^I^I^Ismp_mb__after_atomic_dec();^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#292: FILE: drivers/target/target_core_alua.c:258:
+			 * Locate the matching relative target port identifer
 			                                            ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/target/target_core_alua.c:263:
+			list_for_each_entry(port, &dev->dev_sep_list,
+							sep_list) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#304: FILE: drivers/target/target_core_alua.c:270:
+				ret = core_alua_set_tg_pt_secondary_state(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#327: FILE: drivers/target/target_core_alua.c:293:
+static inline int core_alua_state_optimized(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#339: FILE: drivers/target/target_core_alua.c:305:
+static inline int core_alua_state_nonoptimized(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#355: FILE: drivers/target/target_core_alua.c:321:
+static inline int core_alua_state_standby(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#403: FILE: drivers/target/target_core_alua.c:369:
+static inline int core_alua_state_unavailable(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: drivers/target/target_core_alua.c:405:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#443: FILE: drivers/target/target_core_alua.c:409:
+static inline int core_alua_state_transition(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#478: FILE: drivers/target/target_core_alua.c:444:
+int core_alua_state_check_nop(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#489: FILE: drivers/target/target_core_alua.c:455:
+int core_alua_state_check(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: drivers/target/target_core_alua.c:472:
+^Iif (atomic_read(&port->sep_tg_pt_secondary_offline)) {^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#508: FILE: drivers/target/target_core_alua.c:474:
+		printk(KERN_INFO "ALUA: Got secondary offline status for local"

WARNING:SPLIT_STRING: quoted string split across lines
#509: FILE: drivers/target/target_core_alua.c:475:
+		printk(KERN_INFO "ALUA: Got secondary offline status for local"
+				" target port\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#514: FILE: drivers/target/target_core_alua.c:480:
+	 /*
+	 * Second, obtain the t10_alua_tg_pt_gp_member_t pointer to the

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#526: FILE: drivers/target/target_core_alua.c:492:
+	 * Process ALUA_ACCESS_STATE_ACTIVE_OPTMIZED in a seperate conditional
 	                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'complier' may be misspelled - perhaps 'compiler'?
#527: FILE: drivers/target/target_core_alua.c:493:
+	 * statement so the complier knows explictly to check this case first.
 	                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#527: FILE: drivers/target/target_core_alua.c:493:
+	 * statement so the complier knows explictly to check this case first.
 	                                   ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#548: FILE: drivers/target/target_core_alua.c:514:
+		printk(KERN_ERR "Unknown ALUA access state: 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: drivers/target/target_core_alua.c:515:
+		printk(KERN_ERR "Unknown ALUA access state: 0x%02x\n",
+				out_alua_state);

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#557: FILE: drivers/target/target_core_alua.c:523:
+ * Check implict and explict ALUA state change request.
          ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#557: FILE: drivers/target/target_core_alua.c:523:
+ * Check implict and explict ALUA state change request.
                      ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#580: FILE: drivers/target/target_core_alua.c:546:
+		printk(KERN_ERR "Unknown ALUA access state: 0x%02x\n", state);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: drivers/target/target_core_alua.c:557:
+^I^Ireturn "Active/Optimized";^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: drivers/target/target_core_alua.c:567:
+^I^Ireturn "Unknown";^I$

WARNING:TYPO_SPELLING: 'Explict' may be misspelled - perhaps 'Explicit'?
#613: FILE: drivers/target/target_core_alua.c:579:
+		return "Altered by Explict STPG";
 		                   ^^^^^^^

WARNING:TYPO_SPELLING: 'Implict' may be misspelled - perhaps 'Implicit'?
#615: FILE: drivers/target/target_core_alua.c:581:
+		return "Altered by Implict ALUA";
 		                   ^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#627: FILE: drivers/target/target_core_alua.c:593:
+int core_alua_check_nonop_delay(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#649: FILE: drivers/target/target_core_alua.c:615:
+int core_alua_do_transition_tg_pt(

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#654: FILE: drivers/target/target_core_alua.c:620:
+	int explict)
 	    ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#664: FILE: drivers/target/target_core_alua.c:630:
+	tg_pt_gp->tg_pt_gp_alua_access_status = (explict) ?
 	                                         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: drivers/target/target_core_alua.c:636:
+	list_for_each_entry(mem, &tg_pt_gp->tg_pt_gp_mem_list,
+				tg_pt_gp_mem_list) {

WARNING:TYPO_SPELLING: 'CHAGED' may be misspelled - perhaps 'CHANGED'?
#677: FILE: drivers/target/target_core_alua.c:643:
+		 * ACCESS STATE CHAGED.
 		                ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#678: FILE: drivers/target/target_core_alua.c:644:
+^I^I * $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: drivers/target/target_core_alua.c:658:
+		list_for_each_entry(se_deve, &port->sep_alua_list,
+					alua_port_list) {

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#694: FILE: drivers/target/target_core_alua.c:660:
+			if (explict &&
 			    ^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nacl != NULL'
#694: FILE: drivers/target/target_core_alua.c:660:
+			if (explict &&
+			   (nacl != NULL) && (nacl == lacl->se_lun_nacl) &&
+			   (l_port != NULL) && (l_port == port))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nacl == lacl->se_lun_nacl'
#694: FILE: drivers/target/target_core_alua.c:660:
+			if (explict &&
+			   (nacl != NULL) && (nacl == lacl->se_lun_nacl) &&
+			   (l_port != NULL) && (l_port == port))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l_port != NULL'
#694: FILE: drivers/target/target_core_alua.c:660:
+			if (explict &&
+			   (nacl != NULL) && (nacl == lacl->se_lun_nacl) &&
+			   (l_port != NULL) && (l_port == port))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l_port == port'
#694: FILE: drivers/target/target_core_alua.c:660:
+			if (explict &&
+			   (nacl != NULL) && (nacl == lacl->se_lun_nacl) &&
+			   (l_port != NULL) && (l_port == port))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: drivers/target/target_core_alua.c:661:
+			if (explict &&
+			   (nacl != NULL) && (nacl == lacl->se_lun_nacl) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nacl"
#695: FILE: drivers/target/target_core_alua.c:661:
+			   (nacl != NULL) && (nacl == lacl->se_lun_nacl) &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "l_port"
#696: FILE: drivers/target/target_core_alua.c:662:
+			   (l_port != NULL) && (l_port == port))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/target/target_core_alua.c:666:
+			core_scsi3_ua_allocate(lacl->se_lun_nacl,
+				se_deve->mapped_lun, 0x2A,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#711: FILE: drivers/target/target_core_alua.c:677:
+	printk(KERN_INFO "Successful %s ALUA transition TG PT Group: %s ID: %hu"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#711: FILE: drivers/target/target_core_alua.c:677:
+	printk(KERN_INFO "Successful %s ALUA transition TG PT Group: %s ID: %hu"
+		" from primary access state: %s to %s\n", (explict) ? "explict" :
+		"implict", config_item_name(&tg_pt_gp->tg_pt_gp_group.cg_item),
+		tg_pt_gp->tg_pt_gp_id, core_alua_dump_state(old_state),
+		core_alua_dump_state(new_state));

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#712: FILE: drivers/target/target_core_alua.c:678:
+		" from primary access state: %s to %s\n", (explict) ? "explict" :
 		                                           ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#712: FILE: drivers/target/target_core_alua.c:678:
+		" from primary access state: %s to %s\n", (explict) ? "explict" :
 		                                                       ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#712: FILE: drivers/target/target_core_alua.c:678:
+	printk(KERN_INFO "Successful %s ALUA transition TG PT Group: %s ID: %hu"
+		" from primary access state: %s to %s\n", (explict) ? "explict" :

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#713: FILE: drivers/target/target_core_alua.c:679:
+		"implict", config_item_name(&tg_pt_gp->tg_pt_gp_group.cg_item),
 		 ^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#720: FILE: drivers/target/target_core_alua.c:686:
+int core_alua_do_port_transition(

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#726: FILE: drivers/target/target_core_alua.c:692:
+	int explict)
 	    ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#757: FILE: drivers/target/target_core_alua.c:723:
+					new_state, explict);
 					           ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: drivers/target/target_core_alua.c:723:
+		core_alua_do_transition_tg_pt(l_tg_pt_gp, l_port, l_nacl,
+					new_state, explict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: drivers/target/target_core_alua.c:735:
+	list_for_each_entry(lu_gp_mem, &lu_gp->lu_gp_mem_list,
+				lu_gp_mem_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#770: FILE: drivers/target/target_core_alua.c:736:
+				lu_gp_mem_list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: drivers/target/target_core_alua.c:742:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: drivers/target/target_core_alua.c:745:
+		list_for_each_entry(tg_pt_gp,
+				&T10_ALUA(su_dev)->tg_pt_gps_list,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#781: FILE: drivers/target/target_core_alua.c:747:
+				tg_pt_gp_list) {
+

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#810: FILE: drivers/target/target_core_alua.c:776:
+					nacl, new_state, explict);
 					                 ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/target/target_core_alua.c:776:
+			core_alua_do_transition_tg_pt(tg_pt_gp, port,
+					nacl, new_state, explict);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#824: FILE: drivers/target/target_core_alua.c:790:
+	printk("Successfully processed LU Group: %s all ALUA TG PT Group IDs:"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#824: FILE: drivers/target/target_core_alua.c:790:
+	printk("Successfully processed LU Group: %s all ALUA TG PT Group IDs:"
+		" %hu %s transition to primary state: %s\n",
+		config_item_name(&lu_gp->lu_gp_group.cg_item),
+		l_tg_pt_gp->tg_pt_gp_id, (explict) ? "explict" : "implict",
+		core_alua_dump_state(new_state));

WARNING:SPLIT_STRING: quoted string split across lines
#825: FILE: drivers/target/target_core_alua.c:791:
+	printk("Successfully processed LU Group: %s all ALUA TG PT Group IDs:"
+		" %hu %s transition to primary state: %s\n",

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#827: FILE: drivers/target/target_core_alua.c:793:
+		l_tg_pt_gp->tg_pt_gp_id, (explict) ? "explict" : "implict",
 		                          ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#827: FILE: drivers/target/target_core_alua.c:793:
+		l_tg_pt_gp->tg_pt_gp_id, (explict) ? "explict" : "implict",
 		                                      ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#827: FILE: drivers/target/target_core_alua.c:793:
+		l_tg_pt_gp->tg_pt_gp_id, (explict) ? "explict" : "implict",
 		                                                  ^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#835: FILE: drivers/target/target_core_alua.c:801:
+int core_alua_set_tg_pt_secondary_state(

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#838: FILE: drivers/target/target_core_alua.c:804:
+	int explict,
 	    ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#847: FILE: drivers/target/target_core_alua.c:813:
+		printk(KERN_ERR "Unable to complete secondary state"

WARNING:SPLIT_STRING: quoted string split across lines
#848: FILE: drivers/target/target_core_alua.c:814:
+		printk(KERN_ERR "Unable to complete secondary state"
+				" transition\n");

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#860: FILE: drivers/target/target_core_alua.c:826:
+	port->sep_tg_pt_secondary_stat = (explict) ?
 	                                  ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#865: FILE: drivers/target/target_core_alua.c:831:
+	printk(KERN_INFO "Successful %s ALUA transition TG PT Group: %s ID: %hu"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#865: FILE: drivers/target/target_core_alua.c:831:
+	printk(KERN_INFO "Successful %s ALUA transition TG PT Group: %s ID: %hu"
+		" to secondary access state: %s\n", (explict) ? "explict" :
+		"implict", config_item_name(&tg_pt_gp->tg_pt_gp_group.cg_item),
+		tg_pt_gp->tg_pt_gp_id, (offline) ? "OFFLINE" : "ONLINE");

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#866: FILE: drivers/target/target_core_alua.c:832:
+		" to secondary access state: %s\n", (explict) ? "explict" :
 		                                     ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#866: FILE: drivers/target/target_core_alua.c:832:
+		" to secondary access state: %s\n", (explict) ? "explict" :
 		                                                 ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#866: FILE: drivers/target/target_core_alua.c:832:
+	printk(KERN_INFO "Successful %s ALUA transition TG PT Group: %s ID: %hu"
+		" to secondary access state: %s\n", (explict) ? "explict" :

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#867: FILE: drivers/target/target_core_alua.c:833:
+		"implict", config_item_name(&tg_pt_gp->tg_pt_gp_group.cg_item),
 		 ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#892: FILE: drivers/target/target_core_alua.c:870:
+		printk(KERN_ERR "ALUA LU Group already has a valid ID,"

WARNING:SPLIT_STRING: quoted string split across lines
#893: FILE: drivers/target/target_core_alua.c:871:
+		printk(KERN_ERR "ALUA LU Group already has a valid ID,"
+			" ignoring request\n");

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#912: FILE: drivers/target/target_core_alua.c:1003:
+		msleep(10);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#922: FILE: drivers/target/target_core_alua.c:1080:
+t10_alua_tg_pt_gp_t *core_alua_allocate_tg_pt_gp(

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#937: FILE: drivers/target/target_core_alua.c:1100:
+	 * Enable both explict and implict ALUA support by default
 	               ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#937: FILE: drivers/target/target_core_alua.c:1100:
+	 * Enable both explict and implict ALUA support by default
 	                           ^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#963: FILE: drivers/target/target_core_alua.c:1123:
+int core_alua_set_tg_pt_gp_id(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#974: FILE: drivers/target/target_core_alua.c:1134:
+		printk(KERN_ERR "ALUA TG PT Group already has a valid ID,"

WARNING:SPLIT_STRING: quoted string split across lines
#975: FILE: drivers/target/target_core_alua.c:1135:
+		printk(KERN_ERR "ALUA TG PT Group already has a valid ID,"
+			" ignoring request\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#984: FILE: drivers/target/target_core_alua.c:1141:
+		printk(KERN_ERR "Maximum ALUA alua_tg_pt_gps_count:"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: drivers/target/target_core_alua.c:1152:
+	list_for_each_entry(tg_pt_gp_tmp, &T10_ALUA(su_dev)->tg_pt_gps_list,
 			tg_pt_gp_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1017: FILE: drivers/target/target_core_alua.c:1167:
+	list_add_tail(&tg_pt_gp->tg_pt_gp_list,
+			&T10_ALUA(su_dev)->tg_pt_gps_list);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1037: FILE: drivers/target/target_core_alua.c:1196:
+void core_alua_free_tg_pt_gp(

CHECK:BRACES: braces {} should be used on all arms of this statement
#1072: FILE: drivers/target/target_core_alua.c:1244:
+		if (tg_pt_gp != T10_ALUA(su_dev)->default_tg_pt_gp) {
[...]
+					T10_ALUA(su_dev)->default_tg_pt_gp);
[...]

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1084: FILE: drivers/target/target_core_alua.c:1273:
+		msleep(10);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1094: FILE: drivers/target/target_core_alua.c:1292:
+t10_alua_tg_pt_gp_t *core_alua_get_tg_pt_gp_by_name(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: drivers/target/target_core_alua.c:1301:
+	list_for_each_entry(tg_pt_gp, &T10_ALUA(su_dev)->tg_pt_gps_list,
 			tg_pt_gp_list) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1123: FILE: drivers/target/target_core_alua.c:1316:
+void core_alua_put_tg_pt_gp_from_name(

WARNING:SPLIT_STRING: quoted string split across lines
#1142: FILE: drivers/target/target_core_alua.c:1378:
 		len += sprintf(page, "TG Port Alias: %s\nTG Port Group ID:"
+			" %hu\nTG Port Primary Access State: %s\nTG Port "

WARNING:SPLIT_STRING: quoted string split across lines
#1143: FILE: drivers/target/target_core_alua.c:1379:
+			" %hu\nTG Port Primary Access State: %s\nTG Port "
+			"Primary Access Status: %s\nTG Port Secondary Access"

WARNING:SPLIT_STRING: quoted string split across lines
#1144: FILE: drivers/target/target_core_alua.c:1380:
+			"Primary Access Status: %s\nTG Port Secondary Access"
+			" State: %s\nTG Port Secondary Access Status: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: drivers/target/target_core_alua.c:1435:
+		tg_pt_gp_new = core_alua_get_tg_pt_gp_by_name(su_dev,
+					strstrip(buf));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1181: FILE: drivers/target/target_core_alua.c:1455:
+			printk(KERN_INFO "Target_Core_ConfigFS: Moving"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1181: FILE: drivers/target/target_core_alua.c:1455:
+			printk(KERN_INFO "Target_Core_ConfigFS: Moving"
 				" %s/tpgt_%hu/%s from ALUA Target Port Group:"
+				" alua/%s, ID: %hu back to"
+				" alua/%s, ID: %hu back to"
+				" default_tg_pt_gp\n",
 				TPG_TFO(tpg)->tpg_get_wwn(tpg),
 				TPG_TFO(tpg)->tpg_get_tag(tpg),
 				config_item_name(&lun->lun_group.cg_item),

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1181: FILE: drivers/target/target_core_alua.c:1455:
+			printk(KERN_INFO "Target_Core_ConfigFS: Moving"
 				" %s/tpgt_%hu/%s from ALUA Target Port Group:"
+				" alua/%s, ID: %hu back to"
+				" alua/%s, ID: %hu back to"
+				" default_tg_pt_gp\n",
 				TPG_TFO(tpg)->tpg_get_wwn(tpg),
 				TPG_TFO(tpg)->tpg_get_tag(tpg),
 				config_item_name(&lun->lun_group.cg_item),

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1181: FILE: drivers/target/target_core_alua.c:1455:
+			printk(KERN_INFO "Target_Core_ConfigFS: Moving"
 				" %s/tpgt_%hu/%s from ALUA Target Port Group:"
+				" alua/%s, ID: %hu back to"
+				" alua/%s, ID: %hu back to"
+				" default_tg_pt_gp\n",
 				TPG_TFO(tpg)->tpg_get_wwn(tpg),
 				TPG_TFO(tpg)->tpg_get_tag(tpg),
 				config_item_name(&lun->lun_group.cg_item),

WARNING:SPLIT_STRING: quoted string split across lines
#1184: FILE: drivers/target/target_core_alua.c:1457:
 				" %s/tpgt_%hu/%s from ALUA Target Port Group:"
+				" alua/%s, ID: %hu back to"

WARNING:SPLIT_STRING: quoted string split across lines
#1185: FILE: drivers/target/target_core_alua.c:1458:
+				" alua/%s, ID: %hu back to"
+				" default_tg_pt_gp\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: drivers/target/target_core_alua.c:1468:
+			__core_alua_attach_tg_pt_gp_mem(tg_pt_gp_mem,
+					T10_ALUA(su_dev)->default_tg_pt_gp);

WARNING:SPLIT_STRING: quoted string split across lines
#1205: FILE: drivers/target/target_core_alua.c:1485:
 	printk("Target_Core_ConfigFS: %s %s/tpgt_%hu/%s to ALUA Target Port"
+		" Group: alua/%s, ID: %hu\n", (move) ?

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1213: FILE: drivers/target/target_core_alua.c:1497:
+ssize_t core_alua_show_access_type(

WARNING:TYPO_SPELLING: 'Implict' may be misspelled - perhaps 'Implicit'?
#1219: FILE: drivers/target/target_core_alua.c:1503:
+		return sprintf(page, "Implict and Explict\n");
 		                      ^^^^^^^

WARNING:TYPO_SPELLING: 'Explict' may be misspelled - perhaps 'Explicit'?
#1219: FILE: drivers/target/target_core_alua.c:1503:
+		return sprintf(page, "Implict and Explict\n");
 		                                  ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: drivers/target/target_core_alua.c:1504:
+^Ielse if (tg_pt_gp->tg_pt_gp_alua_access_type & TPGS_IMPLICT_ALUA)^I$

WARNING:TYPO_SPELLING: 'Implict' may be misspelled - perhaps 'Implicit'?
#1221: FILE: drivers/target/target_core_alua.c:1505:
+		return sprintf(page, "Implict\n");
 		                      ^^^^^^^

WARNING:TYPO_SPELLING: 'Explict' may be misspelled - perhaps 'Explicit'?
#1223: FILE: drivers/target/target_core_alua.c:1507:
+		return sprintf(page, "Explict\n");
 		                      ^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1228: FILE: drivers/target/target_core_alua.c:1512:
+ssize_t core_alua_store_access_type(

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1236: FILE: drivers/target/target_core_alua.c:1520:
+	ret = strict_strtoul(page, 0, &tmp);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1238: FILE: drivers/target/target_core_alua.c:1522:
+		printk(KERN_ERR "Unable to extract alua_access_type\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 0'
#1241: FILE: drivers/target/target_core_alua.c:1525:
+	if ((tmp != 0) && (tmp != 1) && (tmp != 2) && (tmp != 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 1'
#1241: FILE: drivers/target/target_core_alua.c:1525:
+	if ((tmp != 0) && (tmp != 1) && (tmp != 2) && (tmp != 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 2'
#1241: FILE: drivers/target/target_core_alua.c:1525:
+	if ((tmp != 0) && (tmp != 1) && (tmp != 2) && (tmp != 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 3'
#1241: FILE: drivers/target/target_core_alua.c:1525:
+	if ((tmp != 0) && (tmp != 1) && (tmp != 2) && (tmp != 3)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1242: FILE: drivers/target/target_core_alua.c:1526:
+		printk(KERN_ERR "Illegal value for alua_access_type:"

WARNING:SPLIT_STRING: quoted string split across lines
#1243: FILE: drivers/target/target_core_alua.c:1527:
+		printk(KERN_ERR "Illegal value for alua_access_type:"
+				" %lu\n", tmp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: drivers/target/target_core_alua.c:1533:
+^Ielse if (tmp == 2)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1255: FILE: drivers/target/target_core_alua.c:1539:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1259: FILE: drivers/target/target_core_alua.c:1543:
+ssize_t core_alua_show_nonop_delay_msecs(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1266: FILE: drivers/target/target_core_alua.c:1550:
+ssize_t core_alua_store_nonop_delay_msecs(

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1274: FILE: drivers/target/target_core_alua.c:1558:
+	ret = strict_strtoul(page, 0, &tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1276: FILE: drivers/target/target_core_alua.c:1560:
+		printk(KERN_ERR "Unable to extract nonop_delay_msecs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1280: FILE: drivers/target/target_core_alua.c:1564:
+		printk(KERN_ERR "Passed nonop_delay_msecs: %lu, exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#1281: FILE: drivers/target/target_core_alua.c:1565:
+		printk(KERN_ERR "Passed nonop_delay_msecs: %lu, exceeds"
+			" ALUA_MAX_NONOP_DELAY_MSECS: %d\n", tmp,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1290: FILE: drivers/target/target_core_alua.c:1574:
+ssize_t core_alua_show_preferred_bit(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1297: FILE: drivers/target/target_core_alua.c:1581:
+ssize_t core_alua_store_preferred_bit(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1303: FILE: drivers/target/target_core_alua.c:1587:
+^Iint ret;^I$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1305: FILE: drivers/target/target_core_alua.c:1589:
+	ret = strict_strtoul(page, 0, &tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1307: FILE: drivers/target/target_core_alua.c:1591:
+		printk(KERN_ERR "Unable to extract preferred ALUA value\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 0'
#1310: FILE: drivers/target/target_core_alua.c:1594:
+	if ((tmp != 0) && (tmp != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 1'
#1310: FILE: drivers/target/target_core_alua.c:1594:
+	if ((tmp != 0) && (tmp != 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1311: FILE: drivers/target/target_core_alua.c:1595:
+		printk(KERN_ERR "Illegal value for preferred ALUA: %lu\n", tmp);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1338: FILE: drivers/target/target_core_alua.c:1622:
+	ret = strict_strtoul(page, 0, &tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1340: FILE: drivers/target/target_core_alua.c:1624:
+		printk(KERN_ERR "Unable to extract alua_tg_pt_offline value\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 0'
#1343: FILE: drivers/target/target_core_alua.c:1627:
+	if ((tmp != 0) && (tmp != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 1'
#1343: FILE: drivers/target/target_core_alua.c:1627:
+	if ((tmp != 0) && (tmp != 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1344: FILE: drivers/target/target_core_alua.c:1628:
+		printk(KERN_ERR "Illegal value for alua_tg_pt_offline: %lu\n", tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1349: FILE: drivers/target/target_core_alua.c:1633:
+		printk(KERN_ERR "Unable to locate *tg_pt_gp_mem\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1352: FILE: drivers/target/target_core_alua.c:1636:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: drivers/target/target_core_alua.c:1638:
+	ret = core_alua_set_tg_pt_secondary_state(tg_pt_gp_mem,
+			lun->lun_sep, 0, (int)tmp);

WARNING:SPLIT_STRING: quoted string split across lines
#1445: FILE: drivers/target/target_core_device.c:683:
 		printk(KERN_INFO "%s/%s: Adding to default ALUA Target Port"
+			" Group: alua/default_tg_pt_gp\n",

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#1527: FILE: drivers/target/target_core_transport.c:4161:
+			 * Set TPGS field for explict and/or implict ALUA
 			                      ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#1527: FILE: drivers/target/target_core_transport.c:4161:
+			 * Set TPGS field for explict and/or implict ALUA
 			                                     ^^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1585: FILE: drivers/target/target_core_transport.c:4928:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1586: FILE: drivers/target/target_core_transport.c:4929:
+			printk(KERN_INFO "[%s]: ALUA TG Port not available,"

WARNING:SPLIT_STRING: quoted string split across lines
#1587: FILE: drivers/target/target_core_transport.c:4930:
+			printk(KERN_INFO "[%s]: ALUA TG Port not available,"
+				" SenseKey: NOT_READY, ASC/ASCQ: 0x04/0x%02x\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1593: FILE: drivers/target/target_core_transport.c:4936:
+^I^Ireturn 6; /* INVALID_CDB_FIELD */^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1607: FILE: drivers/target/target_core_transport.c:5151:
+                         */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1608: FILE: drivers/target/target_core_transport.c:5152:
+                        if (cdb[1] == MO_SET_TARGET_PGS) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1608: FILE: drivers/target/target_core_transport.c:5152:
+                        if (cdb[1] == MO_SET_TARGET_PGS) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1609: FILE: drivers/target/target_core_transport.c:5153:
+                                cmd->transport_emulate_cdb =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1609: FILE: drivers/target/target_core_transport.c:5153:
+                                cmd->transport_emulate_cdb =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1610: FILE: drivers/target/target_core_transport.c:5154:
+                                (T10_ALUA(su_dev)->alua_type ==$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1610: FILE: drivers/target/target_core_transport.c:5154:
+                                (T10_ALUA(su_dev)->alua_type ==$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1611: FILE: drivers/target/target_core_transport.c:5155:
+                                 SPC3_ALUA_EMULATED) ?$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1611: FILE: drivers/target/target_core_transport.c:5155:
+                                 SPC3_ALUA_EMULATED) ?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1612: FILE: drivers/target/target_core_transport.c:5156:
+                                &core_scsi3_emulate_set_target_port_groups :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1612: FILE: drivers/target/target_core_transport.c:5156:
+                                &core_scsi3_emulate_set_target_port_groups :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1613: FILE: drivers/target/target_core_transport.c:5157:
+                                NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1613: FILE: drivers/target/target_core_transport.c:5157:
+                                NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1614: FILE: drivers/target/target_core_transport.c:5158:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1614: FILE: drivers/target/target_core_transport.c:5158:
+                        }$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1634: FILE: drivers/target/target_core_transport.c:7089:
+int transport_get_sense_codes(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1639: FILE: drivers/target/target_core_transport.c:7094:
+^I*asc = cmd->scsi_asc;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1641: FILE: drivers/target/target_core_transport.c:7096:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1645: FILE: drivers/target/target_core_transport.c:7100:
+int transport_set_sense_codes(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1667: FILE: drivers/target/target_core_transport.c:7251:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = NOT_READY;
 		             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1669: FILE: drivers/target/target_core_transport.c:7253:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = asc;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1670: FILE: drivers/target/target_core_transport.c:7254:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = ascq;
 		             ^

WARNING:TYPO_SPELLING: 'Assignement' may be misspelled - perhaps 'Assignment'?
#1692: FILE: include/target/target_core_alua.h:35:
+ * From spc4r17, Table D.1: ASC and ASCQ Assignement
                                          ^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1713: FILE: include/target/target_core_alua.h:57:
+extern int core_scsi3_emulate_set_target_port_groups(struct se_cmd_s *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#1713: FILE: include/target/target_core_alua.h:57:
+extern int core_scsi3_emulate_set_target_port_groups(struct se_cmd_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1714: FILE: include/target/target_core_alua.h:58:
+extern int core_alua_check_transition(int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1714: FILE: include/target/target_core_alua.h:58:
+extern int core_alua_check_transition(int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1714: FILE: include/target/target_core_alua.h:58:
+extern int core_alua_check_transition(int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1715: FILE: include/target/target_core_alua.h:59:
+extern int core_alua_check_nonop_delay(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#1715: FILE: include/target/target_core_alua.h:59:
+extern int core_alua_check_nonop_delay(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1716: FILE: include/target/target_core_alua.h:60:
+extern int core_alua_do_transition_tg_pt(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1716: FILE: include/target/target_core_alua.h:60:
+extern int core_alua_do_transition_tg_pt(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#1716: FILE: include/target/target_core_alua.h:60:
+extern int core_alua_do_transition_tg_pt(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#1716: FILE: include/target/target_core_alua.h:60:
+extern int core_alua_do_transition_tg_pt(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1716: FILE: include/target/target_core_alua.h:60:
+extern int core_alua_do_transition_tg_pt(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1716: FILE: include/target/target_core_alua.h:60:
+extern int core_alua_do_transition_tg_pt(struct t10_alua_tg_pt_gp_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1717: FILE: include/target/target_core_alua.h:61:
+extern int core_alua_do_transition_tg_pt(struct t10_alua_tg_pt_gp_s *,
+				struct se_port_s *, struct se_node_acl_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1719: FILE: include/target/target_core_alua.h:63:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1719: FILE: include/target/target_core_alua.h:63:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#1719: FILE: include/target/target_core_alua.h:63:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#1719: FILE: include/target/target_core_alua.h:63:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#1719: FILE: include/target/target_core_alua.h:63:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1719: FILE: include/target/target_core_alua.h:63:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1719: FILE: include/target/target_core_alua.h:63:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1720: FILE: include/target/target_core_alua.h:64:
+extern int core_alua_do_port_transition(struct t10_alua_tg_pt_gp_s *,
+				struct se_device_s *, struct se_port_s *,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1722: FILE: include/target/target_core_alua.h:66:
+extern int core_alua_set_tg_pt_secondary_state(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1722: FILE: include/target/target_core_alua.h:66:
+extern int core_alua_set_tg_pt_secondary_state(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_member_s *' should also have an identifier name
#1722: FILE: include/target/target_core_alua.h:66:
+extern int core_alua_set_tg_pt_secondary_state(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_port_t *' should also have an identifier name
#1722: FILE: include/target/target_core_alua.h:66:
+extern int core_alua_set_tg_pt_secondary_state(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1722: FILE: include/target/target_core_alua.h:66:
+extern int core_alua_set_tg_pt_secondary_state(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1722: FILE: include/target/target_core_alua.h:66:
+extern int core_alua_set_tg_pt_secondary_state(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1724: FILE: include/target/target_core_alua.h:68:
+extern char *core_alua_dump_state(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1724: FILE: include/target/target_core_alua.h:68:
+extern char *core_alua_dump_state(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1725: FILE: include/target/target_core_alua.h:69:
+extern char *core_alua_dump_status(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1725: FILE: include/target/target_core_alua.h:69:
+extern char *core_alua_dump_status(int);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1734: FILE: include/target/target_core_alua.h:83:
+extern struct t10_alua_tg_pt_gp_s *core_alua_allocate_tg_pt_gp(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1734: FILE: include/target/target_core_alua.h:83:
+extern struct t10_alua_tg_pt_gp_s *core_alua_allocate_tg_pt_gp(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_subsystem_dev_s *' should also have an identifier name
#1734: FILE: include/target/target_core_alua.h:83:
+extern struct t10_alua_tg_pt_gp_s *core_alua_allocate_tg_pt_gp(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1734: FILE: include/target/target_core_alua.h:83:
+extern struct t10_alua_tg_pt_gp_s *core_alua_allocate_tg_pt_gp(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1734: FILE: include/target/target_core_alua.h:83:
+extern struct t10_alua_tg_pt_gp_s *core_alua_allocate_tg_pt_gp(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1742: FILE: include/target/target_core_alua.h:90:
+extern struct t10_alua_tg_pt_gp_s *core_alua_get_tg_pt_gp_by_name(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1742: FILE: include/target/target_core_alua.h:90:
+extern struct t10_alua_tg_pt_gp_s *core_alua_get_tg_pt_gp_by_name(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_subsystem_dev_s *' should also have an identifier name
#1742: FILE: include/target/target_core_alua.h:90:
+extern struct t10_alua_tg_pt_gp_s *core_alua_get_tg_pt_gp_by_name(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1742: FILE: include/target/target_core_alua.h:90:
+extern struct t10_alua_tg_pt_gp_s *core_alua_get_tg_pt_gp_by_name(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1751: FILE: include/target/target_core_alua.h:100:
+extern ssize_t core_alua_show_access_type(struct t10_alua_tg_pt_gp_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1751: FILE: include/target/target_core_alua.h:100:
+extern ssize_t core_alua_show_access_type(struct t10_alua_tg_pt_gp_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1751: FILE: include/target/target_core_alua.h:100:
+extern ssize_t core_alua_show_access_type(struct t10_alua_tg_pt_gp_s *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1752: FILE: include/target/target_core_alua.h:101:
+extern ssize_t core_alua_store_access_type(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1752: FILE: include/target/target_core_alua.h:101:
+extern ssize_t core_alua_store_access_type(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1752: FILE: include/target/target_core_alua.h:101:
+extern ssize_t core_alua_store_access_type(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1752: FILE: include/target/target_core_alua.h:101:
+extern ssize_t core_alua_store_access_type(struct t10_alua_tg_pt_gp_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1753: FILE: include/target/target_core_alua.h:102:
+extern ssize_t core_alua_store_access_type(struct t10_alua_tg_pt_gp_s *,
+					const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1754: FILE: include/target/target_core_alua.h:103:
+extern ssize_t core_alua_show_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1754: FILE: include/target/target_core_alua.h:103:
+extern ssize_t core_alua_show_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1754: FILE: include/target/target_core_alua.h:103:
+extern ssize_t core_alua_show_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1756: FILE: include/target/target_core_alua.h:105:
+extern ssize_t core_alua_store_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1756: FILE: include/target/target_core_alua.h:105:
+extern ssize_t core_alua_store_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1756: FILE: include/target/target_core_alua.h:105:
+extern ssize_t core_alua_store_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1756: FILE: include/target/target_core_alua.h:105:
+extern ssize_t core_alua_store_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1757: FILE: include/target/target_core_alua.h:106:
+extern ssize_t core_alua_store_nonop_delay_msecs(struct t10_alua_tg_pt_gp_s *,
+					const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1758: FILE: include/target/target_core_alua.h:107:
+extern ssize_t core_alua_show_preferred_bit(struct t10_alua_tg_pt_gp_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1758: FILE: include/target/target_core_alua.h:107:
+extern ssize_t core_alua_show_preferred_bit(struct t10_alua_tg_pt_gp_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1758: FILE: include/target/target_core_alua.h:107:
+extern ssize_t core_alua_show_preferred_bit(struct t10_alua_tg_pt_gp_s *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1759: FILE: include/target/target_core_alua.h:108:
+extern ssize_t core_alua_store_preferred_bit(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#1759: FILE: include/target/target_core_alua.h:108:
+extern ssize_t core_alua_store_preferred_bit(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1759: FILE: include/target/target_core_alua.h:108:
+extern ssize_t core_alua_store_preferred_bit(struct t10_alua_tg_pt_gp_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1759: FILE: include/target/target_core_alua.h:108:
+extern ssize_t core_alua_store_preferred_bit(struct t10_alua_tg_pt_gp_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1760: FILE: include/target/target_core_alua.h:109:
+extern ssize_t core_alua_store_preferred_bit(struct t10_alua_tg_pt_gp_s *,
+				const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1761: FILE: include/target/target_core_alua.h:110:
+extern ssize_t core_alua_show_offline_bit(struct se_lun_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#1761: FILE: include/target/target_core_alua.h:110:
+extern ssize_t core_alua_show_offline_bit(struct se_lun_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1761: FILE: include/target/target_core_alua.h:110:
+extern ssize_t core_alua_show_offline_bit(struct se_lun_s *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1762: FILE: include/target/target_core_alua.h:111:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#1762: FILE: include/target/target_core_alua.h:111:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1762: FILE: include/target/target_core_alua.h:111:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1762: FILE: include/target/target_core_alua.h:111:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *, size_t);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1797: FILE: include/target/target_core_base.h:233:
+	spinlock_t tg_pt_gps_lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#1803: FILE: include/target/target_core_base.h:239:
+	int (*alua_state_check)(struct se_cmd_s *, unsigned char *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#1803: FILE: include/target/target_core_base.h:239:
+	int (*alua_state_check)(struct se_cmd_s *, unsigned char *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#1803: FILE: include/target/target_core_base.h:239:
+	int (*alua_state_check)(struct se_cmd_s *, unsigned char *, u8 *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1888: FILE: include/target/target_core_base.h:775:
+	spinlock_t		dev_alua_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1904: FILE: include/target/target_core_base.h:886:
+	spinlock_t	sep_alua_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1949: FILE: include/target/target_core_transport.h:238:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#1949: FILE: include/target/target_core_transport.h:238:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#1949: FILE: include/target/target_core_transport.h:238:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#1949: FILE: include/target/target_core_transport.h:238:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1950: FILE: include/target/target_core_transport.h:239:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#1950: FILE: include/target/target_core_transport.h:239:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#1950: FILE: include/target/target_core_transport.h:239:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#1950: FILE: include/target/target_core_transport.h:239:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082900.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 167 warnings, 95 checks, 1777 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082900.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
