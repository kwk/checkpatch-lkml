WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: Reporter.h:77:
+    max_size_t packetLen;$

CHECK:CAMELCASE: Avoid CamelCase: <packetLen>
#111: FILE: Reporter.h:77:
+    max_size_t packetLen;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#124: FILE: headers.h:183:
+typedef uint64_t max_size_t;

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: Thread.c:205:
+            pthread_cancel( thread->mTID );$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: Thread.c:205:
+            pthread_cancel( thread->mTID );$

ERROR:SPACING: space prohibited after that open parenthesis '('
#151: FILE: Thread.c:205:
+            pthread_cancel( thread->mTID );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#151: FILE: Thread.c:205:
+            pthread_cancel( thread->mTID );

CHECK:CAMELCASE: Avoid CamelCase: <mTID>
#151: FILE: Thread.c:205:
+            pthread_cancel( thread->mTID );

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#163: FILE: Reporter.c:113:
+int threadWait = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:CAMELCASE: Avoid CamelCase: <threadWait>
#163: FILE: Reporter.c:113:
+int threadWait = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#164: FILE: Reporter.c:114:
+int threadSleeping = 0;

CHECK:CAMELCASE: Avoid CamelCase: <threadSleeping>
#164: FILE: Reporter.c:114:
+int threadSleeping = 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#173: FILE: Reporter.c:354:
+	if (threadSleeping)
+           Condition_Signal( &ReportCond );

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: Reporter.c:355:
+           Condition_Signal( &ReportCond );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: Reporter.c:355:
+           Condition_Signal( &ReportCond );$

ERROR:SPACING: space prohibited after that open parenthesis '('
#174: FILE: Reporter.c:355:
+           Condition_Signal( &ReportCond );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#174: FILE: Reporter.c:355:
+           Condition_Signal( &ReportCond );

CHECK:CAMELCASE: Avoid CamelCase: <Condition_Signal>
#174: FILE: Reporter.c:355:
+           Condition_Signal( &ReportCond );

CHECK:CAMELCASE: Avoid CamelCase: <ReportCond>
#174: FILE: Reporter.c:355:
+           Condition_Signal( &ReportCond );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#183: FILE: Reporter.c:385:
+	if (threadSleeping)
+           Condition_Signal( &ReportCond );

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: Reporter.c:386:
+           Condition_Signal( &ReportCond );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: Reporter.c:386:
+           Condition_Signal( &ReportCond );$

ERROR:SPACING: space prohibited after that open parenthesis '('
#184: FILE: Reporter.c:386:
+           Condition_Signal( &ReportCond );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#184: FILE: Reporter.c:386:
+           Condition_Signal( &ReportCond );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#193: FILE: Reporter.c:399:
+	if (threadSleeping)
+           Condition_Signal( &ReportCond );

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: Reporter.c:400:
+           Condition_Signal( &ReportCond );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: Reporter.c:400:
+           Condition_Signal( &ReportCond );$

ERROR:SPACING: space prohibited after that open parenthesis '('
#194: FILE: Reporter.c:400:
+           Condition_Signal( &ReportCond );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#194: FILE: Reporter.c:400:
+           Condition_Signal( &ReportCond );

WARNING:TABSTOP: Statements should start on a tabstop
#203: FILE: Reporter.c:470:
+	    if ( isUDP(agent) )

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#203: FILE: Reporter.c:470:
+	    if ( isUDP(agent) )
+	      threadWait = 0;

ERROR:SPACING: space prohibited after that open parenthesis '('
#203: FILE: Reporter.c:470:
+	    if ( isUDP(agent) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#203: FILE: Reporter.c:470:
+	    if ( isUDP(agent) )

CHECK:CAMELCASE: Avoid CamelCase: <isUDP>
#203: FILE: Reporter.c:470:
+	    if ( isUDP(agent) )

WARNING:TABSTOP: Statements should start on a tabstop
#205: FILE: Reporter.c:472:
+	    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#205: FILE: Reporter.c:472:
+	    else
+	      threadWait = 1;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: Reporter.c:597:
+	    Condition_Lock ( ReportCond );

ERROR:SPACING: space prohibited after that open parenthesis '('
#218: FILE: Reporter.c:597:
+	    Condition_Lock ( ReportCond );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#218: FILE: Reporter.c:597:
+	    Condition_Lock ( ReportCond );

CHECK:CAMELCASE: Avoid CamelCase: <Condition_Lock>
#218: FILE: Reporter.c:597:
+	    Condition_Lock ( ReportCond );

WARNING:TABSTOP: Statements should start on a tabstop
#219: FILE: Reporter.c:598:
+	    if ( threadWait && ReportRoot != NULL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#219: FILE: Reporter.c:598:
+	    if ( threadWait && ReportRoot != NULL) {
+	      threadSleeping = 1;

ERROR:SPACING: space prohibited after that open parenthesis '('
#219: FILE: Reporter.c:598:
+	    if ( threadWait && ReportRoot != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <ReportRoot>
#219: FILE: Reporter.c:598:
+	    if ( threadWait && ReportRoot != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ReportRoot"
#219: FILE: Reporter.c:598:
+	    if ( threadWait && ReportRoot != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#221: FILE: Reporter.c:600:
+	      Condition_TimedWait (& ReportCond, 1 );

ERROR:SPACING: space prohibited after that '&' (ctx:BxW)
#221: FILE: Reporter.c:600:
+	      Condition_TimedWait (& ReportCond, 1 );
 	                           ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#221: FILE: Reporter.c:600:
+	      Condition_TimedWait (& ReportCond, 1 );

CHECK:CAMELCASE: Avoid CamelCase: <Condition_TimedWait>
#221: FILE: Reporter.c:600:
+	      Condition_TimedWait (& ReportCond, 1 );

WARNING:TABSTOP: Statements should start on a tabstop
#223: FILE: Reporter.c:602:
+	    }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#224: FILE: Reporter.c:603:
+	    Condition_Unlock ( ReportCond );

ERROR:SPACING: space prohibited after that open parenthesis '('
#224: FILE: Reporter.c:603:
+	    Condition_Unlock ( ReportCond );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#224: FILE: Reporter.c:603:
+	    Condition_Unlock ( ReportCond );

CHECK:CAMELCASE: Avoid CamelCase: <Condition_Unlock>
#224: FILE: Reporter.c:603:
+	    Condition_Unlock ( ReportCond );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: Reporter.c:604:
+^I    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: Client.cpp:119:
+    long currLen = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: Client.cpp:123:
+    int delay_target = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: Client.cpp:124:
+    int delay = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: Client.cpp:125:
+    int adjust = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: Client.cpp:132:
+    // Indicates if the stream is readable $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: Client.cpp:133:
+    bool canRead = true, mMode_Time = isModeTime( mSettings ); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: Client.cpp:155:
+        // Read the next data block from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: Client.cpp:156:
+        // the file if it's file input $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: Client.cpp:158:
+            Extractor_getNextDataBlock( readAt, mSettings ); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: Client.cpp:159:
+            canRead = Extractor_canRead( mSettings ) != 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: Client.cpp:161:
+            canRead = true; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: Client.cpp:163:
+        // perform write $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: Client.cpp:164:
+        currLen = write( mSettings->mSock, mBuf, mSettings->mBufLen ); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: Client.cpp:166:
+            WARN_errno( currLen < 0, "write2" ); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: Client.cpp:167:
+            break; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: Client.cpp:172:
+            delay_loop( delay ); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: Client.cpp:178:
+    } while ( ! (sInterupted  || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: Client.cpp:179:
+                   (!mMode_Time  &&  0 >= mSettings->mAmount)) && canRead ); $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 42 errors, 21 warnings, 13 checks, 244 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
