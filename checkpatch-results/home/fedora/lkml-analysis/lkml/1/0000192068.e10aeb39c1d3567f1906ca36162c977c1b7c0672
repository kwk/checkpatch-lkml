WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#98: FILE: fs/exofs/Kconfig:1:
+config EXOFS_FS
+	tristate "exofs: OSD based file system support"
+	depends on SCSI_OSD_ULD
+	help
+	  EXOFS is a file system that uses an OSD storage device,
+	  as its backing storage.
+
+# Debugging-related stuff

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#106: FILE: fs/exofs/Kconfig:9:
+config EXOFS_DEBUG
+	bool "Enable debugging"
+	depends on EXOFS_FS
+	help
+	  This option enables EXOFS debug prints.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: fs/exofs/common.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#146: FILE: fs/exofs/common.h:30:
+ * along with exofs; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#147: FILE: fs/exofs/common.h:31:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:BIT_MACRO: Prefer using the BIT macro
#192: FILE: fs/exofs/common.h:76:
+#define EXOFS_BLKSIZE	(1UL << EXOFS_BLKSHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#206: FILE: fs/exofs/common.h:90:
+	uint32_t  s_nextid;	/* Highest object ID used */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#207: FILE: fs/exofs/common.h:91:
+	uint32_t  s_numfiles;	/* Number of files on fs */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#208: FILE: fs/exofs/common.h:92:
+	uint16_t  s_magic;	/* Magic signature */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#209: FILE: fs/exofs/common.h:93:
+	uint16_t  s_newfs;	/* Non-zero if this is a new fs */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#222: FILE: fs/exofs/common.h:106:
+	uint64_t  i_size;		/* Size of the file */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: fs/exofs/common.h:107:
+^Iuint16_t  i_mode;         ^I/* File mode */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#223: FILE: fs/exofs/common.h:107:
+	uint16_t  i_mode;         	/* File mode */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: fs/exofs/common.h:108:
+^Iuint16_t  i_links_count;  ^I/* Links count */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#224: FILE: fs/exofs/common.h:108:
+	uint16_t  i_links_count;  	/* Links count */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: fs/exofs/common.h:109:
+^Iuint32_t  i_uid;          ^I/* Owner Uid */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#225: FILE: fs/exofs/common.h:109:
+	uint32_t  i_uid;          	/* Owner Uid */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: fs/exofs/common.h:110:
+^Iuint32_t  i_gid;          ^I/* Group Id */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#226: FILE: fs/exofs/common.h:110:
+	uint32_t  i_gid;          	/* Group Id */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: fs/exofs/common.h:111:
+^Iuint32_t  i_atime;        ^I/* Access time */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#227: FILE: fs/exofs/common.h:111:
+	uint32_t  i_atime;        	/* Access time */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: fs/exofs/common.h:112:
+^Iuint32_t  i_ctime;        ^I/* Creation time */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#228: FILE: fs/exofs/common.h:112:
+	uint32_t  i_ctime;        	/* Creation time */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: fs/exofs/common.h:113:
+^Iuint32_t  i_mtime;        ^I/* Modification time */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#229: FILE: fs/exofs/common.h:113:
+	uint32_t  i_mtime;        	/* Modification time */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: fs/exofs/common.h:114:
+^Iuint32_t  i_flags;        ^I/* File flags */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#230: FILE: fs/exofs/common.h:114:
+	uint32_t  i_flags;        	/* File flags */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: fs/exofs/common.h:115:
+^Iuint32_t  i_version;      ^I/* File version */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#231: FILE: fs/exofs/common.h:115:
+	uint32_t  i_version;      	/* File version */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: fs/exofs/common.h:116:
+^Iuint32_t  i_generation;   ^I/* File version (for NFS) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#232: FILE: fs/exofs/common.h:116:
+	uint32_t  i_generation;   	/* File version (for NFS) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#233: FILE: fs/exofs/common.h:117:
+	uint32_t  i_data[EXOFS_IDATA];	/* Short symlink names and device #s */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#247: FILE: fs/exofs/common.h:131:
+	uint32_t	inode;			/* inode number           */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#248: FILE: fs/exofs/common.h:132:
+	uint16_t	rec_len;		/* directory entry length */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#249: FILE: fs/exofs/common.h:133:
+	uint8_t		name_len;		/* name length            */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#250: FILE: fs/exofs/common.h:134:
+	uint8_t		file_type;		/* umm...file type        */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#277: FILE: fs/exofs/exofs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#306: FILE: fs/exofs/exofs.h:30:
+ * along with exofs; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#307: FILE: fs/exofs/exofs.h:31:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#317: FILE: fs/exofs/exofs.h:41:
+#define EXOFS_ERR(fmt, a...) printk(KERN_ERR "exofs: " fmt, ##a)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#321: FILE: fs/exofs/exofs.h:45:
+	printk(KERN_NOTICE "exofs @%s:%d: " fmt, __func__, __LINE__, ##a)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#328: FILE: fs/exofs/exofs.h:52:
+#define _LLU(x) (unsigned long long)(x)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#335: FILE: fs/exofs/exofs.h:59:
+	uint64_t	s_pid;			/* partition ID of file system*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#337: FILE: fs/exofs/exofs.h:61:
+	uint32_t	s_nextid;		/* highest object ID used     */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#338: FILE: fs/exofs/exofs.h:62:
+	uint32_t	s_numfiles;		/* number of files on fs      */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#342: FILE: fs/exofs/exofs.h:66:
+	uint8_t		s_cred[OSD_CAP_LEN];	/* all-powerful credential    */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#349: FILE: fs/exofs/exofs.h:73:
+typedef unsigned exofs_iflags_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#349: FILE: fs/exofs/exofs.h:73:
+typedef unsigned exofs_iflags_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#351: FILE: fs/exofs/exofs.h:75:
+typedef unsigned long exofs_iflags_t;

CHECK:CAMELCASE: Avoid CamelCase: <Obj2BCreated>
#357: FILE: fs/exofs/exofs.h:81:
+#define Obj2BCreated(oi) \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'oi' may be better as '(oi)' to avoid precedence issues
#357: FILE: fs/exofs/exofs.h:81:
+#define Obj2BCreated(oi) \
+	test_bit(OBJ_2BCREATED, &(oi->i_flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#358: FILE: fs/exofs/exofs.h:82:
+	test_bit(OBJ_2BCREATED, &(oi->i_flags))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <SetObj2BCreated>
#359: FILE: fs/exofs/exofs.h:83:
+#define SetObj2BCreated(oi) \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'oi' may be better as '(oi)' to avoid precedence issues
#359: FILE: fs/exofs/exofs.h:83:
+#define SetObj2BCreated(oi) \
+	set_bit(OBJ_2BCREATED, &(oi->i_flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#360: FILE: fs/exofs/exofs.h:84:
+	set_bit(OBJ_2BCREATED, &(oi->i_flags))

CHECK:CAMELCASE: Avoid CamelCase: <ObjCreated>
#362: FILE: fs/exofs/exofs.h:86:
+#define ObjCreated(oi) \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'oi' may be better as '(oi)' to avoid precedence issues
#362: FILE: fs/exofs/exofs.h:86:
+#define ObjCreated(oi) \
+	test_bit(OBJ_CREATED, &(oi->i_flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#363: FILE: fs/exofs/exofs.h:87:
+	test_bit(OBJ_CREATED, &(oi->i_flags))

CHECK:CAMELCASE: Avoid CamelCase: <SetObjCreated>
#364: FILE: fs/exofs/exofs.h:88:
+#define SetObjCreated(oi) \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'oi' may be better as '(oi)' to avoid precedence issues
#364: FILE: fs/exofs/exofs.h:88:
+#define SetObjCreated(oi) \
+	set_bit(OBJ_CREATED, &(oi->i_flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#365: FILE: fs/exofs/exofs.h:89:
+	set_bit(OBJ_CREATED, &(oi->i_flags))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#373: FILE: fs/exofs/exofs.h:97:
+	uint32_t       i_dir_start_lookup; /* which page to start lookup      */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#375: FILE: fs/exofs/exofs.h:99:
+	uint64_t       i_commit_size;      /* the object's written length     */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#376: FILE: fs/exofs/exofs.h:100:
+	uint8_t        i_cred[OSD_CAP_LEN];/* all-powerful credential         */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct osd_request *' should also have an identifier name
#393: FILE: fs/exofs/exofs.h:117:
+int check_ok(struct osd_request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct osd_request *' should also have an identifier name
#394: FILE: fs/exofs/exofs.h:118:
+int exofs_sync_op(struct osd_request *, int, uint8_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#394: FILE: fs/exofs/exofs.h:118:
+int exofs_sync_op(struct osd_request *, int, uint8_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint8_t *' should also have an identifier name
#394: FILE: fs/exofs/exofs.h:118:
+int exofs_sync_op(struct osd_request *, int, uint8_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct osd_request *' should also have an identifier name
#395: FILE: fs/exofs/exofs.h:119:
+int exofs_async_op(struct osd_request *, osd_req_done_fn *, void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'osd_req_done_fn *' should also have an identifier name
#395: FILE: fs/exofs/exofs.h:119:
+int exofs_async_op(struct osd_request *, osd_req_done_fn *, void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#395: FILE: fs/exofs/exofs.h:119:
+int exofs_async_op(struct osd_request *, osd_req_done_fn *, void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#395: FILE: fs/exofs/exofs.h:119:
+int exofs_async_op(struct osd_request *, osd_req_done_fn *, void *, char *);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#398: FILE: fs/exofs/exofs.h:122:
+				    uint32_t page_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#399: FILE: fs/exofs/exofs.h:123:
+				    uint32_t attr_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#402: FILE: fs/exofs/exofs.h:126:
+				    uint32_t page_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#403: FILE: fs/exofs/exofs.h:127:
+				    uint32_t attr_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#404: FILE: fs/exofs/exofs.h:128:
+				    uint16_t attr_len,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#407: FILE: fs/exofs/exofs.h:131:
+			       uint32_t *page_num, uint32_t *attr_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#408: FILE: fs/exofs/exofs.h:132:
+			       uint16_t *attr_len, uint8_t **attr_val);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#416: FILE: fs/exofs/exofs.h:140:
+				       uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#419: FILE: fs/exofs/exofs.h:143:
+				       uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#422: FILE: fs/exofs/exofs.h:146:
+					 uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#425: FILE: fs/exofs/exofs.h:149:
+					 uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#428: FILE: fs/exofs/exofs.h:152:
+				     uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#429: FILE: fs/exofs/exofs.h:153:
+				     uint64_t obj_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#430: FILE: fs/exofs/exofs.h:154:
+				     uint64_t length,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#431: FILE: fs/exofs/exofs.h:155:
+				     uint64_t offset,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#435: FILE: fs/exofs/exofs.h:159:
+				      uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#436: FILE: fs/exofs/exofs.h:160:
+				      uint64_t obj_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#437: FILE: fs/exofs/exofs.h:161:
+				      uint64_t length,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#438: FILE: fs/exofs/exofs.h:162:
+				      uint64_t offset,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#442: FILE: fs/exofs/exofs.h:166:
+				     uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#443: FILE: fs/exofs/exofs.h:167:
+				     uint32_t list_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#444: FILE: fs/exofs/exofs.h:168:
+				     uint64_t alloc_len,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#445: FILE: fs/exofs/exofs.h:169:
+				     uint64_t initial_obj_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#449: FILE: fs/exofs/exofs.h:173:
+			  uint64_t *total_matches_p,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#450: FILE: fs/exofs/exofs.h:174:
+			  uint64_t *num_ids_retrieved_p,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#451: FILE: fs/exofs/exofs.h:175:
+			  uint64_t *list_of_ids_p[],

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#454: FILE: fs/exofs/exofs.h:178:
+			  uint64_t *continuation_tag_p,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#466: FILE: fs/exofs/osd.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#486: FILE: fs/exofs/osd.c:21:
+ * along with exofs; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#487: FILE: fs/exofs/osd.c:22:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:BRACES: braces {} should be used on all arms of this statement
#501: FILE: fs/exofs/osd.c:36:
+		if (osi.additional_code == scsi_invalid_field_in_cdb) {
[...]
+		} else if (osi.additional_code == osd_quota_error)
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#517: FILE: fs/exofs/osd.c:52:
+void make_credential(uint8_t cred_a[OSD_CAP_LEN], uint64_t pid, uint64_t oid)

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#537: FILE: fs/exofs/osd.c:72:
+		EXOFS_DBGMSG("Faild to osd_finalize_request() => %d\n", ret);
 		              ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#559: FILE: fs/exofs/osd.c:94:
+		EXOFS_DBGMSG("Faild to osd_finalize_request() => %d\n", ret);
 		              ^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#571: FILE: fs/exofs/osd.c:106:
+				    uint32_t page_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#572: FILE: fs/exofs/osd.c:107:
+				    uint32_t attr_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#585: FILE: fs/exofs/osd.c:120:
+				    uint32_t page_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#586: FILE: fs/exofs/osd.c:121:
+				    uint32_t attr_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#587: FILE: fs/exofs/osd.c:122:
+				    uint16_t attr_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: fs/exofs/osd.c:136:
+int extract_next_attr_from_req(struct osd_request *req,
+	uint32_t *page_num, uint32_t *attr_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#601: FILE: fs/exofs/osd.c:136:
+	uint32_t *page_num, uint32_t *attr_num,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#602: FILE: fs/exofs/osd.c:137:
+	uint16_t *attr_len, uint8_t **attr_val)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'attr.page == *page_num'
#611: FILE: fs/exofs/osd.c:146:
+		if ((attr.page == *page_num) && (attr.attr_id == *attr_num)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'attr.attr_id == *attr_num'
#611: FILE: fs/exofs/osd.c:146:
+		if ((attr.page == *page_num) && (attr.attr_id == *attr_num)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: fs/exofs/osd.c:196:
+struct osd_request *prepare_osd_create(struct osd_dev *dev,
+				     uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#661: FILE: fs/exofs/osd.c:196:
+				     uint64_t part_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: fs/exofs/osd.c:214:
+struct osd_request *prepare_osd_remove(struct osd_dev *dev,
+				     uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#679: FILE: fs/exofs/osd.c:214:
+				     uint64_t part_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: fs/exofs/osd.c:232:
+struct osd_request *prepare_osd_set_attr(struct osd_dev *dev,
+				       uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#697: FILE: fs/exofs/osd.c:232:
+				       uint64_t part_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: fs/exofs/osd.c:250:
+struct osd_request *prepare_osd_get_attr(struct osd_dev *dev,
+				       uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#715: FILE: fs/exofs/osd.c:250:
+				       uint64_t part_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: fs/exofs/osd.c:268:
+struct osd_request *prepare_osd_read(struct osd_dev *dev,
+				   uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#733: FILE: fs/exofs/osd.c:268:
+				   uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#734: FILE: fs/exofs/osd.c:269:
+				   uint64_t obj_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#735: FILE: fs/exofs/osd.c:270:
+				   uint64_t length,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#736: FILE: fs/exofs/osd.c:271:
+				   uint64_t offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#751: FILE: fs/exofs/osd.c:286:
+	BUG_ON(cmd_data_use_sg);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: fs/exofs/osd.c:295:
+	EXOFS_DBGMSG("osd_req_read(p=%llX, ob=%llX, l=%llu, of=%llu)\n",
+		_LLU(part_id), _LLU(obj_id), _LLU(length), _LLU(offset));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: fs/exofs/osd.c:300:
+struct osd_request *prepare_osd_write(struct osd_dev *dev,
+				    uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#765: FILE: fs/exofs/osd.c:300:
+				    uint64_t part_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#766: FILE: fs/exofs/osd.c:301:
+				    uint64_t obj_id,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#767: FILE: fs/exofs/osd.c:302:
+				    uint64_t length,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#768: FILE: fs/exofs/osd.c:303:
+				    uint64_t offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#783: FILE: fs/exofs/osd.c:318:
+	BUG_ON(cmd_data_use_sg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: fs/exofs/osd.c:327:
+	EXOFS_DBGMSG("osd_req_write(p=%llX, ob=%llX, l=%llu, of=%llu)\n",
+		_LLU(part_id), _LLU(obj_id), _LLU(length), _LLU(offset));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192068.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 33 warnings, 99 checks, 714 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192068.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
