WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Changes to core input subsystem to allow send and receive of IR messages. Encode and decode state machines are provided for common IR porotocols such as Sony, JVC, NEC, Philips, etc.

WARNING:TYPO_SPELLING: 'porotocols' may be misspelled - perhaps 'protocols'?
#35: 
Changes to core input subsystem to allow send and receive of IR messages. Encode and decode state machines are provided for common IR porotocols such as Sony, JVC, NEC, Philips, etc.
                                                                                                                                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#86: FILE: drivers/input/ir/Kconfig:4:
+menuconfig INPUT_IR
+	select CONFIGFS_FS
+	tristate "Infrared Remote (IR) receiver/transmitter drivers"
+	default n
+	help
+	  Say Y here, and all supported Infrared Remote Control IR
+	  receiver and transmitter drivers will be displayed. The receiver drivers
+	  allow control of your Linux system via remote control.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: drivers/input/ir/ir-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#175: FILE: drivers/input/ir/ir-core.c:58:
+	memcpy(&ir->send.buffer[ir->send.count], &ir->send.buffer[0], ir->send.count * sizeof ir->send.buffer[0]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SIZEOF_PARENTHESIS: sizeof ir->send.buffer[0] should be sizeof(ir->send.buffer[0])
#175: FILE: drivers/input/ir/ir-core.c:58:
+	memcpy(&ir->send.buffer[ir->send.count], &ir->send.buffer[0], ir->send.count * sizeof ir->send.buffer[0]);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#177: FILE: drivers/input/ir/ir-core.c:60:
+	memcpy(&ir->send.buffer[ir->send.count], &ir->send.buffer[0], ir->send.count * sizeof ir->send.buffer[0]);

WARNING:SIZEOF_PARENTHESIS: sizeof ir->send.buffer[0] should be sizeof(ir->send.buffer[0])
#177: FILE: drivers/input/ir/ir-core.c:60:
+	memcpy(&ir->send.buffer[ir->send.count], &ir->send.buffer[0], ir->send.count * sizeof ir->send.buffer[0]);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#183: FILE: drivers/input/ir/ir-core.c:66:
+static int decode_sony(struct input_dev *dev, struct ir_protocol *sony, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#193: FILE: drivers/input/ir/ir-core.c:76:
+	if ((bit == 0) && (delta > 22)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#193: FILE: drivers/input/ir/ir-core.c:76:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 26'
#195: FILE: drivers/input/ir/ir-core.c:78:
+		if ((sony->state == 26) || (sony->state == 32) || (sony->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 32'
#195: FILE: drivers/input/ir/ir-core.c:78:
+		if ((sony->state == 26) || (sony->state == 32) || (sony->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 42'
#195: FILE: drivers/input/ir/ir-core.c:78:
+		if ((sony->state == 26) || (sony->state == 32) || (sony->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->good == sony->code'
#196: FILE: drivers/input/ir/ir-core.c:79:
+			if (sony->good && (sony->good == sony->code)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#197: FILE: drivers/input/ir/ir-core.c:80:
+			if (sony->good && (sony->good == sony->code)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#199: FILE: drivers/input/ir/ir-core.c:82:
+					(sony->state == 32) ? IR_PROTOCOL_SONY_15 : IR_PROTOCOL_SONY_20;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#212: FILE: drivers/input/ir/ir-core.c:95:
+				PDEBUG("SIRC - Saving %d bit %05x\n", (sony->state - 2) / 2, sony->code);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 1'
#220: FILE: drivers/input/ir/ir-core.c:103:
+	if ((sony->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#220: FILE: drivers/input/ir/ir-core.c:103:
+	if ((sony->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 4'
#220: FILE: drivers/input/ir/ir-core.c:103:
+	if ((sony->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 2'
#225: FILE: drivers/input/ir/ir-core.c:108:
+	if ((sony->state == 2) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#225: FILE: drivers/input/ir/ir-core.c:108:
+	if ((sony->state == 2) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#225: FILE: drivers/input/ir/ir-core.c:108:
+	if ((sony->state == 2) && (bit == 0) && (delta == 1)) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#230: FILE: drivers/input/ir/ir-core.c:113:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state >= 3'
#230: FILE: drivers/input/ir/ir-core.c:113:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#230: FILE: drivers/input/ir/ir-core.c:113:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#230: FILE: drivers/input/ir/ir-core.c:113:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 2'
#230: FILE: drivers/input/ir/ir-core.c:113:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state >= 3'
#236: FILE: drivers/input/ir/ir-core.c:119:
+	if ((sony->state >= 3) && !(sony->state & 1) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#236: FILE: drivers/input/ir/ir-core.c:119:
+	if ((sony->state >= 3) && !(sony->state & 1) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#236: FILE: drivers/input/ir/ir-core.c:119:
+	if ((sony->state >= 3) && !(sony->state & 1) && (bit == 0) && (delta == 1)) {

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#238: FILE: drivers/input/ir/ir-core.c:121:
+		PDEBUG("SIRC state %d\n", sony-> state);
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: drivers/input/ir/ir-core.c:128:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#279: FILE: drivers/input/ir/ir-core.c:162:
+static int decode_jvc(struct input_dev *dev, struct ir_protocol *jvc, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#288: FILE: drivers/input/ir/ir-core.c:171:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#288: FILE: drivers/input/ir/ir-core.c:171:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state == 1'
#294: FILE: drivers/input/ir/ir-core.c:177:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#294: FILE: drivers/input/ir/ir-core.c:177:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 16'
#294: FILE: drivers/input/ir/ir-core.c:177:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state == 2'
#299: FILE: drivers/input/ir/ir-core.c:182:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#299: FILE: drivers/input/ir/ir-core.c:182:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 8'
#299: FILE: drivers/input/ir/ir-core.c:182:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state >= 3'
#304: FILE: drivers/input/ir/ir-core.c:187:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#304: FILE: drivers/input/ir/ir-core.c:187:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#304: FILE: drivers/input/ir/ir-core.c:187:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#306: FILE: drivers/input/ir/ir-core.c:189:
+		PDEBUG("JVC state %d\n", jvc-> state);
 		                            ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#309: FILE: drivers/input/ir/ir-core.c:192:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state >= 3'
#309: FILE: drivers/input/ir/ir-core.c:192:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#309: FILE: drivers/input/ir/ir-core.c:192:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#309: FILE: drivers/input/ir/ir-core.c:192:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 3'
#309: FILE: drivers/input/ir/ir-core.c:192:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->good == jvc->code'
#316: FILE: drivers/input/ir/ir-core.c:199:
+			if (jvc->good && (jvc->good == jvc->code)) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#317: FILE: drivers/input/ir/ir-core.c:200:
+				input_ir_translate(dev, IR_PROTOCOL_JVC, jvc->code >> 8, jvc->code & 0xFF);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#332: FILE: drivers/input/ir/ir-core.c:215:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#366: FILE: drivers/input/ir/ir-core.c:249:
+static int decode_nec(struct input_dev *dev, struct ir_protocol *nec, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#375: FILE: drivers/input/ir/ir-core.c:258:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#375: FILE: drivers/input/ir/ir-core.c:258:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state == 1'
#381: FILE: drivers/input/ir/ir-core.c:264:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#381: FILE: drivers/input/ir/ir-core.c:264:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 16'
#381: FILE: drivers/input/ir/ir-core.c:264:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state == 2'
#386: FILE: drivers/input/ir/ir-core.c:269:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#386: FILE: drivers/input/ir/ir-core.c:269:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 8'
#386: FILE: drivers/input/ir/ir-core.c:269:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state >= 3'
#391: FILE: drivers/input/ir/ir-core.c:274:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#391: FILE: drivers/input/ir/ir-core.c:274:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#391: FILE: drivers/input/ir/ir-core.c:274:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#393: FILE: drivers/input/ir/ir-core.c:276:
+		PDEBUG("nec state %d\n", nec-> state);
 		                            ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#395: FILE: drivers/input/ir/ir-core.c:278:
+			input_ir_translate(dev, IR_PROTOCOL_NEC, nec->code >> 16, nec->code & 0xFFFF);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#400: FILE: drivers/input/ir/ir-core.c:283:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state >= 3'
#400: FILE: drivers/input/ir/ir-core.c:283:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#400: FILE: drivers/input/ir/ir-core.c:283:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#400: FILE: drivers/input/ir/ir-core.c:283:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 3'
#400: FILE: drivers/input/ir/ir-core.c:283:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#412: FILE: drivers/input/ir/ir-core.c:295:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#420: FILE: drivers/input/ir/ir-core.c:303:
+static int decode_rc5(struct input_dev *dev, struct ir_protocol *rc5, unsigned int d, unsigned int bit)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#432: FILE: drivers/input/ir/ir-core.c:315:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->bits == 0'
#485: FILE: drivers/input/ir/ir-core.c:368:
+		if ((rc6->bits == 0) || (rc6->bits == 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->bits == 3'
#485: FILE: drivers/input/ir/ir-core.c:368:
+		if ((rc6->bits == 0) || (rc6->bits == 3)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#494: FILE: drivers/input/ir/ir-core.c:377:
+		if (rc6->state == 23) {
[...]
+		} else
[...]

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#495: FILE: drivers/input/ir/ir-core.c:378:
+			input_ir_translate(dev, IR_PROTOCOL_PHILIPS_RC6, rc6->code >> 8, rc6->code & 0xFF);

CHECK:BRACES: Unbalanced braces around else statement
#497: FILE: drivers/input/ir/ir-core.c:380:
+		} else

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#504: FILE: drivers/input/ir/ir-core.c:387:
+static int decode_rc6(struct input_dev *dev, struct ir_protocol *rc6, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#514: FILE: drivers/input/ir/ir-core.c:397:
+	if ((bit == 0) && (delta > 19)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 19'
#514: FILE: drivers/input/ir/ir-core.c:397:
+	if ((bit == 0) && (delta > 19)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->state == 1'
#522: FILE: drivers/input/ir/ir-core.c:405:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#522: FILE: drivers/input/ir/ir-core.c:405:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 6'
#522: FILE: drivers/input/ir/ir-core.c:405:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->state == 2'
#527: FILE: drivers/input/ir/ir-core.c:410:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#527: FILE: drivers/input/ir/ir-core.c:410:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 2'
#527: FILE: drivers/input/ir/ir-core.c:410:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta >= 1'
#533: FILE: drivers/input/ir/ir-core.c:416:
+		if ((delta >= 1) || (delta <= 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta <= 3'
#533: FILE: drivers/input/ir/ir-core.c:416:
+		if ((delta >= 1) || (delta <= 3)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#547: FILE: drivers/input/ir/ir-core.c:430:
+	int head = dev->ir->raw.head;
+	if (bit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#574: FILE: drivers/input/ir/ir-core.c:457:
+	unsigned freq, xmit = 0;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#623: FILE: drivers/input/ir/ir-core.c:506:
+		ret = dev->ir->xmit(dev->ir->private, dev->ir->send.buffer, dev->ir->send.count, freq, xmit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: drivers/input/ir/ir-core.c:517:
+static ssize_t ir_raw_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#640: FILE: drivers/input/ir/ir-core.c:523:
+	for (i = input_dev->ir->raw.tail; i != input_dev->ir->raw.head; ) {
+

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#641: FILE: drivers/input/ir/ir-core.c:524:
+		count += snprintf(&buf[count], PAGE_SIZE - 1, "%i\n", input_dev->ir->raw.buffer[i++]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: drivers/input/ir/ir-core.c:537:
+static ssize_t ir_raw_store(struct device *dev,
+				  struct device_attribute *attr,

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#668: FILE: drivers/input/ir/ir-core.c:551:
+		i -= strict_strtoul(&buf[i], i, &delta);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 0'
#673: FILE: drivers/input/ir/ir-core.c:556:
+		if ((delta > 0) && !first)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: drivers/input/ir/ir-core.c:568:
+static ssize_t ir_carrier_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: drivers/input/ir/ir-core.c:576:
+static ssize_t ir_carrier_store(struct device *dev,
+				  struct device_attribute *attr,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#699: FILE: drivers/input/ir/ir-core.c:582:
+	ir->raw.carrier = simple_strtoul(buf, NULL, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: drivers/input/ir/ir-core.c:587:
+static ssize_t ir_xmitter_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: drivers/input/ir/ir-core.c:595:
+static ssize_t ir_xmitter_store(struct device *dev,
+				  struct device_attribute *attr,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#718: FILE: drivers/input/ir/ir-core.c:601:
+	ir->raw.xmitter = simple_strtoul(buf, NULL, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: drivers/input/ir/ir-core.c:606:
+static ssize_t ir_debug_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: drivers/input/ir/ir-core.c:614:
+static ssize_t ir_debug_store(struct device *dev,
+				  struct device_attribute *attr,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#737: FILE: drivers/input/ir/ir-core.c:620:
+	ir->raw.xmitter = simple_strtoul(buf, NULL, 0);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ir_raw_show' to 'raw_show' 'ir_raw_store' to 'raw_store'
#739: FILE: drivers/input/ir/ir-core.c:622:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#741: FILE: drivers/input/ir/ir-core.c:624:
+static DEVICE_ATTR(raw, S_IRUGO | S_IWUSR, ir_raw_show, ir_raw_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ir_carrier_show' to 'carrier_show' 'ir_carrier_store' to 'carrier_store'
#742: FILE: drivers/input/ir/ir-core.c:625:
+static DEVICE_ATTR(carrier, S_IRUGO | S_IWUSR, ir_carrier_show, ir_carrier_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#742: FILE: drivers/input/ir/ir-core.c:625:
+static DEVICE_ATTR(carrier, S_IRUGO | S_IWUSR, ir_carrier_show, ir_carrier_store);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ir_xmitter_show' to 'xmitter_show' 'ir_xmitter_store' to 'xmitter_store'
#743: FILE: drivers/input/ir/ir-core.c:626:
+static DEVICE_ATTR(xmitter, S_IRUGO | S_IWUSR, ir_xmitter_show, ir_xmitter_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#743: FILE: drivers/input/ir/ir-core.c:626:
+static DEVICE_ATTR(xmitter, S_IRUGO | S_IWUSR, ir_xmitter_show, ir_xmitter_store);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ir_debug_show' to 'debug_show' 'ir_debug_store' to 'debug_store'
#744: FILE: drivers/input/ir/ir-core.c:627:
+static DEVICE_ATTR(debug, S_IRUGO | S_IWUSR, ir_debug_show, ir_debug_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#744: FILE: drivers/input/ir/ir-core.c:627:
+static DEVICE_ATTR(debug, S_IRUGO | S_IWUSR, ir_debug_show, ir_debug_store);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev->ir)...) over kzalloc(sizeof(struct ir_device)...)
#769: FILE: drivers/input/ir/ir-core.c:652:
+	dev->ir = kzalloc(sizeof(struct ir_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#784: FILE: drivers/input/ir/ir-core.c:667:
+	if (dev->ir) {
+		kfree(dev->ir);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#807: FILE: drivers/input/ir/ir.h:1:
+/*

ERROR:SPACING: space prohibited after that open parenthesis '('
#817: FILE: drivers/input/ir/ir.h:11:
+#define PDEBUG( format, arg... ) \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#817: FILE: drivers/input/ir/ir.h:11:
+#define PDEBUG( format, arg... ) \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#817: FILE: drivers/input/ir/ir.h:11:
+#define PDEBUG( format, arg... ) \
+	printk(KERN_DEBUG format , ## arg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#818: FILE: drivers/input/ir/ir.h:12:
+	printk(KERN_DEBUG format , ## arg);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#818: FILE: drivers/input/ir/ir.h:12:
+	printk(KERN_DEBUG format , ## arg);
 	                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#821: FILE: drivers/input/ir/ir.h:15:
+	({ if (0) printk(KERN_DEBUG format , ## arg); 0; })

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#821: FILE: drivers/input/ir/ir.h:15:
+	({ if (0) printk(KERN_DEBUG format , ## arg); 0; })
 	                                   ^

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#834: FILE: drivers/input/ir/ir.h:28:
+	struct mutex lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#853: FILE: drivers/input/ir/ir.h:47:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207905.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 43 warnings, 82 checks, 769 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207905.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
