WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#94: 
since the ABI cannot be changed for backward compatability.  Instead, a
                                             ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#231: FILE: Documentation/filesystems/proc.txt:1251:
+generation children with seperate address spaces instead, if possible.  This
                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#255: FILE: Documentation/sysctl/vm.txt:496:
+This value defines how many children with a seperate address space a specific
                                             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: fs/proc/base.c:470:
+	points = oom_badness(task->group_leader,
+				global_page_state(NR_INACTIVE_ANON) +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: fs/proc/base.c:1182:
+static ssize_t oom_score_adj_read(struct file *file, char __user *buf,
+					size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: fs/proc/base.c:1202:
+static ssize_t oom_score_adj_write(struct file *file, const char __user *buf,
+					size_t count, loff_t *ppos)

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#366: FILE: fs/proc/base.c:1216:
+	err = strict_strtol(strstrip(buffer), 0, &oom_score_adj);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: fs/proc/base.c:1220:
+	if (oom_score_adj < OOM_SCORE_ADJ_MIN ||
+			oom_score_adj > OOM_SCORE_ADJ_MAX)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: fs/proc/base.c:1231:
+	if (oom_score_adj < task->signal->oom_score_adj &&
+			!capable(CAP_SYS_RESOURCE)) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#414: FILE: fs/proc/base.c:2820:
+	REG("oom_score_adj", S_IRUGO|S_IWUSR, proc_oom_score_adj_operations),
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#414: FILE: fs/proc/base.c:2820:
+	REG("oom_score_adj", S_IRUGO|S_IWUSR, proc_oom_score_adj_operations),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#422: FILE: fs/proc/base.c:3155:
+	REG("oom_score_adj", S_IRUGO|S_IWUSR, proc_oom_score_adj_operations),
 	                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#422: FILE: fs/proc/base.c:3155:
+	REG("oom_score_adj", S_IRUGO|S_IWUSR, proc_oom_score_adj_operations),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#462: FILE: include/linux/oom.h:40:
+extern unsigned int oom_badness(struct task_struct *p,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: include/linux/oom.h:41:
+extern unsigned int oom_badness(struct task_struct *p,
+			unsigned long totalpages, unsigned long uptime);

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#511: FILE: kernel/sysctl.c:963:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#548: FILE: mm/oom_kill.c:74:
+ * Tasks that fork a very large number of children with seperate address spaces
                                                         ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: mm/oom_kill.c:144:
+unsigned int oom_badness(struct task_struct *p, unsigned long totalpages,
+							unsigned long uptime)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#809: FILE: mm/oom_kill.c:235:
+			*totalpages += node_page_state(nid, NR_INACTIVE_ANON) +
 			^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#827: FILE: mm/oom_kill.c:251:
+			*totalpages += node_page_state(nid, NR_INACTIVE_ANON) +
 			^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: mm/oom_kill.c:275:
+static struct task_struct *select_bad_process(unsigned int *ppoints,
+		unsigned long totalpages, struct mem_cgroup *mem,

WARNING:SPLIT_STRING: quoted string split across lines
#896: FILE: mm/oom_kill.c:364:
 	printk(KERN_INFO "[ pid ]   uid  tgid total_vm      rss cpu oom_adj "
+	       "oom_score_adj name\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: mm/oom_kill.c:385:
+		pr_info("[%5d] %5d %5d %8lu %8lu %3d     %3d          %4d %s\n",
 		       p->pid, __task_cred(p)->uid, p->tgid, mm->total_vm,

WARNING:SPLIT_STRING: quoted string split across lines
#919: FILE: mm/oom_kill.c:396:
 	pr_warning("%s invoked oom-killer: gfp_mask=0x%x, order=%d, "
+		"oom_adj=%d, oom_score_adj=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: mm/oom_kill.c:493:
+	pr_err("%s: Kill process %d (%s) with score %d or sacrifice child\n",
 		message, task_pid_nr(p), p->comm, points);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: mm/oom_kill.c:532:
+	if (oom_kill_process(p, gfp_mask, 0, points, limit, mem,
 				"Memory cgroup out of memory"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: mm/oom_kill.c:607:
+static void __out_of_memory(gfp_t gfp_mask, int order, unsigned long totalpages,
 			enum oom_constraint constraint, const nodemask_t *mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: mm/oom_kill.c:614:
+		if (!oom_kill_process(current, gfp_mask, order, 0, totalpages,
+			NULL, "Out of memory (oom_kill_allocating_task)"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: mm/oom_kill.c:710:
+	constraint = constrained_alloc(zonelist, gfp_mask, nodemask,
+								&totalpages);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000011420.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 19 checks, 900 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000011420.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
