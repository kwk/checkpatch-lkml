WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#50: 
3. If we cant expand the vma, allocate a new vma.
         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: include/linux/ubp_xol.h:1:
+#ifndef _LINUX_XOL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#86: FILE: include/linux/ubp_xol.h:6:
+ * include/linux/ubp_xol.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#99: FILE: include/linux/ubp_xol.h:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#100: FILE: include/linux/ubp_xol.h:20:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: include/linux/ubp_xol.h:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/ubp_xol.h:27:
+extern unsigned long xol_get_insn_slot(struct ubp_bkpt *ubp, void *xol_area);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/ubp_xol.h:28:
+extern void xol_free_insn_slot(unsigned long, void *xol_area);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#108: FILE: include/linux/ubp_xol.h:28:
+extern void xol_free_insn_slot(unsigned long, void *xol_area);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/ubp_xol.h:29:
+extern int xol_validate_vaddr(struct pid *pid, unsigned long vaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: include/linux/ubp_xol.h:30:
+extern int xol_validate_vaddr(struct pid *pid, unsigned long vaddr,
+							void *xol_area);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/ubp_xol.h:31:
+extern void *xol_get_area(struct pid *pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/ubp_xol.h:32:
+extern void xol_put_area(void *xol_area);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: include/linux/ubp_xol.h:35:
+static inline unsigned long xol_get_insn_slot(struct ubp_bkpt *ubp,
+							void *xol_area)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#119: FILE: include/linux/ubp_xol.h:39:
+}
+static inline void xol_free_insn_slot(unsigned long slot_addr, void *xol_area)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#122: FILE: include/linux/ubp_xol.h:42:
+}
+static inline int xol_validate_vaddr(struct pid *pid, unsigned long vaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: include/linux/ubp_xol.h:43:
+static inline int xol_validate_vaddr(struct pid *pid, unsigned long vaddr,
+							void *xol_area)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#125: FILE: include/linux/ubp_xol.h:45:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#127: FILE: include/linux/ubp_xol.h:47:
+}
+static inline void *xol_get_area(struct pid *pid)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#131: FILE: include/linux/ubp_xol.h:51:
+}
+static inline void xol_put_area(void *xol_area)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#154: FILE: kernel/ubp_xol.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#157: FILE: kernel/ubp_xol.c:4:
+ * kernel/ubp_xol.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#170: FILE: kernel/ubp_xol.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#171: FILE: kernel/ubp_xol.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#193: FILE: kernel/ubp_xol.c:40:
+#define UINSNS_PER_PAGE	(PAGE_SIZE/UBP_XOL_SLOT_BYTES)
                        	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#241: FILE: kernel/ubp_xol.c:88:
+	struct ubp_xol_area *area = (struct ubp_xol_area *) xol_area;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: kernel/ubp_xol.c:126:
+	result = utrace_set_events_pid(pid, engine,
+		UTRACE_EVENT(EXEC) | UTRACE_EVENT(CLONE) | UTRACE_EVENT(EXIT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: kernel/ubp_xol.c:145:
+static u32 xol_report_clone(u32 action,
+				struct utrace_engine *engine,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: kernel/ubp_xol.c:152:
+		BUG_ON(!child_pid);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#307: FILE: kernel/ubp_xol.c:154:
+			(struct ubp_xol_area *) engine->data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: kernel/ubp_xol.c:164:
+static u32 xol_report_exec(u32 action,
+				struct utrace_engine *engine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: kernel/ubp_xol.c:174:
+static u32 xol_report_exit(u32 action, struct utrace_engine *engine,
+			long orig_code, long *code)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: kernel/ubp_xol.c:193:
+static void create_engine_sibling_threads(struct pid *start_pid,
+						struct ubp_xol_area *area)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: kernel/ubp_xol.c:213:
+			engine = utrace_attach_task(t,
+				UTRACE_ATTACH_MATCH_OPS,

CHECK:BRACES: braces {} should be used on all arms of this statement
#368: FILE: kernel/ubp_xol.c:215:
+			if (PTR_ERR(engine) == -ENOENT) {
[...]
+			} else if (!IS_ERR(engine))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: kernel/ubp_xol.c:245:
+	engine = utrace_attach_pid(tg_leader, UTRACE_ATTACH_MATCH_OPS,
+			&xol_engine_ops, NULL);

CHECK:SPACING: No space is necessary after a cast
#429: FILE: kernel/ubp_xol.c:276:
+	return (void *) area;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#455: FILE: kernel/ubp_xol.c:302:
+	BUG_ON(new_nslots < old_nslots);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#457: FILE: kernel/ubp_xol.c:304:
+	new_bitmap = kzalloc(BITS_TO_LONGS(new_nslots) * sizeof(long),
+								GFP_USER);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: kernel/ubp_xol.c:305:
+	new_bitmap = kzalloc(BITS_TO_LONGS(new_nslots) * sizeof(long),
+								GFP_USER);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#460: FILE: kernel/ubp_xol.c:307:
+		printk(KERN_ERR "ubp_xol: cannot %sallocate bitmap for XOL "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#460: FILE: kernel/ubp_xol.c:307:
+	if (!new_bitmap) {
+		printk(KERN_ERR "ubp_xol: cannot %sallocate bitmap for XOL "

WARNING:SPLIT_STRING: quoted string split across lines
#461: FILE: kernel/ubp_xol.c:308:
+		printk(KERN_ERR "ubp_xol: cannot %sallocate bitmap for XOL "
+			"area for pid/tgid %d/%d\n", (old_bitmap ? "re" : ""),

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: kernel/ubp_xol.c:314:
+		memcpy(new_bitmap, old_bitmap,
+				BITS_TO_LONGS(old_nslots) * sizeof(long));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*usv)...) over kzalloc(sizeof(struct ubp_xol_vma)...)
#475: FILE: kernel/ubp_xol.c:322:
+	usv = kzalloc(sizeof(struct ubp_xol_vma), GFP_USER);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#477: FILE: kernel/ubp_xol.c:324:
+		printk(KERN_ERR "ubp_xol: cannot allocate kmem for XOL vma"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#477: FILE: kernel/ubp_xol.c:324:
+	if (!usv) {
+		printk(KERN_ERR "ubp_xol: cannot allocate kmem for XOL vma"

WARNING:SPLIT_STRING: quoted string split across lines
#478: FILE: kernel/ubp_xol.c:325:
+		printk(KERN_ERR "ubp_xol: cannot allocate kmem for XOL vma"
+			" for pid/tgid %d/%d\n", current->pid, current->tgid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#522: FILE: kernel/ubp_xol.c:369:
+		printk(KERN_ERR "ubp_xol failed to setup shmem_file while "

WARNING:SPLIT_STRING: quoted string split across lines
#523: FILE: kernel/ubp_xol.c:370:
+		printk(KERN_ERR "ubp_xol failed to setup shmem_file while "
+			"allocating vma for pid/tgid %d/%d for "

WARNING:SPLIT_STRING: quoted string split across lines
#524: FILE: kernel/ubp_xol.c:371:
+			"allocating vma for pid/tgid %d/%d for "
+			"single-stepping out of line.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#532: FILE: kernel/ubp_xol.c:379:
+		printk(KERN_ERR "ubp_xol failed to allocate a vma for pid/tgid"

WARNING:SPLIT_STRING: quoted string split across lines
#533: FILE: kernel/ubp_xol.c:380:
+		printk(KERN_ERR "ubp_xol failed to allocate a vma for pid/tgid"
+				" %d/%d for single-stepping out of line.\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: kernel/ubp_xol.c:385:
+	BUG_ON(!vma);

CHECK:SPACING: No space is necessary after a cast
#570: FILE: kernel/ubp_xol.c:417:
+	new_nslots = (int) ((usv->npages + 1) * UINSNS_PER_PAGE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#584: FILE: kernel/ubp_xol.c:431:
+		printk(KERN_ERR "pid/tgid %d/%d: ubp XOL vma at %#lx"

WARNING:SPLIT_STRING: quoted string split across lines
#585: FILE: kernel/ubp_xol.c:432:
+		printk(KERN_ERR "pid/tgid %d/%d: ubp XOL vma at %#lx"
+			" has disappeared!\n", current->pid, current->tgid,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#591: FILE: kernel/ubp_xol.c:438:
+		printk(KERN_ERR "pid/tgid %d/%d: ubp XOL vma has been"

WARNING:SPLIT_STRING: quoted string split across lines
#592: FILE: kernel/ubp_xol.c:439:
+		printk(KERN_ERR "pid/tgid %d/%d: ubp XOL vma has been"
+			" altered: %#lx/%ld pages; should be %#lx/%d pages\n",

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#599: FILE: kernel/ubp_xol.c:446:
+	result = do_mremap(usv->vaddr, usv->npages*PAGE_SIZE, new_length, 0, 0);
 	                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#602: FILE: kernel/ubp_xol.c:449:
+		printk(KERN_WARNING "ubp_xol failed to expand the vma "

WARNING:SPLIT_STRING: quoted string split across lines
#603: FILE: kernel/ubp_xol.c:450:
+		printk(KERN_WARNING "ubp_xol failed to expand the vma "
+			"for pid/tgid %d/%d for single-stepping out of line.\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#607: FILE: kernel/ubp_xol.c:454:
+	BUG_ON(result != usv->vaddr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'area->tgid != current->tgid'
#651: FILE: kernel/ubp_xol.c:498:
+	if (!area->can_expand || (area->tgid != current->tgid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#659: FILE: kernel/ubp_xol.c:506:
+			printk(KERN_WARNING "Allocating additional vma.\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#687: FILE: kernel/ubp_xol.c:534:
+ * ^I- expanding the last vma or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#688: FILE: kernel/ubp_xol.c:535:
+ * ^I- adding a new vma.$

CHECK:SPACING: No space is necessary after a cast
#696: FILE: kernel/ubp_xol.c:543:
+	struct ubp_xol_area *area = (struct ubp_xol_area *) xol_area;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: kernel/ubp_xol.c:557:
+			len = access_process_vm(current, ubp->xol_vaddr,
+					ubp->insn, UBP_XOL_SLOT_BYTES, 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#712: FILE: kernel/ubp_xol.c:559:
+				printk(KERN_ERR "Failed to copy instruction"

WARNING:SPLIT_STRING: quoted string split across lines
#713: FILE: kernel/ubp_xol.c:560:
+				printk(KERN_ERR "Failed to copy instruction"
+						" at %#lx len = %d\n",

CHECK:SPACING: No space is necessary after a cast
#732: FILE: kernel/ubp_xol.c:579:
+	struct ubp_xol_area *area = (struct ubp_xol_area *) xol_area;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#742: FILE: kernel/ubp_xol.c:589:
+		unsigned long vma_end = usv->vaddr + usv->npages*PAGE_SIZE;
 		                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#743: FILE: kernel/ubp_xol.c:590:
+		unsigned long vma_end = usv->vaddr + usv->npages*PAGE_SIZE;
+		if (usv->vaddr <= slot_addr && slot_addr < vma_end) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: kernel/ubp_xol.c:593:
+			unsigned long offset = slot_addr - usv->vaddr;
+			BUG_ON(offset % UBP_XOL_SLOT_BYTES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#746: FILE: kernel/ubp_xol.c:593:
+			BUG_ON(offset % UBP_XOL_SLOT_BYTES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#748: FILE: kernel/ubp_xol.c:595:
+			BUG_ON(slot_nr >= usv->nslots);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#755: FILE: kernel/ubp_xol.c:602:
+		printk(KERN_ERR "%s: no XOL vma for slot address %#lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: kernel/ubp_xol.c:603:
+		printk(KERN_ERR "%s: no XOL vma for slot address %#lx\n",
+						__func__, slot_addr);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#762: FILE: kernel/ubp_xol.c:609:
+ * ^I- Return 0 if the specified virtual address is in an$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#763: FILE: kernel/ubp_xol.c:610:
+ * ^I  executable vma, but not in an XOL vma.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#764: FILE: kernel/ubp_xol.c:611:
+ * ^I- Return 1 if the specified virtual address is in an$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#765: FILE: kernel/ubp_xol.c:612:
+ * ^I  XOL vma.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#766: FILE: kernel/ubp_xol.c:613:
+ * ^I- Return -EINTR otherwise.(i.e non executable vma, or$

CHECK:SPACING: No space is necessary after a cast
#775: FILE: kernel/ubp_xol.c:622:
+	struct ubp_xol_area *area = (struct ubp_xol_area *) xol_area;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#789: FILE: kernel/ubp_xol.c:636:
+		unsigned long vma_end = usv->vaddr + usv->npages*PAGE_SIZE;
 		                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#790: FILE: kernel/ubp_xol.c:637:
+		unsigned long vma_end = usv->vaddr + usv->npages*PAGE_SIZE;
+		if (usv->vaddr <= vaddr && vaddr < vma_end) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025219.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 45 warnings, 38 checks, 717 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025219.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
