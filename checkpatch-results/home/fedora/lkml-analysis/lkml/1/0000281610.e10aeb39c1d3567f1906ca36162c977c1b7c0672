WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: include/linux/maze.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'reseted' may be misspelled - perhaps 'reset'?
#67: FILE: include/linux/maze.h:22:
+	/* The stime of task when the maze count was reseted */
 	                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'reseted' may be misspelled - perhaps 'reset'?
#69: FILE: include/linux/maze.h:24:
+	/* The utime of task when the maze count was reseted */
 	                                             ^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/maze.h:61:
+extern void maze_init_early(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/maze.h:64:
+extern void maze_exit(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/maze.h:67:
+extern void maze_fork(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/maze.h:70:
+extern void maze_sched_yield(struct task_struct *task);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#236: FILE: kernel/maze.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#260: FILE: kernel/maze.c:25:
+#define ERRPRINT(str, ...) printk("ERROR [%s] " str, __FUNCTION__, ##__VA_ARGS__);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#260: FILE: kernel/maze.c:25:
+#define ERRPRINT(str, ...) printk("ERROR [%s] " str, __FUNCTION__, ##__VA_ARGS__);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#260: FILE: kernel/maze.c:25:
+#define ERRPRINT(str, ...) printk("ERROR [%s] " str, __FUNCTION__, ##__VA_ARGS__);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#308: FILE: kernel/maze.c:73:
+								   task->maze_context->enqueue_cpu), flags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: kernel/maze.c:73:
+		spin_lock_irqsave(&per_cpu(maze_queue_lock,
+								   task->maze_context->enqueue_cpu), flags);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#312: FILE: kernel/maze.c:77:
+										task->maze_context->enqueue_cpu), flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: kernel/maze.c:77:
+		spin_unlock_irqrestore(&per_cpu(maze_queue_lock,
+										task->maze_context->enqueue_cpu), flags);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#325: FILE: kernel/maze.c:90:
+										 struct maze_context *from)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: kernel/maze.c:90:
+static inline void copy_limit_and_signal(struct maze_context *to,
+										 struct maze_context *from)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: kernel/maze.c:126:
+static void sched_out_event(struct preempt_notifier *notifier,
+							struct task_struct *next)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*task->maze_context)...) over kzalloc(sizeof(struct maze_context)...)
#386: FILE: kernel/maze.c:151:
+	task->maze_context = kzalloc(sizeof(struct maze_context), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 19)
#456: FILE: kernel/maze.c:221:
+		if (current == task)
+		   set_preempt_notifir(context);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: kernel/maze.c:241:
+	res = sscanf(read_line, "%d %ld %ld %d %d", &pid, &soft_limit,
+				 &hard_limit, &soft_signal, &hard_signal);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: kernel/maze.c:244:
+	if (res != 5 || pid < 0 ||
+		soft_limit < 0 || hard_limit < 0 ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#534: FILE: kernel/maze.c:299:
+		list_for_each_entry_safe (context, next,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#535: FILE: kernel/maze.c:300:
+								  &__get_cpu_var(maze_queue), queue) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: kernel/maze.c:300:
+		list_for_each_entry_safe (context, next,
+								  &__get_cpu_var(maze_queue), queue) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#547: FILE: kernel/maze.c:312:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#561: FILE: kernel/maze.c:326:
+		seq_printf(seq, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: kernel/maze.c:354:
+static ssize_t maze_entries_file_write(struct file *file,
+					const char __user *buffer,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*context)...) over kzalloc(sizeof(struct maze_context)...)
#607: FILE: kernel/maze.c:372:
+	context = kzalloc(sizeof(struct maze_context), GFP_ATOMIC);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#625: FILE: kernel/maze.c:390:
+static struct file_operations maze_entries_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: kernel/maze.c:406:
+		create_proc_entry("maze",
+						  S_IFDIR | S_IRUGO | S_IXUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#641: FILE: kernel/maze.c:406:
+						  S_IFDIR | S_IRUGO | S_IXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#650: FILE: kernel/maze.c:415:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#658: FILE: kernel/maze.c:423:
+	p = create_proc_entry("entries", S_IRUGO, maze_proc_dir);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#659: FILE: kernel/maze.c:424:
+	if (p == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#689: FILE: kernel/maze.c:454:
+	printk(KERN_INFO "Maze: Initializing\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 18 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
