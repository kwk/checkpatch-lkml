WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: drivers/dma/ioat_dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#72: FILE: drivers/dma/ioat_dma.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#101: FILE: drivers/dma/ioat_dma.c:44:
+static int __devinit ioat_probe(struct pci_dev *pdev, const struct pci_device_id *ent);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#103: FILE: drivers/dma/ioat_dma.c:46:
+static void __devexit ioat_remove(struct pci_dev *pdev);

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: drivers/dma/ioat_dma.c:76:
+^I^I              &device->common.channels);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#151: FILE: drivers/dma/ioat_dma.c:94:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#184: FILE: drivers/dma/ioat_dma.c:127:
+	ioat_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/dma/ioat_dma.c:143:
+		writeb(IOAT_CHANCMD_APPEND,
+			ioat_chan->reg_base + IOAT_CHANCMD_OFFSET);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: drivers/dma/ioat_dma.c:144:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#205: FILE: drivers/dma/ioat_dma.c:148:
+static struct ioat_desc_sw *ioat_dma_alloc_descriptor(

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: drivers/dma/ioat_dma.c:198:
+        /* Setup register to interrupt and write completion status on error */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: drivers/dma/ioat_dma.c:202:
+        writew(chanctrl, ioat_chan->reg_base + IOAT_CHANCTRL_OFFSET);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: drivers/dma/ioat_dma.c:202:
+        writew(chanctrl, ioat_chan->reg_base + IOAT_CHANCTRL_OFFSET);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#263: FILE: drivers/dma/ioat_dma.c:206:
+		printk("IOAT: CHANERR = %x, clearing\n", chanerr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#271: FILE: drivers/dma/ioat_dma.c:214:
+			printk(KERN_ERR "IOAT: Only %d initial descriptors\n", i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: drivers/dma/ioat_dma.c:227:
+^I^I               GFP_KERNEL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: drivers/dma/ioat_dma.c:228:
+^I^I               &ioat_chan->completion_addr);$

CHECK:SPACING: No space is necessary after a cast
#288: FILE: drivers/dma/ioat_dma.c:231:
+	writel(((u64) ioat_chan->completion_addr) & 0x00000000FFFFFFFF,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#290: FILE: drivers/dma/ioat_dma.c:233:
+	writel(((u64) ioat_chan->completion_addr) >> 32,

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: drivers/dma/ioat_dma.c:271:
+^I              ioat_chan->completion_virt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: drivers/dma/ioat_dma.c:272:
+^I              ioat_chan->completion_addr);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#333: FILE: drivers/dma/ioat_dma.c:276:
+		printk(KERN_ERR "IOAT: Freeing %d in use descriptors!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: drivers/dma/ioat_dma.c:277:
+		printk(KERN_ERR "IOAT: Freeing %d in use descriptors!\n",
+			in_use_descs - 1);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#336: FILE: drivers/dma/ioat_dma.c:279:
+	ioat_chan->last_completion = ioat_chan->completion_addr = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: drivers/dma/ioat_dma.c:310:
+			BUG_ON(!new);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#370: FILE: drivers/dma/ioat_dma.c:313:
+		copy = min((u32) len, ioat_chan->xfercap);

CHECK:SPACING: No space is necessary after a cast
#381: FILE: drivers/dma/ioat_dma.c:324:
+			prev->hw->next = (u64) new->async_tx.phys;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#403: FILE: drivers/dma/ioat_dma.c:346:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#432: FILE: drivers/dma/ioat_dma.c:375:
+	/* The completion writeback can happen at any time,
+	   so reads by the driver need to be atomic operations

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#434: FILE: drivers/dma/ioat_dma.c:377:
+	   when the CPU can only do a 32-bit mov */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#445: FILE: drivers/dma/ioat_dma.c:388:
+		printk("IOAT: Channel halted, chanerr = %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: drivers/dma/ioat_dma.c:389:
+		printk("IOAT: Channel halted, chanerr = %x\n",
+			readl(chan->reg_base + IOAT_CHANERR_OFFSET));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#458: FILE: drivers/dma/ioat_dma.c:401:
+	list_for_each_entry_safe(desc, _desc, &chan->used_desc, node) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#468: FILE: drivers/dma/ioat_dma.c:411:
+			/* yes we are unmapping both _page and _single alloc'd
+			   regions with unmap_page. Is this *really* that bad?

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: drivers/dma/ioat_dma.c:414:
+			pci_unmap_page(chan->device->pdev,
+					pci_unmap_addr(desc, dst),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: drivers/dma/ioat_dma.c:418:
+			pci_unmap_page(chan->device->pdev,
+					pci_unmap_addr(desc, src),

CHECK:BRACES: braces {} should be used on all arms of this statement
#484: FILE: drivers/dma/ioat_dma.c:427:
+			if (desc->async_tx.ack) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#487: FILE: drivers/dma/ioat_dma.c:430:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#491: FILE: drivers/dma/ioat_dma.c:434:
+			/* last used desc. Do not remove, so we can append from
+			   it, but don't look at it next time, either */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#491: FILE: drivers/dma/ioat_dma.c:434:
+			   it, but don't look at it next time, either */

WARNING:LINE_SPACING: Missing a blank line after declarations
#511: FILE: drivers/dma/ioat_dma.c:454:
+	struct ioat_dma_chan *ioat_chan = to_ioat_chan(chan);
+	spin_lock_bh(&ioat_chan->desc_lock);

CHECK:BRACES: braces {} should be used on all arms of this statement
#512: FILE: drivers/dma/ioat_dma.c:455:
+	if (ioat_chan->pending == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#515: FILE: drivers/dma/ioat_dma.c:458:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: drivers/dma/ioat_dma.c:471:
+                                            dma_cookie_t cookie,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/dma/ioat_dma.c:471:
+                                            dma_cookie_t cookie,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: drivers/dma/ioat_dma.c:472:
+                                            dma_cookie_t *done,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/dma/ioat_dma.c:472:
+                                            dma_cookie_t *done,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: drivers/dma/ioat_dma.c:473:
+                                            dma_cookie_t *used)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: drivers/dma/ioat_dma.c:473:
+                                            dma_cookie_t *used)$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#541: FILE: drivers/dma/ioat_dma.c:484:
+		*done= last_complete;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#555: FILE: drivers/dma/ioat_dma.c:498:
+		*done= last_complete;
 		     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: drivers/dma/ioat_dma.c:516:
+^I.name ^I= "ioatdma",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#598: FILE: drivers/dma/ioat_dma.c:541:
+	printk(KERN_ERR "ioatdma error: interrupt! status %lx\n", attnstatus);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: drivers/dma/ioat_dma.c:562:
+		BUG_ON(!desc);

CHECK:SPACING: No space is necessary after a cast
#629: FILE: drivers/dma/ioat_dma.c:572:
+	writel(((u64) desc->async_tx.phys) & 0x00000000FFFFFFFF,

CHECK:SPACING: No space is necessary after a cast
#631: FILE: drivers/dma/ioat_dma.c:574:
+	writel(((u64) desc->async_tx.phys) >> 32,

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: drivers/dma/ioat_dma.c:611:
+^I                        struct dma_chan,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: drivers/dma/ioat_dma.c:612:
+^I                        device_node);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/dma/ioat_dma.c:621:
+	addr = dma_map_single(dma_chan->device->dev, src, IOAT_TEST_SIZE,
+			DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: drivers/dma/ioat_dma.c:624:
+	addr = dma_map_single(dma_chan->device->dev, dest, IOAT_TEST_SIZE,
+			DMA_FROM_DEVICE);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#685: FILE: drivers/dma/ioat_dma.c:628:
+	msleep(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#688: FILE: drivers/dma/ioat_dma.c:631:
+		printk(KERN_ERR "ioatdma: Self-test copy timed out, disabling\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#693: FILE: drivers/dma/ioat_dma.c:636:
+		printk(KERN_ERR "ioatdma: Self-test copy failed compare, disabling\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#706: FILE: drivers/dma/ioat_dma.c:649:
+static int __devinit ioat_probe(struct pci_dev *pdev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#707: FILE: drivers/dma/ioat_dma.c:650:
+                                const struct pci_device_id *ent)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: drivers/dma/ioat_dma.c:650:
+                                const struct pci_device_id *ent)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: drivers/dma/ioat_dma.c:688:
+	device->dma_pool = pci_pool_create("dma_desc_pool", pdev,
+		sizeof(struct ioat_dma_descriptor), 64, 0);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#751: FILE: drivers/dma/ioat_dma.c:694:
+	device->completion_pool = pci_pool_create("completion_pool", pdev, sizeof(u64), SMP_CACHE_BYTES, SMP_CACHE_BYTES);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#760: FILE: drivers/dma/ioat_dma.c:703:
+	if (pci_enable_msi(pdev) == 0) {
[...]
+	} else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: drivers/dma/ioat_dma.c:710:
+	err = request_irq(pdev->irq, &ioat_do_interrupt, IRQF_SHARED, "ioat",
+		device);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#787: FILE: drivers/dma/ioat_dma.c:730:
+	printk(KERN_INFO "Intel(R) I/OAT DMA Engine found, %d channels\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: drivers/dma/ioat_dma.c:731:
+	printk(KERN_INFO "Intel(R) I/OAT DMA Engine found, %d channels\n",
+		device->common.chancnt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#814: FILE: drivers/dma/ioat_dma.c:757:
+	printk(KERN_ERR "Intel(R) I/OAT DMA Engine initialization failed\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#822: FILE: drivers/dma/ioat_dma.c:765:
+	struct ioat_device *device;
+	device = pci_get_drvdata(pdev);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#827: FILE: drivers/dma/ioat_dma.c:770:
+static void __devexit ioat_remove(struct pci_dev *pdev)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 33 warnings, 26 checks, 823 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
