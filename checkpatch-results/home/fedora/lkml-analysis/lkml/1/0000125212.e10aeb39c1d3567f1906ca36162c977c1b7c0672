ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#88: FILE: drivers/mfd/ab3100-core.c

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: drivers/mfd/ab3100-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ab3100_event_mask' should also have an identifier name
#189: FILE: drivers/mfd/ab3100-core.c:97:
+	void (*cb_handler)(struct ab3100_event_mask, void *client_data);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#191: FILE: drivers/mfd/ab3100-core.c:99:
+};
+/* The event list */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - u8 ab3100_get_chip_type() should probably be u8 ab3100_get_chip_type(void)
#198: FILE: drivers/mfd/ab3100-core.c:106:
+u8 ab3100_get_chip_type()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/mfd/ab3100-core.c:145:
+	if ((i2c_transfer(ab3100_i2c_client->adapter,
+					&msgs[0], 1)) != 1) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/mfd/ab3100-core.c:147:
+		dev_err(&ab3100_i2c_client->dev,
+				"%s: write error (write register)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: drivers/mfd/ab3100-core.c:226:
+		dev_err(&ab3100_i2c_client->dev,
+				"%s: read error (send register address)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: drivers/mfd/ab3100-core.c:234:
+		dev_err(&ab3100_i2c_client->dev,
+				"%s: read error (read register value)\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev == NULL'
#411: FILE: drivers/mfd/ab3100-core.c:319:
+	if ((dev == NULL) ||
+	    ((subscribe_mask->event1 == 0) &&
+	     (subscribe_mask->event2 == 0) &&
+	     (subscribe_mask->event3 == 0)) ||
+	    cb_handler == NULL)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'subscribe_mask->event1 == 0'
#411: FILE: drivers/mfd/ab3100-core.c:319:
+	if ((dev == NULL) ||
+	    ((subscribe_mask->event1 == 0) &&
+	     (subscribe_mask->event2 == 0) &&
+	     (subscribe_mask->event3 == 0)) ||
+	    cb_handler == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'subscribe_mask->event2 == 0'
#411: FILE: drivers/mfd/ab3100-core.c:319:
+	if ((dev == NULL) ||
+	    ((subscribe_mask->event1 == 0) &&
+	     (subscribe_mask->event2 == 0) &&
+	     (subscribe_mask->event3 == 0)) ||
+	    cb_handler == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'subscribe_mask->event3 == 0'
#411: FILE: drivers/mfd/ab3100-core.c:319:
+	if ((dev == NULL) ||
+	    ((subscribe_mask->event1 == 0) &&
+	     (subscribe_mask->event2 == 0) &&
+	     (subscribe_mask->event3 == 0)) ||
+	    cb_handler == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#411: FILE: drivers/mfd/ab3100-core.c:319:
+	if ((dev == NULL) ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cb_handler"
#415: FILE: drivers/mfd/ab3100-core.c:323:
+	    cb_handler == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct event)...)
#418: FILE: drivers/mfd/ab3100-core.c:326:
+	p = kmalloc(sizeof(struct event), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: drivers/mfd/ab3100-core.c:366:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#519: FILE: drivers/mfd/ab3100-core.c:427:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#520: FILE: drivers/mfd/ab3100-core.c:428:
+}
+static DECLARE_WORK(ab3100_work, &ab3100_work_cb);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#544: FILE: drivers/mfd/ab3100-core.c:452:
+	seq_printf(s, "AB3100 registers:\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#558: FILE: drivers/mfd/ab3100-core.c:466:
+static struct file_operations ab3100_registers_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: No space is necessary after a cast
#576: FILE: drivers/mfd/ab3100-core.c:484:
+	int mode = (int) file->private_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#585: FILE: drivers/mfd/ab3100-core.c:493:
+	buf_size = min(count, (sizeof(buf)-1));
 	                                  ^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#609: FILE: drivers/mfd/ab3100-core.c:517:
+	err = strict_strtoul(&buf[regp], 16, &user_reg);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#618: FILE: drivers/mfd/ab3100-core.c:526:
+		u8 reg = (u8) user_reg;

CHECK:SPACING: No space is necessary after a cast
#629: FILE: drivers/mfd/ab3100-core.c:537:
+		u8 reg = (u8) user_reg;

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#646: FILE: drivers/mfd/ab3100-core.c:554:
+		err = strict_strtoul(&buf[valp], 16, &user_value);

CHECK:SPACING: No space is necessary after a cast
#652: FILE: drivers/mfd/ab3100-core.c:560:
+		value = (u8) user_value;

WARNING:SPLIT_STRING: quoted string split across lines
#658: FILE: drivers/mfd/ab3100-core.c:566:
+			 "debug write reg[0x%02x] with 0x%02x, "
+			 "after readback: 0x%02x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/mfd/ab3100-core.c:591:
+	ab3100_reg_file = debugfs_create_file("registers",
+				S_IRUGO, ab3100_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#683: FILE: drivers/mfd/ab3100-core.c:591:
+				S_IRUGO, ab3100_dir, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: drivers/mfd/ab3100-core.c:599:
+	ab3100_get_reg_file = debugfs_create_file("get_reg",
+				S_IRUGO, ab3100_dir, (void *) 0,

CHECK:SPACING: No space is necessary after a cast
#691: FILE: drivers/mfd/ab3100-core.c:599:
+				S_IRUGO, ab3100_dir, (void *) 0,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#691: FILE: drivers/mfd/ab3100-core.c:599:
+				S_IRUGO, ab3100_dir, (void *) 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: drivers/mfd/ab3100-core.c:607:
+	ab3100_set_reg_file = debugfs_create_file("set_reg",
+				S_IRUGO, ab3100_dir, (void *) 1,

CHECK:SPACING: No space is necessary after a cast
#699: FILE: drivers/mfd/ab3100-core.c:607:
+				S_IRUGO, ab3100_dir, (void *) 1,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#699: FILE: drivers/mfd/ab3100-core.c:607:
+				S_IRUGO, ab3100_dir, (void *) 1,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#716: FILE: drivers/mfd/ab3100-core.c:624:
+}
+static inline void ab3100_remove_debugfs(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#727: FILE: drivers/mfd/ab3100-core.c:635:
+}
+static inline void ab3100_remove_debugfs(void)

WARNING:TYPO_SPELLING: 'registe' may be misspelled - perhaps 'register'?
#800: FILE: drivers/mfd/ab3100-core.c:708:
+	 * bit 3 in test registe 0x02 is a special, undocumented test
 	                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#806: FILE: drivers/mfd/ab3100-core.c:714:
+			 "AB3100 P1E variant detected, "
+			 "forcing chip to 32KHz\n");

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#819: FILE: drivers/mfd/ab3100-core.c:727:
+const struct ab_family_id ids[] __initdata = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: drivers/mfd/ab3100-core.c:749:
+static int __init ab3100_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)

WARNING:SPLIT_STRING: quoted string split across lines
#854: FILE: drivers/mfd/ab3100-core.c:762:
+			"could not detect i2c bus for AB3100 analog"
+			"baseband chip\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#854: FILE: drivers/mfd/ab3100-core.c:762:
+			"could not detect i2c bus for AB3100 analog"
+			"baseband chip\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ids[i].name"
#860: FILE: drivers/mfd/ab3100-core.c:768:
+			if (ids[i].name != NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#864: FILE: drivers/mfd/ab3100-core.c:772:
+				break;
+			} else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#908: FILE: drivers/mfd/ab3100-core.c:816:
+	list_for_each_entry(e, &subscribers, node) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#955: FILE: include/linux/mfd/ab3100.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ab3100_event_mask' should also have an identifier name
#1023: FILE: include/linux/mfd/ab3100.h:69:
+int ab3100_event_cb_register(struct device *dev, void

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#1024: FILE: include/linux/mfd/ab3100.h:69:
(*cb_handler)(struct ab3100_event_mask, void *client_data), struct

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000125212.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 19 warnings, 29 checks, 959 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000125212.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
