WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#115: FILE: include/asm-x86/ds.h:37:
+ * Due to alignement constraints, the actual buffer may be slightly
           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/asm-x86/ds.h:51:
+extern int ds_request_bts(struct task_struct *task, void *base, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/asm-x86/ds.h:53:
+extern int ds_request_pebs(struct task_struct *task, void *base, size_t size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/asm-x86/ds.h:66:
+extern int ds_release_bts(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/asm-x86/ds.h:67:
+extern int ds_release_pebs(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/asm-x86/ds.h:79:
+extern int ds_get_bts_index(struct task_struct *task, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/asm-x86/ds.h:80:
+extern int ds_get_pebs_index(struct task_struct *task, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/asm-x86/ds.h:92:
+extern int ds_get_bts_end(struct task_struct *task, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/asm-x86/ds.h:93:
+extern int ds_get_pebs_end(struct task_struct *task, size_t *pos);

WARNING:REPEATED_WORD: Possible repeated word: 'record'
#191: FILE: include/asm-x86/ds.h:107:
+ * index: the index of the requested record
+ * record (out): pointer to the requested record

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/asm-x86/ds.h:109:
+extern int ds_access_bts(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/asm-x86/ds.h:111:
+extern int ds_access_pebs(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/asm-x86/ds.h:136:
+extern int ds_write_bts(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/asm-x86/ds.h:138:
+extern int ds_write_pebs(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/asm-x86/ds.h:148:
+extern int ds_unchecked_write_bts(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: include/asm-x86/ds.h:150:
+extern int ds_unchecked_write_pebs(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/asm-x86/ds.h:161:
+extern int ds_reset_bts(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/asm-x86/ds.h:162:
+extern int ds_reset_pebs(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/asm-x86/ds.h:173:
+extern int ds_clear_bts(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/asm-x86/ds.h:174:
+extern int ds_clear_pebs(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/asm-x86/ds.h:185:
+extern int ds_get_pebs_reset(struct task_struct *task, u64 *value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/asm-x86/ds.h:196:
+extern int ds_set_pebs_reset(struct task_struct *task, u64 value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/asm-x86/ds.h:202:
+extern void __cpuinit ds_init_intel(struct cpuinfo_x86 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuinfo_x86 *' should also have an identifier name
#298: FILE: include/asm-x86/ds.h:202:
+extern void __cpuinit ds_init_intel(struct cpuinfo_x86 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: include/asm-x86/ds.h:204:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#319: FILE: include/asm-x86/ds.h:223:
+	 * or the per_cpu context array */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: include/asm-x86/ds.h:226:
+	 * context is owned by a cpu */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: include/asm-x86/ds.h:231:
+extern void ds_free(struct ds_context *context);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#359: FILE: include/asm-x86/ptrace.h:128:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#382: FILE: include/asm-x86/ptrace.h:151:
+		/* BTS_TASK_ARRIVES or
+		   BTS_TASK_DEPARTS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#382: FILE: include/asm-x86/ptrace.h:151:
+		   BTS_TASK_DEPARTS */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#398: FILE: include/asm-x86/ptrace.h:165:
+extern void __cpuinit ptrace_bts_init_intel(struct cpuinfo_x86 *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#427: FILE: arch/x86/kernel/ptrace.c:569:
+};
+static struct bts_configuration bts_cfg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: arch/x86/kernel/ptrace.c:573:
+
+

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#475: FILE: arch/x86/kernel/ptrace.c:614:
+	base += (bts_cfg.sizeof_field * field);;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#792: FILE: arch/x86/kernel/ptrace.c:838:
+	BUG_ON(BTS_MAX_RECORD_SIZE < bts_cfg.sizeof_bts);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#792: FILE: arch/x86/kernel/ptrace.c:838:
+	BUG_ON(BTS_MAX_RECORD_SIZE < bts_cfg.sizeof_bts);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#885: FILE: arch/x86/kernel/ptrace.c:863:
+	 * buffer. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#899: FILE: arch/x86/kernel/ptrace.c:881:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#899: FILE: arch/x86/kernel/ptrace.c:881:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#899: FILE: arch/x86/kernel/ptrace.c:881:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#899: FILE: arch/x86/kernel/ptrace.c:881:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#899: FILE: arch/x86/kernel/ptrace.c:881:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#905: FILE: arch/x86/kernel/ptrace.c:887:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#905: FILE: arch/x86/kernel/ptrace.c:887:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#905: FILE: arch/x86/kernel/ptrace.c:887:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#911: FILE: arch/x86/kernel/ptrace.c:893:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#911: FILE: arch/x86/kernel/ptrace.c:893:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#911: FILE: arch/x86/kernel/ptrace.c:893:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#911: FILE: arch/x86/kernel/ptrace.c:893:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#911: FILE: arch/x86/kernel/ptrace.c:893:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                                 ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#923: FILE: arch/x86/kernel/ptrace.c:905:
+		switch (c->x86_model) {
[...]
+        case 0x1C: /* Atom */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#929: FILE: arch/x86/kernel/ptrace.c:911:
+        case 0x1C: /* Atom */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: arch/x86/kernel/ptrace.c:911:
+        case 0x1C: /* Atom */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1070: FILE: arch/x86/kernel/ds.c:23:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1080: FILE: arch/x86/kernel/ds.c:33:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1088: FILE: arch/x86/kernel/ds.c:41:
+	/* the size of one pointer-typed field in the DS structure in bytes;
+	   this covers the first 8 fields related to buffer management. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1088: FILE: arch/x86/kernel/ds.c:41:
+	   this covers the first 8 fields related to buffer management. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1093: FILE: arch/x86/kernel/ds.c:46:
+};
+static struct ds_configuration ds_cfg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1171: FILE: arch/x86/kernel/ds.c:111:
+
+

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1262: FILE: arch/x86/kernel/ds.c:174:
+	return (task ? (tracers >= 0) : (tracers <= 0));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1266: FILE: arch/x86/kernel/ds.c:177:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task == current'
#1349: FILE: arch/x86/kernel/ds.c:257:
+		if (!task || (task == current))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->this
#1376: FILE: arch/x86/kernel/ds.c:282:
+	*(context->this) = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'context->task == current'
#1381: FILE: arch/x86/kernel/ds.c:287:
+	if (!context->task || (context->task == current))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1387: FILE: arch/x86/kernel/ds.c:293:
+	 * deallocate them properly. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1397: FILE: arch/x86/kernel/ds.c:302:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1420: FILE: arch/x86/kernel/ds.c:323:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1483: FILE: arch/x86/kernel/ds.c:383:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1504: FILE: arch/x86/kernel/ds.c:404:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1538: FILE: arch/x86/kernel/ds.c:438:
+	if (ovfl) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1540: FILE: arch/x86/kernel/ds.c:440:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1828: FILE: arch/x86/kernel/ds.c:657:
+		 * we fill the entire buffer */

CHECK:SPACING: No space is necessary after a cast
#1835: FILE: arch/x86/kernel/ds.c:664:
+		write_size = min((unsigned long) size, write_end - index);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2100: FILE: arch/x86/kernel/ds.c:805:
 };
+static const struct ds_configuration ds_cfg_64 = {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2111: FILE: arch/x86/kernel/ds.c:822:
 		switch (c->x86_model) {
[...]
+        case 0x1C: /* Atom */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2121: FILE: arch/x86/kernel/ds.c:828:
+        case 0x1C: /* Atom */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2121: FILE: arch/x86/kernel/ds.c:828:
+        case 0x1C: /* Atom */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2150: FILE: arch/x86/kernel/ds.c:858:
+	 * to disturb us, anymore. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2152: FILE: arch/x86/kernel/ds.c:860:
+	unsigned long leftovers = context->count;
+	while (leftovers--)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2416: FILE: arch/x86/Kconfig.cpu:415:
+config X86_DS
+	bool "Debug Store support"
+	default y
+	help
+	  Add support for Debug Store.
+	  This allows the kernel to provide a memory buffer to the hardware
+	  to store various profiling and tracing events.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 20 warnings, 56 checks, 2294 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
