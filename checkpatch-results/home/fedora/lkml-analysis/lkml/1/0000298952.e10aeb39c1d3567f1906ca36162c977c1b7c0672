CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/mm.h:1060:
+extern void mm_lock(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: include/linux/mm.h:1061:
+extern void mm_unlock(struct mm_struct *mm);

CHECK:SPACING: No space is necessary after a cast
#77: FILE: mm/mmap.c:2253:
+		spinlock_t *i_mmap_lock = (spinlock_t *) -1UL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#78: FILE: mm/mmap.c:2254:
+		spinlock_t *i_mmap_lock = (spinlock_t *) -1UL;
+		for (vma = mm->mmap; vma; vma = vma->vm_next)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#80: FILE: mm/mmap.c:2256:
+			    (unsigned long) i_mmap_lock >

CHECK:SPACING: No space is necessary after a cast
#85: FILE: mm/mmap.c:2261:
+			    (unsigned long) i_mmap_lock_last)

CHECK:SPACING: No space is necessary after a cast
#88: FILE: mm/mmap.c:2264:
+		if (i_mmap_lock == (spinlock_t *) -1UL)

CHECK:SPACING: No space is necessary after a cast
#99: FILE: mm/mmap.c:2275:
+		spinlock_t *anon_vma_lock = (spinlock_t *) -1UL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#100: FILE: mm/mmap.c:2276:
+		spinlock_t *anon_vma_lock = (spinlock_t *) -1UL;
+		for (vma = mm->mmap; vma; vma = vma->vm_next)

CHECK:SPACING: No space is necessary after a cast
#102: FILE: mm/mmap.c:2278:
+			    (unsigned long) anon_vma_lock >

CHECK:SPACING: No space is necessary after a cast
#103: FILE: mm/mmap.c:2279:
+			    (unsigned long) &vma->anon_vma->lock &&

CHECK:SPACING: No space is necessary after a cast
#104: FILE: mm/mmap.c:2280:
+			    (unsigned long) &vma->anon_vma->lock >

CHECK:SPACING: No space is necessary after a cast
#105: FILE: mm/mmap.c:2281:
+			    (unsigned long) anon_vma_lock_last)

CHECK:SPACING: No space is necessary after a cast
#107: FILE: mm/mmap.c:2283:
+		if (anon_vma_lock == (spinlock_t *) -1UL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: mm/mmap.c:2300:
+void mm_lock(struct mm_struct * mm)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 12 checks, 85 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
