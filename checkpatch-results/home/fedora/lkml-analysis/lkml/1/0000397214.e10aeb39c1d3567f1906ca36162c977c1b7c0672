CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#58: FILE: arch/ia64/sn/kernel/huberror.c:188:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#75: FILE: arch/ia64/sn/kernel/huberror.c:208:
 {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: arch/ia64/sn/kernel/huberror.c:211:
+             (void *)hubdev_info)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: arch/ia64/sn/kernel/huberror.c:211:
+             (void *)hubdev_info)) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#187: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:443:
+	if (is_shub2() && sn_prom_feature_available(PRF_CPU_DISABLE_SUPPORT)) {
[...]
+	} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#190: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:446:
+			return true;
+		else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#191: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:447:
+			printk("Disabling the boot processor is not allowed.\n");

CHECK:BRACES: Unbalanced braces around else statement
#193: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:449:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#194: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:450:
+		printk("CPU disable is not supported on this system.\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/asm-ia64/sn/arch.h:84:
+extern bool sn_cpu_disable_allowed(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: arch/ia64/sn/kernel/irq.c:240:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: arch/ia64/sn/kernel/irq.c:241:
+         * On systems which support CPU disabling (SHub2), all error interrupts$

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#235: FILE: arch/ia64/sn/kernel/irq.c:242:
+         * are targetted at the boot CPU.
                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: arch/ia64/sn/kernel/irq.c:242:
+         * are targetted at the boot CPU.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: arch/ia64/sn/kernel/irq.c:243:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: arch/ia64/sn/kernel/irq.c:244:
+        if (is_shub2() && sn_prom_feature_available(PRF_CPU_DISABLE_SUPPORT))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: arch/ia64/sn/kernel/irq.c:244:
+        if (is_shub2() && sn_prom_feature_available(PRF_CPU_DISABLE_SUPPORT))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: arch/ia64/sn/kernel/irq.c:245:
+                set_irq_affinity_info(irq, cpu_physical_id(0), 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: arch/ia64/sn/kernel/irq.c:245:
+                set_irq_affinity_info(irq, cpu_physical_id(0), 0);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/asm-ia64/sn/intr.h:63:
+extern void sn_set_err_irq_affinity(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#255: FILE: include/asm-ia64/sn/intr.h:63:
+extern void sn_set_err_irq_affinity(unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 8 warnings, 6 checks, 155 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
