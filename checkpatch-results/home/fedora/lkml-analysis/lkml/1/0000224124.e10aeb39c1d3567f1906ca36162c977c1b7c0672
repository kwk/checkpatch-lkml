WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
>>     This turns out to be awful in practice, mainly due to const.  Consider:

WARNING:BAD_SIGN_OFF: Non-standard signature: 'Signed-of-by:' - perhaps 'Signed-off-by:'?
#124: 
Signed-of-by: Mike Travis <travis@sgi.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#210: FILE: include/linux/cpumask.h:100:
+struct __cpumask_data_s { DECLARE_BITMAP(bits, NR_CPUS); };

WARNING:NEW_TYPEDEFS: do not add new typedefs
#213: FILE: include/linux/cpumask.h:103:
+typedef struct __cpumask_data_s cpumask_map_t[1];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#216: FILE: include/linux/cpumask.h:106:
+typedef struct __cpumask_data_s *cpumask_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#223: FILE: include/linux/cpumask.h:113:
+typedef struct __cpumask_data_s	cpumask_var_t[1];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#229: FILE: include/linux/cpumask.h:119:
+#define for_each_cpu_mask(cpu, mask)	\
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#246: FILE: include/linux/cpumask.h:136:
+typedef struct __cpumask_data_s	cpumask_var_t[1];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#256: FILE: include/linux/cpumask.h:146:
+typedef struct __cpumask_data_s	*cpumask_var_t;

WARNING:SIZEOF_PARENTHESIS: sizeof BITS_TO_LONGS should be sizeof(BITS_TO_LONGS)
#259: FILE: include/linux/cpumask.h:149:
+	return sizeof BITS_TO_LONGS(nr_cpu_ids) * sizeof(long);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#272: FILE: include/linux/cpumask.h:162:
+#define for_each_cpu_mask(cpu, mask)			\
+	for ((cpu) = -1;				\
+		(cpu) = next_cpu((cpu), (mask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#275: FILE: include/linux/cpumask.h:165:
+		(cpu) < nr_cpu_ids; )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#289: FILE: include/linux/cpumask.h:177:
+static inline void __cpu_set(int cpu, volatile cpumask_t dstp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#297: FILE: include/linux/cpumask.h:183:
+static inline void __cpu_clear(int cpu, volatile cpumask_t dstp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: include/linux/cpumask.h:217:
+static inline void __cpus_and(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: include/linux/cpumask.h:224:
+static inline void __cpus_or(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: include/linux/cpumask.h:231:
+static inline void __cpus_xor(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: include/linux/cpumask.h:239:
+static inline void __cpus_andnot(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: include/linux/cpumask.h:246:
+static inline void __cpus_complement(cpumask_t dstp,
+					const cpumask_t srcp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: include/linux/cpumask.h:253:
+static inline int __cpus_equal(const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: include/linux/cpumask.h:260:
+static inline int __cpus_intersects(const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: include/linux/cpumask.h:267:
+static inline int __cpus_subset(const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: include/linux/cpumask.h:293:
+static inline void __cpus_shift_right(cpumask_t dstp,
+					const cpumask_t srcp, int n, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: include/linux/cpumask.h:301:
+static inline void __cpus_shift_left(cpumask_t dstp,
+					const cpumask_t srcp, int n, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: include/linux/cpumask.h:409:
+static inline void __cpus_remap(cpumask_t dstp, const cpumask_t srcp,
+		const cpumask_t oldp, const cpumask_t newp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: include/linux/cpumask.h:417:
+static inline void __cpus_onto(cpumask_t dstp, const cpumask_t origp,
+		const cpumask_t relmapp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: include/linux/cpumask.h:425:
+static inline void __cpus_fold(cpumask_t dstp, const cpumask_t origp,
 		int sz, int nbits)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224124.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 15 checks, 553 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224124.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
