WARNING:TYPO_SPELLING: 'outputing' may be misspelled - perhaps 'outputting'?
#35: 
The trace output is very verbose with outputing both the
                                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
CPU 1: swapper:0 smp_apic_timer_interrupt+0xc/0x58 <-- apic_timer_interrupt+0x66/0x70

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#165: FILE: lib/mcount/tracer.c:207:
+			  struct seq_operations *seq_ops)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#195: FILE: lib/mcount/tracer.c:245:
+#define seq_print_ip_sym(m, ip, sym_only)		\
+do {							\
+	if (!sym_only)					\
+		seq_printf(m, "[<%08lx>] ", ip);	\
+	seq_print_symbol(m, "%s", ip);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#195: FILE: lib/mcount/tracer.c:245:
+#define seq_print_ip_sym(m, ip, sym_only)		\
+do {							\
+	if (!sym_only)					\
+		seq_printf(m, "[<%08lx>] ", ip);	\
+	seq_print_symbol(m, "%s", ip);			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym_only' may be better as '(sym_only)' to avoid precedence issues
#195: FILE: lib/mcount/tracer.c:245:
+#define seq_print_ip_sym(m, ip, sym_only)		\
+do {							\
+	if (!sym_only)					\
+		seq_printf(m, "[<%08lx>] ", ip);	\
+	seq_print_symbol(m, "%s", ip);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#202: FILE: lib/mcount/tracer.c:252:
+#define seq_print_ip_sym(m, ip, sym_only)		\
+do {							\
+	if (!sym_only)					\
+		seq_printf(m, "[<%016lx>] ", ip);	\
+	seq_print_symbol(m, "%s", ip);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#202: FILE: lib/mcount/tracer.c:252:
+#define seq_print_ip_sym(m, ip, sym_only)		\
+do {							\
+	if (!sym_only)					\
+		seq_printf(m, "[<%016lx>] ", ip);	\
+	seq_print_symbol(m, "%s", ip);			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym_only' may be better as '(sym_only)' to avoid precedence issues
#202: FILE: lib/mcount/tracer.c:252:
+#define seq_print_ip_sym(m, ip, sym_only)		\
+do {							\
+	if (!sym_only)					\
+		seq_printf(m, "[<%016lx>] ", ip);	\
+	seq_print_symbol(m, "%s", ip);			\
+} while (0)

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#225: FILE: lib/mcount/tracer.c:275:
+static struct seq_operations mctrace_sym_only_seq_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#237: FILE: lib/mcount/tracer.c:287:
+static struct file_operations mctrace_sym_only_fops = {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#254: FILE: lib/mcount/tracer.c:304:
+		seq_printf(m, "mctracer:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#257: FILE: lib/mcount/tracer.c:307:
+			seq_printf(m, " ERROR!!!! ent is NULL!\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#265: FILE: lib/mcount/tracer.c:315:
+			seq_printf(m, " <-- ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#269: FILE: lib/mcount/tracer.c:319:
+		seq_printf(m, "\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341317.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 6 checks, 221 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341317.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
