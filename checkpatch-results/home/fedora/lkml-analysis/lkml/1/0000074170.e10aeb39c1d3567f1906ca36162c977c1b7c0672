WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1767: FILE: fs/gfs2/xattr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1782: FILE: fs/gfs2/xattr.c:16:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'acutal' may be misspelled - perhaps 'actual'?
#1797: FILE: fs/gfs2/xattr.c:31:
+ * ea_calc_size - returns the acutal number of bytes the request will take up
                               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1944: FILE: fs/gfs2/xattr.c:178:
+			struct gfs2_ea_location *el = ef->ef_el;
+			get_bh(bh);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#2043: FILE: fs/gfs2/xattr.c:277:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2045: FILE: fs/gfs2/xattr.c:279:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2169: FILE: fs/gfs2/xattr.c:403:
+		BUG_ON(l == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#2290: FILE: fs/gfs2/xattr.c:524:
+	size_t len = GFS2_EA_DATA_LEN(el->el_ea);
+	if (len > size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2331: FILE: fs/gfs2/xattr.c:565:
+^Iif (size) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#2665: FILE: fs/gfs2/xattr.c:899:
+	if (ea->ea_type == GFS2_EATYPE_UNUSED) {
[...]
+	} else if (GFS2_EA_REC_LEN(ea) - GFS2_EA_SIZE(ea) >= size)
[...]
+	else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2738: FILE: fs/gfs2/xattr.c:972:
+		unsigned int n = 1;
+		error = gfs2_alloc_block(ip, &blk, &n);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2815: FILE: fs/gfs2/xattr.c:1049:
+	return ea_remove_unstuffed(ip, el->el_bh, el->el_ea, el->el_prev,0);
 	                                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#2922: FILE: fs/gfs2/xattr.c:1156:
+	if (value == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#2947: FILE: fs/gfs2/xattr.c:1181:
+			int unstuffed = !GFS2_EA_IS_STUFFED(el.el_ea);
+			error = ea_set_i(ip, type, name, value, size, &el);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3034: FILE: fs/gfs2/xattr.c:1268:
+	if (GFS2_EA_IS_STUFFED(el->el_ea)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3042: FILE: fs/gfs2/xattr.c:1276:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3096: FILE: fs/gfs2/xattr.c:1330:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3098: FILE: fs/gfs2/xattr.c:1332:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3115: FILE: fs/gfs2/xattr.c:1349:
+		struct gfs2_rgrpd *rgd;
+		rgd = rlist.rl_ghs[x].gh_gl->gl_object;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3141: FILE: fs/gfs2/xattr.c:1375:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3143: FILE: fs/gfs2/xattr.c:1377:
+		else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3331: FILE: fs/gfs2/xattr.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#3349: FILE: fs/gfs2/xattr.h:19:
+#define GFS2_EA_SIZE(ea) \
+ALIGN(sizeof(struct gfs2_ea_header) + (ea)->ea_name_len + \
+      ((GFS2_EA_IS_STUFFED(ea)) ? GFS2_EA_DATA_LEN(ea) : \
+                                  (sizeof(__be64) * (ea)->ea_num_ptrs)), 8)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3351: FILE: fs/gfs2/xattr.h:21:
+      ((GFS2_EA_IS_STUFFED(ea)) ? GFS2_EA_DATA_LEN(ea) : \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3352: FILE: fs/gfs2/xattr.h:22:
+                                  (sizeof(__be64) * (ea)->ea_num_ptrs)), 8)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3352: FILE: fs/gfs2/xattr.h:22:
+                                  (sizeof(__be64) * (ea)->ea_num_ptrs)), 8)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'er' - possible side-effects?
#3357: FILE: fs/gfs2/xattr.h:27:
+#define GFS2_EAREQ_SIZE_STUFFED(er) \
+ALIGN(sizeof(struct gfs2_ea_header) + (er)->er_name_len + (er)->er_data_len, 8)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#3361: FILE: fs/gfs2/xattr.h:31:
+#define GFS2_EA2DATA(ea) (GFS2_EA2NAME(ea) + (ea)->ea_name_len)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#3363: FILE: fs/gfs2/xattr.h:33:
+#define GFS2_EA2DATAPTRS(ea) \
+((__be64 *)(GFS2_EA2NAME(ea) + ALIGN((ea)->ea_name_len, 8)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#3366: FILE: fs/gfs2/xattr.h:36:
+#define GFS2_EA2NEXT(ea) \
+((struct gfs2_ea_header *)((char *)(ea) + GFS2_EA_REC_LEN(ea)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3386: FILE: fs/gfs2/xattr.h:56:
+extern int gfs2_xattr_get(struct inode *inode, int type, const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3388: FILE: fs/gfs2/xattr.h:58:
+extern int gfs2_xattr_set(struct inode *inode, int type, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3390: FILE: fs/gfs2/xattr.h:60:
+extern ssize_t gfs2_listxattr(struct dentry *dentry, char *buffer, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3391: FILE: fs/gfs2/xattr.h:61:
+extern int gfs2_ea_dealloc(struct gfs2_inode *ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3395: FILE: fs/gfs2/xattr.h:65:
+extern int gfs2_ea_find(struct gfs2_inode *ip, int type, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3397: FILE: fs/gfs2/xattr.h:67:
+extern int gfs2_ea_get_copy(struct gfs2_inode *ip, struct gfs2_ea_location *el,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3399: FILE: fs/gfs2/xattr.h:69:
+extern int gfs2_ea_acl_chmod(struct gfs2_inode *ip, struct gfs2_ea_location *el,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000074170.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 13 warnings, 22 checks, 1669 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000074170.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
