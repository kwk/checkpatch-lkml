WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/asm-generic/dma-mapping-common.h:1:
+#ifndef _ASM_GENERIC_DMA_MAPPING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#56: FILE: include/asm-generic/dma-mapping-common.h:14:
+	struct dma_map_ops *ops = get_dma_ops(dev);

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#60: FILE: include/asm-generic/dma-mapping-common.h:18:
+	BUG_ON(!valid_dma_direction(dir));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#75: FILE: include/asm-generic/dma-mapping-common.h:33:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#77: FILE: include/asm-generic/dma-mapping-common.h:35:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#87: FILE: include/asm-generic/dma-mapping-common.h:45:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: include/asm-generic/dma-mapping-common.h:51:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#104: FILE: include/asm-generic/dma-mapping-common.h:62:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#106: FILE: include/asm-generic/dma-mapping-common.h:64:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#116: FILE: include/asm-generic/dma-mapping-common.h:74:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#120: FILE: include/asm-generic/dma-mapping-common.h:78:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#130: FILE: include/asm-generic/dma-mapping-common.h:88:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#132: FILE: include/asm-generic/dma-mapping-common.h:90:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#142: FILE: include/asm-generic/dma-mapping-common.h:100:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: include/asm-generic/dma-mapping-common.h:102:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#155: FILE: include/asm-generic/dma-mapping-common.h:113:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: include/asm-generic/dma-mapping-common.h:115:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#170: FILE: include/asm-generic/dma-mapping-common.h:128:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: include/asm-generic/dma-mapping-common.h:130:
+	BUG_ON(!valid_dma_direction(dir));

CHECK:BRACES: braces {} should be used on all arms of this statement
#173: FILE: include/asm-generic/dma-mapping-common.h:131:
+	if (ops->sync_single_range_for_cpu) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#178: FILE: include/asm-generic/dma-mapping-common.h:136:
+	} else

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#188: FILE: include/asm-generic/dma-mapping-common.h:146:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: include/asm-generic/dma-mapping-common.h:148:
+	BUG_ON(!valid_dma_direction(dir));

CHECK:BRACES: braces {} should be used on all arms of this statement
#191: FILE: include/asm-generic/dma-mapping-common.h:149:
+	if (ops->sync_single_range_for_device) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#196: FILE: include/asm-generic/dma-mapping-common.h:154:
+	} else

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#204: FILE: include/asm-generic/dma-mapping-common.h:162:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#206: FILE: include/asm-generic/dma-mapping-common.h:164:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#217: FILE: include/asm-generic/dma-mapping-common.h:175:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: include/asm-generic/dma-mapping-common.h:177:
+	BUG_ON(!valid_dma_direction(dir));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 26 warnings, 4 checks, 190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
