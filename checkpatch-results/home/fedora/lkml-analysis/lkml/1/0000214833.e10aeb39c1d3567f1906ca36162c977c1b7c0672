ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#170: FILE: include/linux/cpumask.h:146:
+struct cpumask
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#171: FILE: include/linux/cpumask.h:147:
+	DECLARE_BITMAP(bits, NR_CPUS);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#173: FILE: include/linux/cpumask.h:149:
+};
+#define cpumask_bits(maskp) ((maskp)->bits)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#176: FILE: include/linux/cpumask.h:152:
+typedef struct cpumask cpumask_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#222: FILE: include/linux/cpumask.h:196:
+static inline void cpumask_set_cpu(int cpu, volatile struct cpumask *dstp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#229: FILE: include/linux/cpumask.h:201:
+static inline void cpumask_clear_cpu(int cpu, volatile struct cpumask *dstp)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#250: FILE: include/linux/cpumask.h:216:
+	bitmap_fill(dstp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#261: FILE: include/linux/cpumask.h:221:
+	bitmap_zero(dstp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#272: FILE: include/linux/cpumask.h:228:
+	bitmap_and(dstp->bits, src1p->bits, src2p->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#282: FILE: include/linux/cpumask.h:234:
+	bitmap_or(dstp->bits, src1p->bits, src2p->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#293: FILE: include/linux/cpumask.h:241:
+	bitmap_xor(dstp->bits, src1p->bits, src2p->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#305: FILE: include/linux/cpumask.h:248:
+	bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#315: FILE: include/linux/cpumask.h:254:
+	bitmap_complement(dstp->bits, srcp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#325: FILE: include/linux/cpumask.h:260:
+	return bitmap_equal(src1p->bits, src2p->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#335: FILE: include/linux/cpumask.h:266:
+	return bitmap_intersects(src1p->bits, src2p->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#345: FILE: include/linux/cpumask.h:272:
+	return bitmap_subset(src1p->bits, src2p->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#353: FILE: include/linux/cpumask.h:277:
+	return bitmap_empty(srcp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#361: FILE: include/linux/cpumask.h:282:
+	return bitmap_full(srcp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#377: FILE: include/linux/cpumask.h:292:
+	return bitmap_weight(srcp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#387: FILE: include/linux/cpumask.h:298:
+	bitmap_shift_right(dstp->bits, srcp->bits, n, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#394: FILE: include/linux/cpumask.h:304:
+	bitmap_shift_left(dstp->bits, srcp->bits, n, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#400: FILE: include/linux/cpumask.h:310:
+	return bitmap_scnprintf(buf, len, srcp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#406: FILE: include/linux/cpumask.h:316:
+	return bitmap_parse_user(buf, len, dstp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#412: FILE: include/linux/cpumask.h:322:
+	return bitmap_scnlistprintf(buf, len, srcp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#417: FILE: include/linux/cpumask.h:327:
+	return bitmap_parselist(buf, dstp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#424: FILE: include/linux/cpumask.h:334:
+	return bitmap_bitremap(oldbit, oldp->bits, newp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#432: FILE: include/linux/cpumask.h:342:
+	bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#439: FILE: include/linux/cpumask.h:349:
+	bitmap_onto(dstp->bits, origp->bits, relmapp->bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#445: FILE: include/linux/cpumask.h:355:
+	bitmap_fold(dstp->bits, origp->bits, sz, NR_CPUS);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214833.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 27 warnings, 1 checks, 471 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214833.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
