CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#104: FILE: include/linux/notifier.h:75:
+	spinlock_t lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val1' - possible side-effects?
#131: FILE: include/linux/notifier.h:106:
+#define TUNABLE_ATOMIC_INIT_NOTIFIER(val1, val2) do {		\
+		spin_lock_init(&(val1)->lock);			\
+		(val1)->head = NULL;				\
+		(val1)->name = val2;				\
+		(val1)->notifier_sub_kset = NULL;		\
+	} while (0)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#145: FILE: include/linux/notifier.h:128:
+		.lock =__SPIN_LOCK_UNLOCKED(val1.lock),		\
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#156: FILE: include/linux/notifier.h:142:
+#define TUNABLE_ATOMIC_NOTIFIER_HEAD(name, val)			\
+	struct tunable_atomic_notifier_head name =			\
+		TUNABLE_ATOMIC_NOTIFIER_INIT(name, val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#166: FILE: include/linux/notifier.h:155:
+extern int tunable_atomic_notifier_chain_register(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/notifier.h:155:
+extern int tunable_atomic_notifier_chain_register(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#177: FILE: include/linux/notifier.h:172:
+extern int tunable_atomic_notifier_chain_unregister(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/notifier.h:172:
+extern int tunable_atomic_notifier_chain_unregister(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#187: FILE: include/linux/notifier.h:188:
+extern int tunable_atomic_notifier_call_chain(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/linux/notifier.h:188:
+extern int tunable_atomic_notifier_call_chain(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#190: FILE: include/linux/notifier.h:191:
+extern int __tunable_atomic_notifier_call_chain(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/linux/notifier.h:191:
+extern int __tunable_atomic_notifier_call_chain(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/notifier.h:195:
+extern int tunable_atomic_notifier_init(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: kernel/notifier.c:327:
+static ssize_t priority_show(struct kobject *kobj, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: kernel/notifier.c:328:
+static ssize_t priority_show(struct kobject *kobj, 
+				struct kobj_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: kernel/notifier.c:337:
+static ssize_t priority_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t size)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#251: FILE: kernel/notifier.c:345:
+	sscanf(buf, "%d", &priority);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#251: FILE: kernel/notifier.c:345:
+	sscanf(buf, "%d", &priority);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#263: FILE: kernel/notifier.c:357:
+	return (ret ? ret : size);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#265: FILE: kernel/notifier.c:359:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: kernel/notifier.c:373:
+static struct kobj_attribute priority_attr = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: kernel/notifier.c:379:
+^I&priority_attr.attr, &description_attr.attr, NULL $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: kernel/notifier.c:391:
+int notifiers_kobject_create(struct tunable_atomic_notifier_head *nh,
+			struct tunable_atomic_notifier_block *n, char *name)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: kernel/notifier.c:398:
+		nh->notifier_sub_kset = kset_create_and_add(nh->name, NULL,
+							notifiers_kobj);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#332: FILE: kernel/notifier.c:426:
+int tunable_atomic_notifier_chain_register(

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*temp)...) over kmalloc(sizeof(struct control_file_info)...)
#347: FILE: kernel/notifier.c:441:
+		temp = kmalloc(sizeof(struct control_file_info), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#354: FILE: kernel/notifier.c:448:
+		if (!base)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#356: FILE: kernel/notifier.c:450:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: kernel/notifier.c:452:
+^I^I^Iwhile (new->next) {^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#358: FILE: kernel/notifier.c:452:
+			while (new->next) {	
+				new = new->next;
+			}

WARNING:TYPO_SPELLING: 'regist' may be misspelled - perhaps 'register'?
#363: FILE: kernel/notifier.c:457:
+		goto regist;
 		     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'regist' may be misspelled - perhaps 'register'?
#370: FILE: kernel/notifier.c:464:
+regist:
 ^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#390: FILE: kernel/notifier.c:484:
+int tunable_atomic_notifier_chain_unregister(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#432: FILE: kernel/notifier.c:526:
+int __kprobes __tunable_atomic_notifier_call_chain(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#446: FILE: kernel/notifier.c:540:
+int __kprobes tunable_atomic_notifier_call_chain(

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#454: FILE: kernel/notifier.c:548:
+int __init tunable_atomic_notifier_init(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#473: FILE: kernel/notifier.c:567:
+			printk("%s: %s is failed to create. err = %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: kernel/notifier.c:568:
+			printk("%s: %s is failed to create. err = %d\n",
+							nh->name, name, error);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000291597.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 6 warnings, 25 checks, 429 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000291597.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
