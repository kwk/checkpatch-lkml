WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: drivers/gpu/drm/drm_global.c:1:
+/**************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#93: FILE: drivers/gpu/drm/drm_global.c:29:
+	struct mutex mutex;

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: drivers/gpu/drm/drm_global.c:42:
+		struct drm_global_item *item = &glob[i];
+		mutex_init(&item->mutex);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#115: FILE: drivers/gpu/drm/drm_global.c:51:
+	int i;
+	for (i = 0; i < DRM_GLOBAL_NUM; ++i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: drivers/gpu/drm/drm_global.c:53:
+		struct drm_global_item *item = &glob[i];
+		BUG_ON(item->object != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#117: FILE: drivers/gpu/drm/drm_global.c:53:
+		BUG_ON(item->object != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "item->object"
#117: FILE: drivers/gpu/drm/drm_global.c:53:
+		BUG_ON(item->object != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#118: FILE: drivers/gpu/drm/drm_global.c:54:
+		BUG_ON(item->refcount != 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!item->object"
#131: FILE: drivers/gpu/drm/drm_global.c:67:
+		if (unlikely(item->object == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#160: FILE: drivers/gpu/drm/drm_global.c:96:
+	BUG_ON(item->refcount == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#161: FILE: drivers/gpu/drm/drm_global.c:97:
+	BUG_ON(ref->object != item->object);

WARNING:SPACING: Unnecessary space before function pointer arguments
#199: FILE: include/drm/drmP.h:1419:
+	int (*init) (struct drm_global_reference *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drm_global_reference *' should also have an identifier name
#199: FILE: include/drm/drmP.h:1419:
+	int (*init) (struct drm_global_reference *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#200: FILE: include/drm/drmP.h:1420:
+	void (*release) (struct drm_global_reference *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drm_global_reference *' should also have an identifier name
#200: FILE: include/drm/drmP.h:1420:
+	void (*release) (struct drm_global_reference *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: include/drm/drmP.h:1423:
+extern void drm_global_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/drm/drmP.h:1424:
+extern void drm_global_release(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/drm/drmP.h:1425:
+extern int drm_global_item_ref(struct drm_global_reference *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/drm/drmP.h:1426:
+extern void drm_global_item_unref(struct drm_global_reference *ref);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152713.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 7 checks, 154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152713.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
