WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#40: 
architectures aswell) :-
              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'VAs' may be misspelled - perhaps 'Was'?
#81: 
memory in which all PAs and VAs are color aligned (see my post above
                            ^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#118: 
#define ALIGN (16*1024)

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
#define BS (512)

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#140: 
Unable to handle kernel NULL pointer dereference at virtual address 00000084

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#188: FILE: arch/arm/mm/mmap.c:44:
+			do_align = filp || flags & MAP_SHARED || flags & MAP_COLORALIGN;
 			           ^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#199: FILE: mm/page_alloc.c:522:
be changed.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: mm/page_alloc.c:527:
+        unsigned int mask, order;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: mm/page_alloc.c:527:
+        unsigned int mask, order;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: mm/page_alloc.c:528:
+        struct free_area *area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: mm/page_alloc.c:528:
+        struct free_area *area;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: mm/page_alloc.c:532:
+        while (size) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: mm/page_alloc.c:532:
+        while (size) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: mm/page_alloc.c:533:
+                if ( mask & size )  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: mm/page_alloc.c:533:
+                if ( mask & size )  {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#212: FILE: mm/page_alloc.c:533:
+                if ( mask & size )  {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#212: FILE: mm/page_alloc.c:533:
+                if ( mask & size )  {

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: mm/page_alloc.c:534:
+                        area = zone->free_area + order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: mm/page_alloc.c:534:
+                        area = zone->free_area + order;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: mm/page_alloc.c:535:
+                        BUG_ON(bad_range(zone, page));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: mm/page_alloc.c:535:
+                        BUG_ON(bad_range(zone, page));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: mm/page_alloc.c:535:
+                        BUG_ON(bad_range(zone, page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: mm/page_alloc.c:536:
+                        list_add(&page->lru, &area->free_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: mm/page_alloc.c:536:
+                        list_add(&page->lru, &area->free_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: mm/page_alloc.c:537:
+                        area->nr_free++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: mm/page_alloc.c:537:
+                        area->nr_free++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: mm/page_alloc.c:538:
+                        set_page_order(page, order);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: mm/page_alloc.c:538:
+                        set_page_order(page, order);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: mm/page_alloc.c:541:
+                        size &= (~mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: mm/page_alloc.c:541:
+                        size &= (~mask);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: mm/page_alloc.c:542:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: mm/page_alloc.c:542:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: mm/page_alloc.c:545:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: mm/page_alloc.c:545:
+        }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: mm/page_alloc.c:626:
+static struct page *__rmqueue_aligned (struct zone *zone, unsigned

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: mm/page_alloc.c:634:
+	unsigned int order = EXTRACT_ORDER(__GFP_COLORALIGN,align_order);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#251: FILE: mm/page_alloc.c:635:
+	unsigned int align = EXTRACT_ALIGN(__GFP_COLORALIGN,align_order);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#257: FILE: mm/page_alloc.c:641:
+	list_for_each(pos,&area->free_list) {
 	                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#257: FILE: mm/page_alloc.c:641:
+	list_for_each(pos,&area->free_list) {
 	                  ^

CHECK:SPACING: No space is necessary after a cast
#259: FILE: mm/page_alloc.c:643:
+		page_align = page_to_pfn(page) & (extra-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#259: FILE: mm/page_alloc.c:643:
+		page_align = page_to_pfn(page) & (extra-1);
 		                                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#261: FILE: mm/page_alloc.c:645:
+		if ( align == page_align ) { /* color alignment matches */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#261: FILE: mm/page_alloc.c:645:
+		if ( align == page_align ) { /* color alignment matches */

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#266: FILE: mm/page_alloc.c:650:
+		if ( current_order > order ) /* chk if its not a tightfit; cant
 		                                                           ^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 0)
#266: FILE: mm/page_alloc.c:650:
+		if ( current_order > order ) /* chk if its not a tightfit; cant
allocate from tight fit */

ERROR:SPACING: space prohibited after that open parenthesis '('
#266: FILE: mm/page_alloc.c:650:
+		if ( current_order > order ) /* chk if its not a tightfit; cant

ERROR:SPACING: space prohibited before that close parenthesis ')'
#266: FILE: mm/page_alloc.c:650:
+		if ( current_order > order ) /* chk if its not a tightfit; cant

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#268: FILE: mm/page_alloc.c:651:
+		if ( current_order > order ) /* chk if its not a tightfit; cant
+		{

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#271: FILE: mm/page_alloc.c:653:
+									/* move below at 2 places, for efficiency */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#273: FILE: mm/page_alloc.c:655:
+			if ( current_order > extra_order ) /* allocate from inside node */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#273: FILE: mm/page_alloc.c:655:
+			if ( current_order > extra_order ) /* allocate from inside node */

CHECK:SPACING: No space is necessary after a cast
#276: FILE: mm/page_alloc.c:658:
+			if ( (unsigned int) ((0x1UL<<current_order) - (0x1UL<<order)) >= frontpad)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#276: FILE: mm/page_alloc.c:658:
+			if ( (unsigned int) ((0x1UL<<current_order) - (0x1UL<<order)) >= frontpad)
 			                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#276: FILE: mm/page_alloc.c:658:
+			if ( (unsigned int) ((0x1UL<<current_order) - (0x1UL<<order)) >= frontpad)
 			                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#276: FILE: mm/page_alloc.c:658:
+			if ( (unsigned int) ((0x1UL<<current_order) - (0x1UL<<order)) >= frontpad)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#281: FILE: mm/page_alloc.c:663:
+	if ( pos == &area->free_list)  /* is true when we did not find any
suitable match in the area */

ERROR:SPACING: space prohibited after that open parenthesis '('
#281: FILE: mm/page_alloc.c:663:
+	if ( pos == &area->free_list)  /* is true when we did not find any

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#283: FILE: mm/page_alloc.c:664:
+	if ( pos == &area->free_list)  /* is true when we did not find any
+		return NULL;

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#297: FILE: mm/page_alloc.c:677:
+	printk (" frontpad %d + order %d + lastpad %d \n", frontpad,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#302: FILE: mm/page_alloc.c:681:
+		expand_num_pages (zone, &page[padsize], lastpad);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#304: FILE: mm/page_alloc.c:683:
+		expand_num_pages (zone, page, frontpad);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#319: FILE: mm/page_alloc.c:696:
+static struct page *__rmqueue_aligned_wrapper (struct zone *zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: mm/page_alloc.c:697:
+static struct page *__rmqueue_aligned_wrapper (struct zone *zone,
+{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: mm/page_alloc.c:701:
+	unsigned int order = EXTRACT_ORDER(__GFP_COLORALIGN,align_order);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#326: FILE: mm/page_alloc.c:702:
+	unsigned int align = EXTRACT_ALIGN(__GFP_COLORALIGN,align_order);
 	                                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#328: FILE: mm/page_alloc.c:704:
+	BUG_ON(align >= extra);

ERROR:SPACING: space prohibited after that open parenthesis '('
#331: FILE: mm/page_alloc.c:707:
+	if ( order == 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#331: FILE: mm/page_alloc.c:707:
+	if ( order == 0 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#333: FILE: mm/page_alloc.c:709:
+	else if ( order <= extra_order )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#333: FILE: mm/page_alloc.c:709:
+	else if ( order <= extra_order )

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#340: FILE: mm/page_alloc.c:715:
+		page = __rmqueue_aligned ( zone , align_order , current_order );
 		                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#340: FILE: mm/page_alloc.c:715:
+		page = __rmqueue_aligned ( zone , align_order , current_order );
 		                                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#340: FILE: mm/page_alloc.c:715:
+		page = __rmqueue_aligned ( zone , align_order , current_order );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#340: FILE: mm/page_alloc.c:715:
+		page = __rmqueue_aligned ( zone , align_order , current_order );

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#342: FILE: mm/page_alloc.c:717:
+	for (current_order = optim_order-1; current_order >= order && page
 	                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#344: FILE: mm/page_alloc.c:718:
+		page = __rmqueue_aligned ( zone , align_order , current_order );
 		                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#344: FILE: mm/page_alloc.c:718:
+		page = __rmqueue_aligned ( zone , align_order , current_order );
 		                                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#344: FILE: mm/page_alloc.c:718:
+		page = __rmqueue_aligned ( zone , align_order , current_order );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#344: FILE: mm/page_alloc.c:718:
+		page = __rmqueue_aligned ( zone , align_order , current_order );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: mm/page_alloc.c:720:
+^Ireturn page;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#349: FILE: mm/page_alloc.c:723:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#364: FILE: mm/page_alloc.c:912:
+	unsigned int order = EXTRACT_ORDER(gfp_flags,align_order);
 	                                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#378: FILE: mm/page_alloc.c:932:
+		if ( likely(!(gfp_flags & __GFP_COLORALIGN)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#378: FILE: mm/page_alloc.c:932:
+		if ( likely(!(gfp_flags & __GFP_COLORALIGN)) ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#378: FILE: mm/page_alloc.c:932:
+		if ( likely(!(gfp_flags & __GFP_COLORALIGN)) ) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: mm/page_alloc.c:1003:
+get_page_from_freelist(gfp_t gfp_mask, unsigned int align_order,
 		struct zonelist *zonelist, int alloc_flags)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#400: FILE: mm/page_alloc.c:1008:
+	unsigned int order = EXTRACT_ORDER(gfp_mask,align_order);
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: mm/page_alloc.c:1051:
+__alloc_pages(gfp_t gfp_mask, unsigned int align_order,
 		struct zonelist *zonelist)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#434: FILE: mm/page_alloc.c:1061:
+	unsigned int order = EXTRACT_ORDER(gfp_mask,align_order);
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#443: FILE: mm/page_alloc.c:1073:
+	page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, align_order,
 	                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: mm/page_alloc.c:1074:
+	page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, align_order,
 				zonelist, ALLOC_WMARK_LOW|ALLOC_CPUSET);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: mm/page_alloc.c:1120:
+			page = get_page_from_freelist(gfp_mask, align_order,
 				zonelist, ALLOC_NO_WATERMARKS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: mm/page_alloc.c:1153:
+		page = get_page_from_freelist(gfp_mask, align_order,
 						zonelist, alloc_flags);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#479: FILE: mm/page_alloc.c:1163:
+		page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, align_order,
 		                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: mm/page_alloc.c:1164:
+		page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, align_order,
 				zonelist, ALLOC_WMARK_HIGH|ALLOC_CPUSET);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#493: FILE: include/asm-arm/mman.h:17:
+# define MAP_COLORALIGN  0x0200	/* For VIVT caches - the alignment
+#endif

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#505: FILE: include/asm-arm/page.h:138:
+#define BITLEN(x) (sizeof(x)<<3) /* for bytes to bits, multiply by 8 */
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#506: FILE: include/asm-arm/page.h:139:
+#define EXTRACT_ORDER(gfp,num) ( (gfp & __GFP_COLORALIGN) ? (num &
                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#506: FILE: include/asm-arm/page.h:139:
+#define EXTRACT_ORDER(gfp,num) ( (gfp & __GFP_COLORALIGN) ? (num &

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#506: FILE: include/asm-arm/page.h:139:
+#define EXTRACT_ORDER(gfp,num) ( (gfp & __GFP_COLORALIGN) ? (num &

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gfp' may be better as '(gfp)' to avoid precedence issues
#506: FILE: include/asm-arm/page.h:139:
+#define EXTRACT_ORDER(gfp,num) ( (gfp & __GFP_COLORALIGN) ? (num &

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'num' may be better as '(num)' to avoid precedence issues
#506: FILE: include/asm-arm/page.h:139:
+#define EXTRACT_ORDER(gfp,num) ( (gfp & __GFP_COLORALIGN) ? (num &

ERROR:SPACING: space required after that ',' (ctx:VxV)
#508: FILE: include/asm-arm/page.h:140:
+#define EXTRACT_ALIGN(gfp,num) ( (gfp & __GFP_COLORALIGN) ?
                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#508: FILE: include/asm-arm/page.h:140:
+#define EXTRACT_ALIGN(gfp,num) ( (gfp & __GFP_COLORALIGN) ?

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#508: FILE: include/asm-arm/page.h:140:
+#define EXTRACT_ALIGN(gfp,num) ( (gfp & __GFP_COLORALIGN) ?

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gfp' may be better as '(gfp)' to avoid precedence issues
#508: FILE: include/asm-arm/page.h:140:
+#define EXTRACT_ALIGN(gfp,num) ( (gfp & __GFP_COLORALIGN) ?

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#511: FILE: include/asm-arm/page.h:142:
+#define ALIGNMENT_BITS(addr) (((addr&(SHMLBA-1))>>PAGE_SHIFT) <<
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#511: FILE: include/asm-arm/page.h:142:
+#define ALIGNMENT_BITS(addr) (((addr&(SHMLBA-1))>>PAGE_SHIFT) <<
                                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#511: FILE: include/asm-arm/page.h:142:
+#define ALIGNMENT_BITS(addr) (((addr&(SHMLBA-1))>>PAGE_SHIFT) <<
                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#511: FILE: include/asm-arm/page.h:142:
+#define ALIGNMENT_BITS(addr) (((addr&(SHMLBA-1))>>PAGE_SHIFT) <<

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#511: FILE: include/asm-arm/page.h:142:
+#define ALIGNMENT_BITS(addr) (((addr&(SHMLBA-1))>>PAGE_SHIFT) <<

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: include/asm-arm/page.h:143:
+#define ARCH_ALIGNORDER(flags,addr,order) ((flags & VM_COLORALIGN)?
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: include/asm-arm/page.h:143:
+#define ARCH_ALIGNORDER(flags,addr,order) ((flags & VM_COLORALIGN)?
                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#513: FILE: include/asm-arm/page.h:143:
+#define ARCH_ALIGNORDER(flags,addr,order) ((flags & VM_COLORALIGN)?
                                                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#513: FILE: include/asm-arm/page.h:143:
+#define ARCH_ALIGNORDER(flags,addr,order) ((flags & VM_COLORALIGN)?

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#513: FILE: include/asm-arm/page.h:143:
+#define ARCH_ALIGNORDER(flags,addr,order) ((flags & VM_COLORALIGN)?

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#516: FILE: include/asm-arm/page.h:145:
+#define ARCH_ALIGNGFP(flags) ((flags & VM_COLORALIGN)? (__GFP_COLORALIGN):(0))
                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#516: FILE: include/asm-arm/page.h:145:
+#define ARCH_ALIGNGFP(flags) ((flags & VM_COLORALIGN)? (__GFP_COLORALIGN):(0))
                                                                          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#516: FILE: include/asm-arm/page.h:145:
+#define ARCH_ALIGNGFP(flags) ((flags & VM_COLORALIGN)? (__GFP_COLORALIGN):(0))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#529: FILE: include/linux/mman.h:66:
+	       _calc_vm_trans(flags, MAP_LOCKED,     VM_LOCKED    ) |

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#555: FILE: include/linux/gfp.h:51:
+#define __GFP_COLORALIGN ((__force gfp_t)0x40000u) /* Used by
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: include/linux/gfp.h:113:
+	unsigned int order = EXTRACT_ORDER(gfp_mask,align_order);
 	                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#589: FILE: include/linux/gfp.h:142:
+#define alloc_page_vma(gfp_mask, vma, addr) \
+		alloc_pages(gfp_mask|ARCH_ALIGNGFP(vma->vm_flags),

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gfp_mask' may be better as '(gfp_mask)' to avoid precedence issues
#589: FILE: include/linux/gfp.h:142:
+#define alloc_page_vma(gfp_mask, vma, addr) \
+		alloc_pages(gfp_mask|ARCH_ALIGNGFP(vma->vm_flags),

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#589: FILE: include/linux/gfp.h:142:
+#define alloc_page_vma(gfp_mask, vma, addr) \
+		alloc_pages(gfp_mask|ARCH_ALIGNGFP(vma->vm_flags),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#590: FILE: include/linux/gfp.h:143:
+		alloc_pages(gfp_mask|ARCH_ALIGNGFP(vma->vm_flags),
 		                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: include/linux/gfp.h:144:
+		alloc_pages(gfp_mask|ARCH_ALIGNGFP(vma->vm_flags),
 #endif

ERROR:SPACING: space required after that ',' (ctx:VxV)
#604: FILE: include/linux/highmem.h:73:
+#define ARCH_ALIGNORDER(flag,align,order) (0);
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#604: FILE: include/linux/highmem.h:73:
+#define ARCH_ALIGNORDER(flag,align,order) (0);
                                   ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#604: FILE: include/linux/highmem.h:73:
+#define ARCH_ALIGNORDER(flag,align,order) (0);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: include/asm-generic/mman.h:24:
+                                           if the processor has VIVT$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#620: FILE: include/asm-generic/mman.h:24:
+#define MAP_COLORALIGN  0x0            /* can be redefined (undef) to
+                                           if the processor has VIVT

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#642: FILE: include/asm-arm/mman.h:7:
+#define MAP_COLORALIGN  0x0200      /* For VIVT caches - the
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#665: FILE: libc/stdlib/malloc-standard/malloc.c:347:
+/* To do :-
+   Check if brk can be used to allocate smaller chunks. Maybe sbrk call checks

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#671: FILE: libc/stdlib/malloc-standard/malloc.c:353:
+static void* __malloc_alloc(size_t nb, mstate av, const int map_flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: libc/stdlib/malloc-standard/malloc.c:385:
+    if (have_fastchunks(av) && !(map_flags & MAP_COLORALIGN)) {$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#698: FILE: libc/stdlib/malloc-standard/malloc.c:414:
+	    mm = (char*)(MMAP(0, size, PROT_READ|PROT_WRITE, map_flags));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#698: FILE: libc/stdlib/malloc-standard/malloc.c:414:
+	    mm = (char*)(MMAP(0, size, PROT_READ|PROT_WRITE, map_flags));
 	                                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#707: FILE: libc/stdlib/malloc-standard/malloc.c:534:
+	    fst_brk = (char*)(MMAP(0, size, PROT_READ|PROT_WRITE, map_flags));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#707: FILE: libc/stdlib/malloc-standard/malloc.c:534:
+	    fst_brk = (char*)(MMAP(0, size, PROT_READ|PROT_WRITE, map_flags));
 	                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: libc/stdlib/malloc-standard/malloc.c:813:
+   return __internal_malloc(bytes, 0);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#718: FILE: libc/stdlib/malloc-standard/malloc.c:816:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#722: FILE: libc/stdlib/malloc-standard/malloc.c:820:
+/* Why did we add ' map_flags ' to parameter list ?
+   Using map_flags, we can inform the kernel of the following :-

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#727: FILE: libc/stdlib/malloc-standard/malloc.c:825:
+void* __internal_malloc(size_t bytes, const int map_flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: libc/stdlib/malloc-standard/malloc.c:877:
+    if (map_flags & MAP_COLORALIGN) goto use_top;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#737: FILE: libc/stdlib/malloc-standard/malloc.c:877:
+    if (map_flags & MAP_COLORALIGN) goto use_top;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#743: FILE: libc/stdlib/malloc-standard/malloc.c:952:
 	if (in_smallbin_range(nb) &&
 		bck == unsorted_chunks(av) &&
 		victim == av->last_remainder &&
+		(unsigned long)(size) > (unsigned long)(nb + MINSIZE))
+                {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: libc/stdlib/malloc-standard/malloc.c:956:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: libc/stdlib/malloc-standard/malloc.c:956:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: libc/stdlib/malloc-standard/malloc.c:1171:
+    if ((unsigned long)(size) >= (unsigned long)(nb + MINSIZE) && !map_flags) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: libc/stdlib/malloc-standard/malloc.c:1184:
+    sysmem = __malloc_alloc(nb, av, map_flags);$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map' may be better as '(map)' to avoid precedence issues
#788: FILE: libc/stdlib/malloc-standard/malloc.h:358:
+#define MMAP(addr, size, prot, map) \
+ (mmap((addr), (size), (prot), MAP_PRIVATE|MAP_ANONYMOUS|map, 0, 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: libc/stdlib/malloc-standard/malloc.h:359:
+ (mmap((addr), (size), (prot), MAP_PRIVATE|MAP_ANONYMOUS|map, 0, 0))$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#789: FILE: libc/stdlib/malloc-standard/malloc.h:359:
+ (mmap((addr), (size), (prot), MAP_PRIVATE|MAP_ANONYMOUS|map, 0, 0))
                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#789: FILE: libc/stdlib/malloc-standard/malloc.h:359:
+ (mmap((addr), (size), (prot), MAP_PRIVATE|MAP_ANONYMOUS|map, 0, 0))
                                                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map' may be better as '(map)' to avoid precedence issues
#795: FILE: libc/stdlib/malloc-standard/malloc.h:363:
+#define MMAP(addr, size, prot, map) \
+ (mmap((addr), (size), (prot), MAP_SHARED|MAP_ANONYMOUS|map, 0, 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: libc/stdlib/malloc-standard/malloc.h:364:
+ (mmap((addr), (size), (prot), MAP_SHARED|MAP_ANONYMOUS|map, 0, 0))$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#796: FILE: libc/stdlib/malloc-standard/malloc.h:364:
+ (mmap((addr), (size), (prot), MAP_SHARED|MAP_ANONYMOUS|map, 0, 0))
                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#796: FILE: libc/stdlib/malloc-standard/malloc.h:364:
+ (mmap((addr), (size), (prot), MAP_SHARED|MAP_ANONYMOUS|map, 0, 0))
                                                        ^

ERROR:POINTER_LOCATION: "foo*  bar" should be "foo *bar"
#804: FILE: libc/stdlib/malloc-standard/malloc.h:935:
+void*  __internal_malloc(size_t bytes, const int map_flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#820: FILE: libc/stdlib/malloc-standard/memalign.c:63:
+    /* Call __internal_malloc with worst case padding to hit alignment.
+       Note: MAP_COLORALIGN would be disregarded in the kernel if architecture

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: libc/stdlib/malloc-standard/memalign.c:66:
+    m  = (char*)(__internal_malloc(nb + alignment + MINSIZE, MAP_COLORALIGN));$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#823: FILE: libc/stdlib/malloc-standard/memalign.c:66:
+    m  = (char*)(__internal_malloc(nb + alignment + MINSIZE, MAP_COLORALIGN));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 74 errors, 49 warnings, 40 checks, 557 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
