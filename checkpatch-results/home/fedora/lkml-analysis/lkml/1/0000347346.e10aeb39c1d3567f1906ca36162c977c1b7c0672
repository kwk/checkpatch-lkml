WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#57: FILE: arch/x86/mm/ioremap_64.c:131:
+	/* For plain ioremap() get the existing attributes. Otherwise
+	   check against the existing ones */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#57: FILE: arch/x86/mm/ioremap_64.c:131:
+	   check against the existing ones */

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#84: FILE: arch/x86/mm/ioremap_64.c:214:
+		free_mattr(p->phys_addr, p->phys_addr + p->size, p->flags>>20);
 		                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#98: FILE: arch/x86/mm/pat.c:9:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#108: FILE: arch/x86/mm/pat.c:61:
+/* The global memattr list keeps track of caching attributes for specific
+   physical memory areas. Conflicting caching attributes in different

WARNING:TYPO_SPELLING: 'represente' may be misspelled - perhaps 'represents'?
#113: FILE: arch/x86/mm/pat.c:66:
+   have the same cache attributes of course.  Zero attributes are represente
                                                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#120: FILE: arch/x86/mm/pat.c:73:
+   mattr_lock protects the whole list. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#123: FILE: arch/x86/mm/pat.c:76:
+	struct list_head nd;
 	                 ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: arch/x86/mm/pat.c:83:
+static DEFINE_SPINLOCK(mattr_lock); ^I/* protects memattr list */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: arch/x86/mm/pat.c:89:
+	int err = 0;
+	if (attr) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ma)...) over kmalloc(sizeof(struct memattr)...)
#137: FILE: arch/x86/mm/pat.c:90:
+		ma  = kmalloc(sizeof(struct memattr), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#147: FILE: arch/x86/mm/pat.c:100:
+	list_for_each_entry(ml, &mattr_list, nd) {
 	                                     ^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#154: FILE: arch/x86/mm/pat.c:107:
+				printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#154: FILE: arch/x86/mm/pat.c:107:
+				printk(

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#155: FILE: arch/x86/mm/pat.c:108:
+	KERN_ERR "%s:%d conflicting cache attribute %Lx-%Lx %lx<->%lx\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: arch/x86/mm/pat.c:116:
+				list_add(&ma->nd, ml->nd.prev);
 				              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: arch/x86/mm/pat.c:116:
+				list_add(&ma->nd, ml->nd.prev);
 				                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#170: FILE: arch/x86/mm/pat.c:123:
+		list_add_tail(&ma->nd, &mattr_list);
 		                   ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#179: FILE: arch/x86/mm/pat.c:132:
+	int err = attr ? -EBUSY : 0;
+	spin_lock(&mattr_lock);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#180: FILE: arch/x86/mm/pat.c:133:
+	list_for_each_entry(ml, &mattr_list, nd) {
 	                                     ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#183: FILE: arch/x86/mm/pat.c:136:
+				printk(KERN_ERR

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#184: FILE: arch/x86/mm/pat.c:137:
+	"%s:%d conflicting cache attributes on free %Lx-%Lx %lx<->%lx\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: arch/x86/mm/pat.c:138:
+			current->comm, current->pid, start, end, attr,ml->attr);
 			                                             ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#186: FILE: arch/x86/mm/pat.c:139:
+			list_del(&ml->nd);
 			              ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#194: FILE: arch/x86/mm/pat.c:147:
+		printk(KERN_ERR "%s:%d freeing invalid mattr %Lx-%Lx %lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#194: FILE: arch/x86/mm/pat.c:147:
+		printk(KERN_ERR "%s:%d freeing invalid mattr %Lx-%Lx %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: arch/x86/mm/pat.c:148:
+		printk(KERN_ERR "%s:%d freeing invalid mattr %Lx-%Lx %lx\n",
+			current->comm, current->pid,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: include/asm-x86/pat.h:1:
+#ifndef _ASM_PAT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347346.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 22 warnings, 5 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347346.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
