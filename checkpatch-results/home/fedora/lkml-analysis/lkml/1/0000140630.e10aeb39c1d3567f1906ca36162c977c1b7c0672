WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#72: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: fs/vmufat/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'hardare' may be misspelled - perhaps 'hardware'?
#194: FILE: fs/vmufat/inode.c:85:
+ * without losing hardare independence -
                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: fs/vmufat/inode.c:89:
+static inline struct buffer_head *vmufat_sb_bread(struct super_block *sb,
+	sector_t block)

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: fs/vmufat/inode.c:92:
+	struct buffer_head *bh;
+	bh = sb_bread(sb, block);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/vmufat/inode.c:100:
+    {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#209: FILE: fs/vmufat/inode.c:100:
+static int day_n[] =
+    {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#212: FILE: fs/vmufat/inode.c:103:
+	struct nameidata *nd)
 	                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: fs/vmufat/inode.c:103:
+static struct dentry *vmufat_inode_lookup(struct inode *in, struct dentry *dent,
+	struct nameidata *nd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: fs/vmufat/inode.c:140:
+			ino = vmufat_get_inode(sb,
+				le16_to_cpu(((u16 *) bh->b_data)

CHECK:SPACING: No space is necessary after a cast
#249: FILE: fs/vmufat/inode.c:140:
+				le16_to_cpu(((u16 *) bh->b_data)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#312: FILE: fs/vmufat/inode.c:203:
+		fatdata = ((u16 *) bh_fat->b_data)[x];

CHECK:BRACES: braces {} should be used on all arms of this statement
#317: FILE: fs/vmufat/inode.c:208:
+			if (--nextblock >= vmudetails->fat_bnum) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#324: FILE: fs/vmufat/inode.c:215:
+			} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: fs/vmufat/inode.c:221:
+		printk(KERN_ERR "VMUFAT: device is full\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: fs/vmufat/inode.c:241:
+	offset = block/(VMU_BLK_SZ/2);
 	              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: fs/vmufat/inode.c:241:
+	offset = block/(VMU_BLK_SZ/2);
 	                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#371: FILE: fs/vmufat/inode.c:262:
+	offset = block/(VMU_BLK_SZ/2);
 	              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#371: FILE: fs/vmufat/inode.c:262:
+	offset = block/(VMU_BLK_SZ/2);
 	                          ^

CHECK:SPACING: No space is necessary after a cast
#380: FILE: fs/vmufat/inode.c:271:
+	((u16 *) bh->b_data)[block % (VMU_BLK_SZ / 2)] = set;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#387: FILE: fs/vmufat/inode.c:278:
+		int imode, struct nameidata *nd)
 		                             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: fs/vmufat/inode.c:278:
+static int vmufat_inode_create(struct inode *dir, struct dentry *de,
+		int imode, struct nameidata *nd)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#413: FILE: fs/vmufat/inode.c:304:
+	* Is this an executible file? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#413: FILE: fs/vmufat/inode.c:304:
+	/* Walk through blocks looking for place to write
+	* Is this an executible file? */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#418: FILE: fs/vmufat/inode.c:309:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: fs/vmufat/inode.c:311:
+				"VMUFAT: cannot write executible file to"
+				" filesystem - block 0 already allocated.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#440: FILE: fs/vmufat/inode.c:331:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: fs/vmufat/inode.c:341:
+	* Now search for space for the directory entry */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#450: FILE: fs/vmufat/inode.c:341:
+	/* Write to the directory
+	* Now search for space for the directory entry */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data'
#468: FILE: fs/vmufat/inode.c:359:
+		if (((bh->b_data)[vmufat_index(y)]) == 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#472: FILE: fs/vmufat/inode.c:363:
+	 * so now update it */

CHECK:SPACING: No space is necessary after a cast
#479: FILE: fs/vmufat/inode.c:370:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data[z + 1] != (char) 0x00'
#479: FILE: fs/vmufat/inode.c:370:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data[z + 1] != (char) 0xff'
#479: FILE: fs/vmufat/inode.c:370:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: fs/vmufat/inode.c:371:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:SPACING: No space is necessary after a cast
#480: FILE: fs/vmufat/inode.c:371:
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:SPACING: No space is necessary after a cast
#481: FILE: fs/vmufat/inode.c:372:
+		bh->b_data[z + 1] = (char) 0x00;

CHECK:SPACING: No space is necessary after a cast
#484: FILE: fs/vmufat/inode.c:375:
+		((u16 *) bh->b_data)[z / 2 + 1] =

CHECK:SPACING: No space is necessary after a cast
#486: FILE: fs/vmufat/inode.c:377:
+		((u16 *) bh->b_data)[z / 2 + 0x0D] = 0;

CHECK:SPACING: No space is necessary after a cast
#488: FILE: fs/vmufat/inode.c:379:
+		((u16 *) bh->b_data)[z / 2 + 1] = 0;

CHECK:SPACING: No space is necessary after a cast
#489: FILE: fs/vmufat/inode.c:380:
+		((u16 *) bh->b_data)[z / 2 + 0x0D] = 1;

CHECK:SPACING: No space is necessary after a cast
#493: FILE: fs/vmufat/inode.c:384:
+	memset((char *) (bh->b_data + z + 0x04), '\0', 0x0C);

CHECK:SPACING: No space is necessary after a cast
#494: FILE: fs/vmufat/inode.c:385:
+	memcpy((char *) (bh->b_data + z + 0x04), ((de->d_name).name),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: fs/vmufat/inode.c:386:
+	memcpy((char *) (bh->b_data + z + 0x04), ((de->d_name).name),
+		de->d_name.len);

CHECK:SPACING: No space is necessary after a cast
#534: FILE: fs/vmufat/inode.c:425:
+	((u16 *) bh->b_data)[z / 2 + 0x0C] =

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#554: FILE: fs/vmufat/inode.c:445:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#559: FILE: fs/vmufat/inode.c:450:
+static int vmufat_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                        ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#570: FILE: fs/vmufat/inode.c:461:
+	int blck_read = vmudetails->dir_bnum;
+	bh = vmufat_sb_bread(sb, blck_read);

CHECK:SPACING: No space is necessary after a cast
#579: FILE: fs/vmufat/inode.c:470:
+	switch ((unsigned int) filp->f_pos) {

CHECK:SPACING: No space is necessary after a cast
#630: FILE: fs/vmufat/inode.c:521:
+		    le16_to_cpu(((u16 *) bh->b_data)[1 +

CHECK:LINE_SPACING: Please don't use multiple blank lines
#657: FILE: fs/vmufat/inode.c:548:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#671: FILE: fs/vmufat/inode.c:562:
+^Ireturn ^Imktime(century * 100 + year, month, day, hour, minute,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: fs/vmufat/inode.c:624:
+		vbl = kmem_cache_alloc(vmufat_blist_cachep,
+			GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#744: FILE: fs/vmufat/inode.c:635:
+		fatdata = ((u16 *) bh->b_data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#747: FILE: fs/vmufat/inode.c:638:
+			printk(KERN_WARNING "VMUFAT: FAT table appears to have"

WARNING:SPLIT_STRING: quoted string split across lines
#748: FILE: fs/vmufat/inode.c:639:
+			printk(KERN_WARNING "VMUFAT: FAT table appears to have"
+				" been corrupted.\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#796: FILE: fs/vmufat/inode.c:687:
+			inode->i_ctime.tv_sec = inode->i_mtime.tv_sec =

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#800: FILE: fs/vmufat/inode.c:691:
+			inode->i_mode = S_IFDIR | S_IRUGO | S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#828: FILE: fs/vmufat/inode.c:719:
+				    (((u16 *) bh->b_data)[(y % 0x10) * 0x10 +

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#835: FILE: fs/vmufat/inode.c:726:
+					printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#837: FILE: fs/vmufat/inode.c:728:
+						"vmufat: could not find this "
+						"file on filesystem\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#844: FILE: fs/vmufat/inode.c:735:
+			inode->i_ctime.tv_sec = inode->i_mtime.tv_sec =

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO | S_IXUGO' are not preferred. Consider using octal permissions '0333'.
#848: FILE: fs/vmufat/inode.c:739:
+			inode->i_mode &= ~(S_IWUGO | S_IXUGO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#849: FILE: fs/vmufat/inode.c:740:
+			inode->i_mode |= S_IRUGO;

CHECK:SPACING: No space is necessary after a cast
#852: FILE: fs/vmufat/inode.c:743:
+			if ((((u8 *) bh->b_data)[0x01 + z] ==

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#854: FILE: fs/vmufat/inode.c:745:
+				inode->i_mode |= S_IWUGO;

CHECK:SPACING: No space is necessary after a cast
#856: FILE: fs/vmufat/inode.c:747:
+			if ((((u8 *) bh->b_data)[z] ==

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#858: FILE: fs/vmufat/inode.c:749:
+				inode->i_mode |= S_IXUGO;

CHECK:SPACING: No space is necessary after a cast
#863: FILE: fs/vmufat/inode.c:754:
+			    le16_to_cpu(((u16 *) bh->b_data)

CHECK:SPACING: No space is necessary after a cast
#912: FILE: fs/vmufat/inode.c:803:
+		fatdata = ((u16 *) bh_fat->b_data)[x];

CHECK:BRACES: braces {} should be used on all arms of this statement
#917: FILE: fs/vmufat/inode.c:808:
+			if (--nextblock >= vmudetails->fat_bnum) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#924: FILE: fs/vmufat/inode.c:815:
+			} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#970: FILE: fs/vmufat/inode.c:861:
+		printk(KERN_ERR "vmufat: attempting to delete"

WARNING:SPLIT_STRING: quoted string split across lines
#971: FILE: fs/vmufat/inode.c:862:
+		printk(KERN_ERR "vmufat: attempting to delete"
+			"inode beyond device size");

WARNING:MISSING_SPACE: break quoted strings at a space character
#971: FILE: fs/vmufat/inode.c:862:
+		printk(KERN_ERR "vmufat: attempting to delete"
+			"inode beyond device size");

ERROR:CODE_INDENT: code indent should use tabs where possible
#976: FILE: fs/vmufat/inode.c:867:
+ ^I * Marking the blocks as unallocated */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#976: FILE: fs/vmufat/inode.c:867:
+ ^I * Marking the blocks as unallocated */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#976: FILE: fs/vmufat/inode.c:867:
+ 	 * Marking the blocks as unallocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#990: FILE: fs/vmufat/inode.c:881:
+	 * to find the appropriate entry */

CHECK:SPACING: No space is necessary after a cast
#1005: FILE: fs/vmufat/inode.c:896:
+		    (((u16 *) bh->b_data)[(y % 0x10) * 0x10 +

CHECK:SPACING: No space is necessary after a cast
#1013: FILE: fs/vmufat/inode.c:904:
+		((u16 *) bh->b_data)[w + z] = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1046: FILE: fs/vmufat/inode.c:937:
+ ^I^I^I * Copy final directory entry into space created$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1046: FILE: fs/vmufat/inode.c:937:
+ ^I^I^I * Copy final directory entry into space created$

CHECK:SPACING: No space is necessary after a cast
#1052: FILE: fs/vmufat/inode.c:943:
+				((u16 *) bh_old->b_data)[w + z] =

CHECK:SPACING: No space is necessary after a cast
#1053: FILE: fs/vmufat/inode.c:944:
+					((u16 *) bh->b_data)[v + z];

CHECK:SPACING: No space is necessary after a cast
#1054: FILE: fs/vmufat/inode.c:945:
+				((u16 *) bh->b_data)[v + z] = 0;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1057: FILE: fs/vmufat/inode.c:948:
+			if (x/0x10 != y/0x10)
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1057: FILE: fs/vmufat/inode.c:948:
+			if (x/0x10 != y/0x10)
 			               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1068: FILE: fs/vmufat/inode.c:959:
+	printk(KERN_ERR "vmufat: Failure to read device,"

WARNING:SPLIT_STRING: quoted string split across lines
#1069: FILE: fs/vmufat/inode.c:960:
+	printk(KERN_ERR "vmufat: Failure to read device,"
+		" could not delete inode - filesystem may be damaged\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#1071: FILE: fs/vmufat/inode.c:962:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1091: FILE: fs/vmufat/inode.c:982:
+static int vmufat_get_block(struct inode *inode, sector_t iblock,
+	struct buffer_head *bh_result, int create)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1145: FILE: fs/vmufat/inode.c:1036:
+			printk(KERN_WARNING "Cannot allocate linear space "

WARNING:SPLIT_STRING: quoted string split across lines
#1146: FILE: fs/vmufat/inode.c:1037:
+			printk(KERN_WARNING "Cannot allocate linear space "
+				"needed for executible\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: fs/vmufat/inode.c:1074:
+static int vmufat_write_begin(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1183: FILE: fs/vmufat/inode.c:1074:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1183: FILE: fs/vmufat/inode.c:1074:
+		loff_t pos, unsigned len, unsigned flags,

CHECK:SPACING: No space is necessary after a cast
#1210: FILE: fs/vmufat/inode.c:1101:
+	    ((struct memcard *) sb->s_fs_info);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1213: FILE: fs/vmufat/inode.c:1104:
+ ^I * we won't update the superblock every$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1213: FILE: fs/vmufat/inode.c:1104:
+ ^I * we won't update the superblock every$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1214: FILE: fs/vmufat/inode.c:1105:
+ ^I * time we change something else on the fs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1214: FILE: fs/vmufat/inode.c:1105:
+ ^I * time we change something else on the fs$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1215: FILE: fs/vmufat/inode.c:1106:
+ ^I * - it is ugly but a sensible compromise$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1215: FILE: fs/vmufat/inode.c:1106:
+ ^I * - it is ugly but a sensible compromise$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1216: FILE: fs/vmufat/inode.c:1107:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1216: FILE: fs/vmufat/inode.c:1107:
+ ^I */$

CHECK:SPACING: No space is necessary after a cast
#1241: FILE: fs/vmufat/inode.c:1132:
+		    (((__u16 *) bh->b_data)[vmufat_index_16(y) +

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1246: FILE: fs/vmufat/inode.c:1137:
+	 * so now update it */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1253: FILE: fs/vmufat/inode.c:1144:
+	if (bh->b_data[z + 1] !=  0
+	    && bh->b_data[z + 1] != (char) 0xff)

CHECK:SPACING: No space is necessary after a cast
#1253: FILE: fs/vmufat/inode.c:1144:
+	    && bh->b_data[z + 1] != (char) 0xff)

CHECK:SPACING: No space is necessary after a cast
#1255: FILE: fs/vmufat/inode.c:1146:
+	((__u16 *) bh->b_data)[z / 2 + 1] = cpu_to_le16(inode_num);

CHECK:SPACING: No space is necessary after a cast
#1288: FILE: fs/vmufat/inode.c:1179:
+	((__u16 *) bh->b_data)[z / 2 + 0x0C] = cpu_to_le16(in->i_blocks);

CHECK:SPACING: No space is necessary after a cast
#1290: FILE: fs/vmufat/inode.c:1181:
+		((__u16 *) bh->b_data)[z / 2 + 0x0D] = 0;

CHECK:SPACING: No space is necessary after a cast
#1292: FILE: fs/vmufat/inode.c:1183:
+		((__u16 *) bh->b_data)[z / 2 + 0x0D] = cpu_to_le16(1);

CHECK:SPACING: No space is necessary after a cast
#1303: FILE: fs/vmufat/inode.c:1194:
+	if (!(((u32 *) bh->b_data)[0] == s_magic &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1304: FILE: fs/vmufat/inode.c:1195:
+	if (!(((u32 *) bh->b_data)[0] == s_magic &&
+		((u32 *) bh->b_data)[1] == s_magic &&

CHECK:SPACING: No space is necessary after a cast
#1304: FILE: fs/vmufat/inode.c:1195:
+		((u32 *) bh->b_data)[1] == s_magic &&

CHECK:SPACING: No space is necessary after a cast
#1305: FILE: fs/vmufat/inode.c:1196:
+		((u32 *) bh->b_data)[2] == s_magic &&

CHECK:SPACING: No space is necessary after a cast
#1306: FILE: fs/vmufat/inode.c:1197:
+		((u32 *) bh->b_data)[3] == s_magic))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1320: FILE: fs/vmufat/inode.c:1211:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1324: FILE: fs/vmufat/inode.c:1215:
+	vmufat_inode_cachep = kmem_cache_create("vmufat_inode_cache",
+		sizeof(struct vmufat_inode), 0,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1325: FILE: fs/vmufat/inode.c:1216:
+			SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD, init_once);
 			                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1330: FILE: fs/vmufat/inode.c:1221:
+	vmufat_blist_cachep = kmem_cache_create("vmufat_blocklist_cache",
+		sizeof(struct vmufat_block_list), 0, SLAB_MEM_SPREAD, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1345: FILE: fs/vmufat/inode.c:1236:
+static int vmufat_fill_super(struct super_block *sb,
+					    void *data, int silent)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1348: FILE: fs/vmufat/inode.c:1239:
+	* 128, 256, 512 and 1024 blocks */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1348: FILE: fs/vmufat/inode.c:1239:
+	/*Search for the superblock - assuming likely sizes are
+	* 128, 256, 512 and 1024 blocks */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1369: FILE: fs/vmufat/inode.c:1260:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1371: FILE: fs/vmufat/inode.c:1262:
+				"vmufat: attempted to mount non vmufat medium"
+				" as vmufat\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vmudata)...) over kmalloc(sizeof(struct memcard)...)
#1377: FILE: fs/vmufat/inode.c:1268:
+	vmudata = kmalloc(sizeof(struct memcard), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#1385: FILE: fs/vmufat/inode.c:1276:
+	vmudata->fat_bnum = le16_to_cpu(((u16 *) bh->b_data)[0x46 / 2]);

CHECK:SPACING: No space is necessary after a cast
#1386: FILE: fs/vmufat/inode.c:1277:
+	vmudata->fat_len = le16_to_cpu(((u16 *) bh->b_data)[0x48 / 2]);

CHECK:SPACING: No space is necessary after a cast
#1387: FILE: fs/vmufat/inode.c:1278:
+	vmudata->dir_bnum = le16_to_cpu(((u16 *) bh->b_data)[0x4a / 2]);

CHECK:SPACING: No space is necessary after a cast
#1388: FILE: fs/vmufat/inode.c:1279:
+	vmudata->dir_len = le16_to_cpu(((u16 *) bh->b_data)[0x4c / 2]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1390: FILE: fs/vmufat/inode.c:1281:
+ ^I* return a neat 200 and ignore 40 blocks of usable space -$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1390: FILE: fs/vmufat/inode.c:1281:
+ ^I* return a neat 200 and ignore 40 blocks of usable space -$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1390: FILE: fs/vmufat/inode.c:1281:
+	/* return the true number of user available blocks - VMUs
+ 	* return a neat 200 and ignore 40 blocks of usable space -

ERROR:CODE_INDENT: code indent should use tabs where possible
#1391: FILE: fs/vmufat/inode.c:1282:
+ ^I* we get round that in a hardware neutral way */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1391: FILE: fs/vmufat/inode.c:1282:
+ ^I* we get round that in a hardware neutral way */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1391: FILE: fs/vmufat/inode.c:1282:
+ 	* we get round that in a hardware neutral way */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1401: FILE: fs/vmufat/inode.c:1292:
+		printk(KERN_ERR "vmufat: get root inode failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1406: FILE: fs/vmufat/inode.c:1297:
+		printk(KERN_ERR "vmufat: get root inode failed - error 0x%lX\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: fs/vmufat/inode.c:1298:
+		printk(KERN_ERR "vmufat: get root inode failed - error 0x%lX\n",
+			PTR_ERR(root_i));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1421: FILE: fs/vmufat/inode.c:1312:
+	iput(root_i);
 	^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1429: FILE: fs/vmufat/inode.c:1320:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1469: FILE: fs/vmufat/inode.c:1360:
+static int vmufat_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1486: FILE: fs/vmufat/inode.c:1377:
+	int err;
+	err = init_inodecache();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 59 warnings, 78 checks, 1426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
