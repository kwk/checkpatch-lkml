WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Subject: [PATCH 1/2] [Target_Core_Mod/ALUA]: Add t10_alua_lu_gp_member_t usage for Logical Unit Groups

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#75: FILE: drivers/lio-core/target_core_alua.c:49:
+extern struct kmem_cache *t10_alua_lu_gp_mem_cache;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#77: FILE: drivers/lio-core/target_core_alua.c:51:
+extern struct kmem_cache *t10_alua_tg_pt_gp_mem_cache;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#96: FILE: drivers/lio-core/target_core_alua.c:168:
+extern t10_alua_lu_gp_member_t *core_alua_allocate_lu_gp_mem (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: drivers/lio-core/target_core_alua.c:168:
+extern t10_alua_lu_gp_member_t *core_alua_allocate_lu_gp_mem (

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: drivers/lio-core/target_core_alua.c:168:
+extern t10_alua_lu_gp_member_t *core_alua_allocate_lu_gp_mem (

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#101: FILE: drivers/lio-core/target_core_alua.c:173:
+	if (!(lu_gp_mem = kmem_cache_zalloc(t10_alua_lu_gp_mem_cache, GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#102: FILE: drivers/lio-core/target_core_alua.c:174:
+		printk(KERN_ERR "Unable to allocate t10_alua_lu_gp_member_t\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#103: FILE: drivers/lio-core/target_core_alua.c:175:
+		return(ERR_PTR(-ENOMEM));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#111: FILE: drivers/lio-core/target_core_alua.c:183:
+	return(lu_gp_mem);

ERROR:SPACING: space required before the open parenthesis '('
#134: FILE: drivers/lio-core/target_core_alua.c:207:
+	while(atomic_read(&lu_gp->lu_gp_ref_cnt))

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#135: FILE: drivers/lio-core/target_core_alua.c:208:
+		msleep(10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: drivers/lio-core/target_core_alua.c:215:
+	list_for_each_entry_safe(lu_gp_mem, lu_gp_mem_tmp,
+				&lu_gp->lu_gp_mem_list, lu_gp_mem_list) {

WARNING:TYPO_SPELLING: 'assoicated' may be misspelled - perhaps 'associated'?
#151: FILE: drivers/lio-core/target_core_alua.c:224:
+		 * lu_gp_mem is assoicated with a single se_device_t->dev_alua_lu_gp_mem,
 		                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:RETURN_VOID: void function return statements are not generally useful
#175: FILE: drivers/lio-core/target_core_alua.c:244:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#182: FILE: drivers/lio-core/target_core_alua.c:246:
+extern void core_alua_free_lu_gp_mem (se_device_t *dev)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#192: FILE: drivers/lio-core/target_core_alua.c:256:
+	if (!(lu_gp_mem = dev->dev_alua_lu_gp_mem))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#196: FILE: drivers/lio-core/target_core_alua.c:260:
+	if ((lu_gp = lu_gp_mem->lu_gp)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: drivers/lio-core/target_core_alua.c:276:
+extern t10_alua_lu_gp_t *core_alua_get_lu_gp_by_name (const char *name)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#215: FILE: drivers/lio-core/target_core_alua.c:276:
+extern t10_alua_lu_gp_t *core_alua_get_lu_gp_by_name (const char *name)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#224: FILE: drivers/lio-core/target_core_alua.c:295:
+extern void core_alua_put_lu_gp_from_name (t10_alua_lu_gp_t *lu_gp)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#245: FILE: drivers/lio-core/target_core_alua.c:307:
+extern void __core_alua_attach_lu_gp_mem (t10_alua_lu_gp_member_t *lu_gp_mem, t10_alua_lu_gp_t *lu_gp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: drivers/lio-core/target_core_alua.c:307:
+extern void __core_alua_attach_lu_gp_mem (t10_alua_lu_gp_member_t *lu_gp_mem, t10_alua_lu_gp_t *lu_gp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: drivers/lio-core/target_core_alua.c:322:
+extern void __core_alua_drop_lu_gp_mem (t10_alua_lu_gp_member_t *lu_gp_mem, t10_alua_lu_gp_t *lu_gp)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#327: FILE: drivers/lio-core/target_core_alua.c:593:
+		if (!(lu_gp_mem = core_alua_allocate_lu_gp_mem(dev)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: drivers/lio-core/target_core_alua.c:595:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: drivers/lio-core/target_core_alua.c:598:
+^I^I__core_alua_attach_lu_gp_mem(lu_gp_mem, se_global->default_lu_gp);^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#346: FILE: drivers/lio-core/target_core_alua.h:37:
+extern struct t10_alua_lu_gp_member_s *core_alua_allocate_lu_gp_mem (struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: drivers/lio-core/target_core_alua.h:37:
+extern struct t10_alua_lu_gp_member_s *core_alua_allocate_lu_gp_mem (struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#346: FILE: drivers/lio-core/target_core_alua.h:37:
+extern struct t10_alua_lu_gp_member_s *core_alua_allocate_lu_gp_mem (struct se_device_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: drivers/lio-core/target_core_alua.h:39:
+extern void core_alua_free_lu_gp_mem (struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#352: FILE: drivers/lio-core/target_core_alua.h:39:
+extern void core_alua_free_lu_gp_mem (struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#352: FILE: drivers/lio-core/target_core_alua.h:39:
+extern void core_alua_free_lu_gp_mem (struct se_device_s *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: drivers/lio-core/target_core_alua.h:40:
+extern struct t10_alua_lu_gp_s *core_alua_get_lu_gp_by_name (const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#353: FILE: drivers/lio-core/target_core_alua.h:40:
+extern struct t10_alua_lu_gp_s *core_alua_get_lu_gp_by_name (const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#353: FILE: drivers/lio-core/target_core_alua.h:40:
+extern struct t10_alua_lu_gp_s *core_alua_get_lu_gp_by_name (const char *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: drivers/lio-core/target_core_alua.h:41:
+extern void core_alua_put_lu_gp_from_name (struct t10_alua_lu_gp_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: drivers/lio-core/target_core_alua.h:41:
+extern void core_alua_put_lu_gp_from_name (struct t10_alua_lu_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_lu_gp_s *' should also have an identifier name
#354: FILE: drivers/lio-core/target_core_alua.h:41:
+extern void core_alua_put_lu_gp_from_name (struct t10_alua_lu_gp_s *);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#355: FILE: drivers/lio-core/target_core_alua.h:42:
+extern void __core_alua_attach_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#355: FILE: drivers/lio-core/target_core_alua.h:42:
+extern void __core_alua_attach_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: drivers/lio-core/target_core_alua.h:42:
+extern void __core_alua_attach_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_lu_gp_member_s *' should also have an identifier name
#355: FILE: drivers/lio-core/target_core_alua.h:42:
+extern void __core_alua_attach_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_lu_gp_s *' should also have an identifier name
#355: FILE: drivers/lio-core/target_core_alua.h:42:
+extern void __core_alua_attach_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#356: FILE: drivers/lio-core/target_core_alua.h:43:
+extern void __core_alua_drop_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#356: FILE: drivers/lio-core/target_core_alua.h:43:
+extern void __core_alua_drop_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#356: FILE: drivers/lio-core/target_core_alua.h:43:
+extern void __core_alua_drop_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_lu_gp_member_s *' should also have an identifier name
#356: FILE: drivers/lio-core/target_core_alua.h:43:
+extern void __core_alua_drop_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_lu_gp_s *' should also have an identifier name
#356: FILE: drivers/lio-core/target_core_alua.h:43:
+extern void __core_alua_drop_lu_gp_mem (struct t10_alua_lu_gp_member_s *, struct t10_alua_lu_gp_s *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#357: FILE: drivers/lio-core/target_core_alua.h:44:
+extern void core_alua_drop_lu_gp_dev (struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#357: FILE: drivers/lio-core/target_core_alua.h:44:
+extern void core_alua_drop_lu_gp_dev (struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#357: FILE: drivers/lio-core/target_core_alua.h:44:
+extern void core_alua_drop_lu_gp_dev (struct se_device_s *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#381: FILE: drivers/lio-core/target_core_base.h:198:
+	spinlock_t lu_gp_lock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#388: FILE: drivers/lio-core/target_core_base.h:204:
+typedef struct t10_alua_lu_gp_member_s {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#390: FILE: drivers/lio-core/target_core_base.h:206:
+	spinlock_t lu_gp_mem_lock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#403: FILE: drivers/lio-core/target_core_base.h:223:
+typedef struct t10_alua_tg_pt_gp_member_s {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#405: FILE: drivers/lio-core/target_core_base.h:225:
+	spinlock_t tg_pt_gp_mem_lock;

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#425: FILE: drivers/lio-core/target_core_base.h:627:
+	struct t10_alua_lu_gp_member_s *dev_alua_lu_gp_mem; /* Used for ALUA Logical Unit Group membership */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#459: FILE: drivers/lio-core/target_core_configfs.c:1264:
+	if (!(lu_gp_mem = dev->dev_alua_lu_gp_mem)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#460: FILE: drivers/lio-core/target_core_configfs.c:1265:
+		printk(KERN_ERR "NULL se_device_t->dev_alua_lu_gp_mem pointer\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#465: FILE: drivers/lio-core/target_core_configfs.c:1270:
+	if ((lu_gp = lu_gp_mem->lu_gp)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#509: FILE: drivers/lio-core/target_core_configfs.c:1315:
+		if (!(lu_gp_new = core_alua_get_lu_gp_by_name(strstrip(buf))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#512: FILE: drivers/lio-core/target_core_configfs.c:1318:
+	if (!(lu_gp_mem = dev->dev_alua_lu_gp_mem)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#515: FILE: drivers/lio-core/target_core_configfs.c:1321:
+		printk(KERN_ERR "NULL se_device_t->dev_alua_lu_gp_mem pointer\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#523: FILE: drivers/lio-core/target_core_configfs.c:1326:
+	if ((lu_gp = lu_gp_mem->lu_gp)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#610: FILE: drivers/lio-core/target_core_device.c:767:
+^Icore_alua_free_lu_gp_mem(dev);^I$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#622: FILE: drivers/lio-core/target_core_transport.c:213:
+struct kmem_cache *t10_alua_lu_gp_mem_cache = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#624: FILE: drivers/lio-core/target_core_transport.c:215:
+struct kmem_cache *t10_alua_tg_pt_gp_mem_cache = NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#632: FILE: drivers/lio-core/target_core_transport.c:297:
+	if (!(t10_alua_lu_gp_mem_cache = kmem_cache_create("t10_alua_lu_gp_mem_cache",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: drivers/lio-core/target_core_transport.c:298:
+	if (!(t10_alua_lu_gp_mem_cache = kmem_cache_create("t10_alua_lu_gp_mem_cache",
+			sizeof(t10_alua_lu_gp_member_t), __alignof__(t10_alua_lu_gp_member_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#635: FILE: drivers/lio-core/target_core_transport.c:300:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_lu_gp_mem_cache failed\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#644: FILE: drivers/lio-core/target_core_transport.c:309:
+	if (!(t10_alua_tg_pt_gp_mem_cache = kmem_cache_create("t10_alua_tg_pt_gp_mem_cache",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: drivers/lio-core/target_core_transport.c:310:
+	if (!(t10_alua_tg_pt_gp_mem_cache = kmem_cache_create("t10_alua_tg_pt_gp_mem_cache",
+			sizeof(t10_alua_tg_pt_gp_member_t), __alignof__(t10_alua_tg_pt_gp_member_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#647: FILE: drivers/lio-core/target_core_transport.c:312:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_tg_pt_gp_mem_t failed\n");

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#658: FILE: drivers/lio-core/target_core_transport.c:358:
+	if (t10_alua_lu_gp_mem_cache)
+		kmem_cache_destroy(t10_alua_lu_gp_mem_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#662: FILE: drivers/lio-core/target_core_transport.c:362:
+	if (t10_alua_tg_pt_gp_mem_cache)
+		kmem_cache_destroy(t10_alua_tg_pt_gp_mem_cache);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#721: FILE: drivers/lio-core/target_core_transport.c:4285:
+			if (!(lu_gp = dev->dev_alua_lu_gp_mem->lu_gp)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168203.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 43 warnings, 14 checks, 610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168203.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
