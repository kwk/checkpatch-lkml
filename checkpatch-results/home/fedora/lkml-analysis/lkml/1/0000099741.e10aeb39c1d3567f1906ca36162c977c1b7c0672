WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#46: FILE: tools/perf/util/parse-events.c:15:
+static char default_debugfs_path[] = "/sys/kernel/debug/tracing/events";

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sys_dirent' - possible side-effects?
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sys_dirent' may be better as '(sys_dirent)' to avoid precedence issues
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sys_next' - possible side-effects?
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sys_next' may be better as '(sys_next)' to avoid precedence issues
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file' - possible side-effects?
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'st' - possible side-effects?
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'st' may be better as '(st)' to avoid precedence issues
#55: FILE: tools/perf/util/parse-events.c:115:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	       \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			       \
+	   (strcmp(sys_dirent.d_name, "..") != 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#56: FILE: tools/perf/util/parse-events.c:116:
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sprintf(file, "%s/%s", default_debugfs_path, sys_dirent.d_name) && \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'evt_dirent' - possible side-effects?
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'evt_dirent' may be better as '(evt_dirent)' to avoid precedence issues
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'evt_next' - possible side-effects?
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'evt_next' may be better as '(evt_next)' to avoid precedence issues
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file' - possible side-effects?
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'st' - possible side-effects?
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'st' may be better as '(st)' to avoid precedence issues
#62: FILE: tools/perf/util/parse-events.c:122:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)    \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \
+			evt_dirent.d_name) && 				       \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		       \
+	   (strcmp(evt_dirent.d_name, ".") != 0) && 			       \
+	   (strcmp(evt_dirent.d_name, "..") != 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#63: FILE: tools/perf/util/parse-events.c:123:
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (sprintf(file, "%s/%s/%s", default_debugfs_path, sys_dirent.d_name, \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#65: FILE: tools/perf/util/parse-events.c:125:
+^I^I^Ievt_dirent.d_name) && ^I^I^I^I       \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#67: FILE: tools/perf/util/parse-events.c:127:
+^I   (strcmp(evt_dirent.d_name, ".") != 0) && ^I^I^I       \$

CHECK:SPACING: No space is necessary after a cast
#80: FILE: tools/perf/util/parse-events.c:140:
+	else if (st_fs.f_type != (long) DEBUGFS_MAGIC)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'unkown' may be misspelled - perhaps 'unknown'?
#97: FILE: tools/perf/util/parse-events.c:157:
+		return "unkown";
 		        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: tools/perf/util/parse-events.c:167:
+		for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next,
+								evt_path, st) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: tools/perf/util/parse-events.c:183:
+				snprintf(tracepoint_name, 2 * MAX_EVENT_LENGTH,
+					"%s:%s", sys_dirent.d_name,

WARNING:TYPO_SPELLING: 'unkown' may be misspelled - perhaps 'unknown'?
#132: FILE: tools/perf/util/parse-events.c:192:
+	return "unkown";
 	        ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: tools/perf/util/parse-events.c:354:
+static int parse_tracepoint_event(const char **strp,
+				    struct perf_counter_attr *attr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#170: FILE: tools/perf/util/parse-events.c:371:
+	if (evt_name) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#180: FILE: tools/perf/util/parse-events.c:381:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: tools/perf/util/parse-events.c:393:
+			for_each_event(sys_dirent, evt_dir, evt_dirent,
+						       evt_next, evt_path, st) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: tools/perf/util/parse-events.c:605:
+		for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next,
+								evt_path, st) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#265: FILE: tools/perf/util/parse-events.c:608:
+				event_type_descriptors[PERF_TYPE_TRACEPOINT+1]);
 				                                           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099741.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 7 warnings, 23 checks, 250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099741.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
