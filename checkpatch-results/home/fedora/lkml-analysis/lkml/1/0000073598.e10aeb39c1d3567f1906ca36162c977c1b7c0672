WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core-iommu-for-linus

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#363: FILE: arch/sparc/include/asm/dma-mapping.h:17:
+extern struct dma_map_ops *dma_ops, pci32_dma_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#416: FILE: arch/sparc/include/asm/dma-mapping.h:20:
+static inline struct dma_map_ops *get_dma_ops(struct device *dev)

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#452: FILE: arch/sparc/include/asm/dma-mapping.h:34:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#476: FILE: arch/sparc/include/asm/dma-mapping.h:45:
+	struct dma_map_ops *ops = get_dma_ops(dev);

CHECK:BIT_MACRO: Prefer using the BIT macro
#785: FILE: arch/sparc/kernel/dma.c:6:
+#define PREALLOC_DMA_DEBUG_ENTRIES       (1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#952: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1020: FILE: arch/sparc/kernel/iommu.c:829:
+static struct dma_map_ops sun4u_dma_ops = {

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1029: FILE: arch/sparc/kernel/iommu.c:840:
+struct dma_map_ops *dma_ops = &sun4u_dma_ops;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1032: FILE: arch/sparc/kernel/iommu.c:843:
+extern int pci64_dma_supported(struct pci_dev *pdev, u64 device_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1075: FILE: arch/sparc/kernel/ioport.c:302:
+			       dma_addr_t ba)
 			                  ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1084: FILE: arch/sparc/kernel/ioport.c:320:
+		printk("sbus_free_consistent: region 0x%lx asked 0x%zx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sbus_free_consistent', this function's name, in a string
#1084: FILE: arch/sparc/kernel/ioport.c:320:
+		printk("sbus_free_consistent: region 0x%lx asked 0x%zx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1085: FILE: arch/sparc/kernel/ioport.c:321:
+		printk("sbus_free_consistent: region 0x%lx asked 0x%zx\n",
 		    (long)((res->end-res->start)+1), n);

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1108: FILE: arch/sparc/kernel/ioport.c:358:
+static void sbus_unmap_page(struct device *dev, dma_addr_t ba, size_t n,
                                                            ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1135: FILE: arch/sparc/kernel/ioport.c:385:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1142: FILE: arch/sparc/kernel/ioport.c:391:
+	BUG();

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1145: FILE: arch/sparc/kernel/ioport.c:394:
+struct dma_map_ops sbus_dma_ops = {

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1156: FILE: arch/sparc/kernel/ioport.c:405:
+struct dma_map_ops *dma_ops = &sbus_dma_ops;

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1186: FILE: arch/sparc/kernel/ioport.c:479:
+				dma_addr_t ba)
 				           ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1310: FILE: arch/sparc/kernel/ioport.c:586:
+static void pci32_sync_single_for_cpu(struct device *dev, dma_addr_t ba,
                                                                      ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1323: FILE: arch/sparc/kernel/ioport.c:595:
+static void pci32_sync_single_for_device(struct device *dev, dma_addr_t ba,
                                                                         ^^

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1379: FILE: arch/sparc/kernel/ioport.c:642:
+struct dma_map_ops pci32_dma_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1420: FILE: arch/sparc/kernel/ioport.c:683:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1500: FILE: arch/sparc/kernel/pci_sun4v.c:528:
+static struct dma_map_ops sun4v_dma_ops = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1511: FILE: arch/sparc/kernel/pci_sun4v.c:537:
 static void __devinit pci_sun4v_scan_bus(struct pci_pbm_info *pbm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1532: FILE: arch/x86/include/asm/amd_iommu.h:28:
+extern int amd_iommu_init_passthrough(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1566: FILE: arch/x86/include/asm/amd_iommu_types.h:155:
+#define PM_LEVEL_SIZE(x)	(((x) < 6) ? \
+				  ((1ULL << PM_LEVEL_SHIFT((x))) - 1): \
+				   (0xffffffffffffffffULL))

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1567: FILE: arch/x86/include/asm/amd_iommu_types.h:156:
+				  ((1ULL << PM_LEVEL_SHIFT((x))) - 1): \
 				                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1579: FILE: arch/x86/include/asm/amd_iommu_types.h:168:
+#define PM_ALIGNED(lvl, addr)	((PM_MAP_MASK(lvl) & (addr)) == (addr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1599: FILE: arch/x86/include/asm/amd_iommu_types.h:199:
+#define PD_PASSTHROUGH_MASK	(1UL << 2) /* domain has no page

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1600: FILE: arch/x86/include/asm/amd_iommu_types.h:200:
+#define PD_PASSTHROUGH_MASK	(1UL << 2) /* domain has no page
+					      translation */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1600: FILE: arch/x86/include/asm/amd_iommu_types.h:200:
+					      translation */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1607: FILE: arch/x86/include/asm/amd_iommu_types.h:206:
+			printk(KERN_INFO "AMD-Vi: " format, ## arg);	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1634: FILE: arch/x86/include/asm/amd_iommu_types.h:470:
+extern void amd_iommu_reset_cmd_buffer(struct amd_iommu *iommu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1721: FILE: arch/x86/kernel/amd_iommu.c:151:
+		pr_err("AMD-Vi: DTE[%d]: %08x\n", i,
+			amd_iommu_dev_table[devid].data[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1742: FILE: arch/x86/kernel/amd_iommu.c:172:
+	printk(KERN_ERR "AMD-Vi: Event logged [");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1817: FILE: arch/x86/kernel/amd_iommu.c:503:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'amd_iommu_pd_table[i] != domain'
#1877: FILE: arch/x86/kernel/amd_iommu.c:546:
+		if ((domain == NULL && amd_iommu_pd_table[i] == NULL) ||
+		    (amd_iommu_pd_table[i] != domain))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!domain"
#1877: FILE: arch/x86/kernel/amd_iommu.c:546:
+		if ((domain == NULL && amd_iommu_pd_table[i] == NULL) ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!amd_iommu_pd_table[i]"
#1877: FILE: arch/x86/kernel/amd_iommu.c:546:
+		if ((domain == NULL && amd_iommu_pd_table[i] == NULL) ||

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1925: FILE: arch/x86/kernel/amd_iommu.c:605:
+	BUG_ON(!PM_ALIGNED(map_size, bus_addr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1926: FILE: arch/x86/kernel/amd_iommu.c:606:
+	BUG_ON(!PM_ALIGNED(map_size, phys_addr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2150: FILE: arch/x86/kernel/amd_iommu.c:1235:
+		struct amd_iommu *iommu = amd_iommu_rlookup_table[devid];
+		__attach_device(iommu, pt_domain, devid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2461: FILE: arch/x86/kernel/amd_iommu_init.c:255:
+	printk(KERN_INFO "AMD-Vi: Enabling IOMMU at %s cap 0x%hx\n",

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#2461: FILE: arch/x86/kernel/amd_iommu_init.c:255:
+	printk(KERN_INFO "AMD-Vi: Enabling IOMMU at %s cap 0x%hx\n",
 	       dev_name(&iommu->dev->dev), iommu->cap_ptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2522: FILE: arch/x86/kernel/amd_iommu_init.c:1163:
+		printk(KERN_INFO "AMD-Vi disabled by kernel command line\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2544: FILE: arch/x86/kernel/amd_iommu_init.c:1267:
+	printk(KERN_INFO "AMD-Vi: device isolation ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2552: FILE: arch/x86/kernel/amd_iommu_init.c:1274:
+		printk(KERN_INFO "AMD-Vi: IO/TLB flush on unmap enabled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2555: FILE: arch/x86/kernel/amd_iommu_init.c:1276:
+		printk(KERN_INFO "AMD-Vi: Lazy IO/TLB flushing enabled\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2627: FILE: arch/x86/kernel/pci-nommu.c:83:
+static void nommu_sync_single_for_device(struct device *dev,
+			dma_addr_t addr, size_t size,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2633: FILE: arch/x86/kernel/pci-nommu.c:89:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2635: FILE: arch/x86/kernel/pci-nommu.c:91:
+static void nommu_sync_sg_for_device(struct device *dev,
+			struct scatterlist *sg, int nelems,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 36 warnings, 16 checks, 2633 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
