WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: Documentation/lguest/lguest.c:1:
+/* Simple program to layout "physical" memory for new lguest guest.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#87: FILE: Documentation/lguest/lguest.c:2:
+ * Linked high to avoid likely physical memory.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#116: FILE: Documentation/lguest/lguest.c:31:
+typedef uint32_t u32;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#117: FILE: Documentation/lguest/lguest.c:32:
+typedef uint16_t u16;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#118: FILE: Documentation/lguest/lguest.c:33:
+typedef uint8_t u8;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: Documentation/lguest/lguest.c:37:
+#define PAGE_PRESENT 0x7 ^I/* Present, RW, Execute */$

ERROR:SPACING: space required before the open parenthesis '('
#127: FILE: Documentation/lguest/lguest.c:42:
+	do { if (verbose) printf(args); fflush(stdout); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#130: FILE: Documentation/lguest/lguest.c:45:
+struct devices
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#138: FILE: Documentation/lguest/lguest.c:53:
+struct device
+{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#157: FILE: Documentation/lguest/lguest.c:72:
+static struct iovec discard_iov = { .iov_base=buf, .iov_len=sizeof(buf) };
                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#157: FILE: Documentation/lguest/lguest.c:72:
+static struct iovec discard_iov = { .iov_base=buf, .iov_len=sizeof(buf) };
                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#184: FILE: Documentation/lguest/lguest.c:99:
+	return ((addr + getpagesize()-1) & ~(getpagesize()-1));
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#184: FILE: Documentation/lguest/lguest.c:99:
+	return ((addr + getpagesize()-1) & ~(getpagesize()-1));
 	                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: Documentation/lguest/lguest.c:115:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#205: FILE: Documentation/lguest/lguest.c:120:
+		     PROT_READ|PROT_EXEC|PROT_WRITE,
 		              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#205: FILE: Documentation/lguest/lguest.c:120:
+		     PROT_READ|PROT_EXEC|PROT_WRITE,
 		                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#206: FILE: Documentation/lguest/lguest.c:121:
+		     MAP_FIXED|MAP_PRIVATE, ifd, 0);
 		              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#219: FILE: Documentation/lguest/lguest.c:134:
+		 PROT_READ|PROT_WRITE|PROT_EXEC,
 		          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#219: FILE: Documentation/lguest/lguest.c:134:
+		 PROT_READ|PROT_WRITE|PROT_EXEC,
 		                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#220: FILE: Documentation/lguest/lguest.c:135:
+		 MAP_FIXED|MAP_PRIVATE, zero_fd, 0) != (void *)0)
 		          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#234: FILE: Documentation/lguest/lguest.c:149:
+	pte_pages = 1 + (mem/getpagesize() + 1023)/1024;
 	                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#234: FILE: Documentation/lguest/lguest.c:149:
+	pte_pages = 1 + (mem/getpagesize() + 1023)/1024;
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#236: FILE: Documentation/lguest/lguest.c:151:
+	pgdir = (u32 *)page_align(mem - *ird_size - pte_pages*getpagesize());
 	                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: Documentation/lguest/lguest.c:161:
+		linear, linear+i-1, 0, i-1, linear[0], linear[i-1]);
 		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#246: FILE: Documentation/lguest/lguest.c:161:
+		linear, linear+i-1, 0, i-1, linear[0], linear[i-1]);
 		                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#246: FILE: Documentation/lguest/lguest.c:161:
+		linear, linear+i-1, 0, i-1, linear[0], linear[i-1]);
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#246: FILE: Documentation/lguest/lguest.c:161:
+		linear, linear+i-1, 0, i-1, linear[0], linear[i-1]);
 		                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#249: FILE: Documentation/lguest/lguest.c:164:
+	for (i = 0; i < mem / getpagesize(); i += getpagesize()/sizeof(u32)) {
 	                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: Documentation/lguest/lguest.c:165:
+^I^Ipgdir[(i + *page_offset/getpagesize())/1024] $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#250: FILE: Documentation/lguest/lguest.c:165:
+		pgdir[(i + *page_offset/getpagesize())/1024] 
 		                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#250: FILE: Documentation/lguest/lguest.c:165:
+		pgdir[(i + *page_offset/getpagesize())/1024] 
 		                                      ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#251: FILE: Documentation/lguest/lguest.c:166:
+		pgdir[(i + *page_offset/getpagesize())/1024] 
+			= (((u32)linear + i*sizeof(u32)) | PAGE_PRESENT);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#251: FILE: Documentation/lguest/lguest.c:166:
+			= (((u32)linear + i*sizeof(u32)) | PAGE_PRESENT);
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#253: FILE: Documentation/lguest/lguest.c:168:
+			(i + *page_offset/getpagesize())/1024,
 			                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#253: FILE: Documentation/lguest/lguest.c:168:
+			(i + *page_offset/getpagesize())/1024,
 			                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#254: FILE: Documentation/lguest/lguest.c:169:
+			pgdir[(i + *page_offset/getpagesize())/1024]);
 			                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#254: FILE: Documentation/lguest/lguest.c:169:
+			pgdir[(i + *page_offset/getpagesize())/1024]);
 			                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#261: FILE: Documentation/lguest/lguest.c:176:
+static u32 map_elf(int elf_fd, const Elf32_Ehdr *ehdr, unsigned long mem,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Phdr>
#267: FILE: Documentation/lguest/lguest.c:182:
+	Elf32_Phdr phdr[ehdr->e_phnum];

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#272: FILE: Documentation/lguest/lguest.c:187:
+	if (ehdr->e_type != ET_EXEC
+	    || ehdr->e_machine != EM_386

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#273: FILE: Documentation/lguest/lguest.c:188:
+	    || ehdr->e_machine != EM_386
+	    || ehdr->e_phentsize != sizeof(Elf32_Phdr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#274: FILE: Documentation/lguest/lguest.c:189:
+	    || ehdr->e_phentsize != sizeof(Elf32_Phdr)
+	    || ehdr->e_phnum < 1 || ehdr->e_phnum > 65536U/sizeof(Elf32_Phdr))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: Documentation/lguest/lguest.c:189:
+	    || ehdr->e_phnum < 1 || ehdr->e_phnum > 65536U/sizeof(Elf32_Phdr))
 	                                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#286: FILE: Documentation/lguest/lguest.c:201:
+	 * to their physical addresses (our virtual == guest physical). */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#311: FILE: Documentation/lguest/lguest.c:226:
+			    PROT_READ|PROT_WRITE|PROT_EXEC,
 			             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#311: FILE: Documentation/lguest/lguest.c:226:
+			    PROT_READ|PROT_WRITE|PROT_EXEC,
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#312: FILE: Documentation/lguest/lguest.c:227:
+			    MAP_FIXED|MAP_PRIVATE,
 			             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#330: FILE: Documentation/lguest/lguest.c:245:
+		if (img[i] == 0xA1 && ++possibilities[img[i+4]] > 3)
 		                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#331: FILE: Documentation/lguest/lguest.c:246:
+			return (unsigned long)img[i+4] << 24;
 			                           ^

CHECK:CAMELCASE: Avoid CamelCase: <gzFile>
#340: FILE: Documentation/lguest/lguest.c:255:
+	gzFile f;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: Documentation/lguest/lguest.c:277:
+static u32 load_bzimage(int bzimage_fd, const Elf32_Ehdr *ehdr, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#401: FILE: Documentation/lguest/lguest.c:316:
+		 PROT_READ|PROT_WRITE|PROT_EXEC,
 		          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#401: FILE: Documentation/lguest/lguest.c:316:
+		 PROT_READ|PROT_WRITE|PROT_EXEC,
 		                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#402: FILE: Documentation/lguest/lguest.c:317:
+		 MAP_FIXED|MAP_PRIVATE, zero_fd, 0) != (void *)addr)
 		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#415: FILE: Documentation/lguest/lguest.c:330:
+		top -= num_pages*getpagesize();
 		                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#422: FILE: Documentation/lguest/lguest.c:337:
+			descs[i].features = descs[i].status = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#447: FILE: Documentation/lguest/lguest.c:362:
+						      unsigned,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#487: FILE: Documentation/lguest/lguest.c:402:
+		strcpy(dst+len, args[i]);
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#488: FILE: Documentation/lguest/lguest.c:403:
+		strcat(dst+len, " ");
 		          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#502: FILE: Documentation/lguest/lguest.c:417:
+}
+#define check_pointer(addr,size) _check_pointer(addr, size, __LINE__)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#502: FILE: Documentation/lguest/lguest.c:417:
+#define check_pointer(addr,size) _check_pointer(addr, size, __LINE__)
                           ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#505: FILE: Documentation/lguest/lguest.c:420:
+static u32 *dma2iov(unsigned long dma, struct iovec iov[], unsigned *num)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#529: FILE: Documentation/lguest/lguest.c:444:
+			   struct iovec iov[], unsigned *num, u32 *irq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#549: FILE: Documentation/lguest/lguest.c:464:
+	u32 buf[] = { LHREQ_IRQ, irq };
+	if (write(fd, buf, sizeof(buf)) != 0)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#560: FILE: Documentation/lguest/lguest.c:475:
+struct console_abort
+{

CHECK:BRACES: braces {} should be used on all arms of this statement
#592: FILE: Documentation/lguest/lguest.c:507:
+	if (len == 1 && ((char *)iov[0].iov_base)[0] == 3) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#593: FILE: Documentation/lguest/lguest.c:508:
+		if (!abort->count++)
[...]
+		else if (abort->count == 3) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#597: FILE: Documentation/lguest/lguest.c:512:
+			struct timeval now;
+			gettimeofday(&now, NULL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#598: FILE: Documentation/lguest/lguest.c:513:
+			if (now.tv_sec <= abort->start.tv_sec+1)
 			                                     ^

CHECK:BRACES: Unbalanced braces around else statement
#602: FILE: Documentation/lguest/lguest.c:517:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#618: FILE: Documentation/lguest/lguest.c:533:
+			     unsigned num, struct device *dev)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#626: FILE: Documentation/lguest/lguest.c:541:
+			       unsigned num, struct device *dev)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#664: FILE: Documentation/lguest/lguest.c:579:
+#define HIPQUAD(ip)				\
+	((u8)(ip >> 24)),			\
+	((u8)(ip >> 16)),			\
+	((u8)(ip >> 8)),			\
+	((u8)(ip))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#664: FILE: Documentation/lguest/lguest.c:579:
+#define HIPQUAD(ip)				\
+	((u8)(ip >> 24)),			\
+	((u8)(ip >> 16)),			\
+	((u8)(ip >> 8)),			\
+	((u8)(ip))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip' may be better as '(ip)' to avoid precedence issues
#664: FILE: Documentation/lguest/lguest.c:579:
+#define HIPQUAD(ip)				\
+	((u8)(ip >> 24)),			\
+	((u8)(ip >> 16)),			\
+	((u8)(ip >> 8)),			\
+	((u8)(ip))

WARNING:LINE_SPACING: Missing a blank line after declarations
#700: FILE: Documentation/lguest/lguest.c:615:
+	int parent = getppid();
+	nice(19);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#707: FILE: Documentation/lguest/lguest.c:622:
+		select(devices->max_infd+1, &rfds, NULL, NULL, NULL);
 		                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#710: FILE: Documentation/lguest/lguest.c:625:
+			int ignorefd;
+			if (read(pipefd, &ignorefd, sizeof(ignorefd)) == 0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#729: FILE: Documentation/lguest/lguest.c:644:
+	lenp = get_dma_buffer(fd, dev->mem+peer_offset(NET_PEERNUM), iov, &num,
 	                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#760: FILE: Documentation/lguest/lguest.c:675:
+	     fl.l_start < getpagesize()/sizeof(struct lguest_net);
 	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#778: FILE: Documentation/lguest/lguest.c:693:
+			netfd = open(filename, O_RDWR|O_CREAT, 0600);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#794: FILE: Documentation/lguest/lguest.c:709:
+	dev->desc->features = find_slot(netfd, filename)|LGUEST_NET_F_NOCSUM;
 	                                                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#796: FILE: Documentation/lguest/lguest.c:711:
+	if (mmap(dev->mem, getpagesize(), PROT_READ|PROT_WRITE,
[...]
+			err(1, "could not mmap '%s'", filename);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#796: FILE: Documentation/lguest/lguest.c:711:
+	if (mmap(dev->mem, getpagesize(), PROT_READ|PROT_WRITE,
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: Documentation/lguest/lguest.c:712:
+	if (mmap(dev->mem, getpagesize(), PROT_READ|PROT_WRITE,
+			 MAP_FIXED|MAP_SHARED, netfd, 0) != dev->mem)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#797: FILE: Documentation/lguest/lguest.c:712:
+			 MAP_FIXED|MAP_SHARED, netfd, 0) != dev->mem)
 			          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#799: FILE: Documentation/lguest/lguest.c:714:
+^Iverbose("device %p@%p: shared net %s, peer %i\n", dev->desc, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: Documentation/lguest/lguest.c:715:
+^I^I(void *)(dev->desc->pfn * getpagesize()), filename, $

WARNING:NAKED_SSCANF: unchecked sscanf return value
#808: FILE: Documentation/lguest/lguest.c:723:
+	sscanf(ipaddr, "%u.%u.%u.%u", &byte[0], &byte[1], &byte[2], &byte[3]);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#841: FILE: Documentation/lguest/lguest.c:756:
+	dev->desc->features = NET_PEERNUM|LGUEST_DEVICE_F_RANDOMNESS;
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#842: FILE: Documentation/lguest/lguest.c:757:
+^Iverbose("device %p@%p: tun net %u.%u.%u.%u\n", dev->desc, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#856: FILE: Documentation/lguest/lguest.c:771:
+	fd = open(filename, O_RDWR|O_LARGEFILE|O_DIRECT, 0);
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#856: FILE: Documentation/lguest/lguest.c:771:
+	fd = open(filename, O_RDWR|O_LARGEFILE|O_DIRECT, 0);
 	                                      ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#863: FILE: Documentation/lguest/lguest.c:778:
+	blocksize = dev->priv = malloc(sizeof(*blocksize));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#867: FILE: Documentation/lguest/lguest.c:782:
+	p->num_sectors = *blocksize/512;
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: Documentation/lguest/lguest.c:783:
+^Iverbose("device %p@%p: block %i sectors\n", dev->desc, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#873: FILE: Documentation/lguest/lguest.c:788:
+				 unsigned num, struct device*dev)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#873: FILE: Documentation/lguest/lguest.c:788:
+				 unsigned num, struct device*dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#885: FILE: Documentation/lguest/lguest.c:800:
+		struct termios term = orig_term;
+		term.c_lflag &= ~(ISIG|ICANON|ECHO);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#885: FILE: Documentation/lguest/lguest.c:800:
+		term.c_lflag &= ~(ISIG|ICANON|ECHO);
 		                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#885: FILE: Documentation/lguest/lguest.c:800:
+		term.c_lflag &= ~(ISIG|ICANON|ECHO);
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: Documentation/lguest/lguest.c:811:
+^Iverbose("device %p@%p: console\n", dev->desc, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#913: FILE: Documentation/lguest/lguest.c:828:
+	unsigned num = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#937: FILE: Documentation/lguest/lguest.c:852:
+		if (select(devices->max_infd+1, &fds, NULL, NULL, &poll) == 0)
 		                            ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#963: FILE: Documentation/lguest/lguest.c:878:
+	u32 (*load)(int, const Elf32_Ehdr *ehdr, unsigned long,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#963: FILE: Documentation/lguest/lguest.c:878:
+	u32 (*load)(int, const Elf32_Ehdr *ehdr, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#963: FILE: Documentation/lguest/lguest.c:878:
+	u32 (*load)(int, const Elf32_Ehdr *ehdr, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#963: FILE: Documentation/lguest/lguest.c:878:
+	u32 (*load)(int, const Elf32_Ehdr *ehdr, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#963: FILE: Documentation/lguest/lguest.c:878:
+	u32 (*load)(int, const Elf32_Ehdr *ehdr, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#963: FILE: Documentation/lguest/lguest.c:878:
+	u32 (*load)(int, const Elf32_Ehdr *ehdr, unsigned long,

WARNING:SPLIT_STRING: quoted string split across lines
#975: FILE: Documentation/lguest/lguest.c:890:
+		errx(1, "Usage: lguest [--verbose] <mem> vmlinux "
+			"[--sharenet=<filename>|--tunnet=<ipaddr>|--block=<filename>"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#976: FILE: Documentation/lguest/lguest.c:891:
+			"[--sharenet=<filename>|--tunnet=<ipaddr>|--block=<filename>"
+			"|--initrd=<filename>]... [args...]");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1004: FILE: Documentation/lguest/lguest.c:919:
+		if ((argval = get_arg(argv[arg], "--sharenet=")) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1006: FILE: Documentation/lguest/lguest.c:921:
+		else if ((argval = get_arg(argv[arg], "--tunnet=")) != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1008: FILE: Documentation/lguest/lguest.c:923:
+		else if ((argval = get_arg(argv[arg], "--block=")) != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1010: FILE: Documentation/lguest/lguest.c:925:
+		else if ((argval = get_arg(argv[arg], "--initrd=")) != NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1021: FILE: Documentation/lguest/lguest.c:936:
+	concat(boot->cmdline, argv+arg);
 	                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1022: FILE: Documentation/lguest/lguest.c:937:
+	boot->max_pfn = mem/getpagesize();
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1046: FILE: Documentation/lguest/lguest.c:961:
+	fd = tell_kernel(LGUEST_GUEST_TOP/getpagesize(),
 	                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1067: FILE: Documentation/lguest/lguest.c:982:
+				char reason[1024];
+				if (read(fd, reason, sizeof(reason)) > 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1123: FILE: Documentation/lguest/lguest.txt:45:
+  around, such as the xm-test tiny root image at $

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#1182: FILE: Documentation/lguest/lguest.txt:104:
+be 0 if noone else has bound a DMA buffer to that address or some
         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#1342: FILE: Documentation/lguest/lguest.txt:264:
+	just prevent us from delivering interupts to that guest (the
 	                                ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469546.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 29 warnings, 72 checks, 1371 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469546.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
