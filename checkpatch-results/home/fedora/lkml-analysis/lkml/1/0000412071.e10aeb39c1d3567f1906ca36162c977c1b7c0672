WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
string "hidden" in it, referring to, for example, a "hidden inode" below the

CHECK:BRACES: braces {} should be used on all arms of this statement
#139: FILE: fs/unionfs/commonfops.c:171:
+		if (IS_ERR(lower_file)) {
[...]
 		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: fs/unionfs/commonfops.c:384:
+					 unionfs_lower_mnt_idx(file->f_dentry,
 								bindex),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#720: FILE: fs/unionfs/copyup.c:391:
+		err = old_lower_dentry->d_inode->i_op->readlink(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#769: FILE: fs/unionfs/copyup.c:428:
+	if ((err = copyup_permissions(sb, old_lower_dentry,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#776: FILE: fs/unionfs/copyup.c:434:
+	if ((err = copyup_xattrs(old_lower_dentry, new_lower_dentry)))

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1040: FILE: fs/unionfs/dentry.c:116:
+					iput(lower_inode);
 					^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1053: FILE: fs/unionfs/dentry.c:158:
+		if (!lower_dentry || !lower_dentry->d_op
+		    || !lower_dentry->d_op->d_revalidate)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: fs/unionfs/dentry.c:161:
+		if (!lower_dentry->d_op->d_revalidate(lower_dentry,
 						       &lowernd))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1065: FILE: fs/unionfs/dentry.c:321:
+		printk(KERN_DEBUG "unionfs: dentry without lower "

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1162: FILE: fs/unionfs/dirhelper.c:41:
+	BUG_ON(!S_ISDIR(lower_dir_dentry->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1164: FILE: fs/unionfs/dirhelper.c:43:
+	BUG_ON(!S_ISDIR(lower_dir->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1222: FILE: fs/unionfs/dirhelper.c:111:
+	BUG_ON(!S_ISDIR(lower_dir_dentry->d_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1224: FILE: fs/unionfs/dirhelper.c:113:
+	BUG_ON(!S_ISDIR(lower_dir->i_mode));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1442: FILE: fs/unionfs/inode.c:186:
+					 lower_dentry, mode, nd);
 					                     ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1682: FILE: fs/unionfs/inode.c:484:
+				printk(KERN_DEBUG "unionfs: lower dentry "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1785: FILE: fs/unionfs/inode.c:614:
+				printk(KERN_DEBUG "unionfs: lower dentry "

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1994: FILE: fs/unionfs/inode.c:992:
+		err = inode_permission(lower_inode, mask, nd, bindex);
 		                                          ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2032: FILE: fs/unionfs/inode.c:1044:
+		BUG_ON(lower_dentry->d_inode == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lower_dentry->d_inode"
#2032: FILE: fs/unionfs/inode.c:1044:
+		BUG_ON(lower_dentry->d_inode == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2037: FILE: fs/unionfs/inode.c:1048:
 		if (is_robranch_super(dentry->d_sb, bindex)
+		    || IS_RDONLY(lower_dentry->d_inode)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2096: FILE: fs/unionfs/lookup.c:44:
+	BUG_ON(!S_ISDIR(lower_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2168: FILE: fs/unionfs/lookup.c:169:
+		BUG_ON(lower_dentry != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lower_dentry"
#2168: FILE: fs/unionfs/lookup.c:169:
+		BUG_ON(lower_dentry != NULL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2243: FILE: fs/unionfs/lookup.c:228:
+						 namelen, nd);
 						          ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2260: FILE: fs/unionfs/lookup.c:241:
+			if (!first_lower_dentry && (dbstart(dentry) == -1)) {
[...]
 				first_dentry_offset = bindex;
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#2523: FILE: fs/unionfs/main.c:319:
 			printk(KERN_WARNING "unionfs: error accessing "
+			       "lower directory '%s' (error %d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2530: FILE: fs/unionfs/main.c:325:
+			printk(KERN_WARNING "unionfs: lower directory "

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2538: FILE: fs/unionfs/main.c:331:
+		lower_root_info->lower_paths[bindex].dentry = nd.dentry;
 		                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2539: FILE: fs/unionfs/main.c:332:
+		lower_root_info->lower_paths[bindex].mnt = nd.mnt;
 		                                           ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2559: FILE: fs/unionfs/main.c:350:
+	BUG_ON(branches != (lower_root_info->bend + 1));

WARNING:SPLIT_STRING: quoted string split across lines
#2709: FILE: fs/unionfs/main.c:573:
 		       "unionfs: read_super: error while parsing options "
+		       "(err = %ld)\n", PTR_ERR(lower_root_info));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2812: FILE: fs/unionfs/rdstate.c:75:
+		if (!(lower_inode = unionfs_lower_inode_idx(inode, bindex)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2874: FILE: fs/unionfs/rename.c:58:
+	lower_wh_dentry = lookup_one_len(wh_name, lower_new_dentry->d_parent,
 					  new_dentry->d_name.len +

CHECK:BRACES: braces {} should be used on all arms of this statement
#2884: FILE: fs/unionfs/rename.c:65:
+	if (lower_wh_dentry->d_inode) {
[...]
 
[...]

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2968: FILE: fs/unionfs/rename.c:257:
+		local_err = vfs_create(lower_parent->d_inode, wh_old, S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3151: FILE: fs/unionfs/subr.c:121:
+	BUG_ON(!S_ISDIR(lower_parent->d_inode->i_mode));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#3211: FILE: fs/unionfs/subr.c:167:
+		err = vfs_create(lower_dir, diropq, S_IRUGO, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3245: FILE: fs/unionfs/subr.c:203:
+		BUG_ON(lower_inode->i_nlink < 0);

WARNING:SPLIT_STRING: quoted string split across lines
#3275: FILE: fs/unionfs/super.c:191:
 		printk(KERN_WARNING "unionfs: error accessing "
+		       "lower directory \"%s\" (error %d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3284: FILE: fs/unionfs/super.c:234:
 		printk(KERN_WARNING "unionfs: error accessing "
+		       "lower directory \"%s\" (error %d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3293: FILE: fs/unionfs/super.c:318:
 		printk(KERN_WARNING "unionfs: error accessing "
+		       "lower directory \"%s\" (error %d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3302: FILE: fs/unionfs/super.c:354:
 		printk(KERN_WARNING "unionfs: error accessing "
+		       "lower directory \"%s\" (error %d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3311: FILE: fs/unionfs/super.c:366:
+		printk(KERN_WARNING "unionfs: lower directory "

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3360: FILE: fs/unionfs/super.c:823:
+			iput(lower_inode);
 			^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3422: FILE: fs/unionfs/union.h:296:
+extern int unionfs_refresh_lower_dentry(struct dentry *dentry, int bindex);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#3543: FILE: fs/unionfs/xattr.c:70:
+	err = vfs_getxattr(lower_dentry, (char*) name, value, size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3543: FILE: fs/unionfs/xattr.c:70:
+	err = vfs_getxattr(lower_dentry, (char*) name, value, size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#3564: FILE: fs/unionfs/xattr.c:98:
+	err = vfs_setxattr(lower_dentry, (char*) name, (void*) value,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3564: FILE: fs/unionfs/xattr.c:98:
+	err = vfs_setxattr(lower_dentry, (char*) name, (void*) value,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3564: FILE: fs/unionfs/xattr.c:98:
+	err = vfs_setxattr(lower_dentry, (char*) name, (void*) value,

CHECK:SPACING: No space is necessary after a cast
#3585: FILE: fs/unionfs/xattr.c:126:
+	err = vfs_removexattr(lower_dentry, (char*) name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3585: FILE: fs/unionfs/xattr.c:126:
+	err = vfs_removexattr(lower_dentry, (char*) name);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412071.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 31 warnings, 15 checks, 3301 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412071.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
