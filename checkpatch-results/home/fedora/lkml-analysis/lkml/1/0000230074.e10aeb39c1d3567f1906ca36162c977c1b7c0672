WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#85: FILE: drivers/input/lirc/Kconfig:134:
+config LIRC_ZILOG
+	tristate "Zilog/Hauppauge IR Transmitter"
+	default n
+	depends on LIRC_DEV
+	help
+	  Driver for the Zilog/Hauppauge IR Transmitter, found on
+	  PVR-150/500, HVR-1200/1250/1700/1800, HD-PVR and other cards
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#104: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: drivers/input/lirc/lirc_zilog.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#142: FILE: drivers/input/lirc/lirc_zilog.c:34:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#143: FILE: drivers/input/lirc/lirc_zilog.c:35:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: drivers/input/lirc/lirc_zilog.c:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#184: FILE: drivers/input/lirc/lirc_zilog.c:76:
+	struct mutex       buf_lock;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#231: FILE: drivers/input/lirc/lirc_zilog.c:123:
+struct mutex tx_data_lock;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#236: FILE: drivers/input/lirc/lirc_zilog.c:128:
+#define zilog_notify(s, args...) printk(KERN_NOTICE KBUILD_MODNAME ": " s, \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#238: FILE: drivers/input/lirc/lirc_zilog.c:130:
+#define zilog_error(s, args...) printk(KERN_ERR KBUILD_MODNAME ": " s, ## args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#251: FILE: drivers/input/lirc/lirc_zilog.c:143:
+			printk(KERN_DEBUG DEVICE_NAME ": " fmt,		\

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#277: FILE: drivers/input/lirc/lirc_zilog.c:169:
+		/* Lock i2c bus for the duration.  RX/TX chips interfere so
+		   this is worth it

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#282: FILE: drivers/input/lirc/lirc_zilog.c:174:
+		/* Send random "poll command" (?)  Windows driver does this
+		   and it  is a good point to detect chip failure.

WARNING:SPLIT_STRING: quoted string split across lines
#290: FILE: drivers/input/lirc/lirc_zilog.c:182:
+				zilog_error("unable to read from the IR chip "
+					    "after 3 resets, giving up\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#296: FILE: drivers/input/lirc/lirc_zilog.c:188:
+			zilog_error("polling the IR receiver chip failed, "
+				    "trying reset\n");

WARNING:SPLIT_STRING: quoted string split across lines
#311: FILE: drivers/input/lirc/lirc_zilog.c:203:
+			zilog_error("i2c_master_recv failed with %d -- "
+				    "keeping last read buffer\n", ret);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#324: FILE: drivers/input/lirc/lirc_zilog.c:216:
+		code = (((__u16)ir->b[0]&0x7f)<<6) | (ir->b[1]>>2);
 		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#324: FILE: drivers/input/lirc/lirc_zilog.c:216:
+		code = (((__u16)ir->b[0]&0x7f)<<6) | (ir->b[1]>>2);
 		                              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#324: FILE: drivers/input/lirc/lirc_zilog.c:216:
+		code = (((__u16)ir->b[0]&0x7f)<<6) | (ir->b[1]>>2);
 		                                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ir->t_notify"
#349: FILE: drivers/input/lirc/lirc_zilog.c:241:
+	if (ir->t_notify != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#359: FILE: drivers/input/lirc/lirc_zilog.c:251:
+			/* This is ~113*2 + 24 + jitter (2*repeat gap +
+			   code length).  We use this interval as the chip

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#377: FILE: drivers/input/lirc/lirc_zilog.c:269:
+			schedule_timeout(HZ/2);
 			                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ir->t_notify2"
#381: FILE: drivers/input/lirc/lirc_zilog.c:273:
+	if (ir->t_notify2 != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ir->t_notify"
#385: FILE: drivers/input/lirc/lirc_zilog.c:277:
+	if (ir->t_notify != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ir->l.owner"
#396: FILE: drivers/input/lirc/lirc_zilog.c:288:
+	if (ir->l.owner == NULL || try_module_get(ir->l.owner) == 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#401: FILE: drivers/input/lirc/lirc_zilog.c:293:
+	/* this is completely broken code. lirc_unregister_plugin()
+	   must be possible even when the device is open */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#401: FILE: drivers/input/lirc/lirc_zilog.c:293:
+	   must be possible even when the device is open */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ir->l.owner"
#418: FILE: drivers/input/lirc/lirc_zilog.c:310:
+	if (ir->l.owner != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: drivers/input/lirc/lirc_zilog.c:316:
+static inline int read_uint32(unsigned char **data,
+				     unsigned char *endp, unsigned int *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: drivers/input/lirc/lirc_zilog.c:328:
+static inline int read_uint8(unsigned char **data,
+				    unsigned char *endp, unsigned char *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: drivers/input/lirc/lirc_zilog.c:338:
+static inline int skip(unsigned char **data,
+			      unsigned char *endp, unsigned int distance)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: drivers/input/lirc/lirc_zilog.c:348:
+static int get_key_data(unsigned char *buf,
+			     unsigned int codeset, unsigned int key)

CHECK:BRACES: braces {} should be used on all arms of this statement
#470: FILE: drivers/input/lirc/lirc_zilog.c:362:
+		if (i == codeset)
[...]
+		else if (codeset > i) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: drivers/input/lirc/lirc_zilog.c:417:
+		unsigned char *key_data;
+		pos = base + (lim >> 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#535: FILE: drivers/input/lirc/lirc_zilog.c:427:
+				unsigned char val;
+				if (!read_uint8(&key_data, endp, &val) ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#563: FILE: drivers/input/lirc/lirc_zilog.c:455:
+		int tosend = TX_BLOCK_SIZE - i;
+		if (tosend > 4)

WARNING:SPLIT_STRING: quoted string split across lines
#616: FILE: drivers/input/lirc/lirc_zilog.c:508:
+	zilog_notify("Zilog/Hauppauge IR blaster: firmware version "
+		     "%d.%d.%d\n", buf[1], buf[2], buf[3]);

WARNING:SPLIT_STRING: quoted string split across lines
#664: FILE: drivers/input/lirc/lirc_zilog.c:556:
+		zilog_error("firmware haup-ir-blaster.bin not available "
+			    "(%d)\n", ret);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_data"
#672: FILE: drivers/input/lirc/lirc_zilog.c:564:
+	if (tx_data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_data->datap"
#682: FILE: drivers/input/lirc/lirc_zilog.c:574:
+	if (tx_data->datap == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#699: FILE: drivers/input/lirc/lirc_zilog.c:591:
+		zilog_error("unsupported code set file version (%u, expected"
+			    "1) -- please upgrade to a newer driver",

WARNING:MISSING_SPACE: break quoted strings at a space character
#699: FILE: drivers/input/lirc/lirc_zilog.c:591:
+		zilog_error("unsupported code set file version (%u, expected"
+			    "1) -- please upgrade to a newer driver",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: drivers/input/lirc/lirc_zilog.c:604:
+	if (!read_uint32(&data, tx_data->endp,
+			      &tx_data->num_code_sets))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#717: FILE: drivers/input/lirc/lirc_zilog.c:609:
+	tx_data->code_sets = vmalloc(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_data->code_sets"
#719: FILE: drivers/input/lirc/lirc_zilog.c:611:
+	if (tx_data->code_sets == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#734: FILE: drivers/input/lirc/lirc_zilog.c:626:
+		unsigned char pos, val;
+		if (!read_uint8(&data, tx_data->endp, &pos) ||

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#762: FILE: drivers/input/lirc/lirc_zilog.c:654:
+		/* After the diffs we have the first key id + data -
+		   global fixed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#762: FILE: drivers/input/lirc/lirc_zilog.c:654:
+		   global fixed */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: drivers/input/lirc/lirc_zilog.c:656:
+		if (!skip(&data, tx_data->endp,
+			       1 + TX_BLOCK_SIZE - num_global_fixed))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: drivers/input/lirc/lirc_zilog.c:661:
+		if (!skip(&data, tx_data->endp,
+			       (ndiffs + 1) * (keys - 1)))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read', this function's name, in a string
#819: FILE: drivers/input/lirc/lirc_zilog.c:711:
+	dprintk("read called\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read', this function's name, in a string
#827: FILE: drivers/input/lirc/lirc_zilog.c:719:
+		dprintk("read result = -EINVAL\n");

WARNING:TYPO_SPELLING: 'beetwen' may be misspelled - perhaps 'between'?
#834: FILE: drivers/input/lirc/lirc_zilog.c:726:
+	 * beetwen while condition checking and scheduling)
 	   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#847: FILE: drivers/input/lirc/lirc_zilog.c:739:
+			 * -ERESTARTSYS */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#862: FILE: drivers/input/lirc/lirc_zilog.c:754:
+			ret = copy_to_user((void *)outbuf+written, buf,
 			                                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read', this function's name, in a string
#872: FILE: drivers/input/lirc/lirc_zilog.c:764:
+	dprintk("read result = %s (%d)\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#888: FILE: drivers/input/lirc/lirc_zilog.c:780:
+	if (ret == -EPROTO) {
[...]
+	} else if (ret != 0)
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#890: FILE: drivers/input/lirc/lirc_zilog.c:782:
+		zilog_error("failed to get data for code %u, key %u -- check "
+			    "lircd.conf entries\n", code, key);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: drivers/input/lirc/lirc_zilog.c:814:
+		zilog_error("unexpected IR TX response #1: %02x\n",
+			buf[0]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#936: FILE: drivers/input/lirc/lirc_zilog.c:828:
+	/* This bit NAKs until the device is ready, so we retry it
+	   sleeping a bit each time.  This seems to be what the windows

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#947: FILE: drivers/input/lirc/lirc_zilog.c:839:
+			"failed with %d (try %d)\n", ret, i+1);
 			                                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#947: FILE: drivers/input/lirc/lirc_zilog.c:839:
+		dprintk("NAK expected: i2c_master_send "
+			"failed with %d (try %d)\n", ret, i+1);

WARNING:SPLIT_STRING: quoted string split across lines
#951: FILE: drivers/input/lirc/lirc_zilog.c:843:
+		zilog_error("IR TX chip never got ready: last i2c_master_send "
+			    "failed with %d\n", ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#978: FILE: drivers/input/lirc/lirc_zilog.c:870:
+static ssize_t write(struct file *filep, const char *buf, size_t n,
+			  loff_t *ppos)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1013: FILE: drivers/input/lirc/lirc_zilog.c:905:
+			ret = send_code(ir, (unsigned)command >> 16,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: drivers/input/lirc/lirc_zilog.c:906:
+			ret = send_code(ir, (unsigned)command >> 16,
+					    (unsigned)command & 0xFFFF);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1014: FILE: drivers/input/lirc/lirc_zilog.c:906:
+					    (unsigned)command & 0xFFFF);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1022: FILE: drivers/input/lirc/lirc_zilog.c:914:
+		/* Hmm, a failure.  If we've had a few then give up, otherwise
+		   try a reset

CHECK:BRACES: braces {} should be used on all arms of this statement
#1024: FILE: drivers/input/lirc/lirc_zilog.c:916:
+		if (ret != 0) {
[...]
+		} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#1027: FILE: drivers/input/lirc/lirc_zilog.c:919:
+			zilog_error("sending to the IR transmitter chip "
+				    "failed, trying reset\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1031: FILE: drivers/input/lirc/lirc_zilog.c:923:
+				zilog_error("unable to send to the IR chip "
+					    "after 3 resets, giving up\n");

CHECK:BRACES: Unbalanced braces around else statement
#1039: FILE: drivers/input/lirc/lirc_zilog.c:931:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'poll', this function's name, in a string
#1056: FILE: drivers/input/lirc/lirc_zilog.c:948:
+	dprintk("poll called\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'poll', this function's name, in a string
#1064: FILE: drivers/input/lirc/lirc_zilog.c:956:
+	dprintk("poll result = %s\n",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1067: FILE: drivers/input/lirc/lirc_zilog.c:959:
+	ret = lirc_buffer_empty(&ir->buf) ? 0 : (POLLIN|POLLRDNORM);
 	                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: drivers/input/lirc/lirc_zilog.c:966:
+static int ioctl(struct inode *node, struct file *filep, unsigned int cmd,
+		      unsigned long arg)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)13' could be '13UL'
#1087: FILE: drivers/input/lirc/lirc_zilog.c:979:
+		result = put_user((unsigned long)13,

CHECK:SPACING: No space is necessary after a cast
#1091: FILE: drivers/input/lirc/lirc_zilog.c:983:
+		result = put_user(features, (unsigned long *) arg);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1096: FILE: drivers/input/lirc/lirc_zilog.c:988:
+		if (!(features&LIRC_CAN_REC_MASK))
 		              ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1097: FILE: drivers/input/lirc/lirc_zilog.c:989:
+			return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1100: FILE: drivers/input/lirc/lirc_zilog.c:992:
+				  (features&LIRC_CAN_REC_MASK),
 				           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1104: FILE: drivers/input/lirc/lirc_zilog.c:996:
+		if (!(features&LIRC_CAN_REC_MASK))
 		              ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1105: FILE: drivers/input/lirc/lirc_zilog.c:997:
+			return -ENOSYS;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1112: FILE: drivers/input/lirc/lirc_zilog.c:1004:
+		if (!(features&LIRC_CAN_SEND_MASK))
 		              ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1113: FILE: drivers/input/lirc/lirc_zilog.c:1005:
+			return -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#1115: FILE: drivers/input/lirc/lirc_zilog.c:1007:
+		result = put_user(LIRC_MODE_PULSE, (unsigned long *) arg);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1120: FILE: drivers/input/lirc/lirc_zilog.c:1012:
+		if (!(features&LIRC_CAN_SEND_MASK))
 		              ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1121: FILE: drivers/input/lirc/lirc_zilog.c:1013:
+			return -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#1123: FILE: drivers/input/lirc/lirc_zilog.c:1015:
+		result = get_user(mode, (unsigned long *) arg);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1136: FILE: drivers/input/lirc/lirc_zilog.c:1028:
+/* Open the IR device.  Get hold of our IR structure and
+   stash it in private_data for the file */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1136: FILE: drivers/input/lirc/lirc_zilog.c:1028:
+   stash it in private_data for the file */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1143: FILE: drivers/input/lirc/lirc_zilog.c:1035:
+	unsigned minor = MINOR(node->i_rdev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1144: FILE: drivers/input/lirc/lirc_zilog.c:1036:
+	unsigned minor = MINOR(node->i_rdev);
+	if (minor >= MAX_IRCTL_DEVICES) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'open', this function's name, in a string
#1145: FILE: drivers/input/lirc/lirc_zilog.c:1037:
+		dprintk("minor %d: open result = -ENODEV\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1173: FILE: drivers/input/lirc/lirc_zilog.c:1065:
+	struct IR *ir = (struct IR *)filep->private_data;
+	if (ir == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ir"
#1173: FILE: drivers/input/lirc/lirc_zilog.c:1065:
+	if (ir == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'close', this function's name, in a string
#1174: FILE: drivers/input/lirc/lirc_zilog.c:1066:
+		zilog_error("close: no private_data attached to the file!\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1216: FILE: drivers/input/lirc/lirc_zilog.c:1108:
+static struct file_operations lirc_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1251: FILE: drivers/input/lirc/lirc_zilog.c:1143:
+	printk("lirc_zilog: chip found with %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1252: FILE: drivers/input/lirc/lirc_zilog.c:1144:
+	printk("lirc_zilog: chip found with %s\n",
+		have_rx && have_tx ? "RX and TX" :

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ir)...) over kmalloc(sizeof(struct IR)...)
#1255: FILE: drivers/input/lirc/lirc_zilog.c:1147:
+	ir = kmalloc(sizeof(struct IR), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ir"
#1256: FILE: drivers/input/lirc/lirc_zilog.c:1148:
+	if (ir == NULL)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1258: FILE: drivers/input/lirc/lirc_zilog.c:1150:
+	if (lirc_buffer_init(&ir->buf, 2, BUFLEN/2) != 0) {
 	                                        ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1269: FILE: drivers/input/lirc/lirc_zilog.c:1161:
+	ir->t_notify = ir->t_notify2 = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#1295: FILE: drivers/input/lirc/lirc_zilog.c:1187:
+			zilog_error("lirc_register_plugin: cannot run "
+				    "poll thread\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_attach', this function's name, in a string
#1324: FILE: drivers/input/lirc/lirc_zilog.c:1216:
+		zilog_error("ir_attach: \"minor\" must be between 0 and %d "

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1325: FILE: drivers/input/lirc/lirc_zilog.c:1217:
+			    "(%d)!\n", MAX_IRCTL_DEVICES-1, ir->l.minor);
 			                                ^

WARNING:SPLIT_STRING: quoted string split across lines
#1325: FILE: drivers/input/lirc/lirc_zilog.c:1217:
+		zilog_error("ir_attach: \"minor\" must be between 0 and %d "
+			    "(%d)!\n", MAX_IRCTL_DEVICES-1, ir->l.minor);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1334: FILE: drivers/input/lirc/lirc_zilog.c:1226:
+	/* if we have the tx device, load the 'firmware'.  We do this
+	   after registering with lirc as otherwise hotplug seems to take

WARNING:LINE_SPACING: Missing a blank line after declarations
#1357: FILE: drivers/input/lirc/lirc_zilog.c:1249:
+	struct IR *ir = i2c_get_clientdata(client);
+	mutex_lock(&ir->lock);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_detach', this function's name, in a string
#1381: FILE: drivers/input/lirc/lirc_zilog.c:1273:
+		zilog_error("ir_detach: detached from something we didn't "

WARNING:SPLIT_STRING: quoted string split across lines
#1382: FILE: drivers/input/lirc/lirc_zilog.c:1274:
+		zilog_error("ir_detach: detached from something we didn't "
+			    "attach to\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_detach', this function's name, in a string
#1389: FILE: drivers/input/lirc/lirc_zilog.c:1281:
+		zilog_error("ir_detach: invalid device count\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1444: FILE: drivers/input/lirc/lirc_zilog.c:1336:
+			return ir_attach(adap, have_rx, have_tx);
+		else

WARNING:SPLIT_STRING: quoted string split across lines
#1478: FILE: drivers/input/lirc/lirc_zilog.c:1370:
+MODULE_AUTHOR("Gerd Knorr, Michal Kochanowicz, Christoph Bartelmus, "
+	      "Ulrich Mueller, Stefan Jahn, Jerome Brock, Mark Weaver");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230074.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 64 warnings, 49 checks, 1412 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230074.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
