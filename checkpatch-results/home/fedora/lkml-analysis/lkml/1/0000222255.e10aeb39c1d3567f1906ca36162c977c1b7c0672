CHECK:CAMELCASE: Avoid CamelCase: <extLocation>
#221: FILE: fs/udf/dir.c:164:
+			struct kernel_lb_addr tloc = lelb_to_cpu(cfi.icb.extLocation);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#234: FILE: fs/udf/directory.c:23:
+				uint8_t ad_size, struct kernel_lb_addr fe_loc,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#273: FILE: fs/udf/directory.c:284:
+struct short_ad *udf_get_fileshortad(uint8_t *ptr, int maxoffset, uint32_t *offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/udf/directory.c:285:
+struct short_ad *udf_get_fileshortad(uint8_t *ptr, int maxoffset, uint32_t *offset,
 			      int inc)

CHECK:BRACES: braces {} should be used on all arms of this statement
#285: FILE: fs/udf/directory.c:294:
+	if ((*offset + sizeof(struct short_ad)) > maxoffset)
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#301: FILE: fs/udf/directory.c:307:
+struct long_ad *udf_get_filelongad(uint8_t *ptr, int maxoffset, uint32_t *offset, int inc)

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: fs/udf/directory.c:316:
+	if ((*offset + sizeof(struct long_ad)) > maxoffset)
[...]
 	else {
[...]

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#339: FILE: fs/udf/ecma_167.h:44:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#357: FILE: fs/udf/ecma_167.h:71:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#371: FILE: fs/udf/ecma_167.h:85:
+} __attribute__ ((packed));

CHECK:CAMELCASE: Avoid CamelCase: <structType>
#393: FILE: fs/udf/ecma_167.h:129:
+	uint8_t			structType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#393: FILE: fs/udf/ecma_167.h:129:
+	uint8_t			structType;

CHECK:CAMELCASE: Avoid CamelCase: <stdIdent>
#394: FILE: fs/udf/ecma_167.h:130:
+	uint8_t			stdIdent[VSD_STD_ID_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#394: FILE: fs/udf/ecma_167.h:130:
+	uint8_t			stdIdent[VSD_STD_ID_LEN];

CHECK:CAMELCASE: Avoid CamelCase: <structVersion>
#395: FILE: fs/udf/ecma_167.h:131:
+	uint8_t			structVersion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#395: FILE: fs/udf/ecma_167.h:131:
+	uint8_t			structVersion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#396: FILE: fs/udf/ecma_167.h:132:
+	uint8_t			reserved1;

WARNING:TYPO_SPELLING: 'archType' may be misspelled - perhaps 'archetype'?
#397: FILE: fs/udf/ecma_167.h:133:
+	struct regid		archType;
 	            		^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <archType>
#397: FILE: fs/udf/ecma_167.h:133:
+	struct regid		archType;

CHECK:CAMELCASE: Avoid CamelCase: <bootIdent>
#398: FILE: fs/udf/ecma_167.h:134:
+	struct regid		bootIdent;

CHECK:CAMELCASE: Avoid CamelCase: <bootExtLocation>
#399: FILE: fs/udf/ecma_167.h:135:
+	__le32			bootExtLocation;

CHECK:CAMELCASE: Avoid CamelCase: <bootExtLength>
#400: FILE: fs/udf/ecma_167.h:136:
+	__le32			bootExtLength;

CHECK:CAMELCASE: Avoid CamelCase: <loadAddress>
#401: FILE: fs/udf/ecma_167.h:137:
+	__le64			loadAddress;

CHECK:CAMELCASE: Avoid CamelCase: <startAddress>
#402: FILE: fs/udf/ecma_167.h:138:
+	__le64			startAddress;

CHECK:CAMELCASE: Avoid CamelCase: <descCreationDateAndTime>
#403: FILE: fs/udf/ecma_167.h:139:
+	struct timestamp	descCreationDateAndTime;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#405: FILE: fs/udf/ecma_167.h:141:
+	uint8_t			reserved2[32];

CHECK:CAMELCASE: Avoid CamelCase: <bootUse>
#406: FILE: fs/udf/ecma_167.h:142:
+	uint8_t			bootUse[1906];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#406: FILE: fs/udf/ecma_167.h:142:
+	uint8_t			bootUse[1906];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#418: FILE: fs/udf/ecma_167.h:152:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#438: FILE: fs/udf/ecma_167.h:169:
+} __attribute__ ((packed));

CHECK:CAMELCASE: Avoid CamelCase: <descTag>
#468: FILE: fs/udf/ecma_167.h:193:
+	struct tag		descTag;

CHECK:CAMELCASE: Avoid CamelCase: <volDescSeqNum>
#469: FILE: fs/udf/ecma_167.h:194:
+	__le32			volDescSeqNum;

CHECK:CAMELCASE: Avoid CamelCase: <primaryVolDescNum>
#470: FILE: fs/udf/ecma_167.h:195:
+	__le32			primaryVolDescNum;

CHECK:CAMELCASE: Avoid CamelCase: <volIdent>
#471: FILE: fs/udf/ecma_167.h:196:
+	dstring			volIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <volSeqNum>
#472: FILE: fs/udf/ecma_167.h:197:
+	__le16			volSeqNum;

CHECK:CAMELCASE: Avoid CamelCase: <maxVolSeqNum>
#473: FILE: fs/udf/ecma_167.h:198:
+	__le16			maxVolSeqNum;

CHECK:CAMELCASE: Avoid CamelCase: <interchangeLvl>
#474: FILE: fs/udf/ecma_167.h:199:
+	__le16			interchangeLvl;

CHECK:CAMELCASE: Avoid CamelCase: <maxInterchangeLvl>
#475: FILE: fs/udf/ecma_167.h:200:
+	__le16			maxInterchangeLvl;

CHECK:CAMELCASE: Avoid CamelCase: <charSetList>
#476: FILE: fs/udf/ecma_167.h:201:
+	__le32			charSetList;

CHECK:CAMELCASE: Avoid CamelCase: <maxCharSetList>
#477: FILE: fs/udf/ecma_167.h:202:
+	__le32			maxCharSetList;

CHECK:CAMELCASE: Avoid CamelCase: <volSetIdent>
#478: FILE: fs/udf/ecma_167.h:203:
+	dstring			volSetIdent[128];

CHECK:CAMELCASE: Avoid CamelCase: <descCharSet>
#479: FILE: fs/udf/ecma_167.h:204:
+	struct charspec		descCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <explanatoryCharSet>
#480: FILE: fs/udf/ecma_167.h:205:
+	struct charspec		explanatoryCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <volAbstract>
#481: FILE: fs/udf/ecma_167.h:206:
+	struct extent_ad	volAbstract;

CHECK:CAMELCASE: Avoid CamelCase: <volCopyright>
#482: FILE: fs/udf/ecma_167.h:207:
+	struct extent_ad	volCopyright;

CHECK:CAMELCASE: Avoid CamelCase: <appIdent>
#483: FILE: fs/udf/ecma_167.h:208:
+	struct regid		appIdent;

CHECK:CAMELCASE: Avoid CamelCase: <recordingDateAndTime>
#484: FILE: fs/udf/ecma_167.h:209:
+	struct timestamp	recordingDateAndTime;

CHECK:CAMELCASE: Avoid CamelCase: <impIdent>
#485: FILE: fs/udf/ecma_167.h:210:
+	struct regid		impIdent;

CHECK:CAMELCASE: Avoid CamelCase: <impUse>
#486: FILE: fs/udf/ecma_167.h:211:
+	uint8_t			impUse[64];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#486: FILE: fs/udf/ecma_167.h:211:
+	uint8_t			impUse[64];

CHECK:CAMELCASE: Avoid CamelCase: <predecessorVolDescSeqLocation>
#487: FILE: fs/udf/ecma_167.h:212:
+	__le32			predecessorVolDescSeqLocation;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#489: FILE: fs/udf/ecma_167.h:214:
+	uint8_t			reserved[22];

CHECK:CAMELCASE: Avoid CamelCase: <mainVolDescSeqExt>
#502: FILE: fs/udf/ecma_167.h:223:
+	struct extent_ad	mainVolDescSeqExt;

CHECK:CAMELCASE: Avoid CamelCase: <reserveVolDescSeqExt>
#503: FILE: fs/udf/ecma_167.h:224:
+	struct extent_ad	reserveVolDescSeqExt;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#504: FILE: fs/udf/ecma_167.h:225:
+^Iuint8_t^I ^I^Ireserved[480];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#504: FILE: fs/udf/ecma_167.h:225:
+	uint8_t	 		reserved[480];

CHECK:CAMELCASE: Avoid CamelCase: <nextVolDescSeqExt>
#515: FILE: fs/udf/ecma_167.h:232:
+	struct extent_ad	nextVolDescSeqExt;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#516: FILE: fs/udf/ecma_167.h:233:
+	uint8_t			reserved[484];

CHECK:CAMELCASE: Avoid CamelCase: <partitionContents>
#537: FILE: fs/udf/ecma_167.h:250:
+	struct regid partitionContents;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIdent>
#567: FILE: fs/udf/ecma_167.h:284:
+	dstring			logicalVolIdent[128];

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockSize>
#568: FILE: fs/udf/ecma_167.h:285:
+	__le32			logicalBlockSize;

CHECK:CAMELCASE: Avoid CamelCase: <domainIdent>
#569: FILE: fs/udf/ecma_167.h:286:
+	struct regid		domainIdent;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolContentsUse>
#570: FILE: fs/udf/ecma_167.h:287:
+	uint8_t			logicalVolContentsUse[16];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#570: FILE: fs/udf/ecma_167.h:287:
+	uint8_t			logicalVolContentsUse[16];

CHECK:CAMELCASE: Avoid CamelCase: <mapTableLength>
#571: FILE: fs/udf/ecma_167.h:288:
+	__le32			mapTableLength;

CHECK:CAMELCASE: Avoid CamelCase: <numPartitionMaps>
#572: FILE: fs/udf/ecma_167.h:289:
+	__le32			numPartitionMaps;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#574: FILE: fs/udf/ecma_167.h:291:
+	uint8_t			impUse[128];

CHECK:CAMELCASE: Avoid CamelCase: <integritySeqExt>
#575: FILE: fs/udf/ecma_167.h:292:
+	struct extent_ad	integritySeqExt;

CHECK:CAMELCASE: Avoid CamelCase: <partitionMaps>
#576: FILE: fs/udf/ecma_167.h:293:
+	uint8_t			partitionMaps[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#576: FILE: fs/udf/ecma_167.h:293:
+	uint8_t			partitionMaps[0];

CHECK:CAMELCASE: Avoid CamelCase: <numAllocDescs>
#590: FILE: fs/udf/ecma_167.h:327:
+	__le32			numAllocDescs;

CHECK:CAMELCASE: Avoid CamelCase: <allocDescs>
#591: FILE: fs/udf/ecma_167.h:328:
+	struct extent_ad	allocDescs[0];

CHECK:CAMELCASE: Avoid CamelCase: <integrityType>
#615: FILE: fs/udf/ecma_167.h:341:
+	__le32			integrityType;

CHECK:CAMELCASE: Avoid CamelCase: <nextIntegrityExt>
#616: FILE: fs/udf/ecma_167.h:342:
+	struct extent_ad	nextIntegrityExt;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#617: FILE: fs/udf/ecma_167.h:343:
+	uint8_t			logicalVolContentsUse[32];

CHECK:CAMELCASE: Avoid CamelCase: <numOfPartitions>
#618: FILE: fs/udf/ecma_167.h:344:
+	__le32			numOfPartitions;

CHECK:CAMELCASE: Avoid CamelCase: <lengthOfImpUse>
#619: FILE: fs/udf/ecma_167.h:345:
+	__le32			lengthOfImpUse;

CHECK:CAMELCASE: Avoid CamelCase: <freeSpaceTable>
#620: FILE: fs/udf/ecma_167.h:346:
+	__le32			freeSpaceTable[0];

CHECK:CAMELCASE: Avoid CamelCase: <sizeTable>
#621: FILE: fs/udf/ecma_167.h:347:
+	__le32			sizeTable[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#622: FILE: fs/udf/ecma_167.h:348:
+	uint8_t			impUse[0];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#635: FILE: fs/udf/ecma_167.h:359:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#651: FILE: fs/udf/ecma_167.h:371:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#661: FILE: fs/udf/ecma_167.h:378:
+} __attribute__ ((packed));

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#669: FILE: fs/udf/ecma_167.h:381:
+	uint32_t		extLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#669: FILE: fs/udf/ecma_167.h:381:
+	uint32_t		extLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#671: FILE: fs/udf/ecma_167.h:383:
+	uint8_t			impUse[6];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#683: FILE: fs/udf/ecma_167.h:392:
+} __attribute__ ((packed));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#692: FILE: fs/udf/ecma_167.h:395:
+	uint32_t		extLength;

CHECK:CAMELCASE: Avoid CamelCase: <recordedLength>
#693: FILE: fs/udf/ecma_167.h:396:
+	uint32_t		recordedLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#693: FILE: fs/udf/ecma_167.h:396:
+	uint32_t		recordedLength;

CHECK:CAMELCASE: Avoid CamelCase: <informationLength>
#694: FILE: fs/udf/ecma_167.h:397:
+	uint32_t		informationLength;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#694: FILE: fs/udf/ecma_167.h:397:
+	uint32_t		informationLength;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetNum>
#729: FILE: fs/udf/ecma_167.h:424:
+	__le32			fileSetNum;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetDescNum>
#730: FILE: fs/udf/ecma_167.h:425:
+	__le32			fileSetDescNum;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIdentCharSet>
#731: FILE: fs/udf/ecma_167.h:426:
+	struct charspec		logicalVolIdentCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetCharSet>
#733: FILE: fs/udf/ecma_167.h:428:
+	struct charspec		fileSetCharSet;

CHECK:CAMELCASE: Avoid CamelCase: <fileSetIdent>
#734: FILE: fs/udf/ecma_167.h:429:
+	dstring			fileSetIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <copyrightFileIdent>
#735: FILE: fs/udf/ecma_167.h:430:
+	dstring			copyrightFileIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <abstractFileIdent>
#736: FILE: fs/udf/ecma_167.h:431:
+	dstring			abstractFileIdent[32];

CHECK:CAMELCASE: Avoid CamelCase: <rootDirectoryICB>
#737: FILE: fs/udf/ecma_167.h:432:
+	struct long_ad		rootDirectoryICB;

CHECK:CAMELCASE: Avoid CamelCase: <nextExt>
#739: FILE: fs/udf/ecma_167.h:434:
+	struct long_ad		nextExt;

CHECK:CAMELCASE: Avoid CamelCase: <streamDirectoryICB>
#740: FILE: fs/udf/ecma_167.h:435:
+	struct long_ad		streamDirectoryICB;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#741: FILE: fs/udf/ecma_167.h:436:
+	uint8_t			reserved[32];

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceTable>
#751: FILE: fs/udf/ecma_167.h:441:
+	struct short_ad	unallocSpaceTable;

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceBitmap>
#752: FILE: fs/udf/ecma_167.h:442:
+	struct short_ad	unallocSpaceBitmap;

CHECK:CAMELCASE: Avoid CamelCase: <partitionIntegrityTable>
#753: FILE: fs/udf/ecma_167.h:443:
+	struct short_ad	partitionIntegrityTable;

CHECK:CAMELCASE: Avoid CamelCase: <freedSpaceTable>
#754: FILE: fs/udf/ecma_167.h:444:
+	struct short_ad	freedSpaceTable;

CHECK:CAMELCASE: Avoid CamelCase: <freedSpaceBitmap>
#755: FILE: fs/udf/ecma_167.h:445:
+	struct short_ad	freedSpaceBitmap;

CHECK:CAMELCASE: Avoid CamelCase: <parentICBLocation>
#791: FILE: fs/udf/ecma_167.h:484:
+	struct lb_addr	parentICBLocation;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#794: FILE: fs/udf/ecma_167.h:486:
+} __attribute__ ((packed));

CHECK:CAMELCASE: Avoid CamelCase: <icbTag>
#806: FILE: fs/udf/ecma_167.h:532:
+	struct icbtag	icbTag;

CHECK:CAMELCASE: Avoid CamelCase: <indirectICB>
#807: FILE: fs/udf/ecma_167.h:533:
+	struct long_ad	indirectICB;

CHECK:CAMELCASE: Avoid CamelCase: <fileLinkCount>
#847: FILE: fs/udf/ecma_167.h:549:
+	__le16			fileLinkCount;

CHECK:CAMELCASE: Avoid CamelCase: <recordFormat>
#848: FILE: fs/udf/ecma_167.h:550:
+	uint8_t			recordFormat;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#848: FILE: fs/udf/ecma_167.h:550:
+	uint8_t			recordFormat;

CHECK:CAMELCASE: Avoid CamelCase: <recordDisplayAttr>
#849: FILE: fs/udf/ecma_167.h:551:
+	uint8_t			recordDisplayAttr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#849: FILE: fs/udf/ecma_167.h:551:
+	uint8_t			recordDisplayAttr;

CHECK:CAMELCASE: Avoid CamelCase: <recordLength>
#850: FILE: fs/udf/ecma_167.h:552:
+	__le32			recordLength;

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlocksRecorded>
#852: FILE: fs/udf/ecma_167.h:554:
+	__le64			logicalBlocksRecorded;

CHECK:CAMELCASE: Avoid CamelCase: <accessTime>
#853: FILE: fs/udf/ecma_167.h:555:
+	struct timestamp	accessTime;

CHECK:CAMELCASE: Avoid CamelCase: <modificationTime>
#854: FILE: fs/udf/ecma_167.h:556:
+	struct timestamp	modificationTime;

CHECK:CAMELCASE: Avoid CamelCase: <attrTime>
#855: FILE: fs/udf/ecma_167.h:557:
+	struct timestamp	attrTime;

CHECK:CAMELCASE: Avoid CamelCase: <extendedAttrICB>
#857: FILE: fs/udf/ecma_167.h:559:
+	struct long_ad		extendedAttrICB;

CHECK:CAMELCASE: Avoid CamelCase: <uniqueID>
#859: FILE: fs/udf/ecma_167.h:561:
+	__le64			uniqueID;

CHECK:CAMELCASE: Avoid CamelCase: <lengthExtendedAttr>
#860: FILE: fs/udf/ecma_167.h:562:
+	__le32			lengthExtendedAttr;

CHECK:CAMELCASE: Avoid CamelCase: <lengthAllocDescs>
#861: FILE: fs/udf/ecma_167.h:563:
+	__le32			lengthAllocDescs;

CHECK:CAMELCASE: Avoid CamelCase: <extendedAttr>
#862: FILE: fs/udf/ecma_167.h:564:
+	uint8_t			extendedAttr[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#862: FILE: fs/udf/ecma_167.h:564:
+	uint8_t			extendedAttr[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#863: FILE: fs/udf/ecma_167.h:565:
+	uint8_t			allocDescs[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#927: FILE: fs/udf/ecma_167.h:734:
+	uint8_t			integrityType;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#928: FILE: fs/udf/ecma_167.h:735:
+	uint8_t			reserved[175];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#930: FILE: fs/udf/ecma_167.h:737:
+	uint8_t			impUse[256];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#970: FILE: fs/udf/ecma_167.h:774:
+	uint8_t			recordFormat;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#971: FILE: fs/udf/ecma_167.h:775:
+	uint8_t			recordDisplayAttr;

CHECK:CAMELCASE: Avoid CamelCase: <objectSize>
#974: FILE: fs/udf/ecma_167.h:778:
+	__le64			objectSize;

CHECK:CAMELCASE: Avoid CamelCase: <createTime>
#978: FILE: fs/udf/ecma_167.h:782:
+	struct timestamp	createTime;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#988: FILE: fs/udf/ecma_167.h:792:
+	uint8_t			extendedAttr[0];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#989: FILE: fs/udf/ecma_167.h:793:
+	uint8_t			allocDescs[0];

CHECK:CAMELCASE: Avoid CamelCase: <i_lenAlloc>
#1198: FILE: fs/udf/inode.c:1418:
+				iinfo->i_lenAlloc - sizeof(struct tag);

CHECK:CAMELCASE: Avoid CamelCase: <impUseLength>
#1230: FILE: fs/udf/inode.c:1474:
+			dsea->impUseLength = cpu_to_le32(sizeof(struct regid));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fe->impIdent
#1244: FILE: fs/udf/inode.c:1496:
+		memset(&(fe->impIdent), 0, sizeof(struct regid));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around efe->impIdent
#1253: FILE: fs/udf/inode.c:1535:
+		memset(&(efe->impIdent), 0, sizeof(struct regid));

CHECK:CAMELCASE: Avoid CamelCase: <descCRC>
#1265: FILE: fs/udf/inode.c:1588:
+	fe->descTag.descCRC = cpu_to_le16(crc_itu_t(0, (char *)fe + sizeof(struct tag),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1266: FILE: fs/udf/inode.c:1589:
+	fe->descTag.descCRC = cpu_to_le16(crc_itu_t(0, (char *)fe + sizeof(struct tag),
 						  crclen));

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#1328: FILE: fs/udf/inode.c:1714:
+				    epos->block.logicalBlockNum, sizeof(struct tag));

CHECK:CAMELCASE: Avoid CamelCase: <extendedAttrHeaderDesc>
#1481: FILE: fs/udf/misc.c:137:
+		crclen = sizeof(struct extendedAttrHeaderDesc) - sizeof(struct tag);

CHECK:CAMELCASE: Avoid CamelCase: <descCRCLength>
#1512: FILE: fs/udf/misc.c:244:
+	if (le16_to_cpu(tag_p->descCRCLength) + sizeof(struct tag) > sb->s_blocksize ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#1535: FILE: fs/udf/misc.c:268:
+	struct tag *tptr = (struct tag *)data;
+	length -= sizeof(struct tag);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1575: FILE: fs/udf/namei.c:50:
+	uint16_t crclen = fibh->eoffset - fibh->soffset - sizeof(struct tag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1586: FILE: fs/udf/namei.c:103:
+	crc = crc_itu_t(0, (uint8_t *)cfi + sizeof(struct tag),
+		      sizeof(struct fileIdentDesc) - sizeof(struct tag));

CHECK:CAMELCASE: Avoid CamelCase: <fileIdentDesc>
#1586: FILE: fs/udf/namei.c:103:
+		      sizeof(struct fileIdentDesc) - sizeof(struct tag));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cfi->icb
#1683: FILE: fs/udf/namei.c:534:
+		memset(&(cfi->icb), 0x00, sizeof(struct long_ad));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ncfi.icb
#1749: FILE: fs/udf/namei.c:1191:
+	memcpy(&(ncfi.icb), &(ocfi.icb), sizeof(struct long_ad));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ocfi.icb
#1749: FILE: fs/udf/namei.c:1191:
+	memcpy(&(ncfi.icb), &(ocfi.icb), sizeof(struct long_ad));

CHECK:CAMELCASE: Avoid CamelCase: <LVICharset>
#1789: FILE: fs/udf/osta_udf.h:100:
+	struct charspec	LVICharset;

CHECK:CAMELCASE: Avoid CamelCase: <partIdent>
#1804: FILE: fs/udf/osta_udf.h:113:
+	struct regid	partIdent;

CHECK:CAMELCASE: Avoid CamelCase: <vatIdent>
#1840: FILE: fs/udf/osta_udf.h:164:
+	struct regid	vatIdent;

CHECK:CAMELCASE: Avoid CamelCase: <sparingIdent>
#1851: FILE: fs/udf/osta_udf.h:196:
+	struct regid	sparingIdent;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvd->logicalVolContentsUse[0]
#1986: FILE: fs/udf/super.c:1474:
+		struct long_ad *la = (struct long_ad *)&(lvd->logicalVolContentsUse[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2023: FILE: fs/udf/super.c:1759:
+		crc_itu_t(0, (char *)lvid + sizeof(struct tag),
 			le16_to_cpu(lvid->descTag.descCRCLength)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2032: FILE: fs/udf/super.c:1794:
+			crc_itu_t(0, (char *)lvid + sizeof(struct tag),
 				le16_to_cpu(lvid->descTag.descCRCLength)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2220: FILE: fs/udf/udfdecl.h:127:
+extern struct inode *udf_iget(struct super_block *, struct kernel_lb_addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2220: FILE: fs/udf/udfdecl.h:127:
+extern struct inode *udf_iget(struct super_block *, struct kernel_lb_addr);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kernel_lb_addr' should also have an identifier name
#2220: FILE: fs/udf/udfdecl.h:127:
+extern struct inode *udf_iget(struct super_block *, struct kernel_lb_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2280: FILE: fs/udf/udfdecl.h:221:
+extern struct long_ad *udf_get_filelongad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint8_t *' should also have an identifier name
#2280: FILE: fs/udf/udfdecl.h:221:
+extern struct long_ad *udf_get_filelongad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2280: FILE: fs/udf/udfdecl.h:221:
+extern struct long_ad *udf_get_filelongad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#2280: FILE: fs/udf/udfdecl.h:221:
+extern struct long_ad *udf_get_filelongad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2280: FILE: fs/udf/udfdecl.h:221:
+extern struct long_ad *udf_get_filelongad(uint8_t *, int, uint32_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2281: FILE: fs/udf/udfdecl.h:222:
+extern struct short_ad *udf_get_fileshortad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint8_t *' should also have an identifier name
#2281: FILE: fs/udf/udfdecl.h:222:
+extern struct short_ad *udf_get_fileshortad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2281: FILE: fs/udf/udfdecl.h:222:
+extern struct short_ad *udf_get_fileshortad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#2281: FILE: fs/udf/udfdecl.h:222:
+extern struct short_ad *udf_get_fileshortad(uint8_t *, int, uint32_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2281: FILE: fs/udf/udfdecl.h:222:
+extern struct short_ad *udf_get_fileshortad(uint8_t *, int, uint32_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2288: FILE: fs/udf/udfdecl.h:227:
+extern struct timestamp *udf_time_to_disk_stamp(struct timestamp *dest, struct timespec src);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222255.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 152 checks, 2132 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222255.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
