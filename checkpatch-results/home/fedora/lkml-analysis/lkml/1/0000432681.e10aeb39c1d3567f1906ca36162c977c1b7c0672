CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: fs/udf/inode.c:827:
+						memmove(&laarr[i], &laarr[i+1],
 						                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#94: FILE: fs/udf/inode.c:1081:
+				if (ie->indirectICB.extLength &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <indirectICB>
#94: FILE: fs/udf/inode.c:1081:
+				if (ie->indirectICB.extLength &&

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#94: FILE: fs/udf/inode.c:1081:
+				if (ie->indirectICB.extLength &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: fs/udf/inode.c:1082:
+				if (ie->indirectICB.extLength &&
 					(nbh = udf_read_ptagged(inode->i_sb, loc, 0, &ident)))

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#103: FILE: fs/udf/inode.c:1147:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#103: FILE: fs/udf/inode.c:1147:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry)))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <extendedFileEntry>
#103: FILE: fs/udf/inode.c:1147:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry)))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#115: FILE: fs/udf/inode.c:1158:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct fileEntry)))
+		{

CHECK:CAMELCASE: Avoid CamelCase: <fileEntry>
#115: FILE: fs/udf/inode.c:1158:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct fileEntry)))

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#128: FILE: fs/udf/inode.c:1172:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct unallocSpaceEntry)))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#128: FILE: fs/udf/inode.c:1172:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct unallocSpaceEntry)))
+		{

CHECK:CAMELCASE: Avoid CamelCase: <unallocSpaceEntry>
#128: FILE: fs/udf/inode.c:1172:
+		if (udf_alloc_i_data(inode, inode->i_sb->s_blocksize - sizeof(struct unallocSpaceEntry)))

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlocksRecorded>
#150: FILE: fs/udf/inode.c:1246:
+		inode->i_blocks = le64_to_cpu(efe->logicalBlocksRecorded) <<

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#162: FILE: fs/udf/inode.c:1381:
+	if (!UDF_I_DATA(inode))
+	{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#164: FILE: fs/udf/inode.c:1383:
+		printk(KERN_ERR "udf:udf_alloc_i_data (ino %ld) no free memory\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'udf_alloc_i_data', this function's name, in a string
#164: FILE: fs/udf/inode.c:1383:
+		printk(KERN_ERR "udf:udf_alloc_i_data (ino %ld) no free memory\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000432681.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 4 warnings, 8 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000432681.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
