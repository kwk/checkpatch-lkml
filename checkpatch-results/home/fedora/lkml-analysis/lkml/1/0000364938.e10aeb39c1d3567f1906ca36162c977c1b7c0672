WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
> > > Isn't the real problem that we have a bunch of drivers that use some of

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: include/linux/pnp.h:26:
+#define pnp_port(dev,bar)	((dev)->res.allocated_ports > (bar) \
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#378: FILE: include/linux/pnp.h:26:
+#define pnp_port(dev,bar)	((dev)->res.allocated_ports > (bar) \
+	? (&(dev)->res.port_resource[bar]) : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#378: FILE: include/linux/pnp.h:26:
+#define pnp_port(dev,bar)	((dev)->res.allocated_ports > (bar) \
+	? (&(dev)->res.port_resource[bar]) : NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: include/linux/pnp.h:32:
+	(pnp_port((dev),(bar)) ? \
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#396: FILE: include/linux/pnp.h:44:
+#define pnp_mem(dev,bar)	((dev)->res.allocated_mems > (bar) \
                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#396: FILE: include/linux/pnp.h:44:
+#define pnp_mem(dev,bar)	((dev)->res.allocated_mems > (bar) \
+	? (&(dev)->res.mem_resource[bar]) : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#396: FILE: include/linux/pnp.h:44:
+#define pnp_mem(dev,bar)	((dev)->res.allocated_mems > (bar) \
+	? (&(dev)->res.mem_resource[bar]) : NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: include/linux/pnp.h:50:
+	(pnp_mem((dev),(bar)) ? \
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: include/linux/pnp.h:62:
+#define pnp_irq(dev,bar)	((dev)->res.allocated_irqs > (bar) \
                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#414: FILE: include/linux/pnp.h:62:
+#define pnp_irq(dev,bar)	((dev)->res.allocated_irqs > (bar) \
+	? (&(dev)->res.irq_resource[bar]) : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#414: FILE: include/linux/pnp.h:62:
+#define pnp_irq(dev,bar)	((dev)->res.allocated_irqs > (bar) \
+	? (&(dev)->res.irq_resource[bar]) : NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#420: FILE: include/linux/pnp.h:68:
+	(pnp_irq((dev),(bar)) ? \
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: include/linux/pnp.h:73:
+#define pnp_dma(dev,bar)	((dev)->res.allocated_dmas > (bar) \
                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#426: FILE: include/linux/pnp.h:73:
+#define pnp_dma(dev,bar)	((dev)->res.allocated_dmas > (bar) \
+	? ((dev)->res.dma_resource + (bar)) : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#426: FILE: include/linux/pnp.h:73:
+#define pnp_dma(dev,bar)	((dev)->res.allocated_dmas > (bar) \
+	? ((dev)->res.dma_resource + (bar)) : NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: include/linux/pnp.h:79:
+	(pnp_irq((dev),(bar)) ? \
 	              ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#471: FILE: include/linux/pnp.h:467:
+static inline void int pnp_assign_resource(struct pnp_resource_table *table, struct resource *res) { }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#479: FILE: include/linux/pnp.h:484:
+void pnp_dump_ports (struct pnp_dev *dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#480: FILE: include/linux/pnp.h:485:
+void pnp_dump_mems (struct pnp_dev *dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#481: FILE: include/linux/pnp.h:486:
+void pnp_dump_irqs (struct pnp_dev *dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#482: FILE: include/linux/pnp.h:487:
+void pnp_dump_dmas (struct pnp_dev *dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#485: FILE: include/linux/pnp.h:490:
+static inline void pnp_dump_ports (struct pnp_dev *dev) { }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#486: FILE: include/linux/pnp.h:491:
+static inline void pnp_dump_mems  (struct pnp_dev *dev) { }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#487: FILE: include/linux/pnp.h:492:
+static inline void pnp_dump_irqs  (struct pnp_dev *dev) { }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#488: FILE: include/linux/pnp.h:493:
+static inline void pnp_dump_dmas  (struct pnp_dev *dev) { }

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#500: FILE: drivers/pnp/manager.c:17:
+/* Defines the amount of struct resources that will get (re-)alloced
                                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#502: FILE: drivers/pnp/manager.c:19:
+ * if the resource table runs out of allocated ports/irqs/dma/mems
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#511: FILE: drivers/pnp/manager.c:28:
+#define pnp_dump_(type, dev)						\
+void pnp_dump_##type##s (struct pnp_dev *dev)				\
+{									\
+	int i;								\
+	pnp_dbg ("Resource table dump:");				\
+	pnp_dbg ("Allocted ##type: %d", dev->res.allocated_##type##s);	\
+	for (i = 0; pnp_##type(dev,i); i++) {				\
+		pnp_dbg ("##type %d: start: 0x%llx - end: 0x%llx "	\
+			 "- flags: %lu",				\
+			 i, pnp_##type##_start(dev,i),			\
+			 pnp_##type##_end(dev,i),			\
+			 pnp_##type##_flags(dev,i));			\
+	}								\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#511: FILE: drivers/pnp/manager.c:28:
+#define pnp_dump_(type, dev)						\
+void pnp_dump_##type##s (struct pnp_dev *dev)				\
+{									\
+	int i;								\
+	pnp_dbg ("Resource table dump:");				\
+	pnp_dbg ("Allocted ##type: %d", dev->res.allocated_##type##s);	\
+	for (i = 0; pnp_##type(dev,i); i++) {				\
+		pnp_dbg ("##type %d: start: 0x%llx - end: 0x%llx "	\
+			 "- flags: %lu",				\
+			 i, pnp_##type##_start(dev,i),			\
+			 pnp_##type##_end(dev,i),			\
+			 pnp_##type##_flags(dev,i));			\
+	}								\
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#512: FILE: drivers/pnp/manager.c:29:
+void pnp_dump_##type##s (struct pnp_dev *dev)				\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#515: FILE: drivers/pnp/manager.c:32:
+	pnp_dbg ("Resource table dump:");				\

WARNING:TYPO_SPELLING: 'Allocted' may be misspelled - perhaps 'Allocated'?
#516: FILE: drivers/pnp/manager.c:33:
+	pnp_dbg ("Allocted ##type: %d", dev->res.allocated_##type##s);	\
 	          ^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#516: FILE: drivers/pnp/manager.c:33:
+	pnp_dbg ("Allocted ##type: %d", dev->res.allocated_##type##s);	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: drivers/pnp/manager.c:34:
+	for (i = 0; pnp_##type(dev,i); i++) {				\
 	                          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: drivers/pnp/manager.c:35:
+		pnp_dbg ("##type %d: start: 0x%llx - end: 0x%llx "	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: drivers/pnp/manager.c:37:
+			 i, pnp_##type##_start(dev,i),			\
 			                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: drivers/pnp/manager.c:38:
+			 pnp_##type##_end(dev,i),			\
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#522: FILE: drivers/pnp/manager.c:39:
+			 pnp_##type##_flags(dev,i));			\
 			                       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#525: FILE: drivers/pnp/manager.c:42:
+}
+pnp_dump_(port, dev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#531: FILE: drivers/pnp/manager.c:48:
+#define pnp_init(type, res)						\
+static void pnp_init_##type						\
+(struct resource *res)							\
+{									\
+	res->name = NULL;						\
+	res->start = -1;						\
+	res->end = -1;							\
+	res->flags = IORESOURCE_##type | IORESOURCE_AUTO |		\
+	IORESOURCE_UNSET;						\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'res' may be better as '(res)' to avoid precedence issues
#531: FILE: drivers/pnp/manager.c:48:
+#define pnp_init(type, res)						\
+static void pnp_init_##type						\
+(struct resource *res)							\
+{									\
+	res->name = NULL;						\
+	res->start = -1;						\
+	res->end = -1;							\
+	res->flags = IORESOURCE_##type | IORESOURCE_AUTO |		\
+	IORESOURCE_UNSET;						\
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#549: FILE: drivers/pnp/manager.c:66:
+	int i;
+	res->port_resource = krealloc(res->port_resource,

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#549: FILE: drivers/pnp/manager.c:66:
+	res->port_resource = krealloc(res->port_resource,

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: drivers/pnp/manager.c:86:
+	int i;
+	res->mem_resource = krealloc(res->mem_resource, (sizeof(struct resource)

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#569: FILE: drivers/pnp/manager.c:86:
+	res->mem_resource = krealloc(res->mem_resource, (sizeof(struct resource)

WARNING:LINE_SPACING: Missing a blank line after declarations
#589: FILE: drivers/pnp/manager.c:106:
+	int i;
+	res->irq_resource = krealloc(res->irq_resource, (sizeof(struct resource)

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#589: FILE: drivers/pnp/manager.c:106:
+	res->irq_resource = krealloc(res->irq_resource, (sizeof(struct resource)

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: drivers/pnp/manager.c:125:
+	int i;
+	res->dma_resource = krealloc(res->dma_resource, (sizeof(struct resource)

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#608: FILE: drivers/pnp/manager.c:125:
+	res->dma_resource = krealloc(res->dma_resource, (sizeof(struct resource)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#652: FILE: drivers/pnp/manager.c:169:
+			pnp_err("%s: Cannot allocate port", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#682: FILE: drivers/pnp/manager.c:194:
+			pnp_err("Bug in %s for device: %s", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#712: FILE: drivers/pnp/manager.c:248:
+			pnp_err("Bug in %s for device: %s", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#757: FILE: drivers/pnp/manager.c:316:
+			pnp_err("Bug in %s for device: %s", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#790: FILE: drivers/pnp/manager.c:377:
+			pnp_err("Bug in %s for device: %s", __FUNCTION__,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#997: FILE: drivers/pnp/interface.c:387:
+				res.start = simple_strtoul(buf, &buf, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1006: FILE: drivers/pnp/interface.c:394:
+					res.end = simple_strtoul(buf, &buf, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1026: FILE: drivers/pnp/interface.c:405:
+				res.start = simple_strtoul(buf, &buf, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1035: FILE: drivers/pnp/interface.c:412:
+					res.end = simple_strtoul(buf, &buf, 0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1061: FILE: drivers/pnp/interface.c:423:
+				res.start = res.end =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1062: FILE: drivers/pnp/interface.c:424:
+				    simple_strtoul(buf, &buf, 0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1079: FILE: drivers/pnp/interface.c:433:
+				res.start = res.end =

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1080: FILE: drivers/pnp/interface.c:434:
+				    simple_strtoul(buf, &buf, 0);

WARNING:SPLIT_STRING: quoted string split across lines
#1095: FILE: drivers/pnp/quirks.c:143:
+		pnp_err("IRQ/Ports not assigned, quirk needs fixup, try"
+			" smsc_nopnp boot param");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1295: FILE: drivers/pnp/pnpacpi/rsparser.c:91:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1309: FILE: drivers/pnp/pnpacpi/rsparser.c:102:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1340: FILE: drivers/pnp/pnpacpi/rsparser.c:160:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1346: FILE: drivers/pnp/pnpacpi/rsparser.c:166:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1377: FILE: drivers/pnp/pnpacpi/rsparser.c:181:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1383: FILE: drivers/pnp/pnpacpi/rsparser.c:187:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1412: FILE: drivers/pnp/pnpacpi/rsparser.c:201:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1421: FILE: drivers/pnp/pnpacpi/rsparser.c:210:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.irq.interrupts[i]'
#1461: FILE: drivers/pnp/pnpacpi/rsparser.c:260:
+							    res->data.irq.
+							    interrupts[i],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.irq.triggering'
#1463: FILE: drivers/pnp/pnpacpi/rsparser.c:262:
+							    res->data.irq.
+							    triggering,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.irq.polarity'
#1465: FILE: drivers/pnp/pnpacpi/rsparser.c:264:
+							    res->data.irq.
+							    polarity,

WARNING:TYPO_SPELLING: 'sharable' may be misspelled - perhaps 'shareable'?
#1467: FILE: drivers/pnp/pnpacpi/rsparser.c:266:
+							    sharable);
 							    ^^^^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.irq.sharable'
#1467: FILE: drivers/pnp/pnpacpi/rsparser.c:266:
+							    res->data.irq.
+							    sharable);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.dma.channels[0]'
#1479: FILE: drivers/pnp/pnpacpi/rsparser.c:274:
+							    res->data.dma.
+							    channels[0],

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.dma.bus_master'
#1482: FILE: drivers/pnp/pnpacpi/rsparser.c:277:
+							    res->data.dma.
+							    bus_master,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.dma.transfer'
#1484: FILE: drivers/pnp/pnpacpi/rsparser.c:279:
+							    res->data.dma.
+							    transfer);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.fixed_io.address_length'
#1508: FILE: drivers/pnp/pnpacpi/rsparser.c:298:
+						   res->data.fixed_io.
+						   address_length,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.memory24.address_length'
#1522: FILE: drivers/pnp/pnpacpi/rsparser.c:312:
+						    res->data.memory24.
+						    address_length,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.memory24.write_protect'
#1524: FILE: drivers/pnp/pnpacpi/rsparser.c:314:
+						    res->data.memory24.
+						    write_protect);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.memory32.address_length'
#1533: FILE: drivers/pnp/pnpacpi/rsparser.c:320:
+						    res->data.memory32.
+						    address_length,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.memory32.write_protect'
#1535: FILE: drivers/pnp/pnpacpi/rsparser.c:322:
+						    res->data.memory32.
+						    write_protect);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.fixed_memory32.address'
#1543: FILE: drivers/pnp/pnpacpi/rsparser.c:327:
+						    res->data.fixed_memory32.
+						    address,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.fixed_memory32.address_length'
#1545: FILE: drivers/pnp/pnpacpi/rsparser.c:329:
+						    res->data.fixed_memory32.
+						    address_length,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.fixed_memory32.write_protect'
#1547: FILE: drivers/pnp/pnpacpi/rsparser.c:331:
+						    res->data.fixed_memory32.
+						    write_protect);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.extended_irq'
#1560: FILE: drivers/pnp/pnpacpi/rsparser.c:351:
+							    res->data.
+							    extended_irq.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'extended_irq.interrupts[i]'
#1561: FILE: drivers/pnp/pnpacpi/rsparser.c:352:
+							    extended_irq.
+							    interrupts[i],

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.extended_irq'
#1563: FILE: drivers/pnp/pnpacpi/rsparser.c:354:
+							    res->data.
+							    extended_irq.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'extended_irq.triggering'
#1564: FILE: drivers/pnp/pnpacpi/rsparser.c:355:
+							    extended_irq.
+							    triggering,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.extended_irq'
#1566: FILE: drivers/pnp/pnpacpi/rsparser.c:357:
+							    res->data.
+							    extended_irq.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'extended_irq.polarity'
#1567: FILE: drivers/pnp/pnpacpi/rsparser.c:358:
+							    extended_irq.
+							    polarity,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'res->data.extended_irq'
#1569: FILE: drivers/pnp/pnpacpi/rsparser.c:360:
+							    res->data.
+							    extended_irq.

WARNING:TYPO_SPELLING: 'sharable' may be misspelled - perhaps 'shareable'?
#1570: FILE: drivers/pnp/pnpacpi/rsparser.c:361:
+							    sharable);
 							    ^^^^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'extended_irq.sharable'
#1570: FILE: drivers/pnp/pnpacpi/rsparser.c:361:
+							    extended_irq.
+							    sharable);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1580: FILE: drivers/pnp/pnpacpi/rsparser.c:524:
+static void pnpacpi_parse_fixed_mem32_option(struct pnp_option *option, struct acpi_resource_fixed_memory32

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1622: FILE: drivers/pnp/pnpbios/rsparser.c:66:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1629: FILE: drivers/pnp/pnpbios/rsparser.c:73:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1654: FILE: drivers/pnp/pnpbios/rsparser.c:86:
+			pnp_err("Bug in %s", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1657: FILE: drivers/pnp/pnpbios/rsparser.c:89:
+	new_res.start = new_res.end = (unsigned long)dma;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1659: FILE: drivers/pnp/pnpbios/rsparser.c:91:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1684: FILE: drivers/pnp/pnpbios/rsparser.c:104:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1690: FILE: drivers/pnp/pnpbios/rsparser.c:110:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1715: FILE: drivers/pnp/pnpbios/rsparser.c:123:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1721: FILE: drivers/pnp/pnpbios/rsparser.c:129:
+		pnp_err("Bug in %s", __FUNCTION__);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364938.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 79 warnings, 16 checks, 1293 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364938.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
