WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: include/asm-generic/atomic64-impl.h:1:
+#ifndef _ASM_GENERIC_ATOMIC64_IMPL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#70: FILE: include/asm-generic/atomic64-impl.h:21:
+	spinlock_t lock;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#74: FILE: include/asm-generic/atomic64-impl.h:25:
+extern union generic_atomic64_lock generic_atomic64_lock[ATOMIC64_NR_LOCKS] __cacheline_aligned_in_smp;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#87: FILE: include/asm-generic/atomic64-impl.h:38:
+	unsigned long addr = (unsigned long) v;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/asm-generic/atomic64.h:21:
+extern long long generic_atomic64_read(const atomic64_t *v);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/asm-generic/atomic64.h:22:
+extern void	 generic_atomic64_set(atomic64_t *v, long long i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/asm-generic/atomic64.h:23:
+extern void	 generic_atomic64_add(long long a, atomic64_t *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/asm-generic/atomic64.h:24:
+extern long long generic_atomic64_add_return(long long a, atomic64_t *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/asm-generic/atomic64.h:25:
+extern void	 generic_atomic64_sub(long long a, atomic64_t *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/asm-generic/atomic64.h:26:
+extern long long generic_atomic64_sub_return(long long a, atomic64_t *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: include/asm-generic/atomic64.h:27:
+extern long long generic_atomic64_dec_if_positive(atomic64_t *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/asm-generic/atomic64.h:28:
+extern long long generic_atomic64_cmpxchg(atomic64_t *v, long long o, long long n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/asm-generic/atomic64.h:29:
+extern long long generic_atomic64_xchg(atomic64_t *v, long long new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/asm-generic/atomic64.h:30:
+extern int	 generic_atomic64_add_unless(atomic64_t *v, long long a, long long u);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#440: FILE: lib/atomic64.c:24:
+EXPORT_SYMBOL(generic_atomic64_read);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#441: FILE: lib/atomic64.c:25:
+EXPORT_SYMBOL(generic_atomic64_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#442: FILE: lib/atomic64.c:26:
+EXPORT_SYMBOL(generic_atomic64_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#443: FILE: lib/atomic64.c:27:
+EXPORT_SYMBOL(generic_atomic64_add_return);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#444: FILE: lib/atomic64.c:28:
+EXPORT_SYMBOL(generic_atomic64_sub);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#445: FILE: lib/atomic64.c:29:
+EXPORT_SYMBOL(generic_atomic64_sub_return);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#446: FILE: lib/atomic64.c:30:
+EXPORT_SYMBOL(generic_atomic64_dec_if_positive);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#447: FILE: lib/atomic64.c:31:
+EXPORT_SYMBOL(generic_atomic64_cmpxchg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#448: FILE: lib/atomic64.c:32:
+EXPORT_SYMBOL(generic_atomic64_xchg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#449: FILE: lib/atomic64.c:33:
+EXPORT_SYMBOL(generic_atomic64_add_unless);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010839.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 12 checks, 390 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010839.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
