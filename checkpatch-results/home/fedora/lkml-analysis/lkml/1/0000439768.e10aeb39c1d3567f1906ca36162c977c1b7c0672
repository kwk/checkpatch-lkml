WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#84: FILE: net/lapb.h:66:
*/

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: net/lapb.h:146:
+extern void lapb_reestablish(struct lapb_cb *lapb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: net/lapb.h:147:
+extern void lapb_enquiry_response(struct lapb_cb *lapb, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#138: FILE: net/lapb.h:147:
+extern void lapb_enquiry_response(struct lapb_cb *lapb, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: net/lapb.h:151:
+extern void lapb_initialize_retransmission(struct lapb_cb *lapb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: net/lapb.h:165:
+extern void lapb_start_t203(struct lapb_cb *lapb);

ERROR:SPACING: space prohibited after that open parenthesis '('
#166: FILE: net/lapb.h:187:
+# define LAPB_DEBUG_DYN_CHK( _p_lapb, _level ) \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#166: FILE: net/lapb.h:187:
+# define LAPB_DEBUG_DYN_CHK( _p_lapb, _level ) \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#166: FILE: net/lapb.h:187:
+# define LAPB_DEBUG_DYN_CHK( _p_lapb, _level ) \
+   if (_p_lapb->dbg_level > _level )

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_p_lapb' may be better as '(_p_lapb)' to avoid precedence issues
#166: FILE: net/lapb.h:187:
+# define LAPB_DEBUG_DYN_CHK( _p_lapb, _level ) \
+   if (_p_lapb->dbg_level > _level )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_level' may be better as '(_level)' to avoid precedence issues
#166: FILE: net/lapb.h:187:
+# define LAPB_DEBUG_DYN_CHK( _p_lapb, _level ) \
+   if (_p_lapb->dbg_level > _level )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: net/lapb.h:188:
+   if (_p_lapb->dbg_level > _level )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#167: FILE: net/lapb.h:188:
+   if (_p_lapb->dbg_level > _level )

ERROR:SPACING: space prohibited after that open parenthesis '('
#169: FILE: net/lapb.h:190:
+#  define LAPB_DEBUG_DYN_CHK( _p_lapb, _level )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#169: FILE: net/lapb.h:190:
+#  define LAPB_DEBUG_DYN_CHK( _p_lapb, _level )

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#357: FILE: lapb/lapb_timer.c:207:
+					 * immediately sending the the RR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: lapb/lapb_timer.c:211:
+					lapb_enquiry_response(lapb,
+				} else

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: lapb/lapb_timer.c:211:
+				} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#434: FILE: lapb/lapb_in.c:100:
+					printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#483: FILE: lapb/lapb_in.c:153:
+				printk(KERN_DEBUG "lapb: (%p) S0 TX

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#504: FILE: lapb/lapb_in.c:173:
+				printk(KERN_DEBUG "lapb: (%p) S0 RX

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#518: FILE: lapb/lapb_in.c:186:
+					       "lapb: (%p) S0 -> S1\n",
 					            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#518: FILE: lapb/lapb_in.c:186:
+					       "lapb: (%p) S0 -> S1\n",
 					               ^

ERROR:SPACING: spaces prohibited around that '->' (ctx:WxW)
#518: FILE: lapb/lapb_in.c:186:
+					       "lapb: (%p) S0 -> S1\n",
 					                      ^

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#598: FILE: lapb/lapb_in.c:280:
+					if (lapb-> q921_flags &
 					        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#626: FILE: lapb/lapb_in.c:304:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#633: FILE: lapb/lapb_in.c:310:
+						printk(KERN_DEBUG

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#641: FILE: lapb/lapb_in.c:317:
+						       "lapb: (%p) S1 ->
 						            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#641: FILE: lapb/lapb_in.c:317:
+						       "lapb: (%p) S1 ->
 						               ^

ERROR:SPACING: spaces prohibited around that '->' (ctx:WxE)
#641: FILE: lapb/lapb_in.c:317:
+						       "lapb: (%p) S1 ->
 						                      ^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'S1->lapb->dev'
#643: FILE: lapb/lapb_in.c:318:
+						       "lapb: (%p) S1 ->
+						       lapb->dev);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#648: FILE: lapb/lapb_in.c:323:
+						printk(KERN_DEBUG

WARNING:BRACES: braces {} are not necessary for single statement blocks
#744: FILE: lapb/lapb_in.c:458:
+			if (lapb->mode & LAPB_Q921) {
+				break;
+			}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#758: FILE: lapb/lapb_in.c:469:
+				printk(KERN_DEBUG "lapb: (%p) S2 TX

ERROR:CODE_INDENT: code indent should use tabs where possible
#856: FILE: lapb/lapb_in.c:580:
+^I^I ^Iprintk(KERN_DEBUG "lapb: (%p) S3 TX UA(%d)\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#856: FILE: lapb/lapb_in.c:580:
+^I^I ^Iprintk(KERN_DEBUG "lapb: (%p) S3 TX UA(%d)\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#856: FILE: lapb/lapb_in.c:580:
+		 	printk(KERN_DEBUG "lapb: (%p) S3 TX UA(%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#876: FILE: lapb/lapb_in.c:602:
+				printk(KERN_DEBUG "lapb: (%p) S3 RX

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#951: FILE: lapb/lapb_in.c:674:
+					printk(KERN_DEBUG

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (40, 0)
#985: FILE: lapb/lapb_in.c:703:
+					if (frame->cr == LAPB_RESPONSE &&
[...]
lapb_initialize_retransmission

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#987: FILE: lapb/lapb_in.c:705:
+					    frame->pf) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1006: FILE: lapb/lapb_in.c:718:
+					printk(KERN_DEBUG

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (40, 0)
#1041: FILE: lapb/lapb_in.c:746:
+					if (frame->cr == LAPB_RESPONSE &&
[...]
lapb_initialize_retransmission

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1043: FILE: lapb/lapb_in.c:748:
+					    frame->pf) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1062: FILE: lapb/lapb_in.c:761:
+					printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1101: FILE: lapb/lapb_in.c:791:
+					printk(KERN_DEBUG

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1149: FILE: lapb/lapb_in.c:840:
+						if (!lapb->mode & LAPB_Q921)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (48, 0)
#1149: FILE: lapb/lapb_in.c:840:
+						if (!lapb->mode & LAPB_Q921)
[...]
lapb_start_t2timer(lapb);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1153: FILE: lapb/lapb_in.c:842:
+
+						}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1206: FILE: lapb/lapb_in.c:894:
+				printk(KERN_DEBUG "lapb: (%p) S3 RX

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#1220: FILE: lapb/lapb_in.c:902:
+				printk(KERN_DEBUG "lapb: (%p) S3 -> S4\n",
 				                          ^

ERROR:SPACING: spaces prohibited around that '->' (ctx:WxW)
#1220: FILE: lapb/lapb_in.c:902:
+				printk(KERN_DEBUG "lapb: (%p) S3 -> S4\n",
 				                                 ^

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1378: FILE: lapb/lapb_iface.c:279:
+		if (lapb->mode & LAPB_Q921) {
[...]
+		} else if (!lapb_t1timer_running(lapb)) {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1402: FILE: lapb/lapb_iface.c:312:
+		if (lapb->mode & LAPB_Q921) {
+			lapb_clear_queues(lapb);
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1467: FILE: lapb/lapb_iface.c:392:
+	printk(KERN_DEBUG "lapb: (%p) S3 TX DISC(1)\n", lapb->dev);

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1520: FILE: lapb/lapb_out.c:119:
+			if (lapb->mode & LAPB_Q921) {
+				lapb_stop_t2timer(lapb);
+			}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1604: FILE: lapb/lapb_out.c:182:
+		printk(KERN_DEBUG

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1607: FILE: lapb/lapb_out.c:184:
+		       /* "lapb: (%p) S%d Tim:%lu.%3.3lu TX %02X %02X %02X
+		       "lapb: (%p) S%d TX %02X %02X %02X %02X\n",

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1610: FILE: lapb/lapb_out.c:186:
+		       lapb->dev, lapb->state, /* tim.tv_sec, tim.tv_usec /
+		       skb->data[0], skb->data[1],

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#1654: FILE: lapb/lapb_out.c:234:
+		static const char *txtState[] =

CHECK:CAMELCASE: Avoid CamelCase: <txtState>
#1654: FILE: lapb/lapb_out.c:234:
+		static const char *txtState[] =

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1655: FILE: lapb/lapb_out.c:235:
+		static const char *txtState[] =
+			{ "S0", "S1", "S2", "S3", "S4" };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1657: FILE: lapb/lapb_out.c:237:
+		printk(KERN_DEBUG "lapb: (%p) %s -> S1\n", lapb->dev,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1658: FILE: lapb/lapb_out.c:238:
+		       txtState[lapb->state] );

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'istead' may be misspelled - perhaps 'instead'?
#1720: FILE: lapb/lapb_subr.c:92:
+	/* use some if's istead of trying in a loop, to speed up the check
 	                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1722: FILE: lapb/lapb_subr.c:94:
+#if 1

WARNING:TYPO_SPELLING: 'arround' may be misspelled - perhaps 'around'?
#1730: FILE: lapb/lapb_subr.c:102:
+		/* the simple case, no wrap arround of vs */
 		                            ^^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1732: FILE: lapb/lapb_subr.c:104:
+		return ((nr >= lapb->va) && (nr <= lapb->vs));
+	} else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1732: FILE: lapb/lapb_subr.c:104:
+	} else {
[...]
.. vs

WARNING:TYPO_SPELLING: 'arround' may be misspelled - perhaps 'around'?
#1733: FILE: lapb/lapb_subr.c:105:
+		/* wrap arround of vs, so the valid range is va .. max and 0
 		        ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1765: FILE: lapb/lapb_subr.c:142:
+		printk(KERN_DEBUG

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1768: FILE: lapb/lapb_subr.c:144:
+		       /* "lapb: (%p) S%d Tim:%lu.%3.3lu RX %02X %02X %02X
+		       "lapb: (%p) S%d RX %02X %02X %02X %02X\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1771: FILE: lapb/lapb_subr.c:146:
+		       lapb->dev, lapb->state, /* tim.tv_sec, tim.tv_usec /
+		       skb->data[0], skb->data[1],

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1870: FILE: lapb/lapb_subr.c:294:
+	if ((skb = alloc_skb(LAPB_HEADER_LEN + 4, GFP_ATOMIC)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1879: FILE: lapb/lapb_subr.c:330:
+	if ((skb = alloc_skb(LAPB_HEADER_LEN + 8, GFP_ATOMIC)) == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000439768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 48 warnings, 16 checks, 1724 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000439768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
