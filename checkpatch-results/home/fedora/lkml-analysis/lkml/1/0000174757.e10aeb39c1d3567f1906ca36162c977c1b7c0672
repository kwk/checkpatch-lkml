CHECK:CAMELCASE: Avoid CamelCase: <dest_LowestPrio>
#66: FILE: arch/x86/kernel/es7000_32.c:394:
+#define INT_DELIVERY_MODE_CLUSTER	(dest_LowestPrio)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#71: FILE: arch/x86/kernel/es7000_32.c:399:
+extern void es7000_enable_apic_mode(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#72: FILE: arch/x86/kernel/es7000_32.c:400:
+extern int apic_version [MAX_APICS];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#72: FILE: arch/x86/kernel/es7000_32.c:400:
+extern int apic_version [MAX_APICS];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#73: FILE: arch/x86/kernel/es7000_32.c:401:
+extern u8 cpu_2_logical_apicid[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#74: FILE: arch/x86/kernel/es7000_32.c:402:
+extern unsigned int boot_cpu_physical_apicid;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: arch/x86/kernel/es7000_32.c:404:
+extern int parse_unisys_oem (char *oemptr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: arch/x86/kernel/es7000_32.c:404:
+extern int parse_unisys_oem (char *oemptr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#77: FILE: arch/x86/kernel/es7000_32.c:405:
+extern int find_unisys_acpi_oem_table(unsigned long *oem_addr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#78: FILE: arch/x86/kernel/es7000_32.c:406:
+extern void unmap_unisys_acpi_oem_table(unsigned long oem_addr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#79: FILE: arch/x86/kernel/es7000_32.c:407:
+extern void setup_unisys(void);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'apicid' may be better as '(apicid)' to avoid precedence issues
#81: FILE: arch/x86/kernel/es7000_32.c:409:
+#define apicid_cluster(apicid)		(apicid & 0xF0)

WARNING:TYPO_SPELLING: 'desitination' may be misspelled - perhaps 'destination'?
#92: FILE: arch/x86/kernel/es7000_32.c:420:
+	 * hyperthread was specified in the interrupt desitination.
 	                                              ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#97: FILE: arch/x86/kernel/es7000_32.c:425:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#105: FILE: arch/x86/kernel/es7000_32.c:433:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: arch/x86/kernel/es7000_32.c:469:
+^I        return 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#159: FILE: arch/x86/kernel/es7000_32.c:487:
+}
+static unsigned long es7000_check_apicid_present(int bit)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#168: FILE: arch/x86/kernel/es7000_32.c:496:
+	return (SET_APIC_LOGICAL_ID(id));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: arch/x86/kernel/es7000_32.c:529:
+	int apic = per_cpu(x86_bios_cpu_apicid, smp_processor_id());
+	printk("Enabling APIC mode:  %s. Using %d I/O APICs, target cpus %lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#201: FILE: arch/x86/kernel/es7000_32.c:529:
+	printk("Enabling APIC mode:  %s. Using %d I/O APICs, target cpus %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: arch/x86/kernel/es7000_32.c:530:
+	printk("Enabling APIC mode:  %s. Using %d I/O APICs, target cpus %lx\n",
+		(apic_version[apic] == 0x14) ?

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: arch/x86/kernel/es7000_32.c:540:
+
+

CHECK:SPACING: No space is necessary after a cast
#218: FILE: arch/x86/kernel/es7000_32.c:546:
+		return (int) per_cpu(x86_bios_cpu_apicid, mps_cpu);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#225: FILE: arch/x86/kernel/es7000_32.c:553:
+	static int id = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#255: FILE: arch/x86/kernel/es7000_32.c:583:
+	return (1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: arch/x86/kernel/es7000_32.c:611:
+				printk ("%s: Not a valid mask!\n", __func__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: arch/x86/kernel/es7000_32.c:611:
+				printk ("%s: Not a valid mask!\n", __func__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#318: FILE: arch/x86/kernel/es7000_32.c:646:
+				printk ("%s: Not a valid mask!\n", __func__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#318: FILE: arch/x86/kernel/es7000_32.c:646:
+				printk ("%s: Not a valid mask!\n", __func__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#396: FILE: arch/x86/kernel/es7000_32.c:724:
+		if (check_dsdt)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#398: FILE: arch/x86/kernel/es7000_32.c:726:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#416: FILE: arch/x86/kernel/es7000_32.c:744:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#418: FILE: arch/x86/kernel/es7000_32.c:746:
+struct genapic apic_es7000 = {
+

CHECK:CAMELCASE: Avoid CamelCase: <dest_Fixed>
#424: FILE: arch/x86/kernel/es7000_32.c:752:
+	.irq_delivery_mode		= dest_Fixed,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#485: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 18 warnings, 12 checks, 434 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
