WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Subject: [PATCH 20/33] score: create head files fixmap.h param.h resource.h setup.h sections.h segment.h string.h system.h

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#55: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: arch/score/include/asm/fixmap.h:1:
+#ifndef _ASM_SCORE_FIXMAP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(int)0xfefe0000' could be '0xfefe0000'
#116: FILE: arch/score/include/asm/fixmap.h:57:
+#define FIXADDR_TOP	((unsigned long)(long)(int)0xfefe0000)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: arch/score/include/asm/fixmap.h:65:
+extern void __this_fixmap_does_not_exist(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'tranlation' may be misspelled - perhaps 'translation'?
#128: FILE: arch/score/include/asm/fixmap.h:69:
+ * directly without tranlation, we catch the bug with a NULL-deference
                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: arch/score/include/asm/param.h:1:
+#ifndef _ASM_SCORE_PARAM_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: arch/score/include/asm/resource.h:1:
+#ifndef _ASM_SCORE_RESOURCE_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#172: FILE: arch/score/include/asm/sections.h:1:
+#ifndef _ASM_SCORE_SECTIONS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: arch/score/include/asm/segment.h:1:
+#ifndef _ASM_SCORE_SEGMENT_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#189: FILE: arch/score/include/asm/segment.h:6:
+typedef struct {

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#198: FILE: arch/score/include/asm/segment.h:15:
+# define set_fs(x)	\
+	do { current_thread_info()->addr_limit = (x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#211: FILE: arch/score/include/asm/setup.h:1:
+#ifndef _ASM_SCORE_SETUP_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: arch/score/include/asm/setup.h:10:
+extern void pagetable_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: arch/score/include/asm/setup.h:11:
+extern void pgd_init(unsigned long page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: arch/score/include/asm/setup.h:13:
+extern void setup_early_printk(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: arch/score/include/asm/setup.h:14:
+extern void cpu_cache_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: arch/score/include/asm/setup.h:15:
+extern void tlb_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: arch/score/include/asm/setup.h:17:
+extern void handle_nmi(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: arch/score/include/asm/setup.h:18:
+extern void handle_adelinsn(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: arch/score/include/asm/setup.h:19:
+extern void handle_adedata(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: arch/score/include/asm/setup.h:20:
+extern void handle_ibe(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: arch/score/include/asm/setup.h:21:
+extern void handle_pel(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: arch/score/include/asm/setup.h:22:
+extern void handle_sys(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: arch/score/include/asm/setup.h:23:
+extern void handle_ccu(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: arch/score/include/asm/setup.h:24:
+extern void handle_ri(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: arch/score/include/asm/setup.h:25:
+extern void handle_tr(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: arch/score/include/asm/setup.h:26:
+extern void handle_ades(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: arch/score/include/asm/setup.h:27:
+extern void handle_cee(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: arch/score/include/asm/setup.h:28:
+extern void handle_cpe(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: arch/score/include/asm/setup.h:29:
+extern void handle_dve(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: arch/score/include/asm/setup.h:30:
+extern void handle_dbe(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: arch/score/include/asm/setup.h:31:
+extern void handle_reserved(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: arch/score/include/asm/setup.h:32:
+extern void handle_tlb_refill(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: arch/score/include/asm/setup.h:33:
+extern void handle_tlb_invaild(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: arch/score/include/asm/setup.h:34:
+extern void handle_mod(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: arch/score/include/asm/setup.h:35:
+extern void debug_exception_vector(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: arch/score/include/asm/setup.h:36:
+extern void general_exception_vector(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: arch/score/include/asm/setup.h:37:
+extern void interrupt_exception_vector(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#258: FILE: arch/score/include/asm/string.h:1:
+#ifndef _ASM_SCORE_STRING_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: arch/score/include/asm/string.h:4:
+extern void *memset(void *__s, int __c, size_t __count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: arch/score/include/asm/string.h:5:
+extern void *memcpy(void *__to, __const__ void *__from, size_t __n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: arch/score/include/asm/string.h:6:
+extern void *memmove(void *__dest, __const__ void *__src, size_t __n);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#272: FILE: arch/score/include/asm/system.h:1:
+#ifndef _ASM_SCORE_SYSTEM_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: arch/score/include/asm/system.h:10:
+extern void *resume(void *last, void *next, void *next_ti);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'next' - possible side-effects?
#283: FILE: arch/score/include/asm/system.h:12:
+#define switch_to(prev, next, last)				\
+do {								\
+	(last) = resume(prev, next, task_thread_info(next));	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#283: FILE: arch/score/include/asm/system.h:12:
+#define switch_to(prev, next, last)				\
+do {								\
+	(last) = resume(prev, next, task_thread_info(next));	\
+} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: arch/score/include/asm/system.h:20:
+extern unsigned long arch_align_stack(unsigned long sp);

WARNING:MEMORY_BARRIER: memory barrier without comment
#293: FILE: arch/score/include/asm/system.h:22:
+#define mb()		barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#294: FILE: arch/score/include/asm/system.h:23:
+#define rmb()		barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#295: FILE: arch/score/include/asm/system.h:24:
+#define wmb()		barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#296: FILE: arch/score/include/asm/system.h:25:
+#define smp_mb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#297: FILE: arch/score/include/asm/system.h:26:
+#define smp_rmb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#298: FILE: arch/score/include/asm/system.h:27:
+#define smp_wmb()	barrier()

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#303: FILE: arch/score/include/asm/system.h:32:
+#define set_mb(var, value) ^I^Ido {var = value; wmb(); } while (0)$

WARNING:MEMORY_BARRIER: memory barrier without comment
#303: FILE: arch/score/include/asm/system.h:32:
+#define set_mb(var, value) 		do {var = value; wmb(); } while (0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#315: FILE: arch/score/include/asm/system.h:44:
+unsigned long __xchg(volatile unsigned long *m, unsigned long val)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#327: FILE: arch/score/include/asm/system.h:56:
+#define xchg(ptr, v)						\
+	((__typeof__(*(ptr))) __xchg((unsigned long *)(ptr),	\
+					(unsigned long)(v)))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#331: FILE: arch/score/include/asm/system.h:60:
+static inline unsigned long __cmpxchg(volatile unsigned long *m,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: arch/score/include/asm/system.h:61:
+static inline unsigned long __cmpxchg(volatile unsigned long *m,
+				unsigned long old, unsigned long new)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#345: FILE: arch/score/include/asm/system.h:74:
+#define cmpxchg(ptr, o, n)					\
+	((__typeof__(*(ptr))) __cmpxchg((unsigned long *)(ptr),	\
+					(unsigned long)(o),	\
+					(unsigned long)(n)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: arch/score/include/asm/system.h:79:
+extern void __die(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#350: FILE: arch/score/include/asm/system.h:79:
+extern void __die(const char *, struct pt_regs *, const char *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#350: FILE: arch/score/include/asm/system.h:79:
+extern void __die(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#350: FILE: arch/score/include/asm/system.h:79:
+extern void __die(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#350: FILE: arch/score/include/asm/system.h:79:
+extern void __die(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#350: FILE: arch/score/include/asm/system.h:79:
+extern void __die(const char *, struct pt_regs *, const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: arch/score/include/asm/system.h:80:
+extern void __die(const char *, struct pt_regs *, const char *,
+	const char *, unsigned long) __attribute__((noreturn));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#351: FILE: arch/score/include/asm/system.h:80:
+	const char *, unsigned long) __attribute__((noreturn));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#352: FILE: arch/score/include/asm/system.h:81:
+extern void __die_if_kernel(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#352: FILE: arch/score/include/asm/system.h:81:
+extern void __die_if_kernel(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#352: FILE: arch/score/include/asm/system.h:81:
+extern void __die_if_kernel(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#352: FILE: arch/score/include/asm/system.h:81:
+extern void __die_if_kernel(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#352: FILE: arch/score/include/asm/system.h:81:
+extern void __die_if_kernel(const char *, struct pt_regs *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#352: FILE: arch/score/include/asm/system.h:81:
+extern void __die_if_kernel(const char *, struct pt_regs *, const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: arch/score/include/asm/system.h:82:
+extern void __die_if_kernel(const char *, struct pt_regs *, const char *,
+	const char *, unsigned long);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 36 warnings, 40 checks, 260 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
