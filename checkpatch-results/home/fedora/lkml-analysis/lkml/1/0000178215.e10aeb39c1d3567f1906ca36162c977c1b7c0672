WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#320: FILE: kernel/dprintk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#325: FILE: kernel/dprintk.c:6:
+ * $Id: dprintk.c,v 1.1 2008/09/04 04:46:06 gnb Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#339: FILE: kernel/dprintk.c:20:
+#include <asm/uaccess.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#343: FILE: kernel/dprintk.c:24:
+struct dprintk_table
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#351: FILE: kernel/dprintk.c:32:
+struct dprintk_query
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#360: FILE: kernel/dprintk.c:41:
+struct dprintk_iter
+{

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#367: FILE: kernel/dprintk.c:48:
+static int verbose = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPLIT_STRING: quoted string split across lines
#371: FILE: kernel/dprintk.c:52:
+MODULE_PARM_DESC(verbose, "Set this parameter to non-zero to debug "
+			  "the dprintk module itself.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: kernel/dprintk.c:58:
+	const char *tail = strrchr(path, '/');
+	return (tail ? tail+1 : path);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#377: FILE: kernel/dprintk.c:58:
+	return (tail ? tail+1 : path);
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#377: FILE: kernel/dprintk.c:58:
+	return (tail ? tail+1 : path);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#386: FILE: kernel/dprintk.c:67:
+	BUG_ON(maxlen < 4);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#418: FILE: kernel/dprintk.c:99:
+	list_for_each_entry(dt, &dprintk_tables, link) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->module"
#420: FILE: kernel/dprintk.c:101:
+		if (query->module != NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->filename"
#428: FILE: kernel/dprintk.c:109:
+			if (query->filename != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->function"
#434: FILE: kernel/dprintk.c:115:
+			if (query->function != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->format"
#439: FILE: kernel/dprintk.c:120:
+			if (query->format != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strstr"
#440: FILE: kernel/dprintk.c:121:
+			    strstr(dp->format, query->format) == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#458: FILE: kernel/dprintk.c:139:
+			printk(KERN_INFO "dprintk: changed %s:%d [%s]%s %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: kernel/dprintk.c:140:
+			printk(KERN_INFO "dprintk: changed %s:%d [%s]%s %s\n",
+				dp->filename, dp->lineno,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#467: FILE: kernel/dprintk.c:148:
+		printk(KERN_INFO "dprintk: no matches for query\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: kernel/dprintk.c:181:
+		int i;
+		printk(KERN_INFO "%s: split into words:", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#500: FILE: kernel/dprintk.c:181:
+		printk(KERN_INFO "%s: split into words:", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#500: FILE: kernel/dprintk.c:181:
+		printk(KERN_INFO "%s: split into words:", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: kernel/dprintk.c:183:
+			printk(" \"%s\"", words[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#503: FILE: kernel/dprintk.c:184:
+		printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#517: FILE: kernel/dprintk.c:198:
+	char *end = NULL;
+	BUG_ON(str == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: kernel/dprintk.c:198:
+	BUG_ON(str == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!str"
#517: FILE: kernel/dprintk.c:198:
+	BUG_ON(str == NULL);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#522: FILE: kernel/dprintk.c:203:
+	*val = simple_strtoul(str, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!end"
#523: FILE: kernel/dprintk.c:204:
+	return (end == NULL || end == str || *end != '\0' ? -EINVAL : 0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#531: FILE: kernel/dprintk.c:212:
+#define isodigit(c)		((c) >= '0' && (c) <= '7')

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: kernel/dprintk.c:233:
+^I^I^I         isodigit(in[2]) &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: kernel/dprintk.c:234:
+^I^I^I         isodigit(in[3])) {$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#554: FILE: kernel/dprintk.c:235:
+				*out++ = ((in[1] - '0')<<6) |
 				                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: kernel/dprintk.c:236:
+^I^I^I^I          ((in[2] - '0')<<3) |$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#555: FILE: kernel/dprintk.c:236:
+				          ((in[2] - '0')<<3) |
 				                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: kernel/dprintk.c:237:
+^I^I^I^I          (in[3] - '0');$

CHECK:BRACES: braces {} should be used on all arms of this statement
#591: FILE: kernel/dprintk.c:272:
+		if (!strcmp(words[i], "func"))
[...]
+		else if (!strcmp(words[i], "file"))
[...]
+		else if (!strcmp(words[i], "module"))
[...]
+		else if (!strcmp(words[i], "format"))
[...]
+		else if (!strcmp(words[i], "line")) {
[...]
+		} else {
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#592: FILE: kernel/dprintk.c:273:
+			query->function = words[i+1];
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#594: FILE: kernel/dprintk.c:275:
+			query->filename = words[i+1];
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#596: FILE: kernel/dprintk.c:277:
+			query->module = words[i+1];
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#598: FILE: kernel/dprintk.c:279:
+			query->format = unescape(words[i+1]);
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#600: FILE: kernel/dprintk.c:281:
+			char *first = words[i+1];
 			                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#602: FILE: kernel/dprintk.c:283:
+			char *last = strchr(first, '-');
+			if (last)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last"
#606: FILE: kernel/dprintk.c:287:
+			if (last != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#615: FILE: kernel/dprintk.c:296:
+				printk(KERN_ERR "%s: unknown keyword \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: kernel/dprintk.c:297:
+				printk(KERN_ERR "%s: unknown keyword \"%s\"\n",
+					__FUNCTION__, words[i]);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#616: FILE: kernel/dprintk.c:297:
+					__FUNCTION__, words[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#622: FILE: kernel/dprintk.c:303:
+		printk(KERN_INFO "%s: q->function=\"%s\" q->filename=\"%s\" "

WARNING:SPLIT_STRING: quoted string split across lines
#623: FILE: kernel/dprintk.c:304:
+		printk(KERN_INFO "%s: q->function=\"%s\" q->filename=\"%s\" "
+		       "q->module=\"%s\" q->format=\"%s\" q->lineno=%u-%u\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#624: FILE: kernel/dprintk.c:305:
+			__FUNCTION__, query->function, query->filename,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#640: FILE: kernel/dprintk.c:321:
+	unsigned flags = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#653: FILE: kernel/dprintk.c:334:
+		printk(KERN_INFO "%s: op='%c'\n", __FUNCTION__, op);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#653: FILE: kernel/dprintk.c:334:
+		printk(KERN_INFO "%s: op='%c'\n", __FUNCTION__, op);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#673: FILE: kernel/dprintk.c:354:
+		printk(KERN_INFO "%s: flags=0x%x\n", __FUNCTION__, flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#673: FILE: kernel/dprintk.c:354:
+		printk(KERN_INFO "%s: flags=0x%x\n", __FUNCTION__, flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#691: FILE: kernel/dprintk.c:372:
+		printk(KERN_INFO "%s: *flagsp=0x%x *maskp=0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: kernel/dprintk.c:373:
+		printk(KERN_INFO "%s: *flagsp=0x%x *maskp=0x%x\n",
+			__FUNCTION__, *flagsp, *maskp);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#692: FILE: kernel/dprintk.c:373:
+			__FUNCTION__, *flagsp, *maskp);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#713: FILE: kernel/dprintk.c:394:
+	if (len > sizeof(tmpbuf)-1)
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#719: FILE: kernel/dprintk.c:400:
+		printk(KERN_INFO "%s: read %d bytes from userspace\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: kernel/dprintk.c:401:
+		printk(KERN_INFO "%s: read %d bytes from userspace\n",
+			__FUNCTION__, (int)len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#720: FILE: kernel/dprintk.c:401:
+			__FUNCTION__, (int)len);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#725: FILE: kernel/dprintk.c:406:
+	if (dprintk_parse_query(words, nwords-1, &query))
 	                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#727: FILE: kernel/dprintk.c:408:
+	if (dprintk_parse_flags(words[nwords-1], &flags, &mask))
 	                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter->table"
#763: FILE: kernel/dprintk.c:444:
+	if (iter->table == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#790: FILE: kernel/dprintk.c:471:
+		printk(KERN_INFO "%s: called m=%p *pos=%lld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: kernel/dprintk.c:472:
+		printk(KERN_INFO "%s: called m=%p *pos=%lld\n",
+			__FUNCTION__, m, (unsigned long long)*pos);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#791: FILE: kernel/dprintk.c:472:
+			__FUNCTION__, m, (unsigned long long)*pos);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dp"
#800: FILE: kernel/dprintk.c:481:
+	while (dp != NULL && --n > 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#816: FILE: kernel/dprintk.c:497:
+		printk(KERN_INFO "%s: called m=%p p=%p *pos=%lld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: kernel/dprintk.c:498:
+		printk(KERN_INFO "%s: called m=%p p=%p *pos=%lld\n",
+			__FUNCTION__, m, p, (unsigned long long)*pos);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#817: FILE: kernel/dprintk.c:498:
+			__FUNCTION__, m, p, (unsigned long long)*pos);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#840: FILE: kernel/dprintk.c:521:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: kernel/dprintk.c:522:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",
+			__FUNCTION__, m, p);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#841: FILE: kernel/dprintk.c:522:
+			__FUNCTION__, m, p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#865: FILE: kernel/dprintk.c:546:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: kernel/dprintk.c:547:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",
+			__FUNCTION__, m, p);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#866: FILE: kernel/dprintk.c:547:
+			__FUNCTION__, m, p);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#870: FILE: kernel/dprintk.c:551:
+static struct seq_operations dprintk_proc_seqops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#889: FILE: kernel/dprintk.c:570:
+		printk(KERN_INFO "%s: called\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#889: FILE: kernel/dprintk.c:570:
+		printk(KERN_INFO "%s: called\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter"
#892: FILE: kernel/dprintk.c:573:
+	if (iter == NULL)

CHECK:SPACING: No space is necessary after a cast
#900: FILE: kernel/dprintk.c:581:
+	((struct seq_file *) file->private_data)->private = iter;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#904: FILE: kernel/dprintk.c:585:
+static struct file_operations dprintk_proc_fops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: kernel/dprintk.c:591:
+ ^I.write = dprintk_proc_write$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#910: FILE: kernel/dprintk.c:591:
+ ^I.write = dprintk_proc_write$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: kernel/dprintk.c:591:
+ ^I.write = dprintk_proc_write$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dt"
#923: FILE: kernel/dprintk.c:604:
+	if (dt == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#934: FILE: kernel/dprintk.c:615:
+		printk(KERN_INFO "%u debug prints in module %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: kernel/dprintk.c:616:
+		printk(KERN_INFO "%u debug prints in module %s\n",
+				 n, mod->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#955: FILE: kernel/dprintk.c:636:
+		printk(KERN_INFO "%s: removing module \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: kernel/dprintk.c:637:
+		printk(KERN_INFO "%s: removing module \"%s\"\n",
+				__FUNCTION__, mod->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#956: FILE: kernel/dprintk.c:637:
+				__FUNCTION__, mod->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1007: FILE: kernel/dprintk.c:688:
+		printk(KERN_INFO "%s: adding module \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: kernel/dprintk.c:689:
+		printk(KERN_INFO "%s: adding module \"%s\"\n",
+			__FUNCTION__, mod->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1008: FILE: kernel/dprintk.c:689:
+			__FUNCTION__, mod->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod->sect_attrs"
#1010: FILE: kernel/dprintk.c:691:
+	if (mod->sect_attrs == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gattr"
#1018: FILE: kernel/dprintk.c:699:
+	for (gattr = mod->sect_attrs->grp.attrs ; *gattr != NULL ; gattr++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dprintk_start"
#1024: FILE: kernel/dprintk.c:705:
+	if (dprintk_start == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gattr"
#1039: FILE: kernel/dprintk.c:720:
+	for (gattr = mod->sect_attrs->grp.attrs ; *gattr != NULL ; gattr++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1041: FILE: kernel/dprintk.c:722:
+		void *addr = section_address(*gattr);
+		if (!strcmp(section_name(*gattr), ".dprintk"))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dprintk_end"
#1048: FILE: kernel/dprintk.c:729:
+	if (dprintk_end == NULL) {

WARNING:SPACING: space prohibited before semicolon
#1054: FILE: kernel/dprintk.c:735:
+	for (dp = (struct _dprintk *)dprintk_start ;

WARNING:SPACING: space prohibited before semicolon
#1055: FILE: kernel/dprintk.c:736:
+	     dp < (struct _dprintk *)dprintk_end ;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1061: FILE: kernel/dprintk.c:742:
+	 * the end of the actual .dprintk section */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1069: FILE: kernel/dprintk.c:750:
+		printk(KERN_INFO "%s: ignoring %u bytes of "

WARNING:SPLIT_STRING: quoted string split across lines
#1070: FILE: kernel/dprintk.c:751:
+		printk(KERN_INFO "%s: ignoring %u bytes of "
+		       "padding at end of .dprintk section\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1071: FILE: kernel/dprintk.c:752:
+		       __FUNCTION__, (unsigned)((u8 *)dprintk_end - (u8 *)dp));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1071: FILE: kernel/dprintk.c:752:
+		       __FUNCTION__, (unsigned)((u8 *)dprintk_end - (u8 *)dp));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1081: FILE: kernel/dprintk.c:762:
+		printk(KERN_ERR "%s: %s in module \"%s\" so "

WARNING:SPLIT_STRING: quoted string split across lines
#1082: FILE: kernel/dprintk.c:763:
+		printk(KERN_ERR "%s: %s in module \"%s\" so "
+				"cannot find dprintks.  Sorry.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1083: FILE: kernel/dprintk.c:764:
+			__FUNCTION__, why, mod->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1102: FILE: kernel/dprintk.c:783:
+		printk(KERN_INFO "%s: %lu %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1103: FILE: kernel/dprintk.c:784:
+		       __FUNCTION__, event, (mod ? mod->name : "null"));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1113: FILE: kernel/dprintk.c:794:
+		printk(KERN_ERR "%s: unexpected event %lu for module %s\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod"
#1114: FILE: kernel/dprintk.c:795:
+		       __FUNCTION__, event, (mod == NULL ? "null" : mod->name));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1114: FILE: kernel/dprintk.c:795:
+		       __FUNCTION__, event, (mod == NULL ? "null" : mod->name));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1132: FILE: kernel/dprintk.c:813:
+		printk(KERN_INFO "%s called\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1132: FILE: kernel/dprintk.c:813:
+		printk(KERN_INFO "%s called\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pde"
#1135: FILE: kernel/dprintk.c:816:
+	if (pde == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1136: FILE: kernel/dprintk.c:817:
+		printk(KERN_ERR "cannot create /proc/dprintk, "

WARNING:SPLIT_STRING: quoted string split across lines
#1137: FILE: kernel/dprintk.c:818:
+		printk(KERN_ERR "cannot create /proc/dprintk, "
+				"no dprintks will be available\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1142: FILE: kernel/dprintk.c:823:
+	 * in callbacks for existing modules. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1155: FILE: kernel/dprintk.c:836:
+		printk(KERN_INFO "%s called\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1155: FILE: kernel/dprintk.c:836:
+		printk(KERN_INFO "%s called\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#1166: FILE: kernel/dprintk.c:847:
+MODULE_DESCRIPTION("Provides a /proc interface for enabling "
+		   "individual debugging prints");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178215.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 73 warnings, 45 checks, 1143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178215.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
