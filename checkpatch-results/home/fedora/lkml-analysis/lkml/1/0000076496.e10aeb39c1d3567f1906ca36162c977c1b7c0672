ERROR:CONST_READ_MOSTLY: Invalid use of __read_mostly with const type
#102: FILE: drivers/dma/ioat/dma_v3.c:74:
+static const u8 xor_idx_to_desc __read_mostly = 0xd0;

When a variable is tagged with the __read_mostly annotation, it is a
signal to the compiler that accesses to the variable will be mostly
reads and rarely(but NOT never) a write.

const __read_mostly does not make any sense as const data is already
read-only.  The __read_mostly annotation thus should be removed.

ERROR:CONST_READ_MOSTLY: Invalid use of __read_mostly with const type
#103: FILE: drivers/dma/ioat/dma_v3.c:75:
+static const u8 xor_idx_to_field[] __read_mostly = { 1, 4, 5, 6, 7, 0, 1, 2 };

CHECK:SPACING: No space is necessary after a cast
#145: FILE: drivers/dma/ioat/dma_v3.c:129:
+			descs[0] = (struct ioat_raw_descriptor *) xor;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#146: FILE: drivers/dma/ioat/dma_v3.c:130:
+			descs[1] = (struct ioat_raw_descriptor *) xor_ex;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: drivers/dma/ioat/dma_v3.c:213:
+			BUG_ON(i + 1 >= active);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#244: FILE: drivers/dma/ioat/dma_v3.c:421:
+	BUG_ON(src_cnt < 2);

CHECK:BRACES: braces {} should be used on all arms of this statement
#250: FILE: drivers/dma/ioat/dma_v3.c:427:
+	if (src_cnt > 5) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#253: FILE: drivers/dma/ioat/dma_v3.c:430:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 26)
#261: FILE: drivers/dma/ioat/dma_v3.c:438:
+	if (likely(num_descs) &&
[...]
+		/* pass */;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#262: FILE: drivers/dma/ioat/dma_v3.c:439:
+	    ioat2_alloc_and_lock(&idx, ioat, num_descs+1) == 0)
 	                                              ^

CHECK:SPACING: No space is necessary after a cast
#281: FILE: drivers/dma/ioat/dma_v3.c:458:
+		descs[0] = (struct ioat_raw_descriptor *) xor;

CHECK:SPACING: No space is necessary after a cast
#282: FILE: drivers/dma/ioat/dma_v3.c:459:
+		descs[1] = (struct ioat_raw_descriptor *) xor_ex;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: drivers/dma/ioat/dma_v3.c:504:
+ioat3_prep_xor_val(struct dma_chan *chan, dma_addr_t *src,
+		    unsigned int src_cnt, size_t len,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#339: FILE: drivers/dma/ioat/dma_v3.c:516:
 int __devinit ioat3_dma_probe(struct ioatdma_device *device, int dca)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076496.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 4 warnings, 8 checks, 298 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076496.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
