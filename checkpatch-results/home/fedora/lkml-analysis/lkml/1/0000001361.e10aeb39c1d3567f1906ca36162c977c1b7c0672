ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#422: FILE: fs/jfs/inode.c:17:
  *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#442: FILE: fs/ntfs/file.c:19:
  * Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: include/linux/mm.h:1480:
+extern void arch_pick_mmap_layout(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#600: FILE: include/linux/mm.h:1481:
+extern unsigned long

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#600: FILE: include/linux/mm.h:1481:
+extern unsigned long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#600: FILE: include/linux/mm.h:1481:
+extern unsigned long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#600: FILE: include/linux/mm.h:1481:
+extern unsigned long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#600: FILE: include/linux/mm.h:1481:
+extern unsigned long

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#604: FILE: include/linux/mm.h:1485:
+arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
                                             ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: include/linux/mm.h:1486:
+arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
+			  unsigned long len, unsigned long pgoff,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#607: FILE: include/linux/mm.h:1488:
+extern void arch_unmap_area(struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#607: FILE: include/linux/mm.h:1488:
+extern void arch_unmap_area(struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#607: FILE: include/linux/mm.h:1488:
+extern void arch_unmap_area(struct mm_struct *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: include/linux/mm.h:1489:
+extern void arch_unmap_area_topdown(struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#608: FILE: include/linux/mm.h:1489:
+extern void arch_unmap_area_topdown(struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#608: FILE: include/linux/mm.h:1489:
+extern void arch_unmap_area_topdown(struct mm_struct *, unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: include/linux/mm.h:1494:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#614: FILE: include/linux/mm.h:1495:
+extern void set_dumpable(struct mm_struct *mm, int value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#615: FILE: include/linux/mm.h:1496:
+extern int get_dumpable(struct mm_struct *mm);

CHECK:BIT_MACRO: Prefer using the BIT macro
#643: FILE: include/linux/mm.h:1524:
+# define MMF_DUMP_MASK_DEFAULT_ELF	(1 << MMF_DUMP_ELF_HEADERS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#655: FILE: include/linux/mm.h:1536:
+extern struct mm_struct *mm_alloc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/linux/mm.h:1539:
+extern void __mmdrop(struct mm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#658: FILE: include/linux/mm.h:1539:
+extern void __mmdrop(struct mm_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#666: FILE: include/linux/mm.h:1547:
+extern void mmput(struct mm_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#668: FILE: include/linux/mm.h:1549:
+extern struct mm_struct *get_task_mm(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#670: FILE: include/linux/mm.h:1551:
+extern void mm_release(struct task_struct *, struct mm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#670: FILE: include/linux/mm.h:1551:
+extern void mm_release(struct task_struct *, struct mm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#670: FILE: include/linux/mm.h:1551:
+extern void mm_release(struct task_struct *, struct mm_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#672: FILE: include/linux/mm.h:1553:
+extern struct mm_struct *dup_mm(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#675: FILE: include/linux/mm.h:1556:
+extern void mm_update_next_owner(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#676: FILE: include/linux/mm.h:1557:
+extern void mm_init_owner(struct mm_struct *mm, struct task_struct *p);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#695: FILE: include/linux/mm_types.h:314:
 };
+extern struct mm_struct init_mm;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001361.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 17 checks, 669 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001361.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
