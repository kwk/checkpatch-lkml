WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git kmemcheck-for-linus

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#324: FILE: MAINTAINERS:2571:
+P:	Vegard Nossum
+M:	vegardno@ifi.uio.no

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#362: FILE: arch/x86/Kconfig.debug:311:
+choice
+	prompt "kmemcheck: default mode at boot"
+	depends on KMEMCHECK
+	default KMEMCHECK_ONESHOT_BY_DEFAULT
+	help
+	  This option controls the default behaviour of kmemcheck when the
+	  kernel boots and no kmemcheck= parameter is given.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#370: FILE: arch/x86/Kconfig.debug:319:
+config KMEMCHECK_DISABLED_BY_DEFAULT
+	bool "disabled"
+	depends on KMEMCHECK
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#374: FILE: arch/x86/Kconfig.debug:323:
+config KMEMCHECK_ENABLED_BY_DEFAULT
+	bool "enabled"
+	depends on KMEMCHECK
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#378: FILE: arch/x86/Kconfig.debug:327:
+config KMEMCHECK_ONESHOT_BY_DEFAULT
+	bool "one-shot"
+	depends on KMEMCHECK
+	help
+	  In one-shot mode, only the first error detected is reported before
+	  kmemcheck is disabled.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#420: FILE: arch/x86/Kconfig.debug:369:
+config KMEMCHECK_BITOPS_OK
+	bool "kmemcheck: allow bit-field manipulation"
+	depends on KMEMCHECK
+	default n
+	help
+	  This option silences warnings that would be generated for bit-field
+	  accesses where not all the bits are initialized at the same time.
+	  This may also hide some real bugs.
+

ERROR:SPACING: space required before the open parenthesis '('
#673: FILE: arch/x86/mm/fault.c:609:
+	if(kmemcheck_active(regs))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#744: FILE: arch/x86/mm/kmemcheck/error.c:1:
+#include <linux/interrupt.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#761: FILE: arch/x86/mm/kmemcheck/error.c:18:
+#define SHADOW_COPY_SIZE (1 << CONFIG_KMEMCHECK_SHADOW_COPY_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: arch/x86/mm/kmemcheck/error.c:91:
+void kmemcheck_error_save(enum kmemcheck_shadow state,
+	unsigned long address, unsigned int size, struct pt_regs *regs)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#870: FILE: arch/x86/mm/kmemcheck/error.c:127:
+	BUG_ON(!shadow_copy);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#875: FILE: arch/x86/mm/kmemcheck/error.c:132:
+	memory_copy = (void *) (address & ~(SHADOW_COPY_SIZE - 1));

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#908: FILE: arch/x86/mm/kmemcheck/error.c:165:
+	static const char *desc[] = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#931: FILE: arch/x86/mm/kmemcheck/error.c:188:
+		printk(KERN_ERR  "WARNING: kmemcheck: Caught %d-bit read "

WARNING:SPLIT_STRING: quoted string split across lines
#932: FILE: arch/x86/mm/kmemcheck/error.c:189:
+		printk(KERN_ERR  "WARNING: kmemcheck: Caught %d-bit read "
+			"from %s memory (%p)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#935: FILE: arch/x86/mm/kmemcheck/error.c:192:
+			(void *) e->address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#937: FILE: arch/x86/mm/kmemcheck/error.c:194:
+		printk(KERN_INFO);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#939: FILE: arch/x86/mm/kmemcheck/error.c:196:
+			printk("%02x", e->memory_copy[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#940: FILE: arch/x86/mm/kmemcheck/error.c:197:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#942: FILE: arch/x86/mm/kmemcheck/error.c:199:
+		printk(KERN_INFO);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#945: FILE: arch/x86/mm/kmemcheck/error.c:202:
+				printk(" %c", short_desc[e->shadow_copy[i]]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#947: FILE: arch/x86/mm/kmemcheck/error.c:204:
+				printk(" ?");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#949: FILE: arch/x86/mm/kmemcheck/error.c:206:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#950: FILE: arch/x86/mm/kmemcheck/error.c:207:
+		printk(KERN_INFO "%*c\n", 2 + 2

CHECK:SPACING: No space is necessary after a cast
#951: FILE: arch/x86/mm/kmemcheck/error.c:208:
+			* (int) (e->address & (SHADOW_COPY_SIZE - 1)), '^');

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#954: FILE: arch/x86/mm/kmemcheck/error.c:211:
+		printk(KERN_EMERG "ERROR: kmemcheck: Fatal error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#968: FILE: arch/x86/mm/kmemcheck/error.c:225:
+		printk(KERN_WARNING "kmemcheck: Lost %d error reports because "

WARNING:SPLIT_STRING: quoted string split across lines
#969: FILE: arch/x86/mm/kmemcheck/error.c:226:
+		printk(KERN_WARNING "kmemcheck: Lost %d error reports because "
+			"the queue was too small\n", error_missed_count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#979: FILE: arch/x86/mm/kmemcheck/error.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__ERROR_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: arch/x86/mm/kmemcheck/error.h:9:
+void kmemcheck_error_save(enum kmemcheck_shadow state,
+	unsigned long address, unsigned int size, struct pt_regs *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1000: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:1:
+/**

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1023: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:24:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1025: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:26:
+#include <asm/pgtable.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1035: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:36:
+	printk(KERN_INFO "kmemcheck: \"Bugs, beware!\"\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1043: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:44:
+		printk(KERN_INFO

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1051: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:52:
+int kmemcheck_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:NAKED_SSCANF: unchecked sscanf return value
#1070: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:71:
+	sscanf(str, "%d", &kmemcheck_enabled);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1070: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:71:
+	sscanf(str, "%d", &kmemcheck_enabled);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1119: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:120:
+	const uint8_t *rep;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1122: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:123:
+	const uint8_t *rex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1125: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:126:
+	const uint8_t *insn;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1147: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:148:
+	BUG_ON(data->n_addrs >= ARRAY_SIZE(data->addr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1183: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:184:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1225: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:226:
+	BUG_ON(!irqs_disabled());

CHECK:SPACING: No space is necessary after a cast
#1245: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:246:
+		regs->ip = (unsigned long) data->rep;

CHECK:SPACING: No space is necessary after a cast
#1276: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:277:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1278: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:279:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1279: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:280:
+		BUG_ON(level != PG_LEVEL_4K);

CHECK:SPACING: No space is necessary after a cast
#1290: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:291:
+	return kmemcheck_pte_lookup((unsigned long) page_address(p));

CHECK:SPACING: No space is necessary after a cast
#1302: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:303:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1304: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:305:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1305: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:306:
+		BUG_ON(level != PG_LEVEL_4K);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:316:
+static void kmemcheck_read_strict(struct pt_regs *regs,
+	unsigned long addr, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1341: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:342:
+static void kmemcheck_read(struct pt_regs *regs,
+	unsigned long addr, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1364: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:365:
+static void kmemcheck_write_strict(struct pt_regs *regs,
+	unsigned long addr, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1377: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:378:
+static void kmemcheck_write(struct pt_regs *regs,
+	unsigned long addr, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1398: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:399:
+static void kmemcheck_copy(struct pt_regs *regs,
+	unsigned long src_addr, unsigned long dst_addr, unsigned int size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1400: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:401:
+	uint8_t shadow[8];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1407: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:408:
+	uint8_t *x;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1411: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:412:
+	BUG_ON(size > sizeof(shadow));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1430: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:431:
+		BUG_ON(n > sizeof(shadow));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1473: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:474:
+		BUG_ON(n > sizeof(shadow));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:514:
+static void kmemcheck_access(struct pt_regs *regs,
+	unsigned long fallback_address, enum kmemcheck_method fallback_method)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1515: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:516:
+	const uint8_t *rep_prefix;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1516: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:517:
+	const uint8_t *rex_prefix;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1517: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:518:
+	const uint8_t *insn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1518: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:519:
+	const uint8_t *insn_primary;

CHECK:SPACING: No space is necessary after a cast
#1532: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:533:
+	insn = (const uint8_t *) regs->ip;

CHECK:SPACING: No space is necessary after a cast
#1560: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:561:
+			BUG_ON(regs->ip != (unsigned long) rep_prefix);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1560: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:561:
+			BUG_ON(regs->ip != (unsigned long) rep_prefix);

CHECK:SPACING: No space is necessary after a cast
#1567: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:568:
+			regs->ip = (unsigned long) data->rep + 1;

CHECK:SPACING: No space is necessary after a cast
#1573: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:574:
+			BUG_ON(regs->ip != (unsigned long) rep_prefix);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1573: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:574:
+			BUG_ON(regs->ip != (unsigned long) rep_prefix);

CHECK:SPACING: No space is necessary after a cast
#1580: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:581:
+			regs->ip = (unsigned long) data->rep + 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1659: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:660:
+bool kmemcheck_fault(struct pt_regs *regs, unsigned long address,
+	unsigned long error_code)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1697: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:698:
+	uint32_t ecx;

CHECK:SPACING: No space is necessary after a cast
#1727: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:728:
+		unsigned long rep = (unsigned long) data->rep;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1728: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:729:
+		unsigned long rep = (unsigned long) data->rep;
+		kmemcheck_hide(regs);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1730: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:731:
+		data->rep = (void *) rep;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1758: FILE: arch/x86/mm/kmemcheck/opcode.c:1:
+#include <linux/types.h>

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1768: FILE: arch/x86/mm/kmemcheck/opcode.c:11:
+		/* Group 2 */
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1769: FILE: arch/x86/mm/kmemcheck/opcode.c:12:
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26
+		|| b == 0x64 || b == 0x65 || b == 0x2e || b == 0x3e

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1771: FILE: arch/x86/mm/kmemcheck/opcode.c:14:
+		/* Group 3 */
+		|| b == 0x66

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1773: FILE: arch/x86/mm/kmemcheck/opcode.c:16:
+		/* Group 4 */
+		|| b == 0x67;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1787: FILE: arch/x86/mm/kmemcheck/opcode.c:30:
+void kmemcheck_opcode_decode(const uint8_t *op,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1788: FILE: arch/x86/mm/kmemcheck/opcode.c:31:
+void kmemcheck_opcode_decode(const uint8_t *op,
+	const uint8_t **rep_prefix, const uint8_t **rex_prefix,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1788: FILE: arch/x86/mm/kmemcheck/opcode.c:31:
+	const uint8_t **rep_prefix, const uint8_t **rex_prefix,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1854: FILE: arch/x86/mm/kmemcheck/opcode.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__OPCODE_H

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1859: FILE: arch/x86/mm/kmemcheck/opcode.h:6:
+void kmemcheck_opcode_decode(const uint8_t *op,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1860: FILE: arch/x86/mm/kmemcheck/opcode.h:7:
+void kmemcheck_opcode_decode(const uint8_t *op,
+	const uint8_t **rep_pfx, const uint8_t **rex_pfx, unsigned int *size);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1860: FILE: arch/x86/mm/kmemcheck/opcode.h:7:
+	const uint8_t **rep_pfx, const uint8_t **rex_pfx, unsigned int *size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1870: FILE: arch/x86/mm/kmemcheck/pte.c:1:
+#include <linux/mm.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1872: FILE: arch/x86/mm/kmemcheck/pte.c:3:
+#include <asm/pgtable.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1898: FILE: arch/x86/mm/kmemcheck/pte.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__PTE_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1903: FILE: arch/x86/mm/kmemcheck/pte.h:6:
+#include <asm/pgtable.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1914: FILE: arch/x86/mm/kmemcheck/shadow.c:1:
+#include <linux/kmemcheck.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1920: FILE: arch/x86/mm/kmemcheck/shadow.c:7:
+#include <asm/pgtable.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1951: FILE: arch/x86/mm/kmemcheck/shadow.c:38:
+static void mark_shadow(void *address, unsigned int n,
+	enum kmemcheck_shadow status)

CHECK:SPACING: No space is necessary after a cast
#1955: FILE: arch/x86/mm/kmemcheck/shadow.c:42:
+	shadow = kmemcheck_shadow_lookup((unsigned long) address);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2004: FILE: arch/x86/mm/kmemcheck/shadow.c:91:
+	uint8_t *x;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2031: FILE: arch/x86/mm/kmemcheck/shadow.c:118:
+	uint8_t *x;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2044: FILE: arch/x86/mm/kmemcheck/shadow.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__SHADOW_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2066: FILE: include/asm-x86/kmemcheck.h:1:
+#ifndef ASM_X86_KMEMCHECK_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2079: FILE: include/asm-x86/kmemcheck.h:14:
+bool kmemcheck_fault(struct pt_regs *regs,
+	unsigned long address, unsigned long error_code);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2096: FILE: include/asm-x86/kmemcheck.h:31:
+static inline bool kmemcheck_fault(struct pt_regs *regs,
+	unsigned long address, unsigned long error_code)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2131: FILE: include/linux/interrupt.h:379:
+extern void __tasklet_hi_schedule_first(struct tasklet_struct *t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2154: FILE: include/linux/kmemcheck.h:1:
+#ifndef LINUX_KMEMCHECK_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2386: FILE: include/linux/stacktrace.h:16:
+extern void save_stack_trace_bp(struct stack_trace *trace, unsigned long bp);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2431: FILE: kernel/fork.c:1457:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_DESTROY_BY_RCU|
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2431: FILE: kernel/fork.c:1457:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_DESTROY_BY_RCU|
 			                             ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#2431: FILE: kernel/fork.c:1457:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_DESTROY_BY_RCU|
 			                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2436: FILE: kernel/fork.c:1461:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2436: FILE: kernel/fork.c:1461:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2440: FILE: kernel/fork.c:1464:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2440: FILE: kernel/fork.c:1464:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2444: FILE: kernel/fork.c:1467:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2444: FILE: kernel/fork.c:1467:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2448: FILE: kernel/fork.c:1470:
+			SLAB_PANIC|SLAB_NOTRACK, NULL);
 			          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2452: FILE: kernel/fork.c:1473:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2452: FILE: kernel/fork.c:1473:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2466: FILE: kernel/softirq.c:379:
+	BUG_ON(!irqs_disabled());

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2473: FILE: kernel/softirq.c:386:
+EXPORT_SYMBOL(__tasklet_hi_schedule_first);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2525: FILE: mm/kmemcheck.c:1:
+#include <linux/mm_types.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2531: FILE: mm/kmemcheck.c:7:
+void kmemcheck_alloc_shadow(struct kmem_cache *s, gfp_t flags, int node,
+			   struct page *page, int order)

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#2545: FILE: mm/kmemcheck.c:21:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2546: FILE: mm/kmemcheck.c:22:
+			printk(KERN_ERR "kmemcheck: failed to allocate "

WARNING:SPLIT_STRING: quoted string split across lines
#2547: FILE: mm/kmemcheck.c:23:
+			printk(KERN_ERR "kmemcheck: failed to allocate "
+				"shadow bitmap\n");

ERROR:SPACING: space required before the open parenthesis '('
#2551: FILE: mm/kmemcheck.c:27:
+	for(i = 0; i < pages; ++i)

ERROR:SPACING: space required before the open parenthesis '('
#2583: FILE: mm/kmemcheck.c:59:
+	for(i = 0; i < pages; ++i)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2820: FILE: mm/slub.c:1095:
+	if (kmemcheck_enabled
+		&& !(s->flags & (SLAB_NOTRACK | DEBUG_DEFAULT_FLAGS)))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2821: FILE: mm/slub.c:1096:
+	if (kmemcheck_enabled
+		&& !(s->flags & (SLAB_NOTRACK | DEBUG_DEFAULT_FLAGS)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2860: FILE: mm/slub.c:2592:
+			SLAB_CACHE_DMA|SLAB_NOTRACK|__SYSFS_ADD_DEFERRED,
 			              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2860: FILE: mm/slub.c:2592:
+			SLAB_CACHE_DMA|SLAB_NOTRACK|__SYSFS_ADD_DEFERRED,
 			                           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190094.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 56 warnings, 73 checks, 2436 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190094.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
