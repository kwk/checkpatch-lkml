CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: arch/x86/include/asm/ds.h:64:
+extern struct bts_tracer *ds_request_bts(struct task_struct *task,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: arch/x86/include/asm/ds.h:67:
+extern struct pebs_tracer *ds_request_pebs(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: arch/x86/include/asm/ds.h:81:
+extern int ds_release_bts(struct bts_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: arch/x86/include/asm/ds.h:82:
+extern int ds_release_pebs(struct pebs_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: arch/x86/include/asm/ds.h:93:
+extern int ds_get_bts_index(struct bts_tracer *tracer, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: arch/x86/include/asm/ds.h:94:
+extern int ds_get_pebs_index(struct pebs_tracer *tracer, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: arch/x86/include/asm/ds.h:105:
+extern int ds_get_bts_end(struct bts_tracer *tracer, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: arch/x86/include/asm/ds.h:106:
+extern int ds_get_pebs_end(struct pebs_tracer *tracer, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: arch/x86/include/asm/ds.h:121:
+extern int ds_access_bts(struct bts_tracer *tracer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: arch/x86/include/asm/ds.h:123:
+extern int ds_access_pebs(struct pebs_tracer *tracer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: arch/x86/include/asm/ds.h:147:
+extern int ds_write_bts(struct bts_tracer *tracer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: arch/x86/include/asm/ds.h:149:
+extern int ds_write_pebs(struct pebs_tracer *tracer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: arch/x86/include/asm/ds.h:159:
+extern int ds_reset_bts(struct bts_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: arch/x86/include/asm/ds.h:160:
+extern int ds_reset_pebs(struct pebs_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: arch/x86/include/asm/ds.h:170:
+extern int ds_clear_bts(struct bts_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: arch/x86/include/asm/ds.h:171:
+extern int ds_clear_pebs(struct pebs_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: arch/x86/include/asm/ds.h:181:
+extern int ds_get_pebs_reset(struct pebs_tracer *tracer, u64 *value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: arch/x86/include/asm/ds.h:191:
+extern int ds_set_pebs_reset(struct pebs_tracer *tracer, u64 value);

CHECK:SPACING: No space is necessary after a cast
#482: FILE: arch/x86/kernel/ptrace.c:1118:
+			BUG_ON(size != (int) size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: arch/x86/kernel/ptrace.c:1118:
+			BUG_ON(size != (int) size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#483: FILE: arch/x86/kernel/ptrace.c:1119:
+			ret = (int) size;

CHECK:BIT_MACRO: Prefer using the BIT macro
#551: FILE: arch/x86/kernel/ds.c:140:
+#define DS_ALIGNMENT (1 << 3)	/* BTS and PEBS buffer alignment */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1024: FILE: arch/x86/kernel/ds.c:507:
+		BUG_ON(tracer->context->owner[qual] != tracer);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1456: FILE: arch/x86/kernel/ds.c:839:
+	printk(KERN_INFO "DS available\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1458: FILE: arch/x86/kernel/ds.c:841:
+	BUG_ON(MAX_SIZEOF_DS < ds_cfg.sizeof_ds);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1458: FILE: arch/x86/kernel/ds.c:841:
+	BUG_ON(MAX_SIZEOF_DS < ds_cfg.sizeof_ds);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 21 checks, 1373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
