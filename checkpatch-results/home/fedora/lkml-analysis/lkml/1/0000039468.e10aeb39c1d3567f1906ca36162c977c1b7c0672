WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
This patch added verification for userspace memory integrity after S3 resume.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/percpu.h> instead of <asm/percpu.h>
#116: FILE: arch/x86/kernel/tboot.c:44:
+#include <asm/percpu.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: arch/x86/kernel/tboot.c:182:
+	BUG_ON((new_stack != NULL) || (new_stack_ptr != NULL));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_stack"
#129: FILE: arch/x86/kernel/tboot.c:182:
+	BUG_ON((new_stack != NULL) || (new_stack_ptr != NULL));

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_stack_ptr"
#129: FILE: arch/x86/kernel/tboot.c:182:
+	BUG_ON((new_stack != NULL) || (new_stack_ptr != NULL));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: arch/x86/kernel/tboot.c:195:
+	BUG_ON(new_stack == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_stack"
#142: FILE: arch/x86/kernel/tboot.c:195:
+	BUG_ON(new_stack == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#151: FILE: arch/x86/kernel/tboot.c:204:
+	BUG_ON((new_stack == NULL) || (new_stack_ptr == NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_stack"
#151: FILE: arch/x86/kernel/tboot.c:204:
+	BUG_ON((new_stack == NULL) || (new_stack_ptr == NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_stack_ptr"
#151: FILE: arch/x86/kernel/tboot.c:204:
+	BUG_ON((new_stack == NULL) || (new_stack_ptr == NULL));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#171: FILE: arch/x86/kernel/tboot.c:224:
+static int tboot_gen_mem_integrity(const uint8_t key[], vmac_t *mac)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#178: FILE: arch/x86/kernel/tboot.c:231:
+	uint64_t paddr, rstart, rend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#180: FILE: arch/x86/kernel/tboot.c:233:
+	uint8_t zeroed_key[VMAC_KEY_LEN];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#209: FILE: arch/x86/kernel/tboot.c:262:
+			i++, pfn = pgdat->node_start_pfn + i) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rend <= paddr'
#220: FILE: arch/x86/kernel/tboot.c:273:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#221: FILE: arch/x86/kernel/tboot.c:274:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

CHECK:BRACES: Unbalanced braces around else statement
#237: FILE: arch/x86/kernel/tboot.c:290:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: arch/x86/kernel/tboot.c:367:
+		add_mac_region(virt_to_phys(new_stack),
+				IRQ_STACK_SIZE); /* > 4G */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: arch/x86/kernel/tboot.c:371:
+		add_mac_region(virt_to_phys(current_thread_info()),
+				THREAD_SIZE); /* < 4G */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: arch/x86/kernel/tboot.c:486:
+		pr_debug("tboot: memory integrity %llx -> %llx\n",
+				mem_mac, mac);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#334: FILE: arch/x86/kernel/tboot.c:497:
+extern void do_suspend_lowlevel(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: braces {} should be used on all arms of this statement
#352: FILE: arch/x86/kernel/tboot.c:515:
+	if (!ret) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#356: FILE: arch/x86/kernel/tboot.c:519:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: include/linux/tboot.h:150:
+extern void tboot_do_suspend_lowlevel(void);

WARNING:BAD_SIGN_OFF: Duplicate signature
#450: 
Signed-off-by: Shane Wang <shane.wang@intel.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Duplicate signature
#451: 
Signed-off-by: Joseph Cihula <joseph.cihula@intel.com>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/percpu.h> instead of <asm/percpu.h>
#508: FILE: arch/x86/kernel/tboot.c:44:
+#include <asm/percpu.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#521: FILE: arch/x86/kernel/tboot.c:182:
+	BUG_ON((new_stack != NULL) || (new_stack_ptr != NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_stack"
#521: FILE: arch/x86/kernel/tboot.c:182:
+	BUG_ON((new_stack != NULL) || (new_stack_ptr != NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_stack_ptr"
#521: FILE: arch/x86/kernel/tboot.c:182:
+	BUG_ON((new_stack != NULL) || (new_stack_ptr != NULL));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#534: FILE: arch/x86/kernel/tboot.c:195:
+	BUG_ON(new_stack == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_stack"
#534: FILE: arch/x86/kernel/tboot.c:195:
+	BUG_ON(new_stack == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: arch/x86/kernel/tboot.c:204:
+	BUG_ON((new_stack == NULL) || (new_stack_ptr == NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_stack"
#543: FILE: arch/x86/kernel/tboot.c:204:
+	BUG_ON((new_stack == NULL) || (new_stack_ptr == NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_stack_ptr"
#543: FILE: arch/x86/kernel/tboot.c:204:
+	BUG_ON((new_stack == NULL) || (new_stack_ptr == NULL));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#563: FILE: arch/x86/kernel/tboot.c:224:
+static int tboot_gen_mem_integrity(const uint8_t key[], vmac_t *mac)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#570: FILE: arch/x86/kernel/tboot.c:231:
+	uint64_t paddr, rstart, rend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#572: FILE: arch/x86/kernel/tboot.c:233:
+	uint8_t zeroed_key[VMAC_KEY_LEN];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#601: FILE: arch/x86/kernel/tboot.c:262:
+			i++, pfn = pgdat->node_start_pfn + i) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rend <= paddr'
#612: FILE: arch/x86/kernel/tboot.c:273:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#613: FILE: arch/x86/kernel/tboot.c:274:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

CHECK:BRACES: Unbalanced braces around else statement
#629: FILE: arch/x86/kernel/tboot.c:290:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: arch/x86/kernel/tboot.c:367:
+		add_mac_region(virt_to_phys(new_stack),
+				IRQ_STACK_SIZE); /* > 4G */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: arch/x86/kernel/tboot.c:371:
+		add_mac_region(virt_to_phys(current_thread_info()),
+				THREAD_SIZE); /* < 4G */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: arch/x86/kernel/tboot.c:486:
+		pr_debug("tboot: memory integrity %llx -> %llx\n",
+				mem_mac, mac);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#726: FILE: arch/x86/kernel/tboot.c:497:
+extern void do_suspend_lowlevel(void);

CHECK:BRACES: braces {} should be used on all arms of this statement
#744: FILE: arch/x86/kernel/tboot.c:515:
+	if (!ret) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#748: FILE: arch/x86/kernel/tboot.c:519:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#781: FILE: include/linux/mm.h:1266:
 }
+#if defined(CONFIG_HIBERNATION) || defined(CONFIG_INTEL_TXT)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#792: FILE: include/linux/mm.h:1275:
 }
+#if defined(CONFIG_HIBERNATION) || defined(CONFIG_INTEL_TXT)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#807: FILE: include/linux/tboot.h:150:
+extern void tboot_do_suspend_lowlevel(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039468.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 40 checks, 696 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039468.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
