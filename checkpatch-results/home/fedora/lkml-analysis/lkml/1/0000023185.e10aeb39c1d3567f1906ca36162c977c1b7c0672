WARNING:TYPO_SPELLING: 'excution' may be misspelled - perhaps 'execution'?
#37: 
excution on async_wq.  async_call_ordered() schedules ordered excution
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'excution' may be misspelled - perhaps 'execution'?
#37: 
excution on async_wq.  async_call_ordered() schedules ordered excution
                                                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'excecuted' may be misspelled - perhaps 'executed'?
#39: 
are guaranteed to be excecuted only after all async excutions
                     ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/async.h:31:
+extern bool async_call(async_func_t func, void *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/linux/async.h:32:
+extern bool async_call_ordered(async_func_t func, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/async.h:33:
+extern void async_barrier(void);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#149: FILE: kernel/async.c:415:
+		printk("calling  %pF @ %i\n",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#149: FILE: kernel/async.c:415:
+		printk("calling  %pF @ %i\n",
+		       ent->func, task_pid_nr(current));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#162: FILE: kernel/async.c:428:
+		printk("initcall %pF returned 0 after %lld usecs\n",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#162: FILE: kernel/async.c:428:
+		printk("initcall %pF returned 0 after %lld usecs\n",
+		       ent->func, (long long)ktime_to_ns(delta) >> 10);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ent)...) over kzalloc(sizeof(struct async_ent)...)
#171: FILE: kernel/async.c:437:
+	ent = kzalloc(sizeof(struct async_ent), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'excution' may be misspelled - perhaps 'execution'?
#224: FILE: kernel/async.c:490:
+ * Schedule @func(data) for ordered asynchronous excution.  It will be
                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#225: FILE: kernel/async.c:491:
+ * executed only after all async functions scheduled upto this point
                                                      ^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#254: FILE: kernel/async.c:520:
+		printk("async_waiting @ %i\n", task_pid_nr(current));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#264: FILE: kernel/async.c:530:
+		printk("async_continuing @ %i after %lli usec\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#275: FILE: kernel/async.c:541:
+	BUG_ON(!async_wq || !async_ordered_wq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 4 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
