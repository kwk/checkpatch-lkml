WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#68: FILE: drivers/spi/Kconfig:218:
+config SPI_SH_MSIOF
+	tristate "SuperH MSIOF SPI controller"
+	depends on SUPERH && HAVE_CLK
+	select SPI_BITBANG
+	help
+	  SPI driver for SuperH MSIOF blocks.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#91: FILE: drivers/spi/spi.c:17:
  * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#92: FILE: drivers/spi/spi.c:18:
  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: drivers/spi/spi_sh_msiof.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#162: FILE: drivers/spi/spi_sh_msiof.c:62:
+#define CTR_TSCKE (1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#163: FILE: drivers/spi/spi_sh_msiof.c:63:
+#define CTR_TFSE  (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#164: FILE: drivers/spi/spi_sh_msiof.c:64:
+#define CTR_TXE   (1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#165: FILE: drivers/spi/spi_sh_msiof.c:65:
+#define CTR_RXE   (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#167: FILE: drivers/spi/spi_sh_msiof.c:67:
+#define STR_TEOF  (1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#168: FILE: drivers/spi/spi_sh_msiof.c:68:
+#define STR_REOF  (1 << 7)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#485: FILE: drivers/spi/spi_sh_msiof.c:385:
+	gpio_set_value((unsigned)spi->controller_data, value);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sh_msiof_spi_priv *' should also have an identifier name
#554: FILE: drivers/spi/spi_sh_msiof.c:454:
+	void (*tx_fifo)(struct sh_msiof_spi_priv *, const void *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#554: FILE: drivers/spi/spi_sh_msiof.c:454:
+	void (*tx_fifo)(struct sh_msiof_spi_priv *, const void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#554: FILE: drivers/spi/spi_sh_msiof.c:454:
+	void (*tx_fifo)(struct sh_msiof_spi_priv *, const void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#554: FILE: drivers/spi/spi_sh_msiof.c:454:
+	void (*tx_fifo)(struct sh_msiof_spi_priv *, const void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sh_msiof_spi_priv *' should also have an identifier name
#555: FILE: drivers/spi/spi_sh_msiof.c:455:
+	void (*rx_fifo)(struct sh_msiof_spi_priv *, void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#555: FILE: drivers/spi/spi_sh_msiof.c:455:
+	void (*rx_fifo)(struct sh_msiof_spi_priv *, void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#555: FILE: drivers/spi/spi_sh_msiof.c:455:
+	void (*rx_fifo)(struct sh_msiof_spi_priv *, void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#555: FILE: drivers/spi/spi_sh_msiof.c:455:
+	void (*rx_fifo)(struct sh_msiof_spi_priv *, void *, int, int);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#613: FILE: drivers/spi/spi_sh_msiof.c:513:
+static u32 sh_msiof_spi_txrx_word(struct spi_device *spi, unsigned nsecs,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#616: FILE: drivers/spi/spi_sh_msiof.c:516:
+	BUG_ON(1); /* unused but needed by bitbang code */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!master"
#630: FILE: drivers/spi/spi_sh_msiof.c:530:
+	if (master == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct dev_pm_ops should normally be const
#745: FILE: drivers/spi/spi_sh_msiof.c:645:
+static struct dev_pm_ops sh_msiof_spi_dev_pm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#779: FILE: include/linux/spi/sh_msiof.h:1:
+#ifndef __SPI_SH_MSIOF_H__

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000043908.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 7 checks, 712 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000043908.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
