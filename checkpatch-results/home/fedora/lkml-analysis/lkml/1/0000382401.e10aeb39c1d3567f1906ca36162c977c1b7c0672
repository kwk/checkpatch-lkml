WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#57: FILE: fs/ext4/dir.c:107:
+	unsigned tail = sb->s_blocksize;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#79: FILE: fs/ext4/dir.c:196:
 		while (!error && filp->f_pos < inode->i_size
+		       && offset < tail) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#99: FILE: fs/ext4/namei.c:265:
+	unsigned tail = size;

CHECK:SPACING: No space is necessary after a cast
#106: FILE: fs/ext4/namei.c:271:
+	while ((char *) de < base + tail)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: fs/ext4/namei.c:684:
+	unsigned tail = size;

CHECK:SPACING: No space is necessary after a cast
#120: FILE: fs/ext4/namei.c:689:
+	while ((char *) de < base + tail)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#128: FILE: fs/ext4/namei.c:784:
+	unsigned tail = dir->i_sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#132: FILE: fs/ext4/namei.c:787:
+	if (tail > EXT4_DIR_MAX_REC_LEN) {
+		tail = EXT4_DIR_MAX_REC_LEN;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#156: FILE: fs/ext4/namei.c:1197:
+		de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#157: FILE: fs/ext4/namei.c:1198:
+		de2->rec_len = cpu_to_le16(data2 + blocksize - (char *) de2);

CHECK:SPACING: No space is necessary after a cast
#160: FILE: fs/ext4/namei.c:1201:
+							(char *) de);

CHECK:SPACING: No space is necessary after a cast
#162: FILE: fs/ext4/namei.c:1203:
+							(char *) de2);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: fs/ext4/namei.c:1259:
+	unsigned        tail = dir->i_sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#173: FILE: fs/ext4/namei.c:1261:
+	if (tail > EXT4_DIR_MAX_REC_LEN) {
+		tail = EXT4_DIR_MAX_REC_LEN;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#189: FILE: fs/ext4/namei.c:1381:
+	if (blocksize < EXT4_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#190: FILE: fs/ext4/namei.c:1382:
+		len = ((char *) root) + blocksize - (char *) de;

CHECK:SPACING: No space is necessary after a cast
#192: FILE: fs/ext4/namei.c:1384:
+		len = ((char *) root) + EXT4_DIR_MAX_REC_LEN - (char *) de;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#200: FILE: fs/ext4/namei.c:1391:
+	if (blocksize < EXT4_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#201: FILE: fs/ext4/namei.c:1392:
+		de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#203: FILE: fs/ext4/namei.c:1394:
+		de->rec_len = cpu_to_le16(data1 + EXT4_DIR_MAX_REC_LEN - (char *) de);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#213: FILE: fs/ext4/namei.c:1485:
+	if (blocksize < EXT4_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#239: FILE: fs/ext4/namei.c:1646:
+	unsigned tail = bh->b_size;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#257: FILE: fs/ext4/namei.c:1843:
+	if (inode->i_sb->s_blocksize < EXT4_DIR_MAX_REC_LEN) {
[...]
+	} else  {   
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#258: FILE: fs/ext4/namei.c:1844:
+		de->rec_len = cpu_to_le16(inode->i_sb->s_blocksize-EXT4_DIR_REC_LEN(1));
 		                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: fs/ext4/namei.c:1845:
+^I} else  {   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#260: FILE: fs/ext4/namei.c:1846:
+		de->rec_len = cpu_to_le16(EXT4_DIR_MAX_REC_LEN-EXT4_DIR_REC_LEN(1));
 		                                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#270: FILE: fs/ext4/namei.c:1882:
+	struct super_block * sb = inode->i_sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#272: FILE: fs/ext4/namei.c:1884:
+	unsigned tail = sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#282: FILE: fs/ext4/namei.c:1912:
+	if (offset == EXT4_DIR_MAX_REC_LEN) {
+		offset += sb->s_blocksize - EXT4_DIR_MAX_REC_LEN;
+	}

CHECK:SPACING: No space is necessary after a cast
#293: FILE: fs/ext4/namei.c:1922:
+			(void *) de >= (void *) (bh->b_data + tail)) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offs' - possible side-effects?
#318: FILE: include/linux/ext4_fs.h:792:
+#define EXT4_DIR_ADJUST_TAIL_OFFS(offs, bsize) \
+	((((offs) & ((bsize) -1)) == EXT4_DIR_MAX_REC_LEN) ? \
+	((offs) + (bsize) - EXT4_DIR_MAX_REC_LEN):(offs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bsize' - possible side-effects?
#318: FILE: include/linux/ext4_fs.h:792:
+#define EXT4_DIR_ADJUST_TAIL_OFFS(offs, bsize) \
+	((((offs) & ((bsize) -1)) == EXT4_DIR_MAX_REC_LEN) ? \
+	((offs) + (bsize) - EXT4_DIR_MAX_REC_LEN):(offs))

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#319: FILE: include/linux/ext4_fs.h:793:
+	((((offs) & ((bsize) -1)) == EXT4_DIR_MAX_REC_LEN) ? \
 	                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#320: FILE: include/linux/ext4_fs.h:794:
+	((offs) + (bsize) - EXT4_DIR_MAX_REC_LEN):(offs))
 	                                         ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 18 checks, 250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
