CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/cgroup.h:37:
+extern void cgroup_fork_failed(struct task_struct *p, int run_callbacks);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#129: FILE: kernel/cgroup.c:267:
+ * it needs to be holding the cgroup_mutex to begin with. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: kernel/cgroup.c:1314:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: kernel/cgroup.c:1345:
+		struct cgroup_subsys_state *template[CGROUP_SUBSYS_COUNT];
+		read_lock(&css_set_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: kernel/cgroup.c:1347:
+		BUG_ON(!newcg);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: kernel/cgroup.c:1461:
+	struct cgroup_subsys_state *template[CGROUP_SUBSYS_COUNT];
+	read_lock(&css_set_lock);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cg_entry)...) over kmalloc(sizeof(struct cg_list_entry)...)
#322: FILE: kernel/cgroup.c:1496:
+	cg_entry = kmalloc(sizeof(struct cg_list_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: kernel/cgroup.c:1547:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: kernel/cgroup.c:1625:
+			BUG_ON(retval != -ESRCH);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: kernel/cgroup.c:1642:
+		BUG_ON(retval != 0 && retval != -ESRCH);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: kernel/cgroup.c:1646:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: kernel/cgroup.c:1648:
+^I * step 3: attach whole threadgroup to each subsystem $

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: kernel/cgroup.c:1683:
+^I^I^I      ^I^I struct task_struct *))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#528: FILE: kernel/cgroup.c:1683:
+^I^I^I      ^I^I struct task_struct *))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: kernel/cgroup.c:1683:
+			      int attach(struct cgroup *,
+			      		 struct task_struct *))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#602: FILE: kernel/cgroup.c:2901:
+		.mode = S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093089.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 8 warnings, 3 checks, 575 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093089.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
