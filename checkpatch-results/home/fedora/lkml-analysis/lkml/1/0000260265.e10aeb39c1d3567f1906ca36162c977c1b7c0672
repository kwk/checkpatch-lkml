WARNING:BAD_SIGN_OFF: Use a single space after To:
#47: 
to:

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: ''
#47: 
to:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: arch/x86/kernel/traps_32.c:138:
+static inline int valid_stack_ptr(struct thread_info *tinfo,
+			void *p, unsigned int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: arch/x86/kernel/traps_32.c:141:
+	void *t = tinfo;
+	return p > t && p <= t + THREAD_SIZE - size;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#224: FILE: arch/x86/kernel/traps_32.c:413:
+	sp = (unsigned long) (&regs->sp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#230: FILE: arch/x86/kernel/traps_32.c:419:
+	printk(KERN_EMERG "EIP: [<%08lx>] ", regs->ip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: arch/x86/kernel/traps_32.c:421:
+	printk(" SS:ESP %04x:%08lx\n", ss, sp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: arch/x86/kernel/traps_32.c:685:
+	if (notify_die(DIE_GPF, "general protection fault", regs,
 				error_code, 13, SIGSEGV) == NOTIFY_STOP)

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#478: FILE: arch/x86/kernel/traps_64.c:41:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#480: FILE: arch/x86/kernel/traps_64.c:43:
+#include <asm/atomic.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#487: FILE: arch/x86/kernel/traps_64.c:48:
+#include <asm/nmi.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#489: FILE: arch/x86/kernel/traps_64.c:50:
+#include <asm/io.h>

CHECK:SPACING: No space is necessary after a cast
#590: FILE: arch/x86/kernel/traps_64.c:290:
+			bp = *(unsigned long *) task->thread.sp;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: arch/x86/kernel/traps_64.c:395:
+_show_stack(struct task_struct *task, struct pt_regs *regs,
+		unsigned long *sp, unsigned long bp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: arch/x86/kernel/traps_64.c:587:
+	if (notify_die(DIE_OOPS, str, regs, err,
+			current->thread.trap_no, SIGSEGV) == NOTIFY_STOP)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#759: FILE: arch/x86/kernel/traps_64.c:641:
+do_trap(int trapnr, int signr, char *str, struct pt_regs * regs,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: arch/x86/kernel/traps_64.c:662:
+	if (show_unhandled_signals && unhandled_signal(tsk, signr) &&
+			printk_ratelimit()) {

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#808: FILE: arch/x86/kernel/traps_64.c:662:
+			printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#809: FILE: arch/x86/kernel/traps_64.c:663:
+		printk(KERN_INFO

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#814: FILE: arch/x86/kernel/traps_64.c:668:
+		printk("\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#837: FILE: arch/x86/kernel/traps_64.c:686:
+#define DO_ERROR(trapnr, signr, str, name) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'trapnr' - possible side-effects?
#837: FILE: arch/x86/kernel/traps_64.c:686:
+#define DO_ERROR(trapnr, signr, str, name) 				\
+asmlinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+						== NOTIFY_STOP) 	\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, NULL);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'signr' - possible side-effects?
#837: FILE: arch/x86/kernel/traps_64.c:686:
+#define DO_ERROR(trapnr, signr, str, name) 				\
+asmlinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+						== NOTIFY_STOP) 	\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, NULL);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#837: FILE: arch/x86/kernel/traps_64.c:686:
+#define DO_ERROR(trapnr, signr, str, name) 				\
+asmlinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+						== NOTIFY_STOP) 	\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, NULL);		\
 }

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#841: FILE: arch/x86/kernel/traps_64.c:690:
+^I^I^I^I^I^I== NOTIFY_STOP) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'trapnr' - possible side-effects?
#860: FILE: arch/x86/kernel/traps_64.c:696:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	trace_hardirqs_fixup();						\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+						== NOTIFY_STOP)		\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'signr' - possible side-effects?
#860: FILE: arch/x86/kernel/traps_64.c:696:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	trace_hardirqs_fixup();						\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+						== NOTIFY_STOP)		\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#860: FILE: arch/x86/kernel/traps_64.c:696:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	trace_hardirqs_fixup();						\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+						== NOTIFY_STOP)		\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#861: FILE: arch/x86/kernel/traps_64.c:697:
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#923: FILE: arch/x86/kernel/traps_64.c:764:
+	    printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#924: FILE: arch/x86/kernel/traps_64.c:765:
+		printk(KERN_INFO

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#929: FILE: arch/x86/kernel/traps_64.c:770:
+		printk("\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1227: FILE: arch/x86/kernel/traps_64.c:1198:
+ ^Iset_system_gate_ist(3, &int3, DEBUG_STACK); /* int3 can be called from all */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1227: FILE: arch/x86/kernel/traps_64.c:1198:
+ ^Iset_system_gate_ist(3, &int3, DEBUG_STACK); /* int3 can be called from all */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1227: FILE: arch/x86/kernel/traps_64.c:1198:
+ ^Iset_system_gate_ist(3, &int3, DEBUG_STACK); /* int3 can be called from all */$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1279: FILE: arch/x86/kernel/traps_64.c:1246:
+	kstack_depth_to_print = simple_strtoul(s, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260265.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 15 warnings, 17 checks, 1152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260265.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
