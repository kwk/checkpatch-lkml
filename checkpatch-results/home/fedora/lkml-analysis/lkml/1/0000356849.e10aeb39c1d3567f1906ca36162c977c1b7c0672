WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#37: FILE: security/tomoyo/tomoyo.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#38: FILE: security/tomoyo/tomoyo.c:2:
+ * security/tomoyo/tomoyo.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#130: FILE: security/tomoyo/tomoyo.c:94:
+				struct nameidata *nd)
 				                  ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#137: FILE: security/tomoyo/tomoyo.c:101:
+	if (!nd) {
 	     ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#137: FILE: security/tomoyo/tomoyo.c:101:
+	/*
+	if (!nd) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#147: FILE: security/tomoyo/tomoyo.c:111:
+	if (!nd || !nd->path.dentry || !nd->path.mnt)
 	     ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#157: FILE: security/tomoyo/tomoyo.c:121:
+	if ((mask == MAY_EXEC) &&
+	    (TMY_SECURITY->flags & TMY_CHECK_READ_FOR_OPEN_EXEC))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#160: FILE: security/tomoyo/tomoyo.c:124:
+	if ((mask == MAY_EXEC) || (mask == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == 0'
#160: FILE: security/tomoyo/tomoyo.c:124:
+	if ((mask == MAY_EXEC) || (mask == 0))

CHECK:BRACES: braces {} should be used on all arms of this statement
#163: FILE: security/tomoyo/tomoyo.c:127:
+	if (mask == (MAY_READ | MAY_EXEC))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#165: FILE: security/tomoyo/tomoyo.c:129:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: security/tomoyo/tomoyo.c:144:
+	struct vfsmount *mnt = current->last_vfsmount;
+	if (!dentry || !mnt)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: security/tomoyo/tomoyo.c:155:
+	unsigned int ia_valid = iattr->ia_valid;
+	if (ia_valid & ATTR_MODE)

WARNING:LINE_SPACING: Missing a blank line after declarations
#210: FILE: security/tomoyo/tomoyo.c:174:
+	const int err = tmy_capable(TMY_SYS_UNLINK);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#230: FILE: security/tomoyo/tomoyo.c:194:
+	const int err = tmy_capable(TMY_SYS_SYMLINK);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: security/tomoyo/tomoyo.c:205:
+	int err;
+	if (S_ISCHR(mode)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: security/tomoyo/tomoyo.c:238:
+	struct vfsmount *mnt = current->last_vfsmount;
+	if (!old_dentry || !new_dentry || !mnt)

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: security/tomoyo/tomoyo.c:251:
+	const int err = tmy_capable(TMY_SYS_LINK);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: security/tomoyo/tomoyo.c:263:
+	const int err = tmy_capable(TMY_SYS_RENAME);
+	if (err)

CHECK:SPACING: No space is necessary after a cast
#353: FILE: security/tomoyo/tomoyo.c:317:
+	if (sock->ops->getname(sock, (struct sockaddr *) addr, &addr_len, 0))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#356: FILE: security/tomoyo/tomoyo.c:320:
+	switch (((struct sockaddr *) addr)->sa_family) {

CHECK:SPACING: No space is necessary after a cast
#361: FILE: security/tomoyo/tomoyo.c:325:
+		in6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#366: FILE: security/tomoyo/tomoyo.c:330:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#367: FILE: security/tomoyo/tomoyo.c:331:
+		error = tmy_network_listen_acl(0, (u8 *) &in->sin_addr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: security/tomoyo/tomoyo.c:342:
+	int error = 0;
+	if (kern)

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#384: FILE: security/tomoyo/tomoyo.c:348:
+			return tmy_capable(TMY_INET_STREAM_SOCKET_CREATE);
+			break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#387: FILE: security/tomoyo/tomoyo.c:351:
+			return tmy_capable(TMY_USE_INET_DGRAM_SOCKET);
+			break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#390: FILE: security/tomoyo/tomoyo.c:354:
+			return tmy_capable(TMY_USE_INET_RAW_SOCKET);
+			break;

CHECK:SPACING: No space is necessary after a cast
#404: FILE: security/tomoyo/tomoyo.c:368:
+	unsigned int addr_len = (unsigned int) addr_len0;

CHECK:SPACING: No space is necessary after a cast
#429: FILE: security/tomoyo/tomoyo.c:393:
+		in6 = (struct sockaddr_in6 *) addr;

CHECK:BRACES: Unbalanced braces around else statement
#434: FILE: security/tomoyo/tomoyo.c:398:
+		else {

CHECK:SPACING: No space is necessary after a cast
#447: FILE: security/tomoyo/tomoyo.c:411:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#450: FILE: security/tomoyo/tomoyo.c:414:
+							(u8 *) &in->sin_addr,

CHECK:BRACES: Unbalanced braces around else statement
#452: FILE: security/tomoyo/tomoyo.c:416:
+		else {

CHECK:SPACING: No space is necessary after a cast
#456: FILE: security/tomoyo/tomoyo.c:420:
+							(u8 *) &in->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#469: FILE: security/tomoyo/tomoyo.c:433:
+	unsigned int addr_len = (unsigned int) addr_len0;

CHECK:SPACING: No space is necessary after a cast
#488: FILE: security/tomoyo/tomoyo.c:452:
+		in6 = ((struct sockaddr_in6 *) addr);

CHECK:BRACES: Unbalanced braces around else statement
#493: FILE: security/tomoyo/tomoyo.c:457:
+		else {

CHECK:SPACING: No space is necessary after a cast
#506: FILE: security/tomoyo/tomoyo.c:470:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#509: FILE: security/tomoyo/tomoyo.c:473:
+						     (u8 *) &in->sin_addr,

CHECK:BRACES: Unbalanced braces around else statement
#511: FILE: security/tomoyo/tomoyo.c:475:
+		else {

CHECK:SPACING: No space is necessary after a cast
#515: FILE: security/tomoyo/tomoyo.c:479:
+						     (u8 *) &in->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#528: FILE: security/tomoyo/tomoyo.c:492:
+	struct sockaddr *addr = (struct sockaddr *) msg->msg_name;

CHECK:SPACING: No space is necessary after a cast
#547: FILE: security/tomoyo/tomoyo.c:511:
+		in6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#558: FILE: security/tomoyo/tomoyo.c:522:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#560: FILE: security/tomoyo/tomoyo.c:524:
+		error = tmy_network_sendmsg_acl(0, type, (u8 *) &in->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#575: FILE: security/tomoyo/tomoyo.c:539:
+	struct sockaddr *sockaddr = (struct sockaddr *) addr;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newsock->sk->sk_family != PF_INET'
#581: FILE: security/tomoyo/tomoyo.c:545:
+	if ((newsock->sk->sk_family != PF_INET) &&
+	    (newsock->sk->sk_family != PF_INET6))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newsock->sk->sk_family != PF_INET6'
#581: FILE: security/tomoyo/tomoyo.c:545:
+	if ((newsock->sk->sk_family != PF_INET) &&
+	    (newsock->sk->sk_family != PF_INET6))

CHECK:BRACES: braces {} should be used on all arms of this statement
#585: FILE: security/tomoyo/tomoyo.c:549:
+	if (newsock->ops->getname(newsock, sockaddr, &addr_len, 2) == 0) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#591: FILE: security/tomoyo/tomoyo.c:555:
+			in6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#598: FILE: security/tomoyo/tomoyo.c:562:
+			in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#599: FILE: security/tomoyo/tomoyo.c:563:
+			error = tmy_network_accept_acl(0, (u8 *) &in->sin_addr,

CHECK:BRACES: Unbalanced braces around else statement
#603: FILE: security/tomoyo/tomoyo.c:567:
+	} else

CHECK:SPACING: No space is necessary after a cast
#686: FILE: security/tomoyo/tomoyo.c:650:
+						(u8 *) &sin.sin_addr, port);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#690: FILE: security/tomoyo/tomoyo.c:654:
+
+	}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#699: FILE: security/tomoyo/tomoyo.c:663:
+			struct nameidata *nd,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#724: FILE: security/tomoyo/tomoyo.c:688:
+		error = tmy_conceal_mount(nd);
 		                          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#733: FILE: security/tomoyo/tomoyo.c:697:
+	const int err = tmy_capable(TMY_SYS_UMOUNT);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: security/tomoyo/tomoyo.c:710:
+	const int err = tmy_capable(TMY_SYS_PIVOT_ROOT);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#754: FILE: security/tomoyo/tomoyo.c:718:
+	int err = 0;
+	if (cap == CAP_SYS_CHROOT)

WARNING:LINE_SPACING: Missing a blank line after declarations
#773: FILE: security/tomoyo/tomoyo.c:737:
+	const int err = tmy_capable(TMY_SYS_KILL);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#781: FILE: security/tomoyo/tomoyo.c:745:
+	const int err = tmy_capable(TMY_SYS_KILL);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: security/tomoyo/tomoyo.c:753:
+	const int err = tmy_capable(TMY_SYS_KILL);
+	if (err)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#815: FILE: security/tomoyo/tomoyo.c:779:
+^I.socket_listen ^I       = tmy_socket_listen,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#818: FILE: security/tomoyo/tomoyo.c:782:
+^I.socket_bind ^I       = tmy_socket_bind,$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#836: FILE: security/tomoyo/tomoyo.c:800:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#841: FILE: security/tomoyo/tomoyo.c:805:
+	printk(KERN_INFO "TOMOYO Linux initialized\n");

CHECK:SPACING: No space is necessary after a cast
#851: FILE: security/tomoyo/tomoyo.c:815:
+	((struct tmy_security *) init_task.security)->domain = &KERNEL_DOMAIN;

CHECK:SPACING: No space is necessary after a cast
#852: FILE: security/tomoyo/tomoyo.c:816:
+	((struct tmy_security *) init_task.security)->prev_domain = NULL;

CHECK:SPACING: No space is necessary after a cast
#853: FILE: security/tomoyo/tomoyo.c:817:
+	((struct tmy_security *) init_task.security)->flags = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356849.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 29 warnings, 42 checks, 822 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356849.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
