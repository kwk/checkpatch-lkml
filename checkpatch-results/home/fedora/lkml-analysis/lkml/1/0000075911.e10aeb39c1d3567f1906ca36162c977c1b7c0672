CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: kernel/trace/trace.c:350:
+int trace_get_user(struct trace_biter *biter, const char __user *ubuf,
+	size_t cnt, loff_t *ppos)

CHECK:BRACES: braces {} should be used on all arms of this statement
#103: FILE: kernel/trace/trace.c:392:
+		if (biter->idx < biter->size)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#105: FILE: kernel/trace/trace.c:394:
+		else {

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#146: FILE: kernel/trace/trace.h:658:
+ * @idx: user input lenght
                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#152: FILE: kernel/trace/trace.h:664:
+	unsigned	idx;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#153: FILE: kernel/trace/trace.h:665:
+	unsigned	size;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'biter' may be better as '(biter)' to avoid precedence issues
#156: FILE: kernel/trace/trace.h:668:
+#define TRACE_BITER_LOADED(biter) (biter->idx)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'biter' may be better as '(biter)' to avoid precedence issues
#157: FILE: kernel/trace/trace.h:669:
+#define TRACE_BITER_CONT(biter)   (biter->cont)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'biter' - possible side-effects?
#158: FILE: kernel/trace/trace.h:670:
+#define TRACE_BITER_CLEAR(biter) \
+do { \
+	biter->cont = false; \
+	biter->idx = 0; \
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'biter' may be better as '(biter)' to avoid precedence issues
#158: FILE: kernel/trace/trace.h:670:
+#define TRACE_BITER_CLEAR(biter) \
+do { \
+	biter->cont = false; \
+	biter->idx = 0; \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: kernel/trace/trace.h:674:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: kernel/trace/trace.h:699:
+extern int trace_get_user(struct trace_biter *biter, const char __user *ubuf,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: kernel/trace/trace.h:700:
+extern int trace_get_user(struct trace_biter *biter, const char __user *ubuf,
+	size_t cnt, loff_t *ppos);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000075911.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 9 checks, 143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000075911.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
