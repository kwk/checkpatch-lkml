WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#36: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: fs/aufs/xino.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#72: FILE: fs/aufs/xino.c:32:
+#if 0 /* reserved for future use */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#98: FILE: fs/aufs/xino.c:58:
+#if 0 /* reserved for future use */

CHECK:BRACES: braces {} should be used on all arms of this statement
#132: FILE: fs/aufs/xino.c:92:
+	if (!au_test_wkq(current)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#146: FILE: fs/aufs/xino.c:106:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#169: FILE: fs/aufs/xino.c:129:
+	IMustLock(dir);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#176: FILE: fs/aufs/xino.c:136:
+		AuErr("%.*s lookup err %ld\n", AuLNPair(name), PTR_ERR(dentry));

CHECK:CAMELCASE: Avoid CamelCase: <AuLNPair>
#176: FILE: fs/aufs/xino.c:136:
+		AuErr("%.*s lookup err %ld\n", AuLNPair(name), PTR_ERR(dentry));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#181: FILE: fs/aufs/xino.c:141:
+	err = vfs_create(dir, dentry, S_IRUGO | S_IWUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#225: FILE: fs/aufs/xino.c:185:
+	struct mutex *mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#240: FILE: fs/aufs/xino.c:200:
+		au_hin_imtx_lock_nested(ldir->hdir, AuLsc_I_PARENT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#250: FILE: fs/aufs/xino.c:210:
+	if (ldir->hdir)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#252: FILE: fs/aufs/xino.c:212:
+	else {

WARNING:TYPO_SPELLING: 'trucate' may be misspelled - perhaps 'truncate'?
#260: FILE: fs/aufs/xino.c:220:
+/* trucate xino files asynchronously */
    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#341: FILE: fs/aufs/xino.c:301:
+		AuWarn("err b%d, (%d)\n", bindex, err);

CHECK:CAMELCASE: Avoid CamelCase: <AuErr1>
#364: FILE: fs/aufs/xino.c:324:
+		AuErr1("no memory\n");

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr1>
#396: FILE: fs/aufs/xino.c:356:
+		AuIOErr1("too large hi%lu\n", (unsigned long)h_ino);

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#404: FILE: fs/aufs/xino.c:364:
+	AuIOErr("write failed (%zd)\n", sz);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#423: FILE: fs/aufs/xino.c:383:
+	BUILD_BUG_ON(sizeof(long long) != sizeof(au_loff_max)
+		     || ((loff_t)-1) > 0);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#434: FILE: fs/aufs/xino.c:394:
+		if (au_opt_test(mnt_flags, TRUNC_XINO)
+		    && au_test_fs_trunc_xino(br->br_mnt->mnt_sb))

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#452: FILE: fs/aufs/xino.c:412:
+	AuDebugOn(bit < 0 || page_bits <= bit);

CHECK:CAMELCASE: Avoid CamelCase: <MtxMustLock>
#475: FILE: fs/aufs/xino.c:435:
+	MtxMustLock(&sbinfo->si_xib_mtx);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#477: FILE: fs/aufs/xino.c:437:
+	AuDebugOn(pindex > ULONG_MAX / PAGE_SIZE
+		  || !au_opt_test(sbinfo->si_mntflags, XINO));

CHECK:BRACES: braces {} should be used on all arms of this statement
#492: FILE: fs/aufs/xino.c:452:
+	if (i_size_read(xib->f_dentry->d_inode) >= pos + PAGE_SIZE)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: fs/aufs/xino.c:454:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#584: FILE: fs/aufs/xino.c:544:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#592: FILE: fs/aufs/xino.c:552:
+	AuDbg("i%lu\n", (unsigned long)ino);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#661: FILE: fs/aufs/xino.c:621:
+			       S_IRUGO | S_IWUGO);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#775: FILE: fs/aufs/xino.c:735:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'trucate' may be misspelled - perhaps 'truncate'?
#782: FILE: fs/aufs/xino.c:742:
+/* trucate a xino bitmap file */
    ^^^^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#917: FILE: fs/aufs/xino.c:877:
+	return ERR_PTR(-ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#930: FILE: fs/aufs/xino.c:890:
+	return ERR_PTR(-ENOSYS);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1112: FILE: fs/aufs/xino.c:1072:
+			skip = (cur_parent == parent
+				&& dname->len == cur_name->len

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1113: FILE: fs/aufs/xino.c:1073:
+				&& dname->len == cur_name->len
+				&& !memcmp(dname->name, cur_name->name,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1160: FILE: fs/aufs/xino.c:1120:
+		if (au_br_writable(br->br_perm)
+		    && !au_test_fs_bad_xino(br->br_mnt->mnt_sb)) {

CHECK:CAMELCASE: Avoid CamelCase: <Deleted>
#1213: FILE: fs/aufs/xino.c:1173:
+#define Deleted "\\040(deleted)"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157657.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 26 checks, 1181 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157657.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
