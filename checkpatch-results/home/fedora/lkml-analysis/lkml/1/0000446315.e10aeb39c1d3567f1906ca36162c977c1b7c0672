WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
--- ./include/linux/cpu_acct.h.taskstats	2007-04-11 15:07:44.000000000 +0400

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: include/linux/cpu_acct.h:1:
+#ifndef _LINUX_CPU_ACCT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#68: FILE: include/linux/cpu_acct.h:8:
+void container_nr_running_dec(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#70: FILE: include/linux/cpu_acct.h:10:
+void container_nr_unint_inc(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#71: FILE: include/linux/cpu_acct.h:11:
+void container_nr_unint_dec(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#73: FILE: include/linux/cpu_acct.h:13:
+void container_nr_sleeping_inc(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#74: FILE: include/linux/cpu_acct.h:14:
+void container_nr_sleeping_dec(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#76: FILE: include/linux/cpu_acct.h:16:
+void container_nr_stopped_inc(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#77: FILE: include/linux/cpu_acct.h:17:
+void container_nr_stopped_dec(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#79: FILE: include/linux/cpu_acct.h:19:
+void container_nr_iowait_inc(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#80: FILE: include/linux/cpu_acct.h:20:
+void container_nr_iowait_dec(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#82: FILE: include/linux/cpu_acct.h:22:
+void container_add_time_nice(struct task_struct *, cputime64_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime64_t' should also have an identifier name
#82: FILE: include/linux/cpu_acct.h:22:
+void container_add_time_nice(struct task_struct *, cputime64_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#83: FILE: include/linux/cpu_acct.h:23:
+void container_add_time_user(struct task_struct *, cputime64_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime64_t' should also have an identifier name
#83: FILE: include/linux/cpu_acct.h:23:
+void container_add_time_user(struct task_struct *, cputime64_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#84: FILE: include/linux/cpu_acct.h:24:
+void container_add_time_system(struct task_struct *, cputime64_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime64_t' should also have an identifier name
#84: FILE: include/linux/cpu_acct.h:24:
+void container_add_time_system(struct task_struct *, cputime64_t);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#138: FILE: init/Kconfig:256:
+config CPU_ACCT_CONTAINER
+	bool "CPU usage accounting container"
+	select CONTAINERS
+	help
+	  Provides a per-container statistics concerning the numbers of tasks
+	  in various states, system and user times, etc
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: kernel/cpu_acct.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#152: FILE: kernel/cpu_acct.c:2:
+ * kernel/cpu_acct.c - CPU accounting container subsystem

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ca"
#226: FILE: kernel/cpu_acct.c:76:
+	if (ca == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ca->counters"
#230: FILE: kernel/cpu_acct.c:80:
+	if (ca->counters == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: kernel/cpu_acct.c:94:
+static void cpuacct_destroy(struct container_subsys *ss,
+		struct container *cont)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: kernel/cpu_acct.c:104:
+static void cpuacct_attach(struct container_subsys *ss,
+		struct container *cont,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: kernel/cpu_acct.c:161:
+static ssize_t cpuacct_read_nr(struct container *cont, struct cftype *cft,
+		struct file *file, char __user *userbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: kernel/cpu_acct.c:187:
+static ssize_t cpuacct_read_time(struct container *cont, struct cftype *cft,
+		struct file *file, char __user *userbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: kernel/cpu_acct.c:204:
+static int cpuacct_populate(struct container_subsys *ss,
+		struct container *cont)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: kernel/cpu_acct.c:212:
+		strncpy(cft_nr_file[i].name, cft_nr_names[i],
+				MAX_CFTYPE_NAME);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: kernel/cpu_acct.c:223:
+		strncpy(cft_time_file[i].name, cft_time_names[i],
+				MAX_CFTYPE_NAME);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ca"
#403: FILE: kernel/cpu_acct.c:253:
+	if (ca == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ca"
#474: FILE: kernel/cpu_acct.c:324:
+	if (ca == NULL)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446315.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 11 checks, 531 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446315.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
