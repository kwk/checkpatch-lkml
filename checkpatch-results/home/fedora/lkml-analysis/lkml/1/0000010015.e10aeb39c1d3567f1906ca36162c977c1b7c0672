WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#21: 
Subject: [PATCH 09/19] crypto: serpent - Fix checkpatch errors

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#58: FILE: crypto/serpent.c:36:
+#define keyiter(a, b, c, d, i, j) \
+	b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b, 11); k[j] = b;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#58: FILE: crypto/serpent.c:36:
+#define keyiter(a, b, c, d, i, j) \
+	b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b, 11); k[j] = b;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#58: FILE: crypto/serpent.c:36:
+#define keyiter(a, b, c, d, i, j) \
+	b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b, 11); k[j] = b;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#58: FILE: crypto/serpent.c:36:
+#define keyiter(a, b, c, d, i, j) \
+	b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b, 11); k[j] = b;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#58: FILE: crypto/serpent.c:36:
+#define keyiter(a, b, c, d, i, j) \
+	b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b, 11); k[j] = b;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#63: FILE: crypto/serpent.c:39:
+#define loadkeys(x0, x1, x2, x3, i) \
+	x0 = k[i]; x1 = k[i+1]; x2 = k[i+2]; x3 = k[i+3];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#63: FILE: crypto/serpent.c:39:
+#define loadkeys(x0, x1, x2, x3, i) \
+	x0 = k[i]; x1 = k[i+1]; x2 = k[i+2]; x3 = k[i+3];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#63: FILE: crypto/serpent.c:39:
+#define loadkeys(x0, x1, x2, x3, i) \
+	x0 = k[i]; x1 = k[i+1]; x2 = k[i+2]; x3 = k[i+3];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#64: FILE: crypto/serpent.c:40:
+	x0 = k[i]; x1 = k[i+1]; x2 = k[i+2]; x3 = k[i+3];
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#64: FILE: crypto/serpent.c:40:
+	x0 = k[i]; x1 = k[i+1]; x2 = k[i+2]; x3 = k[i+3];
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#64: FILE: crypto/serpent.c:40:
+	x0 = k[i]; x1 = k[i+1]; x2 = k[i+2]; x3 = k[i+3];
 	                                             ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#68: FILE: crypto/serpent.c:42:
+#define storekeys(x0, x1, x2, x3, i) \
+	k[i] = x0; k[i+1] = x1; k[i+2] = x2; k[i+3] = x3;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#68: FILE: crypto/serpent.c:42:
+#define storekeys(x0, x1, x2, x3, i) \
+	k[i] = x0; k[i+1] = x1; k[i+2] = x2; k[i+3] = x3;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#68: FILE: crypto/serpent.c:42:
+#define storekeys(x0, x1, x2, x3, i) \
+	k[i] = x0; k[i+1] = x1; k[i+2] = x2; k[i+3] = x3;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#69: FILE: crypto/serpent.c:43:
+	k[i] = x0; k[i+1] = x1; k[i+2] = x2; k[i+3] = x3;
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#69: FILE: crypto/serpent.c:43:
+	k[i] = x0; k[i+1] = x1; k[i+2] = x2; k[i+3] = x3;
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#69: FILE: crypto/serpent.c:43:
+	k[i] = x0; k[i+1] = x1; k[i+2] = x2; k[i+3] = x3;
 	                                        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#72: FILE: crypto/serpent.c:45:
+#define K(x0, x1, x2, x3, i)				\
 	x3 ^= k[4*(i)+3];        x2 ^= k[4*(i)+2];	\
 	x1 ^= k[4*(i)+1];        x0 ^= k[4*(i)+0];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x0' may be better as '(x0)' to avoid precedence issues
#72: FILE: crypto/serpent.c:45:
+#define K(x0, x1, x2, x3, i)				\
 	x3 ^= k[4*(i)+3];        x2 ^= k[4*(i)+2];	\
 	x1 ^= k[4*(i)+1];        x0 ^= k[4*(i)+0];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x1' may be better as '(x1)' to avoid precedence issues
#72: FILE: crypto/serpent.c:45:
+#define K(x0, x1, x2, x3, i)				\
 	x3 ^= k[4*(i)+3];        x2 ^= k[4*(i)+2];	\
 	x1 ^= k[4*(i)+1];        x0 ^= k[4*(i)+0];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x2' may be better as '(x2)' to avoid precedence issues
#72: FILE: crypto/serpent.c:45:
+#define K(x0, x1, x2, x3, i)				\
 	x3 ^= k[4*(i)+3];        x2 ^= k[4*(i)+2];	\
 	x1 ^= k[4*(i)+1];        x0 ^= k[4*(i)+0];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x3' may be better as '(x3)' to avoid precedence issues
#72: FILE: crypto/serpent.c:45:
+#define K(x0, x1, x2, x3, i)				\
 	x3 ^= k[4*(i)+3];        x2 ^= k[4*(i)+2];	\
 	x1 ^= k[4*(i)+1];        x0 ^= k[4*(i)+0];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#72: FILE: crypto/serpent.c:45:
+#define K(x0, x1, x2, x3, i)				\
 	x3 ^= k[4*(i)+3];        x2 ^= k[4*(i)+2];	\
 	x1 ^= k[4*(i)+1];        x0 ^= k[4*(i)+0];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#72: FILE: crypto/serpent.c:45:
+#define K(x0, x1, x2, x3, i)				\
 	x3 ^= k[4*(i)+3];        x2 ^= k[4*(i)+2];	\
 	x1 ^= k[4*(i)+1];        x0 ^= k[4*(i)+0];

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#77: FILE: crypto/serpent.c:49:
+#define LK(x0, x1, x2, x3, x4, i)			\
 					x0=rol32(x0,13);\
 	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	x3 ^= x2;	x1 ^= x2;			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#77: FILE: crypto/serpent.c:49:
+#define LK(x0, x1, x2, x3, x4, i)			\
 					x0=rol32(x0,13);\
 	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	x3 ^= x2;	x1 ^= x2;			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#77: FILE: crypto/serpent.c:49:
+#define LK(x0, x1, x2, x3, x4, i)			\
 					x0=rol32(x0,13);\
 	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	x3 ^= x2;	x1 ^= x2;			\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x1' may be better as '(x1)' to avoid precedence issues
#77: FILE: crypto/serpent.c:49:
+#define LK(x0, x1, x2, x3, x4, i)			\
 					x0=rol32(x0,13);\
 	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	x3 ^= x2;	x1 ^= x2;			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#77: FILE: crypto/serpent.c:49:
+#define LK(x0, x1, x2, x3, x4, i)			\
 					x0=rol32(x0,13);\
 	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	x3 ^= x2;	x1 ^= x2;			\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x3' may be better as '(x3)' to avoid precedence issues
#77: FILE: crypto/serpent.c:49:
+#define LK(x0, x1, x2, x3, x4, i)			\
 					x0=rol32(x0,13);\
 	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	x3 ^= x2;	x1 ^= x2;			\

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#86: FILE: crypto/serpent.c:57:
+	x1 ^= k[4*i+1];	x0=rol32(x0, 5);x2=rol32(x2,22);\
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#86: FILE: crypto/serpent.c:57:
+	x1 ^= k[4*i+1];	x0=rol32(x0, 5);x2=rol32(x2,22);\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#86: FILE: crypto/serpent.c:57:
+	x1 ^= k[4*i+1];	x0=rol32(x0, 5);x2=rol32(x2,22);\
 	               	  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#86: FILE: crypto/serpent.c:57:
+	x1 ^= k[4*i+1];	x0=rol32(x0, 5);x2=rol32(x2,22);\
 	               	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#86: FILE: crypto/serpent.c:57:
+	x1 ^= k[4*i+1];	x0=rol32(x0, 5);x2=rol32(x2,22);\
 	               	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#86: FILE: crypto/serpent.c:57:
+	x1 ^= k[4*i+1];	x0=rol32(x0, 5);x2=rol32(x2,22);\
 	               	                           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x0' may be better as '(x0)' to avoid precedence issues
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x1' may be better as '(x1)' to avoid precedence issues
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x2' may be better as '(x2)' to avoid precedence issues
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x3' may be better as '(x3)' to avoid precedence issues
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#90: FILE: crypto/serpent.c:60:
+#define KL(x0, x1, x2, x3, x4, i)			\
 	x0 ^= k[4*i+0];	x1 ^= k[4*i+1];	x2 ^= k[4*i+2];	\
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	x4 =  x1;	x2 ^= x3;	x0 ^= x3;	\
 	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#93: FILE: crypto/serpent.c:62:
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#93: FILE: crypto/serpent.c:62:
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#93: FILE: crypto/serpent.c:62:
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	               	  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#93: FILE: crypto/serpent.c:62:
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	               	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#93: FILE: crypto/serpent.c:62:
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	               	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: crypto/serpent.c:62:
+	x3 ^= k[4*i+3];	x0=ror32(x0, 5);x2=ror32(x2,22);\
 	               	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#97: FILE: crypto/serpent.c:65:
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	         	  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#97: FILE: crypto/serpent.c:65:
+	x2 ^= x4;	x3=ror32(x3, 7);x4 = x0 << 3;	\
 	         	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#102: FILE: crypto/serpent.c:69:
+#define S0(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 |= x0;	x0 ^= x4;	x4 ^= x2;	\
 	x4 =~ x4;	x3 ^= x1;	x1 &= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#102: FILE: crypto/serpent.c:69:
+#define S0(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 |= x0;	x0 ^= x4;	x4 ^= x2;	\
 	x4 =~ x4;	x3 ^= x1;	x1 &= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#102: FILE: crypto/serpent.c:69:
+#define S0(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 |= x0;	x0 ^= x4;	x4 ^= x2;	\
 	x4 =~ x4;	x3 ^= x1;	x1 &= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#102: FILE: crypto/serpent.c:69:
+#define S0(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 |= x0;	x0 ^= x4;	x4 ^= x2;	\
 	x4 =~ x4;	x3 ^= x1;	x1 &= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#102: FILE: crypto/serpent.c:69:
+#define S0(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 |= x0;	x0 ^= x4;	x4 ^= x2;	\
 	x4 =~ x4;	x3 ^= x1;	x1 &= x0;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#111: FILE: crypto/serpent.c:78:
+#define S1(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x0;	x0 ^= x3;	x3 =~ x3;	\
 	x4 &= x1;	x0 |= x1;	x3 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#111: FILE: crypto/serpent.c:78:
+#define S1(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x0;	x0 ^= x3;	x3 =~ x3;	\
 	x4 &= x1;	x0 |= x1;	x3 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#111: FILE: crypto/serpent.c:78:
+#define S1(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x0;	x0 ^= x3;	x3 =~ x3;	\
 	x4 &= x1;	x0 |= x1;	x3 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#111: FILE: crypto/serpent.c:78:
+#define S1(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x0;	x0 ^= x3;	x3 =~ x3;	\
 	x4 &= x1;	x0 |= x1;	x3 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#111: FILE: crypto/serpent.c:78:
+#define S1(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x0;	x0 ^= x3;	x3 =~ x3;	\
 	x4 &= x1;	x0 |= x1;	x3 ^= x2;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#120: FILE: crypto/serpent.c:87:
+#define S2(x0, x1, x2, x3, x4)				\
 					x3 =~ x3;	\
 	x1 ^= x0;	x4  = x0;	x0 &= x2;	\
 	x0 ^= x3;	x3 |= x4;	x2 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#120: FILE: crypto/serpent.c:87:
+#define S2(x0, x1, x2, x3, x4)				\
 					x3 =~ x3;	\
 	x1 ^= x0;	x4  = x0;	x0 &= x2;	\
 	x0 ^= x3;	x3 |= x4;	x2 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#120: FILE: crypto/serpent.c:87:
+#define S2(x0, x1, x2, x3, x4)				\
 					x3 =~ x3;	\
 	x1 ^= x0;	x4  = x0;	x0 &= x2;	\
 	x0 ^= x3;	x3 |= x4;	x2 ^= x1;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x1' may be better as '(x1)' to avoid precedence issues
#120: FILE: crypto/serpent.c:87:
+#define S2(x0, x1, x2, x3, x4)				\
 					x3 =~ x3;	\
 	x1 ^= x0;	x4  = x0;	x0 &= x2;	\
 	x0 ^= x3;	x3 |= x4;	x2 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#120: FILE: crypto/serpent.c:87:
+#define S2(x0, x1, x2, x3, x4)				\
 					x3 =~ x3;	\
 	x1 ^= x0;	x4  = x0;	x0 &= x2;	\
 	x0 ^= x3;	x3 |= x4;	x2 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#120: FILE: crypto/serpent.c:87:
+#define S2(x0, x1, x2, x3, x4)				\
 					x3 =~ x3;	\
 	x1 ^= x0;	x4  = x0;	x0 &= x2;	\
 	x0 ^= x3;	x3 |= x4;	x2 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#120: FILE: crypto/serpent.c:87:
+#define S2(x0, x1, x2, x3, x4)				\
 					x3 =~ x3;	\
 	x1 ^= x0;	x4  = x0;	x0 &= x2;	\
 	x0 ^= x3;	x3 |= x4;	x2 ^= x1;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#129: FILE: crypto/serpent.c:96:
+#define S3(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x3;	x3 |= x0;	x4 &= x0;	\
 	x0 ^= x2;	x2 ^= x1;	x1 &= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#129: FILE: crypto/serpent.c:96:
+#define S3(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x3;	x3 |= x0;	x4 &= x0;	\
 	x0 ^= x2;	x2 ^= x1;	x1 &= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#129: FILE: crypto/serpent.c:96:
+#define S3(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x3;	x3 |= x0;	x4 &= x0;	\
 	x0 ^= x2;	x2 ^= x1;	x1 &= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#129: FILE: crypto/serpent.c:96:
+#define S3(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x3;	x3 |= x0;	x4 &= x0;	\
 	x0 ^= x2;	x2 ^= x1;	x1 &= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#129: FILE: crypto/serpent.c:96:
+#define S3(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x3;	x3 |= x0;	x4 &= x0;	\
 	x0 ^= x2;	x2 ^= x1;	x1 &= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#129: FILE: crypto/serpent.c:96:
+#define S3(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x1 ^= x3;	x3 |= x0;	x4 &= x0;	\
 	x0 ^= x2;	x2 ^= x1;	x1 &= x3;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#138: FILE: crypto/serpent.c:105:
+#define S4(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 &= x0;	x0 ^= x4;			\
 	x3 ^= x2;	x2 |= x4;	x0 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#138: FILE: crypto/serpent.c:105:
+#define S4(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 &= x0;	x0 ^= x4;			\
 	x3 ^= x2;	x2 |= x4;	x0 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#138: FILE: crypto/serpent.c:105:
+#define S4(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 &= x0;	x0 ^= x4;			\
 	x3 ^= x2;	x2 |= x4;	x0 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#138: FILE: crypto/serpent.c:105:
+#define S4(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 &= x0;	x0 ^= x4;			\
 	x3 ^= x2;	x2 |= x4;	x0 ^= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#138: FILE: crypto/serpent.c:105:
+#define S4(x0, x1, x2, x3, x4)				\
 					x4  = x3;	\
 	x3 &= x0;	x0 ^= x4;			\
 	x3 ^= x2;	x2 |= x4;	x0 ^= x1;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#147: FILE: crypto/serpent.c:115:
+#define S5(x0, x1, x2, x3, x4)				\
 	x4  = x1;	x1 |= x0;			\
 	x2 ^= x1;	x3 =~ x3;	x4 ^= x0;	\
 	x0 ^= x2;	x1 &= x4;	x4 |= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#147: FILE: crypto/serpent.c:115:
+#define S5(x0, x1, x2, x3, x4)				\
 	x4  = x1;	x1 |= x0;			\
 	x2 ^= x1;	x3 =~ x3;	x4 ^= x0;	\
 	x0 ^= x2;	x1 &= x4;	x4 |= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#147: FILE: crypto/serpent.c:115:
+#define S5(x0, x1, x2, x3, x4)				\
 	x4  = x1;	x1 |= x0;			\
 	x2 ^= x1;	x3 =~ x3;	x4 ^= x0;	\
 	x0 ^= x2;	x1 &= x4;	x4 |= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#147: FILE: crypto/serpent.c:115:
+#define S5(x0, x1, x2, x3, x4)				\
 	x4  = x1;	x1 |= x0;			\
 	x2 ^= x1;	x3 =~ x3;	x4 ^= x0;	\
 	x0 ^= x2;	x1 &= x4;	x4 |= x3;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x2' may be better as '(x2)' to avoid precedence issues
#147: FILE: crypto/serpent.c:115:
+#define S5(x0, x1, x2, x3, x4)				\
 	x4  = x1;	x1 |= x0;			\
 	x2 ^= x1;	x3 =~ x3;	x4 ^= x0;	\
 	x0 ^= x2;	x1 &= x4;	x4 |= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#147: FILE: crypto/serpent.c:115:
+#define S5(x0, x1, x2, x3, x4)				\
 	x4  = x1;	x1 |= x0;			\
 	x2 ^= x1;	x3 =~ x3;	x4 ^= x0;	\
 	x0 ^= x2;	x1 &= x4;	x4 |= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#147: FILE: crypto/serpent.c:115:
+#define S5(x0, x1, x2, x3, x4)				\
 	x4  = x1;	x1 |= x0;			\
 	x2 ^= x1;	x3 =~ x3;	x4 ^= x0;	\
 	x0 ^= x2;	x1 &= x4;	x4 |= x3;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#156: FILE: crypto/serpent.c:124:
+#define S6(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x3 ^= x0;	x1 ^= x2;	x2 ^= x0;	\
 	x0 &= x3;	x1 |= x3;	x4 =~ x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#156: FILE: crypto/serpent.c:124:
+#define S6(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x3 ^= x0;	x1 ^= x2;	x2 ^= x0;	\
 	x0 &= x3;	x1 |= x3;	x4 =~ x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#156: FILE: crypto/serpent.c:124:
+#define S6(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x3 ^= x0;	x1 ^= x2;	x2 ^= x0;	\
 	x0 &= x3;	x1 |= x3;	x4 =~ x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#156: FILE: crypto/serpent.c:124:
+#define S6(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x3 ^= x0;	x1 ^= x2;	x2 ^= x0;	\
 	x0 &= x3;	x1 |= x3;	x4 =~ x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#156: FILE: crypto/serpent.c:124:
+#define S6(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x3 ^= x0;	x1 ^= x2;	x2 ^= x0;	\
 	x0 &= x3;	x1 |= x3;	x4 =~ x4;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x3' may be better as '(x3)' to avoid precedence issues
#156: FILE: crypto/serpent.c:124:
+#define S6(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x3 ^= x0;	x1 ^= x2;	x2 ^= x0;	\
 	x0 &= x3;	x1 |= x3;	x4 =~ x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#156: FILE: crypto/serpent.c:124:
+#define S6(x0, x1, x2, x3, x4)				\
 					x4  = x1;	\
 	x3 ^= x0;	x1 ^= x2;	x2 ^= x0;	\
 	x0 &= x3;	x1 |= x3;	x4 =~ x4;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#165: FILE: crypto/serpent.c:133:
+#define S7(x0, x1, x2, x3, x4)				\
 					x1 =~ x1;	\
 	x4  = x1;	x0 =~ x0;	x1 &= x2;	\
 	x1 ^= x3;	x3 |= x4;	x4 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#165: FILE: crypto/serpent.c:133:
+#define S7(x0, x1, x2, x3, x4)				\
 					x1 =~ x1;	\
 	x4  = x1;	x0 =~ x0;	x1 &= x2;	\
 	x1 ^= x3;	x3 |= x4;	x4 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#165: FILE: crypto/serpent.c:133:
+#define S7(x0, x1, x2, x3, x4)				\
 					x1 =~ x1;	\
 	x4  = x1;	x0 =~ x0;	x1 &= x2;	\
 	x1 ^= x3;	x3 |= x4;	x4 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#165: FILE: crypto/serpent.c:133:
+#define S7(x0, x1, x2, x3, x4)				\
 					x1 =~ x1;	\
 	x4  = x1;	x0 =~ x0;	x1 &= x2;	\
 	x1 ^= x3;	x3 |= x4;	x4 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#165: FILE: crypto/serpent.c:133:
+#define S7(x0, x1, x2, x3, x4)				\
 					x1 =~ x1;	\
 	x4  = x1;	x0 =~ x0;	x1 &= x2;	\
 	x1 ^= x3;	x3 |= x4;	x4 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#165: FILE: crypto/serpent.c:133:
+#define S7(x0, x1, x2, x3, x4)				\
 					x1 =~ x1;	\
 	x4  = x1;	x0 =~ x0;	x1 &= x2;	\
 	x1 ^= x3;	x3 |= x4;	x4 ^= x2;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#174: FILE: crypto/serpent.c:143:
+#define SI0(x0, x1, x2, x3, x4)				\
 			x4  = x3;	x1 ^= x0;	\
 	x3 |= x1;	x4 ^= x1;	x0 =~ x0;	\
 	x2 ^= x3;	x3 ^= x0;	x0 &= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#174: FILE: crypto/serpent.c:143:
+#define SI0(x0, x1, x2, x3, x4)				\
 			x4  = x3;	x1 ^= x0;	\
 	x3 |= x1;	x4 ^= x1;	x0 =~ x0;	\
 	x2 ^= x3;	x3 ^= x0;	x0 &= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#174: FILE: crypto/serpent.c:143:
+#define SI0(x0, x1, x2, x3, x4)				\
 			x4  = x3;	x1 ^= x0;	\
 	x3 |= x1;	x4 ^= x1;	x0 =~ x0;	\
 	x2 ^= x3;	x3 ^= x0;	x0 &= x1;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x1' may be better as '(x1)' to avoid precedence issues
#174: FILE: crypto/serpent.c:143:
+#define SI0(x0, x1, x2, x3, x4)				\
 			x4  = x3;	x1 ^= x0;	\
 	x3 |= x1;	x4 ^= x1;	x0 =~ x0;	\
 	x2 ^= x3;	x3 ^= x0;	x0 &= x1;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x2' may be better as '(x2)' to avoid precedence issues
#174: FILE: crypto/serpent.c:143:
+#define SI0(x0, x1, x2, x3, x4)				\
 			x4  = x3;	x1 ^= x0;	\
 	x3 |= x1;	x4 ^= x1;	x0 =~ x0;	\
 	x2 ^= x3;	x3 ^= x0;	x0 &= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#174: FILE: crypto/serpent.c:143:
+#define SI0(x0, x1, x2, x3, x4)				\
 			x4  = x3;	x1 ^= x0;	\
 	x3 |= x1;	x4 ^= x1;	x0 =~ x0;	\
 	x2 ^= x3;	x3 ^= x0;	x0 &= x1;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#174: FILE: crypto/serpent.c:143:
+#define SI0(x0, x1, x2, x3, x4)				\
 			x4  = x3;	x1 ^= x0;	\
 	x3 |= x1;	x4 ^= x1;	x0 =~ x0;	\
 	x2 ^= x3;	x3 ^= x0;	x0 &= x1;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#183: FILE: crypto/serpent.c:151:
+#define SI1(x0, x1, x2, x3, x4)				\
 	x1 ^= x3;	x4  = x0;			\
 	x0 ^= x2;	x2 =~ x2;	x4 |= x1;	\
 	x4 ^= x3;	x3 &= x1;	x1 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#183: FILE: crypto/serpent.c:151:
+#define SI1(x0, x1, x2, x3, x4)				\
 	x1 ^= x3;	x4  = x0;			\
 	x0 ^= x2;	x2 =~ x2;	x4 |= x1;	\
 	x4 ^= x3;	x3 &= x1;	x1 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#183: FILE: crypto/serpent.c:151:
+#define SI1(x0, x1, x2, x3, x4)				\
 	x1 ^= x3;	x4  = x0;			\
 	x0 ^= x2;	x2 =~ x2;	x4 |= x1;	\
 	x4 ^= x3;	x3 &= x1;	x1 ^= x2;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x1' may be better as '(x1)' to avoid precedence issues
#183: FILE: crypto/serpent.c:151:
+#define SI1(x0, x1, x2, x3, x4)				\
 	x1 ^= x3;	x4  = x0;			\
 	x0 ^= x2;	x2 =~ x2;	x4 |= x1;	\
 	x4 ^= x3;	x3 &= x1;	x1 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#183: FILE: crypto/serpent.c:151:
+#define SI1(x0, x1, x2, x3, x4)				\
 	x1 ^= x3;	x4  = x0;			\
 	x0 ^= x2;	x2 =~ x2;	x4 |= x1;	\
 	x4 ^= x3;	x3 &= x1;	x1 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#183: FILE: crypto/serpent.c:151:
+#define SI1(x0, x1, x2, x3, x4)				\
 	x1 ^= x3;	x4  = x0;			\
 	x0 ^= x2;	x2 =~ x2;	x4 |= x1;	\
 	x4 ^= x3;	x3 &= x1;	x1 ^= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#183: FILE: crypto/serpent.c:151:
+#define SI1(x0, x1, x2, x3, x4)				\
 	x1 ^= x3;	x4  = x0;			\
 	x0 ^= x2;	x2 =~ x2;	x4 |= x1;	\
 	x4 ^= x3;	x3 &= x1;	x1 ^= x2;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#192: FILE: crypto/serpent.c:160:
+#define SI2(x0, x1, x2, x3, x4)				\
 	x2 ^= x1;	x4  = x3;	x3 =~ x3;	\
 	x3 |= x2;	x2 ^= x4;	x4 ^= x0;	\
 	x3 ^= x1;	x1 |= x2;	x2 ^= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#192: FILE: crypto/serpent.c:160:
+#define SI2(x0, x1, x2, x3, x4)				\
 	x2 ^= x1;	x4  = x3;	x3 =~ x3;	\
 	x3 |= x2;	x2 ^= x4;	x4 ^= x0;	\
 	x3 ^= x1;	x1 |= x2;	x2 ^= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#192: FILE: crypto/serpent.c:160:
+#define SI2(x0, x1, x2, x3, x4)				\
 	x2 ^= x1;	x4  = x3;	x3 =~ x3;	\
 	x3 |= x2;	x2 ^= x4;	x4 ^= x0;	\
 	x3 ^= x1;	x1 |= x2;	x2 ^= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#192: FILE: crypto/serpent.c:160:
+#define SI2(x0, x1, x2, x3, x4)				\
 	x2 ^= x1;	x4  = x3;	x3 =~ x3;	\
 	x3 |= x2;	x2 ^= x4;	x4 ^= x0;	\
 	x3 ^= x1;	x1 |= x2;	x2 ^= x0;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x2' may be better as '(x2)' to avoid precedence issues
#192: FILE: crypto/serpent.c:160:
+#define SI2(x0, x1, x2, x3, x4)				\
 	x2 ^= x1;	x4  = x3;	x3 =~ x3;	\
 	x3 |= x2;	x2 ^= x4;	x4 ^= x0;	\
 	x3 ^= x1;	x1 |= x2;	x2 ^= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#192: FILE: crypto/serpent.c:160:
+#define SI2(x0, x1, x2, x3, x4)				\
 	x2 ^= x1;	x4  = x3;	x3 =~ x3;	\
 	x3 |= x2;	x2 ^= x4;	x4 ^= x0;	\
 	x3 ^= x1;	x1 |= x2;	x2 ^= x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#192: FILE: crypto/serpent.c:160:
+#define SI2(x0, x1, x2, x3, x4)				\
 	x2 ^= x1;	x4  = x3;	x3 =~ x3;	\
 	x3 |= x2;	x2 ^= x4;	x4 ^= x0;	\
 	x3 ^= x1;	x1 |= x2;	x2 ^= x0;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#201: FILE: crypto/serpent.c:168:
+#define SI3(x0, x1, x2, x3, x4)				\
 					x2 ^= x1;	\
 	x4  = x1;	x1 &= x2;			\
 	x1 ^= x0;	x0 |= x4;	x4 ^= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#201: FILE: crypto/serpent.c:168:
+#define SI3(x0, x1, x2, x3, x4)				\
 					x2 ^= x1;	\
 	x4  = x1;	x1 &= x2;			\
 	x1 ^= x0;	x0 |= x4;	x4 ^= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#201: FILE: crypto/serpent.c:168:
+#define SI3(x0, x1, x2, x3, x4)				\
 					x2 ^= x1;	\
 	x4  = x1;	x1 &= x2;			\
 	x1 ^= x0;	x0 |= x4;	x4 ^= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#201: FILE: crypto/serpent.c:168:
+#define SI3(x0, x1, x2, x3, x4)				\
 					x2 ^= x1;	\
 	x4  = x1;	x1 &= x2;			\
 	x1 ^= x0;	x0 |= x4;	x4 ^= x3;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x2' may be better as '(x2)' to avoid precedence issues
#201: FILE: crypto/serpent.c:168:
+#define SI3(x0, x1, x2, x3, x4)				\
 					x2 ^= x1;	\
 	x4  = x1;	x1 &= x2;			\
 	x1 ^= x0;	x0 |= x4;	x4 ^= x3;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#201: FILE: crypto/serpent.c:168:
+#define SI3(x0, x1, x2, x3, x4)				\
 					x2 ^= x1;	\
 	x4  = x1;	x1 &= x2;			\
 	x1 ^= x0;	x0 |= x4;	x4 ^= x3;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#210: FILE: crypto/serpent.c:177:
+#define SI4(x0, x1, x2, x3, x4)				\
 	x2 ^= x3;	x4  = x0;	x0 &= x1;	\
 	x0 ^= x2;	x2 |= x3;	x4 =~ x4;	\
 	x1 ^= x0;	x0 ^= x2;	x2 &= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#210: FILE: crypto/serpent.c:177:
+#define SI4(x0, x1, x2, x3, x4)				\
 	x2 ^= x3;	x4  = x0;	x0 &= x1;	\
 	x0 ^= x2;	x2 |= x3;	x4 =~ x4;	\
 	x1 ^= x0;	x0 ^= x2;	x2 &= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#210: FILE: crypto/serpent.c:177:
+#define SI4(x0, x1, x2, x3, x4)				\
 	x2 ^= x3;	x4  = x0;	x0 &= x1;	\
 	x0 ^= x2;	x2 |= x3;	x4 =~ x4;	\
 	x1 ^= x0;	x0 ^= x2;	x2 &= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#210: FILE: crypto/serpent.c:177:
+#define SI4(x0, x1, x2, x3, x4)				\
 	x2 ^= x3;	x4  = x0;	x0 &= x1;	\
 	x0 ^= x2;	x2 |= x3;	x4 =~ x4;	\
 	x1 ^= x0;	x0 ^= x2;	x2 &= x4;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x2' may be better as '(x2)' to avoid precedence issues
#210: FILE: crypto/serpent.c:177:
+#define SI4(x0, x1, x2, x3, x4)				\
 	x2 ^= x3;	x4  = x0;	x0 &= x1;	\
 	x0 ^= x2;	x2 |= x3;	x4 =~ x4;	\
 	x1 ^= x0;	x0 ^= x2;	x2 &= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#210: FILE: crypto/serpent.c:177:
+#define SI4(x0, x1, x2, x3, x4)				\
 	x2 ^= x3;	x4  = x0;	x0 &= x1;	\
 	x0 ^= x2;	x2 |= x3;	x4 =~ x4;	\
 	x1 ^= x0;	x0 ^= x2;	x2 &= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#210: FILE: crypto/serpent.c:177:
+#define SI4(x0, x1, x2, x3, x4)				\
 	x2 ^= x3;	x4  = x0;	x0 &= x1;	\
 	x0 ^= x2;	x2 |= x3;	x4 =~ x4;	\
 	x1 ^= x0;	x0 ^= x2;	x2 &= x4;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#219: FILE: crypto/serpent.c:186:
+#define SI5(x0, x1, x2, x3, x4)				\
 			x4  = x1;	x1 |= x2;	\
 	x2 ^= x4;	x1 ^= x3;	x3 &= x4;	\
 	x2 ^= x3;	x3 |= x0;	x0 =~ x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#219: FILE: crypto/serpent.c:186:
+#define SI5(x0, x1, x2, x3, x4)				\
 			x4  = x1;	x1 |= x2;	\
 	x2 ^= x4;	x1 ^= x3;	x3 &= x4;	\
 	x2 ^= x3;	x3 |= x0;	x0 =~ x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#219: FILE: crypto/serpent.c:186:
+#define SI5(x0, x1, x2, x3, x4)				\
 			x4  = x1;	x1 |= x2;	\
 	x2 ^= x4;	x1 ^= x3;	x3 &= x4;	\
 	x2 ^= x3;	x3 |= x0;	x0 =~ x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#219: FILE: crypto/serpent.c:186:
+#define SI5(x0, x1, x2, x3, x4)				\
 			x4  = x1;	x1 |= x2;	\
 	x2 ^= x4;	x1 ^= x3;	x3 &= x4;	\
 	x2 ^= x3;	x3 |= x0;	x0 =~ x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#219: FILE: crypto/serpent.c:186:
+#define SI5(x0, x1, x2, x3, x4)				\
 			x4  = x1;	x1 |= x2;	\
 	x2 ^= x4;	x1 ^= x3;	x3 &= x4;	\
 	x2 ^= x3;	x3 |= x0;	x0 =~ x0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#219: FILE: crypto/serpent.c:186:
+#define SI5(x0, x1, x2, x3, x4)				\
 			x4  = x1;	x1 |= x2;	\
 	x2 ^= x4;	x1 ^= x3;	x3 &= x4;	\
 	x2 ^= x3;	x3 |= x0;	x0 =~ x0;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#228: FILE: crypto/serpent.c:195:
+#define SI6(x0, x1, x2, x3, x4)				\
 			x0 ^= x2;			\
 	x4  = x0;	x0 &= x3;	x2 ^= x3;	\
 	x0 ^= x2;	x3 ^= x1;	x2 |= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#228: FILE: crypto/serpent.c:195:
+#define SI6(x0, x1, x2, x3, x4)				\
 			x0 ^= x2;			\
 	x4  = x0;	x0 &= x3;	x2 ^= x3;	\
 	x0 ^= x2;	x3 ^= x1;	x2 |= x4;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x0' may be better as '(x0)' to avoid precedence issues
#228: FILE: crypto/serpent.c:195:
+#define SI6(x0, x1, x2, x3, x4)				\
 			x0 ^= x2;			\
 	x4  = x0;	x0 &= x3;	x2 ^= x3;	\
 	x0 ^= x2;	x3 ^= x1;	x2 |= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#228: FILE: crypto/serpent.c:195:
+#define SI6(x0, x1, x2, x3, x4)				\
 			x0 ^= x2;			\
 	x4  = x0;	x0 &= x3;	x2 ^= x3;	\
 	x0 ^= x2;	x3 ^= x1;	x2 |= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#228: FILE: crypto/serpent.c:195:
+#define SI6(x0, x1, x2, x3, x4)				\
 			x0 ^= x2;			\
 	x4  = x0;	x0 &= x3;	x2 ^= x3;	\
 	x0 ^= x2;	x3 ^= x1;	x2 |= x4;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#228: FILE: crypto/serpent.c:195:
+#define SI6(x0, x1, x2, x3, x4)				\
 			x0 ^= x2;			\
 	x4  = x0;	x0 &= x3;	x2 ^= x3;	\
 	x0 ^= x2;	x3 ^= x1;	x2 |= x4;	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#237: FILE: crypto/serpent.c:204:
+#define SI7(x0, x1, x2, x3, x4)				\
 	x4  = x3;	x3 &= x0;	x0 ^= x2;	\
 	x2 |= x4;	x4 ^= x1;	x0 =~ x0;	\
 	x1 |= x3;	x4 ^= x0;	x0 &= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x0' - possible side-effects?
#237: FILE: crypto/serpent.c:204:
+#define SI7(x0, x1, x2, x3, x4)				\
 	x4  = x3;	x3 &= x0;	x0 ^= x2;	\
 	x2 |= x4;	x4 ^= x1;	x0 =~ x0;	\
 	x1 |= x3;	x4 ^= x0;	x0 &= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x1' - possible side-effects?
#237: FILE: crypto/serpent.c:204:
+#define SI7(x0, x1, x2, x3, x4)				\
 	x4  = x3;	x3 &= x0;	x0 ^= x2;	\
 	x2 |= x4;	x4 ^= x1;	x0 =~ x0;	\
 	x1 |= x3;	x4 ^= x0;	x0 &= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x2' - possible side-effects?
#237: FILE: crypto/serpent.c:204:
+#define SI7(x0, x1, x2, x3, x4)				\
 	x4  = x3;	x3 &= x0;	x0 ^= x2;	\
 	x2 |= x4;	x4 ^= x1;	x0 =~ x0;	\
 	x1 |= x3;	x4 ^= x0;	x0 &= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x3' - possible side-effects?
#237: FILE: crypto/serpent.c:204:
+#define SI7(x0, x1, x2, x3, x4)				\
 	x4  = x3;	x3 &= x0;	x0 ^= x2;	\
 	x2 |= x4;	x4 ^= x1;	x0 =~ x0;	\
 	x1 |= x3;	x4 ^= x0;	x0 &= x2;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x4' - possible side-effects?
#237: FILE: crypto/serpent.c:204:
+#define SI7(x0, x1, x2, x3, x4)				\
 	x4  = x3;	x3 &= x0;	x0 ^= x2;	\
 	x2 |= x4;	x4 ^= x1;	x0 =~ x0;	\
 	x1 |= x3;	x4 ^= x0;	x0 &= x2;	\

ERROR:SPACING: space prohibited after that open square bracket '['
#284: FILE: crypto/serpent.c:253:
+	keyiter(k[  0], r3, r2, r0,  8,  8); keyiter(k[  1], r4, r3, r1,  9,  9);

ERROR:SPACING: space prohibited after that open square bracket '['
#285: FILE: crypto/serpent.c:254:
+	keyiter(k[  2], r0, r4, r2, 10, 10); keyiter(k[  3], r1, r0, r3, 11, 11);

ERROR:SPACING: space prohibited after that open square bracket '['
#286: FILE: crypto/serpent.c:255:
+	keyiter(k[  4], r2, r1, r4, 12, 12); keyiter(k[  5], r3, r2, r0, 13, 13);

ERROR:SPACING: space prohibited after that open square bracket '['
#287: FILE: crypto/serpent.c:256:
+	keyiter(k[  6], r4, r3, r1, 14, 14); keyiter(k[  7], r0, r4, r2, 15, 15);

ERROR:SPACING: space prohibited after that open square bracket '['
#288: FILE: crypto/serpent.c:257:
+	keyiter(k[  8], r1, r0, r3, 16, 16); keyiter(k[  9], r2, r1, r4, 17, 17);

ERROR:SPACING: space prohibited after that open square bracket '['
#289: FILE: crypto/serpent.c:258:
+	keyiter(k[ 10], r3, r2, r0, 18, 18); keyiter(k[ 11], r4, r3, r1, 19, 19);

ERROR:SPACING: space prohibited after that open square bracket '['
#290: FILE: crypto/serpent.c:259:
+	keyiter(k[ 12], r0, r4, r2, 20, 20); keyiter(k[ 13], r1, r0, r3, 21, 21);

ERROR:SPACING: space prohibited after that open square bracket '['
#291: FILE: crypto/serpent.c:260:
+	keyiter(k[ 14], r2, r1, r4, 22, 22); keyiter(k[ 15], r3, r2, r0, 23, 23);

ERROR:SPACING: space prohibited after that open square bracket '['
#292: FILE: crypto/serpent.c:261:
+	keyiter(k[ 16], r4, r3, r1, 24, 24); keyiter(k[ 17], r0, r4, r2, 25, 25);

ERROR:SPACING: space prohibited after that open square bracket '['
#293: FILE: crypto/serpent.c:262:
+	keyiter(k[ 18], r1, r0, r3, 26, 26); keyiter(k[ 19], r2, r1, r4, 27, 27);

ERROR:SPACING: space prohibited after that open square bracket '['
#294: FILE: crypto/serpent.c:263:
+	keyiter(k[ 20], r3, r2, r0, 28, 28); keyiter(k[ 21], r4, r3, r1, 29, 29);

ERROR:SPACING: space prohibited after that open square bracket '['
#295: FILE: crypto/serpent.c:264:
+	keyiter(k[ 22], r0, r4, r2, 30, 30); keyiter(k[ 23], r1, r0, r3, 31, 31);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#324: FILE: crypto/serpent.c:268:
+	keyiter(k[-26], r2, r1, r4, 32,-18); keyiter(k[-25], r3, r2, r0, 33,-17);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#324: FILE: crypto/serpent.c:268:
+	keyiter(k[-26], r2, r1, r4, 32,-18); keyiter(k[-25], r3, r2, r0, 33,-17);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#324: FILE: crypto/serpent.c:268:
+	keyiter(k[-26], r2, r1, r4, 32,-18); keyiter(k[-25], r3, r2, r0, 33,-17);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#324: FILE: crypto/serpent.c:268:
+	keyiter(k[-26], r2, r1, r4, 32,-18); keyiter(k[-25], r3, r2, r0, 33,-17);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#325: FILE: crypto/serpent.c:269:
+	keyiter(k[-24], r4, r3, r1, 34,-16); keyiter(k[-23], r0, r4, r2, 35,-15);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#325: FILE: crypto/serpent.c:269:
+	keyiter(k[-24], r4, r3, r1, 34,-16); keyiter(k[-23], r0, r4, r2, 35,-15);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#325: FILE: crypto/serpent.c:269:
+	keyiter(k[-24], r4, r3, r1, 34,-16); keyiter(k[-23], r0, r4, r2, 35,-15);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#325: FILE: crypto/serpent.c:269:
+	keyiter(k[-24], r4, r3, r1, 34,-16); keyiter(k[-23], r0, r4, r2, 35,-15);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#326: FILE: crypto/serpent.c:270:
+	keyiter(k[-22], r1, r0, r3, 36,-14); keyiter(k[-21], r2, r1, r4, 37,-13);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#326: FILE: crypto/serpent.c:270:
+	keyiter(k[-22], r1, r0, r3, 36,-14); keyiter(k[-21], r2, r1, r4, 37,-13);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#326: FILE: crypto/serpent.c:270:
+	keyiter(k[-22], r1, r0, r3, 36,-14); keyiter(k[-21], r2, r1, r4, 37,-13);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#326: FILE: crypto/serpent.c:270:
+	keyiter(k[-22], r1, r0, r3, 36,-14); keyiter(k[-21], r2, r1, r4, 37,-13);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#327: FILE: crypto/serpent.c:271:
+	keyiter(k[-20], r3, r2, r0, 38,-12); keyiter(k[-19], r4, r3, r1, 39,-11);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#327: FILE: crypto/serpent.c:271:
+	keyiter(k[-20], r3, r2, r0, 38,-12); keyiter(k[-19], r4, r3, r1, 39,-11);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#327: FILE: crypto/serpent.c:271:
+	keyiter(k[-20], r3, r2, r0, 38,-12); keyiter(k[-19], r4, r3, r1, 39,-11);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#327: FILE: crypto/serpent.c:271:
+	keyiter(k[-20], r3, r2, r0, 38,-12); keyiter(k[-19], r4, r3, r1, 39,-11);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#328: FILE: crypto/serpent.c:272:
+	keyiter(k[-18], r0, r4, r2, 40,-10); keyiter(k[-17], r1, r0, r3, 41, -9);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#328: FILE: crypto/serpent.c:272:
+	keyiter(k[-18], r0, r4, r2, 40,-10); keyiter(k[-17], r1, r0, r3, 41, -9);
 	                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#332: FILE: crypto/serpent.c:276:
+	keyiter(k[-10], r3, r2, r0, 48, -2); keyiter(k[ -9], r4, r3, r1, 49, -1);

ERROR:SPACING: space prohibited after that open square bracket '['
#333: FILE: crypto/serpent.c:277:
+	keyiter(k[ -8], r0, r4, r2, 50,  0); keyiter(k[ -7], r1, r0, r3, 51,  1);

ERROR:SPACING: space prohibited after that open square bracket '['
#334: FILE: crypto/serpent.c:278:
+	keyiter(k[ -6], r2, r1, r4, 52,  2); keyiter(k[ -5], r3, r2, r0, 53,  3);

ERROR:SPACING: space prohibited after that open square bracket '['
#335: FILE: crypto/serpent.c:279:
+	keyiter(k[ -4], r4, r3, r1, 54,  4); keyiter(k[ -3], r0, r4, r2, 55,  5);

ERROR:SPACING: space prohibited after that open square bracket '['
#336: FILE: crypto/serpent.c:280:
+	keyiter(k[ -2], r1, r0, r3, 56,  6); keyiter(k[ -1], r2, r1, r4, 57,  7);

ERROR:SPACING: space prohibited after that open square bracket '['
#337: FILE: crypto/serpent.c:281:
+	keyiter(k[  0], r3, r2, r0, 58,  8); keyiter(k[  1], r4, r3, r1, 59,  9);

ERROR:SPACING: space prohibited after that open square bracket '['
#338: FILE: crypto/serpent.c:282:
+	keyiter(k[  2], r0, r4, r2, 60, 10); keyiter(k[  3], r1, r0, r3, 61, 11);

ERROR:SPACING: space prohibited after that open square bracket '['
#339: FILE: crypto/serpent.c:283:
+	keyiter(k[  4], r2, r1, r4, 62, 12); keyiter(k[  5], r3, r2, r0, 63, 13);

ERROR:SPACING: space prohibited after that open square bracket '['
#340: FILE: crypto/serpent.c:284:
+	keyiter(k[  6], r4, r3, r1, 64, 14); keyiter(k[  7], r0, r4, r2, 65, 15);

ERROR:SPACING: space prohibited after that open square bracket '['
#341: FILE: crypto/serpent.c:285:
+	keyiter(k[  8], r1, r0, r3, 66, 16); keyiter(k[  9], r2, r1, r4, 67, 17);

ERROR:SPACING: space prohibited after that open square bracket '['
#342: FILE: crypto/serpent.c:286:
+	keyiter(k[ 10], r3, r2, r0, 68, 18); keyiter(k[ 11], r4, r3, r1, 69, 19);

ERROR:SPACING: space prohibited after that open square bracket '['
#343: FILE: crypto/serpent.c:287:
+	keyiter(k[ 12], r0, r4, r2, 70, 20); keyiter(k[ 13], r1, r0, r3, 71, 21);

ERROR:SPACING: space prohibited after that open square bracket '['
#344: FILE: crypto/serpent.c:288:
+	keyiter(k[ 14], r2, r1, r4, 72, 22); keyiter(k[ 15], r3, r2, r0, 73, 23);

ERROR:SPACING: space prohibited after that open square bracket '['
#345: FILE: crypto/serpent.c:289:
+	keyiter(k[ 16], r4, r3, r1, 74, 24); keyiter(k[ 17], r0, r4, r2, 75, 25);

ERROR:SPACING: space prohibited after that open square bracket '['
#346: FILE: crypto/serpent.c:290:
+	keyiter(k[ 18], r1, r0, r3, 76, 26); keyiter(k[ 19], r2, r1, r4, 77, 27);

ERROR:SPACING: space prohibited after that open square bracket '['
#347: FILE: crypto/serpent.c:291:
+	keyiter(k[ 20], r3, r2, r0, 78, 28); keyiter(k[ 21], r4, r3, r1, 79, 29);

ERROR:SPACING: space prohibited after that open square bracket '['
#348: FILE: crypto/serpent.c:292:
+	keyiter(k[ 22], r0, r4, r2, 80, 30); keyiter(k[ 23], r1, r0, r3, 81, 31);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#377: FILE: crypto/serpent.c:296:
+	keyiter(k[-26], r2, r1, r4, 82,-18); keyiter(k[-25], r3, r2, r0, 83,-17);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#377: FILE: crypto/serpent.c:296:
+	keyiter(k[-26], r2, r1, r4, 82,-18); keyiter(k[-25], r3, r2, r0, 83,-17);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#377: FILE: crypto/serpent.c:296:
+	keyiter(k[-26], r2, r1, r4, 82,-18); keyiter(k[-25], r3, r2, r0, 83,-17);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#377: FILE: crypto/serpent.c:296:
+	keyiter(k[-26], r2, r1, r4, 82,-18); keyiter(k[-25], r3, r2, r0, 83,-17);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#378: FILE: crypto/serpent.c:297:
+	keyiter(k[-24], r4, r3, r1, 84,-16); keyiter(k[-23], r0, r4, r2, 85,-15);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#378: FILE: crypto/serpent.c:297:
+	keyiter(k[-24], r4, r3, r1, 84,-16); keyiter(k[-23], r0, r4, r2, 85,-15);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#378: FILE: crypto/serpent.c:297:
+	keyiter(k[-24], r4, r3, r1, 84,-16); keyiter(k[-23], r0, r4, r2, 85,-15);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#378: FILE: crypto/serpent.c:297:
+	keyiter(k[-24], r4, r3, r1, 84,-16); keyiter(k[-23], r0, r4, r2, 85,-15);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#379: FILE: crypto/serpent.c:298:
+	keyiter(k[-22], r1, r0, r3, 86,-14); keyiter(k[-21], r2, r1, r4, 87,-13);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#379: FILE: crypto/serpent.c:298:
+	keyiter(k[-22], r1, r0, r3, 86,-14); keyiter(k[-21], r2, r1, r4, 87,-13);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#379: FILE: crypto/serpent.c:298:
+	keyiter(k[-22], r1, r0, r3, 86,-14); keyiter(k[-21], r2, r1, r4, 87,-13);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#379: FILE: crypto/serpent.c:298:
+	keyiter(k[-22], r1, r0, r3, 86,-14); keyiter(k[-21], r2, r1, r4, 87,-13);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#380: FILE: crypto/serpent.c:299:
+	keyiter(k[-20], r3, r2, r0, 88,-12); keyiter(k[-19], r4, r3, r1, 89,-11);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#380: FILE: crypto/serpent.c:299:
+	keyiter(k[-20], r3, r2, r0, 88,-12); keyiter(k[-19], r4, r3, r1, 89,-11);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#380: FILE: crypto/serpent.c:299:
+	keyiter(k[-20], r3, r2, r0, 88,-12); keyiter(k[-19], r4, r3, r1, 89,-11);
 	                                                                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#380: FILE: crypto/serpent.c:299:
+	keyiter(k[-20], r3, r2, r0, 88,-12); keyiter(k[-19], r4, r3, r1, 89,-11);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#381: FILE: crypto/serpent.c:300:
+	keyiter(k[-18], r0, r4, r2, 90,-10); keyiter(k[-17], r1, r0, r3, 91, -9);
 	                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#381: FILE: crypto/serpent.c:300:
+	keyiter(k[-18], r0, r4, r2, 90,-10); keyiter(k[-17], r1, r0, r3, 91, -9);
 	                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#385: FILE: crypto/serpent.c:304:
+	keyiter(k[-10], r3, r2, r0, 98, -2); keyiter(k[ -9], r4, r3, r1, 99, -1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#386: FILE: crypto/serpent.c:305:
+	keyiter(k[ -8], r0, r4, r2,100,  0); keyiter(k[ -7], r1, r0, r3,101,  1);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#386: FILE: crypto/serpent.c:305:
+	keyiter(k[ -8], r0, r4, r2,100,  0); keyiter(k[ -7], r1, r0, r3,101,  1);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#386: FILE: crypto/serpent.c:305:
+	keyiter(k[ -8], r0, r4, r2,100,  0); keyiter(k[ -7], r1, r0, r3,101,  1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#387: FILE: crypto/serpent.c:306:
+	keyiter(k[ -6], r2, r1, r4,102,  2); keyiter(k[ -5], r3, r2, r0,103,  3);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#387: FILE: crypto/serpent.c:306:
+	keyiter(k[ -6], r2, r1, r4,102,  2); keyiter(k[ -5], r3, r2, r0,103,  3);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#387: FILE: crypto/serpent.c:306:
+	keyiter(k[ -6], r2, r1, r4,102,  2); keyiter(k[ -5], r3, r2, r0,103,  3);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#388: FILE: crypto/serpent.c:307:
+	keyiter(k[ -4], r4, r3, r1,104,  4); keyiter(k[ -3], r0, r4, r2,105,  5);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#388: FILE: crypto/serpent.c:307:
+	keyiter(k[ -4], r4, r3, r1,104,  4); keyiter(k[ -3], r0, r4, r2,105,  5);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#388: FILE: crypto/serpent.c:307:
+	keyiter(k[ -4], r4, r3, r1,104,  4); keyiter(k[ -3], r0, r4, r2,105,  5);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: crypto/serpent.c:308:
+	keyiter(k[ -2], r1, r0, r3,106,  6); keyiter(k[ -1], r2, r1, r4,107,  7);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: crypto/serpent.c:308:
+	keyiter(k[ -2], r1, r0, r3,106,  6); keyiter(k[ -1], r2, r1, r4,107,  7);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#389: FILE: crypto/serpent.c:308:
+	keyiter(k[ -2], r1, r0, r3,106,  6); keyiter(k[ -1], r2, r1, r4,107,  7);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: crypto/serpent.c:309:
+	keyiter(k[  0], r3, r2, r0,108,  8); keyiter(k[  1], r4, r3, r1,109,  9);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: crypto/serpent.c:309:
+	keyiter(k[  0], r3, r2, r0,108,  8); keyiter(k[  1], r4, r3, r1,109,  9);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#390: FILE: crypto/serpent.c:309:
+	keyiter(k[  0], r3, r2, r0,108,  8); keyiter(k[  1], r4, r3, r1,109,  9);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: crypto/serpent.c:310:
+	keyiter(k[  2], r0, r4, r2,110, 10); keyiter(k[  3], r1, r0, r3,111, 11);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: crypto/serpent.c:310:
+	keyiter(k[  2], r0, r4, r2,110, 10); keyiter(k[  3], r1, r0, r3,111, 11);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#391: FILE: crypto/serpent.c:310:
+	keyiter(k[  2], r0, r4, r2,110, 10); keyiter(k[  3], r1, r0, r3,111, 11);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#392: FILE: crypto/serpent.c:311:
+	keyiter(k[  4], r2, r1, r4,112, 12); keyiter(k[  5], r3, r2, r0,113, 13);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#392: FILE: crypto/serpent.c:311:
+	keyiter(k[  4], r2, r1, r4,112, 12); keyiter(k[  5], r3, r2, r0,113, 13);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#392: FILE: crypto/serpent.c:311:
+	keyiter(k[  4], r2, r1, r4,112, 12); keyiter(k[  5], r3, r2, r0,113, 13);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: crypto/serpent.c:312:
+	keyiter(k[  6], r4, r3, r1,114, 14); keyiter(k[  7], r0, r4, r2,115, 15);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: crypto/serpent.c:312:
+	keyiter(k[  6], r4, r3, r1,114, 14); keyiter(k[  7], r0, r4, r2,115, 15);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#393: FILE: crypto/serpent.c:312:
+	keyiter(k[  6], r4, r3, r1,114, 14); keyiter(k[  7], r0, r4, r2,115, 15);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: crypto/serpent.c:313:
+	keyiter(k[  8], r1, r0, r3,116, 16); keyiter(k[  9], r2, r1, r4,117, 17);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: crypto/serpent.c:313:
+	keyiter(k[  8], r1, r0, r3,116, 16); keyiter(k[  9], r2, r1, r4,117, 17);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#394: FILE: crypto/serpent.c:313:
+	keyiter(k[  8], r1, r0, r3,116, 16); keyiter(k[  9], r2, r1, r4,117, 17);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: crypto/serpent.c:314:
+	keyiter(k[ 10], r3, r2, r0,118, 18); keyiter(k[ 11], r4, r3, r1,119, 19);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: crypto/serpent.c:314:
+	keyiter(k[ 10], r3, r2, r0,118, 18); keyiter(k[ 11], r4, r3, r1,119, 19);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#395: FILE: crypto/serpent.c:314:
+	keyiter(k[ 10], r3, r2, r0,118, 18); keyiter(k[ 11], r4, r3, r1,119, 19);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#396: FILE: crypto/serpent.c:315:
+	keyiter(k[ 12], r0, r4, r2,120, 20); keyiter(k[ 13], r1, r0, r3,121, 21);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#396: FILE: crypto/serpent.c:315:
+	keyiter(k[ 12], r0, r4, r2,120, 20); keyiter(k[ 13], r1, r0, r3,121, 21);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#396: FILE: crypto/serpent.c:315:
+	keyiter(k[ 12], r0, r4, r2,120, 20); keyiter(k[ 13], r1, r0, r3,121, 21);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#397: FILE: crypto/serpent.c:316:
+	keyiter(k[ 14], r2, r1, r4,122, 22); keyiter(k[ 15], r3, r2, r0,123, 23);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#397: FILE: crypto/serpent.c:316:
+	keyiter(k[ 14], r2, r1, r4,122, 22); keyiter(k[ 15], r3, r2, r0,123, 23);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#397: FILE: crypto/serpent.c:316:
+	keyiter(k[ 14], r2, r1, r4,122, 22); keyiter(k[ 15], r3, r2, r0,123, 23);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#398: FILE: crypto/serpent.c:317:
+	keyiter(k[ 16], r4, r3, r1,124, 24); keyiter(k[ 17], r0, r4, r2,125, 25);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#398: FILE: crypto/serpent.c:317:
+	keyiter(k[ 16], r4, r3, r1,124, 24); keyiter(k[ 17], r0, r4, r2,125, 25);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#398: FILE: crypto/serpent.c:317:
+	keyiter(k[ 16], r4, r3, r1,124, 24); keyiter(k[ 17], r0, r4, r2,125, 25);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#399: FILE: crypto/serpent.c:318:
+	keyiter(k[ 18], r1, r0, r3,126, 26); keyiter(k[ 19], r2, r1, r4,127, 27);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#399: FILE: crypto/serpent.c:318:
+	keyiter(k[ 18], r1, r0, r3,126, 26); keyiter(k[ 19], r2, r1, r4,127, 27);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#399: FILE: crypto/serpent.c:318:
+	keyiter(k[ 18], r1, r0, r3,126, 26); keyiter(k[ 19], r2, r1, r4,127, 27);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#400: FILE: crypto/serpent.c:319:
+	keyiter(k[ 20], r3, r2, r0,128, 28); keyiter(k[ 21], r4, r3, r1,129, 29);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#400: FILE: crypto/serpent.c:319:
+	keyiter(k[ 20], r3, r2, r0,128, 28); keyiter(k[ 21], r4, r3, r1,129, 29);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#400: FILE: crypto/serpent.c:319:
+	keyiter(k[ 20], r3, r2, r0,128, 28); keyiter(k[ 21], r4, r3, r1,129, 29);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: crypto/serpent.c:320:
+	keyiter(k[ 22], r0, r4, r2,130, 30); keyiter(k[ 23], r1, r0, r3,131, 31);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: crypto/serpent.c:320:
+	keyiter(k[ 22], r0, r4, r2,130, 30); keyiter(k[ 23], r1, r0, r3,131, 31);
 	                                                               ^

ERROR:SPACING: space prohibited after that open square bracket '['
#401: FILE: crypto/serpent.c:320:
+	keyiter(k[ 22], r0, r4, r2,130, 30); keyiter(k[ 23], r1, r0, r3,131, 31);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#428: FILE: crypto/serpent.c:333:
+	S4(r0, r1, r4, r2, r3); storekeys(r1, r4, r2, r3, -8); loadkeys(r1, r4, r2, r3,-12);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#428: FILE: crypto/serpent.c:333:
+	S4(r0, r1, r4, r2, r3); storekeys(r1, r4, r2, r3, -8); loadkeys(r1, r4, r2, r3,-12);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#429: FILE: crypto/serpent.c:334:
+	S5(r1, r4, r2, r3, r0); storekeys(r0, r1, r4, r3,-12); loadkeys(r0, r1, r4, r3,-16);
 	                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#429: FILE: crypto/serpent.c:334:
+	S5(r1, r4, r2, r3, r0); storekeys(r0, r1, r4, r3,-12); loadkeys(r0, r1, r4, r3,-16);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#429: FILE: crypto/serpent.c:334:
+	S5(r1, r4, r2, r3, r0); storekeys(r0, r1, r4, r3,-12); loadkeys(r0, r1, r4, r3,-16);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#429: FILE: crypto/serpent.c:334:
+	S5(r1, r4, r2, r3, r0); storekeys(r0, r1, r4, r3,-12); loadkeys(r0, r1, r4, r3,-16);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#430: FILE: crypto/serpent.c:335:
+	S6(r0, r1, r4, r3, r2); storekeys(r4, r2, r1, r3,-16); loadkeys(r4, r2, r1, r3,-20);
 	                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#430: FILE: crypto/serpent.c:335:
+	S6(r0, r1, r4, r3, r2); storekeys(r4, r2, r1, r3,-16); loadkeys(r4, r2, r1, r3,-20);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#430: FILE: crypto/serpent.c:335:
+	S6(r0, r1, r4, r3, r2); storekeys(r4, r2, r1, r3,-16); loadkeys(r4, r2, r1, r3,-20);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#430: FILE: crypto/serpent.c:335:
+	S6(r0, r1, r4, r3, r2); storekeys(r4, r2, r1, r3,-16); loadkeys(r4, r2, r1, r3,-20);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#431: FILE: crypto/serpent.c:336:
+	S7(r4, r2, r1, r3, r0); storekeys(r0, r1, r3, r4,-20); loadkeys(r0, r1, r3, r4,-24);
 	                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#431: FILE: crypto/serpent.c:336:
+	S7(r4, r2, r1, r3, r0); storekeys(r0, r1, r3, r4,-20); loadkeys(r0, r1, r3, r4,-24);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#431: FILE: crypto/serpent.c:336:
+	S7(r4, r2, r1, r3, r0); storekeys(r0, r1, r3, r4,-20); loadkeys(r0, r1, r3, r4,-24);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#431: FILE: crypto/serpent.c:336:
+	S7(r4, r2, r1, r3, r0); storekeys(r0, r1, r3, r4,-20); loadkeys(r0, r1, r3, r4,-24);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#432: FILE: crypto/serpent.c:337:
+	S0(r0, r1, r3, r4, r2); storekeys(r3, r1, r4, r0,-24); loadkeys(r3, r1, r4, r0,-28);
 	                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#432: FILE: crypto/serpent.c:337:
+	S0(r0, r1, r3, r4, r2); storekeys(r3, r1, r4, r0,-24); loadkeys(r3, r1, r4, r0,-28);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#432: FILE: crypto/serpent.c:337:
+	S0(r0, r1, r3, r4, r2); storekeys(r3, r1, r4, r0,-24); loadkeys(r3, r1, r4, r0,-28);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#432: FILE: crypto/serpent.c:337:
+	S0(r0, r1, r3, r4, r2); storekeys(r3, r1, r4, r0,-24); loadkeys(r3, r1, r4, r0,-28);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#452: FILE: crypto/serpent.c:346:
+	S0(r3, r0, r2, r4, r1); storekeys(r2, r0, r4, r3, -6); loadkeys(r2, r0, r4, r3,-10);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#452: FILE: crypto/serpent.c:346:
+	S0(r3, r0, r2, r4, r1); storekeys(r2, r0, r4, r3, -6); loadkeys(r2, r0, r4, r3,-10);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#453: FILE: crypto/serpent.c:347:
+	S1(r2, r0, r4, r3, r1); storekeys(r1, r4, r3, r2,-10); loadkeys(r1, r4, r3, r2,-14);
 	                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#453: FILE: crypto/serpent.c:347:
+	S1(r2, r0, r4, r3, r1); storekeys(r1, r4, r3, r2,-10); loadkeys(r1, r4, r3, r2,-14);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#453: FILE: crypto/serpent.c:347:
+	S1(r2, r0, r4, r3, r1); storekeys(r1, r4, r3, r2,-10); loadkeys(r1, r4, r3, r2,-14);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#453: FILE: crypto/serpent.c:347:
+	S1(r2, r0, r4, r3, r1); storekeys(r1, r4, r3, r2,-10); loadkeys(r1, r4, r3, r2,-14);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#454: FILE: crypto/serpent.c:348:
+	S2(r1, r4, r3, r2, r0); storekeys(r0, r4, r1, r2,-14); loadkeys(r0, r4, r1, r2,-18);
 	                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#454: FILE: crypto/serpent.c:348:
+	S2(r1, r4, r3, r2, r0); storekeys(r0, r4, r1, r2,-14); loadkeys(r0, r4, r1, r2,-18);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#454: FILE: crypto/serpent.c:348:
+	S2(r1, r4, r3, r2, r0); storekeys(r0, r4, r1, r2,-14); loadkeys(r0, r4, r1, r2,-18);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#454: FILE: crypto/serpent.c:348:
+	S2(r1, r4, r3, r2, r0); storekeys(r0, r4, r1, r2,-14); loadkeys(r0, r4, r1, r2,-18);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#455: FILE: crypto/serpent.c:349:
+	S3(r0, r4, r1, r2, r3); storekeys(r2, r3, r4, r0,-18); loadkeys(r2, r3, r4, r0,-22);
 	                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#455: FILE: crypto/serpent.c:349:
+	S3(r0, r4, r1, r2, r3); storekeys(r2, r3, r4, r0,-18); loadkeys(r2, r3, r4, r0,-22);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#455: FILE: crypto/serpent.c:349:
+	S3(r0, r4, r1, r2, r3); storekeys(r2, r3, r4, r0,-18); loadkeys(r2, r3, r4, r0,-22);
 	                                                                              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#455: FILE: crypto/serpent.c:349:
+	S3(r0, r4, r1, r2, r3); storekeys(r2, r3, r4, r0,-18); loadkeys(r2, r3, r4, r0,-22);
 	                                                                               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#586: FILE: crypto/serpent.c:436:
+				 K (r0, r1, r2, r3, 32);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#618: FILE: crypto/serpent.c:468:
+	SI0(r4, r1, r2, r0, r3); K (r2, r3, r1, r4, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#640: FILE: crypto/serpent.c:493:
+                          unsigned int keylen)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: crypto/serpent.c:493:
+                          unsigned int keylen)$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010015.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 179 errors, 9 warnings, 120 checks, 605 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010015.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
