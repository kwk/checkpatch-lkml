WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <GPIO11_3_6MHz_MD>
#107: FILE: arch/arm/mach-pxa/clock.c:20:
+	pxa_gpio_mode(GPIO11_3_6MHz_MD);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#140: FILE: arch/arm/mach-pxa/clock.c:34:
+static struct clk_ops clk_gpio11_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#203: FILE: arch/arm/mach-pxa/clock.c:73:
+struct clk_ops clk_cken_ops = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: arch/arm/mach-pxa/clock.c:81:
+	BUG_ON(!clk->parent);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#220: FILE: arch/arm/mach-pxa/clock.c:87:
+	BUG_ON(!clk->parent);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: arch/arm/mach-pxa/clock.c:93:
+	BUG_ON(!clk->parent);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: arch/arm/mach-pxa/clock.c:99:
+	BUG_ON(!clk->parent);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dc->dev"
#270: FILE: arch/arm/mach-pxa/clock.c:108:
+	if (dc->dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#276: FILE: arch/arm/mach-pxa/clock.c:114:
+struct clk_ops clk_devck_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#297: FILE: arch/arm/mach-pxa/clock.h:1:
+#include <linux/clk.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#314: FILE: arch/arm/mach-pxa/clock.h:9:
+extern struct clk_ops clk_devck_ops;

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#345: FILE: arch/arm/mach-pxa/clock.h:22:
+extern struct clk_ops clk_cken_ops;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#359: FILE: arch/arm/mach-pxa/clock.h:26:
+	printk(KERN_ERR "Can't release static clock: %s!!!\n", clk->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: arch/arm/mach-pxa/clock.h:27:
+	BUG();

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#364: FILE: arch/arm/mach-pxa/clock.h:30:
+#define INIT_CKEN(_name, _cken, _rate, _delay)		\
+	&(struct clk_cken) {				\
+		.clk.name	= _name,		\
+		.clk.ops	= &clk_cken_ops,	\
+		.clk.release	= clk_static_release,	\
+		.cken		= CKEN_##_cken,		\
+		.rate		= _rate,		\
+		.delay		= _delay,		\
+	} .clk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#376: FILE: arch/arm/mach-pxa/clock.h:40:
+#define INIT_CK(_name, _cken, _ops)			\
+	&(struct clk_cken) {				\
+		.clk.name	= _name,		\
+		.clk.ops	= _ops,			\
+		.clk.release	= clk_static_release,	\
+		.cken		= CKEN_##_cken,		\
+	} .clk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#384: FILE: arch/arm/mach-pxa/clock.h:48:
+#define INIT_DEVCK(_name, _dev)		\
+	&(struct clk_devck) {				\
+		.clk.name	= _name,		\
+		.clk.ops	= &clk_devck_ops,	\
+		.clk.release	= clk_static_release,	\
+		.dev		= _dev,			\
+	} .clk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#402: FILE: arch/arm/mach-pxa/clock.h:57:
+#define PXA3xx_CKEN(_name, _cken, _rate, _delay)	\
+	&(struct clk_cken) {				\
+		.clk.name	= _name,		\
+		.clk.ops	= &clk_pxa3xx_cken_ops,	\
+		.clk.release	= clk_static_release,	\
+		.cken		= CKEN_##_cken,		\
+		.rate		= _rate,		\
+		.delay		= _delay,		\
+	}.clk

ERROR:SPACING: space required after that close brace '}'
#410: FILE: arch/arm/mach-pxa/clock.h:65:
+	}.clk

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#419: FILE: arch/arm/mach-pxa/clock.h:67:
+#define PXA3xx_CK(_name, _cken, _ops)			\
+	&(struct clk_cken) {				\
+		.clk.name	= _name,		\
+		.clk.ops	= _ops,			\
+		.clk.release	= clk_static_release,	\
+		.cken		= CKEN_##_cken,		\
+	}.clk

ERROR:SPACING: space required after that close brace '}'
#425: FILE: arch/arm/mach-pxa/clock.h:73:
+	}.clk

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#429: FILE: arch/arm/mach-pxa/clock.h:75:
+extern struct clk_ops clk_pxa3xx_cken_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#430: FILE: arch/arm/mach-pxa/clock.h:76:
+extern int clk_pxa3xx_cken_enable(struct clk *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#430: FILE: arch/arm/mach-pxa/clock.h:76:
+extern int clk_pxa3xx_cken_enable(struct clk *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#444: FILE: arch/arm/mach-pxa/pxa25x.c:106:
+static struct clk_ops clk_pxa25x_lcd_ops = {

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#584: FILE: arch/arm/mach-pxa/pxa27x.c:133:
+static struct clk_ops clk_pxa27x_lcd_ops = {

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#774: FILE: arch/arm/mach-pxa/pxa3xx.c:175:
+struct clk_ops clk_pxa3xx_cken_ops = {

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#781: FILE: arch/arm/mach-pxa/pxa3xx.c:181:
+static struct clk_ops clk_pxa3xx_hsio_ops = {

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#789: FILE: arch/arm/mach-pxa/pxa3xx.c:187:
+static struct clk_ops clk_pxa3xx_ac97_ops = {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#802: FILE: arch/arm/mach-pxa/pxa3xx.c:197:
+	udelay(70);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:CONST_STRUCT: struct clk_ops should normally be const
#818: FILE: arch/arm/mach-pxa/pxa3xx.c:212:
+static struct clk_ops clk_pout_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#826: FILE: arch/arm/mach-pxa/pxa3xx.c:218:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 21 warnings, 5 checks, 804 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
