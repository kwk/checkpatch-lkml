ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#109: FILE: arch/x86/kvm/mmutrace.h:12:
+#define KVM_MMU_PAGE_FIELDS \
+	__field(__u64, gfn) \
+	__field(__u32, role) \
+	__field(__u32, root_count) \
+	__field(__u32, unsync)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#115: FILE: arch/x86/kvm/mmutrace.h:18:
+#define KVM_MMU_PAGE_ASSIGN(sp)			     \
+	__entry->gfn = sp->gfn;			     \
+	__entry->role = sp->role.word;		     \
+	__entry->root_count = sp->root_count;        \
+	__entry->unsync = sp->unsync;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sp' - possible side-effects?
#115: FILE: arch/x86/kvm/mmutrace.h:18:
+#define KVM_MMU_PAGE_ASSIGN(sp)			     \
+	__entry->gfn = sp->gfn;			     \
+	__entry->role = sp->role.word;		     \
+	__entry->root_count = sp->root_count;        \
+	__entry->unsync = sp->unsync;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sp' may be better as '(sp)' to avoid precedence issues
#115: FILE: arch/x86/kvm/mmutrace.h:18:
+#define KVM_MMU_PAGE_ASSIGN(sp)			     \
+	__entry->gfn = sp->gfn;			     \
+	__entry->role = sp->role.word;		     \
+	__entry->root_count = sp->root_count;        \
+	__entry->unsync = sp->unsync;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#115: FILE: arch/x86/kvm/mmutrace.h:18:
+#define KVM_MMU_PAGE_ASSIGN(sp)			     \
+	__entry->gfn = sp->gfn;			     \
+	__entry->role = sp->role.word;		     \
+	__entry->root_count = sp->root_count;        \
+	__entry->unsync = sp->unsync;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#123: FILE: arch/x86/kvm/mmutrace.h:26:
+	static const char *access_str[] = {			        \

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: arch/x86/kvm/mmutrace.h:30:
+^I^I^I^I^I^I^I^I        \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#151: FILE: arch/x86/kvm/mmutrace.h:150:
+TRACE_EVENT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#156: FILE: arch/x86/kvm/mmutrace.h:155:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#161: FILE: arch/x86/kvm/mmutrace.h:160:
+	TP_fast_assign(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#170: FILE: arch/x86/kvm/mmutrace.h:169:
+TRACE_EVENT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#175: FILE: arch/x86/kvm/mmutrace.h:174:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#179: FILE: arch/x86/kvm/mmutrace.h:178:
+	TP_fast_assign(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#186: FILE: arch/x86/kvm/mmutrace.h:185:
+TRACE_EVENT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#191: FILE: arch/x86/kvm/mmutrace.h:190:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#195: FILE: arch/x86/kvm/mmutrace.h:194:
+	TP_fast_assign(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#202: FILE: arch/x86/kvm/mmutrace.h:201:
+TRACE_EVENT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#207: FILE: arch/x86/kvm/mmutrace.h:206:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#211: FILE: arch/x86/kvm/mmutrace.h:210:
+	TP_fast_assign(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081047.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 2 warnings, 14 checks, 173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081047.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
