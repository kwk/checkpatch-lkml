WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
Sorry, forgot to include the headers in the original patch.  Obviously these

WARNING:TYPO_SPELLING: 'peroidic' may be misspelled - perhaps 'periodic'?
#93: 
>     Polled based capture (use a peroidic timer if available)
                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Documenation' may be misspelled - perhaps 'Documentation'?
#104: 
>     Documenation ;)
      ^^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'Lots'
#110: 
>     Lots lots more....

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#131: 
--- a/include/linux/industrialio.h	1970-01-01 01:00:00.000000000 +0100

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: include/linux/industrialio.h:1:
+/* The industrial I/O core

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#151: FILE: include/linux/industrialio.h:18:
+/* Initial test drivers to implement
+   SCA3000 VTI Accelerometers (hardware ring buffers)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#160: FILE: include/linux/industrialio.h:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#167: FILE: include/linux/industrialio.h:34:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: include/linux/industrialio.h:38:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#173: FILE: include/linux/industrialio.h:40:
+/* Could maintain a list of these for rapid clean up purposes,
+   but it doesn't exactly take long to scan the array */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#173: FILE: include/linux/industrialio.h:40:
+   but it doesn't exactly take long to scan the array */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: include/linux/industrialio.h:48:
+
+

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#182: FILE: include/linux/industrialio.h:49:
+/* The actual event being pushed ot userspace */
                                  ^^

WARNING:TYPO_SPELLING: 'typicaly' may be misspelled - perhaps 'typically'?
#192: FILE: include/linux/industrialio.h:59:
+	/* Part of shared event handling - (typicaly ring buffers) */
 	                                    ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#196: FILE: include/linux/industrialio.h:63:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: include/linux/industrialio.h:68:
+	struct timespec ts;
+	ktime_get_ts(&ts);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#213: FILE: include/linux/industrialio.h:80:
+};
+/* wraps adding to lists and does reference counting to allowed shared handlers */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: include/linux/industrialio.h:87:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#223: FILE: include/linux/industrialio.h:90:
+/* This means that interrupts can be turned off when no events are being generated,
+   and also provides the interrupt handler the means to identify the incoming event */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#223: FILE: include/linux/industrialio.h:90:
+   and also provides the interrupt handler the means to identify the incoming event */

WARNING:TYPO_SPELLING: 'transparrent' may be misspelled - perhaps 'transparent'?
#226: FILE: include/linux/industrialio.h:93:
+/* Want this to be as transparrent as possible from the point of view of the driver! */
                       ^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#229: FILE: include/linux/industrialio.h:96:
+/* JIC23: This is my first serious attempt at a lock free ring buffer for this sort of
+   situation so all suggestions on this code particularly welcome! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#229: FILE: include/linux/industrialio.h:96:
+   situation so all suggestions on this code particularly welcome! */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#231: FILE: include/linux/industrialio.h:98:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: include/linux/industrialio.h:100:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ring' - possible side-effects?
#235: FILE: include/linux/industrialio.h:102:
+#define INIT_INDUSTRIALIO_RING_BUFFER(ring, _dim, _bytes, _length) {	\
+		(ring)->size = _dim*_bytes;				\
+		(ring)->skip = (ring)->size + sizeof(s64);		\
+		(ring)->length = _length;				\
+		(ring)->dimension = _dim;				\
+		(ring)->bytes = _bytes;					\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->loopcount = 0;					\
+		(ring)->data						\
+			= (unsigned char*)				\
+			(kmalloc(_length*(ring)->skip,			\
+				 GFP_KERNEL));				\
+		(ring)->shared_ev_pointer.ev_p =0;			\
+		(ring)->shared_ev_pointer.lock =			\
+			__SPIN_LOCK_UNLOCKED((ring)->shared_ev_pointer->loc); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_dim' - possible side-effects?
#235: FILE: include/linux/industrialio.h:102:
+#define INIT_INDUSTRIALIO_RING_BUFFER(ring, _dim, _bytes, _length) {	\
+		(ring)->size = _dim*_bytes;				\
+		(ring)->skip = (ring)->size + sizeof(s64);		\
+		(ring)->length = _length;				\
+		(ring)->dimension = _dim;				\
+		(ring)->bytes = _bytes;					\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->loopcount = 0;					\
+		(ring)->data						\
+			= (unsigned char*)				\
+			(kmalloc(_length*(ring)->skip,			\
+				 GFP_KERNEL));				\
+		(ring)->shared_ev_pointer.ev_p =0;			\
+		(ring)->shared_ev_pointer.lock =			\
+			__SPIN_LOCK_UNLOCKED((ring)->shared_ev_pointer->loc); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_dim' may be better as '(_dim)' to avoid precedence issues
#235: FILE: include/linux/industrialio.h:102:
+#define INIT_INDUSTRIALIO_RING_BUFFER(ring, _dim, _bytes, _length) {	\
+		(ring)->size = _dim*_bytes;				\
+		(ring)->skip = (ring)->size + sizeof(s64);		\
+		(ring)->length = _length;				\
+		(ring)->dimension = _dim;				\
+		(ring)->bytes = _bytes;					\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->loopcount = 0;					\
+		(ring)->data						\
+			= (unsigned char*)				\
+			(kmalloc(_length*(ring)->skip,			\
+				 GFP_KERNEL));				\
+		(ring)->shared_ev_pointer.ev_p =0;			\
+		(ring)->shared_ev_pointer.lock =			\
+			__SPIN_LOCK_UNLOCKED((ring)->shared_ev_pointer->loc); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_bytes' - possible side-effects?
#235: FILE: include/linux/industrialio.h:102:
+#define INIT_INDUSTRIALIO_RING_BUFFER(ring, _dim, _bytes, _length) {	\
+		(ring)->size = _dim*_bytes;				\
+		(ring)->skip = (ring)->size + sizeof(s64);		\
+		(ring)->length = _length;				\
+		(ring)->dimension = _dim;				\
+		(ring)->bytes = _bytes;					\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->loopcount = 0;					\
+		(ring)->data						\
+			= (unsigned char*)				\
+			(kmalloc(_length*(ring)->skip,			\
+				 GFP_KERNEL));				\
+		(ring)->shared_ev_pointer.ev_p =0;			\
+		(ring)->shared_ev_pointer.lock =			\
+			__SPIN_LOCK_UNLOCKED((ring)->shared_ev_pointer->loc); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_bytes' may be better as '(_bytes)' to avoid precedence issues
#235: FILE: include/linux/industrialio.h:102:
+#define INIT_INDUSTRIALIO_RING_BUFFER(ring, _dim, _bytes, _length) {	\
+		(ring)->size = _dim*_bytes;				\
+		(ring)->skip = (ring)->size + sizeof(s64);		\
+		(ring)->length = _length;				\
+		(ring)->dimension = _dim;				\
+		(ring)->bytes = _bytes;					\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->loopcount = 0;					\
+		(ring)->data						\
+			= (unsigned char*)				\
+			(kmalloc(_length*(ring)->skip,			\
+				 GFP_KERNEL));				\
+		(ring)->shared_ev_pointer.ev_p =0;			\
+		(ring)->shared_ev_pointer.lock =			\
+			__SPIN_LOCK_UNLOCKED((ring)->shared_ev_pointer->loc); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_length' - possible side-effects?
#235: FILE: include/linux/industrialio.h:102:
+#define INIT_INDUSTRIALIO_RING_BUFFER(ring, _dim, _bytes, _length) {	\
+		(ring)->size = _dim*_bytes;				\
+		(ring)->skip = (ring)->size + sizeof(s64);		\
+		(ring)->length = _length;				\
+		(ring)->dimension = _dim;				\
+		(ring)->bytes = _bytes;					\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->loopcount = 0;					\
+		(ring)->data						\
+			= (unsigned char*)				\
+			(kmalloc(_length*(ring)->skip,			\
+				 GFP_KERNEL));				\
+		(ring)->shared_ev_pointer.ev_p =0;			\
+		(ring)->shared_ev_pointer.lock =			\
+			__SPIN_LOCK_UNLOCKED((ring)->shared_ev_pointer->loc); \
+}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#236: FILE: include/linux/industrialio.h:103:
+		(ring)->size = _dim*_bytes;				\
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#246: FILE: include/linux/industrialio.h:113:
+		(ring)->data						\
+			= (unsigned char*)				\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#246: FILE: include/linux/industrialio.h:113:
+			= (unsigned char*)				\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#247: FILE: include/linux/industrialio.h:114:
+			(kmalloc(_length*(ring)->skip,			\
 			                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#249: FILE: include/linux/industrialio.h:116:
+		(ring)->shared_ev_pointer.ev_p =0;			\
 		                               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#258: FILE: include/linux/industrialio.h:125:
+			       unsigned char* data,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#262: FILE: include/linux/industrialio.h:129:
+/* Edge cases :
+   1) data at last_p is no longer valid - requires complete wrap around.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#266: FILE: include/linux/industrialio.h:133:
+      something very very weird has occured!
                                     ^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#266: FILE: include/linux/industrialio.h:133:
+      something very very weird has occured!

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: include/linux/industrialio.h:136:
+int industrialio_read_last_from_ring(struct industrialio_ring_buffer *ring,
+					    unsigned char* data);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#269: FILE: include/linux/industrialio.h:136:
+					    unsigned char* data);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#279: FILE: include/linux/industrialio.h:146:
+				 struct device *dev );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: include/linux/industrialio.h:148:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#282: FILE: include/linux/industrialio.h:149:
+void industrialio_free_ring_buffer(struct industrialio_ring_buffer* ring, struct device *dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#289: FILE: include/linux/industrialio.h:156:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: include/linux/industrialio.h:171:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#307: FILE: include/linux/industrialio.h:174:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#309: FILE: include/linux/industrialio.h:176:
+};
+/* A general ring buffer structure

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#310: FILE: include/linux/industrialio.h:177:
+/* A general ring buffer structure
+   Intended to be completely lock free as we always want fills from the interrupt

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#312: FILE: include/linux/industrialio.h:179:
+   to read from the buffer.  */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#314: FILE: include/linux/industrialio.h:181:
+struct industrialio_ring_buffer
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#315: FILE: include/linux/industrialio.h:182:
+	unsigned char*		data;

ERROR:POINTER_LOCATION: "foo*			bar" should be "foo *bar"
#328: FILE: include/linux/industrialio.h:195:
+	char*			access_minor_name;

ERROR:POINTER_LOCATION: "foo*			bar" should be "foo *bar"
#332: FILE: include/linux/industrialio.h:199:
+	char*			event_minor_name;

WARNING:TYPO_SPELLING: 'Seperate' may be misspelled - perhaps 'Separate'?
#337: FILE: include/linux/industrialio.h:204:
+/* Seperate registration functions were leading to very messy driver init */
    ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#337: FILE: include/linux/industrialio.h:204:
+};
+/* Seperate registration functions were leading to very messy driver init */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#359: FILE: include/linux/industrialio.h:226:
+^Iint ^I^I^I^Inum_interrupt_lines; /* Driver Set */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: include/linux/industrialio.h:230:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#401: FILE: include/linux/industrialio.h:268:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#403: FILE: include/linux/industrialio.h:270:
+ * chrdev */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#412: FILE: include/linux/industrialio_sysfs.h:1:
+/* The industrial I/O core

CHECK:LINE_SPACING: Please don't use multiple blank lines
#428: FILE: include/linux/industrialio_sysfs.h:17:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#435: FILE: include/linux/industrialio_sysfs.h:24:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#439: FILE: include/linux/industrialio_sysfs.h:28:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#445: FILE: include/linux/industrialio_sysfs.h:34:
+#define to_industrialio_chrdev_minor_attr(_dev_attr) \
+	container_of(_dev_attr, struct industrialio_chrdev_minor_attr, dev_attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#453: FILE: include/linux/industrialio_sysfs.h:42:
+
+

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#457: FILE: include/linux/industrialio_sysfs.h:46:
+/* Some attributes will be hard coded (device dependant) and not require an
                                               ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#458: FILE: include/linux/industrialio_sysfs.h:47:
+/* Some attributes will be hard coded (device dependant) and not require an
+   address, in these cases pass a negative */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#458: FILE: include/linux/industrialio_sysfs.h:47:
+   address, in these cases pass a negative */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#465: FILE: include/linux/industrialio_sysfs.h:54:
+	struct industrialio_dev_attr industrialio_dev_attr_##_name	\
+	= INDUSTRIALIO_ATTR(_name, _mode, _show, _store, _addr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#477: FILE: include/linux/industrialio_sysfs.h:66:
+				 S_IRUGO, _show, NULL, 0)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#499: FILE: include/linux/industrialio_sysfs.h:88:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#502: FILE: include/linux/industrialio_sysfs.h:91:
+	INDUSTRIALIO_DEVICE_ATTR(x, S_IRUGO, _show, NULL, _addr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#505: FILE: include/linux/industrialio_sysfs.h:94:
+	INDUSTRIALIO_DEVICE_ATTR(y, S_IRUGO, _show, NULL, _addr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#508: FILE: include/linux/industrialio_sysfs.h:97:
+	INDUSTRIALIO_DEVICE_ATTR(z, S_IRUGO, _show, NULL, _addr)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#514: FILE: include/linux/industrialio_sysfs.h:103:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#518: FILE: include/linux/industrialio_sysfs.h:107:
+/* How to do this. Is it valid to have sysfs elements which can be neither
+   read nor written? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: include/linux/industrialio_sysfs.h:107:
+   read nor written? */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#520: FILE: include/linux/industrialio_sysfs.h:109:
+#define INDUSTRIALIO_EVENT_SH(_name, _handler)			\
+	static struct industrialio_event_handler_list			\
+	industrialio_event_##_name = {				\
+		.handler=_handler,				\
+		.refcount = 0,					\
+	};

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#523: FILE: include/linux/industrialio_sysfs.h:112:
+		.handler=_handler,				\
 		        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_ev_list' may be better as '(_ev_list)' to avoid precedence issues
#526: FILE: include/linux/industrialio_sysfs.h:115:
+#define INDUSTRIALIO_EVENT_ATTR_SH(_name, _ev_list, _show, _store, _mask) \
+	static struct industrialio_event_attr				\
+	industrialio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\
+	    .mask = _mask,\
+	    .listel = &_ev_list };

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#526: FILE: include/linux/industrialio_sysfs.h:115:
+#define INDUSTRIALIO_EVENT_ATTR_SH(_name, _ev_list, _show, _store, _mask) \
+	static struct industrialio_event_attr				\
+	industrialio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\
+	    .mask = _mask,\
+	    .listel = &_ev_list };

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#529: FILE: include/linux/industrialio_sysfs.h:118:
+	industrialio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#529: FILE: include/linux/industrialio_sysfs.h:118:
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#534: FILE: include/linux/industrialio_sysfs.h:123:
+#define INDUSTRIALIO_EVENT_ATTR(_name, _show, _store, _mask, _handler)	\
+	static struct industrialio_event_handler_list				\
+	industrialio_event_##_name = {				\
+		.handler=_handler,					\
+	};								\
+	static struct							\
+	industrialio_event_attr						\
+	industrialio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store), \
+	    .mask = _mask,						\
+	    .listel = &industrialio_event_##_name };		\
+/*FIXME, add line number to the above?*/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#537: FILE: include/linux/industrialio_sysfs.h:126:
+		.handler=_handler,					\
 		        ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#542: FILE: include/linux/industrialio_sysfs.h:131:
+	industrialio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store), \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#542: FILE: include/linux/industrialio_sysfs.h:131:
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store), \

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#548: FILE: include/linux/industrialio_sysfs.h:137:
+/* In most of these cases, this actually corresponds to something with a
+   value attached */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#548: FILE: include/linux/industrialio_sysfs.h:137:
+   value attached */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#551: FILE: include/linux/industrialio_sysfs.h:140:
+/* For some devices you can select whether all conditions or any condition
+   must be met for interrupt generation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#551: FILE: include/linux/industrialio_sysfs.h:140:
+   must be met for interrupt generation */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#567: FILE: include/linux/industrialio_sysfs.h:156:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#595: FILE: include/linux/industrialio_sysfs.h:184:
+#define INDUSTRIALIO_EVENT_ATTR_ACCEL_Y_LOW_SH(_evlist,_show, _store, _mask)\
                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#608: FILE: include/linux/industrialio_sysfs.h:197:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: include/linux/industrialio_sysfs.h:202:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#615: FILE: include/linux/industrialio_sysfs.h:204:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#622: FILE: include/linux/spi/lis3l02dq.h:1:
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#623: FILE: include/linux/spi/lis3l02dq.h:2:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: include/linux/spi/lis3l02dq.h:4:
+  unsigned data_ready_gpio;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#625: FILE: include/linux/spi/lis3l02dq.h:4:
+  unsigned data_ready_gpio;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 47 warnings, 42 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
