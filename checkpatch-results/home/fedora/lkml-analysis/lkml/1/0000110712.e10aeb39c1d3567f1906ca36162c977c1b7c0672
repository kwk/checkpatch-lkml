WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# cat /sys/kernel/debug/x86/cpu/cpu0/tss/state

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# cat /sys/kernel/debug/x86/cpu/cpu0/cr/state

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
# cat /sys/kernel/debug/x86/cpu/cpu0/debug/state

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
# cat /sys/kernel/debug/x86/cpu/cpu0/dt/state

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
# cat /sys/kernel/debug/x86/cpu/cpu0/apic/state

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#160: 
# cat /sys/kernel/debug/x86/cpu/cpu0/apic/APIC_EFEAT/value 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#163: 
# cat /sys/kernel/debug/x86/cpu/cpu0/apic/MSR_1b/value

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#171: 
# cat /sys/kernel/debug/x86/cpu/cpu0/pmc/state

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#184: 
# cat /sys/kernel/debug/x86/cpu/cpu0/pmc/MSR_c0010006/value 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#188: 
# echo 2 >  /sys/kernel/debug/x86/cpu/cpu0/pmc/MSR_c0010006/value

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#190: 
# cat /sys/kernel/debug/x86/cpu/cpu0/pmc/MSR_c0010006/value 

WARNING:TYPO_SPELLING: 'regsiters' may be misspelled - perhaps 'registers'?
#198: 
 PCI configuration regsiters :
                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#540: 
# cat /sys/kernel/debug/x86/cpu/cpu0/pci/PCI0_000/value 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#543: 
# cat /sys/kernel/debug/x86/cpu/cpu0/therm/PCI3_0a4/value 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#551: 
# cat /sys/kernel/debug/x86/cpu/cpu0/cpuinfo/state 

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#563: 
 flags			: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow constant_tsc rep_good nonstop_tsc pni cx16 lahf_lm cmp_legacy svm extapic cr8_legacy 3dnowprefetch osvw skinit

WARNING:TYPO_SPELLING: 'intial' may be misspelled - perhaps 'initial'?
#573: 
 intial apic id		: 0
 ^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#586: 
# cat /sys/kernel/debug/x86/cpu/cpu0/cpuid/state

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '50149b2db7be15514079089d0c4efa4c7a2676bb', maybe rebased or not pulled?
#619: 
The following changes since commit 50149b2db7be15514079089d0c4efa4c7a2676bb:

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#820: FILE: arch/x86/include/asm/cpu_debug.h:86:
+	unsigned		cat;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1141: FILE: arch/x86/kernel/cpu/cpu_debug.c:339:
+static unsigned get_msr_range(unsigned cpu, unsigned *min, unsigned *max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1141: FILE: arch/x86/kernel/cpu/cpu_debug.c:339:
+static unsigned get_msr_range(unsigned cpu, unsigned *min, unsigned *max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1141: FILE: arch/x86/kernel/cpu/cpu_debug.c:339:
+static unsigned get_msr_range(unsigned cpu, unsigned *min, unsigned *max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1141: FILE: arch/x86/kernel/cpu/cpu_debug.c:339:
+static unsigned get_msr_range(unsigned cpu, unsigned *min, unsigned *max,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1147: FILE: arch/x86/kernel/cpu/cpu_debug.c:342:
+	if (cpu_msr_range[index].flag == flag) {
[...]
 	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1158: FILE: arch/x86/kernel/cpu/cpu_debug.c:385:
+		} else

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1159: FILE: arch/x86/kernel/cpu/cpu_debug.c:386:
+			seq_printf(seq, " MSR\t:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1174: FILE: arch/x86/kernel/cpu/cpu_debug.c:499:
+	seq_printf(seq, "\n");

CHECK:CAMELCASE: Avoid CamelCase: <APIC_EILVTn>
#1232: FILE: arch/x86/kernel/cpu/cpu_debug.c:528:
+				   i, apic_read(APIC_EILVTn(i)));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1234: FILE: arch/x86/kernel/cpu/cpu_debug.c:530:
+	seq_printf(seq, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1268: FILE: arch/x86/kernel/cpu/cpu_debug.c:564:
+	seq_printf(seq, " CPUID\t:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1269: FILE: arch/x86/kernel/cpu/cpu_debug.c:565:
+	seq_printf(seq, "              eax       ebx       ecx       edx\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1290: FILE: arch/x86/kernel/cpu/cpu_debug.c:586:
+	seq_printf(seq, " CPUINFO\t:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1315: FILE: arch/x86/kernel/cpu/cpu_debug.c:611:
+	seq_printf(seq, " flags\t\t\t:");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "x86_cap_flags[i]"
#1317: FILE: arch/x86/kernel/cpu/cpu_debug.c:613:
+		if (cpu_has(cpui, i) && x86_cap_flags[i] != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1328: FILE: arch/x86/kernel/cpu/cpu_debug.c:624:
+	seq_printf(seq, " power management\t:");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1345: FILE: arch/x86/kernel/cpu/cpu_debug.c:639:
+		   cpui->loops_per_jiffy/(500000/HZ),
 		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1345: FILE: arch/x86/kernel/cpu/cpu_debug.c:639:
+		   cpui->loops_per_jiffy/(500000/HZ),
 		                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1346: FILE: arch/x86/kernel/cpu/cpu_debug.c:640:
+		   (cpui->loops_per_jiffy/(5000/HZ)) % 100);
 		                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1346: FILE: arch/x86/kernel/cpu/cpu_debug.c:640:
+		   (cpui->loops_per_jiffy/(5000/HZ)) % 100);
 		                               ^

WARNING:TYPO_SPELLING: 'intial' may be misspelled - perhaps 'initial'?
#1350: FILE: arch/x86/kernel/cpu/cpu_debug.c:644:
+	seq_printf(seq, " intial apic id\t\t: %d\n", cpui->initial_apicid);
 	                  ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1396: FILE: arch/x86/kernel/cpu/cpu_debug.c:690:
+^I^Ifor (reg = cpu_amd_pci##func[i].min; ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1399: FILE: arch/x86/kernel/cpu/cpu_debug.c:693:
+^I^I^I^Iseq_printf(seq, " %03x\t: %08x\n", ^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#1421: FILE: arch/x86/kernel/cpu/cpu_debug.c:715:
+		if (dev == NULL)

WARNING:TYPO_SPELLING: 'regsiters' may be misspelled - perhaps 'registers'?
#1450: FILE: arch/x86/kernel/cpu/cpu_debug.c:744:
+	seq_printf(seq, " PCI configuration regsiters :\n");
 	                                    ^^^^^^^^^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1450: FILE: arch/x86/kernel/cpu/cpu_debug.c:744:
+	seq_printf(seq, " PCI configuration regsiters :\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1527: FILE: arch/x86/kernel/cpu/cpu_debug.c:920:
+			   unsigned file, unsigned cat, struct dentry *dentry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1527: FILE: arch/x86/kernel/cpu/cpu_debug.c:920:
+			   unsigned file, unsigned cat, struct dentry *dentry)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1550: FILE: arch/x86/kernel/cpu/cpu_debug.c:947:
+		debugfs_create_file(cpu_file[file].name, S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1559: FILE: arch/x86/kernel/cpu/cpu_debug.c:959:
+			     unsigned cat, struct dentry *dentry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1599: FILE: arch/x86/kernel/cpu/cpu_debug.c:1002:
+static void cpu_init_apic(unsigned cpu, struct dentry *dentry)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#1634: FILE: arch/x86/kernel/cpu/cpu_debug.c:1037:
+#define INIT_AMD_PCI(func) \
+static void init_amd_pci##func(unsigned cpu, struct dentry *dentry, 	\
+				struct pci_dev *dev)			\
+{									\
+	struct dentry *cdentry;						\
+	unsigned int reg, i, id;					\
+	char reg_dir[10];						\
+	u32 data;							\
+									\
+	for (i = 0; i < ARRAY_SIZE(cpu_amd_pci##func); i++) {		\
+		for (reg = cpu_amd_pci##func[i].min;			\
+		     reg <= cpu_amd_pci##func[i].max; reg++) {		\
+			if (!pci_read_config_dword(dev, reg, &data)) {	\
+				sprintf(reg_dir, "PCI%d_%03x",		\
+					func, reg);			\
+				id = cpu_amd_pci##func[i].flag;		\
+				cdentry = debugfs_create_dir(reg_dir,	\
+					per_cpu(cpu_arr[id].dentry, cpu)); \
+				cpu_create_file(cpu, 			\
+						cpu_amd_pci##func[i].flag, \
+						(func << 16) | reg,	\
+						CPU_VALUE, CPU_REG_PCI, \
+						cdentry);		\
+			}						\
+		}							\
+	}								\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1635: FILE: arch/x86/kernel/cpu/cpu_debug.c:1038:
+static void init_amd_pci##func(unsigned cpu, struct dentry *dentry, ^I\$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1635: FILE: arch/x86/kernel/cpu/cpu_debug.c:1038:
+static void init_amd_pci##func(unsigned cpu, struct dentry *dentry, 	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1652: FILE: arch/x86/kernel/cpu/cpu_debug.c:1055:
+^I^I^I^Icpu_create_file(cpu, ^I^I^I\$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1669: FILE: arch/x86/kernel/cpu/cpu_debug.c:1072:
+static void init_amd_pci(unsigned cpu, struct dentry *dentry)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->device >= 0x1100'
#1676: FILE: arch/x86/kernel/cpu/cpu_debug.c:1079:
+		if ((dev->device >= 0x1100) && (dev->device < 0x2000)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->device < 0x2000'
#1676: FILE: arch/x86/kernel/cpu/cpu_debug.c:1079:
+		if ((dev->device >= 0x1100) && (dev->device < 0x2000)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1703: FILE: arch/x86/kernel/cpu/cpu_debug.c:1106:
+static void cpu_init_pci(unsigned cpu, struct dentry *dentry)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110712.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 47 warnings, 12 checks, 1084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110712.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
