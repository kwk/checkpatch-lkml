CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/isofs/dir.c:50:
+int get_acorn_filename(struct iso_directory_record *de,
+			    char *retname, struct inode *inode)

CHECK:SPACING: No space is necessary after a cast
#105: FILE: fs/isofs/dir.c:61:
+	if ((*((unsigned char *) de) - std) != 32)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#117: FILE: fs/isofs/dir.c:69:
 	if (((de->flags[0] & 2) == 0) && (chr[13] == 0xff)
+		&& ((chr[12] & 0xf0) == 0xf0)) {

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#165: FILE: fs/isofs/dir.c:192:
+				(sbi->s_showassoc =='n' &&
 				                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#196: FILE: fs/isofs/dir.c:266:
+const struct file_operations isofs_dir_operations =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#205: FILE: fs/isofs/dir.c:275:
+const struct inode_operations isofs_dir_inode_operations =
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: fs/isofs/dir.c:279:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#235: FILE: fs/isofs/inode.c:87:
+					0, (SLAB_RECLAIM_ACCOUNT|
 					                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#262: FILE: fs/isofs/inode.c:363:
+	popt->mode = S_IRUGO | S_IXUGO; /*

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#278: FILE: fs/isofs/inode.c:508:
+			printk(KERN_DEBUG "ISOFS: Session %d start %d type %d\n",

WARNING:TYPO_SPELLING: 'Te' may be misspelled - perhaps 'The'?
#279: FILE: fs/isofs/inode.c:509:
+				session, Te.cdte_addr.lba,
 				         ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: fs/isofs/inode.c:509:
+			printk(KERN_DEBUG "ISOFS: Session %d start %d type %d\n",
+				session, Te.cdte_addr.lba,

CHECK:CAMELCASE: Avoid CamelCase: <Te>
#279: FILE: fs/isofs/inode.c:509:
+				session, Te.cdte_addr.lba,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'Te' may be misspelled - perhaps 'The'?
#280: FILE: fs/isofs/inode.c:510:
+				Te.cdte_ctrl&CDROM_DATA_TRACK);
 				^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#280: FILE: fs/isofs/inode.c:510:
+				Te.cdte_ctrl&CDROM_DATA_TRACK);
 				            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#287: FILE: fs/isofs/inode.c:515:
+		printk(KERN_ERR "ISOFS: Invalid session number or type of track\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#292: FILE: fs/isofs/inode.c:519:
+		printk(KERN_ERR "ISOFS: Invalid session number\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#295: FILE: fs/isofs/inode.c:521:
+	printk(KERN_DEBUG "isofs.inode: CDROMMULTISESSION: rc=%d\n",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: fs/isofs/inode.c:521:
+	printk(KERN_DEBUG "isofs.inode: CDROMMULTISESSION: rc=%d\n",i);
 	                                                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#299: FILE: fs/isofs/inode.c:523:
+		printk(KERN_DEBUG "isofs.inode: XA disk: %s\n",ms_info.xa_flag?"yes":"no");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: fs/isofs/inode.c:523:
+		printk(KERN_DEBUG "isofs.inode: XA disk: %s\n",ms_info.xa_flag?"yes":"no");
 		                                              ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#299: FILE: fs/isofs/inode.c:523:
+		printk(KERN_DEBUG "isofs.inode: XA disk: %s\n",ms_info.xa_flag?"yes":"no");
 		                                                              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#299: FILE: fs/isofs/inode.c:523:
+		printk(KERN_DEBUG "isofs.inode: XA disk: %s\n",ms_info.xa_flag?"yes":"no");
 		                                                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#300: FILE: fs/isofs/inode.c:524:
+		printk(KERN_DEBUG "isofs.inode: vol_desc_start = %d\n", ms_info.addr.lba);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#309: FILE: fs/isofs/inode.c:531:
+			vol_desc_start=ms_info.addr.lba;
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: fs/isofs/inode.c:582:
+	for (iso_blknum = vol_desc_start+16;
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: fs/isofs/inode.c:583:
+		iso_blknum < vol_desc_start+100; iso_blknum++) {
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#385: FILE: fs/isofs/inode.c:588:
+		if (!(bh = sb_bread(s, block)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#396: FILE: fs/isofs/inode.c:599:
+		if (strncmp (vdp->id, ISO_STANDARD_ID, sizeof vdp->id) == 0) {

WARNING:SIZEOF_PARENTHESIS: sizeof vdp->id should be sizeof(vdp->id)
#396: FILE: fs/isofs/inode.c:599:
+		if (strncmp (vdp->id, ISO_STANDARD_ID, sizeof vdp->id) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pri"
#400: FILE: fs/isofs/inode.c:603:
+				if (pri == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#425: FILE: fs/isofs/inode.c:615:
+						if (sec->escape[2] == 0x40)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#427: FILE: fs/isofs/inode.c:617:
+						else if (sec->escape[2] == 0x43)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#429: FILE: fs/isofs/inode.c:619:
+						else if (sec->escape[2] == 0x45)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#432: FILE: fs/isofs/inode.c:622:
+						printk(KERN_DEBUG "ISO 9660 Extensions: "

WARNING:SPLIT_STRING: quoted string split across lines
#433: FILE: fs/isofs/inode.c:623:
+						printk(KERN_DEBUG "ISO 9660 Extensions: "
+							"Microsoft Joliet Level %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#437: FILE: fs/isofs/inode.c:627:
+				} else {
[...]
+				sec = NULL;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#459: FILE: fs/isofs/inode.c:634:
+			if (strncmp (hdp->id, HS_STANDARD_ID, sizeof hdp->id) == 0) {

WARNING:SIZEOF_PARENTHESIS: sizeof hdp->id should be sizeof(hdp->id)
#459: FILE: fs/isofs/inode.c:634:
+			if (strncmp (hdp->id, HS_STANDARD_ID, sizeof hdp->id) == 0) {

CHECK:SPACING: No space is necessary after a cast
#492: FILE: fs/isofs/inode.c:666:
+		pri = (struct iso_primary_descriptor *) sec;

CHECK:SPACING: No space is necessary after a cast
#500: FILE: fs/isofs/inode.c:670:
+		rootp = (struct iso_directory_record *) h_pri->root_directory_record;

CHECK:SPACING: No space is necessary after a cast
#513: FILE: fs/isofs/inode.c:677:
+		rootp = (struct iso_directory_record *) pri->root_directory_record;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#534: FILE: fs/isofs/inode.c:698:
+	case  512: sbi->s_log_zone_size =  9; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#535: FILE: fs/isofs/inode.c:699:
+	case 1024: sbi->s_log_zone_size = 10; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#536: FILE: fs/isofs/inode.c:700:
+	case 2048: sbi->s_log_zone_size = 11; break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#574: FILE: fs/isofs/inode.c:725:
+	printk(KERN_DEBUG "ISOFS: Max size:%ld   Log zone size:%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: fs/isofs/inode.c:726:
+	printk(KERN_DEBUG "ISOFS: Max size:%ld   Log zone size:%ld\n",
+		sbi->s_max_size, 1UL << sbi->s_log_zone_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#576: FILE: fs/isofs/inode.c:727:
+	printk(KERN_DEBUG "ISOFS: First datazone:%ld\n", sbi->s_firstdatazone);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#579: FILE: fs/isofs/inode.c:729:
+		printk(KERN_DEBUG "ISOFS: Disc in High Sierra format.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#608: FILE: fs/isofs/inode.c:828:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#643: FILE: fs/isofs/inode.c:869:
+	printk(KERN_WARNING "%s: root inode not initialized\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#647: FILE: fs/isofs/inode.c:872:
+	printk(KERN_WARNING "%s: get root inode failed\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#658: FILE: fs/isofs/inode.c:881:
+	printk(KERN_WARNING "%s: bread failed, dev=%s, iso_blknum=%d, block=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: fs/isofs/inode.c:882:
+	printk(KERN_WARNING "%s: bread failed, dev=%s, iso_blknum=%d, block=%d\n",
+		__func__, s->s_id, iso_blknum, block);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#663: FILE: fs/isofs/inode.c:885:
+	printk(KERN_WARNING "ISOFS: Bad logical zone size %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: fs/isofs/inode.c:886:
+	printk(KERN_WARNING "ISOFS: Bad logical zone size %ld\n",
 		sbi->s_log_zone_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#668: FILE: fs/isofs/inode.c:889:
+	printk(KERN_WARNING "ISOFS: Logical zone size(%d) < hardware blocksize(%u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: fs/isofs/inode.c:890:
+	printk(KERN_WARNING "ISOFS: Logical zone size(%d) < hardware blocksize(%u)\n",
 		orig_zonesize, opt.blocksize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#674: FILE: fs/isofs/inode.c:894:
+		printk(KERN_WARNING "ISOFS: Unable to identify CD-ROM format.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#692: FILE: fs/isofs/inode.c:941:
+		printk(KERN_DEBUG "%s: block number too large\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#722: FILE: fs/isofs/inode.c:963:
+			printk(KERN_DEBUG "%s: block >= EOF (%ld, %ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: fs/isofs/inode.c:964:
+			printk(KERN_DEBUG "%s: block >= EOF (%ld, %ld)\n",
+				__func__, iblock, (unsigned long) inode->i_size);

CHECK:SPACING: No space is necessary after a cast
#723: FILE: fs/isofs/inode.c:964:
+				__func__, iblock, (unsigned long) inode->i_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#740: FILE: fs/isofs/inode.c:986:
+				printk(KERN_DEBUG "%s: More than 100 file sections ?!?"

WARNING:SPLIT_STRING: quoted string split across lines
#741: FILE: fs/isofs/inode.c:987:
+				printk(KERN_DEBUG "%s: More than 100 file sections ?!?"
+					" aborting...\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#742: FILE: fs/isofs/inode.c:988:
+				printk(KERN_DEBUG "%s: block=%ld firstext=%u sect_size=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#743: FILE: fs/isofs/inode.c:989:
+				printk(KERN_DEBUG "%s: block=%ld firstext=%u sect_size=%u "
+					"nextblk=%lu nextoff=%lu\n", __func__,

CHECK:SPACING: No space is necessary after a cast
#744: FILE: fs/isofs/inode.c:990:
+					iblock, firstext, (unsigned) sect_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#744: FILE: fs/isofs/inode.c:990:
+					iblock, firstext, (unsigned) sect_size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#766: FILE: fs/isofs/inode.c:1021:
+		printk(KERN_DEBUG "%s: Kernel tries to allocate a block\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#801: FILE: fs/isofs/inode.c:1174:
+	printk(KERN_INFO "%s: More than 100 file sections ?!?, aborting...\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#825: FILE: fs/isofs/inode.c:1209:
+			printk(KERN_INFO "%s: out of memory\n", __func__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#825: FILE: fs/isofs/inode.c:1209:
 		if (tmpde == NULL) {
+			printk(KERN_INFO "%s: out of memory\n", __func__);

ERROR:SPACING: space required before the open parenthesis '('
#873: FILE: fs/isofs/inode.c:1253:
+		if(isofs_read_level3_size(inode))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#888: FILE: fs/isofs/inode.c:1271:
+		printk(KERN_DEBUG "ISOFS: Interleaved files not (yet) supported.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#897: FILE: fs/isofs/inode.c:1278:
+		printk(KERN_DEBUG "ISOFS: File unit size != 0 for ISO file (%ld).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: fs/isofs/inode.c:1279:
+		printk(KERN_DEBUG "ISOFS: File unit size != 0 for ISO file (%ld).\n",
+			inode->i_ino);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#907: FILE: fs/isofs/inode.c:1286:
+		printk(KERN_DEBUG "ISOFS: Unusual flag settings for ISO file "

WARNING:SPLIT_STRING: quoted string split across lines
#908: FILE: fs/isofs/inode.c:1287:
+		printk(KERN_DEBUG "ISOFS: Unusual flag settings for ISO file "
+				"(%ld %x).\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#942: FILE: fs/isofs/inode.c:1364:
 	return (i->i_iget5_block == d->block)
+		&& (i->i_iget5_offset == d->offset);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#980: FILE: fs/isofs/joliet.c:88:
+	if ((len > 2) && (outname[len-2] == ';') && (outname[len-1] == '1'))
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#980: FILE: fs/isofs/joliet.c:88:
+	if ((len > 2) && (outname[len-2] == ';') && (outname[len-1] == '1'))
 	                                                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 2'
#980: FILE: fs/isofs/joliet.c:88:
+	if ((len > 2) && (outname[len-2] == ';') && (outname[len-1] == '1'))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#989: FILE: fs/isofs/joliet.c:95:
+	while (len >= 2 && (outname[len-1] == '.'))
 	                               ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1063: FILE: fs/isofs/namei.c:158:
+struct dentry *isofs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                                         ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000428443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 45 warnings, 29 checks, 973 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000428443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
