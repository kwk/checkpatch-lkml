WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#51: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: arch/microblaze/include/asm/module.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#86: FILE: arch/microblaze/include/asm/module.h:31:
+#define Elf_Shdr	Elf32_Shdr

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#86: FILE: arch/microblaze/include/asm/module.h:31:
+#define Elf_Shdr	Elf32_Shdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#87: FILE: arch/microblaze/include/asm/module.h:32:
+#define Elf_Sym		Elf32_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#87: FILE: arch/microblaze/include/asm/module.h:32:
+#define Elf_Sym		Elf32_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#88: FILE: arch/microblaze/include/asm/module.h:33:
+#define Elf_Ehdr	Elf32_Ehdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#88: FILE: arch/microblaze/include/asm/module.h:33:
+#define Elf_Ehdr	Elf32_Ehdr

WARNING:NEW_TYPEDEFS: do not add new typedefs
#90: FILE: arch/microblaze/include/asm/module.h:35:
+typedef struct { volatile int counter; } module_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#90: FILE: arch/microblaze/include/asm/module.h:35:
+typedef struct { volatile int counter; } module_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#99: FILE: arch/microblaze/kernel/microblaze_ksyms.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#127: FILE: arch/microblaze/kernel/microblaze_ksyms.c:29:
+extern void __ashrdi3(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#129: FILE: arch/microblaze/kernel/microblaze_ksyms.c:31:
+extern void __divsi3(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#131: FILE: arch/microblaze/kernel/microblaze_ksyms.c:33:
+extern void __lshrdi3(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#133: FILE: arch/microblaze/kernel/microblaze_ksyms.c:35:
+extern void __modsi3(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#135: FILE: arch/microblaze/kernel/microblaze_ksyms.c:37:
+extern void __mulsi3(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#137: FILE: arch/microblaze/kernel/microblaze_ksyms.c:39:
+extern void __muldi3(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#139: FILE: arch/microblaze/kernel/microblaze_ksyms.c:41:
+extern void __ucmpdi2(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#141: FILE: arch/microblaze/kernel/microblaze_ksyms.c:43:
+extern void __udivsi3(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#143: FILE: arch/microblaze/kernel/microblaze_ksyms.c:45:
+extern void __umodsi3(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: arch/microblaze/kernel/module.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#166: FILE: arch/microblaze/kernel/module.c:16:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: arch/microblaze/kernel/module.c:21:
+	void *ret;
+	ret = (size == 0) ? NULL : vmalloc(size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#172: FILE: arch/microblaze/kernel/module.c:22:
+	pr_debug("module_alloc (%08lx@%08lx)\n", size, (unsigned long int)ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'module_alloc', this function's name, in a string
#172: FILE: arch/microblaze/kernel/module.c:22:
+	pr_debug("module_alloc (%08lx@%08lx)\n", size, (unsigned long int)ret);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'module_free', this function's name, in a string
#178: FILE: arch/microblaze/kernel/module.c:28:
+	pr_debug("module_free(%s,%08lx)\n", module->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: arch/microblaze/kernel/module.c:29:
+	pr_debug("module_free(%s,%08lx)\n", module->name,
+					(unsigned long)region);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: arch/microblaze/kernel/module.c:34:
+int module_frob_arch_sections(Elf_Ehdr *hdr,
+				Elf_Shdr *sechdrs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: arch/microblaze/kernel/module.c:42:
+int apply_relocate(Elf32_Shdr *sechdrs, const char *strtab,
+	unsigned int symindex, unsigned int relsec, struct module *module)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#194: FILE: arch/microblaze/kernel/module.c:44:
+	printk(KERN_ERR "module %s: ADD RELOCATION unsupported\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: arch/microblaze/kernel/module.c:45:
+	printk(KERN_ERR "module %s: ADD RELOCATION unsupported\n",
+		module->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: arch/microblaze/kernel/module.c:50:
+int apply_relocate_add(Elf32_Shdr *sechdrs, const char *strtab,
+	unsigned int symindex, unsigned int relsec, struct module *module)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#202: FILE: arch/microblaze/kernel/module.c:52:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Rela>
#204: FILE: arch/microblaze/kernel/module.c:54:
+	Elf32_Rela *rela = (void *)sechdrs[relsec].sh_addr;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#206: FILE: arch/microblaze/kernel/module.c:56:
+	unsigned long int *location;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#207: FILE: arch/microblaze/kernel/module.c:57:
+	unsigned long int locoffs;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#208: FILE: arch/microblaze/kernel/module.c:58:
+	unsigned long int value;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#210: FILE: arch/microblaze/kernel/module.c:60:
+	unsigned long int old_value;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: arch/microblaze/kernel/module.c:64:
+	pr_debug("Applying add relocation section %u to %u\n",
+		relsec, sechdrs[relsec].sh_info);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#217: FILE: arch/microblaze/kernel/module.c:67:
+	for (i = 0; i < sechdrs[relsec].sh_size / sizeof(*rela); i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#225: FILE: arch/microblaze/kernel/module.c:75:
+		switch (ELF32_R_TYPE(rela[i].r_info)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: arch/microblaze/kernel/module.c:89:
+			pr_debug("R_MICROBLAZE_32 (%08lx->%08lx)\n",
+				old_value, value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: arch/microblaze/kernel/module.c:108:
+			pr_debug("R_MICROBLAZE_64 (%08lx->%08lx)\n",
+				old_value, value);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#265: FILE: arch/microblaze/kernel/module.c:115:
+			value -= (unsigned long int)(location) + 4 +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: arch/microblaze/kernel/module.c:122:
+			pr_debug("R_MICROBLAZE_64_PCREL (%08lx)\n",
+				value);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#280: FILE: arch/microblaze/kernel/module.c:130:
+			printk(KERN_ERR "module %s: "

WARNING:SPLIT_STRING: quoted string split across lines
#281: FILE: arch/microblaze/kernel/module.c:131:
+			printk(KERN_ERR "module %s: "
+				"Unknown relocation: %u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: arch/microblaze/kernel/module.c:141:
+int module_finalize(const Elf32_Ehdr *hdr, const Elf_Shdr *sechdrs,
+		struct module *module)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152870.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 21 checks, 231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152870.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
