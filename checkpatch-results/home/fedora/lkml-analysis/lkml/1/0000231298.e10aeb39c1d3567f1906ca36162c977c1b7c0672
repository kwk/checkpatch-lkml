WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
It's definitely a bug that can usefully be fixed, but I think it's not quite as critical as you suggest.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#160: FILE: kernel/cgroup.c:2087:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: kernel/cgroup.c:2110:
+		int i;
+		while (index < end) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: kernel/cgroup.c:2112:
+			int mid = (index + end) / 2;
+			if (cgrp->tasks_pids[mid] == pid) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#191: FILE: kernel/cgroup.c:2112:
+			if (cgrp->tasks_pids[mid] == pid) {
[...]
+			} else if (cgrp->tasks_pids[mid] <= pid)
[...]
+			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: kernel/cgroup.c:2133:
+	struct cgroup *cgrp = s->private;
+	up_read(&cgrp->pids_mutex);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#228: FILE: kernel/cgroup.c:2149:
+		return NULL;
+	} else {

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#242: FILE: kernel/cgroup.c:2160:
+static struct seq_operations cgroup_tasks_seq_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: kernel/cgroup.c:2170:
+	BUG_ON(!cgrp->pids_use_count);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONST_STRUCT: struct file_operations should normally be const
#272: FILE: kernel/cgroup.c:2190:
+static struct file_operations cgroup_tasks_operations = {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#356: FILE: kernel/cgroup.c:2220:
+	pidarray = kmalloc(npids * sizeof(pid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000231298.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 2 checks, 311 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000231298.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
