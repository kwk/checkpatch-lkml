WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#87: FILE: include/linux/checkpoint_hdr.h:371:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#93: FILE: include/linux/checkpoint_hdr.h:377:
+} __attribute__((aligned(8)));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#128: FILE: ipc/checkpoint.c:111:
+#if 0 /* NEXT FEW PATCHES */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#142: FILE: ipc/checkpoint.c:223:
+#if 0 /* NEXT FEW PATCHES */

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#147: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: ipc/checkpoint_msg.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: ipc/checkpoint_msg.c:55:
+	ckpt_debug("msg: lspid %d rspid %d qnum %lld qbytes %lld\n",
+		 h->q_lspid, h->q_lrpid, h->q_qnum, h->q_qbytes);

CHECK:SPACING: No space is necessary after a cast
#231: FILE: ipc/checkpoint_msg.c:80:
+	len = min(total, (int) DATALEN_MSG);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(int, total, DATALEN_MSG)
#231: FILE: ipc/checkpoint_msg.c:80:
+	len = min(total, (int) DATALEN_MSG);

CHECK:SPACING: No space is necessary after a cast
#240: FILE: ipc/checkpoint_msg.c:89:
+		len = min(total, (int) DATALEN_SEG);

WARNING:MINMAX: min() should probably be min_t(int, total, DATALEN_SEG)
#240: FILE: ipc/checkpoint_msg.c:89:
+		len = min(total, (int) DATALEN_SEG);

CHECK:SPACING: No space is necessary after a cast
#293: FILE: ipc/checkpoint_msg.c:142:
+	struct ckpt_ctx *ctx = (struct ckpt_ctx *) data;

CHECK:SPACING: No space is necessary after a cast
#294: FILE: ipc/checkpoint_msg.c:143:
+	struct kern_ipc_perm *perm = (struct kern_ipc_perm *) p;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: ipc/checkpoint_msg.c:168:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: ipc/checkpoint_msg.c:184:
+	ckpt_debug("msq: lspid %d lrpid %d qnum %lld qbytes %lld\n",
+		 h->q_lspid, h->q_lrpid, h->q_qnum, h->q_qbytes);

CHECK:SPACING: No space is necessary after a cast
#359: FILE: ipc/checkpoint_msg.c:208:
+		return (struct msg_msg *) h;

CHECK:SPACING: No space is necessary after a cast
#368: FILE: ipc/checkpoint_msg.c:217:
+	len = min(total, (int) DATALEN_MSG);

WARNING:MINMAX: min() should probably be min_t(int, total, DATALEN_MSG)
#368: FILE: ipc/checkpoint_msg.c:217:
+	len = min(total, (int) DATALEN_MSG);

CHECK:SPACING: No space is necessary after a cast
#383: FILE: ipc/checkpoint_msg.c:232:
+		len = min(total, (int) DATALEN_SEG);

WARNING:MINMAX: min() should probably be min_t(int, total, DATALEN_SEG)
#383: FILE: ipc/checkpoint_msg.c:232:
+		len = min(total, (int) DATALEN_SEG);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: ipc/checkpoint_msg.c:325:
+	ckpt_debug("msg: do_msgget key %d flag %#x id %d\n",
+		 h->perms.key, msgflag, h->perms.id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: ipc/checkpoint_msg.c:335:
+	BUG_ON(IS_ERR(perms));	/* ipc_ns is private to us */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#489: FILE: ipc/checkpoint_msg.c:338:
+	BUG_ON(!list_empty(&msq->q_messages));	/* ipc_ns is private to us */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#523: FILE: ipc/util.h:200:
+extern int checkpoint_ipc_msg(int id, void *p, void *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#524: FILE: ipc/util.h:201:
+extern int restore_ipc_msg(struct ckpt_ctx *ctx);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 13 checks, 439 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
