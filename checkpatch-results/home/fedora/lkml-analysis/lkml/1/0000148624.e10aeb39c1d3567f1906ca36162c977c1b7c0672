WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
core_scsi3_emulate_pro_preempt() and core_tmr_lun_reset() using existing TAS

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# The same /sys/kernel/config/target/core/$HBA/$DEV Linux LVM object mapped across

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# two different LIO-Target iSCSI target ports

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
# Register both ports

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
# Create a write exclusive, registrants only persistent reservation

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
# Preempt the reservation on /dev/sdf using /dev/sde's reservation key..

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# Re-Register on the port that has been preempted

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#126: 
# Preempt the reservation on /dev/sde using /dev/sdf's reservation key..

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#152: 
SPC-3 PR [iSCSI] Service Action: implict RELEASE cleared reservation holder TYPE: Write Exclusive Access, Registrants Only ALL_TG_PT: 1
                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#249: FILE: drivers/lio-core/target_core_pr.c:372:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: drivers/lio-core/target_core_pr.c:805:
+			__core_scsi3_free_registration(SE_DEV(cmd), pr_reg,
+							NULL, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: drivers/lio-core/target_core_pr.c:1306:
+		__core_scsi3_free_registration(dev, pr_reg, NULL,
+					calling_it_nexus);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#376: FILE: drivers/lio-core/target_core_pr.c:1352:
+	printk(KERN_INFO "SPC-3 PR [%s] Service Action: PREEMPT%s created new"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#384: FILE: drivers/lio-core/target_core_pr.c:1357:
+	printk(KERN_INFO "SPC-3 PR [%s] PREEMPT%s from Node: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/lio-core/target_core_pr.c:1358:
+	printk(KERN_INFO "SPC-3 PR [%s] PREEMPT%s from Node: %s\n",
+		tfo->get_fabric_name(), (abort) ? "_AND_ABORT" : "",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: drivers/lio-core/target_core_pr.c:1367:
+		list_add_tail(&pr_reg->pr_reg_abort_list,
+				preempt_and_abort_list);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#397: FILE: drivers/lio-core/target_core_pr.c:1370:
+static void core_scsi3_release_preempt_and_abort(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: drivers/lio-core/target_core_pr.c:1377:
+	list_for_each_entry_safe(pr_reg, pr_reg_tmp, preempt_and_abort_list,
+				pr_reg_abort_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#405: FILE: drivers/lio-core/target_core_pr.c:1378:
+				pr_reg_abort_list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#410: FILE: drivers/lio-core/target_core_pr.c:1383:
+			printk(KERN_WARNING "pr_reg->pr_res_holder still set\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#420: FILE: drivers/lio-core/target_core_pr.c:1393:
+int core_scsi3_check_cdb_abort_and_preempt(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: drivers/lio-core/target_core_pr.c:1400:
+	list_for_each_entry_safe(pr_reg, pr_reg_tmp, preempt_and_abort_list,
+				pr_reg_abort_list) {

WARNING:SPLIT_STRING: quoted string split across lines
#458: FILE: drivers/lio-core/target_core_pr.c:1438:
 		printk(KERN_ERR "SPC-3 PR: Unable to locate"
+			" PR_REGISTERED *pr_reg for PREEMPT%s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: drivers/lio-core/target_core_pr.c:1537:
+				__core_scsi3_free_registration(dev, pr_reg,
+					(abort) ? &preempt_and_abort_list :

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#504: FILE: drivers/lio-core/target_core_pr.c:1570:
+				core_scsi3_release_preempt_and_abort(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: drivers/lio-core/target_core_pr.c:1611:
+		__core_scsi3_complete_pro_release(dev,
+				pr_res_holder->pr_reg_nacl,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: drivers/lio-core/target_core_pr.c:1654:
+	__core_scsi3_complete_pro_preempt(dev, pr_reg_n,
+			(abort) ? &preempt_and_abort_list : NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: drivers/lio-core/target_core_pr.c:1698:
+		core_scsi3_release_preempt_and_abort(&preempt_and_abort_list,
+						pr_reg_n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: drivers/lio-core/target_core_pr.h:49:
+extern int core_scsi3_check_cdb_abort_and_preempt(struct list_head *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#659: FILE: drivers/lio-core/target_core_pr.h:49:
+extern int core_scsi3_check_cdb_abort_and_preempt(struct list_head *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#659: FILE: drivers/lio-core/target_core_pr.h:49:
+extern int core_scsi3_check_cdb_abort_and_preempt(struct list_head *,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#688: FILE: drivers/lio-core/target_core_tmr.c:98:
+int core_tmr_lun_reset(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: drivers/lio-core/target_core_tmr.c:140:
+	DEBUG_LR("LUN_RESET: %s starting for [%s], tas: %d\n",
+		(preempt_and_abort_list) ? "Preempt" : "TMR",

WARNING:TYPO_SPELLING: 'regisration' may be misspelled - perhaps 'registration'?
#737: FILE: drivers/lio-core/target_core_tmr.c:162:
+		 * skip non regisration key matching TMRs.
 		            ^^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'preempt_and_abort_list != NULL'
#739: FILE: drivers/lio-core/target_core_tmr.c:164:
+		if ((preempt_and_abort_list != NULL) &&
+		    (core_scsi3_check_cdb_abort_and_preempt(
+					preempt_and_abort_list, cmd) != 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "preempt_and_abort_list"
#739: FILE: drivers/lio-core/target_core_tmr.c:164:
+		if ((preempt_and_abort_list != NULL) &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#740: FILE: drivers/lio-core/target_core_tmr.c:165:
+		    (core_scsi3_check_cdb_abort_and_preempt(

WARNING:SPLIT_STRING: quoted string split across lines
#748: FILE: drivers/lio-core/target_core_tmr.c:171:
+		DEBUG_LR("LUN_RESET: %s releasing TMR %p Function: 0x%02x,"
+			" Response: 0x%02x, t_state: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: drivers/lio-core/target_core_tmr.c:202:
+	list_for_each_entry_safe(task, task_tmp, &dev->state_task_list,
+				t_state_list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'preempt_and_abort_list != NULL'
#771: FILE: drivers/lio-core/target_core_tmr.c:219:
+		if ((preempt_and_abort_list != NULL) &&
+		    (core_scsi3_check_cdb_abort_and_preempt(
+					preempt_and_abort_list, cmd) != 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "preempt_and_abort_list"
#771: FILE: drivers/lio-core/target_core_tmr.c:219:
+		if ((preempt_and_abort_list != NULL) &&

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#772: FILE: drivers/lio-core/target_core_tmr.c:220:
+		    (core_scsi3_check_cdb_abort_and_preempt(

WARNING:SPLIT_STRING: quoted string split across lines
#790: FILE: drivers/lio-core/target_core_tmr.c:235:
+		DEBUG_LR("LUN_RESET: %s cmd: %p task: %p ITT/CmdSN: 0x%08x/"
+			"0x%08x, i_state: %d, t_state/def_t_state: %d/%d cdb:"

WARNING:SPLIT_STRING: quoted string split across lines
#791: FILE: drivers/lio-core/target_core_tmr.c:236:
+			"0x%08x, i_state: %d, t_state/def_t_state: %d/%d cdb:"
+			" 0x%02x\n", (preempt_and_abort_list) ? "Preempt" : "",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#800: FILE: drivers/lio-core/target_core_tmr.c:240:
+		DEBUG_LR("LUN_RESET: ITT[0x%08x] - pr_res_key: 0x%016Lx"

WARNING:SPLIT_STRING: quoted string split across lines
#801: FILE: drivers/lio-core/target_core_tmr.c:241:
+		DEBUG_LR("LUN_RESET: ITT[0x%08x] - pr_res_key: 0x%016Lx"
+			" t_task_cdbs: %d t_task_cdbs_left: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#802: FILE: drivers/lio-core/target_core_tmr.c:242:
+			" t_task_cdbs: %d t_task_cdbs_left: %d"
+			" t_task_cdbs_sent: %d -- t_transport_active: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#803: FILE: drivers/lio-core/target_core_tmr.c:243:
+			" t_task_cdbs_sent: %d -- t_transport_active: %d"
+			" t_transport_stop: %d t_transport_sent: %d\n",

WARNING:SPLIT_STRING: quoted string split across lines
#821: FILE: drivers/lio-core/target_core_tmr.c:284:
 			DEBUG_LR("LUN_RESET: got t_transport_active = 1 for"
+				" task: %p, t_fe_count: %d dev: %p\n", task,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: drivers/lio-core/target_core_tmr.c:287:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+						flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#825: FILE: drivers/lio-core/target_core_tmr.c:288:
+			if (fe_count) {
[...]
 				transport_cmd_finish_abort(cmd, 0);
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmr_nacl != NULL'
#830: FILE: drivers/lio-core/target_core_tmr.c:292:
+				if (((tmr_nacl != NULL) &&
+				     (tmr_nacl == cmd->se_sess->se_node_acl)) ||
 				     tas)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmr_nacl == cmd->se_sess->se_node_acl'
#830: FILE: drivers/lio-core/target_core_tmr.c:292:
+				if (((tmr_nacl != NULL) &&
+				     (tmr_nacl == cmd->se_sess->se_node_acl)) ||
 				     tas)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmr_nacl"
#830: FILE: drivers/lio-core/target_core_tmr.c:292:
+				if (((tmr_nacl != NULL) &&

CHECK:BRACES: Unbalanced braces around else statement
#839: FILE: drivers/lio-core/target_core_tmr.c:297:
+			} else

WARNING:SPLIT_STRING: quoted string split across lines
#848: FILE: drivers/lio-core/target_core_tmr.c:304:
 		DEBUG_LR("LUN_RESET: Got t_transport_active = 0 for task: %p,"
+			" t_fe_count: %d dev: %p\n", task, fe_count, dev);

CHECK:BRACES: braces {} should be used on all arms of this statement
#854: FILE: drivers/lio-core/target_core_tmr.c:307:
+		if (fe_count) {
[...]
 			transport_cmd_finish_abort(cmd, 0);
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmr_nacl != NULL'
#859: FILE: drivers/lio-core/target_core_tmr.c:311:
+			if (((tmr_nacl != NULL) &&
+			    (tmr_nacl == cmd->se_sess->se_node_acl)) || tas)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmr_nacl == cmd->se_sess->se_node_acl'
#859: FILE: drivers/lio-core/target_core_tmr.c:311:
+			if (((tmr_nacl != NULL) &&
+			    (tmr_nacl == cmd->se_sess->se_node_acl)) || tas)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmr_nacl"
#859: FILE: drivers/lio-core/target_core_tmr.c:311:
+			if (((tmr_nacl != NULL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#860: FILE: drivers/lio-core/target_core_tmr.c:312:
+			if (((tmr_nacl != NULL) &&
+			    (tmr_nacl == cmd->se_sess->se_node_acl)) || tas)

CHECK:BRACES: Unbalanced braces around else statement
#867: FILE: drivers/lio-core/target_core_tmr.c:315:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "preempt_and_abort_list"
#889: FILE: drivers/lio-core/target_core_tmr.c:336:
+			if (preempt_and_abort_list != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'preempt_and_abort_list != NULL'
#901: FILE: drivers/lio-core/target_core_tmr.c:348:
+		if ((preempt_and_abort_list != NULL) &&
+		    (core_scsi3_check_cdb_abort_and_preempt(
+					preempt_and_abort_list, cmd) != 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "preempt_and_abort_list"
#901: FILE: drivers/lio-core/target_core_tmr.c:348:
+		if ((preempt_and_abort_list != NULL) &&

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#902: FILE: drivers/lio-core/target_core_tmr.c:349:
+		    (core_scsi3_check_cdb_abort_and_preempt(

WARNING:SPLIT_STRING: quoted string split across lines
#922: FILE: drivers/lio-core/target_core_tmr.c:367:
+		DEBUG_LR("LUN_RESET: %s from Device Queue: cmd: %p t_state:"
+			" %d t_fe_count: %d\n", (preempt_and_abort_list) ?

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmr_nacl != NULL'
#931: FILE: drivers/lio-core/target_core_tmr.c:375:
+			if (((tmr_nacl != NULL) &&
+			     (tmr_nacl == cmd->se_sess->se_node_acl)) ||
+			      tas)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmr_nacl == cmd->se_sess->se_node_acl'
#931: FILE: drivers/lio-core/target_core_tmr.c:375:
+			if (((tmr_nacl != NULL) &&
+			     (tmr_nacl == cmd->se_sess->se_node_acl)) ||
+			      tas)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmr_nacl"
#931: FILE: drivers/lio-core/target_core_tmr.c:375:
+			if (((tmr_nacl != NULL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: drivers/lio-core/target_core_tmr.c:392:
+	DEBUG_LR("LUN_RESET: %s for [%s] Complete\n",
+			(preempt_and_abort_list) ? "Preempt" : "TMR",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: drivers/lio-core/target_core_tmr.h:40:
+extern int core_tmr_lun_reset(struct se_device_s *, struct se_tmr_req_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#964: FILE: drivers/lio-core/target_core_tmr.h:40:
+extern int core_tmr_lun_reset(struct se_device_s *, struct se_tmr_req_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_tmr_req_s *' should also have an identifier name
#964: FILE: drivers/lio-core/target_core_tmr.h:40:
+extern int core_tmr_lun_reset(struct se_device_s *, struct se_tmr_req_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#964: FILE: drivers/lio-core/target_core_tmr.h:40:
+extern int core_tmr_lun_reset(struct se_device_s *, struct se_tmr_req_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#964: FILE: drivers/lio-core/target_core_tmr.h:40:
+extern int core_tmr_lun_reset(struct se_device_s *, struct se_tmr_req_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: drivers/lio-core/target_core_tmr.h:41:
+extern int core_tmr_lun_reset(struct se_device_s *, struct se_tmr_req_s *,
+				struct list_head *, struct se_cmd_s *);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#977: FILE: drivers/lio-core/target_core_transport.c:7360:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#978: FILE: drivers/lio-core/target_core_transport.c:7361:
+	printk(KERN_INFO "Setting SAM_STAT_TASK_ABORTED status for CDB: 0x%02x,"

WARNING:SPLIT_STRING: quoted string split across lines
#979: FILE: drivers/lio-core/target_core_transport.c:7362:
+	printk(KERN_INFO "Setting SAM_STAT_TASK_ABORTED status for CDB: 0x%02x,"
+		" ITT: 0x%08x\n", T_TASK(cmd)->t_task_cdb[0],

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148624.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 34 warnings, 46 checks, 737 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148624.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
