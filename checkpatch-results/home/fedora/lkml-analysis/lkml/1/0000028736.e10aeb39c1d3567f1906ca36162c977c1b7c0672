CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: fs/xfs/linux-2.6/xfs_trace.h:37:
+DECLARE_EVENT_CLASS(xfs__attr_list,
+	TP_PROTO(struct xfs_attr_list_context *ctx),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#105: FILE: fs/xfs/linux-2.6/xfs_trace.h:39:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#118: FILE: fs/xfs/linux-2.6/xfs_trace.h:52:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: fs/xfs/linux-2.6/xfs_trace.h:65:
+	TP_printk("dev %d:%d ino 0x%llx cursor h/b/o 0x%x/0x%x/%u dupcnt %u "
+		  "alist 0x%p size %u count %u firstu %u flags %d %s",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#202: FILE: fs/xfs/linux-2.6/xfs_trace.h:186:
+DECLARE_EVENT_CLASS(xfs__bmap,
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx, int state,
+		 unsigned long caller_ip),
+	TP_ARGS(ip, idx, state, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: fs/xfs/linux-2.6/xfs_trace.h:187:
+DECLARE_EVENT_CLASS(xfs__bmap,
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx, int state,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#203: FILE: fs/xfs/linux-2.6/xfs_trace.h:187:
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx, int state,
+		 unsigned long caller_ip),
+	TP_ARGS(ip, idx, state, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#204: FILE: fs/xfs/linux-2.6/xfs_trace.h:188:
+		 unsigned long caller_ip),
+	TP_ARGS(ip, idx, state, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#205: FILE: fs/xfs/linux-2.6/xfs_trace.h:189:
+	TP_ARGS(ip, idx, state, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#206: FILE: fs/xfs/linux-2.6/xfs_trace.h:190:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#206: FILE: fs/xfs/linux-2.6/xfs_trace.h:190:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#207: FILE: fs/xfs/linux-2.6/xfs_trace.h:191:
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#208: FILE: fs/xfs/linux-2.6/xfs_trace.h:192:
+		__field(xfs_ino_t, ino)
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#209: FILE: fs/xfs/linux-2.6/xfs_trace.h:193:
+		__field(xfs_extnum_t, idx)
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#210: FILE: fs/xfs/linux-2.6/xfs_trace.h:194:
+		__field(xfs_fileoff_t, startoff)
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#211: FILE: fs/xfs/linux-2.6/xfs_trace.h:195:
+		__field(xfs_fsblock_t, startblock)
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#212: FILE: fs/xfs/linux-2.6/xfs_trace.h:196:
+		__field(xfs_filblks_t, blockcount)
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#213: FILE: fs/xfs/linux-2.6/xfs_trace.h:197:
+		__field(xfs_exntst_t, state)
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#214: FILE: fs/xfs/linux-2.6/xfs_trace.h:198:
+		__field(int, bmap_state)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#215: FILE: fs/xfs/linux-2.6/xfs_trace.h:199:
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#216: FILE: fs/xfs/linux-2.6/xfs_trace.h:200:
+	),
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#217: FILE: fs/xfs/linux-2.6/xfs_trace.h:201:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#217: FILE: fs/xfs/linux-2.6/xfs_trace.h:201:
+	TP_fast_assign(
+		struct xfs_ifork	*ifp = (state & BMAP_ATTRFORK) ?
+						ip->i_afp : &ip->i_df;
+		struct xfs_bmbt_irec	r;
+
+		xfs_bmbt_get_all(xfs_iext_get_ext(ifp, idx), &r);
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->idx = idx;
+		__entry->startoff = r.br_startoff;
+		__entry->startblock = r.br_startblock;
+		__entry->blockcount = r.br_blockcount;
+		__entry->state = r.br_state;
+		__entry->bmap_state = state;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#232: FILE: fs/xfs/linux-2.6/xfs_trace.h:216:
+	),
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->bmap_state, "|", XFS_BMAP_EXT_FLAGS),
+		  (long)__entry->idx,
+		  __entry->startoff,
+		  xfs_fmtfsblock(__entry->startblock),
+		  __entry->blockcount,
+		  __entry->state,
+		  (char *)__entry->caller_ip)
 )
 
+#define DEFINE_BMAP_EVENT(name)					\
+DEFINE_EVENT(xfs__bmap, name,					\
+	TP_PROTO(struct xfs_inode *ip, xfs_extnum_t idx,	\
+		 int state, unsigned long caller_ip),		\
+	TP_ARGS(ip, idx, state, caller_ip))
+

WARNING:SPLIT_STRING: quoted string split across lines
#234: FILE: fs/xfs/linux-2.6/xfs_trace.h:218:
+	TP_printk("dev %d:%d ino 0x%llx state %s idx %ld "
+		  "offset %lld block %s count %lld flag %d caller %pf",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#291: FILE: fs/xfs/linux-2.6/xfs_trace.h:241:
+DECLARE_EVENT_CLASS(xfs__buf,
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),
+	TP_ARGS(bp, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: fs/xfs/linux-2.6/xfs_trace.h:242:
+DECLARE_EVENT_CLASS(xfs__buf,
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#292: FILE: fs/xfs/linux-2.6/xfs_trace.h:242:
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),
+	TP_ARGS(bp, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#293: FILE: fs/xfs/linux-2.6/xfs_trace.h:243:
+	TP_ARGS(bp, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#294: FILE: fs/xfs/linux-2.6/xfs_trace.h:244:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#294: FILE: fs/xfs/linux-2.6/xfs_trace.h:244:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#295: FILE: fs/xfs/linux-2.6/xfs_trace.h:245:
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#296: FILE: fs/xfs/linux-2.6/xfs_trace.h:246:
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#297: FILE: fs/xfs/linux-2.6/xfs_trace.h:247:
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#298: FILE: fs/xfs/linux-2.6/xfs_trace.h:248:
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#299: FILE: fs/xfs/linux-2.6/xfs_trace.h:249:
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#300: FILE: fs/xfs/linux-2.6/xfs_trace.h:250:
+		__field(unsigned, lockval)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#300: FILE: fs/xfs/linux-2.6/xfs_trace.h:250:
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#301: FILE: fs/xfs/linux-2.6/xfs_trace.h:251:
+		__field(unsigned, flags)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#301: FILE: fs/xfs/linux-2.6/xfs_trace.h:251:
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#302: FILE: fs/xfs/linux-2.6/xfs_trace.h:252:
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#303: FILE: fs/xfs/linux-2.6/xfs_trace.h:253:
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#304: FILE: fs/xfs/linux-2.6/xfs_trace.h:254:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#304: FILE: fs/xfs/linux-2.6/xfs_trace.h:254:
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->flags = bp->b_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#313: FILE: fs/xfs/linux-2.6/xfs_trace.h:263:
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_EVENT(name)					\
+DEFINE_EVENT(xfs__buf, name,					\
+	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),	\
+	TP_ARGS(bp, caller_ip))
+

WARNING:SPLIT_STRING: quoted string split across lines
#315: FILE: fs/xfs/linux-2.6/xfs_trace.h:265:
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#372: FILE: fs/xfs/linux-2.6/xfs_trace.h:317:
+DECLARE_EVENT_CLASS(xfs__buf_flags,
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),
+	TP_ARGS(bp, flags, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: fs/xfs/linux-2.6/xfs_trace.h:318:
+DECLARE_EVENT_CLASS(xfs__buf_flags,
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#373: FILE: fs/xfs/linux-2.6/xfs_trace.h:318:
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#373: FILE: fs/xfs/linux-2.6/xfs_trace.h:318:
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),
+	TP_ARGS(bp, flags, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#374: FILE: fs/xfs/linux-2.6/xfs_trace.h:319:
+	TP_ARGS(bp, flags, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#375: FILE: fs/xfs/linux-2.6/xfs_trace.h:320:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#375: FILE: fs/xfs/linux-2.6/xfs_trace.h:320:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#376: FILE: fs/xfs/linux-2.6/xfs_trace.h:321:
+		__field(dev_t, dev)
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#377: FILE: fs/xfs/linux-2.6/xfs_trace.h:322:
+		__field(xfs_daddr_t, bno)
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#378: FILE: fs/xfs/linux-2.6/xfs_trace.h:323:
+		__field(size_t, buffer_length)
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#379: FILE: fs/xfs/linux-2.6/xfs_trace.h:324:
+		__field(int, hold)
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#380: FILE: fs/xfs/linux-2.6/xfs_trace.h:325:
+		__field(int, pincount)
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#381: FILE: fs/xfs/linux-2.6/xfs_trace.h:326:
+		__field(unsigned, lockval)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#381: FILE: fs/xfs/linux-2.6/xfs_trace.h:326:
+		__field(unsigned, lockval)
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#382: FILE: fs/xfs/linux-2.6/xfs_trace.h:327:
+		__field(unsigned, flags)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#382: FILE: fs/xfs/linux-2.6/xfs_trace.h:327:
+		__field(unsigned, flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#383: FILE: fs/xfs/linux-2.6/xfs_trace.h:328:
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#384: FILE: fs/xfs/linux-2.6/xfs_trace.h:329:
+	),
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#385: FILE: fs/xfs/linux-2.6/xfs_trace.h:330:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#385: FILE: fs/xfs/linux-2.6/xfs_trace.h:330:
+	TP_fast_assign(
+		__entry->dev = bp->b_target->bt_dev;
+		__entry->bno = bp->b_bn;
+		__entry->buffer_length = bp->b_buffer_length;
+		__entry->flags = flags;
+		__entry->hold = atomic_read(&bp->b_hold);
+		__entry->pincount = atomic_read(&bp->b_pin_count);
+		__entry->lockval = xfs_buf_lock_value(bp);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#394: FILE: fs/xfs/linux-2.6/xfs_trace.h:339:
+	),
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->bno,
+		  __entry->buffer_length,
+		  __entry->hold,
+		  __entry->pincount,
+		  __entry->lockval,
+		  __print_flags(__entry->flags, "|", XFS_BUF_FLAGS),
+		  (void *)__entry->caller_ip)
 )
+
+#define DEFINE_BUF_FLAGS_EVENT(name)			\
+DEFINE_EVENT(xfs__buf_flags, name,			\
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\
+	TP_ARGS(bp, flags, caller_ip))
+

WARNING:SPLIT_STRING: quoted string split across lines
#396: FILE: fs/xfs/linux-2.6/xfs_trace.h:341:
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s caller %pf",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#409: FILE: fs/xfs/linux-2.6/xfs_trace.h:354:
+	TP_PROTO(struct xfs_buf *bp, unsigned flags, unsigned long caller_ip),\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: fs/xfs/linux-2.6/xfs_trace.h:400:
+DECLARE_EVENT_CLASS(xfs__buf_item,
+	TP_PROTO(struct xfs_buf_log_item *bip),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#470: FILE: fs/xfs/linux-2.6/xfs_trace.h:402:
+	TP_STRUCT__entry(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#477: FILE: fs/xfs/linux-2.6/xfs_trace.h:409:
+		__field(unsigned, buf_flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#478: FILE: fs/xfs/linux-2.6/xfs_trace.h:410:
+		__field(unsigned, bli_recur)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#480: FILE: fs/xfs/linux-2.6/xfs_trace.h:412:
+		__field(unsigned, bli_flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#482: FILE: fs/xfs/linux-2.6/xfs_trace.h:414:
+		__field(unsigned, li_flags)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#484: FILE: fs/xfs/linux-2.6/xfs_trace.h:416:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#500: FILE: fs/xfs/linux-2.6/xfs_trace.h:432:
+	TP_printk("dev %d:%d bno 0x%llx len 0x%zx hold %d pincount %d "
+		  "lock %d flags %s recur %d refcount %d bliflags %s "

WARNING:SPLIT_STRING: quoted string split across lines
#501: FILE: fs/xfs/linux-2.6/xfs_trace.h:433:
+		  "lock %d flags %s recur %d refcount %d bliflags %s "
+		  "lidesc 0x%p liflags %s",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#550: FILE: fs/xfs/linux-2.6/xfs_trace.h:478:
+DECLARE_EVENT_CLASS(xfs__lock,
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,
+		 unsigned long caller_ip),
+	TP_ARGS(ip,  lock_flags, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: fs/xfs/linux-2.6/xfs_trace.h:479:
+DECLARE_EVENT_CLASS(xfs__lock,
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#551: FILE: fs/xfs/linux-2.6/xfs_trace.h:479:
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#551: FILE: fs/xfs/linux-2.6/xfs_trace.h:479:
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,
+		 unsigned long caller_ip),
+	TP_ARGS(ip,  lock_flags, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#552: FILE: fs/xfs/linux-2.6/xfs_trace.h:480:
+		 unsigned long caller_ip),
+	TP_ARGS(ip,  lock_flags, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#553: FILE: fs/xfs/linux-2.6/xfs_trace.h:481:
+	TP_ARGS(ip,  lock_flags, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#554: FILE: fs/xfs/linux-2.6/xfs_trace.h:482:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#554: FILE: fs/xfs/linux-2.6/xfs_trace.h:482:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#555: FILE: fs/xfs/linux-2.6/xfs_trace.h:483:
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#556: FILE: fs/xfs/linux-2.6/xfs_trace.h:484:
+		__field(xfs_ino_t, ino)
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#557: FILE: fs/xfs/linux-2.6/xfs_trace.h:485:
+		__field(int, lock_flags)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#558: FILE: fs/xfs/linux-2.6/xfs_trace.h:486:
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#559: FILE: fs/xfs/linux-2.6/xfs_trace.h:487:
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#560: FILE: fs/xfs/linux-2.6/xfs_trace.h:488:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#560: FILE: fs/xfs/linux-2.6/xfs_trace.h:488:
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->lock_flags = lock_flags;
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#565: FILE: fs/xfs/linux-2.6/xfs_trace.h:493:
+	),
+	TP_printk("dev %d:%d ino 0x%llx flags %s caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __print_flags(__entry->lock_flags, "|", XFS_LOCK_FLAGS),
+		  (void *)__entry->caller_ip)
 )
 
+#define DEFINE_LOCK_EVENT(name)					\
+DEFINE_EVENT(xfs__lock, name,					\
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\
+		 unsigned long caller_ip),			\
+	TP_ARGS(ip,  lock_flags, caller_ip))
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#575: FILE: fs/xfs/linux-2.6/xfs_trace.h:503:
+	TP_PROTO(struct xfs_inode *ip, unsigned lock_flags,	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: fs/xfs/linux-2.6/xfs_trace.h:513:
+DECLARE_EVENT_CLASS(xfs__iget,
+	TP_PROTO(struct xfs_inode *ip),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#602: FILE: fs/xfs/linux-2.6/xfs_trace.h:515:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#606: FILE: fs/xfs/linux-2.6/xfs_trace.h:519:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#646: FILE: fs/xfs/linux-2.6/xfs_trace.h:538:
+DECLARE_EVENT_CLASS(xfs__inode,
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),
+	TP_ARGS(ip, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/xfs/linux-2.6/xfs_trace.h:539:
+DECLARE_EVENT_CLASS(xfs__inode,
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#647: FILE: fs/xfs/linux-2.6/xfs_trace.h:539:
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),
+	TP_ARGS(ip, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#648: FILE: fs/xfs/linux-2.6/xfs_trace.h:540:
+	TP_ARGS(ip, caller_ip),
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#649: FILE: fs/xfs/linux-2.6/xfs_trace.h:541:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#649: FILE: fs/xfs/linux-2.6/xfs_trace.h:541:
+	TP_STRUCT__entry(
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#650: FILE: fs/xfs/linux-2.6/xfs_trace.h:542:
+		__field(dev_t, dev)
+		__field(xfs_ino_t, ino)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#651: FILE: fs/xfs/linux-2.6/xfs_trace.h:543:
+		__field(xfs_ino_t, ino)
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#652: FILE: fs/xfs/linux-2.6/xfs_trace.h:544:
+		__field(int, count)
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#653: FILE: fs/xfs/linux-2.6/xfs_trace.h:545:
+		__field(unsigned long, caller_ip)
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#654: FILE: fs/xfs/linux-2.6/xfs_trace.h:546:
+	),
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#655: FILE: fs/xfs/linux-2.6/xfs_trace.h:547:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#655: FILE: fs/xfs/linux-2.6/xfs_trace.h:547:
+	TP_fast_assign(
+		__entry->dev = VFS_I(ip)->i_sb->s_dev;
+		__entry->ino = ip->i_ino;
+		__entry->count = atomic_read(&VFS_I(ip)->i_count);
+		__entry->caller_ip = caller_ip;
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#660: FILE: fs/xfs/linux-2.6/xfs_trace.h:552:
+	),
+	TP_printk("dev %d:%d ino 0x%llx count %d caller %pf",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  __entry->ino,
+		  __entry->count,
+		  (char *)__entry->caller_ip)
 )
+
+#define DEFINE_INODE_EVENT(name)					\
+DEFINE_EVENT(xfs__inode, name,						\
+	TP_PROTO(struct xfs_inode *ip, unsigned long caller_ip),	\
+	TP_ARGS(ip, caller_ip))
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: fs/xfs/linux-2.6/xfs_trace.h:573:
+DECLARE_EVENT_CLASS(xfs__dquot,
+	TP_PROTO(struct xfs_dquot *dqp),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#731: FILE: fs/xfs/linux-2.6/xfs_trace.h:575:
+	TP_STRUCT__entry(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#734: FILE: fs/xfs/linux-2.6/xfs_trace.h:578:
+		__field(unsigned, flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#735: FILE: fs/xfs/linux-2.6/xfs_trace.h:579:
+		__field(unsigned, nrefs)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#744: FILE: fs/xfs/linux-2.6/xfs_trace.h:588:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#762: FILE: fs/xfs/linux-2.6/xfs_trace.h:606:
+	TP_printk("dev %d:%d id 0x%x flags %s nrefs %u res_bc 0x%llx "
+		  "bcnt 0x%llx [hard 0x%llx | soft 0x%llx] "

WARNING:SPLIT_STRING: quoted string split across lines
#763: FILE: fs/xfs/linux-2.6/xfs_trace.h:607:
+		  "bcnt 0x%llx [hard 0x%llx | soft 0x%llx] "
+		  "icnt 0x%llx [hard 0x%llx | soft 0x%llx]",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: fs/xfs/linux-2.6/xfs_trace.h:660:
+DECLARE_EVENT_CLASS(xfs__loggrant,
+	TP_PROTO(struct log *log, struct xlog_ticket *tic),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#856: FILE: fs/xfs/linux-2.6/xfs_trace.h:662:
+	TP_STRUCT__entry(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#858: FILE: fs/xfs/linux-2.6/xfs_trace.h:664:
+		__field(unsigned, trans_type)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#874: FILE: fs/xfs/linux-2.6/xfs_trace.h:680:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#893: FILE: fs/xfs/linux-2.6/xfs_trace.h:699:
+	TP_printk("dev %d:%d type %s t_ocnt %u t_cnt %u t_curr_res %u "
+		  "t_unit_res %u t_flags %s reserve_headq 0x%p "

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: fs/xfs/linux-2.6/xfs_trace.h:700:
+		  "t_unit_res %u t_flags %s reserve_headq 0x%p "
+		  "write_headq 0x%p grant_reserve_cycle %d "

WARNING:SPLIT_STRING: quoted string split across lines
#895: FILE: fs/xfs/linux-2.6/xfs_trace.h:701:
+		  "write_headq 0x%p grant_reserve_cycle %d "
+		  "grant_reserve_bytes %d grant_write_cycle %d "

WARNING:SPLIT_STRING: quoted string split across lines
#896: FILE: fs/xfs/linux-2.6/xfs_trace.h:702:
+		  "grant_reserve_bytes %d grant_write_cycle %d "
+		  "grant_write_bytes %d curr_cycle %d curr_block %d "

WARNING:SPLIT_STRING: quoted string split across lines
#897: FILE: fs/xfs/linux-2.6/xfs_trace.h:703:
+		  "grant_write_bytes %d curr_cycle %d curr_block %d "
+		  "tail_cycle %d tail_block %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: fs/xfs/linux-2.6/xfs_trace.h:755:
+DECLARE_EVENT_CLASS(xfs__rw,
+	TP_PROTO(struct xfs_inode *ip, size_t count, loff_t offset, int flags),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#964: FILE: fs/xfs/linux-2.6/xfs_trace.h:757:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#973: FILE: fs/xfs/linux-2.6/xfs_trace.h:766:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#983: FILE: fs/xfs/linux-2.6/xfs_trace.h:776:
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx new_size 0x%llx "
+		  "offset 0x%llx count 0x%zx ioflags %s",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: fs/xfs/linux-2.6/xfs_trace.h:799:
+DECLARE_EVENT_CLASS(xfs__page,
+	TP_PROTO(struct inode *inode, struct page *page, unsigned long off),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1047: FILE: fs/xfs/linux-2.6/xfs_trace.h:801:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1057: FILE: fs/xfs/linux-2.6/xfs_trace.h:811:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#1073: FILE: fs/xfs/linux-2.6/xfs_trace.h:827:
+	TP_printk("dev %d:%d ino 0x%llx pgoff 0x%lx size 0x%llx offset %lx "
+		  "delalloc %d unmapped %d unwritten %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: fs/xfs/linux-2.6/xfs_trace.h:848:
+DECLARE_EVENT_CLASS(xfs__iomap,
+	TP_PROTO(struct xfs_inode *ip, xfs_off_t offset, ssize_t count,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1139: FILE: fs/xfs/linux-2.6/xfs_trace.h:851:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1151: FILE: fs/xfs/linux-2.6/xfs_trace.h:863:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#1164: FILE: fs/xfs/linux-2.6/xfs_trace.h:876:
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx new_size 0x%llx "
+		  "offset 0x%llx count %zd flags %s "

WARNING:SPLIT_STRING: quoted string split across lines
#1165: FILE: fs/xfs/linux-2.6/xfs_trace.h:877:
+		  "offset 0x%llx count %zd flags %s "
+		  "startoff 0x%llx startblock 0x%llx blockcount 0x%llx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: fs/xfs/linux-2.6/xfs_trace.h:901:
+DECLARE_EVENT_CLASS(xfs__simple_io,
+	TP_PROTO(struct xfs_inode *ip, xfs_off_t offset, ssize_t count),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1219: FILE: fs/xfs/linux-2.6/xfs_trace.h:903:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1227: FILE: fs/xfs/linux-2.6/xfs_trace.h:911:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#1236: FILE: fs/xfs/linux-2.6/xfs_trace.h:920:
+	TP_printk("dev %d:%d ino 0x%llx size 0x%llx new_size 0x%llx "
+		  "offset 0x%llx count %zd",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: fs/xfs/linux-2.6/xfs_trace.h:972:
+DECLARE_EVENT_CLASS(xfs__itrunc,
+	TP_PROTO(struct xfs_inode *ip, xfs_fsize_t new_size),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1281: FILE: fs/xfs/linux-2.6/xfs_trace.h:974:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1287: FILE: fs/xfs/linux-2.6/xfs_trace.h:980:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1382: FILE: fs/xfs/linux-2.6/xfs_trace.h:1232:
+DECLARE_EVENT_CLASS(xfs__alloc,
+	TP_PROTO(struct xfs_alloc_arg *args),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1384: FILE: fs/xfs/linux-2.6/xfs_trace.h:1234:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1405: FILE: fs/xfs/linux-2.6/xfs_trace.h:1255:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#1427: FILE: fs/xfs/linux-2.6/xfs_trace.h:1277:
+	TP_printk("dev %d:%d agno %u agbno %u minlen %u maxlen %u mod %u "
+		  "prod %u minleft %u total %u alignment %u minalignslop %u "

WARNING:SPLIT_STRING: quoted string split across lines
#1428: FILE: fs/xfs/linux-2.6/xfs_trace.h:1278:
+		  "prod %u minleft %u total %u alignment %u minalignslop %u "
+		  "len %u type %s otype %s wasdel %d wasfromfl %d isfl %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1429: FILE: fs/xfs/linux-2.6/xfs_trace.h:1279:
+		  "len %u type %s otype %s wasdel %d wasfromfl %d isfl %d "
+		  "userdata %d firstblock 0x%llx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1497: FILE: fs/xfs/linux-2.6/xfs_trace.h:1329:
+DECLARE_EVENT_CLASS(xfs__dir2,
+	TP_PROTO(struct xfs_da_args *args),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1499: FILE: fs/xfs/linux-2.6/xfs_trace.h:1331:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1508: FILE: fs/xfs/linux-2.6/xfs_trace.h:1340:
+	TP_fast_assign(

WARNING:SPLIT_STRING: quoted string split across lines
#1519: FILE: fs/xfs/linux-2.6/xfs_trace.h:1351:
+	TP_printk("dev %d:%d ino 0x%llx name %.*s namelen %d hashval 0x%x "
+		  "inumber 0x%llx op_flags %s",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1609: FILE: fs/xfs/linux-2.6/xfs_trace.h:1394:
+DECLARE_EVENT_CLASS(xfs__dir2_space,
+	TP_PROTO(struct xfs_da_args *args, int idx),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1611: FILE: fs/xfs/linux-2.6/xfs_trace.h:1396:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1617: FILE: fs/xfs/linux-2.6/xfs_trace.h:1402:
+	TP_fast_assign(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 107 warnings, 54 checks, 1580 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
