WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
 - Background write-out: memory.dirty_background_ratio, memory.dirty_background_bytes

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#95: FILE: include/linux/memcontrol.h:64:
+	MEM_CGROUP_STAT_WRITEBACK_TEMP,   /* # of pages under writeback using
+						temporary buffers */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#95: FILE: include/linux/memcontrol.h:64:
+						temporary buffers */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/memcontrol.h:174:
+extern bool mem_cgroup_has_dirty_limit(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/memcontrol.h:175:
+extern void get_dirty_param(struct dirty_param *param);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/memcontrol.h:176:
+extern s64 mem_cgroup_page_stat(enum mem_cgroup_page_stat_item item);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: include/linux/memcontrol.h:187:
+void mem_cgroup_update_stat(struct page *page,
+			enum mem_cgroup_stat_index idx, int val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: include/linux/memcontrol.h:363:
+static inline void mem_cgroup_update_stat(struct page *page,
+			enum mem_cgroup_stat_index idx, int val)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#164: FILE: include/linux/memcontrol.h:386:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: mm/memcontrol.c:1101:
+static s64 mem_cgroup_get_local_page_stat(struct mem_cgroup *memcg,
+				enum mem_cgroup_page_stat_item item)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: mm/memcontrol.c:1120:
+			mem_cgroup_read_stat(memcg,
+					MEM_CGROUP_STAT_UNSTABLE_NFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: mm/memcontrol.c:1128:
+			mem_cgroup_read_stat(memcg,
+				MEM_CGROUP_STAT_UNSTABLE_NFS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#327: FILE: mm/memcontrol.c:1131:
+		BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mem_cgroup_from_task"
#350: FILE: mm/memcontrol.c:1154:
+	return mem_cgroup_from_task(current) != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#366: FILE: mm/memcontrol.c:1170:
+	if (memcg) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'evaulate' may be misspelled - perhaps 'evaluate'?
#368: FILE: mm/memcontrol.c:1172:
+		 * Recursively evaulate page statistics against all cgroup
 		               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#373: FILE: mm/memcontrol.c:1177:
+	} else

WARNING:TYPO_SPELLING: 'guarnteed' may be misspelled - perhaps 'guaranteed'?
#392: FILE: mm/memcontrol.c:1429:
+ * disabled.  Then, it's guarnteed that the page is not uncharged while we
                          ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: mm/memcontrol.c:1433:
+void mem_cgroup_update_stat(struct page *page,
+			enum mem_cgroup_stat_index idx, int val)

WARNING:TYPO_SPELLING: 'guarnteed' may be misspelled - perhaps 'guaranteed'?
#425: FILE: mm/memcontrol.c:1446:
+	* It's guarnteed that this page is never uncharged.
 	       ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: mm/memcontrol.c:1481:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: mm/memcontrol.c:1896:
+static void __mem_cgroup_update_file_stat(struct page_cgroup *pc,
+	struct mem_cgroup *from, struct mem_cgroup *to)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#504: FILE: mm/memcontrol.c:1916:
+		__this_cpu_dec(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#509: FILE: mm/memcontrol.c:1921:
+		__this_cpu_dec(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: mm/memcontrol.c:3705:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#619: FILE: mm/memcontrol.c:3715:
+	if (cgrp->parent == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: mm/memcontrol.c:3718:
+	if ((type == MEM_CGROUP_DIRTY_RATIO ||
+		type == MEM_CGROUP_DIRTY_BACKGROUND_RATIO) && val > 100)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 17 checks, 635 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
