WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#59: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: arch/x86/include/asm/pci_x86.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#73: FILE: arch/x86/include/asm/pci_x86.h:10:
+#define DBG(x...) printk(x)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#124: FILE: arch/x86/include/asm/pci_x86.h:61:
+		u8 link;		/* IRQ line ID, chipset dependent,
+					   0 = not routed */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#124: FILE: arch/x86/include/asm/pci_x86.h:61:
+					   0 = not routed */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#126: FILE: arch/x86/include/asm/pci_x86.h:63:
+	} __attribute__((packed)) irq[4];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#129: FILE: arch/x86/include/asm/pci_x86.h:66:
+} __attribute__((packed));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#137: FILE: arch/x86/include/asm/pci_x86.h:74:
+	u16 exclusive_irqs;		/* IRQs devoted exclusively to
+					   PCI usage */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#137: FILE: arch/x86/include/asm/pci_x86.h:74:
+					   PCI usage */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#139: FILE: arch/x86/include/asm/pci_x86.h:76:
+	u16 rtr_vendor, rtr_device;	/* Vendor and device ID of
+					   interrupt router */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#139: FILE: arch/x86/include/asm/pci_x86.h:76:
+					   interrupt router */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#144: FILE: arch/x86/include/asm/pci_x86.h:81:
+} __attribute__((packed));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: arch/x86/include/asm/pci_x86.h:93:
+	int (*read)(unsigned int domain, unsigned int bus, unsigned int devfn,
+						int reg, int len, u32 *val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: arch/x86/include/asm/pci_x86.h:95:
+	int (*write)(unsigned int domain, unsigned int bus, unsigned int devfn,
+						int reg, int len, u32 val);

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#161: FILE: arch/x86/include/asm/pci_x86.h:98:
+extern struct pci_raw_ops *raw_pci_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#162: FILE: arch/x86/include/asm/pci_x86.h:99:
+extern struct pci_raw_ops *raw_pci_ext_ops;

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#164: FILE: arch/x86/include/asm/pci_x86.h:101:
+extern struct pci_raw_ops pci_direct_conf1;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: arch/x86/include/asm/pci_x86.h:105:
+extern int pci_direct_probe(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: arch/x86/include/asm/pci_x86.h:106:
+extern void pci_direct_init(int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: arch/x86/include/asm/pci_x86.h:107:
+extern void pci_pcbios_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: arch/x86/include/asm/pci_x86.h:108:
+extern int pci_olpc_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: arch/x86/include/asm/pci_x86.h:109:
+extern void __init dmi_check_pciprobe(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: arch/x86/include/asm/pci_x86.h:110:
+extern void __init dmi_check_skip_isa_align(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: arch/x86/include/asm/pci_x86.h:113:
+extern int __init pci_acpi_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: arch/x86/include/asm/pci_x86.h:114:
+extern int __init pcibios_irq_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: arch/x86/include/asm/pci_x86.h:115:
+extern int __init pci_visws_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: arch/x86/include/asm/pci_x86.h:116:
+extern int __init pci_numaq_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: arch/x86/include/asm/pci_x86.h:117:
+extern int __init pcibios_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: arch/x86/include/asm/pci_x86.h:121:
+extern int __init pci_mmcfg_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: arch/x86/include/asm/pci_x86.h:122:
+extern void __init pci_mmcfg_arch_free(void);

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: arch/x86/include/asm/pci_x86.h:134:
+	u8 val;
+	asm volatile("movb (%1),%%al" : "=a" (val) : "r" (pos));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: arch/x86/include/asm/pci_x86.h:141:
+	u16 val;
+	asm volatile("movw (%1),%%ax" : "=a" (val) : "r" (pos));

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: arch/x86/include/asm/pci_x86.h:148:
+	u32 val;
+	asm volatile("movl (%1),%%eax" : "=a" (val) : "r" (pos));

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#342: FILE: arch/x86/pci/fixup.c:11:
 static void __devinit pci_fixup_i450nx(struct pci_dev *d)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189647.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 15 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189647.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
