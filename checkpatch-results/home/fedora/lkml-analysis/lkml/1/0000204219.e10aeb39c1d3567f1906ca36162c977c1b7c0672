WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: fs/ceph/dir.c:1:
+#include <linux/namei.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#83: FILE: fs/ceph/dir.c:29:
+struct dentry_operations ceph_dentry_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#85: FILE: fs/ceph/dir.c:31:
+static int ceph_dentry_revalidate(struct dentry *dentry, struct nameidata *nd);
                                                                            ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#100: FILE: fs/ceph/dir.c:46:
+	if (dentry == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#107: FILE: fs/ceph/dir.c:53:
+		struct inode *inode = temp->d_inode;
+		if (inode && ceph_snap(inode) == CEPH_SNAPDIR)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#112: FILE: fs/ceph/dir.c:58:
+		if (temp == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#120: FILE: fs/ceph/dir.c:66:
+	path = kmalloc(len+1, GFP_NOFS);
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#121: FILE: fs/ceph/dir.c:67:
+	if (path == NULL)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#128: FILE: fs/ceph/dir.c:74:
+			dout(50, "build_path_dentry path+%d: %p SNAPDIR\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#136: FILE: fs/ceph/dir.c:82:
+			dout(50, "build_path_dentry path+%d: %p '%.*s'\n",
 			^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#142: FILE: fs/ceph/dir.c:88:
+		if (temp == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#150: FILE: fs/ceph/dir.c:96:
+		derr(1, "did not end path lookup where expected, "
+		     "namelen is %d, pos is %d\n", len, pos);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#152: FILE: fs/ceph/dir.c:98:
+		/* presumably this is only possible if racing with a
+		   rename of one of the parent directories (we can not

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#154: FILE: fs/ceph/dir.c:100:
+		   retrying should be harmless) */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#161: FILE: fs/ceph/dir.c:107:
+	dout(10, "build_path_dentry on %p %d built %llx '%.*s'\n",
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: fs/ceph/dir.c:112:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: fs/ceph/dir.c:117:
+static loff_t make_fpos(unsigned frag, unsigned off)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: fs/ceph/dir.c:117:
+static loff_t make_fpos(unsigned frag, unsigned off)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#175: FILE: fs/ceph/dir.c:121:
+}
+static unsigned fpos_frag(loff_t p)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#175: FILE: fs/ceph/dir.c:121:
+static unsigned fpos_frag(loff_t p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#179: FILE: fs/ceph/dir.c:125:
+}
+static unsigned fpos_off(loff_t p)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#179: FILE: fs/ceph/dir.c:125:
+static unsigned fpos_off(loff_t p)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#184: FILE: fs/ceph/dir.c:130:
+static int ceph_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                      ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: fs/ceph/dir.c:135:
+	unsigned frag = fpos_frag(filp->f_pos);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#190: FILE: fs/ceph/dir.c:136:
+	unsigned off = fpos_off(filp->f_pos);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#191: FILE: fs/ceph/dir.c:137:
+	unsigned skew;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#197: FILE: fs/ceph/dir.c:143:
+	dout(5, "readdir filp %p at frag %u off %u\n", filp, frag, off);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#197: FILE: fs/ceph/dir.c:143:
+	dout(5, "readdir filp %p at frag %u off %u\n", filp, frag, off);
 	                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#197: FILE: fs/ceph/dir.c:143:
+	dout(5, "readdir filp %p at frag %u off %u\n", filp, frag, off);
 	                                               ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fi->last_readdir"
#200: FILE: fs/ceph/dir.c:146:
+	if (fi->frag != frag || fi->last_readdir == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#216: FILE: fs/ceph/dir.c:162:
+		dout(10, "readdir querying mds for ino %llx.%llx frag %x\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#236: FILE: fs/ceph/dir.c:182:
+		dout(10, "readdir got and parsed readdir result=%d"
 		^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#237: FILE: fs/ceph/dir.c:183:
+		dout(10, "readdir got and parsed readdir result=%d"
+		     " on frag %x\n", err, frag);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#245: FILE: fs/ceph/dir.c:191:
+			dout(10, "readdir off 0 -> '.'\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#252: FILE: fs/ceph/dir.c:198:
+			dout(10, "readdir off 1 -> '..'\n");
 			^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "filp->f_dentry->d_parent"
#253: FILE: fs/ceph/dir.c:199:
+			if (filp->f_dentry->d_parent != NULL &&

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#267: FILE: fs/ceph/dir.c:213:
+	dout(10, "readdir frag %x num %d off %d skew %d\n", frag,
 	^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#269: FILE: fs/ceph/dir.c:215:
+	while (off+skew < rinfo->dir_nr) {
 	          ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#270: FILE: fs/ceph/dir.c:216:
+		dout(10, "readdir off %d -> %d / %d name '%.*s'\n",
 		^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#271: FILE: fs/ceph/dir.c:217:
+		     off, off+skew,
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#272: FILE: fs/ceph/dir.c:218:
+		     rinfo->dir_nr, rinfo->dir_dname_len[off+skew],
 		                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#273: FILE: fs/ceph/dir.c:219:
+		     rinfo->dir_dname[off+skew]);
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#274: FILE: fs/ceph/dir.c:220:
+		ftype = le32_to_cpu(rinfo->dir_in[off+skew].in->mode) >> 12;
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#276: FILE: fs/ceph/dir.c:222:
+			    rinfo->dir_dname[off+skew],
 			                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#277: FILE: fs/ceph/dir.c:223:
+			    rinfo->dir_dname_len[off+skew],
 			                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#279: FILE: fs/ceph/dir.c:225:
+			    le64_to_cpu(rinfo->dir_in[off+skew].in->ino),
 			                                 ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#281: FILE: fs/ceph/dir.c:227:
+			dout(20, "filldir stopping us...\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#293: FILE: fs/ceph/dir.c:239:
+		dout(10, "readdir next frag is %x\n", frag);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#297: FILE: fs/ceph/dir.c:243:
+	dout(20, "readdir done.\n");
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#326: FILE: fs/ceph/dir.c:272:
+			dout(10, "dir_llseek dropping %p content\n", file);
 			^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#335: FILE: fs/ceph/dir.c:281:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#358: FILE: fs/ceph/dir.c:304:
+		dout(10, "ENOENT on snapdir %p '%.*s', linking to snapdir %p\n",
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#358: FILE: fs/ceph/dir.c:304:
+		struct inode *inode = ceph_get_snapdir(parent);
+		dout(10, "ENOENT on snapdir %p '%.*s', linking to snapdir %p\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#367: FILE: fs/ceph/dir.c:313:
+			dout(20, "ENOENT and no trace, dentry %p inode %p\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#409: FILE: fs/ceph/dir.c:355:
+	dout(10, "do_lookup %p mask %d\n", dentry, mask);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: fs/ceph/dir.c:366:
+		u64 pathbase;
+		path = ceph_build_path(dentry, &pathlen, &pathbase, 1);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#437: FILE: fs/ceph/dir.c:383:
+	dout(20, "do_lookup result=%p\n", dentry);
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#445: FILE: fs/ceph/dir.c:391:
+				  struct nameidata *nd)
 				                    ^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#447: FILE: fs/ceph/dir.c:393:
+	dout(5, "lookup in dir %p dentry %p '%.*s'\n",
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#451: FILE: fs/ceph/dir.c:397:
+	if (nd &&
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#456: FILE: fs/ceph/dir.c:402:
+		return ceph_lookup_open(dir, dentry, nd, mode, 1);
 		                                     ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#456: FILE: fs/ceph/dir.c:402:
+		int mode = nd->intent.open.create_mode & ~current->fs->umask;
+		return ceph_lookup_open(dir, dentry, nd, mode, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: fs/ceph/dir.c:410:
+static int ceph_mknod(struct inode *dir, struct dentry *dentry,
+			  int mode, dev_t rdev)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#478: FILE: fs/ceph/dir.c:424:
+	dout(5, "mknod in dir %p dentry %p mode 0%o rdev %d\n",
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#503: FILE: fs/ceph/dir.c:449:
+		struct dentry *d;
+		d = ceph_do_lookup(dir->i_sb, dentry, CEPH_STAT_MASK_INODE_ALL,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#507: FILE: fs/ceph/dir.c:453:
+			/* ick.  this is untested, and inherently racey... i
+			   suppose we _did_ create the file, but it has since

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#508: FILE: fs/ceph/dir.c:454:
+			   been deleted?  hrm. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#521: FILE: fs/ceph/dir.c:467:
+			   struct nameidata *nd)
 			                     ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: fs/ceph/dir.c:467:
+static int ceph_create(struct inode *dir, struct dentry *dentry, int mode,
+			   struct nameidata *nd)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#523: FILE: fs/ceph/dir.c:469:
+	dout(5, "create in dir %p dentry %p name '%.*s'\n",
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#529: FILE: fs/ceph/dir.c:475:
+	if (nd) {
 	    ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: fs/ceph/dir.c:476:
+		BUG_ON((nd->flags & LOOKUP_OPEN) == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#531: FILE: fs/ceph/dir.c:477:
+		dentry = ceph_lookup_open(dir, dentry, nd, mode, 0);
 		                                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: fs/ceph/dir.c:489:
+static int ceph_symlink(struct inode *dir, struct dentry *dentry,
+			    const char *dest)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#556: FILE: fs/ceph/dir.c:502:
+	dout(5, "symlink in dir %p dentry %p to '%s'\n", dir, dentry, dest);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#600: FILE: fs/ceph/dir.c:546:
+		dout(5, "mksnap dir %p snap '%s' dn %p\n", dir, snap, dentry);
 		^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#603: FILE: fs/ceph/dir.c:549:
+		return -EROFS;
+	} else {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#604: FILE: fs/ceph/dir.c:550:
+		dout(5, "mkdir dir %p dn %p mode 0%o\n", dir, dentry, mode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: fs/ceph/dir.c:580:
+static int ceph_link(struct dentry *old_dentry, struct inode *dir,
+			 struct dentry *dentry)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#647: FILE: fs/ceph/dir.c:593:
+	dout(5, "link in dir %p old_dentry %p dentry %p\n", dir,
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#678: FILE: fs/ceph/dir.c:624:
+		struct inode *inode = old_dentry->d_inode;
+		inc_nlink(inode);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#714: FILE: fs/ceph/dir.c:660:
+		dout(5, "rmsnap dir %p '%s' dn %p\n", dir, snap, dentry);
 		^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#717: FILE: fs/ceph/dir.c:663:
+		return -EROFS;
+	} else {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#718: FILE: fs/ceph/dir.c:664:
+		dout(5, "unlink/rmdir dir %p dn %p inode %p\n",
 		^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#736: FILE: fs/ceph/dir.c:682:
+				CEPH_LOCK_DN|CEPH_LOCK_ICONTENT);
 				            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: fs/ceph/dir.c:691:
+static int ceph_rename(struct inode *old_dir, struct dentry *old_dentry,
+			   struct inode *new_dir, struct dentry *new_dentry)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#761: FILE: fs/ceph/dir.c:707:
+	dout(5, "dir_rename in dir %p dentry %p to dir %p dentry %p\n",
 	^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#783: FILE: fs/ceph/dir.c:729:
+				CEPH_LOCK_DN|CEPH_LOCK_ICONTENT);
 				            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#804: FILE: fs/ceph/dir.c:750:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#810: FILE: fs/ceph/dir.c:756:
+static int ceph_dentry_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                            ^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#816: FILE: fs/ceph/dir.c:762:
+		dout(10, "d_revalidate %p '%.*s' inode %p is SNAPPED\n", dentry,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#821: FILE: fs/ceph/dir.c:767:
+	dout(10, "d_revalidate %p '%.*s' inode %p\n", dentry,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#827: FILE: fs/ceph/dir.c:773:
+		dout(20, "dentry_revalidate %p %lu ICONTENT on dir %p %llu\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#832: FILE: fs/ceph/dir.c:778:
+		dout(20, "dentry_revalidate %p lease valid\n", dentry);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#836: FILE: fs/ceph/dir.c:782:
+	dout(20, "dentry_revalidate %p no lease\n", dentry);
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#843: FILE: fs/ceph/dir.c:789:
+	BUG_ON(dentry->d_fsdata);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#847: FILE: fs/ceph/dir.c:793:
+					  struct nameidata *nd)
 					                    ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#856: FILE: fs/ceph/dir.c:802:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#900: FILE: fs/ceph/dir.c:846:
+	size = min_t(unsigned, size, cf->dir_info_len-*ppos);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxO)
#900: FILE: fs/ceph/dir.c:846:
+	size = min_t(unsigned, size, cf->dir_info_len-*ppos);
 	                                             ^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#935: FILE: fs/ceph/dir.c:881:
+struct dentry_operations ceph_dentry_ops = {

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#940: FILE: fs/ceph/dir.c:886:
+struct dentry_operations ceph_snapdir_dentry_ops = {

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#944: FILE: fs/ceph/dir.c:890:
+struct dentry_operations ceph_snap_dentry_ops = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204219.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 75 warnings, 29 checks, 891 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204219.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
