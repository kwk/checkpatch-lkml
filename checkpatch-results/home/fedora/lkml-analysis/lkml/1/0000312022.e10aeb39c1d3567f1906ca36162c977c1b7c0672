CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#90: FILE: fs/cifs/cifs_dfs_ref.c:305:
+	cFYI(1, ("in %s", __func__));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#117: FILE: fs/cifs/cifs_dfs_ref.c:368:
+	cFYI(1, ("leaving %s" , __func__));
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));
                                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));
                                                                                                 ^

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));

CHECK:CAMELCASE: Avoid CamelCase: <_GetXid>
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#131: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__func__, xid,current->fsuid));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}
                                                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}
                                                                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}
                                                                                                                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}
                                                                                                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <FreeXid>
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}

CHECK:CAMELCASE: Avoid CamelCase: <_FreeXid>
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'curr_xid' - possible side-effects?
#132: FILE: fs/cifs/cifsproto.h:43:
+#define FreeXid(curr_xid) {_FreeXid(curr_xid); cFYI(1,("CIFS VFS: leaving %s (xid = %d) rc = %d",__func__,curr_xid,(int)rc));}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: fs/cifs/dns_resolve.c:108:
+			cFYI(1, ("%s: resolved: %s to %s", __func__,
 					rkey->description,

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#171: FILE: fs/cifs/dns_resolve.c:117:
+		cERROR(1, ("%s: unable to resolve: %s", __func__, name));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312022.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 3 warnings, 8 checks, 108 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312022.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
