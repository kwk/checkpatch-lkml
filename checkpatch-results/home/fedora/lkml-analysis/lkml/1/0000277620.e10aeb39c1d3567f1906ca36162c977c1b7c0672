WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#42: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/aufs/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#61: FILE: fs/aufs/file.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#62: FILE: fs/aufs/file.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#77: FILE: fs/aufs/file.c:31:
+int au_store_fmode_exec(struct nameidata *nd, struct inode *inode)
                                           ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#86: FILE: fs/aufs/file.c:40:
+	if (nd
 	    ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#87: FILE: fs/aufs/file.c:41:
+	if (nd
+	    && (nd->flags & LOOKUP_OPEN)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#88: FILE: fs/aufs/file.c:42:
+	    && (nd->flags & LOOKUP_OPEN)
+	    && nd->intent.open.file

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#89: FILE: fs/aufs/file.c:43:
+	    && nd->intent.open.file
+	    && (nd->intent.open.flags & FMODE_EXEC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#90: FILE: fs/aufs/file.c:44:
+	    && (nd->intent.open.flags & FMODE_EXEC)
+	    && inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#91: FILE: fs/aufs/file.c:45:
+	    && inode
+	    && S_ISREG(inode->i_mode)) {

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#120: FILE: fs/aufs/file.c:74:
+	LKTRTrace("%.*s, b%d, flags 0%o, f %d\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#121: FILE: fs/aufs/file.c:75:
+		  AuDLNPair(dentry), bindex, flags, !!file);

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#122: FILE: fs/aufs/file.c:76:
+	AuDebugOn(!dentry);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#159: FILE: fs/aufs/file.c:113:
+	AuTraceErrPtr(h_file);

CHECK:CAMELCASE: Avoid CamelCase: <DiMustWriteLock>
#173: FILE: fs/aufs/file.c:127:
+	DiMustWriteLock(dentry);

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup>
#178: FILE: fs/aufs/file.c:132:
+	err = AuWbrCopyup(au_sbi(sb), dentry);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#201: FILE: fs/aufs/file.c:155:
+	if (unlikely(au_opt_test(au_mntflags(sb), UDBA_INOTIFY)
+		     && !IS_ROOT(parent))) {

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#207: FILE: fs/aufs/file.c:161:
+	mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_DTIME>
#209: FILE: fs/aufs/file.c:163:
+	err = au_sio_cpup_simple(dentry, bcpup, -1, AuCpup_DTIME);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#210: FILE: fs/aufs/file.c:164:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#237: FILE: fs/aufs/file.c:191:
+	si_read_lock(sb, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuOptMask_COO>
#239: FILE: fs/aufs/file.c:193:
+	switch (au_mntflags(sb) & AuOptMask_COO) {

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#252: FILE: fs/aufs/file.c:206:
+		di_read_lock_child(dentry, AuLock_IR);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#292: FILE: fs/aufs/file.c:246:
+	AuDebugOn(S_ISDIR(dentry->d_inode->i_mode)
+		  || !au_h_dptr(dentry, bstart)->d_inode);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#304: FILE: fs/aufs/file.c:258:
+	AuDebugOn(au_fbstart(file) < bstart
+		  || au_fi(file)->fi_hfile[0 + bstart].hf_file);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#341: FILE: fs/aufs/file.c:295:
+	AuTraceEnter();

CHECK:BRACES: braces {} should be used on all arms of this statement
#345: FILE: fs/aufs/file.c:299:
+	if (!hi_wh)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#347: FILE: fs/aufs/file.c:301:
+	else {

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#375: FILE: fs/aufs/file.c:329:
+	LKTRTrace("%.*s, len %Ld\n", AuDLNPair(dentry), len);

CHECK:CAMELCASE: Avoid CamelCase: <FiMustWriteLock>
#376: FILE: fs/aufs/file.c:330:
+	FiMustWriteLock(file);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#413: FILE: fs/aufs/file.c:367:
+	if (unlikely(au_opt_test(au_mntflags(sb), UDBA_INOTIFY)
+		     && !IS_ROOT(parent))) {

CHECK:BRACES: Unbalanced braces around else statement
#427: FILE: fs/aufs/file.c:381:
+	else {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#450: FILE: fs/aufs/file.c:404:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: fs/aufs/file.c:456:
+	if (au_opt_test(au_mntflags(sb), PLINK)
[...]
+		} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#503: FILE: fs/aufs/file.c:457:
+	if (au_opt_test(au_mntflags(sb), PLINK)
+	    && au_plink_test(sb, inode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#504: FILE: fs/aufs/file.c:458:
+	    && au_plink_test(sb, inode)
+	    && !d_unhashed(dentry)) {

WARNING:IF_1: Consider removing the #if 1 and its #endif
#508: FILE: fs/aufs/file.c:462:
+#if 1 /* reserved for future use */

CHECK:BRACES: braces {} should be used on all arms of this statement
#514: FILE: fs/aufs/file.c:468:
+		if (!au_test_wkq(current)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#525: FILE: fs/aufs/file.c:479:
+		} else

CHECK:CAMELCASE: Avoid CamelCase: <DiMustReadLock>
#567: FILE: fs/aufs/file.c:521:
+	DiMustReadLock(dentry);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustReadLock>
#569: FILE: fs/aufs/file.c:523:
+	IiMustReadLock(inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#614: FILE: fs/aufs/file.c:568:
+		aufs_bindex_t s = finfo->fi_bstart, e = finfo->fi_bend;
+		finfo->fi_bstart = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#627: FILE: fs/aufs/file.c:581:
+				if (p->hf_file->f_dentry
+				    && p->hf_file->f_dentry->d_inode)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#629: FILE: fs/aufs/file.c:583:
+					break;
+				else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#646: FILE: fs/aufs/file.c:600:
+			if (p->hf_file->f_dentry
+			    && p->hf_file->f_dentry->d_inode)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#648: FILE: fs/aufs/file.c:602:
+				break;
+			else

CHECK:CAMELCASE: Avoid CamelCase: <SiMustAnyLock>
#687: FILE: fs/aufs/file.c:641:
+	SiMustAnyLock(sb);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#705: FILE: fs/aufs/file.c:659:
+	if (unlikely(sgen != au_digen(dentry)
+		     || sgen != au_iigen(dentry->d_inode))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#717: FILE: fs/aufs/file.c:671:
+		AuDebugOn(au_digen(dentry) != sgen
+			  || au_iigen(dentry->d_inode) != sgen);

CHECK:BRACES: braces {} should be used on all arms of this statement
#724: FILE: fs/aufs/file.c:678:
+	if (!err) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#727: FILE: fs/aufs/file.c:681:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#749: FILE: fs/aufs/file.c:703:
+			      unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#749: FILE: fs/aufs/file.c:703:
+			      unsigned from, unsigned to)

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupport>
#750: FILE: fs/aufs/file.c:704:
+{ AuUnsupport(); return 0; }

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#752: FILE: fs/aufs/file.c:706:
+			     unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#752: FILE: fs/aufs/file.c:706:
+			     unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#755: FILE: fs/aufs/file.c:709:
+			    loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#755: FILE: fs/aufs/file.c:709:
+			    loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#759: FILE: fs/aufs/file.c:713:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#759: FILE: fs/aufs/file.c:713:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#779: FILE: fs/aufs/file.c:733:
+struct address_space_operations aufs_aop = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#800: FILE: fs/aufs/file.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#814: FILE: fs/aufs/file.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#815: FILE: fs/aufs/file.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#852: FILE: fs/aufs/file.h:53:
+		struct vm_operations_struct	*fi_h_vm_ops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#860: FILE: fs/aufs/file.h:61:
+extern struct address_space_operations aufs_aop;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#872: FILE: fs/aufs/file.h:73:
+extern struct file_operations aufs_file_fop;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#931: FILE: fs/aufs/file.h:132:
+int au_store_fmode_exec(struct nameidata *nd, struct inode *inode);
                                           ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleRwsemFuncs>
#950: FILE: fs/aufs/file.h:151:
+AuSimpleRwsemFuncs(fi, struct file *f, au_fi(f)->fi_rwsem);

CHECK:CAMELCASE: Avoid CamelCase: <FiMustReadLock>
#953: FILE: fs/aufs/file.h:154:
+#define FiMustReadLock(f) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#953: FILE: fs/aufs/file.h:154:
+#define FiMustReadLock(f) do { \
+	SiMustAnyLock((f)->f_dentry->d_sb); \
+	AuRwMustReadLock(&au_fi(f)->fi_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustReadLock>
#955: FILE: fs/aufs/file.h:156:
+	AuRwMustReadLock(&au_fi(f)->fi_rwsem); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#958: FILE: fs/aufs/file.h:159:
+#define FiMustWriteLock(f) do { \
+	SiMustAnyLock((f)->f_dentry->d_sb); \
+	AuRwMustWriteLock(&au_fi(f)->fi_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustWriteLock>
#960: FILE: fs/aufs/file.h:161:
+	AuRwMustWriteLock(&au_fi(f)->fi_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <FiMustAnyLock>
#963: FILE: fs/aufs/file.h:164:
+#define FiMustAnyLock(f) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#963: FILE: fs/aufs/file.h:164:
+#define FiMustAnyLock(f) do { \
+	SiMustAnyLock((f)->f_dentry->d_sb); \
+	AuRwMustAnyLock(&au_fi(f)->fi_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustAnyLock>
#965: FILE: fs/aufs/file.h:166:
+	AuRwMustAnyLock(&au_fi(f)->fi_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <FiMustNoWaiters>
#968: FILE: fs/aufs/file.h:169:
+#define FiMustNoWaiters(f)	AuRwMustNoWaiters(&au_fi(f)->fi_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#968: FILE: fs/aufs/file.h:169:
+#define FiMustNoWaiters(f)	AuRwMustNoWaiters(&au_fi(f)->fi_rwsem)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1002: FILE: fs/aufs/file.h:203:
+	AuDebugOn(au_sbend(file->f_dentry->d_sb) < bindex
+		  || bindex < au_fbstart(file));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1011: FILE: fs/aufs/file.h:212:
+	AuDebugOn(!S_ISDIR(file->f_dentry->d_inode->i_mode)
+		  || (au_fi(file)->fi_vdir_cache && vdir_cache));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1029: FILE: fs/aufs/finfo.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1043: FILE: fs/aufs/finfo.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1044: FILE: fs/aufs/finfo.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1056: FILE: fs/aufs/finfo.c:28:
+	struct au_finfo *finfo = file->private_data;
+	AuDebugOn(!finfo

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1057: FILE: fs/aufs/finfo.c:29:
+	AuDebugOn(!finfo
+		  || !finfo->fi_hfile

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1058: FILE: fs/aufs/finfo.c:30:
+		  || !finfo->fi_hfile
+		  || (0 < finfo->fi_bend

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1058: FILE: fs/aufs/finfo.c:30:
+		  || (0 < finfo->fi_bend

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1059: FILE: fs/aufs/finfo.c:31:
+		  || (0 < finfo->fi_bend
+		      && (/* au_sbi(file->f_dentry->d_sb)->si_bend

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1060: FILE: fs/aufs/finfo.c:32:
+		      && (/* au_sbi(file->f_dentry->d_sb)->si_bend
+			     < finfo->fi_bend

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1061: FILE: fs/aufs/finfo.c:33:
+			     < finfo->fi_bend
+			     || */ finfo->fi_bend < finfo->fi_bstart)));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1072: FILE: fs/aufs/finfo.c:44:
+	AuDebugOn(!finfo
+		  || finfo->fi_bstart < 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1073: FILE: fs/aufs/finfo.c:45:
+		  || finfo->fi_bstart < 0
+		  || bindex < finfo->fi_bstart

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1074: FILE: fs/aufs/finfo.c:46:
+		  || bindex < finfo->fi_bstart
+		  || finfo->fi_bend < bindex);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1087: FILE: fs/aufs/finfo.c:59:
+	AuDebugOn(!finfo
+		  || finfo->fi_bstart < 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1088: FILE: fs/aufs/finfo.c:60:
+		  || finfo->fi_bstart < 0
+		  || bindex < finfo->fi_bstart

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1089: FILE: fs/aufs/finfo.c:61:
+		  || bindex < finfo->fi_bstart
+		  || finfo->fi_bend < bindex);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1092: FILE: fs/aufs/finfo.c:64:
+	AuDebugOn(hf->hf_file
+		  && file_count(hf->hf_file) <= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1093: FILE: fs/aufs/finfo.c:65:
+		  && file_count(hf->hf_file) <= 0
+		  && au_br_count(hf->hf_br) <= 0);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1115: FILE: fs/aufs/finfo.c:87:
+	AuDebugOn(!finfo
+		  || finfo->fi_bstart < 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1116: FILE: fs/aufs/finfo.c:88:
+		  || finfo->fi_bstart < 0
+		  || bindex < finfo->fi_bstart

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1117: FILE: fs/aufs/finfo.c:89:
+		  || bindex < finfo->fi_bstart
+		  || finfo->fi_bend < bindex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1152: FILE: fs/aufs/finfo.c:124:
+			struct au_hfile *hf;
+			hf = finfo->fi_hfile + bindex;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277620.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 28 warnings, 70 checks, 1152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277620.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
