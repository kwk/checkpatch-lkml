WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: arch/ia64/kernel/cpe_migrate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: arch/ia64/kernel/cpe_migrate.c:35:
+^Iu64 ^Ipaddr;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#103: FILE: arch/ia64/kernel/cpe_migrate.c:38:
+};
+static struct cpe_info cpe[CE_HISTORY_LENGTH];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#157: FILE: arch/ia64/kernel/cpe_migrate.c:92:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#249: FILE: arch/ia64/kernel/cpe_migrate.c:184:
+
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpe_head != cpe_tail'
#289: FILE: arch/ia64/kernel/cpe_migrate.c:224:
+	if ((cpe_head != cpe_tail) || (cpe[cpe_head].paddr != 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpe[cpe_head].paddr != 0'
#289: FILE: arch/ia64/kernel/cpe_migrate.c:224:
+	if ((cpe_head != cpe_tail) || (cpe[cpe_head].paddr != 0))

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#385: FILE: arch/ia64/kernel/cpe_migrate.c:320:
+	strlcpy(optstr, buf, len);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#387: FILE: arch/ia64/kernel/cpe_migrate.c:322:
+	err = strict_strtoul(optstr, 16, &opt);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: arch/ia64/kernel/cpe_migrate.c:352:
+	cnt = snprintf(buf, bufend - (buf + cnt),
+			"Bad RAM: %d kB, %d pages marked bad\n"

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#437: FILE: arch/ia64/kernel/cpe_migrate.c:372:
+		.mode = S_IWUSR | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#456: FILE: arch/ia64/kernel/cpe_migrate.c:391:
+		printk(KERN_ERR "ia64_reg_CE_extension failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#461: FILE: arch/ia64/kernel/cpe_migrate.c:396:
+	printk(KERN_INFO "Registered badram Driver\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: arch/ia64/kernel/cpe_migrate.c:414:
+MODULE_PARM_DESC(cpe_polling_enabled,
+		"Enable polling with migration");

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#516: FILE: arch/ia64/kernel/mca.c:534:
+int (*ia64_mca_ce_extension)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#552: FILE: arch/ia64/kernel/mca.c:613:
+	recover = (ia64_mca_ce_extension && ia64_mca_ce_extension(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#593: FILE: include/asm-ia64/mca.h:154:
+extern int  ia64_reg_CE_extension(int (*fn)(void *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#594: FILE: include/asm-ia64/mca.h:155:
+extern void ia64_unreg_CE_extension(void);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'kaddr' may be better as '(kaddr)' to avoid precedence issues
#655: FILE: include/asm-ia64/page.h:125:
+#define	phys_to_page(kaddr)	(pfn_to_page(kaddr >> PAGE_SHIFT))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 11 checks, 566 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
