WARNING:TYPO_SPELLING: 'reuests' may be misspelled - perhaps 'requests'?
#72: FILE: block/cfq-iosched.c:1314:
+		 * If old queue has got requests, those reuests will be
 		                                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: block/elevator-fq.c:39:
+void elv_release_ioq(struct io_queue **ioq_ptr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#115: FILE: block/elevator-fq.c:116:
+	BUG_ON(entity == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity"
#115: FILE: block/elevator-fq.c:116:
+	BUG_ON(entity == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->my_sched_data"
#116: FILE: block/elevator-fq.c:117:
+	if (entity->my_sched_data != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: block/elevator-fq.c:1626:
+void __iocg_destroy(struct io_cgroup *iocg, struct io_group *iog,
+				int queue_lock_held)

WARNING:TYPO_SPELLING: 'entites' may be misspelled - perhaps 'entities'?
#440: FILE: block/elevator-fq.c:1667:
+		 * io group does not have any active entites. Because this
 		                                     ^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "efqd"
#534: FILE: block/elevator-fq.c:1731:
+		if (efqd != NULL) {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#562: FILE: block/elevator-fq.c:1754:
+				udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#574: FILE: block/elevator-fq.c:1757:
 
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#659: FILE: block/elevator-fq.c:1839:
+		BUG_ON(!RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#660: FILE: block/elevator-fq.c:1840:
+		BUG_ON(!RB_EMPTY_ROOT(&st->idle));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#661: FILE: block/elevator-fq.c:1841:
+		BUG_ON(st->wsum != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: block/elevator-fq.c:1844:
+	BUG_ON(iog->sched_data.next_active != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.next_active"
#664: FILE: block/elevator-fq.c:1844:
+	BUG_ON(iog->sched_data.next_active != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#665: FILE: block/elevator-fq.c:1845:
+	BUG_ON(iog->sched_data.active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.active_entity"
#665: FILE: block/elevator-fq.c:1845:
+	BUG_ON(iog->sched_data.active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#666: FILE: block/elevator-fq.c:1846:
+	BUG_ON(entity != NULL && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#666: FILE: block/elevator-fq.c:1846:
+	BUG_ON(entity != NULL && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#666: FILE: block/elevator-fq.c:1846:
+	BUG_ON(entity != NULL && entity->tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#683: FILE: block/elevator-fq.c:1863:
+	BUG_ON(!iog);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#685: FILE: block/elevator-fq.c:1865:
+	BUG_ON(atomic_read(&iog->ref) <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#689: FILE: block/elevator-fq.c:1869:
+	BUG_ON(iog->entity.on_st);

WARNING:REPEATED_WORD: Possible repeated word: 'should'
#792: FILE: block/elevator-fq.c:3602:
+	 * Also should should deactivate the group and extract from the

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#857: FILE: block/elevator-fq.h:524:
+extern void elv_put_iog(struct io_group *iog);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000129573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 11 checks, 786 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000129573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
