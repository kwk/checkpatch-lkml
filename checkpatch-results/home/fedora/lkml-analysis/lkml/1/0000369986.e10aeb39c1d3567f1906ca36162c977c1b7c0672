WARNING:BAD_SIGN_OFF: Duplicate signature
#60: 
Signed-off-by: Jason Wessel <jason.wessel@windriver.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'arguement' may be misspelled - perhaps 'argument'?
#224: FILE: Documentation/DocBook/kgdb.tmpl:132:
+    <constant>kgdbwait</constant> after this arguement.
                                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#305: FILE: Documentation/DocBook/kgdb.tmpl:213:
+!Iinclude/linux/kgdb.h
  ^^^^^^^^

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#337: FILE: MAINTAINERS:2239:
+P:	Jason Wessel
+M:	jason.wessel@windriver.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#339: FILE: MAINTAINERS:2241:
+P:	Amit S. Kale
+M:	amitkale@linsyssoft.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#341: FILE: MAINTAINERS:2243:
+W:	http://sourceforge.net/projects/kgdb
+L:	kgdb-bugreport@lists.sourceforge.net

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#350: FILE: include/asm-generic/kgdb.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#351: FILE: include/asm-generic/kgdb.h:2:
+ * include/asm-generic/kgdb.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#374: FILE: include/asm-generic/kgdb.h:25:
+ *	kgdb_skipexception - Bail of of KGDB when we've been triggered.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: include/asm-generic/kgdb.h:51:
+extern void kgdb_post_master_code(struct pt_regs *regs, int e_vector,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: include/asm-generic/kgdb.h:62:
+extern void kgdb_disable_hw_debug(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#424: FILE: include/asm-generic/kgdb.h:75:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#425: FILE: include/asm-generic/kgdb.h:76:
+			    unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/asm-generic/kgdb.h:87:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: include/asm-generic/kgdb.h:98:
+extern struct pt_regs *kgdb_shadow_regs(struct pt_regs *regs, int threadid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#458: FILE: include/linux/kgdb.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#459: FILE: include/linux/kgdb.h:2:
+ * include/linux/kgdb.h

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#476: FILE: include/linux/kgdb.h:19:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: include/linux/kgdb.h:41:
+extern void breakpoint(void);

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#541: FILE: include/linux/kgdb.h:84:
+ *	kgdb_arch_init - Perform any architecture specific initalization.
   	                                                   ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#543: FILE: include/linux/kgdb.h:86:
+ *	This function will handle the initalization of any architecture
   	                              ^^^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#546: FILE: include/linux/kgdb.h:89:
+extern int kgdb_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#556: FILE: include/linux/kgdb.h:99:
+extern void regs_to_gdb_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#570: FILE: include/linux/kgdb.h:113:
+extern void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#581: FILE: include/linux/kgdb.h:124:
+extern void gdb_regs_to_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: include/linux/kgdb.h:142:
+extern int kgdb_arch_handle_exception(int vector, int signo, int err_code,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#605: FILE: include/linux/kgdb.h:148:
+ * ^Ikgdb_roundup_cpus - Get other CPUs into a holding pattern$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#606: FILE: include/linux/kgdb.h:149:
+ * ^I@flags: Current IRQ state$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#608: FILE: include/linux/kgdb.h:151:
+ * ^IOn SMP systems, we need to get the attention of the other CPUs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#609: FILE: include/linux/kgdb.h:152:
+ * ^Iand get them be in a known state.  This should do what is needed$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#610: FILE: include/linux/kgdb.h:153:
+ * ^Ito get the other CPUs to call kgdb_wait(). Note that on some arches,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#620: FILE: include/linux/kgdb.h:163:
+extern void kgdb_roundup_cpus(unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: include/linux/kgdb.h:192:
+extern int kgdb_validate_break_address(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: include/linux/kgdb.h:193:
+extern int kgdb_arch_set_breakpoint(unsigned long addr, char *saved_instr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#651: FILE: include/linux/kgdb.h:194:
+extern int kgdb_arch_remove_breakpoint(unsigned long addr, char *bundle);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#678: FILE: include/linux/kgdb.h:221:
+	unsigned shadowth;

WARNING:SPACING: Unnecessary space before function pointer arguments
#679: FILE: include/linux/kgdb.h:222:
+	int (*set_breakpoint) (unsigned long, char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#679: FILE: include/linux/kgdb.h:222:
+	int (*set_breakpoint) (unsigned long, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#679: FILE: include/linux/kgdb.h:222:
+	int (*set_breakpoint) (unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#680: FILE: include/linux/kgdb.h:223:
+	int (*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#680: FILE: include/linux/kgdb.h:223:
+	int (*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#681: FILE: include/linux/kgdb.h:224:
+	int (*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#681: FILE: include/linux/kgdb.h:224:
+	int (*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#682: FILE: include/linux/kgdb.h:225:
+	int (*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#682: FILE: include/linux/kgdb.h:225:
+	int (*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:SPACING: Unnecessary space before function pointer arguments
#711: FILE: include/linux/kgdb.h:254:
+	int (*read_char) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#712: FILE: include/linux/kgdb.h:255:
+	void (*write_char) (u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#712: FILE: include/linux/kgdb.h:255:
+	void (*write_char) (u8);

WARNING:SPACING: Unnecessary space before function pointer arguments
#713: FILE: include/linux/kgdb.h:256:
+	void (*flush) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#714: FILE: include/linux/kgdb.h:257:
+	int (*init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#715: FILE: include/linux/kgdb.h:258:
+	void (*late_init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#716: FILE: include/linux/kgdb.h:259:
+	void (*pre_exception) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#717: FILE: include/linux/kgdb.h:260:
+	void (*post_exception) (void);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#720: FILE: include/linux/kgdb.h:263:
+extern struct kgdb_io kgdb_io_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#721: FILE: include/linux/kgdb.h:264:
+extern struct kgdb_arch arch_kgdb_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#724: FILE: include/linux/kgdb.h:267:
+extern int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#724: FILE: include/linux/kgdb.h:267:
+extern int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: include/linux/kgdb.h:268:
+extern void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#725: FILE: include/linux/kgdb.h:268:
+extern void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/linux/kgdb.h:270:
+extern void kgdb8250_add_port(int i, struct uart_port *serial_req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#728: FILE: include/linux/kgdb.h:271:
+extern void __init kgdb8250_add_platform_port(int i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: include/linux/kgdb.h:272:
+extern void __init kgdb8250_add_platform_port(int i,
+	struct plat_serial8250_port *serial_req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#731: FILE: include/linux/kgdb.h:274:
+extern int kgdb_hex2long(char **ptr, long *long_val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#732: FILE: include/linux/kgdb.h:275:
+extern char *kgdb_mem2hex(char *mem, char *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#733: FILE: include/linux/kgdb.h:276:
+extern char *kgdb_hex2mem(char *buf, char *mem, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#734: FILE: include/linux/kgdb.h:277:
+extern int kgdb_get_mem(char *addr, unsigned char *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#735: FILE: include/linux/kgdb.h:278:
+extern int kgdb_set_mem(char *addr, unsigned char *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: include/linux/kgdb.h:282:
+extern int kgdb_handle_exception(int ex_vector, int signo, int err_code,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: include/linux/kgdb.h:283:
+extern int kgdb_handle_exception(int ex_vector, int signo, int err_code,
+				struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#741: FILE: include/linux/kgdb.h:284:
+extern int kgdb_nmihook(int cpu, void *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#763: FILE: kernel/kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#764: FILE: kernel/kgdb.c:2:
+ * kernel/kgdb.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#806: FILE: kernel/kgdb.c:44:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#809: FILE: kernel/kgdb.c:47:
+#include <asm/cacheflush.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#834: FILE: kernel/kgdb.c:72:
+ * If so we also need to flag this has happened. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPLIT_STRING: quoted string split across lines
#851: FILE: kernel/kgdb.c:89:
+MODULE_PARM_DESC(attachwait, "Wait for remote debugger"
+		" after an exception");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#854: FILE: kernel/kgdb.c:92:
+/* We provide a kgdb_io_ops structure that may be overriden. */
                                                   ^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#855: FILE: kernel/kgdb.c:93:
+struct kgdb_io __attribute__((weak)) kgdb_io_ops;

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#855: FILE: kernel/kgdb.c:93:
+struct kgdb_io __attribute__((weak)) kgdb_io_ops;

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#858: FILE: kernel/kgdb.c:96:
+static struct kgdb_io kgdb_io_ops_prev[MAX_KGDB_IO_HANDLERS];

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#867: FILE: kernel/kgdb.c:105:
+struct kgdb_arch *kgdb_ops = &arch_kgdb_ops;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: kernel/kgdb.c:128:
+ JMP_REGS_ALIGNMENT;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: kernel/kgdb.c:130:
+static int kgdb_notify_reboot(struct notifier_block *this,
+				unsigned long code, void *x);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#896: FILE: kernel/kgdb.c:134:
+} kgdb_info[NR_CPUS];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#908: FILE: kernel/kgdb.c:146:
+int __attribute__((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: kernel/kgdb.c:147:
+     kgdb_validate_break_address(unsigned long addr)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#913: FILE: kernel/kgdb.c:151:
+	char tmp_variable[BREAK_INSTR_SIZE];
+	error = kgdb_get_mem((char *)addr, tmp_variable, BREAK_INSTR_SIZE);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#917: FILE: kernel/kgdb.c:155:
+int __attribute__((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: kernel/kgdb.c:156:
+     kgdb_arch_set_breakpoint(unsigned long addr, char *saved_instr)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: kernel/kgdb.c:164:
+	error = kgdb_set_mem((char *)addr, kgdb_ops->gdb_bpt_instr,
+						 BREAK_INSTR_SIZE);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#927: FILE: kernel/kgdb.c:165:
+	if (error < 0)
+			return error;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#932: FILE: kernel/kgdb.c:170:
+int __attribute__((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: kernel/kgdb.c:171:
+     kgdb_arch_remove_breakpoint(unsigned long addr, char *bundle)$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#935: FILE: kernel/kgdb.c:173:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#938: FILE: kernel/kgdb.c:176:
+	if (error < 0)
+			return error;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#943: FILE: kernel/kgdb.c:181:
+unsigned long __attribute__((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: kernel/kgdb.c:182:
+    kgdb_arch_pc(int exception, struct pt_regs *regs)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#972: FILE: kernel/kgdb.c:210:
+		 * other characters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1051: FILE: kernel/kgdb.c:289:
+		 * packet. */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1079: FILE: kernel/kgdb.c:317:
+		return 0;
+	} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 2'
#1101: FILE: kernel/kgdb.c:339:
+	if ((count == 2) && (((long)mem & 1) == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#1180: FILE: kernel/kgdb.c:418:
+	} else

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1189: FILE: kernel/kgdb.c:427:
+	return (buf);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 2'
#1222: FILE: kernel/kgdb.c:460:
+	if ((count == 2) && (((long)mem & 1) == 0)) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1273: FILE: kernel/kgdb.c:511:
+	return (mem);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1289: FILE: kernel/kgdb.c:527:
+		if (hex_val >= 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1292: FILE: kernel/kgdb.c:530:
+		} else

WARNING:TYPO_SPELLING: 'gaurd' may be misspelled - perhaps 'guard'?
#1400: FILE: kernel/kgdb.c:638:
+	 * gaurd in case the master processor had not been selected if
 	   ^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1464: FILE: kernel/kgdb.c:702:
+}
+int kgdb_activate_sw_breakpoints(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1469: FILE: kernel/kgdb.c:707:
+	unsigned long addr;
+	for (i = 0; i < MAX_BREAKPOINTS; i++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1473: FILE: kernel/kgdb.c:711:
+		if ((error = kgdb_arch_set_breakpoint(addr,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1474: FILE: kernel/kgdb.c:712:
+		if ((error = kgdb_arch_set_breakpoint(addr,
+					kgdb_break[i].saved_instr)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1480: FILE: kernel/kgdb.c:718:
+				flush_cache_range(current->mm->mmap_cache,
+						addr, addr + BREAK_INSTR_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1496: FILE: kernel/kgdb.c:734:
+	int error = kgdb_validate_break_address(addr);
+	if (error < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_set'
#1499: FILE: kernel/kgdb.c:737:
+		if ((kgdb_break[i].state == bp_set) &&
+			(kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1499: FILE: kernel/kgdb.c:737:
+		if ((kgdb_break[i].state == bp_set) &&
+			(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1500: FILE: kernel/kgdb.c:738:
+		if ((kgdb_break[i].state == bp_set) &&
+			(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: kernel/kgdb.c:743:
+		if (kgdb_break[i].state == bp_removed &&
+				kgdb_break[i].bpt_addr == addr) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1534: FILE: kernel/kgdb.c:772:
+	unsigned long addr;
+	for (i = 0; i < MAX_BREAKPOINTS; i++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1538: FILE: kernel/kgdb.c:776:
+		if ((error = kgdb_arch_remove_breakpoint(addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1539: FILE: kernel/kgdb.c:777:
+		if ((error = kgdb_arch_remove_breakpoint(addr,
+					kgdb_break[i].saved_instr)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1543: FILE: kernel/kgdb.c:781:
+		if (CACHE_FLUSH_IS_SAFE && current->mm &&
+				addr < TASK_SIZE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1545: FILE: kernel/kgdb.c:783:
+			flush_cache_range(current->mm->mmap_cache,
+					addr, addr + BREAK_INSTR_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1548: FILE: kernel/kgdb.c:786:
+			flush_icache_range(addr,
+					addr + BREAK_INSTR_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_set'
#1559: FILE: kernel/kgdb.c:797:
+		if ((kgdb_break[i].state == bp_set) &&
+			(kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1559: FILE: kernel/kgdb.c:797:
+		if ((kgdb_break[i].state == bp_set) &&
+			(kgdb_break[i].bpt_addr == addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1560: FILE: kernel/kgdb.c:798:
+		if ((kgdb_break[i].state == bp_set) &&
+			(kgdb_break[i].bpt_addr == addr)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1571: FILE: kernel/kgdb.c:809:
+	int i;
+	for (i = 0; i < MAX_BREAKPOINTS; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_removed'
#1572: FILE: kernel/kgdb.c:810:
+		if ((kgdb_break[i].state == bp_removed) &&
+			(kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1572: FILE: kernel/kgdb.c:810:
+		if ((kgdb_break[i].state == bp_removed) &&
+			(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1573: FILE: kernel/kgdb.c:811:
+		if ((kgdb_break[i].state == bp_removed) &&
+			(kgdb_break[i].bpt_addr == addr))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1590: FILE: kernel/kgdb.c:828:
+		if ((error = kgdb_arch_remove_breakpoint(addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1591: FILE: kernel/kgdb.c:829:
+		if ((error = kgdb_arch_remove_breakpoint(addr,
+					kgdb_break[i].saved_instr)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1664: FILE: kernel/kgdb.c:902:
+		printk(KERN_CRIT "KGDB: Waiting for remote debugger\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1668: FILE: kernel/kgdb.c:906:
+
+

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#1670: FILE: kernel/kgdb.c:908:
+ * This function does all command procesing for interfacing to gdb.
                                   ^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1688: FILE: kernel/kgdb.c:926:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1692: FILE: kernel/kgdb.c:930:
+	unsigned procid;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1716: FILE: kernel/kgdb.c:954:
+			printk(KERN_CRIT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1726: FILE: kernel/kgdb.c:964:
+		printk(KERN_CRIT

WARNING:LINE_SPACING: Missing a blank line after declarations
#1745: FILE: kernel/kgdb.c:983:
+		int i = 25;	/* an arbitrary number */
+		if (atomic_read(&kgdb_sync) < 0 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1746: FILE: kernel/kgdb.c:984:
+		if (atomic_read(&kgdb_sync) < 0 &&
+			atomic_inc_and_test(&kgdb_sync)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1755: FILE: kernel/kgdb.c:993:
+		if (atomic_read(&cpu_doing_single_step) != -1 &&
+				atomic_read(&cpu_doing_single_step) != procid)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1777: FILE: kernel/kgdb.c:1015:
+	/*
+	* Don't enter if we have hit a removed breakpoint.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1795: FILE: kernel/kgdb.c:1033:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1805: FILE: kernel/kgdb.c:1043:
+	 * need one here */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1810: FILE: kernel/kgdb.c:1048:
+	 * as num_online_cpus() could be 0.*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1814: FILE: kernel/kgdb.c:1052:
+		int num = 0;
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1814: FILE: kernel/kgdb.c:1052:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1836: FILE: kernel/kgdb.c:1074:
+		 * send an 'O' packet informing the user again. */

WARNING:SPLIT_STRING: quoted string split across lines
#1839: FILE: kernel/kgdb.c:1077:
+			kgdb_msg_write("Not all CPUs have been synced for "
+				       "KGDB\n", 39);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1858: FILE: kernel/kgdb.c:1096:
+		char *bpt_type;
+		error = 0;

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#1869: FILE: kernel/kgdb.c:1107:
+			 * we clear out our breakpoints now incase
 			                                    ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1870: FILE: kernel/kgdb.c:1108:
+			 * GDB is reconnecting. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1874: FILE: kernel/kgdb.c:1112:
+			 * as much.  Only need to do this once. */

WARNING:SPLIT_STRING: quoted string split across lines
#1877: FILE: kernel/kgdb.c:1115:
+				kgdb_msg_write("Not all CPUs have been "
+					       "synced for KGDB\n", 39);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1892: FILE: kernel/kgdb.c:1130:
+				for (i = 0; i < NR_CPUS; i++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1906: FILE: kernel/kgdb.c:1144:
+			 * are in kgdb_wait, and thus have debuggerinfo. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1907: FILE: kernel/kgdb.c:1145:
+			if (kgdb_ops->shadowth &&
[...]
+			} else if (local_debuggerinfo)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1922: FILE: kernel/kgdb.c:1160:
+			else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1926: FILE: kernel/kgdb.c:1164:
+				 * This should be enough for a stack trace. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1938: FILE: kernel/kgdb.c:1176:
+			if (kgdb_usethread && kgdb_usethread != current)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1940: FILE: kernel/kgdb.c:1178:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1949: FILE: kernel/kgdb.c:1187:
+			if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
[...]
+			} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1952: FILE: kernel/kgdb.c:1190:
+				ptr = kgdb_mem2hex((char *)addr,
+					remcom_out_buffer,

CHECK:BRACES: Unbalanced braces around else statement
#1957: FILE: kernel/kgdb.c:1195:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1983: FILE: kernel/kgdb.c:1221:
+			if (error < 0)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1985: FILE: kernel/kgdb.c:1223:
+			else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2002: FILE: kernel/kgdb.c:1240:
+				printk(KERN_CRIT "Executing reboot\n");

CHECK:BRACES: Unbalanced braces around else statement
#2093: FILE: kernel/kgdb.c:1331:
+				else {

WARNING:SPLIT_STRING: quoted string split across lines
#2097: FILE: kernel/kgdb.c:1335:
+					sprintf(tmpstr, "Shadow task %d"
+						" for pid 0",

CHECK:BRACES: braces {} should be used on all arms of this statement
#2126: FILE: kernel/kgdb.c:1364:
+				if (!threadid)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2128: FILE: kernel/kgdb.c:1366:
+				else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2170: FILE: kernel/kgdb.c:1408:
+			 * if we support it. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2217: FILE: kernel/kgdb.c:1455:
+			if (remcom_in_buffer[1] == '0' &&
+				remcom_in_buffer[2] == '9') {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2282: FILE: kernel/kgdb.c:1520:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2285: FILE: kernel/kgdb.c:1523:
+		 * from the debugger. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2286: FILE: kernel/kgdb.c:1524:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2338: FILE: kernel/kgdb.c:1576:
+	if (!atomic_read(&procindebug[cpu]) &&
+		atomic_read(&debugger_active) != (cpu + 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2354: FILE: kernel/kgdb.c:1592:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"

WARNING:SPLIT_STRING: quoted string split across lines
#2355: FILE: kernel/kgdb.c:1593:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"
+		"debugger active\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2355: FILE: kernel/kgdb.c:1593:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"
+		"debugger active\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2376: FILE: kernel/kgdb.c:1614:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2401: FILE: kernel/kgdb.c:1639:
+		atomic_notifier_chain_register(&panic_notifier_list,
+					&kgdb_panic_notifier);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2415: FILE: kernel/kgdb.c:1653:
+		atomic_notifier_chain_unregister(&panic_notifier_list,
+					  &kgdb_panic_notifier);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2419: FILE: kernel/kgdb.c:1657:
+int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2421: FILE: kernel/kgdb.c:1659:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2423: FILE: kernel/kgdb.c:1661:
+		printk(KERN_ERR "kgdb: Cannot load I/O module while KGDB "

WARNING:SPLIT_STRING: quoted string split across lines
#2424: FILE: kernel/kgdb.c:1662:
+		printk(KERN_ERR "kgdb: Cannot load I/O module while KGDB "
+		       "connected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2430: FILE: kernel/kgdb.c:1668:
+		printk(KERN_ERR "kgdb: No more I/O handles available.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kgdb_io_ops.read_char"
#2438: FILE: kernel/kgdb.c:1676:
+	if (kgdb_io_ops.read_char != NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2439: FILE: kernel/kgdb.c:1677:
+	if (kgdb_io_ops.read_char != NULL &&
+		kgdb_io_ops.read_char != local_kgdb_io_ops->read_char) {

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2441: FILE: kernel/kgdb.c:1679:
+		       &kgdb_io_ops, sizeof(struct kgdb_io));

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2446: FILE: kernel/kgdb.c:1684:
+	memcpy(&kgdb_io_ops, local_kgdb_io_ops, sizeof(struct kgdb_io));

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2455: FILE: kernel/kgdb.c:1693:
+void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kgdb_io_ops_prev[0].read_char"
#2462: FILE: kernel/kgdb.c:1700:
+	if (kgdb_io_handler_cnt > 0 && kgdb_io_ops_prev[0].read_char != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2464: FILE: kernel/kgdb.c:1702:
+		 * removed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2467: FILE: kernel/kgdb.c:1705:
+			 * shifed */

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2470: FILE: kernel/kgdb.c:1708:
+			       sizeof(struct kgdb_io));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2473: FILE: kernel/kgdb.c:1711:
+			 * that is not in use */

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2487: FILE: kernel/kgdb.c:1725:
+			       sizeof(struct kgdb_io));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2490: FILE: kernel/kgdb.c:1728:
+		 * to NULL; */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2492: FILE: kernel/kgdb.c:1730:
+		memset(&kgdb_io_ops_prev[kgdb_io_handler_cnt], 0,
+				sizeof(struct kgdb_io));

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2492: FILE: kernel/kgdb.c:1730:
+				sizeof(struct kgdb_io));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2495: FILE: kernel/kgdb.c:1733:
+			printk(KERN_ERR "kgdb: WARNING: I/O method changed "

WARNING:SPLIT_STRING: quoted string split across lines
#2496: FILE: kernel/kgdb.c:1734:
+			printk(KERN_ERR "kgdb: WARNING: I/O method changed "
+			       "while kgdb was connected state.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2499: FILE: kernel/kgdb.c:1737:
+		 * unregister our hooks and reset state. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2502: FILE: kernel/kgdb.c:1740:
+			printk(KERN_CRIT "kgdb: I/O module was unloaded while "

WARNING:SPLIT_STRING: quoted string split across lines
#2503: FILE: kernel/kgdb.c:1741:
+			printk(KERN_CRIT "kgdb: I/O module was unloaded while "
+					"a debugging session was running.  "

WARNING:SPLIT_STRING: quoted string split across lines
#2504: FILE: kernel/kgdb.c:1742:
+					"a debugging session was running.  "
+					"KGDB will be reset.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2506: FILE: kernel/kgdb.c:1744:
+				printk(KERN_CRIT "kgdb: Reset failed.\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2509: FILE: kernel/kgdb.c:1747:
+		memset(&kgdb_io_ops, 0, sizeof(struct kgdb_io));

WARNING:TYPO_SPELLING: 'defering' may be misspelled - perhaps 'deferring'?
#2595: FILE: kernel/kgdb.c:1833:
+			 * I/O init fails KGDB must default to defering the
 			                                       ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2599: FILE: kernel/kgdb.c:1837:
+			printk(KERN_ERR "kgdb: Could not setup core I/O "

WARNING:SPLIT_STRING: quoted string split across lines
#2600: FILE: kernel/kgdb.c:1838:
+			printk(KERN_ERR "kgdb: Could not setup core I/O "
+			       "for KGDB.\n");

WARNING:TYPO_SPELLING: 'Defering' may be misspelled - perhaps 'Deferring'?
#2601: FILE: kernel/kgdb.c:1839:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "
 			                        ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2601: FILE: kernel/kgdb.c:1839:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "

WARNING:SPLIT_STRING: quoted string split across lines
#2602: FILE: kernel/kgdb.c:1840:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "
+			       "module.\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2603: FILE: kernel/kgdb.c:1841:
+			memset(&kgdb_io_ops, 0, sizeof(struct kgdb_io));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2625: FILE: kernel/kgdb.c:1863:
+		printk(KERN_CRIT "kgdb: Waiting for connection from remote"

WARNING:SPLIT_STRING: quoted string split across lines
#2626: FILE: kernel/kgdb.c:1864:
+		printk(KERN_CRIT "kgdb: Waiting for connection from remote"
+		       " gdb...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2655: FILE: kernel/kgdb.c:1893:
+		printk(KERN_CRIT "ERROR: No KGDB I/O module available\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2659: FILE: kernel/kgdb.c:1897:
+		printk(KERN_CRIT "Entering KGDB\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2662: FILE: kernel/kgdb.c:1900:
+}
+static struct sysrq_key_op sysrq_gdb_op = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2670: FILE: kernel/kgdb.c:1908:
+	printk(KERN_INFO "Registering GDB sysrq handler\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2679: FILE: kernel/kgdb.c:1917:
+static int kgdb_notify_reboot(struct notifier_block *this,
+		unsigned long code, void *x)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2681: FILE: kernel/kgdb.c:1919:
+{
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2685: FILE: kernel/kgdb.c:1923:
+	 * and print. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'code == SYS_RESTART'
#2688: FILE: kernel/kgdb.c:1926:
+	if ((code == SYS_RESTART) || (code == SYS_HALT) ||
+		(code == SYS_POWER_OFF)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'code == SYS_HALT'
#2688: FILE: kernel/kgdb.c:1926:
+	if ((code == SYS_RESTART) || (code == SYS_HALT) ||
+		(code == SYS_POWER_OFF)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'code == SYS_POWER_OFF'
#2688: FILE: kernel/kgdb.c:1926:
+	if ((code == SYS_RESTART) || (code == SYS_HALT) ||
+		(code == SYS_POWER_OFF)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2689: FILE: kernel/kgdb.c:1927:
+	if ((code == SYS_RESTART) || (code == SYS_HALT) ||
+		(code == SYS_POWER_OFF)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2698: FILE: kernel/kgdb.c:1936:
+void kgdb_console_write(struct console *co, const char *s, unsigned count)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2703: FILE: kernel/kgdb.c:1941:
+	 * and print. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2717: FILE: kernel/kgdb.c:1955:
+};
+static int __init kgdb_console_init(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2731: FILE: kernel/kgdb.c:1969:
+}
+static int __init opt_kgdb_enter(char *str)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2740: FILE: kernel/kgdb.c:1978:
+		printk(KERN_CRIT "Waiting for connection from remote "

WARNING:SPLIT_STRING: quoted string split across lines
#2741: FILE: kernel/kgdb.c:1979:
+		printk(KERN_CRIT "Waiting for connection from remote "
+		       "gdb...\n");

CHECK:BRACES: Unbalanced braces around else statement
#2742: FILE: kernel/kgdb.c:1980:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2743: FILE: kernel/kgdb.c:1981:
+		printk(KERN_CRIT "KGDB cannot initialize I/O yet.\n");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2837: FILE: lib/Kconfig.kgdb:53:
+config KGDB_ONLY_MODULES
+	bool "KGDB: Use only kernel modules for I/O"
+	depends on MODULES
+	help
+	  Use only kernel modules to configure KGDB I/O after the
+	  kernel is booted.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369986.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 148 warnings, 88 checks, 2745 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369986.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
