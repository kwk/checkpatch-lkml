WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Allow to define per-UID virtual memory overcommit handling. Configuration is

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#80: FILE: include/linux/mman.h:23:
+struct vm_acct_values
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#84: FILE: include/linux/mman.h:27:
+};
+extern int vm_acct_get_config(struct vm_acct_values *v, uid_t uid);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/mman.h:27:
+extern int vm_acct_get_config(struct vm_acct_values *v, uid_t uid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: ipc/shm.c:376:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#100: FILE: ipc/shm.c:377:
+		if (!vm_acct_get_config(&v, current->uid)) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: ipc/shm.c:382:
+#else $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#125: FILE: mm/Kconfig:166:
+config VM_ACCT_USER
+	bool "Per-user VM overcommit policy (EXPERIMENTAL)" 
+	depends on PROC_FS && EXPERIMENTAL
+	def_bool n
+	help
+	  Say Y here to enable per-user virtual memory overcommit handling.
+	  Overcommit configuration will be available via /proc/overcommit_uid.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: mm/Kconfig:167:
+^Ibool "Per-user VM overcommit policy (EXPERIMENTAL)" $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: mm/mmap.c:101:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: mm/mmap.c:109:
+#else $

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: mm/mmap.c:172:
+^I       ^I* overcommit_ratio / 100;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: mm/mmap.c:172:
+^I       ^I* overcommit_ratio / 100;$

CHECK:BIT_MACRO: Prefer using the BIT macro
#274: FILE: mm/swap.c:465:
+#define VM_ACCT_HASH_SIZE	(1UL << VM_ACCT_HASH_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#278: FILE: mm/swap.c:469:
+typedef struct vm_acct_hash_struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#279: FILE: mm/swap.c:470:
+typedef struct vm_acct_hash_struct
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: mm/swap.c:509:
+static int __vm_acct_set_element(uid_t uid,
+			int overcommit_memory, int overcommit_ratio)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#355: FILE: mm/swap.c:546:
+static int vm_acct_set(struct file *filp, const char __user *buffer,
                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'om == NULL'
#375: FILE: mm/swap.c:566:
+	if ((om == NULL) || (*++om == '\0')) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#375: FILE: mm/swap.c:566:
+	if ((om == NULL) || (*++om == '\0')) {
+		return -EINVAL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!om"
#375: FILE: mm/swap.c:566:
+	if ((om == NULL) || (*++om == '\0')) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'or == NULL'
#380: FILE: mm/swap.c:571:
+	if ((or == NULL) || (*++or == '\0')) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#380: FILE: mm/swap.c:571:
+	if ((or == NULL) || (*++or == '\0')) {
+		return -EINVAL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!or"
#380: FILE: mm/swap.c:571:
+	if ((or == NULL) || (*++or == '\0')) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#385: FILE: mm/swap.c:576:
+	__ret = __vm_acct_set_element((uid_t)simple_strtoul(buf, NULL, 10),

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: mm/swap.c:577:
+	__ret = __vm_acct_set_element((uid_t)simple_strtoul(buf, NULL, 10),
+			    (int)simple_strtol(om, NULL, 10),

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#386: FILE: mm/swap.c:577:
+			    (int)simple_strtol(om, NULL, 10),

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#387: FILE: mm/swap.c:578:
+			    (int)simple_strtol(or, NULL, 10));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: mm/swap.c:599:
+		hlist_for_each_entry(p, elem, &vm_acct_hash[i],
+				vm_acct_chain) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#419: FILE: mm/swap.c:610:
+static int vm_acct_open(struct inode *inode, struct file *filp)
                                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#421: FILE: mm/swap.c:612:
+	return single_open(filp, vm_acct_show, NULL);
 	                   ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#424: FILE: mm/swap.c:615:
+static struct file_operations vm_acct_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#437: FILE: mm/swap.c:628:
+	vm_acct_hash = kmalloc(VM_ACCT_HASH_SIZE * sizeof(*(vm_acct_hash)),
+			       GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#442: FILE: mm/swap.c:633:
+	printk(KERN_INFO "vm_acct_uid hash table entries: %lu\n",

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#457: FILE: mm/swap.c:648:
+__initcall(init_vm_acct);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434874.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 17 warnings, 10 checks, 364 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434874.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
