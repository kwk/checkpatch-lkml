CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#58: FILE: fs/proc/base.c:2259:
+	REG("semundo",   S_IWUSR|S_IRUGO, semundo),
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#58: FILE: fs/proc/base.c:2259:
+	REG("semundo",   S_IWUSR|S_IRUGO, semundo),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#94: FILE: ipc/sem.c:1615:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#108: FILE: ipc/sem.c:1626:
+			struct seq_file *m = file->private_data;
+			m->private = undo_list;

WARNING:LINE_SPACING: Missing a blank line after declarations
#122: FILE: ipc/sem.c:1640:
+	char c = 0;
+	while (*len) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#169: FILE: ipc/sem.c:1687:
+	*val = simple_strtoul(p, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#173: FILE: ipc/sem.c:1691:
+	left = p-s;
 	        ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#196: FILE: ipc/sem.c:1714:
+	for (i = 0; ; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#270: FILE: ipc/sem.c:1788:
+ * The semID must match an existing semaphore array and the number of
+ * of values following the semID must match the number of semaphores in

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#289: FILE: ipc/sem.c:1807:
+	/* The undo_list must have been retrieved or created
+	   in semundo_open() */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#289: FILE: ipc/sem.c:1807:
+	   in semundo_open() */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!undo_list"
#290: FILE: ipc/sem.c:1808:
+	if (undo_list == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#295: FILE: ipc/sem.c:1813:
+	array = kmalloc(sizeof(short)*max_sem, GFP_KERNEL);
 	                             ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#295: FILE: ipc/sem.c:1813:
+	array = kmalloc(sizeof(short)*max_sem, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#296: FILE: ipc/sem.c:1814:
+	if (array == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330012.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 7 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330012.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
