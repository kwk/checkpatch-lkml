CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#79: FILE: include/linux/trace.h:86:
+	spinlock_t trace_lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: include/linux/trace.h:121:
+int trace_exists(const char *parent_dir, const char *dir,
+					struct trace_info **ti);

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#111: FILE: include/linux/trace.h:123:
+int trace_printk(struct trace_printk_data *dpk, char *format, ...);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: include/linux/trace.h:125:
+int trace_dump(struct trace_printk_data *dpk, const void *output,
+							const int output_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: include/linux/trace.h:138:
+static inline int trace_exists(const char *parent_dir, const char *dir,
+				struct trace_info **ti)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#126: FILE: include/linux/trace.h:142:
+}
+static inline void trace_cleanup_all(const char *parent_dir) {}

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/linux/trace.h:143:
+static inline int trace_printk(struct trace_printk_data *dpk, char  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#127: FILE: include/linux/trace.h:143:
+static inline int trace_printk(struct trace_printk_data *dpk, char  

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#128: FILE: include/linux/trace.h:143:
*format,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#133: FILE: include/linux/trace.h:148:
+}
+int trace_dump(struct trace_printk_data *dpk, const void *output,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: include/linux/trace.h:149:
+int trace_dump(struct trace_printk_data *dpk, const void *output,
+							const int output_len)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*temp)...) over kzalloc(sizeof(struct trace_dir)...)
#185: FILE: lib/trace.c:161:
+	temp = kzalloc(sizeof(struct trace_dir), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'temp == NULL'
#186: FILE: lib/trace.c:162:
+	if ((temp == NULL) || (strlen(name) > TRACE_NAME_SIZE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#186: FILE: lib/trace.c:162:
+	if ((temp == NULL) || (strlen(name) > TRACE_NAME_SIZE))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#189: FILE: lib/trace.c:165:
+	strlcpy(temp->trace_dir_name, name, sizeof(temp->trace_dir_name));

CHECK:BRACES: braces {} should be used on all arms of this statement
#203: FILE: lib/trace.c:178:
+	if (IS_ERR(temp->trace_dir))
[...]
-	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#206: FILE: lib/trace.c:180:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: lib/trace.c:192:
+int trace_exists(const char *parent_dir, const char *dir,
+					struct trace_info **ti)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#264: FILE: lib/trace.c:625:
+		if (!strncmp(parent_dir, temp->trace_root->d_iname, \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: lib/trace.c:636:
+static int trace_printf(struct trace_info *trace, const char *format,
+								va_list ap)

WARNING:LINE_SPACING: Missing a blank line after declarations
#295: FILE: lib/trace.c:656:
+	int ret = 0;
+	tpk->exists = trace_exists(tpk->parent_dir, tpk->dir, &tpk->ti);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#298: FILE: lib/trace.c:659:
+	switch (tpk->exists) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: lib/trace.c:667:
+		tpk->ti = trace_setup(tpk->parent_dir, tpk->dir,
+				tpk->buf_size, tpk->sub_buf_size, tpk->flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#307: FILE: lib/trace.c:668:
+		printk(KERN_INFO "Trace interface %s setup\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: lib/trace.c:669:
+		printk(KERN_INFO "Trace interface %s setup\n",
+							tpk->ti->dir->d_iname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#310: FILE: lib/trace.c:671:
+			printk(KERN_ERR "Error initialising %s interface\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: lib/trace.c:672:
+			printk(KERN_ERR "Error initialising %s interface\n",
+							tpk->ti->dir->d_iname);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#314: FILE: lib/trace.c:675:
+	/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: lib/trace.c:687:
+ * trace_printk - Output a string to debugfs mount 'directly' using  $

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#332: FILE: lib/trace.c:692:
+int trace_printk(struct trace_printk_data *tpk, char *format, ...)

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: lib/trace.c:695:
+	int ret = 0;
+	va_list(ap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: lib/trace.c:727:
+int trace_dump(struct trace_printk_data *tpk, const void *output,
+							const int output_len)

CHECK:BRACES: braces {} should be used on all arms of this statement
#384: FILE: lib/trace.c:744:
+	if (record && trace_running(tpk->ti))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#386: FILE: lib/trace.c:746:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#404: FILE: samples/trace/fork_new_trace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#421: FILE: samples/trace/fork_new_trace.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: samples/trace/fork_new_trace.c:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301   $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#422: FILE: samples/trace/fork_new_trace.c:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301   $

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#452: FILE: samples/trace/fork_new_trace.c:48:
+	trace_printk(tpk, "%d\n", current->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#468: FILE: samples/trace/fork_new_trace.c:64:
+		printk(KERN_ERR "fork_trace: register_kprobe failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: samples/trace/fork_new_trace.c:87:
+		printk(KERN_ERR "Unable to find required free memory. "

WARNING:SPLIT_STRING: quoted string split across lines
#492: FILE: samples/trace/fork_new_trace.c:88:
+		printk(KERN_ERR "Unable to find required free memory. "
+				"Trace new sample module loading aborted");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: Documentation/trace.txt:158:
+1) Create and populate an instance of trace_printk_data structure. The  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: Documentation/trace.txt:159:
+   parent_dir and dir are mandatory. The fields buf_size, sub_buf_size  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: Documentation/trace.txt:161:
+   'exists' and ti are for the trace infrastructure to use. The pointer  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: Documentation/trace.txt:162:
+   'struct trace_info' i.e. ti may be used to perform fine granular  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: Documentation/trace.txt:163:
+   such as determine the state of the 'trace', stop individual traces,  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: Documentation/trace.txt:166:
+   high-level program (say dumping a structure). trace_printk() can be  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: Documentation/trace.txt:168:
+   structure to these functions along with other parameters. The output  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: Documentation/trace.txt:171:
+4) trace_cleanup_all() for a given parent directory will cleanup and  $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 15 warnings, 21 checks, 475 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
