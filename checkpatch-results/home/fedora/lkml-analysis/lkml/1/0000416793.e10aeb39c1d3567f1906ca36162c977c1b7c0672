WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Since asm-ia64/gcc_intrin.h gets exported to userspace, we need to make sure

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#43: FILE: include/asm-ia64/gcc_intrin.h:16:
+#define ia64_barrier()	__asm__ __volatile__ ("":::"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#46: FILE: include/asm-ia64/gcc_intrin.h:18:
+#define ia64_stop()	__asm__ __volatile__ (";;"::)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#49: FILE: include/asm-ia64/gcc_intrin.h:20:
+#define ia64_invala_gr(regnum)	__asm__ __volatile__ ("invala.e r%0" :: "i"(regnum))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#52: FILE: include/asm-ia64/gcc_intrin.h:22:
+#define ia64_invala_fr(regnum)	__asm__ __volatile__ ("invala.e f%0" :: "i"(regnum))

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#190: FILE: include/asm-ia64/gcc_intrin.h:167:
+	__asm__ __volatile__ ("ldfs %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#190: FILE: include/asm-ia64/gcc_intrin.h:167:
+	__asm__ __volatile__ ("ldfs %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#198: FILE: include/asm-ia64/gcc_intrin.h:173:
+	__asm__ __volatile__ ("ldfd %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#198: FILE: include/asm-ia64/gcc_intrin.h:173:
+	__asm__ __volatile__ ("ldfd %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#206: FILE: include/asm-ia64/gcc_intrin.h:179:
+	__asm__ __volatile__ ("ldfe %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#206: FILE: include/asm-ia64/gcc_intrin.h:179:
+	__asm__ __volatile__ ("ldfe %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#214: FILE: include/asm-ia64/gcc_intrin.h:185:
+	__asm__ __volatile__ ("ldf8 %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#214: FILE: include/asm-ia64/gcc_intrin.h:185:
+	__asm__ __volatile__ ("ldf8 %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#222: FILE: include/asm-ia64/gcc_intrin.h:191:
+	__asm__ __volatile__ ("ldf.fill %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#222: FILE: include/asm-ia64/gcc_intrin.h:191:
+	__asm__ __volatile__ ("ldf.fill %0=[%1]" :"=f"(__f__): "r"(x));	\
 	                                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#344: FILE: include/asm-ia64/gcc_intrin.h:302:
+	__asm__ __volatile__ ("cmpxchg1.acq %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#355: FILE: include/asm-ia64/gcc_intrin.h:311:
+	__asm__ __volatile__ ("cmpxchg1.rel %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#366: FILE: include/asm-ia64/gcc_intrin.h:320:
+	__asm__ __volatile__ ("cmpxchg2.acq %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#378: FILE: include/asm-ia64/gcc_intrin.h:330:
+	__asm__ __volatile__ ("cmpxchg2.rel %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#389: FILE: include/asm-ia64/gcc_intrin.h:339:
+	__asm__ __volatile__ ("cmpxchg4.acq %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#400: FILE: include/asm-ia64/gcc_intrin.h:348:
+	__asm__ __volatile__ ("cmpxchg4.rel %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#411: FILE: include/asm-ia64/gcc_intrin.h:357:
+	__asm__ __volatile__ ("cmpxchg8.acq %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#423: FILE: include/asm-ia64/gcc_intrin.h:367:
+	__asm__ __volatile__ ("cmpxchg8.rel %0=[%1],%2,ar.ccv":					\
 	                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#430: FILE: include/asm-ia64/gcc_intrin.h:372:
+#define ia64_mf()	__asm__ __volatile__ ("mf" ::: "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#431: FILE: include/asm-ia64/gcc_intrin.h:373:
+#define ia64_mfa()	__asm__ __volatile__ ("mf.a" ::: "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#434: FILE: include/asm-ia64/gcc_intrin.h:375:
+#define ia64_invala() __asm__ __volatile__ ("invala" ::: "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#446: FILE: include/asm-ia64/gcc_intrin.h:384:
+#define ia64_srlz_i()	__asm__ __volatile__ (";; srlz.i ;;" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#447: FILE: include/asm-ia64/gcc_intrin.h:385:
+#define ia64_srlz_d()	__asm__ __volatile__ (";; srlz.d" ::: "memory");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#447: FILE: include/asm-ia64/gcc_intrin.h:385:
+#define ia64_srlz_d()	__asm__ __volatile__ (";; srlz.d" ::: "memory");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#452: FILE: include/asm-ia64/gcc_intrin.h:388:
+# define ia64_dv_serialize_data()		__asm__ __volatile__ (".serialize.data");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#452: FILE: include/asm-ia64/gcc_intrin.h:388:
+# define ia64_dv_serialize_data()		__asm__ __volatile__ (".serialize.data");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#453: FILE: include/asm-ia64/gcc_intrin.h:389:
+# define ia64_dv_serialize_instruction()	__asm__ __volatile__ (".serialize.instruction");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#453: FILE: include/asm-ia64/gcc_intrin.h:389:
+# define ia64_dv_serialize_instruction()	__asm__ __volatile__ (".serialize.instruction");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#460: FILE: include/asm-ia64/gcc_intrin.h:395:
+#define ia64_nop(x)	__asm__ __volatile__ ("nop %0"::"i"(x));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#460: FILE: include/asm-ia64/gcc_intrin.h:395:
+#define ia64_nop(x)	__asm__ __volatile__ ("nop %0"::"i"(x));

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#463: FILE: include/asm-ia64/gcc_intrin.h:397:
+#define ia64_itci(addr)	__asm__ __volatile__ ("itc.i %0;;" :: "r"(addr) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#466: FILE: include/asm-ia64/gcc_intrin.h:399:
+#define ia64_itcd(addr)	__asm__ __volatile__ ("itc.d %0;;" :: "r"(addr) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#470: FILE: include/asm-ia64/gcc_intrin.h:402:
+#define ia64_itri(trnum, addr) __asm__ __volatile__ ("itr.i itr[%0]=%1"				\
 					     :: "r"(trnum), "r"(addr) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#474: FILE: include/asm-ia64/gcc_intrin.h:405:
+#define ia64_itrd(trnum, addr) __asm__ __volatile__ ("itr.d dtr[%0]=%1"				\
 					     :: "r"(trnum), "r"(addr) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#567: FILE: include/asm-ia64/gcc_intrin.h:483:
+#define ia64_fc(addr)	__asm__ __volatile__ ("fc %0" :: "r"(addr) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#571: FILE: include/asm-ia64/gcc_intrin.h:486:
+#define ia64_sync_i()	__asm__ __volatile__ (";; sync.i" ::: "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#577: FILE: include/asm-ia64/gcc_intrin.h:488:
+#define ia64_ssm(mask)	__asm__ __volatile__ ("ssm %0":: "i"((mask)) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#578: FILE: include/asm-ia64/gcc_intrin.h:489:
+#define ia64_rsm(mask)	__asm__ __volatile__ ("rsm %0":: "i"((mask)) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#579: FILE: include/asm-ia64/gcc_intrin.h:490:
+#define ia64_sum(mask)	__asm__ __volatile__ ("sum %0":: "i"((mask)) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#580: FILE: include/asm-ia64/gcc_intrin.h:491:
+#define ia64_rum(mask)	__asm__ __volatile__ ("rum %0":: "i"((mask)) : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#583: FILE: include/asm-ia64/gcc_intrin.h:493:
+#define ia64_ptce(addr)	__asm__ __volatile__ ("ptc.e %0" :: "r"(addr))

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: include/asm-ia64/gcc_intrin.h:524:
+                __asm__ __volatile__ ("lfetch [%0]" : : "r"(y));^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: include/asm-ia64/gcc_intrin.h:524:
+                __asm__ __volatile__ ("lfetch [%0]" : : "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: include/asm-ia64/gcc_intrin.h:527:
+                __asm__ __volatile__ ("lfetch.nt1 [%0]" : : "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: include/asm-ia64/gcc_intrin.h:527:
+                __asm__ __volatile__ ("lfetch.nt1 [%0]" : : "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: include/asm-ia64/gcc_intrin.h:530:
+                __asm__ __volatile__ ("lfetch.nt2 [%0]" : : "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: include/asm-ia64/gcc_intrin.h:530:
+                __asm__ __volatile__ ("lfetch.nt2 [%0]" : : "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: include/asm-ia64/gcc_intrin.h:533:
+                __asm__ __volatile__ ("lfetch.nta [%0]" : : "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: include/asm-ia64/gcc_intrin.h:533:
+                __asm__ __volatile__ ("lfetch.nta [%0]" : : "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: include/asm-ia64/gcc_intrin.h:542:
+                __asm__ __volatile__ ("lfetch.excl [%0]" :: "r"(y));^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: include/asm-ia64/gcc_intrin.h:542:
+                __asm__ __volatile__ ("lfetch.excl [%0]" :: "r"(y));^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#639: FILE: include/asm-ia64/gcc_intrin.h:545:
+                __asm__ __volatile__ ("lfetch.excl.nt1 [%0]" :: "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: include/asm-ia64/gcc_intrin.h:545:
+                __asm__ __volatile__ ("lfetch.excl.nt1 [%0]" :: "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#643: FILE: include/asm-ia64/gcc_intrin.h:548:
+                __asm__ __volatile__ ("lfetch.excl.nt2 [%0]" :: "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: include/asm-ia64/gcc_intrin.h:548:
+                __asm__ __volatile__ ("lfetch.excl.nt2 [%0]" :: "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: include/asm-ia64/gcc_intrin.h:551:
+                __asm__ __volatile__ ("lfetch.excl.nta [%0]" :: "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: include/asm-ia64/gcc_intrin.h:551:
+                __asm__ __volatile__ ("lfetch.excl.nta [%0]" :: "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: include/asm-ia64/gcc_intrin.h:560:
+                __asm__ __volatile__ ("lfetch.fault [%0]" : : "r"(y));^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: include/asm-ia64/gcc_intrin.h:560:
+                __asm__ __volatile__ ("lfetch.fault [%0]" : : "r"(y));^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: include/asm-ia64/gcc_intrin.h:563:
+                __asm__ __volatile__ ("lfetch.fault.nt1 [%0]" : : "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: include/asm-ia64/gcc_intrin.h:563:
+                __asm__ __volatile__ ("lfetch.fault.nt1 [%0]" : : "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: include/asm-ia64/gcc_intrin.h:566:
+                __asm__ __volatile__ ("lfetch.fault.nt2 [%0]" : : "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: include/asm-ia64/gcc_intrin.h:566:
+                __asm__ __volatile__ ("lfetch.fault.nt2 [%0]" : : "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: include/asm-ia64/gcc_intrin.h:569:
+                __asm__ __volatile__ ("lfetch.fault.nta [%0]" : : "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: include/asm-ia64/gcc_intrin.h:569:
+                __asm__ __volatile__ ("lfetch.fault.nta [%0]" : : "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: include/asm-ia64/gcc_intrin.h:578:
+                __asm__ __volatile__ ("lfetch.fault.excl [%0]" :: "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: include/asm-ia64/gcc_intrin.h:578:
+                __asm__ __volatile__ ("lfetch.fault.excl [%0]" :: "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: include/asm-ia64/gcc_intrin.h:581:
+                __asm__ __volatile__ ("lfetch.fault.excl.nt1 [%0]" :: "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: include/asm-ia64/gcc_intrin.h:581:
+                __asm__ __volatile__ ("lfetch.fault.excl.nt1 [%0]" :: "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: include/asm-ia64/gcc_intrin.h:584:
+                __asm__ __volatile__ ("lfetch.fault.excl.nt2 [%0]" :: "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: include/asm-ia64/gcc_intrin.h:584:
+                __asm__ __volatile__ ("lfetch.fault.excl.nt2 [%0]" :: "r"(y));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: include/asm-ia64/gcc_intrin.h:587:
+                __asm__ __volatile__ ("lfetch.fault.excl.nta [%0]" :: "r"(y));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: include/asm-ia64/gcc_intrin.h:587:
+                __asm__ __volatile__ ("lfetch.fault.excl.nta [%0]" :: "r"(y));^I\$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416793.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 57 errors, 21 warnings, 0 checks, 636 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416793.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
