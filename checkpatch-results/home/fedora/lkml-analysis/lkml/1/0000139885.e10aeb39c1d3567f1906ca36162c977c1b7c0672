WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
> > There is still some work pending such as adding some checks to ensure we

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#812: FILE: fs/reiserfs/fix_node.c:1025:
 	if (buffer_locked(*pcom_father)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: fs/reiserfs/journal.c:567:
+static inline void reiserfs_mutex_lock_safe(struct mutex *m,
+			       struct super_block *s)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1217: FILE: fs/reiserfs/journal.c:2311:
 	for (i = 0; i < get_desc_trans_len(desc); i++) {
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1298: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1303: FILE: fs/reiserfs/lock.c:1:
+#include <linux/reiserfs_fs.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'partialy' may be misspelled - perhaps 'partially'?
#1320: FILE: fs/reiserfs/lock.c:18:
+ * reiserfs performances were partialy based on the release while schedule()
                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#1490: FILE: fs/reiserfs/super.c:1210:
+	 * Now we must explictly acquire our own lock
 	               ^^^^^^^^^

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#1590: FILE: include/linux/hardirq.h:94:
+#define in_atomic()		((preempt_count() & ~PREEMPT_ACTIVE) != 0)

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1708: FILE: include/linux/smp_lock.h:28:
+extern void debug_print_bkl(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2246: FILE: lib/kernel_lock.c:60:
+		printk(KERN_EMERG "BUG: **** BKL held by: %d:%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2247: FILE: lib/kernel_lock.c:61:
+		printk(KERN_EMERG "BUG: **** BKL held by: %d:%s\n",
+			kernel_mutex.owner->task->pid,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139885.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 5 checks, 2132 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139885.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
