CHECK:LINE_SPACING: Please don't use multiple blank lines
#55: FILE: drivers/char/drm/drm_pciids.h:345:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#56: FILE: drivers/char/drm/drm_pciids.h:346:
+#define via_chrome9DRV_PCI_IDS \
+	{0x1106, 0x3225, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, \
+	{0x1106, 0x3230, PCI_ANY_ID, PCI_ANY_ID, 0, 0, VIA_CHROME9_DX9_0}, \
+	{0x1106, 0x3371, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0}, \
+	{0x1106, 0x1122, PCI_ANY_ID, PCI_ANY_ID, 0, 0, VIA_CHROME9_PCIE_GROUP},\
+	{0, 0, 0}

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#72: FILE: drivers/char/drm/Kconfig:102:
+config DRM_VIA_CHROME9
+	tristate "Via unichrome9 video cards"
+	depends on DRM
+	help
+	  Choose this option if you have a Via unichrome9 or compatible video
+	  chipset. If M is selected the module will be called via_chrome9.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: drivers/char/drm/via_chrome9_3d_reg.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <GetMMIORegister>
#129: FILE: drivers/char/drm/via_chrome9_3d_reg.h:30:
+#define GetMMIORegister(base, offset)      \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#130: FILE: drivers/char/drm/via_chrome9_3d_reg.h:31:
+	(*(volatile unsigned int *)(void *)(((unsigned char *)(base)) + \

CHECK:CAMELCASE: Avoid CamelCase: <SetMMIORegister>
#132: FILE: drivers/char/drm/via_chrome9_3d_reg.h:33:
+#define SetMMIORegister(base, offset, val) \

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#133: FILE: drivers/char/drm/via_chrome9_3d_reg.h:34:
+	(*(volatile unsigned int *)(void *)(((unsigned char *)(base)) + \

CHECK:CAMELCASE: Avoid CamelCase: <GetMMIORegisterU8>
#136: FILE: drivers/char/drm/via_chrome9_3d_reg.h:37:
+#define GetMMIORegisterU8(base, offset)      \

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#137: FILE: drivers/char/drm/via_chrome9_3d_reg.h:38:
+	(*(volatile unsigned char *)(void *)(((unsigned char *)(base)) + \

CHECK:CAMELCASE: Avoid CamelCase: <SetMMIORegisterU8>
#139: FILE: drivers/char/drm/via_chrome9_3d_reg.h:40:
+#define SetMMIORegisterU8(base, offset, val) \

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#140: FILE: drivers/char/drm/via_chrome9_3d_reg.h:41:
+	(*(volatile unsigned char *)(void *)(((unsigned char *)(base)) + \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bci_base' - possible side-effects?
#144: FILE: drivers/char/drm/via_chrome9_3d_reg.h:45:
+#define BCI_SET_STREAM_REGISTER(bci_base, bci_index, reg_value)         \
+do {                                                                    \
+	unsigned long cmd;                                              \
+									\
+	cmd = (0x90000000                                               \
+		| (1<<16) /* stream processor register */               \
+		| (bci_index & 0x3FFC)); /* MMIO register address */    \
+	BCI_SEND(bci_base, cmd);                                        \
+	BCI_SEND(bci_base, reg_value);                                  \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bci_index' may be better as '(bci_index)' to avoid precedence issues
#144: FILE: drivers/char/drm/via_chrome9_3d_reg.h:45:
+#define BCI_SET_STREAM_REGISTER(bci_base, bci_index, reg_value)         \
+do {                                                                    \
+	unsigned long cmd;                                              \
+									\
+	cmd = (0x90000000                                               \
+		| (1<<16) /* stream processor register */               \
+		| (bci_index & 0x3FFC)); /* MMIO register address */    \
+	BCI_SEND(bci_base, cmd);                                        \
+	BCI_SEND(bci_base, reg_value);                                  \
+	} while (0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#149: FILE: drivers/char/drm/via_chrome9_3d_reg.h:50:
+		| (1<<16) /* stream processor register */               \
 		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader0>
#157: FILE: drivers/char/drm/via_chrome9_3d_reg.h:58:
+#define INV_AGPHeader0              0xFE000000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader1>
#158: FILE: drivers/char/drm/via_chrome9_3d_reg.h:59:
+#define INV_AGPHeader1              0xFE010000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader2>
#159: FILE: drivers/char/drm/via_chrome9_3d_reg.h:60:
+#define INV_AGPHeader2              0xFE020000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader3>
#160: FILE: drivers/char/drm/via_chrome9_3d_reg.h:61:
+#define INV_AGPHeader3              0xFE030000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader4>
#161: FILE: drivers/char/drm/via_chrome9_3d_reg.h:62:
+#define INV_AGPHeader4              0xFE040000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader5>
#162: FILE: drivers/char/drm/via_chrome9_3d_reg.h:63:
+#define INV_AGPHeader5              0xFE050000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader6>
#163: FILE: drivers/char/drm/via_chrome9_3d_reg.h:64:
+#define INV_AGPHeader6              0xFE060000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader7>
#164: FILE: drivers/char/drm/via_chrome9_3d_reg.h:65:
+#define INV_AGPHeader7              0xFE070000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader82>
#165: FILE: drivers/char/drm/via_chrome9_3d_reg.h:66:
+#define INV_AGPHeader82             0xFE820000

CHECK:CAMELCASE: Avoid CamelCase: <INV_AGPHeader_MASK>
#166: FILE: drivers/char/drm/via_chrome9_3d_reg.h:67:
+#define INV_AGPHeader_MASK          0xFFFF0000

CHECK:LINE_SPACING: Please don't use multiple blank lines
#187: FILE: drivers/char/drm/via_chrome9_3d_reg.h:88:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: drivers/char/drm/via_chrome9_3d_reg.h:99:
+#define INV_ENG_BUSY_ALL            ^I^I\$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#221: FILE: drivers/char/drm/via_chrome9_3d_reg.h:122:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <INV_HSWFlag_DBGMASK>
#230: FILE: drivers/char/drm/via_chrome9_3d_reg.h:131:
+#define INV_HSWFlag_DBGMASK          0x00000FFF

CHECK:CAMELCASE: Avoid CamelCase: <INV_HSWFlag_ENCODEMASK>
#231: FILE: drivers/char/drm/via_chrome9_3d_reg.h:132:
+#define INV_HSWFlag_ENCODEMASK       0x007FFFF0

CHECK:CAMELCASE: Avoid CamelCase: <INV_HSWFlag_ADDRSHFT>
#232: FILE: drivers/char/drm/via_chrome9_3d_reg.h:133:
+#define INV_HSWFlag_ADDRSHFT         8

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: drivers/char/drm/via_chrome9_3d_reg.h:134:
+#define INV_HSWFlag_DECODEMASK       ^I^I^I\$

CHECK:CAMELCASE: Avoid CamelCase: <INV_HSWFlag_DECODEMASK>
#233: FILE: drivers/char/drm/via_chrome9_3d_reg.h:134:
+#define INV_HSWFlag_DECODEMASK       			\

CHECK:CAMELCASE: Avoid CamelCase: <INV_HSWFlag_ADDR_ENCODE>
#235: FILE: drivers/char/drm/via_chrome9_3d_reg.h:136:
+#define INV_HSWFlag_ADDR_ENCODE(x)   0xCC000000

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: drivers/char/drm/via_chrome9_3d_reg.h:137:
+#define INV_HSWFlag_ADDR_DECODE(x)    ^I^I^I\$

CHECK:CAMELCASE: Avoid CamelCase: <INV_HSWFlag_ADDR_DECODE>
#236: FILE: drivers/char/drm/via_chrome9_3d_reg.h:137:
+#define INV_HSWFlag_ADDR_DECODE(x)    			\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#236: FILE: drivers/char/drm/via_chrome9_3d_reg.h:137:
+#define INV_HSWFlag_ADDR_DECODE(x)    			\
+	(((unsigned int)x & INV_HSWFlag_DECODEMASK) >> INV_HSWFlag_ADDRSHFT)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: drivers/char/drm/via_chrome9_3d_reg.h:140:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <INV_HAGPBpID_PAUSE>
#246: FILE: drivers/char/drm/via_chrome9_3d_reg.h:147:
+#define INV_HAGPBpID_PAUSE               0x00000000

CHECK:CAMELCASE: Avoid CamelCase: <INV_HAGPBpID_JUMP>
#247: FILE: drivers/char/drm/via_chrome9_3d_reg.h:148:
+#define INV_HAGPBpID_JUMP                0x00000100

CHECK:CAMELCASE: Avoid CamelCase: <INV_HAGPBpID_STOP>
#248: FILE: drivers/char/drm/via_chrome9_3d_reg.h:149:
+#define INV_HAGPBpID_STOP                0x00000200

CHECK:CAMELCASE: Avoid CamelCase: <INV_HAGPBjumpH_MASK>
#255: FILE: drivers/char/drm/via_chrome9_3d_reg.h:156:
+#define INV_HAGPBjumpH_MASK              0x000000FF

CHECK:CAMELCASE: Avoid CamelCase: <INV_HAGPBjumpH_SHFT>
#256: FILE: drivers/char/drm/via_chrome9_3d_reg.h:157:
+#define INV_HAGPBjumpH_SHFT              0

CHECK:CAMELCASE: Avoid CamelCase: <INV_HAGPBClear>
#267: FILE: drivers/char/drm/via_chrome9_3d_reg.h:168:
+#define INV_HAGPBClear                   0x00000008

CHECK:CAMELCASE: Avoid CamelCase: <INV_HRSTTrig_RestoreAGP>
#269: FILE: drivers/char/drm/via_chrome9_3d_reg.h:170:
+#define INV_HRSTTrig_RestoreAGP          0x00000004

CHECK:CAMELCASE: Avoid CamelCase: <INV_HRSTTrig_RestoreAll>
#270: FILE: drivers/char/drm/via_chrome9_3d_reg.h:171:
+#define INV_HRSTTrig_RestoreAll          0x00000002

CHECK:CAMELCASE: Avoid CamelCase: <INV_HAGPBTrig>
#271: FILE: drivers/char/drm/via_chrome9_3d_reg.h:172:
+#define INV_HAGPBTrig                    0x00000001

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#301: FILE: drivers/char/drm/via_chrome9_3d_reg.h:202:
+#define INV_SubA_HSetRBGID       ^I 0x02000000$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: drivers/char/drm/via_chrome9_3d_reg.h:211:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader0_INVI>
#336: FILE: drivers/char/drm/via_chrome9_3d_reg.h:237:
+#define ADDCmdHeader0_INVI(pCmd, dwCount)                       \

CHECK:CAMELCASE: Avoid CamelCase: <pCmd>
#336: FILE: drivers/char/drm/via_chrome9_3d_reg.h:237:
+#define ADDCmdHeader0_INVI(pCmd, dwCount)                       \

CHECK:CAMELCASE: Avoid CamelCase: <dwCount>
#336: FILE: drivers/char/drm/via_chrome9_3d_reg.h:237:
+#define ADDCmdHeader0_INVI(pCmd, dwCount)                       \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#336: FILE: drivers/char/drm/via_chrome9_3d_reg.h:237:
+#define ADDCmdHeader0_INVI(pCmd, dwCount)                       \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader0;                             \
+	*(pCmd)++ = (dwCount);                                  \
+	*(pCmd)++ = 0;                                          \
+	*(pCmd)++ = (unsigned int)INV_HSWFlag_ADDR_ENCODE(pCmd);       \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader1_INVI>
#349: FILE: drivers/char/drm/via_chrome9_3d_reg.h:250:
+#define ADDCmdHeader1_INVI(pCmd, dwAddr, dwCount)               \

CHECK:CAMELCASE: Avoid CamelCase: <dwAddr>
#349: FILE: drivers/char/drm/via_chrome9_3d_reg.h:250:
+#define ADDCmdHeader1_INVI(pCmd, dwAddr, dwCount)               \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#349: FILE: drivers/char/drm/via_chrome9_3d_reg.h:250:
+#define ADDCmdHeader1_INVI(pCmd, dwAddr, dwCount)               \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader1 | (dwAddr);                  \
+	*(pCmd)++ = (dwCount);                                  \
+	*(pCmd)++ = 0;                                          \
+	*(pCmd)++ = (unsigned int)INV_HSWFlag_ADDR_ENCODE(pCmd);       \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader2_INVI>
#362: FILE: drivers/char/drm/via_chrome9_3d_reg.h:263:
+#define ADDCmdHeader2_INVI(pCmd, dwAddr, dwType)                \

CHECK:CAMELCASE: Avoid CamelCase: <dwType>
#362: FILE: drivers/char/drm/via_chrome9_3d_reg.h:263:
+#define ADDCmdHeader2_INVI(pCmd, dwAddr, dwType)                \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#362: FILE: drivers/char/drm/via_chrome9_3d_reg.h:263:
+#define ADDCmdHeader2_INVI(pCmd, dwAddr, dwType)                \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned int)(pCmd)) & 0xF) {                        \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader2 | ((dwAddr)+4);              \
+	*(pCmd)++ = (dwAddr);                                   \
+	*(pCmd)++ = (dwType);                                   \
+	*(pCmd)++ = (unsigned int)INV_HSWFlag_ADDR_ENCODE(pCmd);       \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dwAddr' - possible side-effects?
#362: FILE: drivers/char/drm/via_chrome9_3d_reg.h:263:
+#define ADDCmdHeader2_INVI(pCmd, dwAddr, dwType)                \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned int)(pCmd)) & 0xF) {                        \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader2 | ((dwAddr)+4);              \
+	*(pCmd)++ = (dwAddr);                                   \
+	*(pCmd)++ = (dwType);                                   \
+	*(pCmd)++ = (unsigned int)INV_HSWFlag_ADDR_ENCODE(pCmd);       \
+}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#368: FILE: drivers/char/drm/via_chrome9_3d_reg.h:269:
+	*(pCmd)++ = INV_AGPHeader2 | ((dwAddr)+4);              \
 	                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader2_SWFlag_INVI>
#375: FILE: drivers/char/drm/via_chrome9_3d_reg.h:276:
+#define ADDCmdHeader2_SWFlag_INVI(pCmd, dwAddr, dwType, dwSWFlag)  \

CHECK:CAMELCASE: Avoid CamelCase: <dwSWFlag>
#375: FILE: drivers/char/drm/via_chrome9_3d_reg.h:276:
+#define ADDCmdHeader2_SWFlag_INVI(pCmd, dwAddr, dwType, dwSWFlag)  \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#375: FILE: drivers/char/drm/via_chrome9_3d_reg.h:276:
+#define ADDCmdHeader2_SWFlag_INVI(pCmd, dwAddr, dwType, dwSWFlag)  \
+{                                                                  \
+	/* 4 unsigned int align, insert NULL Command for padding */       \
+	while (((unsigned long *)(pCmd)) & 0xF) {			   \
+		*(pCmd)++ = 0xCC000000;                            \
+	}                                                          \
+	*(pCmd)++ = INV_AGPHeader2 | ((dwAddr)+4);                 \
+	*(pCmd)++ = (dwAddr);                                      \
+	*(pCmd)++ = (dwType);                                      \
+	*(pCmd)++ = (dwSWFlag);                                    \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dwAddr' - possible side-effects?
#375: FILE: drivers/char/drm/via_chrome9_3d_reg.h:276:
+#define ADDCmdHeader2_SWFlag_INVI(pCmd, dwAddr, dwType, dwSWFlag)  \
+{                                                                  \
+	/* 4 unsigned int align, insert NULL Command for padding */       \
+	while (((unsigned long *)(pCmd)) & 0xF) {			   \
+		*(pCmd)++ = 0xCC000000;                            \
+	}                                                          \
+	*(pCmd)++ = INV_AGPHeader2 | ((dwAddr)+4);                 \
+	*(pCmd)++ = (dwAddr);                                      \
+	*(pCmd)++ = (dwType);                                      \
+	*(pCmd)++ = (dwSWFlag);                                    \
+}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: drivers/char/drm/via_chrome9_3d_reg.h:282:
+	*(pCmd)++ = INV_AGPHeader2 | ((dwAddr)+4);                 \
 	                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#387: FILE: drivers/char/drm/via_chrome9_3d_reg.h:288:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader3_INVI>
#389: FILE: drivers/char/drm/via_chrome9_3d_reg.h:290:
+#define ADDCmdHeader3_INVI(pCmd, dwType, dwStart, dwCount)      \

CHECK:CAMELCASE: Avoid CamelCase: <dwStart>
#389: FILE: drivers/char/drm/via_chrome9_3d_reg.h:290:
+#define ADDCmdHeader3_INVI(pCmd, dwType, dwStart, dwCount)      \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#389: FILE: drivers/char/drm/via_chrome9_3d_reg.h:290:
+#define ADDCmdHeader3_INVI(pCmd, dwType, dwStart, dwCount)      \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {			\
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader3 | INV_REG_3D_TRANS;          \
+	*(pCmd)++ = (dwCount);                                  \
+	*(pCmd)++ = (dwType) | ((dwStart) & 0xFFFF);            \
+	*(pCmd)++ = (unsigned int)INV_HSWFlag_ADDR_ENCODE(pCmd);       \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader3_SWFlag_INVI>
#402: FILE: drivers/char/drm/via_chrome9_3d_reg.h:303:
+#define ADDCmdHeader3_SWFlag_INVI(pCmd, dwType, dwStart, dwSWFlag, dwCount)  \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#402: FILE: drivers/char/drm/via_chrome9_3d_reg.h:303:
+#define ADDCmdHeader3_SWFlag_INVI(pCmd, dwType, dwStart, dwSWFlag, dwCount)  \
+{                                                                            \
+	/* 4 unsigned int align, insert NULL Command for padding */          \
+	while (((unsigned long *)(pCmd)) & 0xF) {                           \
+		*(pCmd)++ = 0xCC000000;                                      \
+	}                                                                    \
+	*(pCmd)++ = INV_AGPHeader3 | INV_REG_3D_TRANS;                       \
+	*(pCmd)++ = (dwCount);                                               \
+	*(pCmd)++ = (dwType) | ((dwStart) & 0xFFFF);                         \
+	*(pCmd)++ = (dwSWFlag);                                              \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader4_INVI>
#415: FILE: drivers/char/drm/via_chrome9_3d_reg.h:316:
+#define ADDCmdHeader4_INVI(pCmd, dwAddr, dwCount, id)           \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#415: FILE: drivers/char/drm/via_chrome9_3d_reg.h:316:
+#define ADDCmdHeader4_INVI(pCmd, dwAddr, dwCount, id)           \
+{                                                               \
+    /* 4 unsigned int align, insert NULL Command for padding */ \
+	while (((unsigned long *)(pCmd)) & 0xF) {              \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader4 | (dwAddr);                  \
+	*(pCmd)++ = (dwCount);                                  \
+	*(pCmd)++ = (id);                                       \
+	*(pCmd)++ = 0;                                          \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader5_INVI>
#428: FILE: drivers/char/drm/via_chrome9_3d_reg.h:329:
+#define ADDCmdHeader5_INVI(pCmd, dwQWcount, id)                 \

CHECK:CAMELCASE: Avoid CamelCase: <dwQWcount>
#428: FILE: drivers/char/drm/via_chrome9_3d_reg.h:329:
+#define ADDCmdHeader5_INVI(pCmd, dwQWcount, id)                 \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#428: FILE: drivers/char/drm/via_chrome9_3d_reg.h:329:
+#define ADDCmdHeader5_INVI(pCmd, dwQWcount, id)                 \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+	*(pCmd)++ = 0xCC000000;                                 \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader5;                             \
+	*(pCmd)++ = (dwQWcount);                                \
+	*(pCmd)++ = (id);                                       \
+	*(pCmd)++ = 0;                                          \
+}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#431: FILE: drivers/char/drm/via_chrome9_3d_reg.h:332:
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+	*(pCmd)++ = 0xCC000000;                                 \

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader6_INVI>
#441: FILE: drivers/char/drm/via_chrome9_3d_reg.h:342:
+#define ADDCmdHeader6_INVI(pCmd)                                \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#441: FILE: drivers/char/drm/via_chrome9_3d_reg.h:342:
+#define ADDCmdHeader6_INVI(pCmd)                                \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader6;                             \
+	*(pCmd)++ = 0;                                          \
+	*(pCmd)++ = 0;                                          \
+	*(pCmd)++ = 0;                                          \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader7_INVI>
#454: FILE: drivers/char/drm/via_chrome9_3d_reg.h:355:
+#define ADDCmdHeader7_INVI(pCmd, dwQWcount, id)                 \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#454: FILE: drivers/char/drm/via_chrome9_3d_reg.h:355:
+#define ADDCmdHeader7_INVI(pCmd, dwQWcount, id)                 \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader7;                             \
+	*(pCmd)++ = (dwQWcount);                                \
+	*(pCmd)++ = (id);                                       \
+	*(pCmd)++ = 0;                                          \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdHeader82_INVI>
#467: FILE: drivers/char/drm/via_chrome9_3d_reg.h:368:
+#define ADDCmdHeader82_INVI(pCmd, dwAddr, dwType);              \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#467: FILE: drivers/char/drm/via_chrome9_3d_reg.h:368:
+#define ADDCmdHeader82_INVI(pCmd, dwAddr, dwType);              \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader82 | ((dwAddr)+4);             \
+	*(pCmd)++ = (dwAddr);                                   \
+	*(pCmd)++ = (dwType);                                   \
+	*(pCmd)++ = 0xCC000000;                                 \
+}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#467: FILE: drivers/char/drm/via_chrome9_3d_reg.h:368:
+#define ADDCmdHeader82_INVI(pCmd, dwAddr, dwType);              \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader82 | ((dwAddr)+4);             \
+	*(pCmd)++ = (dwAddr);                                   \
+	*(pCmd)++ = (dwType);                                   \
+	*(pCmd)++ = 0xCC000000;                                 \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dwAddr' - possible side-effects?
#467: FILE: drivers/char/drm/via_chrome9_3d_reg.h:368:
+#define ADDCmdHeader82_INVI(pCmd, dwAddr, dwType);              \
+{                                                               \
+	/* 4 unsigned int align, insert NULL Command for padding */    \
+	while (((unsigned long *)(pCmd)) & 0xF) {                    \
+		*(pCmd)++ = 0xCC000000;                         \
+	}                                                       \
+	*(pCmd)++ = INV_AGPHeader82 | ((dwAddr)+4);             \
+	*(pCmd)++ = (dwAddr);                                   \
+	*(pCmd)++ = (dwType);                                   \
+	*(pCmd)++ = 0xCC000000;                                 \
+}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#473: FILE: drivers/char/drm/via_chrome9_3d_reg.h:374:
+	*(pCmd)++ = INV_AGPHeader82 | ((dwAddr)+4);             \
 	                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#479: FILE: drivers/char/drm/via_chrome9_3d_reg.h:380:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <ADD2DCmd_INVI>
#480: FILE: drivers/char/drm/via_chrome9_3d_reg.h:381:
+#define ADD2DCmd_INVI(pCmd, dwAddr, dwCmd)                  \

CHECK:CAMELCASE: Avoid CamelCase: <dwCmd>
#480: FILE: drivers/char/drm/via_chrome9_3d_reg.h:381:
+#define ADD2DCmd_INVI(pCmd, dwAddr, dwCmd)                  \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmd' - possible side-effects?
#480: FILE: drivers/char/drm/via_chrome9_3d_reg.h:381:
+#define ADD2DCmd_INVI(pCmd, dwAddr, dwCmd)                  \
+{                                                           \
+	*(pCmd)++ = (dwAddr);                               \
+	*(pCmd)++ = (dwCmd);                                \
+}

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdData_INVI>
#486: FILE: drivers/char/drm/via_chrome9_3d_reg.h:387:
+#define ADDCmdData_INVI(pCmd, dwCmd)             *(pCmd)++ = (dwCmd)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#486: FILE: drivers/char/drm/via_chrome9_3d_reg.h:387:
+#define ADDCmdData_INVI(pCmd, dwCmd)             *(pCmd)++ = (dwCmd)

CHECK:CAMELCASE: Avoid CamelCase: <ADDCmdDataStream_INVI>
#488: FILE: drivers/char/drm/via_chrome9_3d_reg.h:389:
+#define ADDCmdDataStream_INVI(pCmdBuf, pCmd, dwCount)       \

CHECK:CAMELCASE: Avoid CamelCase: <pCmdBuf>
#488: FILE: drivers/char/drm/via_chrome9_3d_reg.h:389:
+#define ADDCmdDataStream_INVI(pCmdBuf, pCmd, dwCount)       \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pCmdBuf' - possible side-effects?
#488: FILE: drivers/char/drm/via_chrome9_3d_reg.h:389:
+#define ADDCmdDataStream_INVI(pCmdBuf, pCmd, dwCount)       \
+{                                                           \
+	memcpy((pCmdBuf), (pCmd), ((dwCount)<<2));        \
+	(pCmdBuf) += (dwCount);                             \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dwCount' - possible side-effects?
#488: FILE: drivers/char/drm/via_chrome9_3d_reg.h:389:
+#define ADDCmdDataStream_INVI(pCmdBuf, pCmd, dwCount)       \
+{                                                           \
+	memcpy((pCmdBuf), (pCmd), ((dwCount)<<2));        \
+	(pCmdBuf) += (dwCount);                             \
+}

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#490: FILE: drivers/char/drm/via_chrome9_3d_reg.h:391:
+	memcpy((pCmdBuf), (pCmd), ((dwCount)<<2));        \
 	                                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#498: FILE: drivers/char/drm/via_chrome9_dma.c:1:
+/*

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#534: FILE: drivers/char/drm/via_chrome9_dma.c:37:
+unsigned int NULL_COMMAND_INV[4] =
+	{ 0xCC000000, 0xCD000000, 0xCE000000, 0xCF000000 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <ProtectSizeValue>
#542: FILE: drivers/char/drm/via_chrome9_dma.c:45:
+ProtectSizeValue(unsigned int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#545: FILE: drivers/char/drm/via_chrome9_dma.c:48:
+	unsigned int i;
+	for (i = 0; i < 8; i++)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#547: FILE: drivers/char/drm/via_chrome9_dma.c:50:
+		if ((size > (1 << (i + 12)))
+		    && (size <= (1 << (i + 13))))

CHECK:CAMELCASE: Avoid CamelCase: <InitPCIEGART>
#553: FILE: drivers/char/drm/via_chrome9_dma.c:56:
+InitPCIEGART(struct drm_via_chrome9_private *dev_priv)

CHECK:CAMELCASE: Avoid CamelCase: <pGARTTable>
#555: FILE: drivers/char/drm/via_chrome9_dma.c:58:
+	unsigned int *pGARTTable;

CHECK:CAMELCASE: Avoid CamelCase: <GARTOffset>
#556: FILE: drivers/char/drm/via_chrome9_dma.c:59:
+	unsigned int i, entries, GARTOffset;

CHECK:SPACING: No space is necessary after a cast
#581: FILE: drivers/char/drm/via_chrome9_dma.c:84:
+	sr6a = (unsigned char) ((GARTOffset & 0xff000) >> 12);

CHECK:SPACING: No space is necessary after a cast
#585: FILE: drivers/char/drm/via_chrome9_dma.c:88:
+	sr6b = (unsigned char) ((GARTOffset & 0xff00000) >> 20);

CHECK:SPACING: No space is necessary after a cast
#591: FILE: drivers/char/drm/via_chrome9_dma.c:94:
+	sr6c |= ((unsigned char) ((GARTOffset >> 28) & 0x01));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#621: FILE: drivers/char/drm/via_chrome9_dma.c:124:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <AllocAndBindPCIEMemory>
#623: FILE: drivers/char/drm/via_chrome9_dma.c:126:
+AllocAndBindPCIEMemory(struct drm_via_chrome9_private *dev_priv,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: drivers/char/drm/via_chrome9_dma.c:127:
+AllocAndBindPCIEMemory(struct drm_via_chrome9_private *dev_priv,
+	unsigned int size, unsigned int offset)

CHECK:SPACING: No space is necessary after a cast
#664: FILE: drivers/char/drm/via_chrome9_dma.c:167:
+		       (vmalloc_to_page((void *) addrlinear + PAGE_SIZE * i)) &

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#677: FILE: drivers/char/drm/via_chrome9_dma.c:180:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <SetAGPDoubleCmd_inv>
#680: FILE: drivers/char/drm/via_chrome9_dma.c:183:
+SetAGPDoubleCmd_inv(struct drm_device *dev)

WARNING:RETURN_VOID: void function return statements are not generally useful
#684: FILE: drivers/char/drm/via_chrome9_dma.c:187:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <SetAGPRingCmdRegs_inv>
#687: FILE: drivers/char/drm/via_chrome9_dma.c:190:
+SetAGPRingCmdRegs_inv(struct drm_device *dev)

CHECK:SPACING: No space is necessary after a cast
#690: FILE: drivers/char/drm/via_chrome9_dma.c:193:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:CAMELCASE: Avoid CamelCase: <lpcmDMAManager>
#691: FILE: drivers/char/drm/via_chrome9_dma.c:194:
+	struct drm_via_chrome9_DMA_manager *lpcmDMAManager =

CHECK:SPACING: No space is necessary after a cast
#692: FILE: drivers/char/drm/via_chrome9_dma.c:195:
+		(struct drm_via_chrome9_DMA_manager *) dev_priv->dma_manager;

CHECK:CAMELCASE: Avoid CamelCase: <AGPBufLinearBase>
#693: FILE: drivers/char/drm/via_chrome9_dma.c:196:
+	unsigned int AGPBufLinearBase = 0, AGPBufPhysicalBase = 0;

CHECK:CAMELCASE: Avoid CamelCase: <AGPBufPhysicalBase>
#693: FILE: drivers/char/drm/via_chrome9_dma.c:196:
+	unsigned int AGPBufLinearBase = 0, AGPBufPhysicalBase = 0;

CHECK:CAMELCASE: Avoid CamelCase: <pFree>
#694: FILE: drivers/char/drm/via_chrome9_dma.c:197:
+	unsigned long *pFree;

CHECK:CAMELCASE: Avoid CamelCase: <dwEnd>
#695: FILE: drivers/char/drm/via_chrome9_dma.c:198:
+	unsigned int dwStart, dwEnd, dwPause, AGPCurrAddr, AGPCurStat, CurrAGP;

CHECK:CAMELCASE: Avoid CamelCase: <dwPause>
#695: FILE: drivers/char/drm/via_chrome9_dma.c:198:
+	unsigned int dwStart, dwEnd, dwPause, AGPCurrAddr, AGPCurStat, CurrAGP;

CHECK:CAMELCASE: Avoid CamelCase: <AGPCurrAddr>
#695: FILE: drivers/char/drm/via_chrome9_dma.c:198:
+	unsigned int dwStart, dwEnd, dwPause, AGPCurrAddr, AGPCurStat, CurrAGP;

CHECK:CAMELCASE: Avoid CamelCase: <AGPCurStat>
#695: FILE: drivers/char/drm/via_chrome9_dma.c:198:
+	unsigned int dwStart, dwEnd, dwPause, AGPCurrAddr, AGPCurStat, CurrAGP;

CHECK:CAMELCASE: Avoid CamelCase: <CurrAGP>
#695: FILE: drivers/char/drm/via_chrome9_dma.c:198:
+	unsigned int dwStart, dwEnd, dwPause, AGPCurrAddr, AGPCurStat, CurrAGP;

CHECK:CAMELCASE: Avoid CamelCase: <dwReg60>
#696: FILE: drivers/char/drm/via_chrome9_dma.c:199:
+	unsigned int dwReg60, dwReg61, dwReg62, dwReg63,

CHECK:CAMELCASE: Avoid CamelCase: <dwReg61>
#696: FILE: drivers/char/drm/via_chrome9_dma.c:199:
+	unsigned int dwReg60, dwReg61, dwReg62, dwReg63,

CHECK:CAMELCASE: Avoid CamelCase: <dwReg62>
#696: FILE: drivers/char/drm/via_chrome9_dma.c:199:
+	unsigned int dwReg60, dwReg61, dwReg62, dwReg63,

CHECK:CAMELCASE: Avoid CamelCase: <dwReg63>
#696: FILE: drivers/char/drm/via_chrome9_dma.c:199:
+	unsigned int dwReg60, dwReg61, dwReg62, dwReg63,

CHECK:CAMELCASE: Avoid CamelCase: <dwReg64>
#697: FILE: drivers/char/drm/via_chrome9_dma.c:200:
+		dwReg64, dwReg65, dwJump;

CHECK:CAMELCASE: Avoid CamelCase: <dwReg65>
#697: FILE: drivers/char/drm/via_chrome9_dma.c:200:
+		dwReg64, dwReg65, dwJump;

CHECK:CAMELCASE: Avoid CamelCase: <dwJump>
#697: FILE: drivers/char/drm/via_chrome9_dma.c:200:
+		dwReg64, dwReg65, dwJump;

CHECK:CAMELCASE: Avoid CamelCase: <pBeg>
#699: FILE: drivers/char/drm/via_chrome9_dma.c:202:
+	lpcmDMAManager->pFree = lpcmDMAManager->pBeg;

CHECK:SPACING: No space is necessary after a cast
#701: FILE: drivers/char/drm/via_chrome9_dma.c:204:
+	AGPBufLinearBase = (unsigned int) lpcmDMAManager->addr_linear;

CHECK:SPACING: No space is necessary after a cast
#704: FILE: drivers/char/drm/via_chrome9_dma.c:207:
+		 CHIP_PCIE) ? 0 : (unsigned int) dev->agp->base +

CHECK:CAMELCASE: Avoid CamelCase: <pPhysical>
#705: FILE: drivers/char/drm/via_chrome9_dma.c:208:
+		lpcmDMAManager->pPhysical;

CHECK:SPACING: No space is necessary after a cast
#717: FILE: drivers/char/drm/via_chrome9_dma.c:220:
+		pFree = (unsigned long *) (AGPBufLinearBase + AGPCurrAddr -

CHECK:SPACING: No space is necessary after a cast
#725: FILE: drivers/char/drm/via_chrome9_dma.c:228:
+			while ((u32)((unsigned int) pFree) & 0x7f)

CHECK:SPACING: No space is necessary after a cast
#733: FILE: drivers/char/drm/via_chrome9_dma.c:236:
+			while ((u32) ((unsigned int) pFree) & 0x1f)

CHECK:SPACING: No space is necessary after a cast
#737: FILE: drivers/char/drm/via_chrome9_dma.c:240:
+			(u32) (((unsigned int) pFree) - AGPBufLinearBase +

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#752: FILE: drivers/char/drm/via_chrome9_dma.c:255:
+		while ((GetMMIORegister
[...]
+			 INV_RB_ENG_STATUS) & INV_ENG_BUSY_ALL));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#757: FILE: drivers/char/drm/via_chrome9_dma.c:260:
+		(u32) ((unsigned int) lpcmDMAManager->pBeg - AGPBufLinearBase +

CHECK:SPACING: No space is necessary after a cast
#759: FILE: drivers/char/drm/via_chrome9_dma.c:262:
+	dwEnd = (u32) ((unsigned int) lpcmDMAManager->pEnd - AGPBufLinearBase +

CHECK:CAMELCASE: Avoid CamelCase: <pEnd>
#759: FILE: drivers/char/drm/via_chrome9_dma.c:262:
+	dwEnd = (u32) ((unsigned int) lpcmDMAManager->pEnd - AGPBufLinearBase +

CHECK:SPACING: No space is necessary after a cast
#770: FILE: drivers/char/drm/via_chrome9_dma.c:273:
+		while ((u32)((unsigned long *) lpcmDMAManager->pFree) & 0x7f)

CHECK:SPACING: No space is necessary after a cast
#775: FILE: drivers/char/drm/via_chrome9_dma.c:278:
+		(u32)(((unsigned int) lpcmDMAManager->pFree) -

CHECK:CAMELCASE: Avoid CamelCase: <pInUseBySW>
#812: FILE: drivers/char/drm/via_chrome9_dma.c:315:
+	lpcmDMAManager->pInUseBySW = lpcmDMAManager->pFree;

WARNING:TYPO_SPELLING: 'intialization' may be misspelled - perhaps 'initialization'?
#815: FILE: drivers/char/drm/via_chrome9_dma.c:318:
+/* Do hw intialization and determine whether to use dma or mmio to
          ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#816: FILE: drivers/char/drm/via_chrome9_dma.c:319:
+/* Do hw intialization and determine whether to use dma or mmio to
+talk with hw */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#816: FILE: drivers/char/drm/via_chrome9_dma.c:319:
+talk with hw */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: drivers/char/drm/via_chrome9_dma.c:322:
+via_chrome9_hw_init(struct drm_device *dev,
+	struct drm_via_chrome9_init *init)

CHECK:SPACING: No space is necessary after a cast
#822: FILE: drivers/char/drm/via_chrome9_dma.c:325:
+		(struct drm_via_chrome9_private *) dev->dev_private;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#823: FILE: drivers/char/drm/via_chrome9_dma.c:326:
+	unsigned retval = 0;

CHECK:SPACING: No space is necessary after a cast
#848: FILE: drivers/char/drm/via_chrome9_dma.c:351:
+		(struct drm_via_chrome9_DMA_manager *) dev_priv->dma_manager;

CHECK:CAMELCASE: Avoid CamelCase: <DMASize>
#850: FILE: drivers/char/drm/via_chrome9_dma.c:353:
+		dev_priv->dma_manager)->DMASize = init->DMA_size;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*event_tag_info)...) over vmalloc(sizeof(struct drm_clb_event_tag_info)...)
#914: FILE: drivers/char/drm/via_chrome9_dma.c:417:
+	event_tag_info = vmalloc(sizeof(struct drm_clb_event_tag_info));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#922: FILE: drivers/char/drm/via_chrome9_dma.c:425:
+		 *) (((unsigned int) dev_priv->shadow_map.shadow_handle +

CHECK:SPACING: No space is necessary after a cast
#926: FILE: drivers/char/drm/via_chrome9_dma.c:429:
+	dev_priv->event_tag_info = (void *) event_tag_info;

CHECK:CAMELCASE: Avoid CamelCase: <pInUseByHW>
#934: FILE: drivers/char/drm/via_chrome9_dma.c:437:
+	lpcmDMAManager->pInUseByHW = lpcmDMAManager->pBeg;

CHECK:SPACING: No space is necessary after a cast
#935: FILE: drivers/char/drm/via_chrome9_dma.c:438:
+	lpcmDMAManager->LastIssuedEventTag = (unsigned int) (unsigned long *)

CHECK:CAMELCASE: Avoid CamelCase: <LastIssuedEventTag>
#935: FILE: drivers/char/drm/via_chrome9_dma.c:438:
+	lpcmDMAManager->LastIssuedEventTag = (unsigned int) (unsigned long *)

CHECK:CAMELCASE: Avoid CamelCase: <ppInUseByHW>
#937: FILE: drivers/char/drm/via_chrome9_dma.c:440:
+	lpcmDMAManager->ppInUseByHW =

CHECK:SPACING: No space is necessary after a cast
#938: FILE: drivers/char/drm/via_chrome9_dma.c:441:
+		(unsigned int **) ((char *) (dev_priv->mmio->handle) +

CHECK:CAMELCASE: Avoid CamelCase: <bDMAAgp>
#940: FILE: drivers/char/drm/via_chrome9_dma.c:443:
+	lpcmDMAManager->bDMAAgp = dev_priv->chip_agp;

CHECK:SPACING: No space is necessary after a cast
#941: FILE: drivers/char/drm/via_chrome9_dma.c:444:
+	lpcmDMAManager->addr_linear = (unsigned int *) addrlinear;

CHECK:CAMELCASE: Avoid CamelCase: <MaxKickoffSize>
#944: FILE: drivers/char/drm/via_chrome9_dma.c:447:
+		lpcmDMAManager->MaxKickoffSize = lpcmDMAManager->DMASize >> 1;

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#952: FILE: drivers/char/drm/via_chrome9_dma.c:455:
+			DRM_INFO("Total PCIE DMA buffer size = %8d bytes. \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#957: FILE: drivers/char/drm/via_chrome9_dma.c:460:
+			DRM_INFO("Total AGP DMA buffer size = %8d bytes. \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#966: FILE: drivers/char/drm/via_chrome9_dma.c:469:
+			DRM_INFO("DMA buffer initialized finished. \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#968: FILE: drivers/char/drm/via_chrome9_dma.c:471:
+			DRM_INFO("Total PCIE DMA buffer size = %8d bytes. \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#973: FILE: drivers/char/drm/via_chrome9_dma.c:476:
+			DRM_INFO("Total AGP DMA buffer size = %8d bytes. \n",

CHECK:CAMELCASE: Avoid CamelCase: <HdType>
#990: FILE: drivers/char/drm/via_chrome9_dma.c:493:
+	u32 HdType, dwQWCount, i, dwCount, Addr1, Addr2, SWPointer,

CHECK:CAMELCASE: Avoid CamelCase: <dwQWCount>
#990: FILE: drivers/char/drm/via_chrome9_dma.c:493:
+	u32 HdType, dwQWCount, i, dwCount, Addr1, Addr2, SWPointer,

CHECK:CAMELCASE: Avoid CamelCase: <Addr1>
#990: FILE: drivers/char/drm/via_chrome9_dma.c:493:
+	u32 HdType, dwQWCount, i, dwCount, Addr1, Addr2, SWPointer,

CHECK:CAMELCASE: Avoid CamelCase: <Addr2>
#990: FILE: drivers/char/drm/via_chrome9_dma.c:493:
+	u32 HdType, dwQWCount, i, dwCount, Addr1, Addr2, SWPointer,

CHECK:CAMELCASE: Avoid CamelCase: <SWPointer>
#990: FILE: drivers/char/drm/via_chrome9_dma.c:493:
+	u32 HdType, dwQWCount, i, dwCount, Addr1, Addr2, SWPointer,

CHECK:CAMELCASE: Avoid CamelCase: <SWPointerEnd>
#991: FILE: drivers/char/drm/via_chrome9_dma.c:494:
+		SWPointerEnd;

CHECK:CAMELCASE: Avoid CamelCase: <pCmdData>
#992: FILE: drivers/char/drm/via_chrome9_dma.c:495:
+	unsigned long *pCmdData;

CHECK:SPACING: No space is necessary after a cast
#1001: FILE: drivers/char/drm/via_chrome9_dma.c:504:
+	result = copy_from_user((int *) pCmdData, dma_info->usermode_dma_buf,

CHECK:SPACING: No space is necessary after a cast
#1005: FILE: drivers/char/drm/via_chrome9_dma.c:508:
+	SWPointerEnd = (u32) dma_info->cmd_size;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: drivers/char/drm/via_chrome9_dma.c:531:
+			for (; dwCount > 0; dwCount--, SWPointer++,
+				Addr1 += 4) {

CHECK:CAMELCASE: Avoid CamelCase: <hostBlt>
#1029: FILE: drivers/char/drm/via_chrome9_dma.c:532:
+				SetMMIORegister(dev_priv->hostBlt->handle,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1049: FILE: drivers/char/drm/via_chrome9_dma.c:552:
+			/* Write first data (either ParaType or whatever) to
+			Addr1 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1049: FILE: drivers/char/drm/via_chrome9_dma.c:552:
+			Addr1 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1055: FILE: drivers/char/drm/via_chrome9_dma.c:558:
+			/* The following data are all written to Addr2,
+			   until another header is met */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1055: FILE: drivers/char/drm/via_chrome9_dma.c:558:
+			   until another header is met */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1057: FILE: drivers/char/drm/via_chrome9_dma.c:560:
+			while (!IS_AGPHEADER_INV(pCmdData[SWPointer])
+			       && (SWPointer < SWPointerEnd)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1070: FILE: drivers/char/drm/via_chrome9_dma.c:573:
+			/* Write first data (either ParaType or whatever) to
+			Addr1 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1070: FILE: drivers/char/drm/via_chrome9_dma.c:573:
+			Addr1 */

CHECK:SPACING: No space is necessary after a cast
#1100: FILE: drivers/char/drm/via_chrome9_dma.c:603:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:SPACING: No space is necessary after a cast
#1104: FILE: drivers/char/drm/via_chrome9_dma.c:607:
+	u32 BufferSize = (u32) (lpcmDMAManager->pFree - lpcmDMAManager->pBeg);

CHECK:CAMELCASE: Avoid CamelCase: <BufferSize>
#1104: FILE: drivers/char/drm/via_chrome9_dma.c:607:
+	u32 BufferSize = (u32) (lpcmDMAManager->pFree - lpcmDMAManager->pBeg);

CHECK:SPACING: No space is necessary after a cast
#1107: FILE: drivers/char/drm/via_chrome9_dma.c:610:
+		(unsigned int) lpcmDMAManager->addr_linear;

CHECK:SPACING: No space is necessary after a cast
#1109: FILE: drivers/char/drm/via_chrome9_dma.c:612:
+		(unsigned int) dev->agp->base + lpcmDMAManager->pPhysical;

CHECK:SPACING: No space is necessary after a cast
#1120: FILE: drivers/char/drm/via_chrome9_dma.c:623:
+	if ((u32) ((unsigned long *) lpcmDMAManager->pFree) & 0x1f) {

CHECK:SPACING: No space is necessary after a cast
#1127: FILE: drivers/char/drm/via_chrome9_dma.c:630:
+		while (((unsigned int) lpcmDMAManager->pFree) & 0x1f)

CHECK:SPACING: No space is necessary after a cast
#1132: FILE: drivers/char/drm/via_chrome9_dma.c:635:
+		(u32) (unsigned long *)lpcmDMAManager->pBeg -

CHECK:SPACING: No space is necessary after a cast
#1134: FILE: drivers/char/drm/via_chrome9_dma.c:637:
+	dwEnd = (u32) (unsigned long *)lpcmDMAManager->pEnd -

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1186: FILE: drivers/char/drm/via_chrome9_dma.c:689:
+
+

CHECK:SPACING: No space is necessary after a cast
#1193: FILE: drivers/char/drm/via_chrome9_dma.c:696:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:SPACING: No space is necessary after a cast
#1198: FILE: drivers/char/drm/via_chrome9_dma.c:701:
+		(unsigned int) lpcmDMAManager->addr_linear;

CHECK:SPACING: No space is necessary after a cast
#1201: FILE: drivers/char/drm/via_chrome9_dma.c:704:
+		 CHIP_PCIE) ? 0 : (unsigned int) dev->agp->base +

CHECK:SPACING: No space is necessary after a cast
#1208: FILE: drivers/char/drm/via_chrome9_dma.c:711:
+		    ((unsigned long *) lpcmDMAManager->pFree) & 0x7f) {

CHECK:SPACING: No space is necessary after a cast
#1218: FILE: drivers/char/drm/via_chrome9_dma.c:721:
+			while ((u32)((unsigned long *) lpcmDMAManager->pFree) &

CHECK:SPACING: No space is necessary after a cast
#1224: FILE: drivers/char/drm/via_chrome9_dma.c:727:
+		    ((unsigned long *) lpcmDMAManager->pFree) & 0x1f) {

CHECK:SPACING: No space is necessary after a cast
#1234: FILE: drivers/char/drm/via_chrome9_dma.c:737:
+			while ((u32)((unsigned long *) lpcmDMAManager->pFree) &

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1240: FILE: drivers/char/drm/via_chrome9_dma.c:743:
+
+

CHECK:SPACING: No space is necessary after a cast
#1241: FILE: drivers/char/drm/via_chrome9_dma.c:744:
+	dwPause = (u32) ((unsigned long *) lpcmDMAManager->pFree)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: drivers/char/drm/via_chrome9_dma.c:781:
+get_space_db_inv(struct drm_device *dev,
+	struct cmd_get_space *lpcmGetSpaceData)

CHECK:CAMELCASE: Avoid CamelCase: <lpcmGetSpaceData>
#1278: FILE: drivers/char/drm/via_chrome9_dma.c:781:
+	struct cmd_get_space *lpcmGetSpaceData)

CHECK:SPACING: No space is necessary after a cast
#1281: FILE: drivers/char/drm/via_chrome9_dma.c:784:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:CAMELCASE: Avoid CamelCase: <dwRequestSize>
#1285: FILE: drivers/char/drm/via_chrome9_dma.c:788:
+	unsigned int dwRequestSize = lpcmGetSpaceData->dwRequestSize;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1286: FILE: drivers/char/drm/via_chrome9_dma.c:789:
+	unsigned int dwRequestSize = lpcmGetSpaceData->dwRequestSize;
+	if (dwRequestSize > lpcmDMAManager->MaxKickoffSize) {

CHECK:SPACING: No space is necessary after a cast
#1289: FILE: drivers/char/drm/via_chrome9_dma.c:792:
+		*lpcmGetSpaceData->pCmdData = (unsigned int) NULL;

CHECK:SPACING: No space is necessary after a cast
#1297: FILE: drivers/char/drm/via_chrome9_dma.c:800:
+	*lpcmGetSpaceData->pCmdData = (unsigned int) lpcmDMAManager->pFree;

CHECK:CAMELCASE: Avoid CamelCase: <RewindRingAGP_inv>
#1301: FILE: drivers/char/drm/via_chrome9_dma.c:804:
+RewindRingAGP_inv(struct drm_device *dev)

CHECK:SPACING: No space is necessary after a cast
#1304: FILE: drivers/char/drm/via_chrome9_dma.c:807:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:SPACING: No space is necessary after a cast
#1309: FILE: drivers/char/drm/via_chrome9_dma.c:812:
+		(unsigned int) lpcmDMAManager->addr_linear;

CHECK:SPACING: No space is necessary after a cast
#1312: FILE: drivers/char/drm/via_chrome9_dma.c:815:
+		 CHIP_PCIE) ? 0 : (unsigned int) dev->agp->base +

CHECK:CAMELCASE: Avoid CamelCase: <dwReg66>
#1317: FILE: drivers/char/drm/via_chrome9_dma.c:820:
+	unsigned int dwReg66, dwReg67;

CHECK:CAMELCASE: Avoid CamelCase: <dwReg67>
#1317: FILE: drivers/char/drm/via_chrome9_dma.c:820:
+	unsigned int dwReg66, dwReg67;

CHECK:SPACING: No space is necessary after a cast
#1324: FILE: drivers/char/drm/via_chrome9_dma.c:827:
+		while ((unsigned int) lpcmDMAManager->pFree & 0x7F)

CHECK:SPACING: No space is necessary after a cast
#1327: FILE: drivers/char/drm/via_chrome9_dma.c:830:
+		while ((unsigned int) lpcmDMAManager->pFree & 0x1F)

CHECK:SPACING: No space is necessary after a cast
#1329: FILE: drivers/char/drm/via_chrome9_dma.c:832:
+	dwJump = ((u32) ((unsigned long *) lpcmDMAManager->pFree))

CHECK:SPACING: No space is necessary after a cast
#1334: FILE: drivers/char/drm/via_chrome9_dma.c:837:
+	dwPause = ((u32) ((unsigned long *) lpcmDMAManager->pFree))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1353: FILE: drivers/char/drm/via_chrome9_dma.c:856:
+
+

CHECK:SPACING: No space is necessary after a cast
#1359: FILE: drivers/char/drm/via_chrome9_dma.c:862:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:CAMELCASE: Avoid CamelCase: <dwUnFlushed>
#1362: FILE: drivers/char/drm/via_chrome9_dma.c:865:
+	unsigned int dwUnFlushed;

CHECK:SPACING: No space is necessary after a cast
#1366: FILE: drivers/char/drm/via_chrome9_dma.c:869:
+		(unsigned int) lpcmDMAManager->addr_linear;

CHECK:SPACING: No space is necessary after a cast
#1369: FILE: drivers/char/drm/via_chrome9_dma.c:872:
+		 CHIP_PCIE) ? 0 : (unsigned int) dev->agp->base +

CHECK:CAMELCASE: Avoid CamelCase: <BufStart>
#1372: FILE: drivers/char/drm/via_chrome9_dma.c:875:
+	u32 BufStart, BufEnd, CurSW, CurHW, NextSW, BoundaryCheck;

CHECK:CAMELCASE: Avoid CamelCase: <BufEnd>
#1372: FILE: drivers/char/drm/via_chrome9_dma.c:875:
+	u32 BufStart, BufEnd, CurSW, CurHW, NextSW, BoundaryCheck;

CHECK:CAMELCASE: Avoid CamelCase: <CurSW>
#1372: FILE: drivers/char/drm/via_chrome9_dma.c:875:
+	u32 BufStart, BufEnd, CurSW, CurHW, NextSW, BoundaryCheck;

CHECK:CAMELCASE: Avoid CamelCase: <CurHW>
#1372: FILE: drivers/char/drm/via_chrome9_dma.c:875:
+	u32 BufStart, BufEnd, CurSW, CurHW, NextSW, BoundaryCheck;

CHECK:CAMELCASE: Avoid CamelCase: <NextSW>
#1372: FILE: drivers/char/drm/via_chrome9_dma.c:875:
+	u32 BufStart, BufEnd, CurSW, CurHW, NextSW, BoundaryCheck;

CHECK:CAMELCASE: Avoid CamelCase: <BoundaryCheck>
#1372: FILE: drivers/char/drm/via_chrome9_dma.c:875:
+	u32 BufStart, BufEnd, CurSW, CurHW, NextSW, BoundaryCheck;

CHECK:SPACING: No space is necessary after a cast
#1375: FILE: drivers/char/drm/via_chrome9_dma.c:878:
+		(unsigned int) (lpcmDMAManager->pFree - lpcmDMAManager->pBeg);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1378: FILE: drivers/char/drm/via_chrome9_dma.c:881:
+	/*cmHW_Module_Switch is context-wide variable which is enough for 2d/3d
+	   switch in a context. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1378: FILE: drivers/char/drm/via_chrome9_dma.c:881:
+	   switch in a context. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1380: FILE: drivers/char/drm/via_chrome9_dma.c:883:
+	/*But we must keep the dma buffer being wrapped head and tail by 3d cmds
+	   when it is kicked off to kernel mode. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1380: FILE: drivers/char/drm/via_chrome9_dma.c:883:
+	   when it is kicked off to kernel mode. */

CHECK:SPACING: No space is necessary after a cast
#1394: FILE: drivers/char/drm/via_chrome9_dma.c:897:
+		(u32)((unsigned int) lpcmDMAManager->pBeg) - AGPBufLinearBase +

CHECK:SPACING: No space is necessary after a cast
#1396: FILE: drivers/char/drm/via_chrome9_dma.c:899:
+	BufEnd = (u32)((unsigned int) lpcmDMAManager->pEnd) - AGPBufLinearBase +

CHECK:SPACING: No space is necessary after a cast
#1399: FILE: drivers/char/drm/via_chrome9_dma.c:902:
+	NextSW = (u32) ((unsigned int) lpcmDMAManager->pFree) + dwRequestSize +

CHECK:SPACING: No space is necessary after a cast
#1403: FILE: drivers/char/drm/via_chrome9_dma.c:906:
+	CurSW = (u32)((unsigned int) lpcmDMAManager->pFree) - AGPBufLinearBase +

CHECK:SPACING: No space is necessary after a cast
#1409: FILE: drivers/char/drm/via_chrome9_dma.c:912:
+		CurSW = (u32) ((unsigned int) lpcmDMAManager->pFree) -

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1418: FILE: drivers/char/drm/via_chrome9_dma.c:921:
+		/* Sometime the value read from HW is unreliable,
+		so need double confirm. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1418: FILE: drivers/char/drm/via_chrome9_dma.c:921:
+		so need double confirm. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1428: FILE: drivers/char/drm/via_chrome9_dma.c:931:
+			/* If an empty command buffer can't hold
+			the request data. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1428: FILE: drivers/char/drm/via_chrome9_dma.c:931:
+			the request data. */

CHECK:BRACES: Unbalanced braces around else statement
#1430: FILE: drivers/char/drm/via_chrome9_dma.c:933:
+		else {

WARNING:TYPO_SPELLING: 'guarntee' may be misspelled - perhaps 'guarantee'?
#1431: FILE: drivers/char/drm/via_chrome9_dma.c:934:
+			/* We need to guarntee the new commands have no chance
 			              ^^^^^^^^

WARNING:TYPO_SPELLING: 'unexected' may be misspelled - perhaps 'unexpected'?
#1432: FILE: drivers/char/drm/via_chrome9_dma.c:935:
+			to override the unexected commands or wait until there
 			                ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1432: FILE: drivers/char/drm/via_chrome9_dma.c:935:
+			/* We need to guarntee the new commands have no chance
+			to override the unexected commands or wait until there

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1433: FILE: drivers/char/drm/via_chrome9_dma.c:936:
+			is no unexecuted commands in agp buffer */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1438: FILE: drivers/char/drm/via_chrome9_dma.c:941:
+					CurHW = GetMMIORegister(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1442: FILE: drivers/char/drm/via_chrome9_dma.c:945:
+				/*Sometime the value read from HW is unreliable,
+				   so need double confirm. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1442: FILE: drivers/char/drm/via_chrome9_dma.c:945:
+				   so need double confirm. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1446: FILE: drivers/char/drm/via_chrome9_dma.c:949:
+					CurHW = GetMMIORegister(

CHECK:SPACING: No space is necessary after a cast
#1451: FILE: drivers/char/drm/via_chrome9_dma.c:954:
+				CurSW = (u32) ((unsigned long *)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1457: FILE: drivers/char/drm/via_chrome9_dma.c:960:
+				/* Waiting until hw pointer jump to start
+				and hw pointer will */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1457: FILE: drivers/char/drm/via_chrome9_dma.c:960:
+				and hw pointer will */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1460: FILE: drivers/char/drm/via_chrome9_dma.c:963:
+					CurHW = GetMMIORegister(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1469: FILE: drivers/char/drm/via_chrome9_dma.c:972:
+					CurHW = GetMMIORegister(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1476: FILE: drivers/char/drm/via_chrome9_dma.c:979:
+				/* Sometime the value read from HW is
+				unreliable, so need double confirm. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1476: FILE: drivers/char/drm/via_chrome9_dma.c:979:
+				unreliable, so need double confirm. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1478: FILE: drivers/char/drm/via_chrome9_dma.c:981:
+					CurHW = GetMMIORegister(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1487: FILE: drivers/char/drm/via_chrome9_dma.c:990:
+		/* no need to rewind Ensure unexecuted agp commands will
+		not be override by new

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1488: FILE: drivers/char/drm/via_chrome9_dma.c:991:
+		agp commands */

CHECK:SPACING: No space is necessary after a cast
#1489: FILE: drivers/char/drm/via_chrome9_dma.c:992:
+		CurSW = (u32) ((unsigned int) lpcmDMAManager->pFree) -

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1499: FILE: drivers/char/drm/via_chrome9_dma.c:1002:
+		/* Sometime the value read from HW is unreliable,
+		so need double confirm. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1499: FILE: drivers/char/drm/via_chrome9_dma.c:1002:
+		so need double confirm. */

CHECK:SPACING: No space is necessary after a cast
#1507: FILE: drivers/char/drm/via_chrome9_dma.c:1010:
+	*lpcmGetSpaceData->pCmdData = (unsigned int) lpcmDMAManager->pFree;

CHECK:CAMELCASE: Avoid CamelCase: <lpcmReleaseSpaceData>
#1512: FILE: drivers/char/drm/via_chrome9_dma.c:1015:
+		  struct cmd_release_space *lpcmReleaseSpaceData)

CHECK:SPACING: No space is necessary after a cast
#1515: FILE: drivers/char/drm/via_chrome9_dma.c:1018:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:CAMELCASE: Avoid CamelCase: <dwReleaseSize>
#1518: FILE: drivers/char/drm/via_chrome9_dma.c:1021:
+	unsigned int dwReleaseSize = lpcmReleaseSpaceData->dwReleaseSize;

CHECK:SPACING: No space is necessary after a cast
#1524: FILE: drivers/char/drm/via_chrome9_dma.c:1027:
+	while (((unsigned int) lpcmDMAManager->pFree) & 0xF) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1526: FILE: drivers/char/drm/via_chrome9_dma.c:1029:
+		/* not in 4 unsigned ints (16 Bytes) align address,
+		insert NULL Commands */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1526: FILE: drivers/char/drm/via_chrome9_dma.c:1029:
+		insert NULL Commands */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev_priv->chip_sub_index == CHIP_H5'
#1531: FILE: drivers/char/drm/via_chrome9_dma.c:1034:
+	if ((dev_priv->chip_sub_index == CHIP_H5)
+	    && (dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER'
#1531: FILE: drivers/char/drm/via_chrome9_dma.c:1034:
+	if ((dev_priv->chip_sub_index == CHIP_H5)
+	    && (dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1532: FILE: drivers/char/drm/via_chrome9_dma.c:1035:
+	if ((dev_priv->chip_sub_index == CHIP_H5)
+	    && (dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1542: FILE: drivers/char/drm/via_chrome9_dma.c:1045:
+via_chrome9_ioctl_flush(struct drm_device *dev, void *data,
+	struct drm_file *file_priv)

CHECK:SPACING: No space is necessary after a cast
#1546: FILE: drivers/char/drm/via_chrome9_dma.c:1049:
+		(struct drm_via_chrome9_private *) dev->dev_private;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1551: FILE: drivers/char/drm/via_chrome9_dma.c:1054:
+	volatile unsigned long *pCmdData = NULL;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1572: FILE: drivers/char/drm/via_chrome9_dma.c:1075:
+		/* Copy user mode DMA buffer to kernel DMA buffer,
+		then kick off DMA */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1572: FILE: drivers/char/drm/via_chrome9_dma.c:1075:
+		then kick off DMA */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev_priv->chip_sub_index == CHIP_H5'
#1579: FILE: drivers/char/drm/via_chrome9_dma.c:1082:
+		if ((dev_priv->chip_sub_index == CHIP_H5)
+		    && (dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER'
#1579: FILE: drivers/char/drm/via_chrome9_dma.c:1082:
+		if ((dev_priv->chip_sub_index == CHIP_H5)
+		    && (dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1580: FILE: drivers/char/drm/via_chrome9_dma.c:1083:
+		if ((dev_priv->chip_sub_index == CHIP_H5)
+		    && (dev_priv->drm_agp_type == DRM_AGP_RING_BUFFER))

CHECK:SPACING: No space is necessary after a cast
#1583: FILE: drivers/char/drm/via_chrome9_dma.c:1086:
+		getspace.pCmdData = (unsigned int *) &pCmdData;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1622: FILE: drivers/char/drm/via_chrome9_dma.c:1125:
+via_chrome9_ioctl_free(struct drm_device *dev, void *data,
+	struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: drivers/char/drm/via_chrome9_dma.c:1132:
+via_chrome9_ioctl_wait_chip_idle(struct drm_device *dev, void *data,
+			 struct drm_file *file_priv)

CHECK:SPACING: No space is necessary after a cast
#1632: FILE: drivers/char/drm/via_chrome9_dma.c:1135:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1641: FILE: drivers/char/drm/via_chrome9_dma.c:1144:
+via_chrome9_ioctl_flush_cache(struct drm_device *dev, void *data,
+		      struct drm_file *file_priv)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1648: FILE: drivers/char/drm/via_chrome9_dma.h:1:
+/*

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1677: FILE: drivers/char/drm/via_chrome9_dma.h:30:
+#define MAX_BCI_BUFFER_SIZE 16*1024*1024
                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1677: FILE: drivers/char/drm/via_chrome9_dma.h:30:
+#define MAX_BCI_BUFFER_SIZE 16*1024*1024
                                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1677: FILE: drivers/char/drm/via_chrome9_dma.h:30:
+#define MAX_BCI_BUFFER_SIZE 16*1024*1024

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1690: FILE: drivers/char/drm/via_chrome9_dma.h:43:
+	volatile unsigned int   *pCmdData;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1697: FILE: drivers/char/drm/via_chrome9_dma.h:50:
+extern int via_chrome9_hw_init(struct drm_device *dev,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1698: FILE: drivers/char/drm/via_chrome9_dma.h:51:
+extern int via_chrome9_hw_init(struct drm_device *dev,
+	struct drm_via_chrome9_init *init);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1699: FILE: drivers/char/drm/via_chrome9_dma.h:52:
+extern int via_chrome9_ioctl_flush(struct drm_device *dev, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1700: FILE: drivers/char/drm/via_chrome9_dma.h:53:
+extern int via_chrome9_ioctl_flush(struct drm_device *dev, void *data,
+	struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1701: FILE: drivers/char/drm/via_chrome9_dma.h:54:
+extern int via_chrome9_ioctl_free(struct drm_device *dev, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1702: FILE: drivers/char/drm/via_chrome9_dma.h:55:
+extern int via_chrome9_ioctl_free(struct drm_device *dev, void *data,
+	struct drm_file *file_prev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1703: FILE: drivers/char/drm/via_chrome9_dma.h:56:
+extern int via_chrome9_ioctl_wait_chip_idle(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1704: FILE: drivers/char/drm/via_chrome9_dma.h:57:
+extern int via_chrome9_ioctl_wait_chip_idle(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1705: FILE: drivers/char/drm/via_chrome9_dma.h:58:
+extern int via_chrome9_ioctl_flush_cache(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1706: FILE: drivers/char/drm/via_chrome9_dma.h:59:
+extern int via_chrome9_ioctl_flush_cache(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1707: FILE: drivers/char/drm/via_chrome9_dma.h:60:
+extern int via_chrome9_ioctl_flush(struct drm_device *dev, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1708: FILE: drivers/char/drm/via_chrome9_dma.h:61:
+extern int via_chrome9_ioctl_flush(struct drm_device *dev, void *data,
+	struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1709: FILE: drivers/char/drm/via_chrome9_dma.h:62:
+extern int via_chrome9_ioctl_free(struct drm_device *dev, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: drivers/char/drm/via_chrome9_dma.h:63:
+extern int via_chrome9_ioctl_free(struct drm_device *dev, void *data,
+	struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1711: FILE: drivers/char/drm/via_chrome9_dma.h:64:
+extern unsigned int ProtectSizeValue(unsigned int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1712: FILE: drivers/char/drm/via_chrome9_dma.h:65:
+extern void SetAGPDoubleCmd_inv(struct drm_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1713: FILE: drivers/char/drm/via_chrome9_dma.h:66:
+extern void SetAGPRingCmdRegs_inv(struct drm_device *dev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1719: FILE: drivers/char/drm/via_chrome9_drm.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1754: FILE: drivers/char/drm/via_chrome9_drm.c:36:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1764: FILE: drivers/char/drm/via_chrome9_drm.c:46:
+#define UDELAY_LIMIT    (NDELAY_LIMIT/1000) /* supposed to be 10 msec */
                                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1769: FILE: drivers/char/drm/via_chrome9_drm.c:51:
+	if (usecs > UDELAY_LIMIT) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1783: FILE: drivers/char/drm/via_chrome9_drm.c:65:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1788: FILE: drivers/char/drm/via_chrome9_drm.c:70:
+int via_chrome9_ioctl_process_exit(struct drm_device *dev, void *data,
+	struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1794: FILE: drivers/char/drm/via_chrome9_drm.c:76:
+int via_chrome9_ioctl_restore_primary(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

CHECK:CAMELCASE: Avoid CamelCase: <Initialize3DEngine>
#1799: FILE: drivers/char/drm/via_chrome9_drm.c:81:
+void Initialize3DEngine(struct drm_via_chrome9_private *dev_priv)

CHECK:CAMELCASE: Avoid CamelCase: <StageOfTexture>
#1802: FILE: drivers/char/drm/via_chrome9_drm.c:84:
+	unsigned int StageOfTexture;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1805: FILE: drivers/char/drm/via_chrome9_drm.c:87:
+	if (dev_priv->chip_sub_index == CHIP_H5 ||
+		dev_priv->chip_sub_index == CHIP_H5S1) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1807: FILE: drivers/char/drm/via_chrome9_drm.c:89:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			0x00010000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1811: FILE: drivers/char/drm/via_chrome9_drm.c:93:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#1811: FILE: drivers/char/drm/via_chrome9_drm.c:93:
+				(unsigned int) i << 24);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1818: FILE: drivers/char/drm/via_chrome9_drm.c:100:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00020000 | 0x00000000 |

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1819: FILE: drivers/char/drm/via_chrome9_drm.c:101:
+				(StageOfTexture & 0xf)<<24));
 				                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1821: FILE: drivers/char/drm/via_chrome9_drm.c:103:
+		/*  *((unsigned int volatile*)(pMapIOPort+HC_REG_TRANS_SET)) =
+		(0x00020000 | HC_ParaSubType_Tex0 | (StageOfTexture &

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1822: FILE: drivers/char/drm/via_chrome9_drm.c:104:
+		0xf)<<24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1825: FILE: drivers/char/drm/via_chrome9_drm.c:107:
+			/* *((unsigned int volatile*)(pMapIOPort+
+			HC_REG_Hpara0)) = ((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1825: FILE: drivers/char/drm/via_chrome9_drm.c:107:
+			HC_REG_Hpara0)) = ((unsigned int) i << 24);*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1827: FILE: drivers/char/drm/via_chrome9_drm.c:109:
+				SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#1827: FILE: drivers/char/drm/via_chrome9_drm.c:109:
+				0x440, (unsigned int) i << 24);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1835: FILE: drivers/char/drm/via_chrome9_drm.c:117:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00020000 | 0x00020000 |

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1836: FILE: drivers/char/drm/via_chrome9_drm.c:118:
+				(StageOfTexture & 0xf)<<24));
 				                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1838: FILE: drivers/char/drm/via_chrome9_drm.c:120:
+			/* *((unsigned int volatile*)(pMapIOPort+
+			HC_REG_TRANS_SET)) = (0x00020000 | 0x00020000 |

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1839: FILE: drivers/char/drm/via_chrome9_drm.c:121:
+			( StageOfTexture & 0xf)<<24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1842: FILE: drivers/char/drm/via_chrome9_drm.c:124:
+			/* *((unsigned int volatile*)(pMapIOPort+
+			HC_REG_Hpara0)) = ((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1842: FILE: drivers/char/drm/via_chrome9_drm.c:124:
+			HC_REG_Hpara0)) = ((unsigned int) i << 24);*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1844: FILE: drivers/char/drm/via_chrome9_drm.c:126:
+				SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#1844: FILE: drivers/char/drm/via_chrome9_drm.c:126:
+				0x440, (unsigned int) i << 24);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1849: FILE: drivers/char/drm/via_chrome9_drm.c:131:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00020000 | 0xfe000000));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1851: FILE: drivers/char/drm/via_chrome9_drm.c:133:
+		/* *((unsigned int volatile*)(pMapIOPort+HC_REG_TRANS_SET)) =
+			(0x00020000 | HC_ParaSubType_TexGen);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1851: FILE: drivers/char/drm/via_chrome9_drm.c:133:
+			(0x00020000 | HC_ParaSubType_TexGen);*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1854: FILE: drivers/char/drm/via_chrome9_drm.c:136:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#1854: FILE: drivers/char/drm/via_chrome9_drm.c:136:
+				(unsigned int) i << 24);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1856: FILE: drivers/char/drm/via_chrome9_drm.c:138:
+			/* *((unsigned int volatile*)(pMapIOPort+
+			HC_REG_Hpara0)) = ((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1856: FILE: drivers/char/drm/via_chrome9_drm.c:138:
+			HC_REG_Hpara0)) = ((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1863: FILE: drivers/char/drm/via_chrome9_drm.c:145:
+		/* sRGB texture is not directly support by H3 hardware.
+		We have to set the deGamma table for texture sampling.*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1863: FILE: drivers/char/drm/via_chrome9_drm.c:145:
+		We have to set the deGamma table for texture sampling.*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1867: FILE: drivers/char/drm/via_chrome9_drm.c:149:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00030000 | 0x15000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1869: FILE: drivers/char/drm/via_chrome9_drm.c:151:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(0x40000000 | (30 << 20) | (15 << 10) | (5)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1871: FILE: drivers/char/drm/via_chrome9_drm.c:153:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			((119 << 20) | (81 << 10) | (52)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1873: FILE: drivers/char/drm/via_chrome9_drm.c:155:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			((283 << 20) | (219 << 10) | (165)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1875: FILE: drivers/char/drm/via_chrome9_drm.c:157:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			((535 << 20) | (441 << 10) | (357)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1877: FILE: drivers/char/drm/via_chrome9_drm.c:159:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			((119 << 20) | (884 << 20) | (757 << 10) |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1882: FILE: drivers/char/drm/via_chrome9_drm.c:164:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00030000 | 0x17000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1884: FILE: drivers/char/drm/via_chrome9_drm.c:166:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(0x40000000 | (13 << 20) | (13 << 10) | (13)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1886: FILE: drivers/char/drm/via_chrome9_drm.c:168:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(0x40000000 | (26 << 20) | (26 << 10) | (26)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1888: FILE: drivers/char/drm/via_chrome9_drm.c:170:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(0x40000000 | (39 << 20) | (39 << 10) | (39)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1890: FILE: drivers/char/drm/via_chrome9_drm.c:172:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			((51 << 20) | (51 << 10) | (51)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1892: FILE: drivers/char/drm/via_chrome9_drm.c:174:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			((71 << 20) | (71 << 10) | (71)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1894: FILE: drivers/char/drm/via_chrome9_drm.c:176:
+		SetMMIORegister(dev_priv->mmio->handle,
+			0x440, (87 << 20) | (87 << 10) | (87));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1896: FILE: drivers/char/drm/via_chrome9_drm.c:178:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(113 << 20) | (113 << 10) | (113));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1898: FILE: drivers/char/drm/via_chrome9_drm.c:180:
+		SetMMIORegister(dev_priv->mmio->handle,
+			0x440, (135 << 20) | (135 << 10) | (135));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1900: FILE: drivers/char/drm/via_chrome9_drm.c:182:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(170 << 20) | (170 << 10) | (170));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1902: FILE: drivers/char/drm/via_chrome9_drm.c:184:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(199 << 20) | (199 << 10) | (199));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1904: FILE: drivers/char/drm/via_chrome9_drm.c:186:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(246 << 20) | (246 << 10) | (246));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1906: FILE: drivers/char/drm/via_chrome9_drm.c:188:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(284 << 20) | (284 << 10) | (284));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1908: FILE: drivers/char/drm/via_chrome9_drm.c:190:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(317 << 20) | (317 << 10) | (317));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1910: FILE: drivers/char/drm/via_chrome9_drm.c:192:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(347 << 20) | (347 << 10) | (347));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1912: FILE: drivers/char/drm/via_chrome9_drm.c:194:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(373 << 20) | (373 << 10) | (373));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1914: FILE: drivers/char/drm/via_chrome9_drm.c:196:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(398 << 20) | (398 << 10) | (398));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1916: FILE: drivers/char/drm/via_chrome9_drm.c:198:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(442 << 20) | (442 << 10) | (442));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1918: FILE: drivers/char/drm/via_chrome9_drm.c:200:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(481 << 20) | (481 << 10) | (481));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1920: FILE: drivers/char/drm/via_chrome9_drm.c:202:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(517 << 20) | (517 << 10) | (517));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1922: FILE: drivers/char/drm/via_chrome9_drm.c:204:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(550 << 20) | (550 << 10) | (550));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1924: FILE: drivers/char/drm/via_chrome9_drm.c:206:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(609 << 20) | (609 << 10) | (609));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1926: FILE: drivers/char/drm/via_chrome9_drm.c:208:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(662 << 20) | (662 << 10) | (662));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1928: FILE: drivers/char/drm/via_chrome9_drm.c:210:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(709 << 20) | (709 << 10) | (709));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1930: FILE: drivers/char/drm/via_chrome9_drm.c:212:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(753 << 20) | (753 << 10) | (753));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1932: FILE: drivers/char/drm/via_chrome9_drm.c:214:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(794 << 20) | (794 << 10) | (794));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1934: FILE: drivers/char/drm/via_chrome9_drm.c:216:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(832 << 20) | (832 << 10) | (832));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1936: FILE: drivers/char/drm/via_chrome9_drm.c:218:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(868 << 20) | (868 << 10) | (868));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1938: FILE: drivers/char/drm/via_chrome9_drm.c:220:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(902 << 20) | (902 << 10) | (902));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1940: FILE: drivers/char/drm/via_chrome9_drm.c:222:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(934 << 20) | (934 << 10) | (934));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1942: FILE: drivers/char/drm/via_chrome9_drm.c:224:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(966 << 20) | (966 << 10) | (966));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1944: FILE: drivers/char/drm/via_chrome9_drm.c:226:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			(996 << 20) | (996 << 10) | (996));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1946: FILE: drivers/char/drm/via_chrome9_drm.c:228:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1948: FILE: drivers/char/drm/via_chrome9_drm.c:230:
+		/*
+		For Interrupt Restore only All types of write through

WARNING:TYPO_SPELLING: 'regsiters' may be misspelled - perhaps 'registers'?
#1949: FILE: drivers/char/drm/via_chrome9_drm.c:231:
+		regsiters should be write header data to hardware at
 		^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1965: FILE: drivers/char/drm/via_chrome9_drm.c:247:
+		16 entries : 4 128-bit data */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1967: FILE: drivers/char/drm/via_chrome9_drm.c:249:
+^I^I /* Initialize INV_ParaSubType_TexPal  ^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1969: FILE: drivers/char/drm/via_chrome9_drm.c:251:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00030000 | 0x00000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1972: FILE: drivers/char/drm/via_chrome9_drm.c:254:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x00000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1978: FILE: drivers/char/drm/via_chrome9_drm.c:260:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00030000 | 0x11000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1981: FILE: drivers/char/drm/via_chrome9_drm.c:263:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x00000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1987: FILE: drivers/char/drm/via_chrome9_drm.c:269:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00030000 | 0x14000000));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1988: FILE: drivers/char/drm/via_chrome9_drm.c:270:
+		for (i = 0; i < (5+3); i++) {
 		                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1990: FILE: drivers/char/drm/via_chrome9_drm.c:272:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, 0x00000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1995: FILE: drivers/char/drm/via_chrome9_drm.c:277:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00040000 | 0x14000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1998: FILE: drivers/char/drm/via_chrome9_drm.c:280:
+			SetMMIORegister(dev_priv->mmio->handle,
+			0x440, ((unsigned int) i << 24));

CHECK:SPACING: No space is necessary after a cast
#1998: FILE: drivers/char/drm/via_chrome9_drm.c:280:
+			0x440, ((unsigned int) i << 24));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2001: FILE: drivers/char/drm/via_chrome9_drm.c:283:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			0x00fe0000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2003: FILE: drivers/char/drm/via_chrome9_drm.c:285:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x4000840f);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2005: FILE: drivers/char/drm/via_chrome9_drm.c:287:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x47000400);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2007: FILE: drivers/char/drm/via_chrome9_drm.c:289:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x44000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2009: FILE: drivers/char/drm/via_chrome9_drm.c:291:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x46000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2013: FILE: drivers/char/drm/via_chrome9_drm.c:295:
+		SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			0x00fe0000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2015: FILE: drivers/char/drm/via_chrome9_drm.c:297:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x00001004);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2017: FILE: drivers/char/drm/via_chrome9_drm.c:299:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x0800004b);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2019: FILE: drivers/char/drm/via_chrome9_drm.c:301:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x0a000049);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2021: FILE: drivers/char/drm/via_chrome9_drm.c:303:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x0b0000fb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2023: FILE: drivers/char/drm/via_chrome9_drm.c:305:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x0c000001);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2025: FILE: drivers/char/drm/via_chrome9_drm.c:307:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x0d0000cb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2027: FILE: drivers/char/drm/via_chrome9_drm.c:309:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x0e000009);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2029: FILE: drivers/char/drm/via_chrome9_drm.c:311:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x10000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2031: FILE: drivers/char/drm/via_chrome9_drm.c:313:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x110000ff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2033: FILE: drivers/char/drm/via_chrome9_drm.c:315:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x12000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2035: FILE: drivers/char/drm/via_chrome9_drm.c:317:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x130000db);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2037: FILE: drivers/char/drm/via_chrome9_drm.c:319:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x14000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2039: FILE: drivers/char/drm/via_chrome9_drm.c:321:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x15000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2041: FILE: drivers/char/drm/via_chrome9_drm.c:323:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x16000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2043: FILE: drivers/char/drm/via_chrome9_drm.c:325:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x17000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2045: FILE: drivers/char/drm/via_chrome9_drm.c:327:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x18000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2047: FILE: drivers/char/drm/via_chrome9_drm.c:329:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x19000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2049: FILE: drivers/char/drm/via_chrome9_drm.c:331:
+		SetMMIORegister(dev_priv->mmio->handle, 0x440,
+			0x20000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2052: FILE: drivers/char/drm/via_chrome9_drm.c:334:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				0x00010000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2055: FILE: drivers/char/drm/via_chrome9_drm.c:337:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					(unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#2055: FILE: drivers/char/drm/via_chrome9_drm.c:337:
+					(unsigned int) i << 24);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2062: FILE: drivers/char/drm/via_chrome9_drm.c:344:
+				SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+					(0x00020000 | 0x00000000 |

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2063: FILE: drivers/char/drm/via_chrome9_drm.c:345:
+					(StageOfTexture & 0xf)<<24));
 					                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2065: FILE: drivers/char/drm/via_chrome9_drm.c:347:
+				/*  *((unsigned int volatile*)(pMapIOPort+
+				HC_REG_TRANS_SET)) =

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2067: FILE: drivers/char/drm/via_chrome9_drm.c:349:
+				(StageOfTexture & 0xf)<<24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2070: FILE: drivers/char/drm/via_chrome9_drm.c:352:
+				/* *((unsigned int volatile*)(pMapIOPort+
+				HC_REG_Hpara0)) =((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2070: FILE: drivers/char/drm/via_chrome9_drm.c:352:
+				HC_REG_Hpara0)) =((unsigned int) i << 24);*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2072: FILE: drivers/char/drm/via_chrome9_drm.c:354:
+					SetMMIORegister(dev_priv->mmio->handle,
+					0x440, (unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#2072: FILE: drivers/char/drm/via_chrome9_drm.c:354:
+					0x440, (unsigned int) i << 24);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2080: FILE: drivers/char/drm/via_chrome9_drm.c:362:
+				SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+					(0x00020000 | 0x20000000 |

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2081: FILE: drivers/char/drm/via_chrome9_drm.c:363:
+					(StageOfTexture & 0xf)<<24));
 					                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2083: FILE: drivers/char/drm/via_chrome9_drm.c:365:
+				/* *((unsigned int volatile*)(pMapIOPort+
+				HC_REG_TRANS_SET)) =(0x00020000 | 0x00020000 |

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2084: FILE: drivers/char/drm/via_chrome9_drm.c:366:
+				( StageOfTexture & 0xf)<<24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2087: FILE: drivers/char/drm/via_chrome9_drm.c:369:
+				/* *((unsigned int volatile*)(pMapIOPort+
+				HC_REG_Hpara0)) =((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2087: FILE: drivers/char/drm/via_chrome9_drm.c:369:
+				HC_REG_Hpara0)) =((unsigned int) i << 24);*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2089: FILE: drivers/char/drm/via_chrome9_drm.c:371:
+					SetMMIORegister(dev_priv->mmio->handle,
+						0x440, (unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#2089: FILE: drivers/char/drm/via_chrome9_drm.c:371:
+						0x440, (unsigned int) i << 24);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2094: FILE: drivers/char/drm/via_chrome9_drm.c:376:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00020000 | 0xfe000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2097: FILE: drivers/char/drm/via_chrome9_drm.c:379:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					(unsigned int) i << 24);

CHECK:SPACING: No space is necessary after a cast
#2097: FILE: drivers/char/drm/via_chrome9_drm.c:379:
+					(unsigned int) i << 24);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2099: FILE: drivers/char/drm/via_chrome9_drm.c:381:
+				/* *((unsigned int volatile*)(pMapIOPort+
+				HC_REG_Hpara0)) =((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2099: FILE: drivers/char/drm/via_chrome9_drm.c:381:
+				HC_REG_Hpara0)) =((unsigned int) i << 24);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2106: FILE: drivers/char/drm/via_chrome9_drm.c:388:
+			/* sRGB texture is not directly support by
+			H3 hardware.*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2106: FILE: drivers/char/drm/via_chrome9_drm.c:388:
+			H3 hardware.*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2108: FILE: drivers/char/drm/via_chrome9_drm.c:390:
+			/* We have to set the deGamma table for texture
+			sampling.*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2108: FILE: drivers/char/drm/via_chrome9_drm.c:390:
+			sampling.*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2112: FILE: drivers/char/drm/via_chrome9_drm.c:394:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00030000 | 0x15000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2114: FILE: drivers/char/drm/via_chrome9_drm.c:396:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(0x40000000 | (30 << 20) | (15 << 10) | (5)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2116: FILE: drivers/char/drm/via_chrome9_drm.c:398:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				((119 << 20) | (81 << 10) | (52)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2118: FILE: drivers/char/drm/via_chrome9_drm.c:400:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				((283 << 20) | (219 << 10) | (165)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2120: FILE: drivers/char/drm/via_chrome9_drm.c:402:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				((535 << 20) | (441 << 10) | (357)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2122: FILE: drivers/char/drm/via_chrome9_drm.c:404:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				((119 << 20) | (884 << 20) | (757 << 10)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2127: FILE: drivers/char/drm/via_chrome9_drm.c:409:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00030000 | 0x17000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2129: FILE: drivers/char/drm/via_chrome9_drm.c:411:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(0x40000000 | (13 << 20) | (13 << 10) | (13)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2131: FILE: drivers/char/drm/via_chrome9_drm.c:413:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(0x40000000 | (26 << 20) | (26 << 10) | (26)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2133: FILE: drivers/char/drm/via_chrome9_drm.c:415:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(0x40000000 | (39 << 20) | (39 << 10) | (39)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2135: FILE: drivers/char/drm/via_chrome9_drm.c:417:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, ((51 << 20) | (51 << 10) | (51)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2137: FILE: drivers/char/drm/via_chrome9_drm.c:419:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, ((71 << 20) | (71 << 10) | (71)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2139: FILE: drivers/char/drm/via_chrome9_drm.c:421:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (87 << 20) | (87 << 10) | (87));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2141: FILE: drivers/char/drm/via_chrome9_drm.c:423:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (113 << 20) | (113 << 10) | (113));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2143: FILE: drivers/char/drm/via_chrome9_drm.c:425:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (135 << 20) | (135 << 10) | (135));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2145: FILE: drivers/char/drm/via_chrome9_drm.c:427:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (170 << 20) | (170 << 10) | (170));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2147: FILE: drivers/char/drm/via_chrome9_drm.c:429:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (199 << 20) | (199 << 10) | (199));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2149: FILE: drivers/char/drm/via_chrome9_drm.c:431:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (246 << 20) | (246 << 10) | (246));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2151: FILE: drivers/char/drm/via_chrome9_drm.c:433:
+			SetMMIORegister(dev_priv->mmio->handle,
+				0x440, (284 << 20) | (284 << 10) | (284));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2153: FILE: drivers/char/drm/via_chrome9_drm.c:435:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(317 << 20) | (317 << 10) | (317));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2155: FILE: drivers/char/drm/via_chrome9_drm.c:437:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(347 << 20) | (347 << 10) | (347));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2157: FILE: drivers/char/drm/via_chrome9_drm.c:439:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(373 << 20) | (373 << 10) | (373));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2159: FILE: drivers/char/drm/via_chrome9_drm.c:441:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(398 << 20) | (398 << 10) | (398));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2161: FILE: drivers/char/drm/via_chrome9_drm.c:443:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(442 << 20) | (442 << 10) | (442));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2163: FILE: drivers/char/drm/via_chrome9_drm.c:445:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(481 << 20) | (481 << 10) | (481));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2165: FILE: drivers/char/drm/via_chrome9_drm.c:447:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(517 << 20) | (517 << 10) | (517));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2167: FILE: drivers/char/drm/via_chrome9_drm.c:449:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(550 << 20) | (550 << 10) | (550));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2169: FILE: drivers/char/drm/via_chrome9_drm.c:451:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(609 << 20) | (609 << 10) | (609));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2171: FILE: drivers/char/drm/via_chrome9_drm.c:453:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(662 << 20) | (662 << 10) | (662));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2173: FILE: drivers/char/drm/via_chrome9_drm.c:455:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(709 << 20) | (709 << 10) | (709));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2175: FILE: drivers/char/drm/via_chrome9_drm.c:457:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(753 << 20) | (753 << 10) | (753));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2177: FILE: drivers/char/drm/via_chrome9_drm.c:459:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(794 << 20) | (794 << 10) | (794));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2179: FILE: drivers/char/drm/via_chrome9_drm.c:461:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(832 << 20) | (832 << 10) | (832));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2181: FILE: drivers/char/drm/via_chrome9_drm.c:463:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(868 << 20) | (868 << 10) | (868));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2183: FILE: drivers/char/drm/via_chrome9_drm.c:465:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(902 << 20) | (902 << 10) | (902));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2185: FILE: drivers/char/drm/via_chrome9_drm.c:467:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(934 << 20) | (934 << 10) | (934));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2187: FILE: drivers/char/drm/via_chrome9_drm.c:469:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(966 << 20) | (966 << 10) | (966));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2189: FILE: drivers/char/drm/via_chrome9_drm.c:471:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				(996 << 20) | (996 << 10) | (996));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2191: FILE: drivers/char/drm/via_chrome9_drm.c:473:
+
+

WARNING:TYPO_SPELLING: 'regsiters' may be misspelled - perhaps 'registers'?
#2193: FILE: drivers/char/drm/via_chrome9_drm.c:475:
+			All types of write through regsiters should be write
 			                           ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2193: FILE: drivers/char/drm/via_chrome9_drm.c:475:
+			/* For Interrupt Restore only
+			All types of write through regsiters should be write

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2209: FILE: drivers/char/drm/via_chrome9_drm.c:491:
+			16 entries : 4 128-bit data */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2211: FILE: drivers/char/drm/via_chrome9_drm.c:493:
+^I^I^I/* Initialize INV_ParaSubType_TexPal  ^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2213: FILE: drivers/char/drm/via_chrome9_drm.c:495:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00030000 | 0x00000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2216: FILE: drivers/char/drm/via_chrome9_drm.c:498:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					0x00000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2222: FILE: drivers/char/drm/via_chrome9_drm.c:504:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00030000 | 0x11000000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2225: FILE: drivers/char/drm/via_chrome9_drm.c:507:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					0x00000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2231: FILE: drivers/char/drm/via_chrome9_drm.c:513:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				(0x00030000 | 0x14000000));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2232: FILE: drivers/char/drm/via_chrome9_drm.c:514:
+			for (i = 0; i < (5+3); i++) {
 			                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2234: FILE: drivers/char/drm/via_chrome9_drm.c:516:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					0x00000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2239: FILE: drivers/char/drm/via_chrome9_drm.c:521:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00040000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2242: FILE: drivers/char/drm/via_chrome9_drm.c:524:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					((unsigned int) i << 24));

CHECK:SPACING: No space is necessary after a cast
#2242: FILE: drivers/char/drm/via_chrome9_drm.c:524:
+					((unsigned int) i << 24));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2247: FILE: drivers/char/drm/via_chrome9_drm.c:529:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00fe0000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2250: FILE: drivers/char/drm/via_chrome9_drm.c:532:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					((unsigned int) i << 24));

CHECK:SPACING: No space is necessary after a cast
#2250: FILE: drivers/char/drm/via_chrome9_drm.c:532:
+					((unsigned int) i << 24));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2253: FILE: drivers/char/drm/via_chrome9_drm.c:535:
+			/*ParaType 0x11 - Frame Buffer Auto-Swapping and
+			Command Regulator Misc*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2253: FILE: drivers/char/drm/via_chrome9_drm.c:535:
+			Command Regulator Misc*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2255: FILE: drivers/char/drm/via_chrome9_drm.c:537:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			(0x00110000));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2258: FILE: drivers/char/drm/via_chrome9_drm.c:540:
+				SetMMIORegister(dev_priv->mmio->handle, 0x440,
+					((unsigned int) i << 24));

CHECK:SPACING: No space is necessary after a cast
#2258: FILE: drivers/char/drm/via_chrome9_drm.c:540:
+					((unsigned int) i << 24));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2261: FILE: drivers/char/drm/via_chrome9_drm.c:543:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+				0x00fe0000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2263: FILE: drivers/char/drm/via_chrome9_drm.c:545:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x4000840f);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2265: FILE: drivers/char/drm/via_chrome9_drm.c:547:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x47000404);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2267: FILE: drivers/char/drm/via_chrome9_drm.c:549:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x44000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2269: FILE: drivers/char/drm/via_chrome9_drm.c:551:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x46000005);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2273: FILE: drivers/char/drm/via_chrome9_drm.c:555:
+			SetMMIORegister(dev_priv->mmio->handle, 0x43C,
+			0x00fe0000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2275: FILE: drivers/char/drm/via_chrome9_drm.c:557:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x00001004);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2277: FILE: drivers/char/drm/via_chrome9_drm.c:559:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x08000249);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2279: FILE: drivers/char/drm/via_chrome9_drm.c:561:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x0a0002c9);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2281: FILE: drivers/char/drm/via_chrome9_drm.c:563:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x0b0002fb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2283: FILE: drivers/char/drm/via_chrome9_drm.c:565:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x0c000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2285: FILE: drivers/char/drm/via_chrome9_drm.c:567:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x0d0002cb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: drivers/char/drm/via_chrome9_drm.c:569:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x0e000009);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2289: FILE: drivers/char/drm/via_chrome9_drm.c:571:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x10000049);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2291: FILE: drivers/char/drm/via_chrome9_drm.c:573:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x110002ff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2293: FILE: drivers/char/drm/via_chrome9_drm.c:575:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x12000008);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2295: FILE: drivers/char/drm/via_chrome9_drm.c:577:
+			SetMMIORegister(dev_priv->mmio->handle, 0x440,
+				0x130002db);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2312: FILE: drivers/char/drm/via_chrome9_drm.c:594:
+		SetMMIORegister(dev_priv->mmio->handle, INV_REG_CR_BEGIN,
+			0x06000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2314: FILE: drivers/char/drm/via_chrome9_drm.c:596:
+		SetMMIORegister(dev_priv->mmio->handle, INV_REG_CR_BEGIN,
+			0x07100000);

ERROR:SPACING: space required before the open brace '{'
#2315: FILE: drivers/char/drm/via_chrome9_drm.c:597:
+	} else{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2317: FILE: drivers/char/drm/via_chrome9_drm.c:599:
+		SetMMIORegister(dev_priv->mmio->handle, INV_REG_CR_BEGIN,
+			0x02000000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2319: FILE: drivers/char/drm/via_chrome9_drm.c:601:
+		SetMMIORegister(dev_priv->mmio->handle, INV_REG_CR_BEGIN,
+			0x03100000);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2322: FILE: drivers/char/drm/via_chrome9_drm.c:604:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2324: FILE: drivers/char/drm/via_chrome9_drm.c:606:
+	SetMMIORegister(dev_priv->mmio->handle, INV_REG_CR_TRANS,
+	INV_ParaType_PreCR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2326: FILE: drivers/char/drm/via_chrome9_drm.c:608:
+	SetMMIORegister(dev_priv->mmio->handle, INV_REG_CR_BEGIN,
+	INV_SubA_HSetRBGID | INV_HSetRBGID_CR);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev_priv->pagetable_map.pagetable_size'
#2363: FILE: drivers/char/drm/via_chrome9_drm.c:645:
+		sr7b |= ProtectSizeValue(dev_priv->
+			pagetable_map.pagetable_size);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2367: FILE: drivers/char/drm/via_chrome9_drm.c:649:
+			writel(0x80000000, pGARTTable+i);
 			                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2373: FILE: drivers/char/drm/via_chrome9_drm.c:655:
+			sr6f = GetMMIORegisterU8(dev_priv->mmio->handle,
+				0x83c5);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2398: FILE: drivers/char/drm/via_chrome9_drm.c:680:
+			sr6f = GetMMIORegisterU8(dev_priv->mmio->handle,
+				0x83c5);

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2403: FILE: drivers/char/drm/via_chrome9_drm.c:685:
+				PAGE_SIZE * i)) & 0x3fffffff, pGARTTable+
 				                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2404: FILE: drivers/char/drm/via_chrome9_drm.c:686:
+				i+alignedoffset);
 				 ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2414: FILE: drivers/char/drm/via_chrome9_drm.c:696:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2424: FILE: drivers/char/drm/via_chrome9_drm.c:706:
+int  via_chrome9_drm_suspend(struct pci_dev *dev,
+	pm_message_t state)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2430: FILE: drivers/char/drm/via_chrome9_drm.c:712:
+int via_chrome9_driver_load(struct drm_device *dev,
+	unsigned long chipset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2449: FILE: drivers/char/drm/via_chrome9_drm.c:731:
+	dev_priv = drm_calloc(1, sizeof(struct drm_via_chrome9_private),
+		DRM_MEM_DRIVER);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_priv"
#2450: FILE: drivers/char/drm/via_chrome9_drm.c:732:
+	if (dev_priv == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2474: FILE: drivers/char/drm/via_chrome9_drm.c:756:
+	drm_free(dev_priv, sizeof(struct drm_via_chrome9_private),
+		DRM_MEM_DRIVER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2480: FILE: drivers/char/drm/via_chrome9_drm.c:762:
+static int via_chrome9_initialize(struct drm_device *dev,
+	struct drm_via_chrome9_init *init)

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#2500: FILE: drivers/char/drm/via_chrome9_drm.c:782:
+	intialize hw */
 	^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2500: FILE: drivers/char/drm/via_chrome9_drm.c:782:
+	/* Find all the map added first, doing this is necessary to
+	intialize hw */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2500: FILE: drivers/char/drm/via_chrome9_drm.c:782:
+	intialize hw */

WARNING:TYPO_SPELLING: 'intialization' may be misspelled - perhaps 'initialization'?
#2512: FILE: drivers/char/drm/via_chrome9_drm.c:794:
+	/* After hw intialization, we have kown whether to use agp
 	            ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'kown' may be misspelled - perhaps 'known'?
#2512: FILE: drivers/char/drm/via_chrome9_drm.c:794:
+	/* After hw intialization, we have kown whether to use agp
 	                                   ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2513: FILE: drivers/char/drm/via_chrome9_drm.c:795:
+	/* After hw intialization, we have kown whether to use agp
+	or to use pcie for texture */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2513: FILE: drivers/char/drm/via_chrome9_drm.c:795:
+	or to use pcie for texture */

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#2515: FILE: drivers/char/drm/via_chrome9_drm.c:797:
+		DRM_ERROR("function \

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2524: FILE: drivers/char/drm/via_chrome9_drm.c:806:
+	/* all the error recover has been processed in relevant function,
+	so here just return error */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2524: FILE: drivers/char/drm/via_chrome9_drm.c:806:
+	so here just return error */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2529: FILE: drivers/char/drm/via_chrome9_drm.c:811:
+static void via_chrome9_cleanup(struct drm_device *dev,
+	struct drm_via_chrome9_init *init)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'via_chrome9_cleanup', this function's name, in a string
#2534: FILE: drivers/char/drm/via_chrome9_drm.c:816:
+	DRM_DEBUG("function via_chrome9_cleanup run!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPACING: space prohibited before semicolon
#2537: FILE: drivers/char/drm/via_chrome9_drm.c:819:
+		return ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#2544: FILE: drivers/char/drm/via_chrome9_drm.c:826:
+		if (lpcmDMAManager)
+		lpcmDMAManager->addr_linear = NULL;

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#2575: FILE: drivers/char/drm/via_chrome9_drm.c:857:
+Do almost everything intialize here,include:
                      ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2575: FILE: drivers/char/drm/via_chrome9_drm.c:857:
+/*
+Do almost everything intialize here,include:

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#2576: FILE: drivers/char/drm/via_chrome9_drm.c:858:
+1.intialize all addmaps in private data structure
   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#2577: FILE: drivers/char/drm/via_chrome9_drm.c:859:
+2.intialize memory heap management for video agp/pcie
   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#2578: FILE: drivers/char/drm/via_chrome9_drm.c:860:
+3.intialize hw for dma(pcie/agp) function
   ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2583: FILE: drivers/char/drm/via_chrome9_drm.c:865:
+int via_chrome9_ioctl_init(struct drm_device *dev, void *data,
+	struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2607: FILE: drivers/char/drm/via_chrome9_drm.c:889:
+int via_chrome9_ioctl_allocate_event_tag(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2638: FILE: drivers/char/drm/via_chrome9_drm.c:920:
+int via_chrome9_ioctl_free_event_tag(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

WARNING:SPACING: space prohibited before semicolon
#2653: FILE: drivers/char/drm/via_chrome9_drm.c:935:
+	return ;

WARNING:RETURN_VOID: void function return statements are not generally useful
#2654: FILE: drivers/char/drm/via_chrome9_drm.c:936:
+	return ;
+}

CHECK:SPACING: No space is necessary after a cast
#2674: FILE: drivers/char/drm/via_chrome9_drm.c:956:
+		(struct drm_via_chrome9_private *) dev->dev_private;

WARNING:SPACING: space prohibited before semicolon
#2678: FILE: drivers/char/drm/via_chrome9_drm.c:960:
+		return ;

WARNING:SPACING: space prohibited before semicolon
#2682: FILE: drivers/char/drm/via_chrome9_drm.c:964:
+		return ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sarea_priv->page_flip == 1'
#2684: FILE: drivers/char/drm/via_chrome9_drm.c:966:
+	if ((sarea_priv->page_flip == 1) &&
+		(sarea_priv->current_page != VIA_CHROME9_FRONT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sarea_priv->current_page != VIA_CHROME9_FRONT'
#2684: FILE: drivers/char/drm/via_chrome9_drm.c:966:
+	if ((sarea_priv->page_flip == 1) &&
+		(sarea_priv->current_page != VIA_CHROME9_FRONT)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2685: FILE: drivers/char/drm/via_chrome9_drm.c:967:
+	if ((sarea_priv->page_flip == 1) &&
+		(sarea_priv->current_page != VIA_CHROME9_FRONT)) {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2686: FILE: drivers/char/drm/via_chrome9_drm.c:968:
+		volatile unsigned long *bci_base;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2687: FILE: drivers/char/drm/via_chrome9_drm.c:969:
+		volatile unsigned long *bci_base;
+		if (via_chrome9_do_wait_vblank(dev_priv))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2690: FILE: drivers/char/drm/via_chrome9_drm.c:972:
+		bci_base = (volatile unsigned long *)(dev_priv->bci);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2694: FILE: drivers/char/drm/via_chrome9_drm.c:976:
+		BCI_SET_STREAM_REGISTER(bci_base, 0x81c0,
+			dev_priv->front_offset);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2715: FILE: drivers/char/drm/via_chrome9_drm.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2755: FILE: drivers/char/drm/via_chrome9_drm.h:41:
+#define VIA_CHROME9_NR_SAREA_CLIPRECTS ^I^I8$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2759: FILE: drivers/char/drm/via_chrome9_drm.h:45:
+#define XVMCLOCKPTR(saPriv,lockNo)					\
                           ^

CHECK:CAMELCASE: Avoid CamelCase: <saPriv>
#2759: FILE: drivers/char/drm/via_chrome9_drm.h:45:
+#define XVMCLOCKPTR(saPriv,lockNo)					\

CHECK:CAMELCASE: Avoid CamelCase: <lockNo>
#2759: FILE: drivers/char/drm/via_chrome9_drm.h:45:
+#define XVMCLOCKPTR(saPriv,lockNo)					\

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2760: FILE: drivers/char/drm/via_chrome9_drm.h:46:
+	((volatile struct drm_hw_lock *)				\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2761: FILE: drivers/char/drm/via_chrome9_drm.h:47:
+^I(((((unsigned long) (saPriv)->XvMCLockArea) + ^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#2761: FILE: drivers/char/drm/via_chrome9_drm.h:47:
+	(((((unsigned long) (saPriv)->XvMCLockArea) + 			\

CHECK:CAMELCASE: Avoid CamelCase: <XvMCLockArea>
#2761: FILE: drivers/char/drm/via_chrome9_drm.h:47:
+	(((((unsigned long) (saPriv)->XvMCLockArea) + 			\

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2764: FILE: drivers/char/drm/via_chrome9_drm.h:50:
+				    VIA_CHROME9_MAX_CACHELINE_SIZE*(lockNo)))
 				                                  ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2801: FILE: drivers/char/drm/via_chrome9_drm.h:87:
+#define DRM_IOCTL_VIA_CHROME9_INIT                  ^I \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2835: FILE: drivers/char/drm/via_chrome9_drm.h:121:
+#define DRM_IOCTL_VIA_CHROME9_ALLOCMEM       ^I    \$

CHECK:CAMELCASE: Avoid CamelCase: <hostBlt_handle>
#2913: FILE: drivers/char/drm/via_chrome9_drm.h:199:
+	unsigned int hostBlt_handle;

CHECK:CAMELCASE: Avoid CamelCase: <query_Id1>
#2950: FILE: drivers/char/drm/via_chrome9_drm.h:236:
+	int         query_Id1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2973: FILE: drivers/char/drm/via_chrome9_drm.h:259:
+	uint32_t offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2974: FILE: drivers/char/drm/via_chrome9_drm.h:260:
+	uint32_t size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2978: FILE: drivers/char/drm/via_chrome9_drm.h:264:
+	uint32_t offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2979: FILE: drivers/char/drm/via_chrome9_drm.h:265:
+	uint32_t size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2983: FILE: drivers/char/drm/via_chrome9_drm.h:269:
+	uint32_t context;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2984: FILE: drivers/char/drm/via_chrome9_drm.h:270:
+	uint32_t type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2985: FILE: drivers/char/drm/via_chrome9_drm.h:271:
+	uint32_t size;

CHECK:CAMELCASE: Avoid CamelCase: <isPCIEVIDEO>
#3004: FILE: drivers/char/drm/via_chrome9_drm.h:290:
+	int isPCIEVIDEO;

CHECK:CAMELCASE: Avoid CamelCase: <apertureID>
#3015: FILE: drivers/char/drm/via_chrome9_drm.h:301:
+	int apertureID;

WARNING:TYPO_SPELLING: 'fileds' may be misspelled - perhaps 'fields'?
#3024: FILE: drivers/char/drm/via_chrome9_drm.h:310:
+    Some fileds of this data structure has no meaning now since
          ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3024: FILE: drivers/char/drm/via_chrome9_drm.h:310:
+/*
+    Some fileds of this data structure has no meaning now since

CHECK:CAMELCASE: Avoid CamelCase: <lpL1Node>
#3037: FILE: drivers/char/drm/via_chrome9_drm.h:323:
+		void *lpL1Node;

CHECK:CAMELCASE: Avoid CamelCase: <alcL1Tag>
#3038: FILE: drivers/char/drm/via_chrome9_drm.h:324:
+		unsigned int       alcL1Tag;

CHECK:CAMELCASE: Avoid CamelCase: <usageCount>
#3039: FILE: drivers/char/drm/via_chrome9_drm.h:325:
+		unsigned int       usageCount;

CHECK:CAMELCASE: Avoid CamelCase: <dwVersion>
#3040: FILE: drivers/char/drm/via_chrome9_drm.h:326:
+		unsigned int       dwVersion;

CHECK:CAMELCASE: Avoid CamelCase: <dwResHandle>
#3041: FILE: drivers/char/drm/via_chrome9_drm.h:327:
+		unsigned int       dwResHandle;

CHECK:CAMELCASE: Avoid CamelCase: <dwProcessID>
#3042: FILE: drivers/char/drm/via_chrome9_drm.h:328:
+		unsigned int       dwProcessID;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3070: FILE: drivers/char/drm/via_chrome9_drm.h:356:
+ * structure as well */

CHECK:CAMELCASE: Avoid CamelCase: <inUse>
#3074: FILE: drivers/char/drm/via_chrome9_drm.h:360:
+	unsigned char inUse;	/* owned by a client, or free? */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3093: FILE: drivers/char/drm/via_chrome9_drm.h:379:
+	uint32_t size;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3112: FILE: drivers/char/drm/via_chrome9_drm.h:398:
+extern int via_chrome9_ioctl_wait_chip_idle(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3113: FILE: drivers/char/drm/via_chrome9_drm.h:399:
+extern int via_chrome9_ioctl_wait_chip_idle(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3114: FILE: drivers/char/drm/via_chrome9_drm.h:400:
+extern int via_chrome9_ioctl_init(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3115: FILE: drivers/char/drm/via_chrome9_drm.h:401:
+extern int via_chrome9_ioctl_init(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3116: FILE: drivers/char/drm/via_chrome9_drm.h:402:
+extern int via_chrome9_ioctl_allocate_event_tag(struct drm_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3118: FILE: drivers/char/drm/via_chrome9_drm.h:404:
+extern int via_chrome9_ioctl_free_event_tag(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3119: FILE: drivers/char/drm/via_chrome9_drm.h:405:
+extern int via_chrome9_ioctl_free_event_tag(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3120: FILE: drivers/char/drm/via_chrome9_drm.h:406:
+extern int via_chrome9_driver_load(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3121: FILE: drivers/char/drm/via_chrome9_drm.h:407:
+extern int via_chrome9_driver_load(struct drm_device *dev,
+	unsigned long chipset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3122: FILE: drivers/char/drm/via_chrome9_drm.h:408:
+extern int via_chrome9_driver_unload(struct drm_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3123: FILE: drivers/char/drm/via_chrome9_drm.h:409:
+extern int via_chrome9_ioctl_process_exit(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3124: FILE: drivers/char/drm/via_chrome9_drm.h:410:
+extern int via_chrome9_ioctl_process_exit(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3125: FILE: drivers/char/drm/via_chrome9_drm.h:411:
+extern int via_chrome9_ioctl_restore_primary(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3126: FILE: drivers/char/drm/via_chrome9_drm.h:412:
+extern int via_chrome9_ioctl_restore_primary(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3127: FILE: drivers/char/drm/via_chrome9_drm.h:413:
+extern int  via_chrome9_drm_resume(struct pci_dev *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3128: FILE: drivers/char/drm/via_chrome9_drm.h:414:
+extern int  via_chrome9_drm_suspend(struct pci_dev *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3129: FILE: drivers/char/drm/via_chrome9_drm.h:415:
+extern int  via_chrome9_drm_suspend(struct pci_dev *dev,
+	pm_message_t state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3130: FILE: drivers/char/drm/via_chrome9_drm.h:416:
+extern void __via_chrome9ke_udelay(unsigned long usecs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3131: FILE: drivers/char/drm/via_chrome9_drm.h:417:
+extern void via_chrome9_lastclose(struct drm_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3132: FILE: drivers/char/drm/via_chrome9_drm.h:418:
+extern void via_chrome9_preclose(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3133: FILE: drivers/char/drm/via_chrome9_drm.h:419:
+extern void via_chrome9_preclose(struct drm_device *dev,
+	struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3134: FILE: drivers/char/drm/via_chrome9_drm.h:420:
+extern int via_chrome9_is_agp(struct drm_device *dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3136: FILE: drivers/char/drm/via_chrome9_drm.h:422:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3141: FILE: drivers/char/drm/via_chrome9_drv.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3182: FILE: drivers/char/drm/via_chrome9_drv.c:42:
+int via_chrome9_drm_authmagic(struct drm_device *dev, void *data,
+	struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3189: FILE: drivers/char/drm/via_chrome9_drv.c:49:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_INIT, via_chrome9_ioctl_init,
+		DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),/* via_chrome9_map.c*/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3189: FILE: drivers/char/drm/via_chrome9_drv.c:49:
+		DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),/* via_chrome9_map.c*/
 		        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3189: FILE: drivers/char/drm/via_chrome9_drv.c:49:
+		DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),/* via_chrome9_map.c*/
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3193: FILE: drivers/char/drm/via_chrome9_drv.c:53:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_ALLOCATE_EVENT_TAG,
+		via_chrome9_ioctl_allocate_event_tag, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3195: FILE: drivers/char/drm/via_chrome9_drv.c:55:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_FREE_EVENT_TAG,
+		via_chrome9_ioctl_free_event_tag, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3197: FILE: drivers/char/drm/via_chrome9_drv.c:57:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_ALLOCATE_APERTURE,
+		via_chrome9_ioctl_allocate_aperture, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3199: FILE: drivers/char/drm/via_chrome9_drv.c:59:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_FREE_APERTURE,
+		via_chrome9_ioctl_free_aperture, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3201: FILE: drivers/char/drm/via_chrome9_drv.c:61:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_ALLOCATE_VIDEO_MEM,
+	via_chrome9_ioctl_allocate_mem_wrapper,	DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3203: FILE: drivers/char/drm/via_chrome9_drv.c:63:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_FREE_VIDEO_MEM,
+		via_chrome9_ioctl_free_mem_wrapper, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3205: FILE: drivers/char/drm/via_chrome9_drv.c:65:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_WAIT_CHIP_IDLE,
+		via_chrome9_ioctl_wait_chip_idle, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3207: FILE: drivers/char/drm/via_chrome9_drv.c:67:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_PROCESS_EXIT,
+		via_chrome9_ioctl_process_exit, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3209: FILE: drivers/char/drm/via_chrome9_drv.c:69:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_RESTORE_PRIMARY,
+		via_chrome9_ioctl_restore_primary, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3211: FILE: drivers/char/drm/via_chrome9_drv.c:71:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_FLUSH_CACHE,
+		via_chrome9_ioctl_flush_cache, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3213: FILE: drivers/char/drm/via_chrome9_drv.c:73:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_ALLOCMEM,
+		via_chrome9_ioctl_allocate_mem_base, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3215: FILE: drivers/char/drm/via_chrome9_drv.c:75:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_FREEMEM,
+		via_chrome9_ioctl_freemem_base, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3217: FILE: drivers/char/drm/via_chrome9_drv.c:77:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_CHECKVIDMEMSIZE,
+		via_chrome9_ioctl_check_vidmem_size, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3219: FILE: drivers/char/drm/via_chrome9_drv.c:79:
+	DRM_IOCTL_DEF(DRM_VIA_CHROME9_PCIEMEMCTRL,
+		via_chrome9_ioctl_pciemem_ctrl, DRM_AUTH),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3230: FILE: drivers/char/drm/via_chrome9_drv.c:90:
+int  via_chrome9_driver_open(struct drm_device *dev,
+	struct drm_file *priv)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3278: FILE: drivers/char/drm/via_chrome9_drv.c:138:
+    driver.num_ioctls = via_chrome9_max_ioctl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3279: FILE: drivers/char/drm/via_chrome9_drv.c:139:
+    driver.dev_priv_size = sizeof(struct drm_via_chrome9_private);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3280: FILE: drivers/char/drm/via_chrome9_drv.c:140:
+    return drm_init(&driver);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3297: FILE: drivers/char/drm/via_chrome9_drv.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3377: FILE: drivers/char/drm/via_chrome9_drv.h:81:
+	/* bit[31]:0:indicate no alignment needed,1:indicate
+	alignment needed and size is bit[0:30]*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3377: FILE: drivers/char/drm/via_chrome9_drv.h:81:
+	alignment needed and size is bit[0:30]*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3425: FILE: drivers/char/drm/via_chrome9_drv.h:129:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3445: FILE: drivers/char/drm/via_chrome9_mm.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3481: FILE: drivers/char/drm/via_chrome9_mm.c:37:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3483: FILE: drivers/char/drm/via_chrome9_mm.c:39:
+int via_chrome9_map_init(struct drm_device *dev,
+	struct drm_via_chrome9_init *init)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev_priv->sarea->handle'
#3495: FILE: drivers/char/drm/via_chrome9_mm.c:51:
+		(struct drm_via_chrome9_sarea *)((unsigned char *)dev_priv->
+		sarea->handle + init->sarea_priv_offset);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3505: FILE: drivers/char/drm/via_chrome9_mm.c:61:
+	if (init->shadow_size) {
[...]
+	dev_priv->shadow_map.shadow = drm_core_findmap(dev, init->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'init->shadow_handle'
#3508: FILE: drivers/char/drm/via_chrome9_mm.c:64:
+	dev_priv->shadow_map.shadow = drm_core_findmap(dev, init->
+	shadow_handle);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev_priv->shadow_map.shadow->handle'
#3515: FILE: drivers/char/drm/via_chrome9_mm.c:71:
+		dev_priv->shadow_map.shadow_handle = (unsigned int *)dev_priv->
+			shadow_map.shadow->handle;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3518: FILE: drivers/char/drm/via_chrome9_mm.c:74:
+	if (init->agp_tex_size && init->chip_agp != CHIP_PCIE) {
[...]
+	dev_priv->agp_tex = drm_core_findmap(dev, init->agp_tex_handle);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3560: FILE: drivers/char/drm/via_chrome9_mm.c:116:
+int via_chrome9_heap_management_init(struct drm_device *dev,
+	struct drm_via_chrome9_init *init)

CHECK:SPACING: No space is necessary after a cast
#3563: FILE: drivers/char/drm/via_chrome9_mm.c:119:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3569: FILE: drivers/char/drm/via_chrome9_mm.c:125:
+	ret = drm_sman_set_range(&dev_priv->sman, VIA_CHROME9_MEM_VIDEO,
+		0, dev_priv->available_fb_size >> VIA_CHROME9_MM_GRANULARITY);

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#3571: FILE: drivers/char/drm/via_chrome9_mm.c:127:
+		DRM_ERROR("VRAM memory manager initialization ******ERROR\

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3578: FILE: drivers/char/drm/via_chrome9_mm.c:134:
+	/* agp/pcie heap management.
+	note:because agp is contradict with pcie, so only one is enough

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3579: FILE: drivers/char/drm/via_chrome9_mm.c:135:
+	for managing both of them.*/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3581: FILE: drivers/char/drm/via_chrome9_mm.c:137:
+	if (init->agp_type != AGP_DISABLED && dev_priv->agp_size) {
+	ret = drm_sman_set_range(&dev_priv->sman, VIA_CHROME9_MEM_AGP,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3583: FILE: drivers/char/drm/via_chrome9_mm.c:139:
+	ret = drm_sman_set_range(&dev_priv->sman, VIA_CHROME9_MEM_AGP,
+		0, dev_priv->agp_size >> VIA_CHROME9_MM_GRANULARITY);

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#3585: FILE: drivers/char/drm/via_chrome9_mm.c:141:
+		DRM_ERROR("AGP/PCIE memory manager initialization ******ERROR\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3600: FILE: drivers/char/drm/via_chrome9_mm.c:156:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3602: FILE: drivers/char/drm/via_chrome9_mm.c:158:
+void via_chrome9_memory_destroy_heap(struct drm_device *dev,
+	struct drm_via_chrome9_private *dev_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3612: FILE: drivers/char/drm/via_chrome9_mm.c:168:
+void via_chrome9_reclaim_buffers_locked(struct drm_device *dev,
+				struct drm_file *file_priv)

WARNING:RETURN_VOID: void function return statements are not generally useful
#3615: FILE: drivers/char/drm/via_chrome9_mm.c:171:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3618: FILE: drivers/char/drm/via_chrome9_mm.c:174:
+int via_chrome9_ioctl_allocate_aperture(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3624: FILE: drivers/char/drm/via_chrome9_mm.c:180:
+int via_chrome9_ioctl_free_aperture(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3629: FILE: drivers/char/drm/via_chrome9_mm.c:185:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3632: FILE: drivers/char/drm/via_chrome9_mm.c:188:
+int via_chrome9_ioctl_allocate_mem_base(struct drm_device *dev,
+void *data, struct drm_file *file_priv)

CHECK:SPACING: No space is necessary after a cast
#3637: FILE: drivers/char/drm/via_chrome9_mm.c:193:
+		(struct drm_via_chrome9_private *) dev->dev_private;

CHECK:CAMELCASE: Avoid CamelCase: <tmpSize>
#3638: FILE: drivers/char/drm/via_chrome9_mm.c:194:
+	unsigned long tmpSize = 0, offset = 0, alignment = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3640: FILE: drivers/char/drm/via_chrome9_mm.c:196:
+	/* modify heap_type to agp for pcie, since we treat pcie/agp heap
+	no difference in heap management */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3640: FILE: drivers/char/drm/via_chrome9_mm.c:196:
+	no difference in heap management */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#3642: FILE: drivers/char/drm/via_chrome9_mm.c:198:
+		if (dev_priv->chip_agp != CHIP_PCIE) {
+		DRM_ERROR(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3643: FILE: drivers/char/drm/via_chrome9_mm.c:199:
+		DRM_ERROR(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#3644: FILE: drivers/char/drm/via_chrome9_mm.c:200:
+		"User want to alloc memory from pcie heap but via_chrome9.ko\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mem->type == VIA_CHROME9_MEM_VIDEO'
#3656: FILE: drivers/char/drm/via_chrome9_mm.c:212:
+	if (0 == ((mem->type == VIA_CHROME9_MEM_VIDEO) ?
+		dev_priv->vram_initialized : dev_priv->agp_initialized)) {

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#3658: FILE: drivers/char/drm/via_chrome9_mm.c:214:
+		DRM_ERROR("Attempt to allocate from uninitialized\

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev_priv->alignment'
#3667: FILE: drivers/char/drm/via_chrome9_mm.c:223:
+	alignment = (dev_priv->alignment & 0x80000000) ? dev_priv->
+	alignment & 0x7FFFFFFF:0;

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#3667: FILE: drivers/char/drm/via_chrome9_mm.c:223:
+	alignment & 0x7FFFFFFF:0;
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3670: FILE: drivers/char/drm/via_chrome9_mm.c:226:
+	item = drm_sman_alloc(&dev_priv->sman, mem->type, tmpSize, alignment,
+	(unsigned long)file_priv);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3678: FILE: drivers/char/drm/via_chrome9_mm.c:234:
+	/* Till here every thing is ok, we check the memory type allocated
+	and return appropriate value to user mode  Here the value return to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3679: FILE: drivers/char/drm/via_chrome9_mm.c:235:
+	user is very difficult to operate. BE CAREFULLY!!! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3681: FILE: drivers/char/drm/via_chrome9_mm.c:237:
+	/* offset is used by user mode ap to calculate the virtual address
+	which is used to access the memory allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3681: FILE: drivers/char/drm/via_chrome9_mm.c:237:
+	which is used to access the memory allocated */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev_priv->dma_manager'
#3694: FILE: drivers/char/drm/via_chrome9_mm.c:250:
+			((struct drm_via_chrome9_DMA_manager *)dev_priv->
+				dma_manager)->DMASize * sizeof(unsigned long);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#3695: FILE: drivers/char/drm/via_chrome9_mm.c:251:
+		} else {
+		mem->offset = offset;

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#3701: FILE: drivers/char/drm/via_chrome9_mm.c:257:
+		DRM_ERROR("Enter here is impossible ******\

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3706: FILE: drivers/char/drm/via_chrome9_mm.c:262:
+	/*DONE. Need we call function copy_to_user ?NO. We can't even
+	touch user's space.But we are lucky, since kernel drm:drm_ioctl

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3707: FILE: drivers/char/drm/via_chrome9_mm.c:263:
+	will to the job for us.  */

CHECK:SPACING: No space is necessary after a cast
#3718: FILE: drivers/char/drm/via_chrome9_mm.c:274:
+		(struct drm_via_chrome9_private *) dev->dev_private;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3730: FILE: drivers/char/drm/via_chrome9_mm.c:286:
+	/* Till here every thing is ok, we check the memory type allocated and
+	return appropriate value to user mode Here the value return to user is

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3731: FILE: drivers/char/drm/via_chrome9_mm.c:287:
+	very difficult to operate. BE CAREFULLY!!!*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3733: FILE: drivers/char/drm/via_chrome9_mm.c:289:
+	/* offset is used by user mode ap to calculate the virtual address
+	which is used to access the memory allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3733: FILE: drivers/char/drm/via_chrome9_mm.c:289:
+	which is used to access the memory allocated */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'memory_alloc->physaddress'
#3748: FILE: drivers/char/drm/via_chrome9_mm.c:304:
+			memory_alloc->linearaddress = (void *)memory_alloc->
+			physaddress;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3767: FILE: drivers/char/drm/via_chrome9_mm.c:323:
+int via_chrome9_ioctl_free_mem_wrapper(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3782: FILE: drivers/char/drm/via_chrome9_mm.c:338:
+int via_chrome9_ioctl_freemem_base(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3797: FILE: drivers/char/drm/via_chrome9_mm.c:353:
+int via_chrome9_ioctl_check_vidmem_size(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3803: FILE: drivers/char/drm/via_chrome9_mm.c:359:
+int via_chrome9_ioctl_pciemem_ctrl(struct drm_device *dev,
+	void *data, struct drm_file *file_priv)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3808: FILE: drivers/char/drm/via_chrome9_mm.c:364:
+	struct drm_via_chrome9_pciemem_ctrl *pcie_memory_ctrl = data;
+	switch (pcie_memory_ctrl->ctrl_type) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3810: FILE: drivers/char/drm/via_chrome9_mm.c:366:
+		result = copy_from_user((void *)(

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3811: FILE: drivers/char/drm/via_chrome9_mm.c:367:
+		dev_priv->pcie_vmalloc_nocache+
 		                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3818: FILE: drivers/char/drm/via_chrome9_mm.c:374:
+		result = copy_to_user(pcie_memory_ctrl->usermode_data,
+		(void *)(dev_priv->pcie_vmalloc_nocache+

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#3818: FILE: drivers/char/drm/via_chrome9_mm.c:374:
+		(void *)(dev_priv->pcie_vmalloc_nocache+
 		                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3836: FILE: drivers/char/drm/via_chrome9_mm.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3876: FILE: drivers/char/drm/via_chrome9_mm.h:41:
+extern int via_chrome9_map_init(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3877: FILE: drivers/char/drm/via_chrome9_mm.h:42:
+extern int via_chrome9_map_init(struct drm_device *dev,
+	struct drm_via_chrome9_init *init);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3878: FILE: drivers/char/drm/via_chrome9_mm.h:43:
+extern int via_chrome9_heap_management_init(struct drm_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3880: FILE: drivers/char/drm/via_chrome9_mm.h:45:
+extern void via_chrome9_memory_destroy_heap(struct drm_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3882: FILE: drivers/char/drm/via_chrome9_mm.h:47:
+extern int via_chrome9_ioctl_check_vidmem_size(struct drm_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3884: FILE: drivers/char/drm/via_chrome9_mm.h:49:
+extern int via_chrome9_ioctl_pciemem_ctrl(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3885: FILE: drivers/char/drm/via_chrome9_mm.h:50:
+extern int via_chrome9_ioctl_pciemem_ctrl(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3886: FILE: drivers/char/drm/via_chrome9_mm.h:51:
+extern int via_chrome9_ioctl_allocate_aperture(struct drm_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3888: FILE: drivers/char/drm/via_chrome9_mm.h:53:
+extern int via_chrome9_ioctl_free_aperture(struct drm_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3889: FILE: drivers/char/drm/via_chrome9_mm.h:54:
+extern int via_chrome9_ioctl_free_aperture(struct drm_device *dev,
+	void *data, struct drm_file *file_priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3890: FILE: drivers/char/drm/via_chrome9_mm.h:55:
+extern int via_chrome9_ioctl_allocate_mem_base(struct drm_device

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3892: FILE: drivers/char/drm/via_chrome9_mm.h:57:
+extern int via_chrome9_ioctl_allocate_mem_wrapper(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3892: FILE: drivers/char/drm/via_chrome9_mm.h:57:
+extern int via_chrome9_ioctl_allocate_mem_wrapper(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3894: FILE: drivers/char/drm/via_chrome9_mm.h:59:
+extern int via_chrome9_ioctl_freemem_base(struct drm_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3896: FILE: drivers/char/drm/via_chrome9_mm.h:61:
+extern int via_chrome9_ioctl_free_mem_wrapper(struct drm_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3898: FILE: drivers/char/drm/via_chrome9_mm.h:63:
+extern void via_chrome9_reclaim_buffers_locked(struct drm_device

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273412.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 174 warnings, 576 checks, 3821 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273412.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
