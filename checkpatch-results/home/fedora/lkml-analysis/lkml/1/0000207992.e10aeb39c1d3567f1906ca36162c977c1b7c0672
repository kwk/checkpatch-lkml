WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#31: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: drivers/block/dst/crypto.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: drivers/block/dst/crypto.c:43:
+		dprintk("%s: failed to allocate hash '%s', err: %d.\n",
+				__func__, ctl->hash_algo, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: drivers/block/dst/crypto.c:55:
+		dprintk("%s: failed to set key for hash '%s', err: %d.\n",
+				__func__, ctl->hash_algo, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: drivers/block/dst/crypto.c:79:
+		dprintk("%s: failed to allocate cipher '%s', err: %d.\n",
+				__func__, ctl->cipher_algo, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: drivers/block/dst/crypto.c:88:
+		dprintk("%s: failed to set key for cipher '%s', err: %d.\n",
+				__func__, ctl->cipher_algo, err);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#143: FILE: drivers/block/dst/crypto.c:108:
+	for (i=0; i<e->page_num; ++i)
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#143: FILE: drivers/block/dst/crypto.c:108:
+	for (i=0; i<e->page_num; ++i)
 	           ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#152: FILE: drivers/block/dst/crypto.c:117:
+	e->pages = kmalloc(num * sizeof(struct page **), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#156: FILE: drivers/block/dst/crypto.c:121:
+	for (i=0; i<num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#156: FILE: drivers/block/dst/crypto.c:121:
+	for (i=0; i<num; ++i) {
 	           ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#237: FILE: drivers/block/dst/crypto.c:202:
+struct dst_crypto_completion
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: drivers/block/dst/crypto.c:220:
+static int dst_crypto_process(struct ablkcipher_request *req,
+		struct scatterlist *sg_dst, struct scatterlist *sg_src,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#274: FILE: drivers/block/dst/crypto.c:239:
+	switch (err) {
+		case -EINPROGRESS:
+		case -EBUSY:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/block/dst/crypto.c:243:
+			err = wait_for_completion_interruptible_timeout(&c.complete,
+					timeout);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: drivers/block/dst/crypto.c:266:
+static int dst_trans_iter_out(struct bio *bio, struct dst_crypto_engine *e,
+		int (* iterator) (struct dst_crypto_engine *e,

WARNING:SPACING: Unnecessary space before function pointer name
#301: FILE: drivers/block/dst/crypto.c:266:
+		int (* iterator) (struct dst_crypto_engine *e,

WARNING:SPACING: Unnecessary space before function pointer arguments
#301: FILE: drivers/block/dst/crypto.c:266:
+		int (* iterator) (struct dst_crypto_engine *e,

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#301: FILE: drivers/block/dst/crypto.c:266:
+		int (* iterator) (struct dst_crypto_engine *e,
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: drivers/block/dst/crypto.c:289:
+static int dst_trans_iter_in(struct bio *bio, struct dst_crypto_engine *e,
+		int (* iterator) (struct dst_crypto_engine *e,

WARNING:SPACING: Unnecessary space before function pointer name
#324: FILE: drivers/block/dst/crypto.c:289:
+		int (* iterator) (struct dst_crypto_engine *e,

WARNING:SPACING: Unnecessary space before function pointer arguments
#324: FILE: drivers/block/dst/crypto.c:289:
+		int (* iterator) (struct dst_crypto_engine *e,

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#324: FILE: drivers/block/dst/crypto.c:289:
+		int (* iterator) (struct dst_crypto_engine *e,
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: drivers/block/dst/crypto.c:312:
+static int dst_crypt_iterator(struct dst_crypto_engine *e,
+		struct scatterlist *sg_dst, struct scatterlist *sg_src)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: drivers/block/dst/crypto.c:338:
+static int dst_hash_iterator(struct dst_crypto_engine *e,
+		struct scatterlist *sg_dst, struct scatterlist *sg_src)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*e)...) over kzalloc(sizeof(struct dst_crypto_engine)...)
#412: FILE: drivers/block/dst/crypto.c:377:
+	e = kzalloc(sizeof(struct dst_crypto_engine), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: drivers/block/dst/crypto.c:381:
+	e->src = kcalloc(2 * n->max_pages, sizeof(struct scatterlist),
+			GFP_KERNEL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#474: FILE: drivers/block/dst/crypto.c:439:
+	for (i=0; i<ctl->thread_num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#474: FILE: drivers/block/dst/crypto.c:439:
+	for (i=0; i<ctl->thread_num; ++i) {
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#477: FILE: drivers/block/dst/crypto.c:442:
+		err = thread_pool_add_worker(n->pool, name, i+10,
 		                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: drivers/block/dst/crypto.c:443:
+		err = thread_pool_add_worker(n->pool, name, i+10,
+			dst_crypto_thread_init, dst_crypto_thread_cleanup, n);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#487: FILE: drivers/block/dst/crypto.c:452:
+		thread_pool_del_worker_id(n->pool, i+10);
 		                                    ^

WARNING:TYPO_SPELLING: 'Thrad' may be misspelled - perhaps 'Thread'?
#511: FILE: drivers/block/dst/crypto.c:476:
+ * Thrad pool setup callback. Just stores a transaction in private data.
    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#521: FILE: drivers/block/dst/crypto.c:486:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: drivers/block/dst/crypto.c:495:
+		dprintk("%s: %llu/%u: size: %u, offset: %u, data: ",
+				__func__, bio->bi_sector, bio->bi_size,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#534: FILE: drivers/block/dst/crypto.c:499:
+		for (i=0; i<bv->bv_len; ++i)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#534: FILE: drivers/block/dst/crypto.c:499:
+		for (i=0; i<bv->bv_len; ++i)
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#535: FILE: drivers/block/dst/crypto.c:500:
+			printk("%02x ", p[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#537: FILE: drivers/block/dst/crypto.c:502:
+		printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: drivers/block/dst/crypto.c:511:
+static int dst_crypto_process_sending(struct dst_crypto_engine *e,
+		struct bio *bio, u8 *hash)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#567: FILE: drivers/block/dst/crypto.c:532:
+			printk(KERN_DEBUG "%s: bio: %llu/%u, rw: %lu, hash: ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/block/dst/crypto.c:533:
+			printk(KERN_DEBUG "%s: bio: %llu/%u, rw: %lu, hash: ",
+				__func__, (u64)bio->bi_sector,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#570: FILE: drivers/block/dst/crypto.c:535:
+			for (i=0; i<crypto_hash_digestsize(e->hash); ++i)
+					printk("%02x ", hash[i]);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#570: FILE: drivers/block/dst/crypto.c:535:
+			for (i=0; i<crypto_hash_digestsize(e->hash); ++i)
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#570: FILE: drivers/block/dst/crypto.c:535:
+			for (i=0; i<crypto_hash_digestsize(e->hash); ++i)
 			           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#571: FILE: drivers/block/dst/crypto.c:536:
+					printk("%02x ", hash[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: drivers/block/dst/crypto.c:537:
+			printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/block/dst/crypto.c:552:
+static int dst_crypto_process_receiving(struct dst_crypto_engine *e,
+		struct bio *bio, u8 *hash, u8 *recv_hash)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#603: FILE: drivers/block/dst/crypto.c:568:
+		printk(KERN_DEBUG "%s: bio: %llu/%u, rw: %lu, hash mismatch: %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: drivers/block/dst/crypto.c:569:
+		printk(KERN_DEBUG "%s: bio: %llu/%u, rw: %lu, hash mismatch: %d",
+			__func__, (u64)bio->bi_sector, bio->bi_size,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#609: FILE: drivers/block/dst/crypto.c:574:
+			printk(", recv/calc: ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#610: FILE: drivers/block/dst/crypto.c:575:
+			for (i=0; i<crypto_hash_digestsize(e->hash); ++i) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#610: FILE: drivers/block/dst/crypto.c:575:
+			for (i=0; i<crypto_hash_digestsize(e->hash); ++i) {
 			           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#610: FILE: drivers/block/dst/crypto.c:575:
+			for (i=0; i<crypto_hash_digestsize(e->hash); ++i) {
+				printk("%02x/%02x ", recv_hash[i], hash[i]);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#611: FILE: drivers/block/dst/crypto.c:576:
+				printk("%02x/%02x ", recv_hash[i], hash[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#614: FILE: drivers/block/dst/crypto.c:579:
+		printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: drivers/block/dst/crypto.c:609:
+	dprintk("%s: t: %p, gen: %llu, cipher: %p, hash: %p.\n",
+			__func__, t, t->gen, e->cipher, e->hash);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#660: FILE: drivers/block/dst/crypto.c:625:
+		return dst_trans_send(t);
+	} else {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#661: FILE: drivers/block/dst/crypto.c:626:
+		u8 *hash = e->data + e->size/2;
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: drivers/block/dst/crypto.c:653:
+	err = thread_pool_schedule(n->pool,
+		dst_trans_crypto_setup, dst_trans_crypto_action,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#725: FILE: drivers/block/dst/crypto.c:690:
+		u8 *hash = e->data + e->size/2;
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: drivers/block/dst/crypto.c:721:
+	err = thread_pool_schedule(n->pool,
+		dst_export_crypto_setup, dst_export_crypto_action,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#773: FILE: drivers/block/dst/dcore.c:1:
+/*

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#815: FILE: drivers/block/dst/dcore.c:43:
+static char dst_name[] = "Leontin's mountains: Ararat, Masis, Aragats";

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#835: FILE: drivers/block/dst/dcore.c:63:
+^I.name ^I^I= "dst",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#836: FILE: drivers/block/dst/dcore.c:64:
+^I.match ^I^I= &dst_dev_match,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#854: FILE: drivers/block/dst/dcore.c:82:
+^I.bus ^I^I= &dst_dev_bus_type,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#855: FILE: drivers/block/dst/dcore.c:83:
+^I.release ^I= &dst_node_release$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#891: FILE: drivers/block/dst/dcore.c:119:
+static int dst_bdev_open(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#899: FILE: drivers/block/dst/dcore.c:127:
+static int dst_bdev_release(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#907: FILE: drivers/block/dst/dcore.c:135:
+static struct block_device_operations dst_blk_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#937: FILE: drivers/block/dst/dcore.c:165:
+		printk(KERN_INFO "DST node %s attached read-only.\n", n->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: drivers/block/dst/dcore.c:199:
+static ssize_t dst_show_size(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: drivers/block/dst/dcore.c:211:
+static ssize_t dst_show_type(struct device *dev,
+		struct device_attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#996: FILE: drivers/block/dst/dcore.c:224:
+		struct sockaddr_in *sin = (struct sockaddr_in *)&addr;
+		return sprintf(buf, "%u.%u.%u.%u:%d\n",

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1000: FILE: drivers/block/dst/dcore.c:228:
+		struct sockaddr_in6 *sin = (struct sockaddr_in6 *)&addr;
+		return sprintf(buf,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1014: FILE: drivers/block/dst/dcore.c:242:
+		for (i=0; i<addrlen; ++i) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1014: FILE: drivers/block/dst/dcore.c:242:
+		for (i=0; i<addrlen; ++i) {
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1038: FILE: drivers/block/dst/dcore.c:266:
+	for (i=0; i<ARRAY_SIZE(dst_node_attrs); ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1038: FILE: drivers/block/dst/dcore.c:266:
+	for (i=0; i<ARRAY_SIZE(dst_node_attrs); ++i) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: drivers/block/dst/dcore.c:268:
+		err = device_create_file(&n->device,
+				&dst_node_attrs[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: drivers/block/dst/dcore.c:277:
+		device_remove_file(&n->device,
+				&dst_node_attrs[i]);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1058: FILE: drivers/block/dst/dcore.c:286:
+	for (i=0; i<ARRAY_SIZE(dst_node_attrs); ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1058: FILE: drivers/block/dst/dcore.c:286:
+	for (i=0; i<ARRAY_SIZE(dst_node_attrs); ++i)
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: drivers/block/dst/dcore.c:288:
+		device_remove_file(&n->device,
+				&dst_node_attrs[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1086: FILE: drivers/block/dst/dcore.c:314:
+		dprintk(KERN_ERR "Failed to register node '%s', err: %d.\n",
+				n->name, err);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1115: FILE: drivers/block/dst/dcore.c:343:
+	unsigned hash = dst_hash(n->name, sizeof(n->name));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: drivers/block/dst/dcore.c:414:
+	dprintk("%s: n: %p, refcnt: %d.\n",
+			__func__, n, atomic_read(&n->refcnt));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1212: FILE: drivers/block/dst/dcore.c:440:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1215: FILE: drivers/block/dst/dcore.c:443:
+	err = path_lookup(path, LOOKUP_FOLLOW, &nd);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1219: FILE: drivers/block/dst/dcore.c:447:
+	inode = nd.path.dentry->d_inode;
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1233: FILE: drivers/block/dst/dcore.c:461:
+	path_put(&nd.path);
 	          ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1243: FILE: drivers/block/dst/dcore.c:471:
+static int dst_setup_export(struct dst_node *n, struct dst_ctl *ctl,
+		struct dst_export_ctl *le)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1252: FILE: drivers/block/dst/dcore.c:480:
+	n->bdev = open_by_devnum(dev, FMODE_READ|FMODE_WRITE);
 	                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: drivers/block/dst/dcore.c:518:
+static struct dst_node *dst_alloc_node(struct dst_ctl *ctl,
+		int (*start)(struct dst_node *),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*n)...) over kzalloc(sizeof(struct dst_node)...)
#1296: FILE: drivers/block/dst/dcore.c:524:
+	n = kzalloc(sizeof(struct dst_node), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: drivers/block/dst/dcore.c:566:
+	n->pool = thread_pool_create(num, n->name, dst_thread_network_init,
+			dst_thread_network_cleanup, n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1392: FILE: drivers/block/dst/dcore.c:620:
+static int dst_add_remote(struct dst_node *n, struct dst_ctl *ctl,
+		void *data, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1424: FILE: drivers/block/dst/dcore.c:652:
+static int dst_add_export(struct dst_node *n, struct dst_ctl *ctl,
+		void *data, unsigned int size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1454: FILE: drivers/block/dst/dcore.c:682:
+	printk(KERN_INFO "STOPPED name: '%s', size: %llu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1455: FILE: drivers/block/dst/dcore.c:683:
+	printk(KERN_INFO "STOPPED name: '%s', size: %llu.\n",
+			n->name, n->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: drivers/block/dst/dcore.c:720:
+static int dst_del_node(struct dst_node *n, struct dst_ctl *ctl,
+		void *data, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: drivers/block/dst/dcore.c:732:
+static int dst_crypto_init(struct dst_node *n, struct dst_ctl *ctl,
+		void *data, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1525: FILE: drivers/block/dst/dcore.c:753:
+static int dst_security_init(struct dst_node *n, struct dst_ctl *ctl,
+		void *data, unsigned int size)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct dst_secure)...)
#1535: FILE: drivers/block/dst/dcore.c:763:
+	s = kmalloc(sizeof(struct dst_secure), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1552: FILE: drivers/block/dst/dcore.c:780:
+static int dst_start_node(struct dst_node *n, struct dst_ctl *ctl,
+		void *data, unsigned int size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1566: FILE: drivers/block/dst/dcore.c:794:
+	printk(KERN_INFO "STARTED name: '%s', size: %llu.\n", n->name, n->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1654: FILE: drivers/block/dst/dcore.c:882:
+	dst_hashtable = kcalloc(dst_hashtable_size, sizeof(struct list_head),
+			GFP_KERNEL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1658: FILE: drivers/block/dst/dcore.c:886:
+	for (i=0; i<dst_hashtable_size; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1658: FILE: drivers/block/dst/dcore.c:886:
+	for (i=0; i<dst_hashtable_size; ++i)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1669: FILE: drivers/block/dst/dcore.c:897:
+	for (i=0; i<dst_hashtable_size; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1669: FILE: drivers/block/dst/dcore.c:897:
+	for (i=0; i<dst_hashtable_size; ++i) {
 	           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1704: FILE: drivers/block/dst/dcore.c:932:
+	printk(KERN_INFO "Distributed storage, '%s' release.\n", dst_name);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207992.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 42 warnings, 46 checks, 1693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207992.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
