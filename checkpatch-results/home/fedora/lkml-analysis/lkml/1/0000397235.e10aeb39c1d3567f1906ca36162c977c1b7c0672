WARNING:REPEATED_WORD: Possible repeated word: 'when'
#49: 
when when set, returns the io virtual address that is 

WARNING:TYPO_SPELLING: 'vitual' may be misspelled - perhaps 'virtual'?
#53: 
Returning this io vitual address which is naturally 
                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: drivers/pci/intel-iommu.c:1774:
+__intel_alloc_iova(struct device *dev, struct dmar_domain *domain,
+		size_t size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/pci/intel-iommu.c:1807:
+	domain = get_domain_for_dev(pdev,
+			DEFAULT_DOMAIN_ADDRESS_WIDTH);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#223: FILE: drivers/pci/intel-iommu.c:1809:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#234: FILE: drivers/pci/intel-iommu.c:1818:
+			printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: drivers/pci/intel-iommu.c:1829:
+static dma_addr_t intel_map_single(struct device *hwdev, void *addr,
+	size_t size, int dir)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#254: FILE: drivers/pci/intel-iommu.c:1838:
+	BUG_ON(dir == DMA_NONE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: drivers/pci/intel-iommu.c:1871:
+	ret = domain_page_mapping(domain, start_addr,
+		((u64)addr) & PAGE_MASK_4K, size, prot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: drivers/pci/intel-iommu.c:1881:
+	ret = iommu_flush_iotlb_psi(domain->iommu, domain->id,
+			start_addr, size >> PAGE_SHIFT_4K, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: drivers/pci/intel-iommu.c:1896:
+static void intel_unmap_single(struct device *dev, dma_addr_t dev_addr,
 	size_t size, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: drivers/pci/intel-iommu.c:1916:
+	pr_debug("Device %s unmapping: %lx@%llx\n",
+		pci_name(pdev), size, (u64)start_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/pci/intel-iommu.c:1924:
+	if (iommu_flush_iotlb_psi(domain->iommu, domain->id, start_addr,
+			size >> PAGE_SHIFT_4K, 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#413: FILE: drivers/pci/intel-iommu.c:1965:
+#define SG_ENT_VIRT_ADDRESS(sg)	(page_address((sg)->page) + (sg)->offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/pci/intel-iommu.c:1998:
+	if (iommu_flush_iotlb_psi(domain->iommu, domain->id, start_addr,
+			size >> PAGE_SHIFT_4K, 0))

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#509: FILE: drivers/pci/intel-iommu.c:2058:
+	if (dir == DMA_TO_DEVICE || dir == DMA_BIDIRECTIONAL || \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: drivers/pci/intel-iommu.c:2072:
+		ret = domain_page_mapping(domain, start_addr + offset,
+			((u64)addr) & PAGE_MASK_4K,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: drivers/pci/intel-iommu.c:2077:
+			dma_pte_clear_range(domain, start_addr,
+				  start_addr + offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: drivers/pci/intel-iommu.c:2080:
+			dma_pte_free_pagetable(domain, start_addr,
+				  start_addr + offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: drivers/pci/intel-iommu.c:2093:
+	if (iommu_flush_iotlb_psi(domain->iommu, domain->id,
+			start_addr, offset >> PAGE_SHIFT_4K, 1))

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#563: FILE: drivers/pci/iova.c:61:
+/* Computes the padding size required, to make the
+ * the start address naturally aligned on its size

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: drivers/pci/iova.c:76:
+static int __alloc_iova_range(struct iova_domain *iovad, unsigned long size,
+		unsigned long limit_pfn, struct iova *new, bool size_aligned)

CHECK:BRACES: Unbalanced braces around else statement
#596: FILE: drivers/pci/iova.c:93:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#652: FILE: drivers/pci/iova.c:168:
+	/* If size aligned is set then round the size to
+	 * to next power of two.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/pci/iova.c:175:
+	ret = __alloc_iova_range(iovad, size, limit_pfn, new_iova,
+			size_aligned);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 17 checks, 572 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
