WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# cat /debug/tracing/profile_unlikely | \

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
 correct  incorrect       Function                      File              Line

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# cat /debug/tracing/profile_likely | \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#206: FILE: include/linux/compiler.h:66:
+	unsigned line;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#210: FILE: include/linux/compiler.h:70:
+};
+void ftrace_likely_update(struct ftrace_likely_data *f, int val, int expect);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#218: FILE: include/linux/compiler.h:78:
+				__attribute__((__aligned__(4)))		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_likely") over __attribute__((section("_ftrace_likely")))
#219: FILE: include/linux/compiler.h:79:
+				__attribute__((section("_ftrace_likely"))) \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#233: FILE: include/linux/compiler.h:93:
+				__attribute__((__aligned__(4)))		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_unlikely") over __attribute__((section("_ftrace_unlikely")))
#234: FILE: include/linux/compiler.h:94:
+				__attribute__((section("_ftrace_unlikely"))) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#252: FILE: include/linux/compiler.h:112:
+#  define likely(x)	(__builtin_constant_p(x) ? !!(x) : likely_check(x))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#255: FILE: include/linux/compiler.h:115:
+#  define unlikely(x)	(__builtin_constant_p(x) ? !!(x) : unlikely_check(x))

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#277: FILE: kernel/trace/Kconfig:146:
+	  This tracer profiles all the the likely and unlikely macros

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#296: FILE: kernel/trace/trace_unlikely.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPLIT_STRING: quoted string split across lines
#369: FILE: kernel/trace/trace_unlikely.c:74:
+		seq_printf(m, " correct  incorrect"
+			      "       Function                 "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#370: FILE: kernel/trace/trace_unlikely.c:75:
+			      "       Function                 "
+			      "     File              Line\n"

WARNING:SPLIT_STRING: quoted string split across lines
#372: FILE: kernel/trace/trace_unlikely.c:77:
+			      " -------  ---------"
+			      "       --------                 "

WARNING:SPLIT_STRING: quoted string split across lines
#373: FILE: kernel/trace/trace_unlikely.c:78:
+			      "       --------                 "
+			      "     ----              ----\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#388: FILE: kernel/trace/trace_unlikely.c:93:
+static struct seq_operations tracing_likely_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: kernel/trace/trace_unlikely.c:107:
+		struct seq_file *m = file->private_data;
+		m->private = (void *)inode->i_private;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#408: FILE: kernel/trace/trace_unlikely.c:113:
+static struct file_operations tracing_likely_fops = {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#414: FILE: kernel/trace/trace_unlikely.c:119:
+extern unsigned long __start_likely_profile[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#415: FILE: kernel/trace/trace_unlikely.c:120:
+extern unsigned long __stop_likely_profile[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#416: FILE: kernel/trace/trace_unlikely.c:121:
+extern unsigned long __start_unlikely_profile[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#417: FILE: kernel/trace/trace_unlikely.c:122:
+extern unsigned long __stop_unlikely_profile[];

WARNING:SPLIT_STRING: quoted string split across lines
#447: FILE: kernel/trace/trace_unlikely.c:152:
+		pr_warning("Could not create debugfs"
+			   " 'profile_unlikely' entry\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000210747.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 3 checks, 292 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000210747.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
