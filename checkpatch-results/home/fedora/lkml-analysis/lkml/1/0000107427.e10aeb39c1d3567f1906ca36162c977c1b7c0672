WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
  the weight of the cgroup task/page belongs to. So if there are two processes

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#85: FILE: block/elevator-fq.c:25:
+int elv_async_slice_idle = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#94: FILE: block/elevator-fq.c:2813:
+EXPORT_SYMBOL(elv_async_slice_idle_show);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#103: FILE: block/elevator-fq.c:2841:
+EXPORT_SYMBOL(elv_async_slice_idle_store);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#113: FILE: block/elevator-fq.c:3016:
+	if (!elv_ioq_class_idle(ioq) && (is_sync || efqd->fairness))
+			elv_mark_ioq_idle_window(ioq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: block/elevator-fq.c:3652:
+	if ((elv_ioq_sync(ioq) && !efqd->elv_slice_idle) ||
+			!elv_ioq_idle_window(ioq))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#164: FILE: block/elevator-fq.c:3865:
+	if (efqd->fairness && efqd->elv_async_slice_idle && !elv_ioq_sync(ioq)
+	    && elv_ioq_nr_dispatched(ioq)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#178: FILE: block/elevator-fq.c:4070:
+		if (efqd->fairness && !elv_ioq_sync(ioq) && !ioq->nr_queued
+		    && (elv_iog_nr_active(iog) <= 1)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: block/elevator-fq.h:690:
+extern ssize_t elv_async_slice_idle_show(struct elevator_queue *q, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: block/elevator-fq.h:691:
+extern ssize_t elv_async_slice_idle_store(struct elevator_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: block/elevator-fq.h:692:
+extern ssize_t elv_async_slice_idle_store(struct elevator_queue *q,
+					const char *name, size_t count);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107427.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 4 warnings, 6 checks, 127 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107427.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
