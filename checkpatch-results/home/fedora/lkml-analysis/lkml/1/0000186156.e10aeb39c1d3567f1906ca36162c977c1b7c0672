WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#31: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: fs/squashfs/cache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#53: FILE: fs/squashfs/cache.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#54: FILE: fs/squashfs/cache.c:19:
+ * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.$

WARNING:TYPO_SPELLING: 'isssues' may be misspelled - perhaps 'issues'?
#67: FILE: fs/squashfs/cache.c:32:
+ * To avoid out of memory and fragmentation isssues with vmalloc the cache
                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'as'
#73: FILE: fs/squashfs/cache.c:38:
+ * which have been read as as a result of a metadata (i.e. inode or

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: fs/squashfs/cache.c:67:
+struct squashfs_cache_entry *squashfs_cache_get(struct super_block *sb,
+	struct squashfs_cache *cache, u64 block, int length)

WARNING:TYPO_SPELLING: 'choosen' may be misspelled - perhaps 'chosen'?
#144: FILE: fs/squashfs/cache.c:109:
+			 * Initialise choosen cache entry, and fill it in from
 			              ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/squashfs/cache.c:121:
+			entry->length = squashfs_read_data(sb, entry->data,
+				block, length, &entry->next_index,

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: fs/squashfs/cache.c:136:
+			if (entry->num_waiters) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#174: FILE: fs/squashfs/cache.c:139:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#195: FILE: fs/squashfs/cache.c:160:
+		if (entry->pending) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#199: FILE: fs/squashfs/cache.c:164:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: fs/squashfs/cache.c:172:
+	TRACE("Got %s %d, start block %lld, refcount %d, error %d\n",
+		cache->name, i, entry->block, entry->refcount, entry->error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: fs/squashfs/cache.c:176:
+		ERROR("Unable to read %s cache entry [%llx]\n", cache->name,
+							block);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: fs/squashfs/cache.c:180:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cache"
#247: FILE: fs/squashfs/cache.c:212:
+	if (cache == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#262: FILE: fs/squashfs/cache.c:227:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: fs/squashfs/cache.c:234:
+struct squashfs_cache *squashfs_cache_init(char *name, int entries,
+	int block_size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cache"
#274: FILE: fs/squashfs/cache.c:239:
+	if (cache == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cache->entry
#279: FILE: fs/squashfs/cache.c:244:
+	cache->entry = kcalloc(entries, sizeof(*(cache->entry)), GFP_KERNEL);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cache->entry"
#280: FILE: fs/squashfs/cache.c:245:
+	if (cache->entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->data"
#302: FILE: fs/squashfs/cache.c:267:
+		if (entry->data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->data[j]"
#309: FILE: fs/squashfs/cache.c:274:
+			if (entry->data[j] == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: fs/squashfs/cache.c:288:
+
+

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#325: FILE: fs/squashfs/cache.c:290:
+ * Copy upto length bytes from cache entry to buffer starting at offset bytes
         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: fs/squashfs/cache.c:295:
+int squashfs_copy_data(void *buffer, struct squashfs_cache_entry *entry,
+		int offset, int length)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#336: FILE: fs/squashfs/cache.c:301:
+	else if (buffer == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#360: FILE: fs/squashfs/cache.c:325:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: fs/squashfs/cache.c:333:
+int squashfs_read_metadata(struct super_block *sb, void *buffer,
+		u64 *block, int *offset, int length)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'squashfs_read_metadata', this function's name, in a string
#374: FILE: fs/squashfs/cache.c:339:
+	TRACE("Entered squashfs_read_metadata [%llx:%x]\n", *block, *offset);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#400: FILE: fs/squashfs/cache.c:365:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: fs/squashfs/cache.c:371:
+struct squashfs_cache_entry *squashfs_get_fragment(struct super_block *sb,
+				u64 start_block, int length)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: fs/squashfs/cache.c:379:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: fs/squashfs/cache.c:386:
+struct squashfs_cache_entry *squashfs_get_datablock(struct super_block *sb,
+				u64 start_block, int length)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#428: FILE: fs/squashfs/cache.c:393:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: fs/squashfs/cache.c:398:
+int squashfs_read_table(struct super_block *sb, void *buffer, u64 block,
+	int length)

WARNING:LINE_SPACING: Missing a blank line after declarations
#438: FILE: fs/squashfs/cache.c:403:
+	void **data = kcalloc(pages, sizeof(void *), GFP_KERNEL);
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#438: FILE: fs/squashfs/cache.c:403:
+	if (data == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 29 checks, 412 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
