WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#82: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: arch/i386/kernel/msr.c:110:
+int msr_read(int cpu, u32 reg, u32 * eax, u32 * edx)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: arch/i386/kernel/msr.c:110:
+int msr_read(int cpu, u32 reg, u32 * eax, u32 * edx)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#165: FILE: arch/i386/kernel/msr.c:146:
+EXPORT_SYMBOL_GPL(msr_write);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: arch/i386/kernel/msr.c:167:
+static ssize_t msr_fread(struct file *file, char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: arch/i386/kernel/msr.c:168:
+static ssize_t msr_fread(struct file *file, char __user * buf,
 			size_t count, loff_t * ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: arch/i386/kernel/msr.c:192:
+static ssize_t msr_fwrite(struct file *file, const char __user *buf,
 			 size_t count, loff_t *ppos)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#240: FILE: drivers/hwmon/Kconfig:170:
+config SENSORS_CORETEMP
+	tristate "Intel Core (2) Duo/Solo temperature sensor"
+	depends on HWMON && X86 && EXPERIMENTAL
+	select X86_MSR
+	help
+	  If you say yes here you get support for the temperature
+	  sensor inside your CPU. Supported all are all known variants
+	  of Intel Core family.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#270: FILE: drivers/hwmon/coretemp.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#288: FILE: drivers/hwmon/coretemp.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#289: FILE: drivers/hwmon/coretemp.c:20:
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#310: FILE: drivers/hwmon/coretemp.c:41:
+typedef enum { SHOW_TEMP, SHOW_TJMAX, SHOW_LABEL, SHOW_NAME } SHOW;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#320: FILE: drivers/hwmon/coretemp.c:51:
+	struct mutex update_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#337: FILE: drivers/hwmon/coretemp.c:68:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: drivers/hwmon/coretemp.c:96:
+	struct coretemp_data *data = coretemp_update_device(dev);
+	return sprintf(buf, "%d\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#370: FILE: drivers/hwmon/coretemp.c:101:
+static SENSOR_DEVICE_ATTR(temp1_input, S_IRUGO, show_temp, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#372: FILE: drivers/hwmon/coretemp.c:103:
+static SENSOR_DEVICE_ATTR(temp1_crit, S_IRUGO, show_temp, NULL,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarm' to 'temp1_crit_alarm_show'
#374: FILE: drivers/hwmon/coretemp.c:105:
+static DEVICE_ATTR(temp1_crit_alarm, S_IRUGO, show_alarm, NULL);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#374: FILE: drivers/hwmon/coretemp.c:105:
+static DEVICE_ATTR(temp1_crit_alarm, S_IRUGO, show_alarm, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#375: FILE: drivers/hwmon/coretemp.c:106:
+static SENSOR_DEVICE_ATTR(temp1_label, S_IRUGO, show_name, NULL, SHOW_LABEL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#376: FILE: drivers/hwmon/coretemp.c:107:
+static SENSOR_DEVICE_ATTR(name, S_IRUGO, show_name, NULL, SHOW_NAME);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#417: FILE: drivers/hwmon/coretemp.c:148:
+static int __devinit coretemp_probe(struct platform_device *pdev)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#424: FILE: drivers/hwmon/coretemp.c:155:
+	if (!(data = kzalloc(sizeof(struct coretemp_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*data)...) over kzalloc(sizeof(struct coretemp_data)...)
#424: FILE: drivers/hwmon/coretemp.c:155:
+	if (!(data = kzalloc(sizeof(struct coretemp_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited before that close parenthesis ')'
#439: FILE: drivers/hwmon/coretemp.c:170:
+	if (((c->x86_model == 0xf) && (c->x86_mask > 3 )) ||

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model == 0xf'
#439: FILE: drivers/hwmon/coretemp.c:170:
+	if (((c->x86_model == 0xf) && (c->x86_mask > 3 )) ||
+		(c->x86_model == 0xe))  {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_mask > 3'
#439: FILE: drivers/hwmon/coretemp.c:170:
+	if (((c->x86_model == 0xf) && (c->x86_mask > 3 )) ||
+		(c->x86_model == 0xe))  {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model == 0xe'
#439: FILE: drivers/hwmon/coretemp.c:170:
+	if (((c->x86_model == 0xf) && (c->x86_mask > 3 )) ||
+		(c->x86_model == 0xe))  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: drivers/hwmon/coretemp.c:171:
+	if (((c->x86_model == 0xf) && (c->x86_mask > 3 )) ||
+		(c->x86_model == 0xe))  {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#441: FILE: drivers/hwmon/coretemp.c:172:
+		(c->x86_model == 0xe))  {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#462: FILE: drivers/hwmon/coretemp.c:193:
+	if ((err = sysfs_create_group(&pdev->dev.kobj, &coretemp_group)))

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#483: FILE: drivers/hwmon/coretemp.c:214:
+static int __devexit coretemp_remove(struct platform_device *pdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#521: FILE: drivers/hwmon/coretemp.c:252:
+		printk(KERN_ERR DRVNAME ": Device allocation failed\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#524: FILE: drivers/hwmon/coretemp.c:255:
+
+	}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pdev_entry)...) over kzalloc(sizeof(struct pdev_entry)...)
#526: FILE: drivers/hwmon/coretemp.c:257:
+	pdev_entry = kzalloc(sizeof(struct pdev_entry), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#536: FILE: drivers/hwmon/coretemp.c:267:
+		printk(KERN_ERR DRVNAME ": Device addition failed (%d)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: drivers/hwmon/coretemp.c:292:
+	struct pdev_entry *p, *n;
+	mutex_lock(&pdev_list_mutex);

CHECK:SPACING: No space is necessary after a cast
#575: FILE: drivers/hwmon/coretemp.c:306:
+	unsigned int cpu = (unsigned long) hcpu;

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after coretemp_cpu_notifier
#588: FILE: drivers/hwmon/coretemp.c:319:
+static struct notifier_block __cpuinitdata coretemp_cpu_notifier = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->cpuid_level < 0'
#609: FILE: drivers/hwmon/coretemp.c:340:
+		if ((c->cpuid_level < 0) || (c->x86 != 0x6) ||
+		    !((c->x86_model == 0xe) || (c->x86_model == 0xf))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 != 0x6'
#609: FILE: drivers/hwmon/coretemp.c:340:
+		if ((c->cpuid_level < 0) || (c->x86 != 0x6) ||
+		    !((c->x86_model == 0xe) || (c->x86_model == 0xf))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model == 0xe'
#609: FILE: drivers/hwmon/coretemp.c:340:
+		if ((c->cpuid_level < 0) || (c->x86 != 0x6) ||
+		    !((c->x86_model == 0xe) || (c->x86_model == 0xf))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model == 0xf'
#609: FILE: drivers/hwmon/coretemp.c:340:
+		if ((c->cpuid_level < 0) || (c->x86 != 0x6) ||
+		    !((c->x86_model == 0xe) || (c->x86_model == 0xf))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#611: FILE: drivers/hwmon/coretemp.c:342:
+		    !((c->x86_model == 0xe) || (c->x86_model == 0xf))) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#613: FILE: drivers/hwmon/coretemp.c:344:
+			/* supported CPU not found, but report the unknown
+			   family 6 CPU */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#613: FILE: drivers/hwmon/coretemp.c:344:
+			   family 6 CPU */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 == 0x6'
#614: FILE: drivers/hwmon/coretemp.c:345:
+			if ((c->x86 == 0x6) && (c->x86_model > 0xf))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model > 0xf'
#614: FILE: drivers/hwmon/coretemp.c:345:
+			if ((c->x86 == 0x6) && (c->x86_model > 0xf))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#615: FILE: drivers/hwmon/coretemp.c:346:
+				printk(KERN_WARNING DRVNAME ": Unknown CPU, please"

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: drivers/hwmon/coretemp.c:347:
+ ^I^I^I   " report to the lm-sensors@lm-sensors.org\n");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#616: FILE: drivers/hwmon/coretemp.c:347:
+ ^I^I^I   " report to the lm-sensors@lm-sensors.org\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: drivers/hwmon/coretemp.c:347:
+ ^I^I^I   " report to the lm-sensors@lm-sensors.org\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#616: FILE: drivers/hwmon/coretemp.c:347:
+				printk(KERN_WARNING DRVNAME ": Unknown CPU, please"
+ 			   " report to the lm-sensors@lm-sensors.org\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000455851.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 24 warnings, 20 checks, 572 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000455851.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
