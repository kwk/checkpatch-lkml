WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
Gitweb:     http://git.kernel.org/tip/8ce998d6693bd02ab3b74ee1cc303ecb1fa9b514

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#55: 
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reldata' - possible side-effects?
#78: FILE: Documentation/perf_counter/util/symbol.c:261:
+#define elf_section__for_each_rel(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrel(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrel(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#78: FILE: Documentation/perf_counter/util/symbol.c:261:
+#define elf_section__for_each_rel(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrel(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrel(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos_mem' - possible side-effects?
#78: FILE: Documentation/perf_counter/util/symbol.c:261:
+#define elf_section__for_each_rel(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrel(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrel(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos_mem' may be better as '(pos_mem)' to avoid precedence issues
#78: FILE: Documentation/perf_counter/util/symbol.c:261:
+#define elf_section__for_each_rel(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrel(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrel(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#78: FILE: Documentation/perf_counter/util/symbol.c:261:
+#define elf_section__for_each_rel(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrel(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrel(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr_entries' may be better as '(nr_entries)' to avoid precedence issues
#78: FILE: Documentation/perf_counter/util/symbol.c:261:
+#define elf_section__for_each_rel(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrel(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrel(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reldata' - possible side-effects?
#83: FILE: Documentation/perf_counter/util/symbol.c:266:
+#define elf_section__for_each_rela(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrela(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrela(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#83: FILE: Documentation/perf_counter/util/symbol.c:266:
+#define elf_section__for_each_rela(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrela(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrela(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos_mem' - possible side-effects?
#83: FILE: Documentation/perf_counter/util/symbol.c:266:
+#define elf_section__for_each_rela(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrela(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrela(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos_mem' may be better as '(pos_mem)' to avoid precedence issues
#83: FILE: Documentation/perf_counter/util/symbol.c:266:
+#define elf_section__for_each_rela(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrela(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrela(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#83: FILE: Documentation/perf_counter/util/symbol.c:266:
+#define elf_section__for_each_rela(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrela(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrela(reldata, idx, &pos_mem))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr_entries' may be better as '(nr_entries)' to avoid precedence issues
#83: FILE: Documentation/perf_counter/util/symbol.c:266:
+#define elf_section__for_each_rela(reldata, pos, pos_mem, idx, nr_entries) \
+	for (idx = 0, pos = gelf_getrela(reldata, 0, &pos_mem); \
+	     idx < nr_entries; \
+	     ++idx, pos = gelf_getrela(reldata, idx, &pos_mem))

CHECK:CAMELCASE: Avoid CamelCase: <Elf>
#88: FILE: Documentation/perf_counter/util/symbol.c:271:
+static int dso__synthesize_plt_symbols(struct  dso *self, Elf *elf,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Ehdr>
#89: FILE: Documentation/perf_counter/util/symbol.c:272:
+				       GElf_Ehdr *ehdr, Elf_Scn *scn_dynsym,

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Scn>
#89: FILE: Documentation/perf_counter/util/symbol.c:272:
+				       GElf_Ehdr *ehdr, Elf_Scn *scn_dynsym,

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Shdr>
#90: FILE: Documentation/perf_counter/util/symbol.c:273:
+				       GElf_Shdr *shdr_dynsym,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#93: FILE: Documentation/perf_counter/util/symbol.c:276:
+	uint32_t nr_rel_entries, idx;

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Sym>
#94: FILE: Documentation/perf_counter/util/symbol.c:277:
+	GElf_Sym sym;

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Data>
#99: FILE: Documentation/perf_counter/util/symbol.c:282:
+	Elf_Data *reldata, *syms, *symstrs;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scn_plt_rel"
#106: FILE: Documentation/perf_counter/util/symbol.c:289:
+	if (scn_plt_rel == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scn_plt_rel"
#109: FILE: Documentation/perf_counter/util/symbol.c:292:
+		if (scn_plt_rel == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!elf_section_by_name"
#116: FILE: Documentation/perf_counter/util/symbol.c:299:
+	if (elf_section_by_name(elf, ehdr, &shdr_plt, ".plt", NULL) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reldata"
#124: FILE: Documentation/perf_counter/util/symbol.c:307:
+	if (reldata == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!syms"
#128: FILE: Documentation/perf_counter/util/symbol.c:311:
+	if (syms == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scn_symstrs"
#132: FILE: Documentation/perf_counter/util/symbol.c:315:
+	if (scn_symstrs == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symstrs"
#136: FILE: Documentation/perf_counter/util/symbol.c:319:
+	if (symstrs == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Rela>
#143: FILE: Documentation/perf_counter/util/symbol.c:326:
+		GElf_Rela pos_mem, *pos;

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Rel>
#162: FILE: Documentation/perf_counter/util/symbol.c:345:
+		GElf_Rel pos_mem, *pos;

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: Documentation/perf_counter/util/symbol.c:346:
+		GElf_Rel pos_mem, *pos;
+		elf_section__for_each_rel(reldata, pos, pos_mem, idx,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sec_dynsym"
#214: FILE: Documentation/perf_counter/util/symbol.c:407:
+	if (sec_dynsym != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec"
#229: FILE: Documentation/perf_counter/util/symbol.c:420:
+	if (sec == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec_dynsym"
#230: FILE: Documentation/perf_counter/util/symbol.c:421:
+		if (sec_dynsym == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000116469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 31 checks, 164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000116469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
