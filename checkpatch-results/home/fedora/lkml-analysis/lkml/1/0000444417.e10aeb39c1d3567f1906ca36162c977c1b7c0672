WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: fs/union.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#76: FILE: fs/union.c:4:
+ * Copyright © 2004-2007 IBM Corporation
              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: fs/union.c:15:
+struct union_info * union_alloc(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: fs/union.c:30:
+struct union_info * union_get(struct union_info *info)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: fs/union.c:32:
+	BUG_ON(!info);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#105: FILE: fs/union.c:33:
+	BUG_ON(!atomic_read(&info->u_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: fs/union.c:42:
+	BUG_ON(!info);

WARNING:RETURN_VOID: void function return statements are not generally useful
#125: FILE: fs/union.c:53:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: include/linux/dcache_union.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#159: FILE: include/linux/dcache_union.h:4:
+ * Copyright © 2004-2007 IBM Corporation
              ^

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#174: FILE: include/linux/dcache_union.h:19:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'modifing' may be misspelled - perhaps 'modifying'?
#185: FILE: include/linux/dcache_union.h:30:
+ * or modifing the union stack !
       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#191: FILE: include/linux/dcache_union.h:36:
+	struct mutex u_mutex;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/dcache_union.h:40:
+extern struct union_info *union_alloc(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/dcache_union.h:41:
+extern struct union_info *union_get(struct union_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct union_info *' should also have an identifier name
#196: FILE: include/linux/dcache_union.h:41:
+extern struct union_info *union_get(struct union_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: include/linux/dcache_union.h:42:
+extern void union_put(struct union_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct union_info *' should also have an identifier name
#197: FILE: include/linux/dcache_union.h:42:
+extern void union_put(struct union_info *);

WARNING:TYPO_SPELLING: 'savely' may be misspelled - perhaps 'safely'?
#205: FILE: include/linux/dcache_union.h:50:
+ *   you CAN savely give up and reacquire again)
              ^^^^^^

WARNING:TYPO_SPELLING: 'savely' may be misspelled - perhaps 'safely'?
#207: FILE: include/linux/dcache_union.h:52:
+ *   you CAN savely give up and reacquire again)
              ^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: include/linux/dcache_union.h:59:
+	BUG_ON(!atomic_read(&uinfo->u_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: include/linux/dcache_union.h:77:
+	BUG_ON(!atomic_read(&uinfo->u_count));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#253: FILE: include/linux/dcache_union.h:98:
+static inline struct union_info *union_alloc2(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: include/linux/dcache_union.h:116:
+static inline struct union_info *union_get2(struct dentry * dentry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: include/linux/dcache_union.h:145:
+		BUG_ON(!atomic_read(&dentry->d_union->u_count));

WARNING:INDENTED_LABEL: labels should not be indented
#365: FILE: include/linux/dcache_union.h:210:
+	loop3:

WARNING:INDENTED_LABEL: labels should not be indented
#367: FILE: include/linux/dcache_union.h:212:
+	loop2:

WARNING:INDENTED_LABEL: labels should not be indented
#369: FILE: include/linux/dcache_union.h:214:
+	loop1:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: include/linux/dcache_union.h:221:
+	BUG_ON(!fs);

WARNING:RETURN_VOID: void function return statements are not generally useful
#378: FILE: include/linux/dcache_union.h:223:
+	return;
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dentry' - possible side-effects?
#380: FILE: include/linux/dcache_union.h:225:
+#define IS_UNION(dentry) ((dentry)->d_overlaid || (dentry)->d_topmost || \
+				(dentry)->d_overlaid)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: include/linux/dcache_union.h:237:
+#define union_alloc2(x) ({ BUG(); (0); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: include/linux/dcache_union.h:238:
+#define union_get2(x) ({ BUG(); (0); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: include/linux/dcache_union.h:239:
+#define union_release(x) do { BUG(); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#394: FILE: include/linux/dcache_union.h:239:
+#define union_release(x) do { BUG(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444417.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 24 warnings, 7 checks, 338 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444417.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
