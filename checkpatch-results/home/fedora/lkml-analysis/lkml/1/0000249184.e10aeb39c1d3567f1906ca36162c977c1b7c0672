WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#69: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#78: FILE: drivers/isdn/mISDN/Kconfig:5:
+menuconfig MISDN
+	tristate "Modular ISDN driver"
+	help
+	  Enable support for the modular ISDN driver.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: drivers/isdn/mISDN/core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#129: FILE: drivers/isdn/mISDN/core.c:26:
+module_param(debug, uint, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <Bprotocols>
#136: FILE: drivers/isdn/mISDN/core.c:33:
+static LIST_HEAD(Bprotocols);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <mISDNdevice>
#139: FILE: drivers/isdn/mISDN/core.c:36:
+struct mISDNdevice

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_register_device>
#179: FILE: drivers/isdn/mISDN/core.c:76:
+mISDN_register_device(struct mISDNdevice *dev, char *name)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#192: FILE: drivers/isdn/mISDN/core.c:89:
+		printk(KERN_DEBUG "mISDN_register %s %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/isdn/mISDN/core.c:90:
+		printk(KERN_DEBUG "mISDN_register %s %d\n",
+			dev->name, dev->id);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#204: FILE: drivers/isdn/mISDN/core.c:101:
+void
+mISDN_unregister_device(struct mISDNdevice *dev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_unregister_device>
#205: FILE: drivers/isdn/mISDN/core.c:102:
+mISDN_unregister_device(struct mISDNdevice *dev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#209: FILE: drivers/isdn/mISDN/core.c:106:
+		printk(KERN_DEBUG "mISDN_unregister %s %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/isdn/mISDN/core.c:107:
+		printk(KERN_DEBUG "mISDN_unregister %s %d\n",
+			dev->name, dev->id);

CHECK:CAMELCASE: Avoid CamelCase: <get_all_Bprotocols>
#220: FILE: drivers/isdn/mISDN/core.c:117:
+get_all_Bprotocols(void)

CHECK:CAMELCASE: Avoid CamelCase: <Bprotocol>
#222: FILE: drivers/isdn/mISDN/core.c:119:
+	struct Bprotocol	*bp;

CHECK:CAMELCASE: Avoid CamelCase: <get_Bprotocol4mask>
#233: FILE: drivers/isdn/mISDN/core.c:130:
+get_Bprotocol4mask(u_int m)

CHECK:CAMELCASE: Avoid CamelCase: <get_Bprotocol4id>
#248: FILE: drivers/isdn/mISDN/core.c:145:
+get_Bprotocol4id(u_int id)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#253: FILE: drivers/isdn/mISDN/core.c:150:
+		printk(KERN_WARNING "%s id not in range  %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/isdn/mISDN/core.c:151:
+		printk(KERN_WARNING "%s id not in range  %d\n",
+		    __func__, id);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_register_Bprotocol>
#262: FILE: drivers/isdn/mISDN/core.c:159:
+mISDN_register_Bprotocol(struct Bprotocol *bp)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#268: FILE: drivers/isdn/mISDN/core.c:165:
+		printk(KERN_DEBUG "%s: %s/%x\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: drivers/isdn/mISDN/core.c:166:
+		printk(KERN_DEBUG "%s: %s/%x\n", __func__,
+		    bp->name, bp->Bprotocols);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#272: FILE: drivers/isdn/mISDN/core.c:169:
+		printk(KERN_WARNING

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_unregister_Bprotocol>
#285: FILE: drivers/isdn/mISDN/core.c:182:
+mISDN_unregister_Bprotocol(struct Bprotocol *bp)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#290: FILE: drivers/isdn/mISDN/core.c:187:
+		printk(KERN_DEBUG "%s: %s/%x\n", __func__, bp->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/isdn/mISDN/core.c:188:
+		printk(KERN_DEBUG "%s: %s/%x\n", __func__, bp->name,
+			bp->Bprotocols);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNInit>
#299: FILE: drivers/isdn/mISDN/core.c:196:
+mISDNInit(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#303: FILE: drivers/isdn/mISDN/core.c:200:
+	printk(KERN_INFO "Modular ISDN core version %d.%d.%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/isdn/mISDN/core.c:201:
+	printk(KERN_INFO "Modular ISDN core version %d.%d.%d\n",
+		MISDN_MAJOR_VERSION, MISDN_MINOR_VERSION, MISDN_RELEASE);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initstack>
#305: FILE: drivers/isdn/mISDN/core.c:202:
+	mISDN_initstack(&debug);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_inittimer>
#306: FILE: drivers/isdn/mISDN/core.c:203:
+	err = mISDN_inittimer(&debug);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_timer_cleanup>
#311: FILE: drivers/isdn/mISDN/core.c:208:
+		mISDN_timer_cleanup();

CHECK:CAMELCASE: Avoid CamelCase: <Isdnl2_Init>
#314: FILE: drivers/isdn/mISDN/core.c:211:
+	err = Isdnl2_Init(&debug);

CHECK:CAMELCASE: Avoid CamelCase: <Isdnl2_cleanup>
#324: FILE: drivers/isdn/mISDN/core.c:221:
+		Isdnl2_cleanup();

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_cleanup>
#330: FILE: drivers/isdn/mISDN/core.c:227:
+void mISDN_cleanup(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#338: FILE: drivers/isdn/mISDN/core.c:235:
+		printk(KERN_ERR "%s devices still registered\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#341: FILE: drivers/isdn/mISDN/core.c:238:
+		printk(KERN_ERR "%s Bprotocols still registered\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#342: FILE: drivers/isdn/mISDN/core.c:239:
+	printk(KERN_DEBUG "mISDNcore unloaded\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#354: FILE: drivers/isdn/mISDN/core.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_CORE_H>
#368: FILE: drivers/isdn/mISDN/core.h:15:
+#ifndef mISDN_CORE_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#371: FILE: drivers/isdn/mISDN/core.h:18:
+extern struct mISDNdevice	*get_mdevice(u_int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#371: FILE: drivers/isdn/mISDN/core.h:18:
+extern struct mISDNdevice	*get_mdevice(u_int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#372: FILE: drivers/isdn/mISDN/core.h:19:
+extern int			get_mdevice_count(void);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_ACTION_MASK>
#375: FILE: drivers/isdn/mISDN/core.h:22:
+#define mISDN_STACK_ACTION_MASK		0x0000ffff

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_COMMAND_MASK>
#376: FILE: drivers/isdn/mISDN/core.h:23:
+#define mISDN_STACK_COMMAND_MASK	0x000f0000

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_STATUS_MASK>
#377: FILE: drivers/isdn/mISDN/core.h:24:
+#define mISDN_STACK_STATUS_MASK		0xfff00000

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_WORK>
#379: FILE: drivers/isdn/mISDN/core.h:26:
+#define mISDN_STACK_WORK	0

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_SETUP>
#380: FILE: drivers/isdn/mISDN/core.h:27:
+#define mISDN_STACK_SETUP	1

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_CLEARING>
#381: FILE: drivers/isdn/mISDN/core.h:28:
+#define mISDN_STACK_CLEARING	2

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_RESTART>
#382: FILE: drivers/isdn/mISDN/core.h:29:
+#define mISDN_STACK_RESTART	3

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_WAKEUP>
#383: FILE: drivers/isdn/mISDN/core.h:30:
+#define mISDN_STACK_WAKEUP	4

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_ABORT>
#384: FILE: drivers/isdn/mISDN/core.h:31:
+#define mISDN_STACK_ABORT	15

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_STOPPED>
#386: FILE: drivers/isdn/mISDN/core.h:33:
+#define mISDN_STACK_STOPPED	16

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_INIT>
#387: FILE: drivers/isdn/mISDN/core.h:34:
+#define mISDN_STACK_INIT	17

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_THREADSTART>
#388: FILE: drivers/isdn/mISDN/core.h:35:
+#define mISDN_STACK_THREADSTART	18

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_BCHANNEL>
#390: FILE: drivers/isdn/mISDN/core.h:37:
+#define mISDN_STACK_BCHANNEL	20

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_ACTIVE>
#391: FILE: drivers/isdn/mISDN/core.h:38:
+#define mISDN_STACK_ACTIVE      29

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_RUNNING>
#392: FILE: drivers/isdn/mISDN/core.h:39:
+#define mISDN_STACK_RUNNING     30

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_STACK_KILLED>
#393: FILE: drivers/isdn/mISDN/core.h:40:
+#define mISDN_STACK_KILLED      31

CHECK:LINE_SPACING: Please don't use multiple blank lines
#395: FILE: drivers/isdn/mISDN/core.h:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <connect_Bstack>
#400: FILE: drivers/isdn/mISDN/core.h:47:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,

CHECK:CAMELCASE: Avoid CamelCase: <mISDNchannel>
#400: FILE: drivers/isdn/mISDN/core.h:47:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: drivers/isdn/mISDN/core.h:47:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNdevice *' should also have an identifier name
#400: FILE: drivers/isdn/mISDN/core.h:47:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#400: FILE: drivers/isdn/mISDN/core.h:47:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#400: FILE: drivers/isdn/mISDN/core.h:47:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sockaddr_mISDN *' should also have an identifier name
#400: FILE: drivers/isdn/mISDN/core.h:47:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/isdn/mISDN/core.h:48:
+extern int	connect_Bstack(struct mISDNdevice *, struct mISDNchannel *,
+			u_int, struct sockaddr_mISDN *);

CHECK:CAMELCASE: Avoid CamelCase: <sockaddr_mISDN>
#401: FILE: drivers/isdn/mISDN/core.h:48:
+			u_int, struct sockaddr_mISDN *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#402: FILE: drivers/isdn/mISDN/core.h:49:
+extern int	connect_layer1(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNdevice *' should also have an identifier name
#402: FILE: drivers/isdn/mISDN/core.h:49:
+extern int	connect_layer1(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#402: FILE: drivers/isdn/mISDN/core.h:49:
+extern int	connect_layer1(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#402: FILE: drivers/isdn/mISDN/core.h:49:
+extern int	connect_layer1(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sockaddr_mISDN *' should also have an identifier name
#402: FILE: drivers/isdn/mISDN/core.h:49:
+extern int	connect_layer1(struct mISDNdevice *, struct mISDNchannel *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: drivers/isdn/mISDN/core.h:50:
+extern int	connect_layer1(struct mISDNdevice *, struct mISDNchannel *,
+			u_int, struct sockaddr_mISDN *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: drivers/isdn/mISDN/core.h:51:
+extern int	create_l2entity(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNdevice *' should also have an identifier name
#404: FILE: drivers/isdn/mISDN/core.h:51:
+extern int	create_l2entity(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#404: FILE: drivers/isdn/mISDN/core.h:51:
+extern int	create_l2entity(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#404: FILE: drivers/isdn/mISDN/core.h:51:
+extern int	create_l2entity(struct mISDNdevice *, struct mISDNchannel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sockaddr_mISDN *' should also have an identifier name
#404: FILE: drivers/isdn/mISDN/core.h:51:
+extern int	create_l2entity(struct mISDNdevice *, struct mISDNchannel *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: drivers/isdn/mISDN/core.h:52:
+extern int	create_l2entity(struct mISDNdevice *, struct mISDNchannel *,
+			u_int, struct sockaddr_mISDN *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#407: FILE: drivers/isdn/mISDN/core.h:54:
+extern int	create_stack(struct mISDNdevice *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNdevice *' should also have an identifier name
#407: FILE: drivers/isdn/mISDN/core.h:54:
+extern int	create_stack(struct mISDNdevice *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: drivers/isdn/mISDN/core.h:55:
+extern int	create_teimanager(struct mISDNdevice *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNdevice *' should also have an identifier name
#408: FILE: drivers/isdn/mISDN/core.h:55:
+extern int	create_teimanager(struct mISDNdevice *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: drivers/isdn/mISDN/core.h:56:
+extern void	delete_teimanager(struct mISDNchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#409: FILE: drivers/isdn/mISDN/core.h:56:
+extern void	delete_teimanager(struct mISDNchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#410: FILE: drivers/isdn/mISDN/core.h:57:
+extern void	delete_channel(struct mISDNchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#410: FILE: drivers/isdn/mISDN/core.h:57:
+extern void	delete_channel(struct mISDNchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: drivers/isdn/mISDN/core.h:58:
+extern void	delete_stack(struct mISDNdevice *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNdevice *' should also have an identifier name
#411: FILE: drivers/isdn/mISDN/core.h:58:
+extern void	delete_stack(struct mISDNdevice *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: drivers/isdn/mISDN/core.h:59:
+extern void	mISDN_initstack(u_int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int *' should also have an identifier name
#412: FILE: drivers/isdn/mISDN/core.h:59:
+extern void	mISDN_initstack(u_int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: drivers/isdn/mISDN/core.h:60:
+extern int      misdn_sock_init(u_int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int *' should also have an identifier name
#413: FILE: drivers/isdn/mISDN/core.h:60:
+extern int      misdn_sock_init(u_int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#414: FILE: drivers/isdn/mISDN/core.h:61:
+extern void     misdn_sock_cleanup(void);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNstack>
#415: FILE: drivers/isdn/mISDN/core.h:62:
+extern void	add_layer2(struct mISDNchannel *, struct mISDNstack *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: drivers/isdn/mISDN/core.h:62:
+extern void	add_layer2(struct mISDNchannel *, struct mISDNstack *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#415: FILE: drivers/isdn/mISDN/core.h:62:
+extern void	add_layer2(struct mISDNchannel *, struct mISDNstack *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNstack *' should also have an identifier name
#415: FILE: drivers/isdn/mISDN/core.h:62:
+extern void	add_layer2(struct mISDNchannel *, struct mISDNstack *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#416: FILE: drivers/isdn/mISDN/core.h:63:
+extern void	__add_layer2(struct mISDNchannel *, struct mISDNstack *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#416: FILE: drivers/isdn/mISDN/core.h:63:
+extern void	__add_layer2(struct mISDNchannel *, struct mISDNstack *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNstack *' should also have an identifier name
#416: FILE: drivers/isdn/mISDN/core.h:63:
+extern void	__add_layer2(struct mISDNchannel *, struct mISDNstack *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: drivers/isdn/mISDN/core.h:65:
+extern u_int		get_all_Bprotocols(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#419: FILE: drivers/isdn/mISDN/core.h:66:
+struct Bprotocol	*get_Bprotocol4mask(u_int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#420: FILE: drivers/isdn/mISDN/core.h:67:
+struct Bprotocol	*get_Bprotocol4id(u_int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: drivers/isdn/mISDN/core.h:69:
+extern int	mISDN_inittimer(u_int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int *' should also have an identifier name
#422: FILE: drivers/isdn/mISDN/core.h:69:
+extern int	mISDN_inittimer(u_int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: drivers/isdn/mISDN/core.h:70:
+extern void	mISDN_timer_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#425: FILE: drivers/isdn/mISDN/core.h:72:
+extern int	l1_init(u_int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int *' should also have an identifier name
#425: FILE: drivers/isdn/mISDN/core.h:72:
+extern int	l1_init(u_int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: drivers/isdn/mISDN/core.h:73:
+extern void	l1_cleanup(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#427: FILE: drivers/isdn/mISDN/core.h:74:
+extern int ^IIsdnl2_Init(u_int *);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#427: FILE: drivers/isdn/mISDN/core.h:74:
+extern int 	Isdnl2_Init(u_int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int *' should also have an identifier name
#427: FILE: drivers/isdn/mISDN/core.h:74:
+extern int 	Isdnl2_Init(u_int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: drivers/isdn/mISDN/core.h:75:
+extern void	Isdnl2_cleanup(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#437: FILE: drivers/isdn/mISDN/fsm.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmNew>
#466: FILE: drivers/isdn/mISDN/fsm.c:30:
+mISDN_FsmNew(struct Fsm *fsm,

CHECK:CAMELCASE: Avoid CamelCase: <Fsm>
#466: FILE: drivers/isdn/mISDN/fsm.c:30:
+mISDN_FsmNew(struct Fsm *fsm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: drivers/isdn/mISDN/fsm.c:31:
+mISDN_FsmNew(struct Fsm *fsm,
+       struct FsmNode *fnlist, int fncount)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: drivers/isdn/mISDN/fsm.c:31:
+       struct FsmNode *fnlist, int fncount)$

CHECK:CAMELCASE: Avoid CamelCase: <FsmNode>
#467: FILE: drivers/isdn/mISDN/fsm.c:31:
+       struct FsmNode *fnlist, int fncount)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fnlist[i].state >= fsm->state_count'
#475: FILE: drivers/isdn/mISDN/fsm.c:39:
+		if ((fnlist[i].state >= fsm->state_count) ||
+		    (fnlist[i].event >= fsm->event_count)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fnlist[i].event >= fsm->event_count'
#475: FILE: drivers/isdn/mISDN/fsm.c:39:
+		if ((fnlist[i].state >= fsm->state_count) ||
+		    (fnlist[i].event >= fsm->event_count)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#477: FILE: drivers/isdn/mISDN/fsm.c:41:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmNew', this function's name, in a string
#478: FILE: drivers/isdn/mISDN/fsm.c:42:
+			    "mISDN_FsmNew Error: %d st(%ld/%ld) ev(%ld/%ld)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Unbalanced braces around else statement
#481: FILE: drivers/isdn/mISDN/fsm.c:45:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmFree>
#488: FILE: drivers/isdn/mISDN/fsm.c:52:
+mISDN_FsmFree(struct Fsm *fsm)

CHECK:SPACING: No space is necessary after a cast
#490: FILE: drivers/isdn/mISDN/fsm.c:54:
+	kfree((void *) fsm->jumpmatrix);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmEvent>
#495: FILE: drivers/isdn/mISDN/fsm.c:59:
+mISDN_FsmEvent(struct FsmInst *fi, int event, void *arg)

CHECK:CAMELCASE: Avoid CamelCase: <FsmInst>
#495: FILE: drivers/isdn/mISDN/fsm.c:59:
+mISDN_FsmEvent(struct FsmInst *fi, int event, void *arg)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fi->state >= fi->fsm->state_count'
#499: FILE: drivers/isdn/mISDN/fsm.c:63:
+	if ((fi->state >= fi->fsm->state_count) ||
+	    (event >= fi->fsm->event_count)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event >= fi->fsm->event_count'
#499: FILE: drivers/isdn/mISDN/fsm.c:63:
+	if ((fi->state >= fi->fsm->state_count) ||
+	    (event >= fi->fsm->event_count)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#501: FILE: drivers/isdn/mISDN/fsm.c:65:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmEvent', this function's name, in a string
#502: FILE: drivers/isdn/mISDN/fsm.c:66:
+		    "mISDN_FsmEvent Error st(%ld/%ld) ev(%d/%ld)\n",

CHECK:CAMELCASE: Avoid CamelCase: <strState>
#511: FILE: drivers/isdn/mISDN/fsm.c:75:
+				fi->fsm->strState[fi->state],

CHECK:CAMELCASE: Avoid CamelCase: <strEvent>
#512: FILE: drivers/isdn/mISDN/fsm.c:76:
+				fi->fsm->strEvent[event]);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#515: FILE: drivers/isdn/mISDN/fsm.c:79:
+		return 0;
+	} else {

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmChangeState>
#526: FILE: drivers/isdn/mISDN/fsm.c:90:
+mISDN_FsmChangeState(struct FsmInst *fi, int newstate)

CHECK:CAMELCASE: Avoid CamelCase: <FsmExpireTimer>
#536: FILE: drivers/isdn/mISDN/fsm.c:100:
+FsmExpireTimer(struct FsmTimer *ft)

CHECK:CAMELCASE: Avoid CamelCase: <FsmTimer>
#536: FILE: drivers/isdn/mISDN/fsm.c:100:
+FsmExpireTimer(struct FsmTimer *ft)

CHECK:SPACING: No space is necessary after a cast
#540: FILE: drivers/isdn/mISDN/fsm.c:104:
+		ft->fi->printdebug(ft->fi, "FsmExpireTimer %lx", (long) ft);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'FsmExpireTimer', this function's name, in a string
#540: FILE: drivers/isdn/mISDN/fsm.c:104:
+		ft->fi->printdebug(ft->fi, "FsmExpireTimer %lx", (long) ft);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmInitTimer>
#546: FILE: drivers/isdn/mISDN/fsm.c:110:
+mISDN_FsmInitTimer(struct FsmInst *fi, struct FsmTimer *ft)

CHECK:SPACING: No space is necessary after a cast
#549: FILE: drivers/isdn/mISDN/fsm.c:113:
+	ft->tl.function = (void *) FsmExpireTimer;

CHECK:SPACING: No space is necessary after a cast
#550: FILE: drivers/isdn/mISDN/fsm.c:114:
+	ft->tl.data = (long) ft;

CHECK:SPACING: No space is necessary after a cast
#553: FILE: drivers/isdn/mISDN/fsm.c:117:
+		ft->fi->printdebug(ft->fi, "mISDN_FsmInitTimer %lx", (long) ft);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmInitTimer', this function's name, in a string
#553: FILE: drivers/isdn/mISDN/fsm.c:117:
+		ft->fi->printdebug(ft->fi, "mISDN_FsmInitTimer %lx", (long) ft);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmDelTimer>
#560: FILE: drivers/isdn/mISDN/fsm.c:124:
+mISDN_FsmDelTimer(struct FsmTimer *ft, int where)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmDelTimer', this function's name, in a string
#564: FILE: drivers/isdn/mISDN/fsm.c:128:
+		ft->fi->printdebug(ft->fi, "mISDN_FsmDelTimer %lx %d",

CHECK:SPACING: No space is necessary after a cast
#565: FILE: drivers/isdn/mISDN/fsm.c:129:
+			(long) ft, where);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmAddTimer>
#572: FILE: drivers/isdn/mISDN/fsm.c:136:
+mISDN_FsmAddTimer(struct FsmTimer *ft,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: drivers/isdn/mISDN/fsm.c:137:
+mISDN_FsmAddTimer(struct FsmTimer *ft,
+	    int millisec, int event, void *arg, int where)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#575: FILE: drivers/isdn/mISDN/fsm.c:139:
+{
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmAddTimer', this function's name, in a string
#578: FILE: drivers/isdn/mISDN/fsm.c:142:
+		ft->fi->printdebug(ft->fi, "mISDN_FsmAddTimer %lx %d %d",

CHECK:SPACING: No space is necessary after a cast
#579: FILE: drivers/isdn/mISDN/fsm.c:143:
+			(long) ft, millisec, where);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#584: FILE: drivers/isdn/mISDN/fsm.c:148:
+			printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmAddTimer', this function's name, in a string
#585: FILE: drivers/isdn/mISDN/fsm.c:149:
+				"mISDN_FsmAddTimer: timer already active!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmAddTimer', this function's name, in a string
#587: FILE: drivers/isdn/mISDN/fsm.c:151:
+				"mISDN_FsmAddTimer already active!");

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_FsmRestartTimer>
#601: FILE: drivers/isdn/mISDN/fsm.c:165:
+mISDN_FsmRestartTimer(struct FsmTimer *ft,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/isdn/mISDN/fsm.c:166:
+mISDN_FsmRestartTimer(struct FsmTimer *ft,
+	    int millisec, int event, void *arg, int where)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#604: FILE: drivers/isdn/mISDN/fsm.c:168:
+{
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDN_FsmRestartTimer', this function's name, in a string
#607: FILE: drivers/isdn/mISDN/fsm.c:171:
+		ft->fi->printdebug(ft->fi, "mISDN_FsmRestartTimer %lx %d %d",

CHECK:SPACING: No space is necessary after a cast
#608: FILE: drivers/isdn/mISDN/fsm.c:172:
+			(long) ft, millisec, where);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#626: FILE: drivers/isdn/mISDN/fsm.h:1:
+/*

WARNING:SPACING: Unnecessary space before function pointer arguments
#668: FILE: drivers/isdn/mISDN/fsm.h:43:
+	void (*printdebug) (struct FsmInst *, char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmInst *' should also have an identifier name
#668: FILE: drivers/isdn/mISDN/fsm.h:43:
+	void (*printdebug) (struct FsmInst *, char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#668: FILE: drivers/isdn/mISDN/fsm.h:43:
+	void (*printdebug) (struct FsmInst *, char *, ...);

WARNING:SPACING: Unnecessary space before function pointer arguments
#673: FILE: drivers/isdn/mISDN/fsm.h:48:
+	void (*routine) (struct FsmInst *, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmInst *' should also have an identifier name
#673: FILE: drivers/isdn/mISDN/fsm.h:48:
+	void (*routine) (struct FsmInst *, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#673: FILE: drivers/isdn/mISDN/fsm.h:48:
+	void (*routine) (struct FsmInst *, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#673: FILE: drivers/isdn/mISDN/fsm.h:48:
+	void (*routine) (struct FsmInst *, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#683: FILE: drivers/isdn/mISDN/fsm.h:58:
+extern void mISDN_FsmNew(struct Fsm *, struct FsmNode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Fsm *' should also have an identifier name
#683: FILE: drivers/isdn/mISDN/fsm.h:58:
+extern void mISDN_FsmNew(struct Fsm *, struct FsmNode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmNode *' should also have an identifier name
#683: FILE: drivers/isdn/mISDN/fsm.h:58:
+extern void mISDN_FsmNew(struct Fsm *, struct FsmNode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#683: FILE: drivers/isdn/mISDN/fsm.h:58:
+extern void mISDN_FsmNew(struct Fsm *, struct FsmNode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: drivers/isdn/mISDN/fsm.h:59:
+extern void mISDN_FsmFree(struct Fsm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Fsm *' should also have an identifier name
#684: FILE: drivers/isdn/mISDN/fsm.h:59:
+extern void mISDN_FsmFree(struct Fsm *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#685: FILE: drivers/isdn/mISDN/fsm.h:60:
+extern int mISDN_FsmEvent(struct FsmInst *, int , void *);
                                                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#685: FILE: drivers/isdn/mISDN/fsm.h:60:
+extern int mISDN_FsmEvent(struct FsmInst *, int , void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmInst *' should also have an identifier name
#685: FILE: drivers/isdn/mISDN/fsm.h:60:
+extern int mISDN_FsmEvent(struct FsmInst *, int , void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#685: FILE: drivers/isdn/mISDN/fsm.h:60:
+extern int mISDN_FsmEvent(struct FsmInst *, int , void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#685: FILE: drivers/isdn/mISDN/fsm.h:60:
+extern int mISDN_FsmEvent(struct FsmInst *, int , void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#686: FILE: drivers/isdn/mISDN/fsm.h:61:
+extern void mISDN_FsmChangeState(struct FsmInst *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmInst *' should also have an identifier name
#686: FILE: drivers/isdn/mISDN/fsm.h:61:
+extern void mISDN_FsmChangeState(struct FsmInst *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#686: FILE: drivers/isdn/mISDN/fsm.h:61:
+extern void mISDN_FsmChangeState(struct FsmInst *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#687: FILE: drivers/isdn/mISDN/fsm.h:62:
+extern void mISDN_FsmInitTimer(struct FsmInst *, struct FsmTimer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmInst *' should also have an identifier name
#687: FILE: drivers/isdn/mISDN/fsm.h:62:
+extern void mISDN_FsmInitTimer(struct FsmInst *, struct FsmTimer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmTimer *' should also have an identifier name
#687: FILE: drivers/isdn/mISDN/fsm.h:62:
+extern void mISDN_FsmInitTimer(struct FsmInst *, struct FsmTimer *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#688: FILE: drivers/isdn/mISDN/fsm.h:63:
+extern int mISDN_FsmAddTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmTimer *' should also have an identifier name
#688: FILE: drivers/isdn/mISDN/fsm.h:63:
+extern int mISDN_FsmAddTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#688: FILE: drivers/isdn/mISDN/fsm.h:63:
+extern int mISDN_FsmAddTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#688: FILE: drivers/isdn/mISDN/fsm.h:63:
+extern int mISDN_FsmAddTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#688: FILE: drivers/isdn/mISDN/fsm.h:63:
+extern int mISDN_FsmAddTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#688: FILE: drivers/isdn/mISDN/fsm.h:63:
+extern int mISDN_FsmAddTimer(struct FsmTimer *, int, int, void *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: drivers/isdn/mISDN/fsm.h:64:
+extern void mISDN_FsmRestartTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmTimer *' should also have an identifier name
#689: FILE: drivers/isdn/mISDN/fsm.h:64:
+extern void mISDN_FsmRestartTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#689: FILE: drivers/isdn/mISDN/fsm.h:64:
+extern void mISDN_FsmRestartTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#689: FILE: drivers/isdn/mISDN/fsm.h:64:
+extern void mISDN_FsmRestartTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#689: FILE: drivers/isdn/mISDN/fsm.h:64:
+extern void mISDN_FsmRestartTimer(struct FsmTimer *, int, int, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#689: FILE: drivers/isdn/mISDN/fsm.h:64:
+extern void mISDN_FsmRestartTimer(struct FsmTimer *, int, int, void *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: drivers/isdn/mISDN/fsm.h:65:
+extern void mISDN_FsmDelTimer(struct FsmTimer *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct FsmTimer *' should also have an identifier name
#690: FILE: drivers/isdn/mISDN/fsm.h:65:
+extern void mISDN_FsmDelTimer(struct FsmTimer *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#690: FILE: drivers/isdn/mISDN/fsm.h:65:
+extern void mISDN_FsmDelTimer(struct FsmTimer *, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#699: FILE: drivers/isdn/mISDN/hwchannel.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#726: FILE: drivers/isdn/mISDN/hwchannel.c:28:
+	if (test_and_clear_bit(FLG_RECVQUEUE, &dch->Flags)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#728: FILE: drivers/isdn/mISDN/hwchannel.c:30:
+			if (likely(dch->dev.D.peer)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#732: FILE: drivers/isdn/mISDN/hwchannel.c:34:
+			} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#752: FILE: drivers/isdn/mISDN/hwchannel.c:54:
+				printk(KERN_WARNING "B-channel %p receive "

WARNING:SPLIT_STRING: quoted string split across lines
#753: FILE: drivers/isdn/mISDN/hwchannel.c:55:
+				printk(KERN_WARNING "B-channel %p receive "
+					"queue if full, but empties...\n", bch);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#755: FILE: drivers/isdn/mISDN/hwchannel.c:57:
+			if (likely(bch->ch.peer)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#759: FILE: drivers/isdn/mISDN/hwchannel.c:61:
+			} else

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initdchannel>
#766: FILE: drivers/isdn/mISDN/hwchannel.c:68:
+mISDN_initdchannel(struct dchannel *ch, int maxlen, void *phf)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initbchannel>
#784: FILE: drivers/isdn/mISDN/hwchannel.c:86:
+mISDN_initbchannel(struct bchannel *ch, int maxlen)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freedchannel>
#801: FILE: drivers/isdn/mISDN/hwchannel.c:103:
+mISDN_freedchannel(struct dchannel *ch)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freebchannel>
#819: FILE: drivers/isdn/mISDN/hwchannel.c:121:
+mISDN_freebchannel(struct bchannel *ch)

CHECK:CAMELCASE: Avoid CamelCase: <recv_Dchannel>
#851: FILE: drivers/isdn/mISDN/hwchannel.c:153:
+recv_Dchannel(struct dchannel *dch)

CHECK:CAMELCASE: Avoid CamelCase: <mISDNhead>
#853: FILE: drivers/isdn/mISDN/hwchannel.c:155:
+	struct mISDNhead *hh;

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_HEAD_P>
#860: FILE: drivers/isdn/mISDN/hwchannel.c:162:
+	hh = mISDN_HEAD_P(dch->rx_skb);

CHECK:CAMELCASE: Avoid CamelCase: <recv_Bchannel>
#870: FILE: drivers/isdn/mISDN/hwchannel.c:172:
+recv_Bchannel(struct bchannel *bch)

CHECK:CAMELCASE: Avoid CamelCase: <recv_Dchannel_skb>
#890: FILE: drivers/isdn/mISDN/hwchannel.c:192:
+recv_Dchannel_skb(struct dchannel *dch, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <recv_Bchannel_skb>
#898: FILE: drivers/isdn/mISDN/hwchannel.c:200:
+recv_Bchannel_skb(struct bchannel *bch, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <confirm_Dsend>
#911: FILE: drivers/isdn/mISDN/hwchannel.c:213:
+confirm_Dsend(struct dchannel *dch)

CHECK:CAMELCASE: Avoid CamelCase: <_alloc_mISDN_skb>
#915: FILE: drivers/isdn/mISDN/hwchannel.c:217:
+	skb = _alloc_mISDN_skb(PH_DATA_CNF, mISDN_HEAD_ID(dch->tx_skb),

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_HEAD_ID>
#915: FILE: drivers/isdn/mISDN/hwchannel.c:217:
+	skb = _alloc_mISDN_skb(PH_DATA_CNF, mISDN_HEAD_ID(dch->tx_skb),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: drivers/isdn/mISDN/hwchannel.c:218:
+	skb = _alloc_mISDN_skb(PH_DATA_CNF, mISDN_HEAD_ID(dch->tx_skb),
+	    0, NULL, GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#918: FILE: drivers/isdn/mISDN/hwchannel.c:220:
+		printk(KERN_ERR "%s: no skb id %x\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: drivers/isdn/mISDN/hwchannel.c:221:
+		printk(KERN_ERR "%s: no skb id %x\n", __func__,
+		    mISDN_HEAD_ID(dch->tx_skb));

CHECK:CAMELCASE: Avoid CamelCase: <confirm_Bsend>
#942: FILE: drivers/isdn/mISDN/hwchannel.c:244:
+confirm_Bsend(struct bchannel *bch)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: drivers/isdn/mISDN/hwchannel.c:251:
+	skb = _alloc_mISDN_skb(PH_DATA_CNF, mISDN_HEAD_ID(bch->tx_skb),
+	    0, NULL, GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#951: FILE: drivers/isdn/mISDN/hwchannel.c:253:
+		printk(KERN_ERR "%s: no skb id %x\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: drivers/isdn/mISDN/hwchannel.c:254:
+		printk(KERN_ERR "%s: no skb id %x\n", __func__,
+		    mISDN_HEAD_ID(bch->tx_skb));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#973: FILE: drivers/isdn/mISDN/hwchannel.c:275:
+			return 1;
+		} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#975: FILE: drivers/isdn/mISDN/hwchannel.c:277:
+			printk(KERN_WARNING "B TX_NEXT without skb\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1009: FILE: drivers/isdn/mISDN/hwchannel.c:311:
+		printk(KERN_WARNING "%s: skb too small\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1013: FILE: drivers/isdn/mISDN/hwchannel.c:315:
+		printk(KERN_WARNING "%s: skb too large(%d/%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: drivers/isdn/mISDN/hwchannel.c:316:
+		printk(KERN_WARNING "%s: skb too large(%d/%d)\n",
+			__func__, skb->len, ch->maxlen);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1021: FILE: drivers/isdn/mISDN/hwchannel.c:323:
+		return 0;
+	} else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1033: FILE: drivers/isdn/mISDN/hwchannel.c:335:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1036: FILE: drivers/isdn/mISDN/hwchannel.c:338:
+		printk(KERN_WARNING "%s: skb too small\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1040: FILE: drivers/isdn/mISDN/hwchannel.c:342:
+		printk(KERN_WARNING "%s: skb too large(%d/%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: drivers/isdn/mISDN/hwchannel.c:343:
+		printk(KERN_WARNING "%s: skb too large(%d/%d)\n",
+			__func__, skb->len, ch->maxlen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1047: FILE: drivers/isdn/mISDN/hwchannel.c:349:
+		printk(KERN_WARNING

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1056: FILE: drivers/isdn/mISDN/hwchannel.c:358:
+		return 0;
+	} else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1070: FILE: drivers/isdn/mISDN/layer1.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1087: FILE: drivers/isdn/mISDN/layer1.c:18:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1098: FILE: drivers/isdn/mISDN/layer1.c:29:
+^Istruct FsmTimer ^Itimer;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1119: FILE: drivers/isdn/mISDN/layer1.c:50:
+#define L1S_STATE_COUNT (ST_L1_F8+1)
                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <strL1SState>
#1121: FILE: drivers/isdn/mISDN/layer1.c:52:
+static char *strL1SState[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1122: FILE: drivers/isdn/mISDN/layer1.c:53:
+static char *strL1SState[] =
+{

CHECK:CAMELCASE: Avoid CamelCase: <strL1Event>
#1149: FILE: drivers/isdn/mISDN/layer1.c:80:
+static char *strL1Event[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1150: FILE: drivers/isdn/mISDN/layer1.c:81:
+static char *strL1Event[] =
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1172: FILE: drivers/isdn/mISDN/layer1.c:103:
+	printk(KERN_DEBUG "%s: ", l1->dch->dev.name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1174: FILE: drivers/isdn/mISDN/layer1.c:105:
+	printk("\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1209: FILE: drivers/isdn/mISDN/layer1.c:140:
+	if (test_bit(FLG_L1_ACTIVATING, &l1->Flags)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1212: FILE: drivers/isdn/mISDN/layer1.c:143:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <L1SFnList>
#1318: FILE: drivers/isdn/mISDN/layer1.c:249:
+static struct FsmNode L1SFnList[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1319: FILE: drivers/isdn/mISDN/layer1.c:250:
+static struct FsmNode L1SFnList[] =
+{

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1366: FILE: drivers/isdn/mISDN/layer1.c:297:
+static void
+release_l1(struct layer1 *l1) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1411: FILE: drivers/isdn/mISDN/layer1.c:342:
+		if (test_bit(FLG_L1_ACTIVATED, &l1->Flags))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1413: FILE: drivers/isdn/mISDN/layer1.c:344:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1423: FILE: drivers/isdn/mISDN/layer1.c:354:
+			printk(KERN_DEBUG "%s %x unhandled\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1424: FILE: drivers/isdn/mISDN/layer1.c:355:
+			printk(KERN_DEBUG "%s %x unhandled\n",
+			    __func__, event);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1431: FILE: drivers/isdn/mISDN/layer1.c:362:
+int
+create_l1(struct dchannel *dch, dchannel_l1callback *dcb) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nl1)...) over kzalloc(sizeof(struct layer1)...)
#1435: FILE: drivers/isdn/mISDN/layer1.c:366:
+	nl1 = kzalloc(sizeof(struct layer1), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1437: FILE: drivers/isdn/mISDN/layer1.c:368:
+		printk(KERN_ERR "kmalloc struct layer1 failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1437: FILE: drivers/isdn/mISDN/layer1.c:368:
+	if (!nl1) {
+		printk(KERN_ERR "kmalloc struct layer1 failed\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1479: FILE: drivers/isdn/mISDN/layer1.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1511: FILE: drivers/isdn/mISDN/layer2.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <strL2State>
#1536: FILE: drivers/isdn/mISDN/layer2.c:26:
+static char *strL2State[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1537: FILE: drivers/isdn/mISDN/layer2.c:27:
+static char *strL2State[] =
+{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1573: FILE: drivers/isdn/mISDN/layer2.c:63:
+#define L2_EVENT_COUNT (EV_L2_FRAME_ERROR+1)
                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <strL2Event>
#1575: FILE: drivers/isdn/mISDN/layer2.c:65:
+static char *strL2Event[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1576: FILE: drivers/isdn/mISDN/layer2.c:66:
+static char *strL2Event[] =
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1610: FILE: drivers/isdn/mISDN/layer2.c:100:
+	printk(KERN_DEBUG "l2 (tei %d): ", l2->tei);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1612: FILE: drivers/isdn/mISDN/layer2.c:102:
+	printk("\n");

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_HEAD_PRIM>
#1650: FILE: drivers/isdn/mISDN/layer2.c:140:
+	mISDN_HEAD_PRIM(skb) = prim;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1654: FILE: drivers/isdn/mISDN/layer2.c:144:
+		printk(KERN_WARNING "%s: err=%d\n", __func__, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1678: FILE: drivers/isdn/mISDN/layer2.c:168:
+		printk(KERN_WARNING "%s: err=%d\n", __func__, err);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1683: FILE: drivers/isdn/mISDN/layer2.c:173:
+static int
+l2down_skb(struct layer2 *l2, struct sk_buff *skb) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1689: FILE: drivers/isdn/mISDN/layer2.c:179:
+		printk(KERN_DEBUG "l2down_skb: ret(%d)\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'l2down_skb', this function's name, in a string
#1689: FILE: drivers/isdn/mISDN/layer2.c:179:
+		printk(KERN_DEBUG "l2down_skb: ret(%d)\n", ret);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1739: FILE: drivers/isdn/mISDN/layer2.c:229:
+static int
+ph_data_confirm(struct layer2 *l2, struct mISDNhead *hh, struct sk_buff *skb) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1747: FILE: drivers/isdn/mISDN/layer2.c:237:
+			if (nskb) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1753: FILE: drivers/isdn/mISDN/layer2.c:243:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1767: FILE: drivers/isdn/mISDN/layer2.c:257:
+		if (nskb) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1774: FILE: drivers/isdn/mISDN/layer2.c:264:
+		} else

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1780: FILE: drivers/isdn/mISDN/layer2.c:270:
+static int
+l2mgr(struct layer2 *l2, u_int prim, void *arg) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1784: FILE: drivers/isdn/mISDN/layer2.c:274:
+	printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'l2mgr', this function's name, in a string
#1785: FILE: drivers/isdn/mISDN/layer2.c:275:
+	    "l2mgr: addr:%x prim %x %c\n", l2->id, prim, (char)c);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1787: FILE: drivers/isdn/mISDN/layer2.c:277:
+	if (test_bit(FLG_LAPD, &l2->flag) &&
+		!test_bit(FLG_FIXED_TEI, &l2->flag)) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1800: FILE: drivers/isdn/mISDN/layer2.c:290:
+static void
+set_peer_busy(struct layer2 *l2) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1807: FILE: drivers/isdn/mISDN/layer2.c:297:
+static void
+clear_peer_busy(struct layer2 *l2) {

CHECK:CAMELCASE: Avoid CamelCase: <InitWin>
#1814: FILE: drivers/isdn/mISDN/layer2.c:304:
+InitWin(struct layer2 *l2)

CHECK:CAMELCASE: Avoid CamelCase: <ReleaseWin>
#1838: FILE: drivers/isdn/mISDN/layer2.c:328:
+ReleaseWin(struct layer2 *l2)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1843: FILE: drivers/isdn/mISDN/layer2.c:333:
+		printk(KERN_WARNING

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1880: FILE: drivers/isdn/mISDN/layer2.c:370:
+		return 2;
+	} else {

CHECK:CAMELCASE: Avoid CamelCase: <IsUI>
#1908: FILE: drivers/isdn/mISDN/layer2.c:398:
+IsUI(u_char *data)

CHECK:CAMELCASE: Avoid CamelCase: <IsUA>
#1914: FILE: drivers/isdn/mISDN/layer2.c:404:
+IsUA(u_char *data)

CHECK:CAMELCASE: Avoid CamelCase: <IsDM>
#1920: FILE: drivers/isdn/mISDN/layer2.c:410:
+IsDM(u_char *data)

CHECK:CAMELCASE: Avoid CamelCase: <IsDISC>
#1926: FILE: drivers/isdn/mISDN/layer2.c:416:
+IsDISC(u_char *data)

CHECK:CAMELCASE: Avoid CamelCase: <IsRR>
#1932: FILE: drivers/isdn/mISDN/layer2.c:422:
+IsRR(u_char *data, struct layer2 *l2)

CHECK:CAMELCASE: Avoid CamelCase: <IsSFrame>
#1941: FILE: drivers/isdn/mISDN/layer2.c:431:
+IsSFrame(u_char *data, struct layer2 *l2)

CHECK:CAMELCASE: Avoid CamelCase: <IsSABME>
#1951: FILE: drivers/isdn/mISDN/layer2.c:441:
+IsSABME(u_char *data, struct layer2 *l2)

CHECK:CAMELCASE: Avoid CamelCase: <IsREJ>
#1959: FILE: drivers/isdn/mISDN/layer2.c:449:
+IsREJ(u_char *data, struct layer2 *l2)

CHECK:CAMELCASE: Avoid CamelCase: <IsFRMR>
#1966: FILE: drivers/isdn/mISDN/layer2.c:456:
+IsFRMR(u_char *data)

CHECK:CAMELCASE: Avoid CamelCase: <IsRNR>
#1972: FILE: drivers/isdn/mISDN/layer2.c:462:
+IsRNR(u_char *data, struct layer2 *l2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2009: FILE: drivers/isdn/mISDN/layer2.c:499:
+	int rsp = (*skb->data & 0x2) >> 1;
+	if (test_bit(FLG_ORIG, &l2->flag))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2022: FILE: drivers/isdn/mISDN/layer2.c:512:
+	int rsp = *skb->data & 0x2;
+	if (test_bit(FLG_ORIG, &l2->flag))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2047: FILE: drivers/isdn/mISDN/layer2.c:537:
+			l2m_debug(&l2->l2m,
+			    "FRMR information %2x %2x %2x %2x %2x",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2054: FILE: drivers/isdn/mISDN/layer2.c:544:
+			l2m_debug(&l2->l2m,
+			    "FRMR information %2x %2x %2x",

CHECK:BRACES: braces {} should be used on all arms of this statement
#2102: FILE: drivers/isdn/mISDN/layer2.c:592:
+	if (skb)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2104: FILE: drivers/isdn/mISDN/layer2.c:594:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2107: FILE: drivers/isdn/mISDN/layer2.c:597:
+			printk(KERN_WARNING "%s: can't alloc skbuff\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2107: FILE: drivers/isdn/mISDN/layer2.c:597:
+		if (!skb) {
+			printk(KERN_WARNING "%s: can't alloc skbuff\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2108: FILE: drivers/isdn/mISDN/layer2.c:598:
+			printk(KERN_WARNING "%s: can't alloc skbuff\n",
+				__func__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2116: FILE: drivers/isdn/mISDN/layer2.c:606:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <get_PollFlag>
#2118: FILE: drivers/isdn/mISDN/layer2.c:608:
+get_PollFlag(struct layer2 *l2, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <get_PollFlagFree>
#2124: FILE: drivers/isdn/mISDN/layer2.c:614:
+get_PollFlagFree(struct layer2 *l2, struct sk_buff *skb)

CHECK:SPACING: No space is necessary after a cast
#2198: FILE: drivers/isdn/mISDN/layer2.c:688:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'C');

CHECK:SPACING: No space is necessary after a cast
#2200: FILE: drivers/isdn/mISDN/layer2.c:690:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'D');

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2202: FILE: drivers/isdn/mISDN/layer2.c:692:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#2210: FILE: drivers/isdn/mISDN/layer2.c:700:
+	if (get_PollFlagFree(l2, skb))
[...]
+	else {
[...]

CHECK:SPACING: No space is necessary after a cast
#2211: FILE: drivers/isdn/mISDN/layer2.c:701:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'B');

CHECK:BRACES: Unbalanced braces around else statement
#2212: FILE: drivers/isdn/mISDN/layer2.c:702:
+	else {

CHECK:SPACING: No space is necessary after a cast
#2213: FILE: drivers/isdn/mISDN/layer2.c:703:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'E');

CHECK:SPACING: No space is necessary after a cast
#2226: FILE: drivers/isdn/mISDN/layer2.c:716:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'B');

CHECK:SPACING: No space is necessary after a cast
#2228: FILE: drivers/isdn/mISDN/layer2.c:718:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'E');

CHECK:SPACING: No space is necessary after a cast
#2432: FILE: drivers/isdn/mISDN/layer2.c:922:
+	l2mgr(l2, MDL_ERROR_IND, (void *) 'F');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2555: FILE: drivers/isdn/mISDN/layer2.c:1045:
+			l2down_create(l2, PH_DEACTIVATE_REQ,
+				l2_newid(l2), 0, NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2586: FILE: drivers/isdn/mISDN/layer2.c:1076:
+	if (test_bit(FLG_MOD128, &l2->flag)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2589: FILE: drivers/isdn/mISDN/layer2.c:1079:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2593: FILE: drivers/isdn/mISDN/layer2.c:1083:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'enquiry_cr', this function's name, in a string
#2594: FILE: drivers/isdn/mISDN/layer2.c:1084:
+		    "isdnl2 can't alloc sbbuff for enquiry_cr\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2622: FILE: drivers/isdn/mISDN/layer2.c:1112:
+
+

CHECK:SPACING: No space is necessary after a cast
#2628: FILE: drivers/isdn/mISDN/layer2.c:1118:
+	l2mgr(l2, MDL_ERROR_IND, (void *) 'J');

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2652: FILE: drivers/isdn/mISDN/layer2.c:1142:
+				printk(KERN_WARNING

CHECK:CAMELCASE: Avoid CamelCase: <PollFlag>
#2666: FILE: drivers/isdn/mISDN/layer2.c:1156:
+	int PollFlag, rsp, typ = RR;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2674: FILE: drivers/isdn/mISDN/layer2.c:1164:
+	if (IsRNR(skb->data, l2)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2677: FILE: drivers/isdn/mISDN/layer2.c:1167:
+	} else

CHECK:SPACING: No space is necessary after a cast
#2693: FILE: drivers/isdn/mISDN/layer2.c:1183:
+			l2mgr(l2, MDL_ERROR_IND, (void *) 'A');

CHECK:BRACES: braces {} should be used on all arms of this statement
#2697: FILE: drivers/isdn/mISDN/layer2.c:1187:
+	if (legalnr(l2, nr)) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2703: FILE: drivers/isdn/mISDN/layer2.c:1193:
+			if (mISDN_FsmAddTimer(&l2->t203, l2->T203,
+					EV_L2_T203, NULL, 6))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2709: FILE: drivers/isdn/mISDN/layer2.c:1199:
+			mISDN_FsmRestartTimer(&l2->t203, l2->T203,
+					EV_L2_T203, NULL, 7);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'typ == RR'
#2716: FILE: drivers/isdn/mISDN/layer2.c:1206:
+		if (skb_queue_len(&l2->i_queue) && (typ == RR))

CHECK:BRACES: Unbalanced braces around else statement
#2718: FILE: drivers/isdn/mISDN/layer2.c:1208:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fi->state == ST_L2_7'
#2802: FILE: drivers/isdn/mISDN/layer2.c:1292:
+		if (!test_bit(FLG_PEER_BUSY, &l2->flag) &&
+		    (fi->state == ST_L2_7)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2804: FILE: drivers/isdn/mISDN/layer2.c:1294:
+			if (nr == l2->vs) {
[...]
+			} else if (nr != l2->va)
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2807: FILE: drivers/isdn/mISDN/layer2.c:1297:
+				mISDN_FsmRestartTimer(&l2->t203, l2->T203,
+						EV_L2_T203, NULL, 7);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fi->state == ST_L2_7'
#2816: FILE: drivers/isdn/mISDN/layer2.c:1306:
+	if (skb_queue_len(&l2->i_queue) && (fi->state == ST_L2_7))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2832: FILE: drivers/isdn/mISDN/layer2.c:1322:
+	if (fi->state == ST_L2_3) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2835: FILE: drivers/isdn/mISDN/layer2.c:1325:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2847: FILE: drivers/isdn/mISDN/layer2.c:1337:
+	if (test_bit(FLG_LAPD, &l2->flag) &&
+		test_bit(FLG_DCHAN_BUSY, &l2->flag)) {

CHECK:SPACING: No space is necessary after a cast
#2853: FILE: drivers/isdn/mISDN/layer2.c:1343:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'G');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2856: FILE: drivers/isdn/mISDN/layer2.c:1346:
+			l2down_create(l2, PH_DEACTIVATE_REQ,
+				l2_newid(l2), 0, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2874: FILE: drivers/isdn/mISDN/layer2.c:1364:
+	if (test_bit(FLG_LAPD, &l2->flag) &&
+		test_bit(FLG_DCHAN_BUSY, &l2->flag)) {

CHECK:SPACING: No space is necessary after a cast
#2879: FILE: drivers/isdn/mISDN/layer2.c:1369:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'H');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2886: FILE: drivers/isdn/mISDN/layer2.c:1376:
+		mISDN_FsmAddTimer(&l2->t200, l2->T200, EV_L2_T200,
+			    NULL, 9);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2897: FILE: drivers/isdn/mISDN/layer2.c:1387:
+	if (test_bit(FLG_LAPD, &l2->flag) &&
+		test_bit(FLG_DCHAN_BUSY, &l2->flag)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2914: FILE: drivers/isdn/mISDN/layer2.c:1404:
+	if (test_bit(FLG_LAPD, &l2->flag) &&
+		test_bit(FLG_DCHAN_BUSY, &l2->flag)) {

CHECK:SPACING: No space is necessary after a cast
#2920: FILE: drivers/isdn/mISDN/layer2.c:1410:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'I');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2935: FILE: drivers/isdn/mISDN/layer2.c:1425:
+	if (test_bit(FLG_LAPD, &l2->flag) &&
+		test_bit(FLG_DCHAN_BUSY, &l2->flag)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2965: FILE: drivers/isdn/mISDN/layer2.c:1455:
+		printk(KERN_WARNING "isdnl2 try overwrite ack queue entry %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2966: FILE: drivers/isdn/mISDN/layer2.c:1456:
+		printk(KERN_WARNING "isdnl2 try overwrite ack queue entry %d\n",
+		    p1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2982: FILE: drivers/isdn/mISDN/layer2.c:1472:
+	if (p1 >= i)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2984: FILE: drivers/isdn/mISDN/layer2.c:1474:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2985: FILE: drivers/isdn/mISDN/layer2.c:1475:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2991: FILE: drivers/isdn/mISDN/layer2.c:1481:
+			printk(KERN_WARNING "%s: no skb mem\n", __func__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3020: FILE: drivers/isdn/mISDN/layer2.c:1510:
+	if (IsRNR(skb->data, l2)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3023: FILE: drivers/isdn/mISDN/layer2.c:1513:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3035: FILE: drivers/isdn/mISDN/layer2.c:1525:
+		if (legalnr(l2, nr)) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3041: FILE: drivers/isdn/mISDN/layer2.c:1531:
+				mISDN_FsmAddTimer(&l2->t203, l2->T203,
+					    EV_L2_T203, NULL, 5);

CHECK:BRACES: Unbalanced braces around else statement
#3048: FILE: drivers/isdn/mISDN/layer2.c:1538:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fi->state == ST_L2_7'
#3068: FILE: drivers/isdn/mISDN/layer2.c:1558:
+	if (!(skb->data[0] & 1) || ((skb->data[0] & 3) == 1) || /* I or S */
+	    (IsUA(skb->data) && (fi->state == ST_L2_7))) {

CHECK:SPACING: No space is necessary after a cast
#3070: FILE: drivers/isdn/mISDN/layer2.c:1560:
+		l2mgr(l2, MDL_ERROR_IND, (void *) 'K');

CHECK:CAMELCASE: Avoid CamelCase: <L2FnList>
#3251: FILE: drivers/isdn/mISDN/layer2.c:1741:
+static struct FsmNode L2FnList[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3252: FILE: drivers/isdn/mISDN/layer2.c:1742:
+static struct FsmNode L2FnList[] =
+{

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3343: FILE: drivers/isdn/mISDN/layer2.c:1833:
+#define L2_FN_COUNT (sizeof(L2FnList)/sizeof(struct FsmNode))
                                      ^

CHECK:SPACING: No space is necessary after a cast
#3356: FILE: drivers/isdn/mISDN/layer2.c:1846:
+		mISDN_FsmEvent(&l2->l2m, EV_L2_FRAME_ERROR, (void *) 'N');

CHECK:BRACES: braces {} should be used on all arms of this statement
#3359: FILE: drivers/isdn/mISDN/layer2.c:1849:
+	if (test_bit(FLG_LAPD, &l2->flag)) { /* Maybe not needed */
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3363: FILE: drivers/isdn/mISDN/layer2.c:1853:
+			printk(KERN_WARNING

WARNING:TYPO_SPELLING: 'bussiness' may be misspelled - perhaps 'business'?
#3370: FILE: drivers/isdn/mISDN/layer2.c:1860:
+			/* not our bussiness
 			           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptei != l2->tei'
#3378: FILE: drivers/isdn/mISDN/layer2.c:1868:
+		if ((ptei != l2->tei) && (ptei != GROUP_TEI)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptei != GROUP_TEI'
#3378: FILE: drivers/isdn/mISDN/layer2.c:1868:
+		if ((ptei != l2->tei) && (ptei != GROUP_TEI)) {

WARNING:TYPO_SPELLING: 'bussiness' may be misspelled - perhaps 'business'?
#3379: FILE: drivers/isdn/mISDN/layer2.c:1869:
+			/* not our bussiness
 			           ^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#3387: FILE: drivers/isdn/mISDN/layer2.c:1877:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3389: FILE: drivers/isdn/mISDN/layer2.c:1879:
+	if (!(*datap & 1)) {	/* I-Frame */
[...]
+	} else if (IsSFrame(datap, l2)) {	/* S-Frame */
[...]
+	} else if (IsUI(datap)) {
[...]
+	} else if (IsSABME(datap, l2)) {
[...]
+	} else if (IsUA(datap)) {
[...]
+	} else if (IsDISC(datap)) {
[...]
+	} else if (IsDM(datap)) {
[...]
+	} else if (IsFRMR(datap)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3421: FILE: drivers/isdn/mISDN/layer2.c:1911:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3424: FILE: drivers/isdn/mISDN/layer2.c:1914:
+		printk(KERN_WARNING "l2 D-channel frame error %c\n", c);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3435: FILE: drivers/isdn/mISDN/layer2.c:1925:
+^Iint ^I^I^Iret = -EINVAL;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3438: FILE: drivers/isdn/mISDN/layer2.c:1928:
+		printk(KERN_DEBUG "%s: prim(%x) id(%x) tei(%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3439: FILE: drivers/isdn/mISDN/layer2.c:1929:
+		printk(KERN_DEBUG "%s: prim(%x) id(%x) tei(%d)\n",
+		    __func__, hh->prim, hh->id, l2->tei);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3452: FILE: drivers/isdn/mISDN/layer2.c:1942:
+			ret = mISDN_FsmEvent(&l2->l2m,
+				EV_L2_DL_ESTABLISH_REQ, skb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3475: FILE: drivers/isdn/mISDN/layer2.c:1965:
+			if (test_bit(FLG_LAPD, &l2->flag) ||
+				test_bit(FLG_ORIG, &l2->flag))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3477: FILE: drivers/isdn/mISDN/layer2.c:1967:
+				ret = mISDN_FsmEvent(&l2->l2m,
+					EV_L2_DL_ESTABLISH_REQ, skb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3480: FILE: drivers/isdn/mISDN/layer2.c:1970:
+			if (test_bit(FLG_LAPD, &l2->flag) ||
+				test_bit(FLG_ORIG, &l2->flag)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3482: FILE: drivers/isdn/mISDN/layer2.c:1972:
+				test_and_set_bit(FLG_ESTAB_PEND,
+					&l2->flag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3485: FILE: drivers/isdn/mISDN/layer2.c:1975:
+			ret = l2down(l2, PH_ACTIVATE_REQ, l2_newid(l2),
+			    skb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3491: FILE: drivers/isdn/mISDN/layer2.c:1981:
+			l2down_create(l2, PH_DEACTIVATE_REQ,
+				l2_newid(l2), 0, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3493: FILE: drivers/isdn/mISDN/layer2.c:1983:
+		ret = mISDN_FsmEvent(&l2->l2m, EV_L2_DL_RELEASE_REQ,
+		    skb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3498: FILE: drivers/isdn/mISDN/layer2.c:1988:
+			l2m_debug(&l2->l2m, "l2 unknown pr %04x",
+			    hh->prim);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3513: FILE: drivers/isdn/mISDN/layer2.c:2003:
+		printk(KERN_DEBUG "%s: cmd(%x)\n", __func__, cmd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3526: FILE: drivers/isdn/mISDN/layer2.c:2016:
+		printk(KERN_NOTICE "MDL_ERROR|REQ (tei_l2)\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tei_l2', this function's name, in a string
#3526: FILE: drivers/isdn/mISDN/layer2.c:2016:
+		printk(KERN_NOTICE "MDL_ERROR|REQ (tei_l2)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3558: FILE: drivers/isdn/mISDN/layer2.c:2048:
+		printk(KERN_DEBUG "%s:(%x)\n", __func__, cmd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3566: FILE: drivers/isdn/mISDN/layer2.c:2056:
+			l2up_create(l2, DL_INFORMATION_IND,
+			    sizeof(info), &info);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*l2)...) over kzalloc(sizeof(struct layer2)...)
#3584: FILE: drivers/isdn/mISDN/layer2.c:2074:
+	l2 = kzalloc(sizeof(struct layer2), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3586: FILE: drivers/isdn/mISDN/layer2.c:2076:
+		printk(KERN_ERR "kzalloc layer2 failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#3586: FILE: drivers/isdn/mISDN/layer2.c:2076:
+	if (!l2) {
+		printk(KERN_ERR "kzalloc layer2 failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3657: FILE: drivers/isdn/mISDN/layer2.c:2147:
+		printk(KERN_ERR "layer2 create failed prt %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3658: FILE: drivers/isdn/mISDN/layer2.c:2148:
+		printk(KERN_ERR "layer2 create failed prt %x\n",
+			protocol);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3669: FILE: drivers/isdn/mISDN/layer2.c:2159:
+	if (test_bit(FLG_LAPB, &l2->flag) ||
+		test_bit(FLG_PTP, &l2->flag) ||

CHECK:CAMELCASE: Avoid CamelCase: <TEIInit>
#3715: FILE: drivers/isdn/mISDN/layer2.c:2205:
+	TEIInit(deb);

CHECK:CAMELCASE: Avoid CamelCase: <TEIFree>
#3723: FILE: drivers/isdn/mISDN/layer2.c:2213:
+	TEIFree();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3733: FILE: drivers/isdn/mISDN/layer2.h:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3822: FILE: drivers/isdn/mISDN/layer2.h:90:
+#define L2_STATE_COUNT (ST_L2_8+1)
                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3824: FILE: drivers/isdn/mISDN/layer2.h:92:
+extern struct layer2	*create_l2(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#3824: FILE: drivers/isdn/mISDN/layer2.h:92:
+extern struct layer2	*create_l2(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#3824: FILE: drivers/isdn/mISDN/layer2.h:92:
+extern struct layer2	*create_l2(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_long' should also have an identifier name
#3824: FILE: drivers/isdn/mISDN/layer2.h:92:
+extern struct layer2	*create_l2(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_long' should also have an identifier name
#3824: FILE: drivers/isdn/mISDN/layer2.h:92:
+extern struct layer2	*create_l2(struct mISDNchannel *, u_int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3825: FILE: drivers/isdn/mISDN/layer2.h:93:
+extern struct layer2	*create_l2(struct mISDNchannel *, u_int,
+				u_long, u_long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3826: FILE: drivers/isdn/mISDN/layer2.h:94:
+extern int		tei_l2(struct layer2 *, u_int, u_long arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct layer2 *' should also have an identifier name
#3826: FILE: drivers/isdn/mISDN/layer2.h:94:
+extern int		tei_l2(struct layer2 *, u_int, u_long arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#3826: FILE: drivers/isdn/mISDN/layer2.h:94:
+extern int		tei_l2(struct layer2 *, u_int, u_long arg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3828: FILE: drivers/isdn/mISDN/layer2.h:96:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3830: FILE: drivers/isdn/mISDN/layer2.h:98:
+extern int ^I^Il2_tei(struct layer2 *, u_int, u_long arg);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3830: FILE: drivers/isdn/mISDN/layer2.h:98:
+extern int 		l2_tei(struct layer2 *, u_int, u_long arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct layer2 *' should also have an identifier name
#3830: FILE: drivers/isdn/mISDN/layer2.h:98:
+extern int 		l2_tei(struct layer2 *, u_int, u_long arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#3830: FILE: drivers/isdn/mISDN/layer2.h:98:
+extern int 		l2_tei(struct layer2 *, u_int, u_long arg);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3831: FILE: drivers/isdn/mISDN/layer2.h:99:
+extern void ^I^Irelease_tei(struct layer2 *);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3831: FILE: drivers/isdn/mISDN/layer2.h:99:
+extern void 		release_tei(struct layer2 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct layer2 *' should also have an identifier name
#3831: FILE: drivers/isdn/mISDN/layer2.h:99:
+extern void 		release_tei(struct layer2 *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3832: FILE: drivers/isdn/mISDN/layer2.h:100:
+extern int ^I^ITEIInit(u_int *);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3832: FILE: drivers/isdn/mISDN/layer2.h:100:
+extern int 		TEIInit(u_int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int *' should also have an identifier name
#3832: FILE: drivers/isdn/mISDN/layer2.h:100:
+extern int 		TEIInit(u_int *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3833: FILE: drivers/isdn/mISDN/layer2.h:101:
+extern void ^I^ITEIFree(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3833: FILE: drivers/isdn/mISDN/layer2.h:101:
+extern void 		TEIFree(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3879: FILE: drivers/isdn/mISDN/socket.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_proto>
#3901: FILE: drivers/isdn/mISDN/socket.c:23:
+static struct proto mISDN_proto = {

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock>
#3904: FILE: drivers/isdn/mISDN/socket.c:26:
+	.obj_size	= sizeof(struct mISDN_sock)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_list>
#3909: FILE: drivers/isdn/mISDN/socket.c:31:
+static struct mISDN_sock_list	data_sockets = {

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_link>
#3931: FILE: drivers/isdn/mISDN/socket.c:53:
+mISDN_sock_link(struct mISDN_sock_list *l, struct sock *sk)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_unlink>
#3938: FILE: drivers/isdn/mISDN/socket.c:60:
+static void mISDN_sock_unlink(struct mISDN_sock_list *l, struct sock *sk)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_send>
#3946: FILE: drivers/isdn/mISDN/socket.c:68:
+mISDN_send(struct mISDNchannel *ch, struct sk_buff *skb)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3953: FILE: drivers/isdn/mISDN/socket.c:75:
+		printk(KERN_DEBUG "%s len %d %p\n", __func__, skb->len, skb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3959: FILE: drivers/isdn/mISDN/socket.c:81:
+		printk(KERN_WARNING "%s: error %d\n", __func__, err);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_ctrl>
#3964: FILE: drivers/isdn/mISDN/socket.c:86:
+mISDN_ctrl(struct mISDNchannel *ch, u_int cmd, void *arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3970: FILE: drivers/isdn/mISDN/socket.c:92:
+		printk(KERN_DEBUG "%s(%p, %x, %p)\n", __func__, ch, cmd, arg);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_cmsg>
#3980: FILE: drivers/isdn/mISDN/socket.c:102:
+mISDN_sock_cmsg(struct sock *sk, struct msghdr *msg, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_recvmsg>
#3991: FILE: drivers/isdn/mISDN/socket.c:113:
+mISDN_sock_recvmsg(struct kiocb *iocb, struct socket *sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3992: FILE: drivers/isdn/mISDN/socket.c:114:
+mISDN_sock_recvmsg(struct kiocb *iocb, struct socket *sock,
+    struct msghdr *msg, size_t len, int flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3992: FILE: drivers/isdn/mISDN/socket.c:114:
+    struct msghdr *msg, size_t len, int flags)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4001: FILE: drivers/isdn/mISDN/socket.c:123:
+		printk(KERN_DEBUG "%s: len %d, flags %x ch.nr %d, proto %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4002: FILE: drivers/isdn/mISDN/socket.c:124:
+		printk(KERN_DEBUG "%s: len %d, flags %x ch.nr %d, proto %x\n",
+			__func__, (int)len, flags, _pms(sk)->ch.nr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sk_protocol == ISDN_P_LAPD_TE'
#4019: FILE: drivers/isdn/mISDN/socket.c:141:
+		if ((sk->sk_protocol == ISDN_P_LAPD_TE) ||
+		    (sk->sk_protocol == ISDN_P_LAPD_NT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sk_protocol == ISDN_P_LAPD_NT'
#4019: FILE: drivers/isdn/mISDN/socket.c:141:
+		if ((sk->sk_protocol == ISDN_P_LAPD_TE) ||
+		    (sk->sk_protocol == ISDN_P_LAPD_NT)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4031: FILE: drivers/isdn/mISDN/socket.c:153:
+			printk(KERN_WARNING "%s: too small namelen %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4032: FILE: drivers/isdn/mISDN/socket.c:154:
+			printk(KERN_WARNING "%s: too small namelen %d\n",
+			    __func__, msg->msg_namelen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4045: FILE: drivers/isdn/mISDN/socket.c:167:
+	memcpy(skb_push(skb, MISDN_HEADER_LEN), mISDN_HEAD_P(skb),
+	    MISDN_HEADER_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_sendmsg>
#4057: FILE: drivers/isdn/mISDN/socket.c:179:
+mISDN_sock_sendmsg(struct kiocb *iocb, struct socket *sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4058: FILE: drivers/isdn/mISDN/socket.c:180:
+mISDN_sock_sendmsg(struct kiocb *iocb, struct socket *sock,
+    struct msghdr *msg, size_t len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4058: FILE: drivers/isdn/mISDN/socket.c:180:
+    struct msghdr *msg, size_t len)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4066: FILE: drivers/isdn/mISDN/socket.c:188:
+		printk(KERN_DEBUG "%s: len %d flags %x ch %d proto %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4067: FILE: drivers/isdn/mISDN/socket.c:189:
+		printk(KERN_DEBUG "%s: len %d flags %x ch %d proto %x\n",
+		     __func__, (int)len, msg->msg_flags, _pms(sk)->ch.nr,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4073: FILE: drivers/isdn/mISDN/socket.c:195:
+	if (msg->msg_flags & ~(MSG_DONTWAIT|MSG_NOSIGNAL|MSG_ERRQUEUE))
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4073: FILE: drivers/isdn/mISDN/socket.c:195:
+	if (msg->msg_flags & ~(MSG_DONTWAIT|MSG_NOSIGNAL|MSG_ERRQUEUE))
 	                                                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#4101: FILE: drivers/isdn/mISDN/socket.c:223:
+		if ((sk->sk_protocol == ISDN_P_LAPD_TE) ||
[...]
+		    mISDN_HEAD_ID(skb) = _pms(sk)->ch.nr;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sk_protocol == ISDN_P_LAPD_TE'
#4101: FILE: drivers/isdn/mISDN/socket.c:223:
+		if ((sk->sk_protocol == ISDN_P_LAPD_TE) ||
+		    (sk->sk_protocol == ISDN_P_LAPD_NT))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sk_protocol == ISDN_P_LAPD_NT'
#4101: FILE: drivers/isdn/mISDN/socket.c:223:
+		if ((sk->sk_protocol == ISDN_P_LAPD_TE) ||
+		    (sk->sk_protocol == ISDN_P_LAPD_NT))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4107: FILE: drivers/isdn/mISDN/socket.c:229:
+		printk(KERN_DEBUG "%s: ID:%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4108: FILE: drivers/isdn/mISDN/socket.c:230:
+		printk(KERN_DEBUG "%s: ID:%x\n",
+		     __func__, mISDN_HEAD_ID(skb));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4111: FILE: drivers/isdn/mISDN/socket.c:233:
+	if (!_pms(sk)->ch.peer ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4132: FILE: drivers/isdn/mISDN/socket.c:254:
+		printk(KERN_DEBUG "%s(%p) sk=%p\n", __func__, sock, sk);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_ctrl_req>
#4172: FILE: drivers/isdn/mISDN/socket.c:294:
+	struct mISDN_ctrl_req	cq;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4189: FILE: drivers/isdn/mISDN/socket.c:311:
+			list_for_each_entry_safe(bchan, next,
+				&_pms(sk)->dev->bchannels, list) {

CHECK:BRACES: Unbalanced braces around else statement
#4196: FILE: drivers/isdn/mISDN/socket.c:318:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4198: FILE: drivers/isdn/mISDN/socket.c:320:
+			err = _pms(sk)->dev->D.ctrl(&_pms(sk)->dev->D,
+				CONTROL_CHANNEL, &cq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4214: FILE: drivers/isdn/mISDN/socket.c:336:
+		err = _pms(sk)->dev->teimgr->ctrl(_pms(sk)->dev->teimgr,
+		    CONTROL_CHANNEL, &val);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4228: FILE: drivers/isdn/mISDN/socket.c:350:
+^Iint ^I^I^Ierr = 0, id;$

CHECK:CAMELCASE: Avoid CamelCase: <mISDNversion>
#4231: FILE: drivers/isdn/mISDN/socket.c:353:
+	struct mISDNversion	ver;

CHECK:BRACES: braces {} should be used on all arms of this statement
#4252: FILE: drivers/isdn/mISDN/socket.c:374:
+		if (dev) {
[...]
+		} else
[...]

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_devinfo>
#4253: FILE: drivers/isdn/mISDN/socket.c:375:
+			struct mISDN_devinfo di;

CHECK:CAMELCASE: Avoid CamelCase: <Dprotocols>
#4256: FILE: drivers/isdn/mISDN/socket.c:378:
+			di.Dprotocols = dev->Dprotocols;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4260: FILE: drivers/isdn/mISDN/socket.c:382:
+			memcpy(di.channelmap, dev->channelmap,
+				MISDN_CHMAP_SIZE * 4);

CHECK:BRACES: Unbalanced braces around else statement
#4265: FILE: drivers/isdn/mISDN/socket.c:387:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4271: FILE: drivers/isdn/mISDN/socket.c:393:
+			err = data_sock_ioctl_bound(sk, cmd,
+				(void __user *)arg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4279: FILE: drivers/isdn/mISDN/socket.c:401:
+static int data_sock_setsockopt(struct socket *sock, int level, int optname,
+	char __user *optval, int len)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4285: FILE: drivers/isdn/mISDN/socket.c:407:
+		printk(KERN_DEBUG "%s(%p, %d, %x, %p, %d)\n", __func__, sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4286: FILE: drivers/isdn/mISDN/socket.c:408:
+		printk(KERN_DEBUG "%s(%p, %d, %x, %p, %d)\n", __func__, sock,
+		    level, optname, optval, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4311: FILE: drivers/isdn/mISDN/socket.c:433:
+static int data_sock_getsockopt(struct socket *sock, int level, int optname,
+	char __user *optval, int __user *optlen)

CHECK:SPACING: No space is necessary after a cast
#4339: FILE: drivers/isdn/mISDN/socket.c:461:
+	struct sockaddr_mISDN *maddr = (struct sockaddr_mISDN *) addr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4344: FILE: drivers/isdn/mISDN/socket.c:466:
+		printk(KERN_DEBUG "%s(%p) sk=%p\n", __func__, sock, sk);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4371: FILE: drivers/isdn/mISDN/socket.c:493:
+		err = connect_layer1(_pms(sk)->dev, &_pms(sk)->ch,
+		    sk->sk_protocol, maddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4378: FILE: drivers/isdn/mISDN/socket.c:500:
+		err = create_l2entity(_pms(sk)->dev, &_pms(sk)->ch,
+		    sk->sk_protocol, maddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4387: FILE: drivers/isdn/mISDN/socket.c:509:
+		err = connect_Bstack(_pms(sk)->dev, &_pms(sk)->ch,
+		    sk->sk_protocol, maddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4404: FILE: drivers/isdn/mISDN/socket.c:526:
+data_sock_getname(struct socket *sock, struct sockaddr *addr,
+    int *addr_len, int peer)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4404: FILE: drivers/isdn/mISDN/socket.c:526:
+    int *addr_len, int peer)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4406: FILE: drivers/isdn/mISDN/socket.c:528:
+^Istruct sockaddr_mISDN ^I*maddr = (struct sockaddr_mISDN *) addr;$

CHECK:SPACING: No space is necessary after a cast
#4406: FILE: drivers/isdn/mISDN/socket.c:528:
+	struct sockaddr_mISDN 	*maddr = (struct sockaddr_mISDN *) addr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4473: FILE: drivers/isdn/mISDN/socket.c:595:
+	printk(KERN_DEBUG "%s(%p) sk=%p\n", __func__, sock, sk);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4487: FILE: drivers/isdn/mISDN/socket.c:609:
+^Iint ^I^I^Ierr = 0, id;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#4510: FILE: drivers/isdn/mISDN/socket.c:632:
+		if (dev) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4518: FILE: drivers/isdn/mISDN/socket.c:640:
+			memcpy(di.channelmap, dev->channelmap,
+				MISDN_CHMAP_SIZE * 4);

CHECK:BRACES: Unbalanced braces around else statement
#4523: FILE: drivers/isdn/mISDN/socket.c:645:
+		} else

CHECK:SPACING: No space is necessary after a cast
#4535: FILE: drivers/isdn/mISDN/socket.c:657:
+	struct sockaddr_mISDN *maddr = (struct sockaddr_mISDN *) addr;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4581: FILE: drivers/isdn/mISDN/socket.c:703:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_create>
#4606: FILE: drivers/isdn/mISDN/socket.c:728:
+mISDN_sock_create(struct net *net, struct socket *sock, int proto)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_sock_family_ops>
#4636: FILE: drivers/isdn/mISDN/socket.c:758:
+net_proto_family mISDN_sock_family_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4650: FILE: drivers/isdn/mISDN/socket.c:772:
+		printk(KERN_ERR "%s: error(%d)\n", __func__, err);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4666: FILE: drivers/isdn/mISDN/stack.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4695: FILE: drivers/isdn/mISDN/stack.c:30:
+		printk(KERN_DEBUG "%s prim(%x) id(%x) %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4696: FILE: drivers/isdn/mISDN/stack.c:31:
+		printk(KERN_DEBUG "%s prim(%x) id(%x) %p\n",
+		    __func__, hh->prim, hh->id, skb);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_queue_message>
#4705: FILE: drivers/isdn/mISDN/stack.c:40:
+mISDN_queue_message(struct mISDNchannel *ch, struct sk_buff *skb)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4741: FILE: drivers/isdn/mISDN/stack.c:76:
+			printk(KERN_WARNING "%s no skb\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4775: FILE: drivers/isdn/mISDN/stack.c:110:
+						printk(KERN_DEBUG

WARNING:SPLIT_STRING: quoted string split across lines
#4777: FILE: drivers/isdn/mISDN/stack.c:112:
+						    "%s ch%d prim(%x) addr(%x)"
+						    " err %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4783: FILE: drivers/isdn/mISDN/stack.c:118:
+				printk(KERN_WARNING "%s ch%d addr %x no mem\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4784: FILE: drivers/isdn/mISDN/stack.c:119:
+				printk(KERN_WARNING "%s ch%d addr %x no mem\n",
+				    __func__, ch->nr, ch->addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4801: FILE: drivers/isdn/mISDN/stack.c:136:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4820: FILE: drivers/isdn/mISDN/stack.c:155:
+		printk(KERN_DEBUG "%s prim(%x) id(%x) %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4821: FILE: drivers/isdn/mISDN/stack.c:156:
+		printk(KERN_DEBUG "%s prim(%x) id(%x) %p\n",
+		    __func__, hh->prim, hh->id, skb);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4837: FILE: drivers/isdn/mISDN/stack.c:172:
+			return ch->send(ch, skb);
+		else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4838: FILE: drivers/isdn/mISDN/stack.c:173:
+			printk(KERN_WARNING

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4846: FILE: drivers/isdn/mISDN/stack.c:181:
+			return ch->send(ch, skb);
+		else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4847: FILE: drivers/isdn/mISDN/stack.c:182:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4852: FILE: drivers/isdn/mISDN/stack.c:187:
+		printk(KERN_WARNING "%s: dev(%s) prim %x not delivered\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4853: FILE: drivers/isdn/mISDN/stack.c:188:
+		printk(KERN_WARNING "%s: dev(%s) prim %x not delivered\n",
+		    __func__, st->dev->name, hh->prim);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNStackd>
#4864: FILE: drivers/isdn/mISDN/stack.c:199:
+mISDNStackd(void *data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4877: FILE: drivers/isdn/mISDN/stack.c:212:
+		printk(KERN_DEBUG "mISDNStackd %s started\n", st->dev->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDNStackd', this function's name, in a string
#4877: FILE: drivers/isdn/mISDN/stack.c:212:
+		printk(KERN_DEBUG "mISDNStackd %s started\n", st->dev->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "st->notify"
#4879: FILE: drivers/isdn/mISDN/stack.c:214:
+	if (st->notify != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#4887: FILE: drivers/isdn/mISDN/stack.c:222:
+		if (unlikely(test_bit(mISDN_STACK_STOPPED, &st->status))) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4890: FILE: drivers/isdn/mISDN/stack.c:225:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4896: FILE: drivers/isdn/mISDN/stack.c:231:
+				test_and_clear_bit(mISDN_STACK_WORK,
+					&st->status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4902: FILE: drivers/isdn/mISDN/stack.c:237:
+				test_and_set_bit(mISDN_STACK_WORK,
+				    &st->status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4910: FILE: drivers/isdn/mISDN/stack.c:245:
+					printk(KERN_DEBUG

WARNING:SPLIT_STRING: quoted string split across lines
#4912: FILE: drivers/isdn/mISDN/stack.c:247:
+					    "%s: %s prim(%x) id(%x) "
+					    "send call(%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4920: FILE: drivers/isdn/mISDN/stack.c:255:
+			if (unlikely(test_bit(mISDN_STACK_STOPPED,
+			    &st->status))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4922: FILE: drivers/isdn/mISDN/stack.c:257:
+				test_and_clear_bit(mISDN_STACK_WORK,
+				    &st->status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4924: FILE: drivers/isdn/mISDN/stack.c:259:
+				test_and_clear_bit(mISDN_STACK_RUNNING,
+				    &st->status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4940: FILE: drivers/isdn/mISDN/stack.c:275:
+				test_and_set_bit(mISDN_STACK_WORK,
+				    &st->status);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "st->notify"
#4944: FILE: drivers/isdn/mISDN/stack.c:279:
+		if (st->notify != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4955: FILE: drivers/isdn/mISDN/stack.c:290:
+			printk(KERN_DEBUG "%s: %s wake status %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4956: FILE: drivers/isdn/mISDN/stack.c:291:
+			printk(KERN_DEBUG "%s: %s wake status %08lx\n",
+			    __func__, st->dev->name, st->status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4969: FILE: drivers/isdn/mISDN/stack.c:304:
+	printk(KERN_DEBUG "mISDNStackd daemon for %s proceed %d "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDNStackd', this function's name, in a string
#4969: FILE: drivers/isdn/mISDN/stack.c:304:
+	printk(KERN_DEBUG "mISDNStackd daemon for %s proceed %d "

WARNING:SPLIT_STRING: quoted string split across lines
#4970: FILE: drivers/isdn/mISDN/stack.c:305:
+	printk(KERN_DEBUG "mISDNStackd daemon for %s proceed %d "
+	    "msg %d sleep %d stopped\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4972: FILE: drivers/isdn/mISDN/stack.c:307:
+	printk(KERN_DEBUG

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDNStackd', this function's name, in a string
#4973: FILE: drivers/isdn/mISDN/stack.c:308:
+	    "mISDNStackd daemon for %s utime(%ld) stime(%ld)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4975: FILE: drivers/isdn/mISDN/stack.c:310:
+	printk(KERN_DEBUG

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDNStackd', this function's name, in a string
#4976: FILE: drivers/isdn/mISDN/stack.c:311:
+	    "mISDNStackd daemon for %s nvcsw(%ld) nivcsw(%ld)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4978: FILE: drivers/isdn/mISDN/stack.c:313:
+	printk(KERN_DEBUG "mISDNStackd daemon for %s killed now\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mISDNStackd', this function's name, in a string
#4978: FILE: drivers/isdn/mISDN/stack.c:313:
+	printk(KERN_DEBUG "mISDNStackd daemon for %s killed now\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4979: FILE: drivers/isdn/mISDN/stack.c:314:
+	printk(KERN_DEBUG "mISDNStackd daemon for %s killed now\n",
+	    st->dev->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "st->notify"
#4987: FILE: drivers/isdn/mISDN/stack.c:322:
+	if (st->notify != NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*newst)...) over kzalloc(sizeof(struct mISDNstack)...)
#5039: FILE: drivers/isdn/mISDN/stack.c:374:
+	newst = kzalloc(sizeof(struct mISDNstack), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5041: FILE: drivers/isdn/mISDN/stack.c:376:
+		printk(KERN_ERR "kmalloc mISDN_stack failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#5041: FILE: drivers/isdn/mISDN/stack.c:376:
+	if (!newst) {
+		printk(KERN_ERR "kmalloc mISDN_stack failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5054: FILE: drivers/isdn/mISDN/stack.c:389:
+		printk(KERN_ERR "kmalloc teimanager failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5069: FILE: drivers/isdn/mISDN/stack.c:404:
+		printk(KERN_DEBUG "%s: st(%s)\n", __func__, newst->dev->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5072: FILE: drivers/isdn/mISDN/stack.c:407:
+	newst->thread = kthread_run(mISDNStackd, (void *)newst, "mISDN_%s",
+		newst->dev->name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#5073: FILE: drivers/isdn/mISDN/stack.c:408:
+	if (IS_ERR(newst->thread)) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5075: FILE: drivers/isdn/mISDN/stack.c:410:
+		printk(KERN_ERR

CHECK:BRACES: Unbalanced braces around else statement
#5080: FILE: drivers/isdn/mISDN/stack.c:415:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5087: FILE: drivers/isdn/mISDN/stack.c:422:
+connect_layer1(struct mISDNdevice *dev, struct mISDNchannel *ch,
+		u_int protocol, struct sockaddr_mISDN *adr)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5093: FILE: drivers/isdn/mISDN/stack.c:428:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5095: FILE: drivers/isdn/mISDN/stack.c:430:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5096: FILE: drivers/isdn/mISDN/stack.c:431:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
+			__func__, dev->name, protocol, adr->dev, adr->channel,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5106: FILE: drivers/isdn/mISDN/stack.c:441:
+		if (!list_empty(&dev->D.st->layer2)
+			&& dev->D.protocol != protocol)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5109: FILE: drivers/isdn/mISDN/stack.c:444:
+		if (!hlist_empty(&dev->D.st->l1sock.head)
+			&& dev->D.protocol != protocol)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5118: FILE: drivers/isdn/mISDN/stack.c:453:
+		printk(KERN_DEBUG "%s: ret 1 %d\n", __func__, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5133: FILE: drivers/isdn/mISDN/stack.c:468:
+connect_Bstack(struct mISDNdevice *dev, struct mISDNchannel *ch,
+    u_int protocol, struct sockaddr_mISDN *adr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5133: FILE: drivers/isdn/mISDN/stack.c:468:
+    u_int protocol, struct sockaddr_mISDN *adr)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5140: FILE: drivers/isdn/mISDN/stack.c:475:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5141: FILE: drivers/isdn/mISDN/stack.c:476:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
+			__func__, dev->name, protocol,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5190: FILE: drivers/isdn/mISDN/stack.c:525:
+create_l2entity(struct mISDNdevice *dev, struct mISDNchannel *ch,
+    u_int protocol, struct sockaddr_mISDN *adr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5190: FILE: drivers/isdn/mISDN/stack.c:525:
+    u_int protocol, struct sockaddr_mISDN *adr)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5196: FILE: drivers/isdn/mISDN/stack.c:531:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5197: FILE: drivers/isdn/mISDN/stack.c:532:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
+			__func__, dev->name, protocol,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5212: FILE: drivers/isdn/mISDN/stack.c:547:
+		if (!list_empty(&dev->D.st->layer2)
+			&& dev->D.protocol != protocol)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5215: FILE: drivers/isdn/mISDN/stack.c:550:
+		if (!hlist_empty(&dev->D.st->l1sock.head)
+			&& dev->D.protocol != protocol)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5223: FILE: drivers/isdn/mISDN/stack.c:558:
+		printk(KERN_DEBUG "%s: ret 1 %d\n", __func__, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5230: FILE: drivers/isdn/mISDN/stack.c:565:
+		printk(KERN_DEBUG "%s: ret 2 %d\n", __func__, err);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'protocol == ISDN_P_LAPD_NT'
#5232: FILE: drivers/isdn/mISDN/stack.c:567:
+			if ((protocol == ISDN_P_LAPD_NT) && !rq.ch)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5253: FILE: drivers/isdn/mISDN/stack.c:588:
+		printk(KERN_WARNING "%s: no stack\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5257: FILE: drivers/isdn/mISDN/stack.c:592:
+		printk(KERN_DEBUG "%s: st(%s) protocol(%x)\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5258: FILE: drivers/isdn/mISDN/stack.c:593:
+		printk(KERN_DEBUG "%s: st(%s) protocol(%x)\n", __func__,
+		    ch->st->dev->name, ch->protocol);

CHECK:BRACES: Unbalanced braces around else statement
#5285: FILE: drivers/isdn/mISDN/stack.c:620:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5286: FILE: drivers/isdn/mISDN/stack.c:621:
+			printk(KERN_WARNING "%s: no l2 channel\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5287: FILE: drivers/isdn/mISDN/stack.c:622:
+			printk(KERN_WARNING "%s: no l2 channel\n",
+			    __func__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#5291: FILE: drivers/isdn/mISDN/stack.c:626:
+		if (pch) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5293: FILE: drivers/isdn/mISDN/stack.c:628:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5294: FILE: drivers/isdn/mISDN/stack.c:629:
+			printk(KERN_WARNING "%s: no l2 channel\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5295: FILE: drivers/isdn/mISDN/stack.c:630:
+			printk(KERN_WARNING "%s: no l2 channel\n",
+			    __func__);

WARNING:RETURN_VOID: void function return statements are not generally useful
#5301: FILE: drivers/isdn/mISDN/stack.c:636:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5310: FILE: drivers/isdn/mISDN/stack.c:645:
+		printk(KERN_DEBUG "%s: st(%s)\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5311: FILE: drivers/isdn/mISDN/stack.c:646:
+		printk(KERN_DEBUG "%s: st(%s)\n", __func__,
+		    st->dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5316: FILE: drivers/isdn/mISDN/stack.c:651:
+			printk(KERN_WARNING "%s: notifier in use\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5317: FILE: drivers/isdn/mISDN/stack.c:652:
+			printk(KERN_WARNING "%s: notifier in use\n",
+			    __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5327: FILE: drivers/isdn/mISDN/stack.c:662:
+		printk(KERN_WARNING "%s: layer2 list not empty\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5328: FILE: drivers/isdn/mISDN/stack.c:663:
+		printk(KERN_WARNING "%s: layer2 list not empty\n",
+		    __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5330: FILE: drivers/isdn/mISDN/stack.c:665:
+		printk(KERN_WARNING "%s: layer1 list not empty\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5331: FILE: drivers/isdn/mISDN/stack.c:666:
+		printk(KERN_WARNING "%s: layer1 list not empty\n",
+		    __func__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5346: FILE: drivers/isdn/mISDN/tei.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5381: FILE: drivers/isdn/mISDN/tei.c:36:
+static ^Iu_int^I*debug;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5392: FILE: drivers/isdn/mISDN/tei.c:47:
+};
+#define DEACT_STATE_COUNT (ST_L1_ACTIV+1)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5392: FILE: drivers/isdn/mISDN/tei.c:47:
+#define DEACT_STATE_COUNT (ST_L1_ACTIV+1)
                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <strDeactState>
#5394: FILE: drivers/isdn/mISDN/tei.c:49:
+static char *strDeactState[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5395: FILE: drivers/isdn/mISDN/tei.c:50:
+static char *strDeactState[] =
+{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5410: FILE: drivers/isdn/mISDN/tei.c:65:
+#define DEACT_EVENT_COUNT (EV_DATIMER+1)
                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <strDeactEvent>
#5412: FILE: drivers/isdn/mISDN/tei.c:67:
+static char *strDeactEvent[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5413: FILE: drivers/isdn/mISDN/tei.c:68:
+static char *strDeactEvent[] =
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5431: FILE: drivers/isdn/mISDN/tei.c:86:
+	printk(KERN_DEBUG "mgr(%d): ", mgr->ch.st->dev->id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5433: FILE: drivers/isdn/mISDN/tei.c:88:
+	printk("\n");

WARNING:TYPO_SPELLING: 'activ' may be misspelled - perhaps 'active'?
#5463: FILE: drivers/isdn/mISDN/tei.c:118:
+			/* have still activ TEI */
 			              ^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5483: FILE: drivers/isdn/mISDN/tei.c:138:
+
+}

WARNING:TYPO_SPELLING: 'activ' may be misspelled - perhaps 'active'?
#5496: FILE: drivers/isdn/mISDN/tei.c:151:
+			/* have still activ TEI */
 			              ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5506: FILE: drivers/isdn/mISDN/tei.c:161:
+	_queue_data(&mgr->ch, PH_DEACTIVATE_REQ, MISDN_ID_ANY, 0, NULL,
+	    GFP_ATOMIC);

CHECK:CAMELCASE: Avoid CamelCase: <DeactFnList>
#5509: FILE: drivers/isdn/mISDN/tei.c:164:
+static struct FsmNode DeactFnList[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5510: FILE: drivers/isdn/mISDN/tei.c:165:
+static struct FsmNode DeactFnList[] =
+{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5525: FILE: drivers/isdn/mISDN/tei.c:180:
+#define TEI_STATE_COUNT (ST_TEI_IDVERIFY+1)
                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <strTeiState>
#5527: FILE: drivers/isdn/mISDN/tei.c:182:
+static char *strTeiState[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5528: FILE: drivers/isdn/mISDN/tei.c:183:
+static char *strTeiState[] =
+{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5546: FILE: drivers/isdn/mISDN/tei.c:201:
+#define TEI_EVENT_COUNT (EV_TIMER+1)
                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <strTeiEvent>
#5548: FILE: drivers/isdn/mISDN/tei.c:203:
+static char *strTeiEvent[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5549: FILE: drivers/isdn/mISDN/tei.c:204:
+static char *strTeiEvent[] =
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5570: FILE: drivers/isdn/mISDN/tei.c:225:
+	printk(KERN_DEBUG "tei(%d): ", tm->l2->tei);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5572: FILE: drivers/isdn/mISDN/tei.c:227:
+	printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5576: FILE: drivers/isdn/mISDN/tei.c:231:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5587: FILE: drivers/isdn/mISDN/tei.c:242:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5597: FILE: drivers/isdn/mISDN/tei.c:252:
+	printk(KERN_WARNING "%s: more as 63 layer2 for one device\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5598: FILE: drivers/isdn/mISDN/tei.c:253:
+	printk(KERN_WARNING "%s: more as 63 layer2 for one device\n",
+	    __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5624: FILE: drivers/isdn/mISDN/tei.c:279:
+	printk(KERN_WARNING "%s: more as 63 dynamic tei for one device\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5625: FILE: drivers/isdn/mISDN/tei.c:280:
+	printk(KERN_WARNING "%s: more as 63 dynamic tei for one device\n",
+	    __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5646: FILE: drivers/isdn/mISDN/tei.c:301:
+		printk(KERN_WARNING "%s: err=%d\n", __func__, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5716: FILE: drivers/isdn/mISDN/tei.c:371:
+		_queue_data(&mgr->ch, PH_ACTIVATE_REQ, MISDN_ID_ANY, 0,
+		    NULL, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5729: FILE: drivers/isdn/mISDN/tei.c:384:
+		_queue_data(&mgr->ch, PH_ACTIVATE_REQ, MISDN_ID_ANY, 0,
+		    NULL, GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l2->sapi == 0'
#5758: FILE: drivers/isdn/mISDN/tei.c:413:
+		if ((l2->sapi == 0) && (l2->tei > 0) &&
+		    (l2->tei != GROUP_TEI) && (l2->tei == tei))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l2->tei > 0'
#5758: FILE: drivers/isdn/mISDN/tei.c:413:
+		if ((l2->sapi == 0) && (l2->tei > 0) &&
+		    (l2->tei != GROUP_TEI) && (l2->tei == tei))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l2->tei != GROUP_TEI'
#5758: FILE: drivers/isdn/mISDN/tei.c:413:
+		if ((l2->sapi == 0) && (l2->tei > 0) &&
+		    (l2->tei != GROUP_TEI) && (l2->tei == tei))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l2->tei == tei'
#5758: FILE: drivers/isdn/mISDN/tei.c:413:
+		if ((l2->sapi == 0) && (l2->tei > 0) &&
+		    (l2->tei != GROUP_TEI) && (l2->tei == tei))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5785: FILE: drivers/isdn/mISDN/tei.c:440:
+	skb = _alloc_mISDN_skb(PH_DATA_REQ, new_id(mgr),
+	    8, bp, GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5787: FILE: drivers/isdn/mISDN/tei.c:442:
+		printk(KERN_WARNING "%s: no skb for tei msg\n", __func__);

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#5800: FILE: drivers/isdn/mISDN/tei.c:455:
+			"assign request for allready assigned tei %d",
 			                    ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#5822: FILE: drivers/isdn/mISDN/tei.c:477:
+	ri = ((unsigned int) *dp++ << 8);

CHECK:SPACING: No space is necessary after a cast
#5851: FILE: drivers/isdn/mISDN/tei.c:506:
+	ri = ((unsigned int) *dp++ << 8);

CHECK:SPACING: No space is necessary after a cast
#5875: FILE: drivers/isdn/mISDN/tei.c:530:
+	ri = ((unsigned int) *dp++ << 8);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5891: FILE: drivers/isdn/mISDN/tei.c:546:
+	tei = *(dp+3) >> 1;
 	          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tm->l2->tei != GROUP_TEI'
#5894: FILE: drivers/isdn/mISDN/tei.c:549:
+	if ((tm->l2->tei != GROUP_TEI) && ((tei == GROUP_TEI) ||
+	    (tei == tm->l2->tei))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tei == GROUP_TEI'
#5894: FILE: drivers/isdn/mISDN/tei.c:549:
+	if ((tm->l2->tei != GROUP_TEI) && ((tei == GROUP_TEI) ||
+	    (tei == tm->l2->tei))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tei == tm->l2->tei'
#5894: FILE: drivers/isdn/mISDN/tei.c:549:
+	if ((tm->l2->tei != GROUP_TEI) && ((tei == GROUP_TEI) ||
+	    (tei == tm->l2->tei))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5895: FILE: drivers/isdn/mISDN/tei.c:550:
+	if ((tm->l2->tei != GROUP_TEI) && ((tei == GROUP_TEI) ||
+	    (tei == tm->l2->tei))) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5909: FILE: drivers/isdn/mISDN/tei.c:564:
+	tei = *(dp+3) >> 1;
 	          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tm->l2->tei != GROUP_TEI'
#5912: FILE: drivers/isdn/mISDN/tei.c:567:
+	if ((tm->l2->tei != GROUP_TEI) &&
+	    ((tei == GROUP_TEI) || (tei == tm->l2->tei))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tei == GROUP_TEI'
#5912: FILE: drivers/isdn/mISDN/tei.c:567:
+	if ((tm->l2->tei != GROUP_TEI) &&
+	    ((tei == GROUP_TEI) || (tei == tm->l2->tei))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tei == tm->l2->tei'
#5912: FILE: drivers/isdn/mISDN/tei.c:567:
+	if ((tm->l2->tei != GROUP_TEI) &&
+	    ((tei == GROUP_TEI) || (tei == tm->l2->tei))) {

CHECK:CAMELCASE: Avoid CamelCase: <TeiFnListUser>
#5973: FILE: drivers/isdn/mISDN/tei.c:628:
+static struct FsmNode TeiFnListUser[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5974: FILE: drivers/isdn/mISDN/tei.c:629:
+static struct FsmNode TeiFnListUser[] =
+{

CHECK:SPACING: No space is necessary after a cast
#6008: FILE: drivers/isdn/mISDN/tei.c:663:
+	tm->ri = ((unsigned int) *dp++ << 8);

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#6069: FILE: drivers/isdn/mISDN/tei.c:724:
+			    "check req for tei %d sucessful\n", tm->l2->tei);
 			                          ^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <TeiFnListNet>
#6089: FILE: drivers/isdn/mISDN/tei.c:744:
+static struct FsmNode TeiFnListNet[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#6090: FILE: drivers/isdn/mISDN/tei.c:745:
+static struct FsmNode TeiFnListNet[] =
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6136: FILE: drivers/isdn/mISDN/tei.c:791:
+		printk(KERN_WARNING "%s:no memory for layer2\n", __func__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*l2->tm)...) over kzalloc(sizeof(struct teimgr)...)
#6139: FILE: drivers/isdn/mISDN/tei.c:794:
+	l2->tm = kzalloc(sizeof(struct teimgr), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6142: FILE: drivers/isdn/mISDN/tei.c:797:
+		printk(KERN_WARNING "%s:no memory for teimgr\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6160: FILE: drivers/isdn/mISDN/tei.c:815:
+		printk(KERN_WARNING "%s:no free id\n", __func__);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#6162: FILE: drivers/isdn/mISDN/tei.c:817:
+		return NULL;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6184: FILE: drivers/isdn/mISDN/tei.c:839:
+		printk(KERN_WARNING "%s:No free tei\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6207: FILE: drivers/isdn/mISDN/tei.c:862:
+			printk(KERN_DEBUG "%s: short mgr frame %d/8\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6208: FILE: drivers/isdn/mISDN/tei.c:863:
+			printk(KERN_DEBUG "%s: short mgr frame %d/8\n",
+			    __func__, skb->len);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#6211: FILE: drivers/isdn/mISDN/tei.c:866:
+	if (*debug  & DEBUG_L2_TEI)
[...]
+	if ((skb->data[0] >> 2) != TEI_SAPI) /* not for us */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6265: FILE: drivers/isdn/mISDN/tei.c:920:
+		printk(KERN_DEBUG "%s: cmd(%x)\n", __func__, cmd);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6310: FILE: drivers/isdn/mISDN/tei.c:965:
+^Iu_long ^I^Iopt = 0;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6315: FILE: drivers/isdn/mISDN/tei.c:970:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6316: FILE: drivers/isdn/mISDN/tei.c:971:
+		printk(KERN_DEBUG "%s: %s proto(%x) adr(%d %d %d %d)\n",
+			__func__, mgr->ch.st->dev->name, crq->protocol,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'crq->adr.tei != 0'
#6330: FILE: drivers/isdn/mISDN/tei.c:985:
+		if ((crq->adr.tei != 0) && (crq->adr.tei != 127))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'crq->adr.tei != 127'
#6330: FILE: drivers/isdn/mISDN/tei.c:985:
+		if ((crq->adr.tei != 0) && (crq->adr.tei != 127))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6333: FILE: drivers/isdn/mISDN/tei.c:988:
+			printk(KERN_WARNING

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'crq->adr.tei >= 64'
#6341: FILE: drivers/isdn/mISDN/tei.c:996:
+		if ((crq->adr.tei >= 64) && (crq->adr.tei < GROUP_TEI))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'crq->adr.tei < GROUP_TEI'
#6341: FILE: drivers/isdn/mISDN/tei.c:996:
+		if ((crq->adr.tei >= 64) && (crq->adr.tei < GROUP_TEI))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'crq->protocol == ISDN_P_LAPD_NT'
#6352: FILE: drivers/isdn/mISDN/tei.c:1007:
+	if ((crq->protocol == ISDN_P_LAPD_NT) && (crq->adr.tei == 127)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'crq->adr.tei == 127'
#6352: FILE: drivers/isdn/mISDN/tei.c:1007:
+	if ((crq->protocol == ISDN_P_LAPD_NT) && (crq->adr.tei == 127)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6368: FILE: drivers/isdn/mISDN/tei.c:1023:
+	l2 = create_l2(crq->ch, crq->protocol, (u_int)opt,
+		(u_long)crq->adr.tei);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*l2->tm)...) over kzalloc(sizeof(struct teimgr)...)
#6371: FILE: drivers/isdn/mISDN/tei.c:1026:
+	l2->tm = kzalloc(sizeof(struct teimgr), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6374: FILE: drivers/isdn/mISDN/tei.c:1029:
+		printk(KERN_ERR "kmalloc teimgr failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6416: FILE: drivers/isdn/mISDN/tei.c:1071:
+		printk(KERN_DEBUG "%s: prim(%x) id(%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6417: FILE: drivers/isdn/mISDN/tei.c:1072:
+		printk(KERN_DEBUG "%s: prim(%x) id(%x)\n",
+		    __func__, hh->prim, hh->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6499: FILE: drivers/isdn/mISDN/tei.c:1154:
+		printk(KERN_DEBUG "%s: prim(%x) id(%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6500: FILE: drivers/isdn/mISDN/tei.c:1155:
+		printk(KERN_DEBUG "%s: prim(%x) id(%x)\n",
+		    __func__, hh->prim, hh->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6553: FILE: drivers/isdn/mISDN/tei.c:1208:
+		printk(KERN_DEBUG "%s(%x, %p)\n", __func__, cmd, arg);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6594: FILE: drivers/isdn/mISDN/tei.c:1249:
+				if (ret) {
[...]
+				} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6596: FILE: drivers/isdn/mISDN/tei.c:1251:
+						printk(KERN_DEBUG

WARNING:SPLIT_STRING: quoted string split across lines
#6598: FILE: drivers/isdn/mISDN/tei.c:1253:
+						    "%s ch%d prim(%x) addr(%x)"
+						    " err %d\n",

CHECK:BRACES: Unbalanced braces around else statement
#6601: FILE: drivers/isdn/mISDN/tei.c:1256:
+				} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6604: FILE: drivers/isdn/mISDN/tei.c:1259:
+				printk(KERN_WARNING "%s ch%d addr %x no mem\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6605: FILE: drivers/isdn/mISDN/tei.c:1260:
+				printk(KERN_WARNING "%s ch%d addr %x no mem\n",
+				    __func__, ch->nr, ch->addr);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6622: FILE: drivers/isdn/mISDN/tei.c:1277:
+{
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mgr)...) over kzalloc(sizeof(struct manager)...)
#6631: FILE: drivers/isdn/mISDN/tei.c:1286:
+	mgr = kzalloc(sizeof(struct manager), GFP_KERNEL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6692: FILE: drivers/isdn/mISDN/timerdev.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6720: FILE: drivers/isdn/mISDN/timerdev.c:29:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <mISDNtimerdev>
#6721: FILE: drivers/isdn/mISDN/timerdev.c:30:
+struct mISDNtimerdev {

CHECK:CAMELCASE: Avoid CamelCase: <mISDNtimer>
#6730: FILE: drivers/isdn/mISDN/timerdev.c:39:
+struct mISDNtimer {

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_open>
#6738: FILE: drivers/isdn/mISDN/timerdev.c:47:
+mISDN_open(struct inode *ino, struct file *filep)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6743: FILE: drivers/isdn/mISDN/timerdev.c:52:
+		printk(KERN_DEBUG "%s(%p,%p)\n", __func__, ino, filep);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#6744: FILE: drivers/isdn/mISDN/timerdev.c:53:
+	dev = kmalloc(sizeof(struct mISDNtimerdev) , GFP_KERNEL);
 	                                           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct mISDNtimerdev)...)
#6744: FILE: drivers/isdn/mISDN/timerdev.c:53:
+	dev = kmalloc(sizeof(struct mISDNtimerdev) , GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_close>
#6759: FILE: drivers/isdn/mISDN/timerdev.c:68:
+mISDN_close(struct inode *ino, struct file *filep)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6765: FILE: drivers/isdn/mISDN/timerdev.c:74:
+		printk(KERN_DEBUG "%s(%p,%p)\n", __func__, ino, filep);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_read>
#6779: FILE: drivers/isdn/mISDN/timerdev.c:88:
+mISDN_read(struct file *filep, char *buf, size_t count, loff_t *off)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6787: FILE: drivers/isdn/mISDN/timerdev.c:96:
+		printk(KERN_DEBUG "%s(%p, %p, %d, %p)\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6788: FILE: drivers/isdn/mISDN/timerdev.c:97:
+		printk(KERN_DEBUG "%s(%p, %p, %d, %p)\n", __func__,
+			filep, buf, (int)count, off);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->work == 0'
#6792: FILE: drivers/isdn/mISDN/timerdev.c:101:
+	if (list_empty(&dev->expired) && (dev->work == 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6796: FILE: drivers/isdn/mISDN/timerdev.c:105:
+		wait_event_interruptible(dev->wait, (dev->work ||
+		    !list_empty(&dev->expired)));

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_llseek>
#6819: FILE: drivers/isdn/mISDN/timerdev.c:128:
+mISDN_llseek(struct file *filep, loff_t offset, int orig)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_write>
#6825: FILE: drivers/isdn/mISDN/timerdev.c:134:
+mISDN_write(struct file *filep, const char *buf, size_t count, loff_t *off)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_poll>
#6831: FILE: drivers/isdn/mISDN/timerdev.c:140:
+mISDN_poll(struct file *filep, poll_table *wait)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6837: FILE: drivers/isdn/mISDN/timerdev.c:146:
+		printk(KERN_DEBUG "%s(%p, %p)\n", __func__, filep, wait);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6844: FILE: drivers/isdn/mISDN/timerdev.c:153:
+			printk(KERN_DEBUG "%s work(%d) empty(%d)\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6845: FILE: drivers/isdn/mISDN/timerdev.c:154:
+			printk(KERN_DEBUG "%s work(%d) empty(%d)\n", __func__,
+				dev->work, list_empty(&dev->expired));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6865: FILE: drivers/isdn/mISDN/timerdev.c:174:
+^Iint ^I^I^Iid;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*timer)...) over kzalloc(sizeof(struct mISDNtimer)...)
#6874: FILE: drivers/isdn/mISDN/timerdev.c:183:
+		timer = kzalloc(sizeof(struct mISDNtimer), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#6885: FILE: drivers/isdn/mISDN/timerdev.c:194:
+		timer->tl.function = (void *) dev_expire_timer;

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_ioctl>
#6917: FILE: drivers/isdn/mISDN/timerdev.c:226:
+mISDN_ioctl(struct inode *inode, struct file *filep, unsigned int cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6918: FILE: drivers/isdn/mISDN/timerdev.c:227:
+mISDN_ioctl(struct inode *inode, struct file *filep, unsigned int cmd,
+    unsigned long arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6918: FILE: drivers/isdn/mISDN/timerdev.c:227:
+    unsigned long arg)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6923: FILE: drivers/isdn/mISDN/timerdev.c:232:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6925: FILE: drivers/isdn/mISDN/timerdev.c:234:
+		printk(KERN_DEBUG "%s(%p, %x, %lx)\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6926: FILE: drivers/isdn/mISDN/timerdev.c:235:
+		printk(KERN_DEBUG "%s(%p, %x, %lx)\n", __func__,
+		    filep, cmd, arg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6935: FILE: drivers/isdn/mISDN/timerdev.c:244:
+			printk(KERN_DEBUG "%s add %d id %d\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6936: FILE: drivers/isdn/mISDN/timerdev.c:245:
+			printk(KERN_DEBUG "%s add %d id %d\n", __func__,
+			    tout, id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6950: FILE: drivers/isdn/mISDN/timerdev.c:259:
+			printk(KERN_DEBUG "%s del id %d\n", __func__, id);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_fops>
#6961: FILE: drivers/isdn/mISDN/timerdev.c:270:
+static struct file_operations mISDN_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#6961: FILE: drivers/isdn/mISDN/timerdev.c:270:
+static struct file_operations mISDN_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6985: FILE: drivers/isdn/mISDN/timerdev.c:294:
+		printk(KERN_WARNING "mISDN: Could not register timer device\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6999: FILE: include/linux/mISDNhw.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#7077: FILE: include/linux/mISDNhw.h:79:
+#define schedule_event(s, ev)	do { \
+					test_and_set_bit(ev, &((s)->Flags)); \
+					schedule_work(&((s)->workq)); \
+				} while (0)

WARNING:SPACING: Unnecessary space before function pointer arguments
#7086: FILE: include/linux/mISDNhw.h:88:
+	void			(*phfunc) (struct dchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7086: FILE: include/linux/mISDNhw.h:88:
+	void			(*phfunc) (struct dchannel *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7090: FILE: include/linux/mISDNhw.h:92:
+	u_char			(*read_reg) (void *, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7090: FILE: include/linux/mISDNhw.h:92:
+	u_char			(*read_reg) (void *, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char' should also have an identifier name
#7090: FILE: include/linux/mISDNhw.h:92:
+	u_char			(*read_reg) (void *, u_char);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7091: FILE: include/linux/mISDNhw.h:93:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7091: FILE: include/linux/mISDNhw.h:93:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char' should also have an identifier name
#7091: FILE: include/linux/mISDNhw.h:93:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char' should also have an identifier name
#7091: FILE: include/linux/mISDNhw.h:93:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7092: FILE: include/linux/mISDNhw.h:94:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7092: FILE: include/linux/mISDNhw.h:94:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char *' should also have an identifier name
#7092: FILE: include/linux/mISDNhw.h:94:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7092: FILE: include/linux/mISDNhw.h:94:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7093: FILE: include/linux/mISDNhw.h:95:
+	void			(*write_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7093: FILE: include/linux/mISDNhw.h:95:
+	void			(*write_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char *' should also have an identifier name
#7093: FILE: include/linux/mISDNhw.h:95:
+	void			(*write_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7093: FILE: include/linux/mISDNhw.h:95:
+	void			(*write_fifo) (void *, u_char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7113: FILE: include/linux/mISDNhw.h:115:
+extern int	create_l1(struct dchannel *, dchannel_l1callback *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7113: FILE: include/linux/mISDNhw.h:115:
+extern int	create_l1(struct dchannel *, dchannel_l1callback *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dchannel_l1callback *' should also have an identifier name
#7113: FILE: include/linux/mISDNhw.h:115:
+extern int	create_l1(struct dchannel *, dchannel_l1callback *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7142: FILE: include/linux/mISDNhw.h:144:
+extern int	l1_event(struct layer1 *, u_int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct layer1 *' should also have an identifier name
#7142: FILE: include/linux/mISDNhw.h:144:
+extern int	l1_event(struct layer1 *, u_int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#7142: FILE: include/linux/mISDNhw.h:144:
+extern int	l1_event(struct layer1 *, u_int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7144: FILE: include/linux/mISDNhw.h:146:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#7152: FILE: include/linux/mISDNhw.h:154:
+	u_char			(*read_reg) (void *, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7152: FILE: include/linux/mISDNhw.h:154:
+	u_char			(*read_reg) (void *, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char' should also have an identifier name
#7152: FILE: include/linux/mISDNhw.h:154:
+	u_char			(*read_reg) (void *, u_char);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7153: FILE: include/linux/mISDNhw.h:155:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7153: FILE: include/linux/mISDNhw.h:155:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char' should also have an identifier name
#7153: FILE: include/linux/mISDNhw.h:155:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char' should also have an identifier name
#7153: FILE: include/linux/mISDNhw.h:155:
+	void			(*write_reg) (void *, u_char, u_char);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7154: FILE: include/linux/mISDNhw.h:156:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7154: FILE: include/linux/mISDNhw.h:156:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char *' should also have an identifier name
#7154: FILE: include/linux/mISDNhw.h:156:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7154: FILE: include/linux/mISDNhw.h:156:
+	void			(*read_fifo) (void *, u_char *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7155: FILE: include/linux/mISDNhw.h:157:
+	void			(*write_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7155: FILE: include/linux/mISDNhw.h:157:
+	void			(*write_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_char *' should also have an identifier name
#7155: FILE: include/linux/mISDNhw.h:157:
+	void			(*write_fifo) (void *, u_char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7155: FILE: include/linux/mISDNhw.h:157:
+	void			(*write_fifo) (void *, u_char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7175: FILE: include/linux/mISDNhw.h:177:
+extern int	mISDN_initdchannel(struct dchannel *, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7175: FILE: include/linux/mISDNhw.h:177:
+extern int	mISDN_initdchannel(struct dchannel *, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7175: FILE: include/linux/mISDNhw.h:177:
+extern int	mISDN_initdchannel(struct dchannel *, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7175: FILE: include/linux/mISDNhw.h:177:
+extern int	mISDN_initdchannel(struct dchannel *, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7176: FILE: include/linux/mISDNhw.h:178:
+extern int	mISDN_initbchannel(struct bchannel *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bchannel *' should also have an identifier name
#7176: FILE: include/linux/mISDNhw.h:178:
+extern int	mISDN_initbchannel(struct bchannel *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7176: FILE: include/linux/mISDNhw.h:178:
+extern int	mISDN_initbchannel(struct bchannel *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7177: FILE: include/linux/mISDNhw.h:179:
+extern int	mISDN_freedchannel(struct dchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7177: FILE: include/linux/mISDNhw.h:179:
+extern int	mISDN_freedchannel(struct dchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7178: FILE: include/linux/mISDNhw.h:180:
+extern int	mISDN_freebchannel(struct bchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bchannel *' should also have an identifier name
#7178: FILE: include/linux/mISDNhw.h:180:
+extern int	mISDN_freebchannel(struct bchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7179: FILE: include/linux/mISDNhw.h:181:
+extern void	queue_ch_frame(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#7179: FILE: include/linux/mISDNhw.h:181:
+extern void	queue_ch_frame(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#7179: FILE: include/linux/mISDNhw.h:181:
+extern void	queue_ch_frame(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7179: FILE: include/linux/mISDNhw.h:181:
+extern void	queue_ch_frame(struct mISDNchannel *, u_int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#7179: FILE: include/linux/mISDNhw.h:181:
+extern void	queue_ch_frame(struct mISDNchannel *, u_int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7180: FILE: include/linux/mISDNhw.h:182:
+extern void	queue_ch_frame(struct mISDNchannel *, u_int,
+			int, struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7181: FILE: include/linux/mISDNhw.h:183:
+extern int	dchannel_senddata(struct dchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7181: FILE: include/linux/mISDNhw.h:183:
+extern int	dchannel_senddata(struct dchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#7181: FILE: include/linux/mISDNhw.h:183:
+extern int	dchannel_senddata(struct dchannel *, struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7182: FILE: include/linux/mISDNhw.h:184:
+extern int	bchannel_senddata(struct bchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bchannel *' should also have an identifier name
#7182: FILE: include/linux/mISDNhw.h:184:
+extern int	bchannel_senddata(struct bchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#7182: FILE: include/linux/mISDNhw.h:184:
+extern int	bchannel_senddata(struct bchannel *, struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7183: FILE: include/linux/mISDNhw.h:185:
+extern void	recv_Dchannel(struct dchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7183: FILE: include/linux/mISDNhw.h:185:
+extern void	recv_Dchannel(struct dchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7184: FILE: include/linux/mISDNhw.h:186:
+extern void	recv_Bchannel(struct bchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bchannel *' should also have an identifier name
#7184: FILE: include/linux/mISDNhw.h:186:
+extern void	recv_Bchannel(struct bchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7185: FILE: include/linux/mISDNhw.h:187:
+extern void	recv_Dchannel_skb(struct dchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7185: FILE: include/linux/mISDNhw.h:187:
+extern void	recv_Dchannel_skb(struct dchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#7185: FILE: include/linux/mISDNhw.h:187:
+extern void	recv_Dchannel_skb(struct dchannel *, struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7186: FILE: include/linux/mISDNhw.h:188:
+extern void	recv_Bchannel_skb(struct bchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bchannel *' should also have an identifier name
#7186: FILE: include/linux/mISDNhw.h:188:
+extern void	recv_Bchannel_skb(struct bchannel *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#7186: FILE: include/linux/mISDNhw.h:188:
+extern void	recv_Bchannel_skb(struct bchannel *, struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7187: FILE: include/linux/mISDNhw.h:189:
+extern void	confirm_Bsend(struct bchannel *bch);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7188: FILE: include/linux/mISDNhw.h:190:
+extern int	get_next_bframe(struct bchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bchannel *' should also have an identifier name
#7188: FILE: include/linux/mISDNhw.h:190:
+extern int	get_next_bframe(struct bchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7189: FILE: include/linux/mISDNhw.h:191:
+extern int	get_next_dframe(struct dchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dchannel *' should also have an identifier name
#7189: FILE: include/linux/mISDNhw.h:191:
+extern int	get_next_dframe(struct dchannel *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7198: FILE: include/linux/mISDNif.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <mISDNIF_H>
#7215: FILE: include/linux/mISDNif.h:18:
+#ifndef mISDNIF_H

WARNING:TYPO_SPELLING: 'generell' may be misspelled - perhaps 'general'?
#7240: FILE: include/linux/mISDNif.h:43:
+ * generell format
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'generell' may be misspelled - perhaps 'general'?
#7259: FILE: include/linux/mISDNif.h:62:
+/* generell commands */
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#7303: FILE: include/linux/mISDNif.h:106:
+/* intern layer 2 managment */
                   ^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7396: FILE: include/linux/mISDNif.h:199:
+#define ISDN_P_NT_S0  ^I^I0x02$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7398: FILE: include/linux/mISDNif.h:201:
+#define ISDN_P_NT_E1  ^I^I0x04$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#7423: FILE: include/linux/mISDNif.h:226:
+}  __attribute__((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7499: FILE: include/linux/mISDNif.h:302:
+#define MISDN_CTRL_HFC_ECHOCAN_ON ^I0x4007$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7500: FILE: include/linux/mISDNif.h:303:
+#define MISDN_CTRL_HFC_ECHOCAN_OFF ^I0x4008$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7502: FILE: include/linux/mISDNif.h:305:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#7541: FILE: include/linux/mISDNif.h:344:
+#define mISDN_HEAD_P(s)		((struct mISDNhead *)&s->cb[0])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#7542: FILE: include/linux/mISDNif.h:345:
+#define mISDN_HEAD_PRIM(s)	(((struct mISDNhead *)&s->cb[0])->prim)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#7543: FILE: include/linux/mISDNif.h:346:
+#define mISDN_HEAD_ID(s)	(((struct mISDNhead *)&s->cb[0])->id)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7596: FILE: include/linux/mISDNif.h:399:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7661: FILE: include/linux/mISDNif.h:464:
+_queue_data(struct mISDNchannel *ch, u_int prim,
+    u_int id, u_int len, void *dp, gfp_t gfp_mask)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#7661: FILE: include/linux/mISDNif.h:464:
+    u_int id, u_int len, void *dp, gfp_t gfp_mask)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7676: FILE: include/linux/mISDNif.h:479:
+extern int	mISDN_register_device(struct mISDNdevice *, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7677: FILE: include/linux/mISDNif.h:480:
+extern void	mISDN_unregister_device(struct mISDNdevice *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNdevice *' should also have an identifier name
#7677: FILE: include/linux/mISDNif.h:480:
+extern void	mISDN_unregister_device(struct mISDNdevice *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7678: FILE: include/linux/mISDNif.h:481:
+extern int	mISDN_register_Bprotocol(struct Bprotocol *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Bprotocol *' should also have an identifier name
#7678: FILE: include/linux/mISDNif.h:481:
+extern int	mISDN_register_Bprotocol(struct Bprotocol *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7679: FILE: include/linux/mISDNif.h:482:
+extern void	mISDN_unregister_Bprotocol(struct Bprotocol *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Bprotocol *' should also have an identifier name
#7679: FILE: include/linux/mISDNif.h:482:
+extern void	mISDN_unregister_Bprotocol(struct Bprotocol *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7681: FILE: include/linux/mISDNif.h:484:
+extern void	set_channel_address(struct mISDNchannel *, u_int, u_int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mISDNchannel *' should also have an identifier name
#7681: FILE: include/linux/mISDNif.h:484:
+extern void	set_channel_address(struct mISDNchannel *, u_int, u_int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#7681: FILE: include/linux/mISDNif.h:484:
+extern void	set_channel_address(struct mISDNchannel *, u_int, u_int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int' should also have an identifier name
#7681: FILE: include/linux/mISDNif.h:484:
+extern void	set_channel_address(struct mISDNchannel *, u_int, u_int);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 353 warnings, 465 checks, 7515 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
