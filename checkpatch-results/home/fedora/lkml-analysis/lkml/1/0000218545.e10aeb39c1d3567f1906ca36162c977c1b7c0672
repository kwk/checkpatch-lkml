WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
abfae7f6: Revert "x86, cpa: rename PTE attribute macros for kernel direct mapping in early boot"

WARNING:TYPO_SPELLING: 'reverve' may be misspelled - perhaps 'reserve'?
#146: 
      x86: {reverve,free}_memtype() take a physical address
            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#340: FILE: arch/x86/mm/init_32.c:198:
+	unsigned pages_2m, pages_4k;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#363: FILE: arch/x86/mm/init_32.c:221:
+	pages_2m = pages_4k = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#743: FILE: arch/x86/mm/init_64.c:637:
+	use_pse = use_gbpages = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#888: FILE: arch/x86/mm/pageattr.c:210:
+	BUG_ON(irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#914: FILE: arch/x86/mm/pageattr.c:236:
+			clflush_cache_range((void *) *addr, PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1108: FILE: arch/x86/mm/pageattr.c:612:
+^I ^I * Do a global flush tlb after splitting the large page$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1108: FILE: arch/x86/mm/pageattr.c:612:
+^I ^I * Do a global flush tlb after splitting the large page$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1109: FILE: arch/x86/mm/pageattr.c:613:
+^I ^I * and before we do the actual change page attribute in the PTE.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1109: FILE: arch/x86/mm/pageattr.c:613:
+^I ^I * and before we do the actual change page attribute in the PTE.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1110: FILE: arch/x86/mm/pageattr.c:614:
+^I ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1110: FILE: arch/x86/mm/pageattr.c:614:
+^I ^I *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: arch/x86/mm/pageattr.c:615:
+^I ^I * With out this, we violate the TLB application note, that says$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1111: FILE: arch/x86/mm/pageattr.c:615:
+^I ^I * With out this, we violate the TLB application note, that says$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1112: FILE: arch/x86/mm/pageattr.c:616:
+^I ^I * "The TLBs may contain both ordinary and large-page$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1112: FILE: arch/x86/mm/pageattr.c:616:
+^I ^I * "The TLBs may contain both ordinary and large-page$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1119: FILE: arch/x86/mm/pageattr.c:623:
+^I ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1119: FILE: arch/x86/mm/pageattr.c:623:
+^I ^I *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1120: FILE: arch/x86/mm/pageattr.c:624:
+^I ^I * We do this global tlb flush inside the cpa_lock, so that we$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1120: FILE: arch/x86/mm/pageattr.c:624:
+^I ^I * We do this global tlb flush inside the cpa_lock, so that we$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1124: FILE: arch/x86/mm/pageattr.c:628:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1124: FILE: arch/x86/mm/pageattr.c:628:
+^I ^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: arch/x86/mm/pageattr.c:661:
+	if (!(within(vaddr, PAGE_OFFSET,
 		    PAGE_OFFSET + (max_low_pfn_mapped << PAGE_SHIFT))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1151: FILE: arch/x86/mm/pageattr.c:663:
 #ifdef CONFIG_X86_64
+		|| within(vaddr, PAGE_OFFSET + (1UL<<32),

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1151: FILE: arch/x86/mm/pageattr.c:663:
+		|| within(vaddr, PAGE_OFFSET + (1UL<<32),
 		                                   ^

CHECK:SPACING: No space is necessary after a cast
#1158: FILE: arch/x86/mm/pageattr.c:669:
+		temp_cpa_vaddr = (unsigned long) __va(cpa->pfn << PAGE_SHIFT);

CHECK:SPACING: No space is necessary after a cast
#1170: FILE: arch/x86/mm/pageattr.c:684:
+	if (within(vaddr, (unsigned long) _text, (unsigned long) _end))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1247: FILE: arch/x86/mm/pageattr.c:784:
+		int i;
+		for (i = 0; i < numpages; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1289: FILE: arch/x86/mm/pageattr.c:829:
+	if (!ret && cpu_has_clflush) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1294: FILE: arch/x86/mm/pageattr.c:834:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1469: FILE: arch/x86/mm/pageattr.c:1053:
+	unsigned long tempaddr = (unsigned long) page_address(page);

CHECK:SPACING: No space is necessary after a cast
#1490: FILE: arch/x86/mm/pageattr.c:1071:
+	unsigned long tempaddr = (unsigned long) page_address(page);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1599: FILE: arch/x86/mm/pat.c:18:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1635: FILE: arch/x86/mm/pat.c:152:
+	struct list_head	nd;
 	                	^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1736: FILE: arch/x86/mm/pat.c:298:
+	BUG_ON(start >= end); /* end is exclusive */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#1856: FILE: drivers/char/agp/agp.h:119:
+	int (*agp_alloc_pages)(struct agp_bridge_data *, struct agp_memory *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#1856: FILE: drivers/char/agp/agp.h:119:
+	int (*agp_alloc_pages)(struct agp_bridge_data *, struct agp_memory *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1856: FILE: drivers/char/agp/agp.h:119:
+	int (*agp_alloc_pages)(struct agp_bridge_data *, struct agp_memory *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#1858: FILE: drivers/char/agp/agp.h:121:
+	void (*agp_destroy_pages)(struct agp_memory *);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1962: FILE: drivers/char/agp/generic.c:207:
+		} else {
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1964: FILE: drivers/char/agp/generic.c:209:
+				curr->memory[i] = (unsigned long)gart_to_virt(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1966: FILE: drivers/char/agp/generic.c:211:
+				curr->bridge->driver->agp_destroy_page(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1971: FILE: drivers/char/agp/generic.c:216:
+				curr->bridge->driver->agp_destroy_page(

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1998: FILE: drivers/char/agp/generic.c:1223:
+int agp_generic_alloc_pages(struct agp_bridge_data *bridge, struct agp_memory *mem, size_t num_pages)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2000: FILE: drivers/char/agp/generic.c:1225:
+	struct page * page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#2006: FILE: drivers/char/agp/generic.c:1231:
+		if (page == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <NonWB>
#2357: FILE: include/asm-x86/cacheflush.h:28:
+PAGEFLAG(NonWB, non_WB)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2388: FILE: include/asm-x86/page.h:60:
+extern int pagerange_is_ram(unsigned long start, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218545.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 20 warnings, 20 checks, 2008 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218545.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
