WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
This is a driver for the iop DMA/AAU/ADMA units which are capable of pq_xor,

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#81: FILE: drivers/dma/Kconfig:44:
+config INTEL_IOP_ADMA
+        tristate "Intel IOP ADMA support"
+        depends on DMA_ENGINE && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)
+        default m
+        ---help---
+          Enable support for the Intel(R) IOP Series RAID engines.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#100: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: drivers/dma/iop-adma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#119: FILE: drivers/dma/iop-adma.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'asynchrounous' may be misspelled - perhaps 'asynchronous'?
#127: FILE: drivers/dma/iop-adma.c:23:
+ * This driver supports the asynchrounous DMA copy and RAID engines available
                             ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: drivers/dma/iop-adma.c:54:
+		slot = list_entry(slot->slot_node.next,
+				struct iop_adma_desc_slot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: drivers/dma/iop-adma.c:61:
+iop_adma_run_tx_complete_actions(struct iop_adma_desc_slot *desc,
+	struct iop_adma_chan *iop_chan, dma_cookie_t cookie)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: drivers/dma/iop-adma.c:63:
+	BUG_ON(desc->async_tx.cookie < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#177: FILE: drivers/dma/iop-adma.c:73:
+			desc->async_tx.callback(

ERROR:SPACING: space required before the open parenthesis '('
#193: FILE: drivers/dma/iop-adma.c:89:
+			while(src_cnt--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: drivers/dma/iop-adma.c:91:
+				addr = iop_desc_get_src_addr(unmap,
+							iop_chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: drivers/dma/iop-adma.c:94:
+				dma_unmap_page(dev, addr, len,
+					DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: drivers/dma/iop-adma.c:109:
+iop_adma_clean_slot(struct iop_adma_desc_slot *desc,
+	struct iop_adma_chan *iop_chan)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#244: FILE: drivers/dma/iop-adma.c:140:
+	dev_dbg(iop_chan->device->common.dev, "%s\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: drivers/dma/iop-adma.c:145:
+	list_for_each_entry_safe(iter, _iter, &iop_chan->chain,
+					chain_node) {

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: drivers/dma/iop-adma.c:147:
+		pr_debug("\tcookie: %d slot: %d busy: %d "
+			"this_desc: %#x next_desc: %#x ack: %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: drivers/dma/iop-adma.c:166:
+			BUG_ON(seen_current++);

WARNING:LINE_SPACING: Missing a blank line after declarations
#296: FILE: drivers/dma/iop-adma.c:192:
+			int end_of_chain = 0;
+			pr_debug("\tgroup end\n");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: drivers/dma/iop-adma.c:197:
+				u32 zero_sum_result = 0;
+				slot_cnt = group_start->slot_cnt;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: drivers/dma/iop-adma.c:201:
+				list_for_each_entry_from(grp_iter,
+					&iop_chan->chain, chain_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: drivers/dma/iop-adma.c:205:
+					pr_debug("\titer%d result: %d\n", grp_iter->idx,
+						zero_sum_result);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/dma/iop-adma.c:211:
+				pr_debug("\tgroup_start->xor_check_result: %p\n",
+					group_start->xor_check_result);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: drivers/dma/iop-adma.c:219:
+			list_for_each_entry_safe_from(grp_iter, _grp_iter,
+				&iop_chan->chain, chain_node) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#324: FILE: drivers/dma/iop-adma.c:220:
+				cookie = iop_adma_run_tx_complete_actions(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: drivers/dma/iop-adma.c:225:
+				end_of_chain = iop_adma_clean_slot(grp_iter,
+					iop_chan);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: drivers/dma/iop-adma.c:232:
+			BUG_ON(slot_cnt);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#342: FILE: drivers/dma/iop-adma.c:238:
+				break;
+			else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: drivers/dma/iop-adma.c:252:
+	BUG_ON(!seen_current);

CHECK:SPACING: No space is necessary after a cast
#376: FILE: drivers/dma/iop-adma.c:272:
+	struct iop_adma_chan *chan = (struct iop_adma_chan *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: drivers/dma/iop-adma.c:273:
+	struct iop_adma_chan *chan = (struct iop_adma_chan *) data;
+	__iop_adma_slot_cleanup(chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: drivers/dma/iop-adma.c:278:
+iop_adma_alloc_slots(struct iop_adma_chan *iop_chan, int num_slots,
+			int slots_per_op)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: drivers/dma/iop-adma.c:294:
+		iter = list_entry(&iop_chan->all_slots,
+			struct iop_adma_desc_slot,

CHECK:BRACES: braces {} should be used on all arms of this statement
#417: FILE: drivers/dma/iop-adma.c:313:
+			if (iop_desc_is_aligned(iter, slots_per_op))
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#419: FILE: drivers/dma/iop-adma.c:315:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: drivers/dma/iop-adma.c:324:
+			struct iop_adma_desc_slot *last_used = NULL;
+			iter = alloc_start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: drivers/dma/iop-adma.c:327:
+				int i;
+				dev_dbg(iop_chan->device->common.dev,

WARNING:SPLIT_STRING: quoted string split across lines
#433: FILE: drivers/dma/iop-adma.c:329:
+					"allocated slot: %d "
+					"(desc %p phys: %#x) slots_per_op %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/dma/iop-adma.c:348:
+					iter = list_entry(iter->slot_node.next,
+						struct iop_adma_desc_slot,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: drivers/dma/iop-adma.c:367:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#488: FILE: drivers/dma/iop-adma.c:384:
+	int num_descs_in_pool = plat_data->pool_size/IOP_ADMA_SLOT_SIZE;
 	                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#498: FILE: drivers/dma/iop-adma.c:394:
+			printk(KERN_INFO "IOP ADMA Channel only initialized"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#498: FILE: drivers/dma/iop-adma.c:394:
+		if (!slot) {
+			printk(KERN_INFO "IOP ADMA Channel only initialized"

WARNING:SPLIT_STRING: quoted string split across lines
#499: FILE: drivers/dma/iop-adma.c:395:
+			printk(KERN_INFO "IOP ADMA Channel only initialized"
+				" %d descriptor slots", idx);

CHECK:SPACING: No space is necessary after a cast
#502: FILE: drivers/dma/iop-adma.c:398:
+		hw_desc = (char *) iop_chan->device->dma_desc_pool_virt;

CHECK:SPACING: No space is necessary after a cast
#503: FILE: drivers/dma/iop-adma.c:399:
+		slot->hw_desc = (void *) &hw_desc[idx * IOP_ADMA_SLOT_SIZE];

CHECK:SPACING: No space is necessary after a cast
#509: FILE: drivers/dma/iop-adma.c:405:
+		hw_desc = (char *) iop_chan->device->dma_desc_pool;

CHECK:SPACING: No space is necessary after a cast
#510: FILE: drivers/dma/iop-adma.c:406:
+		slot->phys = (dma_addr_t) &hw_desc[idx * IOP_ADMA_SLOT_SIZE];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/dma/iop-adma.c:417:
+		iop_chan->last_used = list_entry(iop_chan->all_slots.next,
+					struct iop_adma_desc_slot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: drivers/dma/iop-adma.c:427:
+		if (dma_has_cap(DMA_MEMCPY,
+			iop_chan->device->common.cap_mask))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: drivers/dma/iop-adma.c:430:
+		else if (dma_has_cap(DMA_XOR,
+			iop_chan->device->common.cap_mask))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#537: FILE: drivers/dma/iop-adma.c:433:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/dma/iop-adma.c:441:
+iop_desc_assign_cookie(struct iop_adma_chan *iop_chan,
+	struct iop_adma_desc_slot *desc)

WARNING:LINE_SPACING: Missing a blank line after declarations
#548: FILE: drivers/dma/iop-adma.c:444:
+	dma_cookie_t cookie = iop_chan->common.cookie;
+	cookie++;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#551: FILE: drivers/dma/iop-adma.c:447:
+	iop_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/dma/iop-adma.c:480:
+	old_chain_tail = list_entry(iop_chan->chain.prev,
+		struct iop_adma_desc_slot, chain_node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#593: FILE: drivers/dma/iop-adma.c:489:
+	BUG_ON(iop_desc_get_next_desc(sw_desc));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#605: FILE: drivers/dma/iop-adma.c:501:
+		__FUNCTION__, sw_desc->async_tx.cookie, sw_desc->idx);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#617: FILE: drivers/dma/iop-adma.c:513:
+	dev_dbg(iop_chan->device->common.dev, "%s\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: drivers/dma/iop-adma.c:537:
+	BUG_ON(unlikely(len > IOP_ADMA_MAX_BYTE_COUNT));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#644: FILE: drivers/dma/iop-adma.c:540:
+		__FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: drivers/dma/iop-adma.c:560:
+iop_adma_prep_dma_memset(struct dma_chan *chan, int value, size_t len,
+	int int_en)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#672: FILE: drivers/dma/iop-adma.c:568:
+	BUG_ON(unlikely(len > IOP_ADMA_MAX_BYTE_COUNT));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#675: FILE: drivers/dma/iop-adma.c:571:
+		__FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: drivers/dma/iop-adma.c:592:
+iop_adma_prep_dma_xor(struct dma_chan *chan, unsigned int src_cnt, size_t len,
+	int int_en)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: drivers/dma/iop-adma.c:600:
+	BUG_ON(unlikely(len > IOP_ADMA_XOR_MAX_BYTE_COUNT));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#707: FILE: drivers/dma/iop-adma.c:603:
+		__FUNCTION__, src_cnt, len, int_en);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: drivers/dma/iop-adma.c:623:
+iop_adma_prep_dma_zero_sum(struct dma_chan *chan, unsigned int src_cnt,
+	size_t len, u32 *result, int int_en)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#737: FILE: drivers/dma/iop-adma.c:633:
+		__FUNCTION__, src_cnt, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: drivers/dma/iop-adma.c:644:
+		pr_debug("\t%s: group_start->xor_check_result: %p\n",
+			__FUNCTION__, group_start->xor_check_result);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#748: FILE: drivers/dma/iop-adma.c:644:
+			__FUNCTION__, group_start->xor_check_result);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: drivers/dma/iop-adma.c:656:
+iop_adma_set_dest(dma_addr_t addr, struct dma_async_tx_descriptor *tx,
+	int index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: drivers/dma/iop-adma.c:667:
+iop_adma_set_src(dma_addr_t addr, struct dma_async_tx_descriptor *tx,
+	int index)

WARNING:TYPO_SPELLING: 'unsupport' may be misspelled - perhaps 'unsupported'?
#796: FILE: drivers/dma/iop-adma.c:692:
+			printk(KERN_ERR "iop adma%d: unsupport tx_type: %d\n",
 			                             ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#796: FILE: drivers/dma/iop-adma.c:692:
+			printk(KERN_ERR "iop adma%d: unsupport tx_type: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: drivers/dma/iop-adma.c:693:
+			printk(KERN_ERR "iop adma%d: unsupport tx_type: %d\n",
+				iop_chan->device->id, tx->type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#798: FILE: drivers/dma/iop-adma.c:694:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#806: FILE: drivers/dma/iop-adma.c:702:
+	struct iop_adma_chan *iop_chan = to_iop_adma_chan(chan);
+	tasklet_schedule(&iop_chan->irq_tasklet);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: drivers/dma/iop-adma.c:715:
+	list_for_each_entry_safe(iter, _iter, &iop_chan->chain,
+					chain_node) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#831: FILE: drivers/dma/iop-adma.c:727:
+		__FUNCTION__, iop_chan->slots_allocated);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#836: FILE: drivers/dma/iop-adma.c:732:
+		printk(KERN_ERR "IOP: Freeing %d in use descriptors!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#837: FILE: drivers/dma/iop-adma.c:733:
+		printk(KERN_ERR "IOP: Freeing %d in use descriptors!\n",
+			in_use_descs - 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#846: FILE: drivers/dma/iop-adma.c:742:
+                                            dma_cookie_t cookie,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: drivers/dma/iop-adma.c:742:
+                                            dma_cookie_t cookie,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#847: FILE: drivers/dma/iop-adma.c:743:
+                                            dma_cookie_t *done,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: drivers/dma/iop-adma.c:743:
+                                            dma_cookie_t *done,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#848: FILE: drivers/dma/iop-adma.c:744:
+                                            dma_cookie_t *used)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: drivers/dma/iop-adma.c:744:
+                                            dma_cookie_t *used)$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#859: FILE: drivers/dma/iop-adma.c:755:
+		*done= last_complete;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#873: FILE: drivers/dma/iop-adma.c:769:
+		*done= last_complete;
 		     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#884: FILE: drivers/dma/iop-adma.c:780:
+	dev_dbg(chan->device->common.dev, "%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#897: FILE: drivers/dma/iop-adma.c:793:
+	dev_dbg(chan->device->common.dev, "%s\n", __FUNCTION__);

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#911: FILE: drivers/dma/iop-adma.c:807:
+	dev_printk(KERN_ERR, chan->device->common.dev, "error ( %s%s%s%s%s%s%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: drivers/dma/iop-adma.c:808:
+	dev_printk(KERN_ERR, chan->device->common.dev, "error ( %s%s%s%s%s%s%s)\n",
+		iop_is_err_int_parity(status, chan) ? "int_parity " : "",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#922: FILE: drivers/dma/iop-adma.c:818:
+	BUG();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#942: FILE: drivers/dma/iop-adma.c:838:
+static int __devinit iop_adma_memcpy_self_test(struct iop_adma_device *device)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#953: FILE: drivers/dma/iop-adma.c:849:
+	dev_dbg(device->common.dev, "%s\n", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#966: FILE: drivers/dma/iop-adma.c:862:
+		((u8 *) src)[i] = (u8)i;

ERROR:CODE_INDENT: code indent should use tabs where possible
#972: FILE: drivers/dma/iop-adma.c:868:
+^I                        struct dma_chan,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: drivers/dma/iop-adma.c:869:
+^I                        device_node);$

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#988: FILE: drivers/dma/iop-adma.c:884:
+	msleep(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#991: FILE: drivers/dma/iop-adma.c:887:
+		printk(KERN_ERR "iop adma%d: Self-test copy timed out, disabling\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#992: FILE: drivers/dma/iop-adma.c:888:
+		printk(KERN_ERR "iop adma%d: Self-test copy timed out, disabling\n",
+			device->id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#999: FILE: drivers/dma/iop-adma.c:895:
+	dma_sync_single_for_cpu(&iop_chan->device->pdev->dev, dest_dma,
+		IOP_ADMA_TEST_SIZE, DMA_FROM_DEVICE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1001: FILE: drivers/dma/iop-adma.c:897:
+		printk(KERN_ERR "iop adma%d: Self-test copy failed compare, disabling\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: drivers/dma/iop-adma.c:898:
+		printk(KERN_ERR "iop adma%d: Self-test copy failed compare, disabling\n",
+			device->id);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1016: FILE: drivers/dma/iop-adma.c:912:
+static int __devinit iop_adma_xor_zero_sum_self_test(struct iop_adma_device *device)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1032: FILE: drivers/dma/iop-adma.c:928:
+	dev_dbg(device->common.dev, "%s\n", __FUNCTION__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1053: FILE: drivers/dma/iop-adma.c:949:
+		u8 *ptr = page_address(xor_srcs[src_idx]);
+		for (i = 0; i < PAGE_SIZE; i++)

CHECK:SPACING: No space is necessary after a cast
#1058: FILE: drivers/dma/iop-adma.c:954:
+		cmp_byte ^= (u8) (1 << src_idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: drivers/dma/iop-adma.c:961:
+^I                        struct dma_chan,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: drivers/dma/iop-adma.c:962:
+^I                        device_node);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: drivers/dma/iop-adma.c:975:
+		dma_addr = dma_map_page(dma_chan->device->dev, xor_srcs[i], 0,
+			PAGE_SIZE, DMA_TO_DEVICE);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1086: FILE: drivers/dma/iop-adma.c:982:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1089: FILE: drivers/dma/iop-adma.c:985:
+		printk(KERN_ERR "iop_adma: Self-test xor timed out, disabling\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: drivers/dma/iop-adma.c:992:
+	dma_sync_single_for_cpu(&iop_chan->device->pdev->dev, dest_dma,
+		PAGE_SIZE, DMA_FROM_DEVICE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1099: FILE: drivers/dma/iop-adma.c:995:
+		u32 *ptr = page_address(dest);
+		if (ptr[i] != cmp_word) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1100: FILE: drivers/dma/iop-adma.c:996:
+			printk(KERN_ERR "iop_adma: Self-test xor failed compare, disabling\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: drivers/dma/iop-adma.c:1002:
+	dma_sync_single_for_device(&iop_chan->device->pdev->dev, dest_dma,
+		PAGE_SIZE, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: drivers/dma/iop-adma.c:1016:
+	tx = iop_adma_prep_dma_zero_sum(dma_chan, IOP_ADMA_NUM_SRC_TEST + 1,
+		PAGE_SIZE, &zero_sum_result, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: drivers/dma/iop-adma.c:1019:
+		dma_addr = dma_map_page(dma_chan->device->dev, zero_sum_srcs[i], 0,
+			PAGE_SIZE, DMA_TO_DEVICE);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1130: FILE: drivers/dma/iop-adma.c:1026:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1133: FILE: drivers/dma/iop-adma.c:1029:
+		printk(KERN_ERR "iop_adma: Self-test zero sum timed out, disabling\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1139: FILE: drivers/dma/iop-adma.c:1035:
+		printk(KERN_ERR "iop_adma: Self-test zero sum failed compare, disabling\n");

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1152: FILE: drivers/dma/iop-adma.c:1048:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1155: FILE: drivers/dma/iop-adma.c:1051:
+		printk(KERN_ERR "iop_adma: Self-test memset timed out, disabling\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1160: FILE: drivers/dma/iop-adma.c:1056:
+	for (i = 0; i < PAGE_SIZE/sizeof(u32); i++) {
 	                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1162: FILE: drivers/dma/iop-adma.c:1058:
+		u32 *ptr = page_address(dest);
+		if (ptr[i]) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1163: FILE: drivers/dma/iop-adma.c:1059:
+			printk(KERN_ERR "iop_adma: Self-test memset failed compare, disabling\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/dma/iop-adma.c:1068:
+	tx = iop_adma_prep_dma_zero_sum(dma_chan, IOP_ADMA_NUM_SRC_TEST + 1,
+		PAGE_SIZE, &zero_sum_result, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1175: FILE: drivers/dma/iop-adma.c:1071:
+		dma_addr = dma_map_page(dma_chan->device->dev, zero_sum_srcs[i], 0,
+			PAGE_SIZE, DMA_TO_DEVICE);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1182: FILE: drivers/dma/iop-adma.c:1078:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1185: FILE: drivers/dma/iop-adma.c:1081:
+		printk(KERN_ERR "iop_adma: Self-test non-zero sum timed out, disabling\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1191: FILE: drivers/dma/iop-adma.c:1087:
+		printk(KERN_ERR "iop_adma: Self-test non-zero sum failed compare, disabling\n");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1206: FILE: drivers/dma/iop-adma.c:1102:
+static int __devexit iop_adma_remove(struct platform_device *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1218: FILE: drivers/dma/iop-adma.c:1114:
+		unsigned int irq;
+		irq = platform_get_irq(dev, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1223: FILE: drivers/dma/iop-adma.c:1119:
+	dma_free_coherent(&dev->dev, plat_data->pool_size,
+			device->dma_desc_pool_virt, device->dma_desc_pool);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1227: FILE: drivers/dma/iop-adma.c:1123:
+		struct resource *res;
+		res = platform_get_resource(dev, IORESOURCE_MEM, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: drivers/dma/iop-adma.c:1128:
+	list_for_each_entry_safe(chan, _chan, &device->common.channels,
+				device_node) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1242: FILE: drivers/dma/iop-adma.c:1138:
+static int __devinit iop_adma_probe(struct platform_device *pdev)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1245: FILE: drivers/dma/iop-adma.c:1141:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1245: FILE: drivers/dma/iop-adma.c:1141:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1245: FILE: drivers/dma/iop-adma.c:1141:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1245: FILE: drivers/dma/iop-adma.c:1141:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1257: FILE: drivers/dma/iop-adma.c:1153:
+	if ((adev = kzalloc(sizeof(*adev), GFP_KERNEL)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1266: FILE: drivers/dma/iop-adma.c:1162:
+	if ((adev->dma_desc_pool_virt = dma_alloc_writecombine(&pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1267: FILE: drivers/dma/iop-adma.c:1163:
+	if ((adev->dma_desc_pool_virt = dma_alloc_writecombine(&pdev->dev,
+					plat_data->pool_size,

WARNING:TYPO_SPELLING: 'allocted' may be misspelled - perhaps 'allocated'?
#1274: FILE: drivers/dma/iop-adma.c:1170:
+	dev_dbg(&pdev->dev, "%s: allocted descriptor pool virt %p phys %p\n",
 	                         ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1275: FILE: drivers/dma/iop-adma.c:1171:
+		__FUNCTION__, adev->dma_desc_pool_virt, (void *) adev->dma_desc_pool);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1275: FILE: drivers/dma/iop-adma.c:1171:
+		__FUNCTION__, adev->dma_desc_pool_virt, (void *) adev->dma_desc_pool);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1312: FILE: drivers/dma/iop-adma.c:1208:
+	if ((iop_chan = kzalloc(sizeof(*iop_chan), GFP_KERNEL)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1318: FILE: drivers/dma/iop-adma.c:1214:
+	if ((iop_chan->mmr_base = ioremap(res->start, res->end - res->start))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1346: FILE: drivers/dma/iop-adma.c:1242:
+				ret = request_irq(irq, iop_adma_eot_handler,
+					 0, pdev->name, iop_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1355: FILE: drivers/dma/iop-adma.c:1251:
+				ret = request_irq(irq, iop_adma_eoc_handler,
+					0, pdev->name, iop_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1364: FILE: drivers/dma/iop-adma.c:1260:
+				ret = request_irq(irq, iop_adma_err_handler,
+					0, pdev->name, iop_chan);

CHECK:SPACING: No space is necessary after a cast
#1376: FILE: drivers/dma/iop-adma.c:1272:
+	iop_chan->cleanup_watchdog.data = (unsigned long) iop_chan;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1392: FILE: drivers/dma/iop-adma.c:1288:
+	if (dma_has_cap(DMA_XOR, adev->common.cap_mask) ||
+		dma_has_cap(DMA_MEMSET, adev->common.cap_mask)) {

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#1399: FILE: drivers/dma/iop-adma.c:1295:
+	dev_printk(KERN_INFO, &pdev->dev, "Intel(R) IOP: "

WARNING:SPLIT_STRING: quoted string split across lines
#1400: FILE: drivers/dma/iop-adma.c:1296:
+	dev_printk(KERN_INFO, &pdev->dev, "Intel(R) IOP: "
+	  "( %s%s%s%s%s%s%s%s%s%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1426: FILE: drivers/dma/iop-adma.c:1322:
+	dma_free_coherent(&adev->pdev->dev, plat_data->pool_size,
+			adev->dma_desc_pool_virt, adev->dma_desc_pool);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1441: FILE: drivers/dma/iop-adma.c:1337:
+	dev_dbg(iop_chan->device->common.dev, "%s\n", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1465: FILE: drivers/dma/iop-adma.c:1361:
+		iop_chan->common.cookie = sw_desc->async_tx.cookie = cookie;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1468: FILE: drivers/dma/iop-adma.c:1364:
+		BUG_ON(iop_chan_is_busy(iop_chan));

CHECK:BRACES: Unbalanced braces around else statement
#1481: FILE: drivers/dma/iop-adma.c:1377:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1482: FILE: drivers/dma/iop-adma.c:1378:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1483: FILE: drivers/dma/iop-adma.c:1379:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",
+			iop_chan->device->id);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1493: FILE: drivers/dma/iop-adma.c:1389:
+	dev_dbg(iop_chan->device->common.dev, "%s\n", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1517: FILE: drivers/dma/iop-adma.c:1413:
+		iop_chan->common.cookie = sw_desc->async_tx.cookie = cookie;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1520: FILE: drivers/dma/iop-adma.c:1416:
+		BUG_ON(iop_chan_is_busy(iop_chan));

CHECK:BRACES: Unbalanced braces around else statement
#1533: FILE: drivers/dma/iop-adma.c:1429:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1534: FILE: drivers/dma/iop-adma.c:1430:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1535: FILE: drivers/dma/iop-adma.c:1431:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",
+			iop_chan->device->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1548: FILE: drivers/dma/iop-adma.c:1444:
+static int __init iop_adma_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1557: FILE: drivers/dma/iop-adma.c:1453:
+static void __exit iop_adma_exit (void)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1561: FILE: drivers/dma/iop-adma.c:1457:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1575: FILE: include/asm-arm/hardware/iop_adma.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1589: FILE: include/asm-arm/hardware/iop_adma.h:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1638: FILE: include/asm-arm/hardware/iop_adma.h:64:
+	spinlock_t lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1688: FILE: include/asm-arm/hardware/iop_adma.h:114:
+        int hw_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1688: FILE: include/asm-arm/hardware/iop_adma.h:114:
+        int hw_id;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1689: FILE: include/asm-arm/hardware/iop_adma.h:115:
+        dma_cap_mask_t cap_mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1689: FILE: include/asm-arm/hardware/iop_adma.h:115:
+        dma_cap_mask_t cap_mask;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1690: FILE: include/asm-arm/hardware/iop_adma.h:116:
+        size_t pool_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1690: FILE: include/asm-arm/hardware/iop_adma.h:116:
+        size_t pool_size;$

CHECK:SPACING: No space is necessary after a cast
#1694: FILE: include/asm-arm/hardware/iop_adma.h:120:
+#define iop_hw_desc_slot_idx(hw_desc, idx) ( (void *) (((unsigned long) hw_desc) + ((idx) << 5)) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1694: FILE: include/asm-arm/hardware/iop_adma.h:120:
+#define iop_hw_desc_slot_idx(hw_desc, idx) ( (void *) (((unsigned long) hw_desc) + ((idx) << 5)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1694: FILE: include/asm-arm/hardware/iop_adma.h:120:
+#define iop_hw_desc_slot_idx(hw_desc, idx) ( (void *) (((unsigned long) hw_desc) + ((idx) << 5)) )

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 90 warnings, 71 checks, 1602 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
