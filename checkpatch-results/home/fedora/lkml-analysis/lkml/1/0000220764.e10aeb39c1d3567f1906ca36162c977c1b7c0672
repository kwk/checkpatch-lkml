WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#64: FILE: drivers/char/pty.c:247:
+	/* We always use new tty termios data so we can do this
+	   the easy way .. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#64: FILE: drivers/char/pty.c:247:
+	   the easy way .. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: drivers/char/pty.c:257:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#96: FILE: drivers/char/pty.c:279:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#106: FILE: drivers/char/pty.c:386:
+static int pty_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tty->termios)...) over kmalloc(sizeof(struct ktermios)...)
#147: FILE: drivers/char/pty.c:507:
+	tty->termios = kmalloc(sizeof(struct ktermios), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->termios"
#148: FILE: drivers/char/pty.c:508:
+	if (tty->termios == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tty->termios_locked)...) over kzalloc(sizeof(struct ktermios)...)
#151: FILE: drivers/char/pty.c:511:
+	tty->termios_locked = kzalloc(sizeof(struct ktermios), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->termios_locked"
#152: FILE: drivers/char/pty.c:512:
+	if (tty->termios_locked == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*o_tty->termios)...) over kmalloc(sizeof(struct ktermios)...)
#154: FILE: drivers/char/pty.c:514:
+	o_tty->termios = kmalloc(sizeof(struct ktermios), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!o_tty->termios"
#155: FILE: drivers/char/pty.c:515:
+	if (o_tty->termios == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*o_tty->termios_locked)...) over kzalloc(sizeof(struct ktermios)...)
#158: FILE: drivers/char/pty.c:518:
+	o_tty->termios_locked = kzalloc(sizeof(struct ktermios), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!o_tty->termios_locked"
#159: FILE: drivers/char/pty.c:519:
+	if (o_tty->termios_locked == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp"
#288: FILE: drivers/char/tty_io.c:1242:
+	if (tp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ltp"
#289: FILE: drivers/char/tty_io.c:1243:
+		WARN_ON(ltp != NULL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tp)...) over kmalloc(sizeof(struct ktermios)...)
#290: FILE: drivers/char/tty_io.c:1244:
+		tp = kmalloc(sizeof(struct ktermios), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ltp)...) over kzalloc(sizeof(struct ktermios)...)
#291: FILE: drivers/char/tty_io.c:1245:
+		ltp = kzalloc(sizeof(struct ktermios), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp"
#292: FILE: drivers/char/tty_io.c:1246:
+		if (tp == NULL || ltp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ltp"
#292: FILE: drivers/char/tty_io.c:1246:
+		if (tp == NULL || ltp == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: drivers/char/tty_io.c:1252:
+		memcpy(tp, &tty->driver->init_termios,
+						sizeof(struct ktermios));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: drivers/char/tty_io.c:2788:
+void initialize_tty_struct(struct tty_struct *tty,
+		struct tty_driver *driver, int idx)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#534: FILE: include/linux/tty.h:404:
+extern struct tty_struct *alloc_tty_struct(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#535: FILE: include/linux/tty.h:405:
+extern void free_tty_struct(struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#536: FILE: include/linux/tty.h:406:
+extern void initialize_tty_struct(struct tty_struct *tty,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: include/linux/tty.h:407:
+extern void initialize_tty_struct(struct tty_struct *tty,
+		struct tty_driver *driver, int idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: include/linux/tty.h:411:
+extern int tty_init_termios(struct tty_struct *tty);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 2 warnings, 22 checks, 476 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
