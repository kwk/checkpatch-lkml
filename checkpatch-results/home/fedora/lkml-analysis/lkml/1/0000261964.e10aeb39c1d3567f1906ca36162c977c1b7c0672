WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#16: 
Subject: [PATCH] INITRAMFS: propogate mtime from cpio'd directory tree
                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Propogate' may be misspelled - perhaps 'Propagate'?
#29: 
Propogate mtime from cpio'd initramfs directory tree (including soft
^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#60: FILE: init/initramfs.c:33:
+	int l = strlen(s)+1;
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#62: FILE: init/initramfs.c:35:
+	char *p = malloc(l);
+	memcpy(p,s,l);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#62: FILE: init/initramfs.c:35:
+	memcpy(p,s,l);
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#62: FILE: init/initramfs.c:35:
+	memcpy(p,s,l);
 	          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#83: FILE: init/initramfs.c:107:
+	struct dir_entry *de = malloc(sizeof(struct dir_entry));
+	INIT_LIST_HEAD(&de->list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: init/initramfs.c:116:
+	struct list_head *e, *tmp;
+	list_for_each_safe(e, tmp, &dir_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#94: FILE: init/initramfs.c:118:
+		struct dir_entry *de = list_entry(e, struct dir_entry, list);
+		list_del(e);

WARNING:MISPLACED_INIT: __initdata should be placed after mtime
#104: FILE: init/initramfs.c:128:
+static __initdata struct utimbuf mtime;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#112: FILE: init/initramfs.c:151:
+	mtime.actime = mtime.modtime = parsed[5];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: init/initramfs.c:365:
+static long __init sys_lutime(char __user * filename, struct utimbuf __user * times)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: init/initramfs.c:365:
+static long __init sys_lutime(char __user * filename, struct utimbuf __user * times)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#164: FILE: init/initramfs.c:368:
+	struct nameidata nd;
 	                 ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: init/initramfs.c:369:
+	struct inode * inode;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#168: FILE: init/initramfs.c:372:
+	error = user_path_walk_link(filename, &nd);
 	                                       ^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#169: FILE: init/initramfs.c:373:
+	if (error) return error;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#171: FILE: init/initramfs.c:375:
+	inode = nd.path.dentry->d_inode;
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#184: FILE: init/initramfs.c:388:
+	error = notify_change(nd.path.dentry, &newattrs);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#187: FILE: init/initramfs.c:391:
+	path_put(&nd.path);
 	          ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261964.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 12 warnings, 2 checks, 156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261964.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
