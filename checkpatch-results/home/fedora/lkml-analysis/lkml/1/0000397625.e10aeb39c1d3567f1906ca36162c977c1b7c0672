WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
--- linux-2.6.22-base/security/smack/smack_lsm.c	1969-12-31 16:00:00.000000000

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: security/smack/smack_lsm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: security/smack/smack_lsm.c:42:
+extern smack_t smack_net_ambient;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#77: FILE: security/smack/smack_lsm.c:43:
+extern int smack_net_nltype;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#78: FILE: security/smack/smack_lsm.c:44:
+extern int smack_cipso_direct;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#79: FILE: security/smack/smack_lsm.c:45:
+extern struct smk_cipso_entry *smack_cipso;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#81: FILE: security/smack/smack_lsm.c:47:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip->i_op->getxattr"
#90: FILE: security/smack/smack_lsm.c:56:
+	if (ip->i_op->getxattr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: security/smack/smack_lsm.c:69:
+        return NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: security/smack/smack_lsm.c:69:
+        return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: security/smack/smack_lsm.c:76:
+        isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: security/smack/smack_lsm.c:76:
+        isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isp)...) over kzalloc(sizeof(struct inode_smack)...)
#110: FILE: security/smack/smack_lsm.c:76:
+        isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: security/smack/smack_lsm.c:77:
+        if (isp == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: security/smack/smack_lsm.c:77:
+        if (isp == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#111: FILE: security/smack/smack_lsm.c:77:
+        if (isp == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: security/smack/smack_lsm.c:78:
+                return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: security/smack/smack_lsm.c:78:
+                return NULL;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#148: FILE: security/smack/smack_lsm.c:114:
+	if (rc == 0)
+		 if (*sp != SMK_FLOOR)

WARNING:TABSTOP: Statements should start on a tabstop
#149: FILE: security/smack/smack_lsm.c:115:
+		 if (*sp != SMK_FLOOR)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsp)...) over kzalloc(sizeof(struct task_smack)...)
#160: FILE: security/smack/smack_lsm.c:126:
+	tsp = kzalloc(sizeof(struct task_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsp"
#161: FILE: security/smack/smack_lsm.c:127:
+	if (tsp == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbsp)...) over kzalloc(sizeof(struct superblock_smack)...)
#255: FILE: security/smack/smack_lsm.c:221:
+	sbsp = kzalloc(sizeof(struct superblock_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbsp"
#257: FILE: security/smack/smack_lsm.c:223:
+	if (sbsp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!otheropts"
#289: FILE: security/smack/smack_lsm.c:255:
+	if (otheropts == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#292: FILE: security/smack/smack_lsm.c:258:
+	for (cp = orig, commap = orig; commap != NULL; cp = commap + 1) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#305: FILE: security/smack/smack_lsm.c:271:
+		if (commap != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#329: FILE: security/smack/smack_lsm.c:295:
+	if (sp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#336: FILE: security/smack/smack_lsm.c:302:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op"
#341: FILE: security/smack/smack_lsm.c:307:
+	for (op = data; op != NULL; op = commap) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#343: FILE: security/smack/smack_lsm.c:309:
+		if (commap != NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: security/smack/smack_lsm.c:320:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: security/smack/smack_lsm.c:320:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#354: FILE: security/smack/smack_lsm.c:320:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                                                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#369: FILE: security/smack/smack_lsm.c:335:
+	if (isp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#381: FILE: security/smack/smack_lsm.c:347:
+	if (dentry == NULL || dentry->d_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_sb"
#381: FILE: security/smack/smack_lsm.c:347:
+	if (dentry == NULL || dentry->d_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_sb->s_security"
#382: FILE: security/smack/smack_lsm.c:348:
+	    dentry->d_sb->s_security == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#390: FILE: security/smack/smack_lsm.c:356:
+static int smack_sb_mount(char *dev_name, struct nameidata *nd,
                                                             ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: security/smack/smack_lsm.c:357:
+        char *type, unsigned long flags, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: security/smack/smack_lsm.c:357:
+static int smack_sb_mount(char *dev_name, struct nameidata *nd,
+        char *type, unsigned long flags, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: security/smack/smack_lsm.c:357:
+        char *type, unsigned long flags, void *data)$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#396: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||
 	    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd"
#396: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt"
#396: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt->mnt_sb"
#396: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt->mnt_sb->s_security"
#397: FILE: security/smack/smack_lsm.c:363:
+	    nd->mnt->mnt_sb->s_security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: security/smack/smack_lsm.c:390:
+        inode->i_security = new_inode_smack(*csp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: security/smack/smack_lsm.c:390:
+        inode->i_security = new_inode_smack(*csp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: security/smack/smack_lsm.c:391:
+        if (inode->i_security == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: security/smack/smack_lsm.c:391:
+        if (inode->i_security == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#425: FILE: security/smack/smack_lsm.c:391:
+        if (inode->i_security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: security/smack/smack_lsm.c:392:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: security/smack/smack_lsm.c:392:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: security/smack/smack_lsm.c:403:
+                               char **name, void **value, size_t *len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: security/smack/smack_lsm.c:403:
+static int smack_inode_init_security(struct inode *inode, struct inode *dir,
+                               char **name, void **value, size_t *len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: security/smack/smack_lsm.c:403:
+                               char **name, void **value, size_t *len)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#441: FILE: security/smack/smack_lsm.c:407:
+	if (name && (*name = kstrdup(XATTR_SMACK_SUFFIX, GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#444: FILE: security/smack/smack_lsm.c:410:
+	if (value && (*value = kstrdup((char *)isp, GFP_KERNEL)) == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#511: FILE: security/smack/smack_lsm.c:477:
+				  struct nameidata *nd)
 				                    ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: security/smack/smack_lsm.c:507:
+^I^I^I        void *value, size_t size, int flags)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: security/smack/smack_lsm.c:507:
+static int smack_inode_setxattr(struct dentry *dentry, char *name,
+			        void *value, size_t size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: security/smack/smack_lsm.c:512:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

WARNING:RETURN_VOID: void function return statements are not generally useful
#583: FILE: security/smack/smack_lsm.c:549:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: security/smack/smack_lsm.c:572:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#622: FILE: security/smack/smack_lsm.c:587:
*name, void *buffer, size_t size, int err)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#631: FILE: security/smack/smack_lsm.c:596:
+	if (size < sizeof(smack_t) || name == NULL || bsp == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bsp"
#631: FILE: security/smack/smack_lsm.c:596:
+	if (size < sizeof(smack_t) || name == NULL || bsp == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#632: FILE: security/smack/smack_lsm.c:597:
+	    inode == NULL || inode->i_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#632: FILE: security/smack/smack_lsm.c:597:
+	    inode == NULL || inode->i_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#649: FILE: security/smack/smack_lsm.c:614:
+	if (sock == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#676: FILE: security/smack/smack_lsm.c:641:
+	if (value == NULL || size > sizeof(smack_t))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#695: FILE: security/smack/smack_lsm.c:660:
+	if (sock == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buffer"
#716: FILE: security/smack/smack_lsm.c:681:
+	if (buffer != NULL && len <= buffer_size) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#723: FILE: security/smack/smack_lsm.c:688:
+static void smack_d_instantiate (struct dentry *opt_dentry, struct inode

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#735: FILE: security/smack/smack_lsm.c:699:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#738: FILE: security/smack/smack_lsm.c:702:
+	if (inode->i_security == NULL)

WARNING:TYPO_SPELLING: 'embarassing' may be misspelled - perhaps 'embarrassing'?
#768: FILE: security/smack/smack_lsm.c:732:
+		 * Casey says that it's a little embarassing
 		                                 ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_op->getxattr"
#825: FILE: security/smack/smack_lsm.c:789:
+		if (inode->i_op->getxattr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt_dentry"
#832: FILE: security/smack/smack_lsm.c:796:
+		if (opt_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#834: FILE: security/smack/smack_lsm.c:798:
+			if (dp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#840: FILE: security/smack/smack_lsm.c:804:
+			if (dp == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: security/smack/smack_lsm.c:809:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#855: FILE: security/smack/smack_lsm.c:819:
+		printk("%s:%d unset? Investigate!\n", __FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#855: FILE: security/smack/smack_lsm.c:819:
+		printk("%s:%d unset? Investigate!\n", __FUNCTION__, __LINE__);

WARNING:RETURN_VOID: void function return statements are not generally useful
#864: FILE: security/smack/smack_lsm.c:828:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_security"
#875: FILE: security/smack/smack_lsm.c:839:
+	if (file->f_security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#899: FILE: security/smack/smack_lsm.c:863:
+                            unsigned long arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: security/smack/smack_lsm.c:863:
+                            unsigned long arg)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#950: FILE: security/smack/smack_lsm.c:914:
+                                     struct fown_struct *fown, int signum)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: security/smack/smack_lsm.c:914:
+                                     struct fown_struct *fown, int signum)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#958: FILE: security/smack/smack_lsm.c:922:
+	file = (struct file *)((long)fown - offsetof(struct file,f_owner));
 	                                                        ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ssp)...) over kzalloc(sizeof(struct socket_smack)...)
#1003: FILE: security/smack/smack_lsm.c:966:
+	ssp = kzalloc(sizeof(struct socket_smack), priority);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#1004: FILE: security/smack/smack_lsm.c:967:
+	if (ssp == NULL)

WARNING:TYPO_SPELLING: 'Appologies' may be misspelled - perhaps 'Apologies'?
#1052: FILE: security/smack/smack_lsm.c:1015:
+ * Appologies to the TSIG group in general and GW in particular.
    ^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#1064: FILE: security/smack/smack_lsm.c:1027:
+		for (scp = smack_cipso; scp != NULL; scp = scp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#1068: FILE: security/smack/smack_lsm.c:1031:
+		if (scp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#1110: FILE: security/smack/smack_lsm.c:1073:
+	if (isp == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1111: FILE: security/smack/smack_lsm.c:1074:
+		if (kern)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1113: FILE: security/smack/smack_lsm.c:1076:
+		else {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1224: FILE: security/smack/smack_lsm.c:1186:
+	if (flags & S_IRUGO)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1226: FILE: security/smack/smack_lsm.c:1188:
+	if (flags & S_IWUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#1228: FILE: security/smack/smack_lsm.c:1190:
+	if (flags & S_IXUGO)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg->security"
#1239: FILE: security/smack/smack_lsm.c:1201:
+	if (msg->security == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1249: FILE: security/smack/smack_lsm.c:1211:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shp"
#1252: FILE: security/smack/smack_lsm.c:1214:
+	if (shp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp->security"
#1264: FILE: security/smack/smack_lsm.c:1226:
+	if (isp->security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#1281: FILE: security/smack/smack_lsm.c:1243:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#1294: FILE: security/smack/smack_lsm.c:1256:
+	if (ssp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1297: FILE: security/smack/smack_lsm.c:1259:
+	switch(cmd) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#1328: FILE: security/smack/smack_lsm.c:1289:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#1338: FILE: security/smack/smack_lsm.c:1299:
+	if (sma == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp->security"
#1350: FILE: security/smack/smack_lsm.c:1311:
+	if (isp->security == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1362: FILE: security/smack/smack_lsm.c:1323:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#1368: FILE: security/smack/smack_lsm.c:1329:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#1381: FILE: security/smack/smack_lsm.c:1342:
+	if (ssp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1384: FILE: security/smack/smack_lsm.c:1345:
+	switch(cmd) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1416: FILE: security/smack/smack_lsm.c:1376:
+static int smack_sem_semop(struct sem_array *sma, struct sembuf *sops,
+{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#1420: FILE: security/smack/smack_lsm.c:1380:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kisp->security"
#1433: FILE: security/smack/smack_lsm.c:1393:
+	if (kisp->security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#1447: FILE: security/smack/smack_lsm.c:1407:
+	if (msq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#1458: FILE: security/smack/smack_lsm.c:1418:
+	if (msp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#1471: FILE: security/smack/smack_lsm.c:1431:
+	if (msp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1474: FILE: security/smack/smack_lsm.c:1434:
+	switch(cmd) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1499: FILE: security/smack/smack_lsm.c:1458:
+static int smack_msg_queue_msgsnd(struct msg_queue *msq, struct msg_msg *msg,
+{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#1503: FILE: security/smack/smack_lsm.c:1462:
+	if (msp == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: security/smack/smack_lsm.c:1471:
+static int smack_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
+{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#1517: FILE: security/smack/smack_lsm.c:1475:
+	if (msp == NULL)

WARNING:TYPO_SPELLING: 'subjet' may be misspelled - perhaps 'subject'?
#1559: FILE: security/smack/smack_lsm.c:1517:
+	 * This breaks the strict subjet/object access
 	                          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1565: FILE: security/smack/smack_lsm.c:1523:
+	if (__capable(current, CAP_MAC_OVERRIDE) ||
+		__capable(p, CAP_MAC_OVERRIDE))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1567: FILE: security/smack/smack_lsm.c:1525:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#1593: FILE: security/smack/smack_lsm.c:1551:
+	if (value == NULL || size == 0 || size >= sizeof(smack_t))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1653: FILE: security/smack/smack_lsm.c:1611:
+			pcat = netlbl_secattr_catmap_walk(sap->mls_cat, pcat+1);
 			                                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#1668: FILE: security/smack/smack_lsm.c:1626:
+	for (scp = smack_cipso; scp != NULL; scp = scp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#1722: FILE: security/smack/smack_lsm.c:1680:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#1722: FILE: security/smack/smack_lsm.c:1680:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent->sk"
#1722: FILE: security/smack/smack_lsm.c:1680:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1753: FILE: security/smack/smack_lsm.c:1711:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#1754: FILE: security/smack/smack_lsm.c:1712:
+	if (skb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!key->security"
#1784: FILE: security/smack/smack_lsm.c:1742:
+	if (key->security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1800: FILE: security/smack/smack_lsm.c:1758:
+^I^I^I        struct task_struct *context, key_perm_t perm)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: security/smack/smack_lsm.c:1758:
+static int smack_key_permission(key_ref_t key_ref,
+			        struct task_struct *context, key_perm_t perm)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!keyp"
#1808: FILE: security/smack/smack_lsm.c:1766:
+	if (keyp == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1821: FILE: security/smack/smack_lsm.c:1779:
+^I.ptrace = ^I^I^Ismack_ptrace,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1822: FILE: security/smack/smack_lsm.c:1780:
+^I.capget = ^I^I^Icap_capget,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1823: FILE: security/smack/smack_lsm.c:1781:
+^I.capset_check = ^I^Icap_capset_check,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1824: FILE: security/smack/smack_lsm.c:1782:
+^I.capset_set = ^I^I^Icap_capset_set,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1825: FILE: security/smack/smack_lsm.c:1783:
+^I.capable = ^I^I^Icap_capable,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1830: FILE: security/smack/smack_lsm.c:1788:
+^I.syslog = ^I^I^Ismack_syslog,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1831: FILE: security/smack/smack_lsm.c:1789:
+^I.settime = ^I^I^Icap_settime,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1832: FILE: security/smack/smack_lsm.c:1790:
+^I.vm_enough_memory = ^I^Icap_vm_enough_memory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1836: FILE: security/smack/smack_lsm.c:1794:
+^I.bprm_apply_creds = ^I^Icap_bprm_apply_creds,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1838: FILE: security/smack/smack_lsm.c:1796:
+^I.bprm_set_security = ^I^Icap_bprm_set_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1840: FILE: security/smack/smack_lsm.c:1798:
+^I.bprm_secureexec = ^I^Icap_bprm_secureexec,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1842: FILE: security/smack/smack_lsm.c:1800:
+^I.sb_alloc_security = ^I^Ismack_sb_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1843: FILE: security/smack/smack_lsm.c:1801:
+^I.sb_free_security = ^I^Ismack_sb_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1844: FILE: security/smack/smack_lsm.c:1802:
+^I.sb_copy_data = ^I^Ismack_sb_copy_data,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1845: FILE: security/smack/smack_lsm.c:1803:
+^I.sb_kern_mount = ^I^Ismack_sb_kern_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1846: FILE: security/smack/smack_lsm.c:1804:
+^I.sb_statfs = ^I^I^Ismack_sb_statfs,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1847: FILE: security/smack/smack_lsm.c:1805:
+^I.sb_mount = ^I^I^Ismack_sb_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1849: FILE: security/smack/smack_lsm.c:1807:
+^I.sb_umount = ^I^I^Ismack_sb_umount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1858: FILE: security/smack/smack_lsm.c:1816:
+^I.inode_alloc_security = ^Ismack_inode_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1859: FILE: security/smack/smack_lsm.c:1817:
+^I.inode_free_security = ^I^Ismack_inode_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1860: FILE: security/smack/smack_lsm.c:1818:
+^I.inode_init_security = ^I^Ismack_inode_init_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1861: FILE: security/smack/smack_lsm.c:1819:
+^I.inode_create = ^I^Ismack_inode_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1862: FILE: security/smack/smack_lsm.c:1820:
+^I.inode_link = ^I^I^Ismack_inode_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1863: FILE: security/smack/smack_lsm.c:1821:
+^I.inode_unlink = ^I^Ismack_inode_unlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1864: FILE: security/smack/smack_lsm.c:1822:
+^I.inode_symlink = ^I^Ismack_inode_symlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1865: FILE: security/smack/smack_lsm.c:1823:
+^I.inode_mkdir = ^I^I^Ismack_inode_mkdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1866: FILE: security/smack/smack_lsm.c:1824:
+^I.inode_rmdir = ^I^I^Ismack_inode_rmdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1867: FILE: security/smack/smack_lsm.c:1825:
+^I.inode_mknod = ^I^I^Ismack_inode_mknod,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1868: FILE: security/smack/smack_lsm.c:1826:
+^I.inode_rename = ^I^Ismack_inode_rename,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1869: FILE: security/smack/smack_lsm.c:1827:
+^I.inode_readlink = ^I^Ismack_inode_readlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1870: FILE: security/smack/smack_lsm.c:1828:
+^I.inode_follow_link = ^I^Ismack_inode_follow_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1871: FILE: security/smack/smack_lsm.c:1829:
+^I.inode_permission = ^I^Ismack_inode_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1872: FILE: security/smack/smack_lsm.c:1830:
+^I.inode_setattr = ^I^Ismack_inode_setattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1873: FILE: security/smack/smack_lsm.c:1831:
+^I.inode_getattr = ^I^Ismack_inode_getattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1875: FILE: security/smack/smack_lsm.c:1833:
+^I.inode_setxattr = ^I^Ismack_inode_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1876: FILE: security/smack/smack_lsm.c:1834:
+^I.inode_post_setxattr = ^I^Ismack_inode_post_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1877: FILE: security/smack/smack_lsm.c:1835:
+^I.inode_getxattr = ^I^Ismack_inode_getxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1878: FILE: security/smack/smack_lsm.c:1836:
+^I.inode_listxattr = ^I^Ismack_inode_listxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1879: FILE: security/smack/smack_lsm.c:1837:
+^I.inode_removexattr = ^I^Ismack_inode_removexattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1880: FILE: security/smack/smack_lsm.c:1838:
+^I.inode_xattr_getsuffix = ^Ismack_inode_xattr_getsuffix,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1881: FILE: security/smack/smack_lsm.c:1839:
+^I.inode_getsecurity = ^I^Ismack_inode_getsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1882: FILE: security/smack/smack_lsm.c:1840:
+^I.inode_setsecurity = ^I^Ismack_inode_setsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1883: FILE: security/smack/smack_lsm.c:1841:
+^I.inode_listsecurity = ^I^Ismack_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1885: FILE: security/smack/smack_lsm.c:1843:
+^I.file_permission = ^I^Ismack_file_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1886: FILE: security/smack/smack_lsm.c:1844:
+^I.file_alloc_security = ^I^Ismack_file_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1887: FILE: security/smack/smack_lsm.c:1845:
+^I.file_free_security = ^I^Ismack_file_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1888: FILE: security/smack/smack_lsm.c:1846:
+^I.file_ioctl = ^I^I^Ismack_file_ioctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1891: FILE: security/smack/smack_lsm.c:1849:
+^I.file_lock = ^I^I^Ismack_file_lock,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1892: FILE: security/smack/smack_lsm.c:1850:
+^I.file_fcntl = ^I^I^Ismack_file_fcntl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1893: FILE: security/smack/smack_lsm.c:1851:
+^I.file_set_fowner = ^I^Ismack_file_set_fowner,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1894: FILE: security/smack/smack_lsm.c:1852:
+^I.file_send_sigiotask = ^I^Ismack_file_send_sigiotask,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1895: FILE: security/smack/smack_lsm.c:1853:
+^I.file_receive = ^I^Ismack_file_receive,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1898: FILE: security/smack/smack_lsm.c:1856:
+^I.task_alloc_security = ^I^Ismack_task_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1899: FILE: security/smack/smack_lsm.c:1857:
+^I.task_free_security = ^I^Ismack_task_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1903: FILE: security/smack/smack_lsm.c:1861:
+^I.task_setpgid = ^I^Ismack_task_setpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1904: FILE: security/smack/smack_lsm.c:1862:
+^I.task_getpgid = ^I^Ismack_task_getpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1905: FILE: security/smack/smack_lsm.c:1863:
+^I.task_getsid = ^I^I^Ismack_task_getsid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1906: FILE: security/smack/smack_lsm.c:1864:
+^I.task_getsecid = ^I^Ismack_task_getsecid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1908: FILE: security/smack/smack_lsm.c:1866:
+^I.task_setnice = ^I^Ismack_task_setnice,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1909: FILE: security/smack/smack_lsm.c:1867:
+^I.task_setioprio = ^I^Ismack_task_setioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1910: FILE: security/smack/smack_lsm.c:1868:
+^I.task_getioprio = ^I^Ismack_task_getioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1912: FILE: security/smack/smack_lsm.c:1870:
+^I.task_setscheduler = ^I^Ismack_task_setscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1913: FILE: security/smack/smack_lsm.c:1871:
+^I.task_getscheduler = ^I^Ismack_task_getscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1914: FILE: security/smack/smack_lsm.c:1872:
+^I.task_movememory = ^I^Ismack_task_movememory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1915: FILE: security/smack/smack_lsm.c:1873:
+^I.task_kill = ^I^I^Ismack_task_kill,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1916: FILE: security/smack/smack_lsm.c:1874:
+^I.task_wait = ^I^I^Ismack_task_wait,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1919: FILE: security/smack/smack_lsm.c:1877:
+^I.task_to_inode = ^I^Ismack_task_to_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1921: FILE: security/smack/smack_lsm.c:1879:
+^I.ipc_permission = ^I^Ismack_ipc_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1923: FILE: security/smack/smack_lsm.c:1881:
+^I.msg_msg_alloc_security = ^Ismack_msg_msg_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1924: FILE: security/smack/smack_lsm.c:1882:
+^I.msg_msg_free_security = ^Ismack_msg_msg_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1926: FILE: security/smack/smack_lsm.c:1884:
+^I.msg_queue_alloc_security = ^Ismack_msg_queue_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1927: FILE: security/smack/smack_lsm.c:1885:
+^I.msg_queue_free_security = ^Ismack_msg_queue_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1928: FILE: security/smack/smack_lsm.c:1886:
+^I.msg_queue_associate = ^I^Ismack_msg_queue_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1929: FILE: security/smack/smack_lsm.c:1887:
+^I.msg_queue_msgctl = ^I^Ismack_msg_queue_msgctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1930: FILE: security/smack/smack_lsm.c:1888:
+^I.msg_queue_msgsnd = ^I^Ismack_msg_queue_msgsnd,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1931: FILE: security/smack/smack_lsm.c:1889:
+^I.msg_queue_msgrcv = ^I^Ismack_msg_queue_msgrcv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1933: FILE: security/smack/smack_lsm.c:1891:
+^I.shm_alloc_security = ^I^Ismack_shm_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1934: FILE: security/smack/smack_lsm.c:1892:
+^I.shm_free_security = ^I^Ismack_shm_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1935: FILE: security/smack/smack_lsm.c:1893:
+^I.shm_associate = ^I^Ismack_shm_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1936: FILE: security/smack/smack_lsm.c:1894:
+^I.shm_shmctl = ^I^I^Ismack_shm_shmctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1937: FILE: security/smack/smack_lsm.c:1895:
+^I.shm_shmat = ^I^I^Ismack_shm_shmat,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1939: FILE: security/smack/smack_lsm.c:1897:
+^I.sem_alloc_security = ^I^Ismack_sem_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1940: FILE: security/smack/smack_lsm.c:1898:
+^I.sem_free_security = ^I^Ismack_sem_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1941: FILE: security/smack/smack_lsm.c:1899:
+^I.sem_associate = ^I^Ismack_sem_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1942: FILE: security/smack/smack_lsm.c:1900:
+^I.sem_semctl = ^I^I^Ismack_sem_semctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1943: FILE: security/smack/smack_lsm.c:1901:
+^I.sem_semop = ^I^I^Ismack_sem_semop,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1946: FILE: security/smack/smack_lsm.c:1904:
+^I.netlink_recv = ^I^Icap_netlink_recv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1951: FILE: security/smack/smack_lsm.c:1909:
+^I.d_instantiate = ^I^Ismack_d_instantiate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1953: FILE: security/smack/smack_lsm.c:1911:
+^I.getprocattr = ^I^I^Ismack_getprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1954: FILE: security/smack/smack_lsm.c:1912:
+^I.setprocattr = ^I^I^Ismack_setprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1958: FILE: security/smack/smack_lsm.c:1916:
+^I.unix_stream_connect = ^I^Ismack_unix_stream_connect,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1959: FILE: security/smack/smack_lsm.c:1917:
+^I.unix_may_send = ^I^Ismack_unix_may_send,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1961: FILE: security/smack/smack_lsm.c:1919:
+^I/* .socket_create ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1962: FILE: security/smack/smack_lsm.c:1920:
+^I.socket_post_create = ^I^Ismack_socket_post_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1963: FILE: security/smack/smack_lsm.c:1921:
+^I/* .socket_bind ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1964: FILE: security/smack/smack_lsm.c:1922:
+^I/* .socket_connect ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1965: FILE: security/smack/smack_lsm.c:1923:
+^I/* .socket_listen ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1966: FILE: security/smack/smack_lsm.c:1924:
+^I/* .socket_accept ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1967: FILE: security/smack/smack_lsm.c:1925:
+^I/* .socket_post_accept ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1968: FILE: security/smack/smack_lsm.c:1926:
+^I/* .socket_sendmsg ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1969: FILE: security/smack/smack_lsm.c:1927:
+^I/* .socket_recvmsg ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1975: FILE: security/smack/smack_lsm.c:1933:
+^I.socket_sock_rcv_skb = ^I^Ismack_socket_sock_rcv_skb,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1978: FILE: security/smack/smack_lsm.c:1936:
+^I.sk_alloc_security = ^I^Ismack_sk_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1979: FILE: security/smack/smack_lsm.c:1937:
+^I.sk_free_security = ^I^Ismack_sk_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1980: FILE: security/smack/smack_lsm.c:1938:
+^I/* .sk_clone_security ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1981: FILE: security/smack/smack_lsm.c:1939:
+^I/* .sk_getsecid ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1982: FILE: security/smack/smack_lsm.c:1940:
+^I.sock_graft = ^I^I^Ismack_sock_graft,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1983: FILE: security/smack/smack_lsm.c:1941:
+^I.inet_conn_request = ^I^Ismack_inet_conn_request,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1987: FILE: security/smack/smack_lsm.c:1945:
+^I/* .req_classify_flow ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2001: FILE: security/smack/smack_lsm.c:1959:
+^I.key_alloc = ^I^I^Ismack_key_alloc,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2002: FILE: security/smack/smack_lsm.c:1960:
+^I.key_free = ^I^I^Ismack_key_free,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2003: FILE: security/smack/smack_lsm.c:1961:
+^I.key_permission = ^I^Ismack_key_permission,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2011: FILE: security/smack/smack_lsm.c:1969:
+	struct task_smack *tsp;
+	printk(KERN_INFO "Smack:  Initializing.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2011: FILE: security/smack/smack_lsm.c:1969:
+	printk(KERN_INFO "Smack:  Initializing.\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsp)...) over kzalloc(sizeof(struct task_smack)...)
#2015: FILE: security/smack/smack_lsm.c:1973:
+	tsp = kzalloc(sizeof(struct task_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsp"
#2016: FILE: security/smack/smack_lsm.c:1974:
+	if (tsp == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2017: FILE: security/smack/smack_lsm.c:1975:
+	if (tsp == NULL)
+		panic("smack:  Failed to initialize initial task.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2029: FILE: security/smack/smack_lsm.c:1987:
+/* smack requires early initialization in order to label
+   all processes and objects when they are created. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2029: FILE: security/smack/smack_lsm.c:1987:
+   all processes and objects when they are created. */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397625.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 150 warnings, 86 checks, 1997 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397625.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
