WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git sched/for-linus

WARNING:TYPO_SPELLING: 'contraint' may be misspelled - perhaps 'constraint'?
#102: 
      sched: rt: fix the bandwidth contraint computations
                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'revert'
#108: 
      sched: revert revert of: fair-group: SMP-nice for group scheduling

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#294: FILE: include/linux/sched.h:1129:
+	unsigned securebits;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#366: FILE: include/linux/sched.h:1579:
+extern void sched_clock_tick_stop(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: include/linux/sched.h:1580:
+extern void sched_clock_tick_start(int cpu);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'class' - possible side-effects?
#972: FILE: kernel/sched.c:1662:
+#define for_each_class(class) \
+   for (class = sched_class_highest; class; class = class->next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: kernel/sched.c:1663:
+   for (class = sched_class_highest; class; class = class->next)$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1243: FILE: kernel/sched.c:3136:
+		sum_avg_load_per_task = avg_load_per_task = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1262: FILE: kernel/sched.c:3194:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1273: FILE: kernel/sched.c:3205:
+		avg_load_per_task = sg_div_cpu_power(group,
+				sum_avg_load_per_task * SCHED_LOAD_SCALE);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1275: FILE: kernel/sched.c:3207:
+		if ((max_cpu_load - min_cpu_load) > 2*avg_load_per_task)
 		                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1287: FILE: kernel/sched.c:3350:
+		if (max_load - this_load + 2*busiest_load_per_task >=
 		                            ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1544: FILE: kernel/sched.c:6432:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1556: FILE: kernel/sched.c:6455:
+	printk(KERN_CONT "span %s level %s\n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1556: FILE: kernel/sched.c:6455:
+	printk(KERN_CONT "span %s level %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: kernel/sched.c:6456:
+	printk(KERN_CONT "span %s level %s\n",
+		str, sd_level_to_string(sd->level));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1690: FILE: kernel/sched.c:7725:
+		/* fall-through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1699: FILE: kernel/sched.c:7732:
 
+

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1705: FILE: kernel/sched.c:7738:
+		/* fall-through */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1943: FILE: kernel/sched_clock.c:41:
+#define MIN_MULTI (1LL << (MULTI_SHIFT-1))
                                       ^

CHECK:BRACES: Unbalanced braces around else statement
#2072: FILE: kernel/sched_clock.c:185:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2136: FILE: kernel/sched_clock.c:272:
+	if ((long)delta_raw > 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2144: FILE: kernel/sched_clock.c:280:
+	} else

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#2179: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2184: FILE: kernel/sched_cpupri.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2185: FILE: kernel/sched_cpupri.c:2:
+ *  kernel/sched_cpupri.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array' - possible side-effects?
#2232: FILE: kernel/sched_cpupri.c:49:
+#define for_each_cpupri_active(array, idx)                    \
+  for (idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);     \
+       idx < CPUPRI_NR_PRIORITIES;                            \
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#2232: FILE: kernel/sched_cpupri.c:49:
+#define for_each_cpupri_active(array, idx)                    \
+  for (idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);     \
+       idx < CPUPRI_NR_PRIORITIES;                            \
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2233: FILE: kernel/sched_cpupri.c:50:
+  for (idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2234: FILE: kernel/sched_cpupri.c:51:
+       idx < CPUPRI_NR_PRIORITIES;                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2235: FILE: kernel/sched_cpupri.c:52:
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2235: FILE: kernel/sched_cpupri.c:52:
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))
                                                            ^

WARNING:TYPO_SPELLING: 'invokation' may be misspelled - perhaps 'invocation'?
#2244: FILE: kernel/sched_cpupri.c:61:
+ * current invokation.  By the time the call returns, the CPUs may have in
            ^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2295: FILE: kernel/sched_cpupri.c:112:
+	BUG_ON(newpri >= CPUPRI_NR_PRIORITIES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2357: FILE: kernel/sched_cpupri.c:174:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2364: FILE: kernel/sched_cpupri.h:1:
+#ifndef _LINUX_CPUPRI_H

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2378: FILE: kernel/sched_cpupri.h:15:
+	spinlock_t lock;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#2430: FILE: kernel/sched_debug.c:165:
+#define P(n) SEQ_printf(m, "  .%-30s: %d\n", #n, rq->n);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2430: FILE: kernel/sched_debug.c:165:
+#define P(n) SEQ_printf(m, "  .%-30s: %d\n", #n, rq->n);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2475: FILE: kernel/sched_debug.c:210:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2476: FILE: kernel/sched_debug.c:211:
+#define P(x) \
+	SEQ_printf(m, "  .%-30s: %Ld\n", #x, (long long)(rt_rq->x))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2477: FILE: kernel/sched_debug.c:212:
+	SEQ_printf(m, "  .%-30s: %Ld\n", #x, (long long)(rt_rq->x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2478: FILE: kernel/sched_debug.c:213:
+#define PN(x) \
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", #x, SPLIT_NS(rt_rq->x))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2479: FILE: kernel/sched_debug.c:214:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", #x, SPLIT_NS(rt_rq->x))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2530: FILE: kernel/sched_fair.c:344:
+		delta = calc_delta_mine(delta,
+				se->load.weight, &cfs_rq_of(se)->load);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2544: FILE: kernel/sched_fair.c:358:
+		delta = calc_delta_mine(delta,
+				cfs_rq_of(se)->load.weight, &se->load);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2607: FILE: kernel/sched_fair.c:427:
+		.inv_weight = 1UL << (WMULT_SHIFT-NICE_0_SHIFT)
 		                                 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#2636: FILE: kernel/sched_fair.c:455:
+		} else
[...]
+		if (se->load.weight < NICE_0_LOAD) {

CHECK:BRACES: Unbalanced braces around else statement
#2636: FILE: kernel/sched_fair.c:455:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2827: FILE: kernel/sched_fair.c:1083:
+static long effective_load(struct task_group *tg, int cpu,
+		long wl, long wg)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#2851: FILE: kernel/sched_fair.c:1107:
+#define D(n) (likely(n) ? (n) : 1)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2859: FILE: kernel/sched_fair.c:1115:
+		a = S*(rw + wl);
 		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2860: FILE: kernel/sched_fair.c:1116:
+		b = S*rw + s*wg;
 		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2860: FILE: kernel/sched_fair.c:1116:
+		b = S*rw + s*wg;
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2862: FILE: kernel/sched_fair.c:1118:
+		wl = s*(a-b)/D(b);
 		      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2862: FILE: kernel/sched_fair.c:1118:
+		wl = s*(a-b)/D(b);
 		         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2862: FILE: kernel/sched_fair.c:1118:
+		wl = s*(a-b)/D(b);
 		            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2880: FILE: kernel/sched_fair.c:1136:
+static inline unsigned long effective_load(struct task_group *tg, int cpu,
+		unsigned long wl, unsigned long wg)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2919: FILE: kernel/sched_fair.c:1175:
+	balanced = 100*(tl + effective_load(tg, this_cpu, weight, weight)) <=
 	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2920: FILE: kernel/sched_fair.c:1176:
+		imbalance*(load + effective_load(tg, prev_cpu, 0, weight));
 		         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3000: FILE: kernel/sched_fair.c:1474:
+__load_balance_fair(struct rq *this_rq, int this_cpu, struct rq *busiest,
+		unsigned long max_load_move, struct sched_domain *sd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3087: FILE: kernel/sched_fair.c:1519:
+		moved_load = __load_balance_fair(this_rq, this_cpu, busiest,
+				rem_load, sd, idle, all_pinned, this_best_prio,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3273: FILE: kernel/sched_rt.c:291:
+		if (rt_rq->rt_runtime == RUNTIME_INF ||
+				rt_rq->rt_runtime == rt_b->rt_runtime)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3302: FILE: kernel/sched_rt.c:320:
+		BUG_ON(want);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3381: FILE: kernel/sched_rt.c:399:
+		if (rt_rq->rt_time) {
[...]
+		} else if (rt_rq->rt_nr_running)
[...]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3388: FILE: kernel/sched_rt.c:406:
+			rt_rq->rt_time -= min(rt_rq->rt_time, overrun*runtime);
 			                                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->prio == rq->curr->prio'
#3559: FILE: kernel/sched_rt.c:781:
+	if((p->prio == rq->curr->prio)
+	   && p->rt.nr_cpus_allowed == 1
+	   && rq->curr->rt.nr_cpus_allowed != 1) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#3559: FILE: kernel/sched_rt.c:781:
+	if((p->prio == rq->curr->prio)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3560: FILE: kernel/sched_rt.c:782:
+	if((p->prio == rq->curr->prio)
+	   && p->rt.nr_cpus_allowed == 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3561: FILE: kernel/sched_rt.c:783:
+	   && p->rt.nr_cpus_allowed == 1
+	   && rq->curr->rt.nr_cpus_allowed != 1) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000255058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 23 warnings, 47 checks, 3421 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000255058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
