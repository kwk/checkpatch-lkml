ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#85: FILE: drivers/input/touchscreen/rmi.h

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#85: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: drivers/input/touchscreen/rmi.h:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: drivers/input/touchscreen/rmi.h:38:
+  unsigned char queryBaseAddr;$

CHECK:CAMELCASE: Avoid CamelCase: <queryBaseAddr>
#127: FILE: drivers/input/touchscreen/rmi.h:38:
+  unsigned char queryBaseAddr;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: drivers/input/touchscreen/rmi.h:39:
+  unsigned char commandBaseAddr;$

CHECK:CAMELCASE: Avoid CamelCase: <commandBaseAddr>
#128: FILE: drivers/input/touchscreen/rmi.h:39:
+  unsigned char commandBaseAddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: drivers/input/touchscreen/rmi.h:40:
+  unsigned char controlBaseAddr;$

CHECK:CAMELCASE: Avoid CamelCase: <controlBaseAddr>
#129: FILE: drivers/input/touchscreen/rmi.h:40:
+  unsigned char controlBaseAddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: drivers/input/touchscreen/rmi.h:41:
+  unsigned char dataBaseAddr;$

CHECK:CAMELCASE: Avoid CamelCase: <dataBaseAddr>
#130: FILE: drivers/input/touchscreen/rmi.h:41:
+  unsigned char dataBaseAddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: drivers/input/touchscreen/rmi.h:42:
+  unsigned char interruptSrcCnt;$

CHECK:CAMELCASE: Avoid CamelCase: <interruptSrcCnt>
#131: FILE: drivers/input/touchscreen/rmi.h:42:
+  unsigned char interruptSrcCnt;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/input/touchscreen/rmi.h:43:
+  unsigned char functionNum;$

CHECK:CAMELCASE: Avoid CamelCase: <functionNum>
#132: FILE: drivers/input/touchscreen/rmi.h:43:
+  unsigned char functionNum;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/input/touchscreen/rmi.h:53:
+  unsigned char functionNum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/input/touchscreen/rmi.h:60:
+  unsigned char numSources;$

CHECK:CAMELCASE: Avoid CamelCase: <numSources>
#149: FILE: drivers/input/touchscreen/rmi.h:60:
+  unsigned char numSources;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/input/touchscreen/rmi.h:66:
+  unsigned char numDataPoints;$

CHECK:CAMELCASE: Avoid CamelCase: <numDataPoints>
#155: FILE: drivers/input/touchscreen/rmi.h:66:
+  unsigned char numDataPoints;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/input/touchscreen/rmi.h:69:
+  unsigned char dataRegBlockSize;$

CHECK:CAMELCASE: Avoid CamelCase: <dataRegBlockSize>
#158: FILE: drivers/input/touchscreen/rmi.h:69:
+  unsigned char dataRegBlockSize;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: drivers/input/touchscreen/rmi.h:74:
+  unsigned char interruptRegister;$

CHECK:CAMELCASE: Avoid CamelCase: <interruptRegister>
#163: FILE: drivers/input/touchscreen/rmi.h:74:
+  unsigned char interruptRegister;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/input/touchscreen/rmi.h:75:
+  unsigned char interruptMask;$

CHECK:CAMELCASE: Avoid CamelCase: <interruptMask>
#164: FILE: drivers/input/touchscreen/rmi.h:75:
+  unsigned char interruptMask;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: drivers/input/touchscreen/rmi.h:81:
+  struct rmi_function_descriptor funcDescriptor;$

CHECK:CAMELCASE: Avoid CamelCase: <funcDescriptor>
#170: FILE: drivers/input/touchscreen/rmi.h:81:
+  struct rmi_function_descriptor funcDescriptor;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: drivers/input/touchscreen/rmi.h:87:
+  struct list_head link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/input/touchscreen/rmi.h:105:
+  unsigned rmi_maj_ver;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#194: FILE: drivers/input/touchscreen/rmi.h:105:
+  unsigned rmi_maj_ver;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/input/touchscreen/rmi.h:109:
+  unsigned rmi_min_ver;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#198: FILE: drivers/input/touchscreen/rmi.h:109:
+  unsigned rmi_min_ver;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/input/touchscreen/rmi.h:113:
+  unsigned char mfgid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: drivers/input/touchscreen/rmi.h:117:
+  unsigned char properties;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: drivers/input/touchscreen/rmi.h:124:
+  unsigned char prod_info[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: drivers/input/touchscreen/rmi.h:128:
+  unsigned char date_code[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: drivers/input/touchscreen/rmi.h:132:
+  unsigned short tester_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: drivers/input/touchscreen/rmi.h:136:
+  unsigned short serial_num;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/input/touchscreen/rmi.h:140:
+  char prod_id[10];$

WARNING:REPEATED_WORD: Possible repeated word: 'on'
#233: FILE: drivers/input/touchscreen/rmi.h:144:
+   * Documentation on on how to use it can be found at

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/input/touchscreen/rmi.h:148:
+  struct list_head functions;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: drivers/input/touchscreen/rmi.h:152:
+  char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: drivers/input/touchscreen/rmi.h:153:
+  int  (*write)(struct rmi_phys_driver *pd, unsigned short address, char data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: drivers/input/touchscreen/rmi.h:154:
+  int  (*read)(struct rmi_phys_driver *pd, unsigned short address, char *buffer);$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#244: FILE: drivers/input/touchscreen/rmi.h:155:
+  int  (*write_multiple)(struct rmi_phys_driver *pd, unsigned short address, char *buffer, int length);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/input/touchscreen/rmi.h:155:
+  int  (*write_multiple)(struct rmi_phys_driver *pd, unsigned short address, char *buffer, int length);$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#245: FILE: drivers/input/touchscreen/rmi.h:156:
+  int  (*read_multiple)(struct rmi_phys_driver *pd, unsigned short address, char *buffer, int length);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: drivers/input/touchscreen/rmi.h:156:
+  int  (*read_multiple)(struct rmi_phys_driver *pd, unsigned short address, char *buffer, int length);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: drivers/input/touchscreen/rmi.h:157:
+  void (*attention)(struct rmi_phys_driver *pd, int instance);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: drivers/input/touchscreen/rmi.h:158:
+  int  (*get_attention)(struct rmi_phys_driver *pd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: drivers/input/touchscreen/rmi.h:159:
+  int  polling_required;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: drivers/input/touchscreen/rmi.h:165:
+  struct list_head drivers;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: drivers/input/touchscreen/rmi.h:166:
+  struct rmi_application *app;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: drivers/input/touchscreen/rmi.h:167:
+  struct rmi_module_info rmi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: drivers/input/touchscreen/rmi.h:168:
+  struct module *module;$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#263: FILE: drivers/input/touchscreen/rmi.h:174:
+int rmi_write_multiple(struct rmi_application *app, unsigned short address, unsigned char *data, int length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: drivers/input/touchscreen/rmi.h:179:
+struct rmi_application *rmi_register_application(const char *name,
+  void (*attention)(struct rmi_phys_driver *pd, int instance),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: drivers/input/touchscreen/rmi.h:179:
+  void (*attention)(struct rmi_phys_driver *pd, int instance),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/input/touchscreen/rmi.h:180:
+  int (*probe)(struct rmi_application *app, const struct rmi_module_info *rmi),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/input/touchscreen/rmi.h:181:
+  void (*config)(struct rmi_application *app));$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#286: FILE: drivers/input/touchscreen/rmi.h:197:
+	do { \
+	  if (X##allocsrmi) X##allocsrmi--; \

WARNING:TABSTOP: Statements should start on a tabstop
#287: FILE: drivers/input/touchscreen/rmi.h:198:
+	  if (X##allocsrmi) X##allocsrmi--; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#287: FILE: drivers/input/touchscreen/rmi.h:198:
+	  if (X##allocsrmi) X##allocsrmi--; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TABSTOP: Statements should start on a tabstop
#288: FILE: drivers/input/touchscreen/rmi.h:199:
+	  else printk(KERN_DEBUG "Too many " #X " frees\n"); \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#288: FILE: drivers/input/touchscreen/rmi.h:199:
+	  else printk(KERN_DEBUG "Too many " #X " frees\n"); \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#288: FILE: drivers/input/touchscreen/rmi.h:199:
+	  else printk(KERN_DEBUG "Too many " #X " frees\n"); \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#291: FILE: drivers/input/touchscreen/rmi.h:202:
+	do { \
+	  if (X##allocsrmi) printk(KERN_DEBUG "Left over " #X " buffers: %d\n", \

WARNING:TABSTOP: Statements should start on a tabstop
#292: FILE: drivers/input/touchscreen/rmi.h:203:
+	  if (X##allocsrmi) printk(KERN_DEBUG "Left over " #X " buffers: %d\n", \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#292: FILE: drivers/input/touchscreen/rmi.h:203:
+	  if (X##allocsrmi) printk(KERN_DEBUG "Left over " #X " buffers: %d\n", \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#292: FILE: drivers/input/touchscreen/rmi.h:203:
+	  if (X##allocsrmi) printk(KERN_DEBUG "Left over " #X " buffers: %d\n", \

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#305: FILE: drivers/input/touchscreen/rmi_app_touchpad.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#310: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:1:
+/**

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:58:
+  static int pollallocsrmi;$

CHECK:BIT_MACRO: Prefer using the BIT macro
#370: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:61:
+#define RMI_REPORT_RATE_40 (1 << 6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#373: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:64:
+static int polljif = HZ/20;
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#375: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:66:
+static int hspolljif = HZ/40;
                          ^

CHECK:CAMELCASE: Avoid CamelCase: <fn01ControlBaseAddr>
#388: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:79:
+extern unsigned short fn01ControlBaseAddr;	/* RMI4 device control == function 0x01 */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#388: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:79:
+extern unsigned short fn01ControlBaseAddr;	/* RMI4 device control == function 0x01 */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <interruptRegisterCount>
#389: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:80:
+extern unsigned int interruptRegisterCount;   /* number of total interrupt registers to read */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#389: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:80:
+extern unsigned int interruptRegisterCount;   /* number of total interrupt registers to read */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#391: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:82:
+extern struct list_head fns_list;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:91:
+  complete(&touch_completion);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:100:
+  unsigned char interruptStatus[4] = {0, 0, 0, 0};$

CHECK:CAMELCASE: Avoid CamelCase: <interruptStatus>
#409: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:100:
+  unsigned char interruptStatus[4] = {0, 0, 0, 0};

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:101:
+  int touch; /* number of touch points - fingers or buttons */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:102:
+  struct rmi_functions *fn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:103:
+  struct rmi_function_info *rfi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:104:
+  struct rmi_phys_driver *rpd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:105:
+  struct rmi_module_info *rmi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:106:
+  static int num_error_reports;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:108:
+  touch = 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#420: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:111:
+  /* Get the interrupt status from the function $01 control register+1 to find
+	 which source(s) were interrupting so we can read the data from the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#421: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:112:
+	 source(s) (2D sensor, buttons, etc.). */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:113:
+  if (rmi_read_multiple(app, fn01ControlBaseAddr + 1, interruptStatus, interruptRegisterCount)) {$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#423: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:114:
+	printk(KERN_ERR "Could not read interrupt status registers 0x%x\n", fn01ControlBaseAddr + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#423: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:114:
+	printk(KERN_ERR "Could not read interrupt status registers 0x%x\n", fn01ControlBaseAddr + 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:116:
+  }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#428: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:119:
+  /* check each function that has data sources and if the interrupt for that triggered
+	 then call that RMI4 functions report() function to gather data and report it to the input

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:122:
+  rpd  = app->rpd; /* get ptr to rmi_physical_driver from app */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:123:
+  rmi  = &(rpd->rmi); /* get ptr to rmi_module_info from physical driver */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rpd->rmi
#432: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:123:
+  rmi  = &(rpd->rmi); /* get ptr to rmi_module_info from physical driver */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:125:
+  list_for_each_entry(rfi, &rmi->functions, link) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#435: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:126:
+	if (rfi->numSources) {
+	  if (interruptStatus[rfi->interruptRegister] & rfi->interruptMask) {

WARNING:TABSTOP: Statements should start on a tabstop
#436: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:127:
+	  if (interruptStatus[rfi->interruptRegister] & rfi->interruptMask) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#438: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:129:
+		bool found;
+		found = false;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#439: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:130:
+		list_for_each_entry(fn, &fns_list, link) {
+		  if (rfi->functionNum == fn->functionNum) {

WARNING:TABSTOP: Statements should start on a tabstop
#440: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:131:
+		  if (rfi->functionNum == fn->functionNum) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#442: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:133:
+			if (fn->report) {
+			  touch = fn->report(app, rfi, fn->input);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#444: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:135:
+			} else {
+			  num_error_reports++;

WARNING:TABSTOP: Statements should start on a tabstop
#446: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:137:
+			  if (num_error_reports < 6) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#448: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:139:
+				/* the developer did not add in the pointer to the report
+				   function into rmi4_supported_data_src_functions */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#448: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:139:
+				   function into rmi4_supported_data_src_functions */

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#449: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:140:
+				printk(KERN_ERR "rmi_app_touchpad.report_sensor_data: no find report function for function 0x%x\n", fn->functionNum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#449: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:140:
+				printk(KERN_ERR "rmi_app_touchpad.report_sensor_data: no find report function for function 0x%x\n", fn->functionNum);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'report_sensor_data', this function's name, in a string
#449: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:140:
+				printk(KERN_ERR "rmi_app_touchpad.report_sensor_data: no find report function for function 0x%x\n", fn->functionNum);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TABSTOP: Statements should start on a tabstop
#450: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:141:
+			  }

WARNING:TABSTOP: Statements should start on a tabstop
#451: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:142:
+			  break;

WARNING:TABSTOP: Statements should start on a tabstop
#453: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:144:
+		  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#456: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:147:
+		if (!found) {
+		  num_error_reports++;

WARNING:TABSTOP: Statements should start on a tabstop
#458: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:149:
+		  if (num_error_reports < 6) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#460: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:151:
+			/* if no support found for this RMI4 function it means the
+			   developer did not add the appropriate function pointer

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#463: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:154:
+			   functions in rmi.h as required */

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#464: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:155:
+			printk(KERN_ERR "rmi_app_touchpad.report_sensor_data: could not any support for function 0x%x\n", fn->functionNum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#464: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:155:
+			printk(KERN_ERR "rmi_app_touchpad.report_sensor_data: could not any support for function 0x%x\n", fn->functionNum);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'report_sensor_data', this function's name, in a string
#464: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:155:
+			printk(KERN_ERR "rmi_app_touchpad.report_sensor_data: could not any support for function 0x%x\n", fn->functionNum);

WARNING:TABSTOP: Statements should start on a tabstop
#465: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:156:
+		  }

WARNING:TABSTOP: Statements should start on a tabstop
#467: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:158:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:160:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:163:
+  return touch;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#475: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:166:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:175:
+  struct rmi_application *app = (struct rmi_application *)param;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:177:
+  daemonize("rmitouchd");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:179:
+  while (!kthread_should_stop()) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#489: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:180:
+	if (time_to_quit)
+	  break;

WARNING:TABSTOP: Statements should start on a tabstop
#490: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:181:
+	  break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#494: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:185:
+	if (time_to_quit)
+	  break;

WARNING:TABSTOP: Statements should start on a tabstop
#495: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:186:
+	  break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#498: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:189:
+	do {
+	  report_sensor_data(app);

WARNING:TABSTOP: Statements should start on a tabstop
#501: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:192:
+	  if (time_to_quit)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:195:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:197:
+  complete_and_exit(&thread_comp, 0);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#510: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:201:
+ * properly shut down the timers on exit. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:206:
+  struct delayed_work dw;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:207:
+  struct rmi_application *app;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:208:
+  struct list_head link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:214:
+  struct delayed_work *dw = container_of(data, struct delayed_work, work);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:215:
+  struct poll_instance *pi = container_of(dw, struct poll_instance, dw);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:216:
+  static int calls_with_no_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:217:
+  int touch = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:219:
+  if (time_to_quit)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#528: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:219:
+  if (time_to_quit)
+    return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:220:
+    return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:222:
+  touch = report_sensor_data(pi->app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:229:
+  if (touch)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:231:
+  if (!time_to_quit) {^I/* Don't schedule if it's time to quit. */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#541: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:232:
+	if (calls_with_no_data > 5) {
+	  schedule_delayed_work(dw, polljif);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#543: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:234:
+	} else {
+	  if (!touch)

WARNING:TABSTOP: Statements should start on a tabstop
#544: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:235:
+	  if (!touch)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:239:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:249:
+  struct rmi_function_info *rfi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:250:
+  int data_sources = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:251:
+  int retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:253:
+  if (!rmi) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#563: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:254:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'probe', this function's name, in a string
#563: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:254:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:SPLIT_STRING: quoted string split across lines
#564: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:255:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "
+	  "Invalid module info: %p\n", rmi);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:257:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:260:
+  if (rmi->mfgid != 1) { /* Synaptics */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#570: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:261:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'probe', this function's name, in a string
#570: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:261:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:SPLIT_STRING: quoted string split across lines
#571: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:262:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "
+	  "Invalid mfg id: %d\n", rmi->mfgid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:264:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:267:
+  list_for_each_entry(rfi, &rmi->functions, link) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 10)
#576: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:267:
+  list_for_each_entry(rfi, &rmi->functions, link) {
+	  data_sources += rfi->numSources;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:269:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:271:
+  if (data_sources) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#583: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:274:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'probe', this function's name, in a string
#583: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:274:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:SPLIT_STRING: quoted string split across lines
#584: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:275:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "
+	  "Found %d data sources for : %p\n", data_sources, rmi);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:276:
+  } else {$

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#586: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:277:
+	/* we don't have any data sources for this sensor - oops! - either an un-flashed sensor or bad!! */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#587: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:278:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'probe', this function's name, in a string
#587: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:278:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "

WARNING:SPLIT_STRING: quoted string split across lines
#588: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:279:
+	printk(KERN_ERR "rmi_app_touchpad.probe: "
+	  "No data sources found for : %p\n", rmi);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:280:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:282:
+  return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:288:
+  struct rmi_function_info *rfi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:289:
+  struct rmi_phys_driver *rpd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:290:
+  struct rmi_module_info *rmi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:292:
+  rpd = app->rpd; /* get ptr to rmi_physical_driver from app */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:293:
+  rmi = &(rpd->rmi); /* get ptr to rmi_module_info from physical driver */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rpd->rmi
#602: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:293:
+  rmi = &(rpd->rmi); /* get ptr to rmi_module_info from physical driver */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:295:
+  list_for_each_entry(rfi, &rmi->functions, link) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#605: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:296:
+	if (rfi->numSources) /* if this function has data sources associated with it...*/ {
[...]
+	  struct rmi_functions *fn;

WARNING:TABSTOP: Statements should start on a tabstop
#607: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:298:
+	  struct rmi_functions *fn;

WARNING:TABSTOP: Statements should start on a tabstop
#608: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:299:
+	  bool found;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#613: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:304:
+		if (fn->functionNum == rfi->functionNum) {
+		  found = true;

WARNING:TABSTOP: Statements should start on a tabstop
#615: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:306:
+		  if (fn->config) {

WARNING:TABSTOP: Statements should start on a tabstop
#617: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:308:
+		  } else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#619: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:310:
+			/* the developer did not add in the pointer to the config
+			   function into rmi4_supported_data_src_functions */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#619: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:310:
+			   function into rmi4_supported_data_src_functions */

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#620: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:311:
+			printk(KERN_ERR "rmi_app_touchpad.config - no config function for function 0x%x\n", rfi->functionNum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#620: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:311:
+			printk(KERN_ERR "rmi_app_touchpad.config - no config function for function 0x%x\n", rfi->functionNum);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'config', this function's name, in a string
#620: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:311:
+			printk(KERN_ERR "rmi_app_touchpad.config - no config function for function 0x%x\n", rfi->functionNum);

WARNING:TABSTOP: Statements should start on a tabstop
#622: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:313:
+		  }

WARNING:TABSTOP: Statements should start on a tabstop
#624: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:315:
+	  }

WARNING:TABSTOP: Statements should start on a tabstop
#625: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:316:
+	  if (!found) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#627: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:318:
+		/* if no support found for this RMI4 function it means the
+		   developer did not add the appropriate function pointer list

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#630: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:321:
+		   required */

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#631: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:322:
+		printk(KERN_ERR "rmi_app_touchpad.config - could not find support for function 0x%x\n", rfi->functionNum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#631: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:322:
+		printk(KERN_ERR "rmi_app_touchpad.config - could not find support for function 0x%x\n", rfi->functionNum);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'config', this function's name, in a string
#631: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:322:
+		printk(KERN_ERR "rmi_app_touchpad.config - could not find support for function 0x%x\n", rfi->functionNum);

WARNING:TABSTOP: Statements should start on a tabstop
#632: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:323:
+	  }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#635: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:326:
+	  /* if we are not doing polling then enable the interrupts for the
+		 data sources for this function */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#635: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:326:
+		 data sources for this function */

WARNING:TABSTOP: Statements should start on a tabstop
#636: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:327:
+	  if (!rmi_polling_required(app)) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#638: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:329:
+		rmi_write(app, fn01ControlBaseAddr + 1 + rfi->interruptRegister, rfi->interruptMask);

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#639: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:330:
+		printk(KERN_INFO "rmi_app_touchpad.config -  Interrupt Driven - turning on interrupts for function 0x%x\n", rfi->functionNum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#639: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:330:
+		printk(KERN_INFO "rmi_app_touchpad.config -  Interrupt Driven - turning on interrupts for function 0x%x\n", rfi->functionNum);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'config', this function's name, in a string
#639: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:330:
+		printk(KERN_INFO "rmi_app_touchpad.config -  Interrupt Driven - turning on interrupts for function 0x%x\n", rfi->functionNum);

WARNING:TABSTOP: Statements should start on a tabstop
#640: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:331:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:333:
+  }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#645: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:336:
+  /* if we are not polling we need to set up the interrupt thread - otherwise we need to
+	 set up the polling callback and worker thread. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#645: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:336:
+	 set up the polling callback and worker thread. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:337:
+  if (!rmi_polling_required(app)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#650: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:341:
+	if (HZ < 500) {
[...]
+	  rmi_write(app, fn01ControlBaseAddr, RMI_REPORT_RATE_40);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:349:
+  } else {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#661: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:352:
+	struct poll_instance *pi;
+	pi = kmalloc(sizeof(*pi), GFP_KERNEL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#663: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:354:
+	if (!pi) {
+	  printk(KERN_ERR "rmi_app_touchpad.config: "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#664: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:355:
+	  printk(KERN_ERR "rmi_app_touchpad.config: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'config', this function's name, in a string
#664: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:355:
+	  printk(KERN_ERR "rmi_app_touchpad.config: "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#664: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:355:
+	if (!pi) {
+	  printk(KERN_ERR "rmi_app_touchpad.config: "

WARNING:SPLIT_STRING: quoted string split across lines
#665: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:356:
+	  printk(KERN_ERR "rmi_app_touchpad.config: "
+		"Out of memory claiming %s\n",

WARNING:TABSTOP: Statements should start on a tabstop
#667: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:358:
+	  return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:366:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:376:
+  struct rmi_functions *fn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:377:
+  int retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:379:
+  retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:381:
+  printk(KERN_INFO "rmi_app_touchpad.mod_init: RMI4 TouchPad Driver\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#690: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:381:
+  printk(KERN_INFO "rmi_app_touchpad.mod_init: RMI4 TouchPad Driver\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_init', this function's name, in a string
#690: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:381:
+  printk(KERN_INFO "rmi_app_touchpad.mod_init: RMI4 TouchPad Driver\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:383:
+  INIT_LIST_HEAD(&pollers);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:385:
+  time_to_quit = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:386:
+  init_completion(&touch_completion);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:387:
+  init_completion(&thread_comp);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#699: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:390:
+  /* NOTE: we are creating only one input dev file for this but theoretically
+	 you could create a separate one for each data source and store it below.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:396:
+  input = input_allocate_device();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:397:
+  if (input == NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!input"
#706: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:397:
+  if (input == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#707: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:398:
+	printk(KERN_ERR "rmi_app_touchpad.mod_init:  Failed to allocate memory for a new input device.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_init', this function's name, in a string
#707: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:398:
+	printk(KERN_ERR "rmi_app_touchpad.mod_init:  Failed to allocate memory for a new input device.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:400:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:402:
+  input->name = "RMI4 Touchpad";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:403:
+  input->phys = "rmi_app_touchpad";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:406:
+  list_for_each_entry(fn, &fns_list, link) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#716: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:407:
+	if (fn->init) {
+	  fn->input = input; /* store the input_dev ptr for use later */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#719: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:410:
+	} else {
[...]
+	  printk(KERN_ERR "rmi_app_touchpad.mod_init: no init function for function 0x%x\n", fn->functionNum);

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#720: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:411:
+	  /* the developer did not add in the pointer to the init function into rmi4_supported_data_src_functions */

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#721: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:412:
+	  printk(KERN_ERR "rmi_app_touchpad.mod_init: no init function for function 0x%x\n", fn->functionNum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#721: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:412:
+	  printk(KERN_ERR "rmi_app_touchpad.mod_init: no init function for function 0x%x\n", fn->functionNum);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_init', this function's name, in a string
#721: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:412:
+	  printk(KERN_ERR "rmi_app_touchpad.mod_init: no init function for function 0x%x\n", fn->functionNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:414:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:416:
+  retval = input_register_device(input);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:418:
+  if (retval) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:419:
+	printk(KERN_ERR "rmi_app_touchpad.mod_init:  Failed input_register_device.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_init', this function's name, in a string
#728: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:419:
+	printk(KERN_ERR "rmi_app_touchpad.mod_init:  Failed input_register_device.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:421:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:423:
+  app = rmi_register_application("rmi4_touchpad", attention, probe, config);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:425:
+  if (!app) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#735: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:426:
+	printk(KERN_ERR "rmi_app_touchpad.mod_init:  Failed to register app.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_init', this function's name, in a string
#735: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:426:
+	printk(KERN_ERR "rmi_app_touchpad.mod_init:  Failed to register app.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:429:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:431:
+  return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:439:
+  struct poll_instance *pi, *pi_tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:441:
+  printk(KERN_INFO "rmi_app_touchpad.mod_exit: RMI4 TouchPad Driver\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#750: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:441:
+  printk(KERN_INFO "rmi_app_touchpad.mod_exit: RMI4 TouchPad Driver\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_exit', this function's name, in a string
#750: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:441:
+  printk(KERN_INFO "rmi_app_touchpad.mod_exit: RMI4 TouchPad Driver\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:443:
+  time_to_quit = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:445:
+  complete(&touch_completion); /* Kick the thread awake */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:446:
+  list_for_each_entry(pi, &pollers, link) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:448:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:449:
+  flush_scheduled_work();^I/* Make sure all pollers are stopped */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:450:
+  if (kthread)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:454:
+  printk(KERN_WARNING "rmi_app_touchpad.mod_exit: Unregistering app - %s\n", app->name);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#763: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:454:
+  printk(KERN_WARNING "rmi_app_touchpad.mod_exit: Unregistering app - %s\n", app->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_exit', this function's name, in a string
#763: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:454:
+  printk(KERN_WARNING "rmi_app_touchpad.mod_exit: Unregistering app - %s\n", app->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:455:
+  rmi_unregister_application(app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:456:
+  input_unregister_device(input);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:459:
+  list_for_each_entry_safe(pi, pi_tmp, &pollers, link) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:463:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: drivers/input/touchscreen/rmi_app_touchpad.c:465:
+  CHECK_ALLOC_STAT(poll);$

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#801: FILE: drivers/input/touchscreen/rmi_core.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#806: FILE: drivers/input/touchscreen/rmi_core.c:1:
+/**

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#874: FILE: drivers/input/touchscreen/rmi_core.c:69:
+#include <asm/uaccess.h>

CHECK:CAMELCASE: Avoid CamelCase: <fn01QueryBaseAddr>
#881: FILE: drivers/input/touchscreen/rmi_core.c:76:
+unsigned short fn01QueryBaseAddr;	 /* RMI4 device control */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#897: FILE: drivers/input/touchscreen/rmi_core.c:92:
+EXPORT_SYMBOL(fns_list);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#899: FILE: drivers/input/touchscreen/rmi_core.c:94:
+EXPORT_SYMBOL(fns_mutex);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#901: FILE: drivers/input/touchscreen/rmi_core.c:96:
+EXPORT_SYMBOL(rfi_mutex);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: drivers/input/touchscreen/rmi_core.c:99:
+  int appallocsrmi = 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#905: FILE: drivers/input/touchscreen/rmi_core.c:100:
+  int appallocsrmi = 0;
+  EXPORT_SYMBOL(appallocsrmi);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: drivers/input/touchscreen/rmi_core.c:100:
+  EXPORT_SYMBOL(appallocsrmi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: drivers/input/touchscreen/rmi_core.c:101:
+  int rfiallocsrmi = 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#907: FILE: drivers/input/touchscreen/rmi_core.c:102:
+  int rfiallocsrmi = 0;
+  EXPORT_SYMBOL(rfiallocsrmi);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: drivers/input/touchscreen/rmi_core.c:102:
+  EXPORT_SYMBOL(rfiallocsrmi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: drivers/input/touchscreen/rmi_core.c:103:
+  int fnallocsrmi = 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#909: FILE: drivers/input/touchscreen/rmi_core.c:104:
+  int fnallocsrmi = 0;
+  EXPORT_SYMBOL(fnallocsrmi);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: drivers/input/touchscreen/rmi_core.c:104:
+  EXPORT_SYMBOL(fnallocsrmi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#914: FILE: drivers/input/touchscreen/rmi_core.c:109:
+  struct rmi_phys_driver *rpd = app->rpd;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#915: FILE: drivers/input/touchscreen/rmi_core.c:110:
+  struct rmi_phys_driver *rpd = app->rpd;
+  if (!app->rpd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: drivers/input/touchscreen/rmi_core.c:110:
+  if (!app->rpd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: drivers/input/touchscreen/rmi_core.c:112:
+  return rpd->read(rpd, address, dest);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: drivers/input/touchscreen/rmi_core.c:118:
+  struct rmi_phys_driver *rpd = app->rpd;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: drivers/input/touchscreen/rmi_core.c:119:
+  struct rmi_phys_driver *rpd = app->rpd;
+  if (!app->rpd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: drivers/input/touchscreen/rmi_core.c:119:
+  if (!app->rpd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: drivers/input/touchscreen/rmi_core.c:121:
+  return rpd->write(rpd, address, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: drivers/input/touchscreen/rmi_core.c:127:
+  struct rmi_phys_driver *rpd = app->rpd;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: drivers/input/touchscreen/rmi_core.c:128:
+  struct rmi_phys_driver *rpd = app->rpd;
+  if (!app->rpd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: drivers/input/touchscreen/rmi_core.c:128:
+  if (!app->rpd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#935: FILE: drivers/input/touchscreen/rmi_core.c:130:
+  return rpd->read_multiple(rpd, address, dest, length);$

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#939: FILE: drivers/input/touchscreen/rmi_core.c:134:
+int rmi_write_multiple(struct rmi_application *app, unsigned short address, unsigned char *data, int length)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: drivers/input/touchscreen/rmi_core.c:136:
+  struct rmi_phys_driver *rpd = app->rpd;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#942: FILE: drivers/input/touchscreen/rmi_core.c:137:
+  struct rmi_phys_driver *rpd = app->rpd;
+  if (!app->rpd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: drivers/input/touchscreen/rmi_core.c:137:
+  if (!app->rpd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: drivers/input/touchscreen/rmi_core.c:139:
+  return rpd->write_multiple(rpd, address, data, length);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: drivers/input/touchscreen/rmi_core.c:145:
+  return app->polling_required;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: drivers/input/touchscreen/rmi_core.c:151:
+  if (!app->rpd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: drivers/input/touchscreen/rmi_core.c:153:
+  return app->rpd->get_attention(app->rpd);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#963: FILE: drivers/input/touchscreen/rmi_core.c:158:
+/*
+   This function searches for a match between an app driver and physical

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: drivers/input/touchscreen/rmi_core.c:163:
+  app->polling_required = rpd->polling_required;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: drivers/input/touchscreen/rmi_core.c:164:
+  if (app->probe(app, &rpd->rmi)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#975: FILE: drivers/input/touchscreen/rmi_core.c:170:
+	if (try_module_get(rpd->module)) {
+	  app->rpd = rpd;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#978: FILE: drivers/input/touchscreen/rmi_core.c:173:
+	  printk(KERN_INFO "%s: %s bound to %s\n", drvname, app->name, rpd->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: drivers/input/touchscreen/rmi_core.c:177:
+  } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: drivers/input/touchscreen/rmi_core.c:179:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: drivers/input/touchscreen/rmi_core.c:184:
+  struct rmi_application *app;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: drivers/input/touchscreen/rmi_core.c:185:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: drivers/input/touchscreen/rmi_core.c:186:
+  unsigned char std_queries[21];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: drivers/input/touchscreen/rmi_core.c:187:
+  unsigned char interruptCount;$

CHECK:CAMELCASE: Avoid CamelCase: <interruptCount>
#992: FILE: drivers/input/touchscreen/rmi_core.c:187:
+  unsigned char interruptCount;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: drivers/input/touchscreen/rmi_core.c:188:
+  struct rmi_function_info *rfi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: drivers/input/touchscreen/rmi_core.c:189:
+  struct rmi_function_descriptor rmi_fd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: drivers/input/touchscreen/rmi_core.c:190:
+  struct rmi_functions *fn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: drivers/input/touchscreen/rmi_core.c:191:
+  bool found;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: drivers/input/touchscreen/rmi_core.c:192:
+  int retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: drivers/input/touchscreen/rmi_core.c:194:
+  if (!rpd->name) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1000: FILE: drivers/input/touchscreen/rmi_core.c:195:
+	printk(KERN_ERR "%s: Physical driver must specify a name\n", drvname);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: drivers/input/touchscreen/rmi_core.c:197:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: drivers/input/touchscreen/rmi_core.c:198:
+  if (!rpd->write) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1004: FILE: drivers/input/touchscreen/rmi_core.c:199:
+	printk(KERN_ERR "%s: Physical driver %s must specify a writer.\n",  drvname, rpd->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: drivers/input/touchscreen/rmi_core.c:201:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: drivers/input/touchscreen/rmi_core.c:202:
+  if (!rpd->read) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1008: FILE: drivers/input/touchscreen/rmi_core.c:203:
+	printk(KERN_ERR "%s: Physical driver %s must specify a reader.\n", drvname, rpd->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: drivers/input/touchscreen/rmi_core.c:205:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: drivers/input/touchscreen/rmi_core.c:206:
+  if (!rpd->write_multiple) {$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1012: FILE: drivers/input/touchscreen/rmi_core.c:207:
+	printk(KERN_ERR "%s: Physical driver %s must specify a multiple writer.\n",  drvname, rpd->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1012: FILE: drivers/input/touchscreen/rmi_core.c:207:
+	printk(KERN_ERR "%s: Physical driver %s must specify a multiple writer.\n",  drvname, rpd->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: drivers/input/touchscreen/rmi_core.c:209:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: drivers/input/touchscreen/rmi_core.c:210:
+  if (!rpd->read_multiple) {$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1016: FILE: drivers/input/touchscreen/rmi_core.c:211:
+	printk(KERN_ERR "%s: Physical driver %s must specify a multiple reader.\n", drvname, rpd->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1016: FILE: drivers/input/touchscreen/rmi_core.c:211:
+	printk(KERN_ERR "%s: Physical driver %s must specify a multiple reader.\n", drvname, rpd->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: drivers/input/touchscreen/rmi_core.c:213:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: drivers/input/touchscreen/rmi_core.c:214:
+  if (!rpd->module) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1020: FILE: drivers/input/touchscreen/rmi_core.c:215:
+	printk(KERN_ERR "%s: Physical driver %s must specify a module.\n",  drvname, rpd->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1022: FILE: drivers/input/touchscreen/rmi_core.c:217:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: drivers/input/touchscreen/rmi_core.c:219:
+  pr_debug("%s: Registering phys driver %s\n", drvname, rpd->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: drivers/input/touchscreen/rmi_core.c:221:
+  rpd->attention = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: drivers/input/touchscreen/rmi_core.c:224:
+  {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1030: FILE: drivers/input/touchscreen/rmi_core.c:225:
+	printk(KERN_INFO "%s: Functions:\n", drvname);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1038: FILE: drivers/input/touchscreen/rmi_core.c:233:
+	for (i = PDT_START_SCAN_LOCATION; i > PDT_END_SCAN_LOCATION; i -= PDT_ENTRY_SIZE) {
+	  retval = rpd->read_multiple(rpd, i, (char *)&rmi_fd, sizeof(rmi_fd));

WARNING:TABSTOP: Statements should start on a tabstop
#1040: FILE: drivers/input/touchscreen/rmi_core.c:235:
+	  if (!retval) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1042: FILE: drivers/input/touchscreen/rmi_core.c:237:
+		if (rmi_fd.functionNum) {
+		  switch (rmi_fd.functionNum & 0xff) {

WARNING:TABSTOP: Statements should start on a tabstop
#1043: FILE: drivers/input/touchscreen/rmi_core.c:238:
+		  switch (rmi_fd.functionNum & 0xff) {

WARNING:TABSTOP: Statements should start on a tabstop
#1044: FILE: drivers/input/touchscreen/rmi_core.c:239:
+		  case 0x01:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1045: FILE: drivers/input/touchscreen/rmi_core.c:240:
+			printk(KERN_INFO "%s:   Fn $01 Found - RMI Device Control\n", drvname);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1047: FILE: drivers/input/touchscreen/rmi_core.c:242:
+			/* Save Fn $01 query and control base addresses since
+			   we'll need them later to get/set properties and check interrupts.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1050: FILE: drivers/input/touchscreen/rmi_core.c:245:
+			   globally here for later use. */

WARNING:TABSTOP: Statements should start on a tabstop
#1054: FILE: drivers/input/touchscreen/rmi_core.c:249:
+		  default:

WARNING:TABSTOP: Statements should start on a tabstop
#1055: FILE: drivers/input/touchscreen/rmi_core.c:250:
+		    if (rmi_fd.interruptSrcCnt) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 26)
#1055: FILE: drivers/input/touchscreen/rmi_core.c:250:
+		    if (rmi_fd.interruptSrcCnt) {
+			  rfi = kmalloc(sizeof(*rfi), GFP_KERNEL);

WARNING:TABSTOP: Statements should start on a tabstop
#1058: FILE: drivers/input/touchscreen/rmi_core.c:253:
+			  if (!rfi) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (26, 28)
#1058: FILE: drivers/input/touchscreen/rmi_core.c:253:
+			  if (!rfi) {
+			    printk(KERN_ERR "%s: could not allocate memory for function 0x%x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1059: FILE: drivers/input/touchscreen/rmi_core.c:254:
+			    printk(KERN_ERR "%s: could not allocate memory for function 0x%x\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1059: FILE: drivers/input/touchscreen/rmi_core.c:254:
+			  if (!rfi) {
+			    printk(KERN_ERR "%s: could not allocate memory for function 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: drivers/input/touchscreen/rmi_core.c:255:
+			    printk(KERN_ERR "%s: could not allocate memory for function 0x%x\n",
+				  drvname, rmi_fd.functionNum);

WARNING:TABSTOP: Statements should start on a tabstop
#1062: FILE: drivers/input/touchscreen/rmi_core.c:257:
+			    goto exit_fail;

WARNING:TABSTOP: Statements should start on a tabstop
#1063: FILE: drivers/input/touchscreen/rmi_core.c:258:
+			  } else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (26, 28)
#1063: FILE: drivers/input/touchscreen/rmi_core.c:258:
+			  } else {
+			    INC_ALLOC_STAT(rfi);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (28, 34)
#1068: FILE: drivers/input/touchscreen/rmi_core.c:263:
+			    list_for_each_entry(fn, &fns_list, link) {
[...]
+				  if (fn->functionNum == rmi_fd.functionNum) {

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1069: FILE: drivers/input/touchscreen/rmi_core.c:264:
+				  /* check if function number matches - if so call that detect function */

WARNING:TABSTOP: Statements should start on a tabstop
#1070: FILE: drivers/input/touchscreen/rmi_core.c:265:
+				  if (fn->functionNum == rmi_fd.functionNum) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (34, 36)
#1070: FILE: drivers/input/touchscreen/rmi_core.c:265:
+				  if (fn->functionNum == rmi_fd.functionNum) {
+				    found = true;

WARNING:TABSTOP: Statements should start on a tabstop
#1073: FILE: drivers/input/touchscreen/rmi_core.c:268:
+				  }

WARNING:TABSTOP: Statements should start on a tabstop
#1074: FILE: drivers/input/touchscreen/rmi_core.c:269:
+			    }

WARNING:TABSTOP: Statements should start on a tabstop
#1075: FILE: drivers/input/touchscreen/rmi_core.c:270:
+			    if (!found) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (28, 34)
#1075: FILE: drivers/input/touchscreen/rmi_core.c:270:
+			    if (!found) {
+				  printk(KERN_ERR "%s: could not find support for function 0x%x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1076: FILE: drivers/input/touchscreen/rmi_core.c:271:
+				  printk(KERN_ERR "%s: could not find support for function 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: drivers/input/touchscreen/rmi_core.c:272:
+				  printk(KERN_ERR "%s: could not find support for function 0x%x\n",
+					drvname, rmi_fd.functionNum);

WARNING:TABSTOP: Statements should start on a tabstop
#1078: FILE: drivers/input/touchscreen/rmi_core.c:273:
+			    }

WARNING:TABSTOP: Statements should start on a tabstop
#1079: FILE: drivers/input/touchscreen/rmi_core.c:274:
+			  }

WARNING:TABSTOP: Statements should start on a tabstop
#1080: FILE: drivers/input/touchscreen/rmi_core.c:275:
+		    } else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 26)
#1080: FILE: drivers/input/touchscreen/rmi_core.c:275:
+		    } else {
+			  printk(KERN_INFO "%s:   Found Function %02x - Ignored.\n", drvname, rmi_fd.functionNum & 0xff);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1081: FILE: drivers/input/touchscreen/rmi_core.c:276:
+			  printk(KERN_INFO "%s:   Found Function %02x - Ignored.\n", drvname, rmi_fd.functionNum & 0xff);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1081: FILE: drivers/input/touchscreen/rmi_core.c:276:
+			  printk(KERN_INFO "%s:   Found Function %02x - Ignored.\n", drvname, rmi_fd.functionNum & 0xff);

WARNING:TABSTOP: Statements should start on a tabstop
#1082: FILE: drivers/input/touchscreen/rmi_core.c:277:
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#1083: FILE: drivers/input/touchscreen/rmi_core.c:278:
+		    break;

WARNING:TABSTOP: Statements should start on a tabstop
#1084: FILE: drivers/input/touchscreen/rmi_core.c:279:
+		  }

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1089: FILE: drivers/input/touchscreen/rmi_core.c:284:
+		  /* We only want to add functions to the list that have data associated with them. */

WARNING:TABSTOP: Statements should start on a tabstop
#1090: FILE: drivers/input/touchscreen/rmi_core.c:285:
+	      if (rfi && rmi_fd.interruptSrcCnt) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 24)
#1090: FILE: drivers/input/touchscreen/rmi_core.c:285:
+	      if (rfi && rmi_fd.interruptSrcCnt) {
+			printk(KERN_INFO "%s: Adding function 0x%x with %d sources. \n", drvname, rfi->functionNum, rfi->numSources);

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#1091: FILE: drivers/input/touchscreen/rmi_core.c:286:
+			printk(KERN_INFO "%s: Adding function 0x%x with %d sources. \n", drvname, rfi->functionNum, rfi->numSources);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1091: FILE: drivers/input/touchscreen/rmi_core.c:286:
+			printk(KERN_INFO "%s: Adding function 0x%x with %d sources. \n", drvname, rfi->functionNum, rfi->numSources);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1091: FILE: drivers/input/touchscreen/rmi_core.c:286:
+			printk(KERN_INFO "%s: Adding function 0x%x with %d sources. \n", drvname, rfi->functionNum, rfi->numSources);

WARNING:TABSTOP: Statements should start on a tabstop
#1097: FILE: drivers/input/touchscreen/rmi_core.c:292:
+		  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1098: FILE: drivers/input/touchscreen/rmi_core.c:293:
+		} else {
[...]
+		  printk(KERN_INFO "%s:   Found End of PDT\n", drvname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1100: FILE: drivers/input/touchscreen/rmi_core.c:295:
+		  printk(KERN_INFO "%s:   Found End of PDT\n", drvname);

WARNING:TABSTOP: Statements should start on a tabstop
#1101: FILE: drivers/input/touchscreen/rmi_core.c:296:
+		  break;

WARNING:TABSTOP: Statements should start on a tabstop
#1103: FILE: drivers/input/touchscreen/rmi_core.c:298:
+	  } else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1105: FILE: drivers/input/touchscreen/rmi_core.c:300:
+		/* failed to read next PDT entry - end PDT scan - this may result
+		   in an incomplete set of recognized functions - should probably

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1107: FILE: drivers/input/touchscreen/rmi_core.c:302:
+		   and debugging so let's let it continue. */

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#1108: FILE: drivers/input/touchscreen/rmi_core.c:303:
+		printk(KERN_ERR "%s:   Read Error 0x%x when reading next PDT entry - ending PDT scan.\n", drvname, retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1108: FILE: drivers/input/touchscreen/rmi_core.c:303:
+		printk(KERN_ERR "%s:   Read Error 0x%x when reading next PDT entry - ending PDT scan.\n", drvname, retval);

WARNING:TABSTOP: Statements should start on a tabstop
#1110: FILE: drivers/input/touchscreen/rmi_core.c:305:
+	  }

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#1113: FILE: drivers/input/touchscreen/rmi_core.c:308:
+	/* calculate the interrupt register count - used in the ISR to read the correct number of interrupt registers */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1124: FILE: drivers/input/touchscreen/rmi_core.c:319:
+	if (retval) {
+	  printk(KERN_ERR "%s: Fail reading queries\n", drvname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1125: FILE: drivers/input/touchscreen/rmi_core.c:320:
+	  printk(KERN_ERR "%s: Fail reading queries\n", drvname);

WARNING:TABSTOP: Statements should start on a tabstop
#1127: FILE: drivers/input/touchscreen/rmi_core.c:322:
+	  goto exit_fail;

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#1133: FILE: drivers/input/touchscreen/rmi_core.c:328:
+	/* get manufacturer id, properties, product info, date code, tester id, serial num and product id (name) */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1151: FILE: drivers/input/touchscreen/rmi_core.c:346:
+	printk(KERN_INFO "%s: RMI Protocol: %d.%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: drivers/input/touchscreen/rmi_core.c:347:
+	printk(KERN_INFO "%s: RMI Protocol: %d.%d\n",
+	  drvname, rpd->rmi.rmi_maj_ver, rpd->rmi.rmi_min_ver);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1153: FILE: drivers/input/touchscreen/rmi_core.c:348:
+	printk(KERN_INFO "%s: Manufacturer: %d", drvname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1154: FILE: drivers/input/touchscreen/rmi_core.c:349:
+	printk(KERN_INFO "%s: Manufacturer: %d", drvname,
+	  rpd->rmi.mfgid);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1156: FILE: drivers/input/touchscreen/rmi_core.c:351:
+	if (rpd->rmi.mfgid == 1) {
+	  printk(KERN_INFO " (Synaptics)");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1156: FILE: drivers/input/touchscreen/rmi_core.c:351:
+	if (rpd->rmi.mfgid == 1) {
+	  printk(KERN_INFO " (Synaptics)");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1157: FILE: drivers/input/touchscreen/rmi_core.c:352:
+	  printk(KERN_INFO " (Synaptics)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1159: FILE: drivers/input/touchscreen/rmi_core.c:354:
+	printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1161: FILE: drivers/input/touchscreen/rmi_core.c:356:
+	printk(KERN_INFO "%s: Properties: 0x%x \n", drvname, rpd->rmi.properties);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1161: FILE: drivers/input/touchscreen/rmi_core.c:356:
+	printk(KERN_INFO "%s: Properties: 0x%x \n", drvname, rpd->rmi.properties);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1163: FILE: drivers/input/touchscreen/rmi_core.c:358:
+	printk(KERN_INFO "%s: Product Info: 0x%x 0x%x \n", drvname, rpd->rmi.prod_info[0], rpd->rmi.prod_info[1]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1163: FILE: drivers/input/touchscreen/rmi_core.c:358:
+	printk(KERN_INFO "%s: Product Info: 0x%x 0x%x \n", drvname, rpd->rmi.prod_info[0], rpd->rmi.prod_info[1]);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1163: FILE: drivers/input/touchscreen/rmi_core.c:358:
+	printk(KERN_INFO "%s: Product Info: 0x%x 0x%x \n", drvname, rpd->rmi.prod_info[0], rpd->rmi.prod_info[1]);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1165: FILE: drivers/input/touchscreen/rmi_core.c:360:
+	printk(KERN_INFO "%s: Date Code: Year : %d Month: %d Day: %d\n", drvname, rpd->rmi.date_code[0],

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1165: FILE: drivers/input/touchscreen/rmi_core.c:360:
+	printk(KERN_INFO "%s: Date Code: Year : %d Month: %d Day: %d\n", drvname, rpd->rmi.date_code[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: drivers/input/touchscreen/rmi_core.c:361:
+	printk(KERN_INFO "%s: Date Code: Year : %d Month: %d Day: %d\n", drvname, rpd->rmi.date_code[0],
+	  rpd->rmi.date_code[1], rpd->rmi.date_code[2]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1168: FILE: drivers/input/touchscreen/rmi_core.c:363:
+	printk(KERN_INFO "%s: Tester ID: %d \n", drvname, rpd->rmi.tester_id);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1168: FILE: drivers/input/touchscreen/rmi_core.c:363:
+	printk(KERN_INFO "%s: Tester ID: %d \n", drvname, rpd->rmi.tester_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1170: FILE: drivers/input/touchscreen/rmi_core.c:365:
+	printk(KERN_INFO "%s: Serial Number: 0x%x \n", drvname, rpd->rmi.serial_num);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1170: FILE: drivers/input/touchscreen/rmi_core.c:365:
+	printk(KERN_INFO "%s: Serial Number: 0x%x \n", drvname, rpd->rmi.serial_num);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1172: FILE: drivers/input/touchscreen/rmi_core.c:367:
+	printk(KERN_INFO "%s: Product ID: %s\n", drvname, rpd->rmi.prod_id);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: drivers/input/touchscreen/rmi_core.c:368:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: drivers/input/touchscreen/rmi_core.c:371:
+  mutex_lock(&phys_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: drivers/input/touchscreen/rmi_core.c:372:
+  list_add_tail(&rpd->drivers, &phys_drivers);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: drivers/input/touchscreen/rmi_core.c:373:
+  mutex_unlock(&phys_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: drivers/input/touchscreen/rmi_core.c:376:
+  list_for_each_entry(app, &app_drivers, apps) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1183: FILE: drivers/input/touchscreen/rmi_core.c:378:
+	if (!app->rpd) {
+	  match_and_bind(app, rpd);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1183: FILE: drivers/input/touchscreen/rmi_core.c:378:
+	if (!app->rpd) {
+	  match_and_bind(app, rpd);
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1186: FILE: drivers/input/touchscreen/rmi_core.c:381:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: drivers/input/touchscreen/rmi_core.c:383:
+  pr_debug("Registered phys driver %s\n", rpd->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: drivers/input/touchscreen/rmi_core.c:384:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: drivers/input/touchscreen/rmi_core.c:387:
+  return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: drivers/input/touchscreen/rmi_core.c:393:
+  if (rpd->app) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1199: FILE: drivers/input/touchscreen/rmi_core.c:394:
+	printk(KERN_WARNING "%s: WARNING: unregister of %s while %s still attached\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: drivers/input/touchscreen/rmi_core.c:395:
+	printk(KERN_WARNING "%s: WARNING: unregister of %s while %s still attached\n",
+	  drvname, rpd->name, rpd->app->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: drivers/input/touchscreen/rmi_core.c:396:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1203: FILE: drivers/input/touchscreen/rmi_core.c:398:
+  pr_debug("Unregistering phys driver %s\n", rpd->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1204: FILE: drivers/input/touchscreen/rmi_core.c:399:
+  mutex_lock(&phys_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: drivers/input/touchscreen/rmi_core.c:400:
+  list_del(&rpd->drivers);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: drivers/input/touchscreen/rmi_core.c:401:
+  mutex_unlock(&phys_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1208: FILE: drivers/input/touchscreen/rmi_core.c:403:
+  return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: drivers/input/touchscreen/rmi_core.c:408:
+struct rmi_application *rmi_register_application(const char *name,
+  void (*attention)(struct rmi_phys_driver *pd, int instance),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1213: FILE: drivers/input/touchscreen/rmi_core.c:408:
+  void (*attention)(struct rmi_phys_driver *pd, int instance),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1214: FILE: drivers/input/touchscreen/rmi_core.c:409:
+  int (*probe)(struct rmi_application *app,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: drivers/input/touchscreen/rmi_core.c:410:
+  int (*probe)(struct rmi_application *app,
+  const struct rmi_module_info *rmi),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1215: FILE: drivers/input/touchscreen/rmi_core.c:410:
+  const struct rmi_module_info *rmi),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1216: FILE: drivers/input/touchscreen/rmi_core.c:411:
+  void (*config)(struct rmi_application *app))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1218: FILE: drivers/input/touchscreen/rmi_core.c:413:
+  struct rmi_application *app;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1219: FILE: drivers/input/touchscreen/rmi_core.c:414:
+  struct rmi_phys_driver *rpd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1221: FILE: drivers/input/touchscreen/rmi_core.c:416:
+  if (!name) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1222: FILE: drivers/input/touchscreen/rmi_core.c:417:
+	printk(KERN_ERR "%s: Application driver must specify a name\n", drvname);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1224: FILE: drivers/input/touchscreen/rmi_core.c:419:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: drivers/input/touchscreen/rmi_core.c:421:
+  if (!attention) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1227: FILE: drivers/input/touchscreen/rmi_core.c:422:
+	printk(KERN_ERR "%s: Application driver %s must specify attention notifier.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1228: FILE: drivers/input/touchscreen/rmi_core.c:423:
+	printk(KERN_ERR "%s: Application driver %s must specify attention notifier.\n",
+	  drvname, name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1230: FILE: drivers/input/touchscreen/rmi_core.c:425:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: drivers/input/touchscreen/rmi_core.c:427:
+  if (!probe) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1233: FILE: drivers/input/touchscreen/rmi_core.c:428:
+	printk(KERN_ERR "%s: Application driver %s must specify a probe function.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: drivers/input/touchscreen/rmi_core.c:429:
+	printk(KERN_ERR "%s: Application driver %s must specify a probe function.\n",
+	  drvname, name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1236: FILE: drivers/input/touchscreen/rmi_core.c:431:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: drivers/input/touchscreen/rmi_core.c:433:
+  if (!config) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1239: FILE: drivers/input/touchscreen/rmi_core.c:434:
+	printk(KERN_ERR "%s: Application driver %s must specify a config function.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1240: FILE: drivers/input/touchscreen/rmi_core.c:435:
+	printk(KERN_ERR "%s: Application driver %s must specify a config function.\n",
+	  drvname, name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1242: FILE: drivers/input/touchscreen/rmi_core.c:437:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: drivers/input/touchscreen/rmi_core.c:439:
+  pr_debug("Registering app driver %s\n", name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: drivers/input/touchscreen/rmi_core.c:441:
+  app = kmalloc(sizeof(*app), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: drivers/input/touchscreen/rmi_core.c:442:
+  if (!app) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1248: FILE: drivers/input/touchscreen/rmi_core.c:443:
+	printk(KERN_ERR "%s: Out of memory\n", drvname);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1248: FILE: drivers/input/touchscreen/rmi_core.c:443:
+  if (!app) {
+	printk(KERN_ERR "%s: Out of memory\n", drvname);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: drivers/input/touchscreen/rmi_core.c:445:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: drivers/input/touchscreen/rmi_core.c:446:
+  INC_ALLOC_STAT(app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: drivers/input/touchscreen/rmi_core.c:448:
+  app->name^I  = name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: drivers/input/touchscreen/rmi_core.c:449:
+  app->attention = attention;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: drivers/input/touchscreen/rmi_core.c:450:
+  app->probe^I = probe;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1256: FILE: drivers/input/touchscreen/rmi_core.c:451:
+  app->config^I= config;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: drivers/input/touchscreen/rmi_core.c:452:
+  app->rpd^I   = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: drivers/input/touchscreen/rmi_core.c:454:
+  mutex_lock(&app_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: drivers/input/touchscreen/rmi_core.c:455:
+  list_add_tail(&app->apps, &app_drivers);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: drivers/input/touchscreen/rmi_core.c:456:
+  mutex_unlock(&app_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: drivers/input/touchscreen/rmi_core.c:459:
+  list_for_each_entry(rpd, &phys_drivers, drivers) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1265: FILE: drivers/input/touchscreen/rmi_core.c:460:
+	if (!rpd->app) {
+	  match_and_bind(app, rpd);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1265: FILE: drivers/input/touchscreen/rmi_core.c:460:
+	if (!rpd->app) {
+	  match_and_bind(app, rpd);
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1268: FILE: drivers/input/touchscreen/rmi_core.c:463:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: drivers/input/touchscreen/rmi_core.c:465:
+  pr_debug("Registered app driver %s (%p)\n", name, app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: drivers/input/touchscreen/rmi_core.c:467:
+  return app;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: drivers/input/touchscreen/rmi_core.c:473:
+  struct rmi_application *tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1279: FILE: drivers/input/touchscreen/rmi_core.c:474:
+  int found = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1281: FILE: drivers/input/touchscreen/rmi_core.c:476:
+  if (!app) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1281: FILE: drivers/input/touchscreen/rmi_core.c:476:
+  if (!app) {
+	return;
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1283: FILE: drivers/input/touchscreen/rmi_core.c:478:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: drivers/input/touchscreen/rmi_core.c:480:
+  pr_debug("Unregistering app driver %s (%p)\n", app->name, app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1287: FILE: drivers/input/touchscreen/rmi_core.c:482:
+  list_for_each_entry(tmp, &app_drivers, apps) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1288: FILE: drivers/input/touchscreen/rmi_core.c:483:
+	if (tmp == app) {
+	  found = 1;

WARNING:TABSTOP: Statements should start on a tabstop
#1290: FILE: drivers/input/touchscreen/rmi_core.c:485:
+	  break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1292: FILE: drivers/input/touchscreen/rmi_core.c:487:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1294: FILE: drivers/input/touchscreen/rmi_core.c:489:
+  if (!found) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1295: FILE: drivers/input/touchscreen/rmi_core.c:490:
+	printk(KERN_ERR "%s: Removing rmi application %s: not found\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1296: FILE: drivers/input/touchscreen/rmi_core.c:491:
+	printk(KERN_ERR "%s: Removing rmi application %s: not found\n",
+	  drvname, app->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1298: FILE: drivers/input/touchscreen/rmi_core.c:493:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: drivers/input/touchscreen/rmi_core.c:495:
+  if (app->rpd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1304: FILE: drivers/input/touchscreen/rmi_core.c:499:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: drivers/input/touchscreen/rmi_core.c:501:
+  list_del(&app->apps);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1307: FILE: drivers/input/touchscreen/rmi_core.c:502:
+  kfree(app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1308: FILE: drivers/input/touchscreen/rmi_core.c:503:
+  DEC_ALLOC_STAT(app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: drivers/input/touchscreen/rmi_core.c:505:
+  pr_debug("Unregistered app driver %p\n", app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: drivers/input/touchscreen/rmi_core.c:511:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: drivers/input/touchscreen/rmi_core.c:512:
+  struct rmi_functions_data *rmi4_fn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1319: FILE: drivers/input/touchscreen/rmi_core.c:514:
+  printk(KERN_INFO "Register Mapped Interface Data Layer Driver\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1319: FILE: drivers/input/touchscreen/rmi_core.c:514:
+  printk(KERN_INFO "Register Mapped Interface Data Layer Driver\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1322: FILE: drivers/input/touchscreen/rmi_core.c:517:
+  /* Initialize global list of RMI4 Functions that have data sources.
+	 We need to add all new functions to this list so that we will have pointers

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#1330: FILE: drivers/input/touchscreen/rmi_core.c:525:
+  /* for each function number defined in rmi.h creat a new rmi_function struct and
                                                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1331: FILE: drivers/input/touchscreen/rmi_core.c:526:
+  /* for each function number defined in rmi.h creat a new rmi_function struct and
+	 initialize the pointers to the servicing functions and then add it into the

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1334: FILE: drivers/input/touchscreen/rmi_core.c:529:
+  for (i = 0; i < rmi4_num_supported_data_src_fns; i++) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1337: FILE: drivers/input/touchscreen/rmi_core.c:532:
+	struct rmi_functions *fn = kmalloc(sizeof(*fn), GFP_KERNEL);
+	if (!fn) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1337: FILE: drivers/input/touchscreen/rmi_core.c:532:
+	if (!fn) {
+	  printk(KERN_ERR "%s mod_init: could not allocate memory for rmi_function struct for function 0x%x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1338: FILE: drivers/input/touchscreen/rmi_core.c:533:
+	  printk(KERN_ERR "%s mod_init: could not allocate memory for rmi_function struct for function 0x%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mod_init', this function's name, in a string
#1338: FILE: drivers/input/touchscreen/rmi_core.c:533:
+	  printk(KERN_ERR "%s mod_init: could not allocate memory for rmi_function struct for function 0x%x\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1338: FILE: drivers/input/touchscreen/rmi_core.c:533:
+	if (!fn) {
+	  printk(KERN_ERR "%s mod_init: could not allocate memory for rmi_function struct for function 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1339: FILE: drivers/input/touchscreen/rmi_core.c:534:
+	  printk(KERN_ERR "%s mod_init: could not allocate memory for rmi_function struct for function 0x%x\n",
+	drvname, rmi4_supported_data_src_functions[i].functionNumber);

CHECK:CAMELCASE: Avoid CamelCase: <functionNumber>
#1339: FILE: drivers/input/touchscreen/rmi_core.c:534:
+	drvname, rmi4_supported_data_src_functions[i].functionNumber);

WARNING:TABSTOP: Statements should start on a tabstop
#1340: FILE: drivers/input/touchscreen/rmi_core.c:535:
+	  return -ENOMEM;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1341: FILE: drivers/input/touchscreen/rmi_core.c:536:
+	} else {
[...]
+	  INC_ALLOC_STAT(fn);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1342: FILE: drivers/input/touchscreen/rmi_core.c:537:
+	} else {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1348: FILE: drivers/input/touchscreen/rmi_core.c:543:
+	  /* Fill in ptrs to functions. The functions are linked in from a file
+	 called rmi_function_xx.c where xx is the hex number of the RMI4 function

CHECK:CAMELCASE: Avoid CamelCase: <reportFn>
#1354: FILE: drivers/input/touchscreen/rmi_core.c:549:
+	  fn->report = rmi4_fn->reportFn;

CHECK:CAMELCASE: Avoid CamelCase: <configFn>
#1355: FILE: drivers/input/touchscreen/rmi_core.c:550:
+	  fn->config = rmi4_fn->configFn;

CHECK:CAMELCASE: Avoid CamelCase: <initFn>
#1356: FILE: drivers/input/touchscreen/rmi_core.c:551:
+	  fn->init =   rmi4_fn->initFn;

CHECK:CAMELCASE: Avoid CamelCase: <detectFn>
#1357: FILE: drivers/input/touchscreen/rmi_core.c:552:
+	  fn->detect = rmi4_fn->detectFn;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: drivers/input/touchscreen/rmi_core.c:559:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: drivers/input/touchscreen/rmi_core.c:561:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: drivers/input/touchscreen/rmi_core.c:566:
+  struct rmi_application *app, *apptmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1374: FILE: drivers/input/touchscreen/rmi_core.c:569:
+  mutex_lock(&app_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1375: FILE: drivers/input/touchscreen/rmi_core.c:570:
+  list_for_each_entry_safe(app, apptmp, &app_drivers, apps) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: drivers/input/touchscreen/rmi_core.c:574:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: drivers/input/touchscreen/rmi_core.c:575:
+  mutex_unlock(&app_drivers_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: drivers/input/touchscreen/rmi_core.c:577:
+  CHECK_ALLOC_STAT(app);$

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#1409: FILE: drivers/input/touchscreen/rmi_core.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1414: FILE: drivers/input/touchscreen/rmi_core.h:1:
+/**

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1446: FILE: drivers/input/touchscreen/rmi_core.h:33:
+  const char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1447: FILE: drivers/input/touchscreen/rmi_core.h:34:
+  void (*attention)(struct rmi_phys_driver *pd, int instance);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1454: FILE: drivers/input/touchscreen/rmi_core.h:41:
+  int (*probe)(struct rmi_application *app, const struct rmi_module_info *rmi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1460: FILE: drivers/input/touchscreen/rmi_core.h:47:
+  void (*config)(struct rmi_application *app);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1465: FILE: drivers/input/touchscreen/rmi_core.h:52:
+  struct list_head apps;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1466: FILE: drivers/input/touchscreen/rmi_core.h:53:
+  struct rmi_phys_driver *rpd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1467: FILE: drivers/input/touchscreen/rmi_core.h:54:
+  int    polling_required;$

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#1474: FILE: drivers/input/touchscreen/rmi_function_11.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1479: FILE: drivers/input/touchscreen/rmi_function_11.c:1:
+/**

WARNING:TYPO_SPELLING: 'contorl' may be misspelled - perhaps 'control'?
#1521: FILE: drivers/input/touchscreen/rmi_function_11.c:43:
+extern unsigned short fn01ControlBaseAddr;  /* RMI4 device contorl == function 0x01 */
                                                            ^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <sensorMaxX>
#1523: FILE: drivers/input/touchscreen/rmi_function_11.c:45:
+static int sensorMaxX;

CHECK:CAMELCASE: Avoid CamelCase: <sensorMaxY>
#1524: FILE: drivers/input/touchscreen/rmi_function_11.c:46:
+static int sensorMaxY;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1531: FILE: drivers/input/touchscreen/rmi_function_11.c:53:
+int FN_11_report(struct rmi_application *app, struct rmi_function_info *rfi, struct input_dev *input)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1533: FILE: drivers/input/touchscreen/rmi_function_11.c:55:
+  unsigned char values[2] = {0, 0};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1534: FILE: drivers/input/touchscreen/rmi_function_11.c:56:
+  unsigned char data[12] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1535: FILE: drivers/input/touchscreen/rmi_function_11.c:57:
+  int touch; /* number of touch points - fingers in this case */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1536: FILE: drivers/input/touchscreen/rmi_function_11.c:58:
+  int X, Y, Z, W, Wy, Wx;$

CHECK:CAMELCASE: Avoid CamelCase: <Wy>
#1536: FILE: drivers/input/touchscreen/rmi_function_11.c:58:
+  int X, Y, Z, W, Wy, Wx;

CHECK:CAMELCASE: Avoid CamelCase: <Wx>
#1536: FILE: drivers/input/touchscreen/rmi_function_11.c:58:
+  int X, Y, Z, W, Wy, Wx;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1537: FILE: drivers/input/touchscreen/rmi_function_11.c:59:
+  int finger;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1538: FILE: drivers/input/touchscreen/rmi_function_11.c:60:
+  int fn11FingersSupported;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11FingersSupported>
#1538: FILE: drivers/input/touchscreen/rmi_function_11.c:60:
+  int fn11FingersSupported;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1539: FILE: drivers/input/touchscreen/rmi_function_11.c:61:
+  int fn11FingerRegisters;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11FingerRegisters>
#1539: FILE: drivers/input/touchscreen/rmi_function_11.c:61:
+  int fn11FingerRegisters;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1540: FILE: drivers/input/touchscreen/rmi_function_11.c:62:
+  unsigned short fn11DataBaseAddr;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11DataBaseAddr>
#1540: FILE: drivers/input/touchscreen/rmi_function_11.c:62:
+  unsigned short fn11DataBaseAddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1541: FILE: drivers/input/touchscreen/rmi_function_11.c:63:
+  unsigned char fn11DataRegBlockSize;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11DataRegBlockSize>
#1541: FILE: drivers/input/touchscreen/rmi_function_11.c:63:
+  unsigned char fn11DataRegBlockSize;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1543: FILE: drivers/input/touchscreen/rmi_function_11.c:65:
+  touch = 0;$

WARNING:TYPO_SPELLING: 'supporte' may be misspelled - perhaps 'supported'?
#1547: FILE: drivers/input/touchscreen/rmi_function_11.c:69:
+     determined by the number of finger supporte - 2 bits per finger, so the number
                                         ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1547: FILE: drivers/input/touchscreen/rmi_function_11.c:69:
+  /* First get the finger status field - the size of the finger status field is
+     determined by the number of finger supporte - 2 bits per finger, so the number

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1553: FILE: drivers/input/touchscreen/rmi_function_11.c:75:
+  fn11FingersSupported = rfi->numDataPoints;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1554: FILE: drivers/input/touchscreen/rmi_function_11.c:76:
+  fn11FingerRegisters = (fn11FingersSupported + 3)/4;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1554: FILE: drivers/input/touchscreen/rmi_function_11.c:76:
+  fn11FingerRegisters = (fn11FingersSupported + 3)/4;
                                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1556: FILE: drivers/input/touchscreen/rmi_function_11.c:78:
+  fn11DataBaseAddr = rfi->funcDescriptor.dataBaseAddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1558: FILE: drivers/input/touchscreen/rmi_function_11.c:80:
+  if (rmi_read_multiple(app, fn11DataBaseAddr, values, fn11FingerRegisters)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1558: FILE: drivers/input/touchscreen/rmi_function_11.c:80:
+  if (rmi_read_multiple(app, fn11DataBaseAddr, values, fn11FingerRegisters)) {
+    printk(KERN_ERR "RMI4 function $11 report: Could not read finger status registers 0x%x\n", fn11DataBaseAddr);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1559: FILE: drivers/input/touchscreen/rmi_function_11.c:81:
+    printk(KERN_ERR "RMI4 function $11 report: Could not read finger status registers 0x%x\n", fn11DataBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1559: FILE: drivers/input/touchscreen/rmi_function_11.c:81:
+    printk(KERN_ERR "RMI4 function $11 report: Could not read finger status registers 0x%x\n", fn11DataBaseAddr);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1559: FILE: drivers/input/touchscreen/rmi_function_11.c:81:
+    printk(KERN_ERR "RMI4 function $11 report: Could not read finger status registers 0x%x\n", fn11DataBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1560: FILE: drivers/input/touchscreen/rmi_function_11.c:82:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1561: FILE: drivers/input/touchscreen/rmi_function_11.c:83:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1564: FILE: drivers/input/touchscreen/rmi_function_11.c:86:
+  fn11DataRegBlockSize = rfi->dataRegBlockSize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1566: FILE: drivers/input/touchscreen/rmi_function_11.c:88:
+  for (finger = 0; finger < fn11FingersSupported; finger++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1566: FILE: drivers/input/touchscreen/rmi_function_11.c:88:
+  for (finger = 0; finger < fn11FingersSupported; finger++) {
+    int reg;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1567: FILE: drivers/input/touchscreen/rmi_function_11.c:89:
+    int reg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1568: FILE: drivers/input/touchscreen/rmi_function_11.c:90:
+    int fingerShift;$

CHECK:CAMELCASE: Avoid CamelCase: <fingerShift>
#1568: FILE: drivers/input/touchscreen/rmi_function_11.c:90:
+    int fingerShift;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1569: FILE: drivers/input/touchscreen/rmi_function_11.c:91:
+    int fingerStatus;$

CHECK:CAMELCASE: Avoid CamelCase: <fingerStatus>
#1569: FILE: drivers/input/touchscreen/rmi_function_11.c:91:
+    int fingerStatus;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1571: FILE: drivers/input/touchscreen/rmi_function_11.c:93:
+    reg = finger/4; /* determine which data byte the finger status is in */$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1571: FILE: drivers/input/touchscreen/rmi_function_11.c:93:
+    reg = finger/4; /* determine which data byte the finger status is in */
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1572: FILE: drivers/input/touchscreen/rmi_function_11.c:94:
+    fingerShift = (finger % 4) * 2; /* determine bit shift to get that fingers status */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1573: FILE: drivers/input/touchscreen/rmi_function_11.c:95:
+    fingerStatus = (values[reg] >> fingerShift) & 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1576: FILE: drivers/input/touchscreen/rmi_function_11.c:98:
+    if (fingerStatus == 1 || fingerStatus == 2) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1576: FILE: drivers/input/touchscreen/rmi_function_11.c:98:
+    if (fingerStatus == 1 || fingerStatus == 2) {
+      touch++; /* number of active touch points not same as number of supported fingers */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1577: FILE: drivers/input/touchscreen/rmi_function_11.c:99:
+      touch++; /* number of active touch points not same as number of supported fingers */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1580: FILE: drivers/input/touchscreen/rmi_function_11.c:102:
+      if (rmi_read_multiple(app, fn11DataBaseAddr +$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 16)
#1580: FILE: drivers/input/touchscreen/rmi_function_11.c:102:
+      if (rmi_read_multiple(app, fn11DataBaseAddr +
[...]
+		printk(KERN_ERR "RMI4 function $11 report: Could not read finger data registers 0x%x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1582: FILE: drivers/input/touchscreen/rmi_function_11.c:104:
+		printk(KERN_ERR "RMI4 function $11 report: Could not read finger data registers 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: drivers/input/touchscreen/rmi_function_11.c:105:
+		printk(KERN_ERR "RMI4 function $11 report: Could not read finger data registers 0x%x\n",
+		fn11DataBaseAddr + ((finger  * fn11DataRegBlockSize) + fn11FingerRegisters));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1585: FILE: drivers/input/touchscreen/rmi_function_11.c:107:
+      } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 16)
#1585: FILE: drivers/input/touchscreen/rmi_function_11.c:107:
+      } else {
+		X = (data[0] & 0x1f) << 4;

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#1598: FILE: drivers/input/touchscreen/rmi_function_11.c:120:
+	/* if this is the first finger report normal ABS_X, ABS_Y, PRESSURE, TOOL_WIDTH events for non-MT apps.

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1599: FILE: drivers/input/touchscreen/rmi_function_11.c:121:
+	   Apps that support Multi-touch will ignore these events and use the MT events. Apps that don't support

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1599: FILE: drivers/input/touchscreen/rmi_function_11.c:121:
+	/* if this is the first finger report normal ABS_X, ABS_Y, PRESSURE, TOOL_WIDTH events for non-MT apps.
+	   Apps that support Multi-touch will ignore these events and use the MT events. Apps that don't support

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1602: FILE: drivers/input/touchscreen/rmi_function_11.c:124:
+	if (touch == 1) {
+	  input_report_abs(input, ABS_X, X);

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1610: FILE: drivers/input/touchscreen/rmi_function_11.c:132:
+	input_report_abs(input, ABS_MT_TOUCH_MAJOR, max(Wx, Wy)); /* major axis of touch area ellipse */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1611: FILE: drivers/input/touchscreen/rmi_function_11.c:133:
+	input_report_abs(input, ABS_MT_TOUCH_MINOR, min(Wx, Wy)); /* minor axis of touch area ellipse */

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#1612: FILE: drivers/input/touchscreen/rmi_function_11.c:134:
+	input_report_abs(input, ABS_MT_ORIENTATION, (Wx > Wy ? 1 : 0)); /* Currently only 2 supported - 1 or 0 */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1615: FILE: drivers/input/touchscreen/rmi_function_11.c:137:
+	input_report_abs(input, ABS_MT_TRACKING_ID, finger+1); /* Tracking ID reported but not used yet */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1615: FILE: drivers/input/touchscreen/rmi_function_11.c:137:
+	input_report_abs(input, ABS_MT_TRACKING_ID, finger+1); /* Tracking ID reported but not used yet */
 	                                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1617: FILE: drivers/input/touchscreen/rmi_function_11.c:139:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1618: FILE: drivers/input/touchscreen/rmi_function_11.c:140:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1619: FILE: drivers/input/touchscreen/rmi_function_11.c:141:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1621: FILE: drivers/input/touchscreen/rmi_function_11.c:143:
+  if (touch) /* touch will be non-zero if we had any reported events */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1621: FILE: drivers/input/touchscreen/rmi_function_11.c:143:
+  if (touch) /* touch will be non-zero if we had any reported events */
+    input_sync(input); /* sync after groups of events */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1622: FILE: drivers/input/touchscreen/rmi_function_11.c:144:
+    input_sync(input); /* sync after groups of events */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1625: FILE: drivers/input/touchscreen/rmi_function_11.c:147:
+  return touch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1631: FILE: drivers/input/touchscreen/rmi_function_11.c:153:
+  unsigned char data[14];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1633: FILE: drivers/input/touchscreen/rmi_function_11.c:155:
+  printk(KERN_INFO "RMI4 function $11 config\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1633: FILE: drivers/input/touchscreen/rmi_function_11.c:155:
+  printk(KERN_INFO "RMI4 function $11 config\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1641: FILE: drivers/input/touchscreen/rmi_function_11.c:163:
+  if (rmi_read_multiple(app, rfi->funcDescriptor.queryBaseAddr, data, 9)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1641: FILE: drivers/input/touchscreen/rmi_function_11.c:163:
+  if (rmi_read_multiple(app, rfi->funcDescriptor.queryBaseAddr, data, 9)) {
+    printk(KERN_ERR "RMI4 function $11 config: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#1642: FILE: drivers/input/touchscreen/rmi_function_11.c:164:
+    printk(KERN_ERR "RMI4 function $11 config: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1642: FILE: drivers/input/touchscreen/rmi_function_11.c:164:
+    printk(KERN_ERR "RMI4 function $11 config: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1642: FILE: drivers/input/touchscreen/rmi_function_11.c:164:
+    printk(KERN_ERR "RMI4 function $11 config: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1643: FILE: drivers/input/touchscreen/rmi_function_11.c:165:
+    return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1644: FILE: drivers/input/touchscreen/rmi_function_11.c:166:
+  } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1644: FILE: drivers/input/touchscreen/rmi_function_11.c:166:
+  } else {
+    printk(KERN_INFO "  Number of Fingers:   %d\n", data[1] & 7);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1645: FILE: drivers/input/touchscreen/rmi_function_11.c:167:
+    printk(KERN_INFO "  Number of Fingers:   %d\n", data[1] & 7);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1645: FILE: drivers/input/touchscreen/rmi_function_11.c:167:
+    printk(KERN_INFO "  Number of Fingers:   %d\n", data[1] & 7);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1646: FILE: drivers/input/touchscreen/rmi_function_11.c:168:
+    printk(KERN_INFO "  Is Configurable:     %d\n", data[1] & (1 << 7) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1646: FILE: drivers/input/touchscreen/rmi_function_11.c:168:
+    printk(KERN_INFO "  Is Configurable:     %d\n", data[1] & (1 << 7) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1647: FILE: drivers/input/touchscreen/rmi_function_11.c:169:
+    printk(KERN_INFO "  Has Gestures:        %d\n", data[1] & (1 << 5) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1647: FILE: drivers/input/touchscreen/rmi_function_11.c:169:
+    printk(KERN_INFO "  Has Gestures:        %d\n", data[1] & (1 << 5) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1648: FILE: drivers/input/touchscreen/rmi_function_11.c:170:
+    printk(KERN_INFO "  Has Absolute:        %d\n", data[1] & (1 << 4) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1648: FILE: drivers/input/touchscreen/rmi_function_11.c:170:
+    printk(KERN_INFO "  Has Absolute:        %d\n", data[1] & (1 << 4) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1649: FILE: drivers/input/touchscreen/rmi_function_11.c:171:
+    printk(KERN_INFO "  Has Relative:        %d\n", data[1] & (1 << 3) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1649: FILE: drivers/input/touchscreen/rmi_function_11.c:171:
+    printk(KERN_INFO "  Has Relative:        %d\n", data[1] & (1 << 3) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1651: FILE: drivers/input/touchscreen/rmi_function_11.c:173:
+    printk(KERN_INFO "  Number X Electrodes: %d\n", data[2] & 0x1f);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1651: FILE: drivers/input/touchscreen/rmi_function_11.c:173:
+    printk(KERN_INFO "  Number X Electrodes: %d\n", data[2] & 0x1f);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1652: FILE: drivers/input/touchscreen/rmi_function_11.c:174:
+    printk(KERN_INFO "  Number Y Electrodes: %d\n", data[3] & 0x1f);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1652: FILE: drivers/input/touchscreen/rmi_function_11.c:174:
+    printk(KERN_INFO "  Number Y Electrodes: %d\n", data[3] & 0x1f);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1653: FILE: drivers/input/touchscreen/rmi_function_11.c:175:
+    printk(KERN_INFO "  Maximum Electrodes:  %d\n", data[4] & 0x1f);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1653: FILE: drivers/input/touchscreen/rmi_function_11.c:175:
+    printk(KERN_INFO "  Maximum Electrodes:  %d\n", data[4] & 0x1f);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1655: FILE: drivers/input/touchscreen/rmi_function_11.c:177:
+    printk(KERN_INFO "  Absolute Data Size:  %d\n", data[5] & 3);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1655: FILE: drivers/input/touchscreen/rmi_function_11.c:177:
+    printk(KERN_INFO "  Absolute Data Size:  %d\n", data[5] & 3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1657: FILE: drivers/input/touchscreen/rmi_function_11.c:179:
+    printk(KERN_INFO "  Has XY Dist:         %d\n", data[7] & (1 << 7) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1657: FILE: drivers/input/touchscreen/rmi_function_11.c:179:
+    printk(KERN_INFO "  Has XY Dist:         %d\n", data[7] & (1 << 7) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1658: FILE: drivers/input/touchscreen/rmi_function_11.c:180:
+    printk(KERN_INFO "  Has Pinch:           %d\n", data[7] & (1 << 6) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1658: FILE: drivers/input/touchscreen/rmi_function_11.c:180:
+    printk(KERN_INFO "  Has Pinch:           %d\n", data[7] & (1 << 6) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1659: FILE: drivers/input/touchscreen/rmi_function_11.c:181:
+    printk(KERN_INFO "  Has Press:           %d\n", data[7] & (1 << 5) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1659: FILE: drivers/input/touchscreen/rmi_function_11.c:181:
+    printk(KERN_INFO "  Has Press:           %d\n", data[7] & (1 << 5) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1660: FILE: drivers/input/touchscreen/rmi_function_11.c:182:
+    printk(KERN_INFO "  Has Flick:           %d\n", data[7] & (1 << 4) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1660: FILE: drivers/input/touchscreen/rmi_function_11.c:182:
+    printk(KERN_INFO "  Has Flick:           %d\n", data[7] & (1 << 4) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1661: FILE: drivers/input/touchscreen/rmi_function_11.c:183:
+    printk(KERN_INFO "  Has Early Tap:       %d\n", data[7] & (1 << 3) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1661: FILE: drivers/input/touchscreen/rmi_function_11.c:183:
+    printk(KERN_INFO "  Has Early Tap:       %d\n", data[7] & (1 << 3) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1662: FILE: drivers/input/touchscreen/rmi_function_11.c:184:
+    printk(KERN_INFO "  Has Double Tap:      %d\n", data[7] & (1 << 2) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1662: FILE: drivers/input/touchscreen/rmi_function_11.c:184:
+    printk(KERN_INFO "  Has Double Tap:      %d\n", data[7] & (1 << 2) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1663: FILE: drivers/input/touchscreen/rmi_function_11.c:185:
+    printk(KERN_INFO "  Has Tap and Hold:    %d\n", data[7] & (1 << 1) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1663: FILE: drivers/input/touchscreen/rmi_function_11.c:185:
+    printk(KERN_INFO "  Has Tap and Hold:    %d\n", data[7] & (1 << 1) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1664: FILE: drivers/input/touchscreen/rmi_function_11.c:186:
+    printk(KERN_INFO "  Has Tap:             %d\n", data[7] & 1 ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1664: FILE: drivers/input/touchscreen/rmi_function_11.c:186:
+    printk(KERN_INFO "  Has Tap:             %d\n", data[7] & 1 ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1665: FILE: drivers/input/touchscreen/rmi_function_11.c:187:
+    printk(KERN_INFO "  Has Palm Detect:     %d\n", data[8] & 1 ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1665: FILE: drivers/input/touchscreen/rmi_function_11.c:187:
+    printk(KERN_INFO "  Has Palm Detect:     %d\n", data[8] & 1 ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1666: FILE: drivers/input/touchscreen/rmi_function_11.c:188:
+    printk(KERN_INFO "  Has Rotate:          %d\n", data[8] & (1 << 1) ? 1 : 0);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1666: FILE: drivers/input/touchscreen/rmi_function_11.c:188:
+    printk(KERN_INFO "  Has Rotate:          %d\n", data[8] & (1 << 1) ? 1 : 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1668: FILE: drivers/input/touchscreen/rmi_function_11.c:190:
+    if (rmi_read_multiple(app, rfi->funcDescriptor.controlBaseAddr, data, 14)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1668: FILE: drivers/input/touchscreen/rmi_function_11.c:190:
+    if (rmi_read_multiple(app, rfi->funcDescriptor.controlBaseAddr, data, 14)) {
+      printk(KERN_ERR "RMI4 function $11 config: Could not read function control registers 0x%x\n", rfi->funcDescriptor.controlBaseAddr);

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#1669: FILE: drivers/input/touchscreen/rmi_function_11.c:191:
+      printk(KERN_ERR "RMI4 function $11 config: Could not read function control registers 0x%x\n", rfi->funcDescriptor.controlBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1669: FILE: drivers/input/touchscreen/rmi_function_11.c:191:
+      printk(KERN_ERR "RMI4 function $11 config: Could not read function control registers 0x%x\n", rfi->funcDescriptor.controlBaseAddr);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1669: FILE: drivers/input/touchscreen/rmi_function_11.c:191:
+      printk(KERN_ERR "RMI4 function $11 config: Could not read function control registers 0x%x\n", rfi->funcDescriptor.controlBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1670: FILE: drivers/input/touchscreen/rmi_function_11.c:192:
+      return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1671: FILE: drivers/input/touchscreen/rmi_function_11.c:193:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1674: FILE: drivers/input/touchscreen/rmi_function_11.c:196:
+    sensorMaxX = ((data[6] & 0x1f) << 8) | ((data[7] & 0xff) << 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1675: FILE: drivers/input/touchscreen/rmi_function_11.c:197:
+    sensorMaxY = ((data[8] & 0x1f) << 8) | ((data[9] & 0xff) << 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1677: FILE: drivers/input/touchscreen/rmi_function_11.c:199:
+    printk(KERN_INFO "  Sensor Max X:  %d\n", sensorMaxX);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1677: FILE: drivers/input/touchscreen/rmi_function_11.c:199:
+    printk(KERN_INFO "  Sensor Max X:  %d\n", sensorMaxX);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1678: FILE: drivers/input/touchscreen/rmi_function_11.c:200:
+    printk(KERN_INFO "  Sensor Max Y:  %d\n", sensorMaxY);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1678: FILE: drivers/input/touchscreen/rmi_function_11.c:200:
+    printk(KERN_INFO "  Sensor Max Y:  %d\n", sensorMaxY);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1679: FILE: drivers/input/touchscreen/rmi_function_11.c:201:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1687: FILE: drivers/input/touchscreen/rmi_function_11.c:209:
+  printk(KERN_INFO "RMI4 function $11 init\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1687: FILE: drivers/input/touchscreen/rmi_function_11.c:209:
+  printk(KERN_INFO "RMI4 function $11 init\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1690: FILE: drivers/input/touchscreen/rmi_function_11.c:212:
+  input->evbit[0] = BIT(EV_ABS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1693: FILE: drivers/input/touchscreen/rmi_function_11.c:215:
+  input_set_abs_params(input, ABS_X, 0, sensorMaxX, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1694: FILE: drivers/input/touchscreen/rmi_function_11.c:216:
+  input_set_abs_params(input, ABS_Y, 0, sensorMaxY, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1695: FILE: drivers/input/touchscreen/rmi_function_11.c:217:
+  input_set_abs_params(input, ABS_MT_POSITION_X, 0, sensorMaxX, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1696: FILE: drivers/input/touchscreen/rmi_function_11.c:218:
+  input_set_abs_params(input, ABS_MT_POSITION_Y, 0, sensorMaxY, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1698: FILE: drivers/input/touchscreen/rmi_function_11.c:220:
+  input_set_abs_params(input, ABS_PRESSURE, 0, 255, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1699: FILE: drivers/input/touchscreen/rmi_function_11.c:221:
+  input_set_abs_params(input, ABS_TOOL_WIDTH, 0, 15, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1701: FILE: drivers/input/touchscreen/rmi_function_11.c:223:
+  input_set_abs_params(input, ABS_MT_TOUCH_MAJOR, 0, 15, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1702: FILE: drivers/input/touchscreen/rmi_function_11.c:224:
+  input_set_abs_params(input, ABS_MT_TOUCH_MINOR, 0, 15, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1703: FILE: drivers/input/touchscreen/rmi_function_11.c:225:
+  input_set_abs_params(input, ABS_MT_ORIENTATION, 0, 1, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1704: FILE: drivers/input/touchscreen/rmi_function_11.c:226:
+  input_set_abs_params(input, ABS_MT_TRACKING_ID, 1, 10, 0, 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1708: FILE: drivers/input/touchscreen/rmi_function_11.c:230:
+void FN_11_detect(struct rmi_application *app, struct rmi_function_info *rfi,
+  struct rmi_function_descriptor *fd, unsigned int interruptCount)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1708: FILE: drivers/input/touchscreen/rmi_function_11.c:230:
+  struct rmi_function_descriptor *fd, unsigned int interruptCount)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1710: FILE: drivers/input/touchscreen/rmi_function_11.c:232:
+  char fn11Queries[9];$

CHECK:CAMELCASE: Avoid CamelCase: <fn11Queries>
#1710: FILE: drivers/input/touchscreen/rmi_function_11.c:232:
+  char fn11Queries[9];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1711: FILE: drivers/input/touchscreen/rmi_function_11.c:233:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1712: FILE: drivers/input/touchscreen/rmi_function_11.c:234:
+  unsigned short fn11InterruptOffset;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11InterruptOffset>
#1712: FILE: drivers/input/touchscreen/rmi_function_11.c:234:
+  unsigned short fn11InterruptOffset;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1713: FILE: drivers/input/touchscreen/rmi_function_11.c:235:
+  unsigned char fn11AbsDataSize;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11AbsDataSize>
#1713: FILE: drivers/input/touchscreen/rmi_function_11.c:235:
+  unsigned char fn11AbsDataSize;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1714: FILE: drivers/input/touchscreen/rmi_function_11.c:236:
+  unsigned char fn11AbsDataBlockSize;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11AbsDataBlockSize>
#1714: FILE: drivers/input/touchscreen/rmi_function_11.c:236:
+  unsigned char fn11AbsDataBlockSize;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1715: FILE: drivers/input/touchscreen/rmi_function_11.c:237:
+  int fn11HasPinch, fn11HasFlick, fn11HasTap;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasPinch>
#1715: FILE: drivers/input/touchscreen/rmi_function_11.c:237:
+  int fn11HasPinch, fn11HasFlick, fn11HasTap;

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasFlick>
#1715: FILE: drivers/input/touchscreen/rmi_function_11.c:237:
+  int fn11HasPinch, fn11HasFlick, fn11HasTap;

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasTap>
#1715: FILE: drivers/input/touchscreen/rmi_function_11.c:237:
+  int fn11HasPinch, fn11HasFlick, fn11HasTap;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1716: FILE: drivers/input/touchscreen/rmi_function_11.c:238:
+  int fn11HasTapAndHold, fn11HasDoubleTap;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasTapAndHold>
#1716: FILE: drivers/input/touchscreen/rmi_function_11.c:238:
+  int fn11HasTapAndHold, fn11HasDoubleTap;

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasDoubleTap>
#1716: FILE: drivers/input/touchscreen/rmi_function_11.c:238:
+  int fn11HasTapAndHold, fn11HasDoubleTap;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1717: FILE: drivers/input/touchscreen/rmi_function_11.c:239:
+  int fn11HasEarlyTap, fn11HasPress;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasEarlyTap>
#1717: FILE: drivers/input/touchscreen/rmi_function_11.c:239:
+  int fn11HasEarlyTap, fn11HasPress;

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasPress>
#1717: FILE: drivers/input/touchscreen/rmi_function_11.c:239:
+  int fn11HasEarlyTap, fn11HasPress;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1718: FILE: drivers/input/touchscreen/rmi_function_11.c:240:
+  int fn11HasPalmDetect, fn11HasRotate;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasPalmDetect>
#1718: FILE: drivers/input/touchscreen/rmi_function_11.c:240:
+  int fn11HasPalmDetect, fn11HasRotate;

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasRotate>
#1718: FILE: drivers/input/touchscreen/rmi_function_11.c:240:
+  int fn11HasPalmDetect, fn11HasRotate;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1719: FILE: drivers/input/touchscreen/rmi_function_11.c:241:
+  int fn11HasRel;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11HasRel>
#1719: FILE: drivers/input/touchscreen/rmi_function_11.c:241:
+  int fn11HasRel;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1720: FILE: drivers/input/touchscreen/rmi_function_11.c:242:
+  unsigned char f11_egr_0, f11_egr_1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1721: FILE: drivers/input/touchscreen/rmi_function_11.c:243:
+  unsigned int fn11AllDataBlockSize;$

CHECK:CAMELCASE: Avoid CamelCase: <fn11AllDataBlockSize>
#1721: FILE: drivers/input/touchscreen/rmi_function_11.c:243:
+  unsigned int fn11AllDataBlockSize;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1722: FILE: drivers/input/touchscreen/rmi_function_11.c:244:
+  int retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1724: FILE: drivers/input/touchscreen/rmi_function_11.c:246:
+  printk(KERN_INFO "RMI4 function $11 detect\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1724: FILE: drivers/input/touchscreen/rmi_function_11.c:246:
+  printk(KERN_INFO "RMI4 function $11 detect\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1727: FILE: drivers/input/touchscreen/rmi_function_11.c:249:
+  rfi->funcDescriptor.queryBaseAddr = fd->queryBaseAddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1728: FILE: drivers/input/touchscreen/rmi_function_11.c:250:
+  rfi->funcDescriptor.commandBaseAddr = fd->commandBaseAddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1729: FILE: drivers/input/touchscreen/rmi_function_11.c:251:
+  rfi->funcDescriptor.controlBaseAddr = fd->controlBaseAddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1730: FILE: drivers/input/touchscreen/rmi_function_11.c:252:
+  rfi->funcDescriptor.dataBaseAddr = fd->dataBaseAddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1731: FILE: drivers/input/touchscreen/rmi_function_11.c:253:
+  rfi->funcDescriptor.interruptSrcCnt = fd->interruptSrcCnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1732: FILE: drivers/input/touchscreen/rmi_function_11.c:254:
+  rfi->funcDescriptor.functionNum = fd->functionNum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1734: FILE: drivers/input/touchscreen/rmi_function_11.c:256:
+  rfi->numSources = fd->interruptSrcCnt;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1737: FILE: drivers/input/touchscreen/rmi_function_11.c:259:
+  /* need to get number of fingers supported, data size, etc. -
+     to be used when getting data since the number of registers to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1738: FILE: drivers/input/touchscreen/rmi_function_11.c:260:
+     read depends on the number of fingers supported and data size. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1739: FILE: drivers/input/touchscreen/rmi_function_11.c:261:
+  if (rmi_read_multiple(app, fd->queryBaseAddr, fn11Queries, sizeof(fn11Queries))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1739: FILE: drivers/input/touchscreen/rmi_function_11.c:261:
+  if (rmi_read_multiple(app, fd->queryBaseAddr, fn11Queries, sizeof(fn11Queries))) {
+    printk(KERN_ERR "RMI4 function $11 detect: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#1740: FILE: drivers/input/touchscreen/rmi_function_11.c:262:
+    printk(KERN_ERR "RMI4 function $11 detect: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1740: FILE: drivers/input/touchscreen/rmi_function_11.c:262:
+    printk(KERN_ERR "RMI4 function $11 detect: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1740: FILE: drivers/input/touchscreen/rmi_function_11.c:262:
+    printk(KERN_ERR "RMI4 function $11 detect: Could not read function query registers 0x%x\n", rfi->funcDescriptor.queryBaseAddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1741: FILE: drivers/input/touchscreen/rmi_function_11.c:263:
+    return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1742: FILE: drivers/input/touchscreen/rmi_function_11.c:264:
+  }$

WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#1744: FILE: drivers/input/touchscreen/rmi_function_11.c:266:
+  /* 2D data sources have only 3 bits for the number of fingers supported - so the encoding is a bit wierd. */
                                                                                                      ^^^^^

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1744: FILE: drivers/input/touchscreen/rmi_function_11.c:266:
+  /* 2D data sources have only 3 bits for the number of fingers supported - so the encoding is a bit wierd. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1745: FILE: drivers/input/touchscreen/rmi_function_11.c:267:
+  rfi->numDataPoints = 2; /* default number of fingers supported */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1746: FILE: drivers/input/touchscreen/rmi_function_11.c:268:
+  if ((fn11Queries[1] & 0x7) <= 4)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#1746: FILE: drivers/input/touchscreen/rmi_function_11.c:268:
+  if ((fn11Queries[1] & 0x7) <= 4)
+   rfi->numDataPoints = (fn11Queries[1] & 0x7) + 1; /* add one since zero based */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1747: FILE: drivers/input/touchscreen/rmi_function_11.c:269:
+   rfi->numDataPoints = (fn11Queries[1] & 0x7) + 1; /* add one since zero based */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1748: FILE: drivers/input/touchscreen/rmi_function_11.c:270:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1748: FILE: drivers/input/touchscreen/rmi_function_11.c:270:
+  else {
+    if ((fn11Queries[1] & 0x7) == 5) /* a value of 5 is up to 10 fingers - 6 and 7 are reserved (shouldn't get these i int retval;n a normal 2D source). */

CHECK:BRACES: Unbalanced braces around else statement
#1748: FILE: drivers/input/touchscreen/rmi_function_11.c:270:
+  else {

WARNING:LONG_LINE_COMMENT: line length of 155 exceeds 100 columns
#1749: FILE: drivers/input/touchscreen/rmi_function_11.c:271:
+    if ((fn11Queries[1] & 0x7) == 5) /* a value of 5 is up to 10 fingers - 6 and 7 are reserved (shouldn't get these i int retval;n a normal 2D source). */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1749: FILE: drivers/input/touchscreen/rmi_function_11.c:271:
+    if ((fn11Queries[1] & 0x7) == 5) /* a value of 5 is up to 10 fingers - 6 and 7 are reserved (shouldn't get these i int retval;n a normal 2D source). */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1749: FILE: drivers/input/touchscreen/rmi_function_11.c:271:
+    if ((fn11Queries[1] & 0x7) == 5) /* a value of 5 is up to 10 fingers - 6 and 7 are reserved (shouldn't get these i int retval;n a normal 2D source). */
+      rfi->numDataPoints = 10;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1750: FILE: drivers/input/touchscreen/rmi_function_11.c:272:
+      rfi->numDataPoints = 10;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1751: FILE: drivers/input/touchscreen/rmi_function_11.c:273:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1754: FILE: drivers/input/touchscreen/rmi_function_11.c:276:
+  rfi->interruptRegister = (interruptCount + 7)/8;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1754: FILE: drivers/input/touchscreen/rmi_function_11.c:276:
+  rfi->interruptRegister = (interruptCount + 7)/8;
                                                ^

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1756: FILE: drivers/input/touchscreen/rmi_function_11.c:278:
+  /* loop through interrupts for each source in fn $11 and or in a bit to the interrupt mask for each. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1757: FILE: drivers/input/touchscreen/rmi_function_11.c:279:
+  fn11InterruptOffset = interruptCount % 8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1759: FILE: drivers/input/touchscreen/rmi_function_11.c:281:
+  for (i = fn11InterruptOffset; i < ((fd->interruptSrcCnt & 0x7) + fn11InterruptOffset); i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1759: FILE: drivers/input/touchscreen/rmi_function_11.c:281:
+  for (i = fn11InterruptOffset; i < ((fd->interruptSrcCnt & 0x7) + fn11InterruptOffset); i++) {
+    rfi->interruptMask |= 1 << i;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1759: FILE: drivers/input/touchscreen/rmi_function_11.c:281:
+  for (i = fn11InterruptOffset; i < ((fd->interruptSrcCnt & 0x7) + fn11InterruptOffset); i++) {
+    rfi->interruptMask |= 1 << i;
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1760: FILE: drivers/input/touchscreen/rmi_function_11.c:282:
+    rfi->interruptMask |= 1 << i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1761: FILE: drivers/input/touchscreen/rmi_function_11.c:283:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1764: FILE: drivers/input/touchscreen/rmi_function_11.c:286:
+  fn11AbsDataSize = fn11Queries[5] & 0x03;$

WARNING:LONG_LINE_COMMENT: line length of 138 exceeds 100 columns
#1765: FILE: drivers/input/touchscreen/rmi_function_11.c:287:
+  fn11AbsDataBlockSize = 3 + (2 * (fn11AbsDataSize == 0 ? 1 : 0)); /* One each for X and Y, one for LSB for X & Y, one for W, one for Z */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1765: FILE: drivers/input/touchscreen/rmi_function_11.c:287:
+  fn11AbsDataBlockSize = 3 + (2 * (fn11AbsDataSize == 0 ? 1 : 0)); /* One each for X and Y, one for LSB for X & Y, one for W, one for Z */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1766: FILE: drivers/input/touchscreen/rmi_function_11.c:288:
+  rfi->dataRegBlockSize = fn11AbsDataBlockSize;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1769: FILE: drivers/input/touchscreen/rmi_function_11.c:291:
+  /* need to determine the size of data to read - this depends on conditions such as
+     whether Relative data is reported and if Gesture data is reported. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1769: FILE: drivers/input/touchscreen/rmi_function_11.c:291:
+     whether Relative data is reported and if Gesture data is reported. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1770: FILE: drivers/input/touchscreen/rmi_function_11.c:292:
+  f11_egr_0 = fn11Queries[7];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1771: FILE: drivers/input/touchscreen/rmi_function_11.c:293:
+  f11_egr_1 = fn11Queries[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1774: FILE: drivers/input/touchscreen/rmi_function_11.c:296:
+  fn11HasPinch = f11_egr_0 & 0x40;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1775: FILE: drivers/input/touchscreen/rmi_function_11.c:297:
+  fn11HasFlick = f11_egr_0 & 0x10;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1776: FILE: drivers/input/touchscreen/rmi_function_11.c:298:
+  fn11HasTap = f11_egr_0 & 0x01;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1777: FILE: drivers/input/touchscreen/rmi_function_11.c:299:
+  fn11HasTapAndHold = f11_egr_0 & 0x02;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1778: FILE: drivers/input/touchscreen/rmi_function_11.c:300:
+  fn11HasDoubleTap = f11_egr_0 & 0x04;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1779: FILE: drivers/input/touchscreen/rmi_function_11.c:301:
+  fn11HasEarlyTap = f11_egr_0 & 0x08;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1780: FILE: drivers/input/touchscreen/rmi_function_11.c:302:
+  fn11HasPress = f11_egr_0 & 0x20;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1781: FILE: drivers/input/touchscreen/rmi_function_11.c:303:
+  fn11HasPalmDetect = f11_egr_1 & 0x01;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1782: FILE: drivers/input/touchscreen/rmi_function_11.c:304:
+  fn11HasRotate = f11_egr_1 & 0x02;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1783: FILE: drivers/input/touchscreen/rmi_function_11.c:305:
+  fn11HasRel = fn11Queries[1] & 0x08;$

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1785: FILE: drivers/input/touchscreen/rmi_function_11.c:307:
+  /* Size of all data including finger status, absolute data for each finger, relative data and EGR data */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1786: FILE: drivers/input/touchscreen/rmi_function_11.c:308:
+  fn11AllDataBlockSize =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1788: FILE: drivers/input/touchscreen/rmi_function_11.c:310:
+    ((rfi->numDataPoints + 3) / 4) +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1790: FILE: drivers/input/touchscreen/rmi_function_11.c:312:
+    (fn11AbsDataBlockSize * rfi->numDataPoints) +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1792: FILE: drivers/input/touchscreen/rmi_function_11.c:314:
+    2 * fn11HasRel +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1794: FILE: drivers/input/touchscreen/rmi_function_11.c:316:
+    !!(f11_egr_0) +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1796: FILE: drivers/input/touchscreen/rmi_function_11.c:318:
+    (f11_egr_0 || f11_egr_1) +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1798: FILE: drivers/input/touchscreen/rmi_function_11.c:320:
+    !!(fn11HasPinch | fn11HasFlick) +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1800: FILE: drivers/input/touchscreen/rmi_function_11.c:322:
+    2 * !!(fn11HasFlick);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1803: FILE: drivers/input/touchscreen/rmi_function_11.c:325:
+   * turn them on when it's ready for them. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1804: FILE: drivers/input/touchscreen/rmi_function_11.c:326:
+  retval = rmi_write(app, fn01ControlBaseAddr + 1 + rfi->interruptRegister, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1805: FILE: drivers/input/touchscreen/rmi_function_11.c:327:
+  if (!retval) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1805: FILE: drivers/input/touchscreen/rmi_function_11.c:327:
+  if (!retval) {
+    printk(KERN_ERR "Function $11 Interrupt Disable Fail: %d\n", retval);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1805: FILE: drivers/input/touchscreen/rmi_function_11.c:327:
+  if (!retval) {
+    printk(KERN_ERR "Function $11 Interrupt Disable Fail: %d\n", retval);
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1806: FILE: drivers/input/touchscreen/rmi_function_11.c:328:
+    printk(KERN_ERR "Function $11 Interrupt Disable Fail: %d\n", retval);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1806: FILE: drivers/input/touchscreen/rmi_function_11.c:328:
+    printk(KERN_ERR "Function $11 Interrupt Disable Fail: %d\n", retval);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1807: FILE: drivers/input/touchscreen/rmi_function_11.c:329:
+  }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1809: FILE: drivers/input/touchscreen/rmi_function_11.c:331:
+
+}

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#1813: FILE: drivers/input/touchscreen/rmi_function_11.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1818: FILE: drivers/input/touchscreen/rmi_function_11.h:1:
+/**

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1851: FILE: drivers/input/touchscreen/rmi_function_11.h:34:
+int  FN_11_report(struct rmi_application *app, struct rmi_function_info *rfi, struct input_dev *input);

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#1854: FILE: drivers/input/touchscreen/rmi_function_11.h:37:
+void FN_11_detect(struct rmi_application *app, struct rmi_function_info *rfi, struct rmi_function_descriptor *fd, unsigned int interruptCount);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1865: FILE: drivers/input/touchscreen/rmi_functions.h:1:
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1895: FILE: drivers/input/touchscreen/rmi_functions.h:31:
+/* This struct is for creating a list of RMI4 functions that have data sources
+   associated with them. This is to facilitate adding new support for other

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1909: FILE: drivers/input/touchscreen/rmi_functions.h:45:
+  unsigned char functionNum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1911: FILE: drivers/input/touchscreen/rmi_functions.h:47:
+  struct input_dev *input;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1915: FILE: drivers/input/touchscreen/rmi_functions.h:51:
+  /* These ptrs. need to be filled in for every RMI4 function that has data
+     source(s) associated with it - like fn $11 (2D sensors), fn $19 (buttons),

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1919: FILE: drivers/input/touchscreen/rmi_functions.h:55:
+  int  (*report)(struct rmi_application *app, struct rmi_function_info *rfi, struct input_dev *input);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1919: FILE: drivers/input/touchscreen/rmi_functions.h:55:
+  int  (*report)(struct rmi_application *app, struct rmi_function_info *rfi, struct input_dev *input);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1920: FILE: drivers/input/touchscreen/rmi_functions.h:56:
+  void (*config)(struct rmi_application *app, struct rmi_function_info *rfi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1921: FILE: drivers/input/touchscreen/rmi_functions.h:57:
+  void (*init)(struct input_dev *input);$

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#1922: FILE: drivers/input/touchscreen/rmi_functions.h:58:
+  void (*detect)(struct rmi_application *app, struct rmi_function_info *rfi, struct rmi_function_descriptor *fd, unsigned int interruptCount);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1922: FILE: drivers/input/touchscreen/rmi_functions.h:58:
+  void (*detect)(struct rmi_application *app, struct rmi_function_info *rfi, struct rmi_function_descriptor *fd, unsigned int interruptCount);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1928: FILE: drivers/input/touchscreen/rmi_functions.h:64:
+  struct list_head link;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1931: FILE: drivers/input/touchscreen/rmi_functions.h:67:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1933: FILE: drivers/input/touchscreen/rmi_functions.h:69:
+/* Each time a new RMI4 function support is added the developer needs to bump the number of
+   supported data src functions and add the info for that RMI4 function to the array along

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1934: FILE: drivers/input/touchscreen/rmi_functions.h:70:
+   with pointers to the report, config, init and detect functions that they coded in rmi_function_xx.c

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1935: FILE: drivers/input/touchscreen/rmi_functions.h:71:
+   and rmi_function_xx.h - where xx is the RMI4 function number for the new RMI4 data source function.

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1944: FILE: drivers/input/touchscreen/rmi_functions.h:80:
+typedef int(*reportFuncPtr)(struct rmi_application *app, struct rmi_function_info *rfi, struct input_dev *input);

CHECK:CAMELCASE: Avoid CamelCase: <reportFuncPtr>
#1944: FILE: drivers/input/touchscreen/rmi_functions.h:80:
+typedef int(*reportFuncPtr)(struct rmi_application *app, struct rmi_function_info *rfi, struct input_dev *input);

CHECK:CAMELCASE: Avoid CamelCase: <configFuncPtr>
#1945: FILE: drivers/input/touchscreen/rmi_functions.h:81:
+typedef void(*configFuncPtr)(struct rmi_application *app, struct rmi_function_info *rfi);

CHECK:CAMELCASE: Avoid CamelCase: <initFuncPtr>
#1946: FILE: drivers/input/touchscreen/rmi_functions.h:82:
+typedef void(*initFuncPtr)(struct input_dev *input);

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#1947: FILE: drivers/input/touchscreen/rmi_functions.h:83:
+typedef void(*detectFuncPtr)(struct rmi_application *app, struct rmi_function_info *rfi, struct rmi_function_descriptor *fd, unsigned int interruptCount);

CHECK:CAMELCASE: Avoid CamelCase: <detectFuncPtr>
#1947: FILE: drivers/input/touchscreen/rmi_functions.h:83:
+typedef void(*detectFuncPtr)(struct rmi_application *app, struct rmi_function_info *rfi, struct rmi_function_descriptor *fd, unsigned int interruptCount);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1950: FILE: drivers/input/touchscreen/rmi_functions.h:86:
+  int functionNumber;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1951: FILE: drivers/input/touchscreen/rmi_functions.h:87:
+  reportFuncPtr reportFn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1952: FILE: drivers/input/touchscreen/rmi_functions.h:88:
+  configFuncPtr configFn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1953: FILE: drivers/input/touchscreen/rmi_functions.h:89:
+  initFuncPtr initFn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1954: FILE: drivers/input/touchscreen/rmi_functions.h:90:
+  detectFuncPtr detectFn;$

WARNING:LONG_LINE_COMMENT: line length of 129 exceeds 100 columns
#1957: FILE: drivers/input/touchscreen/rmi_functions.h:93:
+/* NOTE:   Developer - add in any new RMI4 fn data info - function number and ptrs to report, config, init and detect functions.

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#1958: FILE: drivers/input/touchscreen/rmi_functions.h:94:
+   This data is used to point to the functions that need to be called to config, init, detect and report data for the

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1958: FILE: drivers/input/touchscreen/rmi_functions.h:94:
+/* NOTE:   Developer - add in any new RMI4 fn data info - function number and ptrs to report, config, init and detect functions.
+   This data is used to point to the functions that need to be called to config, init, detect and report data for the

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#1959: FILE: drivers/input/touchscreen/rmi_functions.h:95:
+   new RMI4 function. These only need to be added for RMI4 functions that support data source - like 2D sensors, buttons,

WARNING:LONG_LINE_COMMENT: line length of 119 exceeds 100 columns
#1960: FILE: drivers/input/touchscreen/rmi_functions.h:96:
+   LEDs, GPIOs, etc. Refer to the RMI4 specification for information on these RMI4 functions and what data they report.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1965: FILE: drivers/input/touchscreen/rmi_functions.h:101:
+  {0x11, FN_11_report, FN_11_config, FN_11_init, FN_11_detect},$

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#1973: FILE: drivers/input/touchscreen/rmi_i2c.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1978: FILE: drivers/input/touchscreen/rmi_i2c.h:1:
+/**

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2016: FILE: drivers/input/touchscreen/rmi_i2c.h:39:
+	 * irq != 0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2020: FILE: drivers/input/touchscreen/rmi_i2c.h:43:
+	 * line. */

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#2036: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2041: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:1:
+/**

WARNING:INCLUDE_LINUX: Use #include <linux/gpio.h> instead of <asm/gpio.h>
#2074: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:34:
+#include <asm/gpio.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2103: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:63:
+  [0] = {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2104: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:64:
+    .i2c_address   = 0x20,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2105: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:65:
+    .irq           = IRQINT3,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2106: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:66:
+    .irq_type      = IRQ_TRIGGER,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2107: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:67:
+    .get_attention = get_attention,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2108: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:68:
+  },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2112: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:72:
+  .num_clients = ARRAY_SIZE(rmi_test_clientdata),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2113: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:73:
+  .clientdata  = rmi_test_clientdata,$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2134: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:94:
+	printk(KERN_INFO "GTA01 RMI4 Platform Driver Init.\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2136: FILE: drivers/input/touchscreen/rmi_i2c_gta01.c:96:
+	gta01_rmi_device = pd = kmalloc(sizeof(*pd), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#2167: FILE: drivers/input/touchscreen/rmi_phys_i2c.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2172: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:1:
+/**

WARNING:LINE_SPACING: Missing a blank line after declarations
#2253: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:82:
+	int retval;
+	txbuf[0] = 0xff;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2257: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:86:
+		printk(KERN_ERR "rmi_i2c: Set page fail: %d\n", retval);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2286: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:115:
+		if (retval) {
+			goto exit;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2296: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:125:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_read: Write fail: %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rmi_i2c_read', this function's name, in a string
#2296: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:125:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_read: Write fail: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2297: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:126:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_read: Write fail: %d\n",
+			retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2304: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:133:
+			printk(KERN_ERR "rmi_i2c.rmi_i2c_read: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rmi_i2c_read', this function's name, in a string
#2304: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:133:
+			printk(KERN_ERR "rmi_i2c.rmi_i2c_read: "

WARNING:SPLIT_STRING: quoted string split across lines
#2305: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:134:
+			printk(KERN_ERR "rmi_i2c.rmi_i2c_read: "
+				"Read of 0x%04x fail: %d\n", address, retval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2332: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:161:
+rmi_i2c_read_multiple(struct rmi_phys_driver *pd, unsigned short address,
+	char *valp, int size)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2345: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:174:
+		if (retval) {
+			goto exit;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2355: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:184:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_read: Write fail: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2356: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:185:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_read: Write fail: %d\n",
+			retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2363: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:192:
+			printk(KERN_ERR "rmi_2ic.rmi_i2c_read_multiple: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rmi_i2c_read_multiple', this function's name, in a string
#2363: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:192:
+			printk(KERN_ERR "rmi_2ic.rmi_i2c_read_multiple: "

WARNING:SPLIT_STRING: quoted string split across lines
#2364: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:193:
+			printk(KERN_ERR "rmi_2ic.rmi_i2c_read_multiple: "
+				"Read of 0x%04x size %d fail: %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2379: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:208:
+
+

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#2383: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:212:
+ * seperate for performance reasons.  Writing multiple requires allocation and
    ^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2403: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:232:
+		if (retval) {
+			goto exit;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2413: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:242:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_write: Write fail: %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rmi_i2c_write', this function's name, in a string
#2413: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:242:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_write: Write fail: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2414: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:243:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_write: Write fail: %d\n",
+			retval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2432: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:261:
+rmi_i2c_write_multiple(struct rmi_phys_driver *pd, unsigned short address,
+	char *valp, int size)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#2444: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:273:
+		if (!txbuf)
+		  return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#2445: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:274:
+		  return -ENOMEM;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2451: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:280:
+		int i;
+		for (i = 0; i < size; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2451: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:280:
+		for (i = 0; i < size; i++) {
+			txbuf[i + 1] = valp[i];
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2462: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:291:
+		if (retval) {
+			goto exit;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2471: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:300:
+		printk(KERN_ERR "rmi_i2c.rmi_i2c_read: Write fail: %d\n", retval);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#2476: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:305:
+	if (txbuf != txbuf_most)
+	  kfree(txbuf);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2491: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:320:
+	struct instance_data *id = container_of(rpd, struct instance_data, rpd);
+	if (id->get_attention) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2491: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:320:
+	if (id->get_attention) {
[...]
+	} else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2509: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:338:
+	struct instance_data *id = info;
+	if (id->rpd.attention) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2509: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:338:
+	if (id->rpd.attention) {
+		id->rpd.attention(&id->rpd, id->instance_no);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2515: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:344:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2531: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:360:
+		printk(KERN_ERR "rmi_i2c: Out of memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2531: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:360:
+	if (!id) {
+		printk(KERN_ERR "rmi_i2c: Out of memory\n");

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#2549: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:378:
+	strlcpy(id->i2cclient.name, "rmi_i2c", I2C_NAME_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2579: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:408:
+					printk(KERN_WARNING "rmi_i2c: Invalid IRQ flags in "

WARNING:SPLIT_STRING: quoted string split across lines
#2580: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:409:
+					printk(KERN_WARNING "rmi_i2c: Invalid IRQ flags in "
+						"platform data\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2586: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:415:
+				retval = request_irq(id->irq, i2c_attn_isr,
+						  IRQF_DISABLED | irqtype, "rmi_i2c", id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2588: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:417:
+					printk(KERN_WARNING "rmi_i2c: Unable to get attn "

WARNING:SPLIT_STRING: quoted string split across lines
#2589: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:418:
+					printk(KERN_WARNING "rmi_i2c: Unable to get attn "
+					  "irq %d.  Reverting to polling.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2598: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:427:
+				printk(KERN_INFO "rmi_i2c: No IRQ info given. "

WARNING:SPLIT_STRING: quoted string split across lines
#2599: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:428:
+				printk(KERN_INFO "rmi_i2c: No IRQ info given. "
+					"Polling required.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2609: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:438:
+		printk(KERN_ERR "rmi_i2c : Failed to Register %s phys driver\n", id->rpd.name);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2611: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:440:
+		if (id->irq) {
+			free_irq(id->irq, id);
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2618: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:447:
+	printk(KERN_INFO "rmi_i2c : Successfully Registered %s phys driver\n", id->rpd.name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2625: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:454:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2657: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:486:
+	if (id->irq) {
+		free_irq(id->irq, id);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2688: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:517:
+	printk(KERN_INFO "RMI I2C Driver\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2689: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:518:
+	if (RMI_ALLOC_STATS) {
+		printk(KERN_INFO "    Allocation Stats Enabled\n");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2690: FILE: drivers/input/touchscreen/rmi_phys_i2c.c:519:
+		printk(KERN_INFO "    Allocation Stats Enabled\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016725.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 833 warnings, 92 checks, 2609 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016725.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
