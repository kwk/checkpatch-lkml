WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#94: FILE: drivers/net/netconsole.c:312:
+		printk(KERN_ERR "netconsole: invalid input\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#108: FILE: drivers/net/netconsole.c:377:
+		printk(KERN_ERR "netconsole: invalid input\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#122: FILE: drivers/net/netconsole.c:401:
+		printk(KERN_ERR "netconsole: invalid input\n");

ERROR:SPACING: space required after that ',' (ctx:OxV)
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);
                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#136: FILE: include/linux/kernel.h:124:
+extern long strtol_check_range(const char *,long,long,unsigned int);

CHECK:SPACING: No space is necessary after a cast
#161: FILE: lib/vsprintf.c:142:
+	char *p = (char *) cp;

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#166: FILE: lib/vsprintf.c:147:
+	ret = simple_strtol(p, &p, base);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret < min'
#170: FILE: lib/vsprintf.c:151:
+	if ((ret < min) || (ret > max))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret > max'
#170: FILE: lib/vsprintf.c:151:
+	if ((ret < min) || (ret > max))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#176: FILE: lib/vsprintf.c:157:
+EXPORT_SYMBOL(strtol_check_range);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 9 warnings, 4 checks, 116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
