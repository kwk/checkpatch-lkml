WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#156: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: arch/powerpc/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#184: FILE: arch/powerpc/kernel/kgdb.c:24:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#215: FILE: arch/powerpc/kernel/kgdb.c:55:
+	{ 0x2060, 0x0e /* SIGILL */  },		/* performace monitor */
 	                               		   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: arch/powerpc/kernel/kgdb.c:58:
+^I{ 0x3200, 0x02 /* SIGINT */  }, ^I/* watchdog */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: arch/powerpc/kernel/kgdb.c:62:
+^I{ 0x1020, 0x02 /* SIGINT */  }, ^I/* watchdog */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: arch/powerpc/kernel/kgdb.c:73:
+^I{ 0x1300, 0x05 /* SIGTRAP */ }, ^I/* instruction address break */$

CHECK:CAMELCASE: Avoid CamelCase: <computeSignal>
#251: FILE: arch/powerpc/kernel/kgdb.c:91:
+static int computeSignal(unsigned int tt)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#289: FILE: arch/powerpc/kernel/kgdb.c:129:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->nip'
#289: FILE: arch/powerpc/kernel/kgdb.c:129:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&arch_kgdb_ops.gdb_bpt_instr'
#289: FILE: arch/powerpc/kernel/kgdb.c:129:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

WARNING:TYPO_SPELLING: 'processsors' may be misspelled - perhaps 'processors'?
#303: FILE: arch/powerpc/kernel/kgdb.c:143:
+	 * On Book E and perhaps other processsors, singlestep is handled on
 	                               ^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#305: FILE: arch/powerpc/kernel/kgdb.c:145:
+	 * to fail, since it it locates the thread_info by masking off

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: arch/powerpc/kernel/kgdb.c:152:
+	thread_info = (struct thread_info *)(regs->gpr[1] & ~(THREAD_SIZE-1));
 	                                                                 ^

WARNING:SIZEOF_PARENTHESIS: sizeof *thread_info should be sizeof(*thread_info)
#316: FILE: arch/powerpc/kernel/kgdb.c:156:
+		memcpy(exception_thread_info, thread_info, sizeof *thread_info);

WARNING:SIZEOF_PARENTHESIS: sizeof *thread_info should be sizeof(*thread_info)
#321: FILE: arch/powerpc/kernel/kgdb.c:161:
+		memcpy(thread_info, exception_thread_info, sizeof *thread_info);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#346: FILE: arch/powerpc/kernel/kgdb.c:186:
+#define PACK64(ptr, src) do { *(ptr++) = (src); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#346: FILE: arch/powerpc/kernel/kgdb.c:186:
+#define PACK64(ptr, src) do { *(ptr++) = (src); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#348: FILE: arch/powerpc/kernel/kgdb.c:188:
+#define PACK32(ptr, src) do {          \
+	u32 *ptr32;                   \
+	ptr32 = (u32 *)ptr;           \
+	*(ptr32++) = (src);           \
+	ptr = (unsigned long *)ptr32; \
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#355: FILE: arch/powerpc/kernel/kgdb.c:195:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: arch/powerpc/kernel/kgdb.c:225:
+	BUG_ON((unsigned long)ptr >

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#428: FILE: arch/powerpc/kernel/kgdb.c:268:
+	BUG_ON((unsigned long)ptr >

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#432: FILE: arch/powerpc/kernel/kgdb.c:272:
+#define UNPACK64(dest, ptr) do { dest = *(ptr++); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#432: FILE: arch/powerpc/kernel/kgdb.c:272:
+#define UNPACK64(dest, ptr) do { dest = *(ptr++); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#434: FILE: arch/powerpc/kernel/kgdb.c:274:
+#define UNPACK32(dest, ptr) do {       \
+	u32 *ptr32;                   \
+	ptr32 = (u32 *)ptr;           \
+	dest = *(ptr32++);            \
+	ptr = (unsigned long *)ptr32; \
+	} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: arch/powerpc/kernel/kgdb.c:314:
+	BUG_ON((unsigned long)ptr >

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#479: FILE: arch/powerpc/kernel/kgdb.c:319:
+ * This function does PowerPC specific procesing for interfacing to gdb.
                                        ^^^^^^^^^

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#523: FILE: arch/powerpc/kernel/kgdb.c:363:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#637: FILE: include/asm-powerpc/kgdb.h:2:
+ * include/asm-powerpc/kgdb.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#704: FILE: include/asm-powerpc/kgdb.h:35:
+}
+#define CACHE_FLUSH_IS_SAFE	1

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#708: FILE: include/asm-powerpc/kgdb.h:39:
+ * vector state registers. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'fpr' may be misspelled - perhaps 'for'?
#713: FILE: include/asm-powerpc/kgdb.h:43:
+ *   32 gpr, 32 fpr, nip, msr, link, ctr
                 ^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#726: FILE: include/asm-powerpc/kgdb.h:52:
+ * need to store, and add it up. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#728: FILE: include/asm-powerpc/kgdb.h:54:
+#define MAXREG			(PT_FPSCR+1)
               			         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#731: FILE: include/asm-powerpc/kgdb.h:57:
+#define MAXREG                 ((32*2)+6+2+1)
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: include/asm-powerpc/kgdb.h:57:
+#define MAXREG                 ((32*2)+6+2+1)
                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: include/asm-powerpc/kgdb.h:57:
+#define MAXREG                 ((32*2)+6+2+1)
                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: include/asm-powerpc/kgdb.h:57:
+#define MAXREG                 ((32*2)+6+2+1)
                                           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250510.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 17 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250510.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
