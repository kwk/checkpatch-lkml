WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#68: FILE: include/linux/memcontrol.h:41:
+#define PAGE_CGROUP_LOCK_BIT ^I0x0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: include/linux/memcontrol.h:43:
+#define PAGE_CGROUP_LOCK ^I(1 << PAGE_CGROUP_LOCK_BIT)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#70: FILE: include/linux/memcontrol.h:43:
+#define PAGE_CGROUP_LOCK 	(1 << PAGE_CGROUP_LOCK_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#88: FILE: include/linux/memcontrol.h:61:
+};
+#define PAGE_CGROUP_FLAG_CACHE	(0x1)	/* charged as cache */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/memcontrol.h:93:
+extern void page_cgroup_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: include/linux/memcontrol.h:135:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/memcontrol.h:138:
+extern void mem_cgroup_move_lists(struct page *page, bool active);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/memcontrol.h:139:
+extern unsigned long mem_cgroup_isolate_pages(unsigned long nr_to_scan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: include/linux/memcontrol.h:140:
+extern unsigned long mem_cgroup_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/memcontrol.h:145:
+extern void mem_cgroup_out_of_memory(struct mem_cgroup *mem, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/memcontrol.h:148:
+extern struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/linux/memcontrol.h:156:
+extern int mem_cgroup_calc_mapped_ratio(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: include/linux/memcontrol.h:157:
+extern long mem_cgroup_reclaim_imbalance(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/memcontrol.h:159:
+extern int mem_cgroup_get_reclaim_priority(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/linux/memcontrol.h:160:
+extern void mem_cgroup_note_reclaim_priority(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: include/linux/memcontrol.h:161:
+extern void mem_cgroup_note_reclaim_priority(struct mem_cgroup *mem,
+							int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/memcontrol.h:162:
+extern void mem_cgroup_record_reclaim_priority(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: include/linux/memcontrol.h:163:
+extern void mem_cgroup_record_reclaim_priority(struct mem_cgroup *mem,
+							int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/memcontrol.h:165:
+extern long mem_cgroup_calc_reclaim_active(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: include/linux/memcontrol.h:166:
+extern long mem_cgroup_calc_reclaim_active(struct mem_cgroup *mem,
+				struct zone *zone, int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/linux/memcontrol.h:167:
+extern long mem_cgroup_calc_reclaim_inactive(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: include/linux/memcontrol.h:168:
+extern long mem_cgroup_calc_reclaim_inactive(struct mem_cgroup *mem,
+				struct zone *zone, int priority);

CHECK:SPACING: No space is necessary after a cast
#704: FILE: mm/memcontrol.c:847:
+	return (struct page_cgroup *) (page->page_cgroup & ~PAGE_CGROUP_LOCK);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: mm/memcontrol.c:862:
+static int mem_cgroup_charge_common(struct page *page, struct mm_struct *mm,
+				gfp_t gfp_mask, enum charge_type ctype,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pc"
#758: FILE: mm/memcontrol.c:901:
+	if (pc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: mm/memcontrol.c:1012:
+int mem_cgroup_cache_charge(struct page *page, struct mm_struct *mm,
+				gfp_t gfp_mask)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pc->ref_cnt'
#919: FILE: mm/memcontrol.c:1062:
+	if (--(pc->ref_cnt) == 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: mm/memcontrol.c:1113:
+		ret = mem_cgroup_charge_common(newpage, NULL, GFP_KERNEL,
+			ctype, mem);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void page_cgroup_init() should probably be void page_cgroup_init(void)
#984: FILE: mm/memcontrol.c:1127:
+void page_cgroup_init()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000278179.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 26 checks, 914 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000278179.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
