WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
people to use my ASoC driver for Amstrad Delta before an official DSP support

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: arch/arm/plat-omap/dsp/dsp_common.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#100: FILE: arch/arm/plat-omap/dsp/dsp_common.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#101: FILE: arch/arm/plat-omap/dsp/dsp_common.c:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#115: FILE: arch/arm/plat-omap/dsp/dsp_common.c:33:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#146: FILE: arch/arm/plat-omap/dsp/dsp_common.c:64:
+	struct mutex lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#199: FILE: arch/arm/plat-omap/dsp/dsp_common.c:117:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#283: FILE: arch/arm/plat-omap/dsp/dsp_common.c:201:
+#if 0

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#294: FILE: arch/arm/plat-omap/dsp/dsp_common.c:212:
+	udelay(100);	/* to make things stable */

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: arch/arm/plat-omap/dsp/dsp_common.c:234:
+		unsigned char idle_text[CPU_IDLE_TEXT_SIZE] = CPU_IDLE_TEXT_INIT(icrh, icrl);
+		simple_load_code(idle_text, dspbyte_to_virt(idle_boot_base),

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#324: FILE: arch/arm/plat-omap/dsp/dsp_common.c:242:
+	udelay(100);	/* to make things stable */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < GBL_IDLE_TEXT_SIZE'
#333: FILE: arch/arm/plat-omap/dsp/dsp_common.c:251:
+	if ((size < GBL_IDLE_TEXT_SIZE) ||
+	    (size < CPU_IDLE_TEXT_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < CPU_IDLE_TEXT_SIZE'
#333: FILE: arch/arm/plat-omap/dsp/dsp_common.c:251:
+	if ((size < GBL_IDLE_TEXT_SIZE) ||
+	    (size < CPU_IDLE_TEXT_SIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#335: FILE: arch/arm/plat-omap/dsp/dsp_common.c:253:
+		printk(KERN_ERR

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: arch/arm/plat-omap/dsp/dsp_common.c:255:
+		BUG();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#394: FILE: arch/arm/plat-omap/dsp/dsp_common.c:312:
+	if (cpu_is_omap34xx()) {
+		return -ENODEV;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#399: FILE: arch/arm/plat-omap/dsp/dsp_common.c:317:
+		printk(KERN_ERR "omapdsp: unsupported omap architecture.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#406: FILE: arch/arm/plat-omap/dsp/dsp_common.c:324:
+		printk(KERN_ERR "omapdsp: could not acquire dsp_ck handle.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#412: FILE: arch/arm/plat-omap/dsp/dsp_common.c:330:
+		printk(KERN_ERR "omapdsp: could not acquire api_ck handle.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dsp_ck_handle"
#413: FILE: arch/arm/plat-omap/dsp/dsp_common.c:331:
+		if (dsp_ck_handle != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#428: FILE: arch/arm/plat-omap/dsp/dsp_common.c:346:
+		printk(KERN_ERR "omapdsp: could not acquire dsp_fck handle.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#442: FILE: arch/arm/plat-omap/dsp/dsp_common.c:360:
+		printk(KERN_ERR "omapdsp: could not acquire dsp_ick handle.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dsp_fck_handle"
#443: FILE: arch/arm/plat-omap/dsp/dsp_common.c:361:
+		if (dsp_fck_handle != NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'omap_dsp_init', this function's name, in a string
#450: FILE: arch/arm/plat-omap/dsp/dsp_common.c:368:
+	pr_info("omap_dsp_init() done\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#473: FILE: arch/arm/plat-omap/dsp/dsp_common.c:391:
+			udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#477: FILE: arch/arm/plat-omap/dsp/dsp_common.c:395:
+			udelay(10);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.req == CPUSTAT_CPU_IDLE'
#499: FILE: arch/arm/plat-omap/dsp/dsp_common.c:417:
+	if ((cpustat.req == CPUSTAT_CPU_IDLE) ||
+	    (cpustat.usecount.mem > 0) ||
+	    (cpustat.usecount.mem_delayed > 0) ||
+	    ((cpustat.usecount.mpui > 0) && (cpustat.icrmask != 0xffff))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.usecount.mem > 0'
#499: FILE: arch/arm/plat-omap/dsp/dsp_common.c:417:
+	if ((cpustat.req == CPUSTAT_CPU_IDLE) ||
+	    (cpustat.usecount.mem > 0) ||
+	    (cpustat.usecount.mem_delayed > 0) ||
+	    ((cpustat.usecount.mpui > 0) && (cpustat.icrmask != 0xffff))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.usecount.mem_delayed > 0'
#499: FILE: arch/arm/plat-omap/dsp/dsp_common.c:417:
+	if ((cpustat.req == CPUSTAT_CPU_IDLE) ||
+	    (cpustat.usecount.mem > 0) ||
+	    (cpustat.usecount.mem_delayed > 0) ||
+	    ((cpustat.usecount.mpui > 0) && (cpustat.icrmask != 0xffff))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.usecount.mpui > 0'
#499: FILE: arch/arm/plat-omap/dsp/dsp_common.c:417:
+	if ((cpustat.req == CPUSTAT_CPU_IDLE) ||
+	    (cpustat.usecount.mem > 0) ||
+	    (cpustat.usecount.mem_delayed > 0) ||
+	    ((cpustat.usecount.mpui > 0) && (cpustat.icrmask != 0xffff))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.icrmask != 0xffff'
#499: FILE: arch/arm/plat-omap/dsp/dsp_common.c:417:
+	if ((cpustat.req == CPUSTAT_CPU_IDLE) ||
+	    (cpustat.usecount.mem > 0) ||
+	    (cpustat.usecount.mem_delayed > 0) ||
+	    ((cpustat.usecount.mpui > 0) && (cpustat.icrmask != 0xffff))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.req == CPUSTAT_GBL_IDLE'
#514: FILE: arch/arm/plat-omap/dsp/dsp_common.c:432:
+	if ((cpustat.req == CPUSTAT_GBL_IDLE) ||
+	    (cpustat.usecount.mpui > 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.usecount.mpui > 0'
#514: FILE: arch/arm/plat-omap/dsp/dsp_common.c:432:
+	if ((cpustat.req == CPUSTAT_GBL_IDLE) ||
+	    (cpustat.usecount.mpui > 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#576: FILE: arch/arm/plat-omap/dsp/dsp_common.c:494:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#579: FILE: arch/arm/plat-omap/dsp/dsp_common.c:497:
+		       "         cpustat.usecount.mpui is going to be "
+		       "less than zero! ... fixed to be zero.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpustat.usecount.mem_delayed == 0'
#593: FILE: arch/arm/plat-omap/dsp/dsp_common.c:511:
+	if ((cpustat.usecount.mem++ == 0) &&
+	    (cpustat.usecount.mem_delayed == 0)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#596: FILE: arch/arm/plat-omap/dsp/dsp_common.c:514:
+			if ((ret = cpustat.mem_req_cb()) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#635: FILE: arch/arm/plat-omap/dsp/dsp_common.c:553:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#638: FILE: arch/arm/plat-omap/dsp/dsp_common.c:556:
+		       "         cpustat.usecount.mem is going to be "
+		       "less than zero! ... fixed to be zero.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#662: FILE: arch/arm/plat-omap/dsp/dsp_common.c:580:
+	BUG_ON(cpustat.usecount.mem == 0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#683: FILE: arch/arm/plat-omap/dsp/dsp_common.c:601:
+EXPORT_SYMBOL(omap_dsp_release_mpui);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#686: FILE: arch/arm/plat-omap/dsp/dsp_common.c:604:
+EXPORT_SYMBOL(omap_dsp_release_mem);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#693: FILE: arch/arm/plat-omap/dsp/dsp_common.c:611:
+EXPORT_SYMBOL(api_ck_handle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#696: FILE: arch/arm/plat-omap/dsp/dsp_common.c:614:
+EXPORT_SYMBOL(dsp_ick_handle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#699: FILE: arch/arm/plat-omap/dsp/dsp_common.c:617:
+EXPORT_SYMBOL(dspmem_base);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#700: FILE: arch/arm/plat-omap/dsp/dsp_common.c:618:
+EXPORT_SYMBOL(dspmem_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#701: FILE: arch/arm/plat-omap/dsp/dsp_common.c:619:
+EXPORT_SYMBOL(daram_base);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#702: FILE: arch/arm/plat-omap/dsp/dsp_common.c:620:
+EXPORT_SYMBOL(daram_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#703: FILE: arch/arm/plat-omap/dsp/dsp_common.c:621:
+EXPORT_SYMBOL(saram_base);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#704: FILE: arch/arm/plat-omap/dsp/dsp_common.c:622:
+EXPORT_SYMBOL(saram_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#705: FILE: arch/arm/plat-omap/dsp/dsp_common.c:623:
+EXPORT_SYMBOL(dsp_set_rstvect);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#706: FILE: arch/arm/plat-omap/dsp/dsp_common.c:624:
+EXPORT_SYMBOL(dsp_get_rstvect);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#709: FILE: arch/arm/plat-omap/dsp/dsp_common.c:627:
+EXPORT_SYMBOL(dsp_reset_idle_boot_base);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#712: FILE: arch/arm/plat-omap/dsp/dsp_common.c:630:
+EXPORT_SYMBOL(dsp_cpustat_get_stat);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#713: FILE: arch/arm/plat-omap/dsp/dsp_common.c:631:
+EXPORT_SYMBOL(dsp_cpustat_get_icrmask);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#714: FILE: arch/arm/plat-omap/dsp/dsp_common.c:632:
+EXPORT_SYMBOL(dsp_cpustat_set_icrmask);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#715: FILE: arch/arm/plat-omap/dsp/dsp_common.c:633:
+EXPORT_SYMBOL(dsp_register_mem_cb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#716: FILE: arch/arm/plat-omap/dsp/dsp_common.c:634:
+EXPORT_SYMBOL(dsp_unregister_mem_cb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#718: FILE: arch/arm/plat-omap/dsp/dsp_common.c:636:
+EXPORT_SYMBOL(__cpu_flush_kern_tlb_range);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#719: FILE: arch/arm/plat-omap/dsp/dsp_common.c:637:
+EXPORT_SYMBOL(cpu_architecture);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#720: FILE: arch/arm/plat-omap/dsp/dsp_common.c:638:
+EXPORT_SYMBOL(pmd_clear_bad);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#726: FILE: arch/arm/plat-omap/dsp/dsp.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#743: FILE: arch/arm/plat-omap/dsp/dsp.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#744: FILE: arch/arm/plat-omap/dsp/dsp.h:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#756: FILE: arch/arm/plat-omap/dsp/dsp.h:31:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#796: FILE: arch/arm/plat-omap/dsp/dsp.h:71:
+
+

CHECK:SPACING: No space is necessary after a cast
#798: FILE: arch/arm/plat-omap/dsp/dsp.h:73:
+#define DIR_A2D	((__force arm_dsp_dir_t) 1)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#799: FILE: arch/arm/plat-omap/dsp/dsp.h:74:
+#define DIR_D2A	((__force arm_dsp_dir_t) 2)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#818: FILE: arch/arm/plat-omap/dsp/dsp.h:93:
+#define MK32(uw,lw)	(((u32)(uw)) << 16 | (lw))
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#819: FILE: arch/arm/plat-omap/dsp/dsp.h:94:
+#define MKLONG(uw,lw)	(((unsigned long)(uw)) << 16 | (lw))
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#820: FILE: arch/arm/plat-omap/dsp/dsp.h:95:
+#define MKVIRT(uw,lw)	dspword_to_virt(MKLONG((uw), (lw)));
                  ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#820: FILE: arch/arm/plat-omap/dsp/dsp.h:95:
+#define MKVIRT(uw,lw)	dspword_to_virt(MKLONG((uw), (lw)));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#857: FILE: arch/arm/plat-omap/dsp/dsp.h:132:
+extern void dsp_mbox_start(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#858: FILE: arch/arm/plat-omap/dsp/dsp.h:133:
+extern void dsp_mbox_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#859: FILE: arch/arm/plat-omap/dsp/dsp.h:134:
+extern int dsp_mbox_config(void *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#860: FILE: arch/arm/plat-omap/dsp/dsp.h:135:
+extern int sync_with_dsp(u16 *syncwd, u16 tid, int try_cnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#861: FILE: arch/arm/plat-omap/dsp/dsp.h:136:
+extern int __dsp_mbcmd_send_exarg(struct mbcmd *mb, struct mb_exarg *arg,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#865: FILE: arch/arm/plat-omap/dsp/dsp.h:140:
+extern int dsp_mbcmd_send_and_wait_exarg(struct mbcmd *mb, struct mb_exarg *arg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: arch/arm/plat-omap/dsp/dsp.h:146:
+static inline int __mbcompose_send_exarg(u8 cmd_h, u8 cmd_l, u16 data,
+					     struct mb_exarg *arg,

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: arch/arm/plat-omap/dsp/dsp.h:150:
+	struct mbcmd mb = MBCMD_INIT(cmd_h, cmd_l, data);
+	return __dsp_mbcmd_send_exarg(&mb, arg, recovery_flag);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#877: FILE: arch/arm/plat-omap/dsp/dsp.h:152:
+}
+#define mbcompose_send(cmd_h, cmd_l, data) \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: arch/arm/plat-omap/dsp/dsp.h:160:
+static inline int __mbcompose_send_and_wait_exarg(u8 cmd_h, u8 cmd_l,
+						      u16 data,

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: arch/arm/plat-omap/dsp/dsp.h:165:
+	struct mbcmd mb = MBCMD_INIT(cmd_h, cmd_l, data);
+	return dsp_mbcmd_send_and_wait_exarg(&mb, arg, q);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#892: FILE: arch/arm/plat-omap/dsp/dsp.h:167:
+}
+#define mbcompose_send_and_wait(cmd_h, cmd_l, data, q) \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#899: FILE: arch/arm/plat-omap/dsp/dsp.h:174:
+extern struct ipbuf_head *bid_to_ipbuf(u16 bid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#900: FILE: arch/arm/plat-omap/dsp/dsp.h:175:
+extern void ipbuf_start(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#901: FILE: arch/arm/plat-omap/dsp/dsp.h:176:
+extern void ipbuf_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#902: FILE: arch/arm/plat-omap/dsp/dsp.h:177:
+extern int ipbuf_config(u16 ln, u16 lsz, void *base);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#903: FILE: arch/arm/plat-omap/dsp/dsp.h:178:
+extern int ipbuf_sys_config(void *p, arm_dsp_dir_t dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#904: FILE: arch/arm/plat-omap/dsp/dsp.h:179:
+extern int ipbuf_p_validate(void *p, arm_dsp_dir_t dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: arch/arm/plat-omap/dsp/dsp.h:180:
+extern struct ipbuf_head *get_free_ipbuf(u8 tid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#906: FILE: arch/arm/plat-omap/dsp/dsp.h:181:
+extern void release_ipbuf(struct ipbuf_head *ipb_h);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#907: FILE: arch/arm/plat-omap/dsp/dsp.h:182:
+extern void balance_ipbuf(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#908: FILE: arch/arm/plat-omap/dsp/dsp.h:183:
+extern void unuse_ipbuf(struct ipbuf_head *ipb_h);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#909: FILE: arch/arm/plat-omap/dsp/dsp.h:184:
+extern void unuse_ipbuf_nowait(struct ipbuf_head *ipb_h);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#911: FILE: arch/arm/plat-omap/dsp/dsp.h:186:
+#define release_ipbuf_pvt(ipbuf_pvt) \
+	do { \
+		(ipbuf_pvt)->s = TID_FREE; \
+	} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#914: FILE: arch/arm/plat-omap/dsp/dsp.h:189:
+	} while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#918: FILE: arch/arm/plat-omap/dsp/dsp.h:193:
+extern int dsp_cfgstat_request(enum cfgstat_e st);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#919: FILE: arch/arm/plat-omap/dsp/dsp.h:194:
+extern enum cfgstat_e dsp_cfgstat_get_stat(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#920: FILE: arch/arm/plat-omap/dsp/dsp.h:195:
+extern int dsp_set_runlevel(u8 level);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#922: FILE: arch/arm/plat-omap/dsp/dsp.h:197:
+extern int dsp_task_config_all(u8 n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: arch/arm/plat-omap/dsp/dsp.h:198:
+extern void dsp_task_unconfig_all(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#924: FILE: arch/arm/plat-omap/dsp/dsp.h:199:
+extern u8 dsp_task_count(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#925: FILE: arch/arm/plat-omap/dsp/dsp.h:200:
+extern int dsp_taskmod_busy(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#926: FILE: arch/arm/plat-omap/dsp/dsp.h:201:
+extern int dsp_mkdev(char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#927: FILE: arch/arm/plat-omap/dsp/dsp.h:202:
+extern int dsp_rmdev(char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#928: FILE: arch/arm/plat-omap/dsp/dsp.h:203:
+extern int dsp_tadd_minor(unsigned char minor, dsp_long_t adr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#929: FILE: arch/arm/plat-omap/dsp/dsp.h:204:
+extern int dsp_tdel_minor(unsigned char minor);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#930: FILE: arch/arm/plat-omap/dsp/dsp.h:205:
+extern int dsp_tkill_minor(unsigned char minor);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#931: FILE: arch/arm/plat-omap/dsp/dsp.h:206:
+extern long taskdev_state_stale(unsigned char minor);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#932: FILE: arch/arm/plat-omap/dsp/dsp.h:207:
+extern int dsp_dbg_config(u16 *buf, u16 sz, u16 lsz);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#933: FILE: arch/arm/plat-omap/dsp/dsp.h:208:
+extern void dsp_dbg_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#935: FILE: arch/arm/plat-omap/dsp/dsp.h:210:
+extern int ipbuf_is_held(u8 tid, u16 bid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#937: FILE: arch/arm/plat-omap/dsp/dsp.h:212:
+extern int dsp_mem_sync_inc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: arch/arm/plat-omap/dsp/dsp.h:213:
+extern int dsp_mem_sync_config(struct mem_sync_struct *sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: arch/arm/plat-omap/dsp/dsp.h:214:
+extern enum dsp_mem_type_e dsp_mem_type(void *vadr, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#940: FILE: arch/arm/plat-omap/dsp/dsp.h:215:
+extern int dsp_address_validate(void *p, size_t len, char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#942: FILE: arch/arm/plat-omap/dsp/dsp.h:217:
+extern void dsp_mem_usecount_clear(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#944: FILE: arch/arm/plat-omap/dsp/dsp.h:219:
+extern void exmap_use(void *vadr, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#945: FILE: arch/arm/plat-omap/dsp/dsp.h:220:
+extern void exmap_unuse(void *vadr, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#946: FILE: arch/arm/plat-omap/dsp/dsp.h:221:
+extern unsigned long dsp_virt_to_phys(void *vadr, size_t *len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#947: FILE: arch/arm/plat-omap/dsp/dsp.h:222:
+extern void dsp_mem_start(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#948: FILE: arch/arm/plat-omap/dsp/dsp.h:223:
+extern void dsp_mem_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#950: FILE: arch/arm/plat-omap/dsp/dsp.h:225:
+extern void dsp_twch_start(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#951: FILE: arch/arm/plat-omap/dsp/dsp.h:226:
+extern void dsp_twch_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#952: FILE: arch/arm/plat-omap/dsp/dsp.h:227:
+extern void dsp_twch_touch(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: arch/arm/plat-omap/dsp/dsp.h:229:
+extern void dsp_err_start(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#955: FILE: arch/arm/plat-omap/dsp/dsp.h:230:
+extern void dsp_err_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: arch/arm/plat-omap/dsp/dsp.h:231:
+extern void dsp_err_set(enum errcode_e code, unsigned long arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#957: FILE: arch/arm/plat-omap/dsp/dsp.h:232:
+extern void dsp_err_clear(enum errcode_e code);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#958: FILE: arch/arm/plat-omap/dsp/dsp.h:233:
+extern int dsp_err_isset(enum errcode_e code);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: arch/arm/plat-omap/dsp/dsp.h:250:
+extern char *subcmd_name(struct mbcmd *mb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#977: FILE: arch/arm/plat-omap/dsp/dsp.h:252:
+extern void mblog_add(struct mbcmd *mb, arm_dsp_dir_t dir);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#986: FILE: arch/arm/plat-omap/dsp/dsp.h:261:
+#define omap_set_bit_regw(b,r) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#986: FILE: arch/arm/plat-omap/dsp/dsp.h:261:
+#define omap_set_bit_regw(b,r) \
+	do { omap_writew(omap_readw(r) | (b), (r)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#986: FILE: arch/arm/plat-omap/dsp/dsp.h:261:
+#define omap_set_bit_regw(b,r) \
+	do { omap_writew(omap_readw(r) | (b), (r)); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#987: FILE: arch/arm/plat-omap/dsp/dsp.h:262:
+	do { omap_writew(omap_readw(r) | (b), (r)); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#988: FILE: arch/arm/plat-omap/dsp/dsp.h:263:
+#define omap_clr_bit_regw(b,r) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#988: FILE: arch/arm/plat-omap/dsp/dsp.h:263:
+#define omap_clr_bit_regw(b,r) \
+	do { omap_writew(omap_readw(r) & ~(b), (r)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#988: FILE: arch/arm/plat-omap/dsp/dsp.h:263:
+#define omap_clr_bit_regw(b,r) \
+	do { omap_writew(omap_readw(r) & ~(b), (r)); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#989: FILE: arch/arm/plat-omap/dsp/dsp.h:264:
+	do { omap_writew(omap_readw(r) & ~(b), (r)); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#990: FILE: arch/arm/plat-omap/dsp/dsp.h:265:
+#define omap_set_bit_regl(b,r) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#990: FILE: arch/arm/plat-omap/dsp/dsp.h:265:
+#define omap_set_bit_regl(b,r) \
+	do { omap_writel(omap_readl(r) | (b), (r)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#990: FILE: arch/arm/plat-omap/dsp/dsp.h:265:
+#define omap_set_bit_regl(b,r) \
+	do { omap_writel(omap_readl(r) | (b), (r)); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#991: FILE: arch/arm/plat-omap/dsp/dsp.h:266:
+	do { omap_writel(omap_readl(r) | (b), (r)); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#992: FILE: arch/arm/plat-omap/dsp/dsp.h:267:
+#define omap_clr_bit_regl(b,r) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#992: FILE: arch/arm/plat-omap/dsp/dsp.h:267:
+#define omap_clr_bit_regl(b,r) \
+	do { omap_writel(omap_readl(r) & ~(b), (r)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#992: FILE: arch/arm/plat-omap/dsp/dsp.h:267:
+#define omap_clr_bit_regl(b,r) \
+	do { omap_writel(omap_readl(r) & ~(b), (r)); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#993: FILE: arch/arm/plat-omap/dsp/dsp.h:268:
+	do { omap_writel(omap_readl(r) & ~(b), (r)); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#994: FILE: arch/arm/plat-omap/dsp/dsp.h:269:
+#define omap_set_bits_regl(val,mask,r) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#994: FILE: arch/arm/plat-omap/dsp/dsp.h:269:
+#define omap_set_bits_regl(val,mask,r) \
                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#994: FILE: arch/arm/plat-omap/dsp/dsp.h:269:
+#define omap_set_bits_regl(val,mask,r) \
+	do { omap_writel((omap_readl(r) & ~(mask)) | (val), (r)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#994: FILE: arch/arm/plat-omap/dsp/dsp.h:269:
+#define omap_set_bits_regl(val,mask,r) \
+	do { omap_writel((omap_readl(r) & ~(mask)) | (val), (r)); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#995: FILE: arch/arm/plat-omap/dsp/dsp.h:270:
+	do { omap_writel((omap_readl(r) & ~(mask)) | (val), (r)); } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'va' - possible side-effects?
#1003: FILE: arch/arm/plat-omap/dsp/dsp.h:278:
+#define is_dsp_internal_mem(va) \
+	(((unsigned long)(va) >= dspmem_base) &&  \
+	 ((unsigned long)(va) < dspmem_base + dspmem_size))

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1033: FILE: arch/arm/plat-omap/dsp/dsp.h:308:
+#define tc_wordswap() \
+	do { \
+		omap_writel(TC_ENDIANISM_SWAP_WORD | TC_ENDIANISM_EN, \
+			    TC_ENDIANISM); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1037: FILE: arch/arm/plat-omap/dsp/dsp.h:312:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1056: FILE: arch/arm/plat-omap/dsp/dsp.h:331:
+#define __dsp_core_enable() \
+	do { prm_write_mod_reg(prm_read_mod_reg(OMAP24XX_DSP_MOD, RM_RSTCTRL) \
+	     & ~OMAP24XX_RST1_DSP, OMAP24XX_DSP_MOD, RM_RSTCTRL); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1059: FILE: arch/arm/plat-omap/dsp/dsp.h:334:
+#define __dsp_core_disable() \
+	do { prm_write_mod_reg(prm_read_mod_reg(OMAP24XX_DSP_MOD, RM_RSTCTRL) \
+	     | OMAP24XX_RST1_DSP, OMAP24XX_DSP_MOD, RM_RSTCTRL); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1062: FILE: arch/arm/plat-omap/dsp/dsp.h:337:
+#define __dsp_per_enable() \
+	do { prm_write_mod_reg(prm_read_mod_reg(OMAP24XX_DSP_MOD, RM_RSTCTRL) \
+	     & ~OMAP24XX_RST2_DSP, OMAP24XX_DSP_MOD, RM_RSTCTRL); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1065: FILE: arch/arm/plat-omap/dsp/dsp.h:340:
+#define __dsp_per_disable() \
+	do { prm_write_mod_reg(prm_read_mod_reg(OMAP24XX_DSP_MOD, RM_RSTCTRL) \
+	     | OMAP24XX_RST2_DSP, OMAP24XX_DSP_MOD, RM_RSTCTRL); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#1106: FILE: arch/arm/plat-omap/dsp/dsp.h:381:
+#define command_dvfs_stop(m) \
+	(((m)->cmd_l == KFUNC_POWER) && ((m)->data == DVFS_STOP))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#1108: FILE: arch/arm/plat-omap/dsp/dsp.h:383:
+#define command_dvfs_start(m) \
+	(((m)->cmd_l == KFUNC_POWER) && ((m)->data == DVFS_START))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1114: FILE: arch/arm/plat-omap/dsp/dsp.h:389:
+extern int dsp_late_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1121: FILE: arch/arm/plat-omap/dsp/hardware_dsp.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1138: FILE: arch/arm/plat-omap/dsp/hardware_dsp.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1139: FILE: arch/arm/plat-omap/dsp/hardware_dsp.h:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1159: FILE: arch/arm/plat-omap/dsp/mmu.h:1:
+#ifndef __PLAT_OMAP_DSP_MMU_H

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1223: FILE: arch/arm/plat-omap/dsp/mmu.h:65:
+#define set_emiff_dma_prio(prio) \
+	do { \
+		omap_writel((omap_readl(OMAP_TC_OCPT1_PRIOR) & \
+			     ~EMIF_PRIO_DMA_MASK) | \
+			    ((prio) << EMIF_PRIO_DMA_SHIFT), \
+			    OMAP_TC_OCPT1_PRIOR); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1229: FILE: arch/arm/plat-omap/dsp/mmu.h:71:
+	} while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1241: FILE: arch/arm/plat-omap/dsp/mmu.h:83:
+		printk(KERN_ERR "omapdsp: DSP MMU error has not been set.\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1244: FILE: arch/arm/plat-omap/dsp/mmu.h:86:
+	dspadr = dsp_mmu.fault_address & ~(SZ_4K-1);
 	                                        ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1250: FILE: arch/arm/plat-omap/dsp/mmu.h:92:
+	udelay(100);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1272: FILE: arch/arm/plat-omap/dsp/mmu.h:114:
+static void intmem_disable(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1286: FILE: arch/arm/plat-omap/dsp/mmu.h:128:
+	int i, dspmem_pg_count;
+	dspmem_pg_count = dspmem_size >> 12;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1303: FILE: arch/arm/plat-omap/include/mach/mmu.h:1:
+#ifndef __ARCH_OMAP_MMU_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1326: FILE: arch/arm/plat-omap/include/mach/mmu.h:24:
+				 * i.e. 0xc0000000 - */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1328: FILE: arch/arm/plat-omap/include/mach/mmu.h:26:
+				 * i.e. 0xe0000000 - 0xe0ffffff */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1366: FILE: arch/arm/plat-omap/include/mach/mmu.h:64:
+extern void omap_mmu_itack(struct omap_mmu *mmu);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1379: FILE: arch/arm/plat-omap/include/mach/mmu.h:77:
+	void (*read_tlb)(struct omap_mmu *, struct cam_ram_regset *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cam_ram_regset *' should also have an identifier name
#1379: FILE: arch/arm/plat-omap/include/mach/mmu.h:77:
+	void (*read_tlb)(struct omap_mmu *, struct cam_ram_regset *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1380: FILE: arch/arm/plat-omap/include/mach/mmu.h:78:
+	void (*load_tlb)(struct omap_mmu *, struct cam_ram_regset *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cam_ram_regset *' should also have an identifier name
#1380: FILE: arch/arm/plat-omap/include/mach/mmu.h:78:
+	void (*load_tlb)(struct omap_mmu *, struct cam_ram_regset *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1381: FILE: arch/arm/plat-omap/include/mach/mmu.h:79:
+	ssize_t (*show)(struct omap_mmu *, char *, struct omap_mmu_tlb_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1381: FILE: arch/arm/plat-omap/include/mach/mmu.h:79:
+	ssize_t (*show)(struct omap_mmu *, char *, struct omap_mmu_tlb_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu_tlb_lock *' should also have an identifier name
#1381: FILE: arch/arm/plat-omap/include/mach/mmu.h:79:
+	ssize_t (*show)(struct omap_mmu *, char *, struct omap_mmu_tlb_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1384: FILE: arch/arm/plat-omap/include/mach/mmu.h:82:
+	struct cam_ram_regset *(*cam_ram_alloc)(struct omap_mmu *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu_tlb_entry *' should also have an identifier name
#1384: FILE: arch/arm/plat-omap/include/mach/mmu.h:82:
+	struct cam_ram_regset *(*cam_ram_alloc)(struct omap_mmu *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cam_ram_regset *' should also have an identifier name
#1386: FILE: arch/arm/plat-omap/include/mach/mmu.h:84:
+	int (*cam_ram_valid)(struct cam_ram_regset *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cam_ram_regset *' should also have an identifier name
#1387: FILE: arch/arm/plat-omap/include/mach/mmu.h:85:
+	unsigned long (*cam_va)(struct cam_ram_regset *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1390: FILE: arch/arm/plat-omap/include/mach/mmu.h:88:
+	int (*mem_enable)(struct omap_mmu *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1390: FILE: arch/arm/plat-omap/include/mach/mmu.h:88:
+	int (*mem_enable)(struct omap_mmu *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1391: FILE: arch/arm/plat-omap/include/mach/mmu.h:89:
+	int (*mem_disable)(struct omap_mmu *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1391: FILE: arch/arm/plat-omap/include/mach/mmu.h:89:
+	int (*mem_disable)(struct omap_mmu *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1393: FILE: arch/arm/plat-omap/include/mach/mmu.h:91:
+	void (*interrupt)(struct omap_mmu *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu_tlb_entry *' should also have an identifier name
#1396: FILE: arch/arm/plat-omap/include/mach/mmu.h:94:
+	pgprot_t (*pte_get_attr)(struct omap_mmu_tlb_entry *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mmu' - possible side-effects?
#1430: FILE: arch/arm/plat-omap/include/mach/mmu.h:128:
+#define omap_mmu_internal_memory(mmu, addr)					\
+	(likely(mmu->membase) && (((unsigned long)(addr) >= mmu->membase) &&	\
+		 ((unsigned long)(addr) < mmu->membase + mmu->memsize)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mmu' may be better as '(mmu)' to avoid precedence issues
#1430: FILE: arch/arm/plat-omap/include/mach/mmu.h:128:
+#define omap_mmu_internal_memory(mmu, addr)					\
+	(likely(mmu->membase) && (((unsigned long)(addr) >= mmu->membase) &&	\
+		 ((unsigned long)(addr) < mmu->membase + mmu->memsize)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1430: FILE: arch/arm/plat-omap/include/mach/mmu.h:128:
+#define omap_mmu_internal_memory(mmu, addr)					\
+	(likely(mmu->membase) && (((unsigned long)(addr) >= mmu->membase) &&	\
+		 ((unsigned long)(addr) < mmu->membase + mmu->memsize)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ent' - possible side-effects?
#1434: FILE: arch/arm/plat-omap/include/mach/mmu.h:132:
+#define INIT_EXMAP_TBL_ENTRY(ent, b, v, typ, od)	\
+do {						\
+	(ent)->buf		= (b);		\
+	(ent)->vadr		= (v);		\
+	(ent)->valid		= 1;		\
+	(ent)->prsvd		= 0;		\
+	(ent)->usecount		= 0;		\
+	(ent)->type		= (typ);	\
+	(ent)->order		= (od);		\
+	(ent)->link.next	= -1;		\
+	(ent)->link.prev	= -1;		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ent' - possible side-effects?
#1447: FILE: arch/arm/plat-omap/include/mach/mmu.h:145:
+#define INIT_EXMAP_TBL_ENTRY_4KB_PRESERVED(ent, b, v)	\
+do {							\
+	(ent)->buf		= (b);			\
+	(ent)->vadr		= (v);			\
+	(ent)->valid		= 1;			\
+	(ent)->prsvd		= 1;			\
+	(ent)->usecount		= 0;			\
+	(ent)->type		= EXMAP_TYPE_MEM;	\
+	(ent)->order		= 0;			\
+	(ent)->link.next	= -1;			\
+	(ent)->link.prev	= -1;			\
+} while (0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1477: FILE: arch/arm/plat-omap/include/mach/mmu.h:175:
+int omap_mmu_load_tlb_entry(struct omap_mmu *, struct omap_mmu_tlb_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu_tlb_entry *' should also have an identifier name
#1477: FILE: arch/arm/plat-omap/include/mach/mmu.h:175:
+int omap_mmu_load_tlb_entry(struct omap_mmu *, struct omap_mmu_tlb_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct omap_mmu *' should also have an identifier name
#1478: FILE: arch/arm/plat-omap/include/mach/mmu.h:176:
+int omap_mmu_clear_tlb_entry(struct omap_mmu *, unsigned long vadr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bin_attribute *' should also have an identifier name
#1508: FILE: arch/arm/plat-omap/include/mach/mmu.h:206:
+ssize_t __omap_mmu_mem_read(struct omap_mmu *mmu, struct bin_attribute *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bin_attribute *' should also have an identifier name
#1510: FILE: arch/arm/plat-omap/include/mach/mmu.h:208:
+ssize_t __omap_mmu_mem_write(struct omap_mmu *mmu, struct bin_attribute *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1511: FILE: arch/arm/plat-omap/include/mach/mmu.h:209:
+ssize_t __omap_mmu_mem_write(struct omap_mmu *mmu, struct bin_attribute *,
+			    char *buf, loff_t offset, size_t count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1518: FILE: arch/arm/mach-omap1/mmu.h:1:
+#ifndef __MACH_OMAP1_MMU_H

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ent' - possible side-effects?
#1596: FILE: arch/arm/mach-omap1/mmu.h:79:
+#define INIT_TLB_ENTRY(ent, v, p, ps)			\
+do {							\
+	(ent)->va	= (v);				\
+	(ent)->pa	= (p);				\
+	(ent)->pgsz	= (ps);				\
+	(ent)->prsvd	= 0;				\
+	(ent)->ap	= OMAP_MMU_RAM_L_AP_FA;		\
+	(ent)->tlb	= 1;				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ent' - possible side-effects?
#1606: FILE: arch/arm/mach-omap1/mmu.h:89:
+#define INIT_TLB_ENTRY_4KB_PRESERVED(ent, v, p)	\
+do {							\
+	(ent)->va	= (v);				\
+	(ent)->pa	= (p);				\
+	(ent)->pgsz	= OMAP_MMU_CAM_PAGESIZE_4KB;	\
+	(ent)->prsvd	= OMAP_MMU_CAM_P;		\
+	(ent)->ap	= OMAP_MMU_RAM_L_AP_FA;		\
+} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1631: FILE: arch/arm/mach-omap1/mmu.h:114:
+static inline void omap_mmu_write_reg(struct omap_mmu *mmu,
+			       unsigned short val, unsigned long reg)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1641: FILE: arch/arm/plat-omap/dsp/omap1_dsp.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1658: FILE: arch/arm/plat-omap/dsp/omap1_dsp.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1659: FILE: arch/arm/plat-omap/dsp/omap1_dsp.h:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA$

WARNING:TYPO_SPELLING: 'internel' may be misspelled - perhaps 'internal'?
#1728: FILE: arch/arm/plat-omap/dsp/omap1_dsp.h:88:
+ *   internel:      branch 0x024000
      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093968.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 88 warnings, 100 checks, 1667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093968.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
