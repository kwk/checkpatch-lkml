WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
private data.  Also fixes a procfs file_system_type leak for every attempted   

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sb->s_op != &hppfs_sbops'
#93: FILE: fs/hppfs/hppfs_kern.c:57:
+	if ((sb->s_op != &hppfs_sbops) || (dentry->d_parent != sb->s_root))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_parent != sb->s_root'
#93: FILE: fs/hppfs/hppfs_kern.c:57:
+	if ((sb->s_op != &hppfs_sbops) || (dentry->d_parent != sb->s_root))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#124: FILE: fs/hppfs/hppfs_kern.c:86:
+	if (name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file"
#154: FILE: fs/hppfs/hppfs_kern.c:116:
+	if (file != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host_file"
#161: FILE: fs/hppfs/hppfs_kern.c:120:
+	if (host_file == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#162: FILE: fs/hppfs/hppfs_kern.c:121:
+		printk(KERN_ERR "file_removed : allocation failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file"
#167: FILE: fs/hppfs/hppfs_kern.c:125:
+	if (file != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_dentry"
#190: FILE: fs/hppfs/hppfs_kern.c:144:
+	if (HPPFS_I(ino)->proc_dentry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_dentry"
#212: FILE: fs/hppfs/hppfs_kern.c:191:
+	if (proc_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_dentry"
#215: FILE: fs/hppfs/hppfs_kern.c:193:
+		if (proc_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_buf"
#289: FILE: fs/hppfs/hppfs_kern.c:264:
+	if (new_buf == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#290: FILE: fs/hppfs/hppfs_kern.c:265:
+		printk(KERN_ERR "hppfs_read_file : kmalloc failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_read_file', this function's name, in a string
#290: FILE: fs/hppfs/hppfs_kern.c:265:
+		printk(KERN_ERR "hppfs_read_file : kmalloc failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#301: FILE: fs/hppfs/hppfs_kern.c:272:
+		if (err < 0) {
[...]
-		}
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#302: FILE: fs/hppfs/hppfs_kern.c:273:
+			printk(KERN_ERR "hppfs_read : read failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#303: FILE: fs/hppfs/hppfs_kern.c:274:
+			printk(KERN_ERR "hppfs_read : read failed, "
+			       "errno = %d\n", err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#322: FILE: fs/hppfs/hppfs_kern.c:301:
+	if (hppfs->contents != NULL) {
[...]
 		copy_to_user(buf, &data->contents[off], count);
[...]
+			       "errno = %d\n", err);
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hppfs->contents"
#322: FILE: fs/hppfs/hppfs_kern.c:301:
+	if (hppfs->contents != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#348: FILE: fs/hppfs/hppfs_kern.c:320:
+			printk(KERN_ERR "hppfs_read : seek failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_read', this function's name, in a string
#348: FILE: fs/hppfs/hppfs_kern.c:320:
+			printk(KERN_ERR "hppfs_read : seek failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#349: FILE: fs/hppfs/hppfs_kern.c:321:
+			printk(KERN_ERR "hppfs_read : seek failed, "
+			       "errno = %d\n", err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#395: FILE: fs/hppfs/hppfs_kern.c:373:
+	if (head == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#409: FILE: fs/hppfs/hppfs_kern.c:393:
+	if (data == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#410: FILE: fs/hppfs/hppfs_kern.c:394:
+		printk(KERN_ERR "hppfs_get_data : head allocation failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: fs/hppfs/hppfs_kern.c:405:
+		while ((n = read_proc(proc_file, data->contents,
 				     sizeof(data->contents), NULL, 0)) > 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#428: FILE: fs/hppfs/hppfs_kern.c:409:
+			printk(KERN_ERR "hppfs_get_data : failed to shut down "

CHECK:BRACES: braces {} should be used on all arms of this statement
#437: FILE: fs/hppfs/hppfs_kern.c:416:
+		if (n < 0) {
[...]
+			       "errno = %d\n", err);
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#441: FILE: fs/hppfs/hppfs_kern.c:418:
+			printk(KERN_ERR "hppfs_get_data : read failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#442: FILE: fs/hppfs/hppfs_kern.c:419:
+			printk(KERN_ERR "hppfs_get_data : read failed, "
+			       "errno = %d\n", err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#459: FILE: fs/hppfs/hppfs_kern.c:431:
+			printk(KERN_ERR "hppfs_get_data : data allocation "

WARNING:SPLIT_STRING: quoted string split across lines
#460: FILE: fs/hppfs/hppfs_kern.c:432:
+			printk(KERN_ERR "hppfs_get_data : data allocation "
+			       "failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#485: FILE: fs/hppfs/hppfs_kern.c:454:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#524: FILE: fs/hppfs/hppfs_kern.c:484:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host_file"
#529: FILE: fs/hppfs/hppfs_kern.c:488:
+	if (host_file == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#554: FILE: fs/hppfs/hppfs_kern.c:507:
+			printk(KERN_ERR "hppfs_open : failed to open '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#555: FILE: fs/hppfs/hppfs_kern.c:508:
+			printk(KERN_ERR "hppfs_open : failed to open '%s', "
+			       "errno = %d\n", host_file, -fd);

CHECK:BRACES: Unbalanced braces around else statement
#573: FILE: fs/hppfs/hppfs_kern.c:519:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#574: FILE: fs/hppfs/hppfs_kern.c:520:
+			printk(KERN_ERR "hppfs_open : failed to open a socket "

WARNING:SPLIT_STRING: quoted string split across lines
#575: FILE: fs/hppfs/hppfs_kern.c:521:
+			printk(KERN_ERR "hppfs_open : failed to open a socket "
+			       "in '%s', errno = %d\n", host_file, -fd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#603: FILE: fs/hppfs/hppfs_kern.c:546:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "llseek"
#633: FILE: fs/hppfs/hppfs_kern.c:574:
+	if (llseek != NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#667: FILE: fs/hppfs/hppfs_kern.c:617:
+^I^I^I^I^I.dentry  ^I= file->f_path.dentry$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: fs/hppfs/hppfs_kern.c:743:
+static int init_inode(struct inode *inode, struct dentry *dentry,
+		struct vfsmount *mnt)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324363.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 24 checks, 788 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324363.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
