CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/hardirq.h:124:
+extern void rcu_nmi_enter(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/hardirq.h:125:
+extern void rcu_nmi_exit(void);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#266: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: include/linux/rcutree.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#285: FILE: include/linux/rcutree.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#286: FILE: include/linux/rcutree.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#297: FILE: include/linux/rcutree.h:27:
+ * ^IDocumentation/RCU$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#327: FILE: include/linux/rcutree.h:57:
+#elif (NR_CPUS) <= RCU_FANOUT_SQ

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#333: FILE: include/linux/rcutree.h:63:
+#elif (NR_CPUS) <= RCU_FANOUT_CUBE

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#361: FILE: include/linux/rcutree.h:91:
+	spinlock_t lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: include/linux/rcutree.h:148:
+^Ilong^I^Iqlen; ^I ^I/* # of queued callbacks */$

WARNING:TYPO_SPELLING: 'struc' may be misspelled - perhaps 'struct'?
#441: FILE: include/linux/rcutree.h:171:
+/* Values for signaled field in struc rcu_data. */
                                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: include/linux/rcutree.h:245:
+	struct rcu_data *rdp = &per_cpu(rcu_data, cpu);
+	rdp->passed_quiesc = 1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#518: FILE: include/linux/rcutree.h:248:
+}
+static inline void rcu_bh_qsctr_inc(int cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: include/linux/rcutree.h:251:
+	struct rcu_data *rdp = &per_cpu(rcu_bh_data, cpu);
+	rdp->passed_quiesc = 1;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#525: FILE: include/linux/rcutree.h:255:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/linux/rcutree.h:256:
+extern int rcu_needs_cpu(int cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#544: FILE: include/linux/rcutree.h:274:
+}
+static inline void __rcu_read_unlock(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#550: FILE: include/linux/rcutree.h:280:
+}
+static inline void __rcu_read_lock_bh(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#556: FILE: include/linux/rcutree.h:286:
+}
+static inline void __rcu_read_unlock_bh(void)

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#565: FILE: include/linux/rcutree.h:295:
+#define call_rcu_sched(head, func) call_rcu(head, func)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#571: FILE: include/linux/rcutree.h:301:
+extern void __rcu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: include/linux/rcutree.h:302:
+extern void rcu_check_callbacks(int cpu, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#573: FILE: include/linux/rcutree.h:303:
+extern void rcu_restart_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#575: FILE: include/linux/rcutree.h:305:
+extern long rcu_batches_completed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#576: FILE: include/linux/rcutree.h:306:
+extern long rcu_batches_completed_bh(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#585: FILE: include/linux/rcutree.h:315:
+}
+static inline void rcu_exit_nohz(void)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#622: FILE: kernel/Kconfig.preempt:55:
+choice
+	prompt "RCU Implementation"
+	default CLASSIC_RCU
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: kernel/Kconfig.preempt:65:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#635: FILE: kernel/Kconfig.preempt:68:
+config TREE_RCU
+	bool "Tree-based hierarchical RCU"
+	help
+	  This option selects the RCU implementation that is
+	  designed for very large SMP system with hundreds or
+	  thousands of CPUs.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#667: FILE: kernel/Kconfig.preempt:98:
+config PREEMPT_RCU_TRACE
+	bool "Enable tracing for preemptable RCU"
 	depends on PREEMPT_RCU
 	help
 	help
 	help
 	  This option provides tracing in RCU which presents stats
 	  in debugfs for debugging RCU implementation.
 
 	  Say Y here if you want to enable RCU tracing
 	  Say N if you are unsure.
+

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#668: FILE: kernel/Kconfig.preempt:99:
+	bool "Enable tracing for preemptable RCU"
 	                         ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: kernel/Kconfig.preempt:139:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#756: FILE: kernel/rcutree.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#770: FILE: kernel/rcutree.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#771: FILE: kernel/rcutree.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#783: FILE: kernel/rcutree.c:28:
+ * ^IDocumentation/RCU$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#793: FILE: kernel/rcutree.c:38:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#813: FILE: kernel/rcutree.c:58:
+#define RCU_STATE_INITIALIZER(name) { \
+	.level = { &name.node[0] }, \
+	.levelcnt = { \
+		NUM_RCU_LVL_0,  /* root of hierarchy. */ \
+		NUM_RCU_LVL_1, \
+		NUM_RCU_LVL_2, \
+		NUM_RCU_LVL_3, /* == MAX_RCU_LVLS */ \
+	}, \
+	.signaled = RCU_SIGNAL_INIT, \
+	.gpnum = -300, \
+	.completed = -300, \
+	.onofflock = __SPIN_LOCK_UNLOCKED(&name.onofflock), \
+	.fqslock = __SPIN_LOCK_UNLOCKED(&name.fqslock), \
+	.n_force_qs = 0, \
+	.n_force_qs_ngp = 0, \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#813: FILE: kernel/rcutree.c:58:
+#define RCU_STATE_INITIALIZER(name) { \
+	.level = { &name.node[0] }, \
+	.levelcnt = { \
+		NUM_RCU_LVL_0,  /* root of hierarchy. */ \
+		NUM_RCU_LVL_1, \
+		NUM_RCU_LVL_2, \
+		NUM_RCU_LVL_3, /* == MAX_RCU_LVLS */ \
+	}, \
+	.signaled = RCU_SIGNAL_INIT, \
+	.gpnum = -300, \
+	.completed = -300, \
+	.onofflock = __SPIN_LOCK_UNLOCKED(&name.onofflock), \
+	.fqslock = __SPIN_LOCK_UNLOCKED(&name.fqslock), \
+	.n_force_qs = 0, \
+	.n_force_qs_ngp = 0, \
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1007: FILE: kernel/rcutree.c:252:
+	if (rdtp->dynticks_nesting++) {
+		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1025: FILE: kernel/rcutree.c:270:
+	if (--rdtp->dynticks_nesting) {
+		return;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1172: FILE: kernel/rcutree.c:417:
+	printk(KERN_ERR "RCU detected CPU stalls:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1178: FILE: kernel/rcutree.c:423:
+				printk(" %d", rnp_cur->grplo + cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1180: FILE: kernel/rcutree.c:425:
+	printk(" (detected by %d, t=%ld jiffies)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1190: FILE: kernel/rcutree.c:435:
+	printk(KERN_ERR "RCU detected CPU %d stall (t=%lu/%lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1191: FILE: kernel/rcutree.c:436:
+	printk(KERN_ERR "RCU detected CPU %d stall (t=%lu/%lu)\n",
+			smp_processor_id(), get_seconds(),

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1210: FILE: kernel/rcutree.c:455:
+	if ((rnp->qsmask & rdp->grpmask) && delta >= 0) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1215: FILE: kernel/rcutree.c:460:
+	} else if (rsp->gpnum != rsp->completed && delta >= 2) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1311: FILE: kernel/rcutree.c:556:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1373: FILE: kernel/rcutree.c:618:
+	if (rdp->completed != completed_snap) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1400: FILE: kernel/rcutree.c:645:
+		if (!(rnp->qsmask & mask)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1407: FILE: kernel/rcutree.c:652:
+		if (rnp->qsmask != 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rnp->parent"
#1413: FILE: kernel/rcutree.c:658:
+		if (rnp->parent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1414: FILE: kernel/rcutree.c:659:
+		if (rnp->parent == NULL) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lastcomp"
#1456: FILE: kernel/rcutree.c:701:
+	if (lastcomp != NULL &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1458: FILE: kernel/rcutree.c:703:
+	    *lastcomp != ACCESS_ONCE(rsp->completed)) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rnp"
#1551: FILE: kernel/rcutree.c:796:
+	} while (rnp != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nxtlist"
#1572: FILE: kernel/rcutree.c:817:
+	if (rdp->nxtlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list"
#1646: FILE: kernel/rcutree.c:891:
+	if (list != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1680: FILE: kernel/rcutree.c:925:
+				hardirq_count() <= (1 << HARDIRQ_SHIFT))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1700: FILE: kernel/rcutree.c:945:
+	} else if (!in_softirq()) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1752: FILE: kernel/rcutree.c:997:
+		if (mask != 0 && rsp->completed == lastcomp) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1847: FILE: kernel/rcutree.c:1092:
+^I    ^Iforce_quiescent_state(rsp, 1);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1847: FILE: kernel/rcutree.c:1092:
+^I    ^Iforce_quiescent_state(rsp, 1);$

WARNING:TYPO_SPELLING: 'manupulations' may be misspelled - perhaps 'manipulations'?
#1876: FILE: kernel/rcutree.c:1121:
+	 * grace-period manupulations below.
 	                ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'manupulations' may be misspelled - perhaps 'manipulations'?
#1886: FILE: kernel/rcutree.c:1131:
+	 * grace-period manupulations above.
 	                ^^^^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1917: FILE: kernel/rcutree.c:1162:
+	if (unlikely(++rdp->qlen > qhimark)) {
[...]
+	} else if ((long)(ACCESS_ONCE(rsp->jiffies_force_qs) - jiffies) < 0)
[...]

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#1937: FILE: kernel/rcutree.c:1182:
+void call_rcu_bh(struct rcu_head *head, void (*func)(struct rcu_head *rcu))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rnp"
#2066: FILE: kernel/rcutree.c:1311:
+	} while (rnp != NULL && !(rnp->qsmaskinit & mask));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2090: FILE: kernel/rcutree.c:1335:
+^Irdtp->dynticks |= 1; ^I/* need consecutive #s even for hotplug. */$

WARNING:TYPO_SPELLING: 'notifcation' may be misspelled - perhaps 'notification'?
#2099: FILE: kernel/rcutree.c:1344:
+ * Handle CPU online/offline notifcation events.
                              ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2102: FILE: kernel/rcutree.c:1347:
+static int __cpuinit rcu_cpu_notify(struct notifier_block *self,
+				unsigned long action, void *hcpu)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2132: FILE: kernel/rcutree.c:1377:
+	for (i = NUM_RCU_LVLS - 1; i >= 0; i--) {
+		levelspread[i] = CONFIG_RCU_FANOUT;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2135: FILE: kernel/rcutree.c:1380:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2136: FILE: kernel/rcutree.c:1381:
+	
+}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2144: FILE: kernel/rcutree.c:1389:
+	cprv = NR_CPUS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2150: FILE: kernel/rcutree.c:1395:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2151: FILE: kernel/rcutree.c:1396:
+	
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2166: FILE: kernel/rcutree.c:1411:
+	for (i = 1; i < NUM_RCU_LVLS; i++) {
+		rsp->level[i] = rsp->level[i - 1] + rsp->levelcnt[i - 1];
+	}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2182: FILE: kernel/rcutree.c:1427:
+			if (rnp->grphi >= NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2183: FILE: kernel/rcutree.c:1428:
+				rnp->grphi = NR_CPUS - 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2191: FILE: kernel/rcutree.c:1436:
+^I^I^I^Irnp->parent = rsp->level[i - 1] + $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rsp' - possible side-effects?
#2203: FILE: kernel/rcutree.c:1448:
+#define RCU_DATA_PTR_INIT(rsp, rcu_data) \
+do { \
+	rnp = (rsp)->level[NUM_RCU_LVLS - 1]; \
+	j = 0; \
+	for_each_possible_cpu(i) { \
+		if (i > rnp[j].grphi) \
+			j++; \
+		per_cpu(rcu_data, i).mynode = &rnp[j]; \
+		(rsp)->rda[i] = &per_cpu(rcu_data, i); \
+	} \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rcu_data' - possible side-effects?
#2203: FILE: kernel/rcutree.c:1448:
+#define RCU_DATA_PTR_INIT(rsp, rcu_data) \
+do { \
+	rnp = (rsp)->level[NUM_RCU_LVLS - 1]; \
+	j = 0; \
+	for_each_possible_cpu(i) { \
+		if (i > rnp[j].grphi) \
+			j++; \
+		per_cpu(rcu_data, i).mynode = &rnp[j]; \
+		(rsp)->rda[i] = &per_cpu(rcu_data, i); \
+	} \
+} while (0)

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after rcu_nb
#2215: FILE: kernel/rcutree.c:1460:
+static struct notifier_block __cpuinitdata rcu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2225: FILE: kernel/rcutree.c:1470:
+	printk(KERN_WARNING "Experimental hierarchical RCU implementation.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2227: FILE: kernel/rcutree.c:1472:
+	printk(KERN_INFO "RCU-based detection of stalled CPUs is enabled.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2238: FILE: kernel/rcutree.c:1483:
+	printk(KERN_WARNING "Experimental hierarchical RCU init done.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2250: FILE: kernel/rcutree_trace.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2264: FILE: kernel/rcutree_trace.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2265: FILE: kernel/rcutree_trace.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2272: FILE: kernel/rcutree_trace.c:23:
+ * ^I^IDocumentation/RCU$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#2283: FILE: kernel/rcutree_trace.c:34:
+#include <asm/atomic.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2293: FILE: kernel/rcutree_trace.c:44:
+extern int tick_do_timer_cpu __read_mostly;  /* @@@ DEBUG @@@ */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2297: FILE: kernel/rcutree_trace.c:48:
+#define RCUPREEMPT_TRACE_BUF_SIZE (512*NR_CPUS)
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#2325: FILE: kernel/rcutree_trace.c:76:
+#define PRINT_RCU_DATA(name, buf, ebuf) \
+	do { \
+		int _p_r_d_i; \
+		\
+		for_each_possible_cpu(_p_r_d_i) \
+			(buf) += print_one_rcu_data(&per_cpu(name, _p_r_d_i), \
+						    buf, ebuf); \
+	} while (0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2334: FILE: kernel/rcutree_trace.c:85:
+static ssize_t rcudata_read(struct file *filp, char __user *buffer,
                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2335: FILE: kernel/rcutree_trace.c:86:
+static ssize_t rcudata_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2347: FILE: kernel/rcutree_trace.c:98:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcuclassic_trace_buf, strlen(rcuclassic_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2378: FILE: kernel/rcutree_trace.c:129:
+static ssize_t rcuhier_read(struct file *filp, char __user *buffer,
                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2379: FILE: kernel/rcutree_trace.c:130:
+static ssize_t rcuhier_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2392: FILE: kernel/rcutree_trace.c:143:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcuclassic_trace_buf, strlen(rcuclassic_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2397: FILE: kernel/rcutree_trace.c:148:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2398: FILE: kernel/rcutree_trace.c:149:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2410: FILE: kernel/rcutree_trace.c:161:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcuclassic_trace_buf, strlen(rcuclassic_trace_buf));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2415: FILE: kernel/rcutree_trace.c:166:
+static struct file_operations rcudata_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2420: FILE: kernel/rcutree_trace.c:171:
+static struct file_operations rcuhier_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2425: FILE: kernel/rcutree_trace.c:176:
+static struct file_operations rcugp_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2437: FILE: kernel/rcutree_trace.c:188:
+	datadir = debugfs_create_file("rcudata", 0444, rcudir,
+						NULL, &rcudata_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2446: FILE: kernel/rcutree_trace.c:197:
+	hierdir = debugfs_create_file("rcuhier", 0444, rcudir,
+						NULL, &rcuhier_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#2452: FILE: kernel/rcutree_trace.c:203:
+	if (datadir)
+		debugfs_remove(datadir);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#2454: FILE: kernel/rcutree_trace.c:205:
+	if (gpdir)
+		debugfs_remove(gpdir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2482: FILE: kernel/rcutree_trace.c:233:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227997.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 50 warnings, 52 checks, 2304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227997.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
