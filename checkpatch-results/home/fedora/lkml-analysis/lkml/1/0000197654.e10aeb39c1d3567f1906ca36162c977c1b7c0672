WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/industrialio/industrialio-core.c:1:
+/* The industrial I/O core

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'intially' may be misspelled - perhaps 'initially'?
#121: FILE: drivers/industrialio/industrialio-core.c:42:
+ *		all intially set to null in init.
   		    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#173: FILE: drivers/industrialio/industrialio-core.c:94:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: drivers/industrialio/industrialio-core.c:102:
+	struct iio_dev *indio_dev = dev_get_drvdata(dev);
+	return sprintf(buf, "%d\n", indio_dev->scan_timestamp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: drivers/industrialio/industrialio-core.c:114:
+	bool state;
+	state = !(buf[0] == '0');

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/industrialio/industrialio-core.c:144:
+ int __iio_push_event(struct iio_event_interface *ev_int,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: drivers/industrialio/industrialio-core.c:145:
+ int __iio_push_event(struct iio_event_interface *ev_int,
+		     int ev_code,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ev)...) over kmalloc(sizeof(struct iio_detected_event_list)...)
#236: FILE: drivers/industrialio/industrialio-core.c:157:
+		ev = kmalloc(sizeof(struct iio_detected_event_list),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ev"
#238: FILE: drivers/industrialio/industrialio-core.c:159:
+		if (ev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#244: FILE: drivers/industrialio/industrialio-core.c:165:
+		if (shared_pointer_p != NULL) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shared_pointer_p"
#244: FILE: drivers/industrialio/industrialio-core.c:165:
+		if (shared_pointer_p != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#247: FILE: drivers/industrialio/industrialio-core.c:168:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: drivers/industrialio/industrialio-core.c:202:
+	unsigned long flags;
+	spin_lock_irqsave(&int_info->ev_list_lock, flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: drivers/industrialio/industrialio-core.c:208:
+
+

CHECK:BRACES: Unbalanced braces around else statement
#297: FILE: drivers/industrialio/industrialio-core.c:218:
+	} else /* safe against list deletion? */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->interrupts[line_number]"
#317: FILE: drivers/industrialio/industrialio-core.c:238:
+	if (dev_info->interrupts[line_number] == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#321: FILE: drivers/industrialio/industrialio-core.c:242:
+	printk(KERN_INFO  "initializing interrupt line %d\n", line_number);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#331: FILE: drivers/industrialio/industrialio-core.c:252:
+	 * events no-one cares about.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: drivers/industrialio/industrialio-core.c:279:
+void iio_unregister_interrupt_line(struct iio_dev *dev_info,
+					    int line_number)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#373: FILE: drivers/industrialio/industrialio-core.c:294:
+	struct iio_interrupt *inter
+		= container_of(head, struct iio_interrupt, ev_list);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#393: FILE: drivers/industrialio/industrialio-core.c:314:
+	struct iio_interrupt *inter
+		= container_of(head, struct iio_interrupt, ev_list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#395: FILE: drivers/industrialio/industrialio-core.c:316:
+	unsigned long flags;
+	mutex_lock(&el->exist_lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iio_state.fhs[id]"
#414: FILE: drivers/industrialio/industrialio-core.c:335:
+		if (iio_state.fhs[id] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fops"
#453: FILE: drivers/industrialio/industrialio-core.c:374:
+	if (new_fops == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#471: FILE: drivers/industrialio/industrialio-core.c:392:
+	 * specific stuff */

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#512: FILE: drivers/industrialio/industrialio-core.c:433:
+		/* Single access device so noone else can get the data */
 		                           ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around el->ev
#520: FILE: drivers/industrialio/industrialio-core.c:441:
+	if (copy_to_user(buf, &(el->ev),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#577: FILE: drivers/industrialio/industrialio-core.c:498:
+	struct iio_chrdev_minor_attr *_attr
+		= to_iio_chrdev_minor_attr(attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: drivers/industrialio/industrialio-core.c:503:
+void __init_iio_chrdev_minor_attr(struct iio_chrdev_minor_attr *minor_attr,
+				const char *name,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#588: FILE: drivers/industrialio/industrialio-core.c:509:
+	minor_attr->dev_attr.attr.mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#639: FILE: drivers/industrialio/industrialio-core.c:560:
+	       sizeof(struct iio_handler *)*256,
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#645: FILE: drivers/industrialio/industrialio-core.c:566:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#652: FILE: drivers/industrialio/industrialio-core.c:573:
+		printk(KERN_ERR

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#684: FILE: drivers/industrialio/industrialio-core.c:605:
+		dev_err(dev_info->dev, "Failed in device create \n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#770: FILE: drivers/industrialio/industrialio-core.c:691:
+	while (attrq != attrp) {
+			sysfs_remove_file_from_group(&dev_info->sysfs_dev->kobj,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: drivers/industrialio/industrialio-core.c:693:
+			sysfs_remove_file_from_group(&dev_info->sysfs_dev->kobj,
+					     *attrq,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#786: FILE: drivers/industrialio/industrialio-core.c:707:
+	if (dev_info->event_conf_attrs
+		&& dev_info->event_conf_attrs[i].attrs) {

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#809: FILE: drivers/industrialio/industrialio-core.c:730:
+			 *dev_info->num_interrupt_lines,
 			 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->event_interfaces"
#811: FILE: drivers/industrialio/industrialio-core.c:732:
+	if (dev_info->event_interfaces == NULL) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#821: FILE: drivers/industrialio/industrialio-core.c:742:
+	dev_info->interrupts
+		= kzalloc(sizeof(struct iio_interrupt *)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#822: FILE: drivers/industrialio/industrialio-core.c:743:
+			  *dev_info->num_interrupt_lines,
 			  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->interrupts"
#824: FILE: drivers/industrialio/industrialio-core.c:745:
+	if (dev_info->interrupts == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#832: FILE: drivers/industrialio/industrialio-core.c:753:
+	for (i = 0; i < dev_info->num_interrupt_lines; i++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: drivers/industrialio/industrialio-core.c:755:
+		snprintf(dev_info->event_interfaces[i]._name, 20,
+			"event_line%d_minor", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/industrialio/industrialio-core.c:770:
+		snprintf(dev_info->event_interfaces[i]._attrname, 20,
+			"event_line%d_sources", i);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#851: FILE: drivers/industrialio/industrialio-core.c:772:
+		dev_info->event_attrs[i].name
+			= (const char *)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#867: FILE: drivers/industrialio/industrialio-core.c:788:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#896: FILE: drivers/industrialio/industrialio-core.c:817:
+	int i;
+	if (dev_info->num_interrupt_lines == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: drivers/industrialio/industrialio-core.c:825:
+		iio_free_ev_int(&dev_info->event_interfaces[i],
+					 dev_info->dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#908: FILE: drivers/industrialio/industrialio-core.c:829:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#912: FILE: drivers/industrialio/industrialio-core.c:833:
+	int ret;
+	mutex_init(&dev_info->mlock);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#934: FILE: drivers/industrialio/industrialio-core.c:855:
+			"Failed to register event set \n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#938: FILE: drivers/industrialio/industrialio-core.c:859:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#979: FILE: drivers/industrialio/industrialio-core.c:900:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#993: FILE: include/linux/industrialio/iio.h:1:
+/* The industrial I/O core

WARNING:LINE_SPACING: Missing a blank line after declarations
#1026: FILE: include/linux/industrialio/iio.h:34:
+	struct timespec ts;
+	ktime_get_ts(&ts);

WARNING:TYPO_SPELLING: 'useage' may be misspelled - perhaps 'usage'?
#1037: FILE: include/linux/industrialio/iio.h:45:
+ * @exist_lock:		prevents race conditions related to refcount useage.
                		                                             ^^^^^^

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1047: FILE: include/linux/industrialio/iio.h:55:
+	struct mutex exist_lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1058: FILE: include/linux/industrialio/iio.h:66:
+int iio_add_event_to_list(struct iio_event_handler_list *el,
+			   struct list_head *head);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1071: FILE: include/linux/industrialio/iio.h:79:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1080: FILE: include/linux/industrialio/iio.h:88:
+ * call to iio_device_register. */

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#1112: FILE: include/linux/industrialio/iio.h:120:
+ * @pollfunc:		[DRIVER] function run on trigger being recieved
              		                                       ^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#1138: FILE: include/linux/industrialio/iio.h:146:
+	int				(*ring_preenable)(struct iio_dev *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#1139: FILE: include/linux/industrialio/iio.h:147:
+	int				(*ring_postenable)(struct iio_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#1140: FILE: include/linux/industrialio/iio.h:148:
+	int				(*ring_predisable)(struct iio_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#1141: FILE: include/linux/industrialio/iio.h:149:
+	int				(*ring_postdisable)(struct iio_dev *);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1143: FILE: include/linux/industrialio/iio.h:151:
+	struct mutex			mlock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1177: FILE: include/linux/industrialio/iio.h:185:
+	spinlock_t			ev_list_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1198: FILE: include/linux/industrialio/iio.h:206:
+
+

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1205: FILE: include/linux/industrialio/iio.h:213:
+ * @timestamp:		When the event occured
               		               ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1208: FILE: include/linux/industrialio/iio.h:216:
+int iio_push_event(struct iio_dev *dev_info,
+		  int ev_line,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1246: FILE: include/linux/industrialio/iio.h:254:
+}
+/**

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1254: FILE: include/linux/industrialio/iio.h:262:
+int __iio_push_event(struct iio_event_interface *ev_int,
+		    int ev_code,

WARNING:TYPO_SPELLING: 'evnet' may be misspelled - perhaps 'event'?
#1260: FILE: include/linux/industrialio/iio.h:268:
+ * @ev:			the evnet to be changed
        			    ^^^^^

WARNING:TYPO_SPELLING: 'hander' may be misspelled - perhaps 'handler'?
#1285: FILE: include/linux/industrialio/iio.h:293:
+ * @hander:		Struct that contains relevant file handling for chrdev
     ^^^^^^

WARNING:TYPO_SPELLING: 'elemenents' may be misspelled - perhaps 'elements'?
#1297: FILE: include/linux/industrialio/iio.h:305:
+/* Used to distinguish between bipolar and unipolar scan elemenents.
                                                          ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1299: FILE: include/linux/industrialio/iio.h:307:
+ * in the future!*/

WARNING:TYPO_SPELLING: 'corresonding' may be misspelled - perhaps 'corresponding'?
#1308: FILE: include/linux/industrialio/iio.h:316:
+ * @mask:		bitmask corresonding to this scan element
          		        ^^^^^^^^^^^^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1326: FILE: include/linux/industrialio/iio.h:334:
+#define to_iio_scan_el(_dev_attr)				\
+	container_of(_dev_attr, struct iio_scan_el, dev_attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#1343: FILE: include/linux/industrialio/iio.h:351:
+ * iio_scal_el_show() -	sysfs interface to query whether a scan element is
+ *			is enabled or not.

WARNING:TYPO_SPELLING: 'indentification' may be misspelled - perhaps 'identification'?
#1354: FILE: include/linux/industrialio/iio.h:362:
+ * @_label:	indentification variable used by drivers.  Often a reg address.
            	^^^^^^^^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_number' may be better as '(_number)' to avoid precedence issues
#1356: FILE: include/linux/industrialio/iio.h:364:
+#define IIO_SCAN_EL(_name, _number, _bits, _label)			\
+	struct iio_scan_el iio_scan_el_##_name = {			\
+		.dev_attr = __ATTR(scan_en_##_name,			\
+				   S_IRUGO | S_IWUSR,			\
+				   iio_scan_el_show,			\
+				   iio_scan_el_store),			\
+		.mask = (1 << _number),					\
+		.bit_count = _bits,					\
+		.label = _label,					\
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1359: FILE: include/linux/industrialio/iio.h:367:
+				   S_IRUGO | S_IWUSR,			\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_number' may be better as '(_number)' to avoid precedence issues
#1377: FILE: include/linux/industrialio/iio.h:385:
+#define IIO_SCAN_EL_C(_name, _number, _bits, _label, _controlfunc)	\
+	struct iio_scan_el iio_scan_el_##_name = {			\
+		.dev_attr = __ATTR(scan_en_##_name,			\
+				   S_IRUGO | S_IWUSR,			\
+				   iio_scan_el_show,			\
+				   iio_scan_el_store),			\
+		.mask = (1 << _number),					\
+		.bit_count = _bits,					\
+		.label = _label,					\
+		.set_state = _controlfunc,				\
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1380: FILE: include/linux/industrialio/iio.h:388:
+				   S_IRUGO | S_IWUSR,			\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1396: FILE: include/linux/industrialio/iio.h:404:
+				   S_IRUGO | S_IWUSR,		\

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1414: FILE: include/linux/industrialio/iio.h:422:
+};
+/**

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1425: FILE: include/linux/industrialio/iio.h:433:
+};
+static inline int iio_device_register_ring(struct iio_dev *devinfo, int id)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1429: FILE: include/linux/industrialio/iio.h:437:
+};
+static inline void iio_device_unregister_ring(struct iio_dev *dev_info) {};

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1439: FILE: include/linux/industrialio/sysfs.h:1:
+/* The industrial I/O core

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1460: FILE: include/linux/industrialio/sysfs.h:22:
+ * @listel:	list header to allow addition to list of event handlers
+*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1483: FILE: include/linux/industrialio/sysfs.h:45:
+__init_iio_chrdev_minor_attr(struct iio_chrdev_minor_attr *minor_attr,
+			   const char *name,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1487: FILE: include/linux/industrialio/sysfs.h:49:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1488: FILE: include/linux/industrialio/sysfs.h:50:
+#define to_iio_chrdev_minor_attr(_dev_attr) \
+	container_of(_dev_attr, struct iio_chrdev_minor_attr, dev_attr);

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#1521: FILE: include/linux/industrialio/sysfs.h:83:
+/* Some attributes will be hard coded (device dependant) and not require an
                                               ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1522: FILE: include/linux/industrialio/sysfs.h:84:
+/* Some attributes will be hard coded (device dependant) and not require an
+   address, in these cases pass a negative */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1522: FILE: include/linux/industrialio/sysfs.h:84:
+   address, in these cases pass a negative */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1534: FILE: include/linux/industrialio/sysfs.h:96:
+	struct iio_dev_attr iio_dev_attr_##_name		\
+	= IIO_ATTR(_name, _mode, _show, _store, _addr)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1536: FILE: include/linux/industrialio/sysfs.h:98:
+
+

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1539: FILE: include/linux/industrialio/sysfs.h:101:
+	struct iio_dev_attr iio_dev_attr_##_name			\
+	= IIO_ATTR_2(_name, _mode, _show, _store, _addr, _val2)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1543: FILE: include/linux/industrialio/sysfs.h:105:
+	struct iio_const_attr iio_const_attr_##_name			\
+	= { .string = _string,						\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1544: FILE: include/linux/industrialio/sysfs.h:106:
+	    .dev_attr = __ATTR(_name, S_IRUGO, iio_read_const_attr, NULL)}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1554: FILE: include/linux/industrialio/sysfs.h:116:
+	IIO_DEVICE_ATTR(revision, S_IRUGO, _show, NULL, 0)

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#1565: FILE: include/linux/industrialio/sysfs.h:127:
+ * May be mode dependant on some devices
                ^^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1568: FILE: include/linux/industrialio/sysfs.h:130:
+	IIO_DEVICE_ATTR(available_sampling_frequency, S_IRUGO, _show, NULL, 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1589: FILE: include/linux/industrialio/sysfs.h:151:
+	IIO_DEVICE_ATTR(available_scan_modes, S_IRUGO, _show, NULL, 0)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1594: FILE: include/linux/industrialio/sysfs.h:156:
+#define IIO_DEV_ATTR_SCAN(_show)		\
+	IIO_DEVICE_ATTR(scan, S_IRUGO, _show, NULL, 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1595: FILE: include/linux/industrialio/sysfs.h:157:
+	IIO_DEVICE_ATTR(scan, S_IRUGO, _show, NULL, 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1601: FILE: include/linux/industrialio/sysfs.h:163:
+	IIO_DEVICE_ATTR(in##_number, S_IRUGO, _show, NULL, _number)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1603: FILE: include/linux/industrialio/sysfs.h:165:
+
+

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#1607: FILE: include/linux/industrialio/sysfs.h:169:
+ * Success may be dependant on attachment of trigger previously
                   ^^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1610: FILE: include/linux/industrialio/sysfs.h:172:
+	IIO_DEVICE_ATTR(sw_ring_enable, S_IRUGO | S_IWUSR, _show, _store, 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1619: FILE: include/linux/industrialio/sysfs.h:181:
+	IIO_DEVICE_ATTR(hw_ring_enable, S_IRUGO | S_IWUSR, _show, _store, 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1631: FILE: include/linux/industrialio/sysfs.h:193:
+	IIO_DEVICE_ATTR(ring_bps_available, S_IRUGO, _show, NULL, 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1637: FILE: include/linux/industrialio/sysfs.h:199:
+	IIO_DEVICE_ATTR(temp, S_IRUGO, _show, NULL, 0)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1645: FILE: include/linux/industrialio/sysfs.h:207:
+#define IIO_EVENT_SH(_name, _handler)					\
+	static struct iio_event_handler_list				\
+	iio_event_##_name = {						\
+		.handler = _handler,					\
+		.refcount = 0,						\
+		.exist_lock = __MUTEX_INITIALIZER(iio_event_##_name	\
+						  .exist_lock),	\
+	};

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_ev_list' may be better as '(_ev_list)' to avoid precedence issues
#1658: FILE: include/linux/industrialio/sysfs.h:220:
+#define IIO_EVENT_ATTR_SH(_name, _ev_list, _show, _store, _mask)	\
+	static struct iio_event_attr					\
+	iio_event_attr_##_name						\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR,		\
+			       _show, _store),				\
+	    .mask = _mask,						\
+	    .listel = &_ev_list };

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1658: FILE: include/linux/industrialio/sysfs.h:220:
+#define IIO_EVENT_ATTR_SH(_name, _ev_list, _show, _store, _mask)	\
+	static struct iio_event_attr					\
+	iio_event_attr_##_name						\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR,		\
+			       _show, _store),				\
+	    .mask = _mask,						\
+	    .listel = &_ev_list };

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1661: FILE: include/linux/industrialio/sysfs.h:223:
+	iio_event_attr_##_name						\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR,		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1661: FILE: include/linux/industrialio/sysfs.h:223:
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR,		\

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1669: FILE: include/linux/industrialio/sysfs.h:231:
+#define IIO_EVENT_ATTR(_name, _show, _store, _mask, _handler)		\
+	static struct iio_event_handler_list				\
+	iio_event_##_name = {						\
+		.handler = _handler,					\
+	};								\
+	static struct							\
+	iio_event_attr							\
+	iio_event_attr_##_name						\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR,		\
+			       _show, _store),				\
+	    .mask = _mask,						\
+	    .listel = &iio_event_##_name };				\
+

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1677: FILE: include/linux/industrialio/sysfs.h:239:
+	iio_event_attr_##_name						\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR,		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1677: FILE: include/linux/industrialio/sysfs.h:239:
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR,		\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1729: FILE: include/linux/industrialio/chrdev.h:1:
+/* The industrial I/O core - character device related

WARNING:TYPO_SPELLING: 'occurance' may be misspelled - perhaps 'occurrence'?
#1759: FILE: include/linux/industrialio/chrdev.h:31:
+ * @timestamp:	best estimate of time of event occurance (often from
               	                               ^^^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1768: FILE: include/linux/industrialio/chrdev.h:40:
+ * struct iio_detected_event_list - list element for events that have occured
                                                                       ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1779: FILE: include/linux/industrialio/chrdev.h:51:
+};
+/**

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1787: FILE: include/linux/industrialio/chrdev.h:59:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'indentifier' may be misspelled - perhaps 'identifier'?
#1798: FILE: include/linux/industrialio/chrdev.h:70:
+ * @id:			indentifier to allow the event interface to know which
        			^^^^^^^^^^^

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1808: FILE: include/linux/industrialio/chrdev.h:80:
+	struct mutex				event_list_lock;

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#1851: FILE: drivers/industrialio/Kconfig:2:
+# Industrial I/O subsytem configuration
                  ^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1854: FILE: drivers/industrialio/Kconfig:5:
+menuconfig INDUSTRIALIO
+	tristate "Industrial I/O support"
+	---help---
+	  The industrial I/O subsystem provides a unified framework for
+	  drivers for many different types of embedded sensors using a
+	  number of different physical interfaces (i2c, spi etc). See
+	  Documentation/industrialio for more information.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1880: FILE: include/linux/industrialio/trigger.h:1:
+/* The industrial I/O core, trigger handling functions

WARNING:SPACING: missing space after struct definition
#1896: FILE: include/linux/industrialio/trigger.h:17:
+struct iio_trigger{};

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1908: FILE: include/linux/industrialio/trigger.h:29:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1954: FILE: include/linux/industrialio/ring_generic.h:1:
+/* The industrial I/O core - generic ring buffer interfaces.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 74 warnings, 63 checks, 1846 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
