WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-linus

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#181: FILE: MAINTAINERS:3227:
+P:	Frank Blaschka
+M:	blaschka@linux.vnet.ibm.com

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#256: FILE: drivers/net/bonding/bond_3ad.h:279:
+void bond_3ad_state_machine_handler(struct work_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#316: FILE: drivers/net/bonding/bond_alb.c:963:
+/*
+ * Swap MAC addresses between two slaves.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#334: FILE: drivers/net/bonding/bond_alb.c:977:
 
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#337: FILE: drivers/net/bonding/bond_alb.c:980:
+/*
+ * Send learning packets after MAC address swap.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#387: FILE: drivers/net/bonding/bond_alb.c:1462:
+			/*
+			 * dev_set_promiscuity requires rtnl and

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#460: FILE: drivers/net/bonding/bond_alb.c:1640:
+	/*
+	 * Arrange for swap_slave and new_slave to temporarily be

WARNING:BRACES: braces {} are not necessary for single statement blocks
#464: FILE: drivers/net/bonding/bond_alb.c:1644:
+	if (swap_slave) {
+		tlb_clear_slave(bond, swap_slave, 1);
+	}

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#494: FILE: drivers/net/bonding/bond_alb.c:1675:
+/*
+ * Called with RTNL

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#531: FILE: drivers/net/bonding/bond_alb.h:128:
+void bond_alb_monitor(struct work_struct *);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#563: FILE: drivers/net/bonding/bond_main.c:1751:
+		/*
+		 * Note that we hold RTNL over this sequence, so there

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#667: FILE: drivers/net/bonding/bond_main.c:2103:
+/*
+ * if !have_locks, return nonzero if a failover is necessary.  if

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#821: FILE: drivers/net/bonding/bond_main.c:2361:
+/*
+ * bond_mii_monitor

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1191: FILE: drivers/net/bonding/bond_main.c:4131:
+	/*
+	 * Concurrent TX may collide on rr_tx_counter; we accept that

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1200: FILE: drivers/net/bonding/bond_main.c:4138:
+		if (slave_no < 0) {
+			break;
+		}

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#1491: FILE: drivers/net/bonding/bonding.h:314:
+void bond_mii_monitor(struct work_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#1492: FILE: drivers/net/bonding/bonding.h:315:
+void bond_loadbalance_arp_mon(struct work_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#1493: FILE: drivers/net/bonding/bonding.h:316:
+void bond_activebackup_arp_mon(struct work_struct *);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1528: FILE: drivers/net/cpmac.c:477:
+			printk(KERN_WARNING "%s: tx dma ring full\n",

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1596: FILE: drivers/net/defxx.c:808:
+static void __devexit dfx_bus_uninit(struct net_device *dev)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1636: FILE: drivers/net/mipsnet.c:63:
+	/*
+	 * Only one packet at a time. Once TXDONE interrupt is serviced, the

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1783: FILE: drivers/net/mv643xx_eth.c:67:
+/*
+ * Number of RX / TX descriptors on RX / TX rings.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1816: FILE: drivers/net/mv643xx_eth.c:100:
+/*
+ * Registers shared between all ports.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1822: FILE: drivers/net/mv643xx_eth.c:106:
+/*
+ * Per-port registers.

CHECK:BIT_MACRO: Prefer using the BIT macro
#1848: FILE: drivers/net/mv643xx_eth.c:132:
+#define UNICAST_PROMISCUOUS_MODE	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1852: FILE: drivers/net/mv643xx_eth.c:136:
+#define REJECT_BC_IF_NOT_IP_OR_ARP	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1854: FILE: drivers/net/mv643xx_eth.c:138:
+#define REJECT_BC_IF_IP			(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1856: FILE: drivers/net/mv643xx_eth.c:140:
+#define REJECT_BC_IF_ARP		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1857: FILE: drivers/net/mv643xx_eth.c:141:
+#define TX_AM_NO_UPDATE_ERROR_SUMMARY	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1859: FILE: drivers/net/mv643xx_eth.c:143:
+#define CAPTURE_TCP_FRAMES_EN		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1861: FILE: drivers/net/mv643xx_eth.c:145:
+#define CAPTURE_UDP_FRAMES_EN		(1 << 15)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1866: FILE: drivers/net/mv643xx_eth.c:150:
+#define PORT_CONFIG_DEFAULT_VALUE			\
+		UNICAST_NORMAL_MODE		|	\
+		DEFAULT_RX_QUEUE(0)		|	\
+		DEFAULT_RX_ARP_QUEUE(0)		|	\
+		RECEIVE_BC_IF_NOT_IP_OR_ARP	|	\
+		RECEIVE_BC_IF_IP		|	\
+		RECEIVE_BC_IF_ARP		|	\
+		CAPTURE_TCP_FRAMES_DIS		|	\
+		CAPTURE_UDP_FRAMES_DIS		|	\
+		DEFAULT_RX_TCP_QUEUE(0)		|	\
+		DEFAULT_RX_UDP_QUEUE(0)		|	\
+		DEFAULT_RX_BPDU_QUEUE(0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1880: FILE: drivers/net/mv643xx_eth.c:164:
+#define CLASSIFY_EN				(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1882: FILE: drivers/net/mv643xx_eth.c:166:
+#define SPAN_BPDU_PACKETS_TO_RX_QUEUE_7		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1884: FILE: drivers/net/mv643xx_eth.c:168:
+#define PARTITION_ENABLE			(1 << 2)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1886: FILE: drivers/net/mv643xx_eth.c:170:
+#define PORT_CONFIG_EXTEND_DEFAULT_VALUE		\
+		SPAN_BPDU_PACKETS_AS_NORMAL	|	\
+		PARTITION_DISABLE

CHECK:BIT_MACRO: Prefer using the BIT macro
#1891: FILE: drivers/net/mv643xx_eth.c:175:
+#define RIFB				(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1893: FILE: drivers/net/mv643xx_eth.c:177:
+#define RX_BURST_SIZE_2_64BIT		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1897: FILE: drivers/net/mv643xx_eth.c:181:
+#define BLM_RX_NO_SWAP			(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1899: FILE: drivers/net/mv643xx_eth.c:183:
+#define BLM_TX_NO_SWAP			(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1901: FILE: drivers/net/mv643xx_eth.c:185:
+#define DESCRIPTORS_BYTE_SWAP		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1905: FILE: drivers/net/mv643xx_eth.c:189:
+#define TX_BURST_SIZE_2_64BIT		(1 << 22)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1911: FILE: drivers/net/mv643xx_eth.c:195:
+#define PORT_SDMA_CONFIG_DEFAULT_VALUE		\
+		RX_BURST_SIZE_4_64BIT	|	\
+		IPG_INT_RX(0)		|	\
+		TX_BURST_SIZE_4_64BIT

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1916: FILE: drivers/net/mv643xx_eth.c:200:
+#define PORT_SDMA_CONFIG_DEFAULT_VALUE		\
+		RX_BURST_SIZE_4_64BIT	|	\
+		BLM_RX_NO_SWAP		|	\
+		BLM_TX_NO_SWAP		|	\
+		IPG_INT_RX(0)		|	\
+		TX_BURST_SIZE_4_64BIT

CHECK:BIT_MACRO: Prefer using the BIT macro
#1928: FILE: drivers/net/mv643xx_eth.c:212:
+#define SERIAL_PORT_ENABLE			(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1930: FILE: drivers/net/mv643xx_eth.c:214:
+#define FORCE_LINK_PASS				(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1932: FILE: drivers/net/mv643xx_eth.c:216:
+#define DISABLE_AUTO_NEG_FOR_DUPLX		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1934: FILE: drivers/net/mv643xx_eth.c:218:
+#define DISABLE_AUTO_NEG_FOR_FLOW_CTRL		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1936: FILE: drivers/net/mv643xx_eth.c:220:
+#define ADV_SYMMETRIC_FLOW_CTRL			(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1938: FILE: drivers/net/mv643xx_eth.c:222:
+#define FORCE_FC_MODE_TX_PAUSE_DIS		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1940: FILE: drivers/net/mv643xx_eth.c:224:
+#define FORCE_BP_MODE_JAM_TX			(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1942: FILE: drivers/net/mv643xx_eth.c:226:
+#define SERIAL_PORT_CONTROL_RESERVED		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1944: FILE: drivers/net/mv643xx_eth.c:228:
+#define DO_NOT_FORCE_LINK_FAIL			(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1946: FILE: drivers/net/mv643xx_eth.c:230:
+#define RETRANSMIT_FOREVER			(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1948: FILE: drivers/net/mv643xx_eth.c:232:
+#define DISABLE_AUTO_NEG_SPEED_GMII		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1950: FILE: drivers/net/mv643xx_eth.c:234:
+#define DTE_ADV_1				(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1952: FILE: drivers/net/mv643xx_eth.c:236:
+#define ENABLE_AUTO_NEG_BYPASS			(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1954: FILE: drivers/net/mv643xx_eth.c:238:
+#define RESTART_AUTO_NEG			(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1956: FILE: drivers/net/mv643xx_eth.c:240:
+#define MAX_RX_PACKET_1522BYTE			(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1963: FILE: drivers/net/mv643xx_eth.c:247:
+#define SET_EXT_LOOPBACK			(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1965: FILE: drivers/net/mv643xx_eth.c:249:
+#define SET_FULL_DUPLEX_MODE			(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1967: FILE: drivers/net/mv643xx_eth.c:251:
+#define ENABLE_FLOW_CTRL_TX_RX_IN_FULL_DUPLEX	(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1969: FILE: drivers/net/mv643xx_eth.c:253:
+#define SET_GMII_SPEED_TO_1000			(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1971: FILE: drivers/net/mv643xx_eth.c:255:
+#define SET_MII_SPEED_TO_100			(1 << 24)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1973: FILE: drivers/net/mv643xx_eth.c:257:
+#define PORT_SERIAL_CONTROL_DEFAULT_VALUE		\
+		DO_NOT_FORCE_LINK_PASS		|	\
+		ENABLE_AUTO_NEG_FOR_DUPLX	|	\
+		DISABLE_AUTO_NEG_FOR_FLOW_CTRL	|	\
+		ADV_SYMMETRIC_FLOW_CTRL		|	\
+		FORCE_FC_MODE_NO_PAUSE_DIS_TX	|	\
+		FORCE_BP_MODE_NO_JAM		|	\
+		(1 << 9) /* reserved */		|	\
+		DO_NOT_FORCE_LINK_FAIL		|	\
+		RETRANSMIT_16_ATTEMPTS		|	\
+		ENABLE_AUTO_NEG_SPEED_GMII	|	\
+		DTE_ADV_0			|	\
+		DISABLE_AUTO_NEG_BYPASS		|	\
+		AUTO_NEG_NO_CHANGE		|	\
+		MAX_RX_PACKET_9700BYTE		|	\
+		CLR_EXT_LOOPBACK		|	\
+		SET_FULL_DUPLEX_MODE		|	\
+		ENABLE_FLOW_CTRL_TX_RX_IN_FULL_DUPLEX

CHECK:BIT_MACRO: Prefer using the BIT macro
#1993: FILE: drivers/net/mv643xx_eth.c:277:
+#define PORT_STATUS_MODE_10_BIT		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1994: FILE: drivers/net/mv643xx_eth.c:278:
+#define PORT_STATUS_LINK_UP		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1995: FILE: drivers/net/mv643xx_eth.c:279:
+#define PORT_STATUS_FULL_DUPLEX		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1996: FILE: drivers/net/mv643xx_eth.c:280:
+#define PORT_STATUS_FLOW_CONTROL	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1997: FILE: drivers/net/mv643xx_eth.c:281:
+#define PORT_STATUS_GMII_1000		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1998: FILE: drivers/net/mv643xx_eth.c:282:
+#define PORT_STATUS_MII_100		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2000: FILE: drivers/net/mv643xx_eth.c:284:
+#define PORT_STATUS_TX_IN_PROGRESS	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2001: FILE: drivers/net/mv643xx_eth.c:285:
+#define PORT_STATUS_AUTONEG_BYPASSED	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2002: FILE: drivers/net/mv643xx_eth.c:286:
+#define PORT_STATUS_PARTITION		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2003: FILE: drivers/net/mv643xx_eth.c:287:
+#define PORT_STATUS_TX_FIFO_EMPTY	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2011: FILE: drivers/net/mv643xx_eth.c:295:
+#define ETH_RX_QUEUES_ENABLED	(1 << 0)	/* use only Q0 for receive */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2012: FILE: drivers/net/mv643xx_eth.c:296:
+#define ETH_TX_QUEUES_ENABLED	(1 << 0)	/* use only Q0 for transmit */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2144: FILE: drivers/net/mv643xx_eth.c:428:
+typedef enum _eth_func_ret_status {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2153: FILE: drivers/net/mv643xx_eth.c:437:
+typedef enum _eth_target {

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#2254: FILE: drivers/net/mv643xx_eth.c:538:
+	/* Tx/Rx rings managment indexes fields. For driver use */
 	               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2282: FILE: drivers/net/mv643xx_eth.c:566:
+	spinlock_t lock;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2293: FILE: drivers/net/mv643xx_eth.c:577:
+	/*
+	 * Used in case RX Ring is empty, which can be caused when

CHECK:SPACING: No space is necessary after a cast
#2365: FILE: drivers/net/mv643xx_eth.c:772:
+		config_reg |= (u32) UNICAST_PROMISCUOUS_MODE;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#2369: FILE: drivers/net/mv643xx_eth.c:774:
+		config_reg &= ~(u32) UNICAST_PROMISCUOUS_MODE;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2413: FILE: drivers/net/mv643xx_eth.c:1033:
+		if ((o_pscr & SERIAL_PORT_ENABLE) == 0)
[...]
 		else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2446: FILE: drivers/net/mv643xx_eth.c:1074:
+		mv_write(INTERRUPT_CAUSE_EXTEND_REG(port_num),
 							~eth_int_cause_ext);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2469: FILE: drivers/net/mv643xx_eth.c:1157:
+	mv_write(SDMA_CONFIG_REG(eth_port_num),
 		((coal & 0x3fff) << 8) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2495: FILE: drivers/net/mv643xx_eth.c:1333:
+	mv_read (INTERRUPT_CAUSE_EXTEND_REG(port_num));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mv643xx_eth_base"
#2582: FILE: drivers/net/mv643xx_eth.c:2013:
+	if (mv643xx_eth_base == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2604: FILE: drivers/net/mv643xx_eth.c:2036:
+	mv_read (INTERRUPT_MASK_REG(port_num));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2614: FILE: drivers/net/mv643xx_eth.c:2304:
+	mv_write(TX_CURRENT_QUEUE_DESC_PTR_0(port_num),
 		(u32)((struct eth_tx_desc *)mp->tx_desc_dma + tx_curr_desc));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2620: FILE: drivers/net/mv643xx_eth.c:2309:
+	mv_write(RX_CURRENT_QUEUE_DESC_PTR_0(port_num),
 		(u32)((struct eth_rx_desc *)mp->rx_desc_dma + rx_curr_desc));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2629: FILE: drivers/net/mv643xx_eth.c:2316:
+	mv_write(PORT_CONFIG_REG(port_num),
+			  PORT_CONFIG_DEFAULT_VALUE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2634: FILE: drivers/net/mv643xx_eth.c:2319:
+	mv_write(PORT_CONFIG_EXTEND_REG(port_num),
+			  PORT_CONFIG_EXTEND_DEFAULT_VALUE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2667: FILE: drivers/net/mv643xx_eth.c:2339:
+	mv_write(SDMA_CONFIG_REG(port_num),
+			  PORT_SDMA_CONFIG_DEFAULT_VALUE);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2727: FILE: drivers/net/mv643xx_eth.c:2547:
+			mv_write(DA_FILTER_SPECIAL_MULTICAST_TABLE_BASE(eth_port_num) + table_index, 0x01010101);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#2736: FILE: drivers/net/mv643xx_eth.c:2557:
+			mv_write(DA_FILTER_OTHER_MULTICAST_TABLE_BASE(eth_port_num) + table_index, 0x01010101);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2905: FILE: drivers/net/mv643xx_eth.c:2929:
+	mv_write(SMI_REG,
 		(phy_addr << 16) | (phy_reg << 21) | ETH_SMI_OPCODE_READ);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#3346: FILE: drivers/net/r8169.c:47:
+#define dprintk(fmt, args...) \
+	do { printk(KERN_DEBUG PFX fmt, ## args); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3347: FILE: drivers/net/r8169.c:48:
+	do { printk(KERN_DEBUG PFX fmt, ## args); } while (0)

CHECK:CAMELCASE: Avoid CamelCase: <MSIEnable>
#3407: FILE: drivers/net/r8169.c:282:
+	MSIEnable	= (1 << 5),	/* Enable Message Signaled Interrupt */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3439: FILE: drivers/net/r8169.c:429:
+	unsigned features;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_12'
#3480: FILE: drivers/net/r8169.c:740:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_12) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_17)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_17'
#3480: FILE: drivers/net/r8169.c:740:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_12) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_17)) {

CHECK:CAMELCASE: Avoid CamelCase: <TxConfig>
#3537: FILE: drivers/net/r8169.c:1154:
+	reg = RTL_R32(TxConfig);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3668: FILE: drivers/net/r8169.c:1246:
+}
+static void rtl8168b_hw_phy_config(void __iomem *ioaddr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3808: FILE: drivers/net/r8169.c:1545:
+	unsigned msi;

CHECK:CAMELCASE: Avoid CamelCase: <RxFIFOOver>
#3817: FILE: drivers/net/r8169.c:1553:
+		.napi_event	= RxFIFOOver | TxErr | TxOK | RxOK | RxOverflow,

CHECK:CAMELCASE: Avoid CamelCase: <TxErr>
#3817: FILE: drivers/net/r8169.c:1553:
+		.napi_event	= RxFIFOOver | TxErr | TxOK | RxOK | RxOverflow,

CHECK:CAMELCASE: Avoid CamelCase: <TxOK>
#3817: FILE: drivers/net/r8169.c:1553:
+		.napi_event	= RxFIFOOver | TxErr | TxOK | RxOK | RxOverflow,

CHECK:CAMELCASE: Avoid CamelCase: <RxOK>
#3817: FILE: drivers/net/r8169.c:1553:
+		.napi_event	= RxFIFOOver | TxErr | TxOK | RxOK | RxOverflow,

CHECK:CAMELCASE: Avoid CamelCase: <RxOverflow>
#3817: FILE: drivers/net/r8169.c:1553:
+		.napi_event	= RxFIFOOver | TxErr | TxOK | RxOK | RxOverflow,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3843: FILE: drivers/net/r8169.c:1577:
+static unsigned rtl_try_msi(struct pci_dev *pdev, void __iomem *ioaddr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3846: FILE: drivers/net/r8169.c:1580:
+	unsigned msi = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Config2>
#3849: FILE: drivers/net/r8169.c:1583:
+	cfg2 = RTL_R8(Config2) & ~MSIEnable;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#3870: FILE: drivers/net/r8169.c:1604:
 static int __devinit

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_13'
#3943: FILE: drivers/net/r8169.c:2151:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_13) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_16'
#3943: FILE: drivers/net/r8169.c:2151:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_13) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3962: FILE: drivers/net/r8169.c:2433:
+			printk(KERN_ERR PFX "%s: reinit failure (status = %d)."

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#3974: FILE: drivers/net/r8169.c:2466:
+			printk(KERN_EMERG PFX "%s: Rx buffers shortage\n",

CHECK:CAMELCASE: Avoid CamelCase: <RxMissed>
#4044: FILE: drivers/net/r8169.c:3005:
+	dev->stats.rx_missed_errors += RTL_R32(RxMissed);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4088: FILE: drivers/net/r8169.c:3171:
+	pci_enable_wake(pdev, pci_choose_state(pdev, state),
+		(tp->features & RTL_FEATURE_WOL) ? 1 : 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4101: FILE: drivers/net/sky2.c:4274:
+	for (i = hw->ports-1; i >= 0; --i)
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4110: FILE: drivers/net/sky2.c:4292:
+	for (i = hw->ports-1; i >= 0; --i)
 	                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4473: FILE: include/linux/mv643xx_eth.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366414.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 42 warnings, 79 checks, 3756 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366414.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
