WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#55: FILE: arch/x86/kvm/svm.c:79:
+static int nested_svm_check_exception(struct vcpu_svm *svm, unsigned nr,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#66: FILE: arch/x86/kvm/svm.c:232:
+	/* If we are within a nested VM we'd better #VMEXIT and let the
+	   guest handle the exception */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#66: FILE: arch/x86/kvm/svm.c:232:
+	   guest handle the exception */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#77: FILE: arch/x86/kvm/svm.c:1213:
+static int nested_svm_check_exception(struct vcpu_svm *svm, unsigned nr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: arch/x86/kvm/svm.c:1345:
+		u32 cr_bits = 1 << (exit_code - SVM_EXIT_READ_CR0);
+		if (nested_vmcb->control.intercept_cr_read & cr_bits)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#162: FILE: arch/x86/kvm/svm.c:1351:
+		u32 cr_bits = 1 << (exit_code - SVM_EXIT_WRITE_CR0);
+		if (nested_vmcb->control.intercept_cr_write & cr_bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#168: FILE: arch/x86/kvm/svm.c:1357:
+		u32 dr_bits = 1 << (exit_code - SVM_EXIT_READ_DR0);
+		if (nested_vmcb->control.intercept_dr_read & dr_bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: arch/x86/kvm/svm.c:1363:
+		u32 dr_bits = 1 << (exit_code - SVM_EXIT_WRITE_DR0);
+		if (nested_vmcb->control.intercept_dr_write & dr_bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: arch/x86/kvm/svm.c:1369:
+		u32 excp_bits = 1 << (exit_code - SVM_EXIT_EXCP_BASE);
+		if (nested_vmcb->control.intercept_exceptions & excp_bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: arch/x86/kvm/svm.c:1375:
+		u64 exit_bits = 1ULL << (exit_code - SVM_EXIT_INTR);
+		nsvm_printk("exit code: 0x%x\n", exit_code);

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: arch/x86/kvm/svm.c:1390:
+        u32 t0, t1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: arch/x86/kvm/svm.c:1390:
+        u32 t0, t1;$

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: arch/x86/kvm/svm.c:1397:
+	switch(msr) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#225: FILE: arch/x86/kvm/svm.c:1414:
+		return 1;
+		break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#242: FILE: arch/x86/kvm/svm.c:1431:
+	default: break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nested_vmcb->control.int_vector'
#289: FILE: arch/x86/kvm/svm.c:1478:
+	if ((nested_vmcb->control.int_ctl & V_IRQ_MASK) &&
+	    (nested_vmcb->control.int_vector)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: arch/x86/kvm/svm.c:1481:
+		nsvm_printk("WARNING: IRQ 0x%x still enabled on #VMEXIT\n",
+				nested_vmcb->control.int_vector);

CHECK:BOOL_COMPARISON: Using comparison to true is error prone
#299: FILE: arch/x86/kvm/svm.c:1488:
+	if (svm->vcpu.arch.exception.pending == true)

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_exit', this function's name, in a string
#354: FILE: arch/x86/kvm/svm.c:2083:
+		nsvm_printk("nested handle_exit: 0x%x | 0x%lx | 0x%lx | 0x%lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161950.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 13 warnings, 3 checks, 341 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161950.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
