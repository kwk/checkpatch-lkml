CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#53: FILE: fs/exofs/exofs.h:187:
+int exofs_write_begin(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#53: FILE: fs/exofs/exofs.h:187:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#53: FILE: fs/exofs/exofs.h:187:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#63: FILE: fs/exofs/exofs.h:198:
+extern struct address_space_operations exofs_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#86: FILE: fs/exofs/inode.c:66:
+int exofs_write_begin(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#86: FILE: fs/exofs/inode.c:66:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#86: FILE: fs/exofs/inode.c:66:
+		loff_t pos, unsigned len, unsigned flags,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#93: FILE: fs/exofs/inode.c:73:
+	if (page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#100: FILE: fs/exofs/inode.c:80:
+	if (!PageUptodate(page) && (len != PAGE_CACHE_SIZE))
+			ret = __readpage_filler(page, false);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len != PAGE_CACHE_SIZE'
#100: FILE: fs/exofs/inode.c:80:
+	if (!PageUptodate(page) && (len != PAGE_CACHE_SIZE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: fs/exofs/inode.c:87:
+int exofs_write_begin_export(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#107: FILE: fs/exofs/inode.c:87:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#107: FILE: fs/exofs/inode.c:87:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#156: FILE: fs/exofs/inode.c:136:
+	unsigned offset = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#159: FILE: fs/exofs/inode.c:139:
+	uint64_t start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#160: FILE: fs/exofs/inode.c:140:
+	uint64_t len = PAGE_CACHE_SIZE;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#165: FILE: fs/exofs/inode.c:145:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: fs/exofs/inode.c:148:
+	 * just return.  otherwise, wait. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <ObjCreated>
#169: FILE: fs/exofs/inode.c:149:
+	if (!ObjCreated(oi)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Obj2BCreated>
#170: FILE: fs/exofs/inode.c:150:
+		if (!Obj2BCreated(oi))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#171: FILE: fs/exofs/inode.c:151:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: fs/exofs/inode.c:177:
+	BUG_ON(PageWriteback(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/exofs/inode.c:185:
+	req = prepare_osd_write(sbi->s_dev, sbi->s_pid,
+			      inode->i_ino + EXOFS_OBJ_OFF, len, start, 0,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#208: FILE: fs/exofs/inode.c:188:
+		printk(KERN_ERR "ERROR: writepage failed.\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#245: FILE: fs/exofs/inode.c:225:
+	if (ret == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: fs/exofs/inode.c:237:
+		 * locked */

CHECK:BRACES: Unbalanced braces around else statement
#264: FILE: fs/exofs/inode.c:244:
+	} else /* Error */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#292: FILE: fs/exofs/inode.c:272:
+	uint64_t amount;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: fs/exofs/inode.c:277:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#334: FILE: fs/exofs/inode.c:314:
+		printk(KERN_ERR "ERROR: readpage failed.\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: fs/exofs/inode.c:364:
+			   struct list_head *pages, unsigned nr_pages)

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#389: FILE: fs/exofs/inode.c:369:
+struct address_space_operations exofs_aops = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192063.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 13 checks, 345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192063.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
