WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: drivers/staging/dream/generic_gpio.c:1:
+/* arch/arm/mach-msm/generic_gpio.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/gpio.h> instead of <asm/gpio.h>
#62: FILE: drivers/staging/dream/generic_gpio.c:21:
+#include <asm/gpio.h>

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#65: FILE: drivers/staging/dream/generic_gpio.c:24:
+#define GPIO_NUM_TO_CHIP_INDEX(gpio) ((gpio)>>5)
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#85: FILE: drivers/staging/dream/generic_gpio.c:44:
+	new_gpio_chip->state = kzalloc((new_gpio_chip->end + 1 - new_gpio_chip->start) * sizeof(new_gpio_chip->state[0]), GFP_KERNEL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_gpio_chip->state"
#86: FILE: drivers/staging/dream/generic_gpio.c:45:
+	if (new_gpio_chip->state == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#87: FILE: drivers/staging/dream/generic_gpio.c:46:
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_gpio_chip', this function's name, in a string
#87: FILE: drivers/staging/dream/generic_gpio.c:46:
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#87: FILE: drivers/staging/dream/generic_gpio.c:46:
+	if (new_gpio_chip->state == NULL) {
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#98: FILE: drivers/staging/dream/generic_gpio.c:57:
+		new_gpio_chip_array = kmalloc(new_gpio_chip_array_size * sizeof(new_gpio_chip_array[0]), GFP_ATOMIC);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#98: FILE: drivers/staging/dream/generic_gpio.c:57:
+		new_gpio_chip_array = kmalloc(new_gpio_chip_array_size * sizeof(new_gpio_chip_array[0]), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_gpio_chip_array"
#99: FILE: drivers/staging/dream/generic_gpio.c:58:
+		if (new_gpio_chip_array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#100: FILE: drivers/staging/dream/generic_gpio.c:59:
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_gpio_chip', this function's name, in a string
#100: FILE: drivers/staging/dream/generic_gpio.c:59:
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#100: FILE: drivers/staging/dream/generic_gpio.c:59:
+		if (new_gpio_chip_array == NULL) {
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#117: FILE: drivers/staging/dream/generic_gpio.c:76:
+			printk(KERN_ERR "register_gpio_source %u-%u overlaps with %u-%u\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gpio_chip_array[i]"
#127: FILE: drivers/staging/dream/generic_gpio.c:86:
+		if (gpio_chip_array[i] == NULL || gpio_chip_array[i]->start > new_gpio_chip->start)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#146: FILE: drivers/staging/dream/generic_gpio.c:105:
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#166: FILE: drivers/staging/dream/generic_gpio.c:125:
+	if (chip == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: drivers/staging/dream/generic_gpio.c:130:
+	if (chip->state[chip_index].refcount == 0) {
[...]
+	} else if ((flags & IRQF_SHARED) && (chip->state[chip_index].flags & IRQF_SHARED))
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: drivers/staging/dream/generic_gpio.c:143:
+int gpio_request(unsigned gpio, const char *label)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#190: FILE: drivers/staging/dream/generic_gpio.c:149:
+void gpio_free(unsigned gpio)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#208: FILE: drivers/staging/dream/generic_gpio.c:167:
+	int ret = -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: drivers/staging/dream/generic_gpio.c:179:
+int gpio_to_irq(unsigned gpio)

WARNING:LINE_SPACING: Missing a blank line after declarations
#223: FILE: drivers/staging/dream/generic_gpio.c:182:
+	int ret, irq;
+	ret = gpio_get_irq_num(gpio, &irq, NULL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#232: FILE: drivers/staging/dream/generic_gpio.c:191:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#245: FILE: drivers/staging/dream/generic_gpio.c:204:
+int gpio_direction_input(unsigned gpio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#251: FILE: drivers/staging/dream/generic_gpio.c:210:
+int gpio_direction_output(unsigned gpio, int value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#258: FILE: drivers/staging/dream/generic_gpio.c:217:
+int gpio_get_value(unsigned gpio)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#260: FILE: drivers/staging/dream/generic_gpio.c:219:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#273: FILE: drivers/staging/dream/generic_gpio.c:232:
+void gpio_set_value(unsigned gpio, int on)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#275: FILE: drivers/staging/dream/generic_gpio.c:234:
+	int ret = -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#289: FILE: drivers/staging/dream/generic_gpio.c:248:
+	int ret = -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#304: FILE: drivers/staging/dream/generic_gpio.c:263:
+	int ret = -ENOTSUPP;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#323: FILE: drivers/staging/dream/pmem.c:1:
+/* drivers/android/pmem.c

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#348: FILE: drivers/staging/dream/pmem.c:26:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#349: FILE: drivers/staging/dream/pmem.c:27:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#350: FILE: drivers/staging/dream/pmem.c:28:
+#include <asm/cacheflush.h>

WARNING:TYPO_SPELLING: 'refernce' may be misspelled - perhaps 'reference'?
#358: FILE: drivers/staging/dream/pmem.c:36:
+/* indicates that a refernce to this file has been taken via get_pmem_file,
                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#359: FILE: drivers/staging/dream/pmem.c:37:
+ * the file should not be released until put_pmem_file is called */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#362: FILE: drivers/staging/dream/pmem.c:40:
+#define PMEM_FLAGS_CONNECTED 0x1 << 1

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#363: FILE: drivers/staging/dream/pmem.c:41:
+/* indicates this is a master and not a sub allocation and that it is mmaped */
                                                                       ^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#364: FILE: drivers/staging/dream/pmem.c:42:
+#define PMEM_FLAGS_MASTERMAP 0x1 << 2

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#366: FILE: drivers/staging/dream/pmem.c:44:
+ * 00: subregion has never been mmaped
                                 ^^^^^^

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#367: FILE: drivers/staging/dream/pmem.c:45:
+ * 10: subregion has been mmaped, reference to the mm was taken
                           ^^^^^^

WARNING:TYPO_SPELLING: 'refernece' may be misspelled - perhaps 'reference'?
#368: FILE: drivers/staging/dream/pmem.c:46:
+ * 11: subretion has ben released, refernece to the mm still held
                                    ^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#371: FILE: drivers/staging/dream/pmem.c:49:
+#define PMEM_FLAGS_SUBMAP 0x1 << 3

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#372: FILE: drivers/staging/dream/pmem.c:50:
+#define PMEM_FLAGS_UNSUBMAP 0x1 << 4

CHECK:LINE_SPACING: Please don't use multiple blank lines
#374: FILE: drivers/staging/dream/pmem.c:52:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#377: FILE: drivers/staging/dream/pmem.c:55:
+	 * in no_alloc mode: the size of the allocation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#383: FILE: drivers/staging/dream/pmem.c:61:
+	 * the order for vma_open and vma_close ops */

WARNING:TYPO_SPELLING: 'teh' may be misspelled - perhaps 'the'?
#389: FILE: drivers/staging/dream/pmem.c:67:
+	/* process id of teh mapping process */
 	                 ^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#416: FILE: drivers/staging/dream/pmem.c:94:
+#define DLOG(fmt,args...) \
                 ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#416: FILE: drivers/staging/dream/pmem.c:94:
+#define DLOG(fmt,args...) \
+	do { printk(KERN_INFO "[%s:%s:%d] "fmt, __FILE__, __func__, __LINE__, \
+		    ##args); } \
+	while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#417: FILE: drivers/staging/dream/pmem.c:95:
+	do { printk(KERN_INFO "[%s:%s:%d] "fmt, __FILE__, __func__, __LINE__, \

WARNING:TYPO_SPELLING: 'vitual' may be misspelled - perhaps 'virtual'?
#428: FILE: drivers/staging/dream/pmem.c:106:
+	/* vitual start address of the remaped pmem space */
 	   ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#439: FILE: drivers/staging/dream/pmem.c:117:
+	 * and which are free */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#442: FILE: drivers/staging/dream/pmem.c:120:
+	unsigned no_allocator;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#445: FILE: drivers/staging/dream/pmem.c:123:
+	 * O_SYNC to get an uncached region */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#446: FILE: drivers/staging/dream/pmem.c:124:
+	unsigned cached;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#447: FILE: drivers/staging/dream/pmem.c:125:
+	unsigned buffered;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#449: FILE: drivers/staging/dream/pmem.c:127:
+	 * this flag */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#450: FILE: drivers/staging/dream/pmem.c:128:
+	unsigned allocated;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#453: FILE: drivers/staging/dream/pmem.c:131:
+	 * needed */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#470: FILE: drivers/staging/dream/pmem.c:148:
+	long (*ioctl)(struct file *, unsigned int, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#470: FILE: drivers/staging/dream/pmem.c:148:
+	long (*ioctl)(struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#470: FILE: drivers/staging/dream/pmem.c:148:
+	long (*ioctl)(struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#471: FILE: drivers/staging/dream/pmem.c:149:
+	int (*release)(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#471: FILE: drivers/staging/dream/pmem.c:149:
+	int (*release)(struct inode *, struct file *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#479: FILE: drivers/staging/dream/pmem.c:157:
+#define PMEM_BUDDY_INDEX(id, index) (index ^ (1 << PMEM_ORDER(id, index)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'index' may be better as '(index)' to avoid precedence issues
#479: FILE: drivers/staging/dream/pmem.c:157:
+#define PMEM_BUDDY_INDEX(id, index) (index ^ (1 << PMEM_ORDER(id, index)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#480: FILE: drivers/staging/dream/pmem.c:158:
+#define PMEM_NEXT_INDEX(id, index) (index + (1 << PMEM_ORDER(id, index)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'index' may be better as '(index)' to avoid precedence issues
#480: FILE: drivers/staging/dream/pmem.c:158:
+#define PMEM_NEXT_INDEX(id, index) (index + (1 << PMEM_ORDER(id, index)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'index' may be better as '(index)' to avoid precedence issues
#481: FILE: drivers/staging/dream/pmem.c:159:
+#define PMEM_OFFSET(index) (index * PMEM_MIN_ALLOC)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#484: FILE: drivers/staging/dream/pmem.c:162:
+#define PMEM_END_ADDR(id, index) (PMEM_START_ADDR(id, index) + \
+	PMEM_LEN(id, index))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#484: FILE: drivers/staging/dream/pmem.c:162:
+#define PMEM_END_ADDR(id, index) (PMEM_START_ADDR(id, index) + \
+	PMEM_LEN(id, index))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#486: FILE: drivers/staging/dream/pmem.c:164:
+#define PMEM_START_VADDR(id, index) (PMEM_OFFSET(id, index) + pmem[id].vbase)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#487: FILE: drivers/staging/dream/pmem.c:165:
+#define PMEM_END_VADDR(id, index) (PMEM_START_VADDR(id, index) + \
+	PMEM_LEN(id, index))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#487: FILE: drivers/staging/dream/pmem.c:165:
+#define PMEM_END_VADDR(id, index) (PMEM_START_VADDR(id, index) + \
+	PMEM_LEN(id, index))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'data' may be better as '(data)' to avoid precedence issues
#489: FILE: drivers/staging/dream/pmem.c:167:
+#define PMEM_REVOKED(data) (data->flags & PMEM_FLAGS_REVOKED)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'data' - possible side-effects?
#491: FILE: drivers/staging/dream/pmem.c:169:
+#define PMEM_IS_SUBMAP(data) ((data->flags & PMEM_FLAGS_SUBMAP) && \
+	(!(data->flags & PMEM_FLAGS_UNSUBMAP)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'data' may be better as '(data)' to avoid precedence issues
#491: FILE: drivers/staging/dream/pmem.c:169:
+#define PMEM_IS_SUBMAP(data) ((data->flags & PMEM_FLAGS_SUBMAP) && \
+	(!(data->flags & PMEM_FLAGS_UNSUBMAP)))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#499: FILE: drivers/staging/dream/pmem.c:177:
+struct file_operations pmem_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: drivers/staging/dream/pmem.c:239:
+	int buddy, curr = index;
+	DLOG("index %d\n", index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/staging/dream/pmem.c:254:
+		if (PMEM_IS_FREE(id, buddy) &&
+				PMEM_ORDER(id, buddy) == PMEM_ORDER(id, curr)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#597: FILE: drivers/staging/dream/pmem.c:275:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#600: FILE: drivers/staging/dream/pmem.c:278:
+	 *  files */

WARNING:LINE_SPACING: Missing a blank line after declarations
#603: FILE: drivers/staging/dream/pmem.c:281:
+		struct pmem_data *sub_data;
+		list_for_each(elt, &pmem[id].data_list) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#606: FILE: drivers/staging/dream/pmem.c:284:
+			if (PMEM_IS_SUBMAP(sub_data) &&
[...]
+			}  else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#610: FILE: drivers/staging/dream/pmem.c:288:
+			}  else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#617: FILE: drivers/staging/dream/pmem.c:295:
+
+

WARNING:TYPO_SPELLING: 'conencted' may be misspelled - perhaps 'connected'?
#620: FILE: drivers/staging/dream/pmem.c:298:
+	/* if its not a conencted file and it has an allocation, free it */
 	                ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#628: FILE: drivers/staging/dream/pmem.c:306:
+	 * task struct */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#642: FILE: drivers/staging/dream/pmem.c:320:
+	BUG_ON(!list_empty(&data->region_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#661: FILE: drivers/staging/dream/pmem.c:339:
+	if (file->private_data != NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct pmem_data)...)
#663: FILE: drivers/staging/dream/pmem.c:341:
+	data = kmalloc(sizeof(struct pmem_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#665: FILE: drivers/staging/dream/pmem.c:343:
+		printk("pmem: unable to allocate memory for pmem metadata.");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#693: FILE: drivers/staging/dream/pmem.c:371:
+	len = (len + PMEM_MIN_ALLOC - 1)/PMEM_MIN_ALLOC;
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#695: FILE: drivers/staging/dream/pmem.c:373:
+	for (i = 0; i < sizeof(len)*8; i++)
 	                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > pmem[id].size'
#712: FILE: drivers/staging/dream/pmem.c:390:
+		if ((len > pmem[id].size) || pmem[id].allocated)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#723: FILE: drivers/staging/dream/pmem.c:401:
+^I * ^Iif you find a free slot of the correct order use it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#724: FILE: drivers/staging/dream/pmem.c:402:
+^I * ^Iotherwise, use the best fit (smallest with size > order) slot$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#745: FILE: drivers/staging/dream/pmem.c:423:
+		printk("pmem: no space left to allocate!\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#750: FILE: drivers/staging/dream/pmem.c:428:
+^I * ^Isplit the slot into 2 buddies of order - 1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#751: FILE: drivers/staging/dream/pmem.c:429:
+^I * ^Irepeat until the slot is of the correct order$

WARNING:LINE_SPACING: Missing a blank line after declarations
#755: FILE: drivers/staging/dream/pmem.c:433:
+		int buddy;
+		PMEM_ORDER(id, best_fit) -= 1;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#784: FILE: drivers/staging/dream/pmem.c:462:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: drivers/staging/dream/pmem.c:486:
+		if (vm_insert_pfn(vma, vma->vm_start + offset + (i * PAGE_SIZE),
+		    pmem[id].garbage_pfn))

WARNING:LINE_SPACING: Missing a blank line after declarations
#819: FILE: drivers/staging/dream/pmem.c:497:
+	int garbage_pages;
+	DLOG("unmap offset %lx len %lx\n", offset, len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#821: FILE: drivers/staging/dream/pmem.c:499:
+	BUG_ON(!PMEM_IS_PAGE_ALIGNED(len));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: drivers/staging/dream/pmem.c:512:
+	BUG_ON(!PMEM_IS_PAGE_ALIGNED(vma->vm_start));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#835: FILE: drivers/staging/dream/pmem.c:513:
+	BUG_ON(!PMEM_IS_PAGE_ALIGNED(vma->vm_end));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#836: FILE: drivers/staging/dream/pmem.c:514:
+	BUG_ON(!PMEM_IS_PAGE_ALIGNED(len));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#837: FILE: drivers/staging/dream/pmem.c:515:
+	BUG_ON(!PMEM_IS_PAGE_ALIGNED(offset));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: drivers/staging/dream/pmem.c:518:
+	if (io_remap_pfn_range(vma, vma->vm_start + offset,
+		(pmem_start_addr(id, data) + offset) >> PAGE_SHIFT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: drivers/staging/dream/pmem.c:526:
+static int pmem_remap_pfn_range(int id, struct vm_area_struct *vma,
+			      struct pmem_data *data, unsigned long offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#852: FILE: drivers/staging/dream/pmem.c:530:
+	BUG_ON(!vma);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#863: FILE: drivers/staging/dream/pmem.c:541:
+	 * ranges via fork */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#864: FILE: drivers/staging/dream/pmem.c:542:
+	BUG_ON(!has_allocation(file));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#879: FILE: drivers/staging/dream/pmem.c:557:
+		printk(KERN_WARNING "pmem: something is very wrong, you are "

WARNING:SPLIT_STRING: quoted string split across lines
#880: FILE: drivers/staging/dream/pmem.c:558:
+		printk(KERN_WARNING "pmem: something is very wrong, you are "
+		       "closing a vm backing an allocation that doesn't "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#881: FILE: drivers/staging/dream/pmem.c:559:
+		       "closing a vm backing an allocation that doesn't "
+		       "exist!\n");

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#895: FILE: drivers/staging/dream/pmem.c:573:
+static struct vm_operations_struct vm_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#909: FILE: drivers/staging/dream/pmem.c:587:
+		printk(KERN_ERR "pmem: mmaps must be at offset zero, aligned"

WARNING:SPLIT_STRING: quoted string split across lines
#910: FILE: drivers/staging/dream/pmem.c:588:
+		printk(KERN_ERR "pmem: mmaps must be at offset zero, aligned"
+				" and a multiple of pages_size.\n");

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#917: FILE: drivers/staging/dream/pmem.c:595:
+	/* check this file isn't already mmaped, for submaps check this file
 	                                 ^^^^^^

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#918: FILE: drivers/staging/dream/pmem.c:596:
+	 * has never been mmaped */
 	                  ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#918: FILE: drivers/staging/dream/pmem.c:596:
+	 * has never been mmaped */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#923: FILE: drivers/staging/dream/pmem.c:601:
+		printk(KERN_ERR "pmem: you can only mmap a pmem file once, "

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#924: FILE: drivers/staging/dream/pmem.c:602:
+		       "this file is already mmaped. %x\n", data->flags);
 		                             ^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#924: FILE: drivers/staging/dream/pmem.c:602:
+		printk(KERN_ERR "pmem: you can only mmap a pmem file once, "
+		       "this file is already mmaped. %x\n", data->flags);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#936: FILE: drivers/staging/dream/pmem.c:614:
+	/* either no space was available or an error occured */
 	                                             ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#939: FILE: drivers/staging/dream/pmem.c:617:
+		printk("pmem: could not find allocation for map.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#945: FILE: drivers/staging/dream/pmem.c:623:
+		printk(KERN_WARNING "pmem: mmap size [%lu] does not match"

WARNING:SPLIT_STRING: quoted string split across lines
#946: FILE: drivers/staging/dream/pmem.c:624:
+		printk(KERN_WARNING "pmem: mmap size [%lu] does not match"
+		       "size of backing region [%lu].\n", vma_size,

WARNING:MISSING_SPACE: break quoted strings at a space character
#946: FILE: drivers/staging/dream/pmem.c:624:
+		printk(KERN_WARNING "pmem: mmap size [%lu] does not match"
+		       "size of backing region [%lu].\n", vma_size,

WARNING:LINE_SPACING: Missing a blank line after declarations
#959: FILE: drivers/staging/dream/pmem.c:637:
+		struct list_head *elt;
+		if (pmem_map_garbage(id, vma, data, 0, vma_size)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#960: FILE: drivers/staging/dream/pmem.c:638:
+			printk("pmem: mmap failed in kernel!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#968: FILE: drivers/staging/dream/pmem.c:646:
+			DLOG("remapping file: %p %lx %lx\n", file,
+				region_node->region.offset,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#988: FILE: drivers/staging/dream/pmem.c:666:
+			printk(KERN_INFO "pmem: mmap failed in kernel!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1002: FILE: drivers/staging/dream/pmem.c:680:
+ * from inside the kernel */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1004: FILE: drivers/staging/dream/pmem.c:682:
+int get_pmem_user_addr(struct file *file, unsigned long *start,
+		   unsigned long *len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1007: FILE: drivers/staging/dream/pmem.c:685:
+	struct pmem_data *data;
+	if (!is_pmem_file(file) || !has_allocation(file)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1009: FILE: drivers/staging/dream/pmem.c:687:
+		printk(KERN_INFO "pmem: requested pmem data from invalid"

WARNING:SPLIT_STRING: quoted string split across lines
#1010: FILE: drivers/staging/dream/pmem.c:688:
+		printk(KERN_INFO "pmem: requested pmem data from invalid"
+				  "file.\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#1010: FILE: drivers/staging/dream/pmem.c:688:
+		printk(KERN_INFO "pmem: requested pmem data from invalid"
+				  "file.\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1033: FILE: drivers/staging/dream/pmem.c:711:
+	if (!is_pmem_file(file) || !has_allocation(file)) {
+		return -1;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1040: FILE: drivers/staging/dream/pmem.c:718:
+		printk(KERN_INFO "pmem: requested pmem data from file with no "

WARNING:SPLIT_STRING: quoted string split across lines
#1041: FILE: drivers/staging/dream/pmem.c:719:
+		printk(KERN_INFO "pmem: requested pmem data from file with no "
+		       "allocation.\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1061: FILE: drivers/staging/dream/pmem.c:739:
+		  unsigned long *len, struct file **filp)
 		                                    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#1066: FILE: drivers/staging/dream/pmem.c:744:
+	if (unlikely(file == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1067: FILE: drivers/staging/dream/pmem.c:745:
+		printk(KERN_INFO "pmem: requested data from file descriptor "

WARNING:SPLIT_STRING: quoted string split across lines
#1068: FILE: drivers/staging/dream/pmem.c:746:
+		printk(KERN_INFO "pmem: requested data from file descriptor "
+		       "that doesn't exist.");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1075: FILE: drivers/staging/dream/pmem.c:753:
+	if (filp)
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1076: FILE: drivers/staging/dream/pmem.c:754:
+		*filp = file;
 		 ^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1095: FILE: drivers/staging/dream/pmem.c:773:
+		printk("pmem: pmem_put > pmem_get %s (pid %d)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1097: FILE: drivers/staging/dream/pmem.c:775:
+		BUG();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1114: FILE: drivers/staging/dream/pmem.c:792:
+	if (!is_pmem_file(file) || !has_allocation(file)) {
+		return;
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset >= region_node->region.offset'
#1133: FILE: drivers/staging/dream/pmem.c:811:
+		if ((offset >= region_node->region.offset) &&
+		    ((offset + len) <= (region_node->region.offset +
+			region_node->region.len))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1158: FILE: drivers/staging/dream/pmem.c:836:
+		printk("pmem: src file not found!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1163: FILE: drivers/staging/dream/pmem.c:841:
+		printk(KERN_INFO "pmem: src file is not a pmem file or has no "

WARNING:SPLIT_STRING: quoted string split across lines
#1164: FILE: drivers/staging/dream/pmem.c:842:
+		printk(KERN_INFO "pmem: src file is not a pmem file or has no "
+		       "alloc!\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'data->index != src_data->index'
#1170: FILE: drivers/staging/dream/pmem.c:848:
+	if (has_allocation(file) && (data->index != src_data->index)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1171: FILE: drivers/staging/dream/pmem.c:849:
+		printk("pmem: file is already mapped but doesn't match this"

WARNING:SPLIT_STRING: quoted string split across lines
#1172: FILE: drivers/staging/dream/pmem.c:850:
+		printk("pmem: file is already mapped but doesn't match this"
+		       " src_file!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mm"
#1192: FILE: drivers/staging/dream/pmem.c:870:
+	if (mm != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1210: FILE: drivers/staging/dream/pmem.c:888:
+			printk("pmem: can't remap task is gone!\n");

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#1222: FILE: drivers/staging/dream/pmem.c:900:
+	/* check that the file didn't get mmaped before we could take the
 	                                  ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1224: FILE: drivers/staging/dream/pmem.c:902:
+	 * once */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1231: FILE: drivers/staging/dream/pmem.c:909:
+	 * deleted by vma_close before we could get the data->sem */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mm != NULL'
#1232: FILE: drivers/staging/dream/pmem.c:910:
+	if ((data->flags & PMEM_FLAGS_UNSUBMAP) && (mm != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mm"
#1232: FILE: drivers/staging/dream/pmem.c:910:
+	if ((data->flags & PMEM_FLAGS_UNSUBMAP) && (mm != NULL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1248: FILE: drivers/staging/dream/pmem.c:926:
+int pmem_remap(struct pmem_region *region, struct file *file,
+		      unsigned operation)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1248: FILE: drivers/staging/dream/pmem.c:926:
+		      unsigned operation)

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#1257: FILE: drivers/staging/dream/pmem.c:935:
+	/* pmem region must be aligned on a page boundry */
 	                                         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1259: FILE: drivers/staging/dream/pmem.c:937:
+	if (unlikely(!PMEM_IS_PAGE_ALIGNED(region->offset) ||
+		 !PMEM_IS_PAGE_ALIGNED(region->len))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1261: FILE: drivers/staging/dream/pmem.c:939:
+		printk("pmem: request for unaligned pmem suballocation "

WARNING:SPLIT_STRING: quoted string split across lines
#1262: FILE: drivers/staging/dream/pmem.c:940:
+		printk("pmem: request for unaligned pmem suballocation "
+		       "%lx %lx\n", region->offset, region->len);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1277: FILE: drivers/staging/dream/pmem.c:955:
+	 * that back in it */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1280: FILE: drivers/staging/dream/pmem.c:958:
+		printk("pmem: remap requested from non-master process\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'region->offset > pmem_len(id, data)'
#1287: FILE: drivers/staging/dream/pmem.c:965:
+	if (unlikely((region->offset > pmem_len(id, data)) ||
+		     (region->len > pmem_len(id, data)) ||
+		     (region->offset + region->len > pmem_len(id, data)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'region->len > pmem_len(id, data)'
#1287: FILE: drivers/staging/dream/pmem.c:965:
+	if (unlikely((region->offset > pmem_len(id, data)) ||
+		     (region->len > pmem_len(id, data)) ||
+		     (region->offset + region->len > pmem_len(id, data)))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1291: FILE: drivers/staging/dream/pmem.c:969:
+		printk(KERN_INFO "pmem: suballoc doesn't fit in src_file!\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*region_node)...) over kmalloc(sizeof(struct pmem_region_node)...)
#1298: FILE: drivers/staging/dream/pmem.c:976:
+		region_node = kmalloc(sizeof(struct pmem_region_node),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: drivers/staging/dream/pmem.c:977:
+		region_node = kmalloc(sizeof(struct pmem_region_node),
+			      GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1303: FILE: drivers/staging/dream/pmem.c:981:
+			printk(KERN_INFO "No space to allocate metadata!");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1311: FILE: drivers/staging/dream/pmem.c:989:
+		int found = 0;
+		list_for_each_safe(elt, elt2, &data->region_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1313: FILE: drivers/staging/dream/pmem.c:991:
+			region_node = list_entry(elt, struct pmem_region_node,
+				      list);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1324: FILE: drivers/staging/dream/pmem.c:1002:
+			printk("pmem: Unmap region does not map any mapped "

WARNING:SPLIT_STRING: quoted string split across lines
#1325: FILE: drivers/staging/dream/pmem.c:1003:
+			printk("pmem: Unmap region does not map any mapped "
+				"region!");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1358: FILE: drivers/staging/dream/pmem.c:1036:
+	 * needs to be done */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1386: FILE: drivers/staging/dream/pmem.c:1064:
+		return;
+	} else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1393: FILE: drivers/staging/dream/pmem.c:1071:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1403: FILE: drivers/staging/dream/pmem.c:1081:
+			struct pmem_region region;
+			DLOG("get_phys\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1412: FILE: drivers/staging/dream/pmem.c:1090:
+			printk(KERN_INFO "pmem: request for physical address of pmem region "

WARNING:SPLIT_STRING: quoted string split across lines
#1413: FILE: drivers/staging/dream/pmem.c:1091:
+			printk(KERN_INFO "pmem: request for physical address of pmem region "
+					"from process %d.\n", current->pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1415: FILE: drivers/staging/dream/pmem.c:1093:
+			if (copy_to_user((void __user *)arg, &region,
+						sizeof(struct pmem_region)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1422: FILE: drivers/staging/dream/pmem.c:1100:
+			struct pmem_region region;
+			if (copy_from_user(&region, (void __user *)arg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1423: FILE: drivers/staging/dream/pmem.c:1101:
+			if (copy_from_user(&region, (void __user *)arg,
+						sizeof(struct pmem_region)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1432: FILE: drivers/staging/dream/pmem.c:1110:
+			struct pmem_region region;
+			if (copy_from_user(&region, (void __user *)arg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1433: FILE: drivers/staging/dream/pmem.c:1111:
+			if (copy_from_user(&region, (void __user *)arg,
+						sizeof(struct pmem_region)))

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1437: FILE: drivers/staging/dream/pmem.c:1115:
+			return pmem_remap(&region, file, PMEM_UNMAP);
+			break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1442: FILE: drivers/staging/dream/pmem.c:1120:
+			struct pmem_region region;
+			DLOG("get_size\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1445: FILE: drivers/staging/dream/pmem.c:1123:
+			if (copy_to_user((void __user *)arg, &region,
+						sizeof(struct pmem_region)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1452: FILE: drivers/staging/dream/pmem.c:1130:
+			struct pmem_region region;
+			DLOG("get total size\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: drivers/staging/dream/pmem.c:1135:
+			if (copy_to_user((void __user *)arg, &region,
+						sizeof(struct pmem_region)))

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1472: FILE: drivers/staging/dream/pmem.c:1150:
+		return pmem_connect(arg, file);
+		break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1511: FILE: drivers/staging/dream/pmem.c:1189:
+			region_node = list_entry(elt2, struct pmem_region_node,
+				      list);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1527: FILE: drivers/staging/dream/pmem.c:1205:
+static struct file_operations debug_fops = {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1533: FILE: drivers/staging/dream/pmem.c:1211:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#1547: FILE: drivers/staging/dream/pmem.c:1225:
+	int id = id_count;
+	id_count++;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1562: FILE: drivers/staging/dream/pmem.c:1240:
+	printk(KERN_INFO "%s: %d init\n", pdata->name, pdata->cached);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1566: FILE: drivers/staging/dream/pmem.c:1244:
+		printk(KERN_ALERT "Unable to register pmem driver!\n");

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1571: FILE: drivers/staging/dream/pmem.c:1249:
+	pmem[id].bitmap = kmalloc(pmem[id].num_entries *
+				  sizeof(struct pmem_bits), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1580: FILE: drivers/staging/dream/pmem.c:1258:
+		if ((pmem[id].num_entries) &  1<<i) {
 		                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmem[id].num_entries'
#1580: FILE: drivers/staging/dream/pmem.c:1258:
+		if ((pmem[id].num_entries) &  1<<i) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1605: FILE: drivers/staging/dream/pmem.c:1283:
+	debugfs_create_file(pdata->name, S_IFREG | S_IRUGO, NULL, (void *)id,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1622: FILE: drivers/staging/dream/pmem.c:1300:
+		printk(KERN_ALERT "Unable to probe pmem!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1629: FILE: drivers/staging/dream/pmem.c:1307:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1633: FILE: drivers/staging/dream/pmem.c:1311:
+	int id = pdev->id;
+	__free_page(pfn_to_page(pmem[id].garbage_pfn));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1644: FILE: drivers/staging/dream/pmem.c:1322:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000053690.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 155 warnings, 61 checks, 1609 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000053690.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
