WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#80: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: fs/9p/clnt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#86: FILE: fs/9p/clnt.c:2:
+ * linux/fs/9p/clnt.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#104: FILE: fs/9p/clnt.c:20:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#115: FILE: fs/9p/clnt.c:31:
+#include <asm/uaccess.h>

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#130: FILE: fs/9p/clnt.c:45:
msize, int dotu)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*clnt)...) over kmalloc(sizeof(struct v9fs_clnt)...)
#140: FILE: fs/9p/clnt.c:55:
+	clnt = kmalloc(sizeof(struct v9fs_clnt), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#160: FILE: fs/9p/clnt.c:75:
+	tc = v9fs_create_tversion(clnt->msize, clnt->dotu?"9P2000.u":"9P2000");
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#160: FILE: fs/9p/clnt.c:75:
+	tc = v9fs_create_tversion(clnt->msize, clnt->dotu?"9P2000.u":"9P2000");
 	                                                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#172: FILE: fs/9p/clnt.c:87:
+	if (version->len == 8 && !memcmp(version->str, "9P2000.u", 8))
[...]
+	else if (version->len == 6 && !memcmp(version->str, "9P2000", 6))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#176: FILE: fs/9p/clnt.c:91:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <Disconnected>
#222: FILE: fs/9p/clnt.c:137:
+	clnt->trans->status = Disconnected;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#235: FILE: fs/9p/clnt.c:149:
+		clnt, afid?afid->fid:-1, uname, aname);
 		          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#235: FILE: fs/9p/clnt.c:149:
+		clnt, afid?afid->fid:-1, uname, aname);
 		                    ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#235: FILE: fs/9p/clnt.c:149:
+		clnt, afid?afid->fid:-1, uname, aname);
 		                     ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#247: FILE: fs/9p/clnt.c:161:
+	tc = v9fs_create_tattach(fid->fid, afid?afid->fid:V9FS_NOFID, uname, aname);
 	                                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#247: FILE: fs/9p/clnt.c:161:
+	tc = v9fs_create_tattach(fid->fid, afid?afid->fid:V9FS_NOFID, uname, aname);
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: fs/9p/clnt.c:186:
+struct v9fs_fid *v9fs_clnt_auth(struct v9fs_clnt *clnt, char *uname,
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/9p/clnt.c:228:
+struct v9fs_fid *v9fs_clnt_walk(struct v9fs_fid *oldfid, int nwname,
+	int clone)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#324: FILE: fs/9p/clnt.c:236:
+		oldfid->fid, nwname, wnames?wnames[0]:NULL);
 		                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#324: FILE: fs/9p/clnt.c:236:
+		oldfid->fid, nwname, wnames?wnames[0]:NULL);
 		                                     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#329: FILE: fs/9p/clnt.c:241:
+	if (clone) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#338: FILE: fs/9p/clnt.c:250:
+	} else

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#387: FILE: fs/9p/clnt.c:299:
+	if (fid && fid!=oldfid)
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: fs/9p/clnt.c:341:
+int v9fs_clnt_fcreate(struct v9fs_fid *fid, char *name, u32 perm, int mode,
+		     char *extension)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: fs/9p/clnt.c:358:
+	tc = v9fs_create_tcreate(fid->fid, name, perm, mode, extension,
+		clnt->dotu);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#542: FILE: fs/9p/clnt.c:454:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#542: FILE: fs/9p/clnt.c:454:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#573: FILE: fs/9p/clnt.c:485:
+	} while (count>0 && n == rsize);
 	              ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#598: FILE: fs/9p/clnt.c:510:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#598: FILE: fs/9p/clnt.c:510:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#625: FILE: fs/9p/clnt.c:537:
+	} while (count>0);
 	              ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#651: FILE: fs/9p/clnt.c:562:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#651: FILE: fs/9p/clnt.c:562:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#687: FILE: fs/9p/clnt.c:598:
+	} while (count>0 && n == rsize);
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: fs/9p/clnt.c:609:
+int v9fs_clnt_uwrite(struct v9fs_fid *fid, const char __user *data,
+{

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#713: FILE: fs/9p/clnt.c:623:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#713: FILE: fs/9p/clnt.c:623:
+	if (!rsize || rsize>clnt->msize-V9FS_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#740: FILE: fs/9p/clnt.c:650:
+	} while (count>0);
 	              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#860: FILE: fs/9p/clnt.c:770:
+	if (offset<fid->rdir_fpos || (fid->rdir_fcall &&
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: fs/9p/clnt.c:771:
+	if (offset<fid->rdir_fpos || (fid->rdir_fcall &&
+		offset >= fid->rdir_fpos+fid->rdir_fcall->params.rread.count)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#861: FILE: fs/9p/clnt.c:771:
+		offset >= fid->rdir_fpos+fid->rdir_fcall->params.rread.count)) {
 		                        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#874: FILE: fs/9p/clnt.c:784:
+		if (!n || n>clnt->msize-V9FS_IOHDRSZ)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#874: FILE: fs/9p/clnt.c:784:
+		if (!n || n>clnt->msize-V9FS_IOHDRSZ)
 		                       ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#901: FILE: fs/9p/clnt.c:811:
+			if (offset>=fid->rdir_fpos && offset<fid->rdir_fpos+n)
 			          ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#901: FILE: fs/9p/clnt.c:811:
+			if (offset>=fid->rdir_fpos && offset<fid->rdir_fpos+n)
 			                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#901: FILE: fs/9p/clnt.c:811:
+			if (offset>=fid->rdir_fpos && offset<fid->rdir_fpos+n)
 			                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: fs/9p/clnt.c:823:
+	n = v9fs_deserialize_stat(fid->rdir_fcall->params.rread.data + m,
+		fid->rdir_fcall->params.rread.count - m, &st, clnt->dotu);

CHECK:SPACING: No space is necessary after a cast
#958: FILE: fs/9p/clnt.c:868:
+	p = ((char *) ret) + sizeof(struct v9fs_stat);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fid)...) over kmalloc(sizeof(struct v9fs_fid)...)
#982: FILE: fs/9p/clnt.c:892:
+	fid = kmalloc(sizeof(struct v9fs_fid), GFP_KERNEL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1031: FILE: fs/9p/clnt.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1032: FILE: fs/9p/clnt.h:2:
+ * linux/fs/9p/clnt.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1050: FILE: fs/9p/clnt.h:20:
+ *  51 Franklin Street, Fifth Floor$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1056: FILE: fs/9p/clnt.h:26:
+	spinlock_t lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1091: FILE: fs/9p/clnt.h:58:
+struct v9fs_fid *v9fs_clnt_auth(struct v9fs_clnt *clnt, char *uname,
+struct v9fs_fid *v9fs_clnt_walk(struct v9fs_fid *oldfid, int nwname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: fs/9p/clnt.h:58:
+struct v9fs_fid *v9fs_clnt_auth(struct v9fs_clnt *clnt, char *uname,
char **wnames,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1093: FILE: fs/9p/clnt.h:59:
+struct v9fs_fid *v9fs_clnt_walk(struct v9fs_fid *oldfid, int nwname,
+	int clone);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: fs/9p/clnt.h:62:
+int v9fs_clnt_fcreate(struct v9fs_fid *fid, char *name, u32 perm, int mode,
+	char *extension);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ffset' should also have an identifier name
#1104: FILE: fs/9p/clnt.h:69:
+int v9fs_clnt_uwrite(struct v9fs_fid *fid, const char __user *data,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: fs/9p/clnt.h:70:
+int v9fs_clnt_uwrite(struct v9fs_fid *fid, const char __user *data,
+struct v9fs_stat *v9fs_clnt_stat(struct v9fs_fid *fid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1119: FILE: fs/9p/conv.c:455:
+v9fs_put_data(struct cbuf *bufp, const char *data, int count,
+		   unsigned char **pdata)

WARNING:INDENTED_LABEL: labels should not be indented
#1178: FILE: fs/9p/conv.c:758:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: fs/9p/conv.c:763:
+struct v9fs_fcall *v9fs_create_twrite_u(u32 fid, u64 offset, u32 count,
 				      const char __user * data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1205: FILE: fs/9p/conv.h:48:
+struct v9fs_fcall *v9fs_create_twrite_u(u32 fid, u64 offset, u32 count,
 	const char __user *data);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dent)...) over kmalloc(sizeof(struct v9fs_dentry)...)
#1704: FILE: fs/9p/fid.c:52:
+		dent = kmalloc(sizeof(struct v9fs_dentry), GFP_KERNEL);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1892: FILE: fs/9p/fid.h:26:
+	spinlock_t lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1920: FILE: fs/9p/trans_fd.c:56:
+static unsigned int v9fs_fd_poll(struct v9fs_transport *trans,
+	struct poll_table_struct *pt);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct v9fs_transport)...)
#1931: FILE: fs/9p/trans_fd.c:67:
+	trans = kmalloc(sizeof(struct v9fs_transport), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct v9fs_transport)...)
#1983: FILE: fs/9p/trans_fd.c:119:
+	trans = kmalloc(sizeof(struct v9fs_transport), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2031: FILE: fs/9p/trans_fd.c:167:
+		printk(KERN_ERR "v9fs: Insufficient options for proto=fd\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct v9fs_transport)...)
#2035: FILE: fs/9p/trans_fd.c:171:
+	trans = kmalloc(sizeof(struct v9fs_transport), GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'v9fs_socket_open', this function's name, in a string
#2063: FILE: fs/9p/trans_fd.c:198:
+		eprintk(KERN_ERR, "v9fs_socket_open: failed to map fd\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'v9fs_socket_open', this function's name, in a string
#2069: FILE: fs/9p/trans_fd.c:204:
+		eprintk(KERN_ERR, "v9fs_socket_open: failed to open fd\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ts)...) over kmalloc(sizeof(struct v9fs_trans_fd)...)
#2081: FILE: fs/9p/trans_fd.c:216:
+	struct v9fs_trans_fd *ts = kmalloc(sizeof(struct v9fs_trans_fd),

CHECK:CAMELCASE: Avoid CamelCase: <Connected>
#2098: FILE: fs/9p/trans_fd.c:233:
+	trans->status = Connected;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2300: FILE: fs/9p/v9fs.c:271:
+struct v9fs_fid *v9fs_session_init(struct v9fs_session_info *v9ses,
 		  const char *dev_name, char *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2418: FILE: fs/9p/v9fs.c:320:
+	v9ses->clnt = v9fs_clnt_create(trans, v9ses->maxdata + V9FS_IOHDRSZ,
+		v9ses->extended);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_session_info *' should also have an identifier name
#2530: FILE: fs/9p/v9fs.h:77:
+struct v9fs_fid *v9fs_session_init(struct v9fs_session_info *, const

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const
 har *' should also have an identifier name
#2530: FILE: fs/9p/v9fs.h:77:
+struct v9fs_fid *v9fs_session_init(struct v9fs_session_info *, const

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2530: FILE: fs/9p/v9fs.h:77:
+struct v9fs_fid *v9fs_session_init(struct v9fs_session_info *, const

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2776: FILE: fs/9p/vfs_dir.c:92:
+		over = filldir(dirent, st->name.str, st->name.len, filp->f_pos,
+			v9fs_qid2ino(&st->qid), dt_type(st));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#2778: FILE: fs/9p/vfs_dir.c:94:
+		if (over)
 				break;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2818: FILE: fs/9p/vfs_dir.c:119:
+	dprintk(DEBUG_VFS, "inode: %p filp: %p fid: %d\n", inode, filp, fid->fid);
 	                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2818: FILE: fs/9p/vfs_dir.c:119:
+	dprintk(DEBUG_VFS, "inode: %p filp: %p fid: %d\n", inode, filp, fid->fid);
 	                                                          ^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#2880: FILE: fs/9p/vfs_file.c:72:
 	if (err < 0) {
+			v9fs_clnt_clunk(fid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fid->qid.version'
#2899: FILE: fs/9p/vfs_file.c:79:
+	if((fid->qid.version) && (v9ses->cache)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v9ses->cache'
#2899: FILE: fs/9p/vfs_file.c:79:
+	if((fid->qid.version) && (v9ses->cache)) {

ERROR:SPACING: space required before the open parenthesis '('
#2899: FILE: fs/9p/vfs_file.c:79:
+	if((fid->qid.version) && (v9ses->cache)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3123: FILE: fs/9p/vfs_inode.c:310:
+v9fs_inode_from_fid(struct v9fs_session_info *v9ses, struct v9fs_fid *fid,
 	struct super_block *sb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3235: FILE: fs/9p/vfs_inode.c:386:
+static struct v9fs_fid *v9fs_create(struct v9fs_session_info *v9ses,
+	struct dentry *dentry, char *extension, u32 perm, u8 mode)

CHECK:SPACING: No space is necessary after a cast
#3254: FILE: fs/9p/vfs_inode.c:396:
+	name = (char *) dentry->d_name.name;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3291: FILE: fs/9p/vfs_inode.c:418:
+	if (IS_ERR(fid)) {
[...]
-	}
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3296: FILE: fs/9p/vfs_inode.c:422:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3340: FILE: fs/9p/vfs_inode.c:459:
+ * @nd: path information
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3346: FILE: fs/9p/vfs_inode.c:465:
+		struct nameidata *nd)
 		                  ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3353: FILE: fs/9p/vfs_inode.c:472:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3359: FILE: fs/9p/vfs_inode.c:478:
+	if (nd && nd->flags & LOOKUP_OPEN)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3372: FILE: fs/9p/vfs_inode.c:491:
+	if (nd && nd->flags & LOOKUP_OPEN) {
 	    ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3372: FILE: fs/9p/vfs_inode.c:491:
+	if (nd && nd->flags & LOOKUP_OPEN) {
[...]

[...]

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3377: FILE: fs/9p/vfs_inode.c:494:
+			err = PTR_ERR(filp);
 			              ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#3389: FILE: fs/9p/vfs_inode.c:499:
+	} else

ERROR:SPACING: space required before the open parenthesis '('
#3520: FILE: fs/9p/vfs_inode.c:566:
+	if(IS_ERR(dfid))

CHECK:SPACING: No space is necessary after a cast
#3523: FILE: fs/9p/vfs_inode.c:569:
+	name = (char *) dentry->d_name.name;

CHECK:SPACING: No space is necessary after a cast
#3899: FILE: fs/9p/vfs_inode.c:1010:
+	fid = v9fs_create(v9ses, dir, dentry, (char *) extension, perm, V9FS_OREAD);

ERROR:SPACING: space required before the open parenthesis '('
#3900: FILE: fs/9p/vfs_inode.c:1011:
+	if(IS_ERR(fid))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#4090: FILE: fs/9p/vfs_super.c:175:
+	if (v9ses) {
 	v9fs_session_close(v9ses);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#4099: FILE: fs/9p/vfs_super.c:180:
+	if (sb) {
 	up_write(&sb->s_umount);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438319.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 26 warnings, 60 checks, 3449 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438319.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
