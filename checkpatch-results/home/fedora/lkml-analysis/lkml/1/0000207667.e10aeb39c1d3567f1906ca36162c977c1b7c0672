CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: arch/x86/kernel/traps_64.c:114:
+static void buf_printk_address(char **posp, char *end, unsigned long address,
+			int reliable)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: arch/x86/kernel/traps_64.c:137:
+	buf_printk(posp, end, " [<%016lx>] %s%s%s%s%s+0x%lx/0x%lx\n",
+		address, reliab, delim, modname, delim, symname, offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: arch/x86/kernel/traps_64.c:142:
+static void buf_printk_address(char **posp, char *end, unsigned long address,
+			int reliable)

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: arch/x86/kernel/traps_64.c:392:
+	struct arch_unwind *unw = (struct arch_unwind *)data;
+	buf_printk(unw->posp, unw->end, " <%s> ", name);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#176: FILE: arch/x86/kernel/traps_64.c:410:
+static void
+buf_show_trace(char **posp, char *end,
+		struct task_struct *tsk, struct pt_regs *regs,
+		unsigned long *stack, unsigned long bp) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: arch/x86/kernel/traps_64.c:412:
+buf_show_trace(char **posp, char *end,
+		struct task_struct *tsk, struct pt_regs *regs,

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: arch/x86/kernel/traps_64.c:415:
+	struct arch_unwind unw;
+	unw.posp = posp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: arch/x86/kernel/traps_64.c:475:
+		    unsigned long * sp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: fs/proc/base.c:2274:
+static int proc_pid_trace(struct task_struct *task, char * buffer)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#291: FILE: fs/proc/base.c:2602:
+	INF("trace",  S_IFREG|S_IRUGO, pid_trace),
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#291: FILE: fs/proc/base.c:2602:
+	INF("trace",  S_IFREG|S_IRUGO, pid_trace),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/kallsyms.h:34:
+extern void __buf_print_symbol(char **posp, char *end,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: include/linux/kernel.h:227:
+extern void buf_printk(char **posp, char *end, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#337: FILE: include/linux/kernel.h:228:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#348: FILE: include/linux/sched.h:270:
+extern void buf_show_task(char **posp, char *end, struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#358: FILE: include/linux/sched.h:285:
+extern void buf_show_stack(char **posp, char *end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: include/linux/sched.h:289:
+static inline void buf_show_stack(char **posp, char *end,
+			     struct task_struct *task, unsigned long *sp)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!posp"
#364: FILE: include/linux/sched.h:291:
+	if (posp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "posp"
#410: FILE: kernel/printk.c:664:
+	if (posp != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: kernel/sched.c:5408:
+	buf_printk(posp, end, KERN_INFO "%-13.13s %c", p->comm,
 		state < sizeof(stat_nam) - 1 ? stat_nam[state] : '?');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: kernel/sched.c:5429:
+	buf_printk(posp, end, KERN_CONT "%5lu %5d %6d\n", free,
 		task_pid_nr(p), task_pid_nr(p->real_parent));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207667.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 4 warnings, 14 checks, 380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207667.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
