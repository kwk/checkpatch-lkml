WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#154: FILE: fs/ocfs2/journal.h:348:
+ * dinode, xattr block */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Opt_user_xattr>
#301: FILE: fs/ocfs2/super.c:158:
+	Opt_user_xattr,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nouser_xattr>
#302: FILE: fs/ocfs2/super.c:159:
+	Opt_nouser_xattr,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: fs/ocfs2/xattr.c:57:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#499: FILE: fs/ocfs2/xattr.c:125:
+		       (hash >> (8*sizeof(hash) - OCFS2_HASH_SHIFT)) ^
 		                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#505: FILE: fs/ocfs2/xattr.c:131:
+		       (hash >> (8*sizeof(hash) - OCFS2_HASH_SHIFT)) ^
 		                  ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#533: FILE: fs/ocfs2/xattr.c:159:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#650: FILE: fs/ocfs2/xattr.c:538:
+	if (i_ret < 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#652: FILE: fs/ocfs2/xattr.c:540:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#678: FILE: fs/ocfs2/xattr.c:566:
+	if (name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#896: FILE: fs/ocfs2/xattr.c:784:
+	xis.inode_bh = xbs.inode_bh = di_bh;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#927: FILE: fs/ocfs2/xattr.c:815:
+	BUG_ON(clusters > le32_to_cpu(xv->xr_clusters));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1160: FILE: fs/ocfs2/xattr.c:1048:
+			/* The old and the new value have the
+			   same size. Just replace the value. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1160: FILE: fs/ocfs2/xattr.c:1048:
+			   same size. Just replace the value. */

WARNING:RETURN_VOID: void function return statements are not generally useful
#1219: FILE: fs/ocfs2/xattr.c:1107:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1254: FILE: fs/ocfs2/xattr.c:1142:
+		size_t offs = le16_to_cpu(last->xe_name_offset);
+		if (offs < min_offs)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1265: FILE: fs/ocfs2/xattr.c:1153:
+		size_t size = 0;
+		if (ocfs2_xattr_is_local(xs->here))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1310: FILE: fs/ocfs2/xattr.c:1198:
+			struct ocfs2_xattr_value_root *xv = NULL;
+			xv = (struct ocfs2_xattr_value_root *)(val +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1329: FILE: fs/ocfs2/xattr.c:1217:
+				ret = __ocfs2_xattr_set_value_outside(inode,
+								xv,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 33)
#1344: FILE: fs/ocfs2/xattr.c:1232:
+			} else {
[...]
+				 ret = ocfs2_xattr_value_truncate(inode,

WARNING:TYPO_SPELLING: 'trucate' may be misspelled - perhaps 'truncate'?
#1347: FILE: fs/ocfs2/xattr.c:1235:
+				 * just trucate old value to zero.
 				        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1350: FILE: fs/ocfs2/xattr.c:1238:
+				 ret = ocfs2_xattr_value_truncate(inode,
+								 xs->xattr_bh,

WARNING:TYPO_SPELLING: 'attribue' may be misspelled - perhaps 'attribute'?
#1375: FILE: fs/ocfs2/xattr.c:1263:
+		/*set extended attribue in external blcok*/
 		               ^^^^^^^^

WARNING:TYPO_SPELLING: 'blcok' may be misspelled - perhaps 'block'?
#1375: FILE: fs/ocfs2/xattr.c:1263:
+		/*set extended attribue in external blcok*/
 		                                    ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1415: FILE: fs/ocfs2/xattr.c:1303:
+			struct ocfs2_inline_data *idata = &di->id2.i_data;
+			le16_add_cpu(&idata->id_count, -xattrsize);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1418: FILE: fs/ocfs2/xattr.c:1306:
+			struct ocfs2_extent_list *el = &di->id2.i_list;
+			le16_add_cpu(&el->l_count, -(xattrsize /

WARNING:LINE_SPACING: Missing a blank line after declarations
#1446: FILE: fs/ocfs2/xattr.c:1334:
+		size_t offs = le16_to_cpu(xs->here->xe_name_offset);
+		ret = ocfs2_xattr_set_value_outside(inode, xi, xs, offs);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1463: FILE: fs/ocfs2/xattr.c:1351:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1477: FILE: fs/ocfs2/xattr.c:1365:
+	xb_alloc_inode = ocfs2_get_system_file_inode(osb,
+				EXTENT_ALLOC_SYSTEM_INODE,

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1505: FILE: fs/ocfs2/xattr.c:1393:
+	iput(xb_alloc_inode);
 	^^^^

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#1510: FILE: fs/ocfs2/xattr.c:1398:
+static int ocfs2_remove_value_outside(struct inode*inode,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1541: FILE: fs/ocfs2/xattr.c:1429:
+{
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around xb->xb_attrs.xb_header
#1563: FILE: fs/ocfs2/xattr.c:1451:
+	header = &(xb->xb_attrs.xb_header);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#1665: FILE: fs/ocfs2/xattr.c:1553:
+		struct ocfs2_inline_data *idata = &di->id2.i_data;
+		free = le16_to_cpu(idata->id_count) - le64_to_cpu(di->i_size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1671: FILE: fs/ocfs2/xattr.c:1559:
+		struct ocfs2_extent_list *el = &di->id2.i_list;
+		free = (le16_to_cpu(el->l_count) -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1756: FILE: fs/ocfs2/xattr.c:1644:
+	ret = ocfs2_xattr_set_entry(inode, xi, xs,
+				(OCFS2_INLINE_XATTR_FL | OCFS2_HAS_XATTR_FL));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1789: FILE: fs/ocfs2/xattr.c:1677:
+	if (memcmp((void *)blk_bh->b_data, OCFS2_XATTR_BLOCK_SIGNATURE,
[...]
+			ret = -EFAULT;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1894: FILE: fs/ocfs2/xattr.c:1782:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1957: FILE: fs/ocfs2/xattr.c:1845:
+	xis.inode_bh = xbs.inode_bh = di_bh;

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#1963: FILE: fs/ocfs2/xattr.c:1851:
+	 * extended attribute and collect search infomation.
 	                                         ^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#2039: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2044: FILE: fs/ocfs2/xattr.h:1:
+/* -*- mode: c; c-basic-offset: 8; -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2065: FILE: fs/ocfs2/xattr.h:22:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2087: FILE: fs/ocfs2/xattr.h:44:
+extern ssize_t ocfs2_listxattr(struct dentry *, char *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#2087: FILE: fs/ocfs2/xattr.h:44:
+extern ssize_t ocfs2_listxattr(struct dentry *, char *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2087: FILE: fs/ocfs2/xattr.h:44:
+extern ssize_t ocfs2_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2087: FILE: fs/ocfs2/xattr.h:44:
+extern ssize_t ocfs2_listxattr(struct dentry *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2088: FILE: fs/ocfs2/xattr.h:45:
+extern int ocfs2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2088: FILE: fs/ocfs2/xattr.h:45:
+extern int ocfs2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2088: FILE: fs/ocfs2/xattr.h:45:
+extern int ocfs2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2088: FILE: fs/ocfs2/xattr.h:45:
+extern int ocfs2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2088: FILE: fs/ocfs2/xattr.h:45:
+extern int ocfs2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2088: FILE: fs/ocfs2/xattr.h:45:
+extern int ocfs2_xattr_get(struct inode *, int, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2089: FILE: fs/ocfs2/xattr.h:46:
+extern int ocfs2_xattr_set(struct inode *, int, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2089: FILE: fs/ocfs2/xattr.h:46:
+extern int ocfs2_xattr_set(struct inode *, int, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2089: FILE: fs/ocfs2/xattr.h:46:
+extern int ocfs2_xattr_set(struct inode *, int, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2089: FILE: fs/ocfs2/xattr.h:46:
+extern int ocfs2_xattr_set(struct inode *, int, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#2089: FILE: fs/ocfs2/xattr.h:46:
+extern int ocfs2_xattr_set(struct inode *, int, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2089: FILE: fs/ocfs2/xattr.h:46:
+extern int ocfs2_xattr_set(struct inode *, int, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2089: FILE: fs/ocfs2/xattr.h:46:
+extern int ocfs2_xattr_set(struct inode *, int, const char *, const void *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2091: FILE: fs/ocfs2/xattr.h:48:
+extern int ocfs2_xattr_remove(struct inode *inode, struct buffer_head *di_bh);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2101: FILE: fs/ocfs2/xattr_trusted.c:1:
+/* -*- mode: c; c-basic-offset: 8; -*-

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2123: FILE: fs/ocfs2/xattr_trusted.c:23:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2189: FILE: fs/ocfs2/xattr_user.c:1:
+/* -*- mode: c; c-basic-offset: 8; -*-

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2211: FILE: fs/ocfs2/xattr_user.c:23:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224667.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 39 warnings, 22 checks, 2124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224667.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
